#region License
/*
MIT License
Copyright ©2003-2006 Tao Framework Team
http://www.taoframework.com
All rights reserved.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/
#endregion License

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Runtime.InteropServices;

namespace Tao.GlBindGen
{
    static partial class SpecWriter
    {
        #region Write specs

        public static void WriteSpecs(string output_path, List<Function> functions, List<Function> wrappers, List<Constant> constants)
        {
            string filename = Path.Combine(output_path, Properties.Bind.Default.OutputClass + ".cs");

            if (!Directory.Exists(Properties.Bind.Default.OutputPath))
                Directory.CreateDirectory(Properties.Bind.Default.OutputPath);

            using (StreamWriter sw = new StreamWriter(filename, false))
            {

                Console.WriteLine("Writing Tao.OpenGl.Gl class to {0}", filename);

                WriteLicense(sw);
                sw.WriteLine();
                sw.WriteLine("using System;");
                sw.WriteLine("using System.Runtime.InteropServices;");
                sw.WriteLine("using System.Text;");
                sw.WriteLine();
                sw.WriteLine("namespace {0}", Properties.Bind.Default.OutputNamespace);
                sw.WriteLine("{");

                WriteTypes(sw);

                sw.WriteLine("    public static partial class {0}", Properties.Bind.Default.OutputClass);
                sw.WriteLine("    {");

                WritePrivateConstants(sw);
                WriteConstants(sw, constants);
                WriteFunctionSignatures(sw, functions);
                WriteDllImports(sw, functions);
                WriteWrappers(sw, wrappers);
                WriteConstructor(sw, functions);

                sw.WriteLine("    }");

                sw.WriteLine("}");

                sw.Flush();
            }
        }

        #endregion

        #region Write license

        private static void WriteLicense(StreamWriter streamWriter)
        {
            streamWriter.WriteLine("#region License");
            streamWriter.WriteLine("/*");
            streamWriter.WriteLine("THIS FILE IS AUTOMATICALLY GENERATED");
            streamWriter.WriteLine("DO NOT EDIT BY HAND!!");
            streamWriter.WriteLine();
            streamWriter.WriteLine("MIT License");
            streamWriter.WriteLine("Copyright 2003-2006 Tao Framework Team");
            streamWriter.WriteLine("http://www.taoframework.com");
            streamWriter.WriteLine("All rights reserved.");
            streamWriter.WriteLine();
            streamWriter.WriteLine("Permission is hereby granted, free of charge, to any person obtaining a copy");
            streamWriter.WriteLine("of this software and associated documentation files (the \"Software\"), to deal");
            streamWriter.WriteLine("in the Software without restriction, including without limitation the rights");
            streamWriter.WriteLine("to use, copy, modify, merge, publish, distribute, sublicense, and/or sell");
            streamWriter.WriteLine("copies of the Software, and to permit persons to whom the Software is");
            streamWriter.WriteLine("furnished to do so, subject to the following conditions:");
            streamWriter.WriteLine();
            streamWriter.WriteLine("The above copyright notice and this permission notice shall be included in all");
            streamWriter.WriteLine("copies or substantial portions of the Software.");
            streamWriter.WriteLine();
            streamWriter.WriteLine("THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR");
            streamWriter.WriteLine("IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,");
            streamWriter.WriteLine("FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE");
            streamWriter.WriteLine("AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER");
            streamWriter.WriteLine("LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,");
            streamWriter.WriteLine("OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE");
            streamWriter.WriteLine("SOFTWARE.");
            streamWriter.WriteLine("*/");
            streamWriter.WriteLine("#endregion License");
        }

        #endregion

        #region Write types

        private static void WriteTypes(StreamWriter sw)
        {
            sw.WriteLine("    #region Types");
            sw.WriteLine();
            foreach (string key in Translation.CSTypes.Keys)
            {
                sw.WriteLine("    using {0} = System.{1};", key, Translation.CSTypes[key]);
            }
            sw.WriteLine();
            sw.WriteLine("    #endregion");
            sw.WriteLine();
        }

        #endregion

        #region Write private constants

        private static void WritePrivateConstants(StreamWriter streamWriter)
        {
            streamWriter.WriteLine("        #region Private Constants");
            streamWriter.WriteLine();
            streamWriter.WriteLine("        #region string GL_NATIVE_LIBRARY");
            streamWriter.WriteLine();
            streamWriter.WriteLine("        /// <summary>");
            streamWriter.WriteLine("        /// Specifies OpenGl's native library archive.");
            streamWriter.WriteLine("        /// </summary>");
            streamWriter.WriteLine("        /// <remarks>");
            streamWriter.WriteLine("        /// Specifies opengl32.dll everywhere; will be mapped via .config for mono.");
            streamWriter.WriteLine("        /// </remarks>");
            streamWriter.WriteLine("        private const string GL_NATIVE_LIBRARY = \"opengl32.dll\";");
            streamWriter.WriteLine();
            streamWriter.WriteLine("        #endregion string GL_NATIVE_LIBRARY");
            streamWriter.WriteLine();
            streamWriter.WriteLine("        #endregion Private Constants");
            streamWriter.WriteLine();
        }

        #endregion WritePrivateConstants

        #region Write public constants

        private static void WriteConstants(StreamWriter sw, List<Constant> constants)
        {
            sw.WriteLine("        #region Public Constants");
            sw.WriteLine();

            // Disable "misising XML documentation warning". No documentation is available
            // on these constants, and adding empty comments and regions grind C# code editors
            // to a halt.
            sw.WriteLine("        #pragma warning disable 1591");
            sw.WriteLine();

            foreach (Constant c in constants)
            {
                sw.WriteLine("        public const GLuint {0};", c.ToString());
            }

            // Re-enable "misising XML documentation warning".
            sw.WriteLine();
            sw.WriteLine("        #pragma warning restore 1591");

            sw.WriteLine();
            sw.WriteLine("        #endregion Public Constants");
            sw.WriteLine();
        }

        #endregion

        #region Write delegate signatures

        /// <summary>
        /// Writes the delegate signatures and the delegate declarations for all opengl functions.
        /// These are put inside the static class: Tao.OpenGl.Gl.Delegates
        /// </summary>
        /// <param name="sw"></param>
        /// <param name="functions"></param>
        private static void WriteFunctionSignatures(StreamWriter sw, List<Function> functions)
        {
            sw.WriteLine("        #region internal static class Delegates");
            sw.WriteLine();
            sw.WriteLine("        /// <summary>");
            sw.WriteLine("        /// Contains delegate signatures for all OpenGL functions.");
            sw.WriteLine("        /// </summary>");
            sw.WriteLine("        internal static class Delegates");
            sw.WriteLine("        {");

            // ATTENTION! Do not remove this line unless the default behaviour of BeforeFieldInit
            // is changed, or an attribute is introduced to change this behaviour!
            // This empty static constructor ensures that all fields are initialized before a function call
            // (in the parent class) takes place. Without this, a function call will not cause the
            // proper initialization to take place (but only in Release builds, when run outside the devenv.
            // Try this for a hard-to-track down bug :) )
            sw.WriteLine("            static Delegates() { }");
            sw.WriteLine();

            foreach (Function f in functions)
            {
                sw.WriteLine("            #region " + f.Name);
                sw.WriteLine();
                sw.WriteLine("            /// <summary>");
                sw.WriteLine("            /// ");
                sw.WriteLine("            /// </summary>");
                sw.WriteLine("            public delegate {0};", f.ToString());
                sw.WriteLine("            public static {0} gl{0} = ({0})GetDelegateForExtensionMethod(\"gl{0}\", typeof(Delegates.{0}));", f.Name);
                sw.WriteLine();
                sw.WriteLine("            #endregion " + f.Name);
                sw.WriteLine();
            }

            sw.WriteLine("        }");
            sw.WriteLine("        #endregion internal static class Delegates");
            sw.WriteLine();
        }

        #endregion

        #region Write dll imports

        private static void WriteDllImports(StreamWriter sw, List<Function> functions)
        {
            sw.WriteLine("        #region internal static class Imports");
            sw.WriteLine();
            sw.WriteLine("        /// <summary>");
            sw.WriteLine("        /// Contains dll import signatures for OpenGL core (1.0 - 2.1) functions.");
            sw.WriteLine("        /// </summary>");
            sw.WriteLine("        internal static class Imports");
            sw.WriteLine("        {");

            // ATTENTION! Do not remove this line unless the default behaviour of BeforeFieldInit
            // is changed, or an attribute is introduced to change this behaviour!
            // This empty static constructor ensures that all fields are initialized before a function call
            // (in the parent class) takes place. Without this, a function call will not cause the
            // proper initialization to take place (but only in Release builds, when run outside the devenv.
            // Try this for a hard-to-track down bug :) )
            sw.WriteLine("            static Imports() { }");
            sw.WriteLine();

            foreach (Function f in functions)
            {
                if (!f.Extension)
                {
                    sw.WriteLine("            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = \"gl{0}\")]", f.Name);
                    sw.WriteLine("            public static extern {0};", f.ToString());
                    sw.WriteLine();
                }
            }

            sw.WriteLine("        }");
            sw.WriteLine("        #endregion internal static class Imports");
            sw.WriteLine();
        }

        #endregion

        #region Write constructor

        private static void WriteConstructor(StreamWriter sw, List<Function> functions)
        {
            sw.WriteLine("        #region static Constructor");
            sw.WriteLine();
            sw.WriteLine("        /// <summary>");
            sw.WriteLine("        /// Loads statically exported core OpenGL functions that do cannot be dynamically loaded.");
            sw.WriteLine("        /// </summary>");
            sw.WriteLine("        /// <remarks>");
            sw.WriteLine("        /// Statically exported functions are assumed not to be dynamically exported, something");
            sw.WriteLine("        /// that holds true for Mesa3D, but may or may not hold true for other driver providers.");
            sw.WriteLine("        /// </remarks>");
            sw.WriteLine("        static {0}()", Properties.Bind.Default.OutputClass);
            sw.WriteLine("        {");

            string[] core = { "1.0", "1.1", "1.2", "1.3", "1.4", "1.5", "2.0", "2.1" };

            foreach (Function f in functions)
            {
                if (IsCoreFunction(f, core))
                {
                    sw.WriteLine("            if (Delegates.gl{0} == null)", f.Name);
                    sw.WriteLine("            {");
                    sw.WriteLine("                {0}.Delegates.gl{1} = new {0}.Delegates.{1}({0}.Imports.{1});",
                        Properties.Bind.Default.OutputClass,
                        f.Name);
                    sw.WriteLine("            }");
                }
            }

            sw.WriteLine("        }");
            sw.WriteLine();
            sw.WriteLine("        #endregion static Constructor");
        }

        #endregion

        #region Write wrappers

        public static void WriteWrappers(StreamWriter sw, List<Function> wrappers)
        {
            sw.WriteLine("        #region Wrappers");
            sw.WriteLine();

            if (wrappers != null)
            {
                foreach (Function w in wrappers)
                {
                    sw.WriteLine("        #region {0}{1}", w.Name, w.Parameters.ToString());
                    sw.WriteLine();

                    sw.WriteLine("        /// <summary>");
                    sw.WriteLine("        /// ");
                    sw.WriteLine("        /// </summary>");
                    sw.WriteLine("        public static {0}", w.ToString("        ", true));

                    sw.WriteLine("        #endregion");
                    sw.WriteLine();
                }
            }

            sw.WriteLine("        #endregion Wrappers");
            sw.WriteLine();
        }

        #endregion

        #region IsImport

        private static bool IsCoreFunction(Function f, string[] import_list)
        {
            if (f.Extension)
            {
                return false;
            }

            foreach (string version in import_list)
            {
                if (f.Version == version)
                {
                    return true;
                }
            }

            return false;
        }

        #endregion
    }
}
