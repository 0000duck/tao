#region License
/*
THIS FILE IS AUTOMATICALLY GENERATED
DO NOT EDIT BY HAND!!

MIT License
Copyright 2003-2006 Tao Framework Team
http://www.taoframework.com
All rights reserved.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/
#endregion License

using System;
using System.Runtime.InteropServices;
using System.Text;

namespace Tao.OpenGl
{
    #pragma warning disable 1591
    #region Types
    using GLsizei = System.Int32;
    using GLsizeiptr = System.IntPtr;
    using GLintptr = System.IntPtr;
    using GLenum = System.Int32;
    using GLboolean = System.Int32;
    using GLbitfield = System.Int32;
    using GLchar = System.Char;
    using GLbyte = System.Byte;
    using GLubyte = System.Byte;
    using GLshort = System.Int16;
    using GLushort = System.Int16;
    using GLint = System.Int32;
    using GLuint = System.Int32;
    using GLfloat = System.Single;
    using GLclampf = System.Single;
    using GLdouble = System.Double;
    using GLclampd = System.Double;
    using GLstring = System.String;
    using GLsizeiptrARB = System.IntPtr;
    using GLintptrARB = System.IntPtr;
    using GLhandleARB = System.Int32;
    using GLhalfARB = System.Int16;
    using GLhalfNV = System.Int16;
    using GLcharARB = System.Char;
    using GLint64EXT = System.Int64;
    using GLuint64EXT = System.Int64;
    using GLint64 = System.Int64;
    using GLuint64 = System.Int64;
    #endregion

    /// <summary>
    /// 
    /// </summary>
    public static partial class Gl
    {
        #region Private Constants
        #region string GL_NATIVE_LIBRARY
        /// <summary>
        /// Specifies OpenGl's native library archive.
        /// </summary>
        /// <remarks>
        /// Specifies opengl32.dll everywhere; will be mapped via .config for mono.
        /// </remarks>
        private const string GL_NATIVE_LIBRARY = "opengl32.dll";
        #endregion string GL_NATIVE_LIBRARY
        #endregion Private Constants

        #region Public Constants
        #region GL_VERSION_1_1
        public const GLuint GL_VERSION_1_1 = 1;
        #endregion GL_VERSION_1_1

        #region GL_VERSION_1_2
        public const GLuint GL_VERSION_1_2 = 1;
        #endregion GL_VERSION_1_2

        #region GL_VERSION_1_3
        public const GLuint GL_VERSION_1_3 = 1;
        #endregion GL_VERSION_1_3

        #region GL_VERSION_1_4
        public const GLuint GL_VERSION_1_4 = 1;
        #endregion GL_VERSION_1_4

        #region GL_VERSION_1_5
        public const GLuint GL_VERSION_1_5 = 1;
        #endregion GL_VERSION_1_5

        #region GL_ARB_imaging
        public const GLuint GL_ARB_imaging = 1;
        #endregion GL_ARB_imaging

        #region GL_EXT_abgr
        public const GLuint GL_EXT_abgr = 1;
        #endregion GL_EXT_abgr

        #region GL_EXT_blend_color
        public const GLuint GL_EXT_blend_color = 1;
        #endregion GL_EXT_blend_color

        #region GL_EXT_blend_logic_op
        public const GLuint GL_EXT_blend_logic_op = 1;
        #endregion GL_EXT_blend_logic_op

        #region GL_EXT_blend_minmax
        public const GLuint GL_EXT_blend_minmax = 1;
        #endregion GL_EXT_blend_minmax

        #region GL_EXT_blend_subtract
        public const GLuint GL_EXT_blend_subtract = 1;
        #endregion GL_EXT_blend_subtract

        #region GL_EXT_cmyka
        public const GLuint GL_EXT_cmyka = 1;
        #endregion GL_EXT_cmyka

        #region GL_EXT_convolution
        public const GLuint GL_EXT_convolution = 1;
        #endregion GL_EXT_convolution

        #region GL_EXT_copy_texture
        public const GLuint GL_EXT_copy_texture = 1;
        #endregion GL_EXT_copy_texture

        #region GL_EXT_histogram
        public const GLuint GL_EXT_histogram = 1;
        #endregion GL_EXT_histogram

        #region GL_EXT_packed_pixels
        public const GLuint GL_EXT_packed_pixels = 1;
        #endregion GL_EXT_packed_pixels

        #region GL_EXT_point_parameters
        public const GLuint GL_EXT_point_parameters = 1;
        #endregion GL_EXT_point_parameters

        #region GL_EXT_polygon_offset
        public const GLuint GL_EXT_polygon_offset = 1;
        #endregion GL_EXT_polygon_offset

        #region GL_EXT_rescale_normal
        public const GLuint GL_EXT_rescale_normal = 1;
        #endregion GL_EXT_rescale_normal

        #region GL_EXT_shared_texture_palette
        public const GLuint GL_EXT_shared_texture_palette = 1;
        #endregion GL_EXT_shared_texture_palette

        #region GL_EXT_subtexture
        public const GLuint GL_EXT_subtexture = 1;
        #endregion GL_EXT_subtexture

        #region GL_EXT_texture
        public const GLuint GL_EXT_texture = 1;
        #endregion GL_EXT_texture

        #region GL_EXT_texture3D
        public const GLuint GL_EXT_texture3D = 1;
        #endregion GL_EXT_texture3D

        #region GL_EXT_texture_object
        public const GLuint GL_EXT_texture_object = 1;
        #endregion GL_EXT_texture_object

        #region GL_EXT_vertex_array
        public const GLuint GL_EXT_vertex_array = 1;
        #endregion GL_EXT_vertex_array

        #region GL_SGIS_detail_texture
        public const GLuint GL_SGIS_detail_texture = 1;
        #endregion GL_SGIS_detail_texture

        #region GL_SGIS_fog_function
        public const GLuint GL_SGIS_fog_function = 1;
        #endregion GL_SGIS_fog_function

        #region GL_SGIS_generate_mipmap
        public const GLuint GL_SGIS_generate_mipmap = 1;
        #endregion GL_SGIS_generate_mipmap

        #region GL_SGIS_multisample
        public const GLuint GL_SGIS_multisample = 1;
        #endregion GL_SGIS_multisample

        #region GL_SGIS_pixel_texture
        public const GLuint GL_SGIS_pixel_texture = 1;
        #endregion GL_SGIS_pixel_texture

        #region GL_SGIS_point_line_texgen
        public const GLuint GL_SGIS_point_line_texgen = 1;
        #endregion GL_SGIS_point_line_texgen

        #region GL_SGIS_point_parameters
        public const GLuint GL_SGIS_point_parameters = 1;
        #endregion GL_SGIS_point_parameters

        #region GL_SGIS_sharpen_texture
        public const GLuint GL_SGIS_sharpen_texture = 1;
        #endregion GL_SGIS_sharpen_texture

        #region GL_SGIS_texture4D
        public const GLuint GL_SGIS_texture4D = 1;
        #endregion GL_SGIS_texture4D

        #region GL_SGIS_texture_border_clamp
        public const GLuint GL_SGIS_texture_border_clamp = 1;
        #endregion GL_SGIS_texture_border_clamp

        #region GL_SGIS_texture_edge_clamp
        public const GLuint GL_SGIS_texture_edge_clamp = 1;
        #endregion GL_SGIS_texture_edge_clamp

        #region GL_SGIS_texture_filter4
        public const GLuint GL_SGIS_texture_filter4 = 1;
        #endregion GL_SGIS_texture_filter4

        #region GL_SGIS_texture_lod
        public const GLuint GL_SGIS_texture_lod = 1;
        #endregion GL_SGIS_texture_lod

        #region GL_SGIS_texture_select
        public const GLuint GL_SGIS_texture_select = 1;
        #endregion GL_SGIS_texture_select

        #region GL_SGIX_async
        public const GLuint GL_SGIX_async = 1;
        #endregion GL_SGIX_async

        #region GL_SGIX_async_histogram
        public const GLuint GL_SGIX_async_histogram = 1;
        #endregion GL_SGIX_async_histogram

        #region GL_SGIX_async_pixel
        public const GLuint GL_SGIX_async_pixel = 1;
        #endregion GL_SGIX_async_pixel

        #region GL_SGIX_blend_alpha_minmax
        public const GLuint GL_SGIX_blend_alpha_minmax = 1;
        #endregion GL_SGIX_blend_alpha_minmax

        #region GL_SGIX_calligraphic_fragment
        public const GLuint GL_SGIX_calligraphic_fragment = 1;
        #endregion GL_SGIX_calligraphic_fragment

        #region GL_SGIX_clipmap
        public const GLuint GL_SGIX_clipmap = 1;
        #endregion GL_SGIX_clipmap

        #region GL_SGIX_convolution_accuracy
        public const GLuint GL_SGIX_convolution_accuracy = 1;
        #endregion GL_SGIX_convolution_accuracy

        #region GL_SGIX_depth_texture
        public const GLuint GL_SGIX_depth_texture = 1;
        #endregion GL_SGIX_depth_texture

        #region GL_SGIX_flush_raster
        public const GLuint GL_SGIX_flush_raster = 1;
        #endregion GL_SGIX_flush_raster

        #region GL_SGIX_fog_offset
        public const GLuint GL_SGIX_fog_offset = 1;
        #endregion GL_SGIX_fog_offset

        #region GL_SGIX_fragment_lighting
        public const GLuint GL_SGIX_fragment_lighting = 1;
        #endregion GL_SGIX_fragment_lighting

        #region GL_SGIX_framezoom
        public const GLuint GL_SGIX_framezoom = 1;
        #endregion GL_SGIX_framezoom

        #region GL_SGIX_icc_texture
        public const GLuint GL_SGIX_icc_texture = 1;
        #endregion GL_SGIX_icc_texture

        #region GL_SGIX_impact_pixel_texture
        public const GLuint GL_SGIX_impact_pixel_texture = 1;
        #endregion GL_SGIX_impact_pixel_texture

        #region GL_SGIX_instruments
        public const GLuint GL_SGIX_instruments = 1;
        #endregion GL_SGIX_instruments

        #region GL_SGIX_interlace
        public const GLuint GL_SGIX_interlace = 1;
        #endregion GL_SGIX_interlace

        #region GL_SGIX_ir_instrument1
        public const GLuint GL_SGIX_ir_instrument1 = 1;
        #endregion GL_SGIX_ir_instrument1

        #region GL_SGIX_list_priority
        public const GLuint GL_SGIX_list_priority = 1;
        #endregion GL_SGIX_list_priority

        #region GL_SGIX_pixel_texture
        public const GLuint GL_SGIX_pixel_texture = 1;
        #endregion GL_SGIX_pixel_texture

        #region GL_SGIX_pixel_tiles
        public const GLuint GL_SGIX_pixel_tiles = 1;
        #endregion GL_SGIX_pixel_tiles

        #region GL_SGIX_polynomial_ffd
        public const GLuint GL_SGIX_polynomial_ffd = 1;
        #endregion GL_SGIX_polynomial_ffd

        #region GL_SGIX_reference_plane
        public const GLuint GL_SGIX_reference_plane = 1;
        #endregion GL_SGIX_reference_plane

        #region GL_SGIX_resample
        public const GLuint GL_SGIX_resample = 1;
        #endregion GL_SGIX_resample

        #region GL_SGIX_scalebias_hint
        public const GLuint GL_SGIX_scalebias_hint = 1;
        #endregion GL_SGIX_scalebias_hint

        #region GL_SGIX_shadow
        public const GLuint GL_SGIX_shadow = 1;
        #endregion GL_SGIX_shadow

        #region GL_SGIX_shadow_ambient
        public const GLuint GL_SGIX_shadow_ambient = 1;
        #endregion GL_SGIX_shadow_ambient

        #region GL_SGIX_sprite
        public const GLuint GL_SGIX_sprite = 1;
        #endregion GL_SGIX_sprite

        #region GL_SGIX_subsample
        public const GLuint GL_SGIX_subsample = 1;
        #endregion GL_SGIX_subsample

        #region GL_SGIX_tag_sample_buffer
        public const GLuint GL_SGIX_tag_sample_buffer = 1;
        #endregion GL_SGIX_tag_sample_buffer

        #region GL_SGIX_texture_add_env
        public const GLuint GL_SGIX_texture_add_env = 1;
        #endregion GL_SGIX_texture_add_env

        #region GL_SGIX_texture_coordinate_clamp
        public const GLuint GL_SGIX_texture_coordinate_clamp = 1;
        #endregion GL_SGIX_texture_coordinate_clamp

        #region GL_SGIX_texture_lod_bias
        public const GLuint GL_SGIX_texture_lod_bias = 1;
        #endregion GL_SGIX_texture_lod_bias

        #region GL_SGIX_texture_multi_buffer
        public const GLuint GL_SGIX_texture_multi_buffer = 1;
        #endregion GL_SGIX_texture_multi_buffer

        #region GL_SGIX_texture_scale_bias
        public const GLuint GL_SGIX_texture_scale_bias = 1;
        #endregion GL_SGIX_texture_scale_bias

        #region GL_SGIX_vertex_preclip
        public const GLuint GL_SGIX_vertex_preclip = 1;
        #endregion GL_SGIX_vertex_preclip

        #region GL_SGIX_ycrcb
        public const GLuint GL_SGIX_ycrcb = 1;
        #endregion GL_SGIX_ycrcb

        #region GL_SGI_color_matrix
        public const GLuint GL_SGI_color_matrix = 1;
        #endregion GL_SGI_color_matrix

        #region GL_SGI_color_table
        public const GLuint GL_SGI_color_table = 1;
        #endregion GL_SGI_color_table

        #region GL_SGI_texture_color_table
        public const GLuint GL_SGI_texture_color_table = 1;
        #endregion GL_SGI_texture_color_table

        #region GL_CURRENT_BIT
        public const GLuint GL_CURRENT_BIT = 0x00000001;
        #endregion GL_CURRENT_BIT

        #region GL_POINT_BIT
        public const GLuint GL_POINT_BIT = 0x00000002;
        #endregion GL_POINT_BIT

        #region GL_LINE_BIT
        public const GLuint GL_LINE_BIT = 0x00000004;
        #endregion GL_LINE_BIT

        #region GL_POLYGON_BIT
        public const GLuint GL_POLYGON_BIT = 0x00000008;
        #endregion GL_POLYGON_BIT

        #region GL_POLYGON_STIPPLE_BIT
        public const GLuint GL_POLYGON_STIPPLE_BIT = 0x00000010;
        #endregion GL_POLYGON_STIPPLE_BIT

        #region GL_PIXEL_MODE_BIT
        public const GLuint GL_PIXEL_MODE_BIT = 0x00000020;
        #endregion GL_PIXEL_MODE_BIT

        #region GL_LIGHTING_BIT
        public const GLuint GL_LIGHTING_BIT = 0x00000040;
        #endregion GL_LIGHTING_BIT

        #region GL_FOG_BIT
        public const GLuint GL_FOG_BIT = 0x00000080;
        #endregion GL_FOG_BIT

        #region GL_DEPTH_BUFFER_BIT
        public const GLuint GL_DEPTH_BUFFER_BIT = 0x00000100;
        #endregion GL_DEPTH_BUFFER_BIT

        #region GL_ACCUM_BUFFER_BIT
        public const GLuint GL_ACCUM_BUFFER_BIT = 0x00000200;
        #endregion GL_ACCUM_BUFFER_BIT

        #region GL_STENCIL_BUFFER_BIT
        public const GLuint GL_STENCIL_BUFFER_BIT = 0x00000400;
        #endregion GL_STENCIL_BUFFER_BIT

        #region GL_VIEWPORT_BIT
        public const GLuint GL_VIEWPORT_BIT = 0x00000800;
        #endregion GL_VIEWPORT_BIT

        #region GL_TRANSFORM_BIT
        public const GLuint GL_TRANSFORM_BIT = 0x00001000;
        #endregion GL_TRANSFORM_BIT

        #region GL_ENABLE_BIT
        public const GLuint GL_ENABLE_BIT = 0x00002000;
        #endregion GL_ENABLE_BIT

        #region GL_COLOR_BUFFER_BIT
        public const GLuint GL_COLOR_BUFFER_BIT = 0x00004000;
        #endregion GL_COLOR_BUFFER_BIT

        #region GL_HINT_BIT
        public const GLuint GL_HINT_BIT = 0x00008000;
        #endregion GL_HINT_BIT

        #region GL_EVAL_BIT
        public const GLuint GL_EVAL_BIT = 0x00010000;
        #endregion GL_EVAL_BIT

        #region GL_LIST_BIT
        public const GLuint GL_LIST_BIT = 0x00020000;
        #endregion GL_LIST_BIT

        #region GL_TEXTURE_BIT
        public const GLuint GL_TEXTURE_BIT = 0x00040000;
        #endregion GL_TEXTURE_BIT

        #region GL_SCISSOR_BIT
        public const GLuint GL_SCISSOR_BIT = 0x00080000;
        #endregion GL_SCISSOR_BIT

        #region GL_ALL_ATTRIB_BITS
        public const GLuint GL_ALL_ATTRIB_BITS = unchecked((int)0xFFFFFFFF);
        #endregion GL_ALL_ATTRIB_BITS

        #region GL_CLIENT_PIXEL_STORE_BIT
        public const GLuint GL_CLIENT_PIXEL_STORE_BIT = 0x00000001;
        #endregion GL_CLIENT_PIXEL_STORE_BIT

        #region GL_CLIENT_VERTEX_ARRAY_BIT
        public const GLuint GL_CLIENT_VERTEX_ARRAY_BIT = 0x00000002;
        #endregion GL_CLIENT_VERTEX_ARRAY_BIT

        #region GL_CLIENT_ALL_ATTRIB_BITS
        public const GLuint GL_CLIENT_ALL_ATTRIB_BITS = unchecked((int)0xFFFFFFFF);
        #endregion GL_CLIENT_ALL_ATTRIB_BITS

        #region GL_FALSE
        public const GLuint GL_FALSE = 0;
        #endregion GL_FALSE

        #region GL_TRUE
        public const GLuint GL_TRUE = 1;
        #endregion GL_TRUE

        #region GL_POINTS
        public const GLuint GL_POINTS = 0x0000;
        #endregion GL_POINTS

        #region GL_LINES
        public const GLuint GL_LINES = 0x0001;
        #endregion GL_LINES

        #region GL_LINE_LOOP
        public const GLuint GL_LINE_LOOP = 0x0002;
        #endregion GL_LINE_LOOP

        #region GL_LINE_STRIP
        public const GLuint GL_LINE_STRIP = 0x0003;
        #endregion GL_LINE_STRIP

        #region GL_TRIANGLES
        public const GLuint GL_TRIANGLES = 0x0004;
        #endregion GL_TRIANGLES

        #region GL_TRIANGLE_STRIP
        public const GLuint GL_TRIANGLE_STRIP = 0x0005;
        #endregion GL_TRIANGLE_STRIP

        #region GL_TRIANGLE_FAN
        public const GLuint GL_TRIANGLE_FAN = 0x0006;
        #endregion GL_TRIANGLE_FAN

        #region GL_QUADS
        public const GLuint GL_QUADS = 0x0007;
        #endregion GL_QUADS

        #region GL_QUAD_STRIP
        public const GLuint GL_QUAD_STRIP = 0x0008;
        #endregion GL_QUAD_STRIP

        #region GL_POLYGON
        public const GLuint GL_POLYGON = 0x0009;
        #endregion GL_POLYGON

        #region GL_ACCUM
        public const GLuint GL_ACCUM = 0x0100;
        #endregion GL_ACCUM

        #region GL_LOAD
        public const GLuint GL_LOAD = 0x0101;
        #endregion GL_LOAD

        #region GL_RETURN
        public const GLuint GL_RETURN = 0x0102;
        #endregion GL_RETURN

        #region GL_MULT
        public const GLuint GL_MULT = 0x0103;
        #endregion GL_MULT

        #region GL_ADD
        public const GLuint GL_ADD = 0x0104;
        #endregion GL_ADD

        #region GL_NEVER
        public const GLuint GL_NEVER = 0x0200;
        #endregion GL_NEVER

        #region GL_LESS
        public const GLuint GL_LESS = 0x0201;
        #endregion GL_LESS

        #region GL_EQUAL
        public const GLuint GL_EQUAL = 0x0202;
        #endregion GL_EQUAL

        #region GL_LEQUAL
        public const GLuint GL_LEQUAL = 0x0203;
        #endregion GL_LEQUAL

        #region GL_GREATER
        public const GLuint GL_GREATER = 0x0204;
        #endregion GL_GREATER

        #region GL_NOTEQUAL
        public const GLuint GL_NOTEQUAL = 0x0205;
        #endregion GL_NOTEQUAL

        #region GL_GEQUAL
        public const GLuint GL_GEQUAL = 0x0206;
        #endregion GL_GEQUAL

        #region GL_ALWAYS
        public const GLuint GL_ALWAYS = 0x0207;
        #endregion GL_ALWAYS

        #region GL_ZERO
        public const GLuint GL_ZERO = 0;
        #endregion GL_ZERO

        #region GL_ONE
        public const GLuint GL_ONE = 1;
        #endregion GL_ONE

        #region GL_SRC_COLOR
        public const GLuint GL_SRC_COLOR = 0x0300;
        #endregion GL_SRC_COLOR

        #region GL_ONE_MINUS_SRC_COLOR
        public const GLuint GL_ONE_MINUS_SRC_COLOR = 0x0301;
        #endregion GL_ONE_MINUS_SRC_COLOR

        #region GL_SRC_ALPHA
        public const GLuint GL_SRC_ALPHA = 0x0302;
        #endregion GL_SRC_ALPHA

        #region GL_ONE_MINUS_SRC_ALPHA
        public const GLuint GL_ONE_MINUS_SRC_ALPHA = 0x0303;
        #endregion GL_ONE_MINUS_SRC_ALPHA

        #region GL_DST_ALPHA
        public const GLuint GL_DST_ALPHA = 0x0304;
        #endregion GL_DST_ALPHA

        #region GL_ONE_MINUS_DST_ALPHA
        public const GLuint GL_ONE_MINUS_DST_ALPHA = 0x0305;
        #endregion GL_ONE_MINUS_DST_ALPHA

        #region GL_DST_COLOR
        public const GLuint GL_DST_COLOR = 0x0306;
        #endregion GL_DST_COLOR

        #region GL_ONE_MINUS_DST_COLOR
        public const GLuint GL_ONE_MINUS_DST_COLOR = 0x0307;
        #endregion GL_ONE_MINUS_DST_COLOR

        #region GL_SRC_ALPHA_SATURATE
        public const GLuint GL_SRC_ALPHA_SATURATE = 0x0308;
        #endregion GL_SRC_ALPHA_SATURATE

        #region GL_NONE
        public const GLuint GL_NONE = 0;
        #endregion GL_NONE

        #region GL_FRONT_LEFT
        public const GLuint GL_FRONT_LEFT = 0x0400;
        #endregion GL_FRONT_LEFT

        #region GL_FRONT_RIGHT
        public const GLuint GL_FRONT_RIGHT = 0x0401;
        #endregion GL_FRONT_RIGHT

        #region GL_BACK_LEFT
        public const GLuint GL_BACK_LEFT = 0x0402;
        #endregion GL_BACK_LEFT

        #region GL_BACK_RIGHT
        public const GLuint GL_BACK_RIGHT = 0x0403;
        #endregion GL_BACK_RIGHT

        #region GL_FRONT
        public const GLuint GL_FRONT = 0x0404;
        #endregion GL_FRONT

        #region GL_BACK
        public const GLuint GL_BACK = 0x0405;
        #endregion GL_BACK

        #region GL_LEFT
        public const GLuint GL_LEFT = 0x0406;
        #endregion GL_LEFT

        #region GL_RIGHT
        public const GLuint GL_RIGHT = 0x0407;
        #endregion GL_RIGHT

        #region GL_FRONT_AND_BACK
        public const GLuint GL_FRONT_AND_BACK = 0x0408;
        #endregion GL_FRONT_AND_BACK

        #region GL_AUX0
        public const GLuint GL_AUX0 = 0x0409;
        #endregion GL_AUX0

        #region GL_AUX1
        public const GLuint GL_AUX1 = 0x040A;
        #endregion GL_AUX1

        #region GL_AUX2
        public const GLuint GL_AUX2 = 0x040B;
        #endregion GL_AUX2

        #region GL_AUX3
        public const GLuint GL_AUX3 = 0x040C;
        #endregion GL_AUX3

        #region GL_NO_ERROR
        public const GLuint GL_NO_ERROR = 0;
        #endregion GL_NO_ERROR

        #region GL_INVALID_ENUM
        public const GLuint GL_INVALID_ENUM = 0x0500;
        #endregion GL_INVALID_ENUM

        #region GL_INVALID_VALUE
        public const GLuint GL_INVALID_VALUE = 0x0501;
        #endregion GL_INVALID_VALUE

        #region GL_INVALID_OPERATION
        public const GLuint GL_INVALID_OPERATION = 0x0502;
        #endregion GL_INVALID_OPERATION

        #region GL_STACK_OVERFLOW
        public const GLuint GL_STACK_OVERFLOW = 0x0503;
        #endregion GL_STACK_OVERFLOW

        #region GL_STACK_UNDERFLOW
        public const GLuint GL_STACK_UNDERFLOW = 0x0504;
        #endregion GL_STACK_UNDERFLOW

        #region GL_OUT_OF_MEMORY
        public const GLuint GL_OUT_OF_MEMORY = 0x0505;
        #endregion GL_OUT_OF_MEMORY

        #region GL_2D
        public const GLuint GL_2D = 0x0600;
        #endregion GL_2D

        #region GL_3D
        public const GLuint GL_3D = 0x0601;
        #endregion GL_3D

        #region GL_3D_COLOR
        public const GLuint GL_3D_COLOR = 0x0602;
        #endregion GL_3D_COLOR

        #region GL_3D_COLOR_TEXTURE
        public const GLuint GL_3D_COLOR_TEXTURE = 0x0603;
        #endregion GL_3D_COLOR_TEXTURE

        #region GL_4D_COLOR_TEXTURE
        public const GLuint GL_4D_COLOR_TEXTURE = 0x0604;
        #endregion GL_4D_COLOR_TEXTURE

        #region GL_PASS_THROUGH_TOKEN
        public const GLuint GL_PASS_THROUGH_TOKEN = 0x0700;
        #endregion GL_PASS_THROUGH_TOKEN

        #region GL_POINT_TOKEN
        public const GLuint GL_POINT_TOKEN = 0x0701;
        #endregion GL_POINT_TOKEN

        #region GL_LINE_TOKEN
        public const GLuint GL_LINE_TOKEN = 0x0702;
        #endregion GL_LINE_TOKEN

        #region GL_POLYGON_TOKEN
        public const GLuint GL_POLYGON_TOKEN = 0x0703;
        #endregion GL_POLYGON_TOKEN

        #region GL_BITMAP_TOKEN
        public const GLuint GL_BITMAP_TOKEN = 0x0704;
        #endregion GL_BITMAP_TOKEN

        #region GL_DRAW_PIXEL_TOKEN
        public const GLuint GL_DRAW_PIXEL_TOKEN = 0x0705;
        #endregion GL_DRAW_PIXEL_TOKEN

        #region GL_COPY_PIXEL_TOKEN
        public const GLuint GL_COPY_PIXEL_TOKEN = 0x0706;
        #endregion GL_COPY_PIXEL_TOKEN

        #region GL_LINE_RESET_TOKEN
        public const GLuint GL_LINE_RESET_TOKEN = 0x0707;
        #endregion GL_LINE_RESET_TOKEN

        #region GL_TEXTURE_DEFORMATION_BIT_SGIX
        public const GLuint GL_TEXTURE_DEFORMATION_BIT_SGIX = 0x00000001;
        #endregion GL_TEXTURE_DEFORMATION_BIT_SGIX

        #region GL_GEOMETRY_DEFORMATION_BIT_SGIX
        public const GLuint GL_GEOMETRY_DEFORMATION_BIT_SGIX = 0x00000002;
        #endregion GL_GEOMETRY_DEFORMATION_BIT_SGIX

        #region GL_EXP
        public const GLuint GL_EXP = 0x0800;
        #endregion GL_EXP

        #region GL_EXP2
        public const GLuint GL_EXP2 = 0x0801;
        #endregion GL_EXP2

        #region GL_CW
        public const GLuint GL_CW = 0x0900;
        #endregion GL_CW

        #region GL_CCW
        public const GLuint GL_CCW = 0x0901;
        #endregion GL_CCW

        #region GL_COEFF
        public const GLuint GL_COEFF = 0x0A00;
        #endregion GL_COEFF

        #region GL_ORDER
        public const GLuint GL_ORDER = 0x0A01;
        #endregion GL_ORDER

        #region GL_DOMAIN
        public const GLuint GL_DOMAIN = 0x0A02;
        #endregion GL_DOMAIN

        #region GL_PIXEL_MAP_I_TO_I
        public const GLuint GL_PIXEL_MAP_I_TO_I = 0x0C70;
        #endregion GL_PIXEL_MAP_I_TO_I

        #region GL_PIXEL_MAP_S_TO_S
        public const GLuint GL_PIXEL_MAP_S_TO_S = 0x0C71;
        #endregion GL_PIXEL_MAP_S_TO_S

        #region GL_PIXEL_MAP_I_TO_R
        public const GLuint GL_PIXEL_MAP_I_TO_R = 0x0C72;
        #endregion GL_PIXEL_MAP_I_TO_R

        #region GL_PIXEL_MAP_I_TO_G
        public const GLuint GL_PIXEL_MAP_I_TO_G = 0x0C73;
        #endregion GL_PIXEL_MAP_I_TO_G

        #region GL_PIXEL_MAP_I_TO_B
        public const GLuint GL_PIXEL_MAP_I_TO_B = 0x0C74;
        #endregion GL_PIXEL_MAP_I_TO_B

        #region GL_PIXEL_MAP_I_TO_A
        public const GLuint GL_PIXEL_MAP_I_TO_A = 0x0C75;
        #endregion GL_PIXEL_MAP_I_TO_A

        #region GL_PIXEL_MAP_R_TO_R
        public const GLuint GL_PIXEL_MAP_R_TO_R = 0x0C76;
        #endregion GL_PIXEL_MAP_R_TO_R

        #region GL_PIXEL_MAP_G_TO_G
        public const GLuint GL_PIXEL_MAP_G_TO_G = 0x0C77;
        #endregion GL_PIXEL_MAP_G_TO_G

        #region GL_PIXEL_MAP_B_TO_B
        public const GLuint GL_PIXEL_MAP_B_TO_B = 0x0C78;
        #endregion GL_PIXEL_MAP_B_TO_B

        #region GL_PIXEL_MAP_A_TO_A
        public const GLuint GL_PIXEL_MAP_A_TO_A = 0x0C79;
        #endregion GL_PIXEL_MAP_A_TO_A

        #region GL_VERTEX_ARRAY_POINTER
        public const GLuint GL_VERTEX_ARRAY_POINTER = 0x808E;
        #endregion GL_VERTEX_ARRAY_POINTER

        #region GL_NORMAL_ARRAY_POINTER
        public const GLuint GL_NORMAL_ARRAY_POINTER = 0x808F;
        #endregion GL_NORMAL_ARRAY_POINTER

        #region GL_COLOR_ARRAY_POINTER
        public const GLuint GL_COLOR_ARRAY_POINTER = 0x8090;
        #endregion GL_COLOR_ARRAY_POINTER

        #region GL_INDEX_ARRAY_POINTER
        public const GLuint GL_INDEX_ARRAY_POINTER = 0x8091;
        #endregion GL_INDEX_ARRAY_POINTER

        #region GL_TEXTURE_COORD_ARRAY_POINTER
        public const GLuint GL_TEXTURE_COORD_ARRAY_POINTER = 0x8092;
        #endregion GL_TEXTURE_COORD_ARRAY_POINTER

        #region GL_EDGE_FLAG_ARRAY_POINTER
        public const GLuint GL_EDGE_FLAG_ARRAY_POINTER = 0x8093;
        #endregion GL_EDGE_FLAG_ARRAY_POINTER

        #region GL_FEEDBACK_BUFFER_POINTER
        public const GLuint GL_FEEDBACK_BUFFER_POINTER = 0x0DF0;
        #endregion GL_FEEDBACK_BUFFER_POINTER

        #region GL_SELECTION_BUFFER_POINTER
        public const GLuint GL_SELECTION_BUFFER_POINTER = 0x0DF3;
        #endregion GL_SELECTION_BUFFER_POINTER

        #region GL_CURRENT_COLOR
        public const GLuint GL_CURRENT_COLOR = 0x0B00;
        #endregion GL_CURRENT_COLOR

        #region GL_CURRENT_INDEX
        public const GLuint GL_CURRENT_INDEX = 0x0B01;
        #endregion GL_CURRENT_INDEX

        #region GL_CURRENT_NORMAL
        public const GLuint GL_CURRENT_NORMAL = 0x0B02;
        #endregion GL_CURRENT_NORMAL

        #region GL_CURRENT_TEXTURE_COORDS
        public const GLuint GL_CURRENT_TEXTURE_COORDS = 0x0B03;
        #endregion GL_CURRENT_TEXTURE_COORDS

        #region GL_CURRENT_RASTER_COLOR
        public const GLuint GL_CURRENT_RASTER_COLOR = 0x0B04;
        #endregion GL_CURRENT_RASTER_COLOR

        #region GL_CURRENT_RASTER_INDEX
        public const GLuint GL_CURRENT_RASTER_INDEX = 0x0B05;
        #endregion GL_CURRENT_RASTER_INDEX

        #region GL_CURRENT_RASTER_TEXTURE_COORDS
        public const GLuint GL_CURRENT_RASTER_TEXTURE_COORDS = 0x0B06;
        #endregion GL_CURRENT_RASTER_TEXTURE_COORDS

        #region GL_CURRENT_RASTER_POSITION
        public const GLuint GL_CURRENT_RASTER_POSITION = 0x0B07;
        #endregion GL_CURRENT_RASTER_POSITION

        #region GL_CURRENT_RASTER_POSITION_VALID
        public const GLuint GL_CURRENT_RASTER_POSITION_VALID = 0x0B08;
        #endregion GL_CURRENT_RASTER_POSITION_VALID

        #region GL_CURRENT_RASTER_DISTANCE
        public const GLuint GL_CURRENT_RASTER_DISTANCE = 0x0B09;
        #endregion GL_CURRENT_RASTER_DISTANCE

        #region GL_POINT_SMOOTH
        public const GLuint GL_POINT_SMOOTH = 0x0B10;
        #endregion GL_POINT_SMOOTH

        #region GL_POINT_SIZE
        public const GLuint GL_POINT_SIZE = 0x0B11;
        #endregion GL_POINT_SIZE

        #region GL_POINT_SIZE_RANGE
        public const GLuint GL_POINT_SIZE_RANGE = 0x0B12;
        #endregion GL_POINT_SIZE_RANGE

        #region GL_POINT_SIZE_GRANULARITY
        public const GLuint GL_POINT_SIZE_GRANULARITY = 0x0B13;
        #endregion GL_POINT_SIZE_GRANULARITY

        #region GL_LINE_SMOOTH
        public const GLuint GL_LINE_SMOOTH = 0x0B20;
        #endregion GL_LINE_SMOOTH

        #region GL_LINE_WIDTH
        public const GLuint GL_LINE_WIDTH = 0x0B21;
        #endregion GL_LINE_WIDTH

        #region GL_LINE_WIDTH_RANGE
        public const GLuint GL_LINE_WIDTH_RANGE = 0x0B22;
        #endregion GL_LINE_WIDTH_RANGE

        #region GL_LINE_WIDTH_GRANULARITY
        public const GLuint GL_LINE_WIDTH_GRANULARITY = 0x0B23;
        #endregion GL_LINE_WIDTH_GRANULARITY

        #region GL_LINE_STIPPLE
        public const GLuint GL_LINE_STIPPLE = 0x0B24;
        #endregion GL_LINE_STIPPLE

        #region GL_LINE_STIPPLE_PATTERN
        public const GLuint GL_LINE_STIPPLE_PATTERN = 0x0B25;
        #endregion GL_LINE_STIPPLE_PATTERN

        #region GL_LINE_STIPPLE_REPEAT
        public const GLuint GL_LINE_STIPPLE_REPEAT = 0x0B26;
        #endregion GL_LINE_STIPPLE_REPEAT

        #region GL_LIST_MODE
        public const GLuint GL_LIST_MODE = 0x0B30;
        #endregion GL_LIST_MODE

        #region GL_MAX_LIST_NESTING
        public const GLuint GL_MAX_LIST_NESTING = 0x0B31;
        #endregion GL_MAX_LIST_NESTING

        #region GL_LIST_BASE
        public const GLuint GL_LIST_BASE = 0x0B32;
        #endregion GL_LIST_BASE

        #region GL_LIST_INDEX
        public const GLuint GL_LIST_INDEX = 0x0B33;
        #endregion GL_LIST_INDEX

        #region GL_POLYGON_MODE
        public const GLuint GL_POLYGON_MODE = 0x0B40;
        #endregion GL_POLYGON_MODE

        #region GL_POLYGON_SMOOTH
        public const GLuint GL_POLYGON_SMOOTH = 0x0B41;
        #endregion GL_POLYGON_SMOOTH

        #region GL_POLYGON_STIPPLE
        public const GLuint GL_POLYGON_STIPPLE = 0x0B42;
        #endregion GL_POLYGON_STIPPLE

        #region GL_EDGE_FLAG
        public const GLuint GL_EDGE_FLAG = 0x0B43;
        #endregion GL_EDGE_FLAG

        #region GL_CULL_FACE
        public const GLuint GL_CULL_FACE = 0x0B44;
        #endregion GL_CULL_FACE

        #region GL_CULL_FACE_MODE
        public const GLuint GL_CULL_FACE_MODE = 0x0B45;
        #endregion GL_CULL_FACE_MODE

        #region GL_FRONT_FACE
        public const GLuint GL_FRONT_FACE = 0x0B46;
        #endregion GL_FRONT_FACE

        #region GL_LIGHTING
        public const GLuint GL_LIGHTING = 0x0B50;
        #endregion GL_LIGHTING

        #region GL_LIGHT_MODEL_LOCAL_VIEWER
        public const GLuint GL_LIGHT_MODEL_LOCAL_VIEWER = 0x0B51;
        #endregion GL_LIGHT_MODEL_LOCAL_VIEWER

        #region GL_LIGHT_MODEL_TWO_SIDE
        public const GLuint GL_LIGHT_MODEL_TWO_SIDE = 0x0B52;
        #endregion GL_LIGHT_MODEL_TWO_SIDE

        #region GL_LIGHT_MODEL_AMBIENT
        public const GLuint GL_LIGHT_MODEL_AMBIENT = 0x0B53;
        #endregion GL_LIGHT_MODEL_AMBIENT

        #region GL_SHADE_MODEL
        public const GLuint GL_SHADE_MODEL = 0x0B54;
        #endregion GL_SHADE_MODEL

        #region GL_COLOR_MATERIAL_FACE
        public const GLuint GL_COLOR_MATERIAL_FACE = 0x0B55;
        #endregion GL_COLOR_MATERIAL_FACE

        #region GL_COLOR_MATERIAL_PARAMETER
        public const GLuint GL_COLOR_MATERIAL_PARAMETER = 0x0B56;
        #endregion GL_COLOR_MATERIAL_PARAMETER

        #region GL_COLOR_MATERIAL
        public const GLuint GL_COLOR_MATERIAL = 0x0B57;
        #endregion GL_COLOR_MATERIAL

        #region GL_FOG
        public const GLuint GL_FOG = 0x0B60;
        #endregion GL_FOG

        #region GL_FOG_INDEX
        public const GLuint GL_FOG_INDEX = 0x0B61;
        #endregion GL_FOG_INDEX

        #region GL_FOG_DENSITY
        public const GLuint GL_FOG_DENSITY = 0x0B62;
        #endregion GL_FOG_DENSITY

        #region GL_FOG_START
        public const GLuint GL_FOG_START = 0x0B63;
        #endregion GL_FOG_START

        #region GL_FOG_END
        public const GLuint GL_FOG_END = 0x0B64;
        #endregion GL_FOG_END

        #region GL_FOG_MODE
        public const GLuint GL_FOG_MODE = 0x0B65;
        #endregion GL_FOG_MODE

        #region GL_FOG_COLOR
        public const GLuint GL_FOG_COLOR = 0x0B66;
        #endregion GL_FOG_COLOR

        #region GL_DEPTH_RANGE
        public const GLuint GL_DEPTH_RANGE = 0x0B70;
        #endregion GL_DEPTH_RANGE

        #region GL_DEPTH_TEST
        public const GLuint GL_DEPTH_TEST = 0x0B71;
        #endregion GL_DEPTH_TEST

        #region GL_DEPTH_WRITEMASK
        public const GLuint GL_DEPTH_WRITEMASK = 0x0B72;
        #endregion GL_DEPTH_WRITEMASK

        #region GL_DEPTH_CLEAR_VALUE
        public const GLuint GL_DEPTH_CLEAR_VALUE = 0x0B73;
        #endregion GL_DEPTH_CLEAR_VALUE

        #region GL_DEPTH_FUNC
        public const GLuint GL_DEPTH_FUNC = 0x0B74;
        #endregion GL_DEPTH_FUNC

        #region GL_ACCUM_CLEAR_VALUE
        public const GLuint GL_ACCUM_CLEAR_VALUE = 0x0B80;
        #endregion GL_ACCUM_CLEAR_VALUE

        #region GL_STENCIL_TEST
        public const GLuint GL_STENCIL_TEST = 0x0B90;
        #endregion GL_STENCIL_TEST

        #region GL_STENCIL_CLEAR_VALUE
        public const GLuint GL_STENCIL_CLEAR_VALUE = 0x0B91;
        #endregion GL_STENCIL_CLEAR_VALUE

        #region GL_STENCIL_FUNC
        public const GLuint GL_STENCIL_FUNC = 0x0B92;
        #endregion GL_STENCIL_FUNC

        #region GL_STENCIL_VALUE_MASK
        public const GLuint GL_STENCIL_VALUE_MASK = 0x0B93;
        #endregion GL_STENCIL_VALUE_MASK

        #region GL_STENCIL_FAIL
        public const GLuint GL_STENCIL_FAIL = 0x0B94;
        #endregion GL_STENCIL_FAIL

        #region GL_STENCIL_PASS_DEPTH_FAIL
        public const GLuint GL_STENCIL_PASS_DEPTH_FAIL = 0x0B95;
        #endregion GL_STENCIL_PASS_DEPTH_FAIL

        #region GL_STENCIL_PASS_DEPTH_PASS
        public const GLuint GL_STENCIL_PASS_DEPTH_PASS = 0x0B96;
        #endregion GL_STENCIL_PASS_DEPTH_PASS

        #region GL_STENCIL_REF
        public const GLuint GL_STENCIL_REF = 0x0B97;
        #endregion GL_STENCIL_REF

        #region GL_STENCIL_WRITEMASK
        public const GLuint GL_STENCIL_WRITEMASK = 0x0B98;
        #endregion GL_STENCIL_WRITEMASK

        #region GL_MATRIX_MODE
        public const GLuint GL_MATRIX_MODE = 0x0BA0;
        #endregion GL_MATRIX_MODE

        #region GL_NORMALIZE
        public const GLuint GL_NORMALIZE = 0x0BA1;
        #endregion GL_NORMALIZE

        #region GL_VIEWPORT
        public const GLuint GL_VIEWPORT = 0x0BA2;
        #endregion GL_VIEWPORT

        #region GL_MODELVIEW_STACK_DEPTH
        public const GLuint GL_MODELVIEW_STACK_DEPTH = 0x0BA3;
        #endregion GL_MODELVIEW_STACK_DEPTH

        #region GL_PROJECTION_STACK_DEPTH
        public const GLuint GL_PROJECTION_STACK_DEPTH = 0x0BA4;
        #endregion GL_PROJECTION_STACK_DEPTH

        #region GL_TEXTURE_STACK_DEPTH
        public const GLuint GL_TEXTURE_STACK_DEPTH = 0x0BA5;
        #endregion GL_TEXTURE_STACK_DEPTH

        #region GL_MODELVIEW_MATRIX
        public const GLuint GL_MODELVIEW_MATRIX = 0x0BA6;
        #endregion GL_MODELVIEW_MATRIX

        #region GL_PROJECTION_MATRIX
        public const GLuint GL_PROJECTION_MATRIX = 0x0BA7;
        #endregion GL_PROJECTION_MATRIX

        #region GL_TEXTURE_MATRIX
        public const GLuint GL_TEXTURE_MATRIX = 0x0BA8;
        #endregion GL_TEXTURE_MATRIX

        #region GL_ATTRIB_STACK_DEPTH
        public const GLuint GL_ATTRIB_STACK_DEPTH = 0x0BB0;
        #endregion GL_ATTRIB_STACK_DEPTH

        #region GL_CLIENT_ATTRIB_STACK_DEPTH
        public const GLuint GL_CLIENT_ATTRIB_STACK_DEPTH = 0x0BB1;
        #endregion GL_CLIENT_ATTRIB_STACK_DEPTH

        #region GL_ALPHA_TEST
        public const GLuint GL_ALPHA_TEST = 0x0BC0;
        #endregion GL_ALPHA_TEST

        #region GL_ALPHA_TEST_FUNC
        public const GLuint GL_ALPHA_TEST_FUNC = 0x0BC1;
        #endregion GL_ALPHA_TEST_FUNC

        #region GL_ALPHA_TEST_REF
        public const GLuint GL_ALPHA_TEST_REF = 0x0BC2;
        #endregion GL_ALPHA_TEST_REF

        #region GL_DITHER
        public const GLuint GL_DITHER = 0x0BD0;
        #endregion GL_DITHER

        #region GL_BLEND_DST
        public const GLuint GL_BLEND_DST = 0x0BE0;
        #endregion GL_BLEND_DST

        #region GL_BLEND_SRC
        public const GLuint GL_BLEND_SRC = 0x0BE1;
        #endregion GL_BLEND_SRC

        #region GL_BLEND
        public const GLuint GL_BLEND = 0x0BE2;
        #endregion GL_BLEND

        #region GL_LOGIC_OP_MODE
        public const GLuint GL_LOGIC_OP_MODE = 0x0BF0;
        #endregion GL_LOGIC_OP_MODE

        #region GL_INDEX_LOGIC_OP
        public const GLuint GL_INDEX_LOGIC_OP = 0x0BF1;
        #endregion GL_INDEX_LOGIC_OP

        #region GL_LOGIC_OP
        public const GLuint GL_LOGIC_OP = 0x0BF1;
        #endregion GL_LOGIC_OP

        #region GL_COLOR_LOGIC_OP
        public const GLuint GL_COLOR_LOGIC_OP = 0x0BF2;
        #endregion GL_COLOR_LOGIC_OP

        #region GL_AUX_BUFFERS
        public const GLuint GL_AUX_BUFFERS = 0x0C00;
        #endregion GL_AUX_BUFFERS

        #region GL_DRAW_BUFFER
        public const GLuint GL_DRAW_BUFFER = 0x0C01;
        #endregion GL_DRAW_BUFFER

        #region GL_READ_BUFFER
        public const GLuint GL_READ_BUFFER = 0x0C02;
        #endregion GL_READ_BUFFER

        #region GL_SCISSOR_BOX
        public const GLuint GL_SCISSOR_BOX = 0x0C10;
        #endregion GL_SCISSOR_BOX

        #region GL_SCISSOR_TEST
        public const GLuint GL_SCISSOR_TEST = 0x0C11;
        #endregion GL_SCISSOR_TEST

        #region GL_INDEX_CLEAR_VALUE
        public const GLuint GL_INDEX_CLEAR_VALUE = 0x0C20;
        #endregion GL_INDEX_CLEAR_VALUE

        #region GL_INDEX_WRITEMASK
        public const GLuint GL_INDEX_WRITEMASK = 0x0C21;
        #endregion GL_INDEX_WRITEMASK

        #region GL_COLOR_CLEAR_VALUE
        public const GLuint GL_COLOR_CLEAR_VALUE = 0x0C22;
        #endregion GL_COLOR_CLEAR_VALUE

        #region GL_COLOR_WRITEMASK
        public const GLuint GL_COLOR_WRITEMASK = 0x0C23;
        #endregion GL_COLOR_WRITEMASK

        #region GL_INDEX_MODE
        public const GLuint GL_INDEX_MODE = 0x0C30;
        #endregion GL_INDEX_MODE

        #region GL_RGBA_MODE
        public const GLuint GL_RGBA_MODE = 0x0C31;
        #endregion GL_RGBA_MODE

        #region GL_DOUBLEBUFFER
        public const GLuint GL_DOUBLEBUFFER = 0x0C32;
        #endregion GL_DOUBLEBUFFER

        #region GL_STEREO
        public const GLuint GL_STEREO = 0x0C33;
        #endregion GL_STEREO

        #region GL_RENDER_MODE
        public const GLuint GL_RENDER_MODE = 0x0C40;
        #endregion GL_RENDER_MODE

        #region GL_PERSPECTIVE_CORRECTION_HINT
        public const GLuint GL_PERSPECTIVE_CORRECTION_HINT = 0x0C50;
        #endregion GL_PERSPECTIVE_CORRECTION_HINT

        #region GL_POINT_SMOOTH_HINT
        public const GLuint GL_POINT_SMOOTH_HINT = 0x0C51;
        #endregion GL_POINT_SMOOTH_HINT

        #region GL_LINE_SMOOTH_HINT
        public const GLuint GL_LINE_SMOOTH_HINT = 0x0C52;
        #endregion GL_LINE_SMOOTH_HINT

        #region GL_POLYGON_SMOOTH_HINT
        public const GLuint GL_POLYGON_SMOOTH_HINT = 0x0C53;
        #endregion GL_POLYGON_SMOOTH_HINT

        #region GL_FOG_HINT
        public const GLuint GL_FOG_HINT = 0x0C54;
        #endregion GL_FOG_HINT

        #region GL_TEXTURE_GEN_S
        public const GLuint GL_TEXTURE_GEN_S = 0x0C60;
        #endregion GL_TEXTURE_GEN_S

        #region GL_TEXTURE_GEN_T
        public const GLuint GL_TEXTURE_GEN_T = 0x0C61;
        #endregion GL_TEXTURE_GEN_T

        #region GL_TEXTURE_GEN_R
        public const GLuint GL_TEXTURE_GEN_R = 0x0C62;
        #endregion GL_TEXTURE_GEN_R

        #region GL_TEXTURE_GEN_Q
        public const GLuint GL_TEXTURE_GEN_Q = 0x0C63;
        #endregion GL_TEXTURE_GEN_Q

        #region GL_PIXEL_MAP_I_TO_I_SIZE
        public const GLuint GL_PIXEL_MAP_I_TO_I_SIZE = 0x0CB0;
        #endregion GL_PIXEL_MAP_I_TO_I_SIZE

        #region GL_PIXEL_MAP_S_TO_S_SIZE
        public const GLuint GL_PIXEL_MAP_S_TO_S_SIZE = 0x0CB1;
        #endregion GL_PIXEL_MAP_S_TO_S_SIZE

        #region GL_PIXEL_MAP_I_TO_R_SIZE
        public const GLuint GL_PIXEL_MAP_I_TO_R_SIZE = 0x0CB2;
        #endregion GL_PIXEL_MAP_I_TO_R_SIZE

        #region GL_PIXEL_MAP_I_TO_G_SIZE
        public const GLuint GL_PIXEL_MAP_I_TO_G_SIZE = 0x0CB3;
        #endregion GL_PIXEL_MAP_I_TO_G_SIZE

        #region GL_PIXEL_MAP_I_TO_B_SIZE
        public const GLuint GL_PIXEL_MAP_I_TO_B_SIZE = 0x0CB4;
        #endregion GL_PIXEL_MAP_I_TO_B_SIZE

        #region GL_PIXEL_MAP_I_TO_A_SIZE
        public const GLuint GL_PIXEL_MAP_I_TO_A_SIZE = 0x0CB5;
        #endregion GL_PIXEL_MAP_I_TO_A_SIZE

        #region GL_PIXEL_MAP_R_TO_R_SIZE
        public const GLuint GL_PIXEL_MAP_R_TO_R_SIZE = 0x0CB6;
        #endregion GL_PIXEL_MAP_R_TO_R_SIZE

        #region GL_PIXEL_MAP_G_TO_G_SIZE
        public const GLuint GL_PIXEL_MAP_G_TO_G_SIZE = 0x0CB7;
        #endregion GL_PIXEL_MAP_G_TO_G_SIZE

        #region GL_PIXEL_MAP_B_TO_B_SIZE
        public const GLuint GL_PIXEL_MAP_B_TO_B_SIZE = 0x0CB8;
        #endregion GL_PIXEL_MAP_B_TO_B_SIZE

        #region GL_PIXEL_MAP_A_TO_A_SIZE
        public const GLuint GL_PIXEL_MAP_A_TO_A_SIZE = 0x0CB9;
        #endregion GL_PIXEL_MAP_A_TO_A_SIZE

        #region GL_UNPACK_SWAP_BYTES
        public const GLuint GL_UNPACK_SWAP_BYTES = 0x0CF0;
        #endregion GL_UNPACK_SWAP_BYTES

        #region GL_UNPACK_LSB_FIRST
        public const GLuint GL_UNPACK_LSB_FIRST = 0x0CF1;
        #endregion GL_UNPACK_LSB_FIRST

        #region GL_UNPACK_ROW_LENGTH
        public const GLuint GL_UNPACK_ROW_LENGTH = 0x0CF2;
        #endregion GL_UNPACK_ROW_LENGTH

        #region GL_UNPACK_SKIP_ROWS
        public const GLuint GL_UNPACK_SKIP_ROWS = 0x0CF3;
        #endregion GL_UNPACK_SKIP_ROWS

        #region GL_UNPACK_SKIP_PIXELS
        public const GLuint GL_UNPACK_SKIP_PIXELS = 0x0CF4;
        #endregion GL_UNPACK_SKIP_PIXELS

        #region GL_UNPACK_ALIGNMENT
        public const GLuint GL_UNPACK_ALIGNMENT = 0x0CF5;
        #endregion GL_UNPACK_ALIGNMENT

        #region GL_PACK_SWAP_BYTES
        public const GLuint GL_PACK_SWAP_BYTES = 0x0D00;
        #endregion GL_PACK_SWAP_BYTES

        #region GL_PACK_LSB_FIRST
        public const GLuint GL_PACK_LSB_FIRST = 0x0D01;
        #endregion GL_PACK_LSB_FIRST

        #region GL_PACK_ROW_LENGTH
        public const GLuint GL_PACK_ROW_LENGTH = 0x0D02;
        #endregion GL_PACK_ROW_LENGTH

        #region GL_PACK_SKIP_ROWS
        public const GLuint GL_PACK_SKIP_ROWS = 0x0D03;
        #endregion GL_PACK_SKIP_ROWS

        #region GL_PACK_SKIP_PIXELS
        public const GLuint GL_PACK_SKIP_PIXELS = 0x0D04;
        #endregion GL_PACK_SKIP_PIXELS

        #region GL_PACK_ALIGNMENT
        public const GLuint GL_PACK_ALIGNMENT = 0x0D05;
        #endregion GL_PACK_ALIGNMENT

        #region GL_MAP_COLOR
        public const GLuint GL_MAP_COLOR = 0x0D10;
        #endregion GL_MAP_COLOR

        #region GL_MAP_STENCIL
        public const GLuint GL_MAP_STENCIL = 0x0D11;
        #endregion GL_MAP_STENCIL

        #region GL_INDEX_SHIFT
        public const GLuint GL_INDEX_SHIFT = 0x0D12;
        #endregion GL_INDEX_SHIFT

        #region GL_INDEX_OFFSET
        public const GLuint GL_INDEX_OFFSET = 0x0D13;
        #endregion GL_INDEX_OFFSET

        #region GL_RED_SCALE
        public const GLuint GL_RED_SCALE = 0x0D14;
        #endregion GL_RED_SCALE

        #region GL_RED_BIAS
        public const GLuint GL_RED_BIAS = 0x0D15;
        #endregion GL_RED_BIAS

        #region GL_ZOOM_X
        public const GLuint GL_ZOOM_X = 0x0D16;
        #endregion GL_ZOOM_X

        #region GL_ZOOM_Y
        public const GLuint GL_ZOOM_Y = 0x0D17;
        #endregion GL_ZOOM_Y

        #region GL_GREEN_SCALE
        public const GLuint GL_GREEN_SCALE = 0x0D18;
        #endregion GL_GREEN_SCALE

        #region GL_GREEN_BIAS
        public const GLuint GL_GREEN_BIAS = 0x0D19;
        #endregion GL_GREEN_BIAS

        #region GL_BLUE_SCALE
        public const GLuint GL_BLUE_SCALE = 0x0D1A;
        #endregion GL_BLUE_SCALE

        #region GL_BLUE_BIAS
        public const GLuint GL_BLUE_BIAS = 0x0D1B;
        #endregion GL_BLUE_BIAS

        #region GL_ALPHA_SCALE
        public const GLuint GL_ALPHA_SCALE = 0x0D1C;
        #endregion GL_ALPHA_SCALE

        #region GL_ALPHA_BIAS
        public const GLuint GL_ALPHA_BIAS = 0x0D1D;
        #endregion GL_ALPHA_BIAS

        #region GL_DEPTH_SCALE
        public const GLuint GL_DEPTH_SCALE = 0x0D1E;
        #endregion GL_DEPTH_SCALE

        #region GL_DEPTH_BIAS
        public const GLuint GL_DEPTH_BIAS = 0x0D1F;
        #endregion GL_DEPTH_BIAS

        #region GL_MAX_EVAL_ORDER
        public const GLuint GL_MAX_EVAL_ORDER = 0x0D30;
        #endregion GL_MAX_EVAL_ORDER

        #region GL_MAX_LIGHTS
        public const GLuint GL_MAX_LIGHTS = 0x0D31;
        #endregion GL_MAX_LIGHTS

        #region GL_MAX_CLIP_PLANES
        public const GLuint GL_MAX_CLIP_PLANES = 0x0D32;
        #endregion GL_MAX_CLIP_PLANES

        #region GL_MAX_TEXTURE_SIZE
        public const GLuint GL_MAX_TEXTURE_SIZE = 0x0D33;
        #endregion GL_MAX_TEXTURE_SIZE

        #region GL_MAX_PIXEL_MAP_TABLE
        public const GLuint GL_MAX_PIXEL_MAP_TABLE = 0x0D34;
        #endregion GL_MAX_PIXEL_MAP_TABLE

        #region GL_MAX_ATTRIB_STACK_DEPTH
        public const GLuint GL_MAX_ATTRIB_STACK_DEPTH = 0x0D35;
        #endregion GL_MAX_ATTRIB_STACK_DEPTH

        #region GL_MAX_MODELVIEW_STACK_DEPTH
        public const GLuint GL_MAX_MODELVIEW_STACK_DEPTH = 0x0D36;
        #endregion GL_MAX_MODELVIEW_STACK_DEPTH

        #region GL_MAX_NAME_STACK_DEPTH
        public const GLuint GL_MAX_NAME_STACK_DEPTH = 0x0D37;
        #endregion GL_MAX_NAME_STACK_DEPTH

        #region GL_MAX_PROJECTION_STACK_DEPTH
        public const GLuint GL_MAX_PROJECTION_STACK_DEPTH = 0x0D38;
        #endregion GL_MAX_PROJECTION_STACK_DEPTH

        #region GL_MAX_TEXTURE_STACK_DEPTH
        public const GLuint GL_MAX_TEXTURE_STACK_DEPTH = 0x0D39;
        #endregion GL_MAX_TEXTURE_STACK_DEPTH

        #region GL_MAX_VIEWPORT_DIMS
        public const GLuint GL_MAX_VIEWPORT_DIMS = 0x0D3A;
        #endregion GL_MAX_VIEWPORT_DIMS

        #region GL_MAX_CLIENT_ATTRIB_STACK_DEPTH
        public const GLuint GL_MAX_CLIENT_ATTRIB_STACK_DEPTH = 0x0D3B;
        #endregion GL_MAX_CLIENT_ATTRIB_STACK_DEPTH

        #region GL_SUBPIXEL_BITS
        public const GLuint GL_SUBPIXEL_BITS = 0x0D50;
        #endregion GL_SUBPIXEL_BITS

        #region GL_INDEX_BITS
        public const GLuint GL_INDEX_BITS = 0x0D51;
        #endregion GL_INDEX_BITS

        #region GL_RED_BITS
        public const GLuint GL_RED_BITS = 0x0D52;
        #endregion GL_RED_BITS

        #region GL_GREEN_BITS
        public const GLuint GL_GREEN_BITS = 0x0D53;
        #endregion GL_GREEN_BITS

        #region GL_BLUE_BITS
        public const GLuint GL_BLUE_BITS = 0x0D54;
        #endregion GL_BLUE_BITS

        #region GL_ALPHA_BITS
        public const GLuint GL_ALPHA_BITS = 0x0D55;
        #endregion GL_ALPHA_BITS

        #region GL_DEPTH_BITS
        public const GLuint GL_DEPTH_BITS = 0x0D56;
        #endregion GL_DEPTH_BITS

        #region GL_STENCIL_BITS
        public const GLuint GL_STENCIL_BITS = 0x0D57;
        #endregion GL_STENCIL_BITS

        #region GL_ACCUM_RED_BITS
        public const GLuint GL_ACCUM_RED_BITS = 0x0D58;
        #endregion GL_ACCUM_RED_BITS

        #region GL_ACCUM_GREEN_BITS
        public const GLuint GL_ACCUM_GREEN_BITS = 0x0D59;
        #endregion GL_ACCUM_GREEN_BITS

        #region GL_ACCUM_BLUE_BITS
        public const GLuint GL_ACCUM_BLUE_BITS = 0x0D5A;
        #endregion GL_ACCUM_BLUE_BITS

        #region GL_ACCUM_ALPHA_BITS
        public const GLuint GL_ACCUM_ALPHA_BITS = 0x0D5B;
        #endregion GL_ACCUM_ALPHA_BITS

        #region GL_NAME_STACK_DEPTH
        public const GLuint GL_NAME_STACK_DEPTH = 0x0D70;
        #endregion GL_NAME_STACK_DEPTH

        #region GL_AUTO_NORMAL
        public const GLuint GL_AUTO_NORMAL = 0x0D80;
        #endregion GL_AUTO_NORMAL

        #region GL_MAP1_COLOR_4
        public const GLuint GL_MAP1_COLOR_4 = 0x0D90;
        #endregion GL_MAP1_COLOR_4

        #region GL_MAP1_INDEX
        public const GLuint GL_MAP1_INDEX = 0x0D91;
        #endregion GL_MAP1_INDEX

        #region GL_MAP1_NORMAL
        public const GLuint GL_MAP1_NORMAL = 0x0D92;
        #endregion GL_MAP1_NORMAL

        #region GL_MAP1_TEXTURE_COORD_1
        public const GLuint GL_MAP1_TEXTURE_COORD_1 = 0x0D93;
        #endregion GL_MAP1_TEXTURE_COORD_1

        #region GL_MAP1_TEXTURE_COORD_2
        public const GLuint GL_MAP1_TEXTURE_COORD_2 = 0x0D94;
        #endregion GL_MAP1_TEXTURE_COORD_2

        #region GL_MAP1_TEXTURE_COORD_3
        public const GLuint GL_MAP1_TEXTURE_COORD_3 = 0x0D95;
        #endregion GL_MAP1_TEXTURE_COORD_3

        #region GL_MAP1_TEXTURE_COORD_4
        public const GLuint GL_MAP1_TEXTURE_COORD_4 = 0x0D96;
        #endregion GL_MAP1_TEXTURE_COORD_4

        #region GL_MAP1_VERTEX_3
        public const GLuint GL_MAP1_VERTEX_3 = 0x0D97;
        #endregion GL_MAP1_VERTEX_3

        #region GL_MAP1_VERTEX_4
        public const GLuint GL_MAP1_VERTEX_4 = 0x0D98;
        #endregion GL_MAP1_VERTEX_4

        #region GL_MAP2_COLOR_4
        public const GLuint GL_MAP2_COLOR_4 = 0x0DB0;
        #endregion GL_MAP2_COLOR_4

        #region GL_MAP2_INDEX
        public const GLuint GL_MAP2_INDEX = 0x0DB1;
        #endregion GL_MAP2_INDEX

        #region GL_MAP2_NORMAL
        public const GLuint GL_MAP2_NORMAL = 0x0DB2;
        #endregion GL_MAP2_NORMAL

        #region GL_MAP2_TEXTURE_COORD_1
        public const GLuint GL_MAP2_TEXTURE_COORD_1 = 0x0DB3;
        #endregion GL_MAP2_TEXTURE_COORD_1

        #region GL_MAP2_TEXTURE_COORD_2
        public const GLuint GL_MAP2_TEXTURE_COORD_2 = 0x0DB4;
        #endregion GL_MAP2_TEXTURE_COORD_2

        #region GL_MAP2_TEXTURE_COORD_3
        public const GLuint GL_MAP2_TEXTURE_COORD_3 = 0x0DB5;
        #endregion GL_MAP2_TEXTURE_COORD_3

        #region GL_MAP2_TEXTURE_COORD_4
        public const GLuint GL_MAP2_TEXTURE_COORD_4 = 0x0DB6;
        #endregion GL_MAP2_TEXTURE_COORD_4

        #region GL_MAP2_VERTEX_3
        public const GLuint GL_MAP2_VERTEX_3 = 0x0DB7;
        #endregion GL_MAP2_VERTEX_3

        #region GL_MAP2_VERTEX_4
        public const GLuint GL_MAP2_VERTEX_4 = 0x0DB8;
        #endregion GL_MAP2_VERTEX_4

        #region GL_MAP1_GRID_DOMAIN
        public const GLuint GL_MAP1_GRID_DOMAIN = 0x0DD0;
        #endregion GL_MAP1_GRID_DOMAIN

        #region GL_MAP1_GRID_SEGMENTS
        public const GLuint GL_MAP1_GRID_SEGMENTS = 0x0DD1;
        #endregion GL_MAP1_GRID_SEGMENTS

        #region GL_MAP2_GRID_DOMAIN
        public const GLuint GL_MAP2_GRID_DOMAIN = 0x0DD2;
        #endregion GL_MAP2_GRID_DOMAIN

        #region GL_MAP2_GRID_SEGMENTS
        public const GLuint GL_MAP2_GRID_SEGMENTS = 0x0DD3;
        #endregion GL_MAP2_GRID_SEGMENTS

        #region GL_TEXTURE_1D
        public const GLuint GL_TEXTURE_1D = 0x0DE0;
        #endregion GL_TEXTURE_1D

        #region GL_TEXTURE_2D
        public const GLuint GL_TEXTURE_2D = 0x0DE1;
        #endregion GL_TEXTURE_2D

        #region GL_FEEDBACK_BUFFER_SIZE
        public const GLuint GL_FEEDBACK_BUFFER_SIZE = 0x0DF1;
        #endregion GL_FEEDBACK_BUFFER_SIZE

        #region GL_FEEDBACK_BUFFER_TYPE
        public const GLuint GL_FEEDBACK_BUFFER_TYPE = 0x0DF2;
        #endregion GL_FEEDBACK_BUFFER_TYPE

        #region GL_SELECTION_BUFFER_SIZE
        public const GLuint GL_SELECTION_BUFFER_SIZE = 0x0DF4;
        #endregion GL_SELECTION_BUFFER_SIZE

        #region GL_POLYGON_OFFSET_UNITS
        public const GLuint GL_POLYGON_OFFSET_UNITS = 0x2A00;
        #endregion GL_POLYGON_OFFSET_UNITS

        #region GL_POLYGON_OFFSET_POINT
        public const GLuint GL_POLYGON_OFFSET_POINT = 0x2A01;
        #endregion GL_POLYGON_OFFSET_POINT

        #region GL_POLYGON_OFFSET_LINE
        public const GLuint GL_POLYGON_OFFSET_LINE = 0x2A02;
        #endregion GL_POLYGON_OFFSET_LINE

        #region GL_POLYGON_OFFSET_FILL
        public const GLuint GL_POLYGON_OFFSET_FILL = 0x8037;
        #endregion GL_POLYGON_OFFSET_FILL

        #region GL_POLYGON_OFFSET_FACTOR
        public const GLuint GL_POLYGON_OFFSET_FACTOR = 0x8038;
        #endregion GL_POLYGON_OFFSET_FACTOR

        #region GL_TEXTURE_BINDING_1D
        public const GLuint GL_TEXTURE_BINDING_1D = 0x8068;
        #endregion GL_TEXTURE_BINDING_1D

        #region GL_TEXTURE_BINDING_2D
        public const GLuint GL_TEXTURE_BINDING_2D = 0x8069;
        #endregion GL_TEXTURE_BINDING_2D

        #region GL_TEXTURE_BINDING_3D
        public const GLuint GL_TEXTURE_BINDING_3D = 0x806A;
        #endregion GL_TEXTURE_BINDING_3D

        #region GL_VERTEX_ARRAY
        public const GLuint GL_VERTEX_ARRAY = 0x8074;
        #endregion GL_VERTEX_ARRAY

        #region GL_NORMAL_ARRAY
        public const GLuint GL_NORMAL_ARRAY = 0x8075;
        #endregion GL_NORMAL_ARRAY

        #region GL_COLOR_ARRAY
        public const GLuint GL_COLOR_ARRAY = 0x8076;
        #endregion GL_COLOR_ARRAY

        #region GL_INDEX_ARRAY
        public const GLuint GL_INDEX_ARRAY = 0x8077;
        #endregion GL_INDEX_ARRAY

        #region GL_TEXTURE_COORD_ARRAY
        public const GLuint GL_TEXTURE_COORD_ARRAY = 0x8078;
        #endregion GL_TEXTURE_COORD_ARRAY

        #region GL_EDGE_FLAG_ARRAY
        public const GLuint GL_EDGE_FLAG_ARRAY = 0x8079;
        #endregion GL_EDGE_FLAG_ARRAY

        #region GL_VERTEX_ARRAY_SIZE
        public const GLuint GL_VERTEX_ARRAY_SIZE = 0x807A;
        #endregion GL_VERTEX_ARRAY_SIZE

        #region GL_VERTEX_ARRAY_TYPE
        public const GLuint GL_VERTEX_ARRAY_TYPE = 0x807B;
        #endregion GL_VERTEX_ARRAY_TYPE

        #region GL_VERTEX_ARRAY_STRIDE
        public const GLuint GL_VERTEX_ARRAY_STRIDE = 0x807C;
        #endregion GL_VERTEX_ARRAY_STRIDE

        #region GL_NORMAL_ARRAY_TYPE
        public const GLuint GL_NORMAL_ARRAY_TYPE = 0x807E;
        #endregion GL_NORMAL_ARRAY_TYPE

        #region GL_NORMAL_ARRAY_STRIDE
        public const GLuint GL_NORMAL_ARRAY_STRIDE = 0x807F;
        #endregion GL_NORMAL_ARRAY_STRIDE

        #region GL_COLOR_ARRAY_SIZE
        public const GLuint GL_COLOR_ARRAY_SIZE = 0x8081;
        #endregion GL_COLOR_ARRAY_SIZE

        #region GL_COLOR_ARRAY_TYPE
        public const GLuint GL_COLOR_ARRAY_TYPE = 0x8082;
        #endregion GL_COLOR_ARRAY_TYPE

        #region GL_COLOR_ARRAY_STRIDE
        public const GLuint GL_COLOR_ARRAY_STRIDE = 0x8083;
        #endregion GL_COLOR_ARRAY_STRIDE

        #region GL_INDEX_ARRAY_TYPE
        public const GLuint GL_INDEX_ARRAY_TYPE = 0x8085;
        #endregion GL_INDEX_ARRAY_TYPE

        #region GL_INDEX_ARRAY_STRIDE
        public const GLuint GL_INDEX_ARRAY_STRIDE = 0x8086;
        #endregion GL_INDEX_ARRAY_STRIDE

        #region GL_TEXTURE_COORD_ARRAY_SIZE
        public const GLuint GL_TEXTURE_COORD_ARRAY_SIZE = 0x8088;
        #endregion GL_TEXTURE_COORD_ARRAY_SIZE

        #region GL_TEXTURE_COORD_ARRAY_TYPE
        public const GLuint GL_TEXTURE_COORD_ARRAY_TYPE = 0x8089;
        #endregion GL_TEXTURE_COORD_ARRAY_TYPE

        #region GL_TEXTURE_COORD_ARRAY_STRIDE
        public const GLuint GL_TEXTURE_COORD_ARRAY_STRIDE = 0x808A;
        #endregion GL_TEXTURE_COORD_ARRAY_STRIDE

        #region GL_EDGE_FLAG_ARRAY_STRIDE
        public const GLuint GL_EDGE_FLAG_ARRAY_STRIDE = 0x808C;
        #endregion GL_EDGE_FLAG_ARRAY_STRIDE

        #region GL_TEXTURE_WIDTH
        public const GLuint GL_TEXTURE_WIDTH = 0x1000;
        #endregion GL_TEXTURE_WIDTH

        #region GL_TEXTURE_HEIGHT
        public const GLuint GL_TEXTURE_HEIGHT = 0x1001;
        #endregion GL_TEXTURE_HEIGHT

        #region GL_TEXTURE_INTERNAL_FORMAT
        public const GLuint GL_TEXTURE_INTERNAL_FORMAT = 0x1003;
        #endregion GL_TEXTURE_INTERNAL_FORMAT

        #region GL_TEXTURE_COMPONENTS
        public const GLuint GL_TEXTURE_COMPONENTS = 0x1003;
        #endregion GL_TEXTURE_COMPONENTS

        #region GL_TEXTURE_BORDER_COLOR
        public const GLuint GL_TEXTURE_BORDER_COLOR = 0x1004;
        #endregion GL_TEXTURE_BORDER_COLOR

        #region GL_TEXTURE_BORDER
        public const GLuint GL_TEXTURE_BORDER = 0x1005;
        #endregion GL_TEXTURE_BORDER

        #region GL_TEXTURE_RED_SIZE
        public const GLuint GL_TEXTURE_RED_SIZE = 0x805C;
        #endregion GL_TEXTURE_RED_SIZE

        #region GL_TEXTURE_GREEN_SIZE
        public const GLuint GL_TEXTURE_GREEN_SIZE = 0x805D;
        #endregion GL_TEXTURE_GREEN_SIZE

        #region GL_TEXTURE_BLUE_SIZE
        public const GLuint GL_TEXTURE_BLUE_SIZE = 0x805E;
        #endregion GL_TEXTURE_BLUE_SIZE

        #region GL_TEXTURE_ALPHA_SIZE
        public const GLuint GL_TEXTURE_ALPHA_SIZE = 0x805F;
        #endregion GL_TEXTURE_ALPHA_SIZE

        #region GL_TEXTURE_LUMINANCE_SIZE
        public const GLuint GL_TEXTURE_LUMINANCE_SIZE = 0x8060;
        #endregion GL_TEXTURE_LUMINANCE_SIZE

        #region GL_TEXTURE_INTENSITY_SIZE
        public const GLuint GL_TEXTURE_INTENSITY_SIZE = 0x8061;
        #endregion GL_TEXTURE_INTENSITY_SIZE

        #region GL_TEXTURE_PRIORITY
        public const GLuint GL_TEXTURE_PRIORITY = 0x8066;
        #endregion GL_TEXTURE_PRIORITY

        #region GL_TEXTURE_RESIDENT
        public const GLuint GL_TEXTURE_RESIDENT = 0x8067;
        #endregion GL_TEXTURE_RESIDENT

        #region GL_DONT_CARE
        public const GLuint GL_DONT_CARE = 0x1100;
        #endregion GL_DONT_CARE

        #region GL_FASTEST
        public const GLuint GL_FASTEST = 0x1101;
        #endregion GL_FASTEST

        #region GL_NICEST
        public const GLuint GL_NICEST = 0x1102;
        #endregion GL_NICEST

        #region GL_AMBIENT
        public const GLuint GL_AMBIENT = 0x1200;
        #endregion GL_AMBIENT

        #region GL_DIFFUSE
        public const GLuint GL_DIFFUSE = 0x1201;
        #endregion GL_DIFFUSE

        #region GL_SPECULAR
        public const GLuint GL_SPECULAR = 0x1202;
        #endregion GL_SPECULAR

        #region GL_POSITION
        public const GLuint GL_POSITION = 0x1203;
        #endregion GL_POSITION

        #region GL_SPOT_DIRECTION
        public const GLuint GL_SPOT_DIRECTION = 0x1204;
        #endregion GL_SPOT_DIRECTION

        #region GL_SPOT_EXPONENT
        public const GLuint GL_SPOT_EXPONENT = 0x1205;
        #endregion GL_SPOT_EXPONENT

        #region GL_SPOT_CUTOFF
        public const GLuint GL_SPOT_CUTOFF = 0x1206;
        #endregion GL_SPOT_CUTOFF

        #region GL_CONSTANT_ATTENUATION
        public const GLuint GL_CONSTANT_ATTENUATION = 0x1207;
        #endregion GL_CONSTANT_ATTENUATION

        #region GL_LINEAR_ATTENUATION
        public const GLuint GL_LINEAR_ATTENUATION = 0x1208;
        #endregion GL_LINEAR_ATTENUATION

        #region GL_QUADRATIC_ATTENUATION
        public const GLuint GL_QUADRATIC_ATTENUATION = 0x1209;
        #endregion GL_QUADRATIC_ATTENUATION

        #region GL_COMPILE
        public const GLuint GL_COMPILE = 0x1300;
        #endregion GL_COMPILE

        #region GL_COMPILE_AND_EXECUTE
        public const GLuint GL_COMPILE_AND_EXECUTE = 0x1301;
        #endregion GL_COMPILE_AND_EXECUTE

        #region GL_BYTE
        public const GLuint GL_BYTE = 0x1400;
        #endregion GL_BYTE

        #region GL_UNSIGNED_BYTE
        public const GLuint GL_UNSIGNED_BYTE = 0x1401;
        #endregion GL_UNSIGNED_BYTE

        #region GL_SHORT
        public const GLuint GL_SHORT = 0x1402;
        #endregion GL_SHORT

        #region GL_UNSIGNED_SHORT
        public const GLuint GL_UNSIGNED_SHORT = 0x1403;
        #endregion GL_UNSIGNED_SHORT

        #region GL_INT
        public const GLuint GL_INT = 0x1404;
        #endregion GL_INT

        #region GL_UNSIGNED_INT
        public const GLuint GL_UNSIGNED_INT = 0x1405;
        #endregion GL_UNSIGNED_INT

        #region GL_FLOAT
        public const GLuint GL_FLOAT = 0x1406;
        #endregion GL_FLOAT

        #region GL_2_BYTES
        public const GLuint GL_2_BYTES = 0x1407;
        #endregion GL_2_BYTES

        #region GL_3_BYTES
        public const GLuint GL_3_BYTES = 0x1408;
        #endregion GL_3_BYTES

        #region GL_4_BYTES
        public const GLuint GL_4_BYTES = 0x1409;
        #endregion GL_4_BYTES

        #region GL_DOUBLE
        public const GLuint GL_DOUBLE = 0x140A;
        #endregion GL_DOUBLE

        #region GL_DOUBLE_EXT
        public const GLuint GL_DOUBLE_EXT = 0x140A;
        #endregion GL_DOUBLE_EXT

        #region GL_CLEAR
        public const GLuint GL_CLEAR = 0x1500;
        #endregion GL_CLEAR

        #region GL_AND
        public const GLuint GL_AND = 0x1501;
        #endregion GL_AND

        #region GL_AND_REVERSE
        public const GLuint GL_AND_REVERSE = 0x1502;
        #endregion GL_AND_REVERSE

        #region GL_COPY
        public const GLuint GL_COPY = 0x1503;
        #endregion GL_COPY

        #region GL_AND_INVERTED
        public const GLuint GL_AND_INVERTED = 0x1504;
        #endregion GL_AND_INVERTED

        #region GL_NOOP
        public const GLuint GL_NOOP = 0x1505;
        #endregion GL_NOOP

        #region GL_XOR
        public const GLuint GL_XOR = 0x1506;
        #endregion GL_XOR

        #region GL_OR
        public const GLuint GL_OR = 0x1507;
        #endregion GL_OR

        #region GL_NOR
        public const GLuint GL_NOR = 0x1508;
        #endregion GL_NOR

        #region GL_EQUIV
        public const GLuint GL_EQUIV = 0x1509;
        #endregion GL_EQUIV

        #region GL_INVERT
        public const GLuint GL_INVERT = 0x150A;
        #endregion GL_INVERT

        #region GL_OR_REVERSE
        public const GLuint GL_OR_REVERSE = 0x150B;
        #endregion GL_OR_REVERSE

        #region GL_COPY_INVERTED
        public const GLuint GL_COPY_INVERTED = 0x150C;
        #endregion GL_COPY_INVERTED

        #region GL_OR_INVERTED
        public const GLuint GL_OR_INVERTED = 0x150D;
        #endregion GL_OR_INVERTED

        #region GL_NAND
        public const GLuint GL_NAND = 0x150E;
        #endregion GL_NAND

        #region GL_SET
        public const GLuint GL_SET = 0x150F;
        #endregion GL_SET

        #region GL_EMISSION
        public const GLuint GL_EMISSION = 0x1600;
        #endregion GL_EMISSION

        #region GL_SHININESS
        public const GLuint GL_SHININESS = 0x1601;
        #endregion GL_SHININESS

        #region GL_AMBIENT_AND_DIFFUSE
        public const GLuint GL_AMBIENT_AND_DIFFUSE = 0x1602;
        #endregion GL_AMBIENT_AND_DIFFUSE

        #region GL_COLOR_INDEXES
        public const GLuint GL_COLOR_INDEXES = 0x1603;
        #endregion GL_COLOR_INDEXES

        #region GL_MODELVIEW
        public const GLuint GL_MODELVIEW = 0x1700;
        #endregion GL_MODELVIEW

        #region GL_PROJECTION
        public const GLuint GL_PROJECTION = 0x1701;
        #endregion GL_PROJECTION

        #region GL_TEXTURE
        public const GLuint GL_TEXTURE = 0x1702;
        #endregion GL_TEXTURE

        #region GL_COLOR
        public const GLuint GL_COLOR = 0x1800;
        #endregion GL_COLOR

        #region GL_DEPTH
        public const GLuint GL_DEPTH = 0x1801;
        #endregion GL_DEPTH

        #region GL_STENCIL
        public const GLuint GL_STENCIL = 0x1802;
        #endregion GL_STENCIL

        #region GL_COLOR_INDEX
        public const GLuint GL_COLOR_INDEX = 0x1900;
        #endregion GL_COLOR_INDEX

        #region GL_STENCIL_INDEX
        public const GLuint GL_STENCIL_INDEX = 0x1901;
        #endregion GL_STENCIL_INDEX

        #region GL_DEPTH_COMPONENT
        public const GLuint GL_DEPTH_COMPONENT = 0x1902;
        #endregion GL_DEPTH_COMPONENT

        #region GL_RED
        public const GLuint GL_RED = 0x1903;
        #endregion GL_RED

        #region GL_GREEN
        public const GLuint GL_GREEN = 0x1904;
        #endregion GL_GREEN

        #region GL_BLUE
        public const GLuint GL_BLUE = 0x1905;
        #endregion GL_BLUE

        #region GL_ALPHA
        public const GLuint GL_ALPHA = 0x1906;
        #endregion GL_ALPHA

        #region GL_RGB
        public const GLuint GL_RGB = 0x1907;
        #endregion GL_RGB

        #region GL_RGBA
        public const GLuint GL_RGBA = 0x1908;
        #endregion GL_RGBA

        #region GL_LUMINANCE
        public const GLuint GL_LUMINANCE = 0x1909;
        #endregion GL_LUMINANCE

        #region GL_LUMINANCE_ALPHA
        public const GLuint GL_LUMINANCE_ALPHA = 0x190A;
        #endregion GL_LUMINANCE_ALPHA

        #region GL_BITMAP
        public const GLuint GL_BITMAP = 0x1A00;
        #endregion GL_BITMAP

        #region GL_POINT
        public const GLuint GL_POINT = 0x1B00;
        #endregion GL_POINT

        #region GL_LINE
        public const GLuint GL_LINE = 0x1B01;
        #endregion GL_LINE

        #region GL_FILL
        public const GLuint GL_FILL = 0x1B02;
        #endregion GL_FILL

        #region GL_RENDER
        public const GLuint GL_RENDER = 0x1C00;
        #endregion GL_RENDER

        #region GL_FEEDBACK
        public const GLuint GL_FEEDBACK = 0x1C01;
        #endregion GL_FEEDBACK

        #region GL_SELECT
        public const GLuint GL_SELECT = 0x1C02;
        #endregion GL_SELECT

        #region GL_FLAT
        public const GLuint GL_FLAT = 0x1D00;
        #endregion GL_FLAT

        #region GL_SMOOTH
        public const GLuint GL_SMOOTH = 0x1D01;
        #endregion GL_SMOOTH

        #region GL_KEEP
        public const GLuint GL_KEEP = 0x1E00;
        #endregion GL_KEEP

        #region GL_REPLACE
        public const GLuint GL_REPLACE = 0x1E01;
        #endregion GL_REPLACE

        #region GL_INCR
        public const GLuint GL_INCR = 0x1E02;
        #endregion GL_INCR

        #region GL_DECR
        public const GLuint GL_DECR = 0x1E03;
        #endregion GL_DECR

        #region GL_VENDOR
        public const GLuint GL_VENDOR = 0x1F00;
        #endregion GL_VENDOR

        #region GL_RENDERER
        public const GLuint GL_RENDERER = 0x1F01;
        #endregion GL_RENDERER

        #region GL_VERSION
        public const GLuint GL_VERSION = 0x1F02;
        #endregion GL_VERSION

        #region GL_EXTENSIONS
        public const GLuint GL_EXTENSIONS = 0x1F03;
        #endregion GL_EXTENSIONS

        #region GL_S
        public const GLuint GL_S = 0x2000;
        #endregion GL_S

        #region GL_T
        public const GLuint GL_T = 0x2001;
        #endregion GL_T

        #region GL_R
        public const GLuint GL_R = 0x2002;
        #endregion GL_R

        #region GL_Q
        public const GLuint GL_Q = 0x2003;
        #endregion GL_Q

        #region GL_MODULATE
        public const GLuint GL_MODULATE = 0x2100;
        #endregion GL_MODULATE

        #region GL_DECAL
        public const GLuint GL_DECAL = 0x2101;
        #endregion GL_DECAL

        #region GL_TEXTURE_ENV_MODE
        public const GLuint GL_TEXTURE_ENV_MODE = 0x2200;
        #endregion GL_TEXTURE_ENV_MODE

        #region GL_TEXTURE_ENV_COLOR
        public const GLuint GL_TEXTURE_ENV_COLOR = 0x2201;
        #endregion GL_TEXTURE_ENV_COLOR

        #region GL_TEXTURE_ENV
        public const GLuint GL_TEXTURE_ENV = 0x2300;
        #endregion GL_TEXTURE_ENV

        #region GL_EYE_LINEAR
        public const GLuint GL_EYE_LINEAR = 0x2400;
        #endregion GL_EYE_LINEAR

        #region GL_OBJECT_LINEAR
        public const GLuint GL_OBJECT_LINEAR = 0x2401;
        #endregion GL_OBJECT_LINEAR

        #region GL_SPHERE_MAP
        public const GLuint GL_SPHERE_MAP = 0x2402;
        #endregion GL_SPHERE_MAP

        #region GL_TEXTURE_GEN_MODE
        public const GLuint GL_TEXTURE_GEN_MODE = 0x2500;
        #endregion GL_TEXTURE_GEN_MODE

        #region GL_OBJECT_PLANE
        public const GLuint GL_OBJECT_PLANE = 0x2501;
        #endregion GL_OBJECT_PLANE

        #region GL_EYE_PLANE
        public const GLuint GL_EYE_PLANE = 0x2502;
        #endregion GL_EYE_PLANE

        #region GL_NEAREST
        public const GLuint GL_NEAREST = 0x2600;
        #endregion GL_NEAREST

        #region GL_LINEAR
        public const GLuint GL_LINEAR = 0x2601;
        #endregion GL_LINEAR

        #region GL_NEAREST_MIPMAP_NEAREST
        public const GLuint GL_NEAREST_MIPMAP_NEAREST = 0x2700;
        #endregion GL_NEAREST_MIPMAP_NEAREST

        #region GL_LINEAR_MIPMAP_NEAREST
        public const GLuint GL_LINEAR_MIPMAP_NEAREST = 0x2701;
        #endregion GL_LINEAR_MIPMAP_NEAREST

        #region GL_NEAREST_MIPMAP_LINEAR
        public const GLuint GL_NEAREST_MIPMAP_LINEAR = 0x2702;
        #endregion GL_NEAREST_MIPMAP_LINEAR

        #region GL_LINEAR_MIPMAP_LINEAR
        public const GLuint GL_LINEAR_MIPMAP_LINEAR = 0x2703;
        #endregion GL_LINEAR_MIPMAP_LINEAR

        #region GL_TEXTURE_MAG_FILTER
        public const GLuint GL_TEXTURE_MAG_FILTER = 0x2800;
        #endregion GL_TEXTURE_MAG_FILTER

        #region GL_TEXTURE_MIN_FILTER
        public const GLuint GL_TEXTURE_MIN_FILTER = 0x2801;
        #endregion GL_TEXTURE_MIN_FILTER

        #region GL_TEXTURE_WRAP_S
        public const GLuint GL_TEXTURE_WRAP_S = 0x2802;
        #endregion GL_TEXTURE_WRAP_S

        #region GL_TEXTURE_WRAP_T
        public const GLuint GL_TEXTURE_WRAP_T = 0x2803;
        #endregion GL_TEXTURE_WRAP_T

        #region GL_PROXY_TEXTURE_1D
        public const GLuint GL_PROXY_TEXTURE_1D = 0x8063;
        #endregion GL_PROXY_TEXTURE_1D

        #region GL_PROXY_TEXTURE_2D
        public const GLuint GL_PROXY_TEXTURE_2D = 0x8064;
        #endregion GL_PROXY_TEXTURE_2D

        #region GL_CLAMP
        public const GLuint GL_CLAMP = 0x2900;
        #endregion GL_CLAMP

        #region GL_REPEAT
        public const GLuint GL_REPEAT = 0x2901;
        #endregion GL_REPEAT

        #region GL_R3_G3_B2
        public const GLuint GL_R3_G3_B2 = 0x2A10;
        #endregion GL_R3_G3_B2

        #region GL_ALPHA4
        public const GLuint GL_ALPHA4 = 0x803B;
        #endregion GL_ALPHA4

        #region GL_ALPHA8
        public const GLuint GL_ALPHA8 = 0x803C;
        #endregion GL_ALPHA8

        #region GL_ALPHA12
        public const GLuint GL_ALPHA12 = 0x803D;
        #endregion GL_ALPHA12

        #region GL_ALPHA16
        public const GLuint GL_ALPHA16 = 0x803E;
        #endregion GL_ALPHA16

        #region GL_LUMINANCE4
        public const GLuint GL_LUMINANCE4 = 0x803F;
        #endregion GL_LUMINANCE4

        #region GL_LUMINANCE8
        public const GLuint GL_LUMINANCE8 = 0x8040;
        #endregion GL_LUMINANCE8

        #region GL_LUMINANCE12
        public const GLuint GL_LUMINANCE12 = 0x8041;
        #endregion GL_LUMINANCE12

        #region GL_LUMINANCE16
        public const GLuint GL_LUMINANCE16 = 0x8042;
        #endregion GL_LUMINANCE16

        #region GL_LUMINANCE4_ALPHA4
        public const GLuint GL_LUMINANCE4_ALPHA4 = 0x8043;
        #endregion GL_LUMINANCE4_ALPHA4

        #region GL_LUMINANCE6_ALPHA2
        public const GLuint GL_LUMINANCE6_ALPHA2 = 0x8044;
        #endregion GL_LUMINANCE6_ALPHA2

        #region GL_LUMINANCE8_ALPHA8
        public const GLuint GL_LUMINANCE8_ALPHA8 = 0x8045;
        #endregion GL_LUMINANCE8_ALPHA8

        #region GL_LUMINANCE12_ALPHA4
        public const GLuint GL_LUMINANCE12_ALPHA4 = 0x8046;
        #endregion GL_LUMINANCE12_ALPHA4

        #region GL_LUMINANCE12_ALPHA12
        public const GLuint GL_LUMINANCE12_ALPHA12 = 0x8047;
        #endregion GL_LUMINANCE12_ALPHA12

        #region GL_LUMINANCE16_ALPHA16
        public const GLuint GL_LUMINANCE16_ALPHA16 = 0x8048;
        #endregion GL_LUMINANCE16_ALPHA16

        #region GL_INTENSITY
        public const GLuint GL_INTENSITY = 0x8049;
        #endregion GL_INTENSITY

        #region GL_INTENSITY4
        public const GLuint GL_INTENSITY4 = 0x804A;
        #endregion GL_INTENSITY4

        #region GL_INTENSITY8
        public const GLuint GL_INTENSITY8 = 0x804B;
        #endregion GL_INTENSITY8

        #region GL_INTENSITY12
        public const GLuint GL_INTENSITY12 = 0x804C;
        #endregion GL_INTENSITY12

        #region GL_INTENSITY16
        public const GLuint GL_INTENSITY16 = 0x804D;
        #endregion GL_INTENSITY16

        #region GL_RGB4
        public const GLuint GL_RGB4 = 0x804F;
        #endregion GL_RGB4

        #region GL_RGB5
        public const GLuint GL_RGB5 = 0x8050;
        #endregion GL_RGB5

        #region GL_RGB8
        public const GLuint GL_RGB8 = 0x8051;
        #endregion GL_RGB8

        #region GL_RGB10
        public const GLuint GL_RGB10 = 0x8052;
        #endregion GL_RGB10

        #region GL_RGB12
        public const GLuint GL_RGB12 = 0x8053;
        #endregion GL_RGB12

        #region GL_RGB16
        public const GLuint GL_RGB16 = 0x8054;
        #endregion GL_RGB16

        #region GL_RGBA2
        public const GLuint GL_RGBA2 = 0x8055;
        #endregion GL_RGBA2

        #region GL_RGBA4
        public const GLuint GL_RGBA4 = 0x8056;
        #endregion GL_RGBA4

        #region GL_RGB5_A1
        public const GLuint GL_RGB5_A1 = 0x8057;
        #endregion GL_RGB5_A1

        #region GL_RGBA8
        public const GLuint GL_RGBA8 = 0x8058;
        #endregion GL_RGBA8

        #region GL_RGB10_A2
        public const GLuint GL_RGB10_A2 = 0x8059;
        #endregion GL_RGB10_A2

        #region GL_RGBA12
        public const GLuint GL_RGBA12 = 0x805A;
        #endregion GL_RGBA12

        #region GL_RGBA16
        public const GLuint GL_RGBA16 = 0x805B;
        #endregion GL_RGBA16

        #region GL_V2F
        public const GLuint GL_V2F = 0x2A20;
        #endregion GL_V2F

        #region GL_V3F
        public const GLuint GL_V3F = 0x2A21;
        #endregion GL_V3F

        #region GL_C4UB_V2F
        public const GLuint GL_C4UB_V2F = 0x2A22;
        #endregion GL_C4UB_V2F

        #region GL_C4UB_V3F
        public const GLuint GL_C4UB_V3F = 0x2A23;
        #endregion GL_C4UB_V3F

        #region GL_C3F_V3F
        public const GLuint GL_C3F_V3F = 0x2A24;
        #endregion GL_C3F_V3F

        #region GL_N3F_V3F
        public const GLuint GL_N3F_V3F = 0x2A25;
        #endregion GL_N3F_V3F

        #region GL_C4F_N3F_V3F
        public const GLuint GL_C4F_N3F_V3F = 0x2A26;
        #endregion GL_C4F_N3F_V3F

        #region GL_T2F_V3F
        public const GLuint GL_T2F_V3F = 0x2A27;
        #endregion GL_T2F_V3F

        #region GL_T4F_V4F
        public const GLuint GL_T4F_V4F = 0x2A28;
        #endregion GL_T4F_V4F

        #region GL_T2F_C4UB_V3F
        public const GLuint GL_T2F_C4UB_V3F = 0x2A29;
        #endregion GL_T2F_C4UB_V3F

        #region GL_T2F_C3F_V3F
        public const GLuint GL_T2F_C3F_V3F = 0x2A2A;
        #endregion GL_T2F_C3F_V3F

        #region GL_T2F_N3F_V3F
        public const GLuint GL_T2F_N3F_V3F = 0x2A2B;
        #endregion GL_T2F_N3F_V3F

        #region GL_T2F_C4F_N3F_V3F
        public const GLuint GL_T2F_C4F_N3F_V3F = 0x2A2C;
        #endregion GL_T2F_C4F_N3F_V3F

        #region GL_T4F_C4F_N3F_V4F
        public const GLuint GL_T4F_C4F_N3F_V4F = 0x2A2D;
        #endregion GL_T4F_C4F_N3F_V4F

        #region GL_CLIP_PLANE0
        public const GLuint GL_CLIP_PLANE0 = 0x3000;
        #endregion GL_CLIP_PLANE0

        #region GL_CLIP_PLANE1
        public const GLuint GL_CLIP_PLANE1 = 0x3001;
        #endregion GL_CLIP_PLANE1

        #region GL_CLIP_PLANE2
        public const GLuint GL_CLIP_PLANE2 = 0x3002;
        #endregion GL_CLIP_PLANE2

        #region GL_CLIP_PLANE3
        public const GLuint GL_CLIP_PLANE3 = 0x3003;
        #endregion GL_CLIP_PLANE3

        #region GL_CLIP_PLANE4
        public const GLuint GL_CLIP_PLANE4 = 0x3004;
        #endregion GL_CLIP_PLANE4

        #region GL_CLIP_PLANE5
        public const GLuint GL_CLIP_PLANE5 = 0x3005;
        #endregion GL_CLIP_PLANE5

        #region GL_LIGHT0
        public const GLuint GL_LIGHT0 = 0x4000;
        #endregion GL_LIGHT0

        #region GL_LIGHT1
        public const GLuint GL_LIGHT1 = 0x4001;
        #endregion GL_LIGHT1

        #region GL_LIGHT2
        public const GLuint GL_LIGHT2 = 0x4002;
        #endregion GL_LIGHT2

        #region GL_LIGHT3
        public const GLuint GL_LIGHT3 = 0x4003;
        #endregion GL_LIGHT3

        #region GL_LIGHT4
        public const GLuint GL_LIGHT4 = 0x4004;
        #endregion GL_LIGHT4

        #region GL_LIGHT5
        public const GLuint GL_LIGHT5 = 0x4005;
        #endregion GL_LIGHT5

        #region GL_LIGHT6
        public const GLuint GL_LIGHT6 = 0x4006;
        #endregion GL_LIGHT6

        #region GL_LIGHT7
        public const GLuint GL_LIGHT7 = 0x4007;
        #endregion GL_LIGHT7

        #region GL_ABGR_EXT
        public const GLuint GL_ABGR_EXT = 0x8000;
        #endregion GL_ABGR_EXT

        #region GL_CONSTANT_COLOR
        public const GLuint GL_CONSTANT_COLOR = 0x8001;
        #endregion GL_CONSTANT_COLOR

        #region GL_CONSTANT_COLOR_EXT
        public const GLuint GL_CONSTANT_COLOR_EXT = 0x8001;
        #endregion GL_CONSTANT_COLOR_EXT

        #region GL_ONE_MINUS_CONSTANT_COLOR
        public const GLuint GL_ONE_MINUS_CONSTANT_COLOR = 0x8002;
        #endregion GL_ONE_MINUS_CONSTANT_COLOR

        #region GL_ONE_MINUS_CONSTANT_COLOR_EXT
        public const GLuint GL_ONE_MINUS_CONSTANT_COLOR_EXT = 0x8002;
        #endregion GL_ONE_MINUS_CONSTANT_COLOR_EXT

        #region GL_CONSTANT_ALPHA
        public const GLuint GL_CONSTANT_ALPHA = 0x8003;
        #endregion GL_CONSTANT_ALPHA

        #region GL_CONSTANT_ALPHA_EXT
        public const GLuint GL_CONSTANT_ALPHA_EXT = 0x8003;
        #endregion GL_CONSTANT_ALPHA_EXT

        #region GL_ONE_MINUS_CONSTANT_ALPHA
        public const GLuint GL_ONE_MINUS_CONSTANT_ALPHA = 0x8004;
        #endregion GL_ONE_MINUS_CONSTANT_ALPHA

        #region GL_ONE_MINUS_CONSTANT_ALPHA_EXT
        public const GLuint GL_ONE_MINUS_CONSTANT_ALPHA_EXT = 0x8004;
        #endregion GL_ONE_MINUS_CONSTANT_ALPHA_EXT

        #region GL_BLEND_COLOR
        public const GLuint GL_BLEND_COLOR = 0x8005;
        #endregion GL_BLEND_COLOR

        #region GL_BLEND_COLOR_EXT
        public const GLuint GL_BLEND_COLOR_EXT = 0x8005;
        #endregion GL_BLEND_COLOR_EXT

        #region GL_FUNC_ADD
        public const GLuint GL_FUNC_ADD = 0x8006;
        #endregion GL_FUNC_ADD

        #region GL_FUNC_ADD_EXT
        public const GLuint GL_FUNC_ADD_EXT = 0x8006;
        #endregion GL_FUNC_ADD_EXT

        #region GL_MIN
        public const GLuint GL_MIN = 0x8007;
        #endregion GL_MIN

        #region GL_MIN_EXT
        public const GLuint GL_MIN_EXT = 0x8007;
        #endregion GL_MIN_EXT

        #region GL_MAX
        public const GLuint GL_MAX = 0x8008;
        #endregion GL_MAX

        #region GL_MAX_EXT
        public const GLuint GL_MAX_EXT = 0x8008;
        #endregion GL_MAX_EXT

        #region GL_BLEND_EQUATION
        public const GLuint GL_BLEND_EQUATION = 0x8009;
        #endregion GL_BLEND_EQUATION

        #region GL_BLEND_EQUATION_EXT
        public const GLuint GL_BLEND_EQUATION_EXT = 0x8009;
        #endregion GL_BLEND_EQUATION_EXT

        #region GL_FUNC_SUBTRACT
        public const GLuint GL_FUNC_SUBTRACT = 0x800A;
        #endregion GL_FUNC_SUBTRACT

        #region GL_FUNC_SUBTRACT_EXT
        public const GLuint GL_FUNC_SUBTRACT_EXT = 0x800A;
        #endregion GL_FUNC_SUBTRACT_EXT

        #region GL_FUNC_REVERSE_SUBTRACT
        public const GLuint GL_FUNC_REVERSE_SUBTRACT = 0x800B;
        #endregion GL_FUNC_REVERSE_SUBTRACT

        #region GL_FUNC_REVERSE_SUBTRACT_EXT
        public const GLuint GL_FUNC_REVERSE_SUBTRACT_EXT = 0x800B;
        #endregion GL_FUNC_REVERSE_SUBTRACT_EXT

        #region GL_CMYK_EXT
        public const GLuint GL_CMYK_EXT = 0x800C;
        #endregion GL_CMYK_EXT

        #region GL_CMYKA_EXT
        public const GLuint GL_CMYKA_EXT = 0x800D;
        #endregion GL_CMYKA_EXT

        #region GL_PACK_CMYK_HINT_EXT
        public const GLuint GL_PACK_CMYK_HINT_EXT = 0x800E;
        #endregion GL_PACK_CMYK_HINT_EXT

        #region GL_UNPACK_CMYK_HINT_EXT
        public const GLuint GL_UNPACK_CMYK_HINT_EXT = 0x800F;
        #endregion GL_UNPACK_CMYK_HINT_EXT

        #region GL_CONVOLUTION_1D
        public const GLuint GL_CONVOLUTION_1D = 0x8010;
        #endregion GL_CONVOLUTION_1D

        #region GL_CONVOLUTION_1D_EXT
        public const GLuint GL_CONVOLUTION_1D_EXT = 0x8010;
        #endregion GL_CONVOLUTION_1D_EXT

        #region GL_CONVOLUTION_2D
        public const GLuint GL_CONVOLUTION_2D = 0x8011;
        #endregion GL_CONVOLUTION_2D

        #region GL_CONVOLUTION_2D_EXT
        public const GLuint GL_CONVOLUTION_2D_EXT = 0x8011;
        #endregion GL_CONVOLUTION_2D_EXT

        #region GL_SEPARABLE_2D
        public const GLuint GL_SEPARABLE_2D = 0x8012;
        #endregion GL_SEPARABLE_2D

        #region GL_SEPARABLE_2D_EXT
        public const GLuint GL_SEPARABLE_2D_EXT = 0x8012;
        #endregion GL_SEPARABLE_2D_EXT

        #region GL_CONVOLUTION_BORDER_MODE
        public const GLuint GL_CONVOLUTION_BORDER_MODE = 0x8013;
        #endregion GL_CONVOLUTION_BORDER_MODE

        #region GL_CONVOLUTION_BORDER_MODE_EXT
        public const GLuint GL_CONVOLUTION_BORDER_MODE_EXT = 0x8013;
        #endregion GL_CONVOLUTION_BORDER_MODE_EXT

        #region GL_CONVOLUTION_FILTER_SCALE
        public const GLuint GL_CONVOLUTION_FILTER_SCALE = 0x8014;
        #endregion GL_CONVOLUTION_FILTER_SCALE

        #region GL_CONVOLUTION_FILTER_SCALE_EXT
        public const GLuint GL_CONVOLUTION_FILTER_SCALE_EXT = 0x8014;
        #endregion GL_CONVOLUTION_FILTER_SCALE_EXT

        #region GL_CONVOLUTION_FILTER_BIAS
        public const GLuint GL_CONVOLUTION_FILTER_BIAS = 0x8015;
        #endregion GL_CONVOLUTION_FILTER_BIAS

        #region GL_CONVOLUTION_FILTER_BIAS_EXT
        public const GLuint GL_CONVOLUTION_FILTER_BIAS_EXT = 0x8015;
        #endregion GL_CONVOLUTION_FILTER_BIAS_EXT

        #region GL_REDUCE
        public const GLuint GL_REDUCE = 0x8016;
        #endregion GL_REDUCE

        #region GL_REDUCE_EXT
        public const GLuint GL_REDUCE_EXT = 0x8016;
        #endregion GL_REDUCE_EXT

        #region GL_CONVOLUTION_FORMAT
        public const GLuint GL_CONVOLUTION_FORMAT = 0x8017;
        #endregion GL_CONVOLUTION_FORMAT

        #region GL_CONVOLUTION_FORMAT_EXT
        public const GLuint GL_CONVOLUTION_FORMAT_EXT = 0x8017;
        #endregion GL_CONVOLUTION_FORMAT_EXT

        #region GL_CONVOLUTION_WIDTH
        public const GLuint GL_CONVOLUTION_WIDTH = 0x8018;
        #endregion GL_CONVOLUTION_WIDTH

        #region GL_CONVOLUTION_WIDTH_EXT
        public const GLuint GL_CONVOLUTION_WIDTH_EXT = 0x8018;
        #endregion GL_CONVOLUTION_WIDTH_EXT

        #region GL_CONVOLUTION_HEIGHT
        public const GLuint GL_CONVOLUTION_HEIGHT = 0x8019;
        #endregion GL_CONVOLUTION_HEIGHT

        #region GL_CONVOLUTION_HEIGHT_EXT
        public const GLuint GL_CONVOLUTION_HEIGHT_EXT = 0x8019;
        #endregion GL_CONVOLUTION_HEIGHT_EXT

        #region GL_MAX_CONVOLUTION_WIDTH
        public const GLuint GL_MAX_CONVOLUTION_WIDTH = 0x801A;
        #endregion GL_MAX_CONVOLUTION_WIDTH

        #region GL_MAX_CONVOLUTION_WIDTH_EXT
        public const GLuint GL_MAX_CONVOLUTION_WIDTH_EXT = 0x801A;
        #endregion GL_MAX_CONVOLUTION_WIDTH_EXT

        #region GL_MAX_CONVOLUTION_HEIGHT
        public const GLuint GL_MAX_CONVOLUTION_HEIGHT = 0x801B;
        #endregion GL_MAX_CONVOLUTION_HEIGHT

        #region GL_MAX_CONVOLUTION_HEIGHT_EXT
        public const GLuint GL_MAX_CONVOLUTION_HEIGHT_EXT = 0x801B;
        #endregion GL_MAX_CONVOLUTION_HEIGHT_EXT

        #region GL_POST_CONVOLUTION_RED_SCALE
        public const GLuint GL_POST_CONVOLUTION_RED_SCALE = 0x801C;
        #endregion GL_POST_CONVOLUTION_RED_SCALE

        #region GL_POST_CONVOLUTION_RED_SCALE_EXT
        public const GLuint GL_POST_CONVOLUTION_RED_SCALE_EXT = 0x801C;
        #endregion GL_POST_CONVOLUTION_RED_SCALE_EXT

        #region GL_POST_CONVOLUTION_GREEN_SCALE
        public const GLuint GL_POST_CONVOLUTION_GREEN_SCALE = 0x801D;
        #endregion GL_POST_CONVOLUTION_GREEN_SCALE

        #region GL_POST_CONVOLUTION_GREEN_SCALE_EXT
        public const GLuint GL_POST_CONVOLUTION_GREEN_SCALE_EXT = 0x801D;
        #endregion GL_POST_CONVOLUTION_GREEN_SCALE_EXT

        #region GL_POST_CONVOLUTION_BLUE_SCALE
        public const GLuint GL_POST_CONVOLUTION_BLUE_SCALE = 0x801E;
        #endregion GL_POST_CONVOLUTION_BLUE_SCALE

        #region GL_POST_CONVOLUTION_BLUE_SCALE_EXT
        public const GLuint GL_POST_CONVOLUTION_BLUE_SCALE_EXT = 0x801E;
        #endregion GL_POST_CONVOLUTION_BLUE_SCALE_EXT

        #region GL_POST_CONVOLUTION_ALPHA_SCALE
        public const GLuint GL_POST_CONVOLUTION_ALPHA_SCALE = 0x801F;
        #endregion GL_POST_CONVOLUTION_ALPHA_SCALE

        #region GL_POST_CONVOLUTION_ALPHA_SCALE_EXT
        public const GLuint GL_POST_CONVOLUTION_ALPHA_SCALE_EXT = 0x801F;
        #endregion GL_POST_CONVOLUTION_ALPHA_SCALE_EXT

        #region GL_POST_CONVOLUTION_RED_BIAS
        public const GLuint GL_POST_CONVOLUTION_RED_BIAS = 0x8020;
        #endregion GL_POST_CONVOLUTION_RED_BIAS

        #region GL_POST_CONVOLUTION_RED_BIAS_EXT
        public const GLuint GL_POST_CONVOLUTION_RED_BIAS_EXT = 0x8020;
        #endregion GL_POST_CONVOLUTION_RED_BIAS_EXT

        #region GL_POST_CONVOLUTION_GREEN_BIAS
        public const GLuint GL_POST_CONVOLUTION_GREEN_BIAS = 0x8021;
        #endregion GL_POST_CONVOLUTION_GREEN_BIAS

        #region GL_POST_CONVOLUTION_GREEN_BIAS_EXT
        public const GLuint GL_POST_CONVOLUTION_GREEN_BIAS_EXT = 0x8021;
        #endregion GL_POST_CONVOLUTION_GREEN_BIAS_EXT

        #region GL_POST_CONVOLUTION_BLUE_BIAS
        public const GLuint GL_POST_CONVOLUTION_BLUE_BIAS = 0x8022;
        #endregion GL_POST_CONVOLUTION_BLUE_BIAS

        #region GL_POST_CONVOLUTION_BLUE_BIAS_EXT
        public const GLuint GL_POST_CONVOLUTION_BLUE_BIAS_EXT = 0x8022;
        #endregion GL_POST_CONVOLUTION_BLUE_BIAS_EXT

        #region GL_POST_CONVOLUTION_ALPHA_BIAS
        public const GLuint GL_POST_CONVOLUTION_ALPHA_BIAS = 0x8023;
        #endregion GL_POST_CONVOLUTION_ALPHA_BIAS

        #region GL_POST_CONVOLUTION_ALPHA_BIAS_EXT
        public const GLuint GL_POST_CONVOLUTION_ALPHA_BIAS_EXT = 0x8023;
        #endregion GL_POST_CONVOLUTION_ALPHA_BIAS_EXT

        #region GL_HISTOGRAM
        public const GLuint GL_HISTOGRAM = 0x8024;
        #endregion GL_HISTOGRAM

        #region GL_HISTOGRAM_EXT
        public const GLuint GL_HISTOGRAM_EXT = 0x8024;
        #endregion GL_HISTOGRAM_EXT

        #region GL_PROXY_HISTOGRAM
        public const GLuint GL_PROXY_HISTOGRAM = 0x8025;
        #endregion GL_PROXY_HISTOGRAM

        #region GL_PROXY_HISTOGRAM_EXT
        public const GLuint GL_PROXY_HISTOGRAM_EXT = 0x8025;
        #endregion GL_PROXY_HISTOGRAM_EXT

        #region GL_HISTOGRAM_WIDTH
        public const GLuint GL_HISTOGRAM_WIDTH = 0x8026;
        #endregion GL_HISTOGRAM_WIDTH

        #region GL_HISTOGRAM_WIDTH_EXT
        public const GLuint GL_HISTOGRAM_WIDTH_EXT = 0x8026;
        #endregion GL_HISTOGRAM_WIDTH_EXT

        #region GL_HISTOGRAM_FORMAT
        public const GLuint GL_HISTOGRAM_FORMAT = 0x8027;
        #endregion GL_HISTOGRAM_FORMAT

        #region GL_HISTOGRAM_FORMAT_EXT
        public const GLuint GL_HISTOGRAM_FORMAT_EXT = 0x8027;
        #endregion GL_HISTOGRAM_FORMAT_EXT

        #region GL_HISTOGRAM_RED_SIZE
        public const GLuint GL_HISTOGRAM_RED_SIZE = 0x8028;
        #endregion GL_HISTOGRAM_RED_SIZE

        #region GL_HISTOGRAM_RED_SIZE_EXT
        public const GLuint GL_HISTOGRAM_RED_SIZE_EXT = 0x8028;
        #endregion GL_HISTOGRAM_RED_SIZE_EXT

        #region GL_HISTOGRAM_GREEN_SIZE
        public const GLuint GL_HISTOGRAM_GREEN_SIZE = 0x8029;
        #endregion GL_HISTOGRAM_GREEN_SIZE

        #region GL_HISTOGRAM_GREEN_SIZE_EXT
        public const GLuint GL_HISTOGRAM_GREEN_SIZE_EXT = 0x8029;
        #endregion GL_HISTOGRAM_GREEN_SIZE_EXT

        #region GL_HISTOGRAM_BLUE_SIZE
        public const GLuint GL_HISTOGRAM_BLUE_SIZE = 0x802A;
        #endregion GL_HISTOGRAM_BLUE_SIZE

        #region GL_HISTOGRAM_BLUE_SIZE_EXT
        public const GLuint GL_HISTOGRAM_BLUE_SIZE_EXT = 0x802A;
        #endregion GL_HISTOGRAM_BLUE_SIZE_EXT

        #region GL_HISTOGRAM_ALPHA_SIZE
        public const GLuint GL_HISTOGRAM_ALPHA_SIZE = 0x802B;
        #endregion GL_HISTOGRAM_ALPHA_SIZE

        #region GL_HISTOGRAM_ALPHA_SIZE_EXT
        public const GLuint GL_HISTOGRAM_ALPHA_SIZE_EXT = 0x802B;
        #endregion GL_HISTOGRAM_ALPHA_SIZE_EXT

        #region GL_HISTOGRAM_LUMINANCE_SIZE
        public const GLuint GL_HISTOGRAM_LUMINANCE_SIZE = 0x802C;
        #endregion GL_HISTOGRAM_LUMINANCE_SIZE

        #region GL_HISTOGRAM_LUMINANCE_SIZE_EXT
        public const GLuint GL_HISTOGRAM_LUMINANCE_SIZE_EXT = 0x802C;
        #endregion GL_HISTOGRAM_LUMINANCE_SIZE_EXT

        #region GL_HISTOGRAM_SINK
        public const GLuint GL_HISTOGRAM_SINK = 0x802D;
        #endregion GL_HISTOGRAM_SINK

        #region GL_HISTOGRAM_SINK_EXT
        public const GLuint GL_HISTOGRAM_SINK_EXT = 0x802D;
        #endregion GL_HISTOGRAM_SINK_EXT

        #region GL_MINMAX
        public const GLuint GL_MINMAX = 0x802E;
        #endregion GL_MINMAX

        #region GL_MINMAX_EXT
        public const GLuint GL_MINMAX_EXT = 0x802E;
        #endregion GL_MINMAX_EXT

        #region GL_MINMAX_FORMAT
        public const GLuint GL_MINMAX_FORMAT = 0x802F;
        #endregion GL_MINMAX_FORMAT

        #region GL_MINMAX_FORMAT_EXT
        public const GLuint GL_MINMAX_FORMAT_EXT = 0x802F;
        #endregion GL_MINMAX_FORMAT_EXT

        #region GL_MINMAX_SINK
        public const GLuint GL_MINMAX_SINK = 0x8030;
        #endregion GL_MINMAX_SINK

        #region GL_MINMAX_SINK_EXT
        public const GLuint GL_MINMAX_SINK_EXT = 0x8030;
        #endregion GL_MINMAX_SINK_EXT

        #region GL_TABLE_TOO_LARGE
        public const GLuint GL_TABLE_TOO_LARGE = 0x8031;
        #endregion GL_TABLE_TOO_LARGE

        #region GL_TABLE_TOO_LARGE_EXT
        public const GLuint GL_TABLE_TOO_LARGE_EXT = 0x8031;
        #endregion GL_TABLE_TOO_LARGE_EXT

        #region GL_UNSIGNED_BYTE_3_3_2
        public const GLuint GL_UNSIGNED_BYTE_3_3_2 = 0x8032;
        #endregion GL_UNSIGNED_BYTE_3_3_2

        #region GL_UNSIGNED_BYTE_3_3_2_EXT
        public const GLuint GL_UNSIGNED_BYTE_3_3_2_EXT = 0x8032;
        #endregion GL_UNSIGNED_BYTE_3_3_2_EXT

        #region GL_UNSIGNED_SHORT_4_4_4_4
        public const GLuint GL_UNSIGNED_SHORT_4_4_4_4 = 0x8033;
        #endregion GL_UNSIGNED_SHORT_4_4_4_4

        #region GL_UNSIGNED_SHORT_4_4_4_4_EXT
        public const GLuint GL_UNSIGNED_SHORT_4_4_4_4_EXT = 0x8033;
        #endregion GL_UNSIGNED_SHORT_4_4_4_4_EXT

        #region GL_UNSIGNED_SHORT_5_5_5_1
        public const GLuint GL_UNSIGNED_SHORT_5_5_5_1 = 0x8034;
        #endregion GL_UNSIGNED_SHORT_5_5_5_1

        #region GL_UNSIGNED_SHORT_5_5_5_1_EXT
        public const GLuint GL_UNSIGNED_SHORT_5_5_5_1_EXT = 0x8034;
        #endregion GL_UNSIGNED_SHORT_5_5_5_1_EXT

        #region GL_UNSIGNED_INT_8_8_8_8
        public const GLuint GL_UNSIGNED_INT_8_8_8_8 = 0x8035;
        #endregion GL_UNSIGNED_INT_8_8_8_8

        #region GL_UNSIGNED_INT_8_8_8_8_EXT
        public const GLuint GL_UNSIGNED_INT_8_8_8_8_EXT = 0x8035;
        #endregion GL_UNSIGNED_INT_8_8_8_8_EXT

        #region GL_UNSIGNED_INT_10_10_10_2
        public const GLuint GL_UNSIGNED_INT_10_10_10_2 = 0x8036;
        #endregion GL_UNSIGNED_INT_10_10_10_2

        #region GL_UNSIGNED_INT_10_10_10_2_EXT
        public const GLuint GL_UNSIGNED_INT_10_10_10_2_EXT = 0x8036;
        #endregion GL_UNSIGNED_INT_10_10_10_2_EXT

        #region GL_UNSIGNED_BYTE_2_3_3_REV
        public const GLuint GL_UNSIGNED_BYTE_2_3_3_REV = 0x8362;
        #endregion GL_UNSIGNED_BYTE_2_3_3_REV

        #region GL_UNSIGNED_BYTE_2_3_3_REV_EXT
        public const GLuint GL_UNSIGNED_BYTE_2_3_3_REV_EXT = 0x8362;
        #endregion GL_UNSIGNED_BYTE_2_3_3_REV_EXT

        #region GL_UNSIGNED_SHORT_5_6_5
        public const GLuint GL_UNSIGNED_SHORT_5_6_5 = 0x8363;
        #endregion GL_UNSIGNED_SHORT_5_6_5

        #region GL_UNSIGNED_SHORT_5_6_5_EXT
        public const GLuint GL_UNSIGNED_SHORT_5_6_5_EXT = 0x8363;
        #endregion GL_UNSIGNED_SHORT_5_6_5_EXT

        #region GL_UNSIGNED_SHORT_5_6_5_REV
        public const GLuint GL_UNSIGNED_SHORT_5_6_5_REV = 0x8364;
        #endregion GL_UNSIGNED_SHORT_5_6_5_REV

        #region GL_UNSIGNED_SHORT_5_6_5_REV_EXT
        public const GLuint GL_UNSIGNED_SHORT_5_6_5_REV_EXT = 0x8364;
        #endregion GL_UNSIGNED_SHORT_5_6_5_REV_EXT

        #region GL_UNSIGNED_SHORT_4_4_4_4_REV
        public const GLuint GL_UNSIGNED_SHORT_4_4_4_4_REV = 0x8365;
        #endregion GL_UNSIGNED_SHORT_4_4_4_4_REV

        #region GL_UNSIGNED_SHORT_4_4_4_4_REV_EXT
        public const GLuint GL_UNSIGNED_SHORT_4_4_4_4_REV_EXT = 0x8365;
        #endregion GL_UNSIGNED_SHORT_4_4_4_4_REV_EXT

        #region GL_UNSIGNED_SHORT_1_5_5_5_REV
        public const GLuint GL_UNSIGNED_SHORT_1_5_5_5_REV = 0x8366;
        #endregion GL_UNSIGNED_SHORT_1_5_5_5_REV

        #region GL_UNSIGNED_SHORT_1_5_5_5_REV_EXT
        public const GLuint GL_UNSIGNED_SHORT_1_5_5_5_REV_EXT = 0x8366;
        #endregion GL_UNSIGNED_SHORT_1_5_5_5_REV_EXT

        #region GL_UNSIGNED_INT_8_8_8_8_REV
        public const GLuint GL_UNSIGNED_INT_8_8_8_8_REV = 0x8367;
        #endregion GL_UNSIGNED_INT_8_8_8_8_REV

        #region GL_UNSIGNED_INT_8_8_8_8_REV_EXT
        public const GLuint GL_UNSIGNED_INT_8_8_8_8_REV_EXT = 0x8367;
        #endregion GL_UNSIGNED_INT_8_8_8_8_REV_EXT

        #region GL_UNSIGNED_INT_2_10_10_10_REV
        public const GLuint GL_UNSIGNED_INT_2_10_10_10_REV = 0x8368;
        #endregion GL_UNSIGNED_INT_2_10_10_10_REV

        #region GL_UNSIGNED_INT_2_10_10_10_REV_EXT
        public const GLuint GL_UNSIGNED_INT_2_10_10_10_REV_EXT = 0x8368;
        #endregion GL_UNSIGNED_INT_2_10_10_10_REV_EXT

        #region GL_POLYGON_OFFSET_EXT
        public const GLuint GL_POLYGON_OFFSET_EXT = 0x8037;
        #endregion GL_POLYGON_OFFSET_EXT

        #region GL_POLYGON_OFFSET_FACTOR_EXT
        public const GLuint GL_POLYGON_OFFSET_FACTOR_EXT = 0x8038;
        #endregion GL_POLYGON_OFFSET_FACTOR_EXT

        #region GL_POLYGON_OFFSET_BIAS_EXT
        public const GLuint GL_POLYGON_OFFSET_BIAS_EXT = 0x8039;
        #endregion GL_POLYGON_OFFSET_BIAS_EXT

        #region GL_RESCALE_NORMAL
        public const GLuint GL_RESCALE_NORMAL = 0x803A;
        #endregion GL_RESCALE_NORMAL

        #region GL_RESCALE_NORMAL_EXT
        public const GLuint GL_RESCALE_NORMAL_EXT = 0x803A;
        #endregion GL_RESCALE_NORMAL_EXT

        #region GL_ALPHA4_EXT
        public const GLuint GL_ALPHA4_EXT = 0x803B;
        #endregion GL_ALPHA4_EXT

        #region GL_ALPHA8_EXT
        public const GLuint GL_ALPHA8_EXT = 0x803C;
        #endregion GL_ALPHA8_EXT

        #region GL_ALPHA12_EXT
        public const GLuint GL_ALPHA12_EXT = 0x803D;
        #endregion GL_ALPHA12_EXT

        #region GL_ALPHA16_EXT
        public const GLuint GL_ALPHA16_EXT = 0x803E;
        #endregion GL_ALPHA16_EXT

        #region GL_LUMINANCE4_EXT
        public const GLuint GL_LUMINANCE4_EXT = 0x803F;
        #endregion GL_LUMINANCE4_EXT

        #region GL_LUMINANCE8_EXT
        public const GLuint GL_LUMINANCE8_EXT = 0x8040;
        #endregion GL_LUMINANCE8_EXT

        #region GL_LUMINANCE12_EXT
        public const GLuint GL_LUMINANCE12_EXT = 0x8041;
        #endregion GL_LUMINANCE12_EXT

        #region GL_LUMINANCE16_EXT
        public const GLuint GL_LUMINANCE16_EXT = 0x8042;
        #endregion GL_LUMINANCE16_EXT

        #region GL_LUMINANCE4_ALPHA4_EXT
        public const GLuint GL_LUMINANCE4_ALPHA4_EXT = 0x8043;
        #endregion GL_LUMINANCE4_ALPHA4_EXT

        #region GL_LUMINANCE6_ALPHA2_EXT
        public const GLuint GL_LUMINANCE6_ALPHA2_EXT = 0x8044;
        #endregion GL_LUMINANCE6_ALPHA2_EXT

        #region GL_LUMINANCE8_ALPHA8_EXT
        public const GLuint GL_LUMINANCE8_ALPHA8_EXT = 0x8045;
        #endregion GL_LUMINANCE8_ALPHA8_EXT

        #region GL_LUMINANCE12_ALPHA4_EXT
        public const GLuint GL_LUMINANCE12_ALPHA4_EXT = 0x8046;
        #endregion GL_LUMINANCE12_ALPHA4_EXT

        #region GL_LUMINANCE12_ALPHA12_EXT
        public const GLuint GL_LUMINANCE12_ALPHA12_EXT = 0x8047;
        #endregion GL_LUMINANCE12_ALPHA12_EXT

        #region GL_LUMINANCE16_ALPHA16_EXT
        public const GLuint GL_LUMINANCE16_ALPHA16_EXT = 0x8048;
        #endregion GL_LUMINANCE16_ALPHA16_EXT

        #region GL_INTENSITY_EXT
        public const GLuint GL_INTENSITY_EXT = 0x8049;
        #endregion GL_INTENSITY_EXT

        #region GL_INTENSITY4_EXT
        public const GLuint GL_INTENSITY4_EXT = 0x804A;
        #endregion GL_INTENSITY4_EXT

        #region GL_INTENSITY8_EXT
        public const GLuint GL_INTENSITY8_EXT = 0x804B;
        #endregion GL_INTENSITY8_EXT

        #region GL_INTENSITY12_EXT
        public const GLuint GL_INTENSITY12_EXT = 0x804C;
        #endregion GL_INTENSITY12_EXT

        #region GL_INTENSITY16_EXT
        public const GLuint GL_INTENSITY16_EXT = 0x804D;
        #endregion GL_INTENSITY16_EXT

        #region GL_RGB2_EXT
        public const GLuint GL_RGB2_EXT = 0x804E;
        #endregion GL_RGB2_EXT

        #region GL_RGB4_EXT
        public const GLuint GL_RGB4_EXT = 0x804F;
        #endregion GL_RGB4_EXT

        #region GL_RGB5_EXT
        public const GLuint GL_RGB5_EXT = 0x8050;
        #endregion GL_RGB5_EXT

        #region GL_RGB8_EXT
        public const GLuint GL_RGB8_EXT = 0x8051;
        #endregion GL_RGB8_EXT

        #region GL_RGB10_EXT
        public const GLuint GL_RGB10_EXT = 0x8052;
        #endregion GL_RGB10_EXT

        #region GL_RGB12_EXT
        public const GLuint GL_RGB12_EXT = 0x8053;
        #endregion GL_RGB12_EXT

        #region GL_RGB16_EXT
        public const GLuint GL_RGB16_EXT = 0x8054;
        #endregion GL_RGB16_EXT

        #region GL_RGBA2_EXT
        public const GLuint GL_RGBA2_EXT = 0x8055;
        #endregion GL_RGBA2_EXT

        #region GL_RGBA4_EXT
        public const GLuint GL_RGBA4_EXT = 0x8056;
        #endregion GL_RGBA4_EXT

        #region GL_RGB5_A1_EXT
        public const GLuint GL_RGB5_A1_EXT = 0x8057;
        #endregion GL_RGB5_A1_EXT

        #region GL_RGBA8_EXT
        public const GLuint GL_RGBA8_EXT = 0x8058;
        #endregion GL_RGBA8_EXT

        #region GL_RGB10_A2_EXT
        public const GLuint GL_RGB10_A2_EXT = 0x8059;
        #endregion GL_RGB10_A2_EXT

        #region GL_RGBA12_EXT
        public const GLuint GL_RGBA12_EXT = 0x805A;
        #endregion GL_RGBA12_EXT

        #region GL_RGBA16_EXT
        public const GLuint GL_RGBA16_EXT = 0x805B;
        #endregion GL_RGBA16_EXT

        #region GL_TEXTURE_RED_SIZE_EXT
        public const GLuint GL_TEXTURE_RED_SIZE_EXT = 0x805C;
        #endregion GL_TEXTURE_RED_SIZE_EXT

        #region GL_TEXTURE_GREEN_SIZE_EXT
        public const GLuint GL_TEXTURE_GREEN_SIZE_EXT = 0x805D;
        #endregion GL_TEXTURE_GREEN_SIZE_EXT

        #region GL_TEXTURE_BLUE_SIZE_EXT
        public const GLuint GL_TEXTURE_BLUE_SIZE_EXT = 0x805E;
        #endregion GL_TEXTURE_BLUE_SIZE_EXT

        #region GL_TEXTURE_ALPHA_SIZE_EXT
        public const GLuint GL_TEXTURE_ALPHA_SIZE_EXT = 0x805F;
        #endregion GL_TEXTURE_ALPHA_SIZE_EXT

        #region GL_TEXTURE_LUMINANCE_SIZE_EXT
        public const GLuint GL_TEXTURE_LUMINANCE_SIZE_EXT = 0x8060;
        #endregion GL_TEXTURE_LUMINANCE_SIZE_EXT

        #region GL_TEXTURE_INTENSITY_SIZE_EXT
        public const GLuint GL_TEXTURE_INTENSITY_SIZE_EXT = 0x8061;
        #endregion GL_TEXTURE_INTENSITY_SIZE_EXT

        #region GL_REPLACE_EXT
        public const GLuint GL_REPLACE_EXT = 0x8062;
        #endregion GL_REPLACE_EXT

        #region GL_PROXY_TEXTURE_1D_EXT
        public const GLuint GL_PROXY_TEXTURE_1D_EXT = 0x8063;
        #endregion GL_PROXY_TEXTURE_1D_EXT

        #region GL_PROXY_TEXTURE_2D_EXT
        public const GLuint GL_PROXY_TEXTURE_2D_EXT = 0x8064;
        #endregion GL_PROXY_TEXTURE_2D_EXT

        #region GL_TEXTURE_TOO_LARGE_EXT
        public const GLuint GL_TEXTURE_TOO_LARGE_EXT = 0x8065;
        #endregion GL_TEXTURE_TOO_LARGE_EXT

        #region GL_TEXTURE_PRIORITY_EXT
        public const GLuint GL_TEXTURE_PRIORITY_EXT = 0x8066;
        #endregion GL_TEXTURE_PRIORITY_EXT

        #region GL_TEXTURE_RESIDENT_EXT
        public const GLuint GL_TEXTURE_RESIDENT_EXT = 0x8067;
        #endregion GL_TEXTURE_RESIDENT_EXT

        #region GL_TEXTURE_1D_BINDING_EXT
        public const GLuint GL_TEXTURE_1D_BINDING_EXT = 0x8068;
        #endregion GL_TEXTURE_1D_BINDING_EXT

        #region GL_TEXTURE_2D_BINDING_EXT
        public const GLuint GL_TEXTURE_2D_BINDING_EXT = 0x8069;
        #endregion GL_TEXTURE_2D_BINDING_EXT

        #region GL_TEXTURE_3D_BINDING_EXT
        public const GLuint GL_TEXTURE_3D_BINDING_EXT = 0x806A;
        #endregion GL_TEXTURE_3D_BINDING_EXT

        #region GL_PACK_SKIP_IMAGES
        public const GLuint GL_PACK_SKIP_IMAGES = 0x806B;
        #endregion GL_PACK_SKIP_IMAGES

        #region GL_PACK_SKIP_IMAGES_EXT
        public const GLuint GL_PACK_SKIP_IMAGES_EXT = 0x806B;
        #endregion GL_PACK_SKIP_IMAGES_EXT

        #region GL_PACK_IMAGE_HEIGHT
        public const GLuint GL_PACK_IMAGE_HEIGHT = 0x806C;
        #endregion GL_PACK_IMAGE_HEIGHT

        #region GL_PACK_IMAGE_HEIGHT_EXT
        public const GLuint GL_PACK_IMAGE_HEIGHT_EXT = 0x806C;
        #endregion GL_PACK_IMAGE_HEIGHT_EXT

        #region GL_UNPACK_SKIP_IMAGES
        public const GLuint GL_UNPACK_SKIP_IMAGES = 0x806D;
        #endregion GL_UNPACK_SKIP_IMAGES

        #region GL_UNPACK_SKIP_IMAGES_EXT
        public const GLuint GL_UNPACK_SKIP_IMAGES_EXT = 0x806D;
        #endregion GL_UNPACK_SKIP_IMAGES_EXT

        #region GL_UNPACK_IMAGE_HEIGHT
        public const GLuint GL_UNPACK_IMAGE_HEIGHT = 0x806E;
        #endregion GL_UNPACK_IMAGE_HEIGHT

        #region GL_UNPACK_IMAGE_HEIGHT_EXT
        public const GLuint GL_UNPACK_IMAGE_HEIGHT_EXT = 0x806E;
        #endregion GL_UNPACK_IMAGE_HEIGHT_EXT

        #region GL_TEXTURE_3D
        public const GLuint GL_TEXTURE_3D = 0x806F;
        #endregion GL_TEXTURE_3D

        #region GL_TEXTURE_3D_EXT
        public const GLuint GL_TEXTURE_3D_EXT = 0x806F;
        #endregion GL_TEXTURE_3D_EXT

        #region GL_PROXY_TEXTURE_3D
        public const GLuint GL_PROXY_TEXTURE_3D = 0x8070;
        #endregion GL_PROXY_TEXTURE_3D

        #region GL_PROXY_TEXTURE_3D_EXT
        public const GLuint GL_PROXY_TEXTURE_3D_EXT = 0x8070;
        #endregion GL_PROXY_TEXTURE_3D_EXT

        #region GL_TEXTURE_DEPTH
        public const GLuint GL_TEXTURE_DEPTH = 0x8071;
        #endregion GL_TEXTURE_DEPTH

        #region GL_TEXTURE_DEPTH_EXT
        public const GLuint GL_TEXTURE_DEPTH_EXT = 0x8071;
        #endregion GL_TEXTURE_DEPTH_EXT

        #region GL_TEXTURE_WRAP_R
        public const GLuint GL_TEXTURE_WRAP_R = 0x8072;
        #endregion GL_TEXTURE_WRAP_R

        #region GL_TEXTURE_WRAP_R_EXT
        public const GLuint GL_TEXTURE_WRAP_R_EXT = 0x8072;
        #endregion GL_TEXTURE_WRAP_R_EXT

        #region GL_MAX_3D_TEXTURE_SIZE
        public const GLuint GL_MAX_3D_TEXTURE_SIZE = 0x8073;
        #endregion GL_MAX_3D_TEXTURE_SIZE

        #region GL_MAX_3D_TEXTURE_SIZE_EXT
        public const GLuint GL_MAX_3D_TEXTURE_SIZE_EXT = 0x8073;
        #endregion GL_MAX_3D_TEXTURE_SIZE_EXT

        #region GL_VERTEX_ARRAY_EXT
        public const GLuint GL_VERTEX_ARRAY_EXT = 0x8074;
        #endregion GL_VERTEX_ARRAY_EXT

        #region GL_NORMAL_ARRAY_EXT
        public const GLuint GL_NORMAL_ARRAY_EXT = 0x8075;
        #endregion GL_NORMAL_ARRAY_EXT

        #region GL_COLOR_ARRAY_EXT
        public const GLuint GL_COLOR_ARRAY_EXT = 0x8076;
        #endregion GL_COLOR_ARRAY_EXT

        #region GL_INDEX_ARRAY_EXT
        public const GLuint GL_INDEX_ARRAY_EXT = 0x8077;
        #endregion GL_INDEX_ARRAY_EXT

        #region GL_TEXTURE_COORD_ARRAY_EXT
        public const GLuint GL_TEXTURE_COORD_ARRAY_EXT = 0x8078;
        #endregion GL_TEXTURE_COORD_ARRAY_EXT

        #region GL_EDGE_FLAG_ARRAY_EXT
        public const GLuint GL_EDGE_FLAG_ARRAY_EXT = 0x8079;
        #endregion GL_EDGE_FLAG_ARRAY_EXT

        #region GL_VERTEX_ARRAY_SIZE_EXT
        public const GLuint GL_VERTEX_ARRAY_SIZE_EXT = 0x807A;
        #endregion GL_VERTEX_ARRAY_SIZE_EXT

        #region GL_VERTEX_ARRAY_TYPE_EXT
        public const GLuint GL_VERTEX_ARRAY_TYPE_EXT = 0x807B;
        #endregion GL_VERTEX_ARRAY_TYPE_EXT

        #region GL_VERTEX_ARRAY_STRIDE_EXT
        public const GLuint GL_VERTEX_ARRAY_STRIDE_EXT = 0x807C;
        #endregion GL_VERTEX_ARRAY_STRIDE_EXT

        #region GL_VERTEX_ARRAY_COUNT_EXT
        public const GLuint GL_VERTEX_ARRAY_COUNT_EXT = 0x807D;
        #endregion GL_VERTEX_ARRAY_COUNT_EXT

        #region GL_NORMAL_ARRAY_TYPE_EXT
        public const GLuint GL_NORMAL_ARRAY_TYPE_EXT = 0x807E;
        #endregion GL_NORMAL_ARRAY_TYPE_EXT

        #region GL_NORMAL_ARRAY_STRIDE_EXT
        public const GLuint GL_NORMAL_ARRAY_STRIDE_EXT = 0x807F;
        #endregion GL_NORMAL_ARRAY_STRIDE_EXT

        #region GL_NORMAL_ARRAY_COUNT_EXT
        public const GLuint GL_NORMAL_ARRAY_COUNT_EXT = 0x8080;
        #endregion GL_NORMAL_ARRAY_COUNT_EXT

        #region GL_COLOR_ARRAY_SIZE_EXT
        public const GLuint GL_COLOR_ARRAY_SIZE_EXT = 0x8081;
        #endregion GL_COLOR_ARRAY_SIZE_EXT

        #region GL_COLOR_ARRAY_TYPE_EXT
        public const GLuint GL_COLOR_ARRAY_TYPE_EXT = 0x8082;
        #endregion GL_COLOR_ARRAY_TYPE_EXT

        #region GL_COLOR_ARRAY_STRIDE_EXT
        public const GLuint GL_COLOR_ARRAY_STRIDE_EXT = 0x8083;
        #endregion GL_COLOR_ARRAY_STRIDE_EXT

        #region GL_COLOR_ARRAY_COUNT_EXT
        public const GLuint GL_COLOR_ARRAY_COUNT_EXT = 0x8084;
        #endregion GL_COLOR_ARRAY_COUNT_EXT

        #region GL_INDEX_ARRAY_TYPE_EXT
        public const GLuint GL_INDEX_ARRAY_TYPE_EXT = 0x8085;
        #endregion GL_INDEX_ARRAY_TYPE_EXT

        #region GL_INDEX_ARRAY_STRIDE_EXT
        public const GLuint GL_INDEX_ARRAY_STRIDE_EXT = 0x8086;
        #endregion GL_INDEX_ARRAY_STRIDE_EXT

        #region GL_INDEX_ARRAY_COUNT_EXT
        public const GLuint GL_INDEX_ARRAY_COUNT_EXT = 0x8087;
        #endregion GL_INDEX_ARRAY_COUNT_EXT

        #region GL_TEXTURE_COORD_ARRAY_SIZE_EXT
        public const GLuint GL_TEXTURE_COORD_ARRAY_SIZE_EXT = 0x8088;
        #endregion GL_TEXTURE_COORD_ARRAY_SIZE_EXT

        #region GL_TEXTURE_COORD_ARRAY_TYPE_EXT
        public const GLuint GL_TEXTURE_COORD_ARRAY_TYPE_EXT = 0x8089;
        #endregion GL_TEXTURE_COORD_ARRAY_TYPE_EXT

        #region GL_TEXTURE_COORD_ARRAY_STRIDE_EXT
        public const GLuint GL_TEXTURE_COORD_ARRAY_STRIDE_EXT = 0x808A;
        #endregion GL_TEXTURE_COORD_ARRAY_STRIDE_EXT

        #region GL_TEXTURE_COORD_ARRAY_COUNT_EXT
        public const GLuint GL_TEXTURE_COORD_ARRAY_COUNT_EXT = 0x808B;
        #endregion GL_TEXTURE_COORD_ARRAY_COUNT_EXT

        #region GL_EDGE_FLAG_ARRAY_STRIDE_EXT
        public const GLuint GL_EDGE_FLAG_ARRAY_STRIDE_EXT = 0x808C;
        #endregion GL_EDGE_FLAG_ARRAY_STRIDE_EXT

        #region GL_EDGE_FLAG_ARRAY_COUNT_EXT
        public const GLuint GL_EDGE_FLAG_ARRAY_COUNT_EXT = 0x808D;
        #endregion GL_EDGE_FLAG_ARRAY_COUNT_EXT

        #region GL_VERTEX_ARRAY_POINTER_EXT
        public const GLuint GL_VERTEX_ARRAY_POINTER_EXT = 0x808E;
        #endregion GL_VERTEX_ARRAY_POINTER_EXT

        #region GL_NORMAL_ARRAY_POINTER_EXT
        public const GLuint GL_NORMAL_ARRAY_POINTER_EXT = 0x808F;
        #endregion GL_NORMAL_ARRAY_POINTER_EXT

        #region GL_COLOR_ARRAY_POINTER_EXT
        public const GLuint GL_COLOR_ARRAY_POINTER_EXT = 0x8090;
        #endregion GL_COLOR_ARRAY_POINTER_EXT

        #region GL_INDEX_ARRAY_POINTER_EXT
        public const GLuint GL_INDEX_ARRAY_POINTER_EXT = 0x8091;
        #endregion GL_INDEX_ARRAY_POINTER_EXT

        #region GL_TEXTURE_COORD_ARRAY_POINTER_EXT
        public const GLuint GL_TEXTURE_COORD_ARRAY_POINTER_EXT = 0x8092;
        #endregion GL_TEXTURE_COORD_ARRAY_POINTER_EXT

        #region GL_EDGE_FLAG_ARRAY_POINTER_EXT
        public const GLuint GL_EDGE_FLAG_ARRAY_POINTER_EXT = 0x8093;
        #endregion GL_EDGE_FLAG_ARRAY_POINTER_EXT

        #region GL_INTERLACE_SGIX
        public const GLuint GL_INTERLACE_SGIX = 0x8094;
        #endregion GL_INTERLACE_SGIX

        #region GL_DETAIL_TEXTURE_2D_SGIS
        public const GLuint GL_DETAIL_TEXTURE_2D_SGIS = 0x8095;
        #endregion GL_DETAIL_TEXTURE_2D_SGIS

        #region GL_DETAIL_TEXTURE_2D_BINDING_SGIS
        public const GLuint GL_DETAIL_TEXTURE_2D_BINDING_SGIS = 0x8096;
        #endregion GL_DETAIL_TEXTURE_2D_BINDING_SGIS

        #region GL_LINEAR_DETAIL_SGIS
        public const GLuint GL_LINEAR_DETAIL_SGIS = 0x8097;
        #endregion GL_LINEAR_DETAIL_SGIS

        #region GL_LINEAR_DETAIL_ALPHA_SGIS
        public const GLuint GL_LINEAR_DETAIL_ALPHA_SGIS = 0x8098;
        #endregion GL_LINEAR_DETAIL_ALPHA_SGIS

        #region GL_LINEAR_DETAIL_COLOR_SGIS
        public const GLuint GL_LINEAR_DETAIL_COLOR_SGIS = 0x8099;
        #endregion GL_LINEAR_DETAIL_COLOR_SGIS

        #region GL_DETAIL_TEXTURE_LEVEL_SGIS
        public const GLuint GL_DETAIL_TEXTURE_LEVEL_SGIS = 0x809A;
        #endregion GL_DETAIL_TEXTURE_LEVEL_SGIS

        #region GL_DETAIL_TEXTURE_MODE_SGIS
        public const GLuint GL_DETAIL_TEXTURE_MODE_SGIS = 0x809B;
        #endregion GL_DETAIL_TEXTURE_MODE_SGIS

        #region GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS
        public const GLuint GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS = 0x809C;
        #endregion GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS

        #region GL_MULTISAMPLE
        public const GLuint GL_MULTISAMPLE = 0x809D;
        #endregion GL_MULTISAMPLE

        #region GL_MULTISAMPLE_ARB
        public const GLuint GL_MULTISAMPLE_ARB = 0x809D;
        #endregion GL_MULTISAMPLE_ARB

        #region GL_SAMPLE_ALPHA_TO_COVERAGE
        public const GLuint GL_SAMPLE_ALPHA_TO_COVERAGE = 0x809E;
        #endregion GL_SAMPLE_ALPHA_TO_COVERAGE

        #region GL_SAMPLE_ALPHA_TO_COVERAGE_ARB
        public const GLuint GL_SAMPLE_ALPHA_TO_COVERAGE_ARB = 0x809E;
        #endregion GL_SAMPLE_ALPHA_TO_COVERAGE_ARB

        #region GL_SAMPLE_ALPHA_TO_ONE
        public const GLuint GL_SAMPLE_ALPHA_TO_ONE = 0x809F;
        #endregion GL_SAMPLE_ALPHA_TO_ONE

        #region GL_SAMPLE_ALPHA_TO_ONE_ARB
        public const GLuint GL_SAMPLE_ALPHA_TO_ONE_ARB = 0x809F;
        #endregion GL_SAMPLE_ALPHA_TO_ONE_ARB

        #region GL_SAMPLE_COVERAGE
        public const GLuint GL_SAMPLE_COVERAGE = 0x80A0;
        #endregion GL_SAMPLE_COVERAGE

        #region GL_SAMPLE_COVERAGE_ARB
        public const GLuint GL_SAMPLE_COVERAGE_ARB = 0x80A0;
        #endregion GL_SAMPLE_COVERAGE_ARB

        #region GL_SAMPLE_BUFFERS
        public const GLuint GL_SAMPLE_BUFFERS = 0x80A8;
        #endregion GL_SAMPLE_BUFFERS

        #region GL_SAMPLE_BUFFERS_ARB
        public const GLuint GL_SAMPLE_BUFFERS_ARB = 0x80A8;
        #endregion GL_SAMPLE_BUFFERS_ARB

        #region GL_SAMPLES
        public const GLuint GL_SAMPLES = 0x80A9;
        #endregion GL_SAMPLES

        #region GL_SAMPLES_ARB
        public const GLuint GL_SAMPLES_ARB = 0x80A9;
        #endregion GL_SAMPLES_ARB

        #region GL_SAMPLE_COVERAGE_VALUE
        public const GLuint GL_SAMPLE_COVERAGE_VALUE = 0x80AA;
        #endregion GL_SAMPLE_COVERAGE_VALUE

        #region GL_SAMPLE_COVERAGE_VALUE_ARB
        public const GLuint GL_SAMPLE_COVERAGE_VALUE_ARB = 0x80AA;
        #endregion GL_SAMPLE_COVERAGE_VALUE_ARB

        #region GL_SAMPLE_COVERAGE_INVERT
        public const GLuint GL_SAMPLE_COVERAGE_INVERT = 0x80AB;
        #endregion GL_SAMPLE_COVERAGE_INVERT

        #region GL_SAMPLE_COVERAGE_INVERT_ARB
        public const GLuint GL_SAMPLE_COVERAGE_INVERT_ARB = 0x80AB;
        #endregion GL_SAMPLE_COVERAGE_INVERT_ARB

        #region GL_MULTISAMPLE_SGIS
        public const GLuint GL_MULTISAMPLE_SGIS = 0x809D;
        #endregion GL_MULTISAMPLE_SGIS

        #region GL_SAMPLE_ALPHA_TO_MASK_SGIS
        public const GLuint GL_SAMPLE_ALPHA_TO_MASK_SGIS = 0x809E;
        #endregion GL_SAMPLE_ALPHA_TO_MASK_SGIS

        #region GL_SAMPLE_ALPHA_TO_ONE_SGIS
        public const GLuint GL_SAMPLE_ALPHA_TO_ONE_SGIS = 0x809F;
        #endregion GL_SAMPLE_ALPHA_TO_ONE_SGIS

        #region GL_SAMPLE_MASK_SGIS
        public const GLuint GL_SAMPLE_MASK_SGIS = 0x80A0;
        #endregion GL_SAMPLE_MASK_SGIS

        #region GL_1PASS_SGIS
        public const GLuint GL_1PASS_SGIS = 0x80A1;
        #endregion GL_1PASS_SGIS

        #region GL_2PASS_0_SGIS
        public const GLuint GL_2PASS_0_SGIS = 0x80A2;
        #endregion GL_2PASS_0_SGIS

        #region GL_2PASS_1_SGIS
        public const GLuint GL_2PASS_1_SGIS = 0x80A3;
        #endregion GL_2PASS_1_SGIS

        #region GL_4PASS_0_SGIS
        public const GLuint GL_4PASS_0_SGIS = 0x80A4;
        #endregion GL_4PASS_0_SGIS

        #region GL_4PASS_1_SGIS
        public const GLuint GL_4PASS_1_SGIS = 0x80A5;
        #endregion GL_4PASS_1_SGIS

        #region GL_4PASS_2_SGIS
        public const GLuint GL_4PASS_2_SGIS = 0x80A6;
        #endregion GL_4PASS_2_SGIS

        #region GL_4PASS_3_SGIS
        public const GLuint GL_4PASS_3_SGIS = 0x80A7;
        #endregion GL_4PASS_3_SGIS

        #region GL_SAMPLE_BUFFERS_SGIS
        public const GLuint GL_SAMPLE_BUFFERS_SGIS = 0x80A8;
        #endregion GL_SAMPLE_BUFFERS_SGIS

        #region GL_SAMPLES_SGIS
        public const GLuint GL_SAMPLES_SGIS = 0x80A9;
        #endregion GL_SAMPLES_SGIS

        #region GL_SAMPLE_MASK_VALUE_SGIS
        public const GLuint GL_SAMPLE_MASK_VALUE_SGIS = 0x80AA;
        #endregion GL_SAMPLE_MASK_VALUE_SGIS

        #region GL_SAMPLE_MASK_INVERT_SGIS
        public const GLuint GL_SAMPLE_MASK_INVERT_SGIS = 0x80AB;
        #endregion GL_SAMPLE_MASK_INVERT_SGIS

        #region GL_SAMPLE_PATTERN_SGIS
        public const GLuint GL_SAMPLE_PATTERN_SGIS = 0x80AC;
        #endregion GL_SAMPLE_PATTERN_SGIS

        #region GL_LINEAR_SHARPEN_SGIS
        public const GLuint GL_LINEAR_SHARPEN_SGIS = 0x80AD;
        #endregion GL_LINEAR_SHARPEN_SGIS

        #region GL_LINEAR_SHARPEN_ALPHA_SGIS
        public const GLuint GL_LINEAR_SHARPEN_ALPHA_SGIS = 0x80AE;
        #endregion GL_LINEAR_SHARPEN_ALPHA_SGIS

        #region GL_LINEAR_SHARPEN_COLOR_SGIS
        public const GLuint GL_LINEAR_SHARPEN_COLOR_SGIS = 0x80AF;
        #endregion GL_LINEAR_SHARPEN_COLOR_SGIS

        #region GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS
        public const GLuint GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS = 0x80B0;
        #endregion GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS

        #region GL_COLOR_MATRIX
        public const GLuint GL_COLOR_MATRIX = 0x80B1;
        #endregion GL_COLOR_MATRIX

        #region GL_COLOR_MATRIX_SGI
        public const GLuint GL_COLOR_MATRIX_SGI = 0x80B1;
        #endregion GL_COLOR_MATRIX_SGI

        #region GL_COLOR_MATRIX_STACK_DEPTH
        public const GLuint GL_COLOR_MATRIX_STACK_DEPTH = 0x80B2;
        #endregion GL_COLOR_MATRIX_STACK_DEPTH

        #region GL_COLOR_MATRIX_STACK_DEPTH_SGI
        public const GLuint GL_COLOR_MATRIX_STACK_DEPTH_SGI = 0x80B2;
        #endregion GL_COLOR_MATRIX_STACK_DEPTH_SGI

        #region GL_MAX_COLOR_MATRIX_STACK_DEPTH
        public const GLuint GL_MAX_COLOR_MATRIX_STACK_DEPTH = 0x80B3;
        #endregion GL_MAX_COLOR_MATRIX_STACK_DEPTH

        #region GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI
        public const GLuint GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI = 0x80B3;
        #endregion GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI

        #region GL_POST_COLOR_MATRIX_RED_SCALE
        public const GLuint GL_POST_COLOR_MATRIX_RED_SCALE = 0x80B4;
        #endregion GL_POST_COLOR_MATRIX_RED_SCALE

        #region GL_POST_COLOR_MATRIX_RED_SCALE_SGI
        public const GLuint GL_POST_COLOR_MATRIX_RED_SCALE_SGI = 0x80B4;
        #endregion GL_POST_COLOR_MATRIX_RED_SCALE_SGI

        #region GL_POST_COLOR_MATRIX_GREEN_SCALE
        public const GLuint GL_POST_COLOR_MATRIX_GREEN_SCALE = 0x80B5;
        #endregion GL_POST_COLOR_MATRIX_GREEN_SCALE

        #region GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI
        public const GLuint GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI = 0x80B5;
        #endregion GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI

        #region GL_POST_COLOR_MATRIX_BLUE_SCALE
        public const GLuint GL_POST_COLOR_MATRIX_BLUE_SCALE = 0x80B6;
        #endregion GL_POST_COLOR_MATRIX_BLUE_SCALE

        #region GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI
        public const GLuint GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI = 0x80B6;
        #endregion GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI

        #region GL_POST_COLOR_MATRIX_ALPHA_SCALE
        public const GLuint GL_POST_COLOR_MATRIX_ALPHA_SCALE = 0x80B7;
        #endregion GL_POST_COLOR_MATRIX_ALPHA_SCALE

        #region GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI
        public const GLuint GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI = 0x80B7;
        #endregion GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI

        #region GL_POST_COLOR_MATRIX_RED_BIAS
        public const GLuint GL_POST_COLOR_MATRIX_RED_BIAS = 0x80B8;
        #endregion GL_POST_COLOR_MATRIX_RED_BIAS

        #region GL_POST_COLOR_MATRIX_RED_BIAS_SGI
        public const GLuint GL_POST_COLOR_MATRIX_RED_BIAS_SGI = 0x80B8;
        #endregion GL_POST_COLOR_MATRIX_RED_BIAS_SGI

        #region GL_POST_COLOR_MATRIX_GREEN_BIAS
        public const GLuint GL_POST_COLOR_MATRIX_GREEN_BIAS = 0x80B9;
        #endregion GL_POST_COLOR_MATRIX_GREEN_BIAS

        #region GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI
        public const GLuint GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI = 0x80B9;
        #endregion GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI

        #region GL_POST_COLOR_MATRIX_BLUE_BIAS
        public const GLuint GL_POST_COLOR_MATRIX_BLUE_BIAS = 0x80BA;
        #endregion GL_POST_COLOR_MATRIX_BLUE_BIAS

        #region GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI
        public const GLuint GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI = 0x80BA;
        #endregion GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI

        #region GL_POST_COLOR_MATRIX_ALPHA_BIAS
        public const GLuint GL_POST_COLOR_MATRIX_ALPHA_BIAS = 0x80BB;
        #endregion GL_POST_COLOR_MATRIX_ALPHA_BIAS

        #region GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI
        public const GLuint GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI = 0x80BB;
        #endregion GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI

        #region GL_TEXTURE_COLOR_TABLE_SGI
        public const GLuint GL_TEXTURE_COLOR_TABLE_SGI = 0x80BC;
        #endregion GL_TEXTURE_COLOR_TABLE_SGI

        #region GL_PROXY_TEXTURE_COLOR_TABLE_SGI
        public const GLuint GL_PROXY_TEXTURE_COLOR_TABLE_SGI = 0x80BD;
        #endregion GL_PROXY_TEXTURE_COLOR_TABLE_SGI

        #region GL_TEXTURE_ENV_BIAS_SGIX
        public const GLuint GL_TEXTURE_ENV_BIAS_SGIX = 0x80BE;
        #endregion GL_TEXTURE_ENV_BIAS_SGIX

        #region GL_SHADOW_AMBIENT_SGIX
        public const GLuint GL_SHADOW_AMBIENT_SGIX = 0x80BF;
        #endregion GL_SHADOW_AMBIENT_SGIX

        #region GL_COLOR_TABLE
        public const GLuint GL_COLOR_TABLE = 0x80D0;
        #endregion GL_COLOR_TABLE

        #region GL_COLOR_TABLE_SGI
        public const GLuint GL_COLOR_TABLE_SGI = 0x80D0;
        #endregion GL_COLOR_TABLE_SGI

        #region GL_POST_CONVOLUTION_COLOR_TABLE
        public const GLuint GL_POST_CONVOLUTION_COLOR_TABLE = 0x80D1;
        #endregion GL_POST_CONVOLUTION_COLOR_TABLE

        #region GL_POST_CONVOLUTION_COLOR_TABLE_SGI
        public const GLuint GL_POST_CONVOLUTION_COLOR_TABLE_SGI = 0x80D1;
        #endregion GL_POST_CONVOLUTION_COLOR_TABLE_SGI

        #region GL_POST_COLOR_MATRIX_COLOR_TABLE
        public const GLuint GL_POST_COLOR_MATRIX_COLOR_TABLE = 0x80D2;
        #endregion GL_POST_COLOR_MATRIX_COLOR_TABLE

        #region GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI
        public const GLuint GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI = 0x80D2;
        #endregion GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI

        #region GL_PROXY_COLOR_TABLE
        public const GLuint GL_PROXY_COLOR_TABLE = 0x80D3;
        #endregion GL_PROXY_COLOR_TABLE

        #region GL_PROXY_COLOR_TABLE_SGI
        public const GLuint GL_PROXY_COLOR_TABLE_SGI = 0x80D3;
        #endregion GL_PROXY_COLOR_TABLE_SGI

        #region GL_PROXY_POST_CONVOLUTION_COLOR_TABLE
        public const GLuint GL_PROXY_POST_CONVOLUTION_COLOR_TABLE = 0x80D4;
        #endregion GL_PROXY_POST_CONVOLUTION_COLOR_TABLE

        #region GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI
        public const GLuint GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI = 0x80D4;
        #endregion GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI

        #region GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE
        public const GLuint GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE = 0x80D5;
        #endregion GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE

        #region GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI
        public const GLuint GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI = 0x80D5;
        #endregion GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI

        #region GL_COLOR_TABLE_SCALE
        public const GLuint GL_COLOR_TABLE_SCALE = 0x80D6;
        #endregion GL_COLOR_TABLE_SCALE

        #region GL_COLOR_TABLE_SCALE_SGI
        public const GLuint GL_COLOR_TABLE_SCALE_SGI = 0x80D6;
        #endregion GL_COLOR_TABLE_SCALE_SGI

        #region GL_COLOR_TABLE_BIAS
        public const GLuint GL_COLOR_TABLE_BIAS = 0x80D7;
        #endregion GL_COLOR_TABLE_BIAS

        #region GL_COLOR_TABLE_BIAS_SGI
        public const GLuint GL_COLOR_TABLE_BIAS_SGI = 0x80D7;
        #endregion GL_COLOR_TABLE_BIAS_SGI

        #region GL_COLOR_TABLE_FORMAT
        public const GLuint GL_COLOR_TABLE_FORMAT = 0x80D8;
        #endregion GL_COLOR_TABLE_FORMAT

        #region GL_COLOR_TABLE_FORMAT_SGI
        public const GLuint GL_COLOR_TABLE_FORMAT_SGI = 0x80D8;
        #endregion GL_COLOR_TABLE_FORMAT_SGI

        #region GL_COLOR_TABLE_WIDTH
        public const GLuint GL_COLOR_TABLE_WIDTH = 0x80D9;
        #endregion GL_COLOR_TABLE_WIDTH

        #region GL_COLOR_TABLE_WIDTH_SGI
        public const GLuint GL_COLOR_TABLE_WIDTH_SGI = 0x80D9;
        #endregion GL_COLOR_TABLE_WIDTH_SGI

        #region GL_COLOR_TABLE_RED_SIZE
        public const GLuint GL_COLOR_TABLE_RED_SIZE = 0x80DA;
        #endregion GL_COLOR_TABLE_RED_SIZE

        #region GL_COLOR_TABLE_RED_SIZE_SGI
        public const GLuint GL_COLOR_TABLE_RED_SIZE_SGI = 0x80DA;
        #endregion GL_COLOR_TABLE_RED_SIZE_SGI

        #region GL_COLOR_TABLE_GREEN_SIZE
        public const GLuint GL_COLOR_TABLE_GREEN_SIZE = 0x80DB;
        #endregion GL_COLOR_TABLE_GREEN_SIZE

        #region GL_COLOR_TABLE_GREEN_SIZE_SGI
        public const GLuint GL_COLOR_TABLE_GREEN_SIZE_SGI = 0x80DB;
        #endregion GL_COLOR_TABLE_GREEN_SIZE_SGI

        #region GL_COLOR_TABLE_BLUE_SIZE
        public const GLuint GL_COLOR_TABLE_BLUE_SIZE = 0x80DC;
        #endregion GL_COLOR_TABLE_BLUE_SIZE

        #region GL_COLOR_TABLE_BLUE_SIZE_SGI
        public const GLuint GL_COLOR_TABLE_BLUE_SIZE_SGI = 0x80DC;
        #endregion GL_COLOR_TABLE_BLUE_SIZE_SGI

        #region GL_COLOR_TABLE_ALPHA_SIZE
        public const GLuint GL_COLOR_TABLE_ALPHA_SIZE = 0x80DD;
        #endregion GL_COLOR_TABLE_ALPHA_SIZE

        #region GL_COLOR_TABLE_ALPHA_SIZE_SGI
        public const GLuint GL_COLOR_TABLE_ALPHA_SIZE_SGI = 0x80DD;
        #endregion GL_COLOR_TABLE_ALPHA_SIZE_SGI

        #region GL_COLOR_TABLE_LUMINANCE_SIZE
        public const GLuint GL_COLOR_TABLE_LUMINANCE_SIZE = 0x80DE;
        #endregion GL_COLOR_TABLE_LUMINANCE_SIZE

        #region GL_COLOR_TABLE_LUMINANCE_SIZE_SGI
        public const GLuint GL_COLOR_TABLE_LUMINANCE_SIZE_SGI = 0x80DE;
        #endregion GL_COLOR_TABLE_LUMINANCE_SIZE_SGI

        #region GL_COLOR_TABLE_INTENSITY_SIZE
        public const GLuint GL_COLOR_TABLE_INTENSITY_SIZE = 0x80DF;
        #endregion GL_COLOR_TABLE_INTENSITY_SIZE

        #region GL_COLOR_TABLE_INTENSITY_SIZE_SGI
        public const GLuint GL_COLOR_TABLE_INTENSITY_SIZE_SGI = 0x80DF;
        #endregion GL_COLOR_TABLE_INTENSITY_SIZE_SGI

        #region GL_BGR
        public const GLuint GL_BGR = 0x80E0;
        #endregion GL_BGR

        #region GL_BGR_EXT
        public const GLuint GL_BGR_EXT = 0x80E0;
        #endregion GL_BGR_EXT

        #region GL_BGRA
        public const GLuint GL_BGRA = 0x80E1;
        #endregion GL_BGRA

        #region GL_BGRA_EXT
        public const GLuint GL_BGRA_EXT = 0x80E1;
        #endregion GL_BGRA_EXT

        #region GL_MAX_ELEMENTS_VERTICES
        public const GLuint GL_MAX_ELEMENTS_VERTICES = 0x80E8;
        #endregion GL_MAX_ELEMENTS_VERTICES

        #region GL_MAX_ELEMENTS_INDICES
        public const GLuint GL_MAX_ELEMENTS_INDICES = 0x80E9;
        #endregion GL_MAX_ELEMENTS_INDICES

        #region GL_DUAL_ALPHA4_SGIS
        public const GLuint GL_DUAL_ALPHA4_SGIS = 0x8110;
        #endregion GL_DUAL_ALPHA4_SGIS

        #region GL_DUAL_ALPHA8_SGIS
        public const GLuint GL_DUAL_ALPHA8_SGIS = 0x8111;
        #endregion GL_DUAL_ALPHA8_SGIS

        #region GL_DUAL_ALPHA12_SGIS
        public const GLuint GL_DUAL_ALPHA12_SGIS = 0x8112;
        #endregion GL_DUAL_ALPHA12_SGIS

        #region GL_DUAL_ALPHA16_SGIS
        public const GLuint GL_DUAL_ALPHA16_SGIS = 0x8113;
        #endregion GL_DUAL_ALPHA16_SGIS

        #region GL_DUAL_LUMINANCE4_SGIS
        public const GLuint GL_DUAL_LUMINANCE4_SGIS = 0x8114;
        #endregion GL_DUAL_LUMINANCE4_SGIS

        #region GL_DUAL_LUMINANCE8_SGIS
        public const GLuint GL_DUAL_LUMINANCE8_SGIS = 0x8115;
        #endregion GL_DUAL_LUMINANCE8_SGIS

        #region GL_DUAL_LUMINANCE12_SGIS
        public const GLuint GL_DUAL_LUMINANCE12_SGIS = 0x8116;
        #endregion GL_DUAL_LUMINANCE12_SGIS

        #region GL_DUAL_LUMINANCE16_SGIS
        public const GLuint GL_DUAL_LUMINANCE16_SGIS = 0x8117;
        #endregion GL_DUAL_LUMINANCE16_SGIS

        #region GL_DUAL_INTENSITY4_SGIS
        public const GLuint GL_DUAL_INTENSITY4_SGIS = 0x8118;
        #endregion GL_DUAL_INTENSITY4_SGIS

        #region GL_DUAL_INTENSITY8_SGIS
        public const GLuint GL_DUAL_INTENSITY8_SGIS = 0x8119;
        #endregion GL_DUAL_INTENSITY8_SGIS

        #region GL_DUAL_INTENSITY12_SGIS
        public const GLuint GL_DUAL_INTENSITY12_SGIS = 0x811A;
        #endregion GL_DUAL_INTENSITY12_SGIS

        #region GL_DUAL_INTENSITY16_SGIS
        public const GLuint GL_DUAL_INTENSITY16_SGIS = 0x811B;
        #endregion GL_DUAL_INTENSITY16_SGIS

        #region GL_DUAL_LUMINANCE_ALPHA4_SGIS
        public const GLuint GL_DUAL_LUMINANCE_ALPHA4_SGIS = 0x811C;
        #endregion GL_DUAL_LUMINANCE_ALPHA4_SGIS

        #region GL_DUAL_LUMINANCE_ALPHA8_SGIS
        public const GLuint GL_DUAL_LUMINANCE_ALPHA8_SGIS = 0x811D;
        #endregion GL_DUAL_LUMINANCE_ALPHA8_SGIS

        #region GL_QUAD_ALPHA4_SGIS
        public const GLuint GL_QUAD_ALPHA4_SGIS = 0x811E;
        #endregion GL_QUAD_ALPHA4_SGIS

        #region GL_QUAD_ALPHA8_SGIS
        public const GLuint GL_QUAD_ALPHA8_SGIS = 0x811F;
        #endregion GL_QUAD_ALPHA8_SGIS

        #region GL_QUAD_LUMINANCE4_SGIS
        public const GLuint GL_QUAD_LUMINANCE4_SGIS = 0x8120;
        #endregion GL_QUAD_LUMINANCE4_SGIS

        #region GL_QUAD_LUMINANCE8_SGIS
        public const GLuint GL_QUAD_LUMINANCE8_SGIS = 0x8121;
        #endregion GL_QUAD_LUMINANCE8_SGIS

        #region GL_QUAD_INTENSITY4_SGIS
        public const GLuint GL_QUAD_INTENSITY4_SGIS = 0x8122;
        #endregion GL_QUAD_INTENSITY4_SGIS

        #region GL_QUAD_INTENSITY8_SGIS
        public const GLuint GL_QUAD_INTENSITY8_SGIS = 0x8123;
        #endregion GL_QUAD_INTENSITY8_SGIS

        #region GL_DUAL_TEXTURE_SELECT_SGIS
        public const GLuint GL_DUAL_TEXTURE_SELECT_SGIS = 0x8124;
        #endregion GL_DUAL_TEXTURE_SELECT_SGIS

        #region GL_QUAD_TEXTURE_SELECT_SGIS
        public const GLuint GL_QUAD_TEXTURE_SELECT_SGIS = 0x8125;
        #endregion GL_QUAD_TEXTURE_SELECT_SGIS

        #region GL_POINT_SIZE_MIN
        public const GLuint GL_POINT_SIZE_MIN = 0x8126;
        #endregion GL_POINT_SIZE_MIN

        #region GL_POINT_SIZE_MIN_ARB
        public const GLuint GL_POINT_SIZE_MIN_ARB = 0x8126;
        #endregion GL_POINT_SIZE_MIN_ARB

        #region GL_POINT_SIZE_MIN_EXT
        public const GLuint GL_POINT_SIZE_MIN_EXT = 0x8126;
        #endregion GL_POINT_SIZE_MIN_EXT

        #region GL_POINT_SIZE_MIN_SGIS
        public const GLuint GL_POINT_SIZE_MIN_SGIS = 0x8126;
        #endregion GL_POINT_SIZE_MIN_SGIS

        #region GL_POINT_SIZE_MAX
        public const GLuint GL_POINT_SIZE_MAX = 0x8127;
        #endregion GL_POINT_SIZE_MAX

        #region GL_POINT_SIZE_MAX_ARB
        public const GLuint GL_POINT_SIZE_MAX_ARB = 0x8127;
        #endregion GL_POINT_SIZE_MAX_ARB

        #region GL_POINT_SIZE_MAX_EXT
        public const GLuint GL_POINT_SIZE_MAX_EXT = 0x8127;
        #endregion GL_POINT_SIZE_MAX_EXT

        #region GL_POINT_SIZE_MAX_SGIS
        public const GLuint GL_POINT_SIZE_MAX_SGIS = 0x8127;
        #endregion GL_POINT_SIZE_MAX_SGIS

        #region GL_POINT_FADE_THRESHOLD_SIZE
        public const GLuint GL_POINT_FADE_THRESHOLD_SIZE = 0x8128;
        #endregion GL_POINT_FADE_THRESHOLD_SIZE

        #region GL_POINT_FADE_THRESHOLD_SIZE_ARB
        public const GLuint GL_POINT_FADE_THRESHOLD_SIZE_ARB = 0x8128;
        #endregion GL_POINT_FADE_THRESHOLD_SIZE_ARB

        #region GL_POINT_FADE_THRESHOLD_SIZE_EXT
        public const GLuint GL_POINT_FADE_THRESHOLD_SIZE_EXT = 0x8128;
        #endregion GL_POINT_FADE_THRESHOLD_SIZE_EXT

        #region GL_POINT_FADE_THRESHOLD_SIZE_SGIS
        public const GLuint GL_POINT_FADE_THRESHOLD_SIZE_SGIS = 0x8128;
        #endregion GL_POINT_FADE_THRESHOLD_SIZE_SGIS

        #region GL_POINT_DISTANCE_ATTENUATION
        public const GLuint GL_POINT_DISTANCE_ATTENUATION = 0x8129;
        #endregion GL_POINT_DISTANCE_ATTENUATION

        #region GL_POINT_DISTANCE_ATTENUATION_ARB
        public const GLuint GL_POINT_DISTANCE_ATTENUATION_ARB = 0x8129;
        #endregion GL_POINT_DISTANCE_ATTENUATION_ARB

        #region GL_DISTANCE_ATTENUATION_EXT
        public const GLuint GL_DISTANCE_ATTENUATION_EXT = 0x8129;
        #endregion GL_DISTANCE_ATTENUATION_EXT

        #region GL_DISTANCE_ATTENUATION_SGIS
        public const GLuint GL_DISTANCE_ATTENUATION_SGIS = 0x8129;
        #endregion GL_DISTANCE_ATTENUATION_SGIS

        #region GL_FOG_FUNC_SGIS
        public const GLuint GL_FOG_FUNC_SGIS = 0x812A;
        #endregion GL_FOG_FUNC_SGIS

        #region GL_FOG_FUNC_POINTS_SGIS
        public const GLuint GL_FOG_FUNC_POINTS_SGIS = 0x812B;
        #endregion GL_FOG_FUNC_POINTS_SGIS

        #region GL_MAX_FOG_FUNC_POINTS_SGIS
        public const GLuint GL_MAX_FOG_FUNC_POINTS_SGIS = 0x812C;
        #endregion GL_MAX_FOG_FUNC_POINTS_SGIS

        #region GL_CLAMP_TO_BORDER
        public const GLuint GL_CLAMP_TO_BORDER = 0x812D;
        #endregion GL_CLAMP_TO_BORDER

        #region GL_CLAMP_TO_BORDER_ARB
        public const GLuint GL_CLAMP_TO_BORDER_ARB = 0x812D;
        #endregion GL_CLAMP_TO_BORDER_ARB

        #region GL_CLAMP_TO_BORDER_SGIS
        public const GLuint GL_CLAMP_TO_BORDER_SGIS = 0x812D;
        #endregion GL_CLAMP_TO_BORDER_SGIS

        #region GL_TEXTURE_MULTI_BUFFER_HINT_SGIX
        public const GLuint GL_TEXTURE_MULTI_BUFFER_HINT_SGIX = 0x812E;
        #endregion GL_TEXTURE_MULTI_BUFFER_HINT_SGIX

        #region GL_CLAMP_TO_EDGE
        public const GLuint GL_CLAMP_TO_EDGE = 0x812F;
        #endregion GL_CLAMP_TO_EDGE

        #region GL_CLAMP_TO_EDGE_SGIS
        public const GLuint GL_CLAMP_TO_EDGE_SGIS = 0x812F;
        #endregion GL_CLAMP_TO_EDGE_SGIS

        #region GL_PACK_SKIP_VOLUMES_SGIS
        public const GLuint GL_PACK_SKIP_VOLUMES_SGIS = 0x8130;
        #endregion GL_PACK_SKIP_VOLUMES_SGIS

        #region GL_PACK_IMAGE_DEPTH_SGIS
        public const GLuint GL_PACK_IMAGE_DEPTH_SGIS = 0x8131;
        #endregion GL_PACK_IMAGE_DEPTH_SGIS

        #region GL_UNPACK_SKIP_VOLUMES_SGIS
        public const GLuint GL_UNPACK_SKIP_VOLUMES_SGIS = 0x8132;
        #endregion GL_UNPACK_SKIP_VOLUMES_SGIS

        #region GL_UNPACK_IMAGE_DEPTH_SGIS
        public const GLuint GL_UNPACK_IMAGE_DEPTH_SGIS = 0x8133;
        #endregion GL_UNPACK_IMAGE_DEPTH_SGIS

        #region GL_TEXTURE_4D_SGIS
        public const GLuint GL_TEXTURE_4D_SGIS = 0x8134;
        #endregion GL_TEXTURE_4D_SGIS

        #region GL_PROXY_TEXTURE_4D_SGIS
        public const GLuint GL_PROXY_TEXTURE_4D_SGIS = 0x8135;
        #endregion GL_PROXY_TEXTURE_4D_SGIS

        #region GL_TEXTURE_4DSIZE_SGIS
        public const GLuint GL_TEXTURE_4DSIZE_SGIS = 0x8136;
        #endregion GL_TEXTURE_4DSIZE_SGIS

        #region GL_TEXTURE_WRAP_Q_SGIS
        public const GLuint GL_TEXTURE_WRAP_Q_SGIS = 0x8137;
        #endregion GL_TEXTURE_WRAP_Q_SGIS

        #region GL_MAX_4D_TEXTURE_SIZE_SGIS
        public const GLuint GL_MAX_4D_TEXTURE_SIZE_SGIS = 0x8138;
        #endregion GL_MAX_4D_TEXTURE_SIZE_SGIS

        #region GL_TEXTURE_4D_BINDING_SGIS
        public const GLuint GL_TEXTURE_4D_BINDING_SGIS = 0x814F;
        #endregion GL_TEXTURE_4D_BINDING_SGIS

        #region GL_PIXEL_TEX_GEN_SGIX
        public const GLuint GL_PIXEL_TEX_GEN_SGIX = 0x8139;
        #endregion GL_PIXEL_TEX_GEN_SGIX

        #region GL_PIXEL_TEX_GEN_MODE_SGIX
        public const GLuint GL_PIXEL_TEX_GEN_MODE_SGIX = 0x832B;
        #endregion GL_PIXEL_TEX_GEN_MODE_SGIX

        #region GL_TEXTURE_MIN_LOD
        public const GLuint GL_TEXTURE_MIN_LOD = 0x813A;
        #endregion GL_TEXTURE_MIN_LOD

        #region GL_TEXTURE_MIN_LOD_SGIS
        public const GLuint GL_TEXTURE_MIN_LOD_SGIS = 0x813A;
        #endregion GL_TEXTURE_MIN_LOD_SGIS

        #region GL_TEXTURE_MAX_LOD
        public const GLuint GL_TEXTURE_MAX_LOD = 0x813B;
        #endregion GL_TEXTURE_MAX_LOD

        #region GL_TEXTURE_MAX_LOD_SGIS
        public const GLuint GL_TEXTURE_MAX_LOD_SGIS = 0x813B;
        #endregion GL_TEXTURE_MAX_LOD_SGIS

        #region GL_TEXTURE_BASE_LEVEL
        public const GLuint GL_TEXTURE_BASE_LEVEL = 0x813C;
        #endregion GL_TEXTURE_BASE_LEVEL

        #region GL_TEXTURE_BASE_LEVEL_SGIS
        public const GLuint GL_TEXTURE_BASE_LEVEL_SGIS = 0x813C;
        #endregion GL_TEXTURE_BASE_LEVEL_SGIS

        #region GL_TEXTURE_MAX_LEVEL
        public const GLuint GL_TEXTURE_MAX_LEVEL = 0x813D;
        #endregion GL_TEXTURE_MAX_LEVEL

        #region GL_TEXTURE_MAX_LEVEL_SGIS
        public const GLuint GL_TEXTURE_MAX_LEVEL_SGIS = 0x813D;
        #endregion GL_TEXTURE_MAX_LEVEL_SGIS

        #region GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX
        public const GLuint GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX = 0x813E;
        #endregion GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX

        #region GL_PIXEL_TILE_CACHE_INCREMENT_SGIX
        public const GLuint GL_PIXEL_TILE_CACHE_INCREMENT_SGIX = 0x813F;
        #endregion GL_PIXEL_TILE_CACHE_INCREMENT_SGIX

        #region GL_PIXEL_TILE_WIDTH_SGIX
        public const GLuint GL_PIXEL_TILE_WIDTH_SGIX = 0x8140;
        #endregion GL_PIXEL_TILE_WIDTH_SGIX

        #region GL_PIXEL_TILE_HEIGHT_SGIX
        public const GLuint GL_PIXEL_TILE_HEIGHT_SGIX = 0x8141;
        #endregion GL_PIXEL_TILE_HEIGHT_SGIX

        #region GL_PIXEL_TILE_GRID_WIDTH_SGIX
        public const GLuint GL_PIXEL_TILE_GRID_WIDTH_SGIX = 0x8142;
        #endregion GL_PIXEL_TILE_GRID_WIDTH_SGIX

        #region GL_PIXEL_TILE_GRID_HEIGHT_SGIX
        public const GLuint GL_PIXEL_TILE_GRID_HEIGHT_SGIX = 0x8143;
        #endregion GL_PIXEL_TILE_GRID_HEIGHT_SGIX

        #region GL_PIXEL_TILE_GRID_DEPTH_SGIX
        public const GLuint GL_PIXEL_TILE_GRID_DEPTH_SGIX = 0x8144;
        #endregion GL_PIXEL_TILE_GRID_DEPTH_SGIX

        #region GL_PIXEL_TILE_CACHE_SIZE_SGIX
        public const GLuint GL_PIXEL_TILE_CACHE_SIZE_SGIX = 0x8145;
        #endregion GL_PIXEL_TILE_CACHE_SIZE_SGIX

        #region GL_FILTER4_SGIS
        public const GLuint GL_FILTER4_SGIS = 0x8146;
        #endregion GL_FILTER4_SGIS

        #region GL_TEXTURE_FILTER4_SIZE_SGIS
        public const GLuint GL_TEXTURE_FILTER4_SIZE_SGIS = 0x8147;
        #endregion GL_TEXTURE_FILTER4_SIZE_SGIS

        #region GL_SPRITE_SGIX
        public const GLuint GL_SPRITE_SGIX = 0x8148;
        #endregion GL_SPRITE_SGIX

        #region GL_SPRITE_MODE_SGIX
        public const GLuint GL_SPRITE_MODE_SGIX = 0x8149;
        #endregion GL_SPRITE_MODE_SGIX

        #region GL_SPRITE_AXIS_SGIX
        public const GLuint GL_SPRITE_AXIS_SGIX = 0x814A;
        #endregion GL_SPRITE_AXIS_SGIX

        #region GL_SPRITE_TRANSLATION_SGIX
        public const GLuint GL_SPRITE_TRANSLATION_SGIX = 0x814B;
        #endregion GL_SPRITE_TRANSLATION_SGIX

        #region GL_SPRITE_AXIAL_SGIX
        public const GLuint GL_SPRITE_AXIAL_SGIX = 0x814C;
        #endregion GL_SPRITE_AXIAL_SGIX

        #region GL_SPRITE_OBJECT_ALIGNED_SGIX
        public const GLuint GL_SPRITE_OBJECT_ALIGNED_SGIX = 0x814D;
        #endregion GL_SPRITE_OBJECT_ALIGNED_SGIX

        #region GL_SPRITE_EYE_ALIGNED_SGIX
        public const GLuint GL_SPRITE_EYE_ALIGNED_SGIX = 0x814E;
        #endregion GL_SPRITE_EYE_ALIGNED_SGIX

        #region GL_IGNORE_BORDER_HP
        public const GLuint GL_IGNORE_BORDER_HP = 0x8150;
        #endregion GL_IGNORE_BORDER_HP

        #region GL_CONSTANT_BORDER
        public const GLuint GL_CONSTANT_BORDER = 0x8151;
        #endregion GL_CONSTANT_BORDER

        #region GL_CONSTANT_BORDER_HP
        public const GLuint GL_CONSTANT_BORDER_HP = 0x8151;
        #endregion GL_CONSTANT_BORDER_HP

        #region GL_REPLICATE_BORDER
        public const GLuint GL_REPLICATE_BORDER = 0x8153;
        #endregion GL_REPLICATE_BORDER

        #region GL_REPLICATE_BORDER_HP
        public const GLuint GL_REPLICATE_BORDER_HP = 0x8153;
        #endregion GL_REPLICATE_BORDER_HP

        #region GL_CONVOLUTION_BORDER_COLOR
        public const GLuint GL_CONVOLUTION_BORDER_COLOR = 0x8154;
        #endregion GL_CONVOLUTION_BORDER_COLOR

        #region GL_CONVOLUTION_BORDER_COLOR_HP
        public const GLuint GL_CONVOLUTION_BORDER_COLOR_HP = 0x8154;
        #endregion GL_CONVOLUTION_BORDER_COLOR_HP

        #region GL_LINEAR_CLIPMAP_LINEAR_SGIX
        public const GLuint GL_LINEAR_CLIPMAP_LINEAR_SGIX = 0x8170;
        #endregion GL_LINEAR_CLIPMAP_LINEAR_SGIX

        #region GL_TEXTURE_CLIPMAP_CENTER_SGIX
        public const GLuint GL_TEXTURE_CLIPMAP_CENTER_SGIX = 0x8171;
        #endregion GL_TEXTURE_CLIPMAP_CENTER_SGIX

        #region GL_TEXTURE_CLIPMAP_FRAME_SGIX
        public const GLuint GL_TEXTURE_CLIPMAP_FRAME_SGIX = 0x8172;
        #endregion GL_TEXTURE_CLIPMAP_FRAME_SGIX

        #region GL_TEXTURE_CLIPMAP_OFFSET_SGIX
        public const GLuint GL_TEXTURE_CLIPMAP_OFFSET_SGIX = 0x8173;
        #endregion GL_TEXTURE_CLIPMAP_OFFSET_SGIX

        #region GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX
        public const GLuint GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX = 0x8174;
        #endregion GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX

        #region GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX
        public const GLuint GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX = 0x8175;
        #endregion GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX

        #region GL_TEXTURE_CLIPMAP_DEPTH_SGIX
        public const GLuint GL_TEXTURE_CLIPMAP_DEPTH_SGIX = 0x8176;
        #endregion GL_TEXTURE_CLIPMAP_DEPTH_SGIX

        #region GL_MAX_CLIPMAP_DEPTH_SGIX
        public const GLuint GL_MAX_CLIPMAP_DEPTH_SGIX = 0x8177;
        #endregion GL_MAX_CLIPMAP_DEPTH_SGIX

        #region GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX
        public const GLuint GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX = 0x8178;
        #endregion GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX

        #region GL_NEAREST_CLIPMAP_NEAREST_SGIX
        public const GLuint GL_NEAREST_CLIPMAP_NEAREST_SGIX = 0x844D;
        #endregion GL_NEAREST_CLIPMAP_NEAREST_SGIX

        #region GL_NEAREST_CLIPMAP_LINEAR_SGIX
        public const GLuint GL_NEAREST_CLIPMAP_LINEAR_SGIX = 0x844E;
        #endregion GL_NEAREST_CLIPMAP_LINEAR_SGIX

        #region GL_LINEAR_CLIPMAP_NEAREST_SGIX
        public const GLuint GL_LINEAR_CLIPMAP_NEAREST_SGIX = 0x844F;
        #endregion GL_LINEAR_CLIPMAP_NEAREST_SGIX

        #region GL_POST_TEXTURE_FILTER_BIAS_SGIX
        public const GLuint GL_POST_TEXTURE_FILTER_BIAS_SGIX = 0x8179;
        #endregion GL_POST_TEXTURE_FILTER_BIAS_SGIX

        #region GL_POST_TEXTURE_FILTER_SCALE_SGIX
        public const GLuint GL_POST_TEXTURE_FILTER_SCALE_SGIX = 0x817A;
        #endregion GL_POST_TEXTURE_FILTER_SCALE_SGIX

        #region GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX
        public const GLuint GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX = 0x817B;
        #endregion GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX

        #region GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX
        public const GLuint GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX = 0x817C;
        #endregion GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX

        #region GL_REFERENCE_PLANE_SGIX
        public const GLuint GL_REFERENCE_PLANE_SGIX = 0x817D;
        #endregion GL_REFERENCE_PLANE_SGIX

        #region GL_REFERENCE_PLANE_EQUATION_SGIX
        public const GLuint GL_REFERENCE_PLANE_EQUATION_SGIX = 0x817E;
        #endregion GL_REFERENCE_PLANE_EQUATION_SGIX

        #region GL_IR_INSTRUMENT1_SGIX
        public const GLuint GL_IR_INSTRUMENT1_SGIX = 0x817F;
        #endregion GL_IR_INSTRUMENT1_SGIX

        #region GL_INSTRUMENT_BUFFER_POINTER_SGIX
        public const GLuint GL_INSTRUMENT_BUFFER_POINTER_SGIX = 0x8180;
        #endregion GL_INSTRUMENT_BUFFER_POINTER_SGIX

        #region GL_INSTRUMENT_MEASUREMENTS_SGIX
        public const GLuint GL_INSTRUMENT_MEASUREMENTS_SGIX = 0x8181;
        #endregion GL_INSTRUMENT_MEASUREMENTS_SGIX

        #region GL_LIST_PRIORITY_SGIX
        public const GLuint GL_LIST_PRIORITY_SGIX = 0x8182;
        #endregion GL_LIST_PRIORITY_SGIX

        #region GL_CALLIGRAPHIC_FRAGMENT_SGIX
        public const GLuint GL_CALLIGRAPHIC_FRAGMENT_SGIX = 0x8183;
        #endregion GL_CALLIGRAPHIC_FRAGMENT_SGIX

        #region GL_PIXEL_TEX_GEN_Q_CEILING_SGIX
        public const GLuint GL_PIXEL_TEX_GEN_Q_CEILING_SGIX = 0x8184;
        #endregion GL_PIXEL_TEX_GEN_Q_CEILING_SGIX

        #region GL_PIXEL_TEX_GEN_Q_ROUND_SGIX
        public const GLuint GL_PIXEL_TEX_GEN_Q_ROUND_SGIX = 0x8185;
        #endregion GL_PIXEL_TEX_GEN_Q_ROUND_SGIX

        #region GL_PIXEL_TEX_GEN_Q_FLOOR_SGIX
        public const GLuint GL_PIXEL_TEX_GEN_Q_FLOOR_SGIX = 0x8186;
        #endregion GL_PIXEL_TEX_GEN_Q_FLOOR_SGIX

        #region GL_PIXEL_TEX_GEN_ALPHA_REPLACE_SGIX
        public const GLuint GL_PIXEL_TEX_GEN_ALPHA_REPLACE_SGIX = 0x8187;
        #endregion GL_PIXEL_TEX_GEN_ALPHA_REPLACE_SGIX

        #region GL_PIXEL_TEX_GEN_ALPHA_NO_REPLACE_SGIX
        public const GLuint GL_PIXEL_TEX_GEN_ALPHA_NO_REPLACE_SGIX = 0x8188;
        #endregion GL_PIXEL_TEX_GEN_ALPHA_NO_REPLACE_SGIX

        #region GL_PIXEL_TEX_GEN_ALPHA_LS_SGIX
        public const GLuint GL_PIXEL_TEX_GEN_ALPHA_LS_SGIX = 0x8189;
        #endregion GL_PIXEL_TEX_GEN_ALPHA_LS_SGIX

        #region GL_PIXEL_TEX_GEN_ALPHA_MS_SGIX
        public const GLuint GL_PIXEL_TEX_GEN_ALPHA_MS_SGIX = 0x818A;
        #endregion GL_PIXEL_TEX_GEN_ALPHA_MS_SGIX

        #region GL_FRAMEZOOM_SGIX
        public const GLuint GL_FRAMEZOOM_SGIX = 0x818B;
        #endregion GL_FRAMEZOOM_SGIX

        #region GL_FRAMEZOOM_FACTOR_SGIX
        public const GLuint GL_FRAMEZOOM_FACTOR_SGIX = 0x818C;
        #endregion GL_FRAMEZOOM_FACTOR_SGIX

        #region GL_MAX_FRAMEZOOM_FACTOR_SGIX
        public const GLuint GL_MAX_FRAMEZOOM_FACTOR_SGIX = 0x818D;
        #endregion GL_MAX_FRAMEZOOM_FACTOR_SGIX

        #region GL_TEXTURE_LOD_BIAS_S_SGIX
        public const GLuint GL_TEXTURE_LOD_BIAS_S_SGIX = 0x818E;
        #endregion GL_TEXTURE_LOD_BIAS_S_SGIX

        #region GL_TEXTURE_LOD_BIAS_T_SGIX
        public const GLuint GL_TEXTURE_LOD_BIAS_T_SGIX = 0x818F;
        #endregion GL_TEXTURE_LOD_BIAS_T_SGIX

        #region GL_TEXTURE_LOD_BIAS_R_SGIX
        public const GLuint GL_TEXTURE_LOD_BIAS_R_SGIX = 0x8190;
        #endregion GL_TEXTURE_LOD_BIAS_R_SGIX

        #region GL_GENERATE_MIPMAP
        public const GLuint GL_GENERATE_MIPMAP = 0x8191;
        #endregion GL_GENERATE_MIPMAP

        #region GL_GENERATE_MIPMAP_SGIS
        public const GLuint GL_GENERATE_MIPMAP_SGIS = 0x8191;
        #endregion GL_GENERATE_MIPMAP_SGIS

        #region GL_GENERATE_MIPMAP_HINT
        public const GLuint GL_GENERATE_MIPMAP_HINT = 0x8192;
        #endregion GL_GENERATE_MIPMAP_HINT

        #region GL_GENERATE_MIPMAP_HINT_SGIS
        public const GLuint GL_GENERATE_MIPMAP_HINT_SGIS = 0x8192;
        #endregion GL_GENERATE_MIPMAP_HINT_SGIS

        #region GL_GEOMETRY_DEFORMATION_SGIX
        public const GLuint GL_GEOMETRY_DEFORMATION_SGIX = 0x8194;
        #endregion GL_GEOMETRY_DEFORMATION_SGIX

        #region GL_TEXTURE_DEFORMATION_SGIX
        public const GLuint GL_TEXTURE_DEFORMATION_SGIX = 0x8195;
        #endregion GL_TEXTURE_DEFORMATION_SGIX

        #region GL_DEFORMATIONS_MASK_SGIX
        public const GLuint GL_DEFORMATIONS_MASK_SGIX = 0x8196;
        #endregion GL_DEFORMATIONS_MASK_SGIX

        #region GL_MAX_DEFORMATION_ORDER_SGIX
        public const GLuint GL_MAX_DEFORMATION_ORDER_SGIX = 0x8197;
        #endregion GL_MAX_DEFORMATION_ORDER_SGIX

        #region GL_FOG_OFFSET_SGIX
        public const GLuint GL_FOG_OFFSET_SGIX = 0x8198;
        #endregion GL_FOG_OFFSET_SGIX

        #region GL_FOG_OFFSET_VALUE_SGIX
        public const GLuint GL_FOG_OFFSET_VALUE_SGIX = 0x8199;
        #endregion GL_FOG_OFFSET_VALUE_SGIX

        #region GL_TEXTURE_COMPARE_SGIX
        public const GLuint GL_TEXTURE_COMPARE_SGIX = 0x819A;
        #endregion GL_TEXTURE_COMPARE_SGIX

        #region GL_TEXTURE_COMPARE_OPERATOR_SGIX
        public const GLuint GL_TEXTURE_COMPARE_OPERATOR_SGIX = 0x819B;
        #endregion GL_TEXTURE_COMPARE_OPERATOR_SGIX

        #region GL_TEXTURE_LEQUAL_R_SGIX
        public const GLuint GL_TEXTURE_LEQUAL_R_SGIX = 0x819C;
        #endregion GL_TEXTURE_LEQUAL_R_SGIX

        #region GL_TEXTURE_GEQUAL_R_SGIX
        public const GLuint GL_TEXTURE_GEQUAL_R_SGIX = 0x819D;
        #endregion GL_TEXTURE_GEQUAL_R_SGIX

        #region GL_DEPTH_COMPONENT16
        public const GLuint GL_DEPTH_COMPONENT16 = 0x81A5;
        #endregion GL_DEPTH_COMPONENT16

        #region GL_DEPTH_COMPONENT16_SGIX
        public const GLuint GL_DEPTH_COMPONENT16_SGIX = 0x81A5;
        #endregion GL_DEPTH_COMPONENT16_SGIX

        #region GL_DEPTH_COMPONENT24
        public const GLuint GL_DEPTH_COMPONENT24 = 0x81A6;
        #endregion GL_DEPTH_COMPONENT24

        #region GL_DEPTH_COMPONENT24_SGIX
        public const GLuint GL_DEPTH_COMPONENT24_SGIX = 0x81A6;
        #endregion GL_DEPTH_COMPONENT24_SGIX

        #region GL_DEPTH_COMPONENT32
        public const GLuint GL_DEPTH_COMPONENT32 = 0x81A7;
        #endregion GL_DEPTH_COMPONENT32

        #region GL_DEPTH_COMPONENT32_SGIX
        public const GLuint GL_DEPTH_COMPONENT32_SGIX = 0x81A7;
        #endregion GL_DEPTH_COMPONENT32_SGIX

        #region GL_YCRCB_422_SGIX
        public const GLuint GL_YCRCB_422_SGIX = 0x81BB;
        #endregion GL_YCRCB_422_SGIX

        #region GL_YCRCB_444_SGIX
        public const GLuint GL_YCRCB_444_SGIX = 0x81BC;
        #endregion GL_YCRCB_444_SGIX

        #region GL_TEXTURE_COLOR_WRITEMASK_SGIS
        public const GLuint GL_TEXTURE_COLOR_WRITEMASK_SGIS = 0x81EF;
        #endregion GL_TEXTURE_COLOR_WRITEMASK_SGIS

        #region GL_EYE_DISTANCE_TO_POINT_SGIS
        public const GLuint GL_EYE_DISTANCE_TO_POINT_SGIS = 0x81F0;
        #endregion GL_EYE_DISTANCE_TO_POINT_SGIS

        #region GL_OBJECT_DISTANCE_TO_POINT_SGIS
        public const GLuint GL_OBJECT_DISTANCE_TO_POINT_SGIS = 0x81F1;
        #endregion GL_OBJECT_DISTANCE_TO_POINT_SGIS

        #region GL_EYE_DISTANCE_TO_LINE_SGIS
        public const GLuint GL_EYE_DISTANCE_TO_LINE_SGIS = 0x81F2;
        #endregion GL_EYE_DISTANCE_TO_LINE_SGIS

        #region GL_OBJECT_DISTANCE_TO_LINE_SGIS
        public const GLuint GL_OBJECT_DISTANCE_TO_LINE_SGIS = 0x81F3;
        #endregion GL_OBJECT_DISTANCE_TO_LINE_SGIS

        #region GL_EYE_POINT_SGIS
        public const GLuint GL_EYE_POINT_SGIS = 0x81F4;
        #endregion GL_EYE_POINT_SGIS

        #region GL_OBJECT_POINT_SGIS
        public const GLuint GL_OBJECT_POINT_SGIS = 0x81F5;
        #endregion GL_OBJECT_POINT_SGIS

        #region GL_EYE_LINE_SGIS
        public const GLuint GL_EYE_LINE_SGIS = 0x81F6;
        #endregion GL_EYE_LINE_SGIS

        #region GL_OBJECT_LINE_SGIS
        public const GLuint GL_OBJECT_LINE_SGIS = 0x81F7;
        #endregion GL_OBJECT_LINE_SGIS

        #region GL_LIGHT_MODEL_COLOR_CONTROL
        public const GLuint GL_LIGHT_MODEL_COLOR_CONTROL = 0x81F8;
        #endregion GL_LIGHT_MODEL_COLOR_CONTROL

        #region GL_LIGHT_MODEL_COLOR_CONTROL_EXT
        public const GLuint GL_LIGHT_MODEL_COLOR_CONTROL_EXT = 0x81F8;
        #endregion GL_LIGHT_MODEL_COLOR_CONTROL_EXT

        #region GL_SINGLE_COLOR
        public const GLuint GL_SINGLE_COLOR = 0x81F9;
        #endregion GL_SINGLE_COLOR

        #region GL_SINGLE_COLOR_EXT
        public const GLuint GL_SINGLE_COLOR_EXT = 0x81F9;
        #endregion GL_SINGLE_COLOR_EXT

        #region GL_SEPARATE_SPECULAR_COLOR
        public const GLuint GL_SEPARATE_SPECULAR_COLOR = 0x81FA;
        #endregion GL_SEPARATE_SPECULAR_COLOR

        #region GL_SEPARATE_SPECULAR_COLOR_EXT
        public const GLuint GL_SEPARATE_SPECULAR_COLOR_EXT = 0x81FA;
        #endregion GL_SEPARATE_SPECULAR_COLOR_EXT

        #region GL_SHARED_TEXTURE_PALETTE_EXT
        public const GLuint GL_SHARED_TEXTURE_PALETTE_EXT = 0x81FB;
        #endregion GL_SHARED_TEXTURE_PALETTE_EXT

        #region GL_CONVOLUTION_HINT_SGIX
        public const GLuint GL_CONVOLUTION_HINT_SGIX = 0x8316;
        #endregion GL_CONVOLUTION_HINT_SGIX

        #region GL_ALPHA_MIN_SGIX
        public const GLuint GL_ALPHA_MIN_SGIX = 0x8320;
        #endregion GL_ALPHA_MIN_SGIX

        #region GL_ALPHA_MAX_SGIX
        public const GLuint GL_ALPHA_MAX_SGIX = 0x8321;
        #endregion GL_ALPHA_MAX_SGIX

        #region GL_ASYNC_MARKER_SGIX
        public const GLuint GL_ASYNC_MARKER_SGIX = 0x8329;
        #endregion GL_ASYNC_MARKER_SGIX

        #region GL_ASYNC_HISTOGRAM_SGIX
        public const GLuint GL_ASYNC_HISTOGRAM_SGIX = 0x832C;
        #endregion GL_ASYNC_HISTOGRAM_SGIX

        #region GL_MAX_ASYNC_HISTOGRAM_SGIX
        public const GLuint GL_MAX_ASYNC_HISTOGRAM_SGIX = 0x832D;
        #endregion GL_MAX_ASYNC_HISTOGRAM_SGIX

        #region GL_PIXEL_TRANSFORM_2D_EXT
        public const GLuint GL_PIXEL_TRANSFORM_2D_EXT = 0x8330;
        #endregion GL_PIXEL_TRANSFORM_2D_EXT

        #region GL_PIXEL_MAG_FILTER_EXT
        public const GLuint GL_PIXEL_MAG_FILTER_EXT = 0x8331;
        #endregion GL_PIXEL_MAG_FILTER_EXT

        #region GL_PIXEL_MIN_FILTER_EXT
        public const GLuint GL_PIXEL_MIN_FILTER_EXT = 0x8332;
        #endregion GL_PIXEL_MIN_FILTER_EXT

        #region GL_PIXEL_CUBIC_WEIGHT_EXT
        public const GLuint GL_PIXEL_CUBIC_WEIGHT_EXT = 0x8333;
        #endregion GL_PIXEL_CUBIC_WEIGHT_EXT

        #region GL_CUBIC_EXT
        public const GLuint GL_CUBIC_EXT = 0x8334;
        #endregion GL_CUBIC_EXT

        #region GL_AVERAGE_EXT
        public const GLuint GL_AVERAGE_EXT = 0x8335;
        #endregion GL_AVERAGE_EXT

        #region GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT
        public const GLuint GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT = 0x8336;
        #endregion GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT

        #region GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT
        public const GLuint GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT = 0x8337;
        #endregion GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT

        #region GL_PIXEL_TRANSFORM_2D_MATRIX_EXT
        public const GLuint GL_PIXEL_TRANSFORM_2D_MATRIX_EXT = 0x8338;
        #endregion GL_PIXEL_TRANSFORM_2D_MATRIX_EXT

        #region GL_PIXEL_TEXTURE_SGIS
        public const GLuint GL_PIXEL_TEXTURE_SGIS = 0x8353;
        #endregion GL_PIXEL_TEXTURE_SGIS

        #region GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS
        public const GLuint GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS = 0x8354;
        #endregion GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS

        #region GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS
        public const GLuint GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS = 0x8355;
        #endregion GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS

        #region GL_PIXEL_GROUP_COLOR_SGIS
        public const GLuint GL_PIXEL_GROUP_COLOR_SGIS = 0x8356;
        #endregion GL_PIXEL_GROUP_COLOR_SGIS

        #region GL_ASYNC_TEX_IMAGE_SGIX
        public const GLuint GL_ASYNC_TEX_IMAGE_SGIX = 0x835C;
        #endregion GL_ASYNC_TEX_IMAGE_SGIX

        #region GL_ASYNC_DRAW_PIXELS_SGIX
        public const GLuint GL_ASYNC_DRAW_PIXELS_SGIX = 0x835D;
        #endregion GL_ASYNC_DRAW_PIXELS_SGIX

        #region GL_ASYNC_READ_PIXELS_SGIX
        public const GLuint GL_ASYNC_READ_PIXELS_SGIX = 0x835E;
        #endregion GL_ASYNC_READ_PIXELS_SGIX

        #region GL_MAX_ASYNC_TEX_IMAGE_SGIX
        public const GLuint GL_MAX_ASYNC_TEX_IMAGE_SGIX = 0x835F;
        #endregion GL_MAX_ASYNC_TEX_IMAGE_SGIX

        #region GL_MAX_ASYNC_DRAW_PIXELS_SGIX
        public const GLuint GL_MAX_ASYNC_DRAW_PIXELS_SGIX = 0x8360;
        #endregion GL_MAX_ASYNC_DRAW_PIXELS_SGIX

        #region GL_MAX_ASYNC_READ_PIXELS_SGIX
        public const GLuint GL_MAX_ASYNC_READ_PIXELS_SGIX = 0x8361;
        #endregion GL_MAX_ASYNC_READ_PIXELS_SGIX

        #region GL_TEXTURE_MAX_CLAMP_S_SGIX
        public const GLuint GL_TEXTURE_MAX_CLAMP_S_SGIX = 0x8369;
        #endregion GL_TEXTURE_MAX_CLAMP_S_SGIX

        #region GL_TEXTURE_MAX_CLAMP_T_SGIX
        public const GLuint GL_TEXTURE_MAX_CLAMP_T_SGIX = 0x836A;
        #endregion GL_TEXTURE_MAX_CLAMP_T_SGIX

        #region GL_TEXTURE_MAX_CLAMP_R_SGIX
        public const GLuint GL_TEXTURE_MAX_CLAMP_R_SGIX = 0x836B;
        #endregion GL_TEXTURE_MAX_CLAMP_R_SGIX

        #region GL_FOG_FACTOR_TO_ALPHA_SGIX
        public const GLuint GL_FOG_FACTOR_TO_ALPHA_SGIX = 0x836F;
        #endregion GL_FOG_FACTOR_TO_ALPHA_SGIX

        #region GL_VERTEX_PRECLIP_SGIX
        public const GLuint GL_VERTEX_PRECLIP_SGIX = 0x83EE;
        #endregion GL_VERTEX_PRECLIP_SGIX

        #region GL_VERTEX_PRECLIP_HINT_SGIX
        public const GLuint GL_VERTEX_PRECLIP_HINT_SGIX = 0x83EF;
        #endregion GL_VERTEX_PRECLIP_HINT_SGIX

        #region GL_COMPRESSED_RGB_S3TC_DXT1_EXT
        public const GLuint GL_COMPRESSED_RGB_S3TC_DXT1_EXT = 0x83F0;
        #endregion GL_COMPRESSED_RGB_S3TC_DXT1_EXT

        #region GL_COMPRESSED_RGBA_S3TC_DXT1_EXT
        public const GLuint GL_COMPRESSED_RGBA_S3TC_DXT1_EXT = 0x83F1;
        #endregion GL_COMPRESSED_RGBA_S3TC_DXT1_EXT

        #region GL_COMPRESSED_RGBA_S3TC_DXT3_EXT
        public const GLuint GL_COMPRESSED_RGBA_S3TC_DXT3_EXT = 0x83F2;
        #endregion GL_COMPRESSED_RGBA_S3TC_DXT3_EXT

        #region GL_COMPRESSED_RGBA_S3TC_DXT5_EXT
        public const GLuint GL_COMPRESSED_RGBA_S3TC_DXT5_EXT = 0x83F3;
        #endregion GL_COMPRESSED_RGBA_S3TC_DXT5_EXT

        #region GL_PARALLEL_ARRAYS_INTEL
        public const GLuint GL_PARALLEL_ARRAYS_INTEL = 0x83F4;
        #endregion GL_PARALLEL_ARRAYS_INTEL

        #region GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL
        public const GLuint GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL = 0x83F5;
        #endregion GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL

        #region GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL
        public const GLuint GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL = 0x83F6;
        #endregion GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL

        #region GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL
        public const GLuint GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL = 0x83F7;
        #endregion GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL

        #region GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL
        public const GLuint GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL = 0x83F8;
        #endregion GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL

        #region GL_FRAGMENT_LIGHTING_SGIX
        public const GLuint GL_FRAGMENT_LIGHTING_SGIX = 0x8400;
        #endregion GL_FRAGMENT_LIGHTING_SGIX

        #region GL_FRAGMENT_COLOR_MATERIAL_SGIX
        public const GLuint GL_FRAGMENT_COLOR_MATERIAL_SGIX = 0x8401;
        #endregion GL_FRAGMENT_COLOR_MATERIAL_SGIX

        #region GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX
        public const GLuint GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX = 0x8402;
        #endregion GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX

        #region GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX
        public const GLuint GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX = 0x8403;
        #endregion GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX

        #region GL_MAX_FRAGMENT_LIGHTS_SGIX
        public const GLuint GL_MAX_FRAGMENT_LIGHTS_SGIX = 0x8404;
        #endregion GL_MAX_FRAGMENT_LIGHTS_SGIX

        #region GL_MAX_ACTIVE_LIGHTS_SGIX
        public const GLuint GL_MAX_ACTIVE_LIGHTS_SGIX = 0x8405;
        #endregion GL_MAX_ACTIVE_LIGHTS_SGIX

        #region GL_CURRENT_RASTER_NORMAL_SGIX
        public const GLuint GL_CURRENT_RASTER_NORMAL_SGIX = 0x8406;
        #endregion GL_CURRENT_RASTER_NORMAL_SGIX

        #region GL_LIGHT_ENV_MODE_SGIX
        public const GLuint GL_LIGHT_ENV_MODE_SGIX = 0x8407;
        #endregion GL_LIGHT_ENV_MODE_SGIX

        #region GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX
        public const GLuint GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX = 0x8408;
        #endregion GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX

        #region GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX
        public const GLuint GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX = 0x8409;
        #endregion GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX

        #region GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX
        public const GLuint GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX = 0x840A;
        #endregion GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX

        #region GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX
        public const GLuint GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX = 0x840B;
        #endregion GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX

        #region GL_FRAGMENT_LIGHT0_SGIX
        public const GLuint GL_FRAGMENT_LIGHT0_SGIX = 0x840C;
        #endregion GL_FRAGMENT_LIGHT0_SGIX

        #region GL_FRAGMENT_LIGHT1_SGIX
        public const GLuint GL_FRAGMENT_LIGHT1_SGIX = 0x840D;
        #endregion GL_FRAGMENT_LIGHT1_SGIX

        #region GL_FRAGMENT_LIGHT2_SGIX
        public const GLuint GL_FRAGMENT_LIGHT2_SGIX = 0x840E;
        #endregion GL_FRAGMENT_LIGHT2_SGIX

        #region GL_FRAGMENT_LIGHT3_SGIX
        public const GLuint GL_FRAGMENT_LIGHT3_SGIX = 0x840F;
        #endregion GL_FRAGMENT_LIGHT3_SGIX

        #region GL_FRAGMENT_LIGHT4_SGIX
        public const GLuint GL_FRAGMENT_LIGHT4_SGIX = 0x8410;
        #endregion GL_FRAGMENT_LIGHT4_SGIX

        #region GL_FRAGMENT_LIGHT5_SGIX
        public const GLuint GL_FRAGMENT_LIGHT5_SGIX = 0x8411;
        #endregion GL_FRAGMENT_LIGHT5_SGIX

        #region GL_FRAGMENT_LIGHT6_SGIX
        public const GLuint GL_FRAGMENT_LIGHT6_SGIX = 0x8412;
        #endregion GL_FRAGMENT_LIGHT6_SGIX

        #region GL_FRAGMENT_LIGHT7_SGIX
        public const GLuint GL_FRAGMENT_LIGHT7_SGIX = 0x8413;
        #endregion GL_FRAGMENT_LIGHT7_SGIX

        #region GL_PACK_RESAMPLE_SGIX
        public const GLuint GL_PACK_RESAMPLE_SGIX = 0x842C;
        #endregion GL_PACK_RESAMPLE_SGIX

        #region GL_UNPACK_RESAMPLE_SGIX
        public const GLuint GL_UNPACK_RESAMPLE_SGIX = 0x842D;
        #endregion GL_UNPACK_RESAMPLE_SGIX

        #region GL_RESAMPLE_REPLICATE_SGIX
        public const GLuint GL_RESAMPLE_REPLICATE_SGIX = 0x842E;
        #endregion GL_RESAMPLE_REPLICATE_SGIX

        #region GL_RESAMPLE_ZERO_FILL_SGIX
        public const GLuint GL_RESAMPLE_ZERO_FILL_SGIX = 0x842F;
        #endregion GL_RESAMPLE_ZERO_FILL_SGIX

        #region GL_RESAMPLE_DECIMATE_SGIX
        public const GLuint GL_RESAMPLE_DECIMATE_SGIX = 0x8430;
        #endregion GL_RESAMPLE_DECIMATE_SGIX

        #region GL_SMOOTH_POINT_SIZE_RANGE
        public const GLuint GL_SMOOTH_POINT_SIZE_RANGE = 0x0B12;
        #endregion GL_SMOOTH_POINT_SIZE_RANGE

        #region GL_SMOOTH_POINT_SIZE_GRANULARITY
        public const GLuint GL_SMOOTH_POINT_SIZE_GRANULARITY = 0x0B13;
        #endregion GL_SMOOTH_POINT_SIZE_GRANULARITY

        #region GL_SMOOTH_LINE_WIDTH_RANGE
        public const GLuint GL_SMOOTH_LINE_WIDTH_RANGE = 0x0B22;
        #endregion GL_SMOOTH_LINE_WIDTH_RANGE

        #region GL_SMOOTH_LINE_WIDTH_GRANULARITY
        public const GLuint GL_SMOOTH_LINE_WIDTH_GRANULARITY = 0x0B23;
        #endregion GL_SMOOTH_LINE_WIDTH_GRANULARITY

        #region GL_ALIASED_POINT_SIZE_RANGE
        public const GLuint GL_ALIASED_POINT_SIZE_RANGE = 0x846D;
        #endregion GL_ALIASED_POINT_SIZE_RANGE

        #region GL_ALIASED_LINE_WIDTH_RANGE
        public const GLuint GL_ALIASED_LINE_WIDTH_RANGE = 0x846E;
        #endregion GL_ALIASED_LINE_WIDTH_RANGE

        #region GL_PACK_SUBSAMPLE_RATE_SGIX
        public const GLuint GL_PACK_SUBSAMPLE_RATE_SGIX = 0x85A0;
        #endregion GL_PACK_SUBSAMPLE_RATE_SGIX

        #region GL_UNPACK_SUBSAMPLE_RATE_SGIX
        public const GLuint GL_UNPACK_SUBSAMPLE_RATE_SGIX = 0x85A1;
        #endregion GL_UNPACK_SUBSAMPLE_RATE_SGIX

        #region GL_PIXEL_SUBSAMPLE_4444_SGIX
        public const GLuint GL_PIXEL_SUBSAMPLE_4444_SGIX = 0x85A2;
        #endregion GL_PIXEL_SUBSAMPLE_4444_SGIX

        #region GL_PIXEL_SUBSAMPLE_2424_SGIX
        public const GLuint GL_PIXEL_SUBSAMPLE_2424_SGIX = 0x85A3;
        #endregion GL_PIXEL_SUBSAMPLE_2424_SGIX

        #region GL_PIXEL_SUBSAMPLE_4242_SGIX
        public const GLuint GL_PIXEL_SUBSAMPLE_4242_SGIX = 0x85A4;
        #endregion GL_PIXEL_SUBSAMPLE_4242_SGIX

        #region GL_TEXTURE0
        public const GLuint GL_TEXTURE0 = 0x84C0;
        #endregion GL_TEXTURE0

        #region GL_TEXTURE1
        public const GLuint GL_TEXTURE1 = 0x84C1;
        #endregion GL_TEXTURE1

        #region GL_TEXTURE2
        public const GLuint GL_TEXTURE2 = 0x84C2;
        #endregion GL_TEXTURE2

        #region GL_TEXTURE3
        public const GLuint GL_TEXTURE3 = 0x84C3;
        #endregion GL_TEXTURE3

        #region GL_TEXTURE4
        public const GLuint GL_TEXTURE4 = 0x84C4;
        #endregion GL_TEXTURE4

        #region GL_TEXTURE5
        public const GLuint GL_TEXTURE5 = 0x84C5;
        #endregion GL_TEXTURE5

        #region GL_TEXTURE6
        public const GLuint GL_TEXTURE6 = 0x84C6;
        #endregion GL_TEXTURE6

        #region GL_TEXTURE7
        public const GLuint GL_TEXTURE7 = 0x84C7;
        #endregion GL_TEXTURE7

        #region GL_TEXTURE8
        public const GLuint GL_TEXTURE8 = 0x84C8;
        #endregion GL_TEXTURE8

        #region GL_TEXTURE9
        public const GLuint GL_TEXTURE9 = 0x84C9;
        #endregion GL_TEXTURE9

        #region GL_TEXTURE10
        public const GLuint GL_TEXTURE10 = 0x84CA;
        #endregion GL_TEXTURE10

        #region GL_TEXTURE11
        public const GLuint GL_TEXTURE11 = 0x84CB;
        #endregion GL_TEXTURE11

        #region GL_TEXTURE12
        public const GLuint GL_TEXTURE12 = 0x84CC;
        #endregion GL_TEXTURE12

        #region GL_TEXTURE13
        public const GLuint GL_TEXTURE13 = 0x84CD;
        #endregion GL_TEXTURE13

        #region GL_TEXTURE14
        public const GLuint GL_TEXTURE14 = 0x84CE;
        #endregion GL_TEXTURE14

        #region GL_TEXTURE15
        public const GLuint GL_TEXTURE15 = 0x84CF;
        #endregion GL_TEXTURE15

        #region GL_TEXTURE16
        public const GLuint GL_TEXTURE16 = 0x84D0;
        #endregion GL_TEXTURE16

        #region GL_TEXTURE17
        public const GLuint GL_TEXTURE17 = 0x84D1;
        #endregion GL_TEXTURE17

        #region GL_TEXTURE18
        public const GLuint GL_TEXTURE18 = 0x84D2;
        #endregion GL_TEXTURE18

        #region GL_TEXTURE19
        public const GLuint GL_TEXTURE19 = 0x84D3;
        #endregion GL_TEXTURE19

        #region GL_TEXTURE20
        public const GLuint GL_TEXTURE20 = 0x84D4;
        #endregion GL_TEXTURE20

        #region GL_TEXTURE21
        public const GLuint GL_TEXTURE21 = 0x84D5;
        #endregion GL_TEXTURE21

        #region GL_TEXTURE22
        public const GLuint GL_TEXTURE22 = 0x84D6;
        #endregion GL_TEXTURE22

        #region GL_TEXTURE23
        public const GLuint GL_TEXTURE23 = 0x84D7;
        #endregion GL_TEXTURE23

        #region GL_TEXTURE24
        public const GLuint GL_TEXTURE24 = 0x84D8;
        #endregion GL_TEXTURE24

        #region GL_TEXTURE25
        public const GLuint GL_TEXTURE25 = 0x84D9;
        #endregion GL_TEXTURE25

        #region GL_TEXTURE26
        public const GLuint GL_TEXTURE26 = 0x84DA;
        #endregion GL_TEXTURE26

        #region GL_TEXTURE27
        public const GLuint GL_TEXTURE27 = 0x84DB;
        #endregion GL_TEXTURE27

        #region GL_TEXTURE28
        public const GLuint GL_TEXTURE28 = 0x84DC;
        #endregion GL_TEXTURE28

        #region GL_TEXTURE29
        public const GLuint GL_TEXTURE29 = 0x84DD;
        #endregion GL_TEXTURE29

        #region GL_TEXTURE30
        public const GLuint GL_TEXTURE30 = 0x84DE;
        #endregion GL_TEXTURE30

        #region GL_TEXTURE31
        public const GLuint GL_TEXTURE31 = 0x84DF;
        #endregion GL_TEXTURE31

        #region GL_ACTIVE_TEXTURE
        public const GLuint GL_ACTIVE_TEXTURE = 0x84E0;
        #endregion GL_ACTIVE_TEXTURE

        #region GL_CLIENT_ACTIVE_TEXTURE
        public const GLuint GL_CLIENT_ACTIVE_TEXTURE = 0x84E1;
        #endregion GL_CLIENT_ACTIVE_TEXTURE

        #region GL_MAX_TEXTURE_UNITS
        public const GLuint GL_MAX_TEXTURE_UNITS = 0x84E2;
        #endregion GL_MAX_TEXTURE_UNITS

        #region GL_TRANSPOSE_MODELVIEW_MATRIX
        public const GLuint GL_TRANSPOSE_MODELVIEW_MATRIX = 0x84E3;
        #endregion GL_TRANSPOSE_MODELVIEW_MATRIX

        #region GL_TRANSPOSE_PROJECTION_MATRIX
        public const GLuint GL_TRANSPOSE_PROJECTION_MATRIX = 0x84E4;
        #endregion GL_TRANSPOSE_PROJECTION_MATRIX

        #region GL_TRANSPOSE_TEXTURE_MATRIX
        public const GLuint GL_TRANSPOSE_TEXTURE_MATRIX = 0x84E5;
        #endregion GL_TRANSPOSE_TEXTURE_MATRIX

        #region GL_TRANSPOSE_COLOR_MATRIX
        public const GLuint GL_TRANSPOSE_COLOR_MATRIX = 0x84E6;
        #endregion GL_TRANSPOSE_COLOR_MATRIX

        #region GL_MULTISAMPLE_BIT
        public const GLuint GL_MULTISAMPLE_BIT = 0x20000000;
        #endregion GL_MULTISAMPLE_BIT

        #region GL_NORMAL_MAP
        public const GLuint GL_NORMAL_MAP = 0x8511;
        #endregion GL_NORMAL_MAP

        #region GL_REFLECTION_MAP
        public const GLuint GL_REFLECTION_MAP = 0x8512;
        #endregion GL_REFLECTION_MAP

        #region GL_TEXTURE_CUBE_MAP
        public const GLuint GL_TEXTURE_CUBE_MAP = 0x8513;
        #endregion GL_TEXTURE_CUBE_MAP

        #region GL_TEXTURE_BINDING_CUBE_MAP
        public const GLuint GL_TEXTURE_BINDING_CUBE_MAP = 0x8514;
        #endregion GL_TEXTURE_BINDING_CUBE_MAP

        #region GL_TEXTURE_CUBE_MAP_POSITIVE_X
        public const GLuint GL_TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515;
        #endregion GL_TEXTURE_CUBE_MAP_POSITIVE_X

        #region GL_TEXTURE_CUBE_MAP_NEGATIVE_X
        public const GLuint GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516;
        #endregion GL_TEXTURE_CUBE_MAP_NEGATIVE_X

        #region GL_TEXTURE_CUBE_MAP_POSITIVE_Y
        public const GLuint GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517;
        #endregion GL_TEXTURE_CUBE_MAP_POSITIVE_Y

        #region GL_TEXTURE_CUBE_MAP_NEGATIVE_Y
        public const GLuint GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518;
        #endregion GL_TEXTURE_CUBE_MAP_NEGATIVE_Y

        #region GL_TEXTURE_CUBE_MAP_POSITIVE_Z
        public const GLuint GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519;
        #endregion GL_TEXTURE_CUBE_MAP_POSITIVE_Z

        #region GL_TEXTURE_CUBE_MAP_NEGATIVE_Z
        public const GLuint GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851A;
        #endregion GL_TEXTURE_CUBE_MAP_NEGATIVE_Z

        #region GL_PROXY_TEXTURE_CUBE_MAP
        public const GLuint GL_PROXY_TEXTURE_CUBE_MAP = 0x851B;
        #endregion GL_PROXY_TEXTURE_CUBE_MAP

        #region GL_MAX_CUBE_MAP_TEXTURE_SIZE
        public const GLuint GL_MAX_CUBE_MAP_TEXTURE_SIZE = 0x851C;
        #endregion GL_MAX_CUBE_MAP_TEXTURE_SIZE

        #region GL_COMPRESSED_ALPHA
        public const GLuint GL_COMPRESSED_ALPHA = 0x84E9;
        #endregion GL_COMPRESSED_ALPHA

        #region GL_COMPRESSED_LUMINANCE
        public const GLuint GL_COMPRESSED_LUMINANCE = 0x84EA;
        #endregion GL_COMPRESSED_LUMINANCE

        #region GL_COMPRESSED_LUMINANCE_ALPHA
        public const GLuint GL_COMPRESSED_LUMINANCE_ALPHA = 0x84EB;
        #endregion GL_COMPRESSED_LUMINANCE_ALPHA

        #region GL_COMPRESSED_INTENSITY
        public const GLuint GL_COMPRESSED_INTENSITY = 0x84EC;
        #endregion GL_COMPRESSED_INTENSITY

        #region GL_COMPRESSED_RGB
        public const GLuint GL_COMPRESSED_RGB = 0x84ED;
        #endregion GL_COMPRESSED_RGB

        #region GL_COMPRESSED_RGBA
        public const GLuint GL_COMPRESSED_RGBA = 0x84EE;
        #endregion GL_COMPRESSED_RGBA

        #region GL_TEXTURE_COMPRESSION_HINT
        public const GLuint GL_TEXTURE_COMPRESSION_HINT = 0x84EF;
        #endregion GL_TEXTURE_COMPRESSION_HINT

        #region GL_TEXTURE_COMPRESSED_IMAGE_SIZE
        public const GLuint GL_TEXTURE_COMPRESSED_IMAGE_SIZE = 0x86A0;
        #endregion GL_TEXTURE_COMPRESSED_IMAGE_SIZE

        #region GL_TEXTURE_COMPRESSED
        public const GLuint GL_TEXTURE_COMPRESSED = 0x86A1;
        #endregion GL_TEXTURE_COMPRESSED

        #region GL_NUM_COMPRESSED_TEXTURE_FORMATS
        public const GLuint GL_NUM_COMPRESSED_TEXTURE_FORMATS = 0x86A2;
        #endregion GL_NUM_COMPRESSED_TEXTURE_FORMATS

        #region GL_COMPRESSED_TEXTURE_FORMATS
        public const GLuint GL_COMPRESSED_TEXTURE_FORMATS = 0x86A3;
        #endregion GL_COMPRESSED_TEXTURE_FORMATS

        #region GL_COMBINE
        public const GLuint GL_COMBINE = 0x8570;
        #endregion GL_COMBINE

        #region GL_COMBINE_RGB
        public const GLuint GL_COMBINE_RGB = 0x8571;
        #endregion GL_COMBINE_RGB

        #region GL_COMBINE_ALPHA
        public const GLuint GL_COMBINE_ALPHA = 0x8572;
        #endregion GL_COMBINE_ALPHA

        #region GL_SOURCE0_RGB
        public const GLuint GL_SOURCE0_RGB = 0x8580;
        #endregion GL_SOURCE0_RGB

        #region GL_SOURCE1_RGB
        public const GLuint GL_SOURCE1_RGB = 0x8581;
        #endregion GL_SOURCE1_RGB

        #region GL_SOURCE2_RGB
        public const GLuint GL_SOURCE2_RGB = 0x8582;
        #endregion GL_SOURCE2_RGB

        #region GL_SOURCE0_ALPHA
        public const GLuint GL_SOURCE0_ALPHA = 0x8588;
        #endregion GL_SOURCE0_ALPHA

        #region GL_SOURCE1_ALPHA
        public const GLuint GL_SOURCE1_ALPHA = 0x8589;
        #endregion GL_SOURCE1_ALPHA

        #region GL_SOURCE2_ALPHA
        public const GLuint GL_SOURCE2_ALPHA = 0x858A;
        #endregion GL_SOURCE2_ALPHA

        #region GL_OPERAND0_RGB
        public const GLuint GL_OPERAND0_RGB = 0x8590;
        #endregion GL_OPERAND0_RGB

        #region GL_OPERAND1_RGB
        public const GLuint GL_OPERAND1_RGB = 0x8591;
        #endregion GL_OPERAND1_RGB

        #region GL_OPERAND2_RGB
        public const GLuint GL_OPERAND2_RGB = 0x8592;
        #endregion GL_OPERAND2_RGB

        #region GL_OPERAND0_ALPHA
        public const GLuint GL_OPERAND0_ALPHA = 0x8598;
        #endregion GL_OPERAND0_ALPHA

        #region GL_OPERAND1_ALPHA
        public const GLuint GL_OPERAND1_ALPHA = 0x8599;
        #endregion GL_OPERAND1_ALPHA

        #region GL_OPERAND2_ALPHA
        public const GLuint GL_OPERAND2_ALPHA = 0x859A;
        #endregion GL_OPERAND2_ALPHA

        #region GL_RGB_SCALE
        public const GLuint GL_RGB_SCALE = 0x8573;
        #endregion GL_RGB_SCALE

        #region GL_ADD_SIGNED
        public const GLuint GL_ADD_SIGNED = 0x8574;
        #endregion GL_ADD_SIGNED

        #region GL_INTERPOLATE
        public const GLuint GL_INTERPOLATE = 0x8575;
        #endregion GL_INTERPOLATE

        #region GL_SUBTRACT
        public const GLuint GL_SUBTRACT = 0x84E7;
        #endregion GL_SUBTRACT

        #region GL_CONSTANT
        public const GLuint GL_CONSTANT = 0x8576;
        #endregion GL_CONSTANT

        #region GL_PRIMARY_COLOR
        public const GLuint GL_PRIMARY_COLOR = 0x8577;
        #endregion GL_PRIMARY_COLOR

        #region GL_PREVIOUS
        public const GLuint GL_PREVIOUS = 0x8578;
        #endregion GL_PREVIOUS

        #region GL_DOT3_RGB
        public const GLuint GL_DOT3_RGB = 0x86AE;
        #endregion GL_DOT3_RGB

        #region GL_DOT3_RGBA
        public const GLuint GL_DOT3_RGBA = 0x86AF;
        #endregion GL_DOT3_RGBA

        #region GL_BLEND_DST_RGB
        public const GLuint GL_BLEND_DST_RGB = 0x80C8;
        #endregion GL_BLEND_DST_RGB

        #region GL_BLEND_SRC_RGB
        public const GLuint GL_BLEND_SRC_RGB = 0x80C9;
        #endregion GL_BLEND_SRC_RGB

        #region GL_BLEND_DST_ALPHA
        public const GLuint GL_BLEND_DST_ALPHA = 0x80CA;
        #endregion GL_BLEND_DST_ALPHA

        #region GL_BLEND_SRC_ALPHA
        public const GLuint GL_BLEND_SRC_ALPHA = 0x80CB;
        #endregion GL_BLEND_SRC_ALPHA

        #region GL_MIRRORED_REPEAT
        public const GLuint GL_MIRRORED_REPEAT = 0x8370;
        #endregion GL_MIRRORED_REPEAT

        #region GL_FOG_COORDINATE_SOURCE
        public const GLuint GL_FOG_COORDINATE_SOURCE = 0x8450;
        #endregion GL_FOG_COORDINATE_SOURCE

        #region GL_FOG_COORDINATE
        public const GLuint GL_FOG_COORDINATE = 0x8451;
        #endregion GL_FOG_COORDINATE

        #region GL_FRAGMENT_DEPTH
        public const GLuint GL_FRAGMENT_DEPTH = 0x8452;
        #endregion GL_FRAGMENT_DEPTH

        #region GL_CURRENT_FOG_COORDINATE
        public const GLuint GL_CURRENT_FOG_COORDINATE = 0x8453;
        #endregion GL_CURRENT_FOG_COORDINATE

        #region GL_FOG_COORDINATE_ARRAY_TYPE
        public const GLuint GL_FOG_COORDINATE_ARRAY_TYPE = 0x8454;
        #endregion GL_FOG_COORDINATE_ARRAY_TYPE

        #region GL_FOG_COORDINATE_ARRAY_STRIDE
        public const GLuint GL_FOG_COORDINATE_ARRAY_STRIDE = 0x8455;
        #endregion GL_FOG_COORDINATE_ARRAY_STRIDE

        #region GL_FOG_COORDINATE_ARRAY_POINTER
        public const GLuint GL_FOG_COORDINATE_ARRAY_POINTER = 0x8456;
        #endregion GL_FOG_COORDINATE_ARRAY_POINTER

        #region GL_FOG_COORDINATE_ARRAY
        public const GLuint GL_FOG_COORDINATE_ARRAY = 0x8457;
        #endregion GL_FOG_COORDINATE_ARRAY

        #region GL_COLOR_SUM
        public const GLuint GL_COLOR_SUM = 0x8458;
        #endregion GL_COLOR_SUM

        #region GL_CURRENT_SECONDARY_COLOR
        public const GLuint GL_CURRENT_SECONDARY_COLOR = 0x8459;
        #endregion GL_CURRENT_SECONDARY_COLOR

        #region GL_SECONDARY_COLOR_ARRAY_SIZE
        public const GLuint GL_SECONDARY_COLOR_ARRAY_SIZE = 0x845A;
        #endregion GL_SECONDARY_COLOR_ARRAY_SIZE

        #region GL_SECONDARY_COLOR_ARRAY_TYPE
        public const GLuint GL_SECONDARY_COLOR_ARRAY_TYPE = 0x845B;
        #endregion GL_SECONDARY_COLOR_ARRAY_TYPE

        #region GL_SECONDARY_COLOR_ARRAY_STRIDE
        public const GLuint GL_SECONDARY_COLOR_ARRAY_STRIDE = 0x845C;
        #endregion GL_SECONDARY_COLOR_ARRAY_STRIDE

        #region GL_SECONDARY_COLOR_ARRAY_POINTER
        public const GLuint GL_SECONDARY_COLOR_ARRAY_POINTER = 0x845D;
        #endregion GL_SECONDARY_COLOR_ARRAY_POINTER

        #region GL_SECONDARY_COLOR_ARRAY
        public const GLuint GL_SECONDARY_COLOR_ARRAY = 0x845E;
        #endregion GL_SECONDARY_COLOR_ARRAY

        #region GL_MAX_TEXTURE_LOD_BIAS
        public const GLuint GL_MAX_TEXTURE_LOD_BIAS = 0x84FD;
        #endregion GL_MAX_TEXTURE_LOD_BIAS

        #region GL_TEXTURE_FILTER_CONTROL
        public const GLuint GL_TEXTURE_FILTER_CONTROL = 0x8500;
        #endregion GL_TEXTURE_FILTER_CONTROL

        #region GL_TEXTURE_LOD_BIAS
        public const GLuint GL_TEXTURE_LOD_BIAS = 0x8501;
        #endregion GL_TEXTURE_LOD_BIAS

        #region GL_INCR_WRAP
        public const GLuint GL_INCR_WRAP = 0x8507;
        #endregion GL_INCR_WRAP

        #region GL_DECR_WRAP
        public const GLuint GL_DECR_WRAP = 0x8508;
        #endregion GL_DECR_WRAP

        #region GL_TEXTURE_DEPTH_SIZE
        public const GLuint GL_TEXTURE_DEPTH_SIZE = 0x884A;
        #endregion GL_TEXTURE_DEPTH_SIZE

        #region GL_DEPTH_TEXTURE_MODE
        public const GLuint GL_DEPTH_TEXTURE_MODE = 0x884B;
        #endregion GL_DEPTH_TEXTURE_MODE

        #region GL_TEXTURE_COMPARE_MODE
        public const GLuint GL_TEXTURE_COMPARE_MODE = 0x884C;
        #endregion GL_TEXTURE_COMPARE_MODE

        #region GL_TEXTURE_COMPARE_FUNC
        public const GLuint GL_TEXTURE_COMPARE_FUNC = 0x884D;
        #endregion GL_TEXTURE_COMPARE_FUNC

        #region GL_COMPARE_R_TO_TEXTURE
        public const GLuint GL_COMPARE_R_TO_TEXTURE = 0x884E;
        #endregion GL_COMPARE_R_TO_TEXTURE

        #region GL_BUFFER_SIZE
        public const GLuint GL_BUFFER_SIZE = 0x8764;
        #endregion GL_BUFFER_SIZE

        #region GL_BUFFER_USAGE
        public const GLuint GL_BUFFER_USAGE = 0x8765;
        #endregion GL_BUFFER_USAGE

        #region GL_QUERY_COUNTER_BITS
        public const GLuint GL_QUERY_COUNTER_BITS = 0x8864;
        #endregion GL_QUERY_COUNTER_BITS

        #region GL_CURRENT_QUERY
        public const GLuint GL_CURRENT_QUERY = 0x8865;
        #endregion GL_CURRENT_QUERY

        #region GL_QUERY_RESULT
        public const GLuint GL_QUERY_RESULT = 0x8866;
        #endregion GL_QUERY_RESULT

        #region GL_QUERY_RESULT_AVAILABLE
        public const GLuint GL_QUERY_RESULT_AVAILABLE = 0x8867;
        #endregion GL_QUERY_RESULT_AVAILABLE

        #region GL_ARRAY_BUFFER
        public const GLuint GL_ARRAY_BUFFER = 0x8892;
        #endregion GL_ARRAY_BUFFER

        #region GL_ELEMENT_ARRAY_BUFFER
        public const GLuint GL_ELEMENT_ARRAY_BUFFER = 0x8893;
        #endregion GL_ELEMENT_ARRAY_BUFFER

        #region GL_ARRAY_BUFFER_BINDING
        public const GLuint GL_ARRAY_BUFFER_BINDING = 0x8894;
        #endregion GL_ARRAY_BUFFER_BINDING

        #region GL_ELEMENT_ARRAY_BUFFER_BINDING
        public const GLuint GL_ELEMENT_ARRAY_BUFFER_BINDING = 0x8895;
        #endregion GL_ELEMENT_ARRAY_BUFFER_BINDING

        #region GL_VERTEX_ARRAY_BUFFER_BINDING
        public const GLuint GL_VERTEX_ARRAY_BUFFER_BINDING = 0x8896;
        #endregion GL_VERTEX_ARRAY_BUFFER_BINDING

        #region GL_NORMAL_ARRAY_BUFFER_BINDING
        public const GLuint GL_NORMAL_ARRAY_BUFFER_BINDING = 0x8897;
        #endregion GL_NORMAL_ARRAY_BUFFER_BINDING

        #region GL_COLOR_ARRAY_BUFFER_BINDING
        public const GLuint GL_COLOR_ARRAY_BUFFER_BINDING = 0x8898;
        #endregion GL_COLOR_ARRAY_BUFFER_BINDING

        #region GL_INDEX_ARRAY_BUFFER_BINDING
        public const GLuint GL_INDEX_ARRAY_BUFFER_BINDING = 0x8899;
        #endregion GL_INDEX_ARRAY_BUFFER_BINDING

        #region GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING
        public const GLuint GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING = 0x889A;
        #endregion GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING

        #region GL_EDGE_FLAG_ARRAY_BUFFER_BINDING
        public const GLuint GL_EDGE_FLAG_ARRAY_BUFFER_BINDING = 0x889B;
        #endregion GL_EDGE_FLAG_ARRAY_BUFFER_BINDING

        #region GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING
        public const GLuint GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING = 0x889C;
        #endregion GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING

        #region GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING
        public const GLuint GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING = 0x889D;
        #endregion GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING

        #region GL_WEIGHT_ARRAY_BUFFER_BINDING
        public const GLuint GL_WEIGHT_ARRAY_BUFFER_BINDING = 0x889E;
        #endregion GL_WEIGHT_ARRAY_BUFFER_BINDING

        #region GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING
        public const GLuint GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889F;
        #endregion GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING

        #region GL_READ_ONLY
        public const GLuint GL_READ_ONLY = 0x88B8;
        #endregion GL_READ_ONLY

        #region GL_WRITE_ONLY
        public const GLuint GL_WRITE_ONLY = 0x88B9;
        #endregion GL_WRITE_ONLY

        #region GL_READ_WRITE
        public const GLuint GL_READ_WRITE = 0x88BA;
        #endregion GL_READ_WRITE

        #region GL_BUFFER_ACCESS
        public const GLuint GL_BUFFER_ACCESS = 0x88BB;
        #endregion GL_BUFFER_ACCESS

        #region GL_BUFFER_MAPPED
        public const GLuint GL_BUFFER_MAPPED = 0x88BC;
        #endregion GL_BUFFER_MAPPED

        #region GL_BUFFER_MAP_POINTER
        public const GLuint GL_BUFFER_MAP_POINTER = 0x88BD;
        #endregion GL_BUFFER_MAP_POINTER

        #region GL_STREAM_DRAW
        public const GLuint GL_STREAM_DRAW = 0x88E0;
        #endregion GL_STREAM_DRAW

        #region GL_STREAM_READ
        public const GLuint GL_STREAM_READ = 0x88E1;
        #endregion GL_STREAM_READ

        #region GL_STREAM_COPY
        public const GLuint GL_STREAM_COPY = 0x88E2;
        #endregion GL_STREAM_COPY

        #region GL_STATIC_DRAW
        public const GLuint GL_STATIC_DRAW = 0x88E4;
        #endregion GL_STATIC_DRAW

        #region GL_STATIC_READ
        public const GLuint GL_STATIC_READ = 0x88E5;
        #endregion GL_STATIC_READ

        #region GL_STATIC_COPY
        public const GLuint GL_STATIC_COPY = 0x88E6;
        #endregion GL_STATIC_COPY

        #region GL_DYNAMIC_DRAW
        public const GLuint GL_DYNAMIC_DRAW = 0x88E8;
        #endregion GL_DYNAMIC_DRAW

        #region GL_DYNAMIC_READ
        public const GLuint GL_DYNAMIC_READ = 0x88E9;
        #endregion GL_DYNAMIC_READ

        #region GL_DYNAMIC_COPY
        public const GLuint GL_DYNAMIC_COPY = 0x88EA;
        #endregion GL_DYNAMIC_COPY

        #region GL_SAMPLES_PASSED
        public const GLuint GL_SAMPLES_PASSED = 0x8914;
        #endregion GL_SAMPLES_PASSED

        #region GL_FOG_COORD_SRC
        public const GLuint GL_FOG_COORD_SRC = GL_FOG_COORDINATE_SOURCE;
        #endregion GL_FOG_COORD_SRC

        #region GL_FOG_COORD
        public const GLuint GL_FOG_COORD = GL_FOG_COORDINATE;
        #endregion GL_FOG_COORD

        #region GL_CURRENT_FOG_COORD
        public const GLuint GL_CURRENT_FOG_COORD = GL_CURRENT_FOG_COORDINATE;
        #endregion GL_CURRENT_FOG_COORD

        #region GL_FOG_COORD_ARRAY_TYPE
        public const GLuint GL_FOG_COORD_ARRAY_TYPE = GL_FOG_COORDINATE_ARRAY_TYPE;
        #endregion GL_FOG_COORD_ARRAY_TYPE

        #region GL_FOG_COORD_ARRAY_STRIDE
        public const GLuint GL_FOG_COORD_ARRAY_STRIDE = GL_FOG_COORDINATE_ARRAY_STRIDE;
        #endregion GL_FOG_COORD_ARRAY_STRIDE

        #region GL_FOG_COORD_ARRAY_POINTER
        public const GLuint GL_FOG_COORD_ARRAY_POINTER = GL_FOG_COORDINATE_ARRAY_POINTER;
        #endregion GL_FOG_COORD_ARRAY_POINTER

        #region GL_FOG_COORD_ARRAY
        public const GLuint GL_FOG_COORD_ARRAY = GL_FOG_COORDINATE_ARRAY;
        #endregion GL_FOG_COORD_ARRAY

        #region GL_FOG_COORD_ARRAY_BUFFER_BINDING
        public const GLuint GL_FOG_COORD_ARRAY_BUFFER_BINDING = GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING;
        #endregion GL_FOG_COORD_ARRAY_BUFFER_BINDING

        #region GL_SRC0_RGB
        public const GLuint GL_SRC0_RGB = GL_SOURCE0_RGB;
        #endregion GL_SRC0_RGB

        #region GL_SRC1_RGB
        public const GLuint GL_SRC1_RGB = GL_SOURCE1_RGB;
        #endregion GL_SRC1_RGB

        #region GL_SRC2_RGB
        public const GLuint GL_SRC2_RGB = GL_SOURCE2_RGB;
        #endregion GL_SRC2_RGB

        #region GL_SRC0_ALPHA
        public const GLuint GL_SRC0_ALPHA = GL_SOURCE0_ALPHA;
        #endregion GL_SRC0_ALPHA

        #region GL_SRC1_ALPHA
        public const GLuint GL_SRC1_ALPHA = GL_SOURCE1_ALPHA;
        #endregion GL_SRC1_ALPHA

        #region GL_SRC2_ALPHA
        public const GLuint GL_SRC2_ALPHA = GL_SOURCE2_ALPHA;
        #endregion GL_SRC2_ALPHA

        #region GL_BLEND_EQUATION_RGB
        public const GLuint GL_BLEND_EQUATION_RGB = GL_BLEND_EQUATION;
        #endregion GL_BLEND_EQUATION_RGB

        #region GL_VERTEX_ATTRIB_ARRAY_ENABLED
        public const GLuint GL_VERTEX_ATTRIB_ARRAY_ENABLED = 0x8622;
        #endregion GL_VERTEX_ATTRIB_ARRAY_ENABLED

        #region GL_VERTEX_ATTRIB_ARRAY_SIZE
        public const GLuint GL_VERTEX_ATTRIB_ARRAY_SIZE = 0x8623;
        #endregion GL_VERTEX_ATTRIB_ARRAY_SIZE

        #region GL_VERTEX_ATTRIB_ARRAY_STRIDE
        public const GLuint GL_VERTEX_ATTRIB_ARRAY_STRIDE = 0x8624;
        #endregion GL_VERTEX_ATTRIB_ARRAY_STRIDE

        #region GL_VERTEX_ATTRIB_ARRAY_TYPE
        public const GLuint GL_VERTEX_ATTRIB_ARRAY_TYPE = 0x8625;
        #endregion GL_VERTEX_ATTRIB_ARRAY_TYPE

        #region GL_CURRENT_VERTEX_ATTRIB
        public const GLuint GL_CURRENT_VERTEX_ATTRIB = 0x8626;
        #endregion GL_CURRENT_VERTEX_ATTRIB

        #region GL_VERTEX_PROGRAM_POINT_SIZE
        public const GLuint GL_VERTEX_PROGRAM_POINT_SIZE = 0x8642;
        #endregion GL_VERTEX_PROGRAM_POINT_SIZE

        #region GL_VERTEX_PROGRAM_TWO_SIDE
        public const GLuint GL_VERTEX_PROGRAM_TWO_SIDE = 0x8643;
        #endregion GL_VERTEX_PROGRAM_TWO_SIDE

        #region GL_VERTEX_ATTRIB_ARRAY_POINTER
        public const GLuint GL_VERTEX_ATTRIB_ARRAY_POINTER = 0x8645;
        #endregion GL_VERTEX_ATTRIB_ARRAY_POINTER

        #region GL_STENCIL_BACK_FUNC
        public const GLuint GL_STENCIL_BACK_FUNC = 0x8800;
        #endregion GL_STENCIL_BACK_FUNC

        #region GL_STENCIL_BACK_FAIL
        public const GLuint GL_STENCIL_BACK_FAIL = 0x8801;
        #endregion GL_STENCIL_BACK_FAIL

        #region GL_STENCIL_BACK_PASS_DEPTH_FAIL
        public const GLuint GL_STENCIL_BACK_PASS_DEPTH_FAIL = 0x8802;
        #endregion GL_STENCIL_BACK_PASS_DEPTH_FAIL

        #region GL_STENCIL_BACK_PASS_DEPTH_PASS
        public const GLuint GL_STENCIL_BACK_PASS_DEPTH_PASS = 0x8803;
        #endregion GL_STENCIL_BACK_PASS_DEPTH_PASS

        #region GL_MAX_DRAW_BUFFERS
        public const GLuint GL_MAX_DRAW_BUFFERS = 0x8824;
        #endregion GL_MAX_DRAW_BUFFERS

        #region GL_DRAW_BUFFER0
        public const GLuint GL_DRAW_BUFFER0 = 0x8825;
        #endregion GL_DRAW_BUFFER0

        #region GL_DRAW_BUFFER1
        public const GLuint GL_DRAW_BUFFER1 = 0x8826;
        #endregion GL_DRAW_BUFFER1

        #region GL_DRAW_BUFFER2
        public const GLuint GL_DRAW_BUFFER2 = 0x8827;
        #endregion GL_DRAW_BUFFER2

        #region GL_DRAW_BUFFER3
        public const GLuint GL_DRAW_BUFFER3 = 0x8828;
        #endregion GL_DRAW_BUFFER3

        #region GL_DRAW_BUFFER4
        public const GLuint GL_DRAW_BUFFER4 = 0x8829;
        #endregion GL_DRAW_BUFFER4

        #region GL_DRAW_BUFFER5
        public const GLuint GL_DRAW_BUFFER5 = 0x882A;
        #endregion GL_DRAW_BUFFER5

        #region GL_DRAW_BUFFER6
        public const GLuint GL_DRAW_BUFFER6 = 0x882B;
        #endregion GL_DRAW_BUFFER6

        #region GL_DRAW_BUFFER7
        public const GLuint GL_DRAW_BUFFER7 = 0x882C;
        #endregion GL_DRAW_BUFFER7

        #region GL_DRAW_BUFFER8
        public const GLuint GL_DRAW_BUFFER8 = 0x882D;
        #endregion GL_DRAW_BUFFER8

        #region GL_DRAW_BUFFER9
        public const GLuint GL_DRAW_BUFFER9 = 0x882E;
        #endregion GL_DRAW_BUFFER9

        #region GL_DRAW_BUFFER10
        public const GLuint GL_DRAW_BUFFER10 = 0x882F;
        #endregion GL_DRAW_BUFFER10

        #region GL_DRAW_BUFFER11
        public const GLuint GL_DRAW_BUFFER11 = 0x8830;
        #endregion GL_DRAW_BUFFER11

        #region GL_DRAW_BUFFER12
        public const GLuint GL_DRAW_BUFFER12 = 0x8831;
        #endregion GL_DRAW_BUFFER12

        #region GL_DRAW_BUFFER13
        public const GLuint GL_DRAW_BUFFER13 = 0x8832;
        #endregion GL_DRAW_BUFFER13

        #region GL_DRAW_BUFFER14
        public const GLuint GL_DRAW_BUFFER14 = 0x8833;
        #endregion GL_DRAW_BUFFER14

        #region GL_DRAW_BUFFER15
        public const GLuint GL_DRAW_BUFFER15 = 0x8834;
        #endregion GL_DRAW_BUFFER15

        #region GL_BLEND_EQUATION_ALPHA
        public const GLuint GL_BLEND_EQUATION_ALPHA = 0x883D;
        #endregion GL_BLEND_EQUATION_ALPHA

        #region GL_POINT_SPRITE
        public const GLuint GL_POINT_SPRITE = 0x8861;
        #endregion GL_POINT_SPRITE

        #region GL_COORD_REPLACE
        public const GLuint GL_COORD_REPLACE = 0x8862;
        #endregion GL_COORD_REPLACE

        #region GL_MAX_VERTEX_ATTRIBS
        public const GLuint GL_MAX_VERTEX_ATTRIBS = 0x8869;
        #endregion GL_MAX_VERTEX_ATTRIBS

        #region GL_VERTEX_ATTRIB_ARRAY_NORMALIZED
        public const GLuint GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = 0x886A;
        #endregion GL_VERTEX_ATTRIB_ARRAY_NORMALIZED

        #region GL_MAX_TEXTURE_COORDS
        public const GLuint GL_MAX_TEXTURE_COORDS = 0x8871;
        #endregion GL_MAX_TEXTURE_COORDS

        #region GL_MAX_TEXTURE_IMAGE_UNITS
        public const GLuint GL_MAX_TEXTURE_IMAGE_UNITS = 0x8872;
        #endregion GL_MAX_TEXTURE_IMAGE_UNITS

        #region GL_FRAGMENT_SHADER
        public const GLuint GL_FRAGMENT_SHADER = 0x8B30;
        #endregion GL_FRAGMENT_SHADER

        #region GL_VERTEX_SHADER
        public const GLuint GL_VERTEX_SHADER = 0x8B31;
        #endregion GL_VERTEX_SHADER

        #region GL_MAX_FRAGMENT_UNIFORM_COMPONENTS
        public const GLuint GL_MAX_FRAGMENT_UNIFORM_COMPONENTS = 0x8B49;
        #endregion GL_MAX_FRAGMENT_UNIFORM_COMPONENTS

        #region GL_MAX_VERTEX_UNIFORM_COMPONENTS
        public const GLuint GL_MAX_VERTEX_UNIFORM_COMPONENTS = 0x8B4A;
        #endregion GL_MAX_VERTEX_UNIFORM_COMPONENTS

        #region GL_MAX_VARYING_FLOATS
        public const GLuint GL_MAX_VARYING_FLOATS = 0x8B4B;
        #endregion GL_MAX_VARYING_FLOATS

        #region GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS
        public const GLuint GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x8B4C;
        #endregion GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS

        #region GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS
        public const GLuint GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D;
        #endregion GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS

        #region GL_SHADER_TYPE
        public const GLuint GL_SHADER_TYPE = 0x8B4F;
        #endregion GL_SHADER_TYPE

        #region GL_FLOAT_VEC2
        public const GLuint GL_FLOAT_VEC2 = 0x8B50;
        #endregion GL_FLOAT_VEC2

        #region GL_FLOAT_VEC3
        public const GLuint GL_FLOAT_VEC3 = 0x8B51;
        #endregion GL_FLOAT_VEC3

        #region GL_FLOAT_VEC4
        public const GLuint GL_FLOAT_VEC4 = 0x8B52;
        #endregion GL_FLOAT_VEC4

        #region GL_INT_VEC2
        public const GLuint GL_INT_VEC2 = 0x8B53;
        #endregion GL_INT_VEC2

        #region GL_INT_VEC3
        public const GLuint GL_INT_VEC3 = 0x8B54;
        #endregion GL_INT_VEC3

        #region GL_INT_VEC4
        public const GLuint GL_INT_VEC4 = 0x8B55;
        #endregion GL_INT_VEC4

        #region GL_BOOL
        public const GLuint GL_BOOL = 0x8B56;
        #endregion GL_BOOL

        #region GL_BOOL_VEC2
        public const GLuint GL_BOOL_VEC2 = 0x8B57;
        #endregion GL_BOOL_VEC2

        #region GL_BOOL_VEC3
        public const GLuint GL_BOOL_VEC3 = 0x8B58;
        #endregion GL_BOOL_VEC3

        #region GL_BOOL_VEC4
        public const GLuint GL_BOOL_VEC4 = 0x8B59;
        #endregion GL_BOOL_VEC4

        #region GL_FLOAT_MAT2
        public const GLuint GL_FLOAT_MAT2 = 0x8B5A;
        #endregion GL_FLOAT_MAT2

        #region GL_FLOAT_MAT3
        public const GLuint GL_FLOAT_MAT3 = 0x8B5B;
        #endregion GL_FLOAT_MAT3

        #region GL_FLOAT_MAT4
        public const GLuint GL_FLOAT_MAT4 = 0x8B5C;
        #endregion GL_FLOAT_MAT4

        #region GL_SAMPLER_1D
        public const GLuint GL_SAMPLER_1D = 0x8B5D;
        #endregion GL_SAMPLER_1D

        #region GL_SAMPLER_2D
        public const GLuint GL_SAMPLER_2D = 0x8B5E;
        #endregion GL_SAMPLER_2D

        #region GL_SAMPLER_3D
        public const GLuint GL_SAMPLER_3D = 0x8B5F;
        #endregion GL_SAMPLER_3D

        #region GL_SAMPLER_CUBE
        public const GLuint GL_SAMPLER_CUBE = 0x8B60;
        #endregion GL_SAMPLER_CUBE

        #region GL_SAMPLER_1D_SHADOW
        public const GLuint GL_SAMPLER_1D_SHADOW = 0x8B61;
        #endregion GL_SAMPLER_1D_SHADOW

        #region GL_SAMPLER_2D_SHADOW
        public const GLuint GL_SAMPLER_2D_SHADOW = 0x8B62;
        #endregion GL_SAMPLER_2D_SHADOW

        #region GL_DELETE_STATUS
        public const GLuint GL_DELETE_STATUS = 0x8B80;
        #endregion GL_DELETE_STATUS

        #region GL_COMPILE_STATUS
        public const GLuint GL_COMPILE_STATUS = 0x8B81;
        #endregion GL_COMPILE_STATUS

        #region GL_LINK_STATUS
        public const GLuint GL_LINK_STATUS = 0x8B82;
        #endregion GL_LINK_STATUS

        #region GL_VALIDATE_STATUS
        public const GLuint GL_VALIDATE_STATUS = 0x8B83;
        #endregion GL_VALIDATE_STATUS

        #region GL_INFO_LOG_LENGTH
        public const GLuint GL_INFO_LOG_LENGTH = 0x8B84;
        #endregion GL_INFO_LOG_LENGTH

        #region GL_ATTACHED_SHADERS
        public const GLuint GL_ATTACHED_SHADERS = 0x8B85;
        #endregion GL_ATTACHED_SHADERS

        #region GL_ACTIVE_UNIFORMS
        public const GLuint GL_ACTIVE_UNIFORMS = 0x8B86;
        #endregion GL_ACTIVE_UNIFORMS

        #region GL_ACTIVE_UNIFORM_MAX_LENGTH
        public const GLuint GL_ACTIVE_UNIFORM_MAX_LENGTH = 0x8B87;
        #endregion GL_ACTIVE_UNIFORM_MAX_LENGTH

        #region GL_SHADER_SOURCE_LENGTH
        public const GLuint GL_SHADER_SOURCE_LENGTH = 0x8B88;
        #endregion GL_SHADER_SOURCE_LENGTH

        #region GL_ACTIVE_ATTRIBUTES
        public const GLuint GL_ACTIVE_ATTRIBUTES = 0x8B89;
        #endregion GL_ACTIVE_ATTRIBUTES

        #region GL_ACTIVE_ATTRIBUTE_MAX_LENGTH
        public const GLuint GL_ACTIVE_ATTRIBUTE_MAX_LENGTH = 0x8B8A;
        #endregion GL_ACTIVE_ATTRIBUTE_MAX_LENGTH

        #region GL_FRAGMENT_SHADER_DERIVATIVE_HINT
        public const GLuint GL_FRAGMENT_SHADER_DERIVATIVE_HINT = 0x8B8B;
        #endregion GL_FRAGMENT_SHADER_DERIVATIVE_HINT

        #region GL_SHADING_LANGUAGE_VERSION
        public const GLuint GL_SHADING_LANGUAGE_VERSION = 0x8B8C;
        #endregion GL_SHADING_LANGUAGE_VERSION

        #region GL_CURRENT_PROGRAM
        public const GLuint GL_CURRENT_PROGRAM = 0x8B8D;
        #endregion GL_CURRENT_PROGRAM

        #region GL_POINT_SPRITE_COORD_ORIGIN
        public const GLuint GL_POINT_SPRITE_COORD_ORIGIN = 0x8CA0;
        #endregion GL_POINT_SPRITE_COORD_ORIGIN

        #region GL_LOWER_LEFT
        public const GLuint GL_LOWER_LEFT = 0x8CA1;
        #endregion GL_LOWER_LEFT

        #region GL_UPPER_LEFT
        public const GLuint GL_UPPER_LEFT = 0x8CA2;
        #endregion GL_UPPER_LEFT

        #region GL_STENCIL_BACK_REF
        public const GLuint GL_STENCIL_BACK_REF = 0x8CA3;
        #endregion GL_STENCIL_BACK_REF

        #region GL_STENCIL_BACK_VALUE_MASK
        public const GLuint GL_STENCIL_BACK_VALUE_MASK = 0x8CA4;
        #endregion GL_STENCIL_BACK_VALUE_MASK

        #region GL_STENCIL_BACK_WRITEMASK
        public const GLuint GL_STENCIL_BACK_WRITEMASK = 0x8CA5;
        #endregion GL_STENCIL_BACK_WRITEMASK

        #region GL_CURRENT_RASTER_SECONDARY_COLOR
        public const GLuint GL_CURRENT_RASTER_SECONDARY_COLOR = 0x845F;
        #endregion GL_CURRENT_RASTER_SECONDARY_COLOR

        #region GL_PIXEL_PACK_BUFFER
        public const GLuint GL_PIXEL_PACK_BUFFER = 0x88EB;
        #endregion GL_PIXEL_PACK_BUFFER

        #region GL_PIXEL_UNPACK_BUFFER
        public const GLuint GL_PIXEL_UNPACK_BUFFER = 0x88EC;
        #endregion GL_PIXEL_UNPACK_BUFFER

        #region GL_PIXEL_PACK_BUFFER_BINDING
        public const GLuint GL_PIXEL_PACK_BUFFER_BINDING = 0x88ED;
        #endregion GL_PIXEL_PACK_BUFFER_BINDING

        #region GL_PIXEL_UNPACK_BUFFER_BINDING
        public const GLuint GL_PIXEL_UNPACK_BUFFER_BINDING = 0x88EF;
        #endregion GL_PIXEL_UNPACK_BUFFER_BINDING

        #region GL_FLOAT_MAT2x3
        public const GLuint GL_FLOAT_MAT2x3 = 0x8B65;
        #endregion GL_FLOAT_MAT2x3

        #region GL_FLOAT_MAT2x4
        public const GLuint GL_FLOAT_MAT2x4 = 0x8B66;
        #endregion GL_FLOAT_MAT2x4

        #region GL_FLOAT_MAT3x2
        public const GLuint GL_FLOAT_MAT3x2 = 0x8B67;
        #endregion GL_FLOAT_MAT3x2

        #region GL_FLOAT_MAT3x4
        public const GLuint GL_FLOAT_MAT3x4 = 0x8B68;
        #endregion GL_FLOAT_MAT3x4

        #region GL_FLOAT_MAT4x2
        public const GLuint GL_FLOAT_MAT4x2 = 0x8B69;
        #endregion GL_FLOAT_MAT4x2

        #region GL_FLOAT_MAT4x3
        public const GLuint GL_FLOAT_MAT4x3 = 0x8B6A;
        #endregion GL_FLOAT_MAT4x3

        #region GL_SRGB
        public const GLuint GL_SRGB = 0x8C40;
        #endregion GL_SRGB

        #region GL_SRGB8
        public const GLuint GL_SRGB8 = 0x8C41;
        #endregion GL_SRGB8

        #region GL_SRGB_ALPHA
        public const GLuint GL_SRGB_ALPHA = 0x8C42;
        #endregion GL_SRGB_ALPHA

        #region GL_SRGB8_ALPHA8
        public const GLuint GL_SRGB8_ALPHA8 = 0x8C43;
        #endregion GL_SRGB8_ALPHA8

        #region GL_SLUMINANCE_ALPHA
        public const GLuint GL_SLUMINANCE_ALPHA = 0x8C44;
        #endregion GL_SLUMINANCE_ALPHA

        #region GL_SLUMINANCE8_ALPHA8
        public const GLuint GL_SLUMINANCE8_ALPHA8 = 0x8C45;
        #endregion GL_SLUMINANCE8_ALPHA8

        #region GL_SLUMINANCE
        public const GLuint GL_SLUMINANCE = 0x8C46;
        #endregion GL_SLUMINANCE

        #region GL_SLUMINANCE8
        public const GLuint GL_SLUMINANCE8 = 0x8C47;
        #endregion GL_SLUMINANCE8

        #region GL_COMPRESSED_SRGB
        public const GLuint GL_COMPRESSED_SRGB = 0x8C48;
        #endregion GL_COMPRESSED_SRGB

        #region GL_COMPRESSED_SRGB_ALPHA
        public const GLuint GL_COMPRESSED_SRGB_ALPHA = 0x8C49;
        #endregion GL_COMPRESSED_SRGB_ALPHA

        #region GL_COMPRESSED_SLUMINANCE
        public const GLuint GL_COMPRESSED_SLUMINANCE = 0x8C4A;
        #endregion GL_COMPRESSED_SLUMINANCE

        #region GL_COMPRESSED_SLUMINANCE_ALPHA
        public const GLuint GL_COMPRESSED_SLUMINANCE_ALPHA = 0x8C4B;
        #endregion GL_COMPRESSED_SLUMINANCE_ALPHA

        #region GL_TEXTURE0_ARB
        public const GLuint GL_TEXTURE0_ARB = 0x84C0;
        #endregion GL_TEXTURE0_ARB

        #region GL_TEXTURE1_ARB
        public const GLuint GL_TEXTURE1_ARB = 0x84C1;
        #endregion GL_TEXTURE1_ARB

        #region GL_TEXTURE2_ARB
        public const GLuint GL_TEXTURE2_ARB = 0x84C2;
        #endregion GL_TEXTURE2_ARB

        #region GL_TEXTURE3_ARB
        public const GLuint GL_TEXTURE3_ARB = 0x84C3;
        #endregion GL_TEXTURE3_ARB

        #region GL_TEXTURE4_ARB
        public const GLuint GL_TEXTURE4_ARB = 0x84C4;
        #endregion GL_TEXTURE4_ARB

        #region GL_TEXTURE5_ARB
        public const GLuint GL_TEXTURE5_ARB = 0x84C5;
        #endregion GL_TEXTURE5_ARB

        #region GL_TEXTURE6_ARB
        public const GLuint GL_TEXTURE6_ARB = 0x84C6;
        #endregion GL_TEXTURE6_ARB

        #region GL_TEXTURE7_ARB
        public const GLuint GL_TEXTURE7_ARB = 0x84C7;
        #endregion GL_TEXTURE7_ARB

        #region GL_TEXTURE8_ARB
        public const GLuint GL_TEXTURE8_ARB = 0x84C8;
        #endregion GL_TEXTURE8_ARB

        #region GL_TEXTURE9_ARB
        public const GLuint GL_TEXTURE9_ARB = 0x84C9;
        #endregion GL_TEXTURE9_ARB

        #region GL_TEXTURE10_ARB
        public const GLuint GL_TEXTURE10_ARB = 0x84CA;
        #endregion GL_TEXTURE10_ARB

        #region GL_TEXTURE11_ARB
        public const GLuint GL_TEXTURE11_ARB = 0x84CB;
        #endregion GL_TEXTURE11_ARB

        #region GL_TEXTURE12_ARB
        public const GLuint GL_TEXTURE12_ARB = 0x84CC;
        #endregion GL_TEXTURE12_ARB

        #region GL_TEXTURE13_ARB
        public const GLuint GL_TEXTURE13_ARB = 0x84CD;
        #endregion GL_TEXTURE13_ARB

        #region GL_TEXTURE14_ARB
        public const GLuint GL_TEXTURE14_ARB = 0x84CE;
        #endregion GL_TEXTURE14_ARB

        #region GL_TEXTURE15_ARB
        public const GLuint GL_TEXTURE15_ARB = 0x84CF;
        #endregion GL_TEXTURE15_ARB

        #region GL_TEXTURE16_ARB
        public const GLuint GL_TEXTURE16_ARB = 0x84D0;
        #endregion GL_TEXTURE16_ARB

        #region GL_TEXTURE17_ARB
        public const GLuint GL_TEXTURE17_ARB = 0x84D1;
        #endregion GL_TEXTURE17_ARB

        #region GL_TEXTURE18_ARB
        public const GLuint GL_TEXTURE18_ARB = 0x84D2;
        #endregion GL_TEXTURE18_ARB

        #region GL_TEXTURE19_ARB
        public const GLuint GL_TEXTURE19_ARB = 0x84D3;
        #endregion GL_TEXTURE19_ARB

        #region GL_TEXTURE20_ARB
        public const GLuint GL_TEXTURE20_ARB = 0x84D4;
        #endregion GL_TEXTURE20_ARB

        #region GL_TEXTURE21_ARB
        public const GLuint GL_TEXTURE21_ARB = 0x84D5;
        #endregion GL_TEXTURE21_ARB

        #region GL_TEXTURE22_ARB
        public const GLuint GL_TEXTURE22_ARB = 0x84D6;
        #endregion GL_TEXTURE22_ARB

        #region GL_TEXTURE23_ARB
        public const GLuint GL_TEXTURE23_ARB = 0x84D7;
        #endregion GL_TEXTURE23_ARB

        #region GL_TEXTURE24_ARB
        public const GLuint GL_TEXTURE24_ARB = 0x84D8;
        #endregion GL_TEXTURE24_ARB

        #region GL_TEXTURE25_ARB
        public const GLuint GL_TEXTURE25_ARB = 0x84D9;
        #endregion GL_TEXTURE25_ARB

        #region GL_TEXTURE26_ARB
        public const GLuint GL_TEXTURE26_ARB = 0x84DA;
        #endregion GL_TEXTURE26_ARB

        #region GL_TEXTURE27_ARB
        public const GLuint GL_TEXTURE27_ARB = 0x84DB;
        #endregion GL_TEXTURE27_ARB

        #region GL_TEXTURE28_ARB
        public const GLuint GL_TEXTURE28_ARB = 0x84DC;
        #endregion GL_TEXTURE28_ARB

        #region GL_TEXTURE29_ARB
        public const GLuint GL_TEXTURE29_ARB = 0x84DD;
        #endregion GL_TEXTURE29_ARB

        #region GL_TEXTURE30_ARB
        public const GLuint GL_TEXTURE30_ARB = 0x84DE;
        #endregion GL_TEXTURE30_ARB

        #region GL_TEXTURE31_ARB
        public const GLuint GL_TEXTURE31_ARB = 0x84DF;
        #endregion GL_TEXTURE31_ARB

        #region GL_ACTIVE_TEXTURE_ARB
        public const GLuint GL_ACTIVE_TEXTURE_ARB = 0x84E0;
        #endregion GL_ACTIVE_TEXTURE_ARB

        #region GL_CLIENT_ACTIVE_TEXTURE_ARB
        public const GLuint GL_CLIENT_ACTIVE_TEXTURE_ARB = 0x84E1;
        #endregion GL_CLIENT_ACTIVE_TEXTURE_ARB

        #region GL_MAX_TEXTURE_UNITS_ARB
        public const GLuint GL_MAX_TEXTURE_UNITS_ARB = 0x84E2;
        #endregion GL_MAX_TEXTURE_UNITS_ARB

        #region GL_TRANSPOSE_MODELVIEW_MATRIX_ARB
        public const GLuint GL_TRANSPOSE_MODELVIEW_MATRIX_ARB = 0x84E3;
        #endregion GL_TRANSPOSE_MODELVIEW_MATRIX_ARB

        #region GL_TRANSPOSE_PROJECTION_MATRIX_ARB
        public const GLuint GL_TRANSPOSE_PROJECTION_MATRIX_ARB = 0x84E4;
        #endregion GL_TRANSPOSE_PROJECTION_MATRIX_ARB

        #region GL_TRANSPOSE_TEXTURE_MATRIX_ARB
        public const GLuint GL_TRANSPOSE_TEXTURE_MATRIX_ARB = 0x84E5;
        #endregion GL_TRANSPOSE_TEXTURE_MATRIX_ARB

        #region GL_TRANSPOSE_COLOR_MATRIX_ARB
        public const GLuint GL_TRANSPOSE_COLOR_MATRIX_ARB = 0x84E6;
        #endregion GL_TRANSPOSE_COLOR_MATRIX_ARB

        #region GL_MULTISAMPLE_BIT_ARB
        public const GLuint GL_MULTISAMPLE_BIT_ARB = 0x20000000;
        #endregion GL_MULTISAMPLE_BIT_ARB

        #region GL_NORMAL_MAP_ARB
        public const GLuint GL_NORMAL_MAP_ARB = 0x8511;
        #endregion GL_NORMAL_MAP_ARB

        #region GL_REFLECTION_MAP_ARB
        public const GLuint GL_REFLECTION_MAP_ARB = 0x8512;
        #endregion GL_REFLECTION_MAP_ARB

        #region GL_TEXTURE_CUBE_MAP_ARB
        public const GLuint GL_TEXTURE_CUBE_MAP_ARB = 0x8513;
        #endregion GL_TEXTURE_CUBE_MAP_ARB

        #region GL_TEXTURE_BINDING_CUBE_MAP_ARB
        public const GLuint GL_TEXTURE_BINDING_CUBE_MAP_ARB = 0x8514;
        #endregion GL_TEXTURE_BINDING_CUBE_MAP_ARB

        #region GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB
        public const GLuint GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB = 0x8515;
        #endregion GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB

        #region GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB
        public const GLuint GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB = 0x8516;
        #endregion GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB

        #region GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB
        public const GLuint GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB = 0x8517;
        #endregion GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB

        #region GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB
        public const GLuint GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB = 0x8518;
        #endregion GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB

        #region GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB
        public const GLuint GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB = 0x8519;
        #endregion GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB

        #region GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB
        public const GLuint GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB = 0x851A;
        #endregion GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB

        #region GL_PROXY_TEXTURE_CUBE_MAP_ARB
        public const GLuint GL_PROXY_TEXTURE_CUBE_MAP_ARB = 0x851B;
        #endregion GL_PROXY_TEXTURE_CUBE_MAP_ARB

        #region GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB
        public const GLuint GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB = 0x851C;
        #endregion GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB

        #region GL_COMPRESSED_ALPHA_ARB
        public const GLuint GL_COMPRESSED_ALPHA_ARB = 0x84E9;
        #endregion GL_COMPRESSED_ALPHA_ARB

        #region GL_COMPRESSED_LUMINANCE_ARB
        public const GLuint GL_COMPRESSED_LUMINANCE_ARB = 0x84EA;
        #endregion GL_COMPRESSED_LUMINANCE_ARB

        #region GL_COMPRESSED_LUMINANCE_ALPHA_ARB
        public const GLuint GL_COMPRESSED_LUMINANCE_ALPHA_ARB = 0x84EB;
        #endregion GL_COMPRESSED_LUMINANCE_ALPHA_ARB

        #region GL_COMPRESSED_INTENSITY_ARB
        public const GLuint GL_COMPRESSED_INTENSITY_ARB = 0x84EC;
        #endregion GL_COMPRESSED_INTENSITY_ARB

        #region GL_COMPRESSED_RGB_ARB
        public const GLuint GL_COMPRESSED_RGB_ARB = 0x84ED;
        #endregion GL_COMPRESSED_RGB_ARB

        #region GL_COMPRESSED_RGBA_ARB
        public const GLuint GL_COMPRESSED_RGBA_ARB = 0x84EE;
        #endregion GL_COMPRESSED_RGBA_ARB

        #region GL_TEXTURE_COMPRESSION_HINT_ARB
        public const GLuint GL_TEXTURE_COMPRESSION_HINT_ARB = 0x84EF;
        #endregion GL_TEXTURE_COMPRESSION_HINT_ARB

        #region GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB
        public const GLuint GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB = 0x86A0;
        #endregion GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB

        #region GL_TEXTURE_COMPRESSED_ARB
        public const GLuint GL_TEXTURE_COMPRESSED_ARB = 0x86A1;
        #endregion GL_TEXTURE_COMPRESSED_ARB

        #region GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB
        public const GLuint GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB = 0x86A2;
        #endregion GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB

        #region GL_COMPRESSED_TEXTURE_FORMATS_ARB
        public const GLuint GL_COMPRESSED_TEXTURE_FORMATS_ARB = 0x86A3;
        #endregion GL_COMPRESSED_TEXTURE_FORMATS_ARB

        #region GL_MAX_VERTEX_UNITS_ARB
        public const GLuint GL_MAX_VERTEX_UNITS_ARB = 0x86A4;
        #endregion GL_MAX_VERTEX_UNITS_ARB

        #region GL_ACTIVE_VERTEX_UNITS_ARB
        public const GLuint GL_ACTIVE_VERTEX_UNITS_ARB = 0x86A5;
        #endregion GL_ACTIVE_VERTEX_UNITS_ARB

        #region GL_WEIGHT_SUM_UNITY_ARB
        public const GLuint GL_WEIGHT_SUM_UNITY_ARB = 0x86A6;
        #endregion GL_WEIGHT_SUM_UNITY_ARB

        #region GL_VERTEX_BLEND_ARB
        public const GLuint GL_VERTEX_BLEND_ARB = 0x86A7;
        #endregion GL_VERTEX_BLEND_ARB

        #region GL_CURRENT_WEIGHT_ARB
        public const GLuint GL_CURRENT_WEIGHT_ARB = 0x86A8;
        #endregion GL_CURRENT_WEIGHT_ARB

        #region GL_WEIGHT_ARRAY_TYPE_ARB
        public const GLuint GL_WEIGHT_ARRAY_TYPE_ARB = 0x86A9;
        #endregion GL_WEIGHT_ARRAY_TYPE_ARB

        #region GL_WEIGHT_ARRAY_STRIDE_ARB
        public const GLuint GL_WEIGHT_ARRAY_STRIDE_ARB = 0x86AA;
        #endregion GL_WEIGHT_ARRAY_STRIDE_ARB

        #region GL_WEIGHT_ARRAY_SIZE_ARB
        public const GLuint GL_WEIGHT_ARRAY_SIZE_ARB = 0x86AB;
        #endregion GL_WEIGHT_ARRAY_SIZE_ARB

        #region GL_WEIGHT_ARRAY_POINTER_ARB
        public const GLuint GL_WEIGHT_ARRAY_POINTER_ARB = 0x86AC;
        #endregion GL_WEIGHT_ARRAY_POINTER_ARB

        #region GL_WEIGHT_ARRAY_ARB
        public const GLuint GL_WEIGHT_ARRAY_ARB = 0x86AD;
        #endregion GL_WEIGHT_ARRAY_ARB

        #region GL_MODELVIEW0_ARB
        public const GLuint GL_MODELVIEW0_ARB = 0x1700;
        #endregion GL_MODELVIEW0_ARB

        #region GL_MODELVIEW1_ARB
        public const GLuint GL_MODELVIEW1_ARB = 0x850A;
        #endregion GL_MODELVIEW1_ARB

        #region GL_MODELVIEW2_ARB
        public const GLuint GL_MODELVIEW2_ARB = 0x8722;
        #endregion GL_MODELVIEW2_ARB

        #region GL_MODELVIEW3_ARB
        public const GLuint GL_MODELVIEW3_ARB = 0x8723;
        #endregion GL_MODELVIEW3_ARB

        #region GL_MODELVIEW4_ARB
        public const GLuint GL_MODELVIEW4_ARB = 0x8724;
        #endregion GL_MODELVIEW4_ARB

        #region GL_MODELVIEW5_ARB
        public const GLuint GL_MODELVIEW5_ARB = 0x8725;
        #endregion GL_MODELVIEW5_ARB

        #region GL_MODELVIEW6_ARB
        public const GLuint GL_MODELVIEW6_ARB = 0x8726;
        #endregion GL_MODELVIEW6_ARB

        #region GL_MODELVIEW7_ARB
        public const GLuint GL_MODELVIEW7_ARB = 0x8727;
        #endregion GL_MODELVIEW7_ARB

        #region GL_MODELVIEW8_ARB
        public const GLuint GL_MODELVIEW8_ARB = 0x8728;
        #endregion GL_MODELVIEW8_ARB

        #region GL_MODELVIEW9_ARB
        public const GLuint GL_MODELVIEW9_ARB = 0x8729;
        #endregion GL_MODELVIEW9_ARB

        #region GL_MODELVIEW10_ARB
        public const GLuint GL_MODELVIEW10_ARB = 0x872A;
        #endregion GL_MODELVIEW10_ARB

        #region GL_MODELVIEW11_ARB
        public const GLuint GL_MODELVIEW11_ARB = 0x872B;
        #endregion GL_MODELVIEW11_ARB

        #region GL_MODELVIEW12_ARB
        public const GLuint GL_MODELVIEW12_ARB = 0x872C;
        #endregion GL_MODELVIEW12_ARB

        #region GL_MODELVIEW13_ARB
        public const GLuint GL_MODELVIEW13_ARB = 0x872D;
        #endregion GL_MODELVIEW13_ARB

        #region GL_MODELVIEW14_ARB
        public const GLuint GL_MODELVIEW14_ARB = 0x872E;
        #endregion GL_MODELVIEW14_ARB

        #region GL_MODELVIEW15_ARB
        public const GLuint GL_MODELVIEW15_ARB = 0x872F;
        #endregion GL_MODELVIEW15_ARB

        #region GL_MODELVIEW16_ARB
        public const GLuint GL_MODELVIEW16_ARB = 0x8730;
        #endregion GL_MODELVIEW16_ARB

        #region GL_MODELVIEW17_ARB
        public const GLuint GL_MODELVIEW17_ARB = 0x8731;
        #endregion GL_MODELVIEW17_ARB

        #region GL_MODELVIEW18_ARB
        public const GLuint GL_MODELVIEW18_ARB = 0x8732;
        #endregion GL_MODELVIEW18_ARB

        #region GL_MODELVIEW19_ARB
        public const GLuint GL_MODELVIEW19_ARB = 0x8733;
        #endregion GL_MODELVIEW19_ARB

        #region GL_MODELVIEW20_ARB
        public const GLuint GL_MODELVIEW20_ARB = 0x8734;
        #endregion GL_MODELVIEW20_ARB

        #region GL_MODELVIEW21_ARB
        public const GLuint GL_MODELVIEW21_ARB = 0x8735;
        #endregion GL_MODELVIEW21_ARB

        #region GL_MODELVIEW22_ARB
        public const GLuint GL_MODELVIEW22_ARB = 0x8736;
        #endregion GL_MODELVIEW22_ARB

        #region GL_MODELVIEW23_ARB
        public const GLuint GL_MODELVIEW23_ARB = 0x8737;
        #endregion GL_MODELVIEW23_ARB

        #region GL_MODELVIEW24_ARB
        public const GLuint GL_MODELVIEW24_ARB = 0x8738;
        #endregion GL_MODELVIEW24_ARB

        #region GL_MODELVIEW25_ARB
        public const GLuint GL_MODELVIEW25_ARB = 0x8739;
        #endregion GL_MODELVIEW25_ARB

        #region GL_MODELVIEW26_ARB
        public const GLuint GL_MODELVIEW26_ARB = 0x873A;
        #endregion GL_MODELVIEW26_ARB

        #region GL_MODELVIEW27_ARB
        public const GLuint GL_MODELVIEW27_ARB = 0x873B;
        #endregion GL_MODELVIEW27_ARB

        #region GL_MODELVIEW28_ARB
        public const GLuint GL_MODELVIEW28_ARB = 0x873C;
        #endregion GL_MODELVIEW28_ARB

        #region GL_MODELVIEW29_ARB
        public const GLuint GL_MODELVIEW29_ARB = 0x873D;
        #endregion GL_MODELVIEW29_ARB

        #region GL_MODELVIEW30_ARB
        public const GLuint GL_MODELVIEW30_ARB = 0x873E;
        #endregion GL_MODELVIEW30_ARB

        #region GL_MODELVIEW31_ARB
        public const GLuint GL_MODELVIEW31_ARB = 0x873F;
        #endregion GL_MODELVIEW31_ARB

        #region GL_MATRIX_PALETTE_ARB
        public const GLuint GL_MATRIX_PALETTE_ARB = 0x8840;
        #endregion GL_MATRIX_PALETTE_ARB

        #region GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB
        public const GLuint GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB = 0x8841;
        #endregion GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB

        #region GL_MAX_PALETTE_MATRICES_ARB
        public const GLuint GL_MAX_PALETTE_MATRICES_ARB = 0x8842;
        #endregion GL_MAX_PALETTE_MATRICES_ARB

        #region GL_CURRENT_PALETTE_MATRIX_ARB
        public const GLuint GL_CURRENT_PALETTE_MATRIX_ARB = 0x8843;
        #endregion GL_CURRENT_PALETTE_MATRIX_ARB

        #region GL_MATRIX_INDEX_ARRAY_ARB
        public const GLuint GL_MATRIX_INDEX_ARRAY_ARB = 0x8844;
        #endregion GL_MATRIX_INDEX_ARRAY_ARB

        #region GL_CURRENT_MATRIX_INDEX_ARB
        public const GLuint GL_CURRENT_MATRIX_INDEX_ARB = 0x8845;
        #endregion GL_CURRENT_MATRIX_INDEX_ARB

        #region GL_MATRIX_INDEX_ARRAY_SIZE_ARB
        public const GLuint GL_MATRIX_INDEX_ARRAY_SIZE_ARB = 0x8846;
        #endregion GL_MATRIX_INDEX_ARRAY_SIZE_ARB

        #region GL_MATRIX_INDEX_ARRAY_TYPE_ARB
        public const GLuint GL_MATRIX_INDEX_ARRAY_TYPE_ARB = 0x8847;
        #endregion GL_MATRIX_INDEX_ARRAY_TYPE_ARB

        #region GL_MATRIX_INDEX_ARRAY_STRIDE_ARB
        public const GLuint GL_MATRIX_INDEX_ARRAY_STRIDE_ARB = 0x8848;
        #endregion GL_MATRIX_INDEX_ARRAY_STRIDE_ARB

        #region GL_MATRIX_INDEX_ARRAY_POINTER_ARB
        public const GLuint GL_MATRIX_INDEX_ARRAY_POINTER_ARB = 0x8849;
        #endregion GL_MATRIX_INDEX_ARRAY_POINTER_ARB

        #region GL_COMBINE_ARB
        public const GLuint GL_COMBINE_ARB = 0x8570;
        #endregion GL_COMBINE_ARB

        #region GL_COMBINE_RGB_ARB
        public const GLuint GL_COMBINE_RGB_ARB = 0x8571;
        #endregion GL_COMBINE_RGB_ARB

        #region GL_COMBINE_ALPHA_ARB
        public const GLuint GL_COMBINE_ALPHA_ARB = 0x8572;
        #endregion GL_COMBINE_ALPHA_ARB

        #region GL_SOURCE0_RGB_ARB
        public const GLuint GL_SOURCE0_RGB_ARB = 0x8580;
        #endregion GL_SOURCE0_RGB_ARB

        #region GL_SOURCE1_RGB_ARB
        public const GLuint GL_SOURCE1_RGB_ARB = 0x8581;
        #endregion GL_SOURCE1_RGB_ARB

        #region GL_SOURCE2_RGB_ARB
        public const GLuint GL_SOURCE2_RGB_ARB = 0x8582;
        #endregion GL_SOURCE2_RGB_ARB

        #region GL_SOURCE0_ALPHA_ARB
        public const GLuint GL_SOURCE0_ALPHA_ARB = 0x8588;
        #endregion GL_SOURCE0_ALPHA_ARB

        #region GL_SOURCE1_ALPHA_ARB
        public const GLuint GL_SOURCE1_ALPHA_ARB = 0x8589;
        #endregion GL_SOURCE1_ALPHA_ARB

        #region GL_SOURCE2_ALPHA_ARB
        public const GLuint GL_SOURCE2_ALPHA_ARB = 0x858A;
        #endregion GL_SOURCE2_ALPHA_ARB

        #region GL_OPERAND0_RGB_ARB
        public const GLuint GL_OPERAND0_RGB_ARB = 0x8590;
        #endregion GL_OPERAND0_RGB_ARB

        #region GL_OPERAND1_RGB_ARB
        public const GLuint GL_OPERAND1_RGB_ARB = 0x8591;
        #endregion GL_OPERAND1_RGB_ARB

        #region GL_OPERAND2_RGB_ARB
        public const GLuint GL_OPERAND2_RGB_ARB = 0x8592;
        #endregion GL_OPERAND2_RGB_ARB

        #region GL_OPERAND0_ALPHA_ARB
        public const GLuint GL_OPERAND0_ALPHA_ARB = 0x8598;
        #endregion GL_OPERAND0_ALPHA_ARB

        #region GL_OPERAND1_ALPHA_ARB
        public const GLuint GL_OPERAND1_ALPHA_ARB = 0x8599;
        #endregion GL_OPERAND1_ALPHA_ARB

        #region GL_OPERAND2_ALPHA_ARB
        public const GLuint GL_OPERAND2_ALPHA_ARB = 0x859A;
        #endregion GL_OPERAND2_ALPHA_ARB

        #region GL_RGB_SCALE_ARB
        public const GLuint GL_RGB_SCALE_ARB = 0x8573;
        #endregion GL_RGB_SCALE_ARB

        #region GL_ADD_SIGNED_ARB
        public const GLuint GL_ADD_SIGNED_ARB = 0x8574;
        #endregion GL_ADD_SIGNED_ARB

        #region GL_INTERPOLATE_ARB
        public const GLuint GL_INTERPOLATE_ARB = 0x8575;
        #endregion GL_INTERPOLATE_ARB

        #region GL_SUBTRACT_ARB
        public const GLuint GL_SUBTRACT_ARB = 0x84E7;
        #endregion GL_SUBTRACT_ARB

        #region GL_CONSTANT_ARB
        public const GLuint GL_CONSTANT_ARB = 0x8576;
        #endregion GL_CONSTANT_ARB

        #region GL_PRIMARY_COLOR_ARB
        public const GLuint GL_PRIMARY_COLOR_ARB = 0x8577;
        #endregion GL_PRIMARY_COLOR_ARB

        #region GL_PREVIOUS_ARB
        public const GLuint GL_PREVIOUS_ARB = 0x8578;
        #endregion GL_PREVIOUS_ARB

        #region GL_DOT3_RGB_ARB
        public const GLuint GL_DOT3_RGB_ARB = 0x86AE;
        #endregion GL_DOT3_RGB_ARB

        #region GL_DOT3_RGBA_ARB
        public const GLuint GL_DOT3_RGBA_ARB = 0x86AF;
        #endregion GL_DOT3_RGBA_ARB

        #region GL_MIRRORED_REPEAT_ARB
        public const GLuint GL_MIRRORED_REPEAT_ARB = 0x8370;
        #endregion GL_MIRRORED_REPEAT_ARB

        #region GL_DEPTH_COMPONENT16_ARB
        public const GLuint GL_DEPTH_COMPONENT16_ARB = 0x81A5;
        #endregion GL_DEPTH_COMPONENT16_ARB

        #region GL_DEPTH_COMPONENT24_ARB
        public const GLuint GL_DEPTH_COMPONENT24_ARB = 0x81A6;
        #endregion GL_DEPTH_COMPONENT24_ARB

        #region GL_DEPTH_COMPONENT32_ARB
        public const GLuint GL_DEPTH_COMPONENT32_ARB = 0x81A7;
        #endregion GL_DEPTH_COMPONENT32_ARB

        #region GL_TEXTURE_DEPTH_SIZE_ARB
        public const GLuint GL_TEXTURE_DEPTH_SIZE_ARB = 0x884A;
        #endregion GL_TEXTURE_DEPTH_SIZE_ARB

        #region GL_DEPTH_TEXTURE_MODE_ARB
        public const GLuint GL_DEPTH_TEXTURE_MODE_ARB = 0x884B;
        #endregion GL_DEPTH_TEXTURE_MODE_ARB

        #region GL_TEXTURE_COMPARE_MODE_ARB
        public const GLuint GL_TEXTURE_COMPARE_MODE_ARB = 0x884C;
        #endregion GL_TEXTURE_COMPARE_MODE_ARB

        #region GL_TEXTURE_COMPARE_FUNC_ARB
        public const GLuint GL_TEXTURE_COMPARE_FUNC_ARB = 0x884D;
        #endregion GL_TEXTURE_COMPARE_FUNC_ARB

        #region GL_COMPARE_R_TO_TEXTURE_ARB
        public const GLuint GL_COMPARE_R_TO_TEXTURE_ARB = 0x884E;
        #endregion GL_COMPARE_R_TO_TEXTURE_ARB

        #region GL_TEXTURE_COMPARE_FAIL_VALUE_ARB
        public const GLuint GL_TEXTURE_COMPARE_FAIL_VALUE_ARB = 0x80BF;
        #endregion GL_TEXTURE_COMPARE_FAIL_VALUE_ARB

        #region GL_COLOR_SUM_ARB
        public const GLuint GL_COLOR_SUM_ARB = 0x8458;
        #endregion GL_COLOR_SUM_ARB

        #region GL_VERTEX_PROGRAM_ARB
        public const GLuint GL_VERTEX_PROGRAM_ARB = 0x8620;
        #endregion GL_VERTEX_PROGRAM_ARB

        #region GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB
        public const GLuint GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB = 0x8622;
        #endregion GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB

        #region GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB
        public const GLuint GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB = 0x8623;
        #endregion GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB

        #region GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB
        public const GLuint GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB = 0x8624;
        #endregion GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB

        #region GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB
        public const GLuint GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB = 0x8625;
        #endregion GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB

        #region GL_CURRENT_VERTEX_ATTRIB_ARB
        public const GLuint GL_CURRENT_VERTEX_ATTRIB_ARB = 0x8626;
        #endregion GL_CURRENT_VERTEX_ATTRIB_ARB

        #region GL_PROGRAM_LENGTH_ARB
        public const GLuint GL_PROGRAM_LENGTH_ARB = 0x8627;
        #endregion GL_PROGRAM_LENGTH_ARB

        #region GL_PROGRAM_STRING_ARB
        public const GLuint GL_PROGRAM_STRING_ARB = 0x8628;
        #endregion GL_PROGRAM_STRING_ARB

        #region GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB
        public const GLuint GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB = 0x862E;
        #endregion GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB

        #region GL_MAX_PROGRAM_MATRICES_ARB
        public const GLuint GL_MAX_PROGRAM_MATRICES_ARB = 0x862F;
        #endregion GL_MAX_PROGRAM_MATRICES_ARB

        #region GL_CURRENT_MATRIX_STACK_DEPTH_ARB
        public const GLuint GL_CURRENT_MATRIX_STACK_DEPTH_ARB = 0x8640;
        #endregion GL_CURRENT_MATRIX_STACK_DEPTH_ARB

        #region GL_CURRENT_MATRIX_ARB
        public const GLuint GL_CURRENT_MATRIX_ARB = 0x8641;
        #endregion GL_CURRENT_MATRIX_ARB

        #region GL_VERTEX_PROGRAM_POINT_SIZE_ARB
        public const GLuint GL_VERTEX_PROGRAM_POINT_SIZE_ARB = 0x8642;
        #endregion GL_VERTEX_PROGRAM_POINT_SIZE_ARB

        #region GL_VERTEX_PROGRAM_TWO_SIDE_ARB
        public const GLuint GL_VERTEX_PROGRAM_TWO_SIDE_ARB = 0x8643;
        #endregion GL_VERTEX_PROGRAM_TWO_SIDE_ARB

        #region GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB
        public const GLuint GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB = 0x8645;
        #endregion GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB

        #region GL_PROGRAM_ERROR_POSITION_ARB
        public const GLuint GL_PROGRAM_ERROR_POSITION_ARB = 0x864B;
        #endregion GL_PROGRAM_ERROR_POSITION_ARB

        #region GL_PROGRAM_BINDING_ARB
        public const GLuint GL_PROGRAM_BINDING_ARB = 0x8677;
        #endregion GL_PROGRAM_BINDING_ARB

        #region GL_MAX_VERTEX_ATTRIBS_ARB
        public const GLuint GL_MAX_VERTEX_ATTRIBS_ARB = 0x8869;
        #endregion GL_MAX_VERTEX_ATTRIBS_ARB

        #region GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB
        public const GLuint GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB = 0x886A;
        #endregion GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB

        #region GL_PROGRAM_ERROR_STRING_ARB
        public const GLuint GL_PROGRAM_ERROR_STRING_ARB = 0x8874;
        #endregion GL_PROGRAM_ERROR_STRING_ARB

        #region GL_PROGRAM_FORMAT_ASCII_ARB
        public const GLuint GL_PROGRAM_FORMAT_ASCII_ARB = 0x8875;
        #endregion GL_PROGRAM_FORMAT_ASCII_ARB

        #region GL_PROGRAM_FORMAT_ARB
        public const GLuint GL_PROGRAM_FORMAT_ARB = 0x8876;
        #endregion GL_PROGRAM_FORMAT_ARB

        #region GL_PROGRAM_INSTRUCTIONS_ARB
        public const GLuint GL_PROGRAM_INSTRUCTIONS_ARB = 0x88A0;
        #endregion GL_PROGRAM_INSTRUCTIONS_ARB

        #region GL_MAX_PROGRAM_INSTRUCTIONS_ARB
        public const GLuint GL_MAX_PROGRAM_INSTRUCTIONS_ARB = 0x88A1;
        #endregion GL_MAX_PROGRAM_INSTRUCTIONS_ARB

        #region GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB
        public const GLuint GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB = 0x88A2;
        #endregion GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB

        #region GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB
        public const GLuint GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB = 0x88A3;
        #endregion GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB

        #region GL_PROGRAM_TEMPORARIES_ARB
        public const GLuint GL_PROGRAM_TEMPORARIES_ARB = 0x88A4;
        #endregion GL_PROGRAM_TEMPORARIES_ARB

        #region GL_MAX_PROGRAM_TEMPORARIES_ARB
        public const GLuint GL_MAX_PROGRAM_TEMPORARIES_ARB = 0x88A5;
        #endregion GL_MAX_PROGRAM_TEMPORARIES_ARB

        #region GL_PROGRAM_NATIVE_TEMPORARIES_ARB
        public const GLuint GL_PROGRAM_NATIVE_TEMPORARIES_ARB = 0x88A6;
        #endregion GL_PROGRAM_NATIVE_TEMPORARIES_ARB

        #region GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB
        public const GLuint GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB = 0x88A7;
        #endregion GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB

        #region GL_PROGRAM_PARAMETERS_ARB
        public const GLuint GL_PROGRAM_PARAMETERS_ARB = 0x88A8;
        #endregion GL_PROGRAM_PARAMETERS_ARB

        #region GL_MAX_PROGRAM_PARAMETERS_ARB
        public const GLuint GL_MAX_PROGRAM_PARAMETERS_ARB = 0x88A9;
        #endregion GL_MAX_PROGRAM_PARAMETERS_ARB

        #region GL_PROGRAM_NATIVE_PARAMETERS_ARB
        public const GLuint GL_PROGRAM_NATIVE_PARAMETERS_ARB = 0x88AA;
        #endregion GL_PROGRAM_NATIVE_PARAMETERS_ARB

        #region GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB
        public const GLuint GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB = 0x88AB;
        #endregion GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB

        #region GL_PROGRAM_ATTRIBS_ARB
        public const GLuint GL_PROGRAM_ATTRIBS_ARB = 0x88AC;
        #endregion GL_PROGRAM_ATTRIBS_ARB

        #region GL_MAX_PROGRAM_ATTRIBS_ARB
        public const GLuint GL_MAX_PROGRAM_ATTRIBS_ARB = 0x88AD;
        #endregion GL_MAX_PROGRAM_ATTRIBS_ARB

        #region GL_PROGRAM_NATIVE_ATTRIBS_ARB
        public const GLuint GL_PROGRAM_NATIVE_ATTRIBS_ARB = 0x88AE;
        #endregion GL_PROGRAM_NATIVE_ATTRIBS_ARB

        #region GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB
        public const GLuint GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB = 0x88AF;
        #endregion GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB

        #region GL_PROGRAM_ADDRESS_REGISTERS_ARB
        public const GLuint GL_PROGRAM_ADDRESS_REGISTERS_ARB = 0x88B0;
        #endregion GL_PROGRAM_ADDRESS_REGISTERS_ARB

        #region GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB
        public const GLuint GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB = 0x88B1;
        #endregion GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB

        #region GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB
        public const GLuint GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = 0x88B2;
        #endregion GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB

        #region GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB
        public const GLuint GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = 0x88B3;
        #endregion GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB

        #region GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB
        public const GLuint GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB = 0x88B4;
        #endregion GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB

        #region GL_MAX_PROGRAM_ENV_PARAMETERS_ARB
        public const GLuint GL_MAX_PROGRAM_ENV_PARAMETERS_ARB = 0x88B5;
        #endregion GL_MAX_PROGRAM_ENV_PARAMETERS_ARB

        #region GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB
        public const GLuint GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB = 0x88B6;
        #endregion GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB

        #region GL_TRANSPOSE_CURRENT_MATRIX_ARB
        public const GLuint GL_TRANSPOSE_CURRENT_MATRIX_ARB = 0x88B7;
        #endregion GL_TRANSPOSE_CURRENT_MATRIX_ARB

        #region GL_MATRIX0_ARB
        public const GLuint GL_MATRIX0_ARB = 0x88C0;
        #endregion GL_MATRIX0_ARB

        #region GL_MATRIX1_ARB
        public const GLuint GL_MATRIX1_ARB = 0x88C1;
        #endregion GL_MATRIX1_ARB

        #region GL_MATRIX2_ARB
        public const GLuint GL_MATRIX2_ARB = 0x88C2;
        #endregion GL_MATRIX2_ARB

        #region GL_MATRIX3_ARB
        public const GLuint GL_MATRIX3_ARB = 0x88C3;
        #endregion GL_MATRIX3_ARB

        #region GL_MATRIX4_ARB
        public const GLuint GL_MATRIX4_ARB = 0x88C4;
        #endregion GL_MATRIX4_ARB

        #region GL_MATRIX5_ARB
        public const GLuint GL_MATRIX5_ARB = 0x88C5;
        #endregion GL_MATRIX5_ARB

        #region GL_MATRIX6_ARB
        public const GLuint GL_MATRIX6_ARB = 0x88C6;
        #endregion GL_MATRIX6_ARB

        #region GL_MATRIX7_ARB
        public const GLuint GL_MATRIX7_ARB = 0x88C7;
        #endregion GL_MATRIX7_ARB

        #region GL_MATRIX8_ARB
        public const GLuint GL_MATRIX8_ARB = 0x88C8;
        #endregion GL_MATRIX8_ARB

        #region GL_MATRIX9_ARB
        public const GLuint GL_MATRIX9_ARB = 0x88C9;
        #endregion GL_MATRIX9_ARB

        #region GL_MATRIX10_ARB
        public const GLuint GL_MATRIX10_ARB = 0x88CA;
        #endregion GL_MATRIX10_ARB

        #region GL_MATRIX11_ARB
        public const GLuint GL_MATRIX11_ARB = 0x88CB;
        #endregion GL_MATRIX11_ARB

        #region GL_MATRIX12_ARB
        public const GLuint GL_MATRIX12_ARB = 0x88CC;
        #endregion GL_MATRIX12_ARB

        #region GL_MATRIX13_ARB
        public const GLuint GL_MATRIX13_ARB = 0x88CD;
        #endregion GL_MATRIX13_ARB

        #region GL_MATRIX14_ARB
        public const GLuint GL_MATRIX14_ARB = 0x88CE;
        #endregion GL_MATRIX14_ARB

        #region GL_MATRIX15_ARB
        public const GLuint GL_MATRIX15_ARB = 0x88CF;
        #endregion GL_MATRIX15_ARB

        #region GL_MATRIX16_ARB
        public const GLuint GL_MATRIX16_ARB = 0x88D0;
        #endregion GL_MATRIX16_ARB

        #region GL_MATRIX17_ARB
        public const GLuint GL_MATRIX17_ARB = 0x88D1;
        #endregion GL_MATRIX17_ARB

        #region GL_MATRIX18_ARB
        public const GLuint GL_MATRIX18_ARB = 0x88D2;
        #endregion GL_MATRIX18_ARB

        #region GL_MATRIX19_ARB
        public const GLuint GL_MATRIX19_ARB = 0x88D3;
        #endregion GL_MATRIX19_ARB

        #region GL_MATRIX20_ARB
        public const GLuint GL_MATRIX20_ARB = 0x88D4;
        #endregion GL_MATRIX20_ARB

        #region GL_MATRIX21_ARB
        public const GLuint GL_MATRIX21_ARB = 0x88D5;
        #endregion GL_MATRIX21_ARB

        #region GL_MATRIX22_ARB
        public const GLuint GL_MATRIX22_ARB = 0x88D6;
        #endregion GL_MATRIX22_ARB

        #region GL_MATRIX23_ARB
        public const GLuint GL_MATRIX23_ARB = 0x88D7;
        #endregion GL_MATRIX23_ARB

        #region GL_MATRIX24_ARB
        public const GLuint GL_MATRIX24_ARB = 0x88D8;
        #endregion GL_MATRIX24_ARB

        #region GL_MATRIX25_ARB
        public const GLuint GL_MATRIX25_ARB = 0x88D9;
        #endregion GL_MATRIX25_ARB

        #region GL_MATRIX26_ARB
        public const GLuint GL_MATRIX26_ARB = 0x88DA;
        #endregion GL_MATRIX26_ARB

        #region GL_MATRIX27_ARB
        public const GLuint GL_MATRIX27_ARB = 0x88DB;
        #endregion GL_MATRIX27_ARB

        #region GL_MATRIX28_ARB
        public const GLuint GL_MATRIX28_ARB = 0x88DC;
        #endregion GL_MATRIX28_ARB

        #region GL_MATRIX29_ARB
        public const GLuint GL_MATRIX29_ARB = 0x88DD;
        #endregion GL_MATRIX29_ARB

        #region GL_MATRIX30_ARB
        public const GLuint GL_MATRIX30_ARB = 0x88DE;
        #endregion GL_MATRIX30_ARB

        #region GL_MATRIX31_ARB
        public const GLuint GL_MATRIX31_ARB = 0x88DF;
        #endregion GL_MATRIX31_ARB

        #region GL_FRAGMENT_PROGRAM_ARB
        public const GLuint GL_FRAGMENT_PROGRAM_ARB = 0x8804;
        #endregion GL_FRAGMENT_PROGRAM_ARB

        #region GL_PROGRAM_ALU_INSTRUCTIONS_ARB
        public const GLuint GL_PROGRAM_ALU_INSTRUCTIONS_ARB = 0x8805;
        #endregion GL_PROGRAM_ALU_INSTRUCTIONS_ARB

        #region GL_PROGRAM_TEX_INSTRUCTIONS_ARB
        public const GLuint GL_PROGRAM_TEX_INSTRUCTIONS_ARB = 0x8806;
        #endregion GL_PROGRAM_TEX_INSTRUCTIONS_ARB

        #region GL_PROGRAM_TEX_INDIRECTIONS_ARB
        public const GLuint GL_PROGRAM_TEX_INDIRECTIONS_ARB = 0x8807;
        #endregion GL_PROGRAM_TEX_INDIRECTIONS_ARB

        #region GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB
        public const GLuint GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = 0x8808;
        #endregion GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB

        #region GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB
        public const GLuint GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = 0x8809;
        #endregion GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB

        #region GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB
        public const GLuint GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = 0x880A;
        #endregion GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB

        #region GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB
        public const GLuint GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB = 0x880B;
        #endregion GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB

        #region GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB
        public const GLuint GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB = 0x880C;
        #endregion GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB

        #region GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB
        public const GLuint GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB = 0x880D;
        #endregion GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB

        #region GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB
        public const GLuint GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = 0x880E;
        #endregion GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB

        #region GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB
        public const GLuint GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = 0x880F;
        #endregion GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB

        #region GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB
        public const GLuint GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = 0x8810;
        #endregion GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB

        #region GL_MAX_TEXTURE_COORDS_ARB
        public const GLuint GL_MAX_TEXTURE_COORDS_ARB = 0x8871;
        #endregion GL_MAX_TEXTURE_COORDS_ARB

        #region GL_MAX_TEXTURE_IMAGE_UNITS_ARB
        public const GLuint GL_MAX_TEXTURE_IMAGE_UNITS_ARB = 0x8872;
        #endregion GL_MAX_TEXTURE_IMAGE_UNITS_ARB

        #region GL_BUFFER_SIZE_ARB
        public const GLuint GL_BUFFER_SIZE_ARB = 0x8764;
        #endregion GL_BUFFER_SIZE_ARB

        #region GL_BUFFER_USAGE_ARB
        public const GLuint GL_BUFFER_USAGE_ARB = 0x8765;
        #endregion GL_BUFFER_USAGE_ARB

        #region GL_ARRAY_BUFFER_ARB
        public const GLuint GL_ARRAY_BUFFER_ARB = 0x8892;
        #endregion GL_ARRAY_BUFFER_ARB

        #region GL_ELEMENT_ARRAY_BUFFER_ARB
        public const GLuint GL_ELEMENT_ARRAY_BUFFER_ARB = 0x8893;
        #endregion GL_ELEMENT_ARRAY_BUFFER_ARB

        #region GL_ARRAY_BUFFER_BINDING_ARB
        public const GLuint GL_ARRAY_BUFFER_BINDING_ARB = 0x8894;
        #endregion GL_ARRAY_BUFFER_BINDING_ARB

        #region GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB
        public const GLuint GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB = 0x8895;
        #endregion GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB

        #region GL_VERTEX_ARRAY_BUFFER_BINDING_ARB
        public const GLuint GL_VERTEX_ARRAY_BUFFER_BINDING_ARB = 0x8896;
        #endregion GL_VERTEX_ARRAY_BUFFER_BINDING_ARB

        #region GL_NORMAL_ARRAY_BUFFER_BINDING_ARB
        public const GLuint GL_NORMAL_ARRAY_BUFFER_BINDING_ARB = 0x8897;
        #endregion GL_NORMAL_ARRAY_BUFFER_BINDING_ARB

        #region GL_COLOR_ARRAY_BUFFER_BINDING_ARB
        public const GLuint GL_COLOR_ARRAY_BUFFER_BINDING_ARB = 0x8898;
        #endregion GL_COLOR_ARRAY_BUFFER_BINDING_ARB

        #region GL_INDEX_ARRAY_BUFFER_BINDING_ARB
        public const GLuint GL_INDEX_ARRAY_BUFFER_BINDING_ARB = 0x8899;
        #endregion GL_INDEX_ARRAY_BUFFER_BINDING_ARB

        #region GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB
        public const GLuint GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB = 0x889A;
        #endregion GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB

        #region GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB
        public const GLuint GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB = 0x889B;
        #endregion GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB

        #region GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB
        public const GLuint GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB = 0x889C;
        #endregion GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB

        #region GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB
        public const GLuint GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB = 0x889D;
        #endregion GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB

        #region GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB
        public const GLuint GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB = 0x889E;
        #endregion GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB

        #region GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB
        public const GLuint GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB = 0x889F;
        #endregion GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB

        #region GL_READ_ONLY_ARB
        public const GLuint GL_READ_ONLY_ARB = 0x88B8;
        #endregion GL_READ_ONLY_ARB

        #region GL_WRITE_ONLY_ARB
        public const GLuint GL_WRITE_ONLY_ARB = 0x88B9;
        #endregion GL_WRITE_ONLY_ARB

        #region GL_READ_WRITE_ARB
        public const GLuint GL_READ_WRITE_ARB = 0x88BA;
        #endregion GL_READ_WRITE_ARB

        #region GL_BUFFER_ACCESS_ARB
        public const GLuint GL_BUFFER_ACCESS_ARB = 0x88BB;
        #endregion GL_BUFFER_ACCESS_ARB

        #region GL_BUFFER_MAPPED_ARB
        public const GLuint GL_BUFFER_MAPPED_ARB = 0x88BC;
        #endregion GL_BUFFER_MAPPED_ARB

        #region GL_BUFFER_MAP_POINTER_ARB
        public const GLuint GL_BUFFER_MAP_POINTER_ARB = 0x88BD;
        #endregion GL_BUFFER_MAP_POINTER_ARB

        #region GL_STREAM_DRAW_ARB
        public const GLuint GL_STREAM_DRAW_ARB = 0x88E0;
        #endregion GL_STREAM_DRAW_ARB

        #region GL_STREAM_READ_ARB
        public const GLuint GL_STREAM_READ_ARB = 0x88E1;
        #endregion GL_STREAM_READ_ARB

        #region GL_STREAM_COPY_ARB
        public const GLuint GL_STREAM_COPY_ARB = 0x88E2;
        #endregion GL_STREAM_COPY_ARB

        #region GL_STATIC_DRAW_ARB
        public const GLuint GL_STATIC_DRAW_ARB = 0x88E4;
        #endregion GL_STATIC_DRAW_ARB

        #region GL_STATIC_READ_ARB
        public const GLuint GL_STATIC_READ_ARB = 0x88E5;
        #endregion GL_STATIC_READ_ARB

        #region GL_STATIC_COPY_ARB
        public const GLuint GL_STATIC_COPY_ARB = 0x88E6;
        #endregion GL_STATIC_COPY_ARB

        #region GL_DYNAMIC_DRAW_ARB
        public const GLuint GL_DYNAMIC_DRAW_ARB = 0x88E8;
        #endregion GL_DYNAMIC_DRAW_ARB

        #region GL_DYNAMIC_READ_ARB
        public const GLuint GL_DYNAMIC_READ_ARB = 0x88E9;
        #endregion GL_DYNAMIC_READ_ARB

        #region GL_DYNAMIC_COPY_ARB
        public const GLuint GL_DYNAMIC_COPY_ARB = 0x88EA;
        #endregion GL_DYNAMIC_COPY_ARB

        #region GL_QUERY_COUNTER_BITS_ARB
        public const GLuint GL_QUERY_COUNTER_BITS_ARB = 0x8864;
        #endregion GL_QUERY_COUNTER_BITS_ARB

        #region GL_CURRENT_QUERY_ARB
        public const GLuint GL_CURRENT_QUERY_ARB = 0x8865;
        #endregion GL_CURRENT_QUERY_ARB

        #region GL_QUERY_RESULT_ARB
        public const GLuint GL_QUERY_RESULT_ARB = 0x8866;
        #endregion GL_QUERY_RESULT_ARB

        #region GL_QUERY_RESULT_AVAILABLE_ARB
        public const GLuint GL_QUERY_RESULT_AVAILABLE_ARB = 0x8867;
        #endregion GL_QUERY_RESULT_AVAILABLE_ARB

        #region GL_SAMPLES_PASSED_ARB
        public const GLuint GL_SAMPLES_PASSED_ARB = 0x8914;
        #endregion GL_SAMPLES_PASSED_ARB

        #region GL_PROGRAM_OBJECT_ARB
        public const GLuint GL_PROGRAM_OBJECT_ARB = 0x8B40;
        #endregion GL_PROGRAM_OBJECT_ARB

        #region GL_SHADER_OBJECT_ARB
        public const GLuint GL_SHADER_OBJECT_ARB = 0x8B48;
        #endregion GL_SHADER_OBJECT_ARB

        #region GL_OBJECT_TYPE_ARB
        public const GLuint GL_OBJECT_TYPE_ARB = 0x8B4E;
        #endregion GL_OBJECT_TYPE_ARB

        #region GL_OBJECT_SUBTYPE_ARB
        public const GLuint GL_OBJECT_SUBTYPE_ARB = 0x8B4F;
        #endregion GL_OBJECT_SUBTYPE_ARB

        #region GL_FLOAT_VEC2_ARB
        public const GLuint GL_FLOAT_VEC2_ARB = 0x8B50;
        #endregion GL_FLOAT_VEC2_ARB

        #region GL_FLOAT_VEC3_ARB
        public const GLuint GL_FLOAT_VEC3_ARB = 0x8B51;
        #endregion GL_FLOAT_VEC3_ARB

        #region GL_FLOAT_VEC4_ARB
        public const GLuint GL_FLOAT_VEC4_ARB = 0x8B52;
        #endregion GL_FLOAT_VEC4_ARB

        #region GL_INT_VEC2_ARB
        public const GLuint GL_INT_VEC2_ARB = 0x8B53;
        #endregion GL_INT_VEC2_ARB

        #region GL_INT_VEC3_ARB
        public const GLuint GL_INT_VEC3_ARB = 0x8B54;
        #endregion GL_INT_VEC3_ARB

        #region GL_INT_VEC4_ARB
        public const GLuint GL_INT_VEC4_ARB = 0x8B55;
        #endregion GL_INT_VEC4_ARB

        #region GL_BOOL_ARB
        public const GLuint GL_BOOL_ARB = 0x8B56;
        #endregion GL_BOOL_ARB

        #region GL_BOOL_VEC2_ARB
        public const GLuint GL_BOOL_VEC2_ARB = 0x8B57;
        #endregion GL_BOOL_VEC2_ARB

        #region GL_BOOL_VEC3_ARB
        public const GLuint GL_BOOL_VEC3_ARB = 0x8B58;
        #endregion GL_BOOL_VEC3_ARB

        #region GL_BOOL_VEC4_ARB
        public const GLuint GL_BOOL_VEC4_ARB = 0x8B59;
        #endregion GL_BOOL_VEC4_ARB

        #region GL_FLOAT_MAT2_ARB
        public const GLuint GL_FLOAT_MAT2_ARB = 0x8B5A;
        #endregion GL_FLOAT_MAT2_ARB

        #region GL_FLOAT_MAT3_ARB
        public const GLuint GL_FLOAT_MAT3_ARB = 0x8B5B;
        #endregion GL_FLOAT_MAT3_ARB

        #region GL_FLOAT_MAT4_ARB
        public const GLuint GL_FLOAT_MAT4_ARB = 0x8B5C;
        #endregion GL_FLOAT_MAT4_ARB

        #region GL_SAMPLER_1D_ARB
        public const GLuint GL_SAMPLER_1D_ARB = 0x8B5D;
        #endregion GL_SAMPLER_1D_ARB

        #region GL_SAMPLER_2D_ARB
        public const GLuint GL_SAMPLER_2D_ARB = 0x8B5E;
        #endregion GL_SAMPLER_2D_ARB

        #region GL_SAMPLER_3D_ARB
        public const GLuint GL_SAMPLER_3D_ARB = 0x8B5F;
        #endregion GL_SAMPLER_3D_ARB

        #region GL_SAMPLER_CUBE_ARB
        public const GLuint GL_SAMPLER_CUBE_ARB = 0x8B60;
        #endregion GL_SAMPLER_CUBE_ARB

        #region GL_SAMPLER_1D_SHADOW_ARB
        public const GLuint GL_SAMPLER_1D_SHADOW_ARB = 0x8B61;
        #endregion GL_SAMPLER_1D_SHADOW_ARB

        #region GL_SAMPLER_2D_SHADOW_ARB
        public const GLuint GL_SAMPLER_2D_SHADOW_ARB = 0x8B62;
        #endregion GL_SAMPLER_2D_SHADOW_ARB

        #region GL_SAMPLER_2D_RECT_ARB
        public const GLuint GL_SAMPLER_2D_RECT_ARB = 0x8B63;
        #endregion GL_SAMPLER_2D_RECT_ARB

        #region GL_SAMPLER_2D_RECT_SHADOW_ARB
        public const GLuint GL_SAMPLER_2D_RECT_SHADOW_ARB = 0x8B64;
        #endregion GL_SAMPLER_2D_RECT_SHADOW_ARB

        #region GL_OBJECT_DELETE_STATUS_ARB
        public const GLuint GL_OBJECT_DELETE_STATUS_ARB = 0x8B80;
        #endregion GL_OBJECT_DELETE_STATUS_ARB

        #region GL_OBJECT_COMPILE_STATUS_ARB
        public const GLuint GL_OBJECT_COMPILE_STATUS_ARB = 0x8B81;
        #endregion GL_OBJECT_COMPILE_STATUS_ARB

        #region GL_OBJECT_LINK_STATUS_ARB
        public const GLuint GL_OBJECT_LINK_STATUS_ARB = 0x8B82;
        #endregion GL_OBJECT_LINK_STATUS_ARB

        #region GL_OBJECT_VALIDATE_STATUS_ARB
        public const GLuint GL_OBJECT_VALIDATE_STATUS_ARB = 0x8B83;
        #endregion GL_OBJECT_VALIDATE_STATUS_ARB

        #region GL_OBJECT_INFO_LOG_LENGTH_ARB
        public const GLuint GL_OBJECT_INFO_LOG_LENGTH_ARB = 0x8B84;
        #endregion GL_OBJECT_INFO_LOG_LENGTH_ARB

        #region GL_OBJECT_ATTACHED_OBJECTS_ARB
        public const GLuint GL_OBJECT_ATTACHED_OBJECTS_ARB = 0x8B85;
        #endregion GL_OBJECT_ATTACHED_OBJECTS_ARB

        #region GL_OBJECT_ACTIVE_UNIFORMS_ARB
        public const GLuint GL_OBJECT_ACTIVE_UNIFORMS_ARB = 0x8B86;
        #endregion GL_OBJECT_ACTIVE_UNIFORMS_ARB

        #region GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB
        public const GLuint GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB = 0x8B87;
        #endregion GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB

        #region GL_OBJECT_SHADER_SOURCE_LENGTH_ARB
        public const GLuint GL_OBJECT_SHADER_SOURCE_LENGTH_ARB = 0x8B88;
        #endregion GL_OBJECT_SHADER_SOURCE_LENGTH_ARB

        #region GL_VERTEX_SHADER_ARB
        public const GLuint GL_VERTEX_SHADER_ARB = 0x8B31;
        #endregion GL_VERTEX_SHADER_ARB

        #region GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB
        public const GLuint GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB = 0x8B4A;
        #endregion GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB

        #region GL_MAX_VARYING_FLOATS_ARB
        public const GLuint GL_MAX_VARYING_FLOATS_ARB = 0x8B4B;
        #endregion GL_MAX_VARYING_FLOATS_ARB

        #region GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB
        public const GLuint GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB = 0x8B4C;
        #endregion GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB

        #region GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB
        public const GLuint GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB = 0x8B4D;
        #endregion GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB

        #region GL_OBJECT_ACTIVE_ATTRIBUTES_ARB
        public const GLuint GL_OBJECT_ACTIVE_ATTRIBUTES_ARB = 0x8B89;
        #endregion GL_OBJECT_ACTIVE_ATTRIBUTES_ARB

        #region GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB
        public const GLuint GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB = 0x8B8A;
        #endregion GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB

        #region GL_FRAGMENT_SHADER_ARB
        public const GLuint GL_FRAGMENT_SHADER_ARB = 0x8B30;
        #endregion GL_FRAGMENT_SHADER_ARB

        #region GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB
        public const GLuint GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB = 0x8B49;
        #endregion GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB

        #region GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB
        public const GLuint GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB = 0x8B8B;
        #endregion GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB

        #region GL_SHADING_LANGUAGE_VERSION_ARB
        public const GLuint GL_SHADING_LANGUAGE_VERSION_ARB = 0x8B8C;
        #endregion GL_SHADING_LANGUAGE_VERSION_ARB

        #region GL_POINT_SPRITE_ARB
        public const GLuint GL_POINT_SPRITE_ARB = 0x8861;
        #endregion GL_POINT_SPRITE_ARB

        #region GL_COORD_REPLACE_ARB
        public const GLuint GL_COORD_REPLACE_ARB = 0x8862;
        #endregion GL_COORD_REPLACE_ARB

        #region GL_MAX_DRAW_BUFFERS_ARB
        public const GLuint GL_MAX_DRAW_BUFFERS_ARB = 0x8824;
        #endregion GL_MAX_DRAW_BUFFERS_ARB

        #region GL_DRAW_BUFFER0_ARB
        public const GLuint GL_DRAW_BUFFER0_ARB = 0x8825;
        #endregion GL_DRAW_BUFFER0_ARB

        #region GL_DRAW_BUFFER1_ARB
        public const GLuint GL_DRAW_BUFFER1_ARB = 0x8826;
        #endregion GL_DRAW_BUFFER1_ARB

        #region GL_DRAW_BUFFER2_ARB
        public const GLuint GL_DRAW_BUFFER2_ARB = 0x8827;
        #endregion GL_DRAW_BUFFER2_ARB

        #region GL_DRAW_BUFFER3_ARB
        public const GLuint GL_DRAW_BUFFER3_ARB = 0x8828;
        #endregion GL_DRAW_BUFFER3_ARB

        #region GL_DRAW_BUFFER4_ARB
        public const GLuint GL_DRAW_BUFFER4_ARB = 0x8829;
        #endregion GL_DRAW_BUFFER4_ARB

        #region GL_DRAW_BUFFER5_ARB
        public const GLuint GL_DRAW_BUFFER5_ARB = 0x882A;
        #endregion GL_DRAW_BUFFER5_ARB

        #region GL_DRAW_BUFFER6_ARB
        public const GLuint GL_DRAW_BUFFER6_ARB = 0x882B;
        #endregion GL_DRAW_BUFFER6_ARB

        #region GL_DRAW_BUFFER7_ARB
        public const GLuint GL_DRAW_BUFFER7_ARB = 0x882C;
        #endregion GL_DRAW_BUFFER7_ARB

        #region GL_DRAW_BUFFER8_ARB
        public const GLuint GL_DRAW_BUFFER8_ARB = 0x882D;
        #endregion GL_DRAW_BUFFER8_ARB

        #region GL_DRAW_BUFFER9_ARB
        public const GLuint GL_DRAW_BUFFER9_ARB = 0x882E;
        #endregion GL_DRAW_BUFFER9_ARB

        #region GL_DRAW_BUFFER10_ARB
        public const GLuint GL_DRAW_BUFFER10_ARB = 0x882F;
        #endregion GL_DRAW_BUFFER10_ARB

        #region GL_DRAW_BUFFER11_ARB
        public const GLuint GL_DRAW_BUFFER11_ARB = 0x8830;
        #endregion GL_DRAW_BUFFER11_ARB

        #region GL_DRAW_BUFFER12_ARB
        public const GLuint GL_DRAW_BUFFER12_ARB = 0x8831;
        #endregion GL_DRAW_BUFFER12_ARB

        #region GL_DRAW_BUFFER13_ARB
        public const GLuint GL_DRAW_BUFFER13_ARB = 0x8832;
        #endregion GL_DRAW_BUFFER13_ARB

        #region GL_DRAW_BUFFER14_ARB
        public const GLuint GL_DRAW_BUFFER14_ARB = 0x8833;
        #endregion GL_DRAW_BUFFER14_ARB

        #region GL_DRAW_BUFFER15_ARB
        public const GLuint GL_DRAW_BUFFER15_ARB = 0x8834;
        #endregion GL_DRAW_BUFFER15_ARB

        #region GL_TEXTURE_RECTANGLE_ARB
        public const GLuint GL_TEXTURE_RECTANGLE_ARB = 0x84F5;
        #endregion GL_TEXTURE_RECTANGLE_ARB

        #region GL_TEXTURE_BINDING_RECTANGLE_ARB
        public const GLuint GL_TEXTURE_BINDING_RECTANGLE_ARB = 0x84F6;
        #endregion GL_TEXTURE_BINDING_RECTANGLE_ARB

        #region GL_PROXY_TEXTURE_RECTANGLE_ARB
        public const GLuint GL_PROXY_TEXTURE_RECTANGLE_ARB = 0x84F7;
        #endregion GL_PROXY_TEXTURE_RECTANGLE_ARB

        #region GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB
        public const GLuint GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB = 0x84F8;
        #endregion GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB

        #region GL_RGBA_FLOAT_MODE_ARB
        public const GLuint GL_RGBA_FLOAT_MODE_ARB = 0x8820;
        #endregion GL_RGBA_FLOAT_MODE_ARB

        #region GL_CLAMP_VERTEX_COLOR_ARB
        public const GLuint GL_CLAMP_VERTEX_COLOR_ARB = 0x891A;
        #endregion GL_CLAMP_VERTEX_COLOR_ARB

        #region GL_CLAMP_FRAGMENT_COLOR_ARB
        public const GLuint GL_CLAMP_FRAGMENT_COLOR_ARB = 0x891B;
        #endregion GL_CLAMP_FRAGMENT_COLOR_ARB

        #region GL_CLAMP_READ_COLOR_ARB
        public const GLuint GL_CLAMP_READ_COLOR_ARB = 0x891C;
        #endregion GL_CLAMP_READ_COLOR_ARB

        #region GL_FIXED_ONLY_ARB
        public const GLuint GL_FIXED_ONLY_ARB = 0x891D;
        #endregion GL_FIXED_ONLY_ARB

        #region GL_HALF_FLOAT_ARB
        public const GLuint GL_HALF_FLOAT_ARB = 0x140B;
        #endregion GL_HALF_FLOAT_ARB

        #region GL_TEXTURE_RED_TYPE_ARB
        public const GLuint GL_TEXTURE_RED_TYPE_ARB = 0x8C10;
        #endregion GL_TEXTURE_RED_TYPE_ARB

        #region GL_TEXTURE_GREEN_TYPE_ARB
        public const GLuint GL_TEXTURE_GREEN_TYPE_ARB = 0x8C11;
        #endregion GL_TEXTURE_GREEN_TYPE_ARB

        #region GL_TEXTURE_BLUE_TYPE_ARB
        public const GLuint GL_TEXTURE_BLUE_TYPE_ARB = 0x8C12;
        #endregion GL_TEXTURE_BLUE_TYPE_ARB

        #region GL_TEXTURE_ALPHA_TYPE_ARB
        public const GLuint GL_TEXTURE_ALPHA_TYPE_ARB = 0x8C13;
        #endregion GL_TEXTURE_ALPHA_TYPE_ARB

        #region GL_TEXTURE_LUMINANCE_TYPE_ARB
        public const GLuint GL_TEXTURE_LUMINANCE_TYPE_ARB = 0x8C14;
        #endregion GL_TEXTURE_LUMINANCE_TYPE_ARB

        #region GL_TEXTURE_INTENSITY_TYPE_ARB
        public const GLuint GL_TEXTURE_INTENSITY_TYPE_ARB = 0x8C15;
        #endregion GL_TEXTURE_INTENSITY_TYPE_ARB

        #region GL_TEXTURE_DEPTH_TYPE_ARB
        public const GLuint GL_TEXTURE_DEPTH_TYPE_ARB = 0x8C16;
        #endregion GL_TEXTURE_DEPTH_TYPE_ARB

        #region GL_UNSIGNED_NORMALIZED_ARB
        public const GLuint GL_UNSIGNED_NORMALIZED_ARB = 0x8C17;
        #endregion GL_UNSIGNED_NORMALIZED_ARB

        #region GL_RGBA32F_ARB
        public const GLuint GL_RGBA32F_ARB = 0x8814;
        #endregion GL_RGBA32F_ARB

        #region GL_RGB32F_ARB
        public const GLuint GL_RGB32F_ARB = 0x8815;
        #endregion GL_RGB32F_ARB

        #region GL_ALPHA32F_ARB
        public const GLuint GL_ALPHA32F_ARB = 0x8816;
        #endregion GL_ALPHA32F_ARB

        #region GL_INTENSITY32F_ARB
        public const GLuint GL_INTENSITY32F_ARB = 0x8817;
        #endregion GL_INTENSITY32F_ARB

        #region GL_LUMINANCE32F_ARB
        public const GLuint GL_LUMINANCE32F_ARB = 0x8818;
        #endregion GL_LUMINANCE32F_ARB

        #region GL_LUMINANCE_ALPHA32F_ARB
        public const GLuint GL_LUMINANCE_ALPHA32F_ARB = 0x8819;
        #endregion GL_LUMINANCE_ALPHA32F_ARB

        #region GL_RGBA16F_ARB
        public const GLuint GL_RGBA16F_ARB = 0x881A;
        #endregion GL_RGBA16F_ARB

        #region GL_RGB16F_ARB
        public const GLuint GL_RGB16F_ARB = 0x881B;
        #endregion GL_RGB16F_ARB

        #region GL_ALPHA16F_ARB
        public const GLuint GL_ALPHA16F_ARB = 0x881C;
        #endregion GL_ALPHA16F_ARB

        #region GL_INTENSITY16F_ARB
        public const GLuint GL_INTENSITY16F_ARB = 0x881D;
        #endregion GL_INTENSITY16F_ARB

        #region GL_LUMINANCE16F_ARB
        public const GLuint GL_LUMINANCE16F_ARB = 0x881E;
        #endregion GL_LUMINANCE16F_ARB

        #region GL_LUMINANCE_ALPHA16F_ARB
        public const GLuint GL_LUMINANCE_ALPHA16F_ARB = 0x881F;
        #endregion GL_LUMINANCE_ALPHA16F_ARB

        #region GL_PIXEL_PACK_BUFFER_ARB
        public const GLuint GL_PIXEL_PACK_BUFFER_ARB = 0x88EB;
        #endregion GL_PIXEL_PACK_BUFFER_ARB

        #region GL_PIXEL_UNPACK_BUFFER_ARB
        public const GLuint GL_PIXEL_UNPACK_BUFFER_ARB = 0x88EC;
        #endregion GL_PIXEL_UNPACK_BUFFER_ARB

        #region GL_PIXEL_PACK_BUFFER_BINDING_ARB
        public const GLuint GL_PIXEL_PACK_BUFFER_BINDING_ARB = 0x88ED;
        #endregion GL_PIXEL_PACK_BUFFER_BINDING_ARB

        #region GL_PIXEL_UNPACK_BUFFER_BINDING_ARB
        public const GLuint GL_PIXEL_UNPACK_BUFFER_BINDING_ARB = 0x88EF;
        #endregion GL_PIXEL_UNPACK_BUFFER_BINDING_ARB

        #region GL_IMAGE_SCALE_X_HP
        public const GLuint GL_IMAGE_SCALE_X_HP = 0x8155;
        #endregion GL_IMAGE_SCALE_X_HP

        #region GL_IMAGE_SCALE_Y_HP
        public const GLuint GL_IMAGE_SCALE_Y_HP = 0x8156;
        #endregion GL_IMAGE_SCALE_Y_HP

        #region GL_IMAGE_TRANSLATE_X_HP
        public const GLuint GL_IMAGE_TRANSLATE_X_HP = 0x8157;
        #endregion GL_IMAGE_TRANSLATE_X_HP

        #region GL_IMAGE_TRANSLATE_Y_HP
        public const GLuint GL_IMAGE_TRANSLATE_Y_HP = 0x8158;
        #endregion GL_IMAGE_TRANSLATE_Y_HP

        #region GL_IMAGE_ROTATE_ANGLE_HP
        public const GLuint GL_IMAGE_ROTATE_ANGLE_HP = 0x8159;
        #endregion GL_IMAGE_ROTATE_ANGLE_HP

        #region GL_IMAGE_ROTATE_ORIGIN_X_HP
        public const GLuint GL_IMAGE_ROTATE_ORIGIN_X_HP = 0x815A;
        #endregion GL_IMAGE_ROTATE_ORIGIN_X_HP

        #region GL_IMAGE_ROTATE_ORIGIN_Y_HP
        public const GLuint GL_IMAGE_ROTATE_ORIGIN_Y_HP = 0x815B;
        #endregion GL_IMAGE_ROTATE_ORIGIN_Y_HP

        #region GL_IMAGE_MAG_FILTER_HP
        public const GLuint GL_IMAGE_MAG_FILTER_HP = 0x815C;
        #endregion GL_IMAGE_MAG_FILTER_HP

        #region GL_IMAGE_MIN_FILTER_HP
        public const GLuint GL_IMAGE_MIN_FILTER_HP = 0x815D;
        #endregion GL_IMAGE_MIN_FILTER_HP

        #region GL_IMAGE_CUBIC_WEIGHT_HP
        public const GLuint GL_IMAGE_CUBIC_WEIGHT_HP = 0x815E;
        #endregion GL_IMAGE_CUBIC_WEIGHT_HP

        #region GL_CUBIC_HP
        public const GLuint GL_CUBIC_HP = 0x815F;
        #endregion GL_CUBIC_HP

        #region GL_AVERAGE_HP
        public const GLuint GL_AVERAGE_HP = 0x8160;
        #endregion GL_AVERAGE_HP

        #region GL_IMAGE_TRANSFORM_2D_HP
        public const GLuint GL_IMAGE_TRANSFORM_2D_HP = 0x8161;
        #endregion GL_IMAGE_TRANSFORM_2D_HP

        #region GL_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP
        public const GLuint GL_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP = 0x8162;
        #endregion GL_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP

        #region GL_PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP
        public const GLuint GL_PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP = 0x8163;
        #endregion GL_PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP

        #region GL_VERTEX_DATA_HINT_PGI
        public const GLuint GL_VERTEX_DATA_HINT_PGI = 0x1A22A;
        #endregion GL_VERTEX_DATA_HINT_PGI

        #region GL_VERTEX_CONSISTENT_HINT_PGI
        public const GLuint GL_VERTEX_CONSISTENT_HINT_PGI = 0x1A22B;
        #endregion GL_VERTEX_CONSISTENT_HINT_PGI

        #region GL_MATERIAL_SIDE_HINT_PGI
        public const GLuint GL_MATERIAL_SIDE_HINT_PGI = 0x1A22C;
        #endregion GL_MATERIAL_SIDE_HINT_PGI

        #region GL_MAX_VERTEX_HINT_PGI
        public const GLuint GL_MAX_VERTEX_HINT_PGI = 0x1A22D;
        #endregion GL_MAX_VERTEX_HINT_PGI

        #region GL_COLOR3_BIT_PGI
        public const GLuint GL_COLOR3_BIT_PGI = 0x00010000;
        #endregion GL_COLOR3_BIT_PGI

        #region GL_COLOR4_BIT_PGI
        public const GLuint GL_COLOR4_BIT_PGI = 0x00020000;
        #endregion GL_COLOR4_BIT_PGI

        #region GL_EDGEFLAG_BIT_PGI
        public const GLuint GL_EDGEFLAG_BIT_PGI = 0x00040000;
        #endregion GL_EDGEFLAG_BIT_PGI

        #region GL_INDEX_BIT_PGI
        public const GLuint GL_INDEX_BIT_PGI = 0x00080000;
        #endregion GL_INDEX_BIT_PGI

        #region GL_MAT_AMBIENT_BIT_PGI
        public const GLuint GL_MAT_AMBIENT_BIT_PGI = 0x00100000;
        #endregion GL_MAT_AMBIENT_BIT_PGI

        #region GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI
        public const GLuint GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI = 0x00200000;
        #endregion GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI

        #region GL_MAT_DIFFUSE_BIT_PGI
        public const GLuint GL_MAT_DIFFUSE_BIT_PGI = 0x00400000;
        #endregion GL_MAT_DIFFUSE_BIT_PGI

        #region GL_MAT_EMISSION_BIT_PGI
        public const GLuint GL_MAT_EMISSION_BIT_PGI = 0x00800000;
        #endregion GL_MAT_EMISSION_BIT_PGI

        #region GL_MAT_COLOR_INDEXES_BIT_PGI
        public const GLuint GL_MAT_COLOR_INDEXES_BIT_PGI = 0x01000000;
        #endregion GL_MAT_COLOR_INDEXES_BIT_PGI

        #region GL_MAT_SHININESS_BIT_PGI
        public const GLuint GL_MAT_SHININESS_BIT_PGI = 0x02000000;
        #endregion GL_MAT_SHININESS_BIT_PGI

        #region GL_MAT_SPECULAR_BIT_PGI
        public const GLuint GL_MAT_SPECULAR_BIT_PGI = 0x04000000;
        #endregion GL_MAT_SPECULAR_BIT_PGI

        #region GL_NORMAL_BIT_PGI
        public const GLuint GL_NORMAL_BIT_PGI = 0x08000000;
        #endregion GL_NORMAL_BIT_PGI

        #region GL_TEXCOORD1_BIT_PGI
        public const GLuint GL_TEXCOORD1_BIT_PGI = 0x10000000;
        #endregion GL_TEXCOORD1_BIT_PGI

        #region GL_TEXCOORD2_BIT_PGI
        public const GLuint GL_TEXCOORD2_BIT_PGI = 0x20000000;
        #endregion GL_TEXCOORD2_BIT_PGI

        #region GL_TEXCOORD3_BIT_PGI
        public const GLuint GL_TEXCOORD3_BIT_PGI = 0x40000000;
        #endregion GL_TEXCOORD3_BIT_PGI

        #region GL_TEXCOORD4_BIT_PGI
        public const GLuint GL_TEXCOORD4_BIT_PGI = unchecked((int)0x80000000);
        #endregion GL_TEXCOORD4_BIT_PGI

        #region GL_VERTEX23_BIT_PGI
        public const GLuint GL_VERTEX23_BIT_PGI = 0x00000004;
        #endregion GL_VERTEX23_BIT_PGI

        #region GL_VERTEX4_BIT_PGI
        public const GLuint GL_VERTEX4_BIT_PGI = 0x00000008;
        #endregion GL_VERTEX4_BIT_PGI

        #region GL_PREFER_DOUBLEBUFFER_HINT_PGI
        public const GLuint GL_PREFER_DOUBLEBUFFER_HINT_PGI = 0x1A1F8;
        #endregion GL_PREFER_DOUBLEBUFFER_HINT_PGI

        #region GL_CONSERVE_MEMORY_HINT_PGI
        public const GLuint GL_CONSERVE_MEMORY_HINT_PGI = 0x1A1FD;
        #endregion GL_CONSERVE_MEMORY_HINT_PGI

        #region GL_RECLAIM_MEMORY_HINT_PGI
        public const GLuint GL_RECLAIM_MEMORY_HINT_PGI = 0x1A1FE;
        #endregion GL_RECLAIM_MEMORY_HINT_PGI

        #region GL_NATIVE_GRAPHICS_HANDLE_PGI
        public const GLuint GL_NATIVE_GRAPHICS_HANDLE_PGI = 0x1A202;
        #endregion GL_NATIVE_GRAPHICS_HANDLE_PGI

        #region GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI
        public const GLuint GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI = 0x1A203;
        #endregion GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI

        #region GL_NATIVE_GRAPHICS_END_HINT_PGI
        public const GLuint GL_NATIVE_GRAPHICS_END_HINT_PGI = 0x1A204;
        #endregion GL_NATIVE_GRAPHICS_END_HINT_PGI

        #region GL_ALWAYS_FAST_HINT_PGI
        public const GLuint GL_ALWAYS_FAST_HINT_PGI = 0x1A20C;
        #endregion GL_ALWAYS_FAST_HINT_PGI

        #region GL_ALWAYS_SOFT_HINT_PGI
        public const GLuint GL_ALWAYS_SOFT_HINT_PGI = 0x1A20D;
        #endregion GL_ALWAYS_SOFT_HINT_PGI

        #region GL_ALLOW_DRAW_OBJ_HINT_PGI
        public const GLuint GL_ALLOW_DRAW_OBJ_HINT_PGI = 0x1A20E;
        #endregion GL_ALLOW_DRAW_OBJ_HINT_PGI

        #region GL_ALLOW_DRAW_WIN_HINT_PGI
        public const GLuint GL_ALLOW_DRAW_WIN_HINT_PGI = 0x1A20F;
        #endregion GL_ALLOW_DRAW_WIN_HINT_PGI

        #region GL_ALLOW_DRAW_FRG_HINT_PGI
        public const GLuint GL_ALLOW_DRAW_FRG_HINT_PGI = 0x1A210;
        #endregion GL_ALLOW_DRAW_FRG_HINT_PGI

        #region GL_ALLOW_DRAW_MEM_HINT_PGI
        public const GLuint GL_ALLOW_DRAW_MEM_HINT_PGI = 0x1A211;
        #endregion GL_ALLOW_DRAW_MEM_HINT_PGI

        #region GL_STRICT_DEPTHFUNC_HINT_PGI
        public const GLuint GL_STRICT_DEPTHFUNC_HINT_PGI = 0x1A216;
        #endregion GL_STRICT_DEPTHFUNC_HINT_PGI

        #region GL_STRICT_LIGHTING_HINT_PGI
        public const GLuint GL_STRICT_LIGHTING_HINT_PGI = 0x1A217;
        #endregion GL_STRICT_LIGHTING_HINT_PGI

        #region GL_STRICT_SCISSOR_HINT_PGI
        public const GLuint GL_STRICT_SCISSOR_HINT_PGI = 0x1A218;
        #endregion GL_STRICT_SCISSOR_HINT_PGI

        #region GL_FULL_STIPPLE_HINT_PGI
        public const GLuint GL_FULL_STIPPLE_HINT_PGI = 0x1A219;
        #endregion GL_FULL_STIPPLE_HINT_PGI

        #region GL_CLIP_NEAR_HINT_PGI
        public const GLuint GL_CLIP_NEAR_HINT_PGI = 0x1A220;
        #endregion GL_CLIP_NEAR_HINT_PGI

        #region GL_CLIP_FAR_HINT_PGI
        public const GLuint GL_CLIP_FAR_HINT_PGI = 0x1A221;
        #endregion GL_CLIP_FAR_HINT_PGI

        #region GL_WIDE_LINE_HINT_PGI
        public const GLuint GL_WIDE_LINE_HINT_PGI = 0x1A222;
        #endregion GL_WIDE_LINE_HINT_PGI

        #region GL_BACK_NORMALS_HINT_PGI
        public const GLuint GL_BACK_NORMALS_HINT_PGI = 0x1A223;
        #endregion GL_BACK_NORMALS_HINT_PGI

        #region GL_COLOR_INDEX1_EXT
        public const GLuint GL_COLOR_INDEX1_EXT = 0x80E2;
        #endregion GL_COLOR_INDEX1_EXT

        #region GL_COLOR_INDEX2_EXT
        public const GLuint GL_COLOR_INDEX2_EXT = 0x80E3;
        #endregion GL_COLOR_INDEX2_EXT

        #region GL_COLOR_INDEX4_EXT
        public const GLuint GL_COLOR_INDEX4_EXT = 0x80E4;
        #endregion GL_COLOR_INDEX4_EXT

        #region GL_COLOR_INDEX8_EXT
        public const GLuint GL_COLOR_INDEX8_EXT = 0x80E5;
        #endregion GL_COLOR_INDEX8_EXT

        #region GL_COLOR_INDEX12_EXT
        public const GLuint GL_COLOR_INDEX12_EXT = 0x80E6;
        #endregion GL_COLOR_INDEX12_EXT

        #region GL_COLOR_INDEX16_EXT
        public const GLuint GL_COLOR_INDEX16_EXT = 0x80E7;
        #endregion GL_COLOR_INDEX16_EXT

        #region GL_TEXTURE_INDEX_SIZE_EXT
        public const GLuint GL_TEXTURE_INDEX_SIZE_EXT = 0x80ED;
        #endregion GL_TEXTURE_INDEX_SIZE_EXT

        #region GL_CLIP_VOLUME_CLIPPING_HINT_EXT
        public const GLuint GL_CLIP_VOLUME_CLIPPING_HINT_EXT = 0x80F0;
        #endregion GL_CLIP_VOLUME_CLIPPING_HINT_EXT

        #region GL_INDEX_MATERIAL_EXT
        public const GLuint GL_INDEX_MATERIAL_EXT = 0x81B8;
        #endregion GL_INDEX_MATERIAL_EXT

        #region GL_INDEX_MATERIAL_PARAMETER_EXT
        public const GLuint GL_INDEX_MATERIAL_PARAMETER_EXT = 0x81B9;
        #endregion GL_INDEX_MATERIAL_PARAMETER_EXT

        #region GL_INDEX_MATERIAL_FACE_EXT
        public const GLuint GL_INDEX_MATERIAL_FACE_EXT = 0x81BA;
        #endregion GL_INDEX_MATERIAL_FACE_EXT

        #region GL_INDEX_TEST_EXT
        public const GLuint GL_INDEX_TEST_EXT = 0x81B5;
        #endregion GL_INDEX_TEST_EXT

        #region GL_INDEX_TEST_FUNC_EXT
        public const GLuint GL_INDEX_TEST_FUNC_EXT = 0x81B6;
        #endregion GL_INDEX_TEST_FUNC_EXT

        #region GL_INDEX_TEST_REF_EXT
        public const GLuint GL_INDEX_TEST_REF_EXT = 0x81B7;
        #endregion GL_INDEX_TEST_REF_EXT

        #region GL_IUI_V2F_EXT
        public const GLuint GL_IUI_V2F_EXT = 0x81AD;
        #endregion GL_IUI_V2F_EXT

        #region GL_IUI_V3F_EXT
        public const GLuint GL_IUI_V3F_EXT = 0x81AE;
        #endregion GL_IUI_V3F_EXT

        #region GL_IUI_N3F_V2F_EXT
        public const GLuint GL_IUI_N3F_V2F_EXT = 0x81AF;
        #endregion GL_IUI_N3F_V2F_EXT

        #region GL_IUI_N3F_V3F_EXT
        public const GLuint GL_IUI_N3F_V3F_EXT = 0x81B0;
        #endregion GL_IUI_N3F_V3F_EXT

        #region GL_T2F_IUI_V2F_EXT
        public const GLuint GL_T2F_IUI_V2F_EXT = 0x81B1;
        #endregion GL_T2F_IUI_V2F_EXT

        #region GL_T2F_IUI_V3F_EXT
        public const GLuint GL_T2F_IUI_V3F_EXT = 0x81B2;
        #endregion GL_T2F_IUI_V3F_EXT

        #region GL_T2F_IUI_N3F_V2F_EXT
        public const GLuint GL_T2F_IUI_N3F_V2F_EXT = 0x81B3;
        #endregion GL_T2F_IUI_N3F_V2F_EXT

        #region GL_T2F_IUI_N3F_V3F_EXT
        public const GLuint GL_T2F_IUI_N3F_V3F_EXT = 0x81B4;
        #endregion GL_T2F_IUI_N3F_V3F_EXT

        #region GL_ARRAY_ELEMENT_LOCK_FIRST_EXT
        public const GLuint GL_ARRAY_ELEMENT_LOCK_FIRST_EXT = 0x81A8;
        #endregion GL_ARRAY_ELEMENT_LOCK_FIRST_EXT

        #region GL_ARRAY_ELEMENT_LOCK_COUNT_EXT
        public const GLuint GL_ARRAY_ELEMENT_LOCK_COUNT_EXT = 0x81A9;
        #endregion GL_ARRAY_ELEMENT_LOCK_COUNT_EXT

        #region GL_CULL_VERTEX_EXT
        public const GLuint GL_CULL_VERTEX_EXT = 0x81AA;
        #endregion GL_CULL_VERTEX_EXT

        #region GL_CULL_VERTEX_EYE_POSITION_EXT
        public const GLuint GL_CULL_VERTEX_EYE_POSITION_EXT = 0x81AB;
        #endregion GL_CULL_VERTEX_EYE_POSITION_EXT

        #region GL_CULL_VERTEX_OBJECT_POSITION_EXT
        public const GLuint GL_CULL_VERTEX_OBJECT_POSITION_EXT = 0x81AC;
        #endregion GL_CULL_VERTEX_OBJECT_POSITION_EXT

        #region GL_RASTER_POSITION_UNCLIPPED_IBM
        public const GLuint GL_RASTER_POSITION_UNCLIPPED_IBM = 0x19262;
        #endregion GL_RASTER_POSITION_UNCLIPPED_IBM

        #region GL_TEXTURE_LIGHTING_MODE_HP
        public const GLuint GL_TEXTURE_LIGHTING_MODE_HP = 0x8167;
        #endregion GL_TEXTURE_LIGHTING_MODE_HP

        #region GL_TEXTURE_POST_SPECULAR_HP
        public const GLuint GL_TEXTURE_POST_SPECULAR_HP = 0x8168;
        #endregion GL_TEXTURE_POST_SPECULAR_HP

        #region GL_TEXTURE_PRE_SPECULAR_HP
        public const GLuint GL_TEXTURE_PRE_SPECULAR_HP = 0x8169;
        #endregion GL_TEXTURE_PRE_SPECULAR_HP

        #region GL_MAX_ELEMENTS_VERTICES_EXT
        public const GLuint GL_MAX_ELEMENTS_VERTICES_EXT = 0x80E8;
        #endregion GL_MAX_ELEMENTS_VERTICES_EXT

        #region GL_MAX_ELEMENTS_INDICES_EXT
        public const GLuint GL_MAX_ELEMENTS_INDICES_EXT = 0x80E9;
        #endregion GL_MAX_ELEMENTS_INDICES_EXT

        #region GL_PHONG_WIN
        public const GLuint GL_PHONG_WIN = 0x80EA;
        #endregion GL_PHONG_WIN

        #region GL_PHONG_HINT_WIN
        public const GLuint GL_PHONG_HINT_WIN = 0x80EB;
        #endregion GL_PHONG_HINT_WIN

        #region GL_FOG_SPECULAR_TEXTURE_WIN
        public const GLuint GL_FOG_SPECULAR_TEXTURE_WIN = 0x80EC;
        #endregion GL_FOG_SPECULAR_TEXTURE_WIN

        #region GL_FRAGMENT_MATERIAL_EXT
        public const GLuint GL_FRAGMENT_MATERIAL_EXT = 0x8349;
        #endregion GL_FRAGMENT_MATERIAL_EXT

        #region GL_FRAGMENT_NORMAL_EXT
        public const GLuint GL_FRAGMENT_NORMAL_EXT = 0x834A;
        #endregion GL_FRAGMENT_NORMAL_EXT

        #region GL_FRAGMENT_COLOR_EXT
        public const GLuint GL_FRAGMENT_COLOR_EXT = 0x834C;
        #endregion GL_FRAGMENT_COLOR_EXT

        #region GL_ATTENUATION_EXT
        public const GLuint GL_ATTENUATION_EXT = 0x834D;
        #endregion GL_ATTENUATION_EXT

        #region GL_SHADOW_ATTENUATION_EXT
        public const GLuint GL_SHADOW_ATTENUATION_EXT = 0x834E;
        #endregion GL_SHADOW_ATTENUATION_EXT

        #region GL_TEXTURE_APPLICATION_MODE_EXT
        public const GLuint GL_TEXTURE_APPLICATION_MODE_EXT = 0x834F;
        #endregion GL_TEXTURE_APPLICATION_MODE_EXT

        #region GL_TEXTURE_LIGHT_EXT
        public const GLuint GL_TEXTURE_LIGHT_EXT = 0x8350;
        #endregion GL_TEXTURE_LIGHT_EXT

        #region GL_TEXTURE_MATERIAL_FACE_EXT
        public const GLuint GL_TEXTURE_MATERIAL_FACE_EXT = 0x8351;
        #endregion GL_TEXTURE_MATERIAL_FACE_EXT

        #region GL_TEXTURE_MATERIAL_PARAMETER_EXT
        public const GLuint GL_TEXTURE_MATERIAL_PARAMETER_EXT = 0x8352;
        #endregion GL_TEXTURE_MATERIAL_PARAMETER_EXT

        #region GL_OCCLUSION_TEST_HP
        public const GLuint GL_OCCLUSION_TEST_HP = 0x8165;
        #endregion GL_OCCLUSION_TEST_HP

        #region GL_OCCLUSION_TEST_RESULT_HP
        public const GLuint GL_OCCLUSION_TEST_RESULT_HP = 0x8166;
        #endregion GL_OCCLUSION_TEST_RESULT_HP

        #region GL_COLOR_SUM_EXT
        public const GLuint GL_COLOR_SUM_EXT = 0x8458;
        #endregion GL_COLOR_SUM_EXT

        #region GL_CURRENT_SECONDARY_COLOR_EXT
        public const GLuint GL_CURRENT_SECONDARY_COLOR_EXT = 0x8459;
        #endregion GL_CURRENT_SECONDARY_COLOR_EXT

        #region GL_SECONDARY_COLOR_ARRAY_SIZE_EXT
        public const GLuint GL_SECONDARY_COLOR_ARRAY_SIZE_EXT = 0x845A;
        #endregion GL_SECONDARY_COLOR_ARRAY_SIZE_EXT

        #region GL_SECONDARY_COLOR_ARRAY_TYPE_EXT
        public const GLuint GL_SECONDARY_COLOR_ARRAY_TYPE_EXT = 0x845B;
        #endregion GL_SECONDARY_COLOR_ARRAY_TYPE_EXT

        #region GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT
        public const GLuint GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT = 0x845C;
        #endregion GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT

        #region GL_SECONDARY_COLOR_ARRAY_POINTER_EXT
        public const GLuint GL_SECONDARY_COLOR_ARRAY_POINTER_EXT = 0x845D;
        #endregion GL_SECONDARY_COLOR_ARRAY_POINTER_EXT

        #region GL_SECONDARY_COLOR_ARRAY_EXT
        public const GLuint GL_SECONDARY_COLOR_ARRAY_EXT = 0x845E;
        #endregion GL_SECONDARY_COLOR_ARRAY_EXT

        #region GL_PERTURB_EXT
        public const GLuint GL_PERTURB_EXT = 0x85AE;
        #endregion GL_PERTURB_EXT

        #region GL_TEXTURE_NORMAL_EXT
        public const GLuint GL_TEXTURE_NORMAL_EXT = 0x85AF;
        #endregion GL_TEXTURE_NORMAL_EXT

        #region GL_FOG_COORDINATE_SOURCE_EXT
        public const GLuint GL_FOG_COORDINATE_SOURCE_EXT = 0x8450;
        #endregion GL_FOG_COORDINATE_SOURCE_EXT

        #region GL_FOG_COORDINATE_EXT
        public const GLuint GL_FOG_COORDINATE_EXT = 0x8451;
        #endregion GL_FOG_COORDINATE_EXT

        #region GL_FRAGMENT_DEPTH_EXT
        public const GLuint GL_FRAGMENT_DEPTH_EXT = 0x8452;
        #endregion GL_FRAGMENT_DEPTH_EXT

        #region GL_CURRENT_FOG_COORDINATE_EXT
        public const GLuint GL_CURRENT_FOG_COORDINATE_EXT = 0x8453;
        #endregion GL_CURRENT_FOG_COORDINATE_EXT

        #region GL_FOG_COORDINATE_ARRAY_TYPE_EXT
        public const GLuint GL_FOG_COORDINATE_ARRAY_TYPE_EXT = 0x8454;
        #endregion GL_FOG_COORDINATE_ARRAY_TYPE_EXT

        #region GL_FOG_COORDINATE_ARRAY_STRIDE_EXT
        public const GLuint GL_FOG_COORDINATE_ARRAY_STRIDE_EXT = 0x8455;
        #endregion GL_FOG_COORDINATE_ARRAY_STRIDE_EXT

        #region GL_FOG_COORDINATE_ARRAY_POINTER_EXT
        public const GLuint GL_FOG_COORDINATE_ARRAY_POINTER_EXT = 0x8456;
        #endregion GL_FOG_COORDINATE_ARRAY_POINTER_EXT

        #region GL_FOG_COORDINATE_ARRAY_EXT
        public const GLuint GL_FOG_COORDINATE_ARRAY_EXT = 0x8457;
        #endregion GL_FOG_COORDINATE_ARRAY_EXT

        #region GL_SCREEN_COORDINATES_REND
        public const GLuint GL_SCREEN_COORDINATES_REND = 0x8490;
        #endregion GL_SCREEN_COORDINATES_REND

        #region GL_INVERTED_SCREEN_W_REND
        public const GLuint GL_INVERTED_SCREEN_W_REND = 0x8491;
        #endregion GL_INVERTED_SCREEN_W_REND

        #region GL_TANGENT_ARRAY_EXT
        public const GLuint GL_TANGENT_ARRAY_EXT = 0x8439;
        #endregion GL_TANGENT_ARRAY_EXT

        #region GL_BINORMAL_ARRAY_EXT
        public const GLuint GL_BINORMAL_ARRAY_EXT = 0x843A;
        #endregion GL_BINORMAL_ARRAY_EXT

        #region GL_CURRENT_TANGENT_EXT
        public const GLuint GL_CURRENT_TANGENT_EXT = 0x843B;
        #endregion GL_CURRENT_TANGENT_EXT

        #region GL_CURRENT_BINORMAL_EXT
        public const GLuint GL_CURRENT_BINORMAL_EXT = 0x843C;
        #endregion GL_CURRENT_BINORMAL_EXT

        #region GL_TANGENT_ARRAY_TYPE_EXT
        public const GLuint GL_TANGENT_ARRAY_TYPE_EXT = 0x843E;
        #endregion GL_TANGENT_ARRAY_TYPE_EXT

        #region GL_TANGENT_ARRAY_STRIDE_EXT
        public const GLuint GL_TANGENT_ARRAY_STRIDE_EXT = 0x843F;
        #endregion GL_TANGENT_ARRAY_STRIDE_EXT

        #region GL_BINORMAL_ARRAY_TYPE_EXT
        public const GLuint GL_BINORMAL_ARRAY_TYPE_EXT = 0x8440;
        #endregion GL_BINORMAL_ARRAY_TYPE_EXT

        #region GL_BINORMAL_ARRAY_STRIDE_EXT
        public const GLuint GL_BINORMAL_ARRAY_STRIDE_EXT = 0x8441;
        #endregion GL_BINORMAL_ARRAY_STRIDE_EXT

        #region GL_TANGENT_ARRAY_POINTER_EXT
        public const GLuint GL_TANGENT_ARRAY_POINTER_EXT = 0x8442;
        #endregion GL_TANGENT_ARRAY_POINTER_EXT

        #region GL_BINORMAL_ARRAY_POINTER_EXT
        public const GLuint GL_BINORMAL_ARRAY_POINTER_EXT = 0x8443;
        #endregion GL_BINORMAL_ARRAY_POINTER_EXT

        #region GL_MAP1_TANGENT_EXT
        public const GLuint GL_MAP1_TANGENT_EXT = 0x8444;
        #endregion GL_MAP1_TANGENT_EXT

        #region GL_MAP2_TANGENT_EXT
        public const GLuint GL_MAP2_TANGENT_EXT = 0x8445;
        #endregion GL_MAP2_TANGENT_EXT

        #region GL_MAP1_BINORMAL_EXT
        public const GLuint GL_MAP1_BINORMAL_EXT = 0x8446;
        #endregion GL_MAP1_BINORMAL_EXT

        #region GL_MAP2_BINORMAL_EXT
        public const GLuint GL_MAP2_BINORMAL_EXT = 0x8447;
        #endregion GL_MAP2_BINORMAL_EXT

        #region GL_COMBINE_EXT
        public const GLuint GL_COMBINE_EXT = 0x8570;
        #endregion GL_COMBINE_EXT

        #region GL_COMBINE_RGB_EXT
        public const GLuint GL_COMBINE_RGB_EXT = 0x8571;
        #endregion GL_COMBINE_RGB_EXT

        #region GL_COMBINE_ALPHA_EXT
        public const GLuint GL_COMBINE_ALPHA_EXT = 0x8572;
        #endregion GL_COMBINE_ALPHA_EXT

        #region GL_RGB_SCALE_EXT
        public const GLuint GL_RGB_SCALE_EXT = 0x8573;
        #endregion GL_RGB_SCALE_EXT

        #region GL_ADD_SIGNED_EXT
        public const GLuint GL_ADD_SIGNED_EXT = 0x8574;
        #endregion GL_ADD_SIGNED_EXT

        #region GL_INTERPOLATE_EXT
        public const GLuint GL_INTERPOLATE_EXT = 0x8575;
        #endregion GL_INTERPOLATE_EXT

        #region GL_CONSTANT_EXT
        public const GLuint GL_CONSTANT_EXT = 0x8576;
        #endregion GL_CONSTANT_EXT

        #region GL_PRIMARY_COLOR_EXT
        public const GLuint GL_PRIMARY_COLOR_EXT = 0x8577;
        #endregion GL_PRIMARY_COLOR_EXT

        #region GL_PREVIOUS_EXT
        public const GLuint GL_PREVIOUS_EXT = 0x8578;
        #endregion GL_PREVIOUS_EXT

        #region GL_SOURCE0_RGB_EXT
        public const GLuint GL_SOURCE0_RGB_EXT = 0x8580;
        #endregion GL_SOURCE0_RGB_EXT

        #region GL_SOURCE1_RGB_EXT
        public const GLuint GL_SOURCE1_RGB_EXT = 0x8581;
        #endregion GL_SOURCE1_RGB_EXT

        #region GL_SOURCE2_RGB_EXT
        public const GLuint GL_SOURCE2_RGB_EXT = 0x8582;
        #endregion GL_SOURCE2_RGB_EXT

        #region GL_SOURCE0_ALPHA_EXT
        public const GLuint GL_SOURCE0_ALPHA_EXT = 0x8588;
        #endregion GL_SOURCE0_ALPHA_EXT

        #region GL_SOURCE1_ALPHA_EXT
        public const GLuint GL_SOURCE1_ALPHA_EXT = 0x8589;
        #endregion GL_SOURCE1_ALPHA_EXT

        #region GL_SOURCE2_ALPHA_EXT
        public const GLuint GL_SOURCE2_ALPHA_EXT = 0x858A;
        #endregion GL_SOURCE2_ALPHA_EXT

        #region GL_OPERAND0_RGB_EXT
        public const GLuint GL_OPERAND0_RGB_EXT = 0x8590;
        #endregion GL_OPERAND0_RGB_EXT

        #region GL_OPERAND1_RGB_EXT
        public const GLuint GL_OPERAND1_RGB_EXT = 0x8591;
        #endregion GL_OPERAND1_RGB_EXT

        #region GL_OPERAND2_RGB_EXT
        public const GLuint GL_OPERAND2_RGB_EXT = 0x8592;
        #endregion GL_OPERAND2_RGB_EXT

        #region GL_OPERAND0_ALPHA_EXT
        public const GLuint GL_OPERAND0_ALPHA_EXT = 0x8598;
        #endregion GL_OPERAND0_ALPHA_EXT

        #region GL_OPERAND1_ALPHA_EXT
        public const GLuint GL_OPERAND1_ALPHA_EXT = 0x8599;
        #endregion GL_OPERAND1_ALPHA_EXT

        #region GL_OPERAND2_ALPHA_EXT
        public const GLuint GL_OPERAND2_ALPHA_EXT = 0x859A;
        #endregion GL_OPERAND2_ALPHA_EXT

        #region GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE
        public const GLuint GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE = 0x85B0;
        #endregion GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE

        #region GL_TRANSFORM_HINT_APPLE
        public const GLuint GL_TRANSFORM_HINT_APPLE = 0x85B1;
        #endregion GL_TRANSFORM_HINT_APPLE

        #region GL_FOG_SCALE_SGIX
        public const GLuint GL_FOG_SCALE_SGIX = 0x81FC;
        #endregion GL_FOG_SCALE_SGIX

        #region GL_FOG_SCALE_VALUE_SGIX
        public const GLuint GL_FOG_SCALE_VALUE_SGIX = 0x81FD;
        #endregion GL_FOG_SCALE_VALUE_SGIX

        #region GL_UNPACK_CONSTANT_DATA_SUNX
        public const GLuint GL_UNPACK_CONSTANT_DATA_SUNX = 0x81D5;
        #endregion GL_UNPACK_CONSTANT_DATA_SUNX

        #region GL_TEXTURE_CONSTANT_DATA_SUNX
        public const GLuint GL_TEXTURE_CONSTANT_DATA_SUNX = 0x81D6;
        #endregion GL_TEXTURE_CONSTANT_DATA_SUNX

        #region GL_GLOBAL_ALPHA_SUN
        public const GLuint GL_GLOBAL_ALPHA_SUN = 0x81D9;
        #endregion GL_GLOBAL_ALPHA_SUN

        #region GL_GLOBAL_ALPHA_FACTOR_SUN
        public const GLuint GL_GLOBAL_ALPHA_FACTOR_SUN = 0x81DA;
        #endregion GL_GLOBAL_ALPHA_FACTOR_SUN

        #region GL_RESTART_SUN
        public const GLuint GL_RESTART_SUN = 0x0001;
        #endregion GL_RESTART_SUN

        #region GL_REPLACE_MIDDLE_SUN
        public const GLuint GL_REPLACE_MIDDLE_SUN = 0x0002;
        #endregion GL_REPLACE_MIDDLE_SUN

        #region GL_REPLACE_OLDEST_SUN
        public const GLuint GL_REPLACE_OLDEST_SUN = 0x0003;
        #endregion GL_REPLACE_OLDEST_SUN

        #region GL_TRIANGLE_LIST_SUN
        public const GLuint GL_TRIANGLE_LIST_SUN = 0x81D7;
        #endregion GL_TRIANGLE_LIST_SUN

        #region GL_REPLACEMENT_CODE_SUN
        public const GLuint GL_REPLACEMENT_CODE_SUN = 0x81D8;
        #endregion GL_REPLACEMENT_CODE_SUN

        #region GL_REPLACEMENT_CODE_ARRAY_SUN
        public const GLuint GL_REPLACEMENT_CODE_ARRAY_SUN = 0x85C0;
        #endregion GL_REPLACEMENT_CODE_ARRAY_SUN

        #region GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN
        public const GLuint GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN = 0x85C1;
        #endregion GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN

        #region GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN
        public const GLuint GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN = 0x85C2;
        #endregion GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN

        #region GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN
        public const GLuint GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN = 0x85C3;
        #endregion GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN

        #region GL_R1UI_V3F_SUN
        public const GLuint GL_R1UI_V3F_SUN = 0x85C4;
        #endregion GL_R1UI_V3F_SUN

        #region GL_R1UI_C4UB_V3F_SUN
        public const GLuint GL_R1UI_C4UB_V3F_SUN = 0x85C5;
        #endregion GL_R1UI_C4UB_V3F_SUN

        #region GL_R1UI_C3F_V3F_SUN
        public const GLuint GL_R1UI_C3F_V3F_SUN = 0x85C6;
        #endregion GL_R1UI_C3F_V3F_SUN

        #region GL_R1UI_N3F_V3F_SUN
        public const GLuint GL_R1UI_N3F_V3F_SUN = 0x85C7;
        #endregion GL_R1UI_N3F_V3F_SUN

        #region GL_R1UI_C4F_N3F_V3F_SUN
        public const GLuint GL_R1UI_C4F_N3F_V3F_SUN = 0x85C8;
        #endregion GL_R1UI_C4F_N3F_V3F_SUN

        #region GL_R1UI_T2F_V3F_SUN
        public const GLuint GL_R1UI_T2F_V3F_SUN = 0x85C9;
        #endregion GL_R1UI_T2F_V3F_SUN

        #region GL_R1UI_T2F_N3F_V3F_SUN
        public const GLuint GL_R1UI_T2F_N3F_V3F_SUN = 0x85CA;
        #endregion GL_R1UI_T2F_N3F_V3F_SUN

        #region GL_R1UI_T2F_C4F_N3F_V3F_SUN
        public const GLuint GL_R1UI_T2F_C4F_N3F_V3F_SUN = 0x85CB;
        #endregion GL_R1UI_T2F_C4F_N3F_V3F_SUN

        #region GL_BLEND_DST_RGB_EXT
        public const GLuint GL_BLEND_DST_RGB_EXT = 0x80C8;
        #endregion GL_BLEND_DST_RGB_EXT

        #region GL_BLEND_SRC_RGB_EXT
        public const GLuint GL_BLEND_SRC_RGB_EXT = 0x80C9;
        #endregion GL_BLEND_SRC_RGB_EXT

        #region GL_BLEND_DST_ALPHA_EXT
        public const GLuint GL_BLEND_DST_ALPHA_EXT = 0x80CA;
        #endregion GL_BLEND_DST_ALPHA_EXT

        #region GL_BLEND_SRC_ALPHA_EXT
        public const GLuint GL_BLEND_SRC_ALPHA_EXT = 0x80CB;
        #endregion GL_BLEND_SRC_ALPHA_EXT

        #region GL_RED_MIN_CLAMP_INGR
        public const GLuint GL_RED_MIN_CLAMP_INGR = 0x8560;
        #endregion GL_RED_MIN_CLAMP_INGR

        #region GL_GREEN_MIN_CLAMP_INGR
        public const GLuint GL_GREEN_MIN_CLAMP_INGR = 0x8561;
        #endregion GL_GREEN_MIN_CLAMP_INGR

        #region GL_BLUE_MIN_CLAMP_INGR
        public const GLuint GL_BLUE_MIN_CLAMP_INGR = 0x8562;
        #endregion GL_BLUE_MIN_CLAMP_INGR

        #region GL_ALPHA_MIN_CLAMP_INGR
        public const GLuint GL_ALPHA_MIN_CLAMP_INGR = 0x8563;
        #endregion GL_ALPHA_MIN_CLAMP_INGR

        #region GL_RED_MAX_CLAMP_INGR
        public const GLuint GL_RED_MAX_CLAMP_INGR = 0x8564;
        #endregion GL_RED_MAX_CLAMP_INGR

        #region GL_GREEN_MAX_CLAMP_INGR
        public const GLuint GL_GREEN_MAX_CLAMP_INGR = 0x8565;
        #endregion GL_GREEN_MAX_CLAMP_INGR

        #region GL_BLUE_MAX_CLAMP_INGR
        public const GLuint GL_BLUE_MAX_CLAMP_INGR = 0x8566;
        #endregion GL_BLUE_MAX_CLAMP_INGR

        #region GL_ALPHA_MAX_CLAMP_INGR
        public const GLuint GL_ALPHA_MAX_CLAMP_INGR = 0x8567;
        #endregion GL_ALPHA_MAX_CLAMP_INGR

        #region GL_INTERLACE_READ_INGR
        public const GLuint GL_INTERLACE_READ_INGR = 0x8568;
        #endregion GL_INTERLACE_READ_INGR

        #region GL_INCR_WRAP_EXT
        public const GLuint GL_INCR_WRAP_EXT = 0x8507;
        #endregion GL_INCR_WRAP_EXT

        #region GL_DECR_WRAP_EXT
        public const GLuint GL_DECR_WRAP_EXT = 0x8508;
        #endregion GL_DECR_WRAP_EXT

        #region GL_422_EXT
        public const GLuint GL_422_EXT = 0x80CC;
        #endregion GL_422_EXT

        #region GL_422_REV_EXT
        public const GLuint GL_422_REV_EXT = 0x80CD;
        #endregion GL_422_REV_EXT

        #region GL_422_AVERAGE_EXT
        public const GLuint GL_422_AVERAGE_EXT = 0x80CE;
        #endregion GL_422_AVERAGE_EXT

        #region GL_422_REV_AVERAGE_EXT
        public const GLuint GL_422_REV_AVERAGE_EXT = 0x80CF;
        #endregion GL_422_REV_AVERAGE_EXT

        #region GL_NORMAL_MAP_NV
        public const GLuint GL_NORMAL_MAP_NV = 0x8511;
        #endregion GL_NORMAL_MAP_NV

        #region GL_REFLECTION_MAP_NV
        public const GLuint GL_REFLECTION_MAP_NV = 0x8512;
        #endregion GL_REFLECTION_MAP_NV

        #region GL_NORMAL_MAP_EXT
        public const GLuint GL_NORMAL_MAP_EXT = 0x8511;
        #endregion GL_NORMAL_MAP_EXT

        #region GL_REFLECTION_MAP_EXT
        public const GLuint GL_REFLECTION_MAP_EXT = 0x8512;
        #endregion GL_REFLECTION_MAP_EXT

        #region GL_TEXTURE_CUBE_MAP_EXT
        public const GLuint GL_TEXTURE_CUBE_MAP_EXT = 0x8513;
        #endregion GL_TEXTURE_CUBE_MAP_EXT

        #region GL_TEXTURE_BINDING_CUBE_MAP_EXT
        public const GLuint GL_TEXTURE_BINDING_CUBE_MAP_EXT = 0x8514;
        #endregion GL_TEXTURE_BINDING_CUBE_MAP_EXT

        #region GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT
        public const GLuint GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT = 0x8515;
        #endregion GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT

        #region GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT
        public const GLuint GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT = 0x8516;
        #endregion GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT

        #region GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT
        public const GLuint GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT = 0x8517;
        #endregion GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT

        #region GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT
        public const GLuint GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT = 0x8518;
        #endregion GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT

        #region GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT
        public const GLuint GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT = 0x8519;
        #endregion GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT

        #region GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT
        public const GLuint GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT = 0x851A;
        #endregion GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT

        #region GL_PROXY_TEXTURE_CUBE_MAP_EXT
        public const GLuint GL_PROXY_TEXTURE_CUBE_MAP_EXT = 0x851B;
        #endregion GL_PROXY_TEXTURE_CUBE_MAP_EXT

        #region GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT
        public const GLuint GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT = 0x851C;
        #endregion GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT

        #region GL_WRAP_BORDER_SUN
        public const GLuint GL_WRAP_BORDER_SUN = 0x81D4;
        #endregion GL_WRAP_BORDER_SUN

        #region GL_MAX_TEXTURE_LOD_BIAS_EXT
        public const GLuint GL_MAX_TEXTURE_LOD_BIAS_EXT = 0x84FD;
        #endregion GL_MAX_TEXTURE_LOD_BIAS_EXT

        #region GL_TEXTURE_FILTER_CONTROL_EXT
        public const GLuint GL_TEXTURE_FILTER_CONTROL_EXT = 0x8500;
        #endregion GL_TEXTURE_FILTER_CONTROL_EXT

        #region GL_TEXTURE_LOD_BIAS_EXT
        public const GLuint GL_TEXTURE_LOD_BIAS_EXT = 0x8501;
        #endregion GL_TEXTURE_LOD_BIAS_EXT

        #region GL_TEXTURE_MAX_ANISOTROPY_EXT
        public const GLuint GL_TEXTURE_MAX_ANISOTROPY_EXT = 0x84FE;
        #endregion GL_TEXTURE_MAX_ANISOTROPY_EXT

        #region GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT
        public const GLuint GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT = 0x84FF;
        #endregion GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT

        #region GL_MODELVIEW0_STACK_DEPTH_EXT
        public const GLuint GL_MODELVIEW0_STACK_DEPTH_EXT = GL_MODELVIEW_STACK_DEPTH;
        #endregion GL_MODELVIEW0_STACK_DEPTH_EXT

        #region GL_MODELVIEW1_STACK_DEPTH_EXT
        public const GLuint GL_MODELVIEW1_STACK_DEPTH_EXT = 0x8502;
        #endregion GL_MODELVIEW1_STACK_DEPTH_EXT

        #region GL_MODELVIEW0_MATRIX_EXT
        public const GLuint GL_MODELVIEW0_MATRIX_EXT = GL_MODELVIEW_MATRIX;
        #endregion GL_MODELVIEW0_MATRIX_EXT

        #region GL_MODELVIEW1_MATRIX_EXT
        public const GLuint GL_MODELVIEW1_MATRIX_EXT = 0x8506;
        #endregion GL_MODELVIEW1_MATRIX_EXT

        #region GL_VERTEX_WEIGHTING_EXT
        public const GLuint GL_VERTEX_WEIGHTING_EXT = 0x8509;
        #endregion GL_VERTEX_WEIGHTING_EXT

        #region GL_MODELVIEW0_EXT
        public const GLuint GL_MODELVIEW0_EXT = GL_MODELVIEW;
        #endregion GL_MODELVIEW0_EXT

        #region GL_MODELVIEW1_EXT
        public const GLuint GL_MODELVIEW1_EXT = 0x850A;
        #endregion GL_MODELVIEW1_EXT

        #region GL_CURRENT_VERTEX_WEIGHT_EXT
        public const GLuint GL_CURRENT_VERTEX_WEIGHT_EXT = 0x850B;
        #endregion GL_CURRENT_VERTEX_WEIGHT_EXT

        #region GL_VERTEX_WEIGHT_ARRAY_EXT
        public const GLuint GL_VERTEX_WEIGHT_ARRAY_EXT = 0x850C;
        #endregion GL_VERTEX_WEIGHT_ARRAY_EXT

        #region GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT
        public const GLuint GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT = 0x850D;
        #endregion GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT

        #region GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT
        public const GLuint GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT = 0x850E;
        #endregion GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT

        #region GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT
        public const GLuint GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT = 0x850F;
        #endregion GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT

        #region GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT
        public const GLuint GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT = 0x8510;
        #endregion GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT

        #region GL_MAX_SHININESS_NV
        public const GLuint GL_MAX_SHININESS_NV = 0x8504;
        #endregion GL_MAX_SHININESS_NV

        #region GL_MAX_SPOT_EXPONENT_NV
        public const GLuint GL_MAX_SPOT_EXPONENT_NV = 0x8505;
        #endregion GL_MAX_SPOT_EXPONENT_NV

        #region GL_VERTEX_ARRAY_RANGE_NV
        public const GLuint GL_VERTEX_ARRAY_RANGE_NV = 0x851D;
        #endregion GL_VERTEX_ARRAY_RANGE_NV

        #region GL_VERTEX_ARRAY_RANGE_LENGTH_NV
        public const GLuint GL_VERTEX_ARRAY_RANGE_LENGTH_NV = 0x851E;
        #endregion GL_VERTEX_ARRAY_RANGE_LENGTH_NV

        #region GL_VERTEX_ARRAY_RANGE_VALID_NV
        public const GLuint GL_VERTEX_ARRAY_RANGE_VALID_NV = 0x851F;
        #endregion GL_VERTEX_ARRAY_RANGE_VALID_NV

        #region GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV
        public const GLuint GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV = 0x8520;
        #endregion GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV

        #region GL_VERTEX_ARRAY_RANGE_POINTER_NV
        public const GLuint GL_VERTEX_ARRAY_RANGE_POINTER_NV = 0x8521;
        #endregion GL_VERTEX_ARRAY_RANGE_POINTER_NV

        #region GL_REGISTER_COMBINERS_NV
        public const GLuint GL_REGISTER_COMBINERS_NV = 0x8522;
        #endregion GL_REGISTER_COMBINERS_NV

        #region GL_VARIABLE_A_NV
        public const GLuint GL_VARIABLE_A_NV = 0x8523;
        #endregion GL_VARIABLE_A_NV

        #region GL_VARIABLE_B_NV
        public const GLuint GL_VARIABLE_B_NV = 0x8524;
        #endregion GL_VARIABLE_B_NV

        #region GL_VARIABLE_C_NV
        public const GLuint GL_VARIABLE_C_NV = 0x8525;
        #endregion GL_VARIABLE_C_NV

        #region GL_VARIABLE_D_NV
        public const GLuint GL_VARIABLE_D_NV = 0x8526;
        #endregion GL_VARIABLE_D_NV

        #region GL_VARIABLE_E_NV
        public const GLuint GL_VARIABLE_E_NV = 0x8527;
        #endregion GL_VARIABLE_E_NV

        #region GL_VARIABLE_F_NV
        public const GLuint GL_VARIABLE_F_NV = 0x8528;
        #endregion GL_VARIABLE_F_NV

        #region GL_VARIABLE_G_NV
        public const GLuint GL_VARIABLE_G_NV = 0x8529;
        #endregion GL_VARIABLE_G_NV

        #region GL_CONSTANT_COLOR0_NV
        public const GLuint GL_CONSTANT_COLOR0_NV = 0x852A;
        #endregion GL_CONSTANT_COLOR0_NV

        #region GL_CONSTANT_COLOR1_NV
        public const GLuint GL_CONSTANT_COLOR1_NV = 0x852B;
        #endregion GL_CONSTANT_COLOR1_NV

        #region GL_PRIMARY_COLOR_NV
        public const GLuint GL_PRIMARY_COLOR_NV = 0x852C;
        #endregion GL_PRIMARY_COLOR_NV

        #region GL_SECONDARY_COLOR_NV
        public const GLuint GL_SECONDARY_COLOR_NV = 0x852D;
        #endregion GL_SECONDARY_COLOR_NV

        #region GL_SPARE0_NV
        public const GLuint GL_SPARE0_NV = 0x852E;
        #endregion GL_SPARE0_NV

        #region GL_SPARE1_NV
        public const GLuint GL_SPARE1_NV = 0x852F;
        #endregion GL_SPARE1_NV

        #region GL_DISCARD_NV
        public const GLuint GL_DISCARD_NV = 0x8530;
        #endregion GL_DISCARD_NV

        #region GL_E_TIMES_F_NV
        public const GLuint GL_E_TIMES_F_NV = 0x8531;
        #endregion GL_E_TIMES_F_NV

        #region GL_SPARE0_PLUS_SECONDARY_COLOR_NV
        public const GLuint GL_SPARE0_PLUS_SECONDARY_COLOR_NV = 0x8532;
        #endregion GL_SPARE0_PLUS_SECONDARY_COLOR_NV

        #region GL_UNSIGNED_IDENTITY_NV
        public const GLuint GL_UNSIGNED_IDENTITY_NV = 0x8536;
        #endregion GL_UNSIGNED_IDENTITY_NV

        #region GL_UNSIGNED_INVERT_NV
        public const GLuint GL_UNSIGNED_INVERT_NV = 0x8537;
        #endregion GL_UNSIGNED_INVERT_NV

        #region GL_EXPAND_NORMAL_NV
        public const GLuint GL_EXPAND_NORMAL_NV = 0x8538;
        #endregion GL_EXPAND_NORMAL_NV

        #region GL_EXPAND_NEGATE_NV
        public const GLuint GL_EXPAND_NEGATE_NV = 0x8539;
        #endregion GL_EXPAND_NEGATE_NV

        #region GL_HALF_BIAS_NORMAL_NV
        public const GLuint GL_HALF_BIAS_NORMAL_NV = 0x853A;
        #endregion GL_HALF_BIAS_NORMAL_NV

        #region GL_HALF_BIAS_NEGATE_NV
        public const GLuint GL_HALF_BIAS_NEGATE_NV = 0x853B;
        #endregion GL_HALF_BIAS_NEGATE_NV

        #region GL_SIGNED_IDENTITY_NV
        public const GLuint GL_SIGNED_IDENTITY_NV = 0x853C;
        #endregion GL_SIGNED_IDENTITY_NV

        #region GL_SIGNED_NEGATE_NV
        public const GLuint GL_SIGNED_NEGATE_NV = 0x853D;
        #endregion GL_SIGNED_NEGATE_NV

        #region GL_SCALE_BY_TWO_NV
        public const GLuint GL_SCALE_BY_TWO_NV = 0x853E;
        #endregion GL_SCALE_BY_TWO_NV

        #region GL_SCALE_BY_FOUR_NV
        public const GLuint GL_SCALE_BY_FOUR_NV = 0x853F;
        #endregion GL_SCALE_BY_FOUR_NV

        #region GL_SCALE_BY_ONE_HALF_NV
        public const GLuint GL_SCALE_BY_ONE_HALF_NV = 0x8540;
        #endregion GL_SCALE_BY_ONE_HALF_NV

        #region GL_BIAS_BY_NEGATIVE_ONE_HALF_NV
        public const GLuint GL_BIAS_BY_NEGATIVE_ONE_HALF_NV = 0x8541;
        #endregion GL_BIAS_BY_NEGATIVE_ONE_HALF_NV

        #region GL_COMBINER_INPUT_NV
        public const GLuint GL_COMBINER_INPUT_NV = 0x8542;
        #endregion GL_COMBINER_INPUT_NV

        #region GL_COMBINER_MAPPING_NV
        public const GLuint GL_COMBINER_MAPPING_NV = 0x8543;
        #endregion GL_COMBINER_MAPPING_NV

        #region GL_COMBINER_COMPONENT_USAGE_NV
        public const GLuint GL_COMBINER_COMPONENT_USAGE_NV = 0x8544;
        #endregion GL_COMBINER_COMPONENT_USAGE_NV

        #region GL_COMBINER_AB_DOT_PRODUCT_NV
        public const GLuint GL_COMBINER_AB_DOT_PRODUCT_NV = 0x8545;
        #endregion GL_COMBINER_AB_DOT_PRODUCT_NV

        #region GL_COMBINER_CD_DOT_PRODUCT_NV
        public const GLuint GL_COMBINER_CD_DOT_PRODUCT_NV = 0x8546;
        #endregion GL_COMBINER_CD_DOT_PRODUCT_NV

        #region GL_COMBINER_MUX_SUM_NV
        public const GLuint GL_COMBINER_MUX_SUM_NV = 0x8547;
        #endregion GL_COMBINER_MUX_SUM_NV

        #region GL_COMBINER_SCALE_NV
        public const GLuint GL_COMBINER_SCALE_NV = 0x8548;
        #endregion GL_COMBINER_SCALE_NV

        #region GL_COMBINER_BIAS_NV
        public const GLuint GL_COMBINER_BIAS_NV = 0x8549;
        #endregion GL_COMBINER_BIAS_NV

        #region GL_COMBINER_AB_OUTPUT_NV
        public const GLuint GL_COMBINER_AB_OUTPUT_NV = 0x854A;
        #endregion GL_COMBINER_AB_OUTPUT_NV

        #region GL_COMBINER_CD_OUTPUT_NV
        public const GLuint GL_COMBINER_CD_OUTPUT_NV = 0x854B;
        #endregion GL_COMBINER_CD_OUTPUT_NV

        #region GL_COMBINER_SUM_OUTPUT_NV
        public const GLuint GL_COMBINER_SUM_OUTPUT_NV = 0x854C;
        #endregion GL_COMBINER_SUM_OUTPUT_NV

        #region GL_MAX_GENERAL_COMBINERS_NV
        public const GLuint GL_MAX_GENERAL_COMBINERS_NV = 0x854D;
        #endregion GL_MAX_GENERAL_COMBINERS_NV

        #region GL_NUM_GENERAL_COMBINERS_NV
        public const GLuint GL_NUM_GENERAL_COMBINERS_NV = 0x854E;
        #endregion GL_NUM_GENERAL_COMBINERS_NV

        #region GL_COLOR_SUM_CLAMP_NV
        public const GLuint GL_COLOR_SUM_CLAMP_NV = 0x854F;
        #endregion GL_COLOR_SUM_CLAMP_NV

        #region GL_COMBINER0_NV
        public const GLuint GL_COMBINER0_NV = 0x8550;
        #endregion GL_COMBINER0_NV

        #region GL_COMBINER1_NV
        public const GLuint GL_COMBINER1_NV = 0x8551;
        #endregion GL_COMBINER1_NV

        #region GL_COMBINER2_NV
        public const GLuint GL_COMBINER2_NV = 0x8552;
        #endregion GL_COMBINER2_NV

        #region GL_COMBINER3_NV
        public const GLuint GL_COMBINER3_NV = 0x8553;
        #endregion GL_COMBINER3_NV

        #region GL_COMBINER4_NV
        public const GLuint GL_COMBINER4_NV = 0x8554;
        #endregion GL_COMBINER4_NV

        #region GL_COMBINER5_NV
        public const GLuint GL_COMBINER5_NV = 0x8555;
        #endregion GL_COMBINER5_NV

        #region GL_COMBINER6_NV
        public const GLuint GL_COMBINER6_NV = 0x8556;
        #endregion GL_COMBINER6_NV

        #region GL_COMBINER7_NV
        public const GLuint GL_COMBINER7_NV = 0x8557;
        #endregion GL_COMBINER7_NV

        #region GL_FOG_DISTANCE_MODE_NV
        public const GLuint GL_FOG_DISTANCE_MODE_NV = 0x855A;
        #endregion GL_FOG_DISTANCE_MODE_NV

        #region GL_EYE_RADIAL_NV
        public const GLuint GL_EYE_RADIAL_NV = 0x855B;
        #endregion GL_EYE_RADIAL_NV

        #region GL_EYE_PLANE_ABSOLUTE_NV
        public const GLuint GL_EYE_PLANE_ABSOLUTE_NV = 0x855C;
        #endregion GL_EYE_PLANE_ABSOLUTE_NV

        #region GL_EMBOSS_LIGHT_NV
        public const GLuint GL_EMBOSS_LIGHT_NV = 0x855D;
        #endregion GL_EMBOSS_LIGHT_NV

        #region GL_EMBOSS_CONSTANT_NV
        public const GLuint GL_EMBOSS_CONSTANT_NV = 0x855E;
        #endregion GL_EMBOSS_CONSTANT_NV

        #region GL_EMBOSS_MAP_NV
        public const GLuint GL_EMBOSS_MAP_NV = 0x855F;
        #endregion GL_EMBOSS_MAP_NV

        #region GL_COMBINE4_NV
        public const GLuint GL_COMBINE4_NV = 0x8503;
        #endregion GL_COMBINE4_NV

        #region GL_SOURCE3_RGB_NV
        public const GLuint GL_SOURCE3_RGB_NV = 0x8583;
        #endregion GL_SOURCE3_RGB_NV

        #region GL_SOURCE3_ALPHA_NV
        public const GLuint GL_SOURCE3_ALPHA_NV = 0x858B;
        #endregion GL_SOURCE3_ALPHA_NV

        #region GL_OPERAND3_RGB_NV
        public const GLuint GL_OPERAND3_RGB_NV = 0x8593;
        #endregion GL_OPERAND3_RGB_NV

        #region GL_OPERAND3_ALPHA_NV
        public const GLuint GL_OPERAND3_ALPHA_NV = 0x859B;
        #endregion GL_OPERAND3_ALPHA_NV

        #region GL_CULL_VERTEX_IBM
        public const GLuint GL_CULL_VERTEX_IBM = 103050;
        #endregion GL_CULL_VERTEX_IBM

        #region GL_VERTEX_ARRAY_LIST_IBM
        public const GLuint GL_VERTEX_ARRAY_LIST_IBM = 103070;
        #endregion GL_VERTEX_ARRAY_LIST_IBM

        #region GL_NORMAL_ARRAY_LIST_IBM
        public const GLuint GL_NORMAL_ARRAY_LIST_IBM = 103071;
        #endregion GL_NORMAL_ARRAY_LIST_IBM

        #region GL_COLOR_ARRAY_LIST_IBM
        public const GLuint GL_COLOR_ARRAY_LIST_IBM = 103072;
        #endregion GL_COLOR_ARRAY_LIST_IBM

        #region GL_INDEX_ARRAY_LIST_IBM
        public const GLuint GL_INDEX_ARRAY_LIST_IBM = 103073;
        #endregion GL_INDEX_ARRAY_LIST_IBM

        #region GL_TEXTURE_COORD_ARRAY_LIST_IBM
        public const GLuint GL_TEXTURE_COORD_ARRAY_LIST_IBM = 103074;
        #endregion GL_TEXTURE_COORD_ARRAY_LIST_IBM

        #region GL_EDGE_FLAG_ARRAY_LIST_IBM
        public const GLuint GL_EDGE_FLAG_ARRAY_LIST_IBM = 103075;
        #endregion GL_EDGE_FLAG_ARRAY_LIST_IBM

        #region GL_FOG_COORDINATE_ARRAY_LIST_IBM
        public const GLuint GL_FOG_COORDINATE_ARRAY_LIST_IBM = 103076;
        #endregion GL_FOG_COORDINATE_ARRAY_LIST_IBM

        #region GL_SECONDARY_COLOR_ARRAY_LIST_IBM
        public const GLuint GL_SECONDARY_COLOR_ARRAY_LIST_IBM = 103077;
        #endregion GL_SECONDARY_COLOR_ARRAY_LIST_IBM

        #region GL_VERTEX_ARRAY_LIST_STRIDE_IBM
        public const GLuint GL_VERTEX_ARRAY_LIST_STRIDE_IBM = 103080;
        #endregion GL_VERTEX_ARRAY_LIST_STRIDE_IBM

        #region GL_NORMAL_ARRAY_LIST_STRIDE_IBM
        public const GLuint GL_NORMAL_ARRAY_LIST_STRIDE_IBM = 103081;
        #endregion GL_NORMAL_ARRAY_LIST_STRIDE_IBM

        #region GL_COLOR_ARRAY_LIST_STRIDE_IBM
        public const GLuint GL_COLOR_ARRAY_LIST_STRIDE_IBM = 103082;
        #endregion GL_COLOR_ARRAY_LIST_STRIDE_IBM

        #region GL_INDEX_ARRAY_LIST_STRIDE_IBM
        public const GLuint GL_INDEX_ARRAY_LIST_STRIDE_IBM = 103083;
        #endregion GL_INDEX_ARRAY_LIST_STRIDE_IBM

        #region GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM
        public const GLuint GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM = 103084;
        #endregion GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM

        #region GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM
        public const GLuint GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM = 103085;
        #endregion GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM

        #region GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM
        public const GLuint GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM = 103086;
        #endregion GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM

        #region GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM
        public const GLuint GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM = 103087;
        #endregion GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM

        #region GL_YCRCB_SGIX
        public const GLuint GL_YCRCB_SGIX = 0x8318;
        #endregion GL_YCRCB_SGIX

        #region GL_YCRCBA_SGIX
        public const GLuint GL_YCRCBA_SGIX = 0x8319;
        #endregion GL_YCRCBA_SGIX

        #region GL_DEPTH_PASS_INSTRUMENT_SGIX
        public const GLuint GL_DEPTH_PASS_INSTRUMENT_SGIX = 0x8310;
        #endregion GL_DEPTH_PASS_INSTRUMENT_SGIX

        #region GL_DEPTH_PASS_INSTRUMENT_COUNTERS_SGIX
        public const GLuint GL_DEPTH_PASS_INSTRUMENT_COUNTERS_SGIX = 0x8311;
        #endregion GL_DEPTH_PASS_INSTRUMENT_COUNTERS_SGIX

        #region GL_DEPTH_PASS_INSTRUMENT_MAX_SGIX
        public const GLuint GL_DEPTH_PASS_INSTRUMENT_MAX_SGIX = 0x8312;
        #endregion GL_DEPTH_PASS_INSTRUMENT_MAX_SGIX

        #region GL_COMPRESSED_RGB_FXT1_3DFX
        public const GLuint GL_COMPRESSED_RGB_FXT1_3DFX = 0x86B0;
        #endregion GL_COMPRESSED_RGB_FXT1_3DFX

        #region GL_COMPRESSED_RGBA_FXT1_3DFX
        public const GLuint GL_COMPRESSED_RGBA_FXT1_3DFX = 0x86B1;
        #endregion GL_COMPRESSED_RGBA_FXT1_3DFX

        #region GL_MULTISAMPLE_3DFX
        public const GLuint GL_MULTISAMPLE_3DFX = 0x86B2;
        #endregion GL_MULTISAMPLE_3DFX

        #region GL_SAMPLE_BUFFERS_3DFX
        public const GLuint GL_SAMPLE_BUFFERS_3DFX = 0x86B3;
        #endregion GL_SAMPLE_BUFFERS_3DFX

        #region GL_SAMPLES_3DFX
        public const GLuint GL_SAMPLES_3DFX = 0x86B4;
        #endregion GL_SAMPLES_3DFX

        #region GL_MULTISAMPLE_BIT_3DFX
        public const GLuint GL_MULTISAMPLE_BIT_3DFX = 0x20000000;
        #endregion GL_MULTISAMPLE_BIT_3DFX

        #region GL_MULTISAMPLE_EXT
        public const GLuint GL_MULTISAMPLE_EXT = 0x809D;
        #endregion GL_MULTISAMPLE_EXT

        #region GL_SAMPLE_ALPHA_TO_MASK_EXT
        public const GLuint GL_SAMPLE_ALPHA_TO_MASK_EXT = 0x809E;
        #endregion GL_SAMPLE_ALPHA_TO_MASK_EXT

        #region GL_SAMPLE_ALPHA_TO_ONE_EXT
        public const GLuint GL_SAMPLE_ALPHA_TO_ONE_EXT = 0x809F;
        #endregion GL_SAMPLE_ALPHA_TO_ONE_EXT

        #region GL_SAMPLE_MASK_EXT
        public const GLuint GL_SAMPLE_MASK_EXT = 0x80A0;
        #endregion GL_SAMPLE_MASK_EXT

        #region GL_1PASS_EXT
        public const GLuint GL_1PASS_EXT = 0x80A1;
        #endregion GL_1PASS_EXT

        #region GL_2PASS_0_EXT
        public const GLuint GL_2PASS_0_EXT = 0x80A2;
        #endregion GL_2PASS_0_EXT

        #region GL_2PASS_1_EXT
        public const GLuint GL_2PASS_1_EXT = 0x80A3;
        #endregion GL_2PASS_1_EXT

        #region GL_4PASS_0_EXT
        public const GLuint GL_4PASS_0_EXT = 0x80A4;
        #endregion GL_4PASS_0_EXT

        #region GL_4PASS_1_EXT
        public const GLuint GL_4PASS_1_EXT = 0x80A5;
        #endregion GL_4PASS_1_EXT

        #region GL_4PASS_2_EXT
        public const GLuint GL_4PASS_2_EXT = 0x80A6;
        #endregion GL_4PASS_2_EXT

        #region GL_4PASS_3_EXT
        public const GLuint GL_4PASS_3_EXT = 0x80A7;
        #endregion GL_4PASS_3_EXT

        #region GL_SAMPLE_BUFFERS_EXT
        public const GLuint GL_SAMPLE_BUFFERS_EXT = 0x80A8;
        #endregion GL_SAMPLE_BUFFERS_EXT

        #region GL_SAMPLES_EXT
        public const GLuint GL_SAMPLES_EXT = 0x80A9;
        #endregion GL_SAMPLES_EXT

        #region GL_SAMPLE_MASK_VALUE_EXT
        public const GLuint GL_SAMPLE_MASK_VALUE_EXT = 0x80AA;
        #endregion GL_SAMPLE_MASK_VALUE_EXT

        #region GL_SAMPLE_MASK_INVERT_EXT
        public const GLuint GL_SAMPLE_MASK_INVERT_EXT = 0x80AB;
        #endregion GL_SAMPLE_MASK_INVERT_EXT

        #region GL_SAMPLE_PATTERN_EXT
        public const GLuint GL_SAMPLE_PATTERN_EXT = 0x80AC;
        #endregion GL_SAMPLE_PATTERN_EXT

        #region GL_MULTISAMPLE_BIT_EXT
        public const GLuint GL_MULTISAMPLE_BIT_EXT = 0x20000000;
        #endregion GL_MULTISAMPLE_BIT_EXT

        #region GL_DOT3_RGB_EXT
        public const GLuint GL_DOT3_RGB_EXT = 0x8740;
        #endregion GL_DOT3_RGB_EXT

        #region GL_DOT3_RGBA_EXT
        public const GLuint GL_DOT3_RGBA_EXT = 0x8741;
        #endregion GL_DOT3_RGBA_EXT

        #region GL_MIRROR_CLAMP_ATI
        public const GLuint GL_MIRROR_CLAMP_ATI = 0x8742;
        #endregion GL_MIRROR_CLAMP_ATI

        #region GL_MIRROR_CLAMP_TO_EDGE_ATI
        public const GLuint GL_MIRROR_CLAMP_TO_EDGE_ATI = 0x8743;
        #endregion GL_MIRROR_CLAMP_TO_EDGE_ATI

        #region GL_ALL_COMPLETED_NV
        public const GLuint GL_ALL_COMPLETED_NV = 0x84F2;
        #endregion GL_ALL_COMPLETED_NV

        #region GL_FENCE_STATUS_NV
        public const GLuint GL_FENCE_STATUS_NV = 0x84F3;
        #endregion GL_FENCE_STATUS_NV

        #region GL_FENCE_CONDITION_NV
        public const GLuint GL_FENCE_CONDITION_NV = 0x84F4;
        #endregion GL_FENCE_CONDITION_NV

        #region GL_MIRRORED_REPEAT_IBM
        public const GLuint GL_MIRRORED_REPEAT_IBM = 0x8370;
        #endregion GL_MIRRORED_REPEAT_IBM

        #region GL_EVAL_2D_NV
        public const GLuint GL_EVAL_2D_NV = 0x86C0;
        #endregion GL_EVAL_2D_NV

        #region GL_EVAL_TRIANGULAR_2D_NV
        public const GLuint GL_EVAL_TRIANGULAR_2D_NV = 0x86C1;
        #endregion GL_EVAL_TRIANGULAR_2D_NV

        #region GL_MAP_TESSELLATION_NV
        public const GLuint GL_MAP_TESSELLATION_NV = 0x86C2;
        #endregion GL_MAP_TESSELLATION_NV

        #region GL_MAP_ATTRIB_U_ORDER_NV
        public const GLuint GL_MAP_ATTRIB_U_ORDER_NV = 0x86C3;
        #endregion GL_MAP_ATTRIB_U_ORDER_NV

        #region GL_MAP_ATTRIB_V_ORDER_NV
        public const GLuint GL_MAP_ATTRIB_V_ORDER_NV = 0x86C4;
        #endregion GL_MAP_ATTRIB_V_ORDER_NV

        #region GL_EVAL_FRACTIONAL_TESSELLATION_NV
        public const GLuint GL_EVAL_FRACTIONAL_TESSELLATION_NV = 0x86C5;
        #endregion GL_EVAL_FRACTIONAL_TESSELLATION_NV

        #region GL_EVAL_VERTEX_ATTRIB0_NV
        public const GLuint GL_EVAL_VERTEX_ATTRIB0_NV = 0x86C6;
        #endregion GL_EVAL_VERTEX_ATTRIB0_NV

        #region GL_EVAL_VERTEX_ATTRIB1_NV
        public const GLuint GL_EVAL_VERTEX_ATTRIB1_NV = 0x86C7;
        #endregion GL_EVAL_VERTEX_ATTRIB1_NV

        #region GL_EVAL_VERTEX_ATTRIB2_NV
        public const GLuint GL_EVAL_VERTEX_ATTRIB2_NV = 0x86C8;
        #endregion GL_EVAL_VERTEX_ATTRIB2_NV

        #region GL_EVAL_VERTEX_ATTRIB3_NV
        public const GLuint GL_EVAL_VERTEX_ATTRIB3_NV = 0x86C9;
        #endregion GL_EVAL_VERTEX_ATTRIB3_NV

        #region GL_EVAL_VERTEX_ATTRIB4_NV
        public const GLuint GL_EVAL_VERTEX_ATTRIB4_NV = 0x86CA;
        #endregion GL_EVAL_VERTEX_ATTRIB4_NV

        #region GL_EVAL_VERTEX_ATTRIB5_NV
        public const GLuint GL_EVAL_VERTEX_ATTRIB5_NV = 0x86CB;
        #endregion GL_EVAL_VERTEX_ATTRIB5_NV

        #region GL_EVAL_VERTEX_ATTRIB6_NV
        public const GLuint GL_EVAL_VERTEX_ATTRIB6_NV = 0x86CC;
        #endregion GL_EVAL_VERTEX_ATTRIB6_NV

        #region GL_EVAL_VERTEX_ATTRIB7_NV
        public const GLuint GL_EVAL_VERTEX_ATTRIB7_NV = 0x86CD;
        #endregion GL_EVAL_VERTEX_ATTRIB7_NV

        #region GL_EVAL_VERTEX_ATTRIB8_NV
        public const GLuint GL_EVAL_VERTEX_ATTRIB8_NV = 0x86CE;
        #endregion GL_EVAL_VERTEX_ATTRIB8_NV

        #region GL_EVAL_VERTEX_ATTRIB9_NV
        public const GLuint GL_EVAL_VERTEX_ATTRIB9_NV = 0x86CF;
        #endregion GL_EVAL_VERTEX_ATTRIB9_NV

        #region GL_EVAL_VERTEX_ATTRIB10_NV
        public const GLuint GL_EVAL_VERTEX_ATTRIB10_NV = 0x86D0;
        #endregion GL_EVAL_VERTEX_ATTRIB10_NV

        #region GL_EVAL_VERTEX_ATTRIB11_NV
        public const GLuint GL_EVAL_VERTEX_ATTRIB11_NV = 0x86D1;
        #endregion GL_EVAL_VERTEX_ATTRIB11_NV

        #region GL_EVAL_VERTEX_ATTRIB12_NV
        public const GLuint GL_EVAL_VERTEX_ATTRIB12_NV = 0x86D2;
        #endregion GL_EVAL_VERTEX_ATTRIB12_NV

        #region GL_EVAL_VERTEX_ATTRIB13_NV
        public const GLuint GL_EVAL_VERTEX_ATTRIB13_NV = 0x86D3;
        #endregion GL_EVAL_VERTEX_ATTRIB13_NV

        #region GL_EVAL_VERTEX_ATTRIB14_NV
        public const GLuint GL_EVAL_VERTEX_ATTRIB14_NV = 0x86D4;
        #endregion GL_EVAL_VERTEX_ATTRIB14_NV

        #region GL_EVAL_VERTEX_ATTRIB15_NV
        public const GLuint GL_EVAL_VERTEX_ATTRIB15_NV = 0x86D5;
        #endregion GL_EVAL_VERTEX_ATTRIB15_NV

        #region GL_MAX_MAP_TESSELLATION_NV
        public const GLuint GL_MAX_MAP_TESSELLATION_NV = 0x86D6;
        #endregion GL_MAX_MAP_TESSELLATION_NV

        #region GL_MAX_RATIONAL_EVAL_ORDER_NV
        public const GLuint GL_MAX_RATIONAL_EVAL_ORDER_NV = 0x86D7;
        #endregion GL_MAX_RATIONAL_EVAL_ORDER_NV

        #region GL_DEPTH_STENCIL_NV
        public const GLuint GL_DEPTH_STENCIL_NV = 0x84F9;
        #endregion GL_DEPTH_STENCIL_NV

        #region GL_UNSIGNED_INT_24_8_NV
        public const GLuint GL_UNSIGNED_INT_24_8_NV = 0x84FA;
        #endregion GL_UNSIGNED_INT_24_8_NV

        #region GL_PER_STAGE_CONSTANTS_NV
        public const GLuint GL_PER_STAGE_CONSTANTS_NV = 0x8535;
        #endregion GL_PER_STAGE_CONSTANTS_NV

        #region GL_TEXTURE_RECTANGLE_NV
        public const GLuint GL_TEXTURE_RECTANGLE_NV = 0x84F5;
        #endregion GL_TEXTURE_RECTANGLE_NV

        #region GL_TEXTURE_BINDING_RECTANGLE_NV
        public const GLuint GL_TEXTURE_BINDING_RECTANGLE_NV = 0x84F6;
        #endregion GL_TEXTURE_BINDING_RECTANGLE_NV

        #region GL_PROXY_TEXTURE_RECTANGLE_NV
        public const GLuint GL_PROXY_TEXTURE_RECTANGLE_NV = 0x84F7;
        #endregion GL_PROXY_TEXTURE_RECTANGLE_NV

        #region GL_MAX_RECTANGLE_TEXTURE_SIZE_NV
        public const GLuint GL_MAX_RECTANGLE_TEXTURE_SIZE_NV = 0x84F8;
        #endregion GL_MAX_RECTANGLE_TEXTURE_SIZE_NV

        #region GL_OFFSET_TEXTURE_RECTANGLE_NV
        public const GLuint GL_OFFSET_TEXTURE_RECTANGLE_NV = 0x864C;
        #endregion GL_OFFSET_TEXTURE_RECTANGLE_NV

        #region GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV
        public const GLuint GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV = 0x864D;
        #endregion GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV

        #region GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV
        public const GLuint GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV = 0x864E;
        #endregion GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV

        #region GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV
        public const GLuint GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV = 0x86D9;
        #endregion GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV

        #region GL_UNSIGNED_INT_S8_S8_8_8_NV
        public const GLuint GL_UNSIGNED_INT_S8_S8_8_8_NV = 0x86DA;
        #endregion GL_UNSIGNED_INT_S8_S8_8_8_NV

        #region GL_UNSIGNED_INT_8_8_S8_S8_REV_NV
        public const GLuint GL_UNSIGNED_INT_8_8_S8_S8_REV_NV = 0x86DB;
        #endregion GL_UNSIGNED_INT_8_8_S8_S8_REV_NV

        #region GL_DSDT_MAG_INTENSITY_NV
        public const GLuint GL_DSDT_MAG_INTENSITY_NV = 0x86DC;
        #endregion GL_DSDT_MAG_INTENSITY_NV

        #region GL_SHADER_CONSISTENT_NV
        public const GLuint GL_SHADER_CONSISTENT_NV = 0x86DD;
        #endregion GL_SHADER_CONSISTENT_NV

        #region GL_TEXTURE_SHADER_NV
        public const GLuint GL_TEXTURE_SHADER_NV = 0x86DE;
        #endregion GL_TEXTURE_SHADER_NV

        #region GL_SHADER_OPERATION_NV
        public const GLuint GL_SHADER_OPERATION_NV = 0x86DF;
        #endregion GL_SHADER_OPERATION_NV

        #region GL_CULL_MODES_NV
        public const GLuint GL_CULL_MODES_NV = 0x86E0;
        #endregion GL_CULL_MODES_NV

        #region GL_OFFSET_TEXTURE_MATRIX_NV
        public const GLuint GL_OFFSET_TEXTURE_MATRIX_NV = 0x86E1;
        #endregion GL_OFFSET_TEXTURE_MATRIX_NV

        #region GL_OFFSET_TEXTURE_SCALE_NV
        public const GLuint GL_OFFSET_TEXTURE_SCALE_NV = 0x86E2;
        #endregion GL_OFFSET_TEXTURE_SCALE_NV

        #region GL_OFFSET_TEXTURE_BIAS_NV
        public const GLuint GL_OFFSET_TEXTURE_BIAS_NV = 0x86E3;
        #endregion GL_OFFSET_TEXTURE_BIAS_NV

        #region GL_OFFSET_TEXTURE_2D_MATRIX_NV
        public const GLuint GL_OFFSET_TEXTURE_2D_MATRIX_NV = GL_OFFSET_TEXTURE_MATRIX_NV;
        #endregion GL_OFFSET_TEXTURE_2D_MATRIX_NV

        #region GL_OFFSET_TEXTURE_2D_SCALE_NV
        public const GLuint GL_OFFSET_TEXTURE_2D_SCALE_NV = GL_OFFSET_TEXTURE_SCALE_NV;
        #endregion GL_OFFSET_TEXTURE_2D_SCALE_NV

        #region GL_OFFSET_TEXTURE_2D_BIAS_NV
        public const GLuint GL_OFFSET_TEXTURE_2D_BIAS_NV = GL_OFFSET_TEXTURE_BIAS_NV;
        #endregion GL_OFFSET_TEXTURE_2D_BIAS_NV

        #region GL_PREVIOUS_TEXTURE_INPUT_NV
        public const GLuint GL_PREVIOUS_TEXTURE_INPUT_NV = 0x86E4;
        #endregion GL_PREVIOUS_TEXTURE_INPUT_NV

        #region GL_CONST_EYE_NV
        public const GLuint GL_CONST_EYE_NV = 0x86E5;
        #endregion GL_CONST_EYE_NV

        #region GL_PASS_THROUGH_NV
        public const GLuint GL_PASS_THROUGH_NV = 0x86E6;
        #endregion GL_PASS_THROUGH_NV

        #region GL_CULL_FRAGMENT_NV
        public const GLuint GL_CULL_FRAGMENT_NV = 0x86E7;
        #endregion GL_CULL_FRAGMENT_NV

        #region GL_OFFSET_TEXTURE_2D_NV
        public const GLuint GL_OFFSET_TEXTURE_2D_NV = 0x86E8;
        #endregion GL_OFFSET_TEXTURE_2D_NV

        #region GL_DEPENDENT_AR_TEXTURE_2D_NV
        public const GLuint GL_DEPENDENT_AR_TEXTURE_2D_NV = 0x86E9;
        #endregion GL_DEPENDENT_AR_TEXTURE_2D_NV

        #region GL_DEPENDENT_GB_TEXTURE_2D_NV
        public const GLuint GL_DEPENDENT_GB_TEXTURE_2D_NV = 0x86EA;
        #endregion GL_DEPENDENT_GB_TEXTURE_2D_NV

        #region GL_DOT_PRODUCT_NV
        public const GLuint GL_DOT_PRODUCT_NV = 0x86EC;
        #endregion GL_DOT_PRODUCT_NV

        #region GL_DOT_PRODUCT_DEPTH_REPLACE_NV
        public const GLuint GL_DOT_PRODUCT_DEPTH_REPLACE_NV = 0x86ED;
        #endregion GL_DOT_PRODUCT_DEPTH_REPLACE_NV

        #region GL_DOT_PRODUCT_TEXTURE_2D_NV
        public const GLuint GL_DOT_PRODUCT_TEXTURE_2D_NV = 0x86EE;
        #endregion GL_DOT_PRODUCT_TEXTURE_2D_NV

        #region GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV
        public const GLuint GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV = 0x86F0;
        #endregion GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV

        #region GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV
        public const GLuint GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV = 0x86F1;
        #endregion GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV

        #region GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV
        public const GLuint GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV = 0x86F2;
        #endregion GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV

        #region GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV
        public const GLuint GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV = 0x86F3;
        #endregion GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV

        #region GL_HILO_NV
        public const GLuint GL_HILO_NV = 0x86F4;
        #endregion GL_HILO_NV

        #region GL_DSDT_NV
        public const GLuint GL_DSDT_NV = 0x86F5;
        #endregion GL_DSDT_NV

        #region GL_DSDT_MAG_NV
        public const GLuint GL_DSDT_MAG_NV = 0x86F6;
        #endregion GL_DSDT_MAG_NV

        #region GL_DSDT_MAG_VIB_NV
        public const GLuint GL_DSDT_MAG_VIB_NV = 0x86F7;
        #endregion GL_DSDT_MAG_VIB_NV

        #region GL_HILO16_NV
        public const GLuint GL_HILO16_NV = 0x86F8;
        #endregion GL_HILO16_NV

        #region GL_SIGNED_HILO_NV
        public const GLuint GL_SIGNED_HILO_NV = 0x86F9;
        #endregion GL_SIGNED_HILO_NV

        #region GL_SIGNED_HILO16_NV
        public const GLuint GL_SIGNED_HILO16_NV = 0x86FA;
        #endregion GL_SIGNED_HILO16_NV

        #region GL_SIGNED_RGBA_NV
        public const GLuint GL_SIGNED_RGBA_NV = 0x86FB;
        #endregion GL_SIGNED_RGBA_NV

        #region GL_SIGNED_RGBA8_NV
        public const GLuint GL_SIGNED_RGBA8_NV = 0x86FC;
        #endregion GL_SIGNED_RGBA8_NV

        #region GL_SIGNED_RGB_NV
        public const GLuint GL_SIGNED_RGB_NV = 0x86FE;
        #endregion GL_SIGNED_RGB_NV

        #region GL_SIGNED_RGB8_NV
        public const GLuint GL_SIGNED_RGB8_NV = 0x86FF;
        #endregion GL_SIGNED_RGB8_NV

        #region GL_SIGNED_LUMINANCE_NV
        public const GLuint GL_SIGNED_LUMINANCE_NV = 0x8701;
        #endregion GL_SIGNED_LUMINANCE_NV

        #region GL_SIGNED_LUMINANCE8_NV
        public const GLuint GL_SIGNED_LUMINANCE8_NV = 0x8702;
        #endregion GL_SIGNED_LUMINANCE8_NV

        #region GL_SIGNED_LUMINANCE_ALPHA_NV
        public const GLuint GL_SIGNED_LUMINANCE_ALPHA_NV = 0x8703;
        #endregion GL_SIGNED_LUMINANCE_ALPHA_NV

        #region GL_SIGNED_LUMINANCE8_ALPHA8_NV
        public const GLuint GL_SIGNED_LUMINANCE8_ALPHA8_NV = 0x8704;
        #endregion GL_SIGNED_LUMINANCE8_ALPHA8_NV

        #region GL_SIGNED_ALPHA_NV
        public const GLuint GL_SIGNED_ALPHA_NV = 0x8705;
        #endregion GL_SIGNED_ALPHA_NV

        #region GL_SIGNED_ALPHA8_NV
        public const GLuint GL_SIGNED_ALPHA8_NV = 0x8706;
        #endregion GL_SIGNED_ALPHA8_NV

        #region GL_SIGNED_INTENSITY_NV
        public const GLuint GL_SIGNED_INTENSITY_NV = 0x8707;
        #endregion GL_SIGNED_INTENSITY_NV

        #region GL_SIGNED_INTENSITY8_NV
        public const GLuint GL_SIGNED_INTENSITY8_NV = 0x8708;
        #endregion GL_SIGNED_INTENSITY8_NV

        #region GL_DSDT8_NV
        public const GLuint GL_DSDT8_NV = 0x8709;
        #endregion GL_DSDT8_NV

        #region GL_DSDT8_MAG8_NV
        public const GLuint GL_DSDT8_MAG8_NV = 0x870A;
        #endregion GL_DSDT8_MAG8_NV

        #region GL_DSDT8_MAG8_INTENSITY8_NV
        public const GLuint GL_DSDT8_MAG8_INTENSITY8_NV = 0x870B;
        #endregion GL_DSDT8_MAG8_INTENSITY8_NV

        #region GL_SIGNED_RGB_UNSIGNED_ALPHA_NV
        public const GLuint GL_SIGNED_RGB_UNSIGNED_ALPHA_NV = 0x870C;
        #endregion GL_SIGNED_RGB_UNSIGNED_ALPHA_NV

        #region GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV
        public const GLuint GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV = 0x870D;
        #endregion GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV

        #region GL_HI_SCALE_NV
        public const GLuint GL_HI_SCALE_NV = 0x870E;
        #endregion GL_HI_SCALE_NV

        #region GL_LO_SCALE_NV
        public const GLuint GL_LO_SCALE_NV = 0x870F;
        #endregion GL_LO_SCALE_NV

        #region GL_DS_SCALE_NV
        public const GLuint GL_DS_SCALE_NV = 0x8710;
        #endregion GL_DS_SCALE_NV

        #region GL_DT_SCALE_NV
        public const GLuint GL_DT_SCALE_NV = 0x8711;
        #endregion GL_DT_SCALE_NV

        #region GL_MAGNITUDE_SCALE_NV
        public const GLuint GL_MAGNITUDE_SCALE_NV = 0x8712;
        #endregion GL_MAGNITUDE_SCALE_NV

        #region GL_VIBRANCE_SCALE_NV
        public const GLuint GL_VIBRANCE_SCALE_NV = 0x8713;
        #endregion GL_VIBRANCE_SCALE_NV

        #region GL_HI_BIAS_NV
        public const GLuint GL_HI_BIAS_NV = 0x8714;
        #endregion GL_HI_BIAS_NV

        #region GL_LO_BIAS_NV
        public const GLuint GL_LO_BIAS_NV = 0x8715;
        #endregion GL_LO_BIAS_NV

        #region GL_DS_BIAS_NV
        public const GLuint GL_DS_BIAS_NV = 0x8716;
        #endregion GL_DS_BIAS_NV

        #region GL_DT_BIAS_NV
        public const GLuint GL_DT_BIAS_NV = 0x8717;
        #endregion GL_DT_BIAS_NV

        #region GL_MAGNITUDE_BIAS_NV
        public const GLuint GL_MAGNITUDE_BIAS_NV = 0x8718;
        #endregion GL_MAGNITUDE_BIAS_NV

        #region GL_VIBRANCE_BIAS_NV
        public const GLuint GL_VIBRANCE_BIAS_NV = 0x8719;
        #endregion GL_VIBRANCE_BIAS_NV

        #region GL_TEXTURE_BORDER_VALUES_NV
        public const GLuint GL_TEXTURE_BORDER_VALUES_NV = 0x871A;
        #endregion GL_TEXTURE_BORDER_VALUES_NV

        #region GL_TEXTURE_HI_SIZE_NV
        public const GLuint GL_TEXTURE_HI_SIZE_NV = 0x871B;
        #endregion GL_TEXTURE_HI_SIZE_NV

        #region GL_TEXTURE_LO_SIZE_NV
        public const GLuint GL_TEXTURE_LO_SIZE_NV = 0x871C;
        #endregion GL_TEXTURE_LO_SIZE_NV

        #region GL_TEXTURE_DS_SIZE_NV
        public const GLuint GL_TEXTURE_DS_SIZE_NV = 0x871D;
        #endregion GL_TEXTURE_DS_SIZE_NV

        #region GL_TEXTURE_DT_SIZE_NV
        public const GLuint GL_TEXTURE_DT_SIZE_NV = 0x871E;
        #endregion GL_TEXTURE_DT_SIZE_NV

        #region GL_TEXTURE_MAG_SIZE_NV
        public const GLuint GL_TEXTURE_MAG_SIZE_NV = 0x871F;
        #endregion GL_TEXTURE_MAG_SIZE_NV

        #region GL_DOT_PRODUCT_TEXTURE_3D_NV
        public const GLuint GL_DOT_PRODUCT_TEXTURE_3D_NV = 0x86EF;
        #endregion GL_DOT_PRODUCT_TEXTURE_3D_NV

        #region GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV
        public const GLuint GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV = 0x8533;
        #endregion GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV

        #region GL_VERTEX_PROGRAM_NV
        public const GLuint GL_VERTEX_PROGRAM_NV = 0x8620;
        #endregion GL_VERTEX_PROGRAM_NV

        #region GL_VERTEX_STATE_PROGRAM_NV
        public const GLuint GL_VERTEX_STATE_PROGRAM_NV = 0x8621;
        #endregion GL_VERTEX_STATE_PROGRAM_NV

        #region GL_ATTRIB_ARRAY_SIZE_NV
        public const GLuint GL_ATTRIB_ARRAY_SIZE_NV = 0x8623;
        #endregion GL_ATTRIB_ARRAY_SIZE_NV

        #region GL_ATTRIB_ARRAY_STRIDE_NV
        public const GLuint GL_ATTRIB_ARRAY_STRIDE_NV = 0x8624;
        #endregion GL_ATTRIB_ARRAY_STRIDE_NV

        #region GL_ATTRIB_ARRAY_TYPE_NV
        public const GLuint GL_ATTRIB_ARRAY_TYPE_NV = 0x8625;
        #endregion GL_ATTRIB_ARRAY_TYPE_NV

        #region GL_CURRENT_ATTRIB_NV
        public const GLuint GL_CURRENT_ATTRIB_NV = 0x8626;
        #endregion GL_CURRENT_ATTRIB_NV

        #region GL_PROGRAM_LENGTH_NV
        public const GLuint GL_PROGRAM_LENGTH_NV = 0x8627;
        #endregion GL_PROGRAM_LENGTH_NV

        #region GL_PROGRAM_STRING_NV
        public const GLuint GL_PROGRAM_STRING_NV = 0x8628;
        #endregion GL_PROGRAM_STRING_NV

        #region GL_MODELVIEW_PROJECTION_NV
        public const GLuint GL_MODELVIEW_PROJECTION_NV = 0x8629;
        #endregion GL_MODELVIEW_PROJECTION_NV

        #region GL_IDENTITY_NV
        public const GLuint GL_IDENTITY_NV = 0x862A;
        #endregion GL_IDENTITY_NV

        #region GL_INVERSE_NV
        public const GLuint GL_INVERSE_NV = 0x862B;
        #endregion GL_INVERSE_NV

        #region GL_TRANSPOSE_NV
        public const GLuint GL_TRANSPOSE_NV = 0x862C;
        #endregion GL_TRANSPOSE_NV

        #region GL_INVERSE_TRANSPOSE_NV
        public const GLuint GL_INVERSE_TRANSPOSE_NV = 0x862D;
        #endregion GL_INVERSE_TRANSPOSE_NV

        #region GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV
        public const GLuint GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV = 0x862E;
        #endregion GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV

        #region GL_MAX_TRACK_MATRICES_NV
        public const GLuint GL_MAX_TRACK_MATRICES_NV = 0x862F;
        #endregion GL_MAX_TRACK_MATRICES_NV

        #region GL_MATRIX0_NV
        public const GLuint GL_MATRIX0_NV = 0x8630;
        #endregion GL_MATRIX0_NV

        #region GL_MATRIX1_NV
        public const GLuint GL_MATRIX1_NV = 0x8631;
        #endregion GL_MATRIX1_NV

        #region GL_MATRIX2_NV
        public const GLuint GL_MATRIX2_NV = 0x8632;
        #endregion GL_MATRIX2_NV

        #region GL_MATRIX3_NV
        public const GLuint GL_MATRIX3_NV = 0x8633;
        #endregion GL_MATRIX3_NV

        #region GL_MATRIX4_NV
        public const GLuint GL_MATRIX4_NV = 0x8634;
        #endregion GL_MATRIX4_NV

        #region GL_MATRIX5_NV
        public const GLuint GL_MATRIX5_NV = 0x8635;
        #endregion GL_MATRIX5_NV

        #region GL_MATRIX6_NV
        public const GLuint GL_MATRIX6_NV = 0x8636;
        #endregion GL_MATRIX6_NV

        #region GL_MATRIX7_NV
        public const GLuint GL_MATRIX7_NV = 0x8637;
        #endregion GL_MATRIX7_NV

        #region GL_CURRENT_MATRIX_STACK_DEPTH_NV
        public const GLuint GL_CURRENT_MATRIX_STACK_DEPTH_NV = 0x8640;
        #endregion GL_CURRENT_MATRIX_STACK_DEPTH_NV

        #region GL_CURRENT_MATRIX_NV
        public const GLuint GL_CURRENT_MATRIX_NV = 0x8641;
        #endregion GL_CURRENT_MATRIX_NV

        #region GL_VERTEX_PROGRAM_POINT_SIZE_NV
        public const GLuint GL_VERTEX_PROGRAM_POINT_SIZE_NV = 0x8642;
        #endregion GL_VERTEX_PROGRAM_POINT_SIZE_NV

        #region GL_VERTEX_PROGRAM_TWO_SIDE_NV
        public const GLuint GL_VERTEX_PROGRAM_TWO_SIDE_NV = 0x8643;
        #endregion GL_VERTEX_PROGRAM_TWO_SIDE_NV

        #region GL_PROGRAM_PARAMETER_NV
        public const GLuint GL_PROGRAM_PARAMETER_NV = 0x8644;
        #endregion GL_PROGRAM_PARAMETER_NV

        #region GL_ATTRIB_ARRAY_POINTER_NV
        public const GLuint GL_ATTRIB_ARRAY_POINTER_NV = 0x8645;
        #endregion GL_ATTRIB_ARRAY_POINTER_NV

        #region GL_PROGRAM_TARGET_NV
        public const GLuint GL_PROGRAM_TARGET_NV = 0x8646;
        #endregion GL_PROGRAM_TARGET_NV

        #region GL_PROGRAM_RESIDENT_NV
        public const GLuint GL_PROGRAM_RESIDENT_NV = 0x8647;
        #endregion GL_PROGRAM_RESIDENT_NV

        #region GL_TRACK_MATRIX_NV
        public const GLuint GL_TRACK_MATRIX_NV = 0x8648;
        #endregion GL_TRACK_MATRIX_NV

        #region GL_TRACK_MATRIX_TRANSFORM_NV
        public const GLuint GL_TRACK_MATRIX_TRANSFORM_NV = 0x8649;
        #endregion GL_TRACK_MATRIX_TRANSFORM_NV

        #region GL_VERTEX_PROGRAM_BINDING_NV
        public const GLuint GL_VERTEX_PROGRAM_BINDING_NV = 0x864A;
        #endregion GL_VERTEX_PROGRAM_BINDING_NV

        #region GL_PROGRAM_ERROR_POSITION_NV
        public const GLuint GL_PROGRAM_ERROR_POSITION_NV = 0x864B;
        #endregion GL_PROGRAM_ERROR_POSITION_NV

        #region GL_VERTEX_ATTRIB_ARRAY0_NV
        public const GLuint GL_VERTEX_ATTRIB_ARRAY0_NV = 0x8650;
        #endregion GL_VERTEX_ATTRIB_ARRAY0_NV

        #region GL_VERTEX_ATTRIB_ARRAY1_NV
        public const GLuint GL_VERTEX_ATTRIB_ARRAY1_NV = 0x8651;
        #endregion GL_VERTEX_ATTRIB_ARRAY1_NV

        #region GL_VERTEX_ATTRIB_ARRAY2_NV
        public const GLuint GL_VERTEX_ATTRIB_ARRAY2_NV = 0x8652;
        #endregion GL_VERTEX_ATTRIB_ARRAY2_NV

        #region GL_VERTEX_ATTRIB_ARRAY3_NV
        public const GLuint GL_VERTEX_ATTRIB_ARRAY3_NV = 0x8653;
        #endregion GL_VERTEX_ATTRIB_ARRAY3_NV

        #region GL_VERTEX_ATTRIB_ARRAY4_NV
        public const GLuint GL_VERTEX_ATTRIB_ARRAY4_NV = 0x8654;
        #endregion GL_VERTEX_ATTRIB_ARRAY4_NV

        #region GL_VERTEX_ATTRIB_ARRAY5_NV
        public const GLuint GL_VERTEX_ATTRIB_ARRAY5_NV = 0x8655;
        #endregion GL_VERTEX_ATTRIB_ARRAY5_NV

        #region GL_VERTEX_ATTRIB_ARRAY6_NV
        public const GLuint GL_VERTEX_ATTRIB_ARRAY6_NV = 0x8656;
        #endregion GL_VERTEX_ATTRIB_ARRAY6_NV

        #region GL_VERTEX_ATTRIB_ARRAY7_NV
        public const GLuint GL_VERTEX_ATTRIB_ARRAY7_NV = 0x8657;
        #endregion GL_VERTEX_ATTRIB_ARRAY7_NV

        #region GL_VERTEX_ATTRIB_ARRAY8_NV
        public const GLuint GL_VERTEX_ATTRIB_ARRAY8_NV = 0x8658;
        #endregion GL_VERTEX_ATTRIB_ARRAY8_NV

        #region GL_VERTEX_ATTRIB_ARRAY9_NV
        public const GLuint GL_VERTEX_ATTRIB_ARRAY9_NV = 0x8659;
        #endregion GL_VERTEX_ATTRIB_ARRAY9_NV

        #region GL_VERTEX_ATTRIB_ARRAY10_NV
        public const GLuint GL_VERTEX_ATTRIB_ARRAY10_NV = 0x865A;
        #endregion GL_VERTEX_ATTRIB_ARRAY10_NV

        #region GL_VERTEX_ATTRIB_ARRAY11_NV
        public const GLuint GL_VERTEX_ATTRIB_ARRAY11_NV = 0x865B;
        #endregion GL_VERTEX_ATTRIB_ARRAY11_NV

        #region GL_VERTEX_ATTRIB_ARRAY12_NV
        public const GLuint GL_VERTEX_ATTRIB_ARRAY12_NV = 0x865C;
        #endregion GL_VERTEX_ATTRIB_ARRAY12_NV

        #region GL_VERTEX_ATTRIB_ARRAY13_NV
        public const GLuint GL_VERTEX_ATTRIB_ARRAY13_NV = 0x865D;
        #endregion GL_VERTEX_ATTRIB_ARRAY13_NV

        #region GL_VERTEX_ATTRIB_ARRAY14_NV
        public const GLuint GL_VERTEX_ATTRIB_ARRAY14_NV = 0x865E;
        #endregion GL_VERTEX_ATTRIB_ARRAY14_NV

        #region GL_VERTEX_ATTRIB_ARRAY15_NV
        public const GLuint GL_VERTEX_ATTRIB_ARRAY15_NV = 0x865F;
        #endregion GL_VERTEX_ATTRIB_ARRAY15_NV

        #region GL_MAP1_VERTEX_ATTRIB0_4_NV
        public const GLuint GL_MAP1_VERTEX_ATTRIB0_4_NV = 0x8660;
        #endregion GL_MAP1_VERTEX_ATTRIB0_4_NV

        #region GL_MAP1_VERTEX_ATTRIB1_4_NV
        public const GLuint GL_MAP1_VERTEX_ATTRIB1_4_NV = 0x8661;
        #endregion GL_MAP1_VERTEX_ATTRIB1_4_NV

        #region GL_MAP1_VERTEX_ATTRIB2_4_NV
        public const GLuint GL_MAP1_VERTEX_ATTRIB2_4_NV = 0x8662;
        #endregion GL_MAP1_VERTEX_ATTRIB2_4_NV

        #region GL_MAP1_VERTEX_ATTRIB3_4_NV
        public const GLuint GL_MAP1_VERTEX_ATTRIB3_4_NV = 0x8663;
        #endregion GL_MAP1_VERTEX_ATTRIB3_4_NV

        #region GL_MAP1_VERTEX_ATTRIB4_4_NV
        public const GLuint GL_MAP1_VERTEX_ATTRIB4_4_NV = 0x8664;
        #endregion GL_MAP1_VERTEX_ATTRIB4_4_NV

        #region GL_MAP1_VERTEX_ATTRIB5_4_NV
        public const GLuint GL_MAP1_VERTEX_ATTRIB5_4_NV = 0x8665;
        #endregion GL_MAP1_VERTEX_ATTRIB5_4_NV

        #region GL_MAP1_VERTEX_ATTRIB6_4_NV
        public const GLuint GL_MAP1_VERTEX_ATTRIB6_4_NV = 0x8666;
        #endregion GL_MAP1_VERTEX_ATTRIB6_4_NV

        #region GL_MAP1_VERTEX_ATTRIB7_4_NV
        public const GLuint GL_MAP1_VERTEX_ATTRIB7_4_NV = 0x8667;
        #endregion GL_MAP1_VERTEX_ATTRIB7_4_NV

        #region GL_MAP1_VERTEX_ATTRIB8_4_NV
        public const GLuint GL_MAP1_VERTEX_ATTRIB8_4_NV = 0x8668;
        #endregion GL_MAP1_VERTEX_ATTRIB8_4_NV

        #region GL_MAP1_VERTEX_ATTRIB9_4_NV
        public const GLuint GL_MAP1_VERTEX_ATTRIB9_4_NV = 0x8669;
        #endregion GL_MAP1_VERTEX_ATTRIB9_4_NV

        #region GL_MAP1_VERTEX_ATTRIB10_4_NV
        public const GLuint GL_MAP1_VERTEX_ATTRIB10_4_NV = 0x866A;
        #endregion GL_MAP1_VERTEX_ATTRIB10_4_NV

        #region GL_MAP1_VERTEX_ATTRIB11_4_NV
        public const GLuint GL_MAP1_VERTEX_ATTRIB11_4_NV = 0x866B;
        #endregion GL_MAP1_VERTEX_ATTRIB11_4_NV

        #region GL_MAP1_VERTEX_ATTRIB12_4_NV
        public const GLuint GL_MAP1_VERTEX_ATTRIB12_4_NV = 0x866C;
        #endregion GL_MAP1_VERTEX_ATTRIB12_4_NV

        #region GL_MAP1_VERTEX_ATTRIB13_4_NV
        public const GLuint GL_MAP1_VERTEX_ATTRIB13_4_NV = 0x866D;
        #endregion GL_MAP1_VERTEX_ATTRIB13_4_NV

        #region GL_MAP1_VERTEX_ATTRIB14_4_NV
        public const GLuint GL_MAP1_VERTEX_ATTRIB14_4_NV = 0x866E;
        #endregion GL_MAP1_VERTEX_ATTRIB14_4_NV

        #region GL_MAP1_VERTEX_ATTRIB15_4_NV
        public const GLuint GL_MAP1_VERTEX_ATTRIB15_4_NV = 0x866F;
        #endregion GL_MAP1_VERTEX_ATTRIB15_4_NV

        #region GL_MAP2_VERTEX_ATTRIB0_4_NV
        public const GLuint GL_MAP2_VERTEX_ATTRIB0_4_NV = 0x8670;
        #endregion GL_MAP2_VERTEX_ATTRIB0_4_NV

        #region GL_MAP2_VERTEX_ATTRIB1_4_NV
        public const GLuint GL_MAP2_VERTEX_ATTRIB1_4_NV = 0x8671;
        #endregion GL_MAP2_VERTEX_ATTRIB1_4_NV

        #region GL_MAP2_VERTEX_ATTRIB2_4_NV
        public const GLuint GL_MAP2_VERTEX_ATTRIB2_4_NV = 0x8672;
        #endregion GL_MAP2_VERTEX_ATTRIB2_4_NV

        #region GL_MAP2_VERTEX_ATTRIB3_4_NV
        public const GLuint GL_MAP2_VERTEX_ATTRIB3_4_NV = 0x8673;
        #endregion GL_MAP2_VERTEX_ATTRIB3_4_NV

        #region GL_MAP2_VERTEX_ATTRIB4_4_NV
        public const GLuint GL_MAP2_VERTEX_ATTRIB4_4_NV = 0x8674;
        #endregion GL_MAP2_VERTEX_ATTRIB4_4_NV

        #region GL_MAP2_VERTEX_ATTRIB5_4_NV
        public const GLuint GL_MAP2_VERTEX_ATTRIB5_4_NV = 0x8675;
        #endregion GL_MAP2_VERTEX_ATTRIB5_4_NV

        #region GL_MAP2_VERTEX_ATTRIB6_4_NV
        public const GLuint GL_MAP2_VERTEX_ATTRIB6_4_NV = 0x8676;
        #endregion GL_MAP2_VERTEX_ATTRIB6_4_NV

        #region GL_MAP2_VERTEX_ATTRIB7_4_NV
        public const GLuint GL_MAP2_VERTEX_ATTRIB7_4_NV = 0x8677;
        #endregion GL_MAP2_VERTEX_ATTRIB7_4_NV

        #region GL_MAP2_VERTEX_ATTRIB8_4_NV
        public const GLuint GL_MAP2_VERTEX_ATTRIB8_4_NV = 0x8678;
        #endregion GL_MAP2_VERTEX_ATTRIB8_4_NV

        #region GL_MAP2_VERTEX_ATTRIB9_4_NV
        public const GLuint GL_MAP2_VERTEX_ATTRIB9_4_NV = 0x8679;
        #endregion GL_MAP2_VERTEX_ATTRIB9_4_NV

        #region GL_MAP2_VERTEX_ATTRIB10_4_NV
        public const GLuint GL_MAP2_VERTEX_ATTRIB10_4_NV = 0x867A;
        #endregion GL_MAP2_VERTEX_ATTRIB10_4_NV

        #region GL_MAP2_VERTEX_ATTRIB11_4_NV
        public const GLuint GL_MAP2_VERTEX_ATTRIB11_4_NV = 0x867B;
        #endregion GL_MAP2_VERTEX_ATTRIB11_4_NV

        #region GL_MAP2_VERTEX_ATTRIB12_4_NV
        public const GLuint GL_MAP2_VERTEX_ATTRIB12_4_NV = 0x867C;
        #endregion GL_MAP2_VERTEX_ATTRIB12_4_NV

        #region GL_MAP2_VERTEX_ATTRIB13_4_NV
        public const GLuint GL_MAP2_VERTEX_ATTRIB13_4_NV = 0x867D;
        #endregion GL_MAP2_VERTEX_ATTRIB13_4_NV

        #region GL_MAP2_VERTEX_ATTRIB14_4_NV
        public const GLuint GL_MAP2_VERTEX_ATTRIB14_4_NV = 0x867E;
        #endregion GL_MAP2_VERTEX_ATTRIB14_4_NV

        #region GL_MAP2_VERTEX_ATTRIB15_4_NV
        public const GLuint GL_MAP2_VERTEX_ATTRIB15_4_NV = 0x867F;
        #endregion GL_MAP2_VERTEX_ATTRIB15_4_NV

        #region GL_SCALEBIAS_HINT_SGIX
        public const GLuint GL_SCALEBIAS_HINT_SGIX = 0x8322;
        #endregion GL_SCALEBIAS_HINT_SGIX

        #region GL_INTERLACE_OML
        public const GLuint GL_INTERLACE_OML = 0x8980;
        #endregion GL_INTERLACE_OML

        #region GL_INTERLACE_READ_OML
        public const GLuint GL_INTERLACE_READ_OML = 0x8981;
        #endregion GL_INTERLACE_READ_OML

        #region GL_FORMAT_SUBSAMPLE_24_24_OML
        public const GLuint GL_FORMAT_SUBSAMPLE_24_24_OML = 0x8982;
        #endregion GL_FORMAT_SUBSAMPLE_24_24_OML

        #region GL_FORMAT_SUBSAMPLE_244_244_OML
        public const GLuint GL_FORMAT_SUBSAMPLE_244_244_OML = 0x8983;
        #endregion GL_FORMAT_SUBSAMPLE_244_244_OML

        #region GL_PACK_RESAMPLE_OML
        public const GLuint GL_PACK_RESAMPLE_OML = 0x8984;
        #endregion GL_PACK_RESAMPLE_OML

        #region GL_UNPACK_RESAMPLE_OML
        public const GLuint GL_UNPACK_RESAMPLE_OML = 0x8985;
        #endregion GL_UNPACK_RESAMPLE_OML

        #region GL_RESAMPLE_REPLICATE_OML
        public const GLuint GL_RESAMPLE_REPLICATE_OML = 0x8986;
        #endregion GL_RESAMPLE_REPLICATE_OML

        #region GL_RESAMPLE_ZERO_FILL_OML
        public const GLuint GL_RESAMPLE_ZERO_FILL_OML = 0x8987;
        #endregion GL_RESAMPLE_ZERO_FILL_OML

        #region GL_RESAMPLE_AVERAGE_OML
        public const GLuint GL_RESAMPLE_AVERAGE_OML = 0x8988;
        #endregion GL_RESAMPLE_AVERAGE_OML

        #region GL_RESAMPLE_DECIMATE_OML
        public const GLuint GL_RESAMPLE_DECIMATE_OML = 0x8989;
        #endregion GL_RESAMPLE_DECIMATE_OML

        #region GL_DEPTH_STENCIL_TO_RGBA_NV
        public const GLuint GL_DEPTH_STENCIL_TO_RGBA_NV = 0x886E;
        #endregion GL_DEPTH_STENCIL_TO_RGBA_NV

        #region GL_DEPTH_STENCIL_TO_BGRA_NV
        public const GLuint GL_DEPTH_STENCIL_TO_BGRA_NV = 0x886F;
        #endregion GL_DEPTH_STENCIL_TO_BGRA_NV

        #region GL_BUMP_ROT_MATRIX_ATI
        public const GLuint GL_BUMP_ROT_MATRIX_ATI = 0x8775;
        #endregion GL_BUMP_ROT_MATRIX_ATI

        #region GL_BUMP_ROT_MATRIX_SIZE_ATI
        public const GLuint GL_BUMP_ROT_MATRIX_SIZE_ATI = 0x8776;
        #endregion GL_BUMP_ROT_MATRIX_SIZE_ATI

        #region GL_BUMP_NUM_TEX_UNITS_ATI
        public const GLuint GL_BUMP_NUM_TEX_UNITS_ATI = 0x8777;
        #endregion GL_BUMP_NUM_TEX_UNITS_ATI

        #region GL_BUMP_TEX_UNITS_ATI
        public const GLuint GL_BUMP_TEX_UNITS_ATI = 0x8778;
        #endregion GL_BUMP_TEX_UNITS_ATI

        #region GL_DUDV_ATI
        public const GLuint GL_DUDV_ATI = 0x8779;
        #endregion GL_DUDV_ATI

        #region GL_DU8DV8_ATI
        public const GLuint GL_DU8DV8_ATI = 0x877A;
        #endregion GL_DU8DV8_ATI

        #region GL_BUMP_ENVMAP_ATI
        public const GLuint GL_BUMP_ENVMAP_ATI = 0x877B;
        #endregion GL_BUMP_ENVMAP_ATI

        #region GL_BUMP_TARGET_ATI
        public const GLuint GL_BUMP_TARGET_ATI = 0x877C;
        #endregion GL_BUMP_TARGET_ATI

        #region GL_FRAGMENT_SHADER_ATI
        public const GLuint GL_FRAGMENT_SHADER_ATI = 0x8920;
        #endregion GL_FRAGMENT_SHADER_ATI

        #region GL_REG_0_ATI
        public const GLuint GL_REG_0_ATI = 0x8921;
        #endregion GL_REG_0_ATI

        #region GL_REG_1_ATI
        public const GLuint GL_REG_1_ATI = 0x8922;
        #endregion GL_REG_1_ATI

        #region GL_REG_2_ATI
        public const GLuint GL_REG_2_ATI = 0x8923;
        #endregion GL_REG_2_ATI

        #region GL_REG_3_ATI
        public const GLuint GL_REG_3_ATI = 0x8924;
        #endregion GL_REG_3_ATI

        #region GL_REG_4_ATI
        public const GLuint GL_REG_4_ATI = 0x8925;
        #endregion GL_REG_4_ATI

        #region GL_REG_5_ATI
        public const GLuint GL_REG_5_ATI = 0x8926;
        #endregion GL_REG_5_ATI

        #region GL_REG_6_ATI
        public const GLuint GL_REG_6_ATI = 0x8927;
        #endregion GL_REG_6_ATI

        #region GL_REG_7_ATI
        public const GLuint GL_REG_7_ATI = 0x8928;
        #endregion GL_REG_7_ATI

        #region GL_REG_8_ATI
        public const GLuint GL_REG_8_ATI = 0x8929;
        #endregion GL_REG_8_ATI

        #region GL_REG_9_ATI
        public const GLuint GL_REG_9_ATI = 0x892A;
        #endregion GL_REG_9_ATI

        #region GL_REG_10_ATI
        public const GLuint GL_REG_10_ATI = 0x892B;
        #endregion GL_REG_10_ATI

        #region GL_REG_11_ATI
        public const GLuint GL_REG_11_ATI = 0x892C;
        #endregion GL_REG_11_ATI

        #region GL_REG_12_ATI
        public const GLuint GL_REG_12_ATI = 0x892D;
        #endregion GL_REG_12_ATI

        #region GL_REG_13_ATI
        public const GLuint GL_REG_13_ATI = 0x892E;
        #endregion GL_REG_13_ATI

        #region GL_REG_14_ATI
        public const GLuint GL_REG_14_ATI = 0x892F;
        #endregion GL_REG_14_ATI

        #region GL_REG_15_ATI
        public const GLuint GL_REG_15_ATI = 0x8930;
        #endregion GL_REG_15_ATI

        #region GL_REG_16_ATI
        public const GLuint GL_REG_16_ATI = 0x8931;
        #endregion GL_REG_16_ATI

        #region GL_REG_17_ATI
        public const GLuint GL_REG_17_ATI = 0x8932;
        #endregion GL_REG_17_ATI

        #region GL_REG_18_ATI
        public const GLuint GL_REG_18_ATI = 0x8933;
        #endregion GL_REG_18_ATI

        #region GL_REG_19_ATI
        public const GLuint GL_REG_19_ATI = 0x8934;
        #endregion GL_REG_19_ATI

        #region GL_REG_20_ATI
        public const GLuint GL_REG_20_ATI = 0x8935;
        #endregion GL_REG_20_ATI

        #region GL_REG_21_ATI
        public const GLuint GL_REG_21_ATI = 0x8936;
        #endregion GL_REG_21_ATI

        #region GL_REG_22_ATI
        public const GLuint GL_REG_22_ATI = 0x8937;
        #endregion GL_REG_22_ATI

        #region GL_REG_23_ATI
        public const GLuint GL_REG_23_ATI = 0x8938;
        #endregion GL_REG_23_ATI

        #region GL_REG_24_ATI
        public const GLuint GL_REG_24_ATI = 0x8939;
        #endregion GL_REG_24_ATI

        #region GL_REG_25_ATI
        public const GLuint GL_REG_25_ATI = 0x893A;
        #endregion GL_REG_25_ATI

        #region GL_REG_26_ATI
        public const GLuint GL_REG_26_ATI = 0x893B;
        #endregion GL_REG_26_ATI

        #region GL_REG_27_ATI
        public const GLuint GL_REG_27_ATI = 0x893C;
        #endregion GL_REG_27_ATI

        #region GL_REG_28_ATI
        public const GLuint GL_REG_28_ATI = 0x893D;
        #endregion GL_REG_28_ATI

        #region GL_REG_29_ATI
        public const GLuint GL_REG_29_ATI = 0x893E;
        #endregion GL_REG_29_ATI

        #region GL_REG_30_ATI
        public const GLuint GL_REG_30_ATI = 0x893F;
        #endregion GL_REG_30_ATI

        #region GL_REG_31_ATI
        public const GLuint GL_REG_31_ATI = 0x8940;
        #endregion GL_REG_31_ATI

        #region GL_CON_0_ATI
        public const GLuint GL_CON_0_ATI = 0x8941;
        #endregion GL_CON_0_ATI

        #region GL_CON_1_ATI
        public const GLuint GL_CON_1_ATI = 0x8942;
        #endregion GL_CON_1_ATI

        #region GL_CON_2_ATI
        public const GLuint GL_CON_2_ATI = 0x8943;
        #endregion GL_CON_2_ATI

        #region GL_CON_3_ATI
        public const GLuint GL_CON_3_ATI = 0x8944;
        #endregion GL_CON_3_ATI

        #region GL_CON_4_ATI
        public const GLuint GL_CON_4_ATI = 0x8945;
        #endregion GL_CON_4_ATI

        #region GL_CON_5_ATI
        public const GLuint GL_CON_5_ATI = 0x8946;
        #endregion GL_CON_5_ATI

        #region GL_CON_6_ATI
        public const GLuint GL_CON_6_ATI = 0x8947;
        #endregion GL_CON_6_ATI

        #region GL_CON_7_ATI
        public const GLuint GL_CON_7_ATI = 0x8948;
        #endregion GL_CON_7_ATI

        #region GL_CON_8_ATI
        public const GLuint GL_CON_8_ATI = 0x8949;
        #endregion GL_CON_8_ATI

        #region GL_CON_9_ATI
        public const GLuint GL_CON_9_ATI = 0x894A;
        #endregion GL_CON_9_ATI

        #region GL_CON_10_ATI
        public const GLuint GL_CON_10_ATI = 0x894B;
        #endregion GL_CON_10_ATI

        #region GL_CON_11_ATI
        public const GLuint GL_CON_11_ATI = 0x894C;
        #endregion GL_CON_11_ATI

        #region GL_CON_12_ATI
        public const GLuint GL_CON_12_ATI = 0x894D;
        #endregion GL_CON_12_ATI

        #region GL_CON_13_ATI
        public const GLuint GL_CON_13_ATI = 0x894E;
        #endregion GL_CON_13_ATI

        #region GL_CON_14_ATI
        public const GLuint GL_CON_14_ATI = 0x894F;
        #endregion GL_CON_14_ATI

        #region GL_CON_15_ATI
        public const GLuint GL_CON_15_ATI = 0x8950;
        #endregion GL_CON_15_ATI

        #region GL_CON_16_ATI
        public const GLuint GL_CON_16_ATI = 0x8951;
        #endregion GL_CON_16_ATI

        #region GL_CON_17_ATI
        public const GLuint GL_CON_17_ATI = 0x8952;
        #endregion GL_CON_17_ATI

        #region GL_CON_18_ATI
        public const GLuint GL_CON_18_ATI = 0x8953;
        #endregion GL_CON_18_ATI

        #region GL_CON_19_ATI
        public const GLuint GL_CON_19_ATI = 0x8954;
        #endregion GL_CON_19_ATI

        #region GL_CON_20_ATI
        public const GLuint GL_CON_20_ATI = 0x8955;
        #endregion GL_CON_20_ATI

        #region GL_CON_21_ATI
        public const GLuint GL_CON_21_ATI = 0x8956;
        #endregion GL_CON_21_ATI

        #region GL_CON_22_ATI
        public const GLuint GL_CON_22_ATI = 0x8957;
        #endregion GL_CON_22_ATI

        #region GL_CON_23_ATI
        public const GLuint GL_CON_23_ATI = 0x8958;
        #endregion GL_CON_23_ATI

        #region GL_CON_24_ATI
        public const GLuint GL_CON_24_ATI = 0x8959;
        #endregion GL_CON_24_ATI

        #region GL_CON_25_ATI
        public const GLuint GL_CON_25_ATI = 0x895A;
        #endregion GL_CON_25_ATI

        #region GL_CON_26_ATI
        public const GLuint GL_CON_26_ATI = 0x895B;
        #endregion GL_CON_26_ATI

        #region GL_CON_27_ATI
        public const GLuint GL_CON_27_ATI = 0x895C;
        #endregion GL_CON_27_ATI

        #region GL_CON_28_ATI
        public const GLuint GL_CON_28_ATI = 0x895D;
        #endregion GL_CON_28_ATI

        #region GL_CON_29_ATI
        public const GLuint GL_CON_29_ATI = 0x895E;
        #endregion GL_CON_29_ATI

        #region GL_CON_30_ATI
        public const GLuint GL_CON_30_ATI = 0x895F;
        #endregion GL_CON_30_ATI

        #region GL_CON_31_ATI
        public const GLuint GL_CON_31_ATI = 0x8960;
        #endregion GL_CON_31_ATI

        #region GL_MOV_ATI
        public const GLuint GL_MOV_ATI = 0x8961;
        #endregion GL_MOV_ATI

        #region GL_ADD_ATI
        public const GLuint GL_ADD_ATI = 0x8963;
        #endregion GL_ADD_ATI

        #region GL_MUL_ATI
        public const GLuint GL_MUL_ATI = 0x8964;
        #endregion GL_MUL_ATI

        #region GL_SUB_ATI
        public const GLuint GL_SUB_ATI = 0x8965;
        #endregion GL_SUB_ATI

        #region GL_DOT3_ATI
        public const GLuint GL_DOT3_ATI = 0x8966;
        #endregion GL_DOT3_ATI

        #region GL_DOT4_ATI
        public const GLuint GL_DOT4_ATI = 0x8967;
        #endregion GL_DOT4_ATI

        #region GL_MAD_ATI
        public const GLuint GL_MAD_ATI = 0x8968;
        #endregion GL_MAD_ATI

        #region GL_LERP_ATI
        public const GLuint GL_LERP_ATI = 0x8969;
        #endregion GL_LERP_ATI

        #region GL_CND_ATI
        public const GLuint GL_CND_ATI = 0x896A;
        #endregion GL_CND_ATI

        #region GL_CND0_ATI
        public const GLuint GL_CND0_ATI = 0x896B;
        #endregion GL_CND0_ATI

        #region GL_DOT2_ADD_ATI
        public const GLuint GL_DOT2_ADD_ATI = 0x896C;
        #endregion GL_DOT2_ADD_ATI

        #region GL_SECONDARY_INTERPOLATOR_ATI
        public const GLuint GL_SECONDARY_INTERPOLATOR_ATI = 0x896D;
        #endregion GL_SECONDARY_INTERPOLATOR_ATI

        #region GL_NUM_FRAGMENT_REGISTERS_ATI
        public const GLuint GL_NUM_FRAGMENT_REGISTERS_ATI = 0x896E;
        #endregion GL_NUM_FRAGMENT_REGISTERS_ATI

        #region GL_NUM_FRAGMENT_CONSTANTS_ATI
        public const GLuint GL_NUM_FRAGMENT_CONSTANTS_ATI = 0x896F;
        #endregion GL_NUM_FRAGMENT_CONSTANTS_ATI

        #region GL_NUM_PASSES_ATI
        public const GLuint GL_NUM_PASSES_ATI = 0x8970;
        #endregion GL_NUM_PASSES_ATI

        #region GL_NUM_INSTRUCTIONS_PER_PASS_ATI
        public const GLuint GL_NUM_INSTRUCTIONS_PER_PASS_ATI = 0x8971;
        #endregion GL_NUM_INSTRUCTIONS_PER_PASS_ATI

        #region GL_NUM_INSTRUCTIONS_TOTAL_ATI
        public const GLuint GL_NUM_INSTRUCTIONS_TOTAL_ATI = 0x8972;
        #endregion GL_NUM_INSTRUCTIONS_TOTAL_ATI

        #region GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI
        public const GLuint GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI = 0x8973;
        #endregion GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI

        #region GL_NUM_LOOPBACK_COMPONENTS_ATI
        public const GLuint GL_NUM_LOOPBACK_COMPONENTS_ATI = 0x8974;
        #endregion GL_NUM_LOOPBACK_COMPONENTS_ATI

        #region GL_COLOR_ALPHA_PAIRING_ATI
        public const GLuint GL_COLOR_ALPHA_PAIRING_ATI = 0x8975;
        #endregion GL_COLOR_ALPHA_PAIRING_ATI

        #region GL_SWIZZLE_STR_ATI
        public const GLuint GL_SWIZZLE_STR_ATI = 0x8976;
        #endregion GL_SWIZZLE_STR_ATI

        #region GL_SWIZZLE_STQ_ATI
        public const GLuint GL_SWIZZLE_STQ_ATI = 0x8977;
        #endregion GL_SWIZZLE_STQ_ATI

        #region GL_SWIZZLE_STR_DR_ATI
        public const GLuint GL_SWIZZLE_STR_DR_ATI = 0x8978;
        #endregion GL_SWIZZLE_STR_DR_ATI

        #region GL_SWIZZLE_STQ_DQ_ATI
        public const GLuint GL_SWIZZLE_STQ_DQ_ATI = 0x8979;
        #endregion GL_SWIZZLE_STQ_DQ_ATI

        #region GL_SWIZZLE_STRQ_ATI
        public const GLuint GL_SWIZZLE_STRQ_ATI = 0x897A;
        #endregion GL_SWIZZLE_STRQ_ATI

        #region GL_SWIZZLE_STRQ_DQ_ATI
        public const GLuint GL_SWIZZLE_STRQ_DQ_ATI = 0x897B;
        #endregion GL_SWIZZLE_STRQ_DQ_ATI

        #region GL_RED_BIT_ATI
        public const GLuint GL_RED_BIT_ATI = 0x00000001;
        #endregion GL_RED_BIT_ATI

        #region GL_GREEN_BIT_ATI
        public const GLuint GL_GREEN_BIT_ATI = 0x00000002;
        #endregion GL_GREEN_BIT_ATI

        #region GL_BLUE_BIT_ATI
        public const GLuint GL_BLUE_BIT_ATI = 0x00000004;
        #endregion GL_BLUE_BIT_ATI

        #region GL_2X_BIT_ATI
        public const GLuint GL_2X_BIT_ATI = 0x00000001;
        #endregion GL_2X_BIT_ATI

        #region GL_4X_BIT_ATI
        public const GLuint GL_4X_BIT_ATI = 0x00000002;
        #endregion GL_4X_BIT_ATI

        #region GL_8X_BIT_ATI
        public const GLuint GL_8X_BIT_ATI = 0x00000004;
        #endregion GL_8X_BIT_ATI

        #region GL_HALF_BIT_ATI
        public const GLuint GL_HALF_BIT_ATI = 0x00000008;
        #endregion GL_HALF_BIT_ATI

        #region GL_QUARTER_BIT_ATI
        public const GLuint GL_QUARTER_BIT_ATI = 0x00000010;
        #endregion GL_QUARTER_BIT_ATI

        #region GL_EIGHTH_BIT_ATI
        public const GLuint GL_EIGHTH_BIT_ATI = 0x00000020;
        #endregion GL_EIGHTH_BIT_ATI

        #region GL_SATURATE_BIT_ATI
        public const GLuint GL_SATURATE_BIT_ATI = 0x00000040;
        #endregion GL_SATURATE_BIT_ATI

        #region GL_COMP_BIT_ATI
        public const GLuint GL_COMP_BIT_ATI = 0x00000002;
        #endregion GL_COMP_BIT_ATI

        #region GL_NEGATE_BIT_ATI
        public const GLuint GL_NEGATE_BIT_ATI = 0x00000004;
        #endregion GL_NEGATE_BIT_ATI

        #region GL_BIAS_BIT_ATI
        public const GLuint GL_BIAS_BIT_ATI = 0x00000008;
        #endregion GL_BIAS_BIT_ATI

        #region GL_PN_TRIANGLES_ATI
        public const GLuint GL_PN_TRIANGLES_ATI = 0x87F0;
        #endregion GL_PN_TRIANGLES_ATI

        #region GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI
        public const GLuint GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI = 0x87F1;
        #endregion GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI

        #region GL_PN_TRIANGLES_POINT_MODE_ATI
        public const GLuint GL_PN_TRIANGLES_POINT_MODE_ATI = 0x87F2;
        #endregion GL_PN_TRIANGLES_POINT_MODE_ATI

        #region GL_PN_TRIANGLES_NORMAL_MODE_ATI
        public const GLuint GL_PN_TRIANGLES_NORMAL_MODE_ATI = 0x87F3;
        #endregion GL_PN_TRIANGLES_NORMAL_MODE_ATI

        #region GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI
        public const GLuint GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI = 0x87F4;
        #endregion GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI

        #region GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI
        public const GLuint GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI = 0x87F5;
        #endregion GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI

        #region GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI
        public const GLuint GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI = 0x87F6;
        #endregion GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI

        #region GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI
        public const GLuint GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI = 0x87F7;
        #endregion GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI

        #region GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI
        public const GLuint GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI = 0x87F8;
        #endregion GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI

        #region GL_STATIC_ATI
        public const GLuint GL_STATIC_ATI = 0x8760;
        #endregion GL_STATIC_ATI

        #region GL_DYNAMIC_ATI
        public const GLuint GL_DYNAMIC_ATI = 0x8761;
        #endregion GL_DYNAMIC_ATI

        #region GL_PRESERVE_ATI
        public const GLuint GL_PRESERVE_ATI = 0x8762;
        #endregion GL_PRESERVE_ATI

        #region GL_DISCARD_ATI
        public const GLuint GL_DISCARD_ATI = 0x8763;
        #endregion GL_DISCARD_ATI

        #region GL_OBJECT_BUFFER_SIZE_ATI
        public const GLuint GL_OBJECT_BUFFER_SIZE_ATI = 0x8764;
        #endregion GL_OBJECT_BUFFER_SIZE_ATI

        #region GL_OBJECT_BUFFER_USAGE_ATI
        public const GLuint GL_OBJECT_BUFFER_USAGE_ATI = 0x8765;
        #endregion GL_OBJECT_BUFFER_USAGE_ATI

        #region GL_ARRAY_OBJECT_BUFFER_ATI
        public const GLuint GL_ARRAY_OBJECT_BUFFER_ATI = 0x8766;
        #endregion GL_ARRAY_OBJECT_BUFFER_ATI

        #region GL_ARRAY_OBJECT_OFFSET_ATI
        public const GLuint GL_ARRAY_OBJECT_OFFSET_ATI = 0x8767;
        #endregion GL_ARRAY_OBJECT_OFFSET_ATI

        #region GL_VERTEX_SHADER_EXT
        public const GLuint GL_VERTEX_SHADER_EXT = 0x8780;
        #endregion GL_VERTEX_SHADER_EXT

        #region GL_VERTEX_SHADER_BINDING_EXT
        public const GLuint GL_VERTEX_SHADER_BINDING_EXT = 0x8781;
        #endregion GL_VERTEX_SHADER_BINDING_EXT

        #region GL_OP_INDEX_EXT
        public const GLuint GL_OP_INDEX_EXT = 0x8782;
        #endregion GL_OP_INDEX_EXT

        #region GL_OP_NEGATE_EXT
        public const GLuint GL_OP_NEGATE_EXT = 0x8783;
        #endregion GL_OP_NEGATE_EXT

        #region GL_OP_DOT3_EXT
        public const GLuint GL_OP_DOT3_EXT = 0x8784;
        #endregion GL_OP_DOT3_EXT

        #region GL_OP_DOT4_EXT
        public const GLuint GL_OP_DOT4_EXT = 0x8785;
        #endregion GL_OP_DOT4_EXT

        #region GL_OP_MUL_EXT
        public const GLuint GL_OP_MUL_EXT = 0x8786;
        #endregion GL_OP_MUL_EXT

        #region GL_OP_ADD_EXT
        public const GLuint GL_OP_ADD_EXT = 0x8787;
        #endregion GL_OP_ADD_EXT

        #region GL_OP_MADD_EXT
        public const GLuint GL_OP_MADD_EXT = 0x8788;
        #endregion GL_OP_MADD_EXT

        #region GL_OP_FRAC_EXT
        public const GLuint GL_OP_FRAC_EXT = 0x8789;
        #endregion GL_OP_FRAC_EXT

        #region GL_OP_MAX_EXT
        public const GLuint GL_OP_MAX_EXT = 0x878A;
        #endregion GL_OP_MAX_EXT

        #region GL_OP_MIN_EXT
        public const GLuint GL_OP_MIN_EXT = 0x878B;
        #endregion GL_OP_MIN_EXT

        #region GL_OP_SET_GE_EXT
        public const GLuint GL_OP_SET_GE_EXT = 0x878C;
        #endregion GL_OP_SET_GE_EXT

        #region GL_OP_SET_LT_EXT
        public const GLuint GL_OP_SET_LT_EXT = 0x878D;
        #endregion GL_OP_SET_LT_EXT

        #region GL_OP_CLAMP_EXT
        public const GLuint GL_OP_CLAMP_EXT = 0x878E;
        #endregion GL_OP_CLAMP_EXT

        #region GL_OP_FLOOR_EXT
        public const GLuint GL_OP_FLOOR_EXT = 0x878F;
        #endregion GL_OP_FLOOR_EXT

        #region GL_OP_ROUND_EXT
        public const GLuint GL_OP_ROUND_EXT = 0x8790;
        #endregion GL_OP_ROUND_EXT

        #region GL_OP_EXP_BASE_2_EXT
        public const GLuint GL_OP_EXP_BASE_2_EXT = 0x8791;
        #endregion GL_OP_EXP_BASE_2_EXT

        #region GL_OP_LOG_BASE_2_EXT
        public const GLuint GL_OP_LOG_BASE_2_EXT = 0x8792;
        #endregion GL_OP_LOG_BASE_2_EXT

        #region GL_OP_POWER_EXT
        public const GLuint GL_OP_POWER_EXT = 0x8793;
        #endregion GL_OP_POWER_EXT

        #region GL_OP_RECIP_EXT
        public const GLuint GL_OP_RECIP_EXT = 0x8794;
        #endregion GL_OP_RECIP_EXT

        #region GL_OP_RECIP_SQRT_EXT
        public const GLuint GL_OP_RECIP_SQRT_EXT = 0x8795;
        #endregion GL_OP_RECIP_SQRT_EXT

        #region GL_OP_SUB_EXT
        public const GLuint GL_OP_SUB_EXT = 0x8796;
        #endregion GL_OP_SUB_EXT

        #region GL_OP_CROSS_PRODUCT_EXT
        public const GLuint GL_OP_CROSS_PRODUCT_EXT = 0x8797;
        #endregion GL_OP_CROSS_PRODUCT_EXT

        #region GL_OP_MULTIPLY_MATRIX_EXT
        public const GLuint GL_OP_MULTIPLY_MATRIX_EXT = 0x8798;
        #endregion GL_OP_MULTIPLY_MATRIX_EXT

        #region GL_OP_MOV_EXT
        public const GLuint GL_OP_MOV_EXT = 0x8799;
        #endregion GL_OP_MOV_EXT

        #region GL_OUTPUT_VERTEX_EXT
        public const GLuint GL_OUTPUT_VERTEX_EXT = 0x879A;
        #endregion GL_OUTPUT_VERTEX_EXT

        #region GL_OUTPUT_COLOR0_EXT
        public const GLuint GL_OUTPUT_COLOR0_EXT = 0x879B;
        #endregion GL_OUTPUT_COLOR0_EXT

        #region GL_OUTPUT_COLOR1_EXT
        public const GLuint GL_OUTPUT_COLOR1_EXT = 0x879C;
        #endregion GL_OUTPUT_COLOR1_EXT

        #region GL_OUTPUT_TEXTURE_COORD0_EXT
        public const GLuint GL_OUTPUT_TEXTURE_COORD0_EXT = 0x879D;
        #endregion GL_OUTPUT_TEXTURE_COORD0_EXT

        #region GL_OUTPUT_TEXTURE_COORD1_EXT
        public const GLuint GL_OUTPUT_TEXTURE_COORD1_EXT = 0x879E;
        #endregion GL_OUTPUT_TEXTURE_COORD1_EXT

        #region GL_OUTPUT_TEXTURE_COORD2_EXT
        public const GLuint GL_OUTPUT_TEXTURE_COORD2_EXT = 0x879F;
        #endregion GL_OUTPUT_TEXTURE_COORD2_EXT

        #region GL_OUTPUT_TEXTURE_COORD3_EXT
        public const GLuint GL_OUTPUT_TEXTURE_COORD3_EXT = 0x87A0;
        #endregion GL_OUTPUT_TEXTURE_COORD3_EXT

        #region GL_OUTPUT_TEXTURE_COORD4_EXT
        public const GLuint GL_OUTPUT_TEXTURE_COORD4_EXT = 0x87A1;
        #endregion GL_OUTPUT_TEXTURE_COORD4_EXT

        #region GL_OUTPUT_TEXTURE_COORD5_EXT
        public const GLuint GL_OUTPUT_TEXTURE_COORD5_EXT = 0x87A2;
        #endregion GL_OUTPUT_TEXTURE_COORD5_EXT

        #region GL_OUTPUT_TEXTURE_COORD6_EXT
        public const GLuint GL_OUTPUT_TEXTURE_COORD6_EXT = 0x87A3;
        #endregion GL_OUTPUT_TEXTURE_COORD6_EXT

        #region GL_OUTPUT_TEXTURE_COORD7_EXT
        public const GLuint GL_OUTPUT_TEXTURE_COORD7_EXT = 0x87A4;
        #endregion GL_OUTPUT_TEXTURE_COORD7_EXT

        #region GL_OUTPUT_TEXTURE_COORD8_EXT
        public const GLuint GL_OUTPUT_TEXTURE_COORD8_EXT = 0x87A5;
        #endregion GL_OUTPUT_TEXTURE_COORD8_EXT

        #region GL_OUTPUT_TEXTURE_COORD9_EXT
        public const GLuint GL_OUTPUT_TEXTURE_COORD9_EXT = 0x87A6;
        #endregion GL_OUTPUT_TEXTURE_COORD9_EXT

        #region GL_OUTPUT_TEXTURE_COORD10_EXT
        public const GLuint GL_OUTPUT_TEXTURE_COORD10_EXT = 0x87A7;
        #endregion GL_OUTPUT_TEXTURE_COORD10_EXT

        #region GL_OUTPUT_TEXTURE_COORD11_EXT
        public const GLuint GL_OUTPUT_TEXTURE_COORD11_EXT = 0x87A8;
        #endregion GL_OUTPUT_TEXTURE_COORD11_EXT

        #region GL_OUTPUT_TEXTURE_COORD12_EXT
        public const GLuint GL_OUTPUT_TEXTURE_COORD12_EXT = 0x87A9;
        #endregion GL_OUTPUT_TEXTURE_COORD12_EXT

        #region GL_OUTPUT_TEXTURE_COORD13_EXT
        public const GLuint GL_OUTPUT_TEXTURE_COORD13_EXT = 0x87AA;
        #endregion GL_OUTPUT_TEXTURE_COORD13_EXT

        #region GL_OUTPUT_TEXTURE_COORD14_EXT
        public const GLuint GL_OUTPUT_TEXTURE_COORD14_EXT = 0x87AB;
        #endregion GL_OUTPUT_TEXTURE_COORD14_EXT

        #region GL_OUTPUT_TEXTURE_COORD15_EXT
        public const GLuint GL_OUTPUT_TEXTURE_COORD15_EXT = 0x87AC;
        #endregion GL_OUTPUT_TEXTURE_COORD15_EXT

        #region GL_OUTPUT_TEXTURE_COORD16_EXT
        public const GLuint GL_OUTPUT_TEXTURE_COORD16_EXT = 0x87AD;
        #endregion GL_OUTPUT_TEXTURE_COORD16_EXT

        #region GL_OUTPUT_TEXTURE_COORD17_EXT
        public const GLuint GL_OUTPUT_TEXTURE_COORD17_EXT = 0x87AE;
        #endregion GL_OUTPUT_TEXTURE_COORD17_EXT

        #region GL_OUTPUT_TEXTURE_COORD18_EXT
        public const GLuint GL_OUTPUT_TEXTURE_COORD18_EXT = 0x87AF;
        #endregion GL_OUTPUT_TEXTURE_COORD18_EXT

        #region GL_OUTPUT_TEXTURE_COORD19_EXT
        public const GLuint GL_OUTPUT_TEXTURE_COORD19_EXT = 0x87B0;
        #endregion GL_OUTPUT_TEXTURE_COORD19_EXT

        #region GL_OUTPUT_TEXTURE_COORD20_EXT
        public const GLuint GL_OUTPUT_TEXTURE_COORD20_EXT = 0x87B1;
        #endregion GL_OUTPUT_TEXTURE_COORD20_EXT

        #region GL_OUTPUT_TEXTURE_COORD21_EXT
        public const GLuint GL_OUTPUT_TEXTURE_COORD21_EXT = 0x87B2;
        #endregion GL_OUTPUT_TEXTURE_COORD21_EXT

        #region GL_OUTPUT_TEXTURE_COORD22_EXT
        public const GLuint GL_OUTPUT_TEXTURE_COORD22_EXT = 0x87B3;
        #endregion GL_OUTPUT_TEXTURE_COORD22_EXT

        #region GL_OUTPUT_TEXTURE_COORD23_EXT
        public const GLuint GL_OUTPUT_TEXTURE_COORD23_EXT = 0x87B4;
        #endregion GL_OUTPUT_TEXTURE_COORD23_EXT

        #region GL_OUTPUT_TEXTURE_COORD24_EXT
        public const GLuint GL_OUTPUT_TEXTURE_COORD24_EXT = 0x87B5;
        #endregion GL_OUTPUT_TEXTURE_COORD24_EXT

        #region GL_OUTPUT_TEXTURE_COORD25_EXT
        public const GLuint GL_OUTPUT_TEXTURE_COORD25_EXT = 0x87B6;
        #endregion GL_OUTPUT_TEXTURE_COORD25_EXT

        #region GL_OUTPUT_TEXTURE_COORD26_EXT
        public const GLuint GL_OUTPUT_TEXTURE_COORD26_EXT = 0x87B7;
        #endregion GL_OUTPUT_TEXTURE_COORD26_EXT

        #region GL_OUTPUT_TEXTURE_COORD27_EXT
        public const GLuint GL_OUTPUT_TEXTURE_COORD27_EXT = 0x87B8;
        #endregion GL_OUTPUT_TEXTURE_COORD27_EXT

        #region GL_OUTPUT_TEXTURE_COORD28_EXT
        public const GLuint GL_OUTPUT_TEXTURE_COORD28_EXT = 0x87B9;
        #endregion GL_OUTPUT_TEXTURE_COORD28_EXT

        #region GL_OUTPUT_TEXTURE_COORD29_EXT
        public const GLuint GL_OUTPUT_TEXTURE_COORD29_EXT = 0x87BA;
        #endregion GL_OUTPUT_TEXTURE_COORD29_EXT

        #region GL_OUTPUT_TEXTURE_COORD30_EXT
        public const GLuint GL_OUTPUT_TEXTURE_COORD30_EXT = 0x87BB;
        #endregion GL_OUTPUT_TEXTURE_COORD30_EXT

        #region GL_OUTPUT_TEXTURE_COORD31_EXT
        public const GLuint GL_OUTPUT_TEXTURE_COORD31_EXT = 0x87BC;
        #endregion GL_OUTPUT_TEXTURE_COORD31_EXT

        #region GL_OUTPUT_FOG_EXT
        public const GLuint GL_OUTPUT_FOG_EXT = 0x87BD;
        #endregion GL_OUTPUT_FOG_EXT

        #region GL_SCALAR_EXT
        public const GLuint GL_SCALAR_EXT = 0x87BE;
        #endregion GL_SCALAR_EXT

        #region GL_VECTOR_EXT
        public const GLuint GL_VECTOR_EXT = 0x87BF;
        #endregion GL_VECTOR_EXT

        #region GL_MATRIX_EXT
        public const GLuint GL_MATRIX_EXT = 0x87C0;
        #endregion GL_MATRIX_EXT

        #region GL_VARIANT_EXT
        public const GLuint GL_VARIANT_EXT = 0x87C1;
        #endregion GL_VARIANT_EXT

        #region GL_INVARIANT_EXT
        public const GLuint GL_INVARIANT_EXT = 0x87C2;
        #endregion GL_INVARIANT_EXT

        #region GL_LOCAL_CONSTANT_EXT
        public const GLuint GL_LOCAL_CONSTANT_EXT = 0x87C3;
        #endregion GL_LOCAL_CONSTANT_EXT

        #region GL_LOCAL_EXT
        public const GLuint GL_LOCAL_EXT = 0x87C4;
        #endregion GL_LOCAL_EXT

        #region GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT
        public const GLuint GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT = 0x87C5;
        #endregion GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT

        #region GL_MAX_VERTEX_SHADER_VARIANTS_EXT
        public const GLuint GL_MAX_VERTEX_SHADER_VARIANTS_EXT = 0x87C6;
        #endregion GL_MAX_VERTEX_SHADER_VARIANTS_EXT

        #region GL_MAX_VERTEX_SHADER_INVARIANTS_EXT
        public const GLuint GL_MAX_VERTEX_SHADER_INVARIANTS_EXT = 0x87C7;
        #endregion GL_MAX_VERTEX_SHADER_INVARIANTS_EXT

        #region GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT
        public const GLuint GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 0x87C8;
        #endregion GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT

        #region GL_MAX_VERTEX_SHADER_LOCALS_EXT
        public const GLuint GL_MAX_VERTEX_SHADER_LOCALS_EXT = 0x87C9;
        #endregion GL_MAX_VERTEX_SHADER_LOCALS_EXT

        #region GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT
        public const GLuint GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT = 0x87CA;
        #endregion GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT

        #region GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT
        public const GLuint GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT = 0x87CB;
        #endregion GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT

        #region GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT
        public const GLuint GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 0x87CC;
        #endregion GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT

        #region GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT
        public const GLuint GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT = 0x87CD;
        #endregion GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT

        #region GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT
        public const GLuint GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT = 0x87CE;
        #endregion GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT

        #region GL_VERTEX_SHADER_INSTRUCTIONS_EXT
        public const GLuint GL_VERTEX_SHADER_INSTRUCTIONS_EXT = 0x87CF;
        #endregion GL_VERTEX_SHADER_INSTRUCTIONS_EXT

        #region GL_VERTEX_SHADER_VARIANTS_EXT
        public const GLuint GL_VERTEX_SHADER_VARIANTS_EXT = 0x87D0;
        #endregion GL_VERTEX_SHADER_VARIANTS_EXT

        #region GL_VERTEX_SHADER_INVARIANTS_EXT
        public const GLuint GL_VERTEX_SHADER_INVARIANTS_EXT = 0x87D1;
        #endregion GL_VERTEX_SHADER_INVARIANTS_EXT

        #region GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT
        public const GLuint GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 0x87D2;
        #endregion GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT

        #region GL_VERTEX_SHADER_LOCALS_EXT
        public const GLuint GL_VERTEX_SHADER_LOCALS_EXT = 0x87D3;
        #endregion GL_VERTEX_SHADER_LOCALS_EXT

        #region GL_VERTEX_SHADER_OPTIMIZED_EXT
        public const GLuint GL_VERTEX_SHADER_OPTIMIZED_EXT = 0x87D4;
        #endregion GL_VERTEX_SHADER_OPTIMIZED_EXT

        #region GL_X_EXT
        public const GLuint GL_X_EXT = 0x87D5;
        #endregion GL_X_EXT

        #region GL_Y_EXT
        public const GLuint GL_Y_EXT = 0x87D6;
        #endregion GL_Y_EXT

        #region GL_Z_EXT
        public const GLuint GL_Z_EXT = 0x87D7;
        #endregion GL_Z_EXT

        #region GL_W_EXT
        public const GLuint GL_W_EXT = 0x87D8;
        #endregion GL_W_EXT

        #region GL_NEGATIVE_X_EXT
        public const GLuint GL_NEGATIVE_X_EXT = 0x87D9;
        #endregion GL_NEGATIVE_X_EXT

        #region GL_NEGATIVE_Y_EXT
        public const GLuint GL_NEGATIVE_Y_EXT = 0x87DA;
        #endregion GL_NEGATIVE_Y_EXT

        #region GL_NEGATIVE_Z_EXT
        public const GLuint GL_NEGATIVE_Z_EXT = 0x87DB;
        #endregion GL_NEGATIVE_Z_EXT

        #region GL_NEGATIVE_W_EXT
        public const GLuint GL_NEGATIVE_W_EXT = 0x87DC;
        #endregion GL_NEGATIVE_W_EXT

        #region GL_ZERO_EXT
        public const GLuint GL_ZERO_EXT = 0x87DD;
        #endregion GL_ZERO_EXT

        #region GL_ONE_EXT
        public const GLuint GL_ONE_EXT = 0x87DE;
        #endregion GL_ONE_EXT

        #region GL_NEGATIVE_ONE_EXT
        public const GLuint GL_NEGATIVE_ONE_EXT = 0x87DF;
        #endregion GL_NEGATIVE_ONE_EXT

        #region GL_NORMALIZED_RANGE_EXT
        public const GLuint GL_NORMALIZED_RANGE_EXT = 0x87E0;
        #endregion GL_NORMALIZED_RANGE_EXT

        #region GL_FULL_RANGE_EXT
        public const GLuint GL_FULL_RANGE_EXT = 0x87E1;
        #endregion GL_FULL_RANGE_EXT

        #region GL_CURRENT_VERTEX_EXT
        public const GLuint GL_CURRENT_VERTEX_EXT = 0x87E2;
        #endregion GL_CURRENT_VERTEX_EXT

        #region GL_MVP_MATRIX_EXT
        public const GLuint GL_MVP_MATRIX_EXT = 0x87E3;
        #endregion GL_MVP_MATRIX_EXT

        #region GL_VARIANT_VALUE_EXT
        public const GLuint GL_VARIANT_VALUE_EXT = 0x87E4;
        #endregion GL_VARIANT_VALUE_EXT

        #region GL_VARIANT_DATATYPE_EXT
        public const GLuint GL_VARIANT_DATATYPE_EXT = 0x87E5;
        #endregion GL_VARIANT_DATATYPE_EXT

        #region GL_VARIANT_ARRAY_STRIDE_EXT
        public const GLuint GL_VARIANT_ARRAY_STRIDE_EXT = 0x87E6;
        #endregion GL_VARIANT_ARRAY_STRIDE_EXT

        #region GL_VARIANT_ARRAY_TYPE_EXT
        public const GLuint GL_VARIANT_ARRAY_TYPE_EXT = 0x87E7;
        #endregion GL_VARIANT_ARRAY_TYPE_EXT

        #region GL_VARIANT_ARRAY_EXT
        public const GLuint GL_VARIANT_ARRAY_EXT = 0x87E8;
        #endregion GL_VARIANT_ARRAY_EXT

        #region GL_VARIANT_ARRAY_POINTER_EXT
        public const GLuint GL_VARIANT_ARRAY_POINTER_EXT = 0x87E9;
        #endregion GL_VARIANT_ARRAY_POINTER_EXT

        #region GL_INVARIANT_VALUE_EXT
        public const GLuint GL_INVARIANT_VALUE_EXT = 0x87EA;
        #endregion GL_INVARIANT_VALUE_EXT

        #region GL_INVARIANT_DATATYPE_EXT
        public const GLuint GL_INVARIANT_DATATYPE_EXT = 0x87EB;
        #endregion GL_INVARIANT_DATATYPE_EXT

        #region GL_LOCAL_CONSTANT_VALUE_EXT
        public const GLuint GL_LOCAL_CONSTANT_VALUE_EXT = 0x87EC;
        #endregion GL_LOCAL_CONSTANT_VALUE_EXT

        #region GL_LOCAL_CONSTANT_DATATYPE_EXT
        public const GLuint GL_LOCAL_CONSTANT_DATATYPE_EXT = 0x87ED;
        #endregion GL_LOCAL_CONSTANT_DATATYPE_EXT

        #region GL_MAX_VERTEX_STREAMS_ATI
        public const GLuint GL_MAX_VERTEX_STREAMS_ATI = 0x876B;
        #endregion GL_MAX_VERTEX_STREAMS_ATI

        #region GL_VERTEX_STREAM0_ATI
        public const GLuint GL_VERTEX_STREAM0_ATI = 0x876C;
        #endregion GL_VERTEX_STREAM0_ATI

        #region GL_VERTEX_STREAM1_ATI
        public const GLuint GL_VERTEX_STREAM1_ATI = 0x876D;
        #endregion GL_VERTEX_STREAM1_ATI

        #region GL_VERTEX_STREAM2_ATI
        public const GLuint GL_VERTEX_STREAM2_ATI = 0x876E;
        #endregion GL_VERTEX_STREAM2_ATI

        #region GL_VERTEX_STREAM3_ATI
        public const GLuint GL_VERTEX_STREAM3_ATI = 0x876F;
        #endregion GL_VERTEX_STREAM3_ATI

        #region GL_VERTEX_STREAM4_ATI
        public const GLuint GL_VERTEX_STREAM4_ATI = 0x8770;
        #endregion GL_VERTEX_STREAM4_ATI

        #region GL_VERTEX_STREAM5_ATI
        public const GLuint GL_VERTEX_STREAM5_ATI = 0x8771;
        #endregion GL_VERTEX_STREAM5_ATI

        #region GL_VERTEX_STREAM6_ATI
        public const GLuint GL_VERTEX_STREAM6_ATI = 0x8772;
        #endregion GL_VERTEX_STREAM6_ATI

        #region GL_VERTEX_STREAM7_ATI
        public const GLuint GL_VERTEX_STREAM7_ATI = 0x8773;
        #endregion GL_VERTEX_STREAM7_ATI

        #region GL_VERTEX_SOURCE_ATI
        public const GLuint GL_VERTEX_SOURCE_ATI = 0x8774;
        #endregion GL_VERTEX_SOURCE_ATI

        #region GL_ELEMENT_ARRAY_ATI
        public const GLuint GL_ELEMENT_ARRAY_ATI = 0x8768;
        #endregion GL_ELEMENT_ARRAY_ATI

        #region GL_ELEMENT_ARRAY_TYPE_ATI
        public const GLuint GL_ELEMENT_ARRAY_TYPE_ATI = 0x8769;
        #endregion GL_ELEMENT_ARRAY_TYPE_ATI

        #region GL_ELEMENT_ARRAY_POINTER_ATI
        public const GLuint GL_ELEMENT_ARRAY_POINTER_ATI = 0x876A;
        #endregion GL_ELEMENT_ARRAY_POINTER_ATI

        #region GL_QUAD_MESH_SUN
        public const GLuint GL_QUAD_MESH_SUN = 0x8614;
        #endregion GL_QUAD_MESH_SUN

        #region GL_TRIANGLE_MESH_SUN
        public const GLuint GL_TRIANGLE_MESH_SUN = 0x8615;
        #endregion GL_TRIANGLE_MESH_SUN

        #region GL_SLICE_ACCUM_SUN
        public const GLuint GL_SLICE_ACCUM_SUN = 0x85CC;
        #endregion GL_SLICE_ACCUM_SUN

        #region GL_MULTISAMPLE_FILTER_HINT_NV
        public const GLuint GL_MULTISAMPLE_FILTER_HINT_NV = 0x8534;
        #endregion GL_MULTISAMPLE_FILTER_HINT_NV

        #region GL_DEPTH_CLAMP_NV
        public const GLuint GL_DEPTH_CLAMP_NV = 0x864F;
        #endregion GL_DEPTH_CLAMP_NV

        #region GL_PIXEL_COUNTER_BITS_NV
        public const GLuint GL_PIXEL_COUNTER_BITS_NV = 0x8864;
        #endregion GL_PIXEL_COUNTER_BITS_NV

        #region GL_CURRENT_OCCLUSION_QUERY_ID_NV
        public const GLuint GL_CURRENT_OCCLUSION_QUERY_ID_NV = 0x8865;
        #endregion GL_CURRENT_OCCLUSION_QUERY_ID_NV

        #region GL_PIXEL_COUNT_NV
        public const GLuint GL_PIXEL_COUNT_NV = 0x8866;
        #endregion GL_PIXEL_COUNT_NV

        #region GL_PIXEL_COUNT_AVAILABLE_NV
        public const GLuint GL_PIXEL_COUNT_AVAILABLE_NV = 0x8867;
        #endregion GL_PIXEL_COUNT_AVAILABLE_NV

        #region GL_POINT_SPRITE_NV
        public const GLuint GL_POINT_SPRITE_NV = 0x8861;
        #endregion GL_POINT_SPRITE_NV

        #region GL_COORD_REPLACE_NV
        public const GLuint GL_COORD_REPLACE_NV = 0x8862;
        #endregion GL_COORD_REPLACE_NV

        #region GL_POINT_SPRITE_R_MODE_NV
        public const GLuint GL_POINT_SPRITE_R_MODE_NV = 0x8863;
        #endregion GL_POINT_SPRITE_R_MODE_NV

        #region GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV
        public const GLuint GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV = 0x8850;
        #endregion GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV

        #region GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV
        public const GLuint GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV = 0x8851;
        #endregion GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV

        #region GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV
        public const GLuint GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV = 0x8852;
        #endregion GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV

        #region GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV
        public const GLuint GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV = 0x8853;
        #endregion GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV

        #region GL_OFFSET_HILO_TEXTURE_2D_NV
        public const GLuint GL_OFFSET_HILO_TEXTURE_2D_NV = 0x8854;
        #endregion GL_OFFSET_HILO_TEXTURE_2D_NV

        #region GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV
        public const GLuint GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV = 0x8855;
        #endregion GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV

        #region GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV
        public const GLuint GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV = 0x8856;
        #endregion GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV

        #region GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV
        public const GLuint GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV = 0x8857;
        #endregion GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV

        #region GL_DEPENDENT_HILO_TEXTURE_2D_NV
        public const GLuint GL_DEPENDENT_HILO_TEXTURE_2D_NV = 0x8858;
        #endregion GL_DEPENDENT_HILO_TEXTURE_2D_NV

        #region GL_DEPENDENT_RGB_TEXTURE_3D_NV
        public const GLuint GL_DEPENDENT_RGB_TEXTURE_3D_NV = 0x8859;
        #endregion GL_DEPENDENT_RGB_TEXTURE_3D_NV

        #region GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV
        public const GLuint GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV = 0x885A;
        #endregion GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV

        #region GL_DOT_PRODUCT_PASS_THROUGH_NV
        public const GLuint GL_DOT_PRODUCT_PASS_THROUGH_NV = 0x885B;
        #endregion GL_DOT_PRODUCT_PASS_THROUGH_NV

        #region GL_DOT_PRODUCT_TEXTURE_1D_NV
        public const GLuint GL_DOT_PRODUCT_TEXTURE_1D_NV = 0x885C;
        #endregion GL_DOT_PRODUCT_TEXTURE_1D_NV

        #region GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV
        public const GLuint GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV = 0x885D;
        #endregion GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV

        #region GL_HILO8_NV
        public const GLuint GL_HILO8_NV = 0x885E;
        #endregion GL_HILO8_NV

        #region GL_SIGNED_HILO8_NV
        public const GLuint GL_SIGNED_HILO8_NV = 0x885F;
        #endregion GL_SIGNED_HILO8_NV

        #region GL_FORCE_BLUE_TO_ONE_NV
        public const GLuint GL_FORCE_BLUE_TO_ONE_NV = 0x8860;
        #endregion GL_FORCE_BLUE_TO_ONE_NV

        #region GL_STENCIL_TEST_TWO_SIDE_EXT
        public const GLuint GL_STENCIL_TEST_TWO_SIDE_EXT = 0x8910;
        #endregion GL_STENCIL_TEST_TWO_SIDE_EXT

        #region GL_ACTIVE_STENCIL_FACE_EXT
        public const GLuint GL_ACTIVE_STENCIL_FACE_EXT = 0x8911;
        #endregion GL_ACTIVE_STENCIL_FACE_EXT

        #region GL_TEXT_FRAGMENT_SHADER_ATI
        public const GLuint GL_TEXT_FRAGMENT_SHADER_ATI = 0x8200;
        #endregion GL_TEXT_FRAGMENT_SHADER_ATI

        #region GL_UNPACK_CLIENT_STORAGE_APPLE
        public const GLuint GL_UNPACK_CLIENT_STORAGE_APPLE = 0x85B2;
        #endregion GL_UNPACK_CLIENT_STORAGE_APPLE

        #region GL_ELEMENT_ARRAY_APPLE
        public const GLuint GL_ELEMENT_ARRAY_APPLE = 0x8768;
        #endregion GL_ELEMENT_ARRAY_APPLE

        #region GL_ELEMENT_ARRAY_TYPE_APPLE
        public const GLuint GL_ELEMENT_ARRAY_TYPE_APPLE = 0x8769;
        #endregion GL_ELEMENT_ARRAY_TYPE_APPLE

        #region GL_ELEMENT_ARRAY_POINTER_APPLE
        public const GLuint GL_ELEMENT_ARRAY_POINTER_APPLE = 0x876A;
        #endregion GL_ELEMENT_ARRAY_POINTER_APPLE

        #region GL_DRAW_PIXELS_APPLE
        public const GLuint GL_DRAW_PIXELS_APPLE = 0x8A0A;
        #endregion GL_DRAW_PIXELS_APPLE

        #region GL_FENCE_APPLE
        public const GLuint GL_FENCE_APPLE = 0x8A0B;
        #endregion GL_FENCE_APPLE

        #region GL_VERTEX_ARRAY_BINDING_APPLE
        public const GLuint GL_VERTEX_ARRAY_BINDING_APPLE = 0x85B5;
        #endregion GL_VERTEX_ARRAY_BINDING_APPLE

        #region GL_VERTEX_ARRAY_RANGE_APPLE
        public const GLuint GL_VERTEX_ARRAY_RANGE_APPLE = 0x851D;
        #endregion GL_VERTEX_ARRAY_RANGE_APPLE

        #region GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE
        public const GLuint GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE = 0x851E;
        #endregion GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE

        #region GL_VERTEX_ARRAY_STORAGE_HINT_APPLE
        public const GLuint GL_VERTEX_ARRAY_STORAGE_HINT_APPLE = 0x851F;
        #endregion GL_VERTEX_ARRAY_STORAGE_HINT_APPLE

        #region GL_VERTEX_ARRAY_RANGE_POINTER_APPLE
        public const GLuint GL_VERTEX_ARRAY_RANGE_POINTER_APPLE = 0x8521;
        #endregion GL_VERTEX_ARRAY_RANGE_POINTER_APPLE

        #region GL_STORAGE_CACHED_APPLE
        public const GLuint GL_STORAGE_CACHED_APPLE = 0x85BE;
        #endregion GL_STORAGE_CACHED_APPLE

        #region GL_STORAGE_SHARED_APPLE
        public const GLuint GL_STORAGE_SHARED_APPLE = 0x85BF;
        #endregion GL_STORAGE_SHARED_APPLE

        #region GL_YCBCR_422_APPLE
        public const GLuint GL_YCBCR_422_APPLE = 0x85B9;
        #endregion GL_YCBCR_422_APPLE

        #region GL_UNSIGNED_SHORT_8_8_APPLE
        public const GLuint GL_UNSIGNED_SHORT_8_8_APPLE = 0x85BA;
        #endregion GL_UNSIGNED_SHORT_8_8_APPLE

        #region GL_UNSIGNED_SHORT_8_8_REV_APPLE
        public const GLuint GL_UNSIGNED_SHORT_8_8_REV_APPLE = 0x85BB;
        #endregion GL_UNSIGNED_SHORT_8_8_REV_APPLE

        #region GL_RGB_S3TC
        public const GLuint GL_RGB_S3TC = 0x83A0;
        #endregion GL_RGB_S3TC

        #region GL_RGB4_S3TC
        public const GLuint GL_RGB4_S3TC = 0x83A1;
        #endregion GL_RGB4_S3TC

        #region GL_RGBA_S3TC
        public const GLuint GL_RGBA_S3TC = 0x83A2;
        #endregion GL_RGBA_S3TC

        #region GL_RGBA4_S3TC
        public const GLuint GL_RGBA4_S3TC = 0x83A3;
        #endregion GL_RGBA4_S3TC

        #region GL_MAX_DRAW_BUFFERS_ATI
        public const GLuint GL_MAX_DRAW_BUFFERS_ATI = 0x8824;
        #endregion GL_MAX_DRAW_BUFFERS_ATI

        #region GL_DRAW_BUFFER0_ATI
        public const GLuint GL_DRAW_BUFFER0_ATI = 0x8825;
        #endregion GL_DRAW_BUFFER0_ATI

        #region GL_DRAW_BUFFER1_ATI
        public const GLuint GL_DRAW_BUFFER1_ATI = 0x8826;
        #endregion GL_DRAW_BUFFER1_ATI

        #region GL_DRAW_BUFFER2_ATI
        public const GLuint GL_DRAW_BUFFER2_ATI = 0x8827;
        #endregion GL_DRAW_BUFFER2_ATI

        #region GL_DRAW_BUFFER3_ATI
        public const GLuint GL_DRAW_BUFFER3_ATI = 0x8828;
        #endregion GL_DRAW_BUFFER3_ATI

        #region GL_DRAW_BUFFER4_ATI
        public const GLuint GL_DRAW_BUFFER4_ATI = 0x8829;
        #endregion GL_DRAW_BUFFER4_ATI

        #region GL_DRAW_BUFFER5_ATI
        public const GLuint GL_DRAW_BUFFER5_ATI = 0x882A;
        #endregion GL_DRAW_BUFFER5_ATI

        #region GL_DRAW_BUFFER6_ATI
        public const GLuint GL_DRAW_BUFFER6_ATI = 0x882B;
        #endregion GL_DRAW_BUFFER6_ATI

        #region GL_DRAW_BUFFER7_ATI
        public const GLuint GL_DRAW_BUFFER7_ATI = 0x882C;
        #endregion GL_DRAW_BUFFER7_ATI

        #region GL_DRAW_BUFFER8_ATI
        public const GLuint GL_DRAW_BUFFER8_ATI = 0x882D;
        #endregion GL_DRAW_BUFFER8_ATI

        #region GL_DRAW_BUFFER9_ATI
        public const GLuint GL_DRAW_BUFFER9_ATI = 0x882E;
        #endregion GL_DRAW_BUFFER9_ATI

        #region GL_DRAW_BUFFER10_ATI
        public const GLuint GL_DRAW_BUFFER10_ATI = 0x882F;
        #endregion GL_DRAW_BUFFER10_ATI

        #region GL_DRAW_BUFFER11_ATI
        public const GLuint GL_DRAW_BUFFER11_ATI = 0x8830;
        #endregion GL_DRAW_BUFFER11_ATI

        #region GL_DRAW_BUFFER12_ATI
        public const GLuint GL_DRAW_BUFFER12_ATI = 0x8831;
        #endregion GL_DRAW_BUFFER12_ATI

        #region GL_DRAW_BUFFER13_ATI
        public const GLuint GL_DRAW_BUFFER13_ATI = 0x8832;
        #endregion GL_DRAW_BUFFER13_ATI

        #region GL_DRAW_BUFFER14_ATI
        public const GLuint GL_DRAW_BUFFER14_ATI = 0x8833;
        #endregion GL_DRAW_BUFFER14_ATI

        #region GL_DRAW_BUFFER15_ATI
        public const GLuint GL_DRAW_BUFFER15_ATI = 0x8834;
        #endregion GL_DRAW_BUFFER15_ATI

        #region GL_TYPE_RGBA_FLOAT_ATI
        public const GLuint GL_TYPE_RGBA_FLOAT_ATI = 0x8820;
        #endregion GL_TYPE_RGBA_FLOAT_ATI

        #region GL_COLOR_CLEAR_UNCLAMPED_VALUE_ATI
        public const GLuint GL_COLOR_CLEAR_UNCLAMPED_VALUE_ATI = 0x8835;
        #endregion GL_COLOR_CLEAR_UNCLAMPED_VALUE_ATI

        #region GL_MODULATE_ADD_ATI
        public const GLuint GL_MODULATE_ADD_ATI = 0x8744;
        #endregion GL_MODULATE_ADD_ATI

        #region GL_MODULATE_SIGNED_ADD_ATI
        public const GLuint GL_MODULATE_SIGNED_ADD_ATI = 0x8745;
        #endregion GL_MODULATE_SIGNED_ADD_ATI

        #region GL_MODULATE_SUBTRACT_ATI
        public const GLuint GL_MODULATE_SUBTRACT_ATI = 0x8746;
        #endregion GL_MODULATE_SUBTRACT_ATI

        #region GL_RGBA_FLOAT32_ATI
        public const GLuint GL_RGBA_FLOAT32_ATI = 0x8814;
        #endregion GL_RGBA_FLOAT32_ATI

        #region GL_RGB_FLOAT32_ATI
        public const GLuint GL_RGB_FLOAT32_ATI = 0x8815;
        #endregion GL_RGB_FLOAT32_ATI

        #region GL_ALPHA_FLOAT32_ATI
        public const GLuint GL_ALPHA_FLOAT32_ATI = 0x8816;
        #endregion GL_ALPHA_FLOAT32_ATI

        #region GL_INTENSITY_FLOAT32_ATI
        public const GLuint GL_INTENSITY_FLOAT32_ATI = 0x8817;
        #endregion GL_INTENSITY_FLOAT32_ATI

        #region GL_LUMINANCE_FLOAT32_ATI
        public const GLuint GL_LUMINANCE_FLOAT32_ATI = 0x8818;
        #endregion GL_LUMINANCE_FLOAT32_ATI

        #region GL_LUMINANCE_ALPHA_FLOAT32_ATI
        public const GLuint GL_LUMINANCE_ALPHA_FLOAT32_ATI = 0x8819;
        #endregion GL_LUMINANCE_ALPHA_FLOAT32_ATI

        #region GL_RGBA_FLOAT16_ATI
        public const GLuint GL_RGBA_FLOAT16_ATI = 0x881A;
        #endregion GL_RGBA_FLOAT16_ATI

        #region GL_RGB_FLOAT16_ATI
        public const GLuint GL_RGB_FLOAT16_ATI = 0x881B;
        #endregion GL_RGB_FLOAT16_ATI

        #region GL_ALPHA_FLOAT16_ATI
        public const GLuint GL_ALPHA_FLOAT16_ATI = 0x881C;
        #endregion GL_ALPHA_FLOAT16_ATI

        #region GL_INTENSITY_FLOAT16_ATI
        public const GLuint GL_INTENSITY_FLOAT16_ATI = 0x881D;
        #endregion GL_INTENSITY_FLOAT16_ATI

        #region GL_LUMINANCE_FLOAT16_ATI
        public const GLuint GL_LUMINANCE_FLOAT16_ATI = 0x881E;
        #endregion GL_LUMINANCE_FLOAT16_ATI

        #region GL_LUMINANCE_ALPHA_FLOAT16_ATI
        public const GLuint GL_LUMINANCE_ALPHA_FLOAT16_ATI = 0x881F;
        #endregion GL_LUMINANCE_ALPHA_FLOAT16_ATI

        #region GL_FLOAT_R_NV
        public const GLuint GL_FLOAT_R_NV = 0x8880;
        #endregion GL_FLOAT_R_NV

        #region GL_FLOAT_RG_NV
        public const GLuint GL_FLOAT_RG_NV = 0x8881;
        #endregion GL_FLOAT_RG_NV

        #region GL_FLOAT_RGB_NV
        public const GLuint GL_FLOAT_RGB_NV = 0x8882;
        #endregion GL_FLOAT_RGB_NV

        #region GL_FLOAT_RGBA_NV
        public const GLuint GL_FLOAT_RGBA_NV = 0x8883;
        #endregion GL_FLOAT_RGBA_NV

        #region GL_FLOAT_R16_NV
        public const GLuint GL_FLOAT_R16_NV = 0x8884;
        #endregion GL_FLOAT_R16_NV

        #region GL_FLOAT_R32_NV
        public const GLuint GL_FLOAT_R32_NV = 0x8885;
        #endregion GL_FLOAT_R32_NV

        #region GL_FLOAT_RG16_NV
        public const GLuint GL_FLOAT_RG16_NV = 0x8886;
        #endregion GL_FLOAT_RG16_NV

        #region GL_FLOAT_RG32_NV
        public const GLuint GL_FLOAT_RG32_NV = 0x8887;
        #endregion GL_FLOAT_RG32_NV

        #region GL_FLOAT_RGB16_NV
        public const GLuint GL_FLOAT_RGB16_NV = 0x8888;
        #endregion GL_FLOAT_RGB16_NV

        #region GL_FLOAT_RGB32_NV
        public const GLuint GL_FLOAT_RGB32_NV = 0x8889;
        #endregion GL_FLOAT_RGB32_NV

        #region GL_FLOAT_RGBA16_NV
        public const GLuint GL_FLOAT_RGBA16_NV = 0x888A;
        #endregion GL_FLOAT_RGBA16_NV

        #region GL_FLOAT_RGBA32_NV
        public const GLuint GL_FLOAT_RGBA32_NV = 0x888B;
        #endregion GL_FLOAT_RGBA32_NV

        #region GL_TEXTURE_FLOAT_COMPONENTS_NV
        public const GLuint GL_TEXTURE_FLOAT_COMPONENTS_NV = 0x888C;
        #endregion GL_TEXTURE_FLOAT_COMPONENTS_NV

        #region GL_FLOAT_CLEAR_COLOR_VALUE_NV
        public const GLuint GL_FLOAT_CLEAR_COLOR_VALUE_NV = 0x888D;
        #endregion GL_FLOAT_CLEAR_COLOR_VALUE_NV

        #region GL_FLOAT_RGBA_MODE_NV
        public const GLuint GL_FLOAT_RGBA_MODE_NV = 0x888E;
        #endregion GL_FLOAT_RGBA_MODE_NV

        #region GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV
        public const GLuint GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV = 0x8868;
        #endregion GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV

        #region GL_FRAGMENT_PROGRAM_NV
        public const GLuint GL_FRAGMENT_PROGRAM_NV = 0x8870;
        #endregion GL_FRAGMENT_PROGRAM_NV

        #region GL_MAX_TEXTURE_COORDS_NV
        public const GLuint GL_MAX_TEXTURE_COORDS_NV = 0x8871;
        #endregion GL_MAX_TEXTURE_COORDS_NV

        #region GL_MAX_TEXTURE_IMAGE_UNITS_NV
        public const GLuint GL_MAX_TEXTURE_IMAGE_UNITS_NV = 0x8872;
        #endregion GL_MAX_TEXTURE_IMAGE_UNITS_NV

        #region GL_FRAGMENT_PROGRAM_BINDING_NV
        public const GLuint GL_FRAGMENT_PROGRAM_BINDING_NV = 0x8873;
        #endregion GL_FRAGMENT_PROGRAM_BINDING_NV

        #region GL_PROGRAM_ERROR_STRING_NV
        public const GLuint GL_PROGRAM_ERROR_STRING_NV = 0x8874;
        #endregion GL_PROGRAM_ERROR_STRING_NV

        #region GL_HALF_FLOAT_NV
        public const GLuint GL_HALF_FLOAT_NV = 0x140B;
        #endregion GL_HALF_FLOAT_NV

        #region GL_WRITE_PIXEL_DATA_RANGE_NV
        public const GLuint GL_WRITE_PIXEL_DATA_RANGE_NV = 0x8878;
        #endregion GL_WRITE_PIXEL_DATA_RANGE_NV

        #region GL_READ_PIXEL_DATA_RANGE_NV
        public const GLuint GL_READ_PIXEL_DATA_RANGE_NV = 0x8879;
        #endregion GL_READ_PIXEL_DATA_RANGE_NV

        #region GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV
        public const GLuint GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV = 0x887A;
        #endregion GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV

        #region GL_READ_PIXEL_DATA_RANGE_LENGTH_NV
        public const GLuint GL_READ_PIXEL_DATA_RANGE_LENGTH_NV = 0x887B;
        #endregion GL_READ_PIXEL_DATA_RANGE_LENGTH_NV

        #region GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV
        public const GLuint GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV = 0x887C;
        #endregion GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV

        #region GL_READ_PIXEL_DATA_RANGE_POINTER_NV
        public const GLuint GL_READ_PIXEL_DATA_RANGE_POINTER_NV = 0x887D;
        #endregion GL_READ_PIXEL_DATA_RANGE_POINTER_NV

        #region GL_PRIMITIVE_RESTART_NV
        public const GLuint GL_PRIMITIVE_RESTART_NV = 0x8558;
        #endregion GL_PRIMITIVE_RESTART_NV

        #region GL_PRIMITIVE_RESTART_INDEX_NV
        public const GLuint GL_PRIMITIVE_RESTART_INDEX_NV = 0x8559;
        #endregion GL_PRIMITIVE_RESTART_INDEX_NV

        #region GL_TEXTURE_UNSIGNED_REMAP_MODE_NV
        public const GLuint GL_TEXTURE_UNSIGNED_REMAP_MODE_NV = 0x888F;
        #endregion GL_TEXTURE_UNSIGNED_REMAP_MODE_NV

        #region GL_STENCIL_BACK_FUNC_ATI
        public const GLuint GL_STENCIL_BACK_FUNC_ATI = 0x8800;
        #endregion GL_STENCIL_BACK_FUNC_ATI

        #region GL_STENCIL_BACK_FAIL_ATI
        public const GLuint GL_STENCIL_BACK_FAIL_ATI = 0x8801;
        #endregion GL_STENCIL_BACK_FAIL_ATI

        #region GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI
        public const GLuint GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI = 0x8802;
        #endregion GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI

        #region GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI
        public const GLuint GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI = 0x8803;
        #endregion GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI

        #region GL_IMPLEMENTATION_COLOR_READ_TYPE_OES
        public const GLuint GL_IMPLEMENTATION_COLOR_READ_TYPE_OES = 0x8B9A;
        #endregion GL_IMPLEMENTATION_COLOR_READ_TYPE_OES

        #region GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES
        public const GLuint GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES = 0x8B9B;
        #endregion GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES

        #region GL_DEPTH_BOUNDS_TEST_EXT
        public const GLuint GL_DEPTH_BOUNDS_TEST_EXT = 0x8890;
        #endregion GL_DEPTH_BOUNDS_TEST_EXT

        #region GL_DEPTH_BOUNDS_EXT
        public const GLuint GL_DEPTH_BOUNDS_EXT = 0x8891;
        #endregion GL_DEPTH_BOUNDS_EXT

        #region GL_MIRROR_CLAMP_EXT
        public const GLuint GL_MIRROR_CLAMP_EXT = 0x8742;
        #endregion GL_MIRROR_CLAMP_EXT

        #region GL_MIRROR_CLAMP_TO_EDGE_EXT
        public const GLuint GL_MIRROR_CLAMP_TO_EDGE_EXT = 0x8743;
        #endregion GL_MIRROR_CLAMP_TO_EDGE_EXT

        #region GL_MIRROR_CLAMP_TO_BORDER_EXT
        public const GLuint GL_MIRROR_CLAMP_TO_BORDER_EXT = 0x8912;
        #endregion GL_MIRROR_CLAMP_TO_BORDER_EXT

        #region GL_BLEND_EQUATION_RGB_EXT
        public const GLuint GL_BLEND_EQUATION_RGB_EXT = GL_BLEND_EQUATION;
        #endregion GL_BLEND_EQUATION_RGB_EXT

        #region GL_BLEND_EQUATION_ALPHA_EXT
        public const GLuint GL_BLEND_EQUATION_ALPHA_EXT = 0x883D;
        #endregion GL_BLEND_EQUATION_ALPHA_EXT

        #region GL_PACK_INVERT_MESA
        public const GLuint GL_PACK_INVERT_MESA = 0x8758;
        #endregion GL_PACK_INVERT_MESA

        #region GL_UNSIGNED_SHORT_8_8_MESA
        public const GLuint GL_UNSIGNED_SHORT_8_8_MESA = 0x85BA;
        #endregion GL_UNSIGNED_SHORT_8_8_MESA

        #region GL_UNSIGNED_SHORT_8_8_REV_MESA
        public const GLuint GL_UNSIGNED_SHORT_8_8_REV_MESA = 0x85BB;
        #endregion GL_UNSIGNED_SHORT_8_8_REV_MESA

        #region GL_YCBCR_MESA
        public const GLuint GL_YCBCR_MESA = 0x8757;
        #endregion GL_YCBCR_MESA

        #region GL_PIXEL_PACK_BUFFER_EXT
        public const GLuint GL_PIXEL_PACK_BUFFER_EXT = 0x88EB;
        #endregion GL_PIXEL_PACK_BUFFER_EXT

        #region GL_PIXEL_UNPACK_BUFFER_EXT
        public const GLuint GL_PIXEL_UNPACK_BUFFER_EXT = 0x88EC;
        #endregion GL_PIXEL_UNPACK_BUFFER_EXT

        #region GL_PIXEL_PACK_BUFFER_BINDING_EXT
        public const GLuint GL_PIXEL_PACK_BUFFER_BINDING_EXT = 0x88ED;
        #endregion GL_PIXEL_PACK_BUFFER_BINDING_EXT

        #region GL_PIXEL_UNPACK_BUFFER_BINDING_EXT
        public const GLuint GL_PIXEL_UNPACK_BUFFER_BINDING_EXT = 0x88EF;
        #endregion GL_PIXEL_UNPACK_BUFFER_BINDING_EXT

        #region GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV
        public const GLuint GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV = 0x88F4;
        #endregion GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV

        #region GL_MAX_PROGRAM_CALL_DEPTH_NV
        public const GLuint GL_MAX_PROGRAM_CALL_DEPTH_NV = 0x88F5;
        #endregion GL_MAX_PROGRAM_CALL_DEPTH_NV

        #region GL_MAX_PROGRAM_IF_DEPTH_NV
        public const GLuint GL_MAX_PROGRAM_IF_DEPTH_NV = 0x88F6;
        #endregion GL_MAX_PROGRAM_IF_DEPTH_NV

        #region GL_MAX_PROGRAM_LOOP_DEPTH_NV
        public const GLuint GL_MAX_PROGRAM_LOOP_DEPTH_NV = 0x88F7;
        #endregion GL_MAX_PROGRAM_LOOP_DEPTH_NV

        #region GL_MAX_PROGRAM_LOOP_COUNT_NV
        public const GLuint GL_MAX_PROGRAM_LOOP_COUNT_NV = 0x88F8;
        #endregion GL_MAX_PROGRAM_LOOP_COUNT_NV

        #region GL_INVALID_FRAMEBUFFER_OPERATION_EXT
        public const GLuint GL_INVALID_FRAMEBUFFER_OPERATION_EXT = 0x0506;
        #endregion GL_INVALID_FRAMEBUFFER_OPERATION_EXT

        #region GL_MAX_RENDERBUFFER_SIZE_EXT
        public const GLuint GL_MAX_RENDERBUFFER_SIZE_EXT = 0x84E8;
        #endregion GL_MAX_RENDERBUFFER_SIZE_EXT

        #region GL_FRAMEBUFFER_BINDING_EXT
        public const GLuint GL_FRAMEBUFFER_BINDING_EXT = 0x8CA6;
        #endregion GL_FRAMEBUFFER_BINDING_EXT

        #region GL_RENDERBUFFER_BINDING_EXT
        public const GLuint GL_RENDERBUFFER_BINDING_EXT = 0x8CA7;
        #endregion GL_RENDERBUFFER_BINDING_EXT

        #region GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT
        public const GLuint GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT = 0x8CD0;
        #endregion GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT

        #region GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT
        public const GLuint GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT = 0x8CD1;
        #endregion GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT

        #region GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT
        public const GLuint GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT = 0x8CD2;
        #endregion GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT

        #region GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT
        public const GLuint GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT = 0x8CD3;
        #endregion GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT

        #region GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT
        public const GLuint GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT = 0x8CD4;
        #endregion GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT

        #region GL_FRAMEBUFFER_COMPLETE_EXT
        public const GLuint GL_FRAMEBUFFER_COMPLETE_EXT = 0x8CD5;
        #endregion GL_FRAMEBUFFER_COMPLETE_EXT

        #region GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT
        public const GLuint GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT = 0x8CD6;
        #endregion GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT

        #region GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT
        public const GLuint GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT = 0x8CD7;
        #endregion GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT

        #region GL_FRAMEBUFFER_INCOMPLETE_DUPLICATE_ATTACHMENT_EXT
        public const GLuint GL_FRAMEBUFFER_INCOMPLETE_DUPLICATE_ATTACHMENT_EXT = 0x8CD8;
        #endregion GL_FRAMEBUFFER_INCOMPLETE_DUPLICATE_ATTACHMENT_EXT

        #region GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT
        public const GLuint GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT = 0x8CD9;
        #endregion GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT

        #region GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT
        public const GLuint GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT = 0x8CDA;
        #endregion GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT

        #region GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT
        public const GLuint GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT = 0x8CDB;
        #endregion GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT

        #region GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT
        public const GLuint GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT = 0x8CDC;
        #endregion GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT

        #region GL_FRAMEBUFFER_UNSUPPORTED_EXT
        public const GLuint GL_FRAMEBUFFER_UNSUPPORTED_EXT = 0x8CDD;
        #endregion GL_FRAMEBUFFER_UNSUPPORTED_EXT

        #region GL_MAX_COLOR_ATTACHMENTS_EXT
        public const GLuint GL_MAX_COLOR_ATTACHMENTS_EXT = 0x8CDF;
        #endregion GL_MAX_COLOR_ATTACHMENTS_EXT

        #region GL_COLOR_ATTACHMENT0_EXT
        public const GLuint GL_COLOR_ATTACHMENT0_EXT = 0x8CE0;
        #endregion GL_COLOR_ATTACHMENT0_EXT

        #region GL_COLOR_ATTACHMENT1_EXT
        public const GLuint GL_COLOR_ATTACHMENT1_EXT = 0x8CE1;
        #endregion GL_COLOR_ATTACHMENT1_EXT

        #region GL_COLOR_ATTACHMENT2_EXT
        public const GLuint GL_COLOR_ATTACHMENT2_EXT = 0x8CE2;
        #endregion GL_COLOR_ATTACHMENT2_EXT

        #region GL_COLOR_ATTACHMENT3_EXT
        public const GLuint GL_COLOR_ATTACHMENT3_EXT = 0x8CE3;
        #endregion GL_COLOR_ATTACHMENT3_EXT

        #region GL_COLOR_ATTACHMENT4_EXT
        public const GLuint GL_COLOR_ATTACHMENT4_EXT = 0x8CE4;
        #endregion GL_COLOR_ATTACHMENT4_EXT

        #region GL_COLOR_ATTACHMENT5_EXT
        public const GLuint GL_COLOR_ATTACHMENT5_EXT = 0x8CE5;
        #endregion GL_COLOR_ATTACHMENT5_EXT

        #region GL_COLOR_ATTACHMENT6_EXT
        public const GLuint GL_COLOR_ATTACHMENT6_EXT = 0x8CE6;
        #endregion GL_COLOR_ATTACHMENT6_EXT

        #region GL_COLOR_ATTACHMENT7_EXT
        public const GLuint GL_COLOR_ATTACHMENT7_EXT = 0x8CE7;
        #endregion GL_COLOR_ATTACHMENT7_EXT

        #region GL_COLOR_ATTACHMENT8_EXT
        public const GLuint GL_COLOR_ATTACHMENT8_EXT = 0x8CE8;
        #endregion GL_COLOR_ATTACHMENT8_EXT

        #region GL_COLOR_ATTACHMENT9_EXT
        public const GLuint GL_COLOR_ATTACHMENT9_EXT = 0x8CE9;
        #endregion GL_COLOR_ATTACHMENT9_EXT

        #region GL_COLOR_ATTACHMENT10_EXT
        public const GLuint GL_COLOR_ATTACHMENT10_EXT = 0x8CEA;
        #endregion GL_COLOR_ATTACHMENT10_EXT

        #region GL_COLOR_ATTACHMENT11_EXT
        public const GLuint GL_COLOR_ATTACHMENT11_EXT = 0x8CEB;
        #endregion GL_COLOR_ATTACHMENT11_EXT

        #region GL_COLOR_ATTACHMENT12_EXT
        public const GLuint GL_COLOR_ATTACHMENT12_EXT = 0x8CEC;
        #endregion GL_COLOR_ATTACHMENT12_EXT

        #region GL_COLOR_ATTACHMENT13_EXT
        public const GLuint GL_COLOR_ATTACHMENT13_EXT = 0x8CED;
        #endregion GL_COLOR_ATTACHMENT13_EXT

        #region GL_COLOR_ATTACHMENT14_EXT
        public const GLuint GL_COLOR_ATTACHMENT14_EXT = 0x8CEE;
        #endregion GL_COLOR_ATTACHMENT14_EXT

        #region GL_COLOR_ATTACHMENT15_EXT
        public const GLuint GL_COLOR_ATTACHMENT15_EXT = 0x8CEF;
        #endregion GL_COLOR_ATTACHMENT15_EXT

        #region GL_DEPTH_ATTACHMENT_EXT
        public const GLuint GL_DEPTH_ATTACHMENT_EXT = 0x8D00;
        #endregion GL_DEPTH_ATTACHMENT_EXT

        #region GL_STENCIL_ATTACHMENT_EXT
        public const GLuint GL_STENCIL_ATTACHMENT_EXT = 0x8D20;
        #endregion GL_STENCIL_ATTACHMENT_EXT

        #region GL_FRAMEBUFFER_EXT
        public const GLuint GL_FRAMEBUFFER_EXT = 0x8D40;
        #endregion GL_FRAMEBUFFER_EXT

        #region GL_RENDERBUFFER_EXT
        public const GLuint GL_RENDERBUFFER_EXT = 0x8D41;
        #endregion GL_RENDERBUFFER_EXT

        #region GL_RENDERBUFFER_WIDTH_EXT
        public const GLuint GL_RENDERBUFFER_WIDTH_EXT = 0x8D42;
        #endregion GL_RENDERBUFFER_WIDTH_EXT

        #region GL_RENDERBUFFER_HEIGHT_EXT
        public const GLuint GL_RENDERBUFFER_HEIGHT_EXT = 0x8D43;
        #endregion GL_RENDERBUFFER_HEIGHT_EXT

        #region GL_RENDERBUFFER_INTERNAL_FORMAT_EXT
        public const GLuint GL_RENDERBUFFER_INTERNAL_FORMAT_EXT = 0x8D44;
        #endregion GL_RENDERBUFFER_INTERNAL_FORMAT_EXT

        #region GL_STENCIL_INDEX1_EXT
        public const GLuint GL_STENCIL_INDEX1_EXT = 0x8D46;
        #endregion GL_STENCIL_INDEX1_EXT

        #region GL_STENCIL_INDEX4_EXT
        public const GLuint GL_STENCIL_INDEX4_EXT = 0x8D47;
        #endregion GL_STENCIL_INDEX4_EXT

        #region GL_STENCIL_INDEX8_EXT
        public const GLuint GL_STENCIL_INDEX8_EXT = 0x8D48;
        #endregion GL_STENCIL_INDEX8_EXT

        #region GL_STENCIL_INDEX16_EXT
        public const GLuint GL_STENCIL_INDEX16_EXT = 0x8D49;
        #endregion GL_STENCIL_INDEX16_EXT

        #region GL_RENDERBUFFER_RED_SIZE_EXT
        public const GLuint GL_RENDERBUFFER_RED_SIZE_EXT = 0x8D50;
        #endregion GL_RENDERBUFFER_RED_SIZE_EXT

        #region GL_RENDERBUFFER_GREEN_SIZE_EXT
        public const GLuint GL_RENDERBUFFER_GREEN_SIZE_EXT = 0x8D51;
        #endregion GL_RENDERBUFFER_GREEN_SIZE_EXT

        #region GL_RENDERBUFFER_BLUE_SIZE_EXT
        public const GLuint GL_RENDERBUFFER_BLUE_SIZE_EXT = 0x8D52;
        #endregion GL_RENDERBUFFER_BLUE_SIZE_EXT

        #region GL_RENDERBUFFER_ALPHA_SIZE_EXT
        public const GLuint GL_RENDERBUFFER_ALPHA_SIZE_EXT = 0x8D53;
        #endregion GL_RENDERBUFFER_ALPHA_SIZE_EXT

        #region GL_RENDERBUFFER_DEPTH_SIZE_EXT
        public const GLuint GL_RENDERBUFFER_DEPTH_SIZE_EXT = 0x8D54;
        #endregion GL_RENDERBUFFER_DEPTH_SIZE_EXT

        #region GL_RENDERBUFFER_STENCIL_SIZE_EXT
        public const GLuint GL_RENDERBUFFER_STENCIL_SIZE_EXT = 0x8D55;
        #endregion GL_RENDERBUFFER_STENCIL_SIZE_EXT

        #region GL_DEPTH_STENCIL_EXT
        public const GLuint GL_DEPTH_STENCIL_EXT = 0x84F9;
        #endregion GL_DEPTH_STENCIL_EXT

        #region GL_UNSIGNED_INT_24_8_EXT
        public const GLuint GL_UNSIGNED_INT_24_8_EXT = 0x84FA;
        #endregion GL_UNSIGNED_INT_24_8_EXT

        #region GL_DEPTH24_STENCIL8_EXT
        public const GLuint GL_DEPTH24_STENCIL8_EXT = 0x88F0;
        #endregion GL_DEPTH24_STENCIL8_EXT

        #region GL_TEXTURE_STENCIL_SIZE_EXT
        public const GLuint GL_TEXTURE_STENCIL_SIZE_EXT = 0x88F1;
        #endregion GL_TEXTURE_STENCIL_SIZE_EXT

        #region GL_STENCIL_TAG_BITS_EXT
        public const GLuint GL_STENCIL_TAG_BITS_EXT = 0x88F2;
        #endregion GL_STENCIL_TAG_BITS_EXT

        #region GL_STENCIL_CLEAR_TAG_VALUE_EXT
        public const GLuint GL_STENCIL_CLEAR_TAG_VALUE_EXT = 0x88F3;
        #endregion GL_STENCIL_CLEAR_TAG_VALUE_EXT

        #region GL_SRGB_EXT
        public const GLuint GL_SRGB_EXT = 0x8C40;
        #endregion GL_SRGB_EXT

        #region GL_SRGB8_EXT
        public const GLuint GL_SRGB8_EXT = 0x8C41;
        #endregion GL_SRGB8_EXT

        #region GL_SRGB_ALPHA_EXT
        public const GLuint GL_SRGB_ALPHA_EXT = 0x8C42;
        #endregion GL_SRGB_ALPHA_EXT

        #region GL_SRGB8_ALPHA8_EXT
        public const GLuint GL_SRGB8_ALPHA8_EXT = 0x8C43;
        #endregion GL_SRGB8_ALPHA8_EXT

        #region GL_SLUMINANCE_ALPHA_EXT
        public const GLuint GL_SLUMINANCE_ALPHA_EXT = 0x8C44;
        #endregion GL_SLUMINANCE_ALPHA_EXT

        #region GL_SLUMINANCE8_ALPHA8_EXT
        public const GLuint GL_SLUMINANCE8_ALPHA8_EXT = 0x8C45;
        #endregion GL_SLUMINANCE8_ALPHA8_EXT

        #region GL_SLUMINANCE_EXT
        public const GLuint GL_SLUMINANCE_EXT = 0x8C46;
        #endregion GL_SLUMINANCE_EXT

        #region GL_SLUMINANCE8_EXT
        public const GLuint GL_SLUMINANCE8_EXT = 0x8C47;
        #endregion GL_SLUMINANCE8_EXT

        #region GL_COMPRESSED_SRGB_EXT
        public const GLuint GL_COMPRESSED_SRGB_EXT = 0x8C48;
        #endregion GL_COMPRESSED_SRGB_EXT

        #region GL_COMPRESSED_SRGB_ALPHA_EXT
        public const GLuint GL_COMPRESSED_SRGB_ALPHA_EXT = 0x8C49;
        #endregion GL_COMPRESSED_SRGB_ALPHA_EXT

        #region GL_COMPRESSED_SLUMINANCE_EXT
        public const GLuint GL_COMPRESSED_SLUMINANCE_EXT = 0x8C4A;
        #endregion GL_COMPRESSED_SLUMINANCE_EXT

        #region GL_COMPRESSED_SLUMINANCE_ALPHA_EXT
        public const GLuint GL_COMPRESSED_SLUMINANCE_ALPHA_EXT = 0x8C4B;
        #endregion GL_COMPRESSED_SLUMINANCE_ALPHA_EXT

        #region GL_COMPRESSED_SRGB_S3TC_DXT1_EXT
        public const GLuint GL_COMPRESSED_SRGB_S3TC_DXT1_EXT = 0x8C4C;
        #endregion GL_COMPRESSED_SRGB_S3TC_DXT1_EXT

        #region GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT
        public const GLuint GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT = 0x8C4D;
        #endregion GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT

        #region GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT
        public const GLuint GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT = 0x8C4E;
        #endregion GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT

        #region GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT
        public const GLuint GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT = 0x8C4F;
        #endregion GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT

        #region GL_READ_FRAMEBUFFER_EXT
        public const GLuint GL_READ_FRAMEBUFFER_EXT = 0x8CA8;
        #endregion GL_READ_FRAMEBUFFER_EXT

        #region GL_DRAW_FRAMEBUFFER_EXT
        public const GLuint GL_DRAW_FRAMEBUFFER_EXT = 0x8CA9;
        #endregion GL_DRAW_FRAMEBUFFER_EXT

        #region GL_READ_FRAMEBUFFER_BINDING_EXT
        public const GLuint GL_READ_FRAMEBUFFER_BINDING_EXT = GL_FRAMEBUFFER_BINDING_EXT;
        #endregion GL_READ_FRAMEBUFFER_BINDING_EXT

        #region GL_DRAW_FRAMEBUFFER_BINDING_EXT
        public const GLuint GL_DRAW_FRAMEBUFFER_BINDING_EXT = 0x8CAA;
        #endregion GL_DRAW_FRAMEBUFFER_BINDING_EXT

        #region GL_RENDERBUFFER_SAMPLES_EXT
        public const GLuint GL_RENDERBUFFER_SAMPLES_EXT = 0x8CAB;
        #endregion GL_RENDERBUFFER_SAMPLES_EXT

        #region GL_TEXTURE_1D_STACK_MESAX
        public const GLuint GL_TEXTURE_1D_STACK_MESAX = 0x8759;
        #endregion GL_TEXTURE_1D_STACK_MESAX

        #region GL_TEXTURE_2D_STACK_MESAX
        public const GLuint GL_TEXTURE_2D_STACK_MESAX = 0x875A;
        #endregion GL_TEXTURE_2D_STACK_MESAX

        #region GL_PROXY_TEXTURE_1D_STACK_MESAX
        public const GLuint GL_PROXY_TEXTURE_1D_STACK_MESAX = 0x875B;
        #endregion GL_PROXY_TEXTURE_1D_STACK_MESAX

        #region GL_PROXY_TEXTURE_2D_STACK_MESAX
        public const GLuint GL_PROXY_TEXTURE_2D_STACK_MESAX = 0x875C;
        #endregion GL_PROXY_TEXTURE_2D_STACK_MESAX

        #region GL_TEXTURE_1D_STACK_BINDING_MESAX
        public const GLuint GL_TEXTURE_1D_STACK_BINDING_MESAX = 0x875D;
        #endregion GL_TEXTURE_1D_STACK_BINDING_MESAX

        #region GL_TEXTURE_2D_STACK_BINDING_MESAX
        public const GLuint GL_TEXTURE_2D_STACK_BINDING_MESAX = 0x875E;
        #endregion GL_TEXTURE_2D_STACK_BINDING_MESAX

        #region GL_TIME_ELAPSED_EXT
        public const GLuint GL_TIME_ELAPSED_EXT = 0x88BF;
        #endregion GL_TIME_ELAPSED_EXT

        #endregion Public Constants

        #region Function signatures

        /// <summary>
        /// 
        /// </summary>
        public static class Delegates
        {
            public delegate void glNewList(GLuint list, GLenum mode);

            public delegate void glEndList();

            public delegate void glCallList(GLuint list);

            public delegate void glCallLists_(GLsizei n, GLenum type, IntPtr lists);

            public delegate void glDeleteLists(GLuint list, GLsizei range);

            public delegate GLuint glGenLists(GLsizei range);

            public delegate void glListBase(GLuint @base);

            public delegate void glBegin(GLenum mode);

            public delegate void glBitmap_(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, IntPtr bitmap);

            public delegate void glColor3b(GLbyte red, GLbyte green, GLbyte blue);

            public delegate void glColor3bv_(IntPtr v);

            public delegate void glColor3d(GLdouble red, GLdouble green, GLdouble blue);

            public delegate void glColor3dv_(IntPtr v);

            public delegate void glColor3f(GLfloat red, GLfloat green, GLfloat blue);

            public delegate void glColor3fv_(IntPtr v);

            public delegate void glColor3i(GLint red, GLint green, GLint blue);

            public delegate void glColor3iv_(IntPtr v);

            public delegate void glColor3s(GLshort red, GLshort green, GLshort blue);

            public delegate void glColor3sv_(IntPtr v);

            public delegate void glColor3ub(GLubyte red, GLubyte green, GLubyte blue);

            public delegate void glColor3ubv_(IntPtr v);

            public delegate void glColor3ui(GLuint red, GLuint green, GLuint blue);

            public delegate void glColor3uiv_(IntPtr v);

            public delegate void glColor3us(GLushort red, GLushort green, GLushort blue);

            public delegate void glColor3usv_(IntPtr v);

            public delegate void glColor4b(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha);

            public delegate void glColor4bv_(IntPtr v);

            public delegate void glColor4d(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha);

            public delegate void glColor4dv_(IntPtr v);

            public delegate void glColor4f(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);

            public delegate void glColor4fv_(IntPtr v);

            public delegate void glColor4i(GLint red, GLint green, GLint blue, GLint alpha);

            public delegate void glColor4iv_(IntPtr v);

            public delegate void glColor4s(GLshort red, GLshort green, GLshort blue, GLshort alpha);

            public delegate void glColor4sv_(IntPtr v);

            public delegate void glColor4ub(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha);

            public delegate void glColor4ubv_(IntPtr v);

            public delegate void glColor4ui(GLuint red, GLuint green, GLuint blue, GLuint alpha);

            public delegate void glColor4uiv_(IntPtr v);

            public delegate void glColor4us(GLushort red, GLushort green, GLushort blue, GLushort alpha);

            public delegate void glColor4usv_(IntPtr v);

            public delegate void glEdgeFlag(GLboolean flag);

            public delegate void glEdgeFlagv_(IntPtr flag);

            public delegate void glEnd();

            public delegate void glIndexd(GLdouble c);

            public delegate void glIndexdv_(IntPtr c);

            public delegate void glIndexf(GLfloat c);

            public delegate void glIndexfv_(IntPtr c);

            public delegate void glIndexi(GLint c);

            public delegate void glIndexiv_(IntPtr c);

            public delegate void glIndexs(GLshort c);

            public delegate void glIndexsv_(IntPtr c);

            public delegate void glNormal3b(GLbyte nx, GLbyte ny, GLbyte nz);

            public delegate void glNormal3bv_(IntPtr v);

            public delegate void glNormal3d(GLdouble nx, GLdouble ny, GLdouble nz);

            public delegate void glNormal3dv_(IntPtr v);

            public delegate void glNormal3f(GLfloat nx, GLfloat ny, GLfloat nz);

            public delegate void glNormal3fv_(IntPtr v);

            public delegate void glNormal3i(GLint nx, GLint ny, GLint nz);

            public delegate void glNormal3iv_(IntPtr v);

            public delegate void glNormal3s(GLshort nx, GLshort ny, GLshort nz);

            public delegate void glNormal3sv_(IntPtr v);

            public delegate void glRasterPos2d(GLdouble x, GLdouble y);

            public delegate void glRasterPos2dv_(IntPtr v);

            public delegate void glRasterPos2f(GLfloat x, GLfloat y);

            public delegate void glRasterPos2fv_(IntPtr v);

            public delegate void glRasterPos2i(GLint x, GLint y);

            public delegate void glRasterPos2iv_(IntPtr v);

            public delegate void glRasterPos2s(GLshort x, GLshort y);

            public delegate void glRasterPos2sv_(IntPtr v);

            public delegate void glRasterPos3d(GLdouble x, GLdouble y, GLdouble z);

            public delegate void glRasterPos3dv_(IntPtr v);

            public delegate void glRasterPos3f(GLfloat x, GLfloat y, GLfloat z);

            public delegate void glRasterPos3fv_(IntPtr v);

            public delegate void glRasterPos3i(GLint x, GLint y, GLint z);

            public delegate void glRasterPos3iv_(IntPtr v);

            public delegate void glRasterPos3s(GLshort x, GLshort y, GLshort z);

            public delegate void glRasterPos3sv_(IntPtr v);

            public delegate void glRasterPos4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w);

            public delegate void glRasterPos4dv_(IntPtr v);

            public delegate void glRasterPos4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w);

            public delegate void glRasterPos4fv_(IntPtr v);

            public delegate void glRasterPos4i(GLint x, GLint y, GLint z, GLint w);

            public delegate void glRasterPos4iv_(IntPtr v);

            public delegate void glRasterPos4s(GLshort x, GLshort y, GLshort z, GLshort w);

            public delegate void glRasterPos4sv_(IntPtr v);

            public delegate void glRectd(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2);

            public delegate void glRectdv_(IntPtr v1, IntPtr v2);

            public delegate void glRectf(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2);

            public delegate void glRectfv_(IntPtr v1, IntPtr v2);

            public delegate void glRecti(GLint x1, GLint y1, GLint x2, GLint y2);

            public delegate void glRectiv_(IntPtr v1, IntPtr v2);

            public delegate void glRects(GLshort x1, GLshort y1, GLshort x2, GLshort y2);

            public delegate void glRectsv_(IntPtr v1, IntPtr v2);

            public delegate void glTexCoord1d(GLdouble s);

            public delegate void glTexCoord1dv_(IntPtr v);

            public delegate void glTexCoord1f(GLfloat s);

            public delegate void glTexCoord1fv_(IntPtr v);

            public delegate void glTexCoord1i(GLint s);

            public delegate void glTexCoord1iv_(IntPtr v);

            public delegate void glTexCoord1s(GLshort s);

            public delegate void glTexCoord1sv_(IntPtr v);

            public delegate void glTexCoord2d(GLdouble s, GLdouble t);

            public delegate void glTexCoord2dv_(IntPtr v);

            public delegate void glTexCoord2f(GLfloat s, GLfloat t);

            public delegate void glTexCoord2fv_(IntPtr v);

            public delegate void glTexCoord2i(GLint s, GLint t);

            public delegate void glTexCoord2iv_(IntPtr v);

            public delegate void glTexCoord2s(GLshort s, GLshort t);

            public delegate void glTexCoord2sv_(IntPtr v);

            public delegate void glTexCoord3d(GLdouble s, GLdouble t, GLdouble r);

            public delegate void glTexCoord3dv_(IntPtr v);

            public delegate void glTexCoord3f(GLfloat s, GLfloat t, GLfloat r);

            public delegate void glTexCoord3fv_(IntPtr v);

            public delegate void glTexCoord3i(GLint s, GLint t, GLint r);

            public delegate void glTexCoord3iv_(IntPtr v);

            public delegate void glTexCoord3s(GLshort s, GLshort t, GLshort r);

            public delegate void glTexCoord3sv_(IntPtr v);

            public delegate void glTexCoord4d(GLdouble s, GLdouble t, GLdouble r, GLdouble q);

            public delegate void glTexCoord4dv_(IntPtr v);

            public delegate void glTexCoord4f(GLfloat s, GLfloat t, GLfloat r, GLfloat q);

            public delegate void glTexCoord4fv_(IntPtr v);

            public delegate void glTexCoord4i(GLint s, GLint t, GLint r, GLint q);

            public delegate void glTexCoord4iv_(IntPtr v);

            public delegate void glTexCoord4s(GLshort s, GLshort t, GLshort r, GLshort q);

            public delegate void glTexCoord4sv_(IntPtr v);

            public delegate void glVertex2d(GLdouble x, GLdouble y);

            public delegate void glVertex2dv_(IntPtr v);

            public delegate void glVertex2f(GLfloat x, GLfloat y);

            public delegate void glVertex2fv_(IntPtr v);

            public delegate void glVertex2i(GLint x, GLint y);

            public delegate void glVertex2iv_(IntPtr v);

            public delegate void glVertex2s(GLshort x, GLshort y);

            public delegate void glVertex2sv_(IntPtr v);

            public delegate void glVertex3d(GLdouble x, GLdouble y, GLdouble z);

            public delegate void glVertex3dv_(IntPtr v);

            public delegate void glVertex3f(GLfloat x, GLfloat y, GLfloat z);

            public delegate void glVertex3fv_(IntPtr v);

            public delegate void glVertex3i(GLint x, GLint y, GLint z);

            public delegate void glVertex3iv_(IntPtr v);

            public delegate void glVertex3s(GLshort x, GLshort y, GLshort z);

            public delegate void glVertex3sv_(IntPtr v);

            public delegate void glVertex4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w);

            public delegate void glVertex4dv_(IntPtr v);

            public delegate void glVertex4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w);

            public delegate void glVertex4fv_(IntPtr v);

            public delegate void glVertex4i(GLint x, GLint y, GLint z, GLint w);

            public delegate void glVertex4iv_(IntPtr v);

            public delegate void glVertex4s(GLshort x, GLshort y, GLshort z, GLshort w);

            public delegate void glVertex4sv_(IntPtr v);

            public delegate void glClipPlane_(GLenum plane, IntPtr equation);

            public delegate void glColorMaterial(GLenum face, GLenum mode);

            public delegate void glCullFace(GLenum mode);

            public delegate void glFogf(GLenum pname, GLfloat param);

            public delegate void glFogfv_(GLenum pname, IntPtr parameters);

            public delegate void glFogi(GLenum pname, GLint param);

            public delegate void glFogiv_(GLenum pname, IntPtr parameters);

            public delegate void glFrontFace(GLenum mode);

            public delegate void glHint(GLenum target, GLenum mode);

            public delegate void glLightf(GLenum light, GLenum pname, GLfloat param);

            public delegate void glLightfv_(GLenum light, GLenum pname, IntPtr parameters);

            public delegate void glLighti(GLenum light, GLenum pname, GLint param);

            public delegate void glLightiv_(GLenum light, GLenum pname, IntPtr parameters);

            public delegate void glLightModelf(GLenum pname, GLfloat param);

            public delegate void glLightModelfv_(GLenum pname, IntPtr parameters);

            public delegate void glLightModeli(GLenum pname, GLint param);

            public delegate void glLightModeliv_(GLenum pname, IntPtr parameters);

            public delegate void glLineStipple_(GLint factor, GLushort pattern);

            public delegate void glLineWidth(GLfloat width);

            public delegate void glMaterialf(GLenum face, GLenum pname, GLfloat param);

            public delegate void glMaterialfv_(GLenum face, GLenum pname, IntPtr parameters);

            public delegate void glMateriali(GLenum face, GLenum pname, GLint param);

            public delegate void glMaterialiv_(GLenum face, GLenum pname, IntPtr parameters);

            public delegate void glPointSize(GLfloat size);

            public delegate void glPolygonMode(GLenum face, GLenum mode);

            public delegate void glPolygonStipple_(IntPtr mask);

            public delegate void glScissor(GLint x, GLint y, GLsizei width, GLsizei height);

            public delegate void glShadeModel(GLenum mode);

            public delegate void glTexParameterf(GLenum target, GLenum pname, GLfloat param);

            public delegate void glTexParameterfv_(GLenum target, GLenum pname, IntPtr parameters);

            public delegate void glTexParameteri(GLenum target, GLenum pname, GLint param);

            public delegate void glTexParameteriv_(GLenum target, GLenum pname, IntPtr parameters);

            public delegate void glTexImage1D_(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, IntPtr pixels);

            public delegate void glTexImage2D_(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, IntPtr pixels);

            public delegate void glTexEnvf(GLenum target, GLenum pname, GLfloat param);

            public delegate void glTexEnvfv_(GLenum target, GLenum pname, IntPtr parameters);

            public delegate void glTexEnvi(GLenum target, GLenum pname, GLint param);

            public delegate void glTexEnviv_(GLenum target, GLenum pname, IntPtr parameters);

            public delegate void glTexGend(GLenum coord, GLenum pname, GLdouble param);

            public delegate void glTexGendv_(GLenum coord, GLenum pname, IntPtr parameters);

            public delegate void glTexGenf(GLenum coord, GLenum pname, GLfloat param);

            public delegate void glTexGenfv_(GLenum coord, GLenum pname, IntPtr parameters);

            public delegate void glTexGeni(GLenum coord, GLenum pname, GLint param);

            public delegate void glTexGeniv_(GLenum coord, GLenum pname, IntPtr parameters);

            public delegate void glFeedbackBuffer_(GLsizei size, GLenum type, IntPtr buffer);

            public delegate void glSelectBuffer_(GLsizei size, IntPtr buffer);

            public delegate GLint glRenderMode(GLenum mode);

            public delegate void glInitNames();

            public delegate void glLoadName(GLuint name);

            public delegate void glPassThrough(GLfloat token);

            public delegate void glPopName();

            public delegate void glPushName(GLuint name);

            public delegate void glDrawBuffer(GLenum mode);

            public delegate void glClear(GLbitfield mask);

            public delegate void glClearAccum(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);

            public delegate void glClearIndex(GLfloat c);

            public delegate void glClearColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);

            public delegate void glClearStencil(GLint s);

            public delegate void glClearDepth(GLclampd depth);

            public delegate void glStencilMask(GLuint mask);

            public delegate void glColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);

            public delegate void glDepthMask(GLboolean flag);

            public delegate void glIndexMask(GLuint mask);

            public delegate void glAccum(GLenum op, GLfloat value);

            public delegate void glDisable(GLenum cap);

            public delegate void glEnable(GLenum cap);

            public delegate void glFinish();

            public delegate void glFlush();

            public delegate void glPopAttrib();

            public delegate void glPushAttrib(GLbitfield mask);

            public delegate void glMap1d_(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, IntPtr points);

            public delegate void glMap1f_(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, IntPtr points);

            public delegate void glMap2d_(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, IntPtr points);

            public delegate void glMap2f_(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, IntPtr points);

            public delegate void glMapGrid1d(GLint un, GLdouble u1, GLdouble u2);

            public delegate void glMapGrid1f(GLint un, GLfloat u1, GLfloat u2);

            public delegate void glMapGrid2d(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2);

            public delegate void glMapGrid2f(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2);

            public delegate void glEvalCoord1d(GLdouble u);

            public delegate void glEvalCoord1dv_(IntPtr u);

            public delegate void glEvalCoord1f(GLfloat u);

            public delegate void glEvalCoord1fv_(IntPtr u);

            public delegate void glEvalCoord2d(GLdouble u, GLdouble v);

            public delegate void glEvalCoord2dv_(IntPtr u);

            public delegate void glEvalCoord2f(GLfloat u, GLfloat v);

            public delegate void glEvalCoord2fv_(IntPtr u);

            public delegate void glEvalMesh1(GLenum mode, GLint i1, GLint i2);

            public delegate void glEvalPoint1(GLint i);

            public delegate void glEvalMesh2(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2);

            public delegate void glEvalPoint2(GLint i, GLint j);

            public delegate void glAlphaFunc(GLenum func, GLclampf reference);

            public delegate void glBlendFunc(GLenum sfactor, GLenum dfactor);

            public delegate void glLogicOp(GLenum opcode);

            public delegate void glStencilFunc(GLenum func, GLint reference, GLuint mask);

            public delegate void glStencilOp(GLenum fail, GLenum zfail, GLenum zpass);

            public delegate void glDepthFunc(GLenum func);

            public delegate void glPixelZoom(GLfloat xfactor, GLfloat yfactor);

            public delegate void glPixelTransferf(GLenum pname, GLfloat param);

            public delegate void glPixelTransferi(GLenum pname, GLint param);

            public delegate void glPixelStoref(GLenum pname, GLfloat param);

            public delegate void glPixelStorei(GLenum pname, GLint param);

            public delegate void glPixelMapfv_(GLenum map, GLint mapsize, IntPtr values);

            public delegate void glPixelMapuiv_(GLenum map, GLint mapsize, IntPtr values);

            public delegate void glPixelMapusv_(GLenum map, GLint mapsize, IntPtr values);

            public delegate void glReadBuffer(GLenum mode);

            public delegate void glCopyPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type);

            public delegate void glReadPixels_(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, IntPtr pixels);

            public delegate void glDrawPixels_(GLsizei width, GLsizei height, GLenum format, GLenum type, IntPtr pixels);

            public delegate void glGetBooleanv_(GLenum pname, IntPtr parameters);

            public delegate void glGetClipPlane_(GLenum plane, IntPtr equation);

            public delegate void glGetDoublev_(GLenum pname, IntPtr parameters);

            public delegate GLenum glGetError();

            public delegate void glGetFloatv_(GLenum pname, IntPtr parameters);

            public delegate void glGetIntegerv_(GLenum pname, IntPtr parameters);

            public delegate void glGetLightfv_(GLenum light, GLenum pname, IntPtr parameters);

            public delegate void glGetLightiv_(GLenum light, GLenum pname, IntPtr parameters);

            public delegate void glGetMapdv_(GLenum target, GLenum query, IntPtr v);

            public delegate void glGetMapfv_(GLenum target, GLenum query, IntPtr v);

            public delegate void glGetMapiv_(GLenum target, GLenum query, IntPtr v);

            public delegate void glGetMaterialfv_(GLenum face, GLenum pname, IntPtr parameters);

            public delegate void glGetMaterialiv_(GLenum face, GLenum pname, IntPtr parameters);

            public delegate void glGetPixelMapfv_(GLenum map, IntPtr values);

            public delegate void glGetPixelMapuiv_(GLenum map, IntPtr values);

            public delegate void glGetPixelMapusv_(GLenum map, IntPtr values);

            public delegate void glGetPolygonStipple_(IntPtr mask);

            public delegate IntPtr glGetString_(GLenum name);

            public delegate void glGetTexEnvfv_(GLenum target, GLenum pname, IntPtr parameters);

            public delegate void glGetTexEnviv_(GLenum target, GLenum pname, IntPtr parameters);

            public delegate void glGetTexGendv_(GLenum coord, GLenum pname, IntPtr parameters);

            public delegate void glGetTexGenfv_(GLenum coord, GLenum pname, IntPtr parameters);

            public delegate void glGetTexGeniv_(GLenum coord, GLenum pname, IntPtr parameters);

            public delegate void glGetTexImage_(GLenum target, GLint level, GLenum format, GLenum type, IntPtr pixels);

            public delegate void glGetTexParameterfv_(GLenum target, GLenum pname, IntPtr parameters);

            public delegate void glGetTexParameteriv_(GLenum target, GLenum pname, IntPtr parameters);

            public delegate void glGetTexLevelParameterfv_(GLenum target, GLint level, GLenum pname, IntPtr parameters);

            public delegate void glGetTexLevelParameteriv_(GLenum target, GLint level, GLenum pname, IntPtr parameters);

            public delegate GLboolean glIsEnabled(GLenum cap);

            public delegate GLboolean glIsList(GLuint list);

            public delegate void glDepthRange(GLclampd near, GLclampd far);

            public delegate void glFrustum(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);

            public delegate void glLoadIdentity();

            public delegate void glLoadMatrixf_(IntPtr m);

            public delegate void glLoadMatrixd_(IntPtr m);

            public delegate void glMatrixMode(GLenum mode);

            public delegate void glMultMatrixf_(IntPtr m);

            public delegate void glMultMatrixd_(IntPtr m);

            public delegate void glOrtho(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);

            public delegate void glPopMatrix();

            public delegate void glPushMatrix();

            public delegate void glRotated(GLdouble angle, GLdouble x, GLdouble y, GLdouble z);

            public delegate void glRotatef(GLfloat angle, GLfloat x, GLfloat y, GLfloat z);

            public delegate void glScaled(GLdouble x, GLdouble y, GLdouble z);

            public delegate void glScalef(GLfloat x, GLfloat y, GLfloat z);

            public delegate void glTranslated(GLdouble x, GLdouble y, GLdouble z);

            public delegate void glTranslatef(GLfloat x, GLfloat y, GLfloat z);

            public delegate void glViewport(GLint x, GLint y, GLsizei width, GLsizei height);

            public delegate void glArrayElement(GLint i);

            public delegate void glColorPointer_(GLint size, GLenum type, GLsizei stride, IntPtr pointer);

            public delegate void glDisableClientState(GLenum array);

            public delegate void glDrawArrays(GLenum mode, GLint first, GLsizei count);

            public delegate void glDrawElements_(GLenum mode, GLsizei count, GLenum type, IntPtr indices);

            public delegate void glEdgeFlagPointer_(GLsizei stride, IntPtr pointer);

            public delegate void glEnableClientState(GLenum array);

            public delegate void glGetPointerv_(GLenum pname, IntPtr parameters);

            public delegate void glIndexPointer_(GLenum type, GLsizei stride, IntPtr pointer);

            public delegate void glInterleavedArrays_(GLenum format, GLsizei stride, IntPtr pointer);

            public delegate void glNormalPointer_(GLenum type, GLsizei stride, IntPtr pointer);

            public delegate void glTexCoordPointer_(GLint size, GLenum type, GLsizei stride, IntPtr pointer);

            public delegate void glVertexPointer_(GLint size, GLenum type, GLsizei stride, IntPtr pointer);

            public delegate void glPolygonOffset(GLfloat factor, GLfloat units);

            public delegate void glCopyTexImage1D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);

            public delegate void glCopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);

            public delegate void glCopyTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);

            public delegate void glCopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);

            public delegate void glTexSubImage1D_(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, IntPtr pixels);

            public delegate void glTexSubImage2D_(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, IntPtr pixels);

            public delegate GLboolean glAreTexturesResident_(GLsizei n, IntPtr textures, IntPtr residences);

            public delegate void glBindTexture(GLenum target, GLuint texture);

            public delegate void glDeleteTextures_(GLsizei n, IntPtr textures);

            public delegate void glGenTextures_(GLsizei n, IntPtr textures);

            public delegate GLboolean glIsTexture(GLuint texture);

            public delegate void glPrioritizeTextures_(GLsizei n, IntPtr textures, IntPtr priorities);

            public delegate void glIndexub(GLubyte c);

            public delegate void glIndexubv_(IntPtr c);

            public delegate void glPopClientAttrib();

            public delegate void glPushClientAttrib(GLbitfield mask);

            public delegate void glBlendColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);

            public delegate void glBlendEquation(GLenum mode);

            public delegate void glDrawRangeElements_(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, IntPtr indices);

            public delegate void glColorTable_(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, IntPtr table);

            public delegate void glColorTableParameterfv_(GLenum target, GLenum pname, IntPtr parameters);

            public delegate void glColorTableParameteriv_(GLenum target, GLenum pname, IntPtr parameters);

            public delegate void glCopyColorTable(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);

            public delegate void glGetColorTable_(GLenum target, GLenum format, GLenum type, IntPtr table);

            public delegate void glGetColorTableParameterfv_(GLenum target, GLenum pname, IntPtr parameters);

            public delegate void glGetColorTableParameteriv_(GLenum target, GLenum pname, IntPtr parameters);

            public delegate void glColorSubTable_(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, IntPtr data);

            public delegate void glCopyColorSubTable(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width);

            public delegate void glConvolutionFilter1D_(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, IntPtr image);

            public delegate void glConvolutionFilter2D_(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, IntPtr image);

            public delegate void glConvolutionParameterf(GLenum target, GLenum pname, GLfloat parameters);

            public delegate void glConvolutionParameterfv_(GLenum target, GLenum pname, IntPtr parameters);

            public delegate void glConvolutionParameteri(GLenum target, GLenum pname, GLint parameters);

            public delegate void glConvolutionParameteriv_(GLenum target, GLenum pname, IntPtr parameters);

            public delegate void glCopyConvolutionFilter1D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);

            public delegate void glCopyConvolutionFilter2D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height);

            public delegate void glGetConvolutionFilter_(GLenum target, GLenum format, GLenum type, IntPtr image);

            public delegate void glGetConvolutionParameterfv_(GLenum target, GLenum pname, IntPtr parameters);

            public delegate void glGetConvolutionParameteriv_(GLenum target, GLenum pname, IntPtr parameters);

            public delegate void glGetSeparableFilter_(GLenum target, GLenum format, GLenum type, IntPtr row, IntPtr column, IntPtr span);

            public delegate void glSeparableFilter2D_(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, IntPtr row, IntPtr column);

            public delegate void glGetHistogram_(GLenum target, GLboolean reset, GLenum format, GLenum type, IntPtr values);

            public delegate void glGetHistogramParameterfv_(GLenum target, GLenum pname, IntPtr parameters);

            public delegate void glGetHistogramParameteriv_(GLenum target, GLenum pname, IntPtr parameters);

            public delegate void glGetMinmax_(GLenum target, GLboolean reset, GLenum format, GLenum type, IntPtr values);

            public delegate void glGetMinmaxParameterfv_(GLenum target, GLenum pname, IntPtr parameters);

            public delegate void glGetMinmaxParameteriv_(GLenum target, GLenum pname, IntPtr parameters);

            public delegate void glHistogram(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink);

            public delegate void glMinmax(GLenum target, GLenum internalformat, GLboolean sink);

            public delegate void glResetHistogram(GLenum target);

            public delegate void glResetMinmax(GLenum target);

            public delegate void glTexImage3D_(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, IntPtr pixels);

            public delegate void glTexSubImage3D_(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, IntPtr pixels);

            public delegate void glCopyTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);

            public delegate void glActiveTexture(GLenum texture);

            public delegate void glClientActiveTexture(GLenum texture);

            public delegate void glMultiTexCoord1d(GLenum target, GLdouble s);

            public delegate void glMultiTexCoord1dv_(GLenum target, IntPtr v);

            public delegate void glMultiTexCoord1f(GLenum target, GLfloat s);

            public delegate void glMultiTexCoord1fv_(GLenum target, IntPtr v);

            public delegate void glMultiTexCoord1i(GLenum target, GLint s);

            public delegate void glMultiTexCoord1iv_(GLenum target, IntPtr v);

            public delegate void glMultiTexCoord1s(GLenum target, GLshort s);

            public delegate void glMultiTexCoord1sv_(GLenum target, IntPtr v);

            public delegate void glMultiTexCoord2d(GLenum target, GLdouble s, GLdouble t);

            public delegate void glMultiTexCoord2dv_(GLenum target, IntPtr v);

            public delegate void glMultiTexCoord2f(GLenum target, GLfloat s, GLfloat t);

            public delegate void glMultiTexCoord2fv_(GLenum target, IntPtr v);

            public delegate void glMultiTexCoord2i(GLenum target, GLint s, GLint t);

            public delegate void glMultiTexCoord2iv_(GLenum target, IntPtr v);

            public delegate void glMultiTexCoord2s(GLenum target, GLshort s, GLshort t);

            public delegate void glMultiTexCoord2sv_(GLenum target, IntPtr v);

            public delegate void glMultiTexCoord3d(GLenum target, GLdouble s, GLdouble t, GLdouble r);

            public delegate void glMultiTexCoord3dv_(GLenum target, IntPtr v);

            public delegate void glMultiTexCoord3f(GLenum target, GLfloat s, GLfloat t, GLfloat r);

            public delegate void glMultiTexCoord3fv_(GLenum target, IntPtr v);

            public delegate void glMultiTexCoord3i(GLenum target, GLint s, GLint t, GLint r);

            public delegate void glMultiTexCoord3iv_(GLenum target, IntPtr v);

            public delegate void glMultiTexCoord3s(GLenum target, GLshort s, GLshort t, GLshort r);

            public delegate void glMultiTexCoord3sv_(GLenum target, IntPtr v);

            public delegate void glMultiTexCoord4d(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);

            public delegate void glMultiTexCoord4dv_(GLenum target, IntPtr v);

            public delegate void glMultiTexCoord4f(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);

            public delegate void glMultiTexCoord4fv_(GLenum target, IntPtr v);

            public delegate void glMultiTexCoord4i(GLenum target, GLint s, GLint t, GLint r, GLint q);

            public delegate void glMultiTexCoord4iv_(GLenum target, IntPtr v);

            public delegate void glMultiTexCoord4s(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);

            public delegate void glMultiTexCoord4sv_(GLenum target, IntPtr v);

            public delegate void glLoadTransposeMatrixf_(IntPtr m);

            public delegate void glLoadTransposeMatrixd_(IntPtr m);

            public delegate void glMultTransposeMatrixf_(IntPtr m);

            public delegate void glMultTransposeMatrixd_(IntPtr m);

            public delegate void glSampleCoverage(GLclampf value, GLboolean invert);

            public delegate void glCompressedTexImage3D_(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, IntPtr data);

            public delegate void glCompressedTexImage2D_(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, IntPtr data);

            public delegate void glCompressedTexImage1D_(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, IntPtr data);

            public delegate void glCompressedTexSubImage3D_(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, IntPtr data);

            public delegate void glCompressedTexSubImage2D_(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, IntPtr data);

            public delegate void glCompressedTexSubImage1D_(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, IntPtr data);

            public delegate void glGetCompressedTexImage_(GLenum target, GLint level, IntPtr img);

            public delegate void glBlendFuncSeparate(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);

            public delegate void glFogCoordf(GLfloat coord);

            public delegate void glFogCoordfv_(IntPtr coord);

            public delegate void glFogCoordd(GLdouble coord);

            public delegate void glFogCoorddv_(IntPtr coord);

            public delegate void glFogCoordPointer_(GLenum type, GLsizei stride, IntPtr pointer);

            public delegate void glMultiDrawArrays_(GLenum mode, IntPtr first, IntPtr count, GLsizei primcount);

            public delegate void glMultiDrawElements_(GLenum mode, IntPtr count, GLenum type, IntPtr indices, GLsizei primcount);

            public delegate void glPointParameterf(GLenum pname, GLfloat param);

            public delegate void glPointParameterfv_(GLenum pname, IntPtr parameters);

            public delegate void glPointParameteri(GLenum pname, GLint param);

            public delegate void glPointParameteriv_(GLenum pname, IntPtr parameters);

            public delegate void glSecondaryColor3b(GLbyte red, GLbyte green, GLbyte blue);

            public delegate void glSecondaryColor3bv_(IntPtr v);

            public delegate void glSecondaryColor3d(GLdouble red, GLdouble green, GLdouble blue);

            public delegate void glSecondaryColor3dv_(IntPtr v);

            public delegate void glSecondaryColor3f(GLfloat red, GLfloat green, GLfloat blue);

            public delegate void glSecondaryColor3fv_(IntPtr v);

            public delegate void glSecondaryColor3i(GLint red, GLint green, GLint blue);

            public delegate void glSecondaryColor3iv_(IntPtr v);

            public delegate void glSecondaryColor3s(GLshort red, GLshort green, GLshort blue);

            public delegate void glSecondaryColor3sv_(IntPtr v);

            public delegate void glSecondaryColor3ub(GLubyte red, GLubyte green, GLubyte blue);

            public delegate void glSecondaryColor3ubv_(IntPtr v);

            public delegate void glSecondaryColor3ui(GLuint red, GLuint green, GLuint blue);

            public delegate void glSecondaryColor3uiv_(IntPtr v);

            public delegate void glSecondaryColor3us(GLushort red, GLushort green, GLushort blue);

            public delegate void glSecondaryColor3usv_(IntPtr v);

            public delegate void glSecondaryColorPointer_(GLint size, GLenum type, GLsizei stride, IntPtr pointer);

            public delegate void glWindowPos2d(GLdouble x, GLdouble y);

            public delegate void glWindowPos2dv_(IntPtr v);

            public delegate void glWindowPos2f(GLfloat x, GLfloat y);

            public delegate void glWindowPos2fv_(IntPtr v);

            public delegate void glWindowPos2i(GLint x, GLint y);

            public delegate void glWindowPos2iv_(IntPtr v);

            public delegate void glWindowPos2s(GLshort x, GLshort y);

            public delegate void glWindowPos2sv_(IntPtr v);

            public delegate void glWindowPos3d(GLdouble x, GLdouble y, GLdouble z);

            public delegate void glWindowPos3dv_(IntPtr v);

            public delegate void glWindowPos3f(GLfloat x, GLfloat y, GLfloat z);

            public delegate void glWindowPos3fv_(IntPtr v);

            public delegate void glWindowPos3i(GLint x, GLint y, GLint z);

            public delegate void glWindowPos3iv_(IntPtr v);

            public delegate void glWindowPos3s(GLshort x, GLshort y, GLshort z);

            public delegate void glWindowPos3sv_(IntPtr v);

            public delegate void glGenQueries_(GLsizei n, IntPtr ids);

            public delegate void glDeleteQueries_(GLsizei n, IntPtr ids);

            public delegate GLboolean glIsQuery(GLuint id);

            public delegate void glBeginQuery(GLenum target, GLuint id);

            public delegate void glEndQuery(GLenum target);

            public delegate void glGetQueryiv_(GLenum target, GLenum pname, IntPtr parameters);

            public delegate void glGetQueryObjectiv_(GLuint id, GLenum pname, IntPtr parameters);

            public delegate void glGetQueryObjectuiv_(GLuint id, GLenum pname, IntPtr parameters);

            public delegate void glBindBuffer(GLenum target, GLuint buffer);

            public delegate void glDeleteBuffers_(GLsizei n, IntPtr buffers);

            public delegate void glGenBuffers_(GLsizei n, IntPtr buffers);

            public delegate GLboolean glIsBuffer(GLuint buffer);

            public delegate void glBufferData_(GLenum target, GLsizeiptr size, IntPtr data, GLenum usage);

            public delegate void glBufferSubData_(GLenum target, GLintptr offset, GLsizeiptr size, IntPtr data);

            public delegate void glGetBufferSubData_(GLenum target, GLintptr offset, GLsizeiptr size, IntPtr data);

            public delegate IntPtr glMapBuffer(GLenum target, GLenum access);

            public delegate GLboolean glUnmapBuffer(GLenum target);

            public delegate void glGetBufferParameteriv_(GLenum target, GLenum pname, IntPtr parameters);

            public delegate void glGetBufferPointerv_(GLenum target, GLenum pname, IntPtr parameters);

            public delegate void glBlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha);

            public delegate void glDrawBuffers_(GLsizei n, IntPtr bufs);

            public delegate void glStencilOpSeparate(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);

            public delegate void glStencilFuncSeparate(GLenum frontfunc, GLenum backfunc, GLint reference, GLuint mask);

            public delegate void glStencilMaskSeparate(GLenum face, GLuint mask);

            public delegate void glAttachShader(GLuint program, GLuint shader);

            public delegate void glBindAttribLocation(GLuint program, GLuint index, string name);

            public delegate void glCompileShader(GLuint shader);

            public delegate GLuint glCreateProgram();

            public delegate GLuint glCreateShader(GLenum type);

            public delegate void glDeleteProgram(GLuint program);

            public delegate void glDeleteShader(GLuint shader);

            public delegate void glDetachShader(GLuint program, GLuint shader);

            public delegate void glDisableVertexAttribArray(GLuint index);

            public delegate void glEnableVertexAttribArray(GLuint index);

            public delegate void glGetActiveAttrib_(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, IntPtr size, IntPtr type, StringBuilder name);

            public delegate void glGetActiveUniform_(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, IntPtr size, IntPtr type, StringBuilder name);

            public delegate void glGetAttachedShaders_(GLuint program, GLsizei maxCount, IntPtr count, IntPtr obj);

            public delegate GLint glGetAttribLocation(GLuint program, string name);

            public delegate void glGetProgramiv_(GLuint program, GLenum pname, IntPtr parameters);

            public delegate void glGetProgramInfoLog_(GLuint program, GLsizei bufSize, IntPtr length, StringBuilder infoLog);

            public delegate void glGetShaderiv_(GLuint shader, GLenum pname, IntPtr parameters);

            public delegate void glGetShaderInfoLog_(GLuint shader, GLsizei bufSize, IntPtr length, StringBuilder infoLog);

            public delegate void glGetShaderSource_(GLuint shader, GLsizei bufSize, IntPtr length, StringBuilder source);

            public delegate GLint glGetUniformLocation(GLuint program, string name);

            public delegate void glGetUniformfv_(GLuint program, GLint location, IntPtr parameters);

            public delegate void glGetUniformiv_(GLuint program, GLint location, IntPtr parameters);

            public delegate void glGetVertexAttribdv_(GLuint index, GLenum pname, IntPtr parameters);

            public delegate void glGetVertexAttribfv_(GLuint index, GLenum pname, IntPtr parameters);

            public delegate void glGetVertexAttribiv_(GLuint index, GLenum pname, IntPtr parameters);

            public delegate void glGetVertexAttribPointerv_(GLuint index, GLenum pname, IntPtr pointer);

            public delegate GLboolean glIsProgram(GLuint program);

            public delegate GLboolean glIsShader(GLuint shader);

            public delegate void glLinkProgram(GLuint program);

            public delegate void glShaderSource_(GLuint shader, GLsizei count, string[] @string, IntPtr length);

            public delegate void glUseProgram(GLuint program);

            public delegate void glUniform1f(GLint location, GLfloat v0);

            public delegate void glUniform2f(GLint location, GLfloat v0, GLfloat v1);

            public delegate void glUniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);

            public delegate void glUniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);

            public delegate void glUniform1i(GLint location, GLint v0);

            public delegate void glUniform2i(GLint location, GLint v0, GLint v1);

            public delegate void glUniform3i(GLint location, GLint v0, GLint v1, GLint v2);

            public delegate void glUniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);

            public delegate void glUniform1fv_(GLint location, GLsizei count, IntPtr value);

            public delegate void glUniform2fv_(GLint location, GLsizei count, IntPtr value);

            public delegate void glUniform3fv_(GLint location, GLsizei count, IntPtr value);

            public delegate void glUniform4fv_(GLint location, GLsizei count, IntPtr value);

            public delegate void glUniform1iv_(GLint location, GLsizei count, IntPtr value);

            public delegate void glUniform2iv_(GLint location, GLsizei count, IntPtr value);

            public delegate void glUniform3iv_(GLint location, GLsizei count, IntPtr value);

            public delegate void glUniform4iv_(GLint location, GLsizei count, IntPtr value);

            public delegate void glUniformMatrix2fv_(GLint location, GLsizei count, GLboolean transpose, IntPtr value);

            public delegate void glUniformMatrix3fv_(GLint location, GLsizei count, GLboolean transpose, IntPtr value);

            public delegate void glUniformMatrix4fv_(GLint location, GLsizei count, GLboolean transpose, IntPtr value);

            public delegate void glValidateProgram(GLuint program);

            public delegate void glVertexAttrib1d(GLuint index, GLdouble x);

            public delegate void glVertexAttrib1dv_(GLuint index, IntPtr v);

            public delegate void glVertexAttrib1f(GLuint index, GLfloat x);

            public delegate void glVertexAttrib1fv_(GLuint index, IntPtr v);

            public delegate void glVertexAttrib1s(GLuint index, GLshort x);

            public delegate void glVertexAttrib1sv_(GLuint index, IntPtr v);

            public delegate void glVertexAttrib2d(GLuint index, GLdouble x, GLdouble y);

            public delegate void glVertexAttrib2dv_(GLuint index, IntPtr v);

            public delegate void glVertexAttrib2f(GLuint index, GLfloat x, GLfloat y);

            public delegate void glVertexAttrib2fv_(GLuint index, IntPtr v);

            public delegate void glVertexAttrib2s(GLuint index, GLshort x, GLshort y);

            public delegate void glVertexAttrib2sv_(GLuint index, IntPtr v);

            public delegate void glVertexAttrib3d(GLuint index, GLdouble x, GLdouble y, GLdouble z);

            public delegate void glVertexAttrib3dv_(GLuint index, IntPtr v);

            public delegate void glVertexAttrib3f(GLuint index, GLfloat x, GLfloat y, GLfloat z);

            public delegate void glVertexAttrib3fv_(GLuint index, IntPtr v);

            public delegate void glVertexAttrib3s(GLuint index, GLshort x, GLshort y, GLshort z);

            public delegate void glVertexAttrib3sv_(GLuint index, IntPtr v);

            public delegate void glVertexAttrib4Nbv_(GLuint index, IntPtr v);

            public delegate void glVertexAttrib4Niv_(GLuint index, IntPtr v);

            public delegate void glVertexAttrib4Nsv_(GLuint index, IntPtr v);

            public delegate void glVertexAttrib4Nub(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);

            public delegate void glVertexAttrib4Nubv_(GLuint index, IntPtr v);

            public delegate void glVertexAttrib4Nuiv_(GLuint index, IntPtr v);

            public delegate void glVertexAttrib4Nusv_(GLuint index, IntPtr v);

            public delegate void glVertexAttrib4bv_(GLuint index, IntPtr v);

            public delegate void glVertexAttrib4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);

            public delegate void glVertexAttrib4dv_(GLuint index, IntPtr v);

            public delegate void glVertexAttrib4f(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);

            public delegate void glVertexAttrib4fv_(GLuint index, IntPtr v);

            public delegate void glVertexAttrib4iv_(GLuint index, IntPtr v);

            public delegate void glVertexAttrib4s(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);

            public delegate void glVertexAttrib4sv_(GLuint index, IntPtr v);

            public delegate void glVertexAttrib4ubv_(GLuint index, IntPtr v);

            public delegate void glVertexAttrib4uiv_(GLuint index, IntPtr v);

            public delegate void glVertexAttrib4usv_(GLuint index, IntPtr v);

            public delegate void glVertexAttribPointer_(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, IntPtr pointer);

            public delegate void glUniformMatrix2x3fv_(GLint location, GLsizei count, GLboolean transpose, IntPtr value);

            public delegate void glUniformMatrix3x2fv_(GLint location, GLsizei count, GLboolean transpose, IntPtr value);

            public delegate void glUniformMatrix2x4fv_(GLint location, GLsizei count, GLboolean transpose, IntPtr value);

            public delegate void glUniformMatrix4x2fv_(GLint location, GLsizei count, GLboolean transpose, IntPtr value);

            public delegate void glUniformMatrix3x4fv_(GLint location, GLsizei count, GLboolean transpose, IntPtr value);

            public delegate void glUniformMatrix4x3fv_(GLint location, GLsizei count, GLboolean transpose, IntPtr value);

            public delegate void glActiveTextureARB(GLenum texture);

            public delegate void glClientActiveTextureARB(GLenum texture);

            public delegate void glMultiTexCoord1dARB(GLenum target, GLdouble s);

            public delegate void glMultiTexCoord1dvARB_(GLenum target, IntPtr v);

            public delegate void glMultiTexCoord1fARB(GLenum target, GLfloat s);

            public delegate void glMultiTexCoord1fvARB_(GLenum target, IntPtr v);

            public delegate void glMultiTexCoord1iARB(GLenum target, GLint s);

            public delegate void glMultiTexCoord1ivARB_(GLenum target, IntPtr v);

            public delegate void glMultiTexCoord1sARB(GLenum target, GLshort s);

            public delegate void glMultiTexCoord1svARB_(GLenum target, IntPtr v);

            public delegate void glMultiTexCoord2dARB(GLenum target, GLdouble s, GLdouble t);

            public delegate void glMultiTexCoord2dvARB_(GLenum target, IntPtr v);

            public delegate void glMultiTexCoord2fARB(GLenum target, GLfloat s, GLfloat t);

            public delegate void glMultiTexCoord2fvARB_(GLenum target, IntPtr v);

            public delegate void glMultiTexCoord2iARB(GLenum target, GLint s, GLint t);

            public delegate void glMultiTexCoord2ivARB_(GLenum target, IntPtr v);

            public delegate void glMultiTexCoord2sARB(GLenum target, GLshort s, GLshort t);

            public delegate void glMultiTexCoord2svARB_(GLenum target, IntPtr v);

            public delegate void glMultiTexCoord3dARB(GLenum target, GLdouble s, GLdouble t, GLdouble r);

            public delegate void glMultiTexCoord3dvARB_(GLenum target, IntPtr v);

            public delegate void glMultiTexCoord3fARB(GLenum target, GLfloat s, GLfloat t, GLfloat r);

            public delegate void glMultiTexCoord3fvARB_(GLenum target, IntPtr v);

            public delegate void glMultiTexCoord3iARB(GLenum target, GLint s, GLint t, GLint r);

            public delegate void glMultiTexCoord3ivARB_(GLenum target, IntPtr v);

            public delegate void glMultiTexCoord3sARB(GLenum target, GLshort s, GLshort t, GLshort r);

            public delegate void glMultiTexCoord3svARB_(GLenum target, IntPtr v);

            public delegate void glMultiTexCoord4dARB(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);

            public delegate void glMultiTexCoord4dvARB_(GLenum target, IntPtr v);

            public delegate void glMultiTexCoord4fARB(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);

            public delegate void glMultiTexCoord4fvARB_(GLenum target, IntPtr v);

            public delegate void glMultiTexCoord4iARB(GLenum target, GLint s, GLint t, GLint r, GLint q);

            public delegate void glMultiTexCoord4ivARB_(GLenum target, IntPtr v);

            public delegate void glMultiTexCoord4sARB(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);

            public delegate void glMultiTexCoord4svARB_(GLenum target, IntPtr v);

            public delegate void glLoadTransposeMatrixfARB_(IntPtr m);

            public delegate void glLoadTransposeMatrixdARB_(IntPtr m);

            public delegate void glMultTransposeMatrixfARB_(IntPtr m);

            public delegate void glMultTransposeMatrixdARB_(IntPtr m);

            public delegate void glSampleCoverageARB(GLclampf value, GLboolean invert);

            public delegate void glCompressedTexImage3DARB_(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, IntPtr data);

            public delegate void glCompressedTexImage2DARB_(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, IntPtr data);

            public delegate void glCompressedTexImage1DARB_(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, IntPtr data);

            public delegate void glCompressedTexSubImage3DARB_(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, IntPtr data);

            public delegate void glCompressedTexSubImage2DARB_(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, IntPtr data);

            public delegate void glCompressedTexSubImage1DARB_(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, IntPtr data);

            public delegate void glGetCompressedTexImageARB_(GLenum target, GLint level, IntPtr img);

            public delegate void glPointParameterfARB(GLenum pname, GLfloat param);

            public delegate void glPointParameterfvARB_(GLenum pname, IntPtr parameters);

            public delegate void glWeightbvARB_(GLint size, IntPtr weights);

            public delegate void glWeightsvARB_(GLint size, IntPtr weights);

            public delegate void glWeightivARB_(GLint size, IntPtr weights);

            public delegate void glWeightfvARB_(GLint size, IntPtr weights);

            public delegate void glWeightdvARB_(GLint size, IntPtr weights);

            public delegate void glWeightubvARB_(GLint size, IntPtr weights);

            public delegate void glWeightusvARB_(GLint size, IntPtr weights);

            public delegate void glWeightuivARB_(GLint size, IntPtr weights);

            public delegate void glWeightPointerARB_(GLint size, GLenum type, GLsizei stride, IntPtr pointer);

            public delegate void glVertexBlendARB(GLint count);

            public delegate void glCurrentPaletteMatrixARB(GLint index);

            public delegate void glMatrixIndexubvARB_(GLint size, IntPtr indices);

            public delegate void glMatrixIndexusvARB_(GLint size, IntPtr indices);

            public delegate void glMatrixIndexuivARB_(GLint size, IntPtr indices);

            public delegate void glMatrixIndexPointerARB_(GLint size, GLenum type, GLsizei stride, IntPtr pointer);

            public delegate void glWindowPos2dARB(GLdouble x, GLdouble y);

            public delegate void glWindowPos2dvARB_(IntPtr v);

            public delegate void glWindowPos2fARB(GLfloat x, GLfloat y);

            public delegate void glWindowPos2fvARB_(IntPtr v);

            public delegate void glWindowPos2iARB(GLint x, GLint y);

            public delegate void glWindowPos2ivARB_(IntPtr v);

            public delegate void glWindowPos2sARB(GLshort x, GLshort y);

            public delegate void glWindowPos2svARB_(IntPtr v);

            public delegate void glWindowPos3dARB(GLdouble x, GLdouble y, GLdouble z);

            public delegate void glWindowPos3dvARB_(IntPtr v);

            public delegate void glWindowPos3fARB(GLfloat x, GLfloat y, GLfloat z);

            public delegate void glWindowPos3fvARB_(IntPtr v);

            public delegate void glWindowPos3iARB(GLint x, GLint y, GLint z);

            public delegate void glWindowPos3ivARB_(IntPtr v);

            public delegate void glWindowPos3sARB(GLshort x, GLshort y, GLshort z);

            public delegate void glWindowPos3svARB_(IntPtr v);

            public delegate void glVertexAttrib1dARB(GLuint index, GLdouble x);

            public delegate void glVertexAttrib1dvARB_(GLuint index, IntPtr v);

            public delegate void glVertexAttrib1fARB(GLuint index, GLfloat x);

            public delegate void glVertexAttrib1fvARB_(GLuint index, IntPtr v);

            public delegate void glVertexAttrib1sARB(GLuint index, GLshort x);

            public delegate void glVertexAttrib1svARB_(GLuint index, IntPtr v);

            public delegate void glVertexAttrib2dARB(GLuint index, GLdouble x, GLdouble y);

            public delegate void glVertexAttrib2dvARB_(GLuint index, IntPtr v);

            public delegate void glVertexAttrib2fARB(GLuint index, GLfloat x, GLfloat y);

            public delegate void glVertexAttrib2fvARB_(GLuint index, IntPtr v);

            public delegate void glVertexAttrib2sARB(GLuint index, GLshort x, GLshort y);

            public delegate void glVertexAttrib2svARB_(GLuint index, IntPtr v);

            public delegate void glVertexAttrib3dARB(GLuint index, GLdouble x, GLdouble y, GLdouble z);

            public delegate void glVertexAttrib3dvARB_(GLuint index, IntPtr v);

            public delegate void glVertexAttrib3fARB(GLuint index, GLfloat x, GLfloat y, GLfloat z);

            public delegate void glVertexAttrib3fvARB_(GLuint index, IntPtr v);

            public delegate void glVertexAttrib3sARB(GLuint index, GLshort x, GLshort y, GLshort z);

            public delegate void glVertexAttrib3svARB_(GLuint index, IntPtr v);

            public delegate void glVertexAttrib4NbvARB_(GLuint index, IntPtr v);

            public delegate void glVertexAttrib4NivARB_(GLuint index, IntPtr v);

            public delegate void glVertexAttrib4NsvARB_(GLuint index, IntPtr v);

            public delegate void glVertexAttrib4NubARB(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);

            public delegate void glVertexAttrib4NubvARB_(GLuint index, IntPtr v);

            public delegate void glVertexAttrib4NuivARB_(GLuint index, IntPtr v);

            public delegate void glVertexAttrib4NusvARB_(GLuint index, IntPtr v);

            public delegate void glVertexAttrib4bvARB_(GLuint index, IntPtr v);

            public delegate void glVertexAttrib4dARB(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);

            public delegate void glVertexAttrib4dvARB_(GLuint index, IntPtr v);

            public delegate void glVertexAttrib4fARB(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);

            public delegate void glVertexAttrib4fvARB_(GLuint index, IntPtr v);

            public delegate void glVertexAttrib4ivARB_(GLuint index, IntPtr v);

            public delegate void glVertexAttrib4sARB(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);

            public delegate void glVertexAttrib4svARB_(GLuint index, IntPtr v);

            public delegate void glVertexAttrib4ubvARB_(GLuint index, IntPtr v);

            public delegate void glVertexAttrib4uivARB_(GLuint index, IntPtr v);

            public delegate void glVertexAttrib4usvARB_(GLuint index, IntPtr v);

            public delegate void glVertexAttribPointerARB_(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, IntPtr pointer);

            public delegate void glEnableVertexAttribArrayARB(GLuint index);

            public delegate void glDisableVertexAttribArrayARB(GLuint index);

            public delegate void glProgramStringARB_(GLenum target, GLenum format, GLsizei len, IntPtr @string);

            public delegate void glBindProgramARB(GLenum target, GLuint program);

            public delegate void glDeleteProgramsARB_(GLsizei n, IntPtr programs);

            public delegate void glGenProgramsARB_(GLsizei n, IntPtr programs);

            public delegate void glProgramEnvParameter4dARB(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);

            public delegate void glProgramEnvParameter4dvARB_(GLenum target, GLuint index, IntPtr parameters);

            public delegate void glProgramEnvParameter4fARB(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);

            public delegate void glProgramEnvParameter4fvARB_(GLenum target, GLuint index, IntPtr parameters);

            public delegate void glProgramLocalParameter4dARB(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);

            public delegate void glProgramLocalParameter4dvARB_(GLenum target, GLuint index, IntPtr parameters);

            public delegate void glProgramLocalParameter4fARB(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);

            public delegate void glProgramLocalParameter4fvARB_(GLenum target, GLuint index, IntPtr parameters);

            public delegate void glGetProgramEnvParameterdvARB_(GLenum target, GLuint index, IntPtr parameters);

            public delegate void glGetProgramEnvParameterfvARB_(GLenum target, GLuint index, IntPtr parameters);

            public delegate void glGetProgramLocalParameterdvARB_(GLenum target, GLuint index, IntPtr parameters);

            public delegate void glGetProgramLocalParameterfvARB_(GLenum target, GLuint index, IntPtr parameters);

            public delegate void glGetProgramivARB_(GLenum target, GLenum pname, IntPtr parameters);

            public delegate void glGetProgramStringARB_(GLenum target, GLenum pname, IntPtr @string);

            public delegate void glGetVertexAttribdvARB_(GLuint index, GLenum pname, IntPtr parameters);

            public delegate void glGetVertexAttribfvARB_(GLuint index, GLenum pname, IntPtr parameters);

            public delegate void glGetVertexAttribivARB_(GLuint index, GLenum pname, IntPtr parameters);

            public delegate void glGetVertexAttribPointervARB_(GLuint index, GLenum pname, IntPtr pointer);

            public delegate GLboolean glIsProgramARB(GLuint program);

            public delegate void glBindBufferARB(GLenum target, GLuint buffer);

            public delegate void glDeleteBuffersARB_(GLsizei n, IntPtr buffers);

            public delegate void glGenBuffersARB_(GLsizei n, IntPtr buffers);

            public delegate GLboolean glIsBufferARB(GLuint buffer);

            public delegate void glBufferDataARB_(GLenum target, GLsizeiptrARB size, IntPtr data, GLenum usage);

            public delegate void glBufferSubDataARB_(GLenum target, GLintptrARB offset, GLsizeiptrARB size, IntPtr data);

            public delegate void glGetBufferSubDataARB_(GLenum target, GLintptrARB offset, GLsizeiptrARB size, IntPtr data);

            public delegate IntPtr glMapBufferARB(GLenum target, GLenum access);

            public delegate GLboolean glUnmapBufferARB(GLenum target);

            public delegate void glGetBufferParameterivARB_(GLenum target, GLenum pname, IntPtr parameters);

            public delegate void glGetBufferPointervARB_(GLenum target, GLenum pname, IntPtr parameters);

            public delegate void glGenQueriesARB_(GLsizei n, IntPtr ids);

            public delegate void glDeleteQueriesARB_(GLsizei n, IntPtr ids);

            public delegate GLboolean glIsQueryARB(GLuint id);

            public delegate void glBeginQueryARB(GLenum target, GLuint id);

            public delegate void glEndQueryARB(GLenum target);

            public delegate void glGetQueryivARB_(GLenum target, GLenum pname, IntPtr parameters);

            public delegate void glGetQueryObjectivARB_(GLuint id, GLenum pname, IntPtr parameters);

            public delegate void glGetQueryObjectuivARB_(GLuint id, GLenum pname, IntPtr parameters);

            public delegate void glDeleteObjectARB(GLhandleARB obj);

            public delegate GLhandleARB glGetHandleARB(GLenum pname);

            public delegate void glDetachObjectARB(GLhandleARB containerObj, GLhandleARB attachedObj);

            public delegate GLhandleARB glCreateShaderObjectARB(GLenum shaderType);

            public delegate void glShaderSourceARB_(GLhandleARB shaderObj, GLsizei count, string @string, IntPtr length);

            public delegate void glCompileShaderARB(GLhandleARB shaderObj);

            public delegate GLhandleARB glCreateProgramObjectARB();

            public delegate void glAttachObjectARB(GLhandleARB containerObj, GLhandleARB obj);

            public delegate void glLinkProgramARB(GLhandleARB programObj);

            public delegate void glUseProgramObjectARB(GLhandleARB programObj);

            public delegate void glValidateProgramARB(GLhandleARB programObj);

            public delegate void glUniform1fARB(GLint location, GLfloat v0);

            public delegate void glUniform2fARB(GLint location, GLfloat v0, GLfloat v1);

            public delegate void glUniform3fARB(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);

            public delegate void glUniform4fARB(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);

            public delegate void glUniform1iARB(GLint location, GLint v0);

            public delegate void glUniform2iARB(GLint location, GLint v0, GLint v1);

            public delegate void glUniform3iARB(GLint location, GLint v0, GLint v1, GLint v2);

            public delegate void glUniform4iARB(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);

            public delegate void glUniform1fvARB_(GLint location, GLsizei count, IntPtr value);

            public delegate void glUniform2fvARB_(GLint location, GLsizei count, IntPtr value);

            public delegate void glUniform3fvARB_(GLint location, GLsizei count, IntPtr value);

            public delegate void glUniform4fvARB_(GLint location, GLsizei count, IntPtr value);

            public delegate void glUniform1ivARB_(GLint location, GLsizei count, IntPtr value);

            public delegate void glUniform2ivARB_(GLint location, GLsizei count, IntPtr value);

            public delegate void glUniform3ivARB_(GLint location, GLsizei count, IntPtr value);

            public delegate void glUniform4ivARB_(GLint location, GLsizei count, IntPtr value);

            public delegate void glUniformMatrix2fvARB_(GLint location, GLsizei count, GLboolean transpose, IntPtr value);

            public delegate void glUniformMatrix3fvARB_(GLint location, GLsizei count, GLboolean transpose, IntPtr value);

            public delegate void glUniformMatrix4fvARB_(GLint location, GLsizei count, GLboolean transpose, IntPtr value);

            public delegate void glGetObjectParameterfvARB_(GLhandleARB obj, GLenum pname, IntPtr parameters);

            public delegate void glGetObjectParameterivARB_(GLhandleARB obj, GLenum pname, IntPtr parameters);

            public delegate void glGetInfoLogARB_(GLhandleARB obj, GLsizei maxLength, IntPtr length, StringBuilder infoLog);

            public delegate void glGetAttachedObjectsARB_(GLhandleARB containerObj, GLsizei maxCount, IntPtr count, IntPtr obj);

            public delegate GLint glGetUniformLocationARB(GLhandleARB programObj, string name);

            public delegate void glGetActiveUniformARB_(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, IntPtr size, IntPtr type, StringBuilder name);

            public delegate void glGetUniformfvARB_(GLhandleARB programObj, GLint location, IntPtr parameters);

            public delegate void glGetUniformivARB_(GLhandleARB programObj, GLint location, IntPtr parameters);

            public delegate void glGetShaderSourceARB_(GLhandleARB obj, GLsizei maxLength, IntPtr length, StringBuilder source);

            public delegate void glBindAttribLocationARB(GLhandleARB programObj, GLuint index, string name);

            public delegate void glGetActiveAttribARB_(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, IntPtr size, IntPtr type, StringBuilder name);

            public delegate GLint glGetAttribLocationARB(GLhandleARB programObj, string name);

            public delegate void glDrawBuffersARB_(GLsizei n, IntPtr bufs);

            public delegate void glClampColorARB(GLenum target, GLenum clamp);

            public delegate void glBlendColorEXT(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);

            public delegate void glPolygonOffsetEXT(GLfloat factor, GLfloat bias);

            public delegate void glTexImage3DEXT_(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, IntPtr pixels);

            public delegate void glTexSubImage3DEXT_(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, IntPtr pixels);

            public delegate void glGetTexFilterFuncSGIS_(GLenum target, GLenum filter, IntPtr weights);

            public delegate void glTexFilterFuncSGIS_(GLenum target, GLenum filter, GLsizei n, IntPtr weights);

            public delegate void glTexSubImage1DEXT_(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, IntPtr pixels);

            public delegate void glTexSubImage2DEXT_(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, IntPtr pixels);

            public delegate void glCopyTexImage1DEXT(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);

            public delegate void glCopyTexImage2DEXT(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);

            public delegate void glCopyTexSubImage1DEXT(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);

            public delegate void glCopyTexSubImage2DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);

            public delegate void glCopyTexSubImage3DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);

            public delegate void glGetHistogramEXT_(GLenum target, GLboolean reset, GLenum format, GLenum type, IntPtr values);

            public delegate void glGetHistogramParameterfvEXT_(GLenum target, GLenum pname, IntPtr parameters);

            public delegate void glGetHistogramParameterivEXT_(GLenum target, GLenum pname, IntPtr parameters);

            public delegate void glGetMinmaxEXT_(GLenum target, GLboolean reset, GLenum format, GLenum type, IntPtr values);

            public delegate void glGetMinmaxParameterfvEXT_(GLenum target, GLenum pname, IntPtr parameters);

            public delegate void glGetMinmaxParameterivEXT_(GLenum target, GLenum pname, IntPtr parameters);

            public delegate void glHistogramEXT(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink);

            public delegate void glMinmaxEXT(GLenum target, GLenum internalformat, GLboolean sink);

            public delegate void glResetHistogramEXT(GLenum target);

            public delegate void glResetMinmaxEXT(GLenum target);

            public delegate void glConvolutionFilter1DEXT_(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, IntPtr image);

            public delegate void glConvolutionFilter2DEXT_(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, IntPtr image);

            public delegate void glConvolutionParameterfEXT(GLenum target, GLenum pname, GLfloat parameters);

            public delegate void glConvolutionParameterfvEXT_(GLenum target, GLenum pname, IntPtr parameters);

            public delegate void glConvolutionParameteriEXT(GLenum target, GLenum pname, GLint parameters);

            public delegate void glConvolutionParameterivEXT_(GLenum target, GLenum pname, IntPtr parameters);

            public delegate void glCopyConvolutionFilter1DEXT(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);

            public delegate void glCopyConvolutionFilter2DEXT(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height);

            public delegate void glGetConvolutionFilterEXT_(GLenum target, GLenum format, GLenum type, IntPtr image);

            public delegate void glGetConvolutionParameterfvEXT_(GLenum target, GLenum pname, IntPtr parameters);

            public delegate void glGetConvolutionParameterivEXT_(GLenum target, GLenum pname, IntPtr parameters);

            public delegate void glGetSeparableFilterEXT_(GLenum target, GLenum format, GLenum type, IntPtr row, IntPtr column, IntPtr span);

            public delegate void glSeparableFilter2DEXT_(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, IntPtr row, IntPtr column);

            public delegate void glColorTableSGI_(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, IntPtr table);

            public delegate void glColorTableParameterfvSGI_(GLenum target, GLenum pname, IntPtr parameters);

            public delegate void glColorTableParameterivSGI_(GLenum target, GLenum pname, IntPtr parameters);

            public delegate void glCopyColorTableSGI(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);

            public delegate void glGetColorTableSGI_(GLenum target, GLenum format, GLenum type, IntPtr table);

            public delegate void glGetColorTableParameterfvSGI_(GLenum target, GLenum pname, IntPtr parameters);

            public delegate void glGetColorTableParameterivSGI_(GLenum target, GLenum pname, IntPtr parameters);

            public delegate void glPixelTexGenSGIX(GLenum mode);

            public delegate void glPixelTexGenParameteriSGIS(GLenum pname, GLint param);

            public delegate void glPixelTexGenParameterivSGIS_(GLenum pname, IntPtr parameters);

            public delegate void glPixelTexGenParameterfSGIS(GLenum pname, GLfloat param);

            public delegate void glPixelTexGenParameterfvSGIS_(GLenum pname, IntPtr parameters);

            public delegate void glGetPixelTexGenParameterivSGIS_(GLenum pname, IntPtr parameters);

            public delegate void glGetPixelTexGenParameterfvSGIS_(GLenum pname, IntPtr parameters);

            public delegate void glTexImage4DSGIS_(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GLenum format, GLenum type, IntPtr pixels);

            public delegate void glTexSubImage4DSGIS_(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLenum format, GLenum type, IntPtr pixels);

            public delegate GLboolean glAreTexturesResidentEXT_(GLsizei n, IntPtr textures, IntPtr residences);

            public delegate void glBindTextureEXT(GLenum target, GLuint texture);

            public delegate void glDeleteTexturesEXT_(GLsizei n, IntPtr textures);

            public delegate void glGenTexturesEXT_(GLsizei n, IntPtr textures);

            public delegate GLboolean glIsTextureEXT(GLuint texture);

            public delegate void glPrioritizeTexturesEXT_(GLsizei n, IntPtr textures, IntPtr priorities);

            public delegate void glDetailTexFuncSGIS_(GLenum target, GLsizei n, IntPtr points);

            public delegate void glGetDetailTexFuncSGIS_(GLenum target, IntPtr points);

            public delegate void glSharpenTexFuncSGIS_(GLenum target, GLsizei n, IntPtr points);

            public delegate void glGetSharpenTexFuncSGIS_(GLenum target, IntPtr points);

            public delegate void glSampleMaskSGIS(GLclampf value, GLboolean invert);

            public delegate void glSamplePatternSGIS(GLenum pattern);

            public delegate void glArrayElementEXT(GLint i);

            public delegate void glColorPointerEXT_(GLint size, GLenum type, GLsizei stride, GLsizei count, IntPtr pointer);

            public delegate void glDrawArraysEXT(GLenum mode, GLint first, GLsizei count);

            public delegate void glEdgeFlagPointerEXT_(GLsizei stride, GLsizei count, IntPtr pointer);

            public delegate void glGetPointervEXT_(GLenum pname, IntPtr parameters);

            public delegate void glIndexPointerEXT_(GLenum type, GLsizei stride, GLsizei count, IntPtr pointer);

            public delegate void glNormalPointerEXT_(GLenum type, GLsizei stride, GLsizei count, IntPtr pointer);

            public delegate void glTexCoordPointerEXT_(GLint size, GLenum type, GLsizei stride, GLsizei count, IntPtr pointer);

            public delegate void glVertexPointerEXT_(GLint size, GLenum type, GLsizei stride, GLsizei count, IntPtr pointer);

            public delegate void glBlendEquationEXT(GLenum mode);

            public delegate void glSpriteParameterfSGIX(GLenum pname, GLfloat param);

            public delegate void glSpriteParameterfvSGIX_(GLenum pname, IntPtr parameters);

            public delegate void glSpriteParameteriSGIX(GLenum pname, GLint param);

            public delegate void glSpriteParameterivSGIX_(GLenum pname, IntPtr parameters);

            public delegate void glPointParameterfEXT(GLenum pname, GLfloat param);

            public delegate void glPointParameterfvEXT_(GLenum pname, IntPtr parameters);

            public delegate void glPointParameterfSGIS(GLenum pname, GLfloat param);

            public delegate void glPointParameterfvSGIS_(GLenum pname, IntPtr parameters);

            public delegate GLint glGetInstrumentsSGIX();

            public delegate void glInstrumentsBufferSGIX_(GLsizei size, IntPtr buffer);

            public delegate GLint glPollInstrumentsSGIX_(IntPtr marker_p);

            public delegate void glReadInstrumentsSGIX(GLint marker);

            public delegate void glStartInstrumentsSGIX();

            public delegate void glStopInstrumentsSGIX(GLint marker);

            public delegate void glFrameZoomSGIX(GLint factor);

            public delegate void glTagSampleBufferSGIX();

            public delegate void glDeformationMap3dSGIX_(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, IntPtr points);

            public delegate void glDeformationMap3fSGIX_(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, IntPtr points);

            public delegate void glDeformSGIX(GLbitfield mask);

            public delegate void glLoadIdentityDeformationMapSGIX(GLbitfield mask);

            public delegate void glReferencePlaneSGIX_(IntPtr equation);

            public delegate void glFlushRasterSGIX();

            public delegate void glFogFuncSGIS_(GLsizei n, IntPtr points);

            public delegate void glGetFogFuncSGIS_(IntPtr points);

            public delegate void glImageTransformParameteriHP(GLenum target, GLenum pname, GLint param);

            public delegate void glImageTransformParameterfHP(GLenum target, GLenum pname, GLfloat param);

            public delegate void glImageTransformParameterivHP_(GLenum target, GLenum pname, IntPtr parameters);

            public delegate void glImageTransformParameterfvHP_(GLenum target, GLenum pname, IntPtr parameters);

            public delegate void glGetImageTransformParameterivHP_(GLenum target, GLenum pname, IntPtr parameters);

            public delegate void glGetImageTransformParameterfvHP_(GLenum target, GLenum pname, IntPtr parameters);

            public delegate void glColorSubTableEXT_(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, IntPtr data);

            public delegate void glCopyColorSubTableEXT(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width);

            public delegate void glHintPGI(GLenum target, GLint mode);

            public delegate void glColorTableEXT_(GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, IntPtr table);

            public delegate void glGetColorTableEXT_(GLenum target, GLenum format, GLenum type, IntPtr data);

            public delegate void glGetColorTableParameterivEXT_(GLenum target, GLenum pname, IntPtr parameters);

            public delegate void glGetColorTableParameterfvEXT_(GLenum target, GLenum pname, IntPtr parameters);

            public delegate void glGetListParameterfvSGIX_(GLuint list, GLenum pname, IntPtr parameters);

            public delegate void glGetListParameterivSGIX_(GLuint list, GLenum pname, IntPtr parameters);

            public delegate void glListParameterfSGIX(GLuint list, GLenum pname, GLfloat param);

            public delegate void glListParameterfvSGIX_(GLuint list, GLenum pname, IntPtr parameters);

            public delegate void glListParameteriSGIX(GLuint list, GLenum pname, GLint param);

            public delegate void glListParameterivSGIX_(GLuint list, GLenum pname, IntPtr parameters);

            public delegate void glIndexMaterialEXT(GLenum face, GLenum mode);

            public delegate void glIndexFuncEXT(GLenum func, GLclampf reference);

            public delegate void glLockArraysEXT(GLint first, GLsizei count);

            public delegate void glUnlockArraysEXT();

            public delegate void glCullParameterdvEXT_(GLenum pname, IntPtr parameters);

            public delegate void glCullParameterfvEXT_(GLenum pname, IntPtr parameters);

            public delegate void glFragmentColorMaterialSGIX(GLenum face, GLenum mode);

            public delegate void glFragmentLightfSGIX(GLenum light, GLenum pname, GLfloat param);

            public delegate void glFragmentLightfvSGIX_(GLenum light, GLenum pname, IntPtr parameters);

            public delegate void glFragmentLightiSGIX(GLenum light, GLenum pname, GLint param);

            public delegate void glFragmentLightivSGIX_(GLenum light, GLenum pname, IntPtr parameters);

            public delegate void glFragmentLightModelfSGIX(GLenum pname, GLfloat param);

            public delegate void glFragmentLightModelfvSGIX_(GLenum pname, IntPtr parameters);

            public delegate void glFragmentLightModeliSGIX(GLenum pname, GLint param);

            public delegate void glFragmentLightModelivSGIX_(GLenum pname, IntPtr parameters);

            public delegate void glFragmentMaterialfSGIX(GLenum face, GLenum pname, GLfloat param);

            public delegate void glFragmentMaterialfvSGIX_(GLenum face, GLenum pname, IntPtr parameters);

            public delegate void glFragmentMaterialiSGIX(GLenum face, GLenum pname, GLint param);

            public delegate void glFragmentMaterialivSGIX_(GLenum face, GLenum pname, IntPtr parameters);

            public delegate void glGetFragmentLightfvSGIX_(GLenum light, GLenum pname, IntPtr parameters);

            public delegate void glGetFragmentLightivSGIX_(GLenum light, GLenum pname, IntPtr parameters);

            public delegate void glGetFragmentMaterialfvSGIX_(GLenum face, GLenum pname, IntPtr parameters);

            public delegate void glGetFragmentMaterialivSGIX_(GLenum face, GLenum pname, IntPtr parameters);

            public delegate void glLightEnviSGIX(GLenum pname, GLint param);

            public delegate void glDrawRangeElementsEXT_(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, IntPtr indices);

            public delegate void glApplyTextureEXT(GLenum mode);

            public delegate void glTextureLightEXT(GLenum pname);

            public delegate void glTextureMaterialEXT(GLenum face, GLenum mode);

            public delegate void glAsyncMarkerSGIX(GLuint marker);

            public delegate GLint glFinishAsyncSGIX_(IntPtr markerp);

            public delegate GLint glPollAsyncSGIX_(IntPtr markerp);

            public delegate GLuint glGenAsyncMarkersSGIX(GLsizei range);

            public delegate void glDeleteAsyncMarkersSGIX(GLuint marker, GLsizei range);

            public delegate GLboolean glIsAsyncMarkerSGIX(GLuint marker);

            public delegate void glVertexPointervINTEL_(GLint size, GLenum type, IntPtr pointer);

            public delegate void glNormalPointervINTEL_(GLenum type, IntPtr pointer);

            public delegate void glColorPointervINTEL_(GLint size, GLenum type, IntPtr pointer);

            public delegate void glTexCoordPointervINTEL_(GLint size, GLenum type, IntPtr pointer);

            public delegate void glPixelTransformParameteriEXT(GLenum target, GLenum pname, GLint param);

            public delegate void glPixelTransformParameterfEXT(GLenum target, GLenum pname, GLfloat param);

            public delegate void glPixelTransformParameterivEXT_(GLenum target, GLenum pname, IntPtr parameters);

            public delegate void glPixelTransformParameterfvEXT_(GLenum target, GLenum pname, IntPtr parameters);

            public delegate void glSecondaryColor3bEXT(GLbyte red, GLbyte green, GLbyte blue);

            public delegate void glSecondaryColor3bvEXT_(IntPtr v);

            public delegate void glSecondaryColor3dEXT(GLdouble red, GLdouble green, GLdouble blue);

            public delegate void glSecondaryColor3dvEXT_(IntPtr v);

            public delegate void glSecondaryColor3fEXT(GLfloat red, GLfloat green, GLfloat blue);

            public delegate void glSecondaryColor3fvEXT_(IntPtr v);

            public delegate void glSecondaryColor3iEXT(GLint red, GLint green, GLint blue);

            public delegate void glSecondaryColor3ivEXT_(IntPtr v);

            public delegate void glSecondaryColor3sEXT(GLshort red, GLshort green, GLshort blue);

            public delegate void glSecondaryColor3svEXT_(IntPtr v);

            public delegate void glSecondaryColor3ubEXT(GLubyte red, GLubyte green, GLubyte blue);

            public delegate void glSecondaryColor3ubvEXT_(IntPtr v);

            public delegate void glSecondaryColor3uiEXT(GLuint red, GLuint green, GLuint blue);

            public delegate void glSecondaryColor3uivEXT_(IntPtr v);

            public delegate void glSecondaryColor3usEXT(GLushort red, GLushort green, GLushort blue);

            public delegate void glSecondaryColor3usvEXT_(IntPtr v);

            public delegate void glSecondaryColorPointerEXT_(GLint size, GLenum type, GLsizei stride, IntPtr pointer);

            public delegate void glTextureNormalEXT(GLenum mode);

            public delegate void glMultiDrawArraysEXT_(GLenum mode, IntPtr first, IntPtr count, GLsizei primcount);

            public delegate void glMultiDrawElementsEXT_(GLenum mode, IntPtr count, GLenum type, IntPtr indices, GLsizei primcount);

            public delegate void glFogCoordfEXT(GLfloat coord);

            public delegate void glFogCoordfvEXT_(IntPtr coord);

            public delegate void glFogCoorddEXT(GLdouble coord);

            public delegate void glFogCoorddvEXT_(IntPtr coord);

            public delegate void glFogCoordPointerEXT_(GLenum type, GLsizei stride, IntPtr pointer);

            public delegate void glTangent3bEXT(GLbyte tx, GLbyte ty, GLbyte tz);

            public delegate void glTangent3bvEXT_(IntPtr v);

            public delegate void glTangent3dEXT(GLdouble tx, GLdouble ty, GLdouble tz);

            public delegate void glTangent3dvEXT_(IntPtr v);

            public delegate void glTangent3fEXT(GLfloat tx, GLfloat ty, GLfloat tz);

            public delegate void glTangent3fvEXT_(IntPtr v);

            public delegate void glTangent3iEXT(GLint tx, GLint ty, GLint tz);

            public delegate void glTangent3ivEXT_(IntPtr v);

            public delegate void glTangent3sEXT(GLshort tx, GLshort ty, GLshort tz);

            public delegate void glTangent3svEXT_(IntPtr v);

            public delegate void glBinormal3bEXT(GLbyte bx, GLbyte by, GLbyte bz);

            public delegate void glBinormal3bvEXT_(IntPtr v);

            public delegate void glBinormal3dEXT(GLdouble bx, GLdouble by, GLdouble bz);

            public delegate void glBinormal3dvEXT_(IntPtr v);

            public delegate void glBinormal3fEXT(GLfloat bx, GLfloat by, GLfloat bz);

            public delegate void glBinormal3fvEXT_(IntPtr v);

            public delegate void glBinormal3iEXT(GLint bx, GLint by, GLint bz);

            public delegate void glBinormal3ivEXT_(IntPtr v);

            public delegate void glBinormal3sEXT(GLshort bx, GLshort by, GLshort bz);

            public delegate void glBinormal3svEXT_(IntPtr v);

            public delegate void glTangentPointerEXT_(GLenum type, GLsizei stride, IntPtr pointer);

            public delegate void glBinormalPointerEXT_(GLenum type, GLsizei stride, IntPtr pointer);

            public delegate void glFinishTextureSUNX();

            public delegate void glGlobalAlphaFactorbSUN(GLbyte factor);

            public delegate void glGlobalAlphaFactorsSUN(GLshort factor);

            public delegate void glGlobalAlphaFactoriSUN(GLint factor);

            public delegate void glGlobalAlphaFactorfSUN(GLfloat factor);

            public delegate void glGlobalAlphaFactordSUN(GLdouble factor);

            public delegate void glGlobalAlphaFactorubSUN(GLubyte factor);

            public delegate void glGlobalAlphaFactorusSUN(GLushort factor);

            public delegate void glGlobalAlphaFactoruiSUN(GLuint factor);

            public delegate void glReplacementCodeuiSUN(GLuint code);

            public delegate void glReplacementCodeusSUN(GLushort code);

            public delegate void glReplacementCodeubSUN(GLubyte code);

            public delegate void glReplacementCodeuivSUN_(IntPtr code);

            public delegate void glReplacementCodeusvSUN_(IntPtr code);

            public delegate void glReplacementCodeubvSUN_(IntPtr code);

            public delegate void glReplacementCodePointerSUN_(GLenum type, GLsizei stride, IntPtr pointer);

            public delegate void glColor4ubVertex2fSUN(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y);

            public delegate void glColor4ubVertex2fvSUN_(IntPtr c, IntPtr v);

            public delegate void glColor4ubVertex3fSUN(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);

            public delegate void glColor4ubVertex3fvSUN_(IntPtr c, IntPtr v);

            public delegate void glColor3fVertex3fSUN(GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);

            public delegate void glColor3fVertex3fvSUN_(IntPtr c, IntPtr v);

            public delegate void glNormal3fVertex3fSUN(GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);

            public delegate void glNormal3fVertex3fvSUN_(IntPtr n, IntPtr v);

            public delegate void glColor4fNormal3fVertex3fSUN(GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);

            public delegate void glColor4fNormal3fVertex3fvSUN_(IntPtr c, IntPtr n, IntPtr v);

            public delegate void glTexCoord2fVertex3fSUN(GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z);

            public delegate void glTexCoord2fVertex3fvSUN_(IntPtr tc, IntPtr v);

            public delegate void glTexCoord4fVertex4fSUN(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w);

            public delegate void glTexCoord4fVertex4fvSUN_(IntPtr tc, IntPtr v);

            public delegate void glTexCoord2fColor4ubVertex3fSUN(GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);

            public delegate void glTexCoord2fColor4ubVertex3fvSUN_(IntPtr tc, IntPtr c, IntPtr v);

            public delegate void glTexCoord2fColor3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);

            public delegate void glTexCoord2fColor3fVertex3fvSUN_(IntPtr tc, IntPtr c, IntPtr v);

            public delegate void glTexCoord2fNormal3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);

            public delegate void glTexCoord2fNormal3fVertex3fvSUN_(IntPtr tc, IntPtr n, IntPtr v);

            public delegate void glTexCoord2fColor4fNormal3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);

            public delegate void glTexCoord2fColor4fNormal3fVertex3fvSUN_(IntPtr tc, IntPtr c, IntPtr n, IntPtr v);

            public delegate void glTexCoord4fColor4fNormal3fVertex4fSUN(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w);

            public delegate void glTexCoord4fColor4fNormal3fVertex4fvSUN_(IntPtr tc, IntPtr c, IntPtr n, IntPtr v);

            public delegate void glReplacementCodeuiVertex3fSUN(GLuint rc, GLfloat x, GLfloat y, GLfloat z);

            public delegate void glReplacementCodeuiVertex3fvSUN_(IntPtr rc, IntPtr v);

            public delegate void glReplacementCodeuiColor4ubVertex3fSUN(GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);

            public delegate void glReplacementCodeuiColor4ubVertex3fvSUN_(IntPtr rc, IntPtr c, IntPtr v);

            public delegate void glReplacementCodeuiColor3fVertex3fSUN(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);

            public delegate void glReplacementCodeuiColor3fVertex3fvSUN_(IntPtr rc, IntPtr c, IntPtr v);

            public delegate void glReplacementCodeuiNormal3fVertex3fSUN(GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);

            public delegate void glReplacementCodeuiNormal3fVertex3fvSUN_(IntPtr rc, IntPtr n, IntPtr v);

            public delegate void glReplacementCodeuiColor4fNormal3fVertex3fSUN(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);

            public delegate void glReplacementCodeuiColor4fNormal3fVertex3fvSUN_(IntPtr rc, IntPtr c, IntPtr n, IntPtr v);

            public delegate void glReplacementCodeuiTexCoord2fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z);

            public delegate void glReplacementCodeuiTexCoord2fVertex3fvSUN_(IntPtr rc, IntPtr tc, IntPtr v);

            public delegate void glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);

            public delegate void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(IntPtr rc, IntPtr tc, IntPtr n, IntPtr v);

            public delegate void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);

            public delegate void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(IntPtr rc, IntPtr tc, IntPtr c, IntPtr n, IntPtr v);

            public delegate void glBlendFuncSeparateEXT(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);

            public delegate void glBlendFuncSeparateINGR(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);

            public delegate void glVertexWeightfEXT(GLfloat weight);

            public delegate void glVertexWeightfvEXT_(IntPtr weight);

            public delegate void glVertexWeightPointerEXT_(GLsizei size, GLenum type, GLsizei stride, IntPtr pointer);

            public delegate void glFlushVertexArrayRangeNV();

            public delegate void glVertexArrayRangeNV_(GLsizei length, IntPtr pointer);

            public delegate void glCombinerParameterfvNV_(GLenum pname, IntPtr parameters);

            public delegate void glCombinerParameterfNV(GLenum pname, GLfloat param);

            public delegate void glCombinerParameterivNV_(GLenum pname, IntPtr parameters);

            public delegate void glCombinerParameteriNV(GLenum pname, GLint param);

            public delegate void glCombinerInputNV(GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage);

            public delegate void glCombinerOutputNV(GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum);

            public delegate void glFinalCombinerInputNV(GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage);

            public delegate void glGetCombinerInputParameterfvNV_(GLenum stage, GLenum portion, GLenum variable, GLenum pname, IntPtr parameters);

            public delegate void glGetCombinerInputParameterivNV_(GLenum stage, GLenum portion, GLenum variable, GLenum pname, IntPtr parameters);

            public delegate void glGetCombinerOutputParameterfvNV_(GLenum stage, GLenum portion, GLenum pname, IntPtr parameters);

            public delegate void glGetCombinerOutputParameterivNV_(GLenum stage, GLenum portion, GLenum pname, IntPtr parameters);

            public delegate void glGetFinalCombinerInputParameterfvNV_(GLenum variable, GLenum pname, IntPtr parameters);

            public delegate void glGetFinalCombinerInputParameterivNV_(GLenum variable, GLenum pname, IntPtr parameters);

            public delegate void glResizeBuffersMESA();

            public delegate void glWindowPos2dMESA(GLdouble x, GLdouble y);

            public delegate void glWindowPos2dvMESA_(IntPtr v);

            public delegate void glWindowPos2fMESA(GLfloat x, GLfloat y);

            public delegate void glWindowPos2fvMESA_(IntPtr v);

            public delegate void glWindowPos2iMESA(GLint x, GLint y);

            public delegate void glWindowPos2ivMESA_(IntPtr v);

            public delegate void glWindowPos2sMESA(GLshort x, GLshort y);

            public delegate void glWindowPos2svMESA_(IntPtr v);

            public delegate void glWindowPos3dMESA(GLdouble x, GLdouble y, GLdouble z);

            public delegate void glWindowPos3dvMESA_(IntPtr v);

            public delegate void glWindowPos3fMESA(GLfloat x, GLfloat y, GLfloat z);

            public delegate void glWindowPos3fvMESA_(IntPtr v);

            public delegate void glWindowPos3iMESA(GLint x, GLint y, GLint z);

            public delegate void glWindowPos3ivMESA_(IntPtr v);

            public delegate void glWindowPos3sMESA(GLshort x, GLshort y, GLshort z);

            public delegate void glWindowPos3svMESA_(IntPtr v);

            public delegate void glWindowPos4dMESA(GLdouble x, GLdouble y, GLdouble z, GLdouble w);

            public delegate void glWindowPos4dvMESA_(IntPtr v);

            public delegate void glWindowPos4fMESA(GLfloat x, GLfloat y, GLfloat z, GLfloat w);

            public delegate void glWindowPos4fvMESA_(IntPtr v);

            public delegate void glWindowPos4iMESA(GLint x, GLint y, GLint z, GLint w);

            public delegate void glWindowPos4ivMESA_(IntPtr v);

            public delegate void glWindowPos4sMESA(GLshort x, GLshort y, GLshort z, GLshort w);

            public delegate void glWindowPos4svMESA_(IntPtr v);

            public delegate void glMultiModeDrawArraysIBM_(IntPtr mode, IntPtr first, IntPtr count, GLsizei primcount, GLint modestride);

            public delegate void glMultiModeDrawElementsIBM_(IntPtr mode, IntPtr count, GLenum type, IntPtr indices, GLsizei primcount, GLint modestride);

            public delegate void glColorPointerListIBM_(GLint size, GLenum type, GLint stride, IntPtr pointer, GLint ptrstride);

            public delegate void glSecondaryColorPointerListIBM_(GLint size, GLenum type, GLint stride, IntPtr pointer, GLint ptrstride);

            public delegate void glEdgeFlagPointerListIBM_(GLint stride, IntPtr pointer, GLint ptrstride);

            public delegate void glFogCoordPointerListIBM_(GLenum type, GLint stride, IntPtr pointer, GLint ptrstride);

            public delegate void glIndexPointerListIBM_(GLenum type, GLint stride, IntPtr pointer, GLint ptrstride);

            public delegate void glNormalPointerListIBM_(GLenum type, GLint stride, IntPtr pointer, GLint ptrstride);

            public delegate void glTexCoordPointerListIBM_(GLint size, GLenum type, GLint stride, IntPtr pointer, GLint ptrstride);

            public delegate void glVertexPointerListIBM_(GLint size, GLenum type, GLint stride, IntPtr pointer, GLint ptrstride);

            public delegate void glTbufferMask3DFX(GLuint mask);

            public delegate void glSampleMaskEXT(GLclampf value, GLboolean invert);

            public delegate void glSamplePatternEXT(GLenum pattern);

            public delegate void glTextureColorMaskSGIS(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);

            public delegate void glIglooInterfaceSGIX_(GLenum pname, IntPtr parameters);

            public delegate void glDeleteFencesNV_(GLsizei n, IntPtr fences);

            public delegate void glGenFencesNV_(GLsizei n, IntPtr fences);

            public delegate GLboolean glIsFenceNV(GLuint fence);

            public delegate GLboolean glTestFenceNV(GLuint fence);

            public delegate void glGetFenceivNV_(GLuint fence, GLenum pname, IntPtr parameters);

            public delegate void glFinishFenceNV(GLuint fence);

            public delegate void glSetFenceNV(GLuint fence, GLenum condition);

            public delegate void glMapControlPointsNV_(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, IntPtr points);

            public delegate void glMapParameterivNV_(GLenum target, GLenum pname, IntPtr parameters);

            public delegate void glMapParameterfvNV_(GLenum target, GLenum pname, IntPtr parameters);

            public delegate void glGetMapControlPointsNV_(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, IntPtr points);

            public delegate void glGetMapParameterivNV_(GLenum target, GLenum pname, IntPtr parameters);

            public delegate void glGetMapParameterfvNV_(GLenum target, GLenum pname, IntPtr parameters);

            public delegate void glGetMapAttribParameterivNV_(GLenum target, GLuint index, GLenum pname, IntPtr parameters);

            public delegate void glGetMapAttribParameterfvNV_(GLenum target, GLuint index, GLenum pname, IntPtr parameters);

            public delegate void glEvalMapsNV(GLenum target, GLenum mode);

            public delegate void glCombinerStageParameterfvNV_(GLenum stage, GLenum pname, IntPtr parameters);

            public delegate void glGetCombinerStageParameterfvNV_(GLenum stage, GLenum pname, IntPtr parameters);

            public delegate GLboolean glAreProgramsResidentNV_(GLsizei n, IntPtr programs, IntPtr residences);

            public delegate void glBindProgramNV(GLenum target, GLuint id);

            public delegate void glDeleteProgramsNV_(GLsizei n, IntPtr programs);

            public delegate void glExecuteProgramNV_(GLenum target, GLuint id, IntPtr parameters);

            public delegate void glGenProgramsNV_(GLsizei n, IntPtr programs);

            public delegate void glGetProgramParameterdvNV_(GLenum target, GLuint index, GLenum pname, IntPtr parameters);

            public delegate void glGetProgramParameterfvNV_(GLenum target, GLuint index, GLenum pname, IntPtr parameters);

            public delegate void glGetProgramivNV_(GLuint id, GLenum pname, IntPtr parameters);

            public delegate void glGetProgramStringNV_(GLuint id, GLenum pname, IntPtr program);

            public delegate void glGetTrackMatrixivNV_(GLenum target, GLuint address, GLenum pname, IntPtr parameters);

            public delegate void glGetVertexAttribdvNV_(GLuint index, GLenum pname, IntPtr parameters);

            public delegate void glGetVertexAttribfvNV_(GLuint index, GLenum pname, IntPtr parameters);

            public delegate void glGetVertexAttribivNV_(GLuint index, GLenum pname, IntPtr parameters);

            public delegate void glGetVertexAttribPointervNV_(GLuint index, GLenum pname, IntPtr pointer);

            public delegate GLboolean glIsProgramNV(GLuint id);

            public delegate void glLoadProgramNV_(GLenum target, GLuint id, GLsizei len, IntPtr program);

            public delegate void glProgramParameter4dNV(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);

            public delegate void glProgramParameter4dvNV_(GLenum target, GLuint index, IntPtr v);

            public delegate void glProgramParameter4fNV(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);

            public delegate void glProgramParameter4fvNV_(GLenum target, GLuint index, IntPtr v);

            public delegate void glProgramParameters4dvNV_(GLenum target, GLuint index, GLuint count, IntPtr v);

            public delegate void glProgramParameters4fvNV_(GLenum target, GLuint index, GLuint count, IntPtr v);

            public delegate void glRequestResidentProgramsNV_(GLsizei n, IntPtr programs);

            public delegate void glTrackMatrixNV(GLenum target, GLuint address, GLenum matrix, GLenum transform);

            public delegate void glVertexAttribPointerNV_(GLuint index, GLint fsize, GLenum type, GLsizei stride, IntPtr pointer);

            public delegate void glVertexAttrib1dNV(GLuint index, GLdouble x);

            public delegate void glVertexAttrib1dvNV_(GLuint index, IntPtr v);

            public delegate void glVertexAttrib1fNV(GLuint index, GLfloat x);

            public delegate void glVertexAttrib1fvNV_(GLuint index, IntPtr v);

            public delegate void glVertexAttrib1sNV(GLuint index, GLshort x);

            public delegate void glVertexAttrib1svNV_(GLuint index, IntPtr v);

            public delegate void glVertexAttrib2dNV(GLuint index, GLdouble x, GLdouble y);

            public delegate void glVertexAttrib2dvNV_(GLuint index, IntPtr v);

            public delegate void glVertexAttrib2fNV(GLuint index, GLfloat x, GLfloat y);

            public delegate void glVertexAttrib2fvNV_(GLuint index, IntPtr v);

            public delegate void glVertexAttrib2sNV(GLuint index, GLshort x, GLshort y);

            public delegate void glVertexAttrib2svNV_(GLuint index, IntPtr v);

            public delegate void glVertexAttrib3dNV(GLuint index, GLdouble x, GLdouble y, GLdouble z);

            public delegate void glVertexAttrib3dvNV_(GLuint index, IntPtr v);

            public delegate void glVertexAttrib3fNV(GLuint index, GLfloat x, GLfloat y, GLfloat z);

            public delegate void glVertexAttrib3fvNV_(GLuint index, IntPtr v);

            public delegate void glVertexAttrib3sNV(GLuint index, GLshort x, GLshort y, GLshort z);

            public delegate void glVertexAttrib3svNV_(GLuint index, IntPtr v);

            public delegate void glVertexAttrib4dNV(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);

            public delegate void glVertexAttrib4dvNV_(GLuint index, IntPtr v);

            public delegate void glVertexAttrib4fNV(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);

            public delegate void glVertexAttrib4fvNV_(GLuint index, IntPtr v);

            public delegate void glVertexAttrib4sNV(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);

            public delegate void glVertexAttrib4svNV_(GLuint index, IntPtr v);

            public delegate void glVertexAttrib4ubNV(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);

            public delegate void glVertexAttrib4ubvNV_(GLuint index, IntPtr v);

            public delegate void glVertexAttribs1dvNV_(GLuint index, GLsizei count, IntPtr v);

            public delegate void glVertexAttribs1fvNV_(GLuint index, GLsizei count, IntPtr v);

            public delegate void glVertexAttribs1svNV_(GLuint index, GLsizei count, IntPtr v);

            public delegate void glVertexAttribs2dvNV_(GLuint index, GLsizei count, IntPtr v);

            public delegate void glVertexAttribs2fvNV_(GLuint index, GLsizei count, IntPtr v);

            public delegate void glVertexAttribs2svNV_(GLuint index, GLsizei count, IntPtr v);

            public delegate void glVertexAttribs3dvNV_(GLuint index, GLsizei count, IntPtr v);

            public delegate void glVertexAttribs3fvNV_(GLuint index, GLsizei count, IntPtr v);

            public delegate void glVertexAttribs3svNV_(GLuint index, GLsizei count, IntPtr v);

            public delegate void glVertexAttribs4dvNV_(GLuint index, GLsizei count, IntPtr v);

            public delegate void glVertexAttribs4fvNV_(GLuint index, GLsizei count, IntPtr v);

            public delegate void glVertexAttribs4svNV_(GLuint index, GLsizei count, IntPtr v);

            public delegate void glVertexAttribs4ubvNV_(GLuint index, GLsizei count, IntPtr v);

            public delegate void glTexBumpParameterivATI_(GLenum pname, IntPtr param);

            public delegate void glTexBumpParameterfvATI_(GLenum pname, IntPtr param);

            public delegate void glGetTexBumpParameterivATI_(GLenum pname, IntPtr param);

            public delegate void glGetTexBumpParameterfvATI_(GLenum pname, IntPtr param);

            public delegate GLuint glGenFragmentShadersATI(GLuint range);

            public delegate void glBindFragmentShaderATI(GLuint id);

            public delegate void glDeleteFragmentShaderATI(GLuint id);

            public delegate void glBeginFragmentShaderATI();

            public delegate void glEndFragmentShaderATI();

            public delegate void glPassTexCoordATI(GLuint dst, GLuint coord, GLenum swizzle);

            public delegate void glSampleMapATI(GLuint dst, GLuint interp, GLenum swizzle);

            public delegate void glColorFragmentOp1ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod);

            public delegate void glColorFragmentOp2ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod);

            public delegate void glColorFragmentOp3ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod);

            public delegate void glAlphaFragmentOp1ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod);

            public delegate void glAlphaFragmentOp2ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod);

            public delegate void glAlphaFragmentOp3ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod);

            public delegate void glSetFragmentShaderConstantATI_(GLuint dst, IntPtr value);

            public delegate void glPNTrianglesiATI(GLenum pname, GLint param);

            public delegate void glPNTrianglesfATI(GLenum pname, GLfloat param);

            public delegate GLuint glNewObjectBufferATI_(GLsizei size, IntPtr pointer, GLenum usage);

            public delegate GLboolean glIsObjectBufferATI(GLuint buffer);

            public delegate void glUpdateObjectBufferATI_(GLuint buffer, GLuint offset, GLsizei size, IntPtr pointer, GLenum preserve);

            public delegate void glGetObjectBufferfvATI_(GLuint buffer, GLenum pname, IntPtr parameters);

            public delegate void glGetObjectBufferivATI_(GLuint buffer, GLenum pname, IntPtr parameters);

            public delegate void glFreeObjectBufferATI(GLuint buffer);

            public delegate void glArrayObjectATI(GLenum array, GLint size, GLenum type, GLsizei stride, GLuint buffer, GLuint offset);

            public delegate void glGetArrayObjectfvATI_(GLenum array, GLenum pname, IntPtr parameters);

            public delegate void glGetArrayObjectivATI_(GLenum array, GLenum pname, IntPtr parameters);

            public delegate void glVariantArrayObjectATI(GLuint id, GLenum type, GLsizei stride, GLuint buffer, GLuint offset);

            public delegate void glGetVariantArrayObjectfvATI_(GLuint id, GLenum pname, IntPtr parameters);

            public delegate void glGetVariantArrayObjectivATI_(GLuint id, GLenum pname, IntPtr parameters);

            public delegate void glBeginVertexShaderEXT();

            public delegate void glEndVertexShaderEXT();

            public delegate void glBindVertexShaderEXT(GLuint id);

            public delegate GLuint glGenVertexShadersEXT(GLuint range);

            public delegate void glDeleteVertexShaderEXT(GLuint id);

            public delegate void glShaderOp1EXT(GLenum op, GLuint res, GLuint arg1);

            public delegate void glShaderOp2EXT(GLenum op, GLuint res, GLuint arg1, GLuint arg2);

            public delegate void glShaderOp3EXT(GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3);

            public delegate void glSwizzleEXT(GLuint res, GLuint @in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW);

            public delegate void glWriteMaskEXT(GLuint res, GLuint @in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW);

            public delegate void glInsertComponentEXT(GLuint res, GLuint src, GLuint num);

            public delegate void glExtractComponentEXT(GLuint res, GLuint src, GLuint num);

            public delegate GLuint glGenSymbolsEXT(GLenum datatype, GLenum storagetype, GLenum range, GLuint components);

            public delegate void glSetInvariantEXT_(GLuint id, GLenum type, IntPtr addr);

            public delegate void glSetLocalConstantEXT_(GLuint id, GLenum type, IntPtr addr);

            public delegate void glVariantbvEXT_(GLuint id, IntPtr addr);

            public delegate void glVariantsvEXT_(GLuint id, IntPtr addr);

            public delegate void glVariantivEXT_(GLuint id, IntPtr addr);

            public delegate void glVariantfvEXT_(GLuint id, IntPtr addr);

            public delegate void glVariantdvEXT_(GLuint id, IntPtr addr);

            public delegate void glVariantubvEXT_(GLuint id, IntPtr addr);

            public delegate void glVariantusvEXT_(GLuint id, IntPtr addr);

            public delegate void glVariantuivEXT_(GLuint id, IntPtr addr);

            public delegate void glVariantPointerEXT_(GLuint id, GLenum type, GLuint stride, IntPtr addr);

            public delegate void glEnableVariantClientStateEXT(GLuint id);

            public delegate void glDisableVariantClientStateEXT(GLuint id);

            public delegate GLuint glBindLightParameterEXT(GLenum light, GLenum value);

            public delegate GLuint glBindMaterialParameterEXT(GLenum face, GLenum value);

            public delegate GLuint glBindTexGenParameterEXT(GLenum unit, GLenum coord, GLenum value);

            public delegate GLuint glBindTextureUnitParameterEXT(GLenum unit, GLenum value);

            public delegate GLuint glBindParameterEXT(GLenum value);

            public delegate GLboolean glIsVariantEnabledEXT(GLuint id, GLenum cap);

            public delegate void glGetVariantBooleanvEXT_(GLuint id, GLenum value, IntPtr data);

            public delegate void glGetVariantIntegervEXT_(GLuint id, GLenum value, IntPtr data);

            public delegate void glGetVariantFloatvEXT_(GLuint id, GLenum value, IntPtr data);

            public delegate void glGetVariantPointervEXT_(GLuint id, GLenum value, IntPtr data);

            public delegate void glGetInvariantBooleanvEXT_(GLuint id, GLenum value, IntPtr data);

            public delegate void glGetInvariantIntegervEXT_(GLuint id, GLenum value, IntPtr data);

            public delegate void glGetInvariantFloatvEXT_(GLuint id, GLenum value, IntPtr data);

            public delegate void glGetLocalConstantBooleanvEXT_(GLuint id, GLenum value, IntPtr data);

            public delegate void glGetLocalConstantIntegervEXT_(GLuint id, GLenum value, IntPtr data);

            public delegate void glGetLocalConstantFloatvEXT_(GLuint id, GLenum value, IntPtr data);

            public delegate void glVertexStream1sATI(GLenum stream, GLshort x);

            public delegate void glVertexStream1svATI_(GLenum stream, IntPtr coords);

            public delegate void glVertexStream1iATI(GLenum stream, GLint x);

            public delegate void glVertexStream1ivATI_(GLenum stream, IntPtr coords);

            public delegate void glVertexStream1fATI(GLenum stream, GLfloat x);

            public delegate void glVertexStream1fvATI_(GLenum stream, IntPtr coords);

            public delegate void glVertexStream1dATI(GLenum stream, GLdouble x);

            public delegate void glVertexStream1dvATI_(GLenum stream, IntPtr coords);

            public delegate void glVertexStream2sATI(GLenum stream, GLshort x, GLshort y);

            public delegate void glVertexStream2svATI_(GLenum stream, IntPtr coords);

            public delegate void glVertexStream2iATI(GLenum stream, GLint x, GLint y);

            public delegate void glVertexStream2ivATI_(GLenum stream, IntPtr coords);

            public delegate void glVertexStream2fATI(GLenum stream, GLfloat x, GLfloat y);

            public delegate void glVertexStream2fvATI_(GLenum stream, IntPtr coords);

            public delegate void glVertexStream2dATI(GLenum stream, GLdouble x, GLdouble y);

            public delegate void glVertexStream2dvATI_(GLenum stream, IntPtr coords);

            public delegate void glVertexStream3sATI(GLenum stream, GLshort x, GLshort y, GLshort z);

            public delegate void glVertexStream3svATI_(GLenum stream, IntPtr coords);

            public delegate void glVertexStream3iATI(GLenum stream, GLint x, GLint y, GLint z);

            public delegate void glVertexStream3ivATI_(GLenum stream, IntPtr coords);

            public delegate void glVertexStream3fATI(GLenum stream, GLfloat x, GLfloat y, GLfloat z);

            public delegate void glVertexStream3fvATI_(GLenum stream, IntPtr coords);

            public delegate void glVertexStream3dATI(GLenum stream, GLdouble x, GLdouble y, GLdouble z);

            public delegate void glVertexStream3dvATI_(GLenum stream, IntPtr coords);

            public delegate void glVertexStream4sATI(GLenum stream, GLshort x, GLshort y, GLshort z, GLshort w);

            public delegate void glVertexStream4svATI_(GLenum stream, IntPtr coords);

            public delegate void glVertexStream4iATI(GLenum stream, GLint x, GLint y, GLint z, GLint w);

            public delegate void glVertexStream4ivATI_(GLenum stream, IntPtr coords);

            public delegate void glVertexStream4fATI(GLenum stream, GLfloat x, GLfloat y, GLfloat z, GLfloat w);

            public delegate void glVertexStream4fvATI_(GLenum stream, IntPtr coords);

            public delegate void glVertexStream4dATI(GLenum stream, GLdouble x, GLdouble y, GLdouble z, GLdouble w);

            public delegate void glVertexStream4dvATI_(GLenum stream, IntPtr coords);

            public delegate void glNormalStream3bATI(GLenum stream, GLbyte nx, GLbyte ny, GLbyte nz);

            public delegate void glNormalStream3bvATI_(GLenum stream, IntPtr coords);

            public delegate void glNormalStream3sATI(GLenum stream, GLshort nx, GLshort ny, GLshort nz);

            public delegate void glNormalStream3svATI_(GLenum stream, IntPtr coords);

            public delegate void glNormalStream3iATI(GLenum stream, GLint nx, GLint ny, GLint nz);

            public delegate void glNormalStream3ivATI_(GLenum stream, IntPtr coords);

            public delegate void glNormalStream3fATI(GLenum stream, GLfloat nx, GLfloat ny, GLfloat nz);

            public delegate void glNormalStream3fvATI_(GLenum stream, IntPtr coords);

            public delegate void glNormalStream3dATI(GLenum stream, GLdouble nx, GLdouble ny, GLdouble nz);

            public delegate void glNormalStream3dvATI_(GLenum stream, IntPtr coords);

            public delegate void glClientActiveVertexStreamATI(GLenum stream);

            public delegate void glVertexBlendEnviATI(GLenum pname, GLint param);

            public delegate void glVertexBlendEnvfATI(GLenum pname, GLfloat param);

            public delegate void glElementPointerATI_(GLenum type, IntPtr pointer);

            public delegate void glDrawElementArrayATI(GLenum mode, GLsizei count);

            public delegate void glDrawRangeElementArrayATI(GLenum mode, GLuint start, GLuint end, GLsizei count);

            public delegate void glDrawMeshArraysSUN(GLenum mode, GLint first, GLsizei count, GLsizei width);

            public delegate void glGenOcclusionQueriesNV_(GLsizei n, IntPtr ids);

            public delegate void glDeleteOcclusionQueriesNV_(GLsizei n, IntPtr ids);

            public delegate GLboolean glIsOcclusionQueryNV(GLuint id);

            public delegate void glBeginOcclusionQueryNV(GLuint id);

            public delegate void glEndOcclusionQueryNV();

            public delegate void glGetOcclusionQueryivNV_(GLuint id, GLenum pname, IntPtr parameters);

            public delegate void glGetOcclusionQueryuivNV_(GLuint id, GLenum pname, IntPtr parameters);

            public delegate void glPointParameteriNV(GLenum pname, GLint param);

            public delegate void glPointParameterivNV_(GLenum pname, IntPtr parameters);

            public delegate void glActiveStencilFaceEXT(GLenum face);

            public delegate void glElementPointerAPPLE_(GLenum type, IntPtr pointer);

            public delegate void glDrawElementArrayAPPLE(GLenum mode, GLint first, GLsizei count);

            public delegate void glDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count);

            public delegate void glMultiDrawElementArrayAPPLE_(GLenum mode, IntPtr first, IntPtr count, GLsizei primcount);

            public delegate void glMultiDrawRangeElementArrayAPPLE_(GLenum mode, GLuint start, GLuint end, IntPtr first, IntPtr count, GLsizei primcount);

            public delegate void glGenFencesAPPLE_(GLsizei n, IntPtr fences);

            public delegate void glDeleteFencesAPPLE_(GLsizei n, IntPtr fences);

            public delegate void glSetFenceAPPLE(GLuint fence);

            public delegate GLboolean glIsFenceAPPLE(GLuint fence);

            public delegate GLboolean glTestFenceAPPLE(GLuint fence);

            public delegate void glFinishFenceAPPLE(GLuint fence);

            public delegate GLboolean glTestObjectAPPLE(GLenum @object, GLuint name);

            public delegate void glFinishObjectAPPLE(GLenum @object, GLint name);

            public delegate void glBindVertexArrayAPPLE(GLuint array);

            public delegate void glDeleteVertexArraysAPPLE_(GLsizei n, IntPtr arrays);

            public delegate void glGenVertexArraysAPPLE_(GLsizei n, IntPtr arrays);

            public delegate GLboolean glIsVertexArrayAPPLE(GLuint array);

            public delegate void glVertexArrayRangeAPPLE_(GLsizei length, IntPtr pointer);

            public delegate void glFlushVertexArrayRangeAPPLE_(GLsizei length, IntPtr pointer);

            public delegate void glVertexArrayParameteriAPPLE(GLenum pname, GLint param);

            public delegate void glDrawBuffersATI_(GLsizei n, IntPtr bufs);

            public delegate void glProgramNamedParameter4fNV_(GLuint id, GLsizei len, IntPtr name, GLfloat x, GLfloat y, GLfloat z, GLfloat w);

            public delegate void glProgramNamedParameter4dNV_(GLuint id, GLsizei len, IntPtr name, GLdouble x, GLdouble y, GLdouble z, GLdouble w);

            public delegate void glProgramNamedParameter4fvNV_(GLuint id, GLsizei len, IntPtr name, IntPtr v);

            public delegate void glProgramNamedParameter4dvNV_(GLuint id, GLsizei len, IntPtr name, IntPtr v);

            public delegate void glGetProgramNamedParameterfvNV_(GLuint id, GLsizei len, IntPtr name, IntPtr parameters);

            public delegate void glGetProgramNamedParameterdvNV_(GLuint id, GLsizei len, IntPtr name, IntPtr parameters);

            public delegate void glVertex2hNV(GLhalfNV x, GLhalfNV y);

            public delegate void glVertex2hvNV_(IntPtr v);

            public delegate void glVertex3hNV(GLhalfNV x, GLhalfNV y, GLhalfNV z);

            public delegate void glVertex3hvNV_(IntPtr v);

            public delegate void glVertex4hNV(GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w);

            public delegate void glVertex4hvNV_(IntPtr v);

            public delegate void glNormal3hNV(GLhalfNV nx, GLhalfNV ny, GLhalfNV nz);

            public delegate void glNormal3hvNV_(IntPtr v);

            public delegate void glColor3hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue);

            public delegate void glColor3hvNV_(IntPtr v);

            public delegate void glColor4hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue, GLhalfNV alpha);

            public delegate void glColor4hvNV_(IntPtr v);

            public delegate void glTexCoord1hNV(GLhalfNV s);

            public delegate void glTexCoord1hvNV_(IntPtr v);

            public delegate void glTexCoord2hNV(GLhalfNV s, GLhalfNV t);

            public delegate void glTexCoord2hvNV_(IntPtr v);

            public delegate void glTexCoord3hNV(GLhalfNV s, GLhalfNV t, GLhalfNV r);

            public delegate void glTexCoord3hvNV_(IntPtr v);

            public delegate void glTexCoord4hNV(GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q);

            public delegate void glTexCoord4hvNV_(IntPtr v);

            public delegate void glMultiTexCoord1hNV(GLenum target, GLhalfNV s);

            public delegate void glMultiTexCoord1hvNV_(GLenum target, IntPtr v);

            public delegate void glMultiTexCoord2hNV(GLenum target, GLhalfNV s, GLhalfNV t);

            public delegate void glMultiTexCoord2hvNV_(GLenum target, IntPtr v);

            public delegate void glMultiTexCoord3hNV(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r);

            public delegate void glMultiTexCoord3hvNV_(GLenum target, IntPtr v);

            public delegate void glMultiTexCoord4hNV(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q);

            public delegate void glMultiTexCoord4hvNV_(GLenum target, IntPtr v);

            public delegate void glFogCoordhNV(GLhalfNV fog);

            public delegate void glFogCoordhvNV_(IntPtr fog);

            public delegate void glSecondaryColor3hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue);

            public delegate void glSecondaryColor3hvNV_(IntPtr v);

            public delegate void glVertexWeighthNV(GLhalfNV weight);

            public delegate void glVertexWeighthvNV_(IntPtr weight);

            public delegate void glVertexAttrib1hNV(GLuint index, GLhalfNV x);

            public delegate void glVertexAttrib1hvNV_(GLuint index, IntPtr v);

            public delegate void glVertexAttrib2hNV(GLuint index, GLhalfNV x, GLhalfNV y);

            public delegate void glVertexAttrib2hvNV_(GLuint index, IntPtr v);

            public delegate void glVertexAttrib3hNV(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z);

            public delegate void glVertexAttrib3hvNV_(GLuint index, IntPtr v);

            public delegate void glVertexAttrib4hNV(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w);

            public delegate void glVertexAttrib4hvNV_(GLuint index, IntPtr v);

            public delegate void glVertexAttribs1hvNV_(GLuint index, GLsizei n, IntPtr v);

            public delegate void glVertexAttribs2hvNV_(GLuint index, GLsizei n, IntPtr v);

            public delegate void glVertexAttribs3hvNV_(GLuint index, GLsizei n, IntPtr v);

            public delegate void glVertexAttribs4hvNV_(GLuint index, GLsizei n, IntPtr v);

            public delegate void glPixelDataRangeNV_(GLenum target, GLsizei length, IntPtr pointer);

            public delegate void glFlushPixelDataRangeNV(GLenum target);

            public delegate void glPrimitiveRestartNV();

            public delegate void glPrimitiveRestartIndexNV(GLuint index);

            public delegate IntPtr glMapObjectBufferATI(GLuint buffer);

            public delegate void glUnmapObjectBufferATI(GLuint buffer);

            public delegate void glStencilOpSeparateATI(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);

            public delegate void glStencilFuncSeparateATI(GLenum frontfunc, GLenum backfunc, GLint reference, GLuint mask);

            public delegate void glVertexAttribArrayObjectATI(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset);

            public delegate void glGetVertexAttribArrayObjectfvATI_(GLuint index, GLenum pname, IntPtr parameters);

            public delegate void glGetVertexAttribArrayObjectivATI_(GLuint index, GLenum pname, IntPtr parameters);

            public delegate void glDepthBoundsEXT(GLclampd zmin, GLclampd zmax);

            public delegate void glBlendEquationSeparateEXT(GLenum modeRGB, GLenum modeAlpha);

            public delegate GLboolean glIsRenderbufferEXT(GLuint renderbuffer);

            public delegate void glBindRenderbufferEXT(GLenum target, GLuint renderbuffer);

            public delegate void glDeleteRenderbuffersEXT_(GLsizei n, IntPtr renderbuffers);

            public delegate void glGenRenderbuffersEXT_(GLsizei n, IntPtr renderbuffers);

            public delegate void glRenderbufferStorageEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);

            public delegate void glGetRenderbufferParameterivEXT_(GLenum target, GLenum pname, IntPtr parameters);

            public delegate GLboolean glIsFramebufferEXT(GLuint framebuffer);

            public delegate void glBindFramebufferEXT(GLenum target, GLuint framebuffer);

            public delegate void glDeleteFramebuffersEXT_(GLsizei n, IntPtr framebuffers);

            public delegate void glGenFramebuffersEXT_(GLsizei n, IntPtr framebuffers);

            public delegate GLenum glCheckFramebufferStatusEXT(GLenum target);

            public delegate void glFramebufferTexture1DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);

            public delegate void glFramebufferTexture2DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);

            public delegate void glFramebufferTexture3DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);

            public delegate void glFramebufferRenderbufferEXT(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);

            public delegate void glGetFramebufferAttachmentParameterivEXT_(GLenum target, GLenum attachment, GLenum pname, IntPtr parameters);

            public delegate void glGenerateMipmapEXT(GLenum target);

            public delegate void glStringMarkerGREMEDY_(GLsizei len, IntPtr @string);

            public delegate void glStencilClearTagEXT(GLsizei stencilTagBits, GLuint stencilClearTag);

            public delegate void glBlitFramebufferEXT(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);

            public delegate void glRenderbufferStorageMultisampleEXT(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);

            public delegate void glGetQueryObjecti64vEXT_(GLuint id, GLenum pname, IntPtr parameters);

            public delegate void glGetQueryObjectui64vEXT_(GLuint id, GLenum pname, IntPtr parameters);

            public delegate void glProgramEnvParameters4fvEXT_(GLenum target, GLuint index, GLsizei count, IntPtr parameters);

            public delegate void glProgramLocalParameters4fvEXT_(GLenum target, GLuint index, GLsizei count, IntPtr parameters);

        }
        #endregion Function signatures

        #region Imports

        internal class Imports
        {
            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glNewList")]
            public static extern void glNewList(GLuint list, GLenum mode);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glEndList")]
            public static extern void glEndList();

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glCallList")]
            public static extern void glCallList(GLuint list);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glCallLists")]
            public static extern void glCallLists_(GLsizei n, GLenum type, IntPtr lists);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glDeleteLists")]
            public static extern void glDeleteLists(GLuint list, GLsizei range);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGenLists")]
            public static extern GLuint glGenLists(GLsizei range);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glListBase")]
            public static extern void glListBase(GLuint @base);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glBegin")]
            public static extern void glBegin(GLenum mode);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glBitmap")]
            public static extern void glBitmap_(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, IntPtr bitmap);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glColor3b")]
            public static extern void glColor3b(GLbyte red, GLbyte green, GLbyte blue);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glColor3bv")]
            public static extern void glColor3bv_(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glColor3d")]
            public static extern void glColor3d(GLdouble red, GLdouble green, GLdouble blue);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glColor3dv")]
            public static extern void glColor3dv_(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glColor3f")]
            public static extern void glColor3f(GLfloat red, GLfloat green, GLfloat blue);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glColor3fv")]
            public static extern void glColor3fv_(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glColor3i")]
            public static extern void glColor3i(GLint red, GLint green, GLint blue);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glColor3iv")]
            public static extern void glColor3iv_(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glColor3s")]
            public static extern void glColor3s(GLshort red, GLshort green, GLshort blue);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glColor3sv")]
            public static extern void glColor3sv_(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glColor3ub")]
            public static extern void glColor3ub(GLubyte red, GLubyte green, GLubyte blue);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glColor3ubv")]
            public static extern void glColor3ubv_(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glColor3ui")]
            public static extern void glColor3ui(GLuint red, GLuint green, GLuint blue);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glColor3uiv")]
            public static extern void glColor3uiv_(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glColor3us")]
            public static extern void glColor3us(GLushort red, GLushort green, GLushort blue);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glColor3usv")]
            public static extern void glColor3usv_(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glColor4b")]
            public static extern void glColor4b(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glColor4bv")]
            public static extern void glColor4bv_(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glColor4d")]
            public static extern void glColor4d(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glColor4dv")]
            public static extern void glColor4dv_(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glColor4f")]
            public static extern void glColor4f(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glColor4fv")]
            public static extern void glColor4fv_(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glColor4i")]
            public static extern void glColor4i(GLint red, GLint green, GLint blue, GLint alpha);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glColor4iv")]
            public static extern void glColor4iv_(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glColor4s")]
            public static extern void glColor4s(GLshort red, GLshort green, GLshort blue, GLshort alpha);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glColor4sv")]
            public static extern void glColor4sv_(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glColor4ub")]
            public static extern void glColor4ub(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glColor4ubv")]
            public static extern void glColor4ubv_(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glColor4ui")]
            public static extern void glColor4ui(GLuint red, GLuint green, GLuint blue, GLuint alpha);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glColor4uiv")]
            public static extern void glColor4uiv_(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glColor4us")]
            public static extern void glColor4us(GLushort red, GLushort green, GLushort blue, GLushort alpha);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glColor4usv")]
            public static extern void glColor4usv_(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glEdgeFlag")]
            public static extern void glEdgeFlag(GLboolean flag);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glEdgeFlagv")]
            public static extern void glEdgeFlagv_(IntPtr flag);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glEnd")]
            public static extern void glEnd();

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glIndexd")]
            public static extern void glIndexd(GLdouble c);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glIndexdv")]
            public static extern void glIndexdv_(IntPtr c);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glIndexf")]
            public static extern void glIndexf(GLfloat c);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glIndexfv")]
            public static extern void glIndexfv_(IntPtr c);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glIndexi")]
            public static extern void glIndexi(GLint c);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glIndexiv")]
            public static extern void glIndexiv_(IntPtr c);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glIndexs")]
            public static extern void glIndexs(GLshort c);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glIndexsv")]
            public static extern void glIndexsv_(IntPtr c);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glNormal3b")]
            public static extern void glNormal3b(GLbyte nx, GLbyte ny, GLbyte nz);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glNormal3bv")]
            public static extern void glNormal3bv_(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glNormal3d")]
            public static extern void glNormal3d(GLdouble nx, GLdouble ny, GLdouble nz);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glNormal3dv")]
            public static extern void glNormal3dv_(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glNormal3f")]
            public static extern void glNormal3f(GLfloat nx, GLfloat ny, GLfloat nz);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glNormal3fv")]
            public static extern void glNormal3fv_(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glNormal3i")]
            public static extern void glNormal3i(GLint nx, GLint ny, GLint nz);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glNormal3iv")]
            public static extern void glNormal3iv_(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glNormal3s")]
            public static extern void glNormal3s(GLshort nx, GLshort ny, GLshort nz);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glNormal3sv")]
            public static extern void glNormal3sv_(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glRasterPos2d")]
            public static extern void glRasterPos2d(GLdouble x, GLdouble y);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glRasterPos2dv")]
            public static extern void glRasterPos2dv_(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glRasterPos2f")]
            public static extern void glRasterPos2f(GLfloat x, GLfloat y);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glRasterPos2fv")]
            public static extern void glRasterPos2fv_(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glRasterPos2i")]
            public static extern void glRasterPos2i(GLint x, GLint y);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glRasterPos2iv")]
            public static extern void glRasterPos2iv_(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glRasterPos2s")]
            public static extern void glRasterPos2s(GLshort x, GLshort y);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glRasterPos2sv")]
            public static extern void glRasterPos2sv_(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glRasterPos3d")]
            public static extern void glRasterPos3d(GLdouble x, GLdouble y, GLdouble z);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glRasterPos3dv")]
            public static extern void glRasterPos3dv_(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glRasterPos3f")]
            public static extern void glRasterPos3f(GLfloat x, GLfloat y, GLfloat z);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glRasterPos3fv")]
            public static extern void glRasterPos3fv_(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glRasterPos3i")]
            public static extern void glRasterPos3i(GLint x, GLint y, GLint z);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glRasterPos3iv")]
            public static extern void glRasterPos3iv_(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glRasterPos3s")]
            public static extern void glRasterPos3s(GLshort x, GLshort y, GLshort z);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glRasterPos3sv")]
            public static extern void glRasterPos3sv_(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glRasterPos4d")]
            public static extern void glRasterPos4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glRasterPos4dv")]
            public static extern void glRasterPos4dv_(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glRasterPos4f")]
            public static extern void glRasterPos4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glRasterPos4fv")]
            public static extern void glRasterPos4fv_(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glRasterPos4i")]
            public static extern void glRasterPos4i(GLint x, GLint y, GLint z, GLint w);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glRasterPos4iv")]
            public static extern void glRasterPos4iv_(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glRasterPos4s")]
            public static extern void glRasterPos4s(GLshort x, GLshort y, GLshort z, GLshort w);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glRasterPos4sv")]
            public static extern void glRasterPos4sv_(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glRectd")]
            public static extern void glRectd(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glRectdv")]
            public static extern void glRectdv_(IntPtr v1, IntPtr v2);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glRectf")]
            public static extern void glRectf(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glRectfv")]
            public static extern void glRectfv_(IntPtr v1, IntPtr v2);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glRecti")]
            public static extern void glRecti(GLint x1, GLint y1, GLint x2, GLint y2);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glRectiv")]
            public static extern void glRectiv_(IntPtr v1, IntPtr v2);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glRects")]
            public static extern void glRects(GLshort x1, GLshort y1, GLshort x2, GLshort y2);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glRectsv")]
            public static extern void glRectsv_(IntPtr v1, IntPtr v2);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord1d")]
            public static extern void glTexCoord1d(GLdouble s);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord1dv")]
            public static extern void glTexCoord1dv_(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord1f")]
            public static extern void glTexCoord1f(GLfloat s);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord1fv")]
            public static extern void glTexCoord1fv_(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord1i")]
            public static extern void glTexCoord1i(GLint s);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord1iv")]
            public static extern void glTexCoord1iv_(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord1s")]
            public static extern void glTexCoord1s(GLshort s);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord1sv")]
            public static extern void glTexCoord1sv_(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord2d")]
            public static extern void glTexCoord2d(GLdouble s, GLdouble t);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord2dv")]
            public static extern void glTexCoord2dv_(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord2f")]
            public static extern void glTexCoord2f(GLfloat s, GLfloat t);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord2fv")]
            public static extern void glTexCoord2fv_(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord2i")]
            public static extern void glTexCoord2i(GLint s, GLint t);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord2iv")]
            public static extern void glTexCoord2iv_(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord2s")]
            public static extern void glTexCoord2s(GLshort s, GLshort t);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord2sv")]
            public static extern void glTexCoord2sv_(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord3d")]
            public static extern void glTexCoord3d(GLdouble s, GLdouble t, GLdouble r);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord3dv")]
            public static extern void glTexCoord3dv_(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord3f")]
            public static extern void glTexCoord3f(GLfloat s, GLfloat t, GLfloat r);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord3fv")]
            public static extern void glTexCoord3fv_(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord3i")]
            public static extern void glTexCoord3i(GLint s, GLint t, GLint r);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord3iv")]
            public static extern void glTexCoord3iv_(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord3s")]
            public static extern void glTexCoord3s(GLshort s, GLshort t, GLshort r);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord3sv")]
            public static extern void glTexCoord3sv_(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord4d")]
            public static extern void glTexCoord4d(GLdouble s, GLdouble t, GLdouble r, GLdouble q);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord4dv")]
            public static extern void glTexCoord4dv_(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord4f")]
            public static extern void glTexCoord4f(GLfloat s, GLfloat t, GLfloat r, GLfloat q);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord4fv")]
            public static extern void glTexCoord4fv_(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord4i")]
            public static extern void glTexCoord4i(GLint s, GLint t, GLint r, GLint q);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord4iv")]
            public static extern void glTexCoord4iv_(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord4s")]
            public static extern void glTexCoord4s(GLshort s, GLshort t, GLshort r, GLshort q);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord4sv")]
            public static extern void glTexCoord4sv_(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertex2d")]
            public static extern void glVertex2d(GLdouble x, GLdouble y);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertex2dv")]
            public static extern void glVertex2dv_(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertex2f")]
            public static extern void glVertex2f(GLfloat x, GLfloat y);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertex2fv")]
            public static extern void glVertex2fv_(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertex2i")]
            public static extern void glVertex2i(GLint x, GLint y);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertex2iv")]
            public static extern void glVertex2iv_(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertex2s")]
            public static extern void glVertex2s(GLshort x, GLshort y);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertex2sv")]
            public static extern void glVertex2sv_(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertex3d")]
            public static extern void glVertex3d(GLdouble x, GLdouble y, GLdouble z);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertex3dv")]
            public static extern void glVertex3dv_(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertex3f")]
            public static extern void glVertex3f(GLfloat x, GLfloat y, GLfloat z);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertex3fv")]
            public static extern void glVertex3fv_(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertex3i")]
            public static extern void glVertex3i(GLint x, GLint y, GLint z);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertex3iv")]
            public static extern void glVertex3iv_(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertex3s")]
            public static extern void glVertex3s(GLshort x, GLshort y, GLshort z);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertex3sv")]
            public static extern void glVertex3sv_(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertex4d")]
            public static extern void glVertex4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertex4dv")]
            public static extern void glVertex4dv_(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertex4f")]
            public static extern void glVertex4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertex4fv")]
            public static extern void glVertex4fv_(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertex4i")]
            public static extern void glVertex4i(GLint x, GLint y, GLint z, GLint w);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertex4iv")]
            public static extern void glVertex4iv_(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertex4s")]
            public static extern void glVertex4s(GLshort x, GLshort y, GLshort z, GLshort w);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertex4sv")]
            public static extern void glVertex4sv_(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glClipPlane")]
            public static extern void glClipPlane_(GLenum plane, IntPtr equation);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glColorMaterial")]
            public static extern void glColorMaterial(GLenum face, GLenum mode);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glCullFace")]
            public static extern void glCullFace(GLenum mode);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glFogf")]
            public static extern void glFogf(GLenum pname, GLfloat param);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glFogfv")]
            public static extern void glFogfv_(GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glFogi")]
            public static extern void glFogi(GLenum pname, GLint param);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glFogiv")]
            public static extern void glFogiv_(GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glFrontFace")]
            public static extern void glFrontFace(GLenum mode);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glHint")]
            public static extern void glHint(GLenum target, GLenum mode);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glLightf")]
            public static extern void glLightf(GLenum light, GLenum pname, GLfloat param);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glLightfv")]
            public static extern void glLightfv_(GLenum light, GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glLighti")]
            public static extern void glLighti(GLenum light, GLenum pname, GLint param);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glLightiv")]
            public static extern void glLightiv_(GLenum light, GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glLightModelf")]
            public static extern void glLightModelf(GLenum pname, GLfloat param);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glLightModelfv")]
            public static extern void glLightModelfv_(GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glLightModeli")]
            public static extern void glLightModeli(GLenum pname, GLint param);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glLightModeliv")]
            public static extern void glLightModeliv_(GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glLineStipple")]
            public static extern void glLineStipple_(GLint factor, GLushort pattern);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glLineWidth")]
            public static extern void glLineWidth(GLfloat width);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMaterialf")]
            public static extern void glMaterialf(GLenum face, GLenum pname, GLfloat param);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMaterialfv")]
            public static extern void glMaterialfv_(GLenum face, GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMateriali")]
            public static extern void glMateriali(GLenum face, GLenum pname, GLint param);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMaterialiv")]
            public static extern void glMaterialiv_(GLenum face, GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glPointSize")]
            public static extern void glPointSize(GLfloat size);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glPolygonMode")]
            public static extern void glPolygonMode(GLenum face, GLenum mode);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glPolygonStipple")]
            public static extern void glPolygonStipple_(IntPtr mask);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glScissor")]
            public static extern void glScissor(GLint x, GLint y, GLsizei width, GLsizei height);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glShadeModel")]
            public static extern void glShadeModel(GLenum mode);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexParameterf")]
            public static extern void glTexParameterf(GLenum target, GLenum pname, GLfloat param);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexParameterfv")]
            public static extern void glTexParameterfv_(GLenum target, GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexParameteri")]
            public static extern void glTexParameteri(GLenum target, GLenum pname, GLint param);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexParameteriv")]
            public static extern void glTexParameteriv_(GLenum target, GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexImage1D")]
            public static extern void glTexImage1D_(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, IntPtr pixels);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexImage2D")]
            public static extern void glTexImage2D_(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, IntPtr pixels);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexEnvf")]
            public static extern void glTexEnvf(GLenum target, GLenum pname, GLfloat param);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexEnvfv")]
            public static extern void glTexEnvfv_(GLenum target, GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexEnvi")]
            public static extern void glTexEnvi(GLenum target, GLenum pname, GLint param);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexEnviv")]
            public static extern void glTexEnviv_(GLenum target, GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexGend")]
            public static extern void glTexGend(GLenum coord, GLenum pname, GLdouble param);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexGendv")]
            public static extern void glTexGendv_(GLenum coord, GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexGenf")]
            public static extern void glTexGenf(GLenum coord, GLenum pname, GLfloat param);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexGenfv")]
            public static extern void glTexGenfv_(GLenum coord, GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexGeni")]
            public static extern void glTexGeni(GLenum coord, GLenum pname, GLint param);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexGeniv")]
            public static extern void glTexGeniv_(GLenum coord, GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glFeedbackBuffer")]
            public static extern void glFeedbackBuffer_(GLsizei size, GLenum type, IntPtr buffer);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glSelectBuffer")]
            public static extern void glSelectBuffer_(GLsizei size, IntPtr buffer);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glRenderMode")]
            public static extern GLint glRenderMode(GLenum mode);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glInitNames")]
            public static extern void glInitNames();

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glLoadName")]
            public static extern void glLoadName(GLuint name);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glPassThrough")]
            public static extern void glPassThrough(GLfloat token);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glPopName")]
            public static extern void glPopName();

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glPushName")]
            public static extern void glPushName(GLuint name);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glDrawBuffer")]
            public static extern void glDrawBuffer(GLenum mode);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glClear")]
            public static extern void glClear(GLbitfield mask);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glClearAccum")]
            public static extern void glClearAccum(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glClearIndex")]
            public static extern void glClearIndex(GLfloat c);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glClearColor")]
            public static extern void glClearColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glClearStencil")]
            public static extern void glClearStencil(GLint s);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glClearDepth")]
            public static extern void glClearDepth(GLclampd depth);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glStencilMask")]
            public static extern void glStencilMask(GLuint mask);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glColorMask")]
            public static extern void glColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glDepthMask")]
            public static extern void glDepthMask(GLboolean flag);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glIndexMask")]
            public static extern void glIndexMask(GLuint mask);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glAccum")]
            public static extern void glAccum(GLenum op, GLfloat value);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glDisable")]
            public static extern void glDisable(GLenum cap);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glEnable")]
            public static extern void glEnable(GLenum cap);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glFinish")]
            public static extern void glFinish();

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glFlush")]
            public static extern void glFlush();

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glPopAttrib")]
            public static extern void glPopAttrib();

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glPushAttrib")]
            public static extern void glPushAttrib(GLbitfield mask);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMap1d")]
            public static extern void glMap1d_(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, IntPtr points);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMap1f")]
            public static extern void glMap1f_(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, IntPtr points);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMap2d")]
            public static extern void glMap2d_(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, IntPtr points);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMap2f")]
            public static extern void glMap2f_(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, IntPtr points);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMapGrid1d")]
            public static extern void glMapGrid1d(GLint un, GLdouble u1, GLdouble u2);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMapGrid1f")]
            public static extern void glMapGrid1f(GLint un, GLfloat u1, GLfloat u2);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMapGrid2d")]
            public static extern void glMapGrid2d(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMapGrid2f")]
            public static extern void glMapGrid2f(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glEvalCoord1d")]
            public static extern void glEvalCoord1d(GLdouble u);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glEvalCoord1dv")]
            public static extern void glEvalCoord1dv_(IntPtr u);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glEvalCoord1f")]
            public static extern void glEvalCoord1f(GLfloat u);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glEvalCoord1fv")]
            public static extern void glEvalCoord1fv_(IntPtr u);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glEvalCoord2d")]
            public static extern void glEvalCoord2d(GLdouble u, GLdouble v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glEvalCoord2dv")]
            public static extern void glEvalCoord2dv_(IntPtr u);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glEvalCoord2f")]
            public static extern void glEvalCoord2f(GLfloat u, GLfloat v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glEvalCoord2fv")]
            public static extern void glEvalCoord2fv_(IntPtr u);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glEvalMesh1")]
            public static extern void glEvalMesh1(GLenum mode, GLint i1, GLint i2);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glEvalPoint1")]
            public static extern void glEvalPoint1(GLint i);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glEvalMesh2")]
            public static extern void glEvalMesh2(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glEvalPoint2")]
            public static extern void glEvalPoint2(GLint i, GLint j);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glAlphaFunc")]
            public static extern void glAlphaFunc(GLenum func, GLclampf reference);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glBlendFunc")]
            public static extern void glBlendFunc(GLenum sfactor, GLenum dfactor);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glLogicOp")]
            public static extern void glLogicOp(GLenum opcode);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glStencilFunc")]
            public static extern void glStencilFunc(GLenum func, GLint reference, GLuint mask);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glStencilOp")]
            public static extern void glStencilOp(GLenum fail, GLenum zfail, GLenum zpass);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glDepthFunc")]
            public static extern void glDepthFunc(GLenum func);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glPixelZoom")]
            public static extern void glPixelZoom(GLfloat xfactor, GLfloat yfactor);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glPixelTransferf")]
            public static extern void glPixelTransferf(GLenum pname, GLfloat param);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glPixelTransferi")]
            public static extern void glPixelTransferi(GLenum pname, GLint param);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glPixelStoref")]
            public static extern void glPixelStoref(GLenum pname, GLfloat param);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glPixelStorei")]
            public static extern void glPixelStorei(GLenum pname, GLint param);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glPixelMapfv")]
            public static extern void glPixelMapfv_(GLenum map, GLint mapsize, IntPtr values);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glPixelMapuiv")]
            public static extern void glPixelMapuiv_(GLenum map, GLint mapsize, IntPtr values);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glPixelMapusv")]
            public static extern void glPixelMapusv_(GLenum map, GLint mapsize, IntPtr values);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glReadBuffer")]
            public static extern void glReadBuffer(GLenum mode);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glCopyPixels")]
            public static extern void glCopyPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glReadPixels")]
            public static extern void glReadPixels_(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, IntPtr pixels);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glDrawPixels")]
            public static extern void glDrawPixels_(GLsizei width, GLsizei height, GLenum format, GLenum type, IntPtr pixels);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetBooleanv")]
            public static extern void glGetBooleanv_(GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetClipPlane")]
            public static extern void glGetClipPlane_(GLenum plane, IntPtr equation);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetDoublev")]
            public static extern void glGetDoublev_(GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetError")]
            public static extern GLenum glGetError();

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetFloatv")]
            public static extern void glGetFloatv_(GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetIntegerv")]
            public static extern void glGetIntegerv_(GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetLightfv")]
            public static extern void glGetLightfv_(GLenum light, GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetLightiv")]
            public static extern void glGetLightiv_(GLenum light, GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetMapdv")]
            public static extern void glGetMapdv_(GLenum target, GLenum query, IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetMapfv")]
            public static extern void glGetMapfv_(GLenum target, GLenum query, IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetMapiv")]
            public static extern void glGetMapiv_(GLenum target, GLenum query, IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetMaterialfv")]
            public static extern void glGetMaterialfv_(GLenum face, GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetMaterialiv")]
            public static extern void glGetMaterialiv_(GLenum face, GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetPixelMapfv")]
            public static extern void glGetPixelMapfv_(GLenum map, IntPtr values);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetPixelMapuiv")]
            public static extern void glGetPixelMapuiv_(GLenum map, IntPtr values);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetPixelMapusv")]
            public static extern void glGetPixelMapusv_(GLenum map, IntPtr values);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetPolygonStipple")]
            public static extern void glGetPolygonStipple_(IntPtr mask);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetString")]
            public static extern IntPtr glGetString_(GLenum name);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetTexEnvfv")]
            public static extern void glGetTexEnvfv_(GLenum target, GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetTexEnviv")]
            public static extern void glGetTexEnviv_(GLenum target, GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetTexGendv")]
            public static extern void glGetTexGendv_(GLenum coord, GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetTexGenfv")]
            public static extern void glGetTexGenfv_(GLenum coord, GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetTexGeniv")]
            public static extern void glGetTexGeniv_(GLenum coord, GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetTexImage")]
            public static extern void glGetTexImage_(GLenum target, GLint level, GLenum format, GLenum type, IntPtr pixels);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetTexParameterfv")]
            public static extern void glGetTexParameterfv_(GLenum target, GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetTexParameteriv")]
            public static extern void glGetTexParameteriv_(GLenum target, GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetTexLevelParameterfv")]
            public static extern void glGetTexLevelParameterfv_(GLenum target, GLint level, GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetTexLevelParameteriv")]
            public static extern void glGetTexLevelParameteriv_(GLenum target, GLint level, GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glIsEnabled")]
            public static extern GLboolean glIsEnabled(GLenum cap);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glIsList")]
            public static extern GLboolean glIsList(GLuint list);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glDepthRange")]
            public static extern void glDepthRange(GLclampd near, GLclampd far);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glFrustum")]
            public static extern void glFrustum(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glLoadIdentity")]
            public static extern void glLoadIdentity();

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glLoadMatrixf")]
            public static extern void glLoadMatrixf_(IntPtr m);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glLoadMatrixd")]
            public static extern void glLoadMatrixd_(IntPtr m);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMatrixMode")]
            public static extern void glMatrixMode(GLenum mode);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMultMatrixf")]
            public static extern void glMultMatrixf_(IntPtr m);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMultMatrixd")]
            public static extern void glMultMatrixd_(IntPtr m);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glOrtho")]
            public static extern void glOrtho(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glPopMatrix")]
            public static extern void glPopMatrix();

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glPushMatrix")]
            public static extern void glPushMatrix();

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glRotated")]
            public static extern void glRotated(GLdouble angle, GLdouble x, GLdouble y, GLdouble z);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glRotatef")]
            public static extern void glRotatef(GLfloat angle, GLfloat x, GLfloat y, GLfloat z);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glScaled")]
            public static extern void glScaled(GLdouble x, GLdouble y, GLdouble z);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glScalef")]
            public static extern void glScalef(GLfloat x, GLfloat y, GLfloat z);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTranslated")]
            public static extern void glTranslated(GLdouble x, GLdouble y, GLdouble z);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTranslatef")]
            public static extern void glTranslatef(GLfloat x, GLfloat y, GLfloat z);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glViewport")]
            public static extern void glViewport(GLint x, GLint y, GLsizei width, GLsizei height);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glArrayElement")]
            public static extern void glArrayElement(GLint i);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glColorPointer")]
            public static extern void glColorPointer_(GLint size, GLenum type, GLsizei stride, IntPtr pointer);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glDisableClientState")]
            public static extern void glDisableClientState(GLenum array);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glDrawArrays")]
            public static extern void glDrawArrays(GLenum mode, GLint first, GLsizei count);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glDrawElements")]
            public static extern void glDrawElements_(GLenum mode, GLsizei count, GLenum type, IntPtr indices);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glEdgeFlagPointer")]
            public static extern void glEdgeFlagPointer_(GLsizei stride, IntPtr pointer);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glEnableClientState")]
            public static extern void glEnableClientState(GLenum array);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetPointerv")]
            public static extern void glGetPointerv_(GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glIndexPointer")]
            public static extern void glIndexPointer_(GLenum type, GLsizei stride, IntPtr pointer);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glInterleavedArrays")]
            public static extern void glInterleavedArrays_(GLenum format, GLsizei stride, IntPtr pointer);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glNormalPointer")]
            public static extern void glNormalPointer_(GLenum type, GLsizei stride, IntPtr pointer);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexCoordPointer")]
            public static extern void glTexCoordPointer_(GLint size, GLenum type, GLsizei stride, IntPtr pointer);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertexPointer")]
            public static extern void glVertexPointer_(GLint size, GLenum type, GLsizei stride, IntPtr pointer);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glPolygonOffset")]
            public static extern void glPolygonOffset(GLfloat factor, GLfloat units);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glCopyTexImage1D")]
            public static extern void glCopyTexImage1D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glCopyTexImage2D")]
            public static extern void glCopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glCopyTexSubImage1D")]
            public static extern void glCopyTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glCopyTexSubImage2D")]
            public static extern void glCopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexSubImage1D")]
            public static extern void glTexSubImage1D_(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, IntPtr pixels);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexSubImage2D")]
            public static extern void glTexSubImage2D_(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, IntPtr pixels);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glAreTexturesResident")]
            public static extern GLboolean glAreTexturesResident_(GLsizei n, IntPtr textures, IntPtr residences);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glBindTexture")]
            public static extern void glBindTexture(GLenum target, GLuint texture);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glDeleteTextures")]
            public static extern void glDeleteTextures_(GLsizei n, IntPtr textures);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGenTextures")]
            public static extern void glGenTextures_(GLsizei n, IntPtr textures);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glIsTexture")]
            public static extern GLboolean glIsTexture(GLuint texture);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glPrioritizeTextures")]
            public static extern void glPrioritizeTextures_(GLsizei n, IntPtr textures, IntPtr priorities);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glIndexub")]
            public static extern void glIndexub(GLubyte c);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glIndexubv")]
            public static extern void glIndexubv_(IntPtr c);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glPopClientAttrib")]
            public static extern void glPopClientAttrib();

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glPushClientAttrib")]
            public static extern void glPushClientAttrib(GLbitfield mask);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glBlendColor")]
            public static extern void glBlendColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glBlendEquation")]
            public static extern void glBlendEquation(GLenum mode);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glDrawRangeElements")]
            public static extern void glDrawRangeElements_(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, IntPtr indices);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glColorTable")]
            public static extern void glColorTable_(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, IntPtr table);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glColorTableParameterfv")]
            public static extern void glColorTableParameterfv_(GLenum target, GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glColorTableParameteriv")]
            public static extern void glColorTableParameteriv_(GLenum target, GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glCopyColorTable")]
            public static extern void glCopyColorTable(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetColorTable")]
            public static extern void glGetColorTable_(GLenum target, GLenum format, GLenum type, IntPtr table);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetColorTableParameterfv")]
            public static extern void glGetColorTableParameterfv_(GLenum target, GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetColorTableParameteriv")]
            public static extern void glGetColorTableParameteriv_(GLenum target, GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glColorSubTable")]
            public static extern void glColorSubTable_(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, IntPtr data);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glCopyColorSubTable")]
            public static extern void glCopyColorSubTable(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glConvolutionFilter1D")]
            public static extern void glConvolutionFilter1D_(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, IntPtr image);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glConvolutionFilter2D")]
            public static extern void glConvolutionFilter2D_(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, IntPtr image);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glConvolutionParameterf")]
            public static extern void glConvolutionParameterf(GLenum target, GLenum pname, GLfloat parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glConvolutionParameterfv")]
            public static extern void glConvolutionParameterfv_(GLenum target, GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glConvolutionParameteri")]
            public static extern void glConvolutionParameteri(GLenum target, GLenum pname, GLint parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glConvolutionParameteriv")]
            public static extern void glConvolutionParameteriv_(GLenum target, GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glCopyConvolutionFilter1D")]
            public static extern void glCopyConvolutionFilter1D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glCopyConvolutionFilter2D")]
            public static extern void glCopyConvolutionFilter2D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetConvolutionFilter")]
            public static extern void glGetConvolutionFilter_(GLenum target, GLenum format, GLenum type, IntPtr image);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetConvolutionParameterfv")]
            public static extern void glGetConvolutionParameterfv_(GLenum target, GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetConvolutionParameteriv")]
            public static extern void glGetConvolutionParameteriv_(GLenum target, GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetSeparableFilter")]
            public static extern void glGetSeparableFilter_(GLenum target, GLenum format, GLenum type, IntPtr row, IntPtr column, IntPtr span);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glSeparableFilter2D")]
            public static extern void glSeparableFilter2D_(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, IntPtr row, IntPtr column);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetHistogram")]
            public static extern void glGetHistogram_(GLenum target, GLboolean reset, GLenum format, GLenum type, IntPtr values);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetHistogramParameterfv")]
            public static extern void glGetHistogramParameterfv_(GLenum target, GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetHistogramParameteriv")]
            public static extern void glGetHistogramParameteriv_(GLenum target, GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetMinmax")]
            public static extern void glGetMinmax_(GLenum target, GLboolean reset, GLenum format, GLenum type, IntPtr values);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetMinmaxParameterfv")]
            public static extern void glGetMinmaxParameterfv_(GLenum target, GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetMinmaxParameteriv")]
            public static extern void glGetMinmaxParameteriv_(GLenum target, GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glHistogram")]
            public static extern void glHistogram(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMinmax")]
            public static extern void glMinmax(GLenum target, GLenum internalformat, GLboolean sink);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glResetHistogram")]
            public static extern void glResetHistogram(GLenum target);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glResetMinmax")]
            public static extern void glResetMinmax(GLenum target);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexImage3D")]
            public static extern void glTexImage3D_(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, IntPtr pixels);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexSubImage3D")]
            public static extern void glTexSubImage3D_(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, IntPtr pixels);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glCopyTexSubImage3D")]
            public static extern void glCopyTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glActiveTexture")]
            public static extern void glActiveTexture(GLenum texture);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glClientActiveTexture")]
            public static extern void glClientActiveTexture(GLenum texture);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord1d")]
            public static extern void glMultiTexCoord1d(GLenum target, GLdouble s);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord1dv")]
            public static extern void glMultiTexCoord1dv_(GLenum target, IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord1f")]
            public static extern void glMultiTexCoord1f(GLenum target, GLfloat s);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord1fv")]
            public static extern void glMultiTexCoord1fv_(GLenum target, IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord1i")]
            public static extern void glMultiTexCoord1i(GLenum target, GLint s);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord1iv")]
            public static extern void glMultiTexCoord1iv_(GLenum target, IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord1s")]
            public static extern void glMultiTexCoord1s(GLenum target, GLshort s);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord1sv")]
            public static extern void glMultiTexCoord1sv_(GLenum target, IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord2d")]
            public static extern void glMultiTexCoord2d(GLenum target, GLdouble s, GLdouble t);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord2dv")]
            public static extern void glMultiTexCoord2dv_(GLenum target, IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord2f")]
            public static extern void glMultiTexCoord2f(GLenum target, GLfloat s, GLfloat t);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord2fv")]
            public static extern void glMultiTexCoord2fv_(GLenum target, IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord2i")]
            public static extern void glMultiTexCoord2i(GLenum target, GLint s, GLint t);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord2iv")]
            public static extern void glMultiTexCoord2iv_(GLenum target, IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord2s")]
            public static extern void glMultiTexCoord2s(GLenum target, GLshort s, GLshort t);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord2sv")]
            public static extern void glMultiTexCoord2sv_(GLenum target, IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord3d")]
            public static extern void glMultiTexCoord3d(GLenum target, GLdouble s, GLdouble t, GLdouble r);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord3dv")]
            public static extern void glMultiTexCoord3dv_(GLenum target, IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord3f")]
            public static extern void glMultiTexCoord3f(GLenum target, GLfloat s, GLfloat t, GLfloat r);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord3fv")]
            public static extern void glMultiTexCoord3fv_(GLenum target, IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord3i")]
            public static extern void glMultiTexCoord3i(GLenum target, GLint s, GLint t, GLint r);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord3iv")]
            public static extern void glMultiTexCoord3iv_(GLenum target, IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord3s")]
            public static extern void glMultiTexCoord3s(GLenum target, GLshort s, GLshort t, GLshort r);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord3sv")]
            public static extern void glMultiTexCoord3sv_(GLenum target, IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord4d")]
            public static extern void glMultiTexCoord4d(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord4dv")]
            public static extern void glMultiTexCoord4dv_(GLenum target, IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord4f")]
            public static extern void glMultiTexCoord4f(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord4fv")]
            public static extern void glMultiTexCoord4fv_(GLenum target, IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord4i")]
            public static extern void glMultiTexCoord4i(GLenum target, GLint s, GLint t, GLint r, GLint q);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord4iv")]
            public static extern void glMultiTexCoord4iv_(GLenum target, IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord4s")]
            public static extern void glMultiTexCoord4s(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord4sv")]
            public static extern void glMultiTexCoord4sv_(GLenum target, IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glLoadTransposeMatrixf")]
            public static extern void glLoadTransposeMatrixf_(IntPtr m);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glLoadTransposeMatrixd")]
            public static extern void glLoadTransposeMatrixd_(IntPtr m);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMultTransposeMatrixf")]
            public static extern void glMultTransposeMatrixf_(IntPtr m);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMultTransposeMatrixd")]
            public static extern void glMultTransposeMatrixd_(IntPtr m);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glSampleCoverage")]
            public static extern void glSampleCoverage(GLclampf value, GLboolean invert);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glCompressedTexImage3D")]
            public static extern void glCompressedTexImage3D_(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, IntPtr data);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glCompressedTexImage2D")]
            public static extern void glCompressedTexImage2D_(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, IntPtr data);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glCompressedTexImage1D")]
            public static extern void glCompressedTexImage1D_(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, IntPtr data);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glCompressedTexSubImage3D")]
            public static extern void glCompressedTexSubImage3D_(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, IntPtr data);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glCompressedTexSubImage2D")]
            public static extern void glCompressedTexSubImage2D_(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, IntPtr data);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glCompressedTexSubImage1D")]
            public static extern void glCompressedTexSubImage1D_(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, IntPtr data);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetCompressedTexImage")]
            public static extern void glGetCompressedTexImage_(GLenum target, GLint level, IntPtr img);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glBlendFuncSeparate")]
            public static extern void glBlendFuncSeparate(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glFogCoordf")]
            public static extern void glFogCoordf(GLfloat coord);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glFogCoordfv")]
            public static extern void glFogCoordfv_(IntPtr coord);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glFogCoordd")]
            public static extern void glFogCoordd(GLdouble coord);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glFogCoorddv")]
            public static extern void glFogCoorddv_(IntPtr coord);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glFogCoordPointer")]
            public static extern void glFogCoordPointer_(GLenum type, GLsizei stride, IntPtr pointer);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMultiDrawArrays")]
            public static extern void glMultiDrawArrays_(GLenum mode, IntPtr first, IntPtr count, GLsizei primcount);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMultiDrawElements")]
            public static extern void glMultiDrawElements_(GLenum mode, IntPtr count, GLenum type, IntPtr indices, GLsizei primcount);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glPointParameterf")]
            public static extern void glPointParameterf(GLenum pname, GLfloat param);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glPointParameterfv")]
            public static extern void glPointParameterfv_(GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glPointParameteri")]
            public static extern void glPointParameteri(GLenum pname, GLint param);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glPointParameteriv")]
            public static extern void glPointParameteriv_(GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glSecondaryColor3b")]
            public static extern void glSecondaryColor3b(GLbyte red, GLbyte green, GLbyte blue);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glSecondaryColor3bv")]
            public static extern void glSecondaryColor3bv_(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glSecondaryColor3d")]
            public static extern void glSecondaryColor3d(GLdouble red, GLdouble green, GLdouble blue);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glSecondaryColor3dv")]
            public static extern void glSecondaryColor3dv_(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glSecondaryColor3f")]
            public static extern void glSecondaryColor3f(GLfloat red, GLfloat green, GLfloat blue);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glSecondaryColor3fv")]
            public static extern void glSecondaryColor3fv_(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glSecondaryColor3i")]
            public static extern void glSecondaryColor3i(GLint red, GLint green, GLint blue);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glSecondaryColor3iv")]
            public static extern void glSecondaryColor3iv_(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glSecondaryColor3s")]
            public static extern void glSecondaryColor3s(GLshort red, GLshort green, GLshort blue);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glSecondaryColor3sv")]
            public static extern void glSecondaryColor3sv_(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glSecondaryColor3ub")]
            public static extern void glSecondaryColor3ub(GLubyte red, GLubyte green, GLubyte blue);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glSecondaryColor3ubv")]
            public static extern void glSecondaryColor3ubv_(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glSecondaryColor3ui")]
            public static extern void glSecondaryColor3ui(GLuint red, GLuint green, GLuint blue);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glSecondaryColor3uiv")]
            public static extern void glSecondaryColor3uiv_(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glSecondaryColor3us")]
            public static extern void glSecondaryColor3us(GLushort red, GLushort green, GLushort blue);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glSecondaryColor3usv")]
            public static extern void glSecondaryColor3usv_(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glSecondaryColorPointer")]
            public static extern void glSecondaryColorPointer_(GLint size, GLenum type, GLsizei stride, IntPtr pointer);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glWindowPos2d")]
            public static extern void glWindowPos2d(GLdouble x, GLdouble y);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glWindowPos2dv")]
            public static extern void glWindowPos2dv_(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glWindowPos2f")]
            public static extern void glWindowPos2f(GLfloat x, GLfloat y);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glWindowPos2fv")]
            public static extern void glWindowPos2fv_(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glWindowPos2i")]
            public static extern void glWindowPos2i(GLint x, GLint y);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glWindowPos2iv")]
            public static extern void glWindowPos2iv_(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glWindowPos2s")]
            public static extern void glWindowPos2s(GLshort x, GLshort y);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glWindowPos2sv")]
            public static extern void glWindowPos2sv_(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glWindowPos3d")]
            public static extern void glWindowPos3d(GLdouble x, GLdouble y, GLdouble z);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glWindowPos3dv")]
            public static extern void glWindowPos3dv_(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glWindowPos3f")]
            public static extern void glWindowPos3f(GLfloat x, GLfloat y, GLfloat z);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glWindowPos3fv")]
            public static extern void glWindowPos3fv_(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glWindowPos3i")]
            public static extern void glWindowPos3i(GLint x, GLint y, GLint z);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glWindowPos3iv")]
            public static extern void glWindowPos3iv_(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glWindowPos3s")]
            public static extern void glWindowPos3s(GLshort x, GLshort y, GLshort z);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glWindowPos3sv")]
            public static extern void glWindowPos3sv_(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGenQueries")]
            public static extern void glGenQueries_(GLsizei n, IntPtr ids);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glDeleteQueries")]
            public static extern void glDeleteQueries_(GLsizei n, IntPtr ids);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glIsQuery")]
            public static extern GLboolean glIsQuery(GLuint id);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glBeginQuery")]
            public static extern void glBeginQuery(GLenum target, GLuint id);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glEndQuery")]
            public static extern void glEndQuery(GLenum target);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetQueryiv")]
            public static extern void glGetQueryiv_(GLenum target, GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetQueryObjectiv")]
            public static extern void glGetQueryObjectiv_(GLuint id, GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetQueryObjectuiv")]
            public static extern void glGetQueryObjectuiv_(GLuint id, GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glBindBuffer")]
            public static extern void glBindBuffer(GLenum target, GLuint buffer);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glDeleteBuffers")]
            public static extern void glDeleteBuffers_(GLsizei n, IntPtr buffers);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGenBuffers")]
            public static extern void glGenBuffers_(GLsizei n, IntPtr buffers);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glIsBuffer")]
            public static extern GLboolean glIsBuffer(GLuint buffer);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glBufferData")]
            public static extern void glBufferData_(GLenum target, GLsizeiptr size, IntPtr data, GLenum usage);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glBufferSubData")]
            public static extern void glBufferSubData_(GLenum target, GLintptr offset, GLsizeiptr size, IntPtr data);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetBufferSubData")]
            public static extern void glGetBufferSubData_(GLenum target, GLintptr offset, GLsizeiptr size, IntPtr data);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMapBuffer")]
            public static extern IntPtr glMapBuffer(GLenum target, GLenum access);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glUnmapBuffer")]
            public static extern GLboolean glUnmapBuffer(GLenum target);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetBufferParameteriv")]
            public static extern void glGetBufferParameteriv_(GLenum target, GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetBufferPointerv")]
            public static extern void glGetBufferPointerv_(GLenum target, GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glBlendEquationSeparate")]
            public static extern void glBlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glDrawBuffers")]
            public static extern void glDrawBuffers_(GLsizei n, IntPtr bufs);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glStencilOpSeparate")]
            public static extern void glStencilOpSeparate(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glStencilFuncSeparate")]
            public static extern void glStencilFuncSeparate(GLenum frontfunc, GLenum backfunc, GLint reference, GLuint mask);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glStencilMaskSeparate")]
            public static extern void glStencilMaskSeparate(GLenum face, GLuint mask);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glAttachShader")]
            public static extern void glAttachShader(GLuint program, GLuint shader);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glBindAttribLocation")]
            public static extern void glBindAttribLocation(GLuint program, GLuint index, string name);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glCompileShader")]
            public static extern void glCompileShader(GLuint shader);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glCreateProgram")]
            public static extern GLuint glCreateProgram();

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glCreateShader")]
            public static extern GLuint glCreateShader(GLenum type);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glDeleteProgram")]
            public static extern void glDeleteProgram(GLuint program);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glDeleteShader")]
            public static extern void glDeleteShader(GLuint shader);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glDetachShader")]
            public static extern void glDetachShader(GLuint program, GLuint shader);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glDisableVertexAttribArray")]
            public static extern void glDisableVertexAttribArray(GLuint index);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glEnableVertexAttribArray")]
            public static extern void glEnableVertexAttribArray(GLuint index);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetActiveAttrib")]
            public static extern void glGetActiveAttrib_(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, IntPtr size, IntPtr type, StringBuilder name);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetActiveUniform")]
            public static extern void glGetActiveUniform_(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, IntPtr size, IntPtr type, StringBuilder name);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetAttachedShaders")]
            public static extern void glGetAttachedShaders_(GLuint program, GLsizei maxCount, IntPtr count, IntPtr obj);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetAttribLocation")]
            public static extern GLint glGetAttribLocation(GLuint program, string name);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetProgramiv")]
            public static extern void glGetProgramiv_(GLuint program, GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetProgramInfoLog")]
            public static extern void glGetProgramInfoLog_(GLuint program, GLsizei bufSize, IntPtr length, StringBuilder infoLog);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetShaderiv")]
            public static extern void glGetShaderiv_(GLuint shader, GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetShaderInfoLog")]
            public static extern void glGetShaderInfoLog_(GLuint shader, GLsizei bufSize, IntPtr length, StringBuilder infoLog);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetShaderSource")]
            public static extern void glGetShaderSource_(GLuint shader, GLsizei bufSize, IntPtr length, StringBuilder source);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetUniformLocation")]
            public static extern GLint glGetUniformLocation(GLuint program, string name);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetUniformfv")]
            public static extern void glGetUniformfv_(GLuint program, GLint location, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetUniformiv")]
            public static extern void glGetUniformiv_(GLuint program, GLint location, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetVertexAttribdv")]
            public static extern void glGetVertexAttribdv_(GLuint index, GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetVertexAttribfv")]
            public static extern void glGetVertexAttribfv_(GLuint index, GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetVertexAttribiv")]
            public static extern void glGetVertexAttribiv_(GLuint index, GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetVertexAttribPointerv")]
            public static extern void glGetVertexAttribPointerv_(GLuint index, GLenum pname, IntPtr pointer);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glIsProgram")]
            public static extern GLboolean glIsProgram(GLuint program);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glIsShader")]
            public static extern GLboolean glIsShader(GLuint shader);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glLinkProgram")]
            public static extern void glLinkProgram(GLuint program);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glShaderSource")]
            public static extern void glShaderSource_(GLuint shader, GLsizei count, string[] @string, IntPtr length);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glUseProgram")]
            public static extern void glUseProgram(GLuint program);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glUniform1f")]
            public static extern void glUniform1f(GLint location, GLfloat v0);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glUniform2f")]
            public static extern void glUniform2f(GLint location, GLfloat v0, GLfloat v1);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glUniform3f")]
            public static extern void glUniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glUniform4f")]
            public static extern void glUniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glUniform1i")]
            public static extern void glUniform1i(GLint location, GLint v0);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glUniform2i")]
            public static extern void glUniform2i(GLint location, GLint v0, GLint v1);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glUniform3i")]
            public static extern void glUniform3i(GLint location, GLint v0, GLint v1, GLint v2);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glUniform4i")]
            public static extern void glUniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glUniform1fv")]
            public static extern void glUniform1fv_(GLint location, GLsizei count, IntPtr value);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glUniform2fv")]
            public static extern void glUniform2fv_(GLint location, GLsizei count, IntPtr value);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glUniform3fv")]
            public static extern void glUniform3fv_(GLint location, GLsizei count, IntPtr value);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glUniform4fv")]
            public static extern void glUniform4fv_(GLint location, GLsizei count, IntPtr value);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glUniform1iv")]
            public static extern void glUniform1iv_(GLint location, GLsizei count, IntPtr value);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glUniform2iv")]
            public static extern void glUniform2iv_(GLint location, GLsizei count, IntPtr value);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glUniform3iv")]
            public static extern void glUniform3iv_(GLint location, GLsizei count, IntPtr value);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glUniform4iv")]
            public static extern void glUniform4iv_(GLint location, GLsizei count, IntPtr value);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glUniformMatrix2fv")]
            public static extern void glUniformMatrix2fv_(GLint location, GLsizei count, GLboolean transpose, IntPtr value);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glUniformMatrix3fv")]
            public static extern void glUniformMatrix3fv_(GLint location, GLsizei count, GLboolean transpose, IntPtr value);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glUniformMatrix4fv")]
            public static extern void glUniformMatrix4fv_(GLint location, GLsizei count, GLboolean transpose, IntPtr value);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glValidateProgram")]
            public static extern void glValidateProgram(GLuint program);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib1d")]
            public static extern void glVertexAttrib1d(GLuint index, GLdouble x);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib1dv")]
            public static extern void glVertexAttrib1dv_(GLuint index, IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib1f")]
            public static extern void glVertexAttrib1f(GLuint index, GLfloat x);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib1fv")]
            public static extern void glVertexAttrib1fv_(GLuint index, IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib1s")]
            public static extern void glVertexAttrib1s(GLuint index, GLshort x);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib1sv")]
            public static extern void glVertexAttrib1sv_(GLuint index, IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib2d")]
            public static extern void glVertexAttrib2d(GLuint index, GLdouble x, GLdouble y);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib2dv")]
            public static extern void glVertexAttrib2dv_(GLuint index, IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib2f")]
            public static extern void glVertexAttrib2f(GLuint index, GLfloat x, GLfloat y);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib2fv")]
            public static extern void glVertexAttrib2fv_(GLuint index, IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib2s")]
            public static extern void glVertexAttrib2s(GLuint index, GLshort x, GLshort y);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib2sv")]
            public static extern void glVertexAttrib2sv_(GLuint index, IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib3d")]
            public static extern void glVertexAttrib3d(GLuint index, GLdouble x, GLdouble y, GLdouble z);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib3dv")]
            public static extern void glVertexAttrib3dv_(GLuint index, IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib3f")]
            public static extern void glVertexAttrib3f(GLuint index, GLfloat x, GLfloat y, GLfloat z);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib3fv")]
            public static extern void glVertexAttrib3fv_(GLuint index, IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib3s")]
            public static extern void glVertexAttrib3s(GLuint index, GLshort x, GLshort y, GLshort z);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib3sv")]
            public static extern void glVertexAttrib3sv_(GLuint index, IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib4Nbv")]
            public static extern void glVertexAttrib4Nbv_(GLuint index, IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib4Niv")]
            public static extern void glVertexAttrib4Niv_(GLuint index, IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib4Nsv")]
            public static extern void glVertexAttrib4Nsv_(GLuint index, IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib4Nub")]
            public static extern void glVertexAttrib4Nub(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib4Nubv")]
            public static extern void glVertexAttrib4Nubv_(GLuint index, IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib4Nuiv")]
            public static extern void glVertexAttrib4Nuiv_(GLuint index, IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib4Nusv")]
            public static extern void glVertexAttrib4Nusv_(GLuint index, IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib4bv")]
            public static extern void glVertexAttrib4bv_(GLuint index, IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib4d")]
            public static extern void glVertexAttrib4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib4dv")]
            public static extern void glVertexAttrib4dv_(GLuint index, IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib4f")]
            public static extern void glVertexAttrib4f(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib4fv")]
            public static extern void glVertexAttrib4fv_(GLuint index, IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib4iv")]
            public static extern void glVertexAttrib4iv_(GLuint index, IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib4s")]
            public static extern void glVertexAttrib4s(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib4sv")]
            public static extern void glVertexAttrib4sv_(GLuint index, IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib4ubv")]
            public static extern void glVertexAttrib4ubv_(GLuint index, IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib4uiv")]
            public static extern void glVertexAttrib4uiv_(GLuint index, IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib4usv")]
            public static extern void glVertexAttrib4usv_(GLuint index, IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttribPointer")]
            public static extern void glVertexAttribPointer_(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, IntPtr pointer);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glUniformMatrix2x3fv")]
            public static extern void glUniformMatrix2x3fv_(GLint location, GLsizei count, GLboolean transpose, IntPtr value);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glUniformMatrix3x2fv")]
            public static extern void glUniformMatrix3x2fv_(GLint location, GLsizei count, GLboolean transpose, IntPtr value);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glUniformMatrix2x4fv")]
            public static extern void glUniformMatrix2x4fv_(GLint location, GLsizei count, GLboolean transpose, IntPtr value);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glUniformMatrix4x2fv")]
            public static extern void glUniformMatrix4x2fv_(GLint location, GLsizei count, GLboolean transpose, IntPtr value);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glUniformMatrix3x4fv")]
            public static extern void glUniformMatrix3x4fv_(GLint location, GLsizei count, GLboolean transpose, IntPtr value);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glUniformMatrix4x3fv")]
            public static extern void glUniformMatrix4x3fv_(GLint location, GLsizei count, GLboolean transpose, IntPtr value);

        }
        #endregion Imports

        #region Function initialisation

        #region glNewList
        public static Delegates.glNewList glNewList = (Delegates.glNewList)GetAddress("glNewList", typeof(Delegates.glNewList));
        #endregion glNewList

        #region glEndList
        public static Delegates.glEndList glEndList = (Delegates.glEndList)GetAddress("glEndList", typeof(Delegates.glEndList));
        #endregion glEndList

        #region glCallList
        public static Delegates.glCallList glCallList = (Delegates.glCallList)GetAddress("glCallList", typeof(Delegates.glCallList));
        #endregion glCallList

        #region glCallLists_
        public static Delegates.glCallLists_ glCallLists_ = (Delegates.glCallLists_)GetAddress("glCallLists", typeof(Delegates.glCallLists_));
        #endregion glCallLists_

        #region glDeleteLists
        public static Delegates.glDeleteLists glDeleteLists = (Delegates.glDeleteLists)GetAddress("glDeleteLists", typeof(Delegates.glDeleteLists));
        #endregion glDeleteLists

        #region glGenLists
        public static Delegates.glGenLists glGenLists = (Delegates.glGenLists)GetAddress("glGenLists", typeof(Delegates.glGenLists));
        #endregion glGenLists

        #region glListBase
        public static Delegates.glListBase glListBase = (Delegates.glListBase)GetAddress("glListBase", typeof(Delegates.glListBase));
        #endregion glListBase

        #region glBegin
        public static Delegates.glBegin glBegin = (Delegates.glBegin)GetAddress("glBegin", typeof(Delegates.glBegin));
        #endregion glBegin

        #region glBitmap_
        public static Delegates.glBitmap_ glBitmap_ = (Delegates.glBitmap_)GetAddress("glBitmap", typeof(Delegates.glBitmap_));
        #endregion glBitmap_

        #region glColor3b
        public static Delegates.glColor3b glColor3b = (Delegates.glColor3b)GetAddress("glColor3b", typeof(Delegates.glColor3b));
        #endregion glColor3b

        #region glColor3bv_
        public static Delegates.glColor3bv_ glColor3bv_ = (Delegates.glColor3bv_)GetAddress("glColor3bv", typeof(Delegates.glColor3bv_));
        #endregion glColor3bv_

        #region glColor3d
        public static Delegates.glColor3d glColor3d = (Delegates.glColor3d)GetAddress("glColor3d", typeof(Delegates.glColor3d));
        #endregion glColor3d

        #region glColor3dv_
        public static Delegates.glColor3dv_ glColor3dv_ = (Delegates.glColor3dv_)GetAddress("glColor3dv", typeof(Delegates.glColor3dv_));
        #endregion glColor3dv_

        #region glColor3f
        public static Delegates.glColor3f glColor3f = (Delegates.glColor3f)GetAddress("glColor3f", typeof(Delegates.glColor3f));
        #endregion glColor3f

        #region glColor3fv_
        public static Delegates.glColor3fv_ glColor3fv_ = (Delegates.glColor3fv_)GetAddress("glColor3fv", typeof(Delegates.glColor3fv_));
        #endregion glColor3fv_

        #region glColor3i
        public static Delegates.glColor3i glColor3i = (Delegates.glColor3i)GetAddress("glColor3i", typeof(Delegates.glColor3i));
        #endregion glColor3i

        #region glColor3iv_
        public static Delegates.glColor3iv_ glColor3iv_ = (Delegates.glColor3iv_)GetAddress("glColor3iv", typeof(Delegates.glColor3iv_));
        #endregion glColor3iv_

        #region glColor3s
        public static Delegates.glColor3s glColor3s = (Delegates.glColor3s)GetAddress("glColor3s", typeof(Delegates.glColor3s));
        #endregion glColor3s

        #region glColor3sv_
        public static Delegates.glColor3sv_ glColor3sv_ = (Delegates.glColor3sv_)GetAddress("glColor3sv", typeof(Delegates.glColor3sv_));
        #endregion glColor3sv_

        #region glColor3ub
        public static Delegates.glColor3ub glColor3ub = (Delegates.glColor3ub)GetAddress("glColor3ub", typeof(Delegates.glColor3ub));
        #endregion glColor3ub

        #region glColor3ubv_
        public static Delegates.glColor3ubv_ glColor3ubv_ = (Delegates.glColor3ubv_)GetAddress("glColor3ubv", typeof(Delegates.glColor3ubv_));
        #endregion glColor3ubv_

        #region glColor3ui
        public static Delegates.glColor3ui glColor3ui = (Delegates.glColor3ui)GetAddress("glColor3ui", typeof(Delegates.glColor3ui));
        #endregion glColor3ui

        #region glColor3uiv_
        public static Delegates.glColor3uiv_ glColor3uiv_ = (Delegates.glColor3uiv_)GetAddress("glColor3uiv", typeof(Delegates.glColor3uiv_));
        #endregion glColor3uiv_

        #region glColor3us
        public static Delegates.glColor3us glColor3us = (Delegates.glColor3us)GetAddress("glColor3us", typeof(Delegates.glColor3us));
        #endregion glColor3us

        #region glColor3usv_
        public static Delegates.glColor3usv_ glColor3usv_ = (Delegates.glColor3usv_)GetAddress("glColor3usv", typeof(Delegates.glColor3usv_));
        #endregion glColor3usv_

        #region glColor4b
        public static Delegates.glColor4b glColor4b = (Delegates.glColor4b)GetAddress("glColor4b", typeof(Delegates.glColor4b));
        #endregion glColor4b

        #region glColor4bv_
        public static Delegates.glColor4bv_ glColor4bv_ = (Delegates.glColor4bv_)GetAddress("glColor4bv", typeof(Delegates.glColor4bv_));
        #endregion glColor4bv_

        #region glColor4d
        public static Delegates.glColor4d glColor4d = (Delegates.glColor4d)GetAddress("glColor4d", typeof(Delegates.glColor4d));
        #endregion glColor4d

        #region glColor4dv_
        public static Delegates.glColor4dv_ glColor4dv_ = (Delegates.glColor4dv_)GetAddress("glColor4dv", typeof(Delegates.glColor4dv_));
        #endregion glColor4dv_

        #region glColor4f
        public static Delegates.glColor4f glColor4f = (Delegates.glColor4f)GetAddress("glColor4f", typeof(Delegates.glColor4f));
        #endregion glColor4f

        #region glColor4fv_
        public static Delegates.glColor4fv_ glColor4fv_ = (Delegates.glColor4fv_)GetAddress("glColor4fv", typeof(Delegates.glColor4fv_));
        #endregion glColor4fv_

        #region glColor4i
        public static Delegates.glColor4i glColor4i = (Delegates.glColor4i)GetAddress("glColor4i", typeof(Delegates.glColor4i));
        #endregion glColor4i

        #region glColor4iv_
        public static Delegates.glColor4iv_ glColor4iv_ = (Delegates.glColor4iv_)GetAddress("glColor4iv", typeof(Delegates.glColor4iv_));
        #endregion glColor4iv_

        #region glColor4s
        public static Delegates.glColor4s glColor4s = (Delegates.glColor4s)GetAddress("glColor4s", typeof(Delegates.glColor4s));
        #endregion glColor4s

        #region glColor4sv_
        public static Delegates.glColor4sv_ glColor4sv_ = (Delegates.glColor4sv_)GetAddress("glColor4sv", typeof(Delegates.glColor4sv_));
        #endregion glColor4sv_

        #region glColor4ub
        public static Delegates.glColor4ub glColor4ub = (Delegates.glColor4ub)GetAddress("glColor4ub", typeof(Delegates.glColor4ub));
        #endregion glColor4ub

        #region glColor4ubv_
        public static Delegates.glColor4ubv_ glColor4ubv_ = (Delegates.glColor4ubv_)GetAddress("glColor4ubv", typeof(Delegates.glColor4ubv_));
        #endregion glColor4ubv_

        #region glColor4ui
        public static Delegates.glColor4ui glColor4ui = (Delegates.glColor4ui)GetAddress("glColor4ui", typeof(Delegates.glColor4ui));
        #endregion glColor4ui

        #region glColor4uiv_
        public static Delegates.glColor4uiv_ glColor4uiv_ = (Delegates.glColor4uiv_)GetAddress("glColor4uiv", typeof(Delegates.glColor4uiv_));
        #endregion glColor4uiv_

        #region glColor4us
        public static Delegates.glColor4us glColor4us = (Delegates.glColor4us)GetAddress("glColor4us", typeof(Delegates.glColor4us));
        #endregion glColor4us

        #region glColor4usv_
        public static Delegates.glColor4usv_ glColor4usv_ = (Delegates.glColor4usv_)GetAddress("glColor4usv", typeof(Delegates.glColor4usv_));
        #endregion glColor4usv_

        #region glEdgeFlag
        public static Delegates.glEdgeFlag glEdgeFlag = (Delegates.glEdgeFlag)GetAddress("glEdgeFlag", typeof(Delegates.glEdgeFlag));
        #endregion glEdgeFlag

        #region glEdgeFlagv_
        public static Delegates.glEdgeFlagv_ glEdgeFlagv_ = (Delegates.glEdgeFlagv_)GetAddress("glEdgeFlagv", typeof(Delegates.glEdgeFlagv_));
        #endregion glEdgeFlagv_

        #region glEnd
        public static Delegates.glEnd glEnd = (Delegates.glEnd)GetAddress("glEnd", typeof(Delegates.glEnd));
        #endregion glEnd

        #region glIndexd
        public static Delegates.glIndexd glIndexd = (Delegates.glIndexd)GetAddress("glIndexd", typeof(Delegates.glIndexd));
        #endregion glIndexd

        #region glIndexdv_
        public static Delegates.glIndexdv_ glIndexdv_ = (Delegates.glIndexdv_)GetAddress("glIndexdv", typeof(Delegates.glIndexdv_));
        #endregion glIndexdv_

        #region glIndexf
        public static Delegates.glIndexf glIndexf = (Delegates.glIndexf)GetAddress("glIndexf", typeof(Delegates.glIndexf));
        #endregion glIndexf

        #region glIndexfv_
        public static Delegates.glIndexfv_ glIndexfv_ = (Delegates.glIndexfv_)GetAddress("glIndexfv", typeof(Delegates.glIndexfv_));
        #endregion glIndexfv_

        #region glIndexi
        public static Delegates.glIndexi glIndexi = (Delegates.glIndexi)GetAddress("glIndexi", typeof(Delegates.glIndexi));
        #endregion glIndexi

        #region glIndexiv_
        public static Delegates.glIndexiv_ glIndexiv_ = (Delegates.glIndexiv_)GetAddress("glIndexiv", typeof(Delegates.glIndexiv_));
        #endregion glIndexiv_

        #region glIndexs
        public static Delegates.glIndexs glIndexs = (Delegates.glIndexs)GetAddress("glIndexs", typeof(Delegates.glIndexs));
        #endregion glIndexs

        #region glIndexsv_
        public static Delegates.glIndexsv_ glIndexsv_ = (Delegates.glIndexsv_)GetAddress("glIndexsv", typeof(Delegates.glIndexsv_));
        #endregion glIndexsv_

        #region glNormal3b
        public static Delegates.glNormal3b glNormal3b = (Delegates.glNormal3b)GetAddress("glNormal3b", typeof(Delegates.glNormal3b));
        #endregion glNormal3b

        #region glNormal3bv_
        public static Delegates.glNormal3bv_ glNormal3bv_ = (Delegates.glNormal3bv_)GetAddress("glNormal3bv", typeof(Delegates.glNormal3bv_));
        #endregion glNormal3bv_

        #region glNormal3d
        public static Delegates.glNormal3d glNormal3d = (Delegates.glNormal3d)GetAddress("glNormal3d", typeof(Delegates.glNormal3d));
        #endregion glNormal3d

        #region glNormal3dv_
        public static Delegates.glNormal3dv_ glNormal3dv_ = (Delegates.glNormal3dv_)GetAddress("glNormal3dv", typeof(Delegates.glNormal3dv_));
        #endregion glNormal3dv_

        #region glNormal3f
        public static Delegates.glNormal3f glNormal3f = (Delegates.glNormal3f)GetAddress("glNormal3f", typeof(Delegates.glNormal3f));
        #endregion glNormal3f

        #region glNormal3fv_
        public static Delegates.glNormal3fv_ glNormal3fv_ = (Delegates.glNormal3fv_)GetAddress("glNormal3fv", typeof(Delegates.glNormal3fv_));
        #endregion glNormal3fv_

        #region glNormal3i
        public static Delegates.glNormal3i glNormal3i = (Delegates.glNormal3i)GetAddress("glNormal3i", typeof(Delegates.glNormal3i));
        #endregion glNormal3i

        #region glNormal3iv_
        public static Delegates.glNormal3iv_ glNormal3iv_ = (Delegates.glNormal3iv_)GetAddress("glNormal3iv", typeof(Delegates.glNormal3iv_));
        #endregion glNormal3iv_

        #region glNormal3s
        public static Delegates.glNormal3s glNormal3s = (Delegates.glNormal3s)GetAddress("glNormal3s", typeof(Delegates.glNormal3s));
        #endregion glNormal3s

        #region glNormal3sv_
        public static Delegates.glNormal3sv_ glNormal3sv_ = (Delegates.glNormal3sv_)GetAddress("glNormal3sv", typeof(Delegates.glNormal3sv_));
        #endregion glNormal3sv_

        #region glRasterPos2d
        public static Delegates.glRasterPos2d glRasterPos2d = (Delegates.glRasterPos2d)GetAddress("glRasterPos2d", typeof(Delegates.glRasterPos2d));
        #endregion glRasterPos2d

        #region glRasterPos2dv_
        public static Delegates.glRasterPos2dv_ glRasterPos2dv_ = (Delegates.glRasterPos2dv_)GetAddress("glRasterPos2dv", typeof(Delegates.glRasterPos2dv_));
        #endregion glRasterPos2dv_

        #region glRasterPos2f
        public static Delegates.glRasterPos2f glRasterPos2f = (Delegates.glRasterPos2f)GetAddress("glRasterPos2f", typeof(Delegates.glRasterPos2f));
        #endregion glRasterPos2f

        #region glRasterPos2fv_
        public static Delegates.glRasterPos2fv_ glRasterPos2fv_ = (Delegates.glRasterPos2fv_)GetAddress("glRasterPos2fv", typeof(Delegates.glRasterPos2fv_));
        #endregion glRasterPos2fv_

        #region glRasterPos2i
        public static Delegates.glRasterPos2i glRasterPos2i = (Delegates.glRasterPos2i)GetAddress("glRasterPos2i", typeof(Delegates.glRasterPos2i));
        #endregion glRasterPos2i

        #region glRasterPos2iv_
        public static Delegates.glRasterPos2iv_ glRasterPos2iv_ = (Delegates.glRasterPos2iv_)GetAddress("glRasterPos2iv", typeof(Delegates.glRasterPos2iv_));
        #endregion glRasterPos2iv_

        #region glRasterPos2s
        public static Delegates.glRasterPos2s glRasterPos2s = (Delegates.glRasterPos2s)GetAddress("glRasterPos2s", typeof(Delegates.glRasterPos2s));
        #endregion glRasterPos2s

        #region glRasterPos2sv_
        public static Delegates.glRasterPos2sv_ glRasterPos2sv_ = (Delegates.glRasterPos2sv_)GetAddress("glRasterPos2sv", typeof(Delegates.glRasterPos2sv_));
        #endregion glRasterPos2sv_

        #region glRasterPos3d
        public static Delegates.glRasterPos3d glRasterPos3d = (Delegates.glRasterPos3d)GetAddress("glRasterPos3d", typeof(Delegates.glRasterPos3d));
        #endregion glRasterPos3d

        #region glRasterPos3dv_
        public static Delegates.glRasterPos3dv_ glRasterPos3dv_ = (Delegates.glRasterPos3dv_)GetAddress("glRasterPos3dv", typeof(Delegates.glRasterPos3dv_));
        #endregion glRasterPos3dv_

        #region glRasterPos3f
        public static Delegates.glRasterPos3f glRasterPos3f = (Delegates.glRasterPos3f)GetAddress("glRasterPos3f", typeof(Delegates.glRasterPos3f));
        #endregion glRasterPos3f

        #region glRasterPos3fv_
        public static Delegates.glRasterPos3fv_ glRasterPos3fv_ = (Delegates.glRasterPos3fv_)GetAddress("glRasterPos3fv", typeof(Delegates.glRasterPos3fv_));
        #endregion glRasterPos3fv_

        #region glRasterPos3i
        public static Delegates.glRasterPos3i glRasterPos3i = (Delegates.glRasterPos3i)GetAddress("glRasterPos3i", typeof(Delegates.glRasterPos3i));
        #endregion glRasterPos3i

        #region glRasterPos3iv_
        public static Delegates.glRasterPos3iv_ glRasterPos3iv_ = (Delegates.glRasterPos3iv_)GetAddress("glRasterPos3iv", typeof(Delegates.glRasterPos3iv_));
        #endregion glRasterPos3iv_

        #region glRasterPos3s
        public static Delegates.glRasterPos3s glRasterPos3s = (Delegates.glRasterPos3s)GetAddress("glRasterPos3s", typeof(Delegates.glRasterPos3s));
        #endregion glRasterPos3s

        #region glRasterPos3sv_
        public static Delegates.glRasterPos3sv_ glRasterPos3sv_ = (Delegates.glRasterPos3sv_)GetAddress("glRasterPos3sv", typeof(Delegates.glRasterPos3sv_));
        #endregion glRasterPos3sv_

        #region glRasterPos4d
        public static Delegates.glRasterPos4d glRasterPos4d = (Delegates.glRasterPos4d)GetAddress("glRasterPos4d", typeof(Delegates.glRasterPos4d));
        #endregion glRasterPos4d

        #region glRasterPos4dv_
        public static Delegates.glRasterPos4dv_ glRasterPos4dv_ = (Delegates.glRasterPos4dv_)GetAddress("glRasterPos4dv", typeof(Delegates.glRasterPos4dv_));
        #endregion glRasterPos4dv_

        #region glRasterPos4f
        public static Delegates.glRasterPos4f glRasterPos4f = (Delegates.glRasterPos4f)GetAddress("glRasterPos4f", typeof(Delegates.glRasterPos4f));
        #endregion glRasterPos4f

        #region glRasterPos4fv_
        public static Delegates.glRasterPos4fv_ glRasterPos4fv_ = (Delegates.glRasterPos4fv_)GetAddress("glRasterPos4fv", typeof(Delegates.glRasterPos4fv_));
        #endregion glRasterPos4fv_

        #region glRasterPos4i
        public static Delegates.glRasterPos4i glRasterPos4i = (Delegates.glRasterPos4i)GetAddress("glRasterPos4i", typeof(Delegates.glRasterPos4i));
        #endregion glRasterPos4i

        #region glRasterPos4iv_
        public static Delegates.glRasterPos4iv_ glRasterPos4iv_ = (Delegates.glRasterPos4iv_)GetAddress("glRasterPos4iv", typeof(Delegates.glRasterPos4iv_));
        #endregion glRasterPos4iv_

        #region glRasterPos4s
        public static Delegates.glRasterPos4s glRasterPos4s = (Delegates.glRasterPos4s)GetAddress("glRasterPos4s", typeof(Delegates.glRasterPos4s));
        #endregion glRasterPos4s

        #region glRasterPos4sv_
        public static Delegates.glRasterPos4sv_ glRasterPos4sv_ = (Delegates.glRasterPos4sv_)GetAddress("glRasterPos4sv", typeof(Delegates.glRasterPos4sv_));
        #endregion glRasterPos4sv_

        #region glRectd
        public static Delegates.glRectd glRectd = (Delegates.glRectd)GetAddress("glRectd", typeof(Delegates.glRectd));
        #endregion glRectd

        #region glRectdv_
        public static Delegates.glRectdv_ glRectdv_ = (Delegates.glRectdv_)GetAddress("glRectdv", typeof(Delegates.glRectdv_));
        #endregion glRectdv_

        #region glRectf
        public static Delegates.glRectf glRectf = (Delegates.glRectf)GetAddress("glRectf", typeof(Delegates.glRectf));
        #endregion glRectf

        #region glRectfv_
        public static Delegates.glRectfv_ glRectfv_ = (Delegates.glRectfv_)GetAddress("glRectfv", typeof(Delegates.glRectfv_));
        #endregion glRectfv_

        #region glRecti
        public static Delegates.glRecti glRecti = (Delegates.glRecti)GetAddress("glRecti", typeof(Delegates.glRecti));
        #endregion glRecti

        #region glRectiv_
        public static Delegates.glRectiv_ glRectiv_ = (Delegates.glRectiv_)GetAddress("glRectiv", typeof(Delegates.glRectiv_));
        #endregion glRectiv_

        #region glRects
        public static Delegates.glRects glRects = (Delegates.glRects)GetAddress("glRects", typeof(Delegates.glRects));
        #endregion glRects

        #region glRectsv_
        public static Delegates.glRectsv_ glRectsv_ = (Delegates.glRectsv_)GetAddress("glRectsv", typeof(Delegates.glRectsv_));
        #endregion glRectsv_

        #region glTexCoord1d
        public static Delegates.glTexCoord1d glTexCoord1d = (Delegates.glTexCoord1d)GetAddress("glTexCoord1d", typeof(Delegates.glTexCoord1d));
        #endregion glTexCoord1d

        #region glTexCoord1dv_
        public static Delegates.glTexCoord1dv_ glTexCoord1dv_ = (Delegates.glTexCoord1dv_)GetAddress("glTexCoord1dv", typeof(Delegates.glTexCoord1dv_));
        #endregion glTexCoord1dv_

        #region glTexCoord1f
        public static Delegates.glTexCoord1f glTexCoord1f = (Delegates.glTexCoord1f)GetAddress("glTexCoord1f", typeof(Delegates.glTexCoord1f));
        #endregion glTexCoord1f

        #region glTexCoord1fv_
        public static Delegates.glTexCoord1fv_ glTexCoord1fv_ = (Delegates.glTexCoord1fv_)GetAddress("glTexCoord1fv", typeof(Delegates.glTexCoord1fv_));
        #endregion glTexCoord1fv_

        #region glTexCoord1i
        public static Delegates.glTexCoord1i glTexCoord1i = (Delegates.glTexCoord1i)GetAddress("glTexCoord1i", typeof(Delegates.glTexCoord1i));
        #endregion glTexCoord1i

        #region glTexCoord1iv_
        public static Delegates.glTexCoord1iv_ glTexCoord1iv_ = (Delegates.glTexCoord1iv_)GetAddress("glTexCoord1iv", typeof(Delegates.glTexCoord1iv_));
        #endregion glTexCoord1iv_

        #region glTexCoord1s
        public static Delegates.glTexCoord1s glTexCoord1s = (Delegates.glTexCoord1s)GetAddress("glTexCoord1s", typeof(Delegates.glTexCoord1s));
        #endregion glTexCoord1s

        #region glTexCoord1sv_
        public static Delegates.glTexCoord1sv_ glTexCoord1sv_ = (Delegates.glTexCoord1sv_)GetAddress("glTexCoord1sv", typeof(Delegates.glTexCoord1sv_));
        #endregion glTexCoord1sv_

        #region glTexCoord2d
        public static Delegates.glTexCoord2d glTexCoord2d = (Delegates.glTexCoord2d)GetAddress("glTexCoord2d", typeof(Delegates.glTexCoord2d));
        #endregion glTexCoord2d

        #region glTexCoord2dv_
        public static Delegates.glTexCoord2dv_ glTexCoord2dv_ = (Delegates.glTexCoord2dv_)GetAddress("glTexCoord2dv", typeof(Delegates.glTexCoord2dv_));
        #endregion glTexCoord2dv_

        #region glTexCoord2f
        public static Delegates.glTexCoord2f glTexCoord2f = (Delegates.glTexCoord2f)GetAddress("glTexCoord2f", typeof(Delegates.glTexCoord2f));
        #endregion glTexCoord2f

        #region glTexCoord2fv_
        public static Delegates.glTexCoord2fv_ glTexCoord2fv_ = (Delegates.glTexCoord2fv_)GetAddress("glTexCoord2fv", typeof(Delegates.glTexCoord2fv_));
        #endregion glTexCoord2fv_

        #region glTexCoord2i
        public static Delegates.glTexCoord2i glTexCoord2i = (Delegates.glTexCoord2i)GetAddress("glTexCoord2i", typeof(Delegates.glTexCoord2i));
        #endregion glTexCoord2i

        #region glTexCoord2iv_
        public static Delegates.glTexCoord2iv_ glTexCoord2iv_ = (Delegates.glTexCoord2iv_)GetAddress("glTexCoord2iv", typeof(Delegates.glTexCoord2iv_));
        #endregion glTexCoord2iv_

        #region glTexCoord2s
        public static Delegates.glTexCoord2s glTexCoord2s = (Delegates.glTexCoord2s)GetAddress("glTexCoord2s", typeof(Delegates.glTexCoord2s));
        #endregion glTexCoord2s

        #region glTexCoord2sv_
        public static Delegates.glTexCoord2sv_ glTexCoord2sv_ = (Delegates.glTexCoord2sv_)GetAddress("glTexCoord2sv", typeof(Delegates.glTexCoord2sv_));
        #endregion glTexCoord2sv_

        #region glTexCoord3d
        public static Delegates.glTexCoord3d glTexCoord3d = (Delegates.glTexCoord3d)GetAddress("glTexCoord3d", typeof(Delegates.glTexCoord3d));
        #endregion glTexCoord3d

        #region glTexCoord3dv_
        public static Delegates.glTexCoord3dv_ glTexCoord3dv_ = (Delegates.glTexCoord3dv_)GetAddress("glTexCoord3dv", typeof(Delegates.glTexCoord3dv_));
        #endregion glTexCoord3dv_

        #region glTexCoord3f
        public static Delegates.glTexCoord3f glTexCoord3f = (Delegates.glTexCoord3f)GetAddress("glTexCoord3f", typeof(Delegates.glTexCoord3f));
        #endregion glTexCoord3f

        #region glTexCoord3fv_
        public static Delegates.glTexCoord3fv_ glTexCoord3fv_ = (Delegates.glTexCoord3fv_)GetAddress("glTexCoord3fv", typeof(Delegates.glTexCoord3fv_));
        #endregion glTexCoord3fv_

        #region glTexCoord3i
        public static Delegates.glTexCoord3i glTexCoord3i = (Delegates.glTexCoord3i)GetAddress("glTexCoord3i", typeof(Delegates.glTexCoord3i));
        #endregion glTexCoord3i

        #region glTexCoord3iv_
        public static Delegates.glTexCoord3iv_ glTexCoord3iv_ = (Delegates.glTexCoord3iv_)GetAddress("glTexCoord3iv", typeof(Delegates.glTexCoord3iv_));
        #endregion glTexCoord3iv_

        #region glTexCoord3s
        public static Delegates.glTexCoord3s glTexCoord3s = (Delegates.glTexCoord3s)GetAddress("glTexCoord3s", typeof(Delegates.glTexCoord3s));
        #endregion glTexCoord3s

        #region glTexCoord3sv_
        public static Delegates.glTexCoord3sv_ glTexCoord3sv_ = (Delegates.glTexCoord3sv_)GetAddress("glTexCoord3sv", typeof(Delegates.glTexCoord3sv_));
        #endregion glTexCoord3sv_

        #region glTexCoord4d
        public static Delegates.glTexCoord4d glTexCoord4d = (Delegates.glTexCoord4d)GetAddress("glTexCoord4d", typeof(Delegates.glTexCoord4d));
        #endregion glTexCoord4d

        #region glTexCoord4dv_
        public static Delegates.glTexCoord4dv_ glTexCoord4dv_ = (Delegates.glTexCoord4dv_)GetAddress("glTexCoord4dv", typeof(Delegates.glTexCoord4dv_));
        #endregion glTexCoord4dv_

        #region glTexCoord4f
        public static Delegates.glTexCoord4f glTexCoord4f = (Delegates.glTexCoord4f)GetAddress("glTexCoord4f", typeof(Delegates.glTexCoord4f));
        #endregion glTexCoord4f

        #region glTexCoord4fv_
        public static Delegates.glTexCoord4fv_ glTexCoord4fv_ = (Delegates.glTexCoord4fv_)GetAddress("glTexCoord4fv", typeof(Delegates.glTexCoord4fv_));
        #endregion glTexCoord4fv_

        #region glTexCoord4i
        public static Delegates.glTexCoord4i glTexCoord4i = (Delegates.glTexCoord4i)GetAddress("glTexCoord4i", typeof(Delegates.glTexCoord4i));
        #endregion glTexCoord4i

        #region glTexCoord4iv_
        public static Delegates.glTexCoord4iv_ glTexCoord4iv_ = (Delegates.glTexCoord4iv_)GetAddress("glTexCoord4iv", typeof(Delegates.glTexCoord4iv_));
        #endregion glTexCoord4iv_

        #region glTexCoord4s
        public static Delegates.glTexCoord4s glTexCoord4s = (Delegates.glTexCoord4s)GetAddress("glTexCoord4s", typeof(Delegates.glTexCoord4s));
        #endregion glTexCoord4s

        #region glTexCoord4sv_
        public static Delegates.glTexCoord4sv_ glTexCoord4sv_ = (Delegates.glTexCoord4sv_)GetAddress("glTexCoord4sv", typeof(Delegates.glTexCoord4sv_));
        #endregion glTexCoord4sv_

        #region glVertex2d
        public static Delegates.glVertex2d glVertex2d = (Delegates.glVertex2d)GetAddress("glVertex2d", typeof(Delegates.glVertex2d));
        #endregion glVertex2d

        #region glVertex2dv_
        public static Delegates.glVertex2dv_ glVertex2dv_ = (Delegates.glVertex2dv_)GetAddress("glVertex2dv", typeof(Delegates.glVertex2dv_));
        #endregion glVertex2dv_

        #region glVertex2f
        public static Delegates.glVertex2f glVertex2f = (Delegates.glVertex2f)GetAddress("glVertex2f", typeof(Delegates.glVertex2f));
        #endregion glVertex2f

        #region glVertex2fv_
        public static Delegates.glVertex2fv_ glVertex2fv_ = (Delegates.glVertex2fv_)GetAddress("glVertex2fv", typeof(Delegates.glVertex2fv_));
        #endregion glVertex2fv_

        #region glVertex2i
        public static Delegates.glVertex2i glVertex2i = (Delegates.glVertex2i)GetAddress("glVertex2i", typeof(Delegates.glVertex2i));
        #endregion glVertex2i

        #region glVertex2iv_
        public static Delegates.glVertex2iv_ glVertex2iv_ = (Delegates.glVertex2iv_)GetAddress("glVertex2iv", typeof(Delegates.glVertex2iv_));
        #endregion glVertex2iv_

        #region glVertex2s
        public static Delegates.glVertex2s glVertex2s = (Delegates.glVertex2s)GetAddress("glVertex2s", typeof(Delegates.glVertex2s));
        #endregion glVertex2s

        #region glVertex2sv_
        public static Delegates.glVertex2sv_ glVertex2sv_ = (Delegates.glVertex2sv_)GetAddress("glVertex2sv", typeof(Delegates.glVertex2sv_));
        #endregion glVertex2sv_

        #region glVertex3d
        public static Delegates.glVertex3d glVertex3d = (Delegates.glVertex3d)GetAddress("glVertex3d", typeof(Delegates.glVertex3d));
        #endregion glVertex3d

        #region glVertex3dv_
        public static Delegates.glVertex3dv_ glVertex3dv_ = (Delegates.glVertex3dv_)GetAddress("glVertex3dv", typeof(Delegates.glVertex3dv_));
        #endregion glVertex3dv_

        #region glVertex3f
        public static Delegates.glVertex3f glVertex3f = (Delegates.glVertex3f)GetAddress("glVertex3f", typeof(Delegates.glVertex3f));
        #endregion glVertex3f

        #region glVertex3fv_
        public static Delegates.glVertex3fv_ glVertex3fv_ = (Delegates.glVertex3fv_)GetAddress("glVertex3fv", typeof(Delegates.glVertex3fv_));
        #endregion glVertex3fv_

        #region glVertex3i
        public static Delegates.glVertex3i glVertex3i = (Delegates.glVertex3i)GetAddress("glVertex3i", typeof(Delegates.glVertex3i));
        #endregion glVertex3i

        #region glVertex3iv_
        public static Delegates.glVertex3iv_ glVertex3iv_ = (Delegates.glVertex3iv_)GetAddress("glVertex3iv", typeof(Delegates.glVertex3iv_));
        #endregion glVertex3iv_

        #region glVertex3s
        public static Delegates.glVertex3s glVertex3s = (Delegates.glVertex3s)GetAddress("glVertex3s", typeof(Delegates.glVertex3s));
        #endregion glVertex3s

        #region glVertex3sv_
        public static Delegates.glVertex3sv_ glVertex3sv_ = (Delegates.glVertex3sv_)GetAddress("glVertex3sv", typeof(Delegates.glVertex3sv_));
        #endregion glVertex3sv_

        #region glVertex4d
        public static Delegates.glVertex4d glVertex4d = (Delegates.glVertex4d)GetAddress("glVertex4d", typeof(Delegates.glVertex4d));
        #endregion glVertex4d

        #region glVertex4dv_
        public static Delegates.glVertex4dv_ glVertex4dv_ = (Delegates.glVertex4dv_)GetAddress("glVertex4dv", typeof(Delegates.glVertex4dv_));
        #endregion glVertex4dv_

        #region glVertex4f
        public static Delegates.glVertex4f glVertex4f = (Delegates.glVertex4f)GetAddress("glVertex4f", typeof(Delegates.glVertex4f));
        #endregion glVertex4f

        #region glVertex4fv_
        public static Delegates.glVertex4fv_ glVertex4fv_ = (Delegates.glVertex4fv_)GetAddress("glVertex4fv", typeof(Delegates.glVertex4fv_));
        #endregion glVertex4fv_

        #region glVertex4i
        public static Delegates.glVertex4i glVertex4i = (Delegates.glVertex4i)GetAddress("glVertex4i", typeof(Delegates.glVertex4i));
        #endregion glVertex4i

        #region glVertex4iv_
        public static Delegates.glVertex4iv_ glVertex4iv_ = (Delegates.glVertex4iv_)GetAddress("glVertex4iv", typeof(Delegates.glVertex4iv_));
        #endregion glVertex4iv_

        #region glVertex4s
        public static Delegates.glVertex4s glVertex4s = (Delegates.glVertex4s)GetAddress("glVertex4s", typeof(Delegates.glVertex4s));
        #endregion glVertex4s

        #region glVertex4sv_
        public static Delegates.glVertex4sv_ glVertex4sv_ = (Delegates.glVertex4sv_)GetAddress("glVertex4sv", typeof(Delegates.glVertex4sv_));
        #endregion glVertex4sv_

        #region glClipPlane_
        public static Delegates.glClipPlane_ glClipPlane_ = (Delegates.glClipPlane_)GetAddress("glClipPlane", typeof(Delegates.glClipPlane_));
        #endregion glClipPlane_

        #region glColorMaterial
        public static Delegates.glColorMaterial glColorMaterial = (Delegates.glColorMaterial)GetAddress("glColorMaterial", typeof(Delegates.glColorMaterial));
        #endregion glColorMaterial

        #region glCullFace
        public static Delegates.glCullFace glCullFace = (Delegates.glCullFace)GetAddress("glCullFace", typeof(Delegates.glCullFace));
        #endregion glCullFace

        #region glFogf
        public static Delegates.glFogf glFogf = (Delegates.glFogf)GetAddress("glFogf", typeof(Delegates.glFogf));
        #endregion glFogf

        #region glFogfv_
        public static Delegates.glFogfv_ glFogfv_ = (Delegates.glFogfv_)GetAddress("glFogfv", typeof(Delegates.glFogfv_));
        #endregion glFogfv_

        #region glFogi
        public static Delegates.glFogi glFogi = (Delegates.glFogi)GetAddress("glFogi", typeof(Delegates.glFogi));
        #endregion glFogi

        #region glFogiv_
        public static Delegates.glFogiv_ glFogiv_ = (Delegates.glFogiv_)GetAddress("glFogiv", typeof(Delegates.glFogiv_));
        #endregion glFogiv_

        #region glFrontFace
        public static Delegates.glFrontFace glFrontFace = (Delegates.glFrontFace)GetAddress("glFrontFace", typeof(Delegates.glFrontFace));
        #endregion glFrontFace

        #region glHint
        public static Delegates.glHint glHint = (Delegates.glHint)GetAddress("glHint", typeof(Delegates.glHint));
        #endregion glHint

        #region glLightf
        public static Delegates.glLightf glLightf = (Delegates.glLightf)GetAddress("glLightf", typeof(Delegates.glLightf));
        #endregion glLightf

        #region glLightfv_
        public static Delegates.glLightfv_ glLightfv_ = (Delegates.glLightfv_)GetAddress("glLightfv", typeof(Delegates.glLightfv_));
        #endregion glLightfv_

        #region glLighti
        public static Delegates.glLighti glLighti = (Delegates.glLighti)GetAddress("glLighti", typeof(Delegates.glLighti));
        #endregion glLighti

        #region glLightiv_
        public static Delegates.glLightiv_ glLightiv_ = (Delegates.glLightiv_)GetAddress("glLightiv", typeof(Delegates.glLightiv_));
        #endregion glLightiv_

        #region glLightModelf
        public static Delegates.glLightModelf glLightModelf = (Delegates.glLightModelf)GetAddress("glLightModelf", typeof(Delegates.glLightModelf));
        #endregion glLightModelf

        #region glLightModelfv_
        public static Delegates.glLightModelfv_ glLightModelfv_ = (Delegates.glLightModelfv_)GetAddress("glLightModelfv", typeof(Delegates.glLightModelfv_));
        #endregion glLightModelfv_

        #region glLightModeli
        public static Delegates.glLightModeli glLightModeli = (Delegates.glLightModeli)GetAddress("glLightModeli", typeof(Delegates.glLightModeli));
        #endregion glLightModeli

        #region glLightModeliv_
        public static Delegates.glLightModeliv_ glLightModeliv_ = (Delegates.glLightModeliv_)GetAddress("glLightModeliv", typeof(Delegates.glLightModeliv_));
        #endregion glLightModeliv_

        #region glLineStipple_
        public static Delegates.glLineStipple_ glLineStipple_ = (Delegates.glLineStipple_)GetAddress("glLineStipple", typeof(Delegates.glLineStipple_));
        #endregion glLineStipple_

        #region glLineWidth
        public static Delegates.glLineWidth glLineWidth = (Delegates.glLineWidth)GetAddress("glLineWidth", typeof(Delegates.glLineWidth));
        #endregion glLineWidth

        #region glMaterialf
        public static Delegates.glMaterialf glMaterialf = (Delegates.glMaterialf)GetAddress("glMaterialf", typeof(Delegates.glMaterialf));
        #endregion glMaterialf

        #region glMaterialfv_
        public static Delegates.glMaterialfv_ glMaterialfv_ = (Delegates.glMaterialfv_)GetAddress("glMaterialfv", typeof(Delegates.glMaterialfv_));
        #endregion glMaterialfv_

        #region glMateriali
        public static Delegates.glMateriali glMateriali = (Delegates.glMateriali)GetAddress("glMateriali", typeof(Delegates.glMateriali));
        #endregion glMateriali

        #region glMaterialiv_
        public static Delegates.glMaterialiv_ glMaterialiv_ = (Delegates.glMaterialiv_)GetAddress("glMaterialiv", typeof(Delegates.glMaterialiv_));
        #endregion glMaterialiv_

        #region glPointSize
        public static Delegates.glPointSize glPointSize = (Delegates.glPointSize)GetAddress("glPointSize", typeof(Delegates.glPointSize));
        #endregion glPointSize

        #region glPolygonMode
        public static Delegates.glPolygonMode glPolygonMode = (Delegates.glPolygonMode)GetAddress("glPolygonMode", typeof(Delegates.glPolygonMode));
        #endregion glPolygonMode

        #region glPolygonStipple_
        public static Delegates.glPolygonStipple_ glPolygonStipple_ = (Delegates.glPolygonStipple_)GetAddress("glPolygonStipple", typeof(Delegates.glPolygonStipple_));
        #endregion glPolygonStipple_

        #region glScissor
        public static Delegates.glScissor glScissor = (Delegates.glScissor)GetAddress("glScissor", typeof(Delegates.glScissor));
        #endregion glScissor

        #region glShadeModel
        public static Delegates.glShadeModel glShadeModel = (Delegates.glShadeModel)GetAddress("glShadeModel", typeof(Delegates.glShadeModel));
        #endregion glShadeModel

        #region glTexParameterf
        public static Delegates.glTexParameterf glTexParameterf = (Delegates.glTexParameterf)GetAddress("glTexParameterf", typeof(Delegates.glTexParameterf));
        #endregion glTexParameterf

        #region glTexParameterfv_
        public static Delegates.glTexParameterfv_ glTexParameterfv_ = (Delegates.glTexParameterfv_)GetAddress("glTexParameterfv", typeof(Delegates.glTexParameterfv_));
        #endregion glTexParameterfv_

        #region glTexParameteri
        public static Delegates.glTexParameteri glTexParameteri = (Delegates.glTexParameteri)GetAddress("glTexParameteri", typeof(Delegates.glTexParameteri));
        #endregion glTexParameteri

        #region glTexParameteriv_
        public static Delegates.glTexParameteriv_ glTexParameteriv_ = (Delegates.glTexParameteriv_)GetAddress("glTexParameteriv", typeof(Delegates.glTexParameteriv_));
        #endregion glTexParameteriv_

        #region glTexImage1D_
        public static Delegates.glTexImage1D_ glTexImage1D_ = (Delegates.glTexImage1D_)GetAddress("glTexImage1D", typeof(Delegates.glTexImage1D_));
        #endregion glTexImage1D_

        #region glTexImage2D_
        public static Delegates.glTexImage2D_ glTexImage2D_ = (Delegates.glTexImage2D_)GetAddress("glTexImage2D", typeof(Delegates.glTexImage2D_));
        #endregion glTexImage2D_

        #region glTexEnvf
        public static Delegates.glTexEnvf glTexEnvf = (Delegates.glTexEnvf)GetAddress("glTexEnvf", typeof(Delegates.glTexEnvf));
        #endregion glTexEnvf

        #region glTexEnvfv_
        public static Delegates.glTexEnvfv_ glTexEnvfv_ = (Delegates.glTexEnvfv_)GetAddress("glTexEnvfv", typeof(Delegates.glTexEnvfv_));
        #endregion glTexEnvfv_

        #region glTexEnvi
        public static Delegates.glTexEnvi glTexEnvi = (Delegates.glTexEnvi)GetAddress("glTexEnvi", typeof(Delegates.glTexEnvi));
        #endregion glTexEnvi

        #region glTexEnviv_
        public static Delegates.glTexEnviv_ glTexEnviv_ = (Delegates.glTexEnviv_)GetAddress("glTexEnviv", typeof(Delegates.glTexEnviv_));
        #endregion glTexEnviv_

        #region glTexGend
        public static Delegates.glTexGend glTexGend = (Delegates.glTexGend)GetAddress("glTexGend", typeof(Delegates.glTexGend));
        #endregion glTexGend

        #region glTexGendv_
        public static Delegates.glTexGendv_ glTexGendv_ = (Delegates.glTexGendv_)GetAddress("glTexGendv", typeof(Delegates.glTexGendv_));
        #endregion glTexGendv_

        #region glTexGenf
        public static Delegates.glTexGenf glTexGenf = (Delegates.glTexGenf)GetAddress("glTexGenf", typeof(Delegates.glTexGenf));
        #endregion glTexGenf

        #region glTexGenfv_
        public static Delegates.glTexGenfv_ glTexGenfv_ = (Delegates.glTexGenfv_)GetAddress("glTexGenfv", typeof(Delegates.glTexGenfv_));
        #endregion glTexGenfv_

        #region glTexGeni
        public static Delegates.glTexGeni glTexGeni = (Delegates.glTexGeni)GetAddress("glTexGeni", typeof(Delegates.glTexGeni));
        #endregion glTexGeni

        #region glTexGeniv_
        public static Delegates.glTexGeniv_ glTexGeniv_ = (Delegates.glTexGeniv_)GetAddress("glTexGeniv", typeof(Delegates.glTexGeniv_));
        #endregion glTexGeniv_

        #region glFeedbackBuffer_
        public static Delegates.glFeedbackBuffer_ glFeedbackBuffer_ = (Delegates.glFeedbackBuffer_)GetAddress("glFeedbackBuffer", typeof(Delegates.glFeedbackBuffer_));
        #endregion glFeedbackBuffer_

        #region glSelectBuffer_
        public static Delegates.glSelectBuffer_ glSelectBuffer_ = (Delegates.glSelectBuffer_)GetAddress("glSelectBuffer", typeof(Delegates.glSelectBuffer_));
        #endregion glSelectBuffer_

        #region glRenderMode
        public static Delegates.glRenderMode glRenderMode = (Delegates.glRenderMode)GetAddress("glRenderMode", typeof(Delegates.glRenderMode));
        #endregion glRenderMode

        #region glInitNames
        public static Delegates.glInitNames glInitNames = (Delegates.glInitNames)GetAddress("glInitNames", typeof(Delegates.glInitNames));
        #endregion glInitNames

        #region glLoadName
        public static Delegates.glLoadName glLoadName = (Delegates.glLoadName)GetAddress("glLoadName", typeof(Delegates.glLoadName));
        #endregion glLoadName

        #region glPassThrough
        public static Delegates.glPassThrough glPassThrough = (Delegates.glPassThrough)GetAddress("glPassThrough", typeof(Delegates.glPassThrough));
        #endregion glPassThrough

        #region glPopName
        public static Delegates.glPopName glPopName = (Delegates.glPopName)GetAddress("glPopName", typeof(Delegates.glPopName));
        #endregion glPopName

        #region glPushName
        public static Delegates.glPushName glPushName = (Delegates.glPushName)GetAddress("glPushName", typeof(Delegates.glPushName));
        #endregion glPushName

        #region glDrawBuffer
        public static Delegates.glDrawBuffer glDrawBuffer = (Delegates.glDrawBuffer)GetAddress("glDrawBuffer", typeof(Delegates.glDrawBuffer));
        #endregion glDrawBuffer

        #region glClear
        public static Delegates.glClear glClear = (Delegates.glClear)GetAddress("glClear", typeof(Delegates.glClear));
        #endregion glClear

        #region glClearAccum
        public static Delegates.glClearAccum glClearAccum = (Delegates.glClearAccum)GetAddress("glClearAccum", typeof(Delegates.glClearAccum));
        #endregion glClearAccum

        #region glClearIndex
        public static Delegates.glClearIndex glClearIndex = (Delegates.glClearIndex)GetAddress("glClearIndex", typeof(Delegates.glClearIndex));
        #endregion glClearIndex

        #region glClearColor
        public static Delegates.glClearColor glClearColor = (Delegates.glClearColor)GetAddress("glClearColor", typeof(Delegates.glClearColor));
        #endregion glClearColor

        #region glClearStencil
        public static Delegates.glClearStencil glClearStencil = (Delegates.glClearStencil)GetAddress("glClearStencil", typeof(Delegates.glClearStencil));
        #endregion glClearStencil

        #region glClearDepth
        public static Delegates.glClearDepth glClearDepth = (Delegates.glClearDepth)GetAddress("glClearDepth", typeof(Delegates.glClearDepth));
        #endregion glClearDepth

        #region glStencilMask
        public static Delegates.glStencilMask glStencilMask = (Delegates.glStencilMask)GetAddress("glStencilMask", typeof(Delegates.glStencilMask));
        #endregion glStencilMask

        #region glColorMask
        public static Delegates.glColorMask glColorMask = (Delegates.glColorMask)GetAddress("glColorMask", typeof(Delegates.glColorMask));
        #endregion glColorMask

        #region glDepthMask
        public static Delegates.glDepthMask glDepthMask = (Delegates.glDepthMask)GetAddress("glDepthMask", typeof(Delegates.glDepthMask));
        #endregion glDepthMask

        #region glIndexMask
        public static Delegates.glIndexMask glIndexMask = (Delegates.glIndexMask)GetAddress("glIndexMask", typeof(Delegates.glIndexMask));
        #endregion glIndexMask

        #region glAccum
        public static Delegates.glAccum glAccum = (Delegates.glAccum)GetAddress("glAccum", typeof(Delegates.glAccum));
        #endregion glAccum

        #region glDisable
        public static Delegates.glDisable glDisable = (Delegates.glDisable)GetAddress("glDisable", typeof(Delegates.glDisable));
        #endregion glDisable

        #region glEnable
        public static Delegates.glEnable glEnable = (Delegates.glEnable)GetAddress("glEnable", typeof(Delegates.glEnable));
        #endregion glEnable

        #region glFinish
        public static Delegates.glFinish glFinish = (Delegates.glFinish)GetAddress("glFinish", typeof(Delegates.glFinish));
        #endregion glFinish

        #region glFlush
        public static Delegates.glFlush glFlush = (Delegates.glFlush)GetAddress("glFlush", typeof(Delegates.glFlush));
        #endregion glFlush

        #region glPopAttrib
        public static Delegates.glPopAttrib glPopAttrib = (Delegates.glPopAttrib)GetAddress("glPopAttrib", typeof(Delegates.glPopAttrib));
        #endregion glPopAttrib

        #region glPushAttrib
        public static Delegates.glPushAttrib glPushAttrib = (Delegates.glPushAttrib)GetAddress("glPushAttrib", typeof(Delegates.glPushAttrib));
        #endregion glPushAttrib

        #region glMap1d_
        public static Delegates.glMap1d_ glMap1d_ = (Delegates.glMap1d_)GetAddress("glMap1d", typeof(Delegates.glMap1d_));
        #endregion glMap1d_

        #region glMap1f_
        public static Delegates.glMap1f_ glMap1f_ = (Delegates.glMap1f_)GetAddress("glMap1f", typeof(Delegates.glMap1f_));
        #endregion glMap1f_

        #region glMap2d_
        public static Delegates.glMap2d_ glMap2d_ = (Delegates.glMap2d_)GetAddress("glMap2d", typeof(Delegates.glMap2d_));
        #endregion glMap2d_

        #region glMap2f_
        public static Delegates.glMap2f_ glMap2f_ = (Delegates.glMap2f_)GetAddress("glMap2f", typeof(Delegates.glMap2f_));
        #endregion glMap2f_

        #region glMapGrid1d
        public static Delegates.glMapGrid1d glMapGrid1d = (Delegates.glMapGrid1d)GetAddress("glMapGrid1d", typeof(Delegates.glMapGrid1d));
        #endregion glMapGrid1d

        #region glMapGrid1f
        public static Delegates.glMapGrid1f glMapGrid1f = (Delegates.glMapGrid1f)GetAddress("glMapGrid1f", typeof(Delegates.glMapGrid1f));
        #endregion glMapGrid1f

        #region glMapGrid2d
        public static Delegates.glMapGrid2d glMapGrid2d = (Delegates.glMapGrid2d)GetAddress("glMapGrid2d", typeof(Delegates.glMapGrid2d));
        #endregion glMapGrid2d

        #region glMapGrid2f
        public static Delegates.glMapGrid2f glMapGrid2f = (Delegates.glMapGrid2f)GetAddress("glMapGrid2f", typeof(Delegates.glMapGrid2f));
        #endregion glMapGrid2f

        #region glEvalCoord1d
        public static Delegates.glEvalCoord1d glEvalCoord1d = (Delegates.glEvalCoord1d)GetAddress("glEvalCoord1d", typeof(Delegates.glEvalCoord1d));
        #endregion glEvalCoord1d

        #region glEvalCoord1dv_
        public static Delegates.glEvalCoord1dv_ glEvalCoord1dv_ = (Delegates.glEvalCoord1dv_)GetAddress("glEvalCoord1dv", typeof(Delegates.glEvalCoord1dv_));
        #endregion glEvalCoord1dv_

        #region glEvalCoord1f
        public static Delegates.glEvalCoord1f glEvalCoord1f = (Delegates.glEvalCoord1f)GetAddress("glEvalCoord1f", typeof(Delegates.glEvalCoord1f));
        #endregion glEvalCoord1f

        #region glEvalCoord1fv_
        public static Delegates.glEvalCoord1fv_ glEvalCoord1fv_ = (Delegates.glEvalCoord1fv_)GetAddress("glEvalCoord1fv", typeof(Delegates.glEvalCoord1fv_));
        #endregion glEvalCoord1fv_

        #region glEvalCoord2d
        public static Delegates.glEvalCoord2d glEvalCoord2d = (Delegates.glEvalCoord2d)GetAddress("glEvalCoord2d", typeof(Delegates.glEvalCoord2d));
        #endregion glEvalCoord2d

        #region glEvalCoord2dv_
        public static Delegates.glEvalCoord2dv_ glEvalCoord2dv_ = (Delegates.glEvalCoord2dv_)GetAddress("glEvalCoord2dv", typeof(Delegates.glEvalCoord2dv_));
        #endregion glEvalCoord2dv_

        #region glEvalCoord2f
        public static Delegates.glEvalCoord2f glEvalCoord2f = (Delegates.glEvalCoord2f)GetAddress("glEvalCoord2f", typeof(Delegates.glEvalCoord2f));
        #endregion glEvalCoord2f

        #region glEvalCoord2fv_
        public static Delegates.glEvalCoord2fv_ glEvalCoord2fv_ = (Delegates.glEvalCoord2fv_)GetAddress("glEvalCoord2fv", typeof(Delegates.glEvalCoord2fv_));
        #endregion glEvalCoord2fv_

        #region glEvalMesh1
        public static Delegates.glEvalMesh1 glEvalMesh1 = (Delegates.glEvalMesh1)GetAddress("glEvalMesh1", typeof(Delegates.glEvalMesh1));
        #endregion glEvalMesh1

        #region glEvalPoint1
        public static Delegates.glEvalPoint1 glEvalPoint1 = (Delegates.glEvalPoint1)GetAddress("glEvalPoint1", typeof(Delegates.glEvalPoint1));
        #endregion glEvalPoint1

        #region glEvalMesh2
        public static Delegates.glEvalMesh2 glEvalMesh2 = (Delegates.glEvalMesh2)GetAddress("glEvalMesh2", typeof(Delegates.glEvalMesh2));
        #endregion glEvalMesh2

        #region glEvalPoint2
        public static Delegates.glEvalPoint2 glEvalPoint2 = (Delegates.glEvalPoint2)GetAddress("glEvalPoint2", typeof(Delegates.glEvalPoint2));
        #endregion glEvalPoint2

        #region glAlphaFunc
        public static Delegates.glAlphaFunc glAlphaFunc = (Delegates.glAlphaFunc)GetAddress("glAlphaFunc", typeof(Delegates.glAlphaFunc));
        #endregion glAlphaFunc

        #region glBlendFunc
        public static Delegates.glBlendFunc glBlendFunc = (Delegates.glBlendFunc)GetAddress("glBlendFunc", typeof(Delegates.glBlendFunc));
        #endregion glBlendFunc

        #region glLogicOp
        public static Delegates.glLogicOp glLogicOp = (Delegates.glLogicOp)GetAddress("glLogicOp", typeof(Delegates.glLogicOp));
        #endregion glLogicOp

        #region glStencilFunc
        public static Delegates.glStencilFunc glStencilFunc = (Delegates.glStencilFunc)GetAddress("glStencilFunc", typeof(Delegates.glStencilFunc));
        #endregion glStencilFunc

        #region glStencilOp
        public static Delegates.glStencilOp glStencilOp = (Delegates.glStencilOp)GetAddress("glStencilOp", typeof(Delegates.glStencilOp));
        #endregion glStencilOp

        #region glDepthFunc
        public static Delegates.glDepthFunc glDepthFunc = (Delegates.glDepthFunc)GetAddress("glDepthFunc", typeof(Delegates.glDepthFunc));
        #endregion glDepthFunc

        #region glPixelZoom
        public static Delegates.glPixelZoom glPixelZoom = (Delegates.glPixelZoom)GetAddress("glPixelZoom", typeof(Delegates.glPixelZoom));
        #endregion glPixelZoom

        #region glPixelTransferf
        public static Delegates.glPixelTransferf glPixelTransferf = (Delegates.glPixelTransferf)GetAddress("glPixelTransferf", typeof(Delegates.glPixelTransferf));
        #endregion glPixelTransferf

        #region glPixelTransferi
        public static Delegates.glPixelTransferi glPixelTransferi = (Delegates.glPixelTransferi)GetAddress("glPixelTransferi", typeof(Delegates.glPixelTransferi));
        #endregion glPixelTransferi

        #region glPixelStoref
        public static Delegates.glPixelStoref glPixelStoref = (Delegates.glPixelStoref)GetAddress("glPixelStoref", typeof(Delegates.glPixelStoref));
        #endregion glPixelStoref

        #region glPixelStorei
        public static Delegates.glPixelStorei glPixelStorei = (Delegates.glPixelStorei)GetAddress("glPixelStorei", typeof(Delegates.glPixelStorei));
        #endregion glPixelStorei

        #region glPixelMapfv_
        public static Delegates.glPixelMapfv_ glPixelMapfv_ = (Delegates.glPixelMapfv_)GetAddress("glPixelMapfv", typeof(Delegates.glPixelMapfv_));
        #endregion glPixelMapfv_

        #region glPixelMapuiv_
        public static Delegates.glPixelMapuiv_ glPixelMapuiv_ = (Delegates.glPixelMapuiv_)GetAddress("glPixelMapuiv", typeof(Delegates.glPixelMapuiv_));
        #endregion glPixelMapuiv_

        #region glPixelMapusv_
        public static Delegates.glPixelMapusv_ glPixelMapusv_ = (Delegates.glPixelMapusv_)GetAddress("glPixelMapusv", typeof(Delegates.glPixelMapusv_));
        #endregion glPixelMapusv_

        #region glReadBuffer
        public static Delegates.glReadBuffer glReadBuffer = (Delegates.glReadBuffer)GetAddress("glReadBuffer", typeof(Delegates.glReadBuffer));
        #endregion glReadBuffer

        #region glCopyPixels
        public static Delegates.glCopyPixels glCopyPixels = (Delegates.glCopyPixels)GetAddress("glCopyPixels", typeof(Delegates.glCopyPixels));
        #endregion glCopyPixels

        #region glReadPixels_
        public static Delegates.glReadPixels_ glReadPixels_ = (Delegates.glReadPixels_)GetAddress("glReadPixels", typeof(Delegates.glReadPixels_));
        #endregion glReadPixels_

        #region glDrawPixels_
        public static Delegates.glDrawPixels_ glDrawPixels_ = (Delegates.glDrawPixels_)GetAddress("glDrawPixels", typeof(Delegates.glDrawPixels_));
        #endregion glDrawPixels_

        #region glGetBooleanv_
        public static Delegates.glGetBooleanv_ glGetBooleanv_ = (Delegates.glGetBooleanv_)GetAddress("glGetBooleanv", typeof(Delegates.glGetBooleanv_));
        #endregion glGetBooleanv_

        #region glGetClipPlane_
        public static Delegates.glGetClipPlane_ glGetClipPlane_ = (Delegates.glGetClipPlane_)GetAddress("glGetClipPlane", typeof(Delegates.glGetClipPlane_));
        #endregion glGetClipPlane_

        #region glGetDoublev_
        public static Delegates.glGetDoublev_ glGetDoublev_ = (Delegates.glGetDoublev_)GetAddress("glGetDoublev", typeof(Delegates.glGetDoublev_));
        #endregion glGetDoublev_

        #region glGetError
        public static Delegates.glGetError glGetError = (Delegates.glGetError)GetAddress("glGetError", typeof(Delegates.glGetError));
        #endregion glGetError

        #region glGetFloatv_
        public static Delegates.glGetFloatv_ glGetFloatv_ = (Delegates.glGetFloatv_)GetAddress("glGetFloatv", typeof(Delegates.glGetFloatv_));
        #endregion glGetFloatv_

        #region glGetIntegerv_
        public static Delegates.glGetIntegerv_ glGetIntegerv_ = (Delegates.glGetIntegerv_)GetAddress("glGetIntegerv", typeof(Delegates.glGetIntegerv_));
        #endregion glGetIntegerv_

        #region glGetLightfv_
        public static Delegates.glGetLightfv_ glGetLightfv_ = (Delegates.glGetLightfv_)GetAddress("glGetLightfv", typeof(Delegates.glGetLightfv_));
        #endregion glGetLightfv_

        #region glGetLightiv_
        public static Delegates.glGetLightiv_ glGetLightiv_ = (Delegates.glGetLightiv_)GetAddress("glGetLightiv", typeof(Delegates.glGetLightiv_));
        #endregion glGetLightiv_

        #region glGetMapdv_
        public static Delegates.glGetMapdv_ glGetMapdv_ = (Delegates.glGetMapdv_)GetAddress("glGetMapdv", typeof(Delegates.glGetMapdv_));
        #endregion glGetMapdv_

        #region glGetMapfv_
        public static Delegates.glGetMapfv_ glGetMapfv_ = (Delegates.glGetMapfv_)GetAddress("glGetMapfv", typeof(Delegates.glGetMapfv_));
        #endregion glGetMapfv_

        #region glGetMapiv_
        public static Delegates.glGetMapiv_ glGetMapiv_ = (Delegates.glGetMapiv_)GetAddress("glGetMapiv", typeof(Delegates.glGetMapiv_));
        #endregion glGetMapiv_

        #region glGetMaterialfv_
        public static Delegates.glGetMaterialfv_ glGetMaterialfv_ = (Delegates.glGetMaterialfv_)GetAddress("glGetMaterialfv", typeof(Delegates.glGetMaterialfv_));
        #endregion glGetMaterialfv_

        #region glGetMaterialiv_
        public static Delegates.glGetMaterialiv_ glGetMaterialiv_ = (Delegates.glGetMaterialiv_)GetAddress("glGetMaterialiv", typeof(Delegates.glGetMaterialiv_));
        #endregion glGetMaterialiv_

        #region glGetPixelMapfv_
        public static Delegates.glGetPixelMapfv_ glGetPixelMapfv_ = (Delegates.glGetPixelMapfv_)GetAddress("glGetPixelMapfv", typeof(Delegates.glGetPixelMapfv_));
        #endregion glGetPixelMapfv_

        #region glGetPixelMapuiv_
        public static Delegates.glGetPixelMapuiv_ glGetPixelMapuiv_ = (Delegates.glGetPixelMapuiv_)GetAddress("glGetPixelMapuiv", typeof(Delegates.glGetPixelMapuiv_));
        #endregion glGetPixelMapuiv_

        #region glGetPixelMapusv_
        public static Delegates.glGetPixelMapusv_ glGetPixelMapusv_ = (Delegates.glGetPixelMapusv_)GetAddress("glGetPixelMapusv", typeof(Delegates.glGetPixelMapusv_));
        #endregion glGetPixelMapusv_

        #region glGetPolygonStipple_
        public static Delegates.glGetPolygonStipple_ glGetPolygonStipple_ = (Delegates.glGetPolygonStipple_)GetAddress("glGetPolygonStipple", typeof(Delegates.glGetPolygonStipple_));
        #endregion glGetPolygonStipple_

        #region glGetString_
        public static Delegates.glGetString_ glGetString_ = (Delegates.glGetString_)GetAddress("glGetString", typeof(Delegates.glGetString_));
        #endregion glGetString_

        #region glGetTexEnvfv_
        public static Delegates.glGetTexEnvfv_ glGetTexEnvfv_ = (Delegates.glGetTexEnvfv_)GetAddress("glGetTexEnvfv", typeof(Delegates.glGetTexEnvfv_));
        #endregion glGetTexEnvfv_

        #region glGetTexEnviv_
        public static Delegates.glGetTexEnviv_ glGetTexEnviv_ = (Delegates.glGetTexEnviv_)GetAddress("glGetTexEnviv", typeof(Delegates.glGetTexEnviv_));
        #endregion glGetTexEnviv_

        #region glGetTexGendv_
        public static Delegates.glGetTexGendv_ glGetTexGendv_ = (Delegates.glGetTexGendv_)GetAddress("glGetTexGendv", typeof(Delegates.glGetTexGendv_));
        #endregion glGetTexGendv_

        #region glGetTexGenfv_
        public static Delegates.glGetTexGenfv_ glGetTexGenfv_ = (Delegates.glGetTexGenfv_)GetAddress("glGetTexGenfv", typeof(Delegates.glGetTexGenfv_));
        #endregion glGetTexGenfv_

        #region glGetTexGeniv_
        public static Delegates.glGetTexGeniv_ glGetTexGeniv_ = (Delegates.glGetTexGeniv_)GetAddress("glGetTexGeniv", typeof(Delegates.glGetTexGeniv_));
        #endregion glGetTexGeniv_

        #region glGetTexImage_
        public static Delegates.glGetTexImage_ glGetTexImage_ = (Delegates.glGetTexImage_)GetAddress("glGetTexImage", typeof(Delegates.glGetTexImage_));
        #endregion glGetTexImage_

        #region glGetTexParameterfv_
        public static Delegates.glGetTexParameterfv_ glGetTexParameterfv_ = (Delegates.glGetTexParameterfv_)GetAddress("glGetTexParameterfv", typeof(Delegates.glGetTexParameterfv_));
        #endregion glGetTexParameterfv_

        #region glGetTexParameteriv_
        public static Delegates.glGetTexParameteriv_ glGetTexParameteriv_ = (Delegates.glGetTexParameteriv_)GetAddress("glGetTexParameteriv", typeof(Delegates.glGetTexParameteriv_));
        #endregion glGetTexParameteriv_

        #region glGetTexLevelParameterfv_
        public static Delegates.glGetTexLevelParameterfv_ glGetTexLevelParameterfv_ = (Delegates.glGetTexLevelParameterfv_)GetAddress("glGetTexLevelParameterfv", typeof(Delegates.glGetTexLevelParameterfv_));
        #endregion glGetTexLevelParameterfv_

        #region glGetTexLevelParameteriv_
        public static Delegates.glGetTexLevelParameteriv_ glGetTexLevelParameteriv_ = (Delegates.glGetTexLevelParameteriv_)GetAddress("glGetTexLevelParameteriv", typeof(Delegates.glGetTexLevelParameteriv_));
        #endregion glGetTexLevelParameteriv_

        #region glIsEnabled
        public static Delegates.glIsEnabled glIsEnabled = (Delegates.glIsEnabled)GetAddress("glIsEnabled", typeof(Delegates.glIsEnabled));
        #endregion glIsEnabled

        #region glIsList
        public static Delegates.glIsList glIsList = (Delegates.glIsList)GetAddress("glIsList", typeof(Delegates.glIsList));
        #endregion glIsList

        #region glDepthRange
        public static Delegates.glDepthRange glDepthRange = (Delegates.glDepthRange)GetAddress("glDepthRange", typeof(Delegates.glDepthRange));
        #endregion glDepthRange

        #region glFrustum
        public static Delegates.glFrustum glFrustum = (Delegates.glFrustum)GetAddress("glFrustum", typeof(Delegates.glFrustum));
        #endregion glFrustum

        #region glLoadIdentity
        public static Delegates.glLoadIdentity glLoadIdentity = (Delegates.glLoadIdentity)GetAddress("glLoadIdentity", typeof(Delegates.glLoadIdentity));
        #endregion glLoadIdentity

        #region glLoadMatrixf_
        public static Delegates.glLoadMatrixf_ glLoadMatrixf_ = (Delegates.glLoadMatrixf_)GetAddress("glLoadMatrixf", typeof(Delegates.glLoadMatrixf_));
        #endregion glLoadMatrixf_

        #region glLoadMatrixd_
        public static Delegates.glLoadMatrixd_ glLoadMatrixd_ = (Delegates.glLoadMatrixd_)GetAddress("glLoadMatrixd", typeof(Delegates.glLoadMatrixd_));
        #endregion glLoadMatrixd_

        #region glMatrixMode
        public static Delegates.glMatrixMode glMatrixMode = (Delegates.glMatrixMode)GetAddress("glMatrixMode", typeof(Delegates.glMatrixMode));
        #endregion glMatrixMode

        #region glMultMatrixf_
        public static Delegates.glMultMatrixf_ glMultMatrixf_ = (Delegates.glMultMatrixf_)GetAddress("glMultMatrixf", typeof(Delegates.glMultMatrixf_));
        #endregion glMultMatrixf_

        #region glMultMatrixd_
        public static Delegates.glMultMatrixd_ glMultMatrixd_ = (Delegates.glMultMatrixd_)GetAddress("glMultMatrixd", typeof(Delegates.glMultMatrixd_));
        #endregion glMultMatrixd_

        #region glOrtho
        public static Delegates.glOrtho glOrtho = (Delegates.glOrtho)GetAddress("glOrtho", typeof(Delegates.glOrtho));
        #endregion glOrtho

        #region glPopMatrix
        public static Delegates.glPopMatrix glPopMatrix = (Delegates.glPopMatrix)GetAddress("glPopMatrix", typeof(Delegates.glPopMatrix));
        #endregion glPopMatrix

        #region glPushMatrix
        public static Delegates.glPushMatrix glPushMatrix = (Delegates.glPushMatrix)GetAddress("glPushMatrix", typeof(Delegates.glPushMatrix));
        #endregion glPushMatrix

        #region glRotated
        public static Delegates.glRotated glRotated = (Delegates.glRotated)GetAddress("glRotated", typeof(Delegates.glRotated));
        #endregion glRotated

        #region glRotatef
        public static Delegates.glRotatef glRotatef = (Delegates.glRotatef)GetAddress("glRotatef", typeof(Delegates.glRotatef));
        #endregion glRotatef

        #region glScaled
        public static Delegates.glScaled glScaled = (Delegates.glScaled)GetAddress("glScaled", typeof(Delegates.glScaled));
        #endregion glScaled

        #region glScalef
        public static Delegates.glScalef glScalef = (Delegates.glScalef)GetAddress("glScalef", typeof(Delegates.glScalef));
        #endregion glScalef

        #region glTranslated
        public static Delegates.glTranslated glTranslated = (Delegates.glTranslated)GetAddress("glTranslated", typeof(Delegates.glTranslated));
        #endregion glTranslated

        #region glTranslatef
        public static Delegates.glTranslatef glTranslatef = (Delegates.glTranslatef)GetAddress("glTranslatef", typeof(Delegates.glTranslatef));
        #endregion glTranslatef

        #region glViewport
        public static Delegates.glViewport glViewport = (Delegates.glViewport)GetAddress("glViewport", typeof(Delegates.glViewport));
        #endregion glViewport

        #region glArrayElement
        public static Delegates.glArrayElement glArrayElement = (Delegates.glArrayElement)GetAddress("glArrayElement", typeof(Delegates.glArrayElement));
        #endregion glArrayElement

        #region glColorPointer_
        public static Delegates.glColorPointer_ glColorPointer_ = (Delegates.glColorPointer_)GetAddress("glColorPointer", typeof(Delegates.glColorPointer_));
        #endregion glColorPointer_

        #region glDisableClientState
        public static Delegates.glDisableClientState glDisableClientState = (Delegates.glDisableClientState)GetAddress("glDisableClientState", typeof(Delegates.glDisableClientState));
        #endregion glDisableClientState

        #region glDrawArrays
        public static Delegates.glDrawArrays glDrawArrays = (Delegates.glDrawArrays)GetAddress("glDrawArrays", typeof(Delegates.glDrawArrays));
        #endregion glDrawArrays

        #region glDrawElements_
        public static Delegates.glDrawElements_ glDrawElements_ = (Delegates.glDrawElements_)GetAddress("glDrawElements", typeof(Delegates.glDrawElements_));
        #endregion glDrawElements_

        #region glEdgeFlagPointer_
        public static Delegates.glEdgeFlagPointer_ glEdgeFlagPointer_ = (Delegates.glEdgeFlagPointer_)GetAddress("glEdgeFlagPointer", typeof(Delegates.glEdgeFlagPointer_));
        #endregion glEdgeFlagPointer_

        #region glEnableClientState
        public static Delegates.glEnableClientState glEnableClientState = (Delegates.glEnableClientState)GetAddress("glEnableClientState", typeof(Delegates.glEnableClientState));
        #endregion glEnableClientState

        #region glGetPointerv_
        public static Delegates.glGetPointerv_ glGetPointerv_ = (Delegates.glGetPointerv_)GetAddress("glGetPointerv", typeof(Delegates.glGetPointerv_));
        #endregion glGetPointerv_

        #region glIndexPointer_
        public static Delegates.glIndexPointer_ glIndexPointer_ = (Delegates.glIndexPointer_)GetAddress("glIndexPointer", typeof(Delegates.glIndexPointer_));
        #endregion glIndexPointer_

        #region glInterleavedArrays_
        public static Delegates.glInterleavedArrays_ glInterleavedArrays_ = (Delegates.glInterleavedArrays_)GetAddress("glInterleavedArrays", typeof(Delegates.glInterleavedArrays_));
        #endregion glInterleavedArrays_

        #region glNormalPointer_
        public static Delegates.glNormalPointer_ glNormalPointer_ = (Delegates.glNormalPointer_)GetAddress("glNormalPointer", typeof(Delegates.glNormalPointer_));
        #endregion glNormalPointer_

        #region glTexCoordPointer_
        public static Delegates.glTexCoordPointer_ glTexCoordPointer_ = (Delegates.glTexCoordPointer_)GetAddress("glTexCoordPointer", typeof(Delegates.glTexCoordPointer_));
        #endregion glTexCoordPointer_

        #region glVertexPointer_
        public static Delegates.glVertexPointer_ glVertexPointer_ = (Delegates.glVertexPointer_)GetAddress("glVertexPointer", typeof(Delegates.glVertexPointer_));
        #endregion glVertexPointer_

        #region glPolygonOffset
        public static Delegates.glPolygonOffset glPolygonOffset = (Delegates.glPolygonOffset)GetAddress("glPolygonOffset", typeof(Delegates.glPolygonOffset));
        #endregion glPolygonOffset

        #region glCopyTexImage1D
        public static Delegates.glCopyTexImage1D glCopyTexImage1D = (Delegates.glCopyTexImage1D)GetAddress("glCopyTexImage1D", typeof(Delegates.glCopyTexImage1D));
        #endregion glCopyTexImage1D

        #region glCopyTexImage2D
        public static Delegates.glCopyTexImage2D glCopyTexImage2D = (Delegates.glCopyTexImage2D)GetAddress("glCopyTexImage2D", typeof(Delegates.glCopyTexImage2D));
        #endregion glCopyTexImage2D

        #region glCopyTexSubImage1D
        public static Delegates.glCopyTexSubImage1D glCopyTexSubImage1D = (Delegates.glCopyTexSubImage1D)GetAddress("glCopyTexSubImage1D", typeof(Delegates.glCopyTexSubImage1D));
        #endregion glCopyTexSubImage1D

        #region glCopyTexSubImage2D
        public static Delegates.glCopyTexSubImage2D glCopyTexSubImage2D = (Delegates.glCopyTexSubImage2D)GetAddress("glCopyTexSubImage2D", typeof(Delegates.glCopyTexSubImage2D));
        #endregion glCopyTexSubImage2D

        #region glTexSubImage1D_
        public static Delegates.glTexSubImage1D_ glTexSubImage1D_ = (Delegates.glTexSubImage1D_)GetAddress("glTexSubImage1D", typeof(Delegates.glTexSubImage1D_));
        #endregion glTexSubImage1D_

        #region glTexSubImage2D_
        public static Delegates.glTexSubImage2D_ glTexSubImage2D_ = (Delegates.glTexSubImage2D_)GetAddress("glTexSubImage2D", typeof(Delegates.glTexSubImage2D_));
        #endregion glTexSubImage2D_

        #region glAreTexturesResident_
        public static Delegates.glAreTexturesResident_ glAreTexturesResident_ = (Delegates.glAreTexturesResident_)GetAddress("glAreTexturesResident", typeof(Delegates.glAreTexturesResident_));
        #endregion glAreTexturesResident_

        #region glBindTexture
        public static Delegates.glBindTexture glBindTexture = (Delegates.glBindTexture)GetAddress("glBindTexture", typeof(Delegates.glBindTexture));
        #endregion glBindTexture

        #region glDeleteTextures_
        public static Delegates.glDeleteTextures_ glDeleteTextures_ = (Delegates.glDeleteTextures_)GetAddress("glDeleteTextures", typeof(Delegates.glDeleteTextures_));
        #endregion glDeleteTextures_

        #region glGenTextures_
        public static Delegates.glGenTextures_ glGenTextures_ = (Delegates.glGenTextures_)GetAddress("glGenTextures", typeof(Delegates.glGenTextures_));
        #endregion glGenTextures_

        #region glIsTexture
        public static Delegates.glIsTexture glIsTexture = (Delegates.glIsTexture)GetAddress("glIsTexture", typeof(Delegates.glIsTexture));
        #endregion glIsTexture

        #region glPrioritizeTextures_
        public static Delegates.glPrioritizeTextures_ glPrioritizeTextures_ = (Delegates.glPrioritizeTextures_)GetAddress("glPrioritizeTextures", typeof(Delegates.glPrioritizeTextures_));
        #endregion glPrioritizeTextures_

        #region glIndexub
        public static Delegates.glIndexub glIndexub = (Delegates.glIndexub)GetAddress("glIndexub", typeof(Delegates.glIndexub));
        #endregion glIndexub

        #region glIndexubv_
        public static Delegates.glIndexubv_ glIndexubv_ = (Delegates.glIndexubv_)GetAddress("glIndexubv", typeof(Delegates.glIndexubv_));
        #endregion glIndexubv_

        #region glPopClientAttrib
        public static Delegates.glPopClientAttrib glPopClientAttrib = (Delegates.glPopClientAttrib)GetAddress("glPopClientAttrib", typeof(Delegates.glPopClientAttrib));
        #endregion glPopClientAttrib

        #region glPushClientAttrib
        public static Delegates.glPushClientAttrib glPushClientAttrib = (Delegates.glPushClientAttrib)GetAddress("glPushClientAttrib", typeof(Delegates.glPushClientAttrib));
        #endregion glPushClientAttrib

        #region glBlendColor
        public static Delegates.glBlendColor glBlendColor = (Delegates.glBlendColor)GetAddress("glBlendColor", typeof(Delegates.glBlendColor));
        #endregion glBlendColor

        #region glBlendEquation
        public static Delegates.glBlendEquation glBlendEquation = (Delegates.glBlendEquation)GetAddress("glBlendEquation", typeof(Delegates.glBlendEquation));
        #endregion glBlendEquation

        #region glDrawRangeElements_
        public static Delegates.glDrawRangeElements_ glDrawRangeElements_ = (Delegates.glDrawRangeElements_)GetAddress("glDrawRangeElements", typeof(Delegates.glDrawRangeElements_));
        #endregion glDrawRangeElements_

        #region glColorTable_
        public static Delegates.glColorTable_ glColorTable_ = (Delegates.glColorTable_)GetAddress("glColorTable", typeof(Delegates.glColorTable_));
        #endregion glColorTable_

        #region glColorTableParameterfv_
        public static Delegates.glColorTableParameterfv_ glColorTableParameterfv_ = (Delegates.glColorTableParameterfv_)GetAddress("glColorTableParameterfv", typeof(Delegates.glColorTableParameterfv_));
        #endregion glColorTableParameterfv_

        #region glColorTableParameteriv_
        public static Delegates.glColorTableParameteriv_ glColorTableParameteriv_ = (Delegates.glColorTableParameteriv_)GetAddress("glColorTableParameteriv", typeof(Delegates.glColorTableParameteriv_));
        #endregion glColorTableParameteriv_

        #region glCopyColorTable
        public static Delegates.glCopyColorTable glCopyColorTable = (Delegates.glCopyColorTable)GetAddress("glCopyColorTable", typeof(Delegates.glCopyColorTable));
        #endregion glCopyColorTable

        #region glGetColorTable_
        public static Delegates.glGetColorTable_ glGetColorTable_ = (Delegates.glGetColorTable_)GetAddress("glGetColorTable", typeof(Delegates.glGetColorTable_));
        #endregion glGetColorTable_

        #region glGetColorTableParameterfv_
        public static Delegates.glGetColorTableParameterfv_ glGetColorTableParameterfv_ = (Delegates.glGetColorTableParameterfv_)GetAddress("glGetColorTableParameterfv", typeof(Delegates.glGetColorTableParameterfv_));
        #endregion glGetColorTableParameterfv_

        #region glGetColorTableParameteriv_
        public static Delegates.glGetColorTableParameteriv_ glGetColorTableParameteriv_ = (Delegates.glGetColorTableParameteriv_)GetAddress("glGetColorTableParameteriv", typeof(Delegates.glGetColorTableParameteriv_));
        #endregion glGetColorTableParameteriv_

        #region glColorSubTable_
        public static Delegates.glColorSubTable_ glColorSubTable_ = (Delegates.glColorSubTable_)GetAddress("glColorSubTable", typeof(Delegates.glColorSubTable_));
        #endregion glColorSubTable_

        #region glCopyColorSubTable
        public static Delegates.glCopyColorSubTable glCopyColorSubTable = (Delegates.glCopyColorSubTable)GetAddress("glCopyColorSubTable", typeof(Delegates.glCopyColorSubTable));
        #endregion glCopyColorSubTable

        #region glConvolutionFilter1D_
        public static Delegates.glConvolutionFilter1D_ glConvolutionFilter1D_ = (Delegates.glConvolutionFilter1D_)GetAddress("glConvolutionFilter1D", typeof(Delegates.glConvolutionFilter1D_));
        #endregion glConvolutionFilter1D_

        #region glConvolutionFilter2D_
        public static Delegates.glConvolutionFilter2D_ glConvolutionFilter2D_ = (Delegates.glConvolutionFilter2D_)GetAddress("glConvolutionFilter2D", typeof(Delegates.glConvolutionFilter2D_));
        #endregion glConvolutionFilter2D_

        #region glConvolutionParameterf
        public static Delegates.glConvolutionParameterf glConvolutionParameterf = (Delegates.glConvolutionParameterf)GetAddress("glConvolutionParameterf", typeof(Delegates.glConvolutionParameterf));
        #endregion glConvolutionParameterf

        #region glConvolutionParameterfv_
        public static Delegates.glConvolutionParameterfv_ glConvolutionParameterfv_ = (Delegates.glConvolutionParameterfv_)GetAddress("glConvolutionParameterfv", typeof(Delegates.glConvolutionParameterfv_));
        #endregion glConvolutionParameterfv_

        #region glConvolutionParameteri
        public static Delegates.glConvolutionParameteri glConvolutionParameteri = (Delegates.glConvolutionParameteri)GetAddress("glConvolutionParameteri", typeof(Delegates.glConvolutionParameteri));
        #endregion glConvolutionParameteri

        #region glConvolutionParameteriv_
        public static Delegates.glConvolutionParameteriv_ glConvolutionParameteriv_ = (Delegates.glConvolutionParameteriv_)GetAddress("glConvolutionParameteriv", typeof(Delegates.glConvolutionParameteriv_));
        #endregion glConvolutionParameteriv_

        #region glCopyConvolutionFilter1D
        public static Delegates.glCopyConvolutionFilter1D glCopyConvolutionFilter1D = (Delegates.glCopyConvolutionFilter1D)GetAddress("glCopyConvolutionFilter1D", typeof(Delegates.glCopyConvolutionFilter1D));
        #endregion glCopyConvolutionFilter1D

        #region glCopyConvolutionFilter2D
        public static Delegates.glCopyConvolutionFilter2D glCopyConvolutionFilter2D = (Delegates.glCopyConvolutionFilter2D)GetAddress("glCopyConvolutionFilter2D", typeof(Delegates.glCopyConvolutionFilter2D));
        #endregion glCopyConvolutionFilter2D

        #region glGetConvolutionFilter_
        public static Delegates.glGetConvolutionFilter_ glGetConvolutionFilter_ = (Delegates.glGetConvolutionFilter_)GetAddress("glGetConvolutionFilter", typeof(Delegates.glGetConvolutionFilter_));
        #endregion glGetConvolutionFilter_

        #region glGetConvolutionParameterfv_
        public static Delegates.glGetConvolutionParameterfv_ glGetConvolutionParameterfv_ = (Delegates.glGetConvolutionParameterfv_)GetAddress("glGetConvolutionParameterfv", typeof(Delegates.glGetConvolutionParameterfv_));
        #endregion glGetConvolutionParameterfv_

        #region glGetConvolutionParameteriv_
        public static Delegates.glGetConvolutionParameteriv_ glGetConvolutionParameteriv_ = (Delegates.glGetConvolutionParameteriv_)GetAddress("glGetConvolutionParameteriv", typeof(Delegates.glGetConvolutionParameteriv_));
        #endregion glGetConvolutionParameteriv_

        #region glGetSeparableFilter_
        public static Delegates.glGetSeparableFilter_ glGetSeparableFilter_ = (Delegates.glGetSeparableFilter_)GetAddress("glGetSeparableFilter", typeof(Delegates.glGetSeparableFilter_));
        #endregion glGetSeparableFilter_

        #region glSeparableFilter2D_
        public static Delegates.glSeparableFilter2D_ glSeparableFilter2D_ = (Delegates.glSeparableFilter2D_)GetAddress("glSeparableFilter2D", typeof(Delegates.glSeparableFilter2D_));
        #endregion glSeparableFilter2D_

        #region glGetHistogram_
        public static Delegates.glGetHistogram_ glGetHistogram_ = (Delegates.glGetHistogram_)GetAddress("glGetHistogram", typeof(Delegates.glGetHistogram_));
        #endregion glGetHistogram_

        #region glGetHistogramParameterfv_
        public static Delegates.glGetHistogramParameterfv_ glGetHistogramParameterfv_ = (Delegates.glGetHistogramParameterfv_)GetAddress("glGetHistogramParameterfv", typeof(Delegates.glGetHistogramParameterfv_));
        #endregion glGetHistogramParameterfv_

        #region glGetHistogramParameteriv_
        public static Delegates.glGetHistogramParameteriv_ glGetHistogramParameteriv_ = (Delegates.glGetHistogramParameteriv_)GetAddress("glGetHistogramParameteriv", typeof(Delegates.glGetHistogramParameteriv_));
        #endregion glGetHistogramParameteriv_

        #region glGetMinmax_
        public static Delegates.glGetMinmax_ glGetMinmax_ = (Delegates.glGetMinmax_)GetAddress("glGetMinmax", typeof(Delegates.glGetMinmax_));
        #endregion glGetMinmax_

        #region glGetMinmaxParameterfv_
        public static Delegates.glGetMinmaxParameterfv_ glGetMinmaxParameterfv_ = (Delegates.glGetMinmaxParameterfv_)GetAddress("glGetMinmaxParameterfv", typeof(Delegates.glGetMinmaxParameterfv_));
        #endregion glGetMinmaxParameterfv_

        #region glGetMinmaxParameteriv_
        public static Delegates.glGetMinmaxParameteriv_ glGetMinmaxParameteriv_ = (Delegates.glGetMinmaxParameteriv_)GetAddress("glGetMinmaxParameteriv", typeof(Delegates.glGetMinmaxParameteriv_));
        #endregion glGetMinmaxParameteriv_

        #region glHistogram
        public static Delegates.glHistogram glHistogram = (Delegates.glHistogram)GetAddress("glHistogram", typeof(Delegates.glHistogram));
        #endregion glHistogram

        #region glMinmax
        public static Delegates.glMinmax glMinmax = (Delegates.glMinmax)GetAddress("glMinmax", typeof(Delegates.glMinmax));
        #endregion glMinmax

        #region glResetHistogram
        public static Delegates.glResetHistogram glResetHistogram = (Delegates.glResetHistogram)GetAddress("glResetHistogram", typeof(Delegates.glResetHistogram));
        #endregion glResetHistogram

        #region glResetMinmax
        public static Delegates.glResetMinmax glResetMinmax = (Delegates.glResetMinmax)GetAddress("glResetMinmax", typeof(Delegates.glResetMinmax));
        #endregion glResetMinmax

        #region glTexImage3D_
        public static Delegates.glTexImage3D_ glTexImage3D_ = (Delegates.glTexImage3D_)GetAddress("glTexImage3D", typeof(Delegates.glTexImage3D_));
        #endregion glTexImage3D_

        #region glTexSubImage3D_
        public static Delegates.glTexSubImage3D_ glTexSubImage3D_ = (Delegates.glTexSubImage3D_)GetAddress("glTexSubImage3D", typeof(Delegates.glTexSubImage3D_));
        #endregion glTexSubImage3D_

        #region glCopyTexSubImage3D
        public static Delegates.glCopyTexSubImage3D glCopyTexSubImage3D = (Delegates.glCopyTexSubImage3D)GetAddress("glCopyTexSubImage3D", typeof(Delegates.glCopyTexSubImage3D));
        #endregion glCopyTexSubImage3D

        #region glActiveTexture
        public static Delegates.glActiveTexture glActiveTexture = (Delegates.glActiveTexture)GetAddress("glActiveTexture", typeof(Delegates.glActiveTexture));
        #endregion glActiveTexture

        #region glClientActiveTexture
        public static Delegates.glClientActiveTexture glClientActiveTexture = (Delegates.glClientActiveTexture)GetAddress("glClientActiveTexture", typeof(Delegates.glClientActiveTexture));
        #endregion glClientActiveTexture

        #region glMultiTexCoord1d
        public static Delegates.glMultiTexCoord1d glMultiTexCoord1d = (Delegates.glMultiTexCoord1d)GetAddress("glMultiTexCoord1d", typeof(Delegates.glMultiTexCoord1d));
        #endregion glMultiTexCoord1d

        #region glMultiTexCoord1dv_
        public static Delegates.glMultiTexCoord1dv_ glMultiTexCoord1dv_ = (Delegates.glMultiTexCoord1dv_)GetAddress("glMultiTexCoord1dv", typeof(Delegates.glMultiTexCoord1dv_));
        #endregion glMultiTexCoord1dv_

        #region glMultiTexCoord1f
        public static Delegates.glMultiTexCoord1f glMultiTexCoord1f = (Delegates.glMultiTexCoord1f)GetAddress("glMultiTexCoord1f", typeof(Delegates.glMultiTexCoord1f));
        #endregion glMultiTexCoord1f

        #region glMultiTexCoord1fv_
        public static Delegates.glMultiTexCoord1fv_ glMultiTexCoord1fv_ = (Delegates.glMultiTexCoord1fv_)GetAddress("glMultiTexCoord1fv", typeof(Delegates.glMultiTexCoord1fv_));
        #endregion glMultiTexCoord1fv_

        #region glMultiTexCoord1i
        public static Delegates.glMultiTexCoord1i glMultiTexCoord1i = (Delegates.glMultiTexCoord1i)GetAddress("glMultiTexCoord1i", typeof(Delegates.glMultiTexCoord1i));
        #endregion glMultiTexCoord1i

        #region glMultiTexCoord1iv_
        public static Delegates.glMultiTexCoord1iv_ glMultiTexCoord1iv_ = (Delegates.glMultiTexCoord1iv_)GetAddress("glMultiTexCoord1iv", typeof(Delegates.glMultiTexCoord1iv_));
        #endregion glMultiTexCoord1iv_

        #region glMultiTexCoord1s
        public static Delegates.glMultiTexCoord1s glMultiTexCoord1s = (Delegates.glMultiTexCoord1s)GetAddress("glMultiTexCoord1s", typeof(Delegates.glMultiTexCoord1s));
        #endregion glMultiTexCoord1s

        #region glMultiTexCoord1sv_
        public static Delegates.glMultiTexCoord1sv_ glMultiTexCoord1sv_ = (Delegates.glMultiTexCoord1sv_)GetAddress("glMultiTexCoord1sv", typeof(Delegates.glMultiTexCoord1sv_));
        #endregion glMultiTexCoord1sv_

        #region glMultiTexCoord2d
        public static Delegates.glMultiTexCoord2d glMultiTexCoord2d = (Delegates.glMultiTexCoord2d)GetAddress("glMultiTexCoord2d", typeof(Delegates.glMultiTexCoord2d));
        #endregion glMultiTexCoord2d

        #region glMultiTexCoord2dv_
        public static Delegates.glMultiTexCoord2dv_ glMultiTexCoord2dv_ = (Delegates.glMultiTexCoord2dv_)GetAddress("glMultiTexCoord2dv", typeof(Delegates.glMultiTexCoord2dv_));
        #endregion glMultiTexCoord2dv_

        #region glMultiTexCoord2f
        public static Delegates.glMultiTexCoord2f glMultiTexCoord2f = (Delegates.glMultiTexCoord2f)GetAddress("glMultiTexCoord2f", typeof(Delegates.glMultiTexCoord2f));
        #endregion glMultiTexCoord2f

        #region glMultiTexCoord2fv_
        public static Delegates.glMultiTexCoord2fv_ glMultiTexCoord2fv_ = (Delegates.glMultiTexCoord2fv_)GetAddress("glMultiTexCoord2fv", typeof(Delegates.glMultiTexCoord2fv_));
        #endregion glMultiTexCoord2fv_

        #region glMultiTexCoord2i
        public static Delegates.glMultiTexCoord2i glMultiTexCoord2i = (Delegates.glMultiTexCoord2i)GetAddress("glMultiTexCoord2i", typeof(Delegates.glMultiTexCoord2i));
        #endregion glMultiTexCoord2i

        #region glMultiTexCoord2iv_
        public static Delegates.glMultiTexCoord2iv_ glMultiTexCoord2iv_ = (Delegates.glMultiTexCoord2iv_)GetAddress("glMultiTexCoord2iv", typeof(Delegates.glMultiTexCoord2iv_));
        #endregion glMultiTexCoord2iv_

        #region glMultiTexCoord2s
        public static Delegates.glMultiTexCoord2s glMultiTexCoord2s = (Delegates.glMultiTexCoord2s)GetAddress("glMultiTexCoord2s", typeof(Delegates.glMultiTexCoord2s));
        #endregion glMultiTexCoord2s

        #region glMultiTexCoord2sv_
        public static Delegates.glMultiTexCoord2sv_ glMultiTexCoord2sv_ = (Delegates.glMultiTexCoord2sv_)GetAddress("glMultiTexCoord2sv", typeof(Delegates.glMultiTexCoord2sv_));
        #endregion glMultiTexCoord2sv_

        #region glMultiTexCoord3d
        public static Delegates.glMultiTexCoord3d glMultiTexCoord3d = (Delegates.glMultiTexCoord3d)GetAddress("glMultiTexCoord3d", typeof(Delegates.glMultiTexCoord3d));
        #endregion glMultiTexCoord3d

        #region glMultiTexCoord3dv_
        public static Delegates.glMultiTexCoord3dv_ glMultiTexCoord3dv_ = (Delegates.glMultiTexCoord3dv_)GetAddress("glMultiTexCoord3dv", typeof(Delegates.glMultiTexCoord3dv_));
        #endregion glMultiTexCoord3dv_

        #region glMultiTexCoord3f
        public static Delegates.glMultiTexCoord3f glMultiTexCoord3f = (Delegates.glMultiTexCoord3f)GetAddress("glMultiTexCoord3f", typeof(Delegates.glMultiTexCoord3f));
        #endregion glMultiTexCoord3f

        #region glMultiTexCoord3fv_
        public static Delegates.glMultiTexCoord3fv_ glMultiTexCoord3fv_ = (Delegates.glMultiTexCoord3fv_)GetAddress("glMultiTexCoord3fv", typeof(Delegates.glMultiTexCoord3fv_));
        #endregion glMultiTexCoord3fv_

        #region glMultiTexCoord3i
        public static Delegates.glMultiTexCoord3i glMultiTexCoord3i = (Delegates.glMultiTexCoord3i)GetAddress("glMultiTexCoord3i", typeof(Delegates.glMultiTexCoord3i));
        #endregion glMultiTexCoord3i

        #region glMultiTexCoord3iv_
        public static Delegates.glMultiTexCoord3iv_ glMultiTexCoord3iv_ = (Delegates.glMultiTexCoord3iv_)GetAddress("glMultiTexCoord3iv", typeof(Delegates.glMultiTexCoord3iv_));
        #endregion glMultiTexCoord3iv_

        #region glMultiTexCoord3s
        public static Delegates.glMultiTexCoord3s glMultiTexCoord3s = (Delegates.glMultiTexCoord3s)GetAddress("glMultiTexCoord3s", typeof(Delegates.glMultiTexCoord3s));
        #endregion glMultiTexCoord3s

        #region glMultiTexCoord3sv_
        public static Delegates.glMultiTexCoord3sv_ glMultiTexCoord3sv_ = (Delegates.glMultiTexCoord3sv_)GetAddress("glMultiTexCoord3sv", typeof(Delegates.glMultiTexCoord3sv_));
        #endregion glMultiTexCoord3sv_

        #region glMultiTexCoord4d
        public static Delegates.glMultiTexCoord4d glMultiTexCoord4d = (Delegates.glMultiTexCoord4d)GetAddress("glMultiTexCoord4d", typeof(Delegates.glMultiTexCoord4d));
        #endregion glMultiTexCoord4d

        #region glMultiTexCoord4dv_
        public static Delegates.glMultiTexCoord4dv_ glMultiTexCoord4dv_ = (Delegates.glMultiTexCoord4dv_)GetAddress("glMultiTexCoord4dv", typeof(Delegates.glMultiTexCoord4dv_));
        #endregion glMultiTexCoord4dv_

        #region glMultiTexCoord4f
        public static Delegates.glMultiTexCoord4f glMultiTexCoord4f = (Delegates.glMultiTexCoord4f)GetAddress("glMultiTexCoord4f", typeof(Delegates.glMultiTexCoord4f));
        #endregion glMultiTexCoord4f

        #region glMultiTexCoord4fv_
        public static Delegates.glMultiTexCoord4fv_ glMultiTexCoord4fv_ = (Delegates.glMultiTexCoord4fv_)GetAddress("glMultiTexCoord4fv", typeof(Delegates.glMultiTexCoord4fv_));
        #endregion glMultiTexCoord4fv_

        #region glMultiTexCoord4i
        public static Delegates.glMultiTexCoord4i glMultiTexCoord4i = (Delegates.glMultiTexCoord4i)GetAddress("glMultiTexCoord4i", typeof(Delegates.glMultiTexCoord4i));
        #endregion glMultiTexCoord4i

        #region glMultiTexCoord4iv_
        public static Delegates.glMultiTexCoord4iv_ glMultiTexCoord4iv_ = (Delegates.glMultiTexCoord4iv_)GetAddress("glMultiTexCoord4iv", typeof(Delegates.glMultiTexCoord4iv_));
        #endregion glMultiTexCoord4iv_

        #region glMultiTexCoord4s
        public static Delegates.glMultiTexCoord4s glMultiTexCoord4s = (Delegates.glMultiTexCoord4s)GetAddress("glMultiTexCoord4s", typeof(Delegates.glMultiTexCoord4s));
        #endregion glMultiTexCoord4s

        #region glMultiTexCoord4sv_
        public static Delegates.glMultiTexCoord4sv_ glMultiTexCoord4sv_ = (Delegates.glMultiTexCoord4sv_)GetAddress("glMultiTexCoord4sv", typeof(Delegates.glMultiTexCoord4sv_));
        #endregion glMultiTexCoord4sv_

        #region glLoadTransposeMatrixf_
        public static Delegates.glLoadTransposeMatrixf_ glLoadTransposeMatrixf_ = (Delegates.glLoadTransposeMatrixf_)GetAddress("glLoadTransposeMatrixf", typeof(Delegates.glLoadTransposeMatrixf_));
        #endregion glLoadTransposeMatrixf_

        #region glLoadTransposeMatrixd_
        public static Delegates.glLoadTransposeMatrixd_ glLoadTransposeMatrixd_ = (Delegates.glLoadTransposeMatrixd_)GetAddress("glLoadTransposeMatrixd", typeof(Delegates.glLoadTransposeMatrixd_));
        #endregion glLoadTransposeMatrixd_

        #region glMultTransposeMatrixf_
        public static Delegates.glMultTransposeMatrixf_ glMultTransposeMatrixf_ = (Delegates.glMultTransposeMatrixf_)GetAddress("glMultTransposeMatrixf", typeof(Delegates.glMultTransposeMatrixf_));
        #endregion glMultTransposeMatrixf_

        #region glMultTransposeMatrixd_
        public static Delegates.glMultTransposeMatrixd_ glMultTransposeMatrixd_ = (Delegates.glMultTransposeMatrixd_)GetAddress("glMultTransposeMatrixd", typeof(Delegates.glMultTransposeMatrixd_));
        #endregion glMultTransposeMatrixd_

        #region glSampleCoverage
        public static Delegates.glSampleCoverage glSampleCoverage = (Delegates.glSampleCoverage)GetAddress("glSampleCoverage", typeof(Delegates.glSampleCoverage));
        #endregion glSampleCoverage

        #region glCompressedTexImage3D_
        public static Delegates.glCompressedTexImage3D_ glCompressedTexImage3D_ = (Delegates.glCompressedTexImage3D_)GetAddress("glCompressedTexImage3D", typeof(Delegates.glCompressedTexImage3D_));
        #endregion glCompressedTexImage3D_

        #region glCompressedTexImage2D_
        public static Delegates.glCompressedTexImage2D_ glCompressedTexImage2D_ = (Delegates.glCompressedTexImage2D_)GetAddress("glCompressedTexImage2D", typeof(Delegates.glCompressedTexImage2D_));
        #endregion glCompressedTexImage2D_

        #region glCompressedTexImage1D_
        public static Delegates.glCompressedTexImage1D_ glCompressedTexImage1D_ = (Delegates.glCompressedTexImage1D_)GetAddress("glCompressedTexImage1D", typeof(Delegates.glCompressedTexImage1D_));
        #endregion glCompressedTexImage1D_

        #region glCompressedTexSubImage3D_
        public static Delegates.glCompressedTexSubImage3D_ glCompressedTexSubImage3D_ = (Delegates.glCompressedTexSubImage3D_)GetAddress("glCompressedTexSubImage3D", typeof(Delegates.glCompressedTexSubImage3D_));
        #endregion glCompressedTexSubImage3D_

        #region glCompressedTexSubImage2D_
        public static Delegates.glCompressedTexSubImage2D_ glCompressedTexSubImage2D_ = (Delegates.glCompressedTexSubImage2D_)GetAddress("glCompressedTexSubImage2D", typeof(Delegates.glCompressedTexSubImage2D_));
        #endregion glCompressedTexSubImage2D_

        #region glCompressedTexSubImage1D_
        public static Delegates.glCompressedTexSubImage1D_ glCompressedTexSubImage1D_ = (Delegates.glCompressedTexSubImage1D_)GetAddress("glCompressedTexSubImage1D", typeof(Delegates.glCompressedTexSubImage1D_));
        #endregion glCompressedTexSubImage1D_

        #region glGetCompressedTexImage_
        public static Delegates.glGetCompressedTexImage_ glGetCompressedTexImage_ = (Delegates.glGetCompressedTexImage_)GetAddress("glGetCompressedTexImage", typeof(Delegates.glGetCompressedTexImage_));
        #endregion glGetCompressedTexImage_

        #region glBlendFuncSeparate
        public static Delegates.glBlendFuncSeparate glBlendFuncSeparate = (Delegates.glBlendFuncSeparate)GetAddress("glBlendFuncSeparate", typeof(Delegates.glBlendFuncSeparate));
        #endregion glBlendFuncSeparate

        #region glFogCoordf
        public static Delegates.glFogCoordf glFogCoordf = (Delegates.glFogCoordf)GetAddress("glFogCoordf", typeof(Delegates.glFogCoordf));
        #endregion glFogCoordf

        #region glFogCoordfv_
        public static Delegates.glFogCoordfv_ glFogCoordfv_ = (Delegates.glFogCoordfv_)GetAddress("glFogCoordfv", typeof(Delegates.glFogCoordfv_));
        #endregion glFogCoordfv_

        #region glFogCoordd
        public static Delegates.glFogCoordd glFogCoordd = (Delegates.glFogCoordd)GetAddress("glFogCoordd", typeof(Delegates.glFogCoordd));
        #endregion glFogCoordd

        #region glFogCoorddv_
        public static Delegates.glFogCoorddv_ glFogCoorddv_ = (Delegates.glFogCoorddv_)GetAddress("glFogCoorddv", typeof(Delegates.glFogCoorddv_));
        #endregion glFogCoorddv_

        #region glFogCoordPointer_
        public static Delegates.glFogCoordPointer_ glFogCoordPointer_ = (Delegates.glFogCoordPointer_)GetAddress("glFogCoordPointer", typeof(Delegates.glFogCoordPointer_));
        #endregion glFogCoordPointer_

        #region glMultiDrawArrays_
        public static Delegates.glMultiDrawArrays_ glMultiDrawArrays_ = (Delegates.glMultiDrawArrays_)GetAddress("glMultiDrawArrays", typeof(Delegates.glMultiDrawArrays_));
        #endregion glMultiDrawArrays_

        #region glMultiDrawElements_
        public static Delegates.glMultiDrawElements_ glMultiDrawElements_ = (Delegates.glMultiDrawElements_)GetAddress("glMultiDrawElements", typeof(Delegates.glMultiDrawElements_));
        #endregion glMultiDrawElements_

        #region glPointParameterf
        public static Delegates.glPointParameterf glPointParameterf = (Delegates.glPointParameterf)GetAddress("glPointParameterf", typeof(Delegates.glPointParameterf));
        #endregion glPointParameterf

        #region glPointParameterfv_
        public static Delegates.glPointParameterfv_ glPointParameterfv_ = (Delegates.glPointParameterfv_)GetAddress("glPointParameterfv", typeof(Delegates.glPointParameterfv_));
        #endregion glPointParameterfv_

        #region glPointParameteri
        public static Delegates.glPointParameteri glPointParameteri = (Delegates.glPointParameteri)GetAddress("glPointParameteri", typeof(Delegates.glPointParameteri));
        #endregion glPointParameteri

        #region glPointParameteriv_
        public static Delegates.glPointParameteriv_ glPointParameteriv_ = (Delegates.glPointParameteriv_)GetAddress("glPointParameteriv", typeof(Delegates.glPointParameteriv_));
        #endregion glPointParameteriv_

        #region glSecondaryColor3b
        public static Delegates.glSecondaryColor3b glSecondaryColor3b = (Delegates.glSecondaryColor3b)GetAddress("glSecondaryColor3b", typeof(Delegates.glSecondaryColor3b));
        #endregion glSecondaryColor3b

        #region glSecondaryColor3bv_
        public static Delegates.glSecondaryColor3bv_ glSecondaryColor3bv_ = (Delegates.glSecondaryColor3bv_)GetAddress("glSecondaryColor3bv", typeof(Delegates.glSecondaryColor3bv_));
        #endregion glSecondaryColor3bv_

        #region glSecondaryColor3d
        public static Delegates.glSecondaryColor3d glSecondaryColor3d = (Delegates.glSecondaryColor3d)GetAddress("glSecondaryColor3d", typeof(Delegates.glSecondaryColor3d));
        #endregion glSecondaryColor3d

        #region glSecondaryColor3dv_
        public static Delegates.glSecondaryColor3dv_ glSecondaryColor3dv_ = (Delegates.glSecondaryColor3dv_)GetAddress("glSecondaryColor3dv", typeof(Delegates.glSecondaryColor3dv_));
        #endregion glSecondaryColor3dv_

        #region glSecondaryColor3f
        public static Delegates.glSecondaryColor3f glSecondaryColor3f = (Delegates.glSecondaryColor3f)GetAddress("glSecondaryColor3f", typeof(Delegates.glSecondaryColor3f));
        #endregion glSecondaryColor3f

        #region glSecondaryColor3fv_
        public static Delegates.glSecondaryColor3fv_ glSecondaryColor3fv_ = (Delegates.glSecondaryColor3fv_)GetAddress("glSecondaryColor3fv", typeof(Delegates.glSecondaryColor3fv_));
        #endregion glSecondaryColor3fv_

        #region glSecondaryColor3i
        public static Delegates.glSecondaryColor3i glSecondaryColor3i = (Delegates.glSecondaryColor3i)GetAddress("glSecondaryColor3i", typeof(Delegates.glSecondaryColor3i));
        #endregion glSecondaryColor3i

        #region glSecondaryColor3iv_
        public static Delegates.glSecondaryColor3iv_ glSecondaryColor3iv_ = (Delegates.glSecondaryColor3iv_)GetAddress("glSecondaryColor3iv", typeof(Delegates.glSecondaryColor3iv_));
        #endregion glSecondaryColor3iv_

        #region glSecondaryColor3s
        public static Delegates.glSecondaryColor3s glSecondaryColor3s = (Delegates.glSecondaryColor3s)GetAddress("glSecondaryColor3s", typeof(Delegates.glSecondaryColor3s));
        #endregion glSecondaryColor3s

        #region glSecondaryColor3sv_
        public static Delegates.glSecondaryColor3sv_ glSecondaryColor3sv_ = (Delegates.glSecondaryColor3sv_)GetAddress("glSecondaryColor3sv", typeof(Delegates.glSecondaryColor3sv_));
        #endregion glSecondaryColor3sv_

        #region glSecondaryColor3ub
        public static Delegates.glSecondaryColor3ub glSecondaryColor3ub = (Delegates.glSecondaryColor3ub)GetAddress("glSecondaryColor3ub", typeof(Delegates.glSecondaryColor3ub));
        #endregion glSecondaryColor3ub

        #region glSecondaryColor3ubv_
        public static Delegates.glSecondaryColor3ubv_ glSecondaryColor3ubv_ = (Delegates.glSecondaryColor3ubv_)GetAddress("glSecondaryColor3ubv", typeof(Delegates.glSecondaryColor3ubv_));
        #endregion glSecondaryColor3ubv_

        #region glSecondaryColor3ui
        public static Delegates.glSecondaryColor3ui glSecondaryColor3ui = (Delegates.glSecondaryColor3ui)GetAddress("glSecondaryColor3ui", typeof(Delegates.glSecondaryColor3ui));
        #endregion glSecondaryColor3ui

        #region glSecondaryColor3uiv_
        public static Delegates.glSecondaryColor3uiv_ glSecondaryColor3uiv_ = (Delegates.glSecondaryColor3uiv_)GetAddress("glSecondaryColor3uiv", typeof(Delegates.glSecondaryColor3uiv_));
        #endregion glSecondaryColor3uiv_

        #region glSecondaryColor3us
        public static Delegates.glSecondaryColor3us glSecondaryColor3us = (Delegates.glSecondaryColor3us)GetAddress("glSecondaryColor3us", typeof(Delegates.glSecondaryColor3us));
        #endregion glSecondaryColor3us

        #region glSecondaryColor3usv_
        public static Delegates.glSecondaryColor3usv_ glSecondaryColor3usv_ = (Delegates.glSecondaryColor3usv_)GetAddress("glSecondaryColor3usv", typeof(Delegates.glSecondaryColor3usv_));
        #endregion glSecondaryColor3usv_

        #region glSecondaryColorPointer_
        public static Delegates.glSecondaryColorPointer_ glSecondaryColorPointer_ = (Delegates.glSecondaryColorPointer_)GetAddress("glSecondaryColorPointer", typeof(Delegates.glSecondaryColorPointer_));
        #endregion glSecondaryColorPointer_

        #region glWindowPos2d
        public static Delegates.glWindowPos2d glWindowPos2d = (Delegates.glWindowPos2d)GetAddress("glWindowPos2d", typeof(Delegates.glWindowPos2d));
        #endregion glWindowPos2d

        #region glWindowPos2dv_
        public static Delegates.glWindowPos2dv_ glWindowPos2dv_ = (Delegates.glWindowPos2dv_)GetAddress("glWindowPos2dv", typeof(Delegates.glWindowPos2dv_));
        #endregion glWindowPos2dv_

        #region glWindowPos2f
        public static Delegates.glWindowPos2f glWindowPos2f = (Delegates.glWindowPos2f)GetAddress("glWindowPos2f", typeof(Delegates.glWindowPos2f));
        #endregion glWindowPos2f

        #region glWindowPos2fv_
        public static Delegates.glWindowPos2fv_ glWindowPos2fv_ = (Delegates.glWindowPos2fv_)GetAddress("glWindowPos2fv", typeof(Delegates.glWindowPos2fv_));
        #endregion glWindowPos2fv_

        #region glWindowPos2i
        public static Delegates.glWindowPos2i glWindowPos2i = (Delegates.glWindowPos2i)GetAddress("glWindowPos2i", typeof(Delegates.glWindowPos2i));
        #endregion glWindowPos2i

        #region glWindowPos2iv_
        public static Delegates.glWindowPos2iv_ glWindowPos2iv_ = (Delegates.glWindowPos2iv_)GetAddress("glWindowPos2iv", typeof(Delegates.glWindowPos2iv_));
        #endregion glWindowPos2iv_

        #region glWindowPos2s
        public static Delegates.glWindowPos2s glWindowPos2s = (Delegates.glWindowPos2s)GetAddress("glWindowPos2s", typeof(Delegates.glWindowPos2s));
        #endregion glWindowPos2s

        #region glWindowPos2sv_
        public static Delegates.glWindowPos2sv_ glWindowPos2sv_ = (Delegates.glWindowPos2sv_)GetAddress("glWindowPos2sv", typeof(Delegates.glWindowPos2sv_));
        #endregion glWindowPos2sv_

        #region glWindowPos3d
        public static Delegates.glWindowPos3d glWindowPos3d = (Delegates.glWindowPos3d)GetAddress("glWindowPos3d", typeof(Delegates.glWindowPos3d));
        #endregion glWindowPos3d

        #region glWindowPos3dv_
        public static Delegates.glWindowPos3dv_ glWindowPos3dv_ = (Delegates.glWindowPos3dv_)GetAddress("glWindowPos3dv", typeof(Delegates.glWindowPos3dv_));
        #endregion glWindowPos3dv_

        #region glWindowPos3f
        public static Delegates.glWindowPos3f glWindowPos3f = (Delegates.glWindowPos3f)GetAddress("glWindowPos3f", typeof(Delegates.glWindowPos3f));
        #endregion glWindowPos3f

        #region glWindowPos3fv_
        public static Delegates.glWindowPos3fv_ glWindowPos3fv_ = (Delegates.glWindowPos3fv_)GetAddress("glWindowPos3fv", typeof(Delegates.glWindowPos3fv_));
        #endregion glWindowPos3fv_

        #region glWindowPos3i
        public static Delegates.glWindowPos3i glWindowPos3i = (Delegates.glWindowPos3i)GetAddress("glWindowPos3i", typeof(Delegates.glWindowPos3i));
        #endregion glWindowPos3i

        #region glWindowPos3iv_
        public static Delegates.glWindowPos3iv_ glWindowPos3iv_ = (Delegates.glWindowPos3iv_)GetAddress("glWindowPos3iv", typeof(Delegates.glWindowPos3iv_));
        #endregion glWindowPos3iv_

        #region glWindowPos3s
        public static Delegates.glWindowPos3s glWindowPos3s = (Delegates.glWindowPos3s)GetAddress("glWindowPos3s", typeof(Delegates.glWindowPos3s));
        #endregion glWindowPos3s

        #region glWindowPos3sv_
        public static Delegates.glWindowPos3sv_ glWindowPos3sv_ = (Delegates.glWindowPos3sv_)GetAddress("glWindowPos3sv", typeof(Delegates.glWindowPos3sv_));
        #endregion glWindowPos3sv_

        #region glGenQueries_
        public static Delegates.glGenQueries_ glGenQueries_ = (Delegates.glGenQueries_)GetAddress("glGenQueries", typeof(Delegates.glGenQueries_));
        #endregion glGenQueries_

        #region glDeleteQueries_
        public static Delegates.glDeleteQueries_ glDeleteQueries_ = (Delegates.glDeleteQueries_)GetAddress("glDeleteQueries", typeof(Delegates.glDeleteQueries_));
        #endregion glDeleteQueries_

        #region glIsQuery
        public static Delegates.glIsQuery glIsQuery = (Delegates.glIsQuery)GetAddress("glIsQuery", typeof(Delegates.glIsQuery));
        #endregion glIsQuery

        #region glBeginQuery
        public static Delegates.glBeginQuery glBeginQuery = (Delegates.glBeginQuery)GetAddress("glBeginQuery", typeof(Delegates.glBeginQuery));
        #endregion glBeginQuery

        #region glEndQuery
        public static Delegates.glEndQuery glEndQuery = (Delegates.glEndQuery)GetAddress("glEndQuery", typeof(Delegates.glEndQuery));
        #endregion glEndQuery

        #region glGetQueryiv_
        public static Delegates.glGetQueryiv_ glGetQueryiv_ = (Delegates.glGetQueryiv_)GetAddress("glGetQueryiv", typeof(Delegates.glGetQueryiv_));
        #endregion glGetQueryiv_

        #region glGetQueryObjectiv_
        public static Delegates.glGetQueryObjectiv_ glGetQueryObjectiv_ = (Delegates.glGetQueryObjectiv_)GetAddress("glGetQueryObjectiv", typeof(Delegates.glGetQueryObjectiv_));
        #endregion glGetQueryObjectiv_

        #region glGetQueryObjectuiv_
        public static Delegates.glGetQueryObjectuiv_ glGetQueryObjectuiv_ = (Delegates.glGetQueryObjectuiv_)GetAddress("glGetQueryObjectuiv", typeof(Delegates.glGetQueryObjectuiv_));
        #endregion glGetQueryObjectuiv_

        #region glBindBuffer
        public static Delegates.glBindBuffer glBindBuffer = (Delegates.glBindBuffer)GetAddress("glBindBuffer", typeof(Delegates.glBindBuffer));
        #endregion glBindBuffer

        #region glDeleteBuffers_
        public static Delegates.glDeleteBuffers_ glDeleteBuffers_ = (Delegates.glDeleteBuffers_)GetAddress("glDeleteBuffers", typeof(Delegates.glDeleteBuffers_));
        #endregion glDeleteBuffers_

        #region glGenBuffers_
        public static Delegates.glGenBuffers_ glGenBuffers_ = (Delegates.glGenBuffers_)GetAddress("glGenBuffers", typeof(Delegates.glGenBuffers_));
        #endregion glGenBuffers_

        #region glIsBuffer
        public static Delegates.glIsBuffer glIsBuffer = (Delegates.glIsBuffer)GetAddress("glIsBuffer", typeof(Delegates.glIsBuffer));
        #endregion glIsBuffer

        #region glBufferData_
        public static Delegates.glBufferData_ glBufferData_ = (Delegates.glBufferData_)GetAddress("glBufferData", typeof(Delegates.glBufferData_));
        #endregion glBufferData_

        #region glBufferSubData_
        public static Delegates.glBufferSubData_ glBufferSubData_ = (Delegates.glBufferSubData_)GetAddress("glBufferSubData", typeof(Delegates.glBufferSubData_));
        #endregion glBufferSubData_

        #region glGetBufferSubData_
        public static Delegates.glGetBufferSubData_ glGetBufferSubData_ = (Delegates.glGetBufferSubData_)GetAddress("glGetBufferSubData", typeof(Delegates.glGetBufferSubData_));
        #endregion glGetBufferSubData_

        #region glMapBuffer
        public static Delegates.glMapBuffer glMapBuffer = (Delegates.glMapBuffer)GetAddress("glMapBuffer", typeof(Delegates.glMapBuffer));
        #endregion glMapBuffer

        #region glUnmapBuffer
        public static Delegates.glUnmapBuffer glUnmapBuffer = (Delegates.glUnmapBuffer)GetAddress("glUnmapBuffer", typeof(Delegates.glUnmapBuffer));
        #endregion glUnmapBuffer

        #region glGetBufferParameteriv_
        public static Delegates.glGetBufferParameteriv_ glGetBufferParameteriv_ = (Delegates.glGetBufferParameteriv_)GetAddress("glGetBufferParameteriv", typeof(Delegates.glGetBufferParameteriv_));
        #endregion glGetBufferParameteriv_

        #region glGetBufferPointerv_
        public static Delegates.glGetBufferPointerv_ glGetBufferPointerv_ = (Delegates.glGetBufferPointerv_)GetAddress("glGetBufferPointerv", typeof(Delegates.glGetBufferPointerv_));
        #endregion glGetBufferPointerv_

        #region glBlendEquationSeparate
        public static Delegates.glBlendEquationSeparate glBlendEquationSeparate = (Delegates.glBlendEquationSeparate)GetAddress("glBlendEquationSeparate", typeof(Delegates.glBlendEquationSeparate));
        #endregion glBlendEquationSeparate

        #region glDrawBuffers_
        public static Delegates.glDrawBuffers_ glDrawBuffers_ = (Delegates.glDrawBuffers_)GetAddress("glDrawBuffers", typeof(Delegates.glDrawBuffers_));
        #endregion glDrawBuffers_

        #region glStencilOpSeparate
        public static Delegates.glStencilOpSeparate glStencilOpSeparate = (Delegates.glStencilOpSeparate)GetAddress("glStencilOpSeparate", typeof(Delegates.glStencilOpSeparate));
        #endregion glStencilOpSeparate

        #region glStencilFuncSeparate
        public static Delegates.glStencilFuncSeparate glStencilFuncSeparate = (Delegates.glStencilFuncSeparate)GetAddress("glStencilFuncSeparate", typeof(Delegates.glStencilFuncSeparate));
        #endregion glStencilFuncSeparate

        #region glStencilMaskSeparate
        public static Delegates.glStencilMaskSeparate glStencilMaskSeparate = (Delegates.glStencilMaskSeparate)GetAddress("glStencilMaskSeparate", typeof(Delegates.glStencilMaskSeparate));
        #endregion glStencilMaskSeparate

        #region glAttachShader
        public static Delegates.glAttachShader glAttachShader = (Delegates.glAttachShader)GetAddress("glAttachShader", typeof(Delegates.glAttachShader));
        #endregion glAttachShader

        #region glBindAttribLocation
        public static Delegates.glBindAttribLocation glBindAttribLocation = (Delegates.glBindAttribLocation)GetAddress("glBindAttribLocation", typeof(Delegates.glBindAttribLocation));
        #endregion glBindAttribLocation

        #region glCompileShader
        public static Delegates.glCompileShader glCompileShader = (Delegates.glCompileShader)GetAddress("glCompileShader", typeof(Delegates.glCompileShader));
        #endregion glCompileShader

        #region glCreateProgram
        public static Delegates.glCreateProgram glCreateProgram = (Delegates.glCreateProgram)GetAddress("glCreateProgram", typeof(Delegates.glCreateProgram));
        #endregion glCreateProgram

        #region glCreateShader
        public static Delegates.glCreateShader glCreateShader = (Delegates.glCreateShader)GetAddress("glCreateShader", typeof(Delegates.glCreateShader));
        #endregion glCreateShader

        #region glDeleteProgram
        public static Delegates.glDeleteProgram glDeleteProgram = (Delegates.glDeleteProgram)GetAddress("glDeleteProgram", typeof(Delegates.glDeleteProgram));
        #endregion glDeleteProgram

        #region glDeleteShader
        public static Delegates.glDeleteShader glDeleteShader = (Delegates.glDeleteShader)GetAddress("glDeleteShader", typeof(Delegates.glDeleteShader));
        #endregion glDeleteShader

        #region glDetachShader
        public static Delegates.glDetachShader glDetachShader = (Delegates.glDetachShader)GetAddress("glDetachShader", typeof(Delegates.glDetachShader));
        #endregion glDetachShader

        #region glDisableVertexAttribArray
        public static Delegates.glDisableVertexAttribArray glDisableVertexAttribArray = (Delegates.glDisableVertexAttribArray)GetAddress("glDisableVertexAttribArray", typeof(Delegates.glDisableVertexAttribArray));
        #endregion glDisableVertexAttribArray

        #region glEnableVertexAttribArray
        public static Delegates.glEnableVertexAttribArray glEnableVertexAttribArray = (Delegates.glEnableVertexAttribArray)GetAddress("glEnableVertexAttribArray", typeof(Delegates.glEnableVertexAttribArray));
        #endregion glEnableVertexAttribArray

        #region glGetActiveAttrib_
        public static Delegates.glGetActiveAttrib_ glGetActiveAttrib_ = (Delegates.glGetActiveAttrib_)GetAddress("glGetActiveAttrib", typeof(Delegates.glGetActiveAttrib_));
        #endregion glGetActiveAttrib_

        #region glGetActiveUniform_
        public static Delegates.glGetActiveUniform_ glGetActiveUniform_ = (Delegates.glGetActiveUniform_)GetAddress("glGetActiveUniform", typeof(Delegates.glGetActiveUniform_));
        #endregion glGetActiveUniform_

        #region glGetAttachedShaders_
        public static Delegates.glGetAttachedShaders_ glGetAttachedShaders_ = (Delegates.glGetAttachedShaders_)GetAddress("glGetAttachedShaders", typeof(Delegates.glGetAttachedShaders_));
        #endregion glGetAttachedShaders_

        #region glGetAttribLocation
        public static Delegates.glGetAttribLocation glGetAttribLocation = (Delegates.glGetAttribLocation)GetAddress("glGetAttribLocation", typeof(Delegates.glGetAttribLocation));
        #endregion glGetAttribLocation

        #region glGetProgramiv_
        public static Delegates.glGetProgramiv_ glGetProgramiv_ = (Delegates.glGetProgramiv_)GetAddress("glGetProgramiv", typeof(Delegates.glGetProgramiv_));
        #endregion glGetProgramiv_

        #region glGetProgramInfoLog_
        public static Delegates.glGetProgramInfoLog_ glGetProgramInfoLog_ = (Delegates.glGetProgramInfoLog_)GetAddress("glGetProgramInfoLog", typeof(Delegates.glGetProgramInfoLog_));
        #endregion glGetProgramInfoLog_

        #region glGetShaderiv_
        public static Delegates.glGetShaderiv_ glGetShaderiv_ = (Delegates.glGetShaderiv_)GetAddress("glGetShaderiv", typeof(Delegates.glGetShaderiv_));
        #endregion glGetShaderiv_

        #region glGetShaderInfoLog_
        public static Delegates.glGetShaderInfoLog_ glGetShaderInfoLog_ = (Delegates.glGetShaderInfoLog_)GetAddress("glGetShaderInfoLog", typeof(Delegates.glGetShaderInfoLog_));
        #endregion glGetShaderInfoLog_

        #region glGetShaderSource_
        public static Delegates.glGetShaderSource_ glGetShaderSource_ = (Delegates.glGetShaderSource_)GetAddress("glGetShaderSource", typeof(Delegates.glGetShaderSource_));
        #endregion glGetShaderSource_

        #region glGetUniformLocation
        public static Delegates.glGetUniformLocation glGetUniformLocation = (Delegates.glGetUniformLocation)GetAddress("glGetUniformLocation", typeof(Delegates.glGetUniformLocation));
        #endregion glGetUniformLocation

        #region glGetUniformfv_
        public static Delegates.glGetUniformfv_ glGetUniformfv_ = (Delegates.glGetUniformfv_)GetAddress("glGetUniformfv", typeof(Delegates.glGetUniformfv_));
        #endregion glGetUniformfv_

        #region glGetUniformiv_
        public static Delegates.glGetUniformiv_ glGetUniformiv_ = (Delegates.glGetUniformiv_)GetAddress("glGetUniformiv", typeof(Delegates.glGetUniformiv_));
        #endregion glGetUniformiv_

        #region glGetVertexAttribdv_
        public static Delegates.glGetVertexAttribdv_ glGetVertexAttribdv_ = (Delegates.glGetVertexAttribdv_)GetAddress("glGetVertexAttribdv", typeof(Delegates.glGetVertexAttribdv_));
        #endregion glGetVertexAttribdv_

        #region glGetVertexAttribfv_
        public static Delegates.glGetVertexAttribfv_ glGetVertexAttribfv_ = (Delegates.glGetVertexAttribfv_)GetAddress("glGetVertexAttribfv", typeof(Delegates.glGetVertexAttribfv_));
        #endregion glGetVertexAttribfv_

        #region glGetVertexAttribiv_
        public static Delegates.glGetVertexAttribiv_ glGetVertexAttribiv_ = (Delegates.glGetVertexAttribiv_)GetAddress("glGetVertexAttribiv", typeof(Delegates.glGetVertexAttribiv_));
        #endregion glGetVertexAttribiv_

        #region glGetVertexAttribPointerv_
        public static Delegates.glGetVertexAttribPointerv_ glGetVertexAttribPointerv_ = (Delegates.glGetVertexAttribPointerv_)GetAddress("glGetVertexAttribPointerv", typeof(Delegates.glGetVertexAttribPointerv_));
        #endregion glGetVertexAttribPointerv_

        #region glIsProgram
        public static Delegates.glIsProgram glIsProgram = (Delegates.glIsProgram)GetAddress("glIsProgram", typeof(Delegates.glIsProgram));
        #endregion glIsProgram

        #region glIsShader
        public static Delegates.glIsShader glIsShader = (Delegates.glIsShader)GetAddress("glIsShader", typeof(Delegates.glIsShader));
        #endregion glIsShader

        #region glLinkProgram
        public static Delegates.glLinkProgram glLinkProgram = (Delegates.glLinkProgram)GetAddress("glLinkProgram", typeof(Delegates.glLinkProgram));
        #endregion glLinkProgram

        #region glShaderSource_
        public static Delegates.glShaderSource_ glShaderSource_ = (Delegates.glShaderSource_)GetAddress("glShaderSource", typeof(Delegates.glShaderSource_));
        #endregion glShaderSource_

        #region glUseProgram
        public static Delegates.glUseProgram glUseProgram = (Delegates.glUseProgram)GetAddress("glUseProgram", typeof(Delegates.glUseProgram));
        #endregion glUseProgram

        #region glUniform1f
        public static Delegates.glUniform1f glUniform1f = (Delegates.glUniform1f)GetAddress("glUniform1f", typeof(Delegates.glUniform1f));
        #endregion glUniform1f

        #region glUniform2f
        public static Delegates.glUniform2f glUniform2f = (Delegates.glUniform2f)GetAddress("glUniform2f", typeof(Delegates.glUniform2f));
        #endregion glUniform2f

        #region glUniform3f
        public static Delegates.glUniform3f glUniform3f = (Delegates.glUniform3f)GetAddress("glUniform3f", typeof(Delegates.glUniform3f));
        #endregion glUniform3f

        #region glUniform4f
        public static Delegates.glUniform4f glUniform4f = (Delegates.glUniform4f)GetAddress("glUniform4f", typeof(Delegates.glUniform4f));
        #endregion glUniform4f

        #region glUniform1i
        public static Delegates.glUniform1i glUniform1i = (Delegates.glUniform1i)GetAddress("glUniform1i", typeof(Delegates.glUniform1i));
        #endregion glUniform1i

        #region glUniform2i
        public static Delegates.glUniform2i glUniform2i = (Delegates.glUniform2i)GetAddress("glUniform2i", typeof(Delegates.glUniform2i));
        #endregion glUniform2i

        #region glUniform3i
        public static Delegates.glUniform3i glUniform3i = (Delegates.glUniform3i)GetAddress("glUniform3i", typeof(Delegates.glUniform3i));
        #endregion glUniform3i

        #region glUniform4i
        public static Delegates.glUniform4i glUniform4i = (Delegates.glUniform4i)GetAddress("glUniform4i", typeof(Delegates.glUniform4i));
        #endregion glUniform4i

        #region glUniform1fv_
        public static Delegates.glUniform1fv_ glUniform1fv_ = (Delegates.glUniform1fv_)GetAddress("glUniform1fv", typeof(Delegates.glUniform1fv_));
        #endregion glUniform1fv_

        #region glUniform2fv_
        public static Delegates.glUniform2fv_ glUniform2fv_ = (Delegates.glUniform2fv_)GetAddress("glUniform2fv", typeof(Delegates.glUniform2fv_));
        #endregion glUniform2fv_

        #region glUniform3fv_
        public static Delegates.glUniform3fv_ glUniform3fv_ = (Delegates.glUniform3fv_)GetAddress("glUniform3fv", typeof(Delegates.glUniform3fv_));
        #endregion glUniform3fv_

        #region glUniform4fv_
        public static Delegates.glUniform4fv_ glUniform4fv_ = (Delegates.glUniform4fv_)GetAddress("glUniform4fv", typeof(Delegates.glUniform4fv_));
        #endregion glUniform4fv_

        #region glUniform1iv_
        public static Delegates.glUniform1iv_ glUniform1iv_ = (Delegates.glUniform1iv_)GetAddress("glUniform1iv", typeof(Delegates.glUniform1iv_));
        #endregion glUniform1iv_

        #region glUniform2iv_
        public static Delegates.glUniform2iv_ glUniform2iv_ = (Delegates.glUniform2iv_)GetAddress("glUniform2iv", typeof(Delegates.glUniform2iv_));
        #endregion glUniform2iv_

        #region glUniform3iv_
        public static Delegates.glUniform3iv_ glUniform3iv_ = (Delegates.glUniform3iv_)GetAddress("glUniform3iv", typeof(Delegates.glUniform3iv_));
        #endregion glUniform3iv_

        #region glUniform4iv_
        public static Delegates.glUniform4iv_ glUniform4iv_ = (Delegates.glUniform4iv_)GetAddress("glUniform4iv", typeof(Delegates.glUniform4iv_));
        #endregion glUniform4iv_

        #region glUniformMatrix2fv_
        public static Delegates.glUniformMatrix2fv_ glUniformMatrix2fv_ = (Delegates.glUniformMatrix2fv_)GetAddress("glUniformMatrix2fv", typeof(Delegates.glUniformMatrix2fv_));
        #endregion glUniformMatrix2fv_

        #region glUniformMatrix3fv_
        public static Delegates.glUniformMatrix3fv_ glUniformMatrix3fv_ = (Delegates.glUniformMatrix3fv_)GetAddress("glUniformMatrix3fv", typeof(Delegates.glUniformMatrix3fv_));
        #endregion glUniformMatrix3fv_

        #region glUniformMatrix4fv_
        public static Delegates.glUniformMatrix4fv_ glUniformMatrix4fv_ = (Delegates.glUniformMatrix4fv_)GetAddress("glUniformMatrix4fv", typeof(Delegates.glUniformMatrix4fv_));
        #endregion glUniformMatrix4fv_

        #region glValidateProgram
        public static Delegates.glValidateProgram glValidateProgram = (Delegates.glValidateProgram)GetAddress("glValidateProgram", typeof(Delegates.glValidateProgram));
        #endregion glValidateProgram

        #region glVertexAttrib1d
        public static Delegates.glVertexAttrib1d glVertexAttrib1d = (Delegates.glVertexAttrib1d)GetAddress("glVertexAttrib1d", typeof(Delegates.glVertexAttrib1d));
        #endregion glVertexAttrib1d

        #region glVertexAttrib1dv_
        public static Delegates.glVertexAttrib1dv_ glVertexAttrib1dv_ = (Delegates.glVertexAttrib1dv_)GetAddress("glVertexAttrib1dv", typeof(Delegates.glVertexAttrib1dv_));
        #endregion glVertexAttrib1dv_

        #region glVertexAttrib1f
        public static Delegates.glVertexAttrib1f glVertexAttrib1f = (Delegates.glVertexAttrib1f)GetAddress("glVertexAttrib1f", typeof(Delegates.glVertexAttrib1f));
        #endregion glVertexAttrib1f

        #region glVertexAttrib1fv_
        public static Delegates.glVertexAttrib1fv_ glVertexAttrib1fv_ = (Delegates.glVertexAttrib1fv_)GetAddress("glVertexAttrib1fv", typeof(Delegates.glVertexAttrib1fv_));
        #endregion glVertexAttrib1fv_

        #region glVertexAttrib1s
        public static Delegates.glVertexAttrib1s glVertexAttrib1s = (Delegates.glVertexAttrib1s)GetAddress("glVertexAttrib1s", typeof(Delegates.glVertexAttrib1s));
        #endregion glVertexAttrib1s

        #region glVertexAttrib1sv_
        public static Delegates.glVertexAttrib1sv_ glVertexAttrib1sv_ = (Delegates.glVertexAttrib1sv_)GetAddress("glVertexAttrib1sv", typeof(Delegates.glVertexAttrib1sv_));
        #endregion glVertexAttrib1sv_

        #region glVertexAttrib2d
        public static Delegates.glVertexAttrib2d glVertexAttrib2d = (Delegates.glVertexAttrib2d)GetAddress("glVertexAttrib2d", typeof(Delegates.glVertexAttrib2d));
        #endregion glVertexAttrib2d

        #region glVertexAttrib2dv_
        public static Delegates.glVertexAttrib2dv_ glVertexAttrib2dv_ = (Delegates.glVertexAttrib2dv_)GetAddress("glVertexAttrib2dv", typeof(Delegates.glVertexAttrib2dv_));
        #endregion glVertexAttrib2dv_

        #region glVertexAttrib2f
        public static Delegates.glVertexAttrib2f glVertexAttrib2f = (Delegates.glVertexAttrib2f)GetAddress("glVertexAttrib2f", typeof(Delegates.glVertexAttrib2f));
        #endregion glVertexAttrib2f

        #region glVertexAttrib2fv_
        public static Delegates.glVertexAttrib2fv_ glVertexAttrib2fv_ = (Delegates.glVertexAttrib2fv_)GetAddress("glVertexAttrib2fv", typeof(Delegates.glVertexAttrib2fv_));
        #endregion glVertexAttrib2fv_

        #region glVertexAttrib2s
        public static Delegates.glVertexAttrib2s glVertexAttrib2s = (Delegates.glVertexAttrib2s)GetAddress("glVertexAttrib2s", typeof(Delegates.glVertexAttrib2s));
        #endregion glVertexAttrib2s

        #region glVertexAttrib2sv_
        public static Delegates.glVertexAttrib2sv_ glVertexAttrib2sv_ = (Delegates.glVertexAttrib2sv_)GetAddress("glVertexAttrib2sv", typeof(Delegates.glVertexAttrib2sv_));
        #endregion glVertexAttrib2sv_

        #region glVertexAttrib3d
        public static Delegates.glVertexAttrib3d glVertexAttrib3d = (Delegates.glVertexAttrib3d)GetAddress("glVertexAttrib3d", typeof(Delegates.glVertexAttrib3d));
        #endregion glVertexAttrib3d

        #region glVertexAttrib3dv_
        public static Delegates.glVertexAttrib3dv_ glVertexAttrib3dv_ = (Delegates.glVertexAttrib3dv_)GetAddress("glVertexAttrib3dv", typeof(Delegates.glVertexAttrib3dv_));
        #endregion glVertexAttrib3dv_

        #region glVertexAttrib3f
        public static Delegates.glVertexAttrib3f glVertexAttrib3f = (Delegates.glVertexAttrib3f)GetAddress("glVertexAttrib3f", typeof(Delegates.glVertexAttrib3f));
        #endregion glVertexAttrib3f

        #region glVertexAttrib3fv_
        public static Delegates.glVertexAttrib3fv_ glVertexAttrib3fv_ = (Delegates.glVertexAttrib3fv_)GetAddress("glVertexAttrib3fv", typeof(Delegates.glVertexAttrib3fv_));
        #endregion glVertexAttrib3fv_

        #region glVertexAttrib3s
        public static Delegates.glVertexAttrib3s glVertexAttrib3s = (Delegates.glVertexAttrib3s)GetAddress("glVertexAttrib3s", typeof(Delegates.glVertexAttrib3s));
        #endregion glVertexAttrib3s

        #region glVertexAttrib3sv_
        public static Delegates.glVertexAttrib3sv_ glVertexAttrib3sv_ = (Delegates.glVertexAttrib3sv_)GetAddress("glVertexAttrib3sv", typeof(Delegates.glVertexAttrib3sv_));
        #endregion glVertexAttrib3sv_

        #region glVertexAttrib4Nbv_
        public static Delegates.glVertexAttrib4Nbv_ glVertexAttrib4Nbv_ = (Delegates.glVertexAttrib4Nbv_)GetAddress("glVertexAttrib4Nbv", typeof(Delegates.glVertexAttrib4Nbv_));
        #endregion glVertexAttrib4Nbv_

        #region glVertexAttrib4Niv_
        public static Delegates.glVertexAttrib4Niv_ glVertexAttrib4Niv_ = (Delegates.glVertexAttrib4Niv_)GetAddress("glVertexAttrib4Niv", typeof(Delegates.glVertexAttrib4Niv_));
        #endregion glVertexAttrib4Niv_

        #region glVertexAttrib4Nsv_
        public static Delegates.glVertexAttrib4Nsv_ glVertexAttrib4Nsv_ = (Delegates.glVertexAttrib4Nsv_)GetAddress("glVertexAttrib4Nsv", typeof(Delegates.glVertexAttrib4Nsv_));
        #endregion glVertexAttrib4Nsv_

        #region glVertexAttrib4Nub
        public static Delegates.glVertexAttrib4Nub glVertexAttrib4Nub = (Delegates.glVertexAttrib4Nub)GetAddress("glVertexAttrib4Nub", typeof(Delegates.glVertexAttrib4Nub));
        #endregion glVertexAttrib4Nub

        #region glVertexAttrib4Nubv_
        public static Delegates.glVertexAttrib4Nubv_ glVertexAttrib4Nubv_ = (Delegates.glVertexAttrib4Nubv_)GetAddress("glVertexAttrib4Nubv", typeof(Delegates.glVertexAttrib4Nubv_));
        #endregion glVertexAttrib4Nubv_

        #region glVertexAttrib4Nuiv_
        public static Delegates.glVertexAttrib4Nuiv_ glVertexAttrib4Nuiv_ = (Delegates.glVertexAttrib4Nuiv_)GetAddress("glVertexAttrib4Nuiv", typeof(Delegates.glVertexAttrib4Nuiv_));
        #endregion glVertexAttrib4Nuiv_

        #region glVertexAttrib4Nusv_
        public static Delegates.glVertexAttrib4Nusv_ glVertexAttrib4Nusv_ = (Delegates.glVertexAttrib4Nusv_)GetAddress("glVertexAttrib4Nusv", typeof(Delegates.glVertexAttrib4Nusv_));
        #endregion glVertexAttrib4Nusv_

        #region glVertexAttrib4bv_
        public static Delegates.glVertexAttrib4bv_ glVertexAttrib4bv_ = (Delegates.glVertexAttrib4bv_)GetAddress("glVertexAttrib4bv", typeof(Delegates.glVertexAttrib4bv_));
        #endregion glVertexAttrib4bv_

        #region glVertexAttrib4d
        public static Delegates.glVertexAttrib4d glVertexAttrib4d = (Delegates.glVertexAttrib4d)GetAddress("glVertexAttrib4d", typeof(Delegates.glVertexAttrib4d));
        #endregion glVertexAttrib4d

        #region glVertexAttrib4dv_
        public static Delegates.glVertexAttrib4dv_ glVertexAttrib4dv_ = (Delegates.glVertexAttrib4dv_)GetAddress("glVertexAttrib4dv", typeof(Delegates.glVertexAttrib4dv_));
        #endregion glVertexAttrib4dv_

        #region glVertexAttrib4f
        public static Delegates.glVertexAttrib4f glVertexAttrib4f = (Delegates.glVertexAttrib4f)GetAddress("glVertexAttrib4f", typeof(Delegates.glVertexAttrib4f));
        #endregion glVertexAttrib4f

        #region glVertexAttrib4fv_
        public static Delegates.glVertexAttrib4fv_ glVertexAttrib4fv_ = (Delegates.glVertexAttrib4fv_)GetAddress("glVertexAttrib4fv", typeof(Delegates.glVertexAttrib4fv_));
        #endregion glVertexAttrib4fv_

        #region glVertexAttrib4iv_
        public static Delegates.glVertexAttrib4iv_ glVertexAttrib4iv_ = (Delegates.glVertexAttrib4iv_)GetAddress("glVertexAttrib4iv", typeof(Delegates.glVertexAttrib4iv_));
        #endregion glVertexAttrib4iv_

        #region glVertexAttrib4s
        public static Delegates.glVertexAttrib4s glVertexAttrib4s = (Delegates.glVertexAttrib4s)GetAddress("glVertexAttrib4s", typeof(Delegates.glVertexAttrib4s));
        #endregion glVertexAttrib4s

        #region glVertexAttrib4sv_
        public static Delegates.glVertexAttrib4sv_ glVertexAttrib4sv_ = (Delegates.glVertexAttrib4sv_)GetAddress("glVertexAttrib4sv", typeof(Delegates.glVertexAttrib4sv_));
        #endregion glVertexAttrib4sv_

        #region glVertexAttrib4ubv_
        public static Delegates.glVertexAttrib4ubv_ glVertexAttrib4ubv_ = (Delegates.glVertexAttrib4ubv_)GetAddress("glVertexAttrib4ubv", typeof(Delegates.glVertexAttrib4ubv_));
        #endregion glVertexAttrib4ubv_

        #region glVertexAttrib4uiv_
        public static Delegates.glVertexAttrib4uiv_ glVertexAttrib4uiv_ = (Delegates.glVertexAttrib4uiv_)GetAddress("glVertexAttrib4uiv", typeof(Delegates.glVertexAttrib4uiv_));
        #endregion glVertexAttrib4uiv_

        #region glVertexAttrib4usv_
        public static Delegates.glVertexAttrib4usv_ glVertexAttrib4usv_ = (Delegates.glVertexAttrib4usv_)GetAddress("glVertexAttrib4usv", typeof(Delegates.glVertexAttrib4usv_));
        #endregion glVertexAttrib4usv_

        #region glVertexAttribPointer_
        public static Delegates.glVertexAttribPointer_ glVertexAttribPointer_ = (Delegates.glVertexAttribPointer_)GetAddress("glVertexAttribPointer", typeof(Delegates.glVertexAttribPointer_));
        #endregion glVertexAttribPointer_

        #region glUniformMatrix2x3fv_
        public static Delegates.glUniformMatrix2x3fv_ glUniformMatrix2x3fv_ = (Delegates.glUniformMatrix2x3fv_)GetAddress("glUniformMatrix2x3fv", typeof(Delegates.glUniformMatrix2x3fv_));
        #endregion glUniformMatrix2x3fv_

        #region glUniformMatrix3x2fv_
        public static Delegates.glUniformMatrix3x2fv_ glUniformMatrix3x2fv_ = (Delegates.glUniformMatrix3x2fv_)GetAddress("glUniformMatrix3x2fv", typeof(Delegates.glUniformMatrix3x2fv_));
        #endregion glUniformMatrix3x2fv_

        #region glUniformMatrix2x4fv_
        public static Delegates.glUniformMatrix2x4fv_ glUniformMatrix2x4fv_ = (Delegates.glUniformMatrix2x4fv_)GetAddress("glUniformMatrix2x4fv", typeof(Delegates.glUniformMatrix2x4fv_));
        #endregion glUniformMatrix2x4fv_

        #region glUniformMatrix4x2fv_
        public static Delegates.glUniformMatrix4x2fv_ glUniformMatrix4x2fv_ = (Delegates.glUniformMatrix4x2fv_)GetAddress("glUniformMatrix4x2fv", typeof(Delegates.glUniformMatrix4x2fv_));
        #endregion glUniformMatrix4x2fv_

        #region glUniformMatrix3x4fv_
        public static Delegates.glUniformMatrix3x4fv_ glUniformMatrix3x4fv_ = (Delegates.glUniformMatrix3x4fv_)GetAddress("glUniformMatrix3x4fv", typeof(Delegates.glUniformMatrix3x4fv_));
        #endregion glUniformMatrix3x4fv_

        #region glUniformMatrix4x3fv_
        public static Delegates.glUniformMatrix4x3fv_ glUniformMatrix4x3fv_ = (Delegates.glUniformMatrix4x3fv_)GetAddress("glUniformMatrix4x3fv", typeof(Delegates.glUniformMatrix4x3fv_));
        #endregion glUniformMatrix4x3fv_

        #region glActiveTextureARB
        public static Delegates.glActiveTextureARB glActiveTextureARB = (Delegates.glActiveTextureARB)GetAddress("glActiveTextureARB", typeof(Delegates.glActiveTextureARB));
        #endregion glActiveTextureARB

        #region glClientActiveTextureARB
        public static Delegates.glClientActiveTextureARB glClientActiveTextureARB = (Delegates.glClientActiveTextureARB)GetAddress("glClientActiveTextureARB", typeof(Delegates.glClientActiveTextureARB));
        #endregion glClientActiveTextureARB

        #region glMultiTexCoord1dARB
        public static Delegates.glMultiTexCoord1dARB glMultiTexCoord1dARB = (Delegates.glMultiTexCoord1dARB)GetAddress("glMultiTexCoord1dARB", typeof(Delegates.glMultiTexCoord1dARB));
        #endregion glMultiTexCoord1dARB

        #region glMultiTexCoord1dvARB_
        public static Delegates.glMultiTexCoord1dvARB_ glMultiTexCoord1dvARB_ = (Delegates.glMultiTexCoord1dvARB_)GetAddress("glMultiTexCoord1dvARB", typeof(Delegates.glMultiTexCoord1dvARB_));
        #endregion glMultiTexCoord1dvARB_

        #region glMultiTexCoord1fARB
        public static Delegates.glMultiTexCoord1fARB glMultiTexCoord1fARB = (Delegates.glMultiTexCoord1fARB)GetAddress("glMultiTexCoord1fARB", typeof(Delegates.glMultiTexCoord1fARB));
        #endregion glMultiTexCoord1fARB

        #region glMultiTexCoord1fvARB_
        public static Delegates.glMultiTexCoord1fvARB_ glMultiTexCoord1fvARB_ = (Delegates.glMultiTexCoord1fvARB_)GetAddress("glMultiTexCoord1fvARB", typeof(Delegates.glMultiTexCoord1fvARB_));
        #endregion glMultiTexCoord1fvARB_

        #region glMultiTexCoord1iARB
        public static Delegates.glMultiTexCoord1iARB glMultiTexCoord1iARB = (Delegates.glMultiTexCoord1iARB)GetAddress("glMultiTexCoord1iARB", typeof(Delegates.glMultiTexCoord1iARB));
        #endregion glMultiTexCoord1iARB

        #region glMultiTexCoord1ivARB_
        public static Delegates.glMultiTexCoord1ivARB_ glMultiTexCoord1ivARB_ = (Delegates.glMultiTexCoord1ivARB_)GetAddress("glMultiTexCoord1ivARB", typeof(Delegates.glMultiTexCoord1ivARB_));
        #endregion glMultiTexCoord1ivARB_

        #region glMultiTexCoord1sARB
        public static Delegates.glMultiTexCoord1sARB glMultiTexCoord1sARB = (Delegates.glMultiTexCoord1sARB)GetAddress("glMultiTexCoord1sARB", typeof(Delegates.glMultiTexCoord1sARB));
        #endregion glMultiTexCoord1sARB

        #region glMultiTexCoord1svARB_
        public static Delegates.glMultiTexCoord1svARB_ glMultiTexCoord1svARB_ = (Delegates.glMultiTexCoord1svARB_)GetAddress("glMultiTexCoord1svARB", typeof(Delegates.glMultiTexCoord1svARB_));
        #endregion glMultiTexCoord1svARB_

        #region glMultiTexCoord2dARB
        public static Delegates.glMultiTexCoord2dARB glMultiTexCoord2dARB = (Delegates.glMultiTexCoord2dARB)GetAddress("glMultiTexCoord2dARB", typeof(Delegates.glMultiTexCoord2dARB));
        #endregion glMultiTexCoord2dARB

        #region glMultiTexCoord2dvARB_
        public static Delegates.glMultiTexCoord2dvARB_ glMultiTexCoord2dvARB_ = (Delegates.glMultiTexCoord2dvARB_)GetAddress("glMultiTexCoord2dvARB", typeof(Delegates.glMultiTexCoord2dvARB_));
        #endregion glMultiTexCoord2dvARB_

        #region glMultiTexCoord2fARB
        public static Delegates.glMultiTexCoord2fARB glMultiTexCoord2fARB = (Delegates.glMultiTexCoord2fARB)GetAddress("glMultiTexCoord2fARB", typeof(Delegates.glMultiTexCoord2fARB));
        #endregion glMultiTexCoord2fARB

        #region glMultiTexCoord2fvARB_
        public static Delegates.glMultiTexCoord2fvARB_ glMultiTexCoord2fvARB_ = (Delegates.glMultiTexCoord2fvARB_)GetAddress("glMultiTexCoord2fvARB", typeof(Delegates.glMultiTexCoord2fvARB_));
        #endregion glMultiTexCoord2fvARB_

        #region glMultiTexCoord2iARB
        public static Delegates.glMultiTexCoord2iARB glMultiTexCoord2iARB = (Delegates.glMultiTexCoord2iARB)GetAddress("glMultiTexCoord2iARB", typeof(Delegates.glMultiTexCoord2iARB));
        #endregion glMultiTexCoord2iARB

        #region glMultiTexCoord2ivARB_
        public static Delegates.glMultiTexCoord2ivARB_ glMultiTexCoord2ivARB_ = (Delegates.glMultiTexCoord2ivARB_)GetAddress("glMultiTexCoord2ivARB", typeof(Delegates.glMultiTexCoord2ivARB_));
        #endregion glMultiTexCoord2ivARB_

        #region glMultiTexCoord2sARB
        public static Delegates.glMultiTexCoord2sARB glMultiTexCoord2sARB = (Delegates.glMultiTexCoord2sARB)GetAddress("glMultiTexCoord2sARB", typeof(Delegates.glMultiTexCoord2sARB));
        #endregion glMultiTexCoord2sARB

        #region glMultiTexCoord2svARB_
        public static Delegates.glMultiTexCoord2svARB_ glMultiTexCoord2svARB_ = (Delegates.glMultiTexCoord2svARB_)GetAddress("glMultiTexCoord2svARB", typeof(Delegates.glMultiTexCoord2svARB_));
        #endregion glMultiTexCoord2svARB_

        #region glMultiTexCoord3dARB
        public static Delegates.glMultiTexCoord3dARB glMultiTexCoord3dARB = (Delegates.glMultiTexCoord3dARB)GetAddress("glMultiTexCoord3dARB", typeof(Delegates.glMultiTexCoord3dARB));
        #endregion glMultiTexCoord3dARB

        #region glMultiTexCoord3dvARB_
        public static Delegates.glMultiTexCoord3dvARB_ glMultiTexCoord3dvARB_ = (Delegates.glMultiTexCoord3dvARB_)GetAddress("glMultiTexCoord3dvARB", typeof(Delegates.glMultiTexCoord3dvARB_));
        #endregion glMultiTexCoord3dvARB_

        #region glMultiTexCoord3fARB
        public static Delegates.glMultiTexCoord3fARB glMultiTexCoord3fARB = (Delegates.glMultiTexCoord3fARB)GetAddress("glMultiTexCoord3fARB", typeof(Delegates.glMultiTexCoord3fARB));
        #endregion glMultiTexCoord3fARB

        #region glMultiTexCoord3fvARB_
        public static Delegates.glMultiTexCoord3fvARB_ glMultiTexCoord3fvARB_ = (Delegates.glMultiTexCoord3fvARB_)GetAddress("glMultiTexCoord3fvARB", typeof(Delegates.glMultiTexCoord3fvARB_));
        #endregion glMultiTexCoord3fvARB_

        #region glMultiTexCoord3iARB
        public static Delegates.glMultiTexCoord3iARB glMultiTexCoord3iARB = (Delegates.glMultiTexCoord3iARB)GetAddress("glMultiTexCoord3iARB", typeof(Delegates.glMultiTexCoord3iARB));
        #endregion glMultiTexCoord3iARB

        #region glMultiTexCoord3ivARB_
        public static Delegates.glMultiTexCoord3ivARB_ glMultiTexCoord3ivARB_ = (Delegates.glMultiTexCoord3ivARB_)GetAddress("glMultiTexCoord3ivARB", typeof(Delegates.glMultiTexCoord3ivARB_));
        #endregion glMultiTexCoord3ivARB_

        #region glMultiTexCoord3sARB
        public static Delegates.glMultiTexCoord3sARB glMultiTexCoord3sARB = (Delegates.glMultiTexCoord3sARB)GetAddress("glMultiTexCoord3sARB", typeof(Delegates.glMultiTexCoord3sARB));
        #endregion glMultiTexCoord3sARB

        #region glMultiTexCoord3svARB_
        public static Delegates.glMultiTexCoord3svARB_ glMultiTexCoord3svARB_ = (Delegates.glMultiTexCoord3svARB_)GetAddress("glMultiTexCoord3svARB", typeof(Delegates.glMultiTexCoord3svARB_));
        #endregion glMultiTexCoord3svARB_

        #region glMultiTexCoord4dARB
        public static Delegates.glMultiTexCoord4dARB glMultiTexCoord4dARB = (Delegates.glMultiTexCoord4dARB)GetAddress("glMultiTexCoord4dARB", typeof(Delegates.glMultiTexCoord4dARB));
        #endregion glMultiTexCoord4dARB

        #region glMultiTexCoord4dvARB_
        public static Delegates.glMultiTexCoord4dvARB_ glMultiTexCoord4dvARB_ = (Delegates.glMultiTexCoord4dvARB_)GetAddress("glMultiTexCoord4dvARB", typeof(Delegates.glMultiTexCoord4dvARB_));
        #endregion glMultiTexCoord4dvARB_

        #region glMultiTexCoord4fARB
        public static Delegates.glMultiTexCoord4fARB glMultiTexCoord4fARB = (Delegates.glMultiTexCoord4fARB)GetAddress("glMultiTexCoord4fARB", typeof(Delegates.glMultiTexCoord4fARB));
        #endregion glMultiTexCoord4fARB

        #region glMultiTexCoord4fvARB_
        public static Delegates.glMultiTexCoord4fvARB_ glMultiTexCoord4fvARB_ = (Delegates.glMultiTexCoord4fvARB_)GetAddress("glMultiTexCoord4fvARB", typeof(Delegates.glMultiTexCoord4fvARB_));
        #endregion glMultiTexCoord4fvARB_

        #region glMultiTexCoord4iARB
        public static Delegates.glMultiTexCoord4iARB glMultiTexCoord4iARB = (Delegates.glMultiTexCoord4iARB)GetAddress("glMultiTexCoord4iARB", typeof(Delegates.glMultiTexCoord4iARB));
        #endregion glMultiTexCoord4iARB

        #region glMultiTexCoord4ivARB_
        public static Delegates.glMultiTexCoord4ivARB_ glMultiTexCoord4ivARB_ = (Delegates.glMultiTexCoord4ivARB_)GetAddress("glMultiTexCoord4ivARB", typeof(Delegates.glMultiTexCoord4ivARB_));
        #endregion glMultiTexCoord4ivARB_

        #region glMultiTexCoord4sARB
        public static Delegates.glMultiTexCoord4sARB glMultiTexCoord4sARB = (Delegates.glMultiTexCoord4sARB)GetAddress("glMultiTexCoord4sARB", typeof(Delegates.glMultiTexCoord4sARB));
        #endregion glMultiTexCoord4sARB

        #region glMultiTexCoord4svARB_
        public static Delegates.glMultiTexCoord4svARB_ glMultiTexCoord4svARB_ = (Delegates.glMultiTexCoord4svARB_)GetAddress("glMultiTexCoord4svARB", typeof(Delegates.glMultiTexCoord4svARB_));
        #endregion glMultiTexCoord4svARB_

        #region glLoadTransposeMatrixfARB_
        public static Delegates.glLoadTransposeMatrixfARB_ glLoadTransposeMatrixfARB_ = (Delegates.glLoadTransposeMatrixfARB_)GetAddress("glLoadTransposeMatrixfARB", typeof(Delegates.glLoadTransposeMatrixfARB_));
        #endregion glLoadTransposeMatrixfARB_

        #region glLoadTransposeMatrixdARB_
        public static Delegates.glLoadTransposeMatrixdARB_ glLoadTransposeMatrixdARB_ = (Delegates.glLoadTransposeMatrixdARB_)GetAddress("glLoadTransposeMatrixdARB", typeof(Delegates.glLoadTransposeMatrixdARB_));
        #endregion glLoadTransposeMatrixdARB_

        #region glMultTransposeMatrixfARB_
        public static Delegates.glMultTransposeMatrixfARB_ glMultTransposeMatrixfARB_ = (Delegates.glMultTransposeMatrixfARB_)GetAddress("glMultTransposeMatrixfARB", typeof(Delegates.glMultTransposeMatrixfARB_));
        #endregion glMultTransposeMatrixfARB_

        #region glMultTransposeMatrixdARB_
        public static Delegates.glMultTransposeMatrixdARB_ glMultTransposeMatrixdARB_ = (Delegates.glMultTransposeMatrixdARB_)GetAddress("glMultTransposeMatrixdARB", typeof(Delegates.glMultTransposeMatrixdARB_));
        #endregion glMultTransposeMatrixdARB_

        #region glSampleCoverageARB
        public static Delegates.glSampleCoverageARB glSampleCoverageARB = (Delegates.glSampleCoverageARB)GetAddress("glSampleCoverageARB", typeof(Delegates.glSampleCoverageARB));
        #endregion glSampleCoverageARB

        #region glCompressedTexImage3DARB_
        public static Delegates.glCompressedTexImage3DARB_ glCompressedTexImage3DARB_ = (Delegates.glCompressedTexImage3DARB_)GetAddress("glCompressedTexImage3DARB", typeof(Delegates.glCompressedTexImage3DARB_));
        #endregion glCompressedTexImage3DARB_

        #region glCompressedTexImage2DARB_
        public static Delegates.glCompressedTexImage2DARB_ glCompressedTexImage2DARB_ = (Delegates.glCompressedTexImage2DARB_)GetAddress("glCompressedTexImage2DARB", typeof(Delegates.glCompressedTexImage2DARB_));
        #endregion glCompressedTexImage2DARB_

        #region glCompressedTexImage1DARB_
        public static Delegates.glCompressedTexImage1DARB_ glCompressedTexImage1DARB_ = (Delegates.glCompressedTexImage1DARB_)GetAddress("glCompressedTexImage1DARB", typeof(Delegates.glCompressedTexImage1DARB_));
        #endregion glCompressedTexImage1DARB_

        #region glCompressedTexSubImage3DARB_
        public static Delegates.glCompressedTexSubImage3DARB_ glCompressedTexSubImage3DARB_ = (Delegates.glCompressedTexSubImage3DARB_)GetAddress("glCompressedTexSubImage3DARB", typeof(Delegates.glCompressedTexSubImage3DARB_));
        #endregion glCompressedTexSubImage3DARB_

        #region glCompressedTexSubImage2DARB_
        public static Delegates.glCompressedTexSubImage2DARB_ glCompressedTexSubImage2DARB_ = (Delegates.glCompressedTexSubImage2DARB_)GetAddress("glCompressedTexSubImage2DARB", typeof(Delegates.glCompressedTexSubImage2DARB_));
        #endregion glCompressedTexSubImage2DARB_

        #region glCompressedTexSubImage1DARB_
        public static Delegates.glCompressedTexSubImage1DARB_ glCompressedTexSubImage1DARB_ = (Delegates.glCompressedTexSubImage1DARB_)GetAddress("glCompressedTexSubImage1DARB", typeof(Delegates.glCompressedTexSubImage1DARB_));
        #endregion glCompressedTexSubImage1DARB_

        #region glGetCompressedTexImageARB_
        public static Delegates.glGetCompressedTexImageARB_ glGetCompressedTexImageARB_ = (Delegates.glGetCompressedTexImageARB_)GetAddress("glGetCompressedTexImageARB", typeof(Delegates.glGetCompressedTexImageARB_));
        #endregion glGetCompressedTexImageARB_

        #region glPointParameterfARB
        public static Delegates.glPointParameterfARB glPointParameterfARB = (Delegates.glPointParameterfARB)GetAddress("glPointParameterfARB", typeof(Delegates.glPointParameterfARB));
        #endregion glPointParameterfARB

        #region glPointParameterfvARB_
        public static Delegates.glPointParameterfvARB_ glPointParameterfvARB_ = (Delegates.glPointParameterfvARB_)GetAddress("glPointParameterfvARB", typeof(Delegates.glPointParameterfvARB_));
        #endregion glPointParameterfvARB_

        #region glWeightbvARB_
        public static Delegates.glWeightbvARB_ glWeightbvARB_ = (Delegates.glWeightbvARB_)GetAddress("glWeightbvARB", typeof(Delegates.glWeightbvARB_));
        #endregion glWeightbvARB_

        #region glWeightsvARB_
        public static Delegates.glWeightsvARB_ glWeightsvARB_ = (Delegates.glWeightsvARB_)GetAddress("glWeightsvARB", typeof(Delegates.glWeightsvARB_));
        #endregion glWeightsvARB_

        #region glWeightivARB_
        public static Delegates.glWeightivARB_ glWeightivARB_ = (Delegates.glWeightivARB_)GetAddress("glWeightivARB", typeof(Delegates.glWeightivARB_));
        #endregion glWeightivARB_

        #region glWeightfvARB_
        public static Delegates.glWeightfvARB_ glWeightfvARB_ = (Delegates.glWeightfvARB_)GetAddress("glWeightfvARB", typeof(Delegates.glWeightfvARB_));
        #endregion glWeightfvARB_

        #region glWeightdvARB_
        public static Delegates.glWeightdvARB_ glWeightdvARB_ = (Delegates.glWeightdvARB_)GetAddress("glWeightdvARB", typeof(Delegates.glWeightdvARB_));
        #endregion glWeightdvARB_

        #region glWeightubvARB_
        public static Delegates.glWeightubvARB_ glWeightubvARB_ = (Delegates.glWeightubvARB_)GetAddress("glWeightubvARB", typeof(Delegates.glWeightubvARB_));
        #endregion glWeightubvARB_

        #region glWeightusvARB_
        public static Delegates.glWeightusvARB_ glWeightusvARB_ = (Delegates.glWeightusvARB_)GetAddress("glWeightusvARB", typeof(Delegates.glWeightusvARB_));
        #endregion glWeightusvARB_

        #region glWeightuivARB_
        public static Delegates.glWeightuivARB_ glWeightuivARB_ = (Delegates.glWeightuivARB_)GetAddress("glWeightuivARB", typeof(Delegates.glWeightuivARB_));
        #endregion glWeightuivARB_

        #region glWeightPointerARB_
        public static Delegates.glWeightPointerARB_ glWeightPointerARB_ = (Delegates.glWeightPointerARB_)GetAddress("glWeightPointerARB", typeof(Delegates.glWeightPointerARB_));
        #endregion glWeightPointerARB_

        #region glVertexBlendARB
        public static Delegates.glVertexBlendARB glVertexBlendARB = (Delegates.glVertexBlendARB)GetAddress("glVertexBlendARB", typeof(Delegates.glVertexBlendARB));
        #endregion glVertexBlendARB

        #region glCurrentPaletteMatrixARB
        public static Delegates.glCurrentPaletteMatrixARB glCurrentPaletteMatrixARB = (Delegates.glCurrentPaletteMatrixARB)GetAddress("glCurrentPaletteMatrixARB", typeof(Delegates.glCurrentPaletteMatrixARB));
        #endregion glCurrentPaletteMatrixARB

        #region glMatrixIndexubvARB_
        public static Delegates.glMatrixIndexubvARB_ glMatrixIndexubvARB_ = (Delegates.glMatrixIndexubvARB_)GetAddress("glMatrixIndexubvARB", typeof(Delegates.glMatrixIndexubvARB_));
        #endregion glMatrixIndexubvARB_

        #region glMatrixIndexusvARB_
        public static Delegates.glMatrixIndexusvARB_ glMatrixIndexusvARB_ = (Delegates.glMatrixIndexusvARB_)GetAddress("glMatrixIndexusvARB", typeof(Delegates.glMatrixIndexusvARB_));
        #endregion glMatrixIndexusvARB_

        #region glMatrixIndexuivARB_
        public static Delegates.glMatrixIndexuivARB_ glMatrixIndexuivARB_ = (Delegates.glMatrixIndexuivARB_)GetAddress("glMatrixIndexuivARB", typeof(Delegates.glMatrixIndexuivARB_));
        #endregion glMatrixIndexuivARB_

        #region glMatrixIndexPointerARB_
        public static Delegates.glMatrixIndexPointerARB_ glMatrixIndexPointerARB_ = (Delegates.glMatrixIndexPointerARB_)GetAddress("glMatrixIndexPointerARB", typeof(Delegates.glMatrixIndexPointerARB_));
        #endregion glMatrixIndexPointerARB_

        #region glWindowPos2dARB
        public static Delegates.glWindowPos2dARB glWindowPos2dARB = (Delegates.glWindowPos2dARB)GetAddress("glWindowPos2dARB", typeof(Delegates.glWindowPos2dARB));
        #endregion glWindowPos2dARB

        #region glWindowPos2dvARB_
        public static Delegates.glWindowPos2dvARB_ glWindowPos2dvARB_ = (Delegates.glWindowPos2dvARB_)GetAddress("glWindowPos2dvARB", typeof(Delegates.glWindowPos2dvARB_));
        #endregion glWindowPos2dvARB_

        #region glWindowPos2fARB
        public static Delegates.glWindowPos2fARB glWindowPos2fARB = (Delegates.glWindowPos2fARB)GetAddress("glWindowPos2fARB", typeof(Delegates.glWindowPos2fARB));
        #endregion glWindowPos2fARB

        #region glWindowPos2fvARB_
        public static Delegates.glWindowPos2fvARB_ glWindowPos2fvARB_ = (Delegates.glWindowPos2fvARB_)GetAddress("glWindowPos2fvARB", typeof(Delegates.glWindowPos2fvARB_));
        #endregion glWindowPos2fvARB_

        #region glWindowPos2iARB
        public static Delegates.glWindowPos2iARB glWindowPos2iARB = (Delegates.glWindowPos2iARB)GetAddress("glWindowPos2iARB", typeof(Delegates.glWindowPos2iARB));
        #endregion glWindowPos2iARB

        #region glWindowPos2ivARB_
        public static Delegates.glWindowPos2ivARB_ glWindowPos2ivARB_ = (Delegates.glWindowPos2ivARB_)GetAddress("glWindowPos2ivARB", typeof(Delegates.glWindowPos2ivARB_));
        #endregion glWindowPos2ivARB_

        #region glWindowPos2sARB
        public static Delegates.glWindowPos2sARB glWindowPos2sARB = (Delegates.glWindowPos2sARB)GetAddress("glWindowPos2sARB", typeof(Delegates.glWindowPos2sARB));
        #endregion glWindowPos2sARB

        #region glWindowPos2svARB_
        public static Delegates.glWindowPos2svARB_ glWindowPos2svARB_ = (Delegates.glWindowPos2svARB_)GetAddress("glWindowPos2svARB", typeof(Delegates.glWindowPos2svARB_));
        #endregion glWindowPos2svARB_

        #region glWindowPos3dARB
        public static Delegates.glWindowPos3dARB glWindowPos3dARB = (Delegates.glWindowPos3dARB)GetAddress("glWindowPos3dARB", typeof(Delegates.glWindowPos3dARB));
        #endregion glWindowPos3dARB

        #region glWindowPos3dvARB_
        public static Delegates.glWindowPos3dvARB_ glWindowPos3dvARB_ = (Delegates.glWindowPos3dvARB_)GetAddress("glWindowPos3dvARB", typeof(Delegates.glWindowPos3dvARB_));
        #endregion glWindowPos3dvARB_

        #region glWindowPos3fARB
        public static Delegates.glWindowPos3fARB glWindowPos3fARB = (Delegates.glWindowPos3fARB)GetAddress("glWindowPos3fARB", typeof(Delegates.glWindowPos3fARB));
        #endregion glWindowPos3fARB

        #region glWindowPos3fvARB_
        public static Delegates.glWindowPos3fvARB_ glWindowPos3fvARB_ = (Delegates.glWindowPos3fvARB_)GetAddress("glWindowPos3fvARB", typeof(Delegates.glWindowPos3fvARB_));
        #endregion glWindowPos3fvARB_

        #region glWindowPos3iARB
        public static Delegates.glWindowPos3iARB glWindowPos3iARB = (Delegates.glWindowPos3iARB)GetAddress("glWindowPos3iARB", typeof(Delegates.glWindowPos3iARB));
        #endregion glWindowPos3iARB

        #region glWindowPos3ivARB_
        public static Delegates.glWindowPos3ivARB_ glWindowPos3ivARB_ = (Delegates.glWindowPos3ivARB_)GetAddress("glWindowPos3ivARB", typeof(Delegates.glWindowPos3ivARB_));
        #endregion glWindowPos3ivARB_

        #region glWindowPos3sARB
        public static Delegates.glWindowPos3sARB glWindowPos3sARB = (Delegates.glWindowPos3sARB)GetAddress("glWindowPos3sARB", typeof(Delegates.glWindowPos3sARB));
        #endregion glWindowPos3sARB

        #region glWindowPos3svARB_
        public static Delegates.glWindowPos3svARB_ glWindowPos3svARB_ = (Delegates.glWindowPos3svARB_)GetAddress("glWindowPos3svARB", typeof(Delegates.glWindowPos3svARB_));
        #endregion glWindowPos3svARB_

        #region glVertexAttrib1dARB
        public static Delegates.glVertexAttrib1dARB glVertexAttrib1dARB = (Delegates.glVertexAttrib1dARB)GetAddress("glVertexAttrib1dARB", typeof(Delegates.glVertexAttrib1dARB));
        #endregion glVertexAttrib1dARB

        #region glVertexAttrib1dvARB_
        public static Delegates.glVertexAttrib1dvARB_ glVertexAttrib1dvARB_ = (Delegates.glVertexAttrib1dvARB_)GetAddress("glVertexAttrib1dvARB", typeof(Delegates.glVertexAttrib1dvARB_));
        #endregion glVertexAttrib1dvARB_

        #region glVertexAttrib1fARB
        public static Delegates.glVertexAttrib1fARB glVertexAttrib1fARB = (Delegates.glVertexAttrib1fARB)GetAddress("glVertexAttrib1fARB", typeof(Delegates.glVertexAttrib1fARB));
        #endregion glVertexAttrib1fARB

        #region glVertexAttrib1fvARB_
        public static Delegates.glVertexAttrib1fvARB_ glVertexAttrib1fvARB_ = (Delegates.glVertexAttrib1fvARB_)GetAddress("glVertexAttrib1fvARB", typeof(Delegates.glVertexAttrib1fvARB_));
        #endregion glVertexAttrib1fvARB_

        #region glVertexAttrib1sARB
        public static Delegates.glVertexAttrib1sARB glVertexAttrib1sARB = (Delegates.glVertexAttrib1sARB)GetAddress("glVertexAttrib1sARB", typeof(Delegates.glVertexAttrib1sARB));
        #endregion glVertexAttrib1sARB

        #region glVertexAttrib1svARB_
        public static Delegates.glVertexAttrib1svARB_ glVertexAttrib1svARB_ = (Delegates.glVertexAttrib1svARB_)GetAddress("glVertexAttrib1svARB", typeof(Delegates.glVertexAttrib1svARB_));
        #endregion glVertexAttrib1svARB_

        #region glVertexAttrib2dARB
        public static Delegates.glVertexAttrib2dARB glVertexAttrib2dARB = (Delegates.glVertexAttrib2dARB)GetAddress("glVertexAttrib2dARB", typeof(Delegates.glVertexAttrib2dARB));
        #endregion glVertexAttrib2dARB

        #region glVertexAttrib2dvARB_
        public static Delegates.glVertexAttrib2dvARB_ glVertexAttrib2dvARB_ = (Delegates.glVertexAttrib2dvARB_)GetAddress("glVertexAttrib2dvARB", typeof(Delegates.glVertexAttrib2dvARB_));
        #endregion glVertexAttrib2dvARB_

        #region glVertexAttrib2fARB
        public static Delegates.glVertexAttrib2fARB glVertexAttrib2fARB = (Delegates.glVertexAttrib2fARB)GetAddress("glVertexAttrib2fARB", typeof(Delegates.glVertexAttrib2fARB));
        #endregion glVertexAttrib2fARB

        #region glVertexAttrib2fvARB_
        public static Delegates.glVertexAttrib2fvARB_ glVertexAttrib2fvARB_ = (Delegates.glVertexAttrib2fvARB_)GetAddress("glVertexAttrib2fvARB", typeof(Delegates.glVertexAttrib2fvARB_));
        #endregion glVertexAttrib2fvARB_

        #region glVertexAttrib2sARB
        public static Delegates.glVertexAttrib2sARB glVertexAttrib2sARB = (Delegates.glVertexAttrib2sARB)GetAddress("glVertexAttrib2sARB", typeof(Delegates.glVertexAttrib2sARB));
        #endregion glVertexAttrib2sARB

        #region glVertexAttrib2svARB_
        public static Delegates.glVertexAttrib2svARB_ glVertexAttrib2svARB_ = (Delegates.glVertexAttrib2svARB_)GetAddress("glVertexAttrib2svARB", typeof(Delegates.glVertexAttrib2svARB_));
        #endregion glVertexAttrib2svARB_

        #region glVertexAttrib3dARB
        public static Delegates.glVertexAttrib3dARB glVertexAttrib3dARB = (Delegates.glVertexAttrib3dARB)GetAddress("glVertexAttrib3dARB", typeof(Delegates.glVertexAttrib3dARB));
        #endregion glVertexAttrib3dARB

        #region glVertexAttrib3dvARB_
        public static Delegates.glVertexAttrib3dvARB_ glVertexAttrib3dvARB_ = (Delegates.glVertexAttrib3dvARB_)GetAddress("glVertexAttrib3dvARB", typeof(Delegates.glVertexAttrib3dvARB_));
        #endregion glVertexAttrib3dvARB_

        #region glVertexAttrib3fARB
        public static Delegates.glVertexAttrib3fARB glVertexAttrib3fARB = (Delegates.glVertexAttrib3fARB)GetAddress("glVertexAttrib3fARB", typeof(Delegates.glVertexAttrib3fARB));
        #endregion glVertexAttrib3fARB

        #region glVertexAttrib3fvARB_
        public static Delegates.glVertexAttrib3fvARB_ glVertexAttrib3fvARB_ = (Delegates.glVertexAttrib3fvARB_)GetAddress("glVertexAttrib3fvARB", typeof(Delegates.glVertexAttrib3fvARB_));
        #endregion glVertexAttrib3fvARB_

        #region glVertexAttrib3sARB
        public static Delegates.glVertexAttrib3sARB glVertexAttrib3sARB = (Delegates.glVertexAttrib3sARB)GetAddress("glVertexAttrib3sARB", typeof(Delegates.glVertexAttrib3sARB));
        #endregion glVertexAttrib3sARB

        #region glVertexAttrib3svARB_
        public static Delegates.glVertexAttrib3svARB_ glVertexAttrib3svARB_ = (Delegates.glVertexAttrib3svARB_)GetAddress("glVertexAttrib3svARB", typeof(Delegates.glVertexAttrib3svARB_));
        #endregion glVertexAttrib3svARB_

        #region glVertexAttrib4NbvARB_
        public static Delegates.glVertexAttrib4NbvARB_ glVertexAttrib4NbvARB_ = (Delegates.glVertexAttrib4NbvARB_)GetAddress("glVertexAttrib4NbvARB", typeof(Delegates.glVertexAttrib4NbvARB_));
        #endregion glVertexAttrib4NbvARB_

        #region glVertexAttrib4NivARB_
        public static Delegates.glVertexAttrib4NivARB_ glVertexAttrib4NivARB_ = (Delegates.glVertexAttrib4NivARB_)GetAddress("glVertexAttrib4NivARB", typeof(Delegates.glVertexAttrib4NivARB_));
        #endregion glVertexAttrib4NivARB_

        #region glVertexAttrib4NsvARB_
        public static Delegates.glVertexAttrib4NsvARB_ glVertexAttrib4NsvARB_ = (Delegates.glVertexAttrib4NsvARB_)GetAddress("glVertexAttrib4NsvARB", typeof(Delegates.glVertexAttrib4NsvARB_));
        #endregion glVertexAttrib4NsvARB_

        #region glVertexAttrib4NubARB
        public static Delegates.glVertexAttrib4NubARB glVertexAttrib4NubARB = (Delegates.glVertexAttrib4NubARB)GetAddress("glVertexAttrib4NubARB", typeof(Delegates.glVertexAttrib4NubARB));
        #endregion glVertexAttrib4NubARB

        #region glVertexAttrib4NubvARB_
        public static Delegates.glVertexAttrib4NubvARB_ glVertexAttrib4NubvARB_ = (Delegates.glVertexAttrib4NubvARB_)GetAddress("glVertexAttrib4NubvARB", typeof(Delegates.glVertexAttrib4NubvARB_));
        #endregion glVertexAttrib4NubvARB_

        #region glVertexAttrib4NuivARB_
        public static Delegates.glVertexAttrib4NuivARB_ glVertexAttrib4NuivARB_ = (Delegates.glVertexAttrib4NuivARB_)GetAddress("glVertexAttrib4NuivARB", typeof(Delegates.glVertexAttrib4NuivARB_));
        #endregion glVertexAttrib4NuivARB_

        #region glVertexAttrib4NusvARB_
        public static Delegates.glVertexAttrib4NusvARB_ glVertexAttrib4NusvARB_ = (Delegates.glVertexAttrib4NusvARB_)GetAddress("glVertexAttrib4NusvARB", typeof(Delegates.glVertexAttrib4NusvARB_));
        #endregion glVertexAttrib4NusvARB_

        #region glVertexAttrib4bvARB_
        public static Delegates.glVertexAttrib4bvARB_ glVertexAttrib4bvARB_ = (Delegates.glVertexAttrib4bvARB_)GetAddress("glVertexAttrib4bvARB", typeof(Delegates.glVertexAttrib4bvARB_));
        #endregion glVertexAttrib4bvARB_

        #region glVertexAttrib4dARB
        public static Delegates.glVertexAttrib4dARB glVertexAttrib4dARB = (Delegates.glVertexAttrib4dARB)GetAddress("glVertexAttrib4dARB", typeof(Delegates.glVertexAttrib4dARB));
        #endregion glVertexAttrib4dARB

        #region glVertexAttrib4dvARB_
        public static Delegates.glVertexAttrib4dvARB_ glVertexAttrib4dvARB_ = (Delegates.glVertexAttrib4dvARB_)GetAddress("glVertexAttrib4dvARB", typeof(Delegates.glVertexAttrib4dvARB_));
        #endregion glVertexAttrib4dvARB_

        #region glVertexAttrib4fARB
        public static Delegates.glVertexAttrib4fARB glVertexAttrib4fARB = (Delegates.glVertexAttrib4fARB)GetAddress("glVertexAttrib4fARB", typeof(Delegates.glVertexAttrib4fARB));
        #endregion glVertexAttrib4fARB

        #region glVertexAttrib4fvARB_
        public static Delegates.glVertexAttrib4fvARB_ glVertexAttrib4fvARB_ = (Delegates.glVertexAttrib4fvARB_)GetAddress("glVertexAttrib4fvARB", typeof(Delegates.glVertexAttrib4fvARB_));
        #endregion glVertexAttrib4fvARB_

        #region glVertexAttrib4ivARB_
        public static Delegates.glVertexAttrib4ivARB_ glVertexAttrib4ivARB_ = (Delegates.glVertexAttrib4ivARB_)GetAddress("glVertexAttrib4ivARB", typeof(Delegates.glVertexAttrib4ivARB_));
        #endregion glVertexAttrib4ivARB_

        #region glVertexAttrib4sARB
        public static Delegates.glVertexAttrib4sARB glVertexAttrib4sARB = (Delegates.glVertexAttrib4sARB)GetAddress("glVertexAttrib4sARB", typeof(Delegates.glVertexAttrib4sARB));
        #endregion glVertexAttrib4sARB

        #region glVertexAttrib4svARB_
        public static Delegates.glVertexAttrib4svARB_ glVertexAttrib4svARB_ = (Delegates.glVertexAttrib4svARB_)GetAddress("glVertexAttrib4svARB", typeof(Delegates.glVertexAttrib4svARB_));
        #endregion glVertexAttrib4svARB_

        #region glVertexAttrib4ubvARB_
        public static Delegates.glVertexAttrib4ubvARB_ glVertexAttrib4ubvARB_ = (Delegates.glVertexAttrib4ubvARB_)GetAddress("glVertexAttrib4ubvARB", typeof(Delegates.glVertexAttrib4ubvARB_));
        #endregion glVertexAttrib4ubvARB_

        #region glVertexAttrib4uivARB_
        public static Delegates.glVertexAttrib4uivARB_ glVertexAttrib4uivARB_ = (Delegates.glVertexAttrib4uivARB_)GetAddress("glVertexAttrib4uivARB", typeof(Delegates.glVertexAttrib4uivARB_));
        #endregion glVertexAttrib4uivARB_

        #region glVertexAttrib4usvARB_
        public static Delegates.glVertexAttrib4usvARB_ glVertexAttrib4usvARB_ = (Delegates.glVertexAttrib4usvARB_)GetAddress("glVertexAttrib4usvARB", typeof(Delegates.glVertexAttrib4usvARB_));
        #endregion glVertexAttrib4usvARB_

        #region glVertexAttribPointerARB_
        public static Delegates.glVertexAttribPointerARB_ glVertexAttribPointerARB_ = (Delegates.glVertexAttribPointerARB_)GetAddress("glVertexAttribPointerARB", typeof(Delegates.glVertexAttribPointerARB_));
        #endregion glVertexAttribPointerARB_

        #region glEnableVertexAttribArrayARB
        public static Delegates.glEnableVertexAttribArrayARB glEnableVertexAttribArrayARB = (Delegates.glEnableVertexAttribArrayARB)GetAddress("glEnableVertexAttribArrayARB", typeof(Delegates.glEnableVertexAttribArrayARB));
        #endregion glEnableVertexAttribArrayARB

        #region glDisableVertexAttribArrayARB
        public static Delegates.glDisableVertexAttribArrayARB glDisableVertexAttribArrayARB = (Delegates.glDisableVertexAttribArrayARB)GetAddress("glDisableVertexAttribArrayARB", typeof(Delegates.glDisableVertexAttribArrayARB));
        #endregion glDisableVertexAttribArrayARB

        #region glProgramStringARB_
        public static Delegates.glProgramStringARB_ glProgramStringARB_ = (Delegates.glProgramStringARB_)GetAddress("glProgramStringARB", typeof(Delegates.glProgramStringARB_));
        #endregion glProgramStringARB_

        #region glBindProgramARB
        public static Delegates.glBindProgramARB glBindProgramARB = (Delegates.glBindProgramARB)GetAddress("glBindProgramARB", typeof(Delegates.glBindProgramARB));
        #endregion glBindProgramARB

        #region glDeleteProgramsARB_
        public static Delegates.glDeleteProgramsARB_ glDeleteProgramsARB_ = (Delegates.glDeleteProgramsARB_)GetAddress("glDeleteProgramsARB", typeof(Delegates.glDeleteProgramsARB_));
        #endregion glDeleteProgramsARB_

        #region glGenProgramsARB_
        public static Delegates.glGenProgramsARB_ glGenProgramsARB_ = (Delegates.glGenProgramsARB_)GetAddress("glGenProgramsARB", typeof(Delegates.glGenProgramsARB_));
        #endregion glGenProgramsARB_

        #region glProgramEnvParameter4dARB
        public static Delegates.glProgramEnvParameter4dARB glProgramEnvParameter4dARB = (Delegates.glProgramEnvParameter4dARB)GetAddress("glProgramEnvParameter4dARB", typeof(Delegates.glProgramEnvParameter4dARB));
        #endregion glProgramEnvParameter4dARB

        #region glProgramEnvParameter4dvARB_
        public static Delegates.glProgramEnvParameter4dvARB_ glProgramEnvParameter4dvARB_ = (Delegates.glProgramEnvParameter4dvARB_)GetAddress("glProgramEnvParameter4dvARB", typeof(Delegates.glProgramEnvParameter4dvARB_));
        #endregion glProgramEnvParameter4dvARB_

        #region glProgramEnvParameter4fARB
        public static Delegates.glProgramEnvParameter4fARB glProgramEnvParameter4fARB = (Delegates.glProgramEnvParameter4fARB)GetAddress("glProgramEnvParameter4fARB", typeof(Delegates.glProgramEnvParameter4fARB));
        #endregion glProgramEnvParameter4fARB

        #region glProgramEnvParameter4fvARB_
        public static Delegates.glProgramEnvParameter4fvARB_ glProgramEnvParameter4fvARB_ = (Delegates.glProgramEnvParameter4fvARB_)GetAddress("glProgramEnvParameter4fvARB", typeof(Delegates.glProgramEnvParameter4fvARB_));
        #endregion glProgramEnvParameter4fvARB_

        #region glProgramLocalParameter4dARB
        public static Delegates.glProgramLocalParameter4dARB glProgramLocalParameter4dARB = (Delegates.glProgramLocalParameter4dARB)GetAddress("glProgramLocalParameter4dARB", typeof(Delegates.glProgramLocalParameter4dARB));
        #endregion glProgramLocalParameter4dARB

        #region glProgramLocalParameter4dvARB_
        public static Delegates.glProgramLocalParameter4dvARB_ glProgramLocalParameter4dvARB_ = (Delegates.glProgramLocalParameter4dvARB_)GetAddress("glProgramLocalParameter4dvARB", typeof(Delegates.glProgramLocalParameter4dvARB_));
        #endregion glProgramLocalParameter4dvARB_

        #region glProgramLocalParameter4fARB
        public static Delegates.glProgramLocalParameter4fARB glProgramLocalParameter4fARB = (Delegates.glProgramLocalParameter4fARB)GetAddress("glProgramLocalParameter4fARB", typeof(Delegates.glProgramLocalParameter4fARB));
        #endregion glProgramLocalParameter4fARB

        #region glProgramLocalParameter4fvARB_
        public static Delegates.glProgramLocalParameter4fvARB_ glProgramLocalParameter4fvARB_ = (Delegates.glProgramLocalParameter4fvARB_)GetAddress("glProgramLocalParameter4fvARB", typeof(Delegates.glProgramLocalParameter4fvARB_));
        #endregion glProgramLocalParameter4fvARB_

        #region glGetProgramEnvParameterdvARB_
        public static Delegates.glGetProgramEnvParameterdvARB_ glGetProgramEnvParameterdvARB_ = (Delegates.glGetProgramEnvParameterdvARB_)GetAddress("glGetProgramEnvParameterdvARB", typeof(Delegates.glGetProgramEnvParameterdvARB_));
        #endregion glGetProgramEnvParameterdvARB_

        #region glGetProgramEnvParameterfvARB_
        public static Delegates.glGetProgramEnvParameterfvARB_ glGetProgramEnvParameterfvARB_ = (Delegates.glGetProgramEnvParameterfvARB_)GetAddress("glGetProgramEnvParameterfvARB", typeof(Delegates.glGetProgramEnvParameterfvARB_));
        #endregion glGetProgramEnvParameterfvARB_

        #region glGetProgramLocalParameterdvARB_
        public static Delegates.glGetProgramLocalParameterdvARB_ glGetProgramLocalParameterdvARB_ = (Delegates.glGetProgramLocalParameterdvARB_)GetAddress("glGetProgramLocalParameterdvARB", typeof(Delegates.glGetProgramLocalParameterdvARB_));
        #endregion glGetProgramLocalParameterdvARB_

        #region glGetProgramLocalParameterfvARB_
        public static Delegates.glGetProgramLocalParameterfvARB_ glGetProgramLocalParameterfvARB_ = (Delegates.glGetProgramLocalParameterfvARB_)GetAddress("glGetProgramLocalParameterfvARB", typeof(Delegates.glGetProgramLocalParameterfvARB_));
        #endregion glGetProgramLocalParameterfvARB_

        #region glGetProgramivARB_
        public static Delegates.glGetProgramivARB_ glGetProgramivARB_ = (Delegates.glGetProgramivARB_)GetAddress("glGetProgramivARB", typeof(Delegates.glGetProgramivARB_));
        #endregion glGetProgramivARB_

        #region glGetProgramStringARB_
        public static Delegates.glGetProgramStringARB_ glGetProgramStringARB_ = (Delegates.glGetProgramStringARB_)GetAddress("glGetProgramStringARB", typeof(Delegates.glGetProgramStringARB_));
        #endregion glGetProgramStringARB_

        #region glGetVertexAttribdvARB_
        public static Delegates.glGetVertexAttribdvARB_ glGetVertexAttribdvARB_ = (Delegates.glGetVertexAttribdvARB_)GetAddress("glGetVertexAttribdvARB", typeof(Delegates.glGetVertexAttribdvARB_));
        #endregion glGetVertexAttribdvARB_

        #region glGetVertexAttribfvARB_
        public static Delegates.glGetVertexAttribfvARB_ glGetVertexAttribfvARB_ = (Delegates.glGetVertexAttribfvARB_)GetAddress("glGetVertexAttribfvARB", typeof(Delegates.glGetVertexAttribfvARB_));
        #endregion glGetVertexAttribfvARB_

        #region glGetVertexAttribivARB_
        public static Delegates.glGetVertexAttribivARB_ glGetVertexAttribivARB_ = (Delegates.glGetVertexAttribivARB_)GetAddress("glGetVertexAttribivARB", typeof(Delegates.glGetVertexAttribivARB_));
        #endregion glGetVertexAttribivARB_

        #region glGetVertexAttribPointervARB_
        public static Delegates.glGetVertexAttribPointervARB_ glGetVertexAttribPointervARB_ = (Delegates.glGetVertexAttribPointervARB_)GetAddress("glGetVertexAttribPointervARB", typeof(Delegates.glGetVertexAttribPointervARB_));
        #endregion glGetVertexAttribPointervARB_

        #region glIsProgramARB
        public static Delegates.glIsProgramARB glIsProgramARB = (Delegates.glIsProgramARB)GetAddress("glIsProgramARB", typeof(Delegates.glIsProgramARB));
        #endregion glIsProgramARB

        #region glBindBufferARB
        public static Delegates.glBindBufferARB glBindBufferARB = (Delegates.glBindBufferARB)GetAddress("glBindBufferARB", typeof(Delegates.glBindBufferARB));
        #endregion glBindBufferARB

        #region glDeleteBuffersARB_
        public static Delegates.glDeleteBuffersARB_ glDeleteBuffersARB_ = (Delegates.glDeleteBuffersARB_)GetAddress("glDeleteBuffersARB", typeof(Delegates.glDeleteBuffersARB_));
        #endregion glDeleteBuffersARB_

        #region glGenBuffersARB_
        public static Delegates.glGenBuffersARB_ glGenBuffersARB_ = (Delegates.glGenBuffersARB_)GetAddress("glGenBuffersARB", typeof(Delegates.glGenBuffersARB_));
        #endregion glGenBuffersARB_

        #region glIsBufferARB
        public static Delegates.glIsBufferARB glIsBufferARB = (Delegates.glIsBufferARB)GetAddress("glIsBufferARB", typeof(Delegates.glIsBufferARB));
        #endregion glIsBufferARB

        #region glBufferDataARB_
        public static Delegates.glBufferDataARB_ glBufferDataARB_ = (Delegates.glBufferDataARB_)GetAddress("glBufferDataARB", typeof(Delegates.glBufferDataARB_));
        #endregion glBufferDataARB_

        #region glBufferSubDataARB_
        public static Delegates.glBufferSubDataARB_ glBufferSubDataARB_ = (Delegates.glBufferSubDataARB_)GetAddress("glBufferSubDataARB", typeof(Delegates.glBufferSubDataARB_));
        #endregion glBufferSubDataARB_

        #region glGetBufferSubDataARB_
        public static Delegates.glGetBufferSubDataARB_ glGetBufferSubDataARB_ = (Delegates.glGetBufferSubDataARB_)GetAddress("glGetBufferSubDataARB", typeof(Delegates.glGetBufferSubDataARB_));
        #endregion glGetBufferSubDataARB_

        #region glMapBufferARB
        public static Delegates.glMapBufferARB glMapBufferARB = (Delegates.glMapBufferARB)GetAddress("glMapBufferARB", typeof(Delegates.glMapBufferARB));
        #endregion glMapBufferARB

        #region glUnmapBufferARB
        public static Delegates.glUnmapBufferARB glUnmapBufferARB = (Delegates.glUnmapBufferARB)GetAddress("glUnmapBufferARB", typeof(Delegates.glUnmapBufferARB));
        #endregion glUnmapBufferARB

        #region glGetBufferParameterivARB_
        public static Delegates.glGetBufferParameterivARB_ glGetBufferParameterivARB_ = (Delegates.glGetBufferParameterivARB_)GetAddress("glGetBufferParameterivARB", typeof(Delegates.glGetBufferParameterivARB_));
        #endregion glGetBufferParameterivARB_

        #region glGetBufferPointervARB_
        public static Delegates.glGetBufferPointervARB_ glGetBufferPointervARB_ = (Delegates.glGetBufferPointervARB_)GetAddress("glGetBufferPointervARB", typeof(Delegates.glGetBufferPointervARB_));
        #endregion glGetBufferPointervARB_

        #region glGenQueriesARB_
        public static Delegates.glGenQueriesARB_ glGenQueriesARB_ = (Delegates.glGenQueriesARB_)GetAddress("glGenQueriesARB", typeof(Delegates.glGenQueriesARB_));
        #endregion glGenQueriesARB_

        #region glDeleteQueriesARB_
        public static Delegates.glDeleteQueriesARB_ glDeleteQueriesARB_ = (Delegates.glDeleteQueriesARB_)GetAddress("glDeleteQueriesARB", typeof(Delegates.glDeleteQueriesARB_));
        #endregion glDeleteQueriesARB_

        #region glIsQueryARB
        public static Delegates.glIsQueryARB glIsQueryARB = (Delegates.glIsQueryARB)GetAddress("glIsQueryARB", typeof(Delegates.glIsQueryARB));
        #endregion glIsQueryARB

        #region glBeginQueryARB
        public static Delegates.glBeginQueryARB glBeginQueryARB = (Delegates.glBeginQueryARB)GetAddress("glBeginQueryARB", typeof(Delegates.glBeginQueryARB));
        #endregion glBeginQueryARB

        #region glEndQueryARB
        public static Delegates.glEndQueryARB glEndQueryARB = (Delegates.glEndQueryARB)GetAddress("glEndQueryARB", typeof(Delegates.glEndQueryARB));
        #endregion glEndQueryARB

        #region glGetQueryivARB_
        public static Delegates.glGetQueryivARB_ glGetQueryivARB_ = (Delegates.glGetQueryivARB_)GetAddress("glGetQueryivARB", typeof(Delegates.glGetQueryivARB_));
        #endregion glGetQueryivARB_

        #region glGetQueryObjectivARB_
        public static Delegates.glGetQueryObjectivARB_ glGetQueryObjectivARB_ = (Delegates.glGetQueryObjectivARB_)GetAddress("glGetQueryObjectivARB", typeof(Delegates.glGetQueryObjectivARB_));
        #endregion glGetQueryObjectivARB_

        #region glGetQueryObjectuivARB_
        public static Delegates.glGetQueryObjectuivARB_ glGetQueryObjectuivARB_ = (Delegates.glGetQueryObjectuivARB_)GetAddress("glGetQueryObjectuivARB", typeof(Delegates.glGetQueryObjectuivARB_));
        #endregion glGetQueryObjectuivARB_

        #region glDeleteObjectARB
        public static Delegates.glDeleteObjectARB glDeleteObjectARB = (Delegates.glDeleteObjectARB)GetAddress("glDeleteObjectARB", typeof(Delegates.glDeleteObjectARB));
        #endregion glDeleteObjectARB

        #region glGetHandleARB
        public static Delegates.glGetHandleARB glGetHandleARB = (Delegates.glGetHandleARB)GetAddress("glGetHandleARB", typeof(Delegates.glGetHandleARB));
        #endregion glGetHandleARB

        #region glDetachObjectARB
        public static Delegates.glDetachObjectARB glDetachObjectARB = (Delegates.glDetachObjectARB)GetAddress("glDetachObjectARB", typeof(Delegates.glDetachObjectARB));
        #endregion glDetachObjectARB

        #region glCreateShaderObjectARB
        public static Delegates.glCreateShaderObjectARB glCreateShaderObjectARB = (Delegates.glCreateShaderObjectARB)GetAddress("glCreateShaderObjectARB", typeof(Delegates.glCreateShaderObjectARB));
        #endregion glCreateShaderObjectARB

        #region glShaderSourceARB_
        public static Delegates.glShaderSourceARB_ glShaderSourceARB_ = (Delegates.glShaderSourceARB_)GetAddress("glShaderSourceARB", typeof(Delegates.glShaderSourceARB_));
        #endregion glShaderSourceARB_

        #region glCompileShaderARB
        public static Delegates.glCompileShaderARB glCompileShaderARB = (Delegates.glCompileShaderARB)GetAddress("glCompileShaderARB", typeof(Delegates.glCompileShaderARB));
        #endregion glCompileShaderARB

        #region glCreateProgramObjectARB
        public static Delegates.glCreateProgramObjectARB glCreateProgramObjectARB = (Delegates.glCreateProgramObjectARB)GetAddress("glCreateProgramObjectARB", typeof(Delegates.glCreateProgramObjectARB));
        #endregion glCreateProgramObjectARB

        #region glAttachObjectARB
        public static Delegates.glAttachObjectARB glAttachObjectARB = (Delegates.glAttachObjectARB)GetAddress("glAttachObjectARB", typeof(Delegates.glAttachObjectARB));
        #endregion glAttachObjectARB

        #region glLinkProgramARB
        public static Delegates.glLinkProgramARB glLinkProgramARB = (Delegates.glLinkProgramARB)GetAddress("glLinkProgramARB", typeof(Delegates.glLinkProgramARB));
        #endregion glLinkProgramARB

        #region glUseProgramObjectARB
        public static Delegates.glUseProgramObjectARB glUseProgramObjectARB = (Delegates.glUseProgramObjectARB)GetAddress("glUseProgramObjectARB", typeof(Delegates.glUseProgramObjectARB));
        #endregion glUseProgramObjectARB

        #region glValidateProgramARB
        public static Delegates.glValidateProgramARB glValidateProgramARB = (Delegates.glValidateProgramARB)GetAddress("glValidateProgramARB", typeof(Delegates.glValidateProgramARB));
        #endregion glValidateProgramARB

        #region glUniform1fARB
        public static Delegates.glUniform1fARB glUniform1fARB = (Delegates.glUniform1fARB)GetAddress("glUniform1fARB", typeof(Delegates.glUniform1fARB));
        #endregion glUniform1fARB

        #region glUniform2fARB
        public static Delegates.glUniform2fARB glUniform2fARB = (Delegates.glUniform2fARB)GetAddress("glUniform2fARB", typeof(Delegates.glUniform2fARB));
        #endregion glUniform2fARB

        #region glUniform3fARB
        public static Delegates.glUniform3fARB glUniform3fARB = (Delegates.glUniform3fARB)GetAddress("glUniform3fARB", typeof(Delegates.glUniform3fARB));
        #endregion glUniform3fARB

        #region glUniform4fARB
        public static Delegates.glUniform4fARB glUniform4fARB = (Delegates.glUniform4fARB)GetAddress("glUniform4fARB", typeof(Delegates.glUniform4fARB));
        #endregion glUniform4fARB

        #region glUniform1iARB
        public static Delegates.glUniform1iARB glUniform1iARB = (Delegates.glUniform1iARB)GetAddress("glUniform1iARB", typeof(Delegates.glUniform1iARB));
        #endregion glUniform1iARB

        #region glUniform2iARB
        public static Delegates.glUniform2iARB glUniform2iARB = (Delegates.glUniform2iARB)GetAddress("glUniform2iARB", typeof(Delegates.glUniform2iARB));
        #endregion glUniform2iARB

        #region glUniform3iARB
        public static Delegates.glUniform3iARB glUniform3iARB = (Delegates.glUniform3iARB)GetAddress("glUniform3iARB", typeof(Delegates.glUniform3iARB));
        #endregion glUniform3iARB

        #region glUniform4iARB
        public static Delegates.glUniform4iARB glUniform4iARB = (Delegates.glUniform4iARB)GetAddress("glUniform4iARB", typeof(Delegates.glUniform4iARB));
        #endregion glUniform4iARB

        #region glUniform1fvARB_
        public static Delegates.glUniform1fvARB_ glUniform1fvARB_ = (Delegates.glUniform1fvARB_)GetAddress("glUniform1fvARB", typeof(Delegates.glUniform1fvARB_));
        #endregion glUniform1fvARB_

        #region glUniform2fvARB_
        public static Delegates.glUniform2fvARB_ glUniform2fvARB_ = (Delegates.glUniform2fvARB_)GetAddress("glUniform2fvARB", typeof(Delegates.glUniform2fvARB_));
        #endregion glUniform2fvARB_

        #region glUniform3fvARB_
        public static Delegates.glUniform3fvARB_ glUniform3fvARB_ = (Delegates.glUniform3fvARB_)GetAddress("glUniform3fvARB", typeof(Delegates.glUniform3fvARB_));
        #endregion glUniform3fvARB_

        #region glUniform4fvARB_
        public static Delegates.glUniform4fvARB_ glUniform4fvARB_ = (Delegates.glUniform4fvARB_)GetAddress("glUniform4fvARB", typeof(Delegates.glUniform4fvARB_));
        #endregion glUniform4fvARB_

        #region glUniform1ivARB_
        public static Delegates.glUniform1ivARB_ glUniform1ivARB_ = (Delegates.glUniform1ivARB_)GetAddress("glUniform1ivARB", typeof(Delegates.glUniform1ivARB_));
        #endregion glUniform1ivARB_

        #region glUniform2ivARB_
        public static Delegates.glUniform2ivARB_ glUniform2ivARB_ = (Delegates.glUniform2ivARB_)GetAddress("glUniform2ivARB", typeof(Delegates.glUniform2ivARB_));
        #endregion glUniform2ivARB_

        #region glUniform3ivARB_
        public static Delegates.glUniform3ivARB_ glUniform3ivARB_ = (Delegates.glUniform3ivARB_)GetAddress("glUniform3ivARB", typeof(Delegates.glUniform3ivARB_));
        #endregion glUniform3ivARB_

        #region glUniform4ivARB_
        public static Delegates.glUniform4ivARB_ glUniform4ivARB_ = (Delegates.glUniform4ivARB_)GetAddress("glUniform4ivARB", typeof(Delegates.glUniform4ivARB_));
        #endregion glUniform4ivARB_

        #region glUniformMatrix2fvARB_
        public static Delegates.glUniformMatrix2fvARB_ glUniformMatrix2fvARB_ = (Delegates.glUniformMatrix2fvARB_)GetAddress("glUniformMatrix2fvARB", typeof(Delegates.glUniformMatrix2fvARB_));
        #endregion glUniformMatrix2fvARB_

        #region glUniformMatrix3fvARB_
        public static Delegates.glUniformMatrix3fvARB_ glUniformMatrix3fvARB_ = (Delegates.glUniformMatrix3fvARB_)GetAddress("glUniformMatrix3fvARB", typeof(Delegates.glUniformMatrix3fvARB_));
        #endregion glUniformMatrix3fvARB_

        #region glUniformMatrix4fvARB_
        public static Delegates.glUniformMatrix4fvARB_ glUniformMatrix4fvARB_ = (Delegates.glUniformMatrix4fvARB_)GetAddress("glUniformMatrix4fvARB", typeof(Delegates.glUniformMatrix4fvARB_));
        #endregion glUniformMatrix4fvARB_

        #region glGetObjectParameterfvARB_
        public static Delegates.glGetObjectParameterfvARB_ glGetObjectParameterfvARB_ = (Delegates.glGetObjectParameterfvARB_)GetAddress("glGetObjectParameterfvARB", typeof(Delegates.glGetObjectParameterfvARB_));
        #endregion glGetObjectParameterfvARB_

        #region glGetObjectParameterivARB_
        public static Delegates.glGetObjectParameterivARB_ glGetObjectParameterivARB_ = (Delegates.glGetObjectParameterivARB_)GetAddress("glGetObjectParameterivARB", typeof(Delegates.glGetObjectParameterivARB_));
        #endregion glGetObjectParameterivARB_

        #region glGetInfoLogARB_
        public static Delegates.glGetInfoLogARB_ glGetInfoLogARB_ = (Delegates.glGetInfoLogARB_)GetAddress("glGetInfoLogARB", typeof(Delegates.glGetInfoLogARB_));
        #endregion glGetInfoLogARB_

        #region glGetAttachedObjectsARB_
        public static Delegates.glGetAttachedObjectsARB_ glGetAttachedObjectsARB_ = (Delegates.glGetAttachedObjectsARB_)GetAddress("glGetAttachedObjectsARB", typeof(Delegates.glGetAttachedObjectsARB_));
        #endregion glGetAttachedObjectsARB_

        #region glGetUniformLocationARB
        public static Delegates.glGetUniformLocationARB glGetUniformLocationARB = (Delegates.glGetUniformLocationARB)GetAddress("glGetUniformLocationARB", typeof(Delegates.glGetUniformLocationARB));
        #endregion glGetUniformLocationARB

        #region glGetActiveUniformARB_
        public static Delegates.glGetActiveUniformARB_ glGetActiveUniformARB_ = (Delegates.glGetActiveUniformARB_)GetAddress("glGetActiveUniformARB", typeof(Delegates.glGetActiveUniformARB_));
        #endregion glGetActiveUniformARB_

        #region glGetUniformfvARB_
        public static Delegates.glGetUniformfvARB_ glGetUniformfvARB_ = (Delegates.glGetUniformfvARB_)GetAddress("glGetUniformfvARB", typeof(Delegates.glGetUniformfvARB_));
        #endregion glGetUniformfvARB_

        #region glGetUniformivARB_
        public static Delegates.glGetUniformivARB_ glGetUniformivARB_ = (Delegates.glGetUniformivARB_)GetAddress("glGetUniformivARB", typeof(Delegates.glGetUniformivARB_));
        #endregion glGetUniformivARB_

        #region glGetShaderSourceARB_
        public static Delegates.glGetShaderSourceARB_ glGetShaderSourceARB_ = (Delegates.glGetShaderSourceARB_)GetAddress("glGetShaderSourceARB", typeof(Delegates.glGetShaderSourceARB_));
        #endregion glGetShaderSourceARB_

        #region glBindAttribLocationARB
        public static Delegates.glBindAttribLocationARB glBindAttribLocationARB = (Delegates.glBindAttribLocationARB)GetAddress("glBindAttribLocationARB", typeof(Delegates.glBindAttribLocationARB));
        #endregion glBindAttribLocationARB

        #region glGetActiveAttribARB_
        public static Delegates.glGetActiveAttribARB_ glGetActiveAttribARB_ = (Delegates.glGetActiveAttribARB_)GetAddress("glGetActiveAttribARB", typeof(Delegates.glGetActiveAttribARB_));
        #endregion glGetActiveAttribARB_

        #region glGetAttribLocationARB
        public static Delegates.glGetAttribLocationARB glGetAttribLocationARB = (Delegates.glGetAttribLocationARB)GetAddress("glGetAttribLocationARB", typeof(Delegates.glGetAttribLocationARB));
        #endregion glGetAttribLocationARB

        #region glDrawBuffersARB_
        public static Delegates.glDrawBuffersARB_ glDrawBuffersARB_ = (Delegates.glDrawBuffersARB_)GetAddress("glDrawBuffersARB", typeof(Delegates.glDrawBuffersARB_));
        #endregion glDrawBuffersARB_

        #region glClampColorARB
        public static Delegates.glClampColorARB glClampColorARB = (Delegates.glClampColorARB)GetAddress("glClampColorARB", typeof(Delegates.glClampColorARB));
        #endregion glClampColorARB

        #region glBlendColorEXT
        public static Delegates.glBlendColorEXT glBlendColorEXT = (Delegates.glBlendColorEXT)GetAddress("glBlendColorEXT", typeof(Delegates.glBlendColorEXT));
        #endregion glBlendColorEXT

        #region glPolygonOffsetEXT
        public static Delegates.glPolygonOffsetEXT glPolygonOffsetEXT = (Delegates.glPolygonOffsetEXT)GetAddress("glPolygonOffsetEXT", typeof(Delegates.glPolygonOffsetEXT));
        #endregion glPolygonOffsetEXT

        #region glTexImage3DEXT_
        public static Delegates.glTexImage3DEXT_ glTexImage3DEXT_ = (Delegates.glTexImage3DEXT_)GetAddress("glTexImage3DEXT", typeof(Delegates.glTexImage3DEXT_));
        #endregion glTexImage3DEXT_

        #region glTexSubImage3DEXT_
        public static Delegates.glTexSubImage3DEXT_ glTexSubImage3DEXT_ = (Delegates.glTexSubImage3DEXT_)GetAddress("glTexSubImage3DEXT", typeof(Delegates.glTexSubImage3DEXT_));
        #endregion glTexSubImage3DEXT_

        #region glGetTexFilterFuncSGIS_
        public static Delegates.glGetTexFilterFuncSGIS_ glGetTexFilterFuncSGIS_ = (Delegates.glGetTexFilterFuncSGIS_)GetAddress("glGetTexFilterFuncSGIS", typeof(Delegates.glGetTexFilterFuncSGIS_));
        #endregion glGetTexFilterFuncSGIS_

        #region glTexFilterFuncSGIS_
        public static Delegates.glTexFilterFuncSGIS_ glTexFilterFuncSGIS_ = (Delegates.glTexFilterFuncSGIS_)GetAddress("glTexFilterFuncSGIS", typeof(Delegates.glTexFilterFuncSGIS_));
        #endregion glTexFilterFuncSGIS_

        #region glTexSubImage1DEXT_
        public static Delegates.glTexSubImage1DEXT_ glTexSubImage1DEXT_ = (Delegates.glTexSubImage1DEXT_)GetAddress("glTexSubImage1DEXT", typeof(Delegates.glTexSubImage1DEXT_));
        #endregion glTexSubImage1DEXT_

        #region glTexSubImage2DEXT_
        public static Delegates.glTexSubImage2DEXT_ glTexSubImage2DEXT_ = (Delegates.glTexSubImage2DEXT_)GetAddress("glTexSubImage2DEXT", typeof(Delegates.glTexSubImage2DEXT_));
        #endregion glTexSubImage2DEXT_

        #region glCopyTexImage1DEXT
        public static Delegates.glCopyTexImage1DEXT glCopyTexImage1DEXT = (Delegates.glCopyTexImage1DEXT)GetAddress("glCopyTexImage1DEXT", typeof(Delegates.glCopyTexImage1DEXT));
        #endregion glCopyTexImage1DEXT

        #region glCopyTexImage2DEXT
        public static Delegates.glCopyTexImage2DEXT glCopyTexImage2DEXT = (Delegates.glCopyTexImage2DEXT)GetAddress("glCopyTexImage2DEXT", typeof(Delegates.glCopyTexImage2DEXT));
        #endregion glCopyTexImage2DEXT

        #region glCopyTexSubImage1DEXT
        public static Delegates.glCopyTexSubImage1DEXT glCopyTexSubImage1DEXT = (Delegates.glCopyTexSubImage1DEXT)GetAddress("glCopyTexSubImage1DEXT", typeof(Delegates.glCopyTexSubImage1DEXT));
        #endregion glCopyTexSubImage1DEXT

        #region glCopyTexSubImage2DEXT
        public static Delegates.glCopyTexSubImage2DEXT glCopyTexSubImage2DEXT = (Delegates.glCopyTexSubImage2DEXT)GetAddress("glCopyTexSubImage2DEXT", typeof(Delegates.glCopyTexSubImage2DEXT));
        #endregion glCopyTexSubImage2DEXT

        #region glCopyTexSubImage3DEXT
        public static Delegates.glCopyTexSubImage3DEXT glCopyTexSubImage3DEXT = (Delegates.glCopyTexSubImage3DEXT)GetAddress("glCopyTexSubImage3DEXT", typeof(Delegates.glCopyTexSubImage3DEXT));
        #endregion glCopyTexSubImage3DEXT

        #region glGetHistogramEXT_
        public static Delegates.glGetHistogramEXT_ glGetHistogramEXT_ = (Delegates.glGetHistogramEXT_)GetAddress("glGetHistogramEXT", typeof(Delegates.glGetHistogramEXT_));
        #endregion glGetHistogramEXT_

        #region glGetHistogramParameterfvEXT_
        public static Delegates.glGetHistogramParameterfvEXT_ glGetHistogramParameterfvEXT_ = (Delegates.glGetHistogramParameterfvEXT_)GetAddress("glGetHistogramParameterfvEXT", typeof(Delegates.glGetHistogramParameterfvEXT_));
        #endregion glGetHistogramParameterfvEXT_

        #region glGetHistogramParameterivEXT_
        public static Delegates.glGetHistogramParameterivEXT_ glGetHistogramParameterivEXT_ = (Delegates.glGetHistogramParameterivEXT_)GetAddress("glGetHistogramParameterivEXT", typeof(Delegates.glGetHistogramParameterivEXT_));
        #endregion glGetHistogramParameterivEXT_

        #region glGetMinmaxEXT_
        public static Delegates.glGetMinmaxEXT_ glGetMinmaxEXT_ = (Delegates.glGetMinmaxEXT_)GetAddress("glGetMinmaxEXT", typeof(Delegates.glGetMinmaxEXT_));
        #endregion glGetMinmaxEXT_

        #region glGetMinmaxParameterfvEXT_
        public static Delegates.glGetMinmaxParameterfvEXT_ glGetMinmaxParameterfvEXT_ = (Delegates.glGetMinmaxParameterfvEXT_)GetAddress("glGetMinmaxParameterfvEXT", typeof(Delegates.glGetMinmaxParameterfvEXT_));
        #endregion glGetMinmaxParameterfvEXT_

        #region glGetMinmaxParameterivEXT_
        public static Delegates.glGetMinmaxParameterivEXT_ glGetMinmaxParameterivEXT_ = (Delegates.glGetMinmaxParameterivEXT_)GetAddress("glGetMinmaxParameterivEXT", typeof(Delegates.glGetMinmaxParameterivEXT_));
        #endregion glGetMinmaxParameterivEXT_

        #region glHistogramEXT
        public static Delegates.glHistogramEXT glHistogramEXT = (Delegates.glHistogramEXT)GetAddress("glHistogramEXT", typeof(Delegates.glHistogramEXT));
        #endregion glHistogramEXT

        #region glMinmaxEXT
        public static Delegates.glMinmaxEXT glMinmaxEXT = (Delegates.glMinmaxEXT)GetAddress("glMinmaxEXT", typeof(Delegates.glMinmaxEXT));
        #endregion glMinmaxEXT

        #region glResetHistogramEXT
        public static Delegates.glResetHistogramEXT glResetHistogramEXT = (Delegates.glResetHistogramEXT)GetAddress("glResetHistogramEXT", typeof(Delegates.glResetHistogramEXT));
        #endregion glResetHistogramEXT

        #region glResetMinmaxEXT
        public static Delegates.glResetMinmaxEXT glResetMinmaxEXT = (Delegates.glResetMinmaxEXT)GetAddress("glResetMinmaxEXT", typeof(Delegates.glResetMinmaxEXT));
        #endregion glResetMinmaxEXT

        #region glConvolutionFilter1DEXT_
        public static Delegates.glConvolutionFilter1DEXT_ glConvolutionFilter1DEXT_ = (Delegates.glConvolutionFilter1DEXT_)GetAddress("glConvolutionFilter1DEXT", typeof(Delegates.glConvolutionFilter1DEXT_));
        #endregion glConvolutionFilter1DEXT_

        #region glConvolutionFilter2DEXT_
        public static Delegates.glConvolutionFilter2DEXT_ glConvolutionFilter2DEXT_ = (Delegates.glConvolutionFilter2DEXT_)GetAddress("glConvolutionFilter2DEXT", typeof(Delegates.glConvolutionFilter2DEXT_));
        #endregion glConvolutionFilter2DEXT_

        #region glConvolutionParameterfEXT
        public static Delegates.glConvolutionParameterfEXT glConvolutionParameterfEXT = (Delegates.glConvolutionParameterfEXT)GetAddress("glConvolutionParameterfEXT", typeof(Delegates.glConvolutionParameterfEXT));
        #endregion glConvolutionParameterfEXT

        #region glConvolutionParameterfvEXT_
        public static Delegates.glConvolutionParameterfvEXT_ glConvolutionParameterfvEXT_ = (Delegates.glConvolutionParameterfvEXT_)GetAddress("glConvolutionParameterfvEXT", typeof(Delegates.glConvolutionParameterfvEXT_));
        #endregion glConvolutionParameterfvEXT_

        #region glConvolutionParameteriEXT
        public static Delegates.glConvolutionParameteriEXT glConvolutionParameteriEXT = (Delegates.glConvolutionParameteriEXT)GetAddress("glConvolutionParameteriEXT", typeof(Delegates.glConvolutionParameteriEXT));
        #endregion glConvolutionParameteriEXT

        #region glConvolutionParameterivEXT_
        public static Delegates.glConvolutionParameterivEXT_ glConvolutionParameterivEXT_ = (Delegates.glConvolutionParameterivEXT_)GetAddress("glConvolutionParameterivEXT", typeof(Delegates.glConvolutionParameterivEXT_));
        #endregion glConvolutionParameterivEXT_

        #region glCopyConvolutionFilter1DEXT
        public static Delegates.glCopyConvolutionFilter1DEXT glCopyConvolutionFilter1DEXT = (Delegates.glCopyConvolutionFilter1DEXT)GetAddress("glCopyConvolutionFilter1DEXT", typeof(Delegates.glCopyConvolutionFilter1DEXT));
        #endregion glCopyConvolutionFilter1DEXT

        #region glCopyConvolutionFilter2DEXT
        public static Delegates.glCopyConvolutionFilter2DEXT glCopyConvolutionFilter2DEXT = (Delegates.glCopyConvolutionFilter2DEXT)GetAddress("glCopyConvolutionFilter2DEXT", typeof(Delegates.glCopyConvolutionFilter2DEXT));
        #endregion glCopyConvolutionFilter2DEXT

        #region glGetConvolutionFilterEXT_
        public static Delegates.glGetConvolutionFilterEXT_ glGetConvolutionFilterEXT_ = (Delegates.glGetConvolutionFilterEXT_)GetAddress("glGetConvolutionFilterEXT", typeof(Delegates.glGetConvolutionFilterEXT_));
        #endregion glGetConvolutionFilterEXT_

        #region glGetConvolutionParameterfvEXT_
        public static Delegates.glGetConvolutionParameterfvEXT_ glGetConvolutionParameterfvEXT_ = (Delegates.glGetConvolutionParameterfvEXT_)GetAddress("glGetConvolutionParameterfvEXT", typeof(Delegates.glGetConvolutionParameterfvEXT_));
        #endregion glGetConvolutionParameterfvEXT_

        #region glGetConvolutionParameterivEXT_
        public static Delegates.glGetConvolutionParameterivEXT_ glGetConvolutionParameterivEXT_ = (Delegates.glGetConvolutionParameterivEXT_)GetAddress("glGetConvolutionParameterivEXT", typeof(Delegates.glGetConvolutionParameterivEXT_));
        #endregion glGetConvolutionParameterivEXT_

        #region glGetSeparableFilterEXT_
        public static Delegates.glGetSeparableFilterEXT_ glGetSeparableFilterEXT_ = (Delegates.glGetSeparableFilterEXT_)GetAddress("glGetSeparableFilterEXT", typeof(Delegates.glGetSeparableFilterEXT_));
        #endregion glGetSeparableFilterEXT_

        #region glSeparableFilter2DEXT_
        public static Delegates.glSeparableFilter2DEXT_ glSeparableFilter2DEXT_ = (Delegates.glSeparableFilter2DEXT_)GetAddress("glSeparableFilter2DEXT", typeof(Delegates.glSeparableFilter2DEXT_));
        #endregion glSeparableFilter2DEXT_

        #region glColorTableSGI_
        public static Delegates.glColorTableSGI_ glColorTableSGI_ = (Delegates.glColorTableSGI_)GetAddress("glColorTableSGI", typeof(Delegates.glColorTableSGI_));
        #endregion glColorTableSGI_

        #region glColorTableParameterfvSGI_
        public static Delegates.glColorTableParameterfvSGI_ glColorTableParameterfvSGI_ = (Delegates.glColorTableParameterfvSGI_)GetAddress("glColorTableParameterfvSGI", typeof(Delegates.glColorTableParameterfvSGI_));
        #endregion glColorTableParameterfvSGI_

        #region glColorTableParameterivSGI_
        public static Delegates.glColorTableParameterivSGI_ glColorTableParameterivSGI_ = (Delegates.glColorTableParameterivSGI_)GetAddress("glColorTableParameterivSGI", typeof(Delegates.glColorTableParameterivSGI_));
        #endregion glColorTableParameterivSGI_

        #region glCopyColorTableSGI
        public static Delegates.glCopyColorTableSGI glCopyColorTableSGI = (Delegates.glCopyColorTableSGI)GetAddress("glCopyColorTableSGI", typeof(Delegates.glCopyColorTableSGI));
        #endregion glCopyColorTableSGI

        #region glGetColorTableSGI_
        public static Delegates.glGetColorTableSGI_ glGetColorTableSGI_ = (Delegates.glGetColorTableSGI_)GetAddress("glGetColorTableSGI", typeof(Delegates.glGetColorTableSGI_));
        #endregion glGetColorTableSGI_

        #region glGetColorTableParameterfvSGI_
        public static Delegates.glGetColorTableParameterfvSGI_ glGetColorTableParameterfvSGI_ = (Delegates.glGetColorTableParameterfvSGI_)GetAddress("glGetColorTableParameterfvSGI", typeof(Delegates.glGetColorTableParameterfvSGI_));
        #endregion glGetColorTableParameterfvSGI_

        #region glGetColorTableParameterivSGI_
        public static Delegates.glGetColorTableParameterivSGI_ glGetColorTableParameterivSGI_ = (Delegates.glGetColorTableParameterivSGI_)GetAddress("glGetColorTableParameterivSGI", typeof(Delegates.glGetColorTableParameterivSGI_));
        #endregion glGetColorTableParameterivSGI_

        #region glPixelTexGenSGIX
        public static Delegates.glPixelTexGenSGIX glPixelTexGenSGIX = (Delegates.glPixelTexGenSGIX)GetAddress("glPixelTexGenSGIX", typeof(Delegates.glPixelTexGenSGIX));
        #endregion glPixelTexGenSGIX

        #region glPixelTexGenParameteriSGIS
        public static Delegates.glPixelTexGenParameteriSGIS glPixelTexGenParameteriSGIS = (Delegates.glPixelTexGenParameteriSGIS)GetAddress("glPixelTexGenParameteriSGIS", typeof(Delegates.glPixelTexGenParameteriSGIS));
        #endregion glPixelTexGenParameteriSGIS

        #region glPixelTexGenParameterivSGIS_
        public static Delegates.glPixelTexGenParameterivSGIS_ glPixelTexGenParameterivSGIS_ = (Delegates.glPixelTexGenParameterivSGIS_)GetAddress("glPixelTexGenParameterivSGIS", typeof(Delegates.glPixelTexGenParameterivSGIS_));
        #endregion glPixelTexGenParameterivSGIS_

        #region glPixelTexGenParameterfSGIS
        public static Delegates.glPixelTexGenParameterfSGIS glPixelTexGenParameterfSGIS = (Delegates.glPixelTexGenParameterfSGIS)GetAddress("glPixelTexGenParameterfSGIS", typeof(Delegates.glPixelTexGenParameterfSGIS));
        #endregion glPixelTexGenParameterfSGIS

        #region glPixelTexGenParameterfvSGIS_
        public static Delegates.glPixelTexGenParameterfvSGIS_ glPixelTexGenParameterfvSGIS_ = (Delegates.glPixelTexGenParameterfvSGIS_)GetAddress("glPixelTexGenParameterfvSGIS", typeof(Delegates.glPixelTexGenParameterfvSGIS_));
        #endregion glPixelTexGenParameterfvSGIS_

        #region glGetPixelTexGenParameterivSGIS_
        public static Delegates.glGetPixelTexGenParameterivSGIS_ glGetPixelTexGenParameterivSGIS_ = (Delegates.glGetPixelTexGenParameterivSGIS_)GetAddress("glGetPixelTexGenParameterivSGIS", typeof(Delegates.glGetPixelTexGenParameterivSGIS_));
        #endregion glGetPixelTexGenParameterivSGIS_

        #region glGetPixelTexGenParameterfvSGIS_
        public static Delegates.glGetPixelTexGenParameterfvSGIS_ glGetPixelTexGenParameterfvSGIS_ = (Delegates.glGetPixelTexGenParameterfvSGIS_)GetAddress("glGetPixelTexGenParameterfvSGIS", typeof(Delegates.glGetPixelTexGenParameterfvSGIS_));
        #endregion glGetPixelTexGenParameterfvSGIS_

        #region glTexImage4DSGIS_
        public static Delegates.glTexImage4DSGIS_ glTexImage4DSGIS_ = (Delegates.glTexImage4DSGIS_)GetAddress("glTexImage4DSGIS", typeof(Delegates.glTexImage4DSGIS_));
        #endregion glTexImage4DSGIS_

        #region glTexSubImage4DSGIS_
        public static Delegates.glTexSubImage4DSGIS_ glTexSubImage4DSGIS_ = (Delegates.glTexSubImage4DSGIS_)GetAddress("glTexSubImage4DSGIS", typeof(Delegates.glTexSubImage4DSGIS_));
        #endregion glTexSubImage4DSGIS_

        #region glAreTexturesResidentEXT_
        public static Delegates.glAreTexturesResidentEXT_ glAreTexturesResidentEXT_ = (Delegates.glAreTexturesResidentEXT_)GetAddress("glAreTexturesResidentEXT", typeof(Delegates.glAreTexturesResidentEXT_));
        #endregion glAreTexturesResidentEXT_

        #region glBindTextureEXT
        public static Delegates.glBindTextureEXT glBindTextureEXT = (Delegates.glBindTextureEXT)GetAddress("glBindTextureEXT", typeof(Delegates.glBindTextureEXT));
        #endregion glBindTextureEXT

        #region glDeleteTexturesEXT_
        public static Delegates.glDeleteTexturesEXT_ glDeleteTexturesEXT_ = (Delegates.glDeleteTexturesEXT_)GetAddress("glDeleteTexturesEXT", typeof(Delegates.glDeleteTexturesEXT_));
        #endregion glDeleteTexturesEXT_

        #region glGenTexturesEXT_
        public static Delegates.glGenTexturesEXT_ glGenTexturesEXT_ = (Delegates.glGenTexturesEXT_)GetAddress("glGenTexturesEXT", typeof(Delegates.glGenTexturesEXT_));
        #endregion glGenTexturesEXT_

        #region glIsTextureEXT
        public static Delegates.glIsTextureEXT glIsTextureEXT = (Delegates.glIsTextureEXT)GetAddress("glIsTextureEXT", typeof(Delegates.glIsTextureEXT));
        #endregion glIsTextureEXT

        #region glPrioritizeTexturesEXT_
        public static Delegates.glPrioritizeTexturesEXT_ glPrioritizeTexturesEXT_ = (Delegates.glPrioritizeTexturesEXT_)GetAddress("glPrioritizeTexturesEXT", typeof(Delegates.glPrioritizeTexturesEXT_));
        #endregion glPrioritizeTexturesEXT_

        #region glDetailTexFuncSGIS_
        public static Delegates.glDetailTexFuncSGIS_ glDetailTexFuncSGIS_ = (Delegates.glDetailTexFuncSGIS_)GetAddress("glDetailTexFuncSGIS", typeof(Delegates.glDetailTexFuncSGIS_));
        #endregion glDetailTexFuncSGIS_

        #region glGetDetailTexFuncSGIS_
        public static Delegates.glGetDetailTexFuncSGIS_ glGetDetailTexFuncSGIS_ = (Delegates.glGetDetailTexFuncSGIS_)GetAddress("glGetDetailTexFuncSGIS", typeof(Delegates.glGetDetailTexFuncSGIS_));
        #endregion glGetDetailTexFuncSGIS_

        #region glSharpenTexFuncSGIS_
        public static Delegates.glSharpenTexFuncSGIS_ glSharpenTexFuncSGIS_ = (Delegates.glSharpenTexFuncSGIS_)GetAddress("glSharpenTexFuncSGIS", typeof(Delegates.glSharpenTexFuncSGIS_));
        #endregion glSharpenTexFuncSGIS_

        #region glGetSharpenTexFuncSGIS_
        public static Delegates.glGetSharpenTexFuncSGIS_ glGetSharpenTexFuncSGIS_ = (Delegates.glGetSharpenTexFuncSGIS_)GetAddress("glGetSharpenTexFuncSGIS", typeof(Delegates.glGetSharpenTexFuncSGIS_));
        #endregion glGetSharpenTexFuncSGIS_

        #region glSampleMaskSGIS
        public static Delegates.glSampleMaskSGIS glSampleMaskSGIS = (Delegates.glSampleMaskSGIS)GetAddress("glSampleMaskSGIS", typeof(Delegates.glSampleMaskSGIS));
        #endregion glSampleMaskSGIS

        #region glSamplePatternSGIS
        public static Delegates.glSamplePatternSGIS glSamplePatternSGIS = (Delegates.glSamplePatternSGIS)GetAddress("glSamplePatternSGIS", typeof(Delegates.glSamplePatternSGIS));
        #endregion glSamplePatternSGIS

        #region glArrayElementEXT
        public static Delegates.glArrayElementEXT glArrayElementEXT = (Delegates.glArrayElementEXT)GetAddress("glArrayElementEXT", typeof(Delegates.glArrayElementEXT));
        #endregion glArrayElementEXT

        #region glColorPointerEXT_
        public static Delegates.glColorPointerEXT_ glColorPointerEXT_ = (Delegates.glColorPointerEXT_)GetAddress("glColorPointerEXT", typeof(Delegates.glColorPointerEXT_));
        #endregion glColorPointerEXT_

        #region glDrawArraysEXT
        public static Delegates.glDrawArraysEXT glDrawArraysEXT = (Delegates.glDrawArraysEXT)GetAddress("glDrawArraysEXT", typeof(Delegates.glDrawArraysEXT));
        #endregion glDrawArraysEXT

        #region glEdgeFlagPointerEXT_
        public static Delegates.glEdgeFlagPointerEXT_ glEdgeFlagPointerEXT_ = (Delegates.glEdgeFlagPointerEXT_)GetAddress("glEdgeFlagPointerEXT", typeof(Delegates.glEdgeFlagPointerEXT_));
        #endregion glEdgeFlagPointerEXT_

        #region glGetPointervEXT_
        public static Delegates.glGetPointervEXT_ glGetPointervEXT_ = (Delegates.glGetPointervEXT_)GetAddress("glGetPointervEXT", typeof(Delegates.glGetPointervEXT_));
        #endregion glGetPointervEXT_

        #region glIndexPointerEXT_
        public static Delegates.glIndexPointerEXT_ glIndexPointerEXT_ = (Delegates.glIndexPointerEXT_)GetAddress("glIndexPointerEXT", typeof(Delegates.glIndexPointerEXT_));
        #endregion glIndexPointerEXT_

        #region glNormalPointerEXT_
        public static Delegates.glNormalPointerEXT_ glNormalPointerEXT_ = (Delegates.glNormalPointerEXT_)GetAddress("glNormalPointerEXT", typeof(Delegates.glNormalPointerEXT_));
        #endregion glNormalPointerEXT_

        #region glTexCoordPointerEXT_
        public static Delegates.glTexCoordPointerEXT_ glTexCoordPointerEXT_ = (Delegates.glTexCoordPointerEXT_)GetAddress("glTexCoordPointerEXT", typeof(Delegates.glTexCoordPointerEXT_));
        #endregion glTexCoordPointerEXT_

        #region glVertexPointerEXT_
        public static Delegates.glVertexPointerEXT_ glVertexPointerEXT_ = (Delegates.glVertexPointerEXT_)GetAddress("glVertexPointerEXT", typeof(Delegates.glVertexPointerEXT_));
        #endregion glVertexPointerEXT_

        #region glBlendEquationEXT
        public static Delegates.glBlendEquationEXT glBlendEquationEXT = (Delegates.glBlendEquationEXT)GetAddress("glBlendEquationEXT", typeof(Delegates.glBlendEquationEXT));
        #endregion glBlendEquationEXT

        #region glSpriteParameterfSGIX
        public static Delegates.glSpriteParameterfSGIX glSpriteParameterfSGIX = (Delegates.glSpriteParameterfSGIX)GetAddress("glSpriteParameterfSGIX", typeof(Delegates.glSpriteParameterfSGIX));
        #endregion glSpriteParameterfSGIX

        #region glSpriteParameterfvSGIX_
        public static Delegates.glSpriteParameterfvSGIX_ glSpriteParameterfvSGIX_ = (Delegates.glSpriteParameterfvSGIX_)GetAddress("glSpriteParameterfvSGIX", typeof(Delegates.glSpriteParameterfvSGIX_));
        #endregion glSpriteParameterfvSGIX_

        #region glSpriteParameteriSGIX
        public static Delegates.glSpriteParameteriSGIX glSpriteParameteriSGIX = (Delegates.glSpriteParameteriSGIX)GetAddress("glSpriteParameteriSGIX", typeof(Delegates.glSpriteParameteriSGIX));
        #endregion glSpriteParameteriSGIX

        #region glSpriteParameterivSGIX_
        public static Delegates.glSpriteParameterivSGIX_ glSpriteParameterivSGIX_ = (Delegates.glSpriteParameterivSGIX_)GetAddress("glSpriteParameterivSGIX", typeof(Delegates.glSpriteParameterivSGIX_));
        #endregion glSpriteParameterivSGIX_

        #region glPointParameterfEXT
        public static Delegates.glPointParameterfEXT glPointParameterfEXT = (Delegates.glPointParameterfEXT)GetAddress("glPointParameterfEXT", typeof(Delegates.glPointParameterfEXT));
        #endregion glPointParameterfEXT

        #region glPointParameterfvEXT_
        public static Delegates.glPointParameterfvEXT_ glPointParameterfvEXT_ = (Delegates.glPointParameterfvEXT_)GetAddress("glPointParameterfvEXT", typeof(Delegates.glPointParameterfvEXT_));
        #endregion glPointParameterfvEXT_

        #region glPointParameterfSGIS
        public static Delegates.glPointParameterfSGIS glPointParameterfSGIS = (Delegates.glPointParameterfSGIS)GetAddress("glPointParameterfSGIS", typeof(Delegates.glPointParameterfSGIS));
        #endregion glPointParameterfSGIS

        #region glPointParameterfvSGIS_
        public static Delegates.glPointParameterfvSGIS_ glPointParameterfvSGIS_ = (Delegates.glPointParameterfvSGIS_)GetAddress("glPointParameterfvSGIS", typeof(Delegates.glPointParameterfvSGIS_));
        #endregion glPointParameterfvSGIS_

        #region glGetInstrumentsSGIX
        public static Delegates.glGetInstrumentsSGIX glGetInstrumentsSGIX = (Delegates.glGetInstrumentsSGIX)GetAddress("glGetInstrumentsSGIX", typeof(Delegates.glGetInstrumentsSGIX));
        #endregion glGetInstrumentsSGIX

        #region glInstrumentsBufferSGIX_
        public static Delegates.glInstrumentsBufferSGIX_ glInstrumentsBufferSGIX_ = (Delegates.glInstrumentsBufferSGIX_)GetAddress("glInstrumentsBufferSGIX", typeof(Delegates.glInstrumentsBufferSGIX_));
        #endregion glInstrumentsBufferSGIX_

        #region glPollInstrumentsSGIX_
        public static Delegates.glPollInstrumentsSGIX_ glPollInstrumentsSGIX_ = (Delegates.glPollInstrumentsSGIX_)GetAddress("glPollInstrumentsSGIX", typeof(Delegates.glPollInstrumentsSGIX_));
        #endregion glPollInstrumentsSGIX_

        #region glReadInstrumentsSGIX
        public static Delegates.glReadInstrumentsSGIX glReadInstrumentsSGIX = (Delegates.glReadInstrumentsSGIX)GetAddress("glReadInstrumentsSGIX", typeof(Delegates.glReadInstrumentsSGIX));
        #endregion glReadInstrumentsSGIX

        #region glStartInstrumentsSGIX
        public static Delegates.glStartInstrumentsSGIX glStartInstrumentsSGIX = (Delegates.glStartInstrumentsSGIX)GetAddress("glStartInstrumentsSGIX", typeof(Delegates.glStartInstrumentsSGIX));
        #endregion glStartInstrumentsSGIX

        #region glStopInstrumentsSGIX
        public static Delegates.glStopInstrumentsSGIX glStopInstrumentsSGIX = (Delegates.glStopInstrumentsSGIX)GetAddress("glStopInstrumentsSGIX", typeof(Delegates.glStopInstrumentsSGIX));
        #endregion glStopInstrumentsSGIX

        #region glFrameZoomSGIX
        public static Delegates.glFrameZoomSGIX glFrameZoomSGIX = (Delegates.glFrameZoomSGIX)GetAddress("glFrameZoomSGIX", typeof(Delegates.glFrameZoomSGIX));
        #endregion glFrameZoomSGIX

        #region glTagSampleBufferSGIX
        public static Delegates.glTagSampleBufferSGIX glTagSampleBufferSGIX = (Delegates.glTagSampleBufferSGIX)GetAddress("glTagSampleBufferSGIX", typeof(Delegates.glTagSampleBufferSGIX));
        #endregion glTagSampleBufferSGIX

        #region glDeformationMap3dSGIX_
        public static Delegates.glDeformationMap3dSGIX_ glDeformationMap3dSGIX_ = (Delegates.glDeformationMap3dSGIX_)GetAddress("glDeformationMap3dSGIX", typeof(Delegates.glDeformationMap3dSGIX_));
        #endregion glDeformationMap3dSGIX_

        #region glDeformationMap3fSGIX_
        public static Delegates.glDeformationMap3fSGIX_ glDeformationMap3fSGIX_ = (Delegates.glDeformationMap3fSGIX_)GetAddress("glDeformationMap3fSGIX", typeof(Delegates.glDeformationMap3fSGIX_));
        #endregion glDeformationMap3fSGIX_

        #region glDeformSGIX
        public static Delegates.glDeformSGIX glDeformSGIX = (Delegates.glDeformSGIX)GetAddress("glDeformSGIX", typeof(Delegates.glDeformSGIX));
        #endregion glDeformSGIX

        #region glLoadIdentityDeformationMapSGIX
        public static Delegates.glLoadIdentityDeformationMapSGIX glLoadIdentityDeformationMapSGIX = (Delegates.glLoadIdentityDeformationMapSGIX)GetAddress("glLoadIdentityDeformationMapSGIX", typeof(Delegates.glLoadIdentityDeformationMapSGIX));
        #endregion glLoadIdentityDeformationMapSGIX

        #region glReferencePlaneSGIX_
        public static Delegates.glReferencePlaneSGIX_ glReferencePlaneSGIX_ = (Delegates.glReferencePlaneSGIX_)GetAddress("glReferencePlaneSGIX", typeof(Delegates.glReferencePlaneSGIX_));
        #endregion glReferencePlaneSGIX_

        #region glFlushRasterSGIX
        public static Delegates.glFlushRasterSGIX glFlushRasterSGIX = (Delegates.glFlushRasterSGIX)GetAddress("glFlushRasterSGIX", typeof(Delegates.glFlushRasterSGIX));
        #endregion glFlushRasterSGIX

        #region glFogFuncSGIS_
        public static Delegates.glFogFuncSGIS_ glFogFuncSGIS_ = (Delegates.glFogFuncSGIS_)GetAddress("glFogFuncSGIS", typeof(Delegates.glFogFuncSGIS_));
        #endregion glFogFuncSGIS_

        #region glGetFogFuncSGIS_
        public static Delegates.glGetFogFuncSGIS_ glGetFogFuncSGIS_ = (Delegates.glGetFogFuncSGIS_)GetAddress("glGetFogFuncSGIS", typeof(Delegates.glGetFogFuncSGIS_));
        #endregion glGetFogFuncSGIS_

        #region glImageTransformParameteriHP
        public static Delegates.glImageTransformParameteriHP glImageTransformParameteriHP = (Delegates.glImageTransformParameteriHP)GetAddress("glImageTransformParameteriHP", typeof(Delegates.glImageTransformParameteriHP));
        #endregion glImageTransformParameteriHP

        #region glImageTransformParameterfHP
        public static Delegates.glImageTransformParameterfHP glImageTransformParameterfHP = (Delegates.glImageTransformParameterfHP)GetAddress("glImageTransformParameterfHP", typeof(Delegates.glImageTransformParameterfHP));
        #endregion glImageTransformParameterfHP

        #region glImageTransformParameterivHP_
        public static Delegates.glImageTransformParameterivHP_ glImageTransformParameterivHP_ = (Delegates.glImageTransformParameterivHP_)GetAddress("glImageTransformParameterivHP", typeof(Delegates.glImageTransformParameterivHP_));
        #endregion glImageTransformParameterivHP_

        #region glImageTransformParameterfvHP_
        public static Delegates.glImageTransformParameterfvHP_ glImageTransformParameterfvHP_ = (Delegates.glImageTransformParameterfvHP_)GetAddress("glImageTransformParameterfvHP", typeof(Delegates.glImageTransformParameterfvHP_));
        #endregion glImageTransformParameterfvHP_

        #region glGetImageTransformParameterivHP_
        public static Delegates.glGetImageTransformParameterivHP_ glGetImageTransformParameterivHP_ = (Delegates.glGetImageTransformParameterivHP_)GetAddress("glGetImageTransformParameterivHP", typeof(Delegates.glGetImageTransformParameterivHP_));
        #endregion glGetImageTransformParameterivHP_

        #region glGetImageTransformParameterfvHP_
        public static Delegates.glGetImageTransformParameterfvHP_ glGetImageTransformParameterfvHP_ = (Delegates.glGetImageTransformParameterfvHP_)GetAddress("glGetImageTransformParameterfvHP", typeof(Delegates.glGetImageTransformParameterfvHP_));
        #endregion glGetImageTransformParameterfvHP_

        #region glColorSubTableEXT_
        public static Delegates.glColorSubTableEXT_ glColorSubTableEXT_ = (Delegates.glColorSubTableEXT_)GetAddress("glColorSubTableEXT", typeof(Delegates.glColorSubTableEXT_));
        #endregion glColorSubTableEXT_

        #region glCopyColorSubTableEXT
        public static Delegates.glCopyColorSubTableEXT glCopyColorSubTableEXT = (Delegates.glCopyColorSubTableEXT)GetAddress("glCopyColorSubTableEXT", typeof(Delegates.glCopyColorSubTableEXT));
        #endregion glCopyColorSubTableEXT

        #region glHintPGI
        public static Delegates.glHintPGI glHintPGI = (Delegates.glHintPGI)GetAddress("glHintPGI", typeof(Delegates.glHintPGI));
        #endregion glHintPGI

        #region glColorTableEXT_
        public static Delegates.glColorTableEXT_ glColorTableEXT_ = (Delegates.glColorTableEXT_)GetAddress("glColorTableEXT", typeof(Delegates.glColorTableEXT_));
        #endregion glColorTableEXT_

        #region glGetColorTableEXT_
        public static Delegates.glGetColorTableEXT_ glGetColorTableEXT_ = (Delegates.glGetColorTableEXT_)GetAddress("glGetColorTableEXT", typeof(Delegates.glGetColorTableEXT_));
        #endregion glGetColorTableEXT_

        #region glGetColorTableParameterivEXT_
        public static Delegates.glGetColorTableParameterivEXT_ glGetColorTableParameterivEXT_ = (Delegates.glGetColorTableParameterivEXT_)GetAddress("glGetColorTableParameterivEXT", typeof(Delegates.glGetColorTableParameterivEXT_));
        #endregion glGetColorTableParameterivEXT_

        #region glGetColorTableParameterfvEXT_
        public static Delegates.glGetColorTableParameterfvEXT_ glGetColorTableParameterfvEXT_ = (Delegates.glGetColorTableParameterfvEXT_)GetAddress("glGetColorTableParameterfvEXT", typeof(Delegates.glGetColorTableParameterfvEXT_));
        #endregion glGetColorTableParameterfvEXT_

        #region glGetListParameterfvSGIX_
        public static Delegates.glGetListParameterfvSGIX_ glGetListParameterfvSGIX_ = (Delegates.glGetListParameterfvSGIX_)GetAddress("glGetListParameterfvSGIX", typeof(Delegates.glGetListParameterfvSGIX_));
        #endregion glGetListParameterfvSGIX_

        #region glGetListParameterivSGIX_
        public static Delegates.glGetListParameterivSGIX_ glGetListParameterivSGIX_ = (Delegates.glGetListParameterivSGIX_)GetAddress("glGetListParameterivSGIX", typeof(Delegates.glGetListParameterivSGIX_));
        #endregion glGetListParameterivSGIX_

        #region glListParameterfSGIX
        public static Delegates.glListParameterfSGIX glListParameterfSGIX = (Delegates.glListParameterfSGIX)GetAddress("glListParameterfSGIX", typeof(Delegates.glListParameterfSGIX));
        #endregion glListParameterfSGIX

        #region glListParameterfvSGIX_
        public static Delegates.glListParameterfvSGIX_ glListParameterfvSGIX_ = (Delegates.glListParameterfvSGIX_)GetAddress("glListParameterfvSGIX", typeof(Delegates.glListParameterfvSGIX_));
        #endregion glListParameterfvSGIX_

        #region glListParameteriSGIX
        public static Delegates.glListParameteriSGIX glListParameteriSGIX = (Delegates.glListParameteriSGIX)GetAddress("glListParameteriSGIX", typeof(Delegates.glListParameteriSGIX));
        #endregion glListParameteriSGIX

        #region glListParameterivSGIX_
        public static Delegates.glListParameterivSGIX_ glListParameterivSGIX_ = (Delegates.glListParameterivSGIX_)GetAddress("glListParameterivSGIX", typeof(Delegates.glListParameterivSGIX_));
        #endregion glListParameterivSGIX_

        #region glIndexMaterialEXT
        public static Delegates.glIndexMaterialEXT glIndexMaterialEXT = (Delegates.glIndexMaterialEXT)GetAddress("glIndexMaterialEXT", typeof(Delegates.glIndexMaterialEXT));
        #endregion glIndexMaterialEXT

        #region glIndexFuncEXT
        public static Delegates.glIndexFuncEXT glIndexFuncEXT = (Delegates.glIndexFuncEXT)GetAddress("glIndexFuncEXT", typeof(Delegates.glIndexFuncEXT));
        #endregion glIndexFuncEXT

        #region glLockArraysEXT
        public static Delegates.glLockArraysEXT glLockArraysEXT = (Delegates.glLockArraysEXT)GetAddress("glLockArraysEXT", typeof(Delegates.glLockArraysEXT));
        #endregion glLockArraysEXT

        #region glUnlockArraysEXT
        public static Delegates.glUnlockArraysEXT glUnlockArraysEXT = (Delegates.glUnlockArraysEXT)GetAddress("glUnlockArraysEXT", typeof(Delegates.glUnlockArraysEXT));
        #endregion glUnlockArraysEXT

        #region glCullParameterdvEXT_
        public static Delegates.glCullParameterdvEXT_ glCullParameterdvEXT_ = (Delegates.glCullParameterdvEXT_)GetAddress("glCullParameterdvEXT", typeof(Delegates.glCullParameterdvEXT_));
        #endregion glCullParameterdvEXT_

        #region glCullParameterfvEXT_
        public static Delegates.glCullParameterfvEXT_ glCullParameterfvEXT_ = (Delegates.glCullParameterfvEXT_)GetAddress("glCullParameterfvEXT", typeof(Delegates.glCullParameterfvEXT_));
        #endregion glCullParameterfvEXT_

        #region glFragmentColorMaterialSGIX
        public static Delegates.glFragmentColorMaterialSGIX glFragmentColorMaterialSGIX = (Delegates.glFragmentColorMaterialSGIX)GetAddress("glFragmentColorMaterialSGIX", typeof(Delegates.glFragmentColorMaterialSGIX));
        #endregion glFragmentColorMaterialSGIX

        #region glFragmentLightfSGIX
        public static Delegates.glFragmentLightfSGIX glFragmentLightfSGIX = (Delegates.glFragmentLightfSGIX)GetAddress("glFragmentLightfSGIX", typeof(Delegates.glFragmentLightfSGIX));
        #endregion glFragmentLightfSGIX

        #region glFragmentLightfvSGIX_
        public static Delegates.glFragmentLightfvSGIX_ glFragmentLightfvSGIX_ = (Delegates.glFragmentLightfvSGIX_)GetAddress("glFragmentLightfvSGIX", typeof(Delegates.glFragmentLightfvSGIX_));
        #endregion glFragmentLightfvSGIX_

        #region glFragmentLightiSGIX
        public static Delegates.glFragmentLightiSGIX glFragmentLightiSGIX = (Delegates.glFragmentLightiSGIX)GetAddress("glFragmentLightiSGIX", typeof(Delegates.glFragmentLightiSGIX));
        #endregion glFragmentLightiSGIX

        #region glFragmentLightivSGIX_
        public static Delegates.glFragmentLightivSGIX_ glFragmentLightivSGIX_ = (Delegates.glFragmentLightivSGIX_)GetAddress("glFragmentLightivSGIX", typeof(Delegates.glFragmentLightivSGIX_));
        #endregion glFragmentLightivSGIX_

        #region glFragmentLightModelfSGIX
        public static Delegates.glFragmentLightModelfSGIX glFragmentLightModelfSGIX = (Delegates.glFragmentLightModelfSGIX)GetAddress("glFragmentLightModelfSGIX", typeof(Delegates.glFragmentLightModelfSGIX));
        #endregion glFragmentLightModelfSGIX

        #region glFragmentLightModelfvSGIX_
        public static Delegates.glFragmentLightModelfvSGIX_ glFragmentLightModelfvSGIX_ = (Delegates.glFragmentLightModelfvSGIX_)GetAddress("glFragmentLightModelfvSGIX", typeof(Delegates.glFragmentLightModelfvSGIX_));
        #endregion glFragmentLightModelfvSGIX_

        #region glFragmentLightModeliSGIX
        public static Delegates.glFragmentLightModeliSGIX glFragmentLightModeliSGIX = (Delegates.glFragmentLightModeliSGIX)GetAddress("glFragmentLightModeliSGIX", typeof(Delegates.glFragmentLightModeliSGIX));
        #endregion glFragmentLightModeliSGIX

        #region glFragmentLightModelivSGIX_
        public static Delegates.glFragmentLightModelivSGIX_ glFragmentLightModelivSGIX_ = (Delegates.glFragmentLightModelivSGIX_)GetAddress("glFragmentLightModelivSGIX", typeof(Delegates.glFragmentLightModelivSGIX_));
        #endregion glFragmentLightModelivSGIX_

        #region glFragmentMaterialfSGIX
        public static Delegates.glFragmentMaterialfSGIX glFragmentMaterialfSGIX = (Delegates.glFragmentMaterialfSGIX)GetAddress("glFragmentMaterialfSGIX", typeof(Delegates.glFragmentMaterialfSGIX));
        #endregion glFragmentMaterialfSGIX

        #region glFragmentMaterialfvSGIX_
        public static Delegates.glFragmentMaterialfvSGIX_ glFragmentMaterialfvSGIX_ = (Delegates.glFragmentMaterialfvSGIX_)GetAddress("glFragmentMaterialfvSGIX", typeof(Delegates.glFragmentMaterialfvSGIX_));
        #endregion glFragmentMaterialfvSGIX_

        #region glFragmentMaterialiSGIX
        public static Delegates.glFragmentMaterialiSGIX glFragmentMaterialiSGIX = (Delegates.glFragmentMaterialiSGIX)GetAddress("glFragmentMaterialiSGIX", typeof(Delegates.glFragmentMaterialiSGIX));
        #endregion glFragmentMaterialiSGIX

        #region glFragmentMaterialivSGIX_
        public static Delegates.glFragmentMaterialivSGIX_ glFragmentMaterialivSGIX_ = (Delegates.glFragmentMaterialivSGIX_)GetAddress("glFragmentMaterialivSGIX", typeof(Delegates.glFragmentMaterialivSGIX_));
        #endregion glFragmentMaterialivSGIX_

        #region glGetFragmentLightfvSGIX_
        public static Delegates.glGetFragmentLightfvSGIX_ glGetFragmentLightfvSGIX_ = (Delegates.glGetFragmentLightfvSGIX_)GetAddress("glGetFragmentLightfvSGIX", typeof(Delegates.glGetFragmentLightfvSGIX_));
        #endregion glGetFragmentLightfvSGIX_

        #region glGetFragmentLightivSGIX_
        public static Delegates.glGetFragmentLightivSGIX_ glGetFragmentLightivSGIX_ = (Delegates.glGetFragmentLightivSGIX_)GetAddress("glGetFragmentLightivSGIX", typeof(Delegates.glGetFragmentLightivSGIX_));
        #endregion glGetFragmentLightivSGIX_

        #region glGetFragmentMaterialfvSGIX_
        public static Delegates.glGetFragmentMaterialfvSGIX_ glGetFragmentMaterialfvSGIX_ = (Delegates.glGetFragmentMaterialfvSGIX_)GetAddress("glGetFragmentMaterialfvSGIX", typeof(Delegates.glGetFragmentMaterialfvSGIX_));
        #endregion glGetFragmentMaterialfvSGIX_

        #region glGetFragmentMaterialivSGIX_
        public static Delegates.glGetFragmentMaterialivSGIX_ glGetFragmentMaterialivSGIX_ = (Delegates.glGetFragmentMaterialivSGIX_)GetAddress("glGetFragmentMaterialivSGIX", typeof(Delegates.glGetFragmentMaterialivSGIX_));
        #endregion glGetFragmentMaterialivSGIX_

        #region glLightEnviSGIX
        public static Delegates.glLightEnviSGIX glLightEnviSGIX = (Delegates.glLightEnviSGIX)GetAddress("glLightEnviSGIX", typeof(Delegates.glLightEnviSGIX));
        #endregion glLightEnviSGIX

        #region glDrawRangeElementsEXT_
        public static Delegates.glDrawRangeElementsEXT_ glDrawRangeElementsEXT_ = (Delegates.glDrawRangeElementsEXT_)GetAddress("glDrawRangeElementsEXT", typeof(Delegates.glDrawRangeElementsEXT_));
        #endregion glDrawRangeElementsEXT_

        #region glApplyTextureEXT
        public static Delegates.glApplyTextureEXT glApplyTextureEXT = (Delegates.glApplyTextureEXT)GetAddress("glApplyTextureEXT", typeof(Delegates.glApplyTextureEXT));
        #endregion glApplyTextureEXT

        #region glTextureLightEXT
        public static Delegates.glTextureLightEXT glTextureLightEXT = (Delegates.glTextureLightEXT)GetAddress("glTextureLightEXT", typeof(Delegates.glTextureLightEXT));
        #endregion glTextureLightEXT

        #region glTextureMaterialEXT
        public static Delegates.glTextureMaterialEXT glTextureMaterialEXT = (Delegates.glTextureMaterialEXT)GetAddress("glTextureMaterialEXT", typeof(Delegates.glTextureMaterialEXT));
        #endregion glTextureMaterialEXT

        #region glAsyncMarkerSGIX
        public static Delegates.glAsyncMarkerSGIX glAsyncMarkerSGIX = (Delegates.glAsyncMarkerSGIX)GetAddress("glAsyncMarkerSGIX", typeof(Delegates.glAsyncMarkerSGIX));
        #endregion glAsyncMarkerSGIX

        #region glFinishAsyncSGIX_
        public static Delegates.glFinishAsyncSGIX_ glFinishAsyncSGIX_ = (Delegates.glFinishAsyncSGIX_)GetAddress("glFinishAsyncSGIX", typeof(Delegates.glFinishAsyncSGIX_));
        #endregion glFinishAsyncSGIX_

        #region glPollAsyncSGIX_
        public static Delegates.glPollAsyncSGIX_ glPollAsyncSGIX_ = (Delegates.glPollAsyncSGIX_)GetAddress("glPollAsyncSGIX", typeof(Delegates.glPollAsyncSGIX_));
        #endregion glPollAsyncSGIX_

        #region glGenAsyncMarkersSGIX
        public static Delegates.glGenAsyncMarkersSGIX glGenAsyncMarkersSGIX = (Delegates.glGenAsyncMarkersSGIX)GetAddress("glGenAsyncMarkersSGIX", typeof(Delegates.glGenAsyncMarkersSGIX));
        #endregion glGenAsyncMarkersSGIX

        #region glDeleteAsyncMarkersSGIX
        public static Delegates.glDeleteAsyncMarkersSGIX glDeleteAsyncMarkersSGIX = (Delegates.glDeleteAsyncMarkersSGIX)GetAddress("glDeleteAsyncMarkersSGIX", typeof(Delegates.glDeleteAsyncMarkersSGIX));
        #endregion glDeleteAsyncMarkersSGIX

        #region glIsAsyncMarkerSGIX
        public static Delegates.glIsAsyncMarkerSGIX glIsAsyncMarkerSGIX = (Delegates.glIsAsyncMarkerSGIX)GetAddress("glIsAsyncMarkerSGIX", typeof(Delegates.glIsAsyncMarkerSGIX));
        #endregion glIsAsyncMarkerSGIX

        #region glVertexPointervINTEL_
        public static Delegates.glVertexPointervINTEL_ glVertexPointervINTEL_ = (Delegates.glVertexPointervINTEL_)GetAddress("glVertexPointervINTEL", typeof(Delegates.glVertexPointervINTEL_));
        #endregion glVertexPointervINTEL_

        #region glNormalPointervINTEL_
        public static Delegates.glNormalPointervINTEL_ glNormalPointervINTEL_ = (Delegates.glNormalPointervINTEL_)GetAddress("glNormalPointervINTEL", typeof(Delegates.glNormalPointervINTEL_));
        #endregion glNormalPointervINTEL_

        #region glColorPointervINTEL_
        public static Delegates.glColorPointervINTEL_ glColorPointervINTEL_ = (Delegates.glColorPointervINTEL_)GetAddress("glColorPointervINTEL", typeof(Delegates.glColorPointervINTEL_));
        #endregion glColorPointervINTEL_

        #region glTexCoordPointervINTEL_
        public static Delegates.glTexCoordPointervINTEL_ glTexCoordPointervINTEL_ = (Delegates.glTexCoordPointervINTEL_)GetAddress("glTexCoordPointervINTEL", typeof(Delegates.glTexCoordPointervINTEL_));
        #endregion glTexCoordPointervINTEL_

        #region glPixelTransformParameteriEXT
        public static Delegates.glPixelTransformParameteriEXT glPixelTransformParameteriEXT = (Delegates.glPixelTransformParameteriEXT)GetAddress("glPixelTransformParameteriEXT", typeof(Delegates.glPixelTransformParameteriEXT));
        #endregion glPixelTransformParameteriEXT

        #region glPixelTransformParameterfEXT
        public static Delegates.glPixelTransformParameterfEXT glPixelTransformParameterfEXT = (Delegates.glPixelTransformParameterfEXT)GetAddress("glPixelTransformParameterfEXT", typeof(Delegates.glPixelTransformParameterfEXT));
        #endregion glPixelTransformParameterfEXT

        #region glPixelTransformParameterivEXT_
        public static Delegates.glPixelTransformParameterivEXT_ glPixelTransformParameterivEXT_ = (Delegates.glPixelTransformParameterivEXT_)GetAddress("glPixelTransformParameterivEXT", typeof(Delegates.glPixelTransformParameterivEXT_));
        #endregion glPixelTransformParameterivEXT_

        #region glPixelTransformParameterfvEXT_
        public static Delegates.glPixelTransformParameterfvEXT_ glPixelTransformParameterfvEXT_ = (Delegates.glPixelTransformParameterfvEXT_)GetAddress("glPixelTransformParameterfvEXT", typeof(Delegates.glPixelTransformParameterfvEXT_));
        #endregion glPixelTransformParameterfvEXT_

        #region glSecondaryColor3bEXT
        public static Delegates.glSecondaryColor3bEXT glSecondaryColor3bEXT = (Delegates.glSecondaryColor3bEXT)GetAddress("glSecondaryColor3bEXT", typeof(Delegates.glSecondaryColor3bEXT));
        #endregion glSecondaryColor3bEXT

        #region glSecondaryColor3bvEXT_
        public static Delegates.glSecondaryColor3bvEXT_ glSecondaryColor3bvEXT_ = (Delegates.glSecondaryColor3bvEXT_)GetAddress("glSecondaryColor3bvEXT", typeof(Delegates.glSecondaryColor3bvEXT_));
        #endregion glSecondaryColor3bvEXT_

        #region glSecondaryColor3dEXT
        public static Delegates.glSecondaryColor3dEXT glSecondaryColor3dEXT = (Delegates.glSecondaryColor3dEXT)GetAddress("glSecondaryColor3dEXT", typeof(Delegates.glSecondaryColor3dEXT));
        #endregion glSecondaryColor3dEXT

        #region glSecondaryColor3dvEXT_
        public static Delegates.glSecondaryColor3dvEXT_ glSecondaryColor3dvEXT_ = (Delegates.glSecondaryColor3dvEXT_)GetAddress("glSecondaryColor3dvEXT", typeof(Delegates.glSecondaryColor3dvEXT_));
        #endregion glSecondaryColor3dvEXT_

        #region glSecondaryColor3fEXT
        public static Delegates.glSecondaryColor3fEXT glSecondaryColor3fEXT = (Delegates.glSecondaryColor3fEXT)GetAddress("glSecondaryColor3fEXT", typeof(Delegates.glSecondaryColor3fEXT));
        #endregion glSecondaryColor3fEXT

        #region glSecondaryColor3fvEXT_
        public static Delegates.glSecondaryColor3fvEXT_ glSecondaryColor3fvEXT_ = (Delegates.glSecondaryColor3fvEXT_)GetAddress("glSecondaryColor3fvEXT", typeof(Delegates.glSecondaryColor3fvEXT_));
        #endregion glSecondaryColor3fvEXT_

        #region glSecondaryColor3iEXT
        public static Delegates.glSecondaryColor3iEXT glSecondaryColor3iEXT = (Delegates.glSecondaryColor3iEXT)GetAddress("glSecondaryColor3iEXT", typeof(Delegates.glSecondaryColor3iEXT));
        #endregion glSecondaryColor3iEXT

        #region glSecondaryColor3ivEXT_
        public static Delegates.glSecondaryColor3ivEXT_ glSecondaryColor3ivEXT_ = (Delegates.glSecondaryColor3ivEXT_)GetAddress("glSecondaryColor3ivEXT", typeof(Delegates.glSecondaryColor3ivEXT_));
        #endregion glSecondaryColor3ivEXT_

        #region glSecondaryColor3sEXT
        public static Delegates.glSecondaryColor3sEXT glSecondaryColor3sEXT = (Delegates.glSecondaryColor3sEXT)GetAddress("glSecondaryColor3sEXT", typeof(Delegates.glSecondaryColor3sEXT));
        #endregion glSecondaryColor3sEXT

        #region glSecondaryColor3svEXT_
        public static Delegates.glSecondaryColor3svEXT_ glSecondaryColor3svEXT_ = (Delegates.glSecondaryColor3svEXT_)GetAddress("glSecondaryColor3svEXT", typeof(Delegates.glSecondaryColor3svEXT_));
        #endregion glSecondaryColor3svEXT_

        #region glSecondaryColor3ubEXT
        public static Delegates.glSecondaryColor3ubEXT glSecondaryColor3ubEXT = (Delegates.glSecondaryColor3ubEXT)GetAddress("glSecondaryColor3ubEXT", typeof(Delegates.glSecondaryColor3ubEXT));
        #endregion glSecondaryColor3ubEXT

        #region glSecondaryColor3ubvEXT_
        public static Delegates.glSecondaryColor3ubvEXT_ glSecondaryColor3ubvEXT_ = (Delegates.glSecondaryColor3ubvEXT_)GetAddress("glSecondaryColor3ubvEXT", typeof(Delegates.glSecondaryColor3ubvEXT_));
        #endregion glSecondaryColor3ubvEXT_

        #region glSecondaryColor3uiEXT
        public static Delegates.glSecondaryColor3uiEXT glSecondaryColor3uiEXT = (Delegates.glSecondaryColor3uiEXT)GetAddress("glSecondaryColor3uiEXT", typeof(Delegates.glSecondaryColor3uiEXT));
        #endregion glSecondaryColor3uiEXT

        #region glSecondaryColor3uivEXT_
        public static Delegates.glSecondaryColor3uivEXT_ glSecondaryColor3uivEXT_ = (Delegates.glSecondaryColor3uivEXT_)GetAddress("glSecondaryColor3uivEXT", typeof(Delegates.glSecondaryColor3uivEXT_));
        #endregion glSecondaryColor3uivEXT_

        #region glSecondaryColor3usEXT
        public static Delegates.glSecondaryColor3usEXT glSecondaryColor3usEXT = (Delegates.glSecondaryColor3usEXT)GetAddress("glSecondaryColor3usEXT", typeof(Delegates.glSecondaryColor3usEXT));
        #endregion glSecondaryColor3usEXT

        #region glSecondaryColor3usvEXT_
        public static Delegates.glSecondaryColor3usvEXT_ glSecondaryColor3usvEXT_ = (Delegates.glSecondaryColor3usvEXT_)GetAddress("glSecondaryColor3usvEXT", typeof(Delegates.glSecondaryColor3usvEXT_));
        #endregion glSecondaryColor3usvEXT_

        #region glSecondaryColorPointerEXT_
        public static Delegates.glSecondaryColorPointerEXT_ glSecondaryColorPointerEXT_ = (Delegates.glSecondaryColorPointerEXT_)GetAddress("glSecondaryColorPointerEXT", typeof(Delegates.glSecondaryColorPointerEXT_));
        #endregion glSecondaryColorPointerEXT_

        #region glTextureNormalEXT
        public static Delegates.glTextureNormalEXT glTextureNormalEXT = (Delegates.glTextureNormalEXT)GetAddress("glTextureNormalEXT", typeof(Delegates.glTextureNormalEXT));
        #endregion glTextureNormalEXT

        #region glMultiDrawArraysEXT_
        public static Delegates.glMultiDrawArraysEXT_ glMultiDrawArraysEXT_ = (Delegates.glMultiDrawArraysEXT_)GetAddress("glMultiDrawArraysEXT", typeof(Delegates.glMultiDrawArraysEXT_));
        #endregion glMultiDrawArraysEXT_

        #region glMultiDrawElementsEXT_
        public static Delegates.glMultiDrawElementsEXT_ glMultiDrawElementsEXT_ = (Delegates.glMultiDrawElementsEXT_)GetAddress("glMultiDrawElementsEXT", typeof(Delegates.glMultiDrawElementsEXT_));
        #endregion glMultiDrawElementsEXT_

        #region glFogCoordfEXT
        public static Delegates.glFogCoordfEXT glFogCoordfEXT = (Delegates.glFogCoordfEXT)GetAddress("glFogCoordfEXT", typeof(Delegates.glFogCoordfEXT));
        #endregion glFogCoordfEXT

        #region glFogCoordfvEXT_
        public static Delegates.glFogCoordfvEXT_ glFogCoordfvEXT_ = (Delegates.glFogCoordfvEXT_)GetAddress("glFogCoordfvEXT", typeof(Delegates.glFogCoordfvEXT_));
        #endregion glFogCoordfvEXT_

        #region glFogCoorddEXT
        public static Delegates.glFogCoorddEXT glFogCoorddEXT = (Delegates.glFogCoorddEXT)GetAddress("glFogCoorddEXT", typeof(Delegates.glFogCoorddEXT));
        #endregion glFogCoorddEXT

        #region glFogCoorddvEXT_
        public static Delegates.glFogCoorddvEXT_ glFogCoorddvEXT_ = (Delegates.glFogCoorddvEXT_)GetAddress("glFogCoorddvEXT", typeof(Delegates.glFogCoorddvEXT_));
        #endregion glFogCoorddvEXT_

        #region glFogCoordPointerEXT_
        public static Delegates.glFogCoordPointerEXT_ glFogCoordPointerEXT_ = (Delegates.glFogCoordPointerEXT_)GetAddress("glFogCoordPointerEXT", typeof(Delegates.glFogCoordPointerEXT_));
        #endregion glFogCoordPointerEXT_

        #region glTangent3bEXT
        public static Delegates.glTangent3bEXT glTangent3bEXT = (Delegates.glTangent3bEXT)GetAddress("glTangent3bEXT", typeof(Delegates.glTangent3bEXT));
        #endregion glTangent3bEXT

        #region glTangent3bvEXT_
        public static Delegates.glTangent3bvEXT_ glTangent3bvEXT_ = (Delegates.glTangent3bvEXT_)GetAddress("glTangent3bvEXT", typeof(Delegates.glTangent3bvEXT_));
        #endregion glTangent3bvEXT_

        #region glTangent3dEXT
        public static Delegates.glTangent3dEXT glTangent3dEXT = (Delegates.glTangent3dEXT)GetAddress("glTangent3dEXT", typeof(Delegates.glTangent3dEXT));
        #endregion glTangent3dEXT

        #region glTangent3dvEXT_
        public static Delegates.glTangent3dvEXT_ glTangent3dvEXT_ = (Delegates.glTangent3dvEXT_)GetAddress("glTangent3dvEXT", typeof(Delegates.glTangent3dvEXT_));
        #endregion glTangent3dvEXT_

        #region glTangent3fEXT
        public static Delegates.glTangent3fEXT glTangent3fEXT = (Delegates.glTangent3fEXT)GetAddress("glTangent3fEXT", typeof(Delegates.glTangent3fEXT));
        #endregion glTangent3fEXT

        #region glTangent3fvEXT_
        public static Delegates.glTangent3fvEXT_ glTangent3fvEXT_ = (Delegates.glTangent3fvEXT_)GetAddress("glTangent3fvEXT", typeof(Delegates.glTangent3fvEXT_));
        #endregion glTangent3fvEXT_

        #region glTangent3iEXT
        public static Delegates.glTangent3iEXT glTangent3iEXT = (Delegates.glTangent3iEXT)GetAddress("glTangent3iEXT", typeof(Delegates.glTangent3iEXT));
        #endregion glTangent3iEXT

        #region glTangent3ivEXT_
        public static Delegates.glTangent3ivEXT_ glTangent3ivEXT_ = (Delegates.glTangent3ivEXT_)GetAddress("glTangent3ivEXT", typeof(Delegates.glTangent3ivEXT_));
        #endregion glTangent3ivEXT_

        #region glTangent3sEXT
        public static Delegates.glTangent3sEXT glTangent3sEXT = (Delegates.glTangent3sEXT)GetAddress("glTangent3sEXT", typeof(Delegates.glTangent3sEXT));
        #endregion glTangent3sEXT

        #region glTangent3svEXT_
        public static Delegates.glTangent3svEXT_ glTangent3svEXT_ = (Delegates.glTangent3svEXT_)GetAddress("glTangent3svEXT", typeof(Delegates.glTangent3svEXT_));
        #endregion glTangent3svEXT_

        #region glBinormal3bEXT
        public static Delegates.glBinormal3bEXT glBinormal3bEXT = (Delegates.glBinormal3bEXT)GetAddress("glBinormal3bEXT", typeof(Delegates.glBinormal3bEXT));
        #endregion glBinormal3bEXT

        #region glBinormal3bvEXT_
        public static Delegates.glBinormal3bvEXT_ glBinormal3bvEXT_ = (Delegates.glBinormal3bvEXT_)GetAddress("glBinormal3bvEXT", typeof(Delegates.glBinormal3bvEXT_));
        #endregion glBinormal3bvEXT_

        #region glBinormal3dEXT
        public static Delegates.glBinormal3dEXT glBinormal3dEXT = (Delegates.glBinormal3dEXT)GetAddress("glBinormal3dEXT", typeof(Delegates.glBinormal3dEXT));
        #endregion glBinormal3dEXT

        #region glBinormal3dvEXT_
        public static Delegates.glBinormal3dvEXT_ glBinormal3dvEXT_ = (Delegates.glBinormal3dvEXT_)GetAddress("glBinormal3dvEXT", typeof(Delegates.glBinormal3dvEXT_));
        #endregion glBinormal3dvEXT_

        #region glBinormal3fEXT
        public static Delegates.glBinormal3fEXT glBinormal3fEXT = (Delegates.glBinormal3fEXT)GetAddress("glBinormal3fEXT", typeof(Delegates.glBinormal3fEXT));
        #endregion glBinormal3fEXT

        #region glBinormal3fvEXT_
        public static Delegates.glBinormal3fvEXT_ glBinormal3fvEXT_ = (Delegates.glBinormal3fvEXT_)GetAddress("glBinormal3fvEXT", typeof(Delegates.glBinormal3fvEXT_));
        #endregion glBinormal3fvEXT_

        #region glBinormal3iEXT
        public static Delegates.glBinormal3iEXT glBinormal3iEXT = (Delegates.glBinormal3iEXT)GetAddress("glBinormal3iEXT", typeof(Delegates.glBinormal3iEXT));
        #endregion glBinormal3iEXT

        #region glBinormal3ivEXT_
        public static Delegates.glBinormal3ivEXT_ glBinormal3ivEXT_ = (Delegates.glBinormal3ivEXT_)GetAddress("glBinormal3ivEXT", typeof(Delegates.glBinormal3ivEXT_));
        #endregion glBinormal3ivEXT_

        #region glBinormal3sEXT
        public static Delegates.glBinormal3sEXT glBinormal3sEXT = (Delegates.glBinormal3sEXT)GetAddress("glBinormal3sEXT", typeof(Delegates.glBinormal3sEXT));
        #endregion glBinormal3sEXT

        #region glBinormal3svEXT_
        public static Delegates.glBinormal3svEXT_ glBinormal3svEXT_ = (Delegates.glBinormal3svEXT_)GetAddress("glBinormal3svEXT", typeof(Delegates.glBinormal3svEXT_));
        #endregion glBinormal3svEXT_

        #region glTangentPointerEXT_
        public static Delegates.glTangentPointerEXT_ glTangentPointerEXT_ = (Delegates.glTangentPointerEXT_)GetAddress("glTangentPointerEXT", typeof(Delegates.glTangentPointerEXT_));
        #endregion glTangentPointerEXT_

        #region glBinormalPointerEXT_
        public static Delegates.glBinormalPointerEXT_ glBinormalPointerEXT_ = (Delegates.glBinormalPointerEXT_)GetAddress("glBinormalPointerEXT", typeof(Delegates.glBinormalPointerEXT_));
        #endregion glBinormalPointerEXT_

        #region glFinishTextureSUNX
        public static Delegates.glFinishTextureSUNX glFinishTextureSUNX = (Delegates.glFinishTextureSUNX)GetAddress("glFinishTextureSUNX", typeof(Delegates.glFinishTextureSUNX));
        #endregion glFinishTextureSUNX

        #region glGlobalAlphaFactorbSUN
        public static Delegates.glGlobalAlphaFactorbSUN glGlobalAlphaFactorbSUN = (Delegates.glGlobalAlphaFactorbSUN)GetAddress("glGlobalAlphaFactorbSUN", typeof(Delegates.glGlobalAlphaFactorbSUN));
        #endregion glGlobalAlphaFactorbSUN

        #region glGlobalAlphaFactorsSUN
        public static Delegates.glGlobalAlphaFactorsSUN glGlobalAlphaFactorsSUN = (Delegates.glGlobalAlphaFactorsSUN)GetAddress("glGlobalAlphaFactorsSUN", typeof(Delegates.glGlobalAlphaFactorsSUN));
        #endregion glGlobalAlphaFactorsSUN

        #region glGlobalAlphaFactoriSUN
        public static Delegates.glGlobalAlphaFactoriSUN glGlobalAlphaFactoriSUN = (Delegates.glGlobalAlphaFactoriSUN)GetAddress("glGlobalAlphaFactoriSUN", typeof(Delegates.glGlobalAlphaFactoriSUN));
        #endregion glGlobalAlphaFactoriSUN

        #region glGlobalAlphaFactorfSUN
        public static Delegates.glGlobalAlphaFactorfSUN glGlobalAlphaFactorfSUN = (Delegates.glGlobalAlphaFactorfSUN)GetAddress("glGlobalAlphaFactorfSUN", typeof(Delegates.glGlobalAlphaFactorfSUN));
        #endregion glGlobalAlphaFactorfSUN

        #region glGlobalAlphaFactordSUN
        public static Delegates.glGlobalAlphaFactordSUN glGlobalAlphaFactordSUN = (Delegates.glGlobalAlphaFactordSUN)GetAddress("glGlobalAlphaFactordSUN", typeof(Delegates.glGlobalAlphaFactordSUN));
        #endregion glGlobalAlphaFactordSUN

        #region glGlobalAlphaFactorubSUN
        public static Delegates.glGlobalAlphaFactorubSUN glGlobalAlphaFactorubSUN = (Delegates.glGlobalAlphaFactorubSUN)GetAddress("glGlobalAlphaFactorubSUN", typeof(Delegates.glGlobalAlphaFactorubSUN));
        #endregion glGlobalAlphaFactorubSUN

        #region glGlobalAlphaFactorusSUN
        public static Delegates.glGlobalAlphaFactorusSUN glGlobalAlphaFactorusSUN = (Delegates.glGlobalAlphaFactorusSUN)GetAddress("glGlobalAlphaFactorusSUN", typeof(Delegates.glGlobalAlphaFactorusSUN));
        #endregion glGlobalAlphaFactorusSUN

        #region glGlobalAlphaFactoruiSUN
        public static Delegates.glGlobalAlphaFactoruiSUN glGlobalAlphaFactoruiSUN = (Delegates.glGlobalAlphaFactoruiSUN)GetAddress("glGlobalAlphaFactoruiSUN", typeof(Delegates.glGlobalAlphaFactoruiSUN));
        #endregion glGlobalAlphaFactoruiSUN

        #region glReplacementCodeuiSUN
        public static Delegates.glReplacementCodeuiSUN glReplacementCodeuiSUN = (Delegates.glReplacementCodeuiSUN)GetAddress("glReplacementCodeuiSUN", typeof(Delegates.glReplacementCodeuiSUN));
        #endregion glReplacementCodeuiSUN

        #region glReplacementCodeusSUN
        public static Delegates.glReplacementCodeusSUN glReplacementCodeusSUN = (Delegates.glReplacementCodeusSUN)GetAddress("glReplacementCodeusSUN", typeof(Delegates.glReplacementCodeusSUN));
        #endregion glReplacementCodeusSUN

        #region glReplacementCodeubSUN
        public static Delegates.glReplacementCodeubSUN glReplacementCodeubSUN = (Delegates.glReplacementCodeubSUN)GetAddress("glReplacementCodeubSUN", typeof(Delegates.glReplacementCodeubSUN));
        #endregion glReplacementCodeubSUN

        #region glReplacementCodeuivSUN_
        public static Delegates.glReplacementCodeuivSUN_ glReplacementCodeuivSUN_ = (Delegates.glReplacementCodeuivSUN_)GetAddress("glReplacementCodeuivSUN", typeof(Delegates.glReplacementCodeuivSUN_));
        #endregion glReplacementCodeuivSUN_

        #region glReplacementCodeusvSUN_
        public static Delegates.glReplacementCodeusvSUN_ glReplacementCodeusvSUN_ = (Delegates.glReplacementCodeusvSUN_)GetAddress("glReplacementCodeusvSUN", typeof(Delegates.glReplacementCodeusvSUN_));
        #endregion glReplacementCodeusvSUN_

        #region glReplacementCodeubvSUN_
        public static Delegates.glReplacementCodeubvSUN_ glReplacementCodeubvSUN_ = (Delegates.glReplacementCodeubvSUN_)GetAddress("glReplacementCodeubvSUN", typeof(Delegates.glReplacementCodeubvSUN_));
        #endregion glReplacementCodeubvSUN_

        #region glReplacementCodePointerSUN_
        public static Delegates.glReplacementCodePointerSUN_ glReplacementCodePointerSUN_ = (Delegates.glReplacementCodePointerSUN_)GetAddress("glReplacementCodePointerSUN", typeof(Delegates.glReplacementCodePointerSUN_));
        #endregion glReplacementCodePointerSUN_

        #region glColor4ubVertex2fSUN
        public static Delegates.glColor4ubVertex2fSUN glColor4ubVertex2fSUN = (Delegates.glColor4ubVertex2fSUN)GetAddress("glColor4ubVertex2fSUN", typeof(Delegates.glColor4ubVertex2fSUN));
        #endregion glColor4ubVertex2fSUN

        #region glColor4ubVertex2fvSUN_
        public static Delegates.glColor4ubVertex2fvSUN_ glColor4ubVertex2fvSUN_ = (Delegates.glColor4ubVertex2fvSUN_)GetAddress("glColor4ubVertex2fvSUN", typeof(Delegates.glColor4ubVertex2fvSUN_));
        #endregion glColor4ubVertex2fvSUN_

        #region glColor4ubVertex3fSUN
        public static Delegates.glColor4ubVertex3fSUN glColor4ubVertex3fSUN = (Delegates.glColor4ubVertex3fSUN)GetAddress("glColor4ubVertex3fSUN", typeof(Delegates.glColor4ubVertex3fSUN));
        #endregion glColor4ubVertex3fSUN

        #region glColor4ubVertex3fvSUN_
        public static Delegates.glColor4ubVertex3fvSUN_ glColor4ubVertex3fvSUN_ = (Delegates.glColor4ubVertex3fvSUN_)GetAddress("glColor4ubVertex3fvSUN", typeof(Delegates.glColor4ubVertex3fvSUN_));
        #endregion glColor4ubVertex3fvSUN_

        #region glColor3fVertex3fSUN
        public static Delegates.glColor3fVertex3fSUN glColor3fVertex3fSUN = (Delegates.glColor3fVertex3fSUN)GetAddress("glColor3fVertex3fSUN", typeof(Delegates.glColor3fVertex3fSUN));
        #endregion glColor3fVertex3fSUN

        #region glColor3fVertex3fvSUN_
        public static Delegates.glColor3fVertex3fvSUN_ glColor3fVertex3fvSUN_ = (Delegates.glColor3fVertex3fvSUN_)GetAddress("glColor3fVertex3fvSUN", typeof(Delegates.glColor3fVertex3fvSUN_));
        #endregion glColor3fVertex3fvSUN_

        #region glNormal3fVertex3fSUN
        public static Delegates.glNormal3fVertex3fSUN glNormal3fVertex3fSUN = (Delegates.glNormal3fVertex3fSUN)GetAddress("glNormal3fVertex3fSUN", typeof(Delegates.glNormal3fVertex3fSUN));
        #endregion glNormal3fVertex3fSUN

        #region glNormal3fVertex3fvSUN_
        public static Delegates.glNormal3fVertex3fvSUN_ glNormal3fVertex3fvSUN_ = (Delegates.glNormal3fVertex3fvSUN_)GetAddress("glNormal3fVertex3fvSUN", typeof(Delegates.glNormal3fVertex3fvSUN_));
        #endregion glNormal3fVertex3fvSUN_

        #region glColor4fNormal3fVertex3fSUN
        public static Delegates.glColor4fNormal3fVertex3fSUN glColor4fNormal3fVertex3fSUN = (Delegates.glColor4fNormal3fVertex3fSUN)GetAddress("glColor4fNormal3fVertex3fSUN", typeof(Delegates.glColor4fNormal3fVertex3fSUN));
        #endregion glColor4fNormal3fVertex3fSUN

        #region glColor4fNormal3fVertex3fvSUN_
        public static Delegates.glColor4fNormal3fVertex3fvSUN_ glColor4fNormal3fVertex3fvSUN_ = (Delegates.glColor4fNormal3fVertex3fvSUN_)GetAddress("glColor4fNormal3fVertex3fvSUN", typeof(Delegates.glColor4fNormal3fVertex3fvSUN_));
        #endregion glColor4fNormal3fVertex3fvSUN_

        #region glTexCoord2fVertex3fSUN
        public static Delegates.glTexCoord2fVertex3fSUN glTexCoord2fVertex3fSUN = (Delegates.glTexCoord2fVertex3fSUN)GetAddress("glTexCoord2fVertex3fSUN", typeof(Delegates.glTexCoord2fVertex3fSUN));
        #endregion glTexCoord2fVertex3fSUN

        #region glTexCoord2fVertex3fvSUN_
        public static Delegates.glTexCoord2fVertex3fvSUN_ glTexCoord2fVertex3fvSUN_ = (Delegates.glTexCoord2fVertex3fvSUN_)GetAddress("glTexCoord2fVertex3fvSUN", typeof(Delegates.glTexCoord2fVertex3fvSUN_));
        #endregion glTexCoord2fVertex3fvSUN_

        #region glTexCoord4fVertex4fSUN
        public static Delegates.glTexCoord4fVertex4fSUN glTexCoord4fVertex4fSUN = (Delegates.glTexCoord4fVertex4fSUN)GetAddress("glTexCoord4fVertex4fSUN", typeof(Delegates.glTexCoord4fVertex4fSUN));
        #endregion glTexCoord4fVertex4fSUN

        #region glTexCoord4fVertex4fvSUN_
        public static Delegates.glTexCoord4fVertex4fvSUN_ glTexCoord4fVertex4fvSUN_ = (Delegates.glTexCoord4fVertex4fvSUN_)GetAddress("glTexCoord4fVertex4fvSUN", typeof(Delegates.glTexCoord4fVertex4fvSUN_));
        #endregion glTexCoord4fVertex4fvSUN_

        #region glTexCoord2fColor4ubVertex3fSUN
        public static Delegates.glTexCoord2fColor4ubVertex3fSUN glTexCoord2fColor4ubVertex3fSUN = (Delegates.glTexCoord2fColor4ubVertex3fSUN)GetAddress("glTexCoord2fColor4ubVertex3fSUN", typeof(Delegates.glTexCoord2fColor4ubVertex3fSUN));
        #endregion glTexCoord2fColor4ubVertex3fSUN

        #region glTexCoord2fColor4ubVertex3fvSUN_
        public static Delegates.glTexCoord2fColor4ubVertex3fvSUN_ glTexCoord2fColor4ubVertex3fvSUN_ = (Delegates.glTexCoord2fColor4ubVertex3fvSUN_)GetAddress("glTexCoord2fColor4ubVertex3fvSUN", typeof(Delegates.glTexCoord2fColor4ubVertex3fvSUN_));
        #endregion glTexCoord2fColor4ubVertex3fvSUN_

        #region glTexCoord2fColor3fVertex3fSUN
        public static Delegates.glTexCoord2fColor3fVertex3fSUN glTexCoord2fColor3fVertex3fSUN = (Delegates.glTexCoord2fColor3fVertex3fSUN)GetAddress("glTexCoord2fColor3fVertex3fSUN", typeof(Delegates.glTexCoord2fColor3fVertex3fSUN));
        #endregion glTexCoord2fColor3fVertex3fSUN

        #region glTexCoord2fColor3fVertex3fvSUN_
        public static Delegates.glTexCoord2fColor3fVertex3fvSUN_ glTexCoord2fColor3fVertex3fvSUN_ = (Delegates.glTexCoord2fColor3fVertex3fvSUN_)GetAddress("glTexCoord2fColor3fVertex3fvSUN", typeof(Delegates.glTexCoord2fColor3fVertex3fvSUN_));
        #endregion glTexCoord2fColor3fVertex3fvSUN_

        #region glTexCoord2fNormal3fVertex3fSUN
        public static Delegates.glTexCoord2fNormal3fVertex3fSUN glTexCoord2fNormal3fVertex3fSUN = (Delegates.glTexCoord2fNormal3fVertex3fSUN)GetAddress("glTexCoord2fNormal3fVertex3fSUN", typeof(Delegates.glTexCoord2fNormal3fVertex3fSUN));
        #endregion glTexCoord2fNormal3fVertex3fSUN

        #region glTexCoord2fNormal3fVertex3fvSUN_
        public static Delegates.glTexCoord2fNormal3fVertex3fvSUN_ glTexCoord2fNormal3fVertex3fvSUN_ = (Delegates.glTexCoord2fNormal3fVertex3fvSUN_)GetAddress("glTexCoord2fNormal3fVertex3fvSUN", typeof(Delegates.glTexCoord2fNormal3fVertex3fvSUN_));
        #endregion glTexCoord2fNormal3fVertex3fvSUN_

        #region glTexCoord2fColor4fNormal3fVertex3fSUN
        public static Delegates.glTexCoord2fColor4fNormal3fVertex3fSUN glTexCoord2fColor4fNormal3fVertex3fSUN = (Delegates.glTexCoord2fColor4fNormal3fVertex3fSUN)GetAddress("glTexCoord2fColor4fNormal3fVertex3fSUN", typeof(Delegates.glTexCoord2fColor4fNormal3fVertex3fSUN));
        #endregion glTexCoord2fColor4fNormal3fVertex3fSUN

        #region glTexCoord2fColor4fNormal3fVertex3fvSUN_
        public static Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN_ glTexCoord2fColor4fNormal3fVertex3fvSUN_ = (Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN_)GetAddress("glTexCoord2fColor4fNormal3fVertex3fvSUN", typeof(Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN_));
        #endregion glTexCoord2fColor4fNormal3fVertex3fvSUN_

        #region glTexCoord4fColor4fNormal3fVertex4fSUN
        public static Delegates.glTexCoord4fColor4fNormal3fVertex4fSUN glTexCoord4fColor4fNormal3fVertex4fSUN = (Delegates.glTexCoord4fColor4fNormal3fVertex4fSUN)GetAddress("glTexCoord4fColor4fNormal3fVertex4fSUN", typeof(Delegates.glTexCoord4fColor4fNormal3fVertex4fSUN));
        #endregion glTexCoord4fColor4fNormal3fVertex4fSUN

        #region glTexCoord4fColor4fNormal3fVertex4fvSUN_
        public static Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN_ glTexCoord4fColor4fNormal3fVertex4fvSUN_ = (Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN_)GetAddress("glTexCoord4fColor4fNormal3fVertex4fvSUN", typeof(Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN_));
        #endregion glTexCoord4fColor4fNormal3fVertex4fvSUN_

        #region glReplacementCodeuiVertex3fSUN
        public static Delegates.glReplacementCodeuiVertex3fSUN glReplacementCodeuiVertex3fSUN = (Delegates.glReplacementCodeuiVertex3fSUN)GetAddress("glReplacementCodeuiVertex3fSUN", typeof(Delegates.glReplacementCodeuiVertex3fSUN));
        #endregion glReplacementCodeuiVertex3fSUN

        #region glReplacementCodeuiVertex3fvSUN_
        public static Delegates.glReplacementCodeuiVertex3fvSUN_ glReplacementCodeuiVertex3fvSUN_ = (Delegates.glReplacementCodeuiVertex3fvSUN_)GetAddress("glReplacementCodeuiVertex3fvSUN", typeof(Delegates.glReplacementCodeuiVertex3fvSUN_));
        #endregion glReplacementCodeuiVertex3fvSUN_

        #region glReplacementCodeuiColor4ubVertex3fSUN
        public static Delegates.glReplacementCodeuiColor4ubVertex3fSUN glReplacementCodeuiColor4ubVertex3fSUN = (Delegates.glReplacementCodeuiColor4ubVertex3fSUN)GetAddress("glReplacementCodeuiColor4ubVertex3fSUN", typeof(Delegates.glReplacementCodeuiColor4ubVertex3fSUN));
        #endregion glReplacementCodeuiColor4ubVertex3fSUN

        #region glReplacementCodeuiColor4ubVertex3fvSUN_
        public static Delegates.glReplacementCodeuiColor4ubVertex3fvSUN_ glReplacementCodeuiColor4ubVertex3fvSUN_ = (Delegates.glReplacementCodeuiColor4ubVertex3fvSUN_)GetAddress("glReplacementCodeuiColor4ubVertex3fvSUN", typeof(Delegates.glReplacementCodeuiColor4ubVertex3fvSUN_));
        #endregion glReplacementCodeuiColor4ubVertex3fvSUN_

        #region glReplacementCodeuiColor3fVertex3fSUN
        public static Delegates.glReplacementCodeuiColor3fVertex3fSUN glReplacementCodeuiColor3fVertex3fSUN = (Delegates.glReplacementCodeuiColor3fVertex3fSUN)GetAddress("glReplacementCodeuiColor3fVertex3fSUN", typeof(Delegates.glReplacementCodeuiColor3fVertex3fSUN));
        #endregion glReplacementCodeuiColor3fVertex3fSUN

        #region glReplacementCodeuiColor3fVertex3fvSUN_
        public static Delegates.glReplacementCodeuiColor3fVertex3fvSUN_ glReplacementCodeuiColor3fVertex3fvSUN_ = (Delegates.glReplacementCodeuiColor3fVertex3fvSUN_)GetAddress("glReplacementCodeuiColor3fVertex3fvSUN", typeof(Delegates.glReplacementCodeuiColor3fVertex3fvSUN_));
        #endregion glReplacementCodeuiColor3fVertex3fvSUN_

        #region glReplacementCodeuiNormal3fVertex3fSUN
        public static Delegates.glReplacementCodeuiNormal3fVertex3fSUN glReplacementCodeuiNormal3fVertex3fSUN = (Delegates.glReplacementCodeuiNormal3fVertex3fSUN)GetAddress("glReplacementCodeuiNormal3fVertex3fSUN", typeof(Delegates.glReplacementCodeuiNormal3fVertex3fSUN));
        #endregion glReplacementCodeuiNormal3fVertex3fSUN

        #region glReplacementCodeuiNormal3fVertex3fvSUN_
        public static Delegates.glReplacementCodeuiNormal3fVertex3fvSUN_ glReplacementCodeuiNormal3fVertex3fvSUN_ = (Delegates.glReplacementCodeuiNormal3fVertex3fvSUN_)GetAddress("glReplacementCodeuiNormal3fVertex3fvSUN", typeof(Delegates.glReplacementCodeuiNormal3fVertex3fvSUN_));
        #endregion glReplacementCodeuiNormal3fVertex3fvSUN_

        #region glReplacementCodeuiColor4fNormal3fVertex3fSUN
        public static Delegates.glReplacementCodeuiColor4fNormal3fVertex3fSUN glReplacementCodeuiColor4fNormal3fVertex3fSUN = (Delegates.glReplacementCodeuiColor4fNormal3fVertex3fSUN)GetAddress("glReplacementCodeuiColor4fNormal3fVertex3fSUN", typeof(Delegates.glReplacementCodeuiColor4fNormal3fVertex3fSUN));
        #endregion glReplacementCodeuiColor4fNormal3fVertex3fSUN

        #region glReplacementCodeuiColor4fNormal3fVertex3fvSUN_
        public static Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN_ glReplacementCodeuiColor4fNormal3fVertex3fvSUN_ = (Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN_)GetAddress("glReplacementCodeuiColor4fNormal3fVertex3fvSUN", typeof(Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN_));
        #endregion glReplacementCodeuiColor4fNormal3fVertex3fvSUN_

        #region glReplacementCodeuiTexCoord2fVertex3fSUN
        public static Delegates.glReplacementCodeuiTexCoord2fVertex3fSUN glReplacementCodeuiTexCoord2fVertex3fSUN = (Delegates.glReplacementCodeuiTexCoord2fVertex3fSUN)GetAddress("glReplacementCodeuiTexCoord2fVertex3fSUN", typeof(Delegates.glReplacementCodeuiTexCoord2fVertex3fSUN));
        #endregion glReplacementCodeuiTexCoord2fVertex3fSUN

        #region glReplacementCodeuiTexCoord2fVertex3fvSUN_
        public static Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN_ glReplacementCodeuiTexCoord2fVertex3fvSUN_ = (Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN_)GetAddress("glReplacementCodeuiTexCoord2fVertex3fvSUN", typeof(Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN_));
        #endregion glReplacementCodeuiTexCoord2fVertex3fvSUN_

        #region glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN
        public static Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN = (Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN)GetAddress("glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN", typeof(Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN));
        #endregion glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN

        #region glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_
        public static Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_ glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_ = (Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_)GetAddress("glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN", typeof(Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_));
        #endregion glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN
        public static Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN = (Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN)GetAddress("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN", typeof(Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN));
        #endregion glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_
        public static Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_ glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_ = (Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_)GetAddress("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN", typeof(Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_));
        #endregion glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_

        #region glBlendFuncSeparateEXT
        public static Delegates.glBlendFuncSeparateEXT glBlendFuncSeparateEXT = (Delegates.glBlendFuncSeparateEXT)GetAddress("glBlendFuncSeparateEXT", typeof(Delegates.glBlendFuncSeparateEXT));
        #endregion glBlendFuncSeparateEXT

        #region glBlendFuncSeparateINGR
        public static Delegates.glBlendFuncSeparateINGR glBlendFuncSeparateINGR = (Delegates.glBlendFuncSeparateINGR)GetAddress("glBlendFuncSeparateINGR", typeof(Delegates.glBlendFuncSeparateINGR));
        #endregion glBlendFuncSeparateINGR

        #region glVertexWeightfEXT
        public static Delegates.glVertexWeightfEXT glVertexWeightfEXT = (Delegates.glVertexWeightfEXT)GetAddress("glVertexWeightfEXT", typeof(Delegates.glVertexWeightfEXT));
        #endregion glVertexWeightfEXT

        #region glVertexWeightfvEXT_
        public static Delegates.glVertexWeightfvEXT_ glVertexWeightfvEXT_ = (Delegates.glVertexWeightfvEXT_)GetAddress("glVertexWeightfvEXT", typeof(Delegates.glVertexWeightfvEXT_));
        #endregion glVertexWeightfvEXT_

        #region glVertexWeightPointerEXT_
        public static Delegates.glVertexWeightPointerEXT_ glVertexWeightPointerEXT_ = (Delegates.glVertexWeightPointerEXT_)GetAddress("glVertexWeightPointerEXT", typeof(Delegates.glVertexWeightPointerEXT_));
        #endregion glVertexWeightPointerEXT_

        #region glFlushVertexArrayRangeNV
        public static Delegates.glFlushVertexArrayRangeNV glFlushVertexArrayRangeNV = (Delegates.glFlushVertexArrayRangeNV)GetAddress("glFlushVertexArrayRangeNV", typeof(Delegates.glFlushVertexArrayRangeNV));
        #endregion glFlushVertexArrayRangeNV

        #region glVertexArrayRangeNV_
        public static Delegates.glVertexArrayRangeNV_ glVertexArrayRangeNV_ = (Delegates.glVertexArrayRangeNV_)GetAddress("glVertexArrayRangeNV", typeof(Delegates.glVertexArrayRangeNV_));
        #endregion glVertexArrayRangeNV_

        #region glCombinerParameterfvNV_
        public static Delegates.glCombinerParameterfvNV_ glCombinerParameterfvNV_ = (Delegates.glCombinerParameterfvNV_)GetAddress("glCombinerParameterfvNV", typeof(Delegates.glCombinerParameterfvNV_));
        #endregion glCombinerParameterfvNV_

        #region glCombinerParameterfNV
        public static Delegates.glCombinerParameterfNV glCombinerParameterfNV = (Delegates.glCombinerParameterfNV)GetAddress("glCombinerParameterfNV", typeof(Delegates.glCombinerParameterfNV));
        #endregion glCombinerParameterfNV

        #region glCombinerParameterivNV_
        public static Delegates.glCombinerParameterivNV_ glCombinerParameterivNV_ = (Delegates.glCombinerParameterivNV_)GetAddress("glCombinerParameterivNV", typeof(Delegates.glCombinerParameterivNV_));
        #endregion glCombinerParameterivNV_

        #region glCombinerParameteriNV
        public static Delegates.glCombinerParameteriNV glCombinerParameteriNV = (Delegates.glCombinerParameteriNV)GetAddress("glCombinerParameteriNV", typeof(Delegates.glCombinerParameteriNV));
        #endregion glCombinerParameteriNV

        #region glCombinerInputNV
        public static Delegates.glCombinerInputNV glCombinerInputNV = (Delegates.glCombinerInputNV)GetAddress("glCombinerInputNV", typeof(Delegates.glCombinerInputNV));
        #endregion glCombinerInputNV

        #region glCombinerOutputNV
        public static Delegates.glCombinerOutputNV glCombinerOutputNV = (Delegates.glCombinerOutputNV)GetAddress("glCombinerOutputNV", typeof(Delegates.glCombinerOutputNV));
        #endregion glCombinerOutputNV

        #region glFinalCombinerInputNV
        public static Delegates.glFinalCombinerInputNV glFinalCombinerInputNV = (Delegates.glFinalCombinerInputNV)GetAddress("glFinalCombinerInputNV", typeof(Delegates.glFinalCombinerInputNV));
        #endregion glFinalCombinerInputNV

        #region glGetCombinerInputParameterfvNV_
        public static Delegates.glGetCombinerInputParameterfvNV_ glGetCombinerInputParameterfvNV_ = (Delegates.glGetCombinerInputParameterfvNV_)GetAddress("glGetCombinerInputParameterfvNV", typeof(Delegates.glGetCombinerInputParameterfvNV_));
        #endregion glGetCombinerInputParameterfvNV_

        #region glGetCombinerInputParameterivNV_
        public static Delegates.glGetCombinerInputParameterivNV_ glGetCombinerInputParameterivNV_ = (Delegates.glGetCombinerInputParameterivNV_)GetAddress("glGetCombinerInputParameterivNV", typeof(Delegates.glGetCombinerInputParameterivNV_));
        #endregion glGetCombinerInputParameterivNV_

        #region glGetCombinerOutputParameterfvNV_
        public static Delegates.glGetCombinerOutputParameterfvNV_ glGetCombinerOutputParameterfvNV_ = (Delegates.glGetCombinerOutputParameterfvNV_)GetAddress("glGetCombinerOutputParameterfvNV", typeof(Delegates.glGetCombinerOutputParameterfvNV_));
        #endregion glGetCombinerOutputParameterfvNV_

        #region glGetCombinerOutputParameterivNV_
        public static Delegates.glGetCombinerOutputParameterivNV_ glGetCombinerOutputParameterivNV_ = (Delegates.glGetCombinerOutputParameterivNV_)GetAddress("glGetCombinerOutputParameterivNV", typeof(Delegates.glGetCombinerOutputParameterivNV_));
        #endregion glGetCombinerOutputParameterivNV_

        #region glGetFinalCombinerInputParameterfvNV_
        public static Delegates.glGetFinalCombinerInputParameterfvNV_ glGetFinalCombinerInputParameterfvNV_ = (Delegates.glGetFinalCombinerInputParameterfvNV_)GetAddress("glGetFinalCombinerInputParameterfvNV", typeof(Delegates.glGetFinalCombinerInputParameterfvNV_));
        #endregion glGetFinalCombinerInputParameterfvNV_

        #region glGetFinalCombinerInputParameterivNV_
        public static Delegates.glGetFinalCombinerInputParameterivNV_ glGetFinalCombinerInputParameterivNV_ = (Delegates.glGetFinalCombinerInputParameterivNV_)GetAddress("glGetFinalCombinerInputParameterivNV", typeof(Delegates.glGetFinalCombinerInputParameterivNV_));
        #endregion glGetFinalCombinerInputParameterivNV_

        #region glResizeBuffersMESA
        public static Delegates.glResizeBuffersMESA glResizeBuffersMESA = (Delegates.glResizeBuffersMESA)GetAddress("glResizeBuffersMESA", typeof(Delegates.glResizeBuffersMESA));
        #endregion glResizeBuffersMESA

        #region glWindowPos2dMESA
        public static Delegates.glWindowPos2dMESA glWindowPos2dMESA = (Delegates.glWindowPos2dMESA)GetAddress("glWindowPos2dMESA", typeof(Delegates.glWindowPos2dMESA));
        #endregion glWindowPos2dMESA

        #region glWindowPos2dvMESA_
        public static Delegates.glWindowPos2dvMESA_ glWindowPos2dvMESA_ = (Delegates.glWindowPos2dvMESA_)GetAddress("glWindowPos2dvMESA", typeof(Delegates.glWindowPos2dvMESA_));
        #endregion glWindowPos2dvMESA_

        #region glWindowPos2fMESA
        public static Delegates.glWindowPos2fMESA glWindowPos2fMESA = (Delegates.glWindowPos2fMESA)GetAddress("glWindowPos2fMESA", typeof(Delegates.glWindowPos2fMESA));
        #endregion glWindowPos2fMESA

        #region glWindowPos2fvMESA_
        public static Delegates.glWindowPos2fvMESA_ glWindowPos2fvMESA_ = (Delegates.glWindowPos2fvMESA_)GetAddress("glWindowPos2fvMESA", typeof(Delegates.glWindowPos2fvMESA_));
        #endregion glWindowPos2fvMESA_

        #region glWindowPos2iMESA
        public static Delegates.glWindowPos2iMESA glWindowPos2iMESA = (Delegates.glWindowPos2iMESA)GetAddress("glWindowPos2iMESA", typeof(Delegates.glWindowPos2iMESA));
        #endregion glWindowPos2iMESA

        #region glWindowPos2ivMESA_
        public static Delegates.glWindowPos2ivMESA_ glWindowPos2ivMESA_ = (Delegates.glWindowPos2ivMESA_)GetAddress("glWindowPos2ivMESA", typeof(Delegates.glWindowPos2ivMESA_));
        #endregion glWindowPos2ivMESA_

        #region glWindowPos2sMESA
        public static Delegates.glWindowPos2sMESA glWindowPos2sMESA = (Delegates.glWindowPos2sMESA)GetAddress("glWindowPos2sMESA", typeof(Delegates.glWindowPos2sMESA));
        #endregion glWindowPos2sMESA

        #region glWindowPos2svMESA_
        public static Delegates.glWindowPos2svMESA_ glWindowPos2svMESA_ = (Delegates.glWindowPos2svMESA_)GetAddress("glWindowPos2svMESA", typeof(Delegates.glWindowPos2svMESA_));
        #endregion glWindowPos2svMESA_

        #region glWindowPos3dMESA
        public static Delegates.glWindowPos3dMESA glWindowPos3dMESA = (Delegates.glWindowPos3dMESA)GetAddress("glWindowPos3dMESA", typeof(Delegates.glWindowPos3dMESA));
        #endregion glWindowPos3dMESA

        #region glWindowPos3dvMESA_
        public static Delegates.glWindowPos3dvMESA_ glWindowPos3dvMESA_ = (Delegates.glWindowPos3dvMESA_)GetAddress("glWindowPos3dvMESA", typeof(Delegates.glWindowPos3dvMESA_));
        #endregion glWindowPos3dvMESA_

        #region glWindowPos3fMESA
        public static Delegates.glWindowPos3fMESA glWindowPos3fMESA = (Delegates.glWindowPos3fMESA)GetAddress("glWindowPos3fMESA", typeof(Delegates.glWindowPos3fMESA));
        #endregion glWindowPos3fMESA

        #region glWindowPos3fvMESA_
        public static Delegates.glWindowPos3fvMESA_ glWindowPos3fvMESA_ = (Delegates.glWindowPos3fvMESA_)GetAddress("glWindowPos3fvMESA", typeof(Delegates.glWindowPos3fvMESA_));
        #endregion glWindowPos3fvMESA_

        #region glWindowPos3iMESA
        public static Delegates.glWindowPos3iMESA glWindowPos3iMESA = (Delegates.glWindowPos3iMESA)GetAddress("glWindowPos3iMESA", typeof(Delegates.glWindowPos3iMESA));
        #endregion glWindowPos3iMESA

        #region glWindowPos3ivMESA_
        public static Delegates.glWindowPos3ivMESA_ glWindowPos3ivMESA_ = (Delegates.glWindowPos3ivMESA_)GetAddress("glWindowPos3ivMESA", typeof(Delegates.glWindowPos3ivMESA_));
        #endregion glWindowPos3ivMESA_

        #region glWindowPos3sMESA
        public static Delegates.glWindowPos3sMESA glWindowPos3sMESA = (Delegates.glWindowPos3sMESA)GetAddress("glWindowPos3sMESA", typeof(Delegates.glWindowPos3sMESA));
        #endregion glWindowPos3sMESA

        #region glWindowPos3svMESA_
        public static Delegates.glWindowPos3svMESA_ glWindowPos3svMESA_ = (Delegates.glWindowPos3svMESA_)GetAddress("glWindowPos3svMESA", typeof(Delegates.glWindowPos3svMESA_));
        #endregion glWindowPos3svMESA_

        #region glWindowPos4dMESA
        public static Delegates.glWindowPos4dMESA glWindowPos4dMESA = (Delegates.glWindowPos4dMESA)GetAddress("glWindowPos4dMESA", typeof(Delegates.glWindowPos4dMESA));
        #endregion glWindowPos4dMESA

        #region glWindowPos4dvMESA_
        public static Delegates.glWindowPos4dvMESA_ glWindowPos4dvMESA_ = (Delegates.glWindowPos4dvMESA_)GetAddress("glWindowPos4dvMESA", typeof(Delegates.glWindowPos4dvMESA_));
        #endregion glWindowPos4dvMESA_

        #region glWindowPos4fMESA
        public static Delegates.glWindowPos4fMESA glWindowPos4fMESA = (Delegates.glWindowPos4fMESA)GetAddress("glWindowPos4fMESA", typeof(Delegates.glWindowPos4fMESA));
        #endregion glWindowPos4fMESA

        #region glWindowPos4fvMESA_
        public static Delegates.glWindowPos4fvMESA_ glWindowPos4fvMESA_ = (Delegates.glWindowPos4fvMESA_)GetAddress("glWindowPos4fvMESA", typeof(Delegates.glWindowPos4fvMESA_));
        #endregion glWindowPos4fvMESA_

        #region glWindowPos4iMESA
        public static Delegates.glWindowPos4iMESA glWindowPos4iMESA = (Delegates.glWindowPos4iMESA)GetAddress("glWindowPos4iMESA", typeof(Delegates.glWindowPos4iMESA));
        #endregion glWindowPos4iMESA

        #region glWindowPos4ivMESA_
        public static Delegates.glWindowPos4ivMESA_ glWindowPos4ivMESA_ = (Delegates.glWindowPos4ivMESA_)GetAddress("glWindowPos4ivMESA", typeof(Delegates.glWindowPos4ivMESA_));
        #endregion glWindowPos4ivMESA_

        #region glWindowPos4sMESA
        public static Delegates.glWindowPos4sMESA glWindowPos4sMESA = (Delegates.glWindowPos4sMESA)GetAddress("glWindowPos4sMESA", typeof(Delegates.glWindowPos4sMESA));
        #endregion glWindowPos4sMESA

        #region glWindowPos4svMESA_
        public static Delegates.glWindowPos4svMESA_ glWindowPos4svMESA_ = (Delegates.glWindowPos4svMESA_)GetAddress("glWindowPos4svMESA", typeof(Delegates.glWindowPos4svMESA_));
        #endregion glWindowPos4svMESA_

        #region glMultiModeDrawArraysIBM_
        public static Delegates.glMultiModeDrawArraysIBM_ glMultiModeDrawArraysIBM_ = (Delegates.glMultiModeDrawArraysIBM_)GetAddress("glMultiModeDrawArraysIBM", typeof(Delegates.glMultiModeDrawArraysIBM_));
        #endregion glMultiModeDrawArraysIBM_

        #region glMultiModeDrawElementsIBM_
        public static Delegates.glMultiModeDrawElementsIBM_ glMultiModeDrawElementsIBM_ = (Delegates.glMultiModeDrawElementsIBM_)GetAddress("glMultiModeDrawElementsIBM", typeof(Delegates.glMultiModeDrawElementsIBM_));
        #endregion glMultiModeDrawElementsIBM_

        #region glColorPointerListIBM_
        public static Delegates.glColorPointerListIBM_ glColorPointerListIBM_ = (Delegates.glColorPointerListIBM_)GetAddress("glColorPointerListIBM", typeof(Delegates.glColorPointerListIBM_));
        #endregion glColorPointerListIBM_

        #region glSecondaryColorPointerListIBM_
        public static Delegates.glSecondaryColorPointerListIBM_ glSecondaryColorPointerListIBM_ = (Delegates.glSecondaryColorPointerListIBM_)GetAddress("glSecondaryColorPointerListIBM", typeof(Delegates.glSecondaryColorPointerListIBM_));
        #endregion glSecondaryColorPointerListIBM_

        #region glEdgeFlagPointerListIBM_
        public static Delegates.glEdgeFlagPointerListIBM_ glEdgeFlagPointerListIBM_ = (Delegates.glEdgeFlagPointerListIBM_)GetAddress("glEdgeFlagPointerListIBM", typeof(Delegates.glEdgeFlagPointerListIBM_));
        #endregion glEdgeFlagPointerListIBM_

        #region glFogCoordPointerListIBM_
        public static Delegates.glFogCoordPointerListIBM_ glFogCoordPointerListIBM_ = (Delegates.glFogCoordPointerListIBM_)GetAddress("glFogCoordPointerListIBM", typeof(Delegates.glFogCoordPointerListIBM_));
        #endregion glFogCoordPointerListIBM_

        #region glIndexPointerListIBM_
        public static Delegates.glIndexPointerListIBM_ glIndexPointerListIBM_ = (Delegates.glIndexPointerListIBM_)GetAddress("glIndexPointerListIBM", typeof(Delegates.glIndexPointerListIBM_));
        #endregion glIndexPointerListIBM_

        #region glNormalPointerListIBM_
        public static Delegates.glNormalPointerListIBM_ glNormalPointerListIBM_ = (Delegates.glNormalPointerListIBM_)GetAddress("glNormalPointerListIBM", typeof(Delegates.glNormalPointerListIBM_));
        #endregion glNormalPointerListIBM_

        #region glTexCoordPointerListIBM_
        public static Delegates.glTexCoordPointerListIBM_ glTexCoordPointerListIBM_ = (Delegates.glTexCoordPointerListIBM_)GetAddress("glTexCoordPointerListIBM", typeof(Delegates.glTexCoordPointerListIBM_));
        #endregion glTexCoordPointerListIBM_

        #region glVertexPointerListIBM_
        public static Delegates.glVertexPointerListIBM_ glVertexPointerListIBM_ = (Delegates.glVertexPointerListIBM_)GetAddress("glVertexPointerListIBM", typeof(Delegates.glVertexPointerListIBM_));
        #endregion glVertexPointerListIBM_

        #region glTbufferMask3DFX
        public static Delegates.glTbufferMask3DFX glTbufferMask3DFX = (Delegates.glTbufferMask3DFX)GetAddress("glTbufferMask3DFX", typeof(Delegates.glTbufferMask3DFX));
        #endregion glTbufferMask3DFX

        #region glSampleMaskEXT
        public static Delegates.glSampleMaskEXT glSampleMaskEXT = (Delegates.glSampleMaskEXT)GetAddress("glSampleMaskEXT", typeof(Delegates.glSampleMaskEXT));
        #endregion glSampleMaskEXT

        #region glSamplePatternEXT
        public static Delegates.glSamplePatternEXT glSamplePatternEXT = (Delegates.glSamplePatternEXT)GetAddress("glSamplePatternEXT", typeof(Delegates.glSamplePatternEXT));
        #endregion glSamplePatternEXT

        #region glTextureColorMaskSGIS
        public static Delegates.glTextureColorMaskSGIS glTextureColorMaskSGIS = (Delegates.glTextureColorMaskSGIS)GetAddress("glTextureColorMaskSGIS", typeof(Delegates.glTextureColorMaskSGIS));
        #endregion glTextureColorMaskSGIS

        #region glIglooInterfaceSGIX_
        public static Delegates.glIglooInterfaceSGIX_ glIglooInterfaceSGIX_ = (Delegates.glIglooInterfaceSGIX_)GetAddress("glIglooInterfaceSGIX", typeof(Delegates.glIglooInterfaceSGIX_));
        #endregion glIglooInterfaceSGIX_

        #region glDeleteFencesNV_
        public static Delegates.glDeleteFencesNV_ glDeleteFencesNV_ = (Delegates.glDeleteFencesNV_)GetAddress("glDeleteFencesNV", typeof(Delegates.glDeleteFencesNV_));
        #endregion glDeleteFencesNV_

        #region glGenFencesNV_
        public static Delegates.glGenFencesNV_ glGenFencesNV_ = (Delegates.glGenFencesNV_)GetAddress("glGenFencesNV", typeof(Delegates.glGenFencesNV_));
        #endregion glGenFencesNV_

        #region glIsFenceNV
        public static Delegates.glIsFenceNV glIsFenceNV = (Delegates.glIsFenceNV)GetAddress("glIsFenceNV", typeof(Delegates.glIsFenceNV));
        #endregion glIsFenceNV

        #region glTestFenceNV
        public static Delegates.glTestFenceNV glTestFenceNV = (Delegates.glTestFenceNV)GetAddress("glTestFenceNV", typeof(Delegates.glTestFenceNV));
        #endregion glTestFenceNV

        #region glGetFenceivNV_
        public static Delegates.glGetFenceivNV_ glGetFenceivNV_ = (Delegates.glGetFenceivNV_)GetAddress("glGetFenceivNV", typeof(Delegates.glGetFenceivNV_));
        #endregion glGetFenceivNV_

        #region glFinishFenceNV
        public static Delegates.glFinishFenceNV glFinishFenceNV = (Delegates.glFinishFenceNV)GetAddress("glFinishFenceNV", typeof(Delegates.glFinishFenceNV));
        #endregion glFinishFenceNV

        #region glSetFenceNV
        public static Delegates.glSetFenceNV glSetFenceNV = (Delegates.glSetFenceNV)GetAddress("glSetFenceNV", typeof(Delegates.glSetFenceNV));
        #endregion glSetFenceNV

        #region glMapControlPointsNV_
        public static Delegates.glMapControlPointsNV_ glMapControlPointsNV_ = (Delegates.glMapControlPointsNV_)GetAddress("glMapControlPointsNV", typeof(Delegates.glMapControlPointsNV_));
        #endregion glMapControlPointsNV_

        #region glMapParameterivNV_
        public static Delegates.glMapParameterivNV_ glMapParameterivNV_ = (Delegates.glMapParameterivNV_)GetAddress("glMapParameterivNV", typeof(Delegates.glMapParameterivNV_));
        #endregion glMapParameterivNV_

        #region glMapParameterfvNV_
        public static Delegates.glMapParameterfvNV_ glMapParameterfvNV_ = (Delegates.glMapParameterfvNV_)GetAddress("glMapParameterfvNV", typeof(Delegates.glMapParameterfvNV_));
        #endregion glMapParameterfvNV_

        #region glGetMapControlPointsNV_
        public static Delegates.glGetMapControlPointsNV_ glGetMapControlPointsNV_ = (Delegates.glGetMapControlPointsNV_)GetAddress("glGetMapControlPointsNV", typeof(Delegates.glGetMapControlPointsNV_));
        #endregion glGetMapControlPointsNV_

        #region glGetMapParameterivNV_
        public static Delegates.glGetMapParameterivNV_ glGetMapParameterivNV_ = (Delegates.glGetMapParameterivNV_)GetAddress("glGetMapParameterivNV", typeof(Delegates.glGetMapParameterivNV_));
        #endregion glGetMapParameterivNV_

        #region glGetMapParameterfvNV_
        public static Delegates.glGetMapParameterfvNV_ glGetMapParameterfvNV_ = (Delegates.glGetMapParameterfvNV_)GetAddress("glGetMapParameterfvNV", typeof(Delegates.glGetMapParameterfvNV_));
        #endregion glGetMapParameterfvNV_

        #region glGetMapAttribParameterivNV_
        public static Delegates.glGetMapAttribParameterivNV_ glGetMapAttribParameterivNV_ = (Delegates.glGetMapAttribParameterivNV_)GetAddress("glGetMapAttribParameterivNV", typeof(Delegates.glGetMapAttribParameterivNV_));
        #endregion glGetMapAttribParameterivNV_

        #region glGetMapAttribParameterfvNV_
        public static Delegates.glGetMapAttribParameterfvNV_ glGetMapAttribParameterfvNV_ = (Delegates.glGetMapAttribParameterfvNV_)GetAddress("glGetMapAttribParameterfvNV", typeof(Delegates.glGetMapAttribParameterfvNV_));
        #endregion glGetMapAttribParameterfvNV_

        #region glEvalMapsNV
        public static Delegates.glEvalMapsNV glEvalMapsNV = (Delegates.glEvalMapsNV)GetAddress("glEvalMapsNV", typeof(Delegates.glEvalMapsNV));
        #endregion glEvalMapsNV

        #region glCombinerStageParameterfvNV_
        public static Delegates.glCombinerStageParameterfvNV_ glCombinerStageParameterfvNV_ = (Delegates.glCombinerStageParameterfvNV_)GetAddress("glCombinerStageParameterfvNV", typeof(Delegates.glCombinerStageParameterfvNV_));
        #endregion glCombinerStageParameterfvNV_

        #region glGetCombinerStageParameterfvNV_
        public static Delegates.glGetCombinerStageParameterfvNV_ glGetCombinerStageParameterfvNV_ = (Delegates.glGetCombinerStageParameterfvNV_)GetAddress("glGetCombinerStageParameterfvNV", typeof(Delegates.glGetCombinerStageParameterfvNV_));
        #endregion glGetCombinerStageParameterfvNV_

        #region glAreProgramsResidentNV_
        public static Delegates.glAreProgramsResidentNV_ glAreProgramsResidentNV_ = (Delegates.glAreProgramsResidentNV_)GetAddress("glAreProgramsResidentNV", typeof(Delegates.glAreProgramsResidentNV_));
        #endregion glAreProgramsResidentNV_

        #region glBindProgramNV
        public static Delegates.glBindProgramNV glBindProgramNV = (Delegates.glBindProgramNV)GetAddress("glBindProgramNV", typeof(Delegates.glBindProgramNV));
        #endregion glBindProgramNV

        #region glDeleteProgramsNV_
        public static Delegates.glDeleteProgramsNV_ glDeleteProgramsNV_ = (Delegates.glDeleteProgramsNV_)GetAddress("glDeleteProgramsNV", typeof(Delegates.glDeleteProgramsNV_));
        #endregion glDeleteProgramsNV_

        #region glExecuteProgramNV_
        public static Delegates.glExecuteProgramNV_ glExecuteProgramNV_ = (Delegates.glExecuteProgramNV_)GetAddress("glExecuteProgramNV", typeof(Delegates.glExecuteProgramNV_));
        #endregion glExecuteProgramNV_

        #region glGenProgramsNV_
        public static Delegates.glGenProgramsNV_ glGenProgramsNV_ = (Delegates.glGenProgramsNV_)GetAddress("glGenProgramsNV", typeof(Delegates.glGenProgramsNV_));
        #endregion glGenProgramsNV_

        #region glGetProgramParameterdvNV_
        public static Delegates.glGetProgramParameterdvNV_ glGetProgramParameterdvNV_ = (Delegates.glGetProgramParameterdvNV_)GetAddress("glGetProgramParameterdvNV", typeof(Delegates.glGetProgramParameterdvNV_));
        #endregion glGetProgramParameterdvNV_

        #region glGetProgramParameterfvNV_
        public static Delegates.glGetProgramParameterfvNV_ glGetProgramParameterfvNV_ = (Delegates.glGetProgramParameterfvNV_)GetAddress("glGetProgramParameterfvNV", typeof(Delegates.glGetProgramParameterfvNV_));
        #endregion glGetProgramParameterfvNV_

        #region glGetProgramivNV_
        public static Delegates.glGetProgramivNV_ glGetProgramivNV_ = (Delegates.glGetProgramivNV_)GetAddress("glGetProgramivNV", typeof(Delegates.glGetProgramivNV_));
        #endregion glGetProgramivNV_

        #region glGetProgramStringNV_
        public static Delegates.glGetProgramStringNV_ glGetProgramStringNV_ = (Delegates.glGetProgramStringNV_)GetAddress("glGetProgramStringNV", typeof(Delegates.glGetProgramStringNV_));
        #endregion glGetProgramStringNV_

        #region glGetTrackMatrixivNV_
        public static Delegates.glGetTrackMatrixivNV_ glGetTrackMatrixivNV_ = (Delegates.glGetTrackMatrixivNV_)GetAddress("glGetTrackMatrixivNV", typeof(Delegates.glGetTrackMatrixivNV_));
        #endregion glGetTrackMatrixivNV_

        #region glGetVertexAttribdvNV_
        public static Delegates.glGetVertexAttribdvNV_ glGetVertexAttribdvNV_ = (Delegates.glGetVertexAttribdvNV_)GetAddress("glGetVertexAttribdvNV", typeof(Delegates.glGetVertexAttribdvNV_));
        #endregion glGetVertexAttribdvNV_

        #region glGetVertexAttribfvNV_
        public static Delegates.glGetVertexAttribfvNV_ glGetVertexAttribfvNV_ = (Delegates.glGetVertexAttribfvNV_)GetAddress("glGetVertexAttribfvNV", typeof(Delegates.glGetVertexAttribfvNV_));
        #endregion glGetVertexAttribfvNV_

        #region glGetVertexAttribivNV_
        public static Delegates.glGetVertexAttribivNV_ glGetVertexAttribivNV_ = (Delegates.glGetVertexAttribivNV_)GetAddress("glGetVertexAttribivNV", typeof(Delegates.glGetVertexAttribivNV_));
        #endregion glGetVertexAttribivNV_

        #region glGetVertexAttribPointervNV_
        public static Delegates.glGetVertexAttribPointervNV_ glGetVertexAttribPointervNV_ = (Delegates.glGetVertexAttribPointervNV_)GetAddress("glGetVertexAttribPointervNV", typeof(Delegates.glGetVertexAttribPointervNV_));
        #endregion glGetVertexAttribPointervNV_

        #region glIsProgramNV
        public static Delegates.glIsProgramNV glIsProgramNV = (Delegates.glIsProgramNV)GetAddress("glIsProgramNV", typeof(Delegates.glIsProgramNV));
        #endregion glIsProgramNV

        #region glLoadProgramNV_
        public static Delegates.glLoadProgramNV_ glLoadProgramNV_ = (Delegates.glLoadProgramNV_)GetAddress("glLoadProgramNV", typeof(Delegates.glLoadProgramNV_));
        #endregion glLoadProgramNV_

        #region glProgramParameter4dNV
        public static Delegates.glProgramParameter4dNV glProgramParameter4dNV = (Delegates.glProgramParameter4dNV)GetAddress("glProgramParameter4dNV", typeof(Delegates.glProgramParameter4dNV));
        #endregion glProgramParameter4dNV

        #region glProgramParameter4dvNV_
        public static Delegates.glProgramParameter4dvNV_ glProgramParameter4dvNV_ = (Delegates.glProgramParameter4dvNV_)GetAddress("glProgramParameter4dvNV", typeof(Delegates.glProgramParameter4dvNV_));
        #endregion glProgramParameter4dvNV_

        #region glProgramParameter4fNV
        public static Delegates.glProgramParameter4fNV glProgramParameter4fNV = (Delegates.glProgramParameter4fNV)GetAddress("glProgramParameter4fNV", typeof(Delegates.glProgramParameter4fNV));
        #endregion glProgramParameter4fNV

        #region glProgramParameter4fvNV_
        public static Delegates.glProgramParameter4fvNV_ glProgramParameter4fvNV_ = (Delegates.glProgramParameter4fvNV_)GetAddress("glProgramParameter4fvNV", typeof(Delegates.glProgramParameter4fvNV_));
        #endregion glProgramParameter4fvNV_

        #region glProgramParameters4dvNV_
        public static Delegates.glProgramParameters4dvNV_ glProgramParameters4dvNV_ = (Delegates.glProgramParameters4dvNV_)GetAddress("glProgramParameters4dvNV", typeof(Delegates.glProgramParameters4dvNV_));
        #endregion glProgramParameters4dvNV_

        #region glProgramParameters4fvNV_
        public static Delegates.glProgramParameters4fvNV_ glProgramParameters4fvNV_ = (Delegates.glProgramParameters4fvNV_)GetAddress("glProgramParameters4fvNV", typeof(Delegates.glProgramParameters4fvNV_));
        #endregion glProgramParameters4fvNV_

        #region glRequestResidentProgramsNV_
        public static Delegates.glRequestResidentProgramsNV_ glRequestResidentProgramsNV_ = (Delegates.glRequestResidentProgramsNV_)GetAddress("glRequestResidentProgramsNV", typeof(Delegates.glRequestResidentProgramsNV_));
        #endregion glRequestResidentProgramsNV_

        #region glTrackMatrixNV
        public static Delegates.glTrackMatrixNV glTrackMatrixNV = (Delegates.glTrackMatrixNV)GetAddress("glTrackMatrixNV", typeof(Delegates.glTrackMatrixNV));
        #endregion glTrackMatrixNV

        #region glVertexAttribPointerNV_
        public static Delegates.glVertexAttribPointerNV_ glVertexAttribPointerNV_ = (Delegates.glVertexAttribPointerNV_)GetAddress("glVertexAttribPointerNV", typeof(Delegates.glVertexAttribPointerNV_));
        #endregion glVertexAttribPointerNV_

        #region glVertexAttrib1dNV
        public static Delegates.glVertexAttrib1dNV glVertexAttrib1dNV = (Delegates.glVertexAttrib1dNV)GetAddress("glVertexAttrib1dNV", typeof(Delegates.glVertexAttrib1dNV));
        #endregion glVertexAttrib1dNV

        #region glVertexAttrib1dvNV_
        public static Delegates.glVertexAttrib1dvNV_ glVertexAttrib1dvNV_ = (Delegates.glVertexAttrib1dvNV_)GetAddress("glVertexAttrib1dvNV", typeof(Delegates.glVertexAttrib1dvNV_));
        #endregion glVertexAttrib1dvNV_

        #region glVertexAttrib1fNV
        public static Delegates.glVertexAttrib1fNV glVertexAttrib1fNV = (Delegates.glVertexAttrib1fNV)GetAddress("glVertexAttrib1fNV", typeof(Delegates.glVertexAttrib1fNV));
        #endregion glVertexAttrib1fNV

        #region glVertexAttrib1fvNV_
        public static Delegates.glVertexAttrib1fvNV_ glVertexAttrib1fvNV_ = (Delegates.glVertexAttrib1fvNV_)GetAddress("glVertexAttrib1fvNV", typeof(Delegates.glVertexAttrib1fvNV_));
        #endregion glVertexAttrib1fvNV_

        #region glVertexAttrib1sNV
        public static Delegates.glVertexAttrib1sNV glVertexAttrib1sNV = (Delegates.glVertexAttrib1sNV)GetAddress("glVertexAttrib1sNV", typeof(Delegates.glVertexAttrib1sNV));
        #endregion glVertexAttrib1sNV

        #region glVertexAttrib1svNV_
        public static Delegates.glVertexAttrib1svNV_ glVertexAttrib1svNV_ = (Delegates.glVertexAttrib1svNV_)GetAddress("glVertexAttrib1svNV", typeof(Delegates.glVertexAttrib1svNV_));
        #endregion glVertexAttrib1svNV_

        #region glVertexAttrib2dNV
        public static Delegates.glVertexAttrib2dNV glVertexAttrib2dNV = (Delegates.glVertexAttrib2dNV)GetAddress("glVertexAttrib2dNV", typeof(Delegates.glVertexAttrib2dNV));
        #endregion glVertexAttrib2dNV

        #region glVertexAttrib2dvNV_
        public static Delegates.glVertexAttrib2dvNV_ glVertexAttrib2dvNV_ = (Delegates.glVertexAttrib2dvNV_)GetAddress("glVertexAttrib2dvNV", typeof(Delegates.glVertexAttrib2dvNV_));
        #endregion glVertexAttrib2dvNV_

        #region glVertexAttrib2fNV
        public static Delegates.glVertexAttrib2fNV glVertexAttrib2fNV = (Delegates.glVertexAttrib2fNV)GetAddress("glVertexAttrib2fNV", typeof(Delegates.glVertexAttrib2fNV));
        #endregion glVertexAttrib2fNV

        #region glVertexAttrib2fvNV_
        public static Delegates.glVertexAttrib2fvNV_ glVertexAttrib2fvNV_ = (Delegates.glVertexAttrib2fvNV_)GetAddress("glVertexAttrib2fvNV", typeof(Delegates.glVertexAttrib2fvNV_));
        #endregion glVertexAttrib2fvNV_

        #region glVertexAttrib2sNV
        public static Delegates.glVertexAttrib2sNV glVertexAttrib2sNV = (Delegates.glVertexAttrib2sNV)GetAddress("glVertexAttrib2sNV", typeof(Delegates.glVertexAttrib2sNV));
        #endregion glVertexAttrib2sNV

        #region glVertexAttrib2svNV_
        public static Delegates.glVertexAttrib2svNV_ glVertexAttrib2svNV_ = (Delegates.glVertexAttrib2svNV_)GetAddress("glVertexAttrib2svNV", typeof(Delegates.glVertexAttrib2svNV_));
        #endregion glVertexAttrib2svNV_

        #region glVertexAttrib3dNV
        public static Delegates.glVertexAttrib3dNV glVertexAttrib3dNV = (Delegates.glVertexAttrib3dNV)GetAddress("glVertexAttrib3dNV", typeof(Delegates.glVertexAttrib3dNV));
        #endregion glVertexAttrib3dNV

        #region glVertexAttrib3dvNV_
        public static Delegates.glVertexAttrib3dvNV_ glVertexAttrib3dvNV_ = (Delegates.glVertexAttrib3dvNV_)GetAddress("glVertexAttrib3dvNV", typeof(Delegates.glVertexAttrib3dvNV_));
        #endregion glVertexAttrib3dvNV_

        #region glVertexAttrib3fNV
        public static Delegates.glVertexAttrib3fNV glVertexAttrib3fNV = (Delegates.glVertexAttrib3fNV)GetAddress("glVertexAttrib3fNV", typeof(Delegates.glVertexAttrib3fNV));
        #endregion glVertexAttrib3fNV

        #region glVertexAttrib3fvNV_
        public static Delegates.glVertexAttrib3fvNV_ glVertexAttrib3fvNV_ = (Delegates.glVertexAttrib3fvNV_)GetAddress("glVertexAttrib3fvNV", typeof(Delegates.glVertexAttrib3fvNV_));
        #endregion glVertexAttrib3fvNV_

        #region glVertexAttrib3sNV
        public static Delegates.glVertexAttrib3sNV glVertexAttrib3sNV = (Delegates.glVertexAttrib3sNV)GetAddress("glVertexAttrib3sNV", typeof(Delegates.glVertexAttrib3sNV));
        #endregion glVertexAttrib3sNV

        #region glVertexAttrib3svNV_
        public static Delegates.glVertexAttrib3svNV_ glVertexAttrib3svNV_ = (Delegates.glVertexAttrib3svNV_)GetAddress("glVertexAttrib3svNV", typeof(Delegates.glVertexAttrib3svNV_));
        #endregion glVertexAttrib3svNV_

        #region glVertexAttrib4dNV
        public static Delegates.glVertexAttrib4dNV glVertexAttrib4dNV = (Delegates.glVertexAttrib4dNV)GetAddress("glVertexAttrib4dNV", typeof(Delegates.glVertexAttrib4dNV));
        #endregion glVertexAttrib4dNV

        #region glVertexAttrib4dvNV_
        public static Delegates.glVertexAttrib4dvNV_ glVertexAttrib4dvNV_ = (Delegates.glVertexAttrib4dvNV_)GetAddress("glVertexAttrib4dvNV", typeof(Delegates.glVertexAttrib4dvNV_));
        #endregion glVertexAttrib4dvNV_

        #region glVertexAttrib4fNV
        public static Delegates.glVertexAttrib4fNV glVertexAttrib4fNV = (Delegates.glVertexAttrib4fNV)GetAddress("glVertexAttrib4fNV", typeof(Delegates.glVertexAttrib4fNV));
        #endregion glVertexAttrib4fNV

        #region glVertexAttrib4fvNV_
        public static Delegates.glVertexAttrib4fvNV_ glVertexAttrib4fvNV_ = (Delegates.glVertexAttrib4fvNV_)GetAddress("glVertexAttrib4fvNV", typeof(Delegates.glVertexAttrib4fvNV_));
        #endregion glVertexAttrib4fvNV_

        #region glVertexAttrib4sNV
        public static Delegates.glVertexAttrib4sNV glVertexAttrib4sNV = (Delegates.glVertexAttrib4sNV)GetAddress("glVertexAttrib4sNV", typeof(Delegates.glVertexAttrib4sNV));
        #endregion glVertexAttrib4sNV

        #region glVertexAttrib4svNV_
        public static Delegates.glVertexAttrib4svNV_ glVertexAttrib4svNV_ = (Delegates.glVertexAttrib4svNV_)GetAddress("glVertexAttrib4svNV", typeof(Delegates.glVertexAttrib4svNV_));
        #endregion glVertexAttrib4svNV_

        #region glVertexAttrib4ubNV
        public static Delegates.glVertexAttrib4ubNV glVertexAttrib4ubNV = (Delegates.glVertexAttrib4ubNV)GetAddress("glVertexAttrib4ubNV", typeof(Delegates.glVertexAttrib4ubNV));
        #endregion glVertexAttrib4ubNV

        #region glVertexAttrib4ubvNV_
        public static Delegates.glVertexAttrib4ubvNV_ glVertexAttrib4ubvNV_ = (Delegates.glVertexAttrib4ubvNV_)GetAddress("glVertexAttrib4ubvNV", typeof(Delegates.glVertexAttrib4ubvNV_));
        #endregion glVertexAttrib4ubvNV_

        #region glVertexAttribs1dvNV_
        public static Delegates.glVertexAttribs1dvNV_ glVertexAttribs1dvNV_ = (Delegates.glVertexAttribs1dvNV_)GetAddress("glVertexAttribs1dvNV", typeof(Delegates.glVertexAttribs1dvNV_));
        #endregion glVertexAttribs1dvNV_

        #region glVertexAttribs1fvNV_
        public static Delegates.glVertexAttribs1fvNV_ glVertexAttribs1fvNV_ = (Delegates.glVertexAttribs1fvNV_)GetAddress("glVertexAttribs1fvNV", typeof(Delegates.glVertexAttribs1fvNV_));
        #endregion glVertexAttribs1fvNV_

        #region glVertexAttribs1svNV_
        public static Delegates.glVertexAttribs1svNV_ glVertexAttribs1svNV_ = (Delegates.glVertexAttribs1svNV_)GetAddress("glVertexAttribs1svNV", typeof(Delegates.glVertexAttribs1svNV_));
        #endregion glVertexAttribs1svNV_

        #region glVertexAttribs2dvNV_
        public static Delegates.glVertexAttribs2dvNV_ glVertexAttribs2dvNV_ = (Delegates.glVertexAttribs2dvNV_)GetAddress("glVertexAttribs2dvNV", typeof(Delegates.glVertexAttribs2dvNV_));
        #endregion glVertexAttribs2dvNV_

        #region glVertexAttribs2fvNV_
        public static Delegates.glVertexAttribs2fvNV_ glVertexAttribs2fvNV_ = (Delegates.glVertexAttribs2fvNV_)GetAddress("glVertexAttribs2fvNV", typeof(Delegates.glVertexAttribs2fvNV_));
        #endregion glVertexAttribs2fvNV_

        #region glVertexAttribs2svNV_
        public static Delegates.glVertexAttribs2svNV_ glVertexAttribs2svNV_ = (Delegates.glVertexAttribs2svNV_)GetAddress("glVertexAttribs2svNV", typeof(Delegates.glVertexAttribs2svNV_));
        #endregion glVertexAttribs2svNV_

        #region glVertexAttribs3dvNV_
        public static Delegates.glVertexAttribs3dvNV_ glVertexAttribs3dvNV_ = (Delegates.glVertexAttribs3dvNV_)GetAddress("glVertexAttribs3dvNV", typeof(Delegates.glVertexAttribs3dvNV_));
        #endregion glVertexAttribs3dvNV_

        #region glVertexAttribs3fvNV_
        public static Delegates.glVertexAttribs3fvNV_ glVertexAttribs3fvNV_ = (Delegates.glVertexAttribs3fvNV_)GetAddress("glVertexAttribs3fvNV", typeof(Delegates.glVertexAttribs3fvNV_));
        #endregion glVertexAttribs3fvNV_

        #region glVertexAttribs3svNV_
        public static Delegates.glVertexAttribs3svNV_ glVertexAttribs3svNV_ = (Delegates.glVertexAttribs3svNV_)GetAddress("glVertexAttribs3svNV", typeof(Delegates.glVertexAttribs3svNV_));
        #endregion glVertexAttribs3svNV_

        #region glVertexAttribs4dvNV_
        public static Delegates.glVertexAttribs4dvNV_ glVertexAttribs4dvNV_ = (Delegates.glVertexAttribs4dvNV_)GetAddress("glVertexAttribs4dvNV", typeof(Delegates.glVertexAttribs4dvNV_));
        #endregion glVertexAttribs4dvNV_

        #region glVertexAttribs4fvNV_
        public static Delegates.glVertexAttribs4fvNV_ glVertexAttribs4fvNV_ = (Delegates.glVertexAttribs4fvNV_)GetAddress("glVertexAttribs4fvNV", typeof(Delegates.glVertexAttribs4fvNV_));
        #endregion glVertexAttribs4fvNV_

        #region glVertexAttribs4svNV_
        public static Delegates.glVertexAttribs4svNV_ glVertexAttribs4svNV_ = (Delegates.glVertexAttribs4svNV_)GetAddress("glVertexAttribs4svNV", typeof(Delegates.glVertexAttribs4svNV_));
        #endregion glVertexAttribs4svNV_

        #region glVertexAttribs4ubvNV_
        public static Delegates.glVertexAttribs4ubvNV_ glVertexAttribs4ubvNV_ = (Delegates.glVertexAttribs4ubvNV_)GetAddress("glVertexAttribs4ubvNV", typeof(Delegates.glVertexAttribs4ubvNV_));
        #endregion glVertexAttribs4ubvNV_

        #region glTexBumpParameterivATI_
        public static Delegates.glTexBumpParameterivATI_ glTexBumpParameterivATI_ = (Delegates.glTexBumpParameterivATI_)GetAddress("glTexBumpParameterivATI", typeof(Delegates.glTexBumpParameterivATI_));
        #endregion glTexBumpParameterivATI_

        #region glTexBumpParameterfvATI_
        public static Delegates.glTexBumpParameterfvATI_ glTexBumpParameterfvATI_ = (Delegates.glTexBumpParameterfvATI_)GetAddress("glTexBumpParameterfvATI", typeof(Delegates.glTexBumpParameterfvATI_));
        #endregion glTexBumpParameterfvATI_

        #region glGetTexBumpParameterivATI_
        public static Delegates.glGetTexBumpParameterivATI_ glGetTexBumpParameterivATI_ = (Delegates.glGetTexBumpParameterivATI_)GetAddress("glGetTexBumpParameterivATI", typeof(Delegates.glGetTexBumpParameterivATI_));
        #endregion glGetTexBumpParameterivATI_

        #region glGetTexBumpParameterfvATI_
        public static Delegates.glGetTexBumpParameterfvATI_ glGetTexBumpParameterfvATI_ = (Delegates.glGetTexBumpParameterfvATI_)GetAddress("glGetTexBumpParameterfvATI", typeof(Delegates.glGetTexBumpParameterfvATI_));
        #endregion glGetTexBumpParameterfvATI_

        #region glGenFragmentShadersATI
        public static Delegates.glGenFragmentShadersATI glGenFragmentShadersATI = (Delegates.glGenFragmentShadersATI)GetAddress("glGenFragmentShadersATI", typeof(Delegates.glGenFragmentShadersATI));
        #endregion glGenFragmentShadersATI

        #region glBindFragmentShaderATI
        public static Delegates.glBindFragmentShaderATI glBindFragmentShaderATI = (Delegates.glBindFragmentShaderATI)GetAddress("glBindFragmentShaderATI", typeof(Delegates.glBindFragmentShaderATI));
        #endregion glBindFragmentShaderATI

        #region glDeleteFragmentShaderATI
        public static Delegates.glDeleteFragmentShaderATI glDeleteFragmentShaderATI = (Delegates.glDeleteFragmentShaderATI)GetAddress("glDeleteFragmentShaderATI", typeof(Delegates.glDeleteFragmentShaderATI));
        #endregion glDeleteFragmentShaderATI

        #region glBeginFragmentShaderATI
        public static Delegates.glBeginFragmentShaderATI glBeginFragmentShaderATI = (Delegates.glBeginFragmentShaderATI)GetAddress("glBeginFragmentShaderATI", typeof(Delegates.glBeginFragmentShaderATI));
        #endregion glBeginFragmentShaderATI

        #region glEndFragmentShaderATI
        public static Delegates.glEndFragmentShaderATI glEndFragmentShaderATI = (Delegates.glEndFragmentShaderATI)GetAddress("glEndFragmentShaderATI", typeof(Delegates.glEndFragmentShaderATI));
        #endregion glEndFragmentShaderATI

        #region glPassTexCoordATI
        public static Delegates.glPassTexCoordATI glPassTexCoordATI = (Delegates.glPassTexCoordATI)GetAddress("glPassTexCoordATI", typeof(Delegates.glPassTexCoordATI));
        #endregion glPassTexCoordATI

        #region glSampleMapATI
        public static Delegates.glSampleMapATI glSampleMapATI = (Delegates.glSampleMapATI)GetAddress("glSampleMapATI", typeof(Delegates.glSampleMapATI));
        #endregion glSampleMapATI

        #region glColorFragmentOp1ATI
        public static Delegates.glColorFragmentOp1ATI glColorFragmentOp1ATI = (Delegates.glColorFragmentOp1ATI)GetAddress("glColorFragmentOp1ATI", typeof(Delegates.glColorFragmentOp1ATI));
        #endregion glColorFragmentOp1ATI

        #region glColorFragmentOp2ATI
        public static Delegates.glColorFragmentOp2ATI glColorFragmentOp2ATI = (Delegates.glColorFragmentOp2ATI)GetAddress("glColorFragmentOp2ATI", typeof(Delegates.glColorFragmentOp2ATI));
        #endregion glColorFragmentOp2ATI

        #region glColorFragmentOp3ATI
        public static Delegates.glColorFragmentOp3ATI glColorFragmentOp3ATI = (Delegates.glColorFragmentOp3ATI)GetAddress("glColorFragmentOp3ATI", typeof(Delegates.glColorFragmentOp3ATI));
        #endregion glColorFragmentOp3ATI

        #region glAlphaFragmentOp1ATI
        public static Delegates.glAlphaFragmentOp1ATI glAlphaFragmentOp1ATI = (Delegates.glAlphaFragmentOp1ATI)GetAddress("glAlphaFragmentOp1ATI", typeof(Delegates.glAlphaFragmentOp1ATI));
        #endregion glAlphaFragmentOp1ATI

        #region glAlphaFragmentOp2ATI
        public static Delegates.glAlphaFragmentOp2ATI glAlphaFragmentOp2ATI = (Delegates.glAlphaFragmentOp2ATI)GetAddress("glAlphaFragmentOp2ATI", typeof(Delegates.glAlphaFragmentOp2ATI));
        #endregion glAlphaFragmentOp2ATI

        #region glAlphaFragmentOp3ATI
        public static Delegates.glAlphaFragmentOp3ATI glAlphaFragmentOp3ATI = (Delegates.glAlphaFragmentOp3ATI)GetAddress("glAlphaFragmentOp3ATI", typeof(Delegates.glAlphaFragmentOp3ATI));
        #endregion glAlphaFragmentOp3ATI

        #region glSetFragmentShaderConstantATI_
        public static Delegates.glSetFragmentShaderConstantATI_ glSetFragmentShaderConstantATI_ = (Delegates.glSetFragmentShaderConstantATI_)GetAddress("glSetFragmentShaderConstantATI", typeof(Delegates.glSetFragmentShaderConstantATI_));
        #endregion glSetFragmentShaderConstantATI_

        #region glPNTrianglesiATI
        public static Delegates.glPNTrianglesiATI glPNTrianglesiATI = (Delegates.glPNTrianglesiATI)GetAddress("glPNTrianglesiATI", typeof(Delegates.glPNTrianglesiATI));
        #endregion glPNTrianglesiATI

        #region glPNTrianglesfATI
        public static Delegates.glPNTrianglesfATI glPNTrianglesfATI = (Delegates.glPNTrianglesfATI)GetAddress("glPNTrianglesfATI", typeof(Delegates.glPNTrianglesfATI));
        #endregion glPNTrianglesfATI

        #region glNewObjectBufferATI_
        public static Delegates.glNewObjectBufferATI_ glNewObjectBufferATI_ = (Delegates.glNewObjectBufferATI_)GetAddress("glNewObjectBufferATI", typeof(Delegates.glNewObjectBufferATI_));
        #endregion glNewObjectBufferATI_

        #region glIsObjectBufferATI
        public static Delegates.glIsObjectBufferATI glIsObjectBufferATI = (Delegates.glIsObjectBufferATI)GetAddress("glIsObjectBufferATI", typeof(Delegates.glIsObjectBufferATI));
        #endregion glIsObjectBufferATI

        #region glUpdateObjectBufferATI_
        public static Delegates.glUpdateObjectBufferATI_ glUpdateObjectBufferATI_ = (Delegates.glUpdateObjectBufferATI_)GetAddress("glUpdateObjectBufferATI", typeof(Delegates.glUpdateObjectBufferATI_));
        #endregion glUpdateObjectBufferATI_

        #region glGetObjectBufferfvATI_
        public static Delegates.glGetObjectBufferfvATI_ glGetObjectBufferfvATI_ = (Delegates.glGetObjectBufferfvATI_)GetAddress("glGetObjectBufferfvATI", typeof(Delegates.glGetObjectBufferfvATI_));
        #endregion glGetObjectBufferfvATI_

        #region glGetObjectBufferivATI_
        public static Delegates.glGetObjectBufferivATI_ glGetObjectBufferivATI_ = (Delegates.glGetObjectBufferivATI_)GetAddress("glGetObjectBufferivATI", typeof(Delegates.glGetObjectBufferivATI_));
        #endregion glGetObjectBufferivATI_

        #region glFreeObjectBufferATI
        public static Delegates.glFreeObjectBufferATI glFreeObjectBufferATI = (Delegates.glFreeObjectBufferATI)GetAddress("glFreeObjectBufferATI", typeof(Delegates.glFreeObjectBufferATI));
        #endregion glFreeObjectBufferATI

        #region glArrayObjectATI
        public static Delegates.glArrayObjectATI glArrayObjectATI = (Delegates.glArrayObjectATI)GetAddress("glArrayObjectATI", typeof(Delegates.glArrayObjectATI));
        #endregion glArrayObjectATI

        #region glGetArrayObjectfvATI_
        public static Delegates.glGetArrayObjectfvATI_ glGetArrayObjectfvATI_ = (Delegates.glGetArrayObjectfvATI_)GetAddress("glGetArrayObjectfvATI", typeof(Delegates.glGetArrayObjectfvATI_));
        #endregion glGetArrayObjectfvATI_

        #region glGetArrayObjectivATI_
        public static Delegates.glGetArrayObjectivATI_ glGetArrayObjectivATI_ = (Delegates.glGetArrayObjectivATI_)GetAddress("glGetArrayObjectivATI", typeof(Delegates.glGetArrayObjectivATI_));
        #endregion glGetArrayObjectivATI_

        #region glVariantArrayObjectATI
        public static Delegates.glVariantArrayObjectATI glVariantArrayObjectATI = (Delegates.glVariantArrayObjectATI)GetAddress("glVariantArrayObjectATI", typeof(Delegates.glVariantArrayObjectATI));
        #endregion glVariantArrayObjectATI

        #region glGetVariantArrayObjectfvATI_
        public static Delegates.glGetVariantArrayObjectfvATI_ glGetVariantArrayObjectfvATI_ = (Delegates.glGetVariantArrayObjectfvATI_)GetAddress("glGetVariantArrayObjectfvATI", typeof(Delegates.glGetVariantArrayObjectfvATI_));
        #endregion glGetVariantArrayObjectfvATI_

        #region glGetVariantArrayObjectivATI_
        public static Delegates.glGetVariantArrayObjectivATI_ glGetVariantArrayObjectivATI_ = (Delegates.glGetVariantArrayObjectivATI_)GetAddress("glGetVariantArrayObjectivATI", typeof(Delegates.glGetVariantArrayObjectivATI_));
        #endregion glGetVariantArrayObjectivATI_

        #region glBeginVertexShaderEXT
        public static Delegates.glBeginVertexShaderEXT glBeginVertexShaderEXT = (Delegates.glBeginVertexShaderEXT)GetAddress("glBeginVertexShaderEXT", typeof(Delegates.glBeginVertexShaderEXT));
        #endregion glBeginVertexShaderEXT

        #region glEndVertexShaderEXT
        public static Delegates.glEndVertexShaderEXT glEndVertexShaderEXT = (Delegates.glEndVertexShaderEXT)GetAddress("glEndVertexShaderEXT", typeof(Delegates.glEndVertexShaderEXT));
        #endregion glEndVertexShaderEXT

        #region glBindVertexShaderEXT
        public static Delegates.glBindVertexShaderEXT glBindVertexShaderEXT = (Delegates.glBindVertexShaderEXT)GetAddress("glBindVertexShaderEXT", typeof(Delegates.glBindVertexShaderEXT));
        #endregion glBindVertexShaderEXT

        #region glGenVertexShadersEXT
        public static Delegates.glGenVertexShadersEXT glGenVertexShadersEXT = (Delegates.glGenVertexShadersEXT)GetAddress("glGenVertexShadersEXT", typeof(Delegates.glGenVertexShadersEXT));
        #endregion glGenVertexShadersEXT

        #region glDeleteVertexShaderEXT
        public static Delegates.glDeleteVertexShaderEXT glDeleteVertexShaderEXT = (Delegates.glDeleteVertexShaderEXT)GetAddress("glDeleteVertexShaderEXT", typeof(Delegates.glDeleteVertexShaderEXT));
        #endregion glDeleteVertexShaderEXT

        #region glShaderOp1EXT
        public static Delegates.glShaderOp1EXT glShaderOp1EXT = (Delegates.glShaderOp1EXT)GetAddress("glShaderOp1EXT", typeof(Delegates.glShaderOp1EXT));
        #endregion glShaderOp1EXT

        #region glShaderOp2EXT
        public static Delegates.glShaderOp2EXT glShaderOp2EXT = (Delegates.glShaderOp2EXT)GetAddress("glShaderOp2EXT", typeof(Delegates.glShaderOp2EXT));
        #endregion glShaderOp2EXT

        #region glShaderOp3EXT
        public static Delegates.glShaderOp3EXT glShaderOp3EXT = (Delegates.glShaderOp3EXT)GetAddress("glShaderOp3EXT", typeof(Delegates.glShaderOp3EXT));
        #endregion glShaderOp3EXT

        #region glSwizzleEXT
        public static Delegates.glSwizzleEXT glSwizzleEXT = (Delegates.glSwizzleEXT)GetAddress("glSwizzleEXT", typeof(Delegates.glSwizzleEXT));
        #endregion glSwizzleEXT

        #region glWriteMaskEXT
        public static Delegates.glWriteMaskEXT glWriteMaskEXT = (Delegates.glWriteMaskEXT)GetAddress("glWriteMaskEXT", typeof(Delegates.glWriteMaskEXT));
        #endregion glWriteMaskEXT

        #region glInsertComponentEXT
        public static Delegates.glInsertComponentEXT glInsertComponentEXT = (Delegates.glInsertComponentEXT)GetAddress("glInsertComponentEXT", typeof(Delegates.glInsertComponentEXT));
        #endregion glInsertComponentEXT

        #region glExtractComponentEXT
        public static Delegates.glExtractComponentEXT glExtractComponentEXT = (Delegates.glExtractComponentEXT)GetAddress("glExtractComponentEXT", typeof(Delegates.glExtractComponentEXT));
        #endregion glExtractComponentEXT

        #region glGenSymbolsEXT
        public static Delegates.glGenSymbolsEXT glGenSymbolsEXT = (Delegates.glGenSymbolsEXT)GetAddress("glGenSymbolsEXT", typeof(Delegates.glGenSymbolsEXT));
        #endregion glGenSymbolsEXT

        #region glSetInvariantEXT_
        public static Delegates.glSetInvariantEXT_ glSetInvariantEXT_ = (Delegates.glSetInvariantEXT_)GetAddress("glSetInvariantEXT", typeof(Delegates.glSetInvariantEXT_));
        #endregion glSetInvariantEXT_

        #region glSetLocalConstantEXT_
        public static Delegates.glSetLocalConstantEXT_ glSetLocalConstantEXT_ = (Delegates.glSetLocalConstantEXT_)GetAddress("glSetLocalConstantEXT", typeof(Delegates.glSetLocalConstantEXT_));
        #endregion glSetLocalConstantEXT_

        #region glVariantbvEXT_
        public static Delegates.glVariantbvEXT_ glVariantbvEXT_ = (Delegates.glVariantbvEXT_)GetAddress("glVariantbvEXT", typeof(Delegates.glVariantbvEXT_));
        #endregion glVariantbvEXT_

        #region glVariantsvEXT_
        public static Delegates.glVariantsvEXT_ glVariantsvEXT_ = (Delegates.glVariantsvEXT_)GetAddress("glVariantsvEXT", typeof(Delegates.glVariantsvEXT_));
        #endregion glVariantsvEXT_

        #region glVariantivEXT_
        public static Delegates.glVariantivEXT_ glVariantivEXT_ = (Delegates.glVariantivEXT_)GetAddress("glVariantivEXT", typeof(Delegates.glVariantivEXT_));
        #endregion glVariantivEXT_

        #region glVariantfvEXT_
        public static Delegates.glVariantfvEXT_ glVariantfvEXT_ = (Delegates.glVariantfvEXT_)GetAddress("glVariantfvEXT", typeof(Delegates.glVariantfvEXT_));
        #endregion glVariantfvEXT_

        #region glVariantdvEXT_
        public static Delegates.glVariantdvEXT_ glVariantdvEXT_ = (Delegates.glVariantdvEXT_)GetAddress("glVariantdvEXT", typeof(Delegates.glVariantdvEXT_));
        #endregion glVariantdvEXT_

        #region glVariantubvEXT_
        public static Delegates.glVariantubvEXT_ glVariantubvEXT_ = (Delegates.glVariantubvEXT_)GetAddress("glVariantubvEXT", typeof(Delegates.glVariantubvEXT_));
        #endregion glVariantubvEXT_

        #region glVariantusvEXT_
        public static Delegates.glVariantusvEXT_ glVariantusvEXT_ = (Delegates.glVariantusvEXT_)GetAddress("glVariantusvEXT", typeof(Delegates.glVariantusvEXT_));
        #endregion glVariantusvEXT_

        #region glVariantuivEXT_
        public static Delegates.glVariantuivEXT_ glVariantuivEXT_ = (Delegates.glVariantuivEXT_)GetAddress("glVariantuivEXT", typeof(Delegates.glVariantuivEXT_));
        #endregion glVariantuivEXT_

        #region glVariantPointerEXT_
        public static Delegates.glVariantPointerEXT_ glVariantPointerEXT_ = (Delegates.glVariantPointerEXT_)GetAddress("glVariantPointerEXT", typeof(Delegates.glVariantPointerEXT_));
        #endregion glVariantPointerEXT_

        #region glEnableVariantClientStateEXT
        public static Delegates.glEnableVariantClientStateEXT glEnableVariantClientStateEXT = (Delegates.glEnableVariantClientStateEXT)GetAddress("glEnableVariantClientStateEXT", typeof(Delegates.glEnableVariantClientStateEXT));
        #endregion glEnableVariantClientStateEXT

        #region glDisableVariantClientStateEXT
        public static Delegates.glDisableVariantClientStateEXT glDisableVariantClientStateEXT = (Delegates.glDisableVariantClientStateEXT)GetAddress("glDisableVariantClientStateEXT", typeof(Delegates.glDisableVariantClientStateEXT));
        #endregion glDisableVariantClientStateEXT

        #region glBindLightParameterEXT
        public static Delegates.glBindLightParameterEXT glBindLightParameterEXT = (Delegates.glBindLightParameterEXT)GetAddress("glBindLightParameterEXT", typeof(Delegates.glBindLightParameterEXT));
        #endregion glBindLightParameterEXT

        #region glBindMaterialParameterEXT
        public static Delegates.glBindMaterialParameterEXT glBindMaterialParameterEXT = (Delegates.glBindMaterialParameterEXT)GetAddress("glBindMaterialParameterEXT", typeof(Delegates.glBindMaterialParameterEXT));
        #endregion glBindMaterialParameterEXT

        #region glBindTexGenParameterEXT
        public static Delegates.glBindTexGenParameterEXT glBindTexGenParameterEXT = (Delegates.glBindTexGenParameterEXT)GetAddress("glBindTexGenParameterEXT", typeof(Delegates.glBindTexGenParameterEXT));
        #endregion glBindTexGenParameterEXT

        #region glBindTextureUnitParameterEXT
        public static Delegates.glBindTextureUnitParameterEXT glBindTextureUnitParameterEXT = (Delegates.glBindTextureUnitParameterEXT)GetAddress("glBindTextureUnitParameterEXT", typeof(Delegates.glBindTextureUnitParameterEXT));
        #endregion glBindTextureUnitParameterEXT

        #region glBindParameterEXT
        public static Delegates.glBindParameterEXT glBindParameterEXT = (Delegates.glBindParameterEXT)GetAddress("glBindParameterEXT", typeof(Delegates.glBindParameterEXT));
        #endregion glBindParameterEXT

        #region glIsVariantEnabledEXT
        public static Delegates.glIsVariantEnabledEXT glIsVariantEnabledEXT = (Delegates.glIsVariantEnabledEXT)GetAddress("glIsVariantEnabledEXT", typeof(Delegates.glIsVariantEnabledEXT));
        #endregion glIsVariantEnabledEXT

        #region glGetVariantBooleanvEXT_
        public static Delegates.glGetVariantBooleanvEXT_ glGetVariantBooleanvEXT_ = (Delegates.glGetVariantBooleanvEXT_)GetAddress("glGetVariantBooleanvEXT", typeof(Delegates.glGetVariantBooleanvEXT_));
        #endregion glGetVariantBooleanvEXT_

        #region glGetVariantIntegervEXT_
        public static Delegates.glGetVariantIntegervEXT_ glGetVariantIntegervEXT_ = (Delegates.glGetVariantIntegervEXT_)GetAddress("glGetVariantIntegervEXT", typeof(Delegates.glGetVariantIntegervEXT_));
        #endregion glGetVariantIntegervEXT_

        #region glGetVariantFloatvEXT_
        public static Delegates.glGetVariantFloatvEXT_ glGetVariantFloatvEXT_ = (Delegates.glGetVariantFloatvEXT_)GetAddress("glGetVariantFloatvEXT", typeof(Delegates.glGetVariantFloatvEXT_));
        #endregion glGetVariantFloatvEXT_

        #region glGetVariantPointervEXT_
        public static Delegates.glGetVariantPointervEXT_ glGetVariantPointervEXT_ = (Delegates.glGetVariantPointervEXT_)GetAddress("glGetVariantPointervEXT", typeof(Delegates.glGetVariantPointervEXT_));
        #endregion glGetVariantPointervEXT_

        #region glGetInvariantBooleanvEXT_
        public static Delegates.glGetInvariantBooleanvEXT_ glGetInvariantBooleanvEXT_ = (Delegates.glGetInvariantBooleanvEXT_)GetAddress("glGetInvariantBooleanvEXT", typeof(Delegates.glGetInvariantBooleanvEXT_));
        #endregion glGetInvariantBooleanvEXT_

        #region glGetInvariantIntegervEXT_
        public static Delegates.glGetInvariantIntegervEXT_ glGetInvariantIntegervEXT_ = (Delegates.glGetInvariantIntegervEXT_)GetAddress("glGetInvariantIntegervEXT", typeof(Delegates.glGetInvariantIntegervEXT_));
        #endregion glGetInvariantIntegervEXT_

        #region glGetInvariantFloatvEXT_
        public static Delegates.glGetInvariantFloatvEXT_ glGetInvariantFloatvEXT_ = (Delegates.glGetInvariantFloatvEXT_)GetAddress("glGetInvariantFloatvEXT", typeof(Delegates.glGetInvariantFloatvEXT_));
        #endregion glGetInvariantFloatvEXT_

        #region glGetLocalConstantBooleanvEXT_
        public static Delegates.glGetLocalConstantBooleanvEXT_ glGetLocalConstantBooleanvEXT_ = (Delegates.glGetLocalConstantBooleanvEXT_)GetAddress("glGetLocalConstantBooleanvEXT", typeof(Delegates.glGetLocalConstantBooleanvEXT_));
        #endregion glGetLocalConstantBooleanvEXT_

        #region glGetLocalConstantIntegervEXT_
        public static Delegates.glGetLocalConstantIntegervEXT_ glGetLocalConstantIntegervEXT_ = (Delegates.glGetLocalConstantIntegervEXT_)GetAddress("glGetLocalConstantIntegervEXT", typeof(Delegates.glGetLocalConstantIntegervEXT_));
        #endregion glGetLocalConstantIntegervEXT_

        #region glGetLocalConstantFloatvEXT_
        public static Delegates.glGetLocalConstantFloatvEXT_ glGetLocalConstantFloatvEXT_ = (Delegates.glGetLocalConstantFloatvEXT_)GetAddress("glGetLocalConstantFloatvEXT", typeof(Delegates.glGetLocalConstantFloatvEXT_));
        #endregion glGetLocalConstantFloatvEXT_

        #region glVertexStream1sATI
        public static Delegates.glVertexStream1sATI glVertexStream1sATI = (Delegates.glVertexStream1sATI)GetAddress("glVertexStream1sATI", typeof(Delegates.glVertexStream1sATI));
        #endregion glVertexStream1sATI

        #region glVertexStream1svATI_
        public static Delegates.glVertexStream1svATI_ glVertexStream1svATI_ = (Delegates.glVertexStream1svATI_)GetAddress("glVertexStream1svATI", typeof(Delegates.glVertexStream1svATI_));
        #endregion glVertexStream1svATI_

        #region glVertexStream1iATI
        public static Delegates.glVertexStream1iATI glVertexStream1iATI = (Delegates.glVertexStream1iATI)GetAddress("glVertexStream1iATI", typeof(Delegates.glVertexStream1iATI));
        #endregion glVertexStream1iATI

        #region glVertexStream1ivATI_
        public static Delegates.glVertexStream1ivATI_ glVertexStream1ivATI_ = (Delegates.glVertexStream1ivATI_)GetAddress("glVertexStream1ivATI", typeof(Delegates.glVertexStream1ivATI_));
        #endregion glVertexStream1ivATI_

        #region glVertexStream1fATI
        public static Delegates.glVertexStream1fATI glVertexStream1fATI = (Delegates.glVertexStream1fATI)GetAddress("glVertexStream1fATI", typeof(Delegates.glVertexStream1fATI));
        #endregion glVertexStream1fATI

        #region glVertexStream1fvATI_
        public static Delegates.glVertexStream1fvATI_ glVertexStream1fvATI_ = (Delegates.glVertexStream1fvATI_)GetAddress("glVertexStream1fvATI", typeof(Delegates.glVertexStream1fvATI_));
        #endregion glVertexStream1fvATI_

        #region glVertexStream1dATI
        public static Delegates.glVertexStream1dATI glVertexStream1dATI = (Delegates.glVertexStream1dATI)GetAddress("glVertexStream1dATI", typeof(Delegates.glVertexStream1dATI));
        #endregion glVertexStream1dATI

        #region glVertexStream1dvATI_
        public static Delegates.glVertexStream1dvATI_ glVertexStream1dvATI_ = (Delegates.glVertexStream1dvATI_)GetAddress("glVertexStream1dvATI", typeof(Delegates.glVertexStream1dvATI_));
        #endregion glVertexStream1dvATI_

        #region glVertexStream2sATI
        public static Delegates.glVertexStream2sATI glVertexStream2sATI = (Delegates.glVertexStream2sATI)GetAddress("glVertexStream2sATI", typeof(Delegates.glVertexStream2sATI));
        #endregion glVertexStream2sATI

        #region glVertexStream2svATI_
        public static Delegates.glVertexStream2svATI_ glVertexStream2svATI_ = (Delegates.glVertexStream2svATI_)GetAddress("glVertexStream2svATI", typeof(Delegates.glVertexStream2svATI_));
        #endregion glVertexStream2svATI_

        #region glVertexStream2iATI
        public static Delegates.glVertexStream2iATI glVertexStream2iATI = (Delegates.glVertexStream2iATI)GetAddress("glVertexStream2iATI", typeof(Delegates.glVertexStream2iATI));
        #endregion glVertexStream2iATI

        #region glVertexStream2ivATI_
        public static Delegates.glVertexStream2ivATI_ glVertexStream2ivATI_ = (Delegates.glVertexStream2ivATI_)GetAddress("glVertexStream2ivATI", typeof(Delegates.glVertexStream2ivATI_));
        #endregion glVertexStream2ivATI_

        #region glVertexStream2fATI
        public static Delegates.glVertexStream2fATI glVertexStream2fATI = (Delegates.glVertexStream2fATI)GetAddress("glVertexStream2fATI", typeof(Delegates.glVertexStream2fATI));
        #endregion glVertexStream2fATI

        #region glVertexStream2fvATI_
        public static Delegates.glVertexStream2fvATI_ glVertexStream2fvATI_ = (Delegates.glVertexStream2fvATI_)GetAddress("glVertexStream2fvATI", typeof(Delegates.glVertexStream2fvATI_));
        #endregion glVertexStream2fvATI_

        #region glVertexStream2dATI
        public static Delegates.glVertexStream2dATI glVertexStream2dATI = (Delegates.glVertexStream2dATI)GetAddress("glVertexStream2dATI", typeof(Delegates.glVertexStream2dATI));
        #endregion glVertexStream2dATI

        #region glVertexStream2dvATI_
        public static Delegates.glVertexStream2dvATI_ glVertexStream2dvATI_ = (Delegates.glVertexStream2dvATI_)GetAddress("glVertexStream2dvATI", typeof(Delegates.glVertexStream2dvATI_));
        #endregion glVertexStream2dvATI_

        #region glVertexStream3sATI
        public static Delegates.glVertexStream3sATI glVertexStream3sATI = (Delegates.glVertexStream3sATI)GetAddress("glVertexStream3sATI", typeof(Delegates.glVertexStream3sATI));
        #endregion glVertexStream3sATI

        #region glVertexStream3svATI_
        public static Delegates.glVertexStream3svATI_ glVertexStream3svATI_ = (Delegates.glVertexStream3svATI_)GetAddress("glVertexStream3svATI", typeof(Delegates.glVertexStream3svATI_));
        #endregion glVertexStream3svATI_

        #region glVertexStream3iATI
        public static Delegates.glVertexStream3iATI glVertexStream3iATI = (Delegates.glVertexStream3iATI)GetAddress("glVertexStream3iATI", typeof(Delegates.glVertexStream3iATI));
        #endregion glVertexStream3iATI

        #region glVertexStream3ivATI_
        public static Delegates.glVertexStream3ivATI_ glVertexStream3ivATI_ = (Delegates.glVertexStream3ivATI_)GetAddress("glVertexStream3ivATI", typeof(Delegates.glVertexStream3ivATI_));
        #endregion glVertexStream3ivATI_

        #region glVertexStream3fATI
        public static Delegates.glVertexStream3fATI glVertexStream3fATI = (Delegates.glVertexStream3fATI)GetAddress("glVertexStream3fATI", typeof(Delegates.glVertexStream3fATI));
        #endregion glVertexStream3fATI

        #region glVertexStream3fvATI_
        public static Delegates.glVertexStream3fvATI_ glVertexStream3fvATI_ = (Delegates.glVertexStream3fvATI_)GetAddress("glVertexStream3fvATI", typeof(Delegates.glVertexStream3fvATI_));
        #endregion glVertexStream3fvATI_

        #region glVertexStream3dATI
        public static Delegates.glVertexStream3dATI glVertexStream3dATI = (Delegates.glVertexStream3dATI)GetAddress("glVertexStream3dATI", typeof(Delegates.glVertexStream3dATI));
        #endregion glVertexStream3dATI

        #region glVertexStream3dvATI_
        public static Delegates.glVertexStream3dvATI_ glVertexStream3dvATI_ = (Delegates.glVertexStream3dvATI_)GetAddress("glVertexStream3dvATI", typeof(Delegates.glVertexStream3dvATI_));
        #endregion glVertexStream3dvATI_

        #region glVertexStream4sATI
        public static Delegates.glVertexStream4sATI glVertexStream4sATI = (Delegates.glVertexStream4sATI)GetAddress("glVertexStream4sATI", typeof(Delegates.glVertexStream4sATI));
        #endregion glVertexStream4sATI

        #region glVertexStream4svATI_
        public static Delegates.glVertexStream4svATI_ glVertexStream4svATI_ = (Delegates.glVertexStream4svATI_)GetAddress("glVertexStream4svATI", typeof(Delegates.glVertexStream4svATI_));
        #endregion glVertexStream4svATI_

        #region glVertexStream4iATI
        public static Delegates.glVertexStream4iATI glVertexStream4iATI = (Delegates.glVertexStream4iATI)GetAddress("glVertexStream4iATI", typeof(Delegates.glVertexStream4iATI));
        #endregion glVertexStream4iATI

        #region glVertexStream4ivATI_
        public static Delegates.glVertexStream4ivATI_ glVertexStream4ivATI_ = (Delegates.glVertexStream4ivATI_)GetAddress("glVertexStream4ivATI", typeof(Delegates.glVertexStream4ivATI_));
        #endregion glVertexStream4ivATI_

        #region glVertexStream4fATI
        public static Delegates.glVertexStream4fATI glVertexStream4fATI = (Delegates.glVertexStream4fATI)GetAddress("glVertexStream4fATI", typeof(Delegates.glVertexStream4fATI));
        #endregion glVertexStream4fATI

        #region glVertexStream4fvATI_
        public static Delegates.glVertexStream4fvATI_ glVertexStream4fvATI_ = (Delegates.glVertexStream4fvATI_)GetAddress("glVertexStream4fvATI", typeof(Delegates.glVertexStream4fvATI_));
        #endregion glVertexStream4fvATI_

        #region glVertexStream4dATI
        public static Delegates.glVertexStream4dATI glVertexStream4dATI = (Delegates.glVertexStream4dATI)GetAddress("glVertexStream4dATI", typeof(Delegates.glVertexStream4dATI));
        #endregion glVertexStream4dATI

        #region glVertexStream4dvATI_
        public static Delegates.glVertexStream4dvATI_ glVertexStream4dvATI_ = (Delegates.glVertexStream4dvATI_)GetAddress("glVertexStream4dvATI", typeof(Delegates.glVertexStream4dvATI_));
        #endregion glVertexStream4dvATI_

        #region glNormalStream3bATI
        public static Delegates.glNormalStream3bATI glNormalStream3bATI = (Delegates.glNormalStream3bATI)GetAddress("glNormalStream3bATI", typeof(Delegates.glNormalStream3bATI));
        #endregion glNormalStream3bATI

        #region glNormalStream3bvATI_
        public static Delegates.glNormalStream3bvATI_ glNormalStream3bvATI_ = (Delegates.glNormalStream3bvATI_)GetAddress("glNormalStream3bvATI", typeof(Delegates.glNormalStream3bvATI_));
        #endregion glNormalStream3bvATI_

        #region glNormalStream3sATI
        public static Delegates.glNormalStream3sATI glNormalStream3sATI = (Delegates.glNormalStream3sATI)GetAddress("glNormalStream3sATI", typeof(Delegates.glNormalStream3sATI));
        #endregion glNormalStream3sATI

        #region glNormalStream3svATI_
        public static Delegates.glNormalStream3svATI_ glNormalStream3svATI_ = (Delegates.glNormalStream3svATI_)GetAddress("glNormalStream3svATI", typeof(Delegates.glNormalStream3svATI_));
        #endregion glNormalStream3svATI_

        #region glNormalStream3iATI
        public static Delegates.glNormalStream3iATI glNormalStream3iATI = (Delegates.glNormalStream3iATI)GetAddress("glNormalStream3iATI", typeof(Delegates.glNormalStream3iATI));
        #endregion glNormalStream3iATI

        #region glNormalStream3ivATI_
        public static Delegates.glNormalStream3ivATI_ glNormalStream3ivATI_ = (Delegates.glNormalStream3ivATI_)GetAddress("glNormalStream3ivATI", typeof(Delegates.glNormalStream3ivATI_));
        #endregion glNormalStream3ivATI_

        #region glNormalStream3fATI
        public static Delegates.glNormalStream3fATI glNormalStream3fATI = (Delegates.glNormalStream3fATI)GetAddress("glNormalStream3fATI", typeof(Delegates.glNormalStream3fATI));
        #endregion glNormalStream3fATI

        #region glNormalStream3fvATI_
        public static Delegates.glNormalStream3fvATI_ glNormalStream3fvATI_ = (Delegates.glNormalStream3fvATI_)GetAddress("glNormalStream3fvATI", typeof(Delegates.glNormalStream3fvATI_));
        #endregion glNormalStream3fvATI_

        #region glNormalStream3dATI
        public static Delegates.glNormalStream3dATI glNormalStream3dATI = (Delegates.glNormalStream3dATI)GetAddress("glNormalStream3dATI", typeof(Delegates.glNormalStream3dATI));
        #endregion glNormalStream3dATI

        #region glNormalStream3dvATI_
        public static Delegates.glNormalStream3dvATI_ glNormalStream3dvATI_ = (Delegates.glNormalStream3dvATI_)GetAddress("glNormalStream3dvATI", typeof(Delegates.glNormalStream3dvATI_));
        #endregion glNormalStream3dvATI_

        #region glClientActiveVertexStreamATI
        public static Delegates.glClientActiveVertexStreamATI glClientActiveVertexStreamATI = (Delegates.glClientActiveVertexStreamATI)GetAddress("glClientActiveVertexStreamATI", typeof(Delegates.glClientActiveVertexStreamATI));
        #endregion glClientActiveVertexStreamATI

        #region glVertexBlendEnviATI
        public static Delegates.glVertexBlendEnviATI glVertexBlendEnviATI = (Delegates.glVertexBlendEnviATI)GetAddress("glVertexBlendEnviATI", typeof(Delegates.glVertexBlendEnviATI));
        #endregion glVertexBlendEnviATI

        #region glVertexBlendEnvfATI
        public static Delegates.glVertexBlendEnvfATI glVertexBlendEnvfATI = (Delegates.glVertexBlendEnvfATI)GetAddress("glVertexBlendEnvfATI", typeof(Delegates.glVertexBlendEnvfATI));
        #endregion glVertexBlendEnvfATI

        #region glElementPointerATI_
        public static Delegates.glElementPointerATI_ glElementPointerATI_ = (Delegates.glElementPointerATI_)GetAddress("glElementPointerATI", typeof(Delegates.glElementPointerATI_));
        #endregion glElementPointerATI_

        #region glDrawElementArrayATI
        public static Delegates.glDrawElementArrayATI glDrawElementArrayATI = (Delegates.glDrawElementArrayATI)GetAddress("glDrawElementArrayATI", typeof(Delegates.glDrawElementArrayATI));
        #endregion glDrawElementArrayATI

        #region glDrawRangeElementArrayATI
        public static Delegates.glDrawRangeElementArrayATI glDrawRangeElementArrayATI = (Delegates.glDrawRangeElementArrayATI)GetAddress("glDrawRangeElementArrayATI", typeof(Delegates.glDrawRangeElementArrayATI));
        #endregion glDrawRangeElementArrayATI

        #region glDrawMeshArraysSUN
        public static Delegates.glDrawMeshArraysSUN glDrawMeshArraysSUN = (Delegates.glDrawMeshArraysSUN)GetAddress("glDrawMeshArraysSUN", typeof(Delegates.glDrawMeshArraysSUN));
        #endregion glDrawMeshArraysSUN

        #region glGenOcclusionQueriesNV_
        public static Delegates.glGenOcclusionQueriesNV_ glGenOcclusionQueriesNV_ = (Delegates.glGenOcclusionQueriesNV_)GetAddress("glGenOcclusionQueriesNV", typeof(Delegates.glGenOcclusionQueriesNV_));
        #endregion glGenOcclusionQueriesNV_

        #region glDeleteOcclusionQueriesNV_
        public static Delegates.glDeleteOcclusionQueriesNV_ glDeleteOcclusionQueriesNV_ = (Delegates.glDeleteOcclusionQueriesNV_)GetAddress("glDeleteOcclusionQueriesNV", typeof(Delegates.glDeleteOcclusionQueriesNV_));
        #endregion glDeleteOcclusionQueriesNV_

        #region glIsOcclusionQueryNV
        public static Delegates.glIsOcclusionQueryNV glIsOcclusionQueryNV = (Delegates.glIsOcclusionQueryNV)GetAddress("glIsOcclusionQueryNV", typeof(Delegates.glIsOcclusionQueryNV));
        #endregion glIsOcclusionQueryNV

        #region glBeginOcclusionQueryNV
        public static Delegates.glBeginOcclusionQueryNV glBeginOcclusionQueryNV = (Delegates.glBeginOcclusionQueryNV)GetAddress("glBeginOcclusionQueryNV", typeof(Delegates.glBeginOcclusionQueryNV));
        #endregion glBeginOcclusionQueryNV

        #region glEndOcclusionQueryNV
        public static Delegates.glEndOcclusionQueryNV glEndOcclusionQueryNV = (Delegates.glEndOcclusionQueryNV)GetAddress("glEndOcclusionQueryNV", typeof(Delegates.glEndOcclusionQueryNV));
        #endregion glEndOcclusionQueryNV

        #region glGetOcclusionQueryivNV_
        public static Delegates.glGetOcclusionQueryivNV_ glGetOcclusionQueryivNV_ = (Delegates.glGetOcclusionQueryivNV_)GetAddress("glGetOcclusionQueryivNV", typeof(Delegates.glGetOcclusionQueryivNV_));
        #endregion glGetOcclusionQueryivNV_

        #region glGetOcclusionQueryuivNV_
        public static Delegates.glGetOcclusionQueryuivNV_ glGetOcclusionQueryuivNV_ = (Delegates.glGetOcclusionQueryuivNV_)GetAddress("glGetOcclusionQueryuivNV", typeof(Delegates.glGetOcclusionQueryuivNV_));
        #endregion glGetOcclusionQueryuivNV_

        #region glPointParameteriNV
        public static Delegates.glPointParameteriNV glPointParameteriNV = (Delegates.glPointParameteriNV)GetAddress("glPointParameteriNV", typeof(Delegates.glPointParameteriNV));
        #endregion glPointParameteriNV

        #region glPointParameterivNV_
        public static Delegates.glPointParameterivNV_ glPointParameterivNV_ = (Delegates.glPointParameterivNV_)GetAddress("glPointParameterivNV", typeof(Delegates.glPointParameterivNV_));
        #endregion glPointParameterivNV_

        #region glActiveStencilFaceEXT
        public static Delegates.glActiveStencilFaceEXT glActiveStencilFaceEXT = (Delegates.glActiveStencilFaceEXT)GetAddress("glActiveStencilFaceEXT", typeof(Delegates.glActiveStencilFaceEXT));
        #endregion glActiveStencilFaceEXT

        #region glElementPointerAPPLE_
        public static Delegates.glElementPointerAPPLE_ glElementPointerAPPLE_ = (Delegates.glElementPointerAPPLE_)GetAddress("glElementPointerAPPLE", typeof(Delegates.glElementPointerAPPLE_));
        #endregion glElementPointerAPPLE_

        #region glDrawElementArrayAPPLE
        public static Delegates.glDrawElementArrayAPPLE glDrawElementArrayAPPLE = (Delegates.glDrawElementArrayAPPLE)GetAddress("glDrawElementArrayAPPLE", typeof(Delegates.glDrawElementArrayAPPLE));
        #endregion glDrawElementArrayAPPLE

        #region glDrawRangeElementArrayAPPLE
        public static Delegates.glDrawRangeElementArrayAPPLE glDrawRangeElementArrayAPPLE = (Delegates.glDrawRangeElementArrayAPPLE)GetAddress("glDrawRangeElementArrayAPPLE", typeof(Delegates.glDrawRangeElementArrayAPPLE));
        #endregion glDrawRangeElementArrayAPPLE

        #region glMultiDrawElementArrayAPPLE_
        public static Delegates.glMultiDrawElementArrayAPPLE_ glMultiDrawElementArrayAPPLE_ = (Delegates.glMultiDrawElementArrayAPPLE_)GetAddress("glMultiDrawElementArrayAPPLE", typeof(Delegates.glMultiDrawElementArrayAPPLE_));
        #endregion glMultiDrawElementArrayAPPLE_

        #region glMultiDrawRangeElementArrayAPPLE_
        public static Delegates.glMultiDrawRangeElementArrayAPPLE_ glMultiDrawRangeElementArrayAPPLE_ = (Delegates.glMultiDrawRangeElementArrayAPPLE_)GetAddress("glMultiDrawRangeElementArrayAPPLE", typeof(Delegates.glMultiDrawRangeElementArrayAPPLE_));
        #endregion glMultiDrawRangeElementArrayAPPLE_

        #region glGenFencesAPPLE_
        public static Delegates.glGenFencesAPPLE_ glGenFencesAPPLE_ = (Delegates.glGenFencesAPPLE_)GetAddress("glGenFencesAPPLE", typeof(Delegates.glGenFencesAPPLE_));
        #endregion glGenFencesAPPLE_

        #region glDeleteFencesAPPLE_
        public static Delegates.glDeleteFencesAPPLE_ glDeleteFencesAPPLE_ = (Delegates.glDeleteFencesAPPLE_)GetAddress("glDeleteFencesAPPLE", typeof(Delegates.glDeleteFencesAPPLE_));
        #endregion glDeleteFencesAPPLE_

        #region glSetFenceAPPLE
        public static Delegates.glSetFenceAPPLE glSetFenceAPPLE = (Delegates.glSetFenceAPPLE)GetAddress("glSetFenceAPPLE", typeof(Delegates.glSetFenceAPPLE));
        #endregion glSetFenceAPPLE

        #region glIsFenceAPPLE
        public static Delegates.glIsFenceAPPLE glIsFenceAPPLE = (Delegates.glIsFenceAPPLE)GetAddress("glIsFenceAPPLE", typeof(Delegates.glIsFenceAPPLE));
        #endregion glIsFenceAPPLE

        #region glTestFenceAPPLE
        public static Delegates.glTestFenceAPPLE glTestFenceAPPLE = (Delegates.glTestFenceAPPLE)GetAddress("glTestFenceAPPLE", typeof(Delegates.glTestFenceAPPLE));
        #endregion glTestFenceAPPLE

        #region glFinishFenceAPPLE
        public static Delegates.glFinishFenceAPPLE glFinishFenceAPPLE = (Delegates.glFinishFenceAPPLE)GetAddress("glFinishFenceAPPLE", typeof(Delegates.glFinishFenceAPPLE));
        #endregion glFinishFenceAPPLE

        #region glTestObjectAPPLE
        public static Delegates.glTestObjectAPPLE glTestObjectAPPLE = (Delegates.glTestObjectAPPLE)GetAddress("glTestObjectAPPLE", typeof(Delegates.glTestObjectAPPLE));
        #endregion glTestObjectAPPLE

        #region glFinishObjectAPPLE
        public static Delegates.glFinishObjectAPPLE glFinishObjectAPPLE = (Delegates.glFinishObjectAPPLE)GetAddress("glFinishObjectAPPLE", typeof(Delegates.glFinishObjectAPPLE));
        #endregion glFinishObjectAPPLE

        #region glBindVertexArrayAPPLE
        public static Delegates.glBindVertexArrayAPPLE glBindVertexArrayAPPLE = (Delegates.glBindVertexArrayAPPLE)GetAddress("glBindVertexArrayAPPLE", typeof(Delegates.glBindVertexArrayAPPLE));
        #endregion glBindVertexArrayAPPLE

        #region glDeleteVertexArraysAPPLE_
        public static Delegates.glDeleteVertexArraysAPPLE_ glDeleteVertexArraysAPPLE_ = (Delegates.glDeleteVertexArraysAPPLE_)GetAddress("glDeleteVertexArraysAPPLE", typeof(Delegates.glDeleteVertexArraysAPPLE_));
        #endregion glDeleteVertexArraysAPPLE_

        #region glGenVertexArraysAPPLE_
        public static Delegates.glGenVertexArraysAPPLE_ glGenVertexArraysAPPLE_ = (Delegates.glGenVertexArraysAPPLE_)GetAddress("glGenVertexArraysAPPLE", typeof(Delegates.glGenVertexArraysAPPLE_));
        #endregion glGenVertexArraysAPPLE_

        #region glIsVertexArrayAPPLE
        public static Delegates.glIsVertexArrayAPPLE glIsVertexArrayAPPLE = (Delegates.glIsVertexArrayAPPLE)GetAddress("glIsVertexArrayAPPLE", typeof(Delegates.glIsVertexArrayAPPLE));
        #endregion glIsVertexArrayAPPLE

        #region glVertexArrayRangeAPPLE_
        public static Delegates.glVertexArrayRangeAPPLE_ glVertexArrayRangeAPPLE_ = (Delegates.glVertexArrayRangeAPPLE_)GetAddress("glVertexArrayRangeAPPLE", typeof(Delegates.glVertexArrayRangeAPPLE_));
        #endregion glVertexArrayRangeAPPLE_

        #region glFlushVertexArrayRangeAPPLE_
        public static Delegates.glFlushVertexArrayRangeAPPLE_ glFlushVertexArrayRangeAPPLE_ = (Delegates.glFlushVertexArrayRangeAPPLE_)GetAddress("glFlushVertexArrayRangeAPPLE", typeof(Delegates.glFlushVertexArrayRangeAPPLE_));
        #endregion glFlushVertexArrayRangeAPPLE_

        #region glVertexArrayParameteriAPPLE
        public static Delegates.glVertexArrayParameteriAPPLE glVertexArrayParameteriAPPLE = (Delegates.glVertexArrayParameteriAPPLE)GetAddress("glVertexArrayParameteriAPPLE", typeof(Delegates.glVertexArrayParameteriAPPLE));
        #endregion glVertexArrayParameteriAPPLE

        #region glDrawBuffersATI_
        public static Delegates.glDrawBuffersATI_ glDrawBuffersATI_ = (Delegates.glDrawBuffersATI_)GetAddress("glDrawBuffersATI", typeof(Delegates.glDrawBuffersATI_));
        #endregion glDrawBuffersATI_

        #region glProgramNamedParameter4fNV_
        public static Delegates.glProgramNamedParameter4fNV_ glProgramNamedParameter4fNV_ = (Delegates.glProgramNamedParameter4fNV_)GetAddress("glProgramNamedParameter4fNV", typeof(Delegates.glProgramNamedParameter4fNV_));
        #endregion glProgramNamedParameter4fNV_

        #region glProgramNamedParameter4dNV_
        public static Delegates.glProgramNamedParameter4dNV_ glProgramNamedParameter4dNV_ = (Delegates.glProgramNamedParameter4dNV_)GetAddress("glProgramNamedParameter4dNV", typeof(Delegates.glProgramNamedParameter4dNV_));
        #endregion glProgramNamedParameter4dNV_

        #region glProgramNamedParameter4fvNV_
        public static Delegates.glProgramNamedParameter4fvNV_ glProgramNamedParameter4fvNV_ = (Delegates.glProgramNamedParameter4fvNV_)GetAddress("glProgramNamedParameter4fvNV", typeof(Delegates.glProgramNamedParameter4fvNV_));
        #endregion glProgramNamedParameter4fvNV_

        #region glProgramNamedParameter4dvNV_
        public static Delegates.glProgramNamedParameter4dvNV_ glProgramNamedParameter4dvNV_ = (Delegates.glProgramNamedParameter4dvNV_)GetAddress("glProgramNamedParameter4dvNV", typeof(Delegates.glProgramNamedParameter4dvNV_));
        #endregion glProgramNamedParameter4dvNV_

        #region glGetProgramNamedParameterfvNV_
        public static Delegates.glGetProgramNamedParameterfvNV_ glGetProgramNamedParameterfvNV_ = (Delegates.glGetProgramNamedParameterfvNV_)GetAddress("glGetProgramNamedParameterfvNV", typeof(Delegates.glGetProgramNamedParameterfvNV_));
        #endregion glGetProgramNamedParameterfvNV_

        #region glGetProgramNamedParameterdvNV_
        public static Delegates.glGetProgramNamedParameterdvNV_ glGetProgramNamedParameterdvNV_ = (Delegates.glGetProgramNamedParameterdvNV_)GetAddress("glGetProgramNamedParameterdvNV", typeof(Delegates.glGetProgramNamedParameterdvNV_));
        #endregion glGetProgramNamedParameterdvNV_

        #region glVertex2hNV
        public static Delegates.glVertex2hNV glVertex2hNV = (Delegates.glVertex2hNV)GetAddress("glVertex2hNV", typeof(Delegates.glVertex2hNV));
        #endregion glVertex2hNV

        #region glVertex2hvNV_
        public static Delegates.glVertex2hvNV_ glVertex2hvNV_ = (Delegates.glVertex2hvNV_)GetAddress("glVertex2hvNV", typeof(Delegates.glVertex2hvNV_));
        #endregion glVertex2hvNV_

        #region glVertex3hNV
        public static Delegates.glVertex3hNV glVertex3hNV = (Delegates.glVertex3hNV)GetAddress("glVertex3hNV", typeof(Delegates.glVertex3hNV));
        #endregion glVertex3hNV

        #region glVertex3hvNV_
        public static Delegates.glVertex3hvNV_ glVertex3hvNV_ = (Delegates.glVertex3hvNV_)GetAddress("glVertex3hvNV", typeof(Delegates.glVertex3hvNV_));
        #endregion glVertex3hvNV_

        #region glVertex4hNV
        public static Delegates.glVertex4hNV glVertex4hNV = (Delegates.glVertex4hNV)GetAddress("glVertex4hNV", typeof(Delegates.glVertex4hNV));
        #endregion glVertex4hNV

        #region glVertex4hvNV_
        public static Delegates.glVertex4hvNV_ glVertex4hvNV_ = (Delegates.glVertex4hvNV_)GetAddress("glVertex4hvNV", typeof(Delegates.glVertex4hvNV_));
        #endregion glVertex4hvNV_

        #region glNormal3hNV
        public static Delegates.glNormal3hNV glNormal3hNV = (Delegates.glNormal3hNV)GetAddress("glNormal3hNV", typeof(Delegates.glNormal3hNV));
        #endregion glNormal3hNV

        #region glNormal3hvNV_
        public static Delegates.glNormal3hvNV_ glNormal3hvNV_ = (Delegates.glNormal3hvNV_)GetAddress("glNormal3hvNV", typeof(Delegates.glNormal3hvNV_));
        #endregion glNormal3hvNV_

        #region glColor3hNV
        public static Delegates.glColor3hNV glColor3hNV = (Delegates.glColor3hNV)GetAddress("glColor3hNV", typeof(Delegates.glColor3hNV));
        #endregion glColor3hNV

        #region glColor3hvNV_
        public static Delegates.glColor3hvNV_ glColor3hvNV_ = (Delegates.glColor3hvNV_)GetAddress("glColor3hvNV", typeof(Delegates.glColor3hvNV_));
        #endregion glColor3hvNV_

        #region glColor4hNV
        public static Delegates.glColor4hNV glColor4hNV = (Delegates.glColor4hNV)GetAddress("glColor4hNV", typeof(Delegates.glColor4hNV));
        #endregion glColor4hNV

        #region glColor4hvNV_
        public static Delegates.glColor4hvNV_ glColor4hvNV_ = (Delegates.glColor4hvNV_)GetAddress("glColor4hvNV", typeof(Delegates.glColor4hvNV_));
        #endregion glColor4hvNV_

        #region glTexCoord1hNV
        public static Delegates.glTexCoord1hNV glTexCoord1hNV = (Delegates.glTexCoord1hNV)GetAddress("glTexCoord1hNV", typeof(Delegates.glTexCoord1hNV));
        #endregion glTexCoord1hNV

        #region glTexCoord1hvNV_
        public static Delegates.glTexCoord1hvNV_ glTexCoord1hvNV_ = (Delegates.glTexCoord1hvNV_)GetAddress("glTexCoord1hvNV", typeof(Delegates.glTexCoord1hvNV_));
        #endregion glTexCoord1hvNV_

        #region glTexCoord2hNV
        public static Delegates.glTexCoord2hNV glTexCoord2hNV = (Delegates.glTexCoord2hNV)GetAddress("glTexCoord2hNV", typeof(Delegates.glTexCoord2hNV));
        #endregion glTexCoord2hNV

        #region glTexCoord2hvNV_
        public static Delegates.glTexCoord2hvNV_ glTexCoord2hvNV_ = (Delegates.glTexCoord2hvNV_)GetAddress("glTexCoord2hvNV", typeof(Delegates.glTexCoord2hvNV_));
        #endregion glTexCoord2hvNV_

        #region glTexCoord3hNV
        public static Delegates.glTexCoord3hNV glTexCoord3hNV = (Delegates.glTexCoord3hNV)GetAddress("glTexCoord3hNV", typeof(Delegates.glTexCoord3hNV));
        #endregion glTexCoord3hNV

        #region glTexCoord3hvNV_
        public static Delegates.glTexCoord3hvNV_ glTexCoord3hvNV_ = (Delegates.glTexCoord3hvNV_)GetAddress("glTexCoord3hvNV", typeof(Delegates.glTexCoord3hvNV_));
        #endregion glTexCoord3hvNV_

        #region glTexCoord4hNV
        public static Delegates.glTexCoord4hNV glTexCoord4hNV = (Delegates.glTexCoord4hNV)GetAddress("glTexCoord4hNV", typeof(Delegates.glTexCoord4hNV));
        #endregion glTexCoord4hNV

        #region glTexCoord4hvNV_
        public static Delegates.glTexCoord4hvNV_ glTexCoord4hvNV_ = (Delegates.glTexCoord4hvNV_)GetAddress("glTexCoord4hvNV", typeof(Delegates.glTexCoord4hvNV_));
        #endregion glTexCoord4hvNV_

        #region glMultiTexCoord1hNV
        public static Delegates.glMultiTexCoord1hNV glMultiTexCoord1hNV = (Delegates.glMultiTexCoord1hNV)GetAddress("glMultiTexCoord1hNV", typeof(Delegates.glMultiTexCoord1hNV));
        #endregion glMultiTexCoord1hNV

        #region glMultiTexCoord1hvNV_
        public static Delegates.glMultiTexCoord1hvNV_ glMultiTexCoord1hvNV_ = (Delegates.glMultiTexCoord1hvNV_)GetAddress("glMultiTexCoord1hvNV", typeof(Delegates.glMultiTexCoord1hvNV_));
        #endregion glMultiTexCoord1hvNV_

        #region glMultiTexCoord2hNV
        public static Delegates.glMultiTexCoord2hNV glMultiTexCoord2hNV = (Delegates.glMultiTexCoord2hNV)GetAddress("glMultiTexCoord2hNV", typeof(Delegates.glMultiTexCoord2hNV));
        #endregion glMultiTexCoord2hNV

        #region glMultiTexCoord2hvNV_
        public static Delegates.glMultiTexCoord2hvNV_ glMultiTexCoord2hvNV_ = (Delegates.glMultiTexCoord2hvNV_)GetAddress("glMultiTexCoord2hvNV", typeof(Delegates.glMultiTexCoord2hvNV_));
        #endregion glMultiTexCoord2hvNV_

        #region glMultiTexCoord3hNV
        public static Delegates.glMultiTexCoord3hNV glMultiTexCoord3hNV = (Delegates.glMultiTexCoord3hNV)GetAddress("glMultiTexCoord3hNV", typeof(Delegates.glMultiTexCoord3hNV));
        #endregion glMultiTexCoord3hNV

        #region glMultiTexCoord3hvNV_
        public static Delegates.glMultiTexCoord3hvNV_ glMultiTexCoord3hvNV_ = (Delegates.glMultiTexCoord3hvNV_)GetAddress("glMultiTexCoord3hvNV", typeof(Delegates.glMultiTexCoord3hvNV_));
        #endregion glMultiTexCoord3hvNV_

        #region glMultiTexCoord4hNV
        public static Delegates.glMultiTexCoord4hNV glMultiTexCoord4hNV = (Delegates.glMultiTexCoord4hNV)GetAddress("glMultiTexCoord4hNV", typeof(Delegates.glMultiTexCoord4hNV));
        #endregion glMultiTexCoord4hNV

        #region glMultiTexCoord4hvNV_
        public static Delegates.glMultiTexCoord4hvNV_ glMultiTexCoord4hvNV_ = (Delegates.glMultiTexCoord4hvNV_)GetAddress("glMultiTexCoord4hvNV", typeof(Delegates.glMultiTexCoord4hvNV_));
        #endregion glMultiTexCoord4hvNV_

        #region glFogCoordhNV
        public static Delegates.glFogCoordhNV glFogCoordhNV = (Delegates.glFogCoordhNV)GetAddress("glFogCoordhNV", typeof(Delegates.glFogCoordhNV));
        #endregion glFogCoordhNV

        #region glFogCoordhvNV_
        public static Delegates.glFogCoordhvNV_ glFogCoordhvNV_ = (Delegates.glFogCoordhvNV_)GetAddress("glFogCoordhvNV", typeof(Delegates.glFogCoordhvNV_));
        #endregion glFogCoordhvNV_

        #region glSecondaryColor3hNV
        public static Delegates.glSecondaryColor3hNV glSecondaryColor3hNV = (Delegates.glSecondaryColor3hNV)GetAddress("glSecondaryColor3hNV", typeof(Delegates.glSecondaryColor3hNV));
        #endregion glSecondaryColor3hNV

        #region glSecondaryColor3hvNV_
        public static Delegates.glSecondaryColor3hvNV_ glSecondaryColor3hvNV_ = (Delegates.glSecondaryColor3hvNV_)GetAddress("glSecondaryColor3hvNV", typeof(Delegates.glSecondaryColor3hvNV_));
        #endregion glSecondaryColor3hvNV_

        #region glVertexWeighthNV
        public static Delegates.glVertexWeighthNV glVertexWeighthNV = (Delegates.glVertexWeighthNV)GetAddress("glVertexWeighthNV", typeof(Delegates.glVertexWeighthNV));
        #endregion glVertexWeighthNV

        #region glVertexWeighthvNV_
        public static Delegates.glVertexWeighthvNV_ glVertexWeighthvNV_ = (Delegates.glVertexWeighthvNV_)GetAddress("glVertexWeighthvNV", typeof(Delegates.glVertexWeighthvNV_));
        #endregion glVertexWeighthvNV_

        #region glVertexAttrib1hNV
        public static Delegates.glVertexAttrib1hNV glVertexAttrib1hNV = (Delegates.glVertexAttrib1hNV)GetAddress("glVertexAttrib1hNV", typeof(Delegates.glVertexAttrib1hNV));
        #endregion glVertexAttrib1hNV

        #region glVertexAttrib1hvNV_
        public static Delegates.glVertexAttrib1hvNV_ glVertexAttrib1hvNV_ = (Delegates.glVertexAttrib1hvNV_)GetAddress("glVertexAttrib1hvNV", typeof(Delegates.glVertexAttrib1hvNV_));
        #endregion glVertexAttrib1hvNV_

        #region glVertexAttrib2hNV
        public static Delegates.glVertexAttrib2hNV glVertexAttrib2hNV = (Delegates.glVertexAttrib2hNV)GetAddress("glVertexAttrib2hNV", typeof(Delegates.glVertexAttrib2hNV));
        #endregion glVertexAttrib2hNV

        #region glVertexAttrib2hvNV_
        public static Delegates.glVertexAttrib2hvNV_ glVertexAttrib2hvNV_ = (Delegates.glVertexAttrib2hvNV_)GetAddress("glVertexAttrib2hvNV", typeof(Delegates.glVertexAttrib2hvNV_));
        #endregion glVertexAttrib2hvNV_

        #region glVertexAttrib3hNV
        public static Delegates.glVertexAttrib3hNV glVertexAttrib3hNV = (Delegates.glVertexAttrib3hNV)GetAddress("glVertexAttrib3hNV", typeof(Delegates.glVertexAttrib3hNV));
        #endregion glVertexAttrib3hNV

        #region glVertexAttrib3hvNV_
        public static Delegates.glVertexAttrib3hvNV_ glVertexAttrib3hvNV_ = (Delegates.glVertexAttrib3hvNV_)GetAddress("glVertexAttrib3hvNV", typeof(Delegates.glVertexAttrib3hvNV_));
        #endregion glVertexAttrib3hvNV_

        #region glVertexAttrib4hNV
        public static Delegates.glVertexAttrib4hNV glVertexAttrib4hNV = (Delegates.glVertexAttrib4hNV)GetAddress("glVertexAttrib4hNV", typeof(Delegates.glVertexAttrib4hNV));
        #endregion glVertexAttrib4hNV

        #region glVertexAttrib4hvNV_
        public static Delegates.glVertexAttrib4hvNV_ glVertexAttrib4hvNV_ = (Delegates.glVertexAttrib4hvNV_)GetAddress("glVertexAttrib4hvNV", typeof(Delegates.glVertexAttrib4hvNV_));
        #endregion glVertexAttrib4hvNV_

        #region glVertexAttribs1hvNV_
        public static Delegates.glVertexAttribs1hvNV_ glVertexAttribs1hvNV_ = (Delegates.glVertexAttribs1hvNV_)GetAddress("glVertexAttribs1hvNV", typeof(Delegates.glVertexAttribs1hvNV_));
        #endregion glVertexAttribs1hvNV_

        #region glVertexAttribs2hvNV_
        public static Delegates.glVertexAttribs2hvNV_ glVertexAttribs2hvNV_ = (Delegates.glVertexAttribs2hvNV_)GetAddress("glVertexAttribs2hvNV", typeof(Delegates.glVertexAttribs2hvNV_));
        #endregion glVertexAttribs2hvNV_

        #region glVertexAttribs3hvNV_
        public static Delegates.glVertexAttribs3hvNV_ glVertexAttribs3hvNV_ = (Delegates.glVertexAttribs3hvNV_)GetAddress("glVertexAttribs3hvNV", typeof(Delegates.glVertexAttribs3hvNV_));
        #endregion glVertexAttribs3hvNV_

        #region glVertexAttribs4hvNV_
        public static Delegates.glVertexAttribs4hvNV_ glVertexAttribs4hvNV_ = (Delegates.glVertexAttribs4hvNV_)GetAddress("glVertexAttribs4hvNV", typeof(Delegates.glVertexAttribs4hvNV_));
        #endregion glVertexAttribs4hvNV_

        #region glPixelDataRangeNV_
        public static Delegates.glPixelDataRangeNV_ glPixelDataRangeNV_ = (Delegates.glPixelDataRangeNV_)GetAddress("glPixelDataRangeNV", typeof(Delegates.glPixelDataRangeNV_));
        #endregion glPixelDataRangeNV_

        #region glFlushPixelDataRangeNV
        public static Delegates.glFlushPixelDataRangeNV glFlushPixelDataRangeNV = (Delegates.glFlushPixelDataRangeNV)GetAddress("glFlushPixelDataRangeNV", typeof(Delegates.glFlushPixelDataRangeNV));
        #endregion glFlushPixelDataRangeNV

        #region glPrimitiveRestartNV
        public static Delegates.glPrimitiveRestartNV glPrimitiveRestartNV = (Delegates.glPrimitiveRestartNV)GetAddress("glPrimitiveRestartNV", typeof(Delegates.glPrimitiveRestartNV));
        #endregion glPrimitiveRestartNV

        #region glPrimitiveRestartIndexNV
        public static Delegates.glPrimitiveRestartIndexNV glPrimitiveRestartIndexNV = (Delegates.glPrimitiveRestartIndexNV)GetAddress("glPrimitiveRestartIndexNV", typeof(Delegates.glPrimitiveRestartIndexNV));
        #endregion glPrimitiveRestartIndexNV

        #region glMapObjectBufferATI
        public static Delegates.glMapObjectBufferATI glMapObjectBufferATI = (Delegates.glMapObjectBufferATI)GetAddress("glMapObjectBufferATI", typeof(Delegates.glMapObjectBufferATI));
        #endregion glMapObjectBufferATI

        #region glUnmapObjectBufferATI
        public static Delegates.glUnmapObjectBufferATI glUnmapObjectBufferATI = (Delegates.glUnmapObjectBufferATI)GetAddress("glUnmapObjectBufferATI", typeof(Delegates.glUnmapObjectBufferATI));
        #endregion glUnmapObjectBufferATI

        #region glStencilOpSeparateATI
        public static Delegates.glStencilOpSeparateATI glStencilOpSeparateATI = (Delegates.glStencilOpSeparateATI)GetAddress("glStencilOpSeparateATI", typeof(Delegates.glStencilOpSeparateATI));
        #endregion glStencilOpSeparateATI

        #region glStencilFuncSeparateATI
        public static Delegates.glStencilFuncSeparateATI glStencilFuncSeparateATI = (Delegates.glStencilFuncSeparateATI)GetAddress("glStencilFuncSeparateATI", typeof(Delegates.glStencilFuncSeparateATI));
        #endregion glStencilFuncSeparateATI

        #region glVertexAttribArrayObjectATI
        public static Delegates.glVertexAttribArrayObjectATI glVertexAttribArrayObjectATI = (Delegates.glVertexAttribArrayObjectATI)GetAddress("glVertexAttribArrayObjectATI", typeof(Delegates.glVertexAttribArrayObjectATI));
        #endregion glVertexAttribArrayObjectATI

        #region glGetVertexAttribArrayObjectfvATI_
        public static Delegates.glGetVertexAttribArrayObjectfvATI_ glGetVertexAttribArrayObjectfvATI_ = (Delegates.glGetVertexAttribArrayObjectfvATI_)GetAddress("glGetVertexAttribArrayObjectfvATI", typeof(Delegates.glGetVertexAttribArrayObjectfvATI_));
        #endregion glGetVertexAttribArrayObjectfvATI_

        #region glGetVertexAttribArrayObjectivATI_
        public static Delegates.glGetVertexAttribArrayObjectivATI_ glGetVertexAttribArrayObjectivATI_ = (Delegates.glGetVertexAttribArrayObjectivATI_)GetAddress("glGetVertexAttribArrayObjectivATI", typeof(Delegates.glGetVertexAttribArrayObjectivATI_));
        #endregion glGetVertexAttribArrayObjectivATI_

        #region glDepthBoundsEXT
        public static Delegates.glDepthBoundsEXT glDepthBoundsEXT = (Delegates.glDepthBoundsEXT)GetAddress("glDepthBoundsEXT", typeof(Delegates.glDepthBoundsEXT));
        #endregion glDepthBoundsEXT

        #region glBlendEquationSeparateEXT
        public static Delegates.glBlendEquationSeparateEXT glBlendEquationSeparateEXT = (Delegates.glBlendEquationSeparateEXT)GetAddress("glBlendEquationSeparateEXT", typeof(Delegates.glBlendEquationSeparateEXT));
        #endregion glBlendEquationSeparateEXT

        #region glIsRenderbufferEXT
        public static Delegates.glIsRenderbufferEXT glIsRenderbufferEXT = (Delegates.glIsRenderbufferEXT)GetAddress("glIsRenderbufferEXT", typeof(Delegates.glIsRenderbufferEXT));
        #endregion glIsRenderbufferEXT

        #region glBindRenderbufferEXT
        public static Delegates.glBindRenderbufferEXT glBindRenderbufferEXT = (Delegates.glBindRenderbufferEXT)GetAddress("glBindRenderbufferEXT", typeof(Delegates.glBindRenderbufferEXT));
        #endregion glBindRenderbufferEXT

        #region glDeleteRenderbuffersEXT_
        public static Delegates.glDeleteRenderbuffersEXT_ glDeleteRenderbuffersEXT_ = (Delegates.glDeleteRenderbuffersEXT_)GetAddress("glDeleteRenderbuffersEXT", typeof(Delegates.glDeleteRenderbuffersEXT_));
        #endregion glDeleteRenderbuffersEXT_

        #region glGenRenderbuffersEXT_
        public static Delegates.glGenRenderbuffersEXT_ glGenRenderbuffersEXT_ = (Delegates.glGenRenderbuffersEXT_)GetAddress("glGenRenderbuffersEXT", typeof(Delegates.glGenRenderbuffersEXT_));
        #endregion glGenRenderbuffersEXT_

        #region glRenderbufferStorageEXT
        public static Delegates.glRenderbufferStorageEXT glRenderbufferStorageEXT = (Delegates.glRenderbufferStorageEXT)GetAddress("glRenderbufferStorageEXT", typeof(Delegates.glRenderbufferStorageEXT));
        #endregion glRenderbufferStorageEXT

        #region glGetRenderbufferParameterivEXT_
        public static Delegates.glGetRenderbufferParameterivEXT_ glGetRenderbufferParameterivEXT_ = (Delegates.glGetRenderbufferParameterivEXT_)GetAddress("glGetRenderbufferParameterivEXT", typeof(Delegates.glGetRenderbufferParameterivEXT_));
        #endregion glGetRenderbufferParameterivEXT_

        #region glIsFramebufferEXT
        public static Delegates.glIsFramebufferEXT glIsFramebufferEXT = (Delegates.glIsFramebufferEXT)GetAddress("glIsFramebufferEXT", typeof(Delegates.glIsFramebufferEXT));
        #endregion glIsFramebufferEXT

        #region glBindFramebufferEXT
        public static Delegates.glBindFramebufferEXT glBindFramebufferEXT = (Delegates.glBindFramebufferEXT)GetAddress("glBindFramebufferEXT", typeof(Delegates.glBindFramebufferEXT));
        #endregion glBindFramebufferEXT

        #region glDeleteFramebuffersEXT_
        public static Delegates.glDeleteFramebuffersEXT_ glDeleteFramebuffersEXT_ = (Delegates.glDeleteFramebuffersEXT_)GetAddress("glDeleteFramebuffersEXT", typeof(Delegates.glDeleteFramebuffersEXT_));
        #endregion glDeleteFramebuffersEXT_

        #region glGenFramebuffersEXT_
        public static Delegates.glGenFramebuffersEXT_ glGenFramebuffersEXT_ = (Delegates.glGenFramebuffersEXT_)GetAddress("glGenFramebuffersEXT", typeof(Delegates.glGenFramebuffersEXT_));
        #endregion glGenFramebuffersEXT_

        #region glCheckFramebufferStatusEXT
        public static Delegates.glCheckFramebufferStatusEXT glCheckFramebufferStatusEXT = (Delegates.glCheckFramebufferStatusEXT)GetAddress("glCheckFramebufferStatusEXT", typeof(Delegates.glCheckFramebufferStatusEXT));
        #endregion glCheckFramebufferStatusEXT

        #region glFramebufferTexture1DEXT
        public static Delegates.glFramebufferTexture1DEXT glFramebufferTexture1DEXT = (Delegates.glFramebufferTexture1DEXT)GetAddress("glFramebufferTexture1DEXT", typeof(Delegates.glFramebufferTexture1DEXT));
        #endregion glFramebufferTexture1DEXT

        #region glFramebufferTexture2DEXT
        public static Delegates.glFramebufferTexture2DEXT glFramebufferTexture2DEXT = (Delegates.glFramebufferTexture2DEXT)GetAddress("glFramebufferTexture2DEXT", typeof(Delegates.glFramebufferTexture2DEXT));
        #endregion glFramebufferTexture2DEXT

        #region glFramebufferTexture3DEXT
        public static Delegates.glFramebufferTexture3DEXT glFramebufferTexture3DEXT = (Delegates.glFramebufferTexture3DEXT)GetAddress("glFramebufferTexture3DEXT", typeof(Delegates.glFramebufferTexture3DEXT));
        #endregion glFramebufferTexture3DEXT

        #region glFramebufferRenderbufferEXT
        public static Delegates.glFramebufferRenderbufferEXT glFramebufferRenderbufferEXT = (Delegates.glFramebufferRenderbufferEXT)GetAddress("glFramebufferRenderbufferEXT", typeof(Delegates.glFramebufferRenderbufferEXT));
        #endregion glFramebufferRenderbufferEXT

        #region glGetFramebufferAttachmentParameterivEXT_
        public static Delegates.glGetFramebufferAttachmentParameterivEXT_ glGetFramebufferAttachmentParameterivEXT_ = (Delegates.glGetFramebufferAttachmentParameterivEXT_)GetAddress("glGetFramebufferAttachmentParameterivEXT", typeof(Delegates.glGetFramebufferAttachmentParameterivEXT_));
        #endregion glGetFramebufferAttachmentParameterivEXT_

        #region glGenerateMipmapEXT
        public static Delegates.glGenerateMipmapEXT glGenerateMipmapEXT = (Delegates.glGenerateMipmapEXT)GetAddress("glGenerateMipmapEXT", typeof(Delegates.glGenerateMipmapEXT));
        #endregion glGenerateMipmapEXT

        #region glStringMarkerGREMEDY_
        public static Delegates.glStringMarkerGREMEDY_ glStringMarkerGREMEDY_ = (Delegates.glStringMarkerGREMEDY_)GetAddress("glStringMarkerGREMEDY", typeof(Delegates.glStringMarkerGREMEDY_));
        #endregion glStringMarkerGREMEDY_

        #region glStencilClearTagEXT
        public static Delegates.glStencilClearTagEXT glStencilClearTagEXT = (Delegates.glStencilClearTagEXT)GetAddress("glStencilClearTagEXT", typeof(Delegates.glStencilClearTagEXT));
        #endregion glStencilClearTagEXT

        #region glBlitFramebufferEXT
        public static Delegates.glBlitFramebufferEXT glBlitFramebufferEXT = (Delegates.glBlitFramebufferEXT)GetAddress("glBlitFramebufferEXT", typeof(Delegates.glBlitFramebufferEXT));
        #endregion glBlitFramebufferEXT

        #region glRenderbufferStorageMultisampleEXT
        public static Delegates.glRenderbufferStorageMultisampleEXT glRenderbufferStorageMultisampleEXT = (Delegates.glRenderbufferStorageMultisampleEXT)GetAddress("glRenderbufferStorageMultisampleEXT", typeof(Delegates.glRenderbufferStorageMultisampleEXT));
        #endregion glRenderbufferStorageMultisampleEXT

        #region glGetQueryObjecti64vEXT_
        public static Delegates.glGetQueryObjecti64vEXT_ glGetQueryObjecti64vEXT_ = (Delegates.glGetQueryObjecti64vEXT_)GetAddress("glGetQueryObjecti64vEXT", typeof(Delegates.glGetQueryObjecti64vEXT_));
        #endregion glGetQueryObjecti64vEXT_

        #region glGetQueryObjectui64vEXT_
        public static Delegates.glGetQueryObjectui64vEXT_ glGetQueryObjectui64vEXT_ = (Delegates.glGetQueryObjectui64vEXT_)GetAddress("glGetQueryObjectui64vEXT", typeof(Delegates.glGetQueryObjectui64vEXT_));
        #endregion glGetQueryObjectui64vEXT_

        #region glProgramEnvParameters4fvEXT_
        public static Delegates.glProgramEnvParameters4fvEXT_ glProgramEnvParameters4fvEXT_ = (Delegates.glProgramEnvParameters4fvEXT_)GetAddress("glProgramEnvParameters4fvEXT", typeof(Delegates.glProgramEnvParameters4fvEXT_));
        #endregion glProgramEnvParameters4fvEXT_

        #region glProgramLocalParameters4fvEXT_
        public static Delegates.glProgramLocalParameters4fvEXT_ glProgramLocalParameters4fvEXT_ = (Delegates.glProgramLocalParameters4fvEXT_)GetAddress("glProgramLocalParameters4fvEXT", typeof(Delegates.glProgramLocalParameters4fvEXT_));
        #endregion glProgramLocalParameters4fvEXT_

        #endregion Function initialisation

        #region Wrappers

        #region glCallLists(GLsizei n, GLenum type, IntPtr lists)

        public static
        void glCallLists(GLsizei n, GLenum type, IntPtr lists)
        {
            glCallLists_(n, type, lists);
        }

        #endregion

        #region glCallLists(GLsizei n, GLenum type, object lists)

        public static
        void glCallLists(GLsizei n, GLenum type, object lists)
        {
            GCHandle h0 = GCHandle.Alloc(lists, GCHandleType.Pinned);
            try
            {
                glCallLists_(n, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glBitmap(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, IntPtr bitmap)

        public static
        void glBitmap(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, IntPtr bitmap)
        {
            glBitmap_(width, height, xorig, yorig, xmove, ymove, bitmap);
        }

        #endregion

        #region glBitmap(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, object bitmap)

        public static
        void glBitmap(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, object bitmap)
        {
            GCHandle h0 = GCHandle.Alloc(bitmap, GCHandleType.Pinned);
            try
            {
                glBitmap_(width, height, xorig, yorig, xmove, ymove, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glBitmap(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, GLubyte[] bitmap)

        public static
        void glBitmap(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, GLubyte[] bitmap)
        {
            GCHandle h0 = GCHandle.Alloc(bitmap, GCHandleType.Pinned);
            try
            {
                glBitmap_(width, height, xorig, yorig, xmove, ymove, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glColor3bv(IntPtr v)

        public static
        void glColor3bv(IntPtr v)
        {
            glColor3bv_(v);
        }

        #endregion

        #region glColor3bv(object v)

        public static
        void glColor3bv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glColor3bv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glColor3bv(GLbyte[] v)

        public static
        void glColor3bv(GLbyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glColor3bv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glColor3dv(IntPtr v)

        public static
        void glColor3dv(IntPtr v)
        {
            glColor3dv_(v);
        }

        #endregion

        #region glColor3dv(object v)

        public static
        void glColor3dv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glColor3dv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glColor3dv(GLdouble[] v)

        public static
        void glColor3dv(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glColor3dv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glColor3fv(IntPtr v)

        public static
        void glColor3fv(IntPtr v)
        {
            glColor3fv_(v);
        }

        #endregion

        #region glColor3fv(object v)

        public static
        void glColor3fv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glColor3fv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glColor3fv(GLfloat[] v)

        public static
        void glColor3fv(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glColor3fv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glColor3iv(IntPtr v)

        public static
        void glColor3iv(IntPtr v)
        {
            glColor3iv_(v);
        }

        #endregion

        #region glColor3iv(object v)

        public static
        void glColor3iv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glColor3iv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glColor3iv(GLint[] v)

        public static
        void glColor3iv(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glColor3iv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glColor3sv(IntPtr v)

        public static
        void glColor3sv(IntPtr v)
        {
            glColor3sv_(v);
        }

        #endregion

        #region glColor3sv(object v)

        public static
        void glColor3sv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glColor3sv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glColor3sv(GLshort[] v)

        public static
        void glColor3sv(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glColor3sv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glColor3ubv(IntPtr v)

        public static
        void glColor3ubv(IntPtr v)
        {
            glColor3ubv_(v);
        }

        #endregion

        #region glColor3ubv(object v)

        public static
        void glColor3ubv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glColor3ubv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glColor3ubv(GLubyte[] v)

        public static
        void glColor3ubv(GLubyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glColor3ubv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glColor3uiv(IntPtr v)

        public static
        void glColor3uiv(IntPtr v)
        {
            glColor3uiv_(v);
        }

        #endregion

        #region glColor3uiv(object v)

        public static
        void glColor3uiv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glColor3uiv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glColor3uiv(GLuint[] v)

        public static
        void glColor3uiv(GLuint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glColor3uiv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glColor3usv(IntPtr v)

        public static
        void glColor3usv(IntPtr v)
        {
            glColor3usv_(v);
        }

        #endregion

        #region glColor3usv(object v)

        public static
        void glColor3usv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glColor3usv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glColor3usv(GLushort[] v)

        public static
        void glColor3usv(GLushort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glColor3usv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glColor4bv(IntPtr v)

        public static
        void glColor4bv(IntPtr v)
        {
            glColor4bv_(v);
        }

        #endregion

        #region glColor4bv(object v)

        public static
        void glColor4bv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glColor4bv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glColor4bv(GLbyte[] v)

        public static
        void glColor4bv(GLbyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glColor4bv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glColor4dv(IntPtr v)

        public static
        void glColor4dv(IntPtr v)
        {
            glColor4dv_(v);
        }

        #endregion

        #region glColor4dv(object v)

        public static
        void glColor4dv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glColor4dv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glColor4dv(GLdouble[] v)

        public static
        void glColor4dv(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glColor4dv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glColor4fv(IntPtr v)

        public static
        void glColor4fv(IntPtr v)
        {
            glColor4fv_(v);
        }

        #endregion

        #region glColor4fv(object v)

        public static
        void glColor4fv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glColor4fv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glColor4fv(GLfloat[] v)

        public static
        void glColor4fv(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glColor4fv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glColor4iv(IntPtr v)

        public static
        void glColor4iv(IntPtr v)
        {
            glColor4iv_(v);
        }

        #endregion

        #region glColor4iv(object v)

        public static
        void glColor4iv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glColor4iv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glColor4iv(GLint[] v)

        public static
        void glColor4iv(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glColor4iv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glColor4sv(IntPtr v)

        public static
        void glColor4sv(IntPtr v)
        {
            glColor4sv_(v);
        }

        #endregion

        #region glColor4sv(object v)

        public static
        void glColor4sv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glColor4sv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glColor4sv(GLshort[] v)

        public static
        void glColor4sv(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glColor4sv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glColor4ubv(IntPtr v)

        public static
        void glColor4ubv(IntPtr v)
        {
            glColor4ubv_(v);
        }

        #endregion

        #region glColor4ubv(object v)

        public static
        void glColor4ubv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glColor4ubv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glColor4ubv(GLubyte[] v)

        public static
        void glColor4ubv(GLubyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glColor4ubv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glColor4uiv(IntPtr v)

        public static
        void glColor4uiv(IntPtr v)
        {
            glColor4uiv_(v);
        }

        #endregion

        #region glColor4uiv(object v)

        public static
        void glColor4uiv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glColor4uiv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glColor4uiv(GLuint[] v)

        public static
        void glColor4uiv(GLuint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glColor4uiv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glColor4usv(IntPtr v)

        public static
        void glColor4usv(IntPtr v)
        {
            glColor4usv_(v);
        }

        #endregion

        #region glColor4usv(object v)

        public static
        void glColor4usv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glColor4usv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glColor4usv(GLushort[] v)

        public static
        void glColor4usv(GLushort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glColor4usv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glEdgeFlagv(IntPtr flag)

        public static
        void glEdgeFlagv(IntPtr flag)
        {
            glEdgeFlagv_(flag);
        }

        #endregion

        #region glEdgeFlagv(object flag)

        public static
        void glEdgeFlagv(object flag)
        {
            GCHandle h0 = GCHandle.Alloc(flag, GCHandleType.Pinned);
            try
            {
                glEdgeFlagv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glEdgeFlagv(GLboolean[] flag)

        public static
        void glEdgeFlagv(GLboolean[] flag)
        {
            GCHandle h0 = GCHandle.Alloc(flag, GCHandleType.Pinned);
            try
            {
                glEdgeFlagv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glIndexdv(IntPtr c)

        public static
        void glIndexdv(IntPtr c)
        {
            glIndexdv_(c);
        }

        #endregion

        #region glIndexdv(object c)

        public static
        void glIndexdv(object c)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                glIndexdv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glIndexdv(GLdouble[] c)

        public static
        void glIndexdv(GLdouble[] c)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                glIndexdv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glIndexfv(IntPtr c)

        public static
        void glIndexfv(IntPtr c)
        {
            glIndexfv_(c);
        }

        #endregion

        #region glIndexfv(object c)

        public static
        void glIndexfv(object c)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                glIndexfv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glIndexfv(GLfloat[] c)

        public static
        void glIndexfv(GLfloat[] c)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                glIndexfv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glIndexiv(IntPtr c)

        public static
        void glIndexiv(IntPtr c)
        {
            glIndexiv_(c);
        }

        #endregion

        #region glIndexiv(object c)

        public static
        void glIndexiv(object c)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                glIndexiv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glIndexiv(GLint[] c)

        public static
        void glIndexiv(GLint[] c)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                glIndexiv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glIndexsv(IntPtr c)

        public static
        void glIndexsv(IntPtr c)
        {
            glIndexsv_(c);
        }

        #endregion

        #region glIndexsv(object c)

        public static
        void glIndexsv(object c)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                glIndexsv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glIndexsv(GLshort[] c)

        public static
        void glIndexsv(GLshort[] c)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                glIndexsv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glNormal3bv(IntPtr v)

        public static
        void glNormal3bv(IntPtr v)
        {
            glNormal3bv_(v);
        }

        #endregion

        #region glNormal3bv(object v)

        public static
        void glNormal3bv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glNormal3bv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glNormal3bv(GLbyte[] v)

        public static
        void glNormal3bv(GLbyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glNormal3bv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glNormal3dv(IntPtr v)

        public static
        void glNormal3dv(IntPtr v)
        {
            glNormal3dv_(v);
        }

        #endregion

        #region glNormal3dv(object v)

        public static
        void glNormal3dv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glNormal3dv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glNormal3dv(GLdouble[] v)

        public static
        void glNormal3dv(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glNormal3dv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glNormal3fv(IntPtr v)

        public static
        void glNormal3fv(IntPtr v)
        {
            glNormal3fv_(v);
        }

        #endregion

        #region glNormal3fv(object v)

        public static
        void glNormal3fv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glNormal3fv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glNormal3fv(GLfloat[] v)

        public static
        void glNormal3fv(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glNormal3fv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glNormal3iv(IntPtr v)

        public static
        void glNormal3iv(IntPtr v)
        {
            glNormal3iv_(v);
        }

        #endregion

        #region glNormal3iv(object v)

        public static
        void glNormal3iv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glNormal3iv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glNormal3iv(GLint[] v)

        public static
        void glNormal3iv(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glNormal3iv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glNormal3sv(IntPtr v)

        public static
        void glNormal3sv(IntPtr v)
        {
            glNormal3sv_(v);
        }

        #endregion

        #region glNormal3sv(object v)

        public static
        void glNormal3sv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glNormal3sv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glNormal3sv(GLshort[] v)

        public static
        void glNormal3sv(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glNormal3sv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glRasterPos2dv(IntPtr v)

        public static
        void glRasterPos2dv(IntPtr v)
        {
            glRasterPos2dv_(v);
        }

        #endregion

        #region glRasterPos2dv(object v)

        public static
        void glRasterPos2dv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glRasterPos2dv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glRasterPos2dv(GLdouble[] v)

        public static
        void glRasterPos2dv(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glRasterPos2dv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glRasterPos2fv(IntPtr v)

        public static
        void glRasterPos2fv(IntPtr v)
        {
            glRasterPos2fv_(v);
        }

        #endregion

        #region glRasterPos2fv(object v)

        public static
        void glRasterPos2fv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glRasterPos2fv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glRasterPos2fv(GLfloat[] v)

        public static
        void glRasterPos2fv(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glRasterPos2fv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glRasterPos2iv(IntPtr v)

        public static
        void glRasterPos2iv(IntPtr v)
        {
            glRasterPos2iv_(v);
        }

        #endregion

        #region glRasterPos2iv(object v)

        public static
        void glRasterPos2iv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glRasterPos2iv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glRasterPos2iv(GLint[] v)

        public static
        void glRasterPos2iv(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glRasterPos2iv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glRasterPos2sv(IntPtr v)

        public static
        void glRasterPos2sv(IntPtr v)
        {
            glRasterPos2sv_(v);
        }

        #endregion

        #region glRasterPos2sv(object v)

        public static
        void glRasterPos2sv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glRasterPos2sv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glRasterPos2sv(GLshort[] v)

        public static
        void glRasterPos2sv(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glRasterPos2sv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glRasterPos3dv(IntPtr v)

        public static
        void glRasterPos3dv(IntPtr v)
        {
            glRasterPos3dv_(v);
        }

        #endregion

        #region glRasterPos3dv(object v)

        public static
        void glRasterPos3dv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glRasterPos3dv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glRasterPos3dv(GLdouble[] v)

        public static
        void glRasterPos3dv(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glRasterPos3dv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glRasterPos3fv(IntPtr v)

        public static
        void glRasterPos3fv(IntPtr v)
        {
            glRasterPos3fv_(v);
        }

        #endregion

        #region glRasterPos3fv(object v)

        public static
        void glRasterPos3fv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glRasterPos3fv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glRasterPos3fv(GLfloat[] v)

        public static
        void glRasterPos3fv(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glRasterPos3fv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glRasterPos3iv(IntPtr v)

        public static
        void glRasterPos3iv(IntPtr v)
        {
            glRasterPos3iv_(v);
        }

        #endregion

        #region glRasterPos3iv(object v)

        public static
        void glRasterPos3iv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glRasterPos3iv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glRasterPos3iv(GLint[] v)

        public static
        void glRasterPos3iv(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glRasterPos3iv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glRasterPos3sv(IntPtr v)

        public static
        void glRasterPos3sv(IntPtr v)
        {
            glRasterPos3sv_(v);
        }

        #endregion

        #region glRasterPos3sv(object v)

        public static
        void glRasterPos3sv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glRasterPos3sv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glRasterPos3sv(GLshort[] v)

        public static
        void glRasterPos3sv(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glRasterPos3sv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glRasterPos4dv(IntPtr v)

        public static
        void glRasterPos4dv(IntPtr v)
        {
            glRasterPos4dv_(v);
        }

        #endregion

        #region glRasterPos4dv(object v)

        public static
        void glRasterPos4dv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glRasterPos4dv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glRasterPos4dv(GLdouble[] v)

        public static
        void glRasterPos4dv(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glRasterPos4dv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glRasterPos4fv(IntPtr v)

        public static
        void glRasterPos4fv(IntPtr v)
        {
            glRasterPos4fv_(v);
        }

        #endregion

        #region glRasterPos4fv(object v)

        public static
        void glRasterPos4fv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glRasterPos4fv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glRasterPos4fv(GLfloat[] v)

        public static
        void glRasterPos4fv(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glRasterPos4fv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glRasterPos4iv(IntPtr v)

        public static
        void glRasterPos4iv(IntPtr v)
        {
            glRasterPos4iv_(v);
        }

        #endregion

        #region glRasterPos4iv(object v)

        public static
        void glRasterPos4iv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glRasterPos4iv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glRasterPos4iv(GLint[] v)

        public static
        void glRasterPos4iv(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glRasterPos4iv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glRasterPos4sv(IntPtr v)

        public static
        void glRasterPos4sv(IntPtr v)
        {
            glRasterPos4sv_(v);
        }

        #endregion

        #region glRasterPos4sv(object v)

        public static
        void glRasterPos4sv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glRasterPos4sv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glRasterPos4sv(GLshort[] v)

        public static
        void glRasterPos4sv(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glRasterPos4sv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glRectdv(IntPtr v1, IntPtr v2)

        public static
        void glRectdv(IntPtr v1, IntPtr v2)
        {
            glRectdv_(v1, v2);
        }

        #endregion

        #region glRectdv(IntPtr v1, object v2)

        public static
        void glRectdv(IntPtr v1, object v2)
        {
            GCHandle h0 = GCHandle.Alloc(v2, GCHandleType.Pinned);
            try
            {
                glRectdv_(v1, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glRectdv(IntPtr v1, GLdouble[] v2)

        public static
        void glRectdv(IntPtr v1, GLdouble[] v2)
        {
            GCHandle h0 = GCHandle.Alloc(v2, GCHandleType.Pinned);
            try
            {
                glRectdv_(v1, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glRectdv(object v1, IntPtr v2)

        public static
        void glRectdv(object v1, IntPtr v2)
        {
            GCHandle h0 = GCHandle.Alloc(v1, GCHandleType.Pinned);
            try
            {
                glRectdv_(h0.AddrOfPinnedObject(), v2);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glRectdv(object v1, object v2)

        public static
        void glRectdv(object v1, object v2)
        {
            GCHandle h0 = GCHandle.Alloc(v1, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v2, GCHandleType.Pinned);
            try
            {
                glRectdv_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glRectdv(object v1, GLdouble[] v2)

        public static
        void glRectdv(object v1, GLdouble[] v2)
        {
            GCHandle h0 = GCHandle.Alloc(v1, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v2, GCHandleType.Pinned);
            try
            {
                glRectdv_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glRectdv(GLdouble[] v1, IntPtr v2)

        public static
        void glRectdv(GLdouble[] v1, IntPtr v2)
        {
            GCHandle h0 = GCHandle.Alloc(v1, GCHandleType.Pinned);
            try
            {
                glRectdv_(h0.AddrOfPinnedObject(), v2);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glRectdv(GLdouble[] v1, object v2)

        public static
        void glRectdv(GLdouble[] v1, object v2)
        {
            GCHandle h0 = GCHandle.Alloc(v1, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v2, GCHandleType.Pinned);
            try
            {
                glRectdv_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glRectdv(GLdouble[] v1, GLdouble[] v2)

        public static
        void glRectdv(GLdouble[] v1, GLdouble[] v2)
        {
            GCHandle h0 = GCHandle.Alloc(v1, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v2, GCHandleType.Pinned);
            try
            {
                glRectdv_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glRectfv(IntPtr v1, IntPtr v2)

        public static
        void glRectfv(IntPtr v1, IntPtr v2)
        {
            glRectfv_(v1, v2);
        }

        #endregion

        #region glRectfv(IntPtr v1, object v2)

        public static
        void glRectfv(IntPtr v1, object v2)
        {
            GCHandle h0 = GCHandle.Alloc(v2, GCHandleType.Pinned);
            try
            {
                glRectfv_(v1, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glRectfv(IntPtr v1, GLfloat[] v2)

        public static
        void glRectfv(IntPtr v1, GLfloat[] v2)
        {
            GCHandle h0 = GCHandle.Alloc(v2, GCHandleType.Pinned);
            try
            {
                glRectfv_(v1, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glRectfv(object v1, IntPtr v2)

        public static
        void glRectfv(object v1, IntPtr v2)
        {
            GCHandle h0 = GCHandle.Alloc(v1, GCHandleType.Pinned);
            try
            {
                glRectfv_(h0.AddrOfPinnedObject(), v2);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glRectfv(object v1, object v2)

        public static
        void glRectfv(object v1, object v2)
        {
            GCHandle h0 = GCHandle.Alloc(v1, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v2, GCHandleType.Pinned);
            try
            {
                glRectfv_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glRectfv(object v1, GLfloat[] v2)

        public static
        void glRectfv(object v1, GLfloat[] v2)
        {
            GCHandle h0 = GCHandle.Alloc(v1, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v2, GCHandleType.Pinned);
            try
            {
                glRectfv_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glRectfv(GLfloat[] v1, IntPtr v2)

        public static
        void glRectfv(GLfloat[] v1, IntPtr v2)
        {
            GCHandle h0 = GCHandle.Alloc(v1, GCHandleType.Pinned);
            try
            {
                glRectfv_(h0.AddrOfPinnedObject(), v2);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glRectfv(GLfloat[] v1, object v2)

        public static
        void glRectfv(GLfloat[] v1, object v2)
        {
            GCHandle h0 = GCHandle.Alloc(v1, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v2, GCHandleType.Pinned);
            try
            {
                glRectfv_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glRectfv(GLfloat[] v1, GLfloat[] v2)

        public static
        void glRectfv(GLfloat[] v1, GLfloat[] v2)
        {
            GCHandle h0 = GCHandle.Alloc(v1, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v2, GCHandleType.Pinned);
            try
            {
                glRectfv_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glRectiv(IntPtr v1, IntPtr v2)

        public static
        void glRectiv(IntPtr v1, IntPtr v2)
        {
            glRectiv_(v1, v2);
        }

        #endregion

        #region glRectiv(IntPtr v1, object v2)

        public static
        void glRectiv(IntPtr v1, object v2)
        {
            GCHandle h0 = GCHandle.Alloc(v2, GCHandleType.Pinned);
            try
            {
                glRectiv_(v1, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glRectiv(IntPtr v1, GLint[] v2)

        public static
        void glRectiv(IntPtr v1, GLint[] v2)
        {
            GCHandle h0 = GCHandle.Alloc(v2, GCHandleType.Pinned);
            try
            {
                glRectiv_(v1, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glRectiv(object v1, IntPtr v2)

        public static
        void glRectiv(object v1, IntPtr v2)
        {
            GCHandle h0 = GCHandle.Alloc(v1, GCHandleType.Pinned);
            try
            {
                glRectiv_(h0.AddrOfPinnedObject(), v2);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glRectiv(object v1, object v2)

        public static
        void glRectiv(object v1, object v2)
        {
            GCHandle h0 = GCHandle.Alloc(v1, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v2, GCHandleType.Pinned);
            try
            {
                glRectiv_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glRectiv(object v1, GLint[] v2)

        public static
        void glRectiv(object v1, GLint[] v2)
        {
            GCHandle h0 = GCHandle.Alloc(v1, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v2, GCHandleType.Pinned);
            try
            {
                glRectiv_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glRectiv(GLint[] v1, IntPtr v2)

        public static
        void glRectiv(GLint[] v1, IntPtr v2)
        {
            GCHandle h0 = GCHandle.Alloc(v1, GCHandleType.Pinned);
            try
            {
                glRectiv_(h0.AddrOfPinnedObject(), v2);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glRectiv(GLint[] v1, object v2)

        public static
        void glRectiv(GLint[] v1, object v2)
        {
            GCHandle h0 = GCHandle.Alloc(v1, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v2, GCHandleType.Pinned);
            try
            {
                glRectiv_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glRectiv(GLint[] v1, GLint[] v2)

        public static
        void glRectiv(GLint[] v1, GLint[] v2)
        {
            GCHandle h0 = GCHandle.Alloc(v1, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v2, GCHandleType.Pinned);
            try
            {
                glRectiv_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glRectsv(IntPtr v1, IntPtr v2)

        public static
        void glRectsv(IntPtr v1, IntPtr v2)
        {
            glRectsv_(v1, v2);
        }

        #endregion

        #region glRectsv(IntPtr v1, object v2)

        public static
        void glRectsv(IntPtr v1, object v2)
        {
            GCHandle h0 = GCHandle.Alloc(v2, GCHandleType.Pinned);
            try
            {
                glRectsv_(v1, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glRectsv(IntPtr v1, GLshort[] v2)

        public static
        void glRectsv(IntPtr v1, GLshort[] v2)
        {
            GCHandle h0 = GCHandle.Alloc(v2, GCHandleType.Pinned);
            try
            {
                glRectsv_(v1, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glRectsv(object v1, IntPtr v2)

        public static
        void glRectsv(object v1, IntPtr v2)
        {
            GCHandle h0 = GCHandle.Alloc(v1, GCHandleType.Pinned);
            try
            {
                glRectsv_(h0.AddrOfPinnedObject(), v2);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glRectsv(object v1, object v2)

        public static
        void glRectsv(object v1, object v2)
        {
            GCHandle h0 = GCHandle.Alloc(v1, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v2, GCHandleType.Pinned);
            try
            {
                glRectsv_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glRectsv(object v1, GLshort[] v2)

        public static
        void glRectsv(object v1, GLshort[] v2)
        {
            GCHandle h0 = GCHandle.Alloc(v1, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v2, GCHandleType.Pinned);
            try
            {
                glRectsv_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glRectsv(GLshort[] v1, IntPtr v2)

        public static
        void glRectsv(GLshort[] v1, IntPtr v2)
        {
            GCHandle h0 = GCHandle.Alloc(v1, GCHandleType.Pinned);
            try
            {
                glRectsv_(h0.AddrOfPinnedObject(), v2);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glRectsv(GLshort[] v1, object v2)

        public static
        void glRectsv(GLshort[] v1, object v2)
        {
            GCHandle h0 = GCHandle.Alloc(v1, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v2, GCHandleType.Pinned);
            try
            {
                glRectsv_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glRectsv(GLshort[] v1, GLshort[] v2)

        public static
        void glRectsv(GLshort[] v1, GLshort[] v2)
        {
            GCHandle h0 = GCHandle.Alloc(v1, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v2, GCHandleType.Pinned);
            try
            {
                glRectsv_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord1dv(IntPtr v)

        public static
        void glTexCoord1dv(IntPtr v)
        {
            glTexCoord1dv_(v);
        }

        #endregion

        #region glTexCoord1dv(object v)

        public static
        void glTexCoord1dv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord1dv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord1dv(GLdouble[] v)

        public static
        void glTexCoord1dv(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord1dv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord1fv(IntPtr v)

        public static
        void glTexCoord1fv(IntPtr v)
        {
            glTexCoord1fv_(v);
        }

        #endregion

        #region glTexCoord1fv(object v)

        public static
        void glTexCoord1fv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord1fv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord1fv(GLfloat[] v)

        public static
        void glTexCoord1fv(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord1fv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord1iv(IntPtr v)

        public static
        void glTexCoord1iv(IntPtr v)
        {
            glTexCoord1iv_(v);
        }

        #endregion

        #region glTexCoord1iv(object v)

        public static
        void glTexCoord1iv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord1iv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord1iv(GLint[] v)

        public static
        void glTexCoord1iv(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord1iv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord1sv(IntPtr v)

        public static
        void glTexCoord1sv(IntPtr v)
        {
            glTexCoord1sv_(v);
        }

        #endregion

        #region glTexCoord1sv(object v)

        public static
        void glTexCoord1sv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord1sv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord1sv(GLshort[] v)

        public static
        void glTexCoord1sv(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord1sv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2dv(IntPtr v)

        public static
        void glTexCoord2dv(IntPtr v)
        {
            glTexCoord2dv_(v);
        }

        #endregion

        #region glTexCoord2dv(object v)

        public static
        void glTexCoord2dv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2dv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2dv(GLdouble[] v)

        public static
        void glTexCoord2dv(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2dv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fv(IntPtr v)

        public static
        void glTexCoord2fv(IntPtr v)
        {
            glTexCoord2fv_(v);
        }

        #endregion

        #region glTexCoord2fv(object v)

        public static
        void glTexCoord2fv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fv(GLfloat[] v)

        public static
        void glTexCoord2fv(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2iv(IntPtr v)

        public static
        void glTexCoord2iv(IntPtr v)
        {
            glTexCoord2iv_(v);
        }

        #endregion

        #region glTexCoord2iv(object v)

        public static
        void glTexCoord2iv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2iv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2iv(GLint[] v)

        public static
        void glTexCoord2iv(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2iv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2sv(IntPtr v)

        public static
        void glTexCoord2sv(IntPtr v)
        {
            glTexCoord2sv_(v);
        }

        #endregion

        #region glTexCoord2sv(object v)

        public static
        void glTexCoord2sv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2sv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2sv(GLshort[] v)

        public static
        void glTexCoord2sv(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2sv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord3dv(IntPtr v)

        public static
        void glTexCoord3dv(IntPtr v)
        {
            glTexCoord3dv_(v);
        }

        #endregion

        #region glTexCoord3dv(object v)

        public static
        void glTexCoord3dv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord3dv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord3dv(GLdouble[] v)

        public static
        void glTexCoord3dv(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord3dv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord3fv(IntPtr v)

        public static
        void glTexCoord3fv(IntPtr v)
        {
            glTexCoord3fv_(v);
        }

        #endregion

        #region glTexCoord3fv(object v)

        public static
        void glTexCoord3fv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord3fv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord3fv(GLfloat[] v)

        public static
        void glTexCoord3fv(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord3fv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord3iv(IntPtr v)

        public static
        void glTexCoord3iv(IntPtr v)
        {
            glTexCoord3iv_(v);
        }

        #endregion

        #region glTexCoord3iv(object v)

        public static
        void glTexCoord3iv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord3iv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord3iv(GLint[] v)

        public static
        void glTexCoord3iv(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord3iv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord3sv(IntPtr v)

        public static
        void glTexCoord3sv(IntPtr v)
        {
            glTexCoord3sv_(v);
        }

        #endregion

        #region glTexCoord3sv(object v)

        public static
        void glTexCoord3sv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord3sv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord3sv(GLshort[] v)

        public static
        void glTexCoord3sv(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord3sv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord4dv(IntPtr v)

        public static
        void glTexCoord4dv(IntPtr v)
        {
            glTexCoord4dv_(v);
        }

        #endregion

        #region glTexCoord4dv(object v)

        public static
        void glTexCoord4dv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord4dv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord4dv(GLdouble[] v)

        public static
        void glTexCoord4dv(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord4dv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord4fv(IntPtr v)

        public static
        void glTexCoord4fv(IntPtr v)
        {
            glTexCoord4fv_(v);
        }

        #endregion

        #region glTexCoord4fv(object v)

        public static
        void glTexCoord4fv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord4fv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord4fv(GLfloat[] v)

        public static
        void glTexCoord4fv(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord4fv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord4iv(IntPtr v)

        public static
        void glTexCoord4iv(IntPtr v)
        {
            glTexCoord4iv_(v);
        }

        #endregion

        #region glTexCoord4iv(object v)

        public static
        void glTexCoord4iv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord4iv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord4iv(GLint[] v)

        public static
        void glTexCoord4iv(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord4iv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord4sv(IntPtr v)

        public static
        void glTexCoord4sv(IntPtr v)
        {
            glTexCoord4sv_(v);
        }

        #endregion

        #region glTexCoord4sv(object v)

        public static
        void glTexCoord4sv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord4sv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord4sv(GLshort[] v)

        public static
        void glTexCoord4sv(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord4sv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertex2dv(IntPtr v)

        public static
        void glVertex2dv(IntPtr v)
        {
            glVertex2dv_(v);
        }

        #endregion

        #region glVertex2dv(object v)

        public static
        void glVertex2dv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertex2dv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertex2dv(GLdouble[] v)

        public static
        void glVertex2dv(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertex2dv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertex2fv(IntPtr v)

        public static
        void glVertex2fv(IntPtr v)
        {
            glVertex2fv_(v);
        }

        #endregion

        #region glVertex2fv(object v)

        public static
        void glVertex2fv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertex2fv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertex2fv(GLfloat[] v)

        public static
        void glVertex2fv(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertex2fv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertex2iv(IntPtr v)

        public static
        void glVertex2iv(IntPtr v)
        {
            glVertex2iv_(v);
        }

        #endregion

        #region glVertex2iv(object v)

        public static
        void glVertex2iv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertex2iv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertex2iv(GLint[] v)

        public static
        void glVertex2iv(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertex2iv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertex2sv(IntPtr v)

        public static
        void glVertex2sv(IntPtr v)
        {
            glVertex2sv_(v);
        }

        #endregion

        #region glVertex2sv(object v)

        public static
        void glVertex2sv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertex2sv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertex2sv(GLshort[] v)

        public static
        void glVertex2sv(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertex2sv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertex3dv(IntPtr v)

        public static
        void glVertex3dv(IntPtr v)
        {
            glVertex3dv_(v);
        }

        #endregion

        #region glVertex3dv(object v)

        public static
        void glVertex3dv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertex3dv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertex3dv(GLdouble[] v)

        public static
        void glVertex3dv(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertex3dv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertex3fv(IntPtr v)

        public static
        void glVertex3fv(IntPtr v)
        {
            glVertex3fv_(v);
        }

        #endregion

        #region glVertex3fv(object v)

        public static
        void glVertex3fv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertex3fv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertex3fv(GLfloat[] v)

        public static
        void glVertex3fv(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertex3fv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertex3iv(IntPtr v)

        public static
        void glVertex3iv(IntPtr v)
        {
            glVertex3iv_(v);
        }

        #endregion

        #region glVertex3iv(object v)

        public static
        void glVertex3iv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertex3iv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertex3iv(GLint[] v)

        public static
        void glVertex3iv(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertex3iv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertex3sv(IntPtr v)

        public static
        void glVertex3sv(IntPtr v)
        {
            glVertex3sv_(v);
        }

        #endregion

        #region glVertex3sv(object v)

        public static
        void glVertex3sv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertex3sv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertex3sv(GLshort[] v)

        public static
        void glVertex3sv(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertex3sv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertex4dv(IntPtr v)

        public static
        void glVertex4dv(IntPtr v)
        {
            glVertex4dv_(v);
        }

        #endregion

        #region glVertex4dv(object v)

        public static
        void glVertex4dv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertex4dv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertex4dv(GLdouble[] v)

        public static
        void glVertex4dv(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertex4dv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertex4fv(IntPtr v)

        public static
        void glVertex4fv(IntPtr v)
        {
            glVertex4fv_(v);
        }

        #endregion

        #region glVertex4fv(object v)

        public static
        void glVertex4fv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertex4fv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertex4fv(GLfloat[] v)

        public static
        void glVertex4fv(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertex4fv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertex4iv(IntPtr v)

        public static
        void glVertex4iv(IntPtr v)
        {
            glVertex4iv_(v);
        }

        #endregion

        #region glVertex4iv(object v)

        public static
        void glVertex4iv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertex4iv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertex4iv(GLint[] v)

        public static
        void glVertex4iv(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertex4iv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertex4sv(IntPtr v)

        public static
        void glVertex4sv(IntPtr v)
        {
            glVertex4sv_(v);
        }

        #endregion

        #region glVertex4sv(object v)

        public static
        void glVertex4sv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertex4sv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertex4sv(GLshort[] v)

        public static
        void glVertex4sv(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertex4sv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glClipPlane(GLenum plane, IntPtr equation)

        public static
        void glClipPlane(GLenum plane, IntPtr equation)
        {
            glClipPlane_(plane, equation);
        }

        #endregion

        #region glClipPlane(GLenum plane, object equation)

        public static
        void glClipPlane(GLenum plane, object equation)
        {
            GCHandle h0 = GCHandle.Alloc(equation, GCHandleType.Pinned);
            try
            {
                glClipPlane_(plane, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glClipPlane(GLenum plane, GLdouble[] equation)

        public static
        void glClipPlane(GLenum plane, GLdouble[] equation)
        {
            GCHandle h0 = GCHandle.Alloc(equation, GCHandleType.Pinned);
            try
            {
                glClipPlane_(plane, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glFogfv(GLenum pname, IntPtr parameters)

        public static
        void glFogfv(GLenum pname, IntPtr parameters)
        {
            glFogfv_(pname, parameters);
        }

        #endregion

        #region glFogfv(GLenum pname, object parameters)

        public static
        void glFogfv(GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glFogfv_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glFogfv(GLenum pname, GLfloat[] parameters)

        public static
        void glFogfv(GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glFogfv_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glFogiv(GLenum pname, IntPtr parameters)

        public static
        void glFogiv(GLenum pname, IntPtr parameters)
        {
            glFogiv_(pname, parameters);
        }

        #endregion

        #region glFogiv(GLenum pname, object parameters)

        public static
        void glFogiv(GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glFogiv_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glFogiv(GLenum pname, GLint[] parameters)

        public static
        void glFogiv(GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glFogiv_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glLightfv(GLenum light, GLenum pname, IntPtr parameters)

        public static
        void glLightfv(GLenum light, GLenum pname, IntPtr parameters)
        {
            glLightfv_(light, pname, parameters);
        }

        #endregion

        #region glLightfv(GLenum light, GLenum pname, object parameters)

        public static
        void glLightfv(GLenum light, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glLightfv_(light, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glLightfv(GLenum light, GLenum pname, GLfloat[] parameters)

        public static
        void glLightfv(GLenum light, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glLightfv_(light, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glLightiv(GLenum light, GLenum pname, IntPtr parameters)

        public static
        void glLightiv(GLenum light, GLenum pname, IntPtr parameters)
        {
            glLightiv_(light, pname, parameters);
        }

        #endregion

        #region glLightiv(GLenum light, GLenum pname, object parameters)

        public static
        void glLightiv(GLenum light, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glLightiv_(light, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glLightiv(GLenum light, GLenum pname, GLint[] parameters)

        public static
        void glLightiv(GLenum light, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glLightiv_(light, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glLightModelfv(GLenum pname, IntPtr parameters)

        public static
        void glLightModelfv(GLenum pname, IntPtr parameters)
        {
            glLightModelfv_(pname, parameters);
        }

        #endregion

        #region glLightModelfv(GLenum pname, object parameters)

        public static
        void glLightModelfv(GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glLightModelfv_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glLightModelfv(GLenum pname, GLfloat[] parameters)

        public static
        void glLightModelfv(GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glLightModelfv_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glLightModeliv(GLenum pname, IntPtr parameters)

        public static
        void glLightModeliv(GLenum pname, IntPtr parameters)
        {
            glLightModeliv_(pname, parameters);
        }

        #endregion

        #region glLightModeliv(GLenum pname, object parameters)

        public static
        void glLightModeliv(GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glLightModeliv_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glLightModeliv(GLenum pname, GLint[] parameters)

        public static
        void glLightModeliv(GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glLightModeliv_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glLineStipple(GLint factor, GLint pattern)

        public static
        void glLineStipple(GLint factor, GLint pattern)
        {
            glLineStipple_(factor, unchecked((GLushort)pattern));
        }

        #endregion

        #region glMaterialfv(GLenum face, GLenum pname, IntPtr parameters)

        public static
        void glMaterialfv(GLenum face, GLenum pname, IntPtr parameters)
        {
            glMaterialfv_(face, pname, parameters);
        }

        #endregion

        #region glMaterialfv(GLenum face, GLenum pname, object parameters)

        public static
        void glMaterialfv(GLenum face, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glMaterialfv_(face, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMaterialfv(GLenum face, GLenum pname, GLfloat[] parameters)

        public static
        void glMaterialfv(GLenum face, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glMaterialfv_(face, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMaterialiv(GLenum face, GLenum pname, IntPtr parameters)

        public static
        void glMaterialiv(GLenum face, GLenum pname, IntPtr parameters)
        {
            glMaterialiv_(face, pname, parameters);
        }

        #endregion

        #region glMaterialiv(GLenum face, GLenum pname, object parameters)

        public static
        void glMaterialiv(GLenum face, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glMaterialiv_(face, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMaterialiv(GLenum face, GLenum pname, GLint[] parameters)

        public static
        void glMaterialiv(GLenum face, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glMaterialiv_(face, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glPolygonStipple(IntPtr mask)

        public static
        void glPolygonStipple(IntPtr mask)
        {
            glPolygonStipple_(mask);
        }

        #endregion

        #region glPolygonStipple(object mask)

        public static
        void glPolygonStipple(object mask)
        {
            GCHandle h0 = GCHandle.Alloc(mask, GCHandleType.Pinned);
            try
            {
                glPolygonStipple_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glPolygonStipple(GLubyte[] mask)

        public static
        void glPolygonStipple(GLubyte[] mask)
        {
            GCHandle h0 = GCHandle.Alloc(mask, GCHandleType.Pinned);
            try
            {
                glPolygonStipple_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexParameterfv(GLenum target, GLenum pname, IntPtr parameters)

        public static
        void glTexParameterfv(GLenum target, GLenum pname, IntPtr parameters)
        {
            glTexParameterfv_(target, pname, parameters);
        }

        #endregion

        #region glTexParameterfv(GLenum target, GLenum pname, object parameters)

        public static
        void glTexParameterfv(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glTexParameterfv_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexParameterfv(GLenum target, GLenum pname, GLfloat[] parameters)

        public static
        void glTexParameterfv(GLenum target, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glTexParameterfv_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexParameteriv(GLenum target, GLenum pname, IntPtr parameters)

        public static
        void glTexParameteriv(GLenum target, GLenum pname, IntPtr parameters)
        {
            glTexParameteriv_(target, pname, parameters);
        }

        #endregion

        #region glTexParameteriv(GLenum target, GLenum pname, object parameters)

        public static
        void glTexParameteriv(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glTexParameteriv_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexParameteriv(GLenum target, GLenum pname, GLint[] parameters)

        public static
        void glTexParameteriv(GLenum target, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glTexParameteriv_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexImage1D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, IntPtr pixels)

        public static
        void glTexImage1D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, IntPtr pixels)
        {
            glTexImage1D_(target, level, internalformat, width, border, format, type, pixels);
        }

        #endregion

        #region glTexImage1D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, object pixels)

        public static
        void glTexImage1D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, object pixels)
        {
            GCHandle h0 = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                glTexImage1D_(target, level, internalformat, width, border, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, IntPtr pixels)

        public static
        void glTexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, IntPtr pixels)
        {
            glTexImage2D_(target, level, internalformat, width, height, border, format, type, pixels);
        }

        #endregion

        #region glTexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, object pixels)

        public static
        void glTexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, object pixels)
        {
            GCHandle h0 = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                glTexImage2D_(target, level, internalformat, width, height, border, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexEnvfv(GLenum target, GLenum pname, IntPtr parameters)

        public static
        void glTexEnvfv(GLenum target, GLenum pname, IntPtr parameters)
        {
            glTexEnvfv_(target, pname, parameters);
        }

        #endregion

        #region glTexEnvfv(GLenum target, GLenum pname, object parameters)

        public static
        void glTexEnvfv(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glTexEnvfv_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexEnvfv(GLenum target, GLenum pname, GLfloat[] parameters)

        public static
        void glTexEnvfv(GLenum target, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glTexEnvfv_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexEnviv(GLenum target, GLenum pname, IntPtr parameters)

        public static
        void glTexEnviv(GLenum target, GLenum pname, IntPtr parameters)
        {
            glTexEnviv_(target, pname, parameters);
        }

        #endregion

        #region glTexEnviv(GLenum target, GLenum pname, object parameters)

        public static
        void glTexEnviv(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glTexEnviv_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexEnviv(GLenum target, GLenum pname, GLint[] parameters)

        public static
        void glTexEnviv(GLenum target, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glTexEnviv_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexGendv(GLenum coord, GLenum pname, IntPtr parameters)

        public static
        void glTexGendv(GLenum coord, GLenum pname, IntPtr parameters)
        {
            glTexGendv_(coord, pname, parameters);
        }

        #endregion

        #region glTexGendv(GLenum coord, GLenum pname, object parameters)

        public static
        void glTexGendv(GLenum coord, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glTexGendv_(coord, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexGendv(GLenum coord, GLenum pname, GLdouble[] parameters)

        public static
        void glTexGendv(GLenum coord, GLenum pname, GLdouble[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glTexGendv_(coord, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexGenfv(GLenum coord, GLenum pname, IntPtr parameters)

        public static
        void glTexGenfv(GLenum coord, GLenum pname, IntPtr parameters)
        {
            glTexGenfv_(coord, pname, parameters);
        }

        #endregion

        #region glTexGenfv(GLenum coord, GLenum pname, object parameters)

        public static
        void glTexGenfv(GLenum coord, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glTexGenfv_(coord, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexGenfv(GLenum coord, GLenum pname, GLfloat[] parameters)

        public static
        void glTexGenfv(GLenum coord, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glTexGenfv_(coord, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexGeniv(GLenum coord, GLenum pname, IntPtr parameters)

        public static
        void glTexGeniv(GLenum coord, GLenum pname, IntPtr parameters)
        {
            glTexGeniv_(coord, pname, parameters);
        }

        #endregion

        #region glTexGeniv(GLenum coord, GLenum pname, object parameters)

        public static
        void glTexGeniv(GLenum coord, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glTexGeniv_(coord, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexGeniv(GLenum coord, GLenum pname, GLint[] parameters)

        public static
        void glTexGeniv(GLenum coord, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glTexGeniv_(coord, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glFeedbackBuffer(GLsizei size, GLenum type, IntPtr buffer)

        public static
        void glFeedbackBuffer(GLsizei size, GLenum type, IntPtr buffer)
        {
            glFeedbackBuffer_(size, type, buffer);
        }

        #endregion

        #region glFeedbackBuffer(GLsizei size, GLenum type, object buffer)

        public static
        void glFeedbackBuffer(GLsizei size, GLenum type, object buffer)
        {
            GCHandle h0 = GCHandle.Alloc(buffer, GCHandleType.Pinned);
            try
            {
                glFeedbackBuffer_(size, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glFeedbackBuffer(GLsizei size, GLenum type, GLfloat[] buffer)

        public static
        void glFeedbackBuffer(GLsizei size, GLenum type, GLfloat[] buffer)
        {
            GCHandle h0 = GCHandle.Alloc(buffer, GCHandleType.Pinned);
            try
            {
                glFeedbackBuffer_(size, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glSelectBuffer(GLsizei size, IntPtr buffer)

        public static
        void glSelectBuffer(GLsizei size, IntPtr buffer)
        {
            glSelectBuffer_(size, buffer);
        }

        #endregion

        #region glSelectBuffer(GLsizei size, object buffer)

        public static
        void glSelectBuffer(GLsizei size, object buffer)
        {
            GCHandle h0 = GCHandle.Alloc(buffer, GCHandleType.Pinned);
            try
            {
                glSelectBuffer_(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glSelectBuffer(GLsizei size, GLuint[] buffer)

        public static
        void glSelectBuffer(GLsizei size, GLuint[] buffer)
        {
            GCHandle h0 = GCHandle.Alloc(buffer, GCHandleType.Pinned);
            try
            {
                glSelectBuffer_(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMap1d(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, IntPtr points)

        public static
        void glMap1d(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, IntPtr points)
        {
            glMap1d_(target, u1, u2, stride, order, points);
        }

        #endregion

        #region glMap1d(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, object points)

        public static
        void glMap1d(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, object points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                glMap1d_(target, u1, u2, stride, order, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMap1d(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, GLdouble[] points)

        public static
        void glMap1d(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, GLdouble[] points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                glMap1d_(target, u1, u2, stride, order, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMap1f(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, IntPtr points)

        public static
        void glMap1f(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, IntPtr points)
        {
            glMap1f_(target, u1, u2, stride, order, points);
        }

        #endregion

        #region glMap1f(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, object points)

        public static
        void glMap1f(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, object points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                glMap1f_(target, u1, u2, stride, order, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMap1f(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, GLfloat[] points)

        public static
        void glMap1f(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, GLfloat[] points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                glMap1f_(target, u1, u2, stride, order, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMap2d(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, IntPtr points)

        public static
        void glMap2d(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, IntPtr points)
        {
            glMap2d_(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
        }

        #endregion

        #region glMap2d(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, object points)

        public static
        void glMap2d(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, object points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                glMap2d_(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMap2d(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble[] points)

        public static
        void glMap2d(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble[] points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                glMap2d_(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMap2f(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, IntPtr points)

        public static
        void glMap2f(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, IntPtr points)
        {
            glMap2f_(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
        }

        #endregion

        #region glMap2f(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, object points)

        public static
        void glMap2f(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, object points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                glMap2f_(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMap2f(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat[] points)

        public static
        void glMap2f(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat[] points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                glMap2f_(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glEvalCoord1dv(IntPtr u)

        public static
        void glEvalCoord1dv(IntPtr u)
        {
            glEvalCoord1dv_(u);
        }

        #endregion

        #region glEvalCoord1dv(object u)

        public static
        void glEvalCoord1dv(object u)
        {
            GCHandle h0 = GCHandle.Alloc(u, GCHandleType.Pinned);
            try
            {
                glEvalCoord1dv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glEvalCoord1dv(GLdouble[] u)

        public static
        void glEvalCoord1dv(GLdouble[] u)
        {
            GCHandle h0 = GCHandle.Alloc(u, GCHandleType.Pinned);
            try
            {
                glEvalCoord1dv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glEvalCoord1fv(IntPtr u)

        public static
        void glEvalCoord1fv(IntPtr u)
        {
            glEvalCoord1fv_(u);
        }

        #endregion

        #region glEvalCoord1fv(object u)

        public static
        void glEvalCoord1fv(object u)
        {
            GCHandle h0 = GCHandle.Alloc(u, GCHandleType.Pinned);
            try
            {
                glEvalCoord1fv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glEvalCoord1fv(GLfloat[] u)

        public static
        void glEvalCoord1fv(GLfloat[] u)
        {
            GCHandle h0 = GCHandle.Alloc(u, GCHandleType.Pinned);
            try
            {
                glEvalCoord1fv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glEvalCoord2dv(IntPtr u)

        public static
        void glEvalCoord2dv(IntPtr u)
        {
            glEvalCoord2dv_(u);
        }

        #endregion

        #region glEvalCoord2dv(object u)

        public static
        void glEvalCoord2dv(object u)
        {
            GCHandle h0 = GCHandle.Alloc(u, GCHandleType.Pinned);
            try
            {
                glEvalCoord2dv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glEvalCoord2dv(GLdouble[] u)

        public static
        void glEvalCoord2dv(GLdouble[] u)
        {
            GCHandle h0 = GCHandle.Alloc(u, GCHandleType.Pinned);
            try
            {
                glEvalCoord2dv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glEvalCoord2fv(IntPtr u)

        public static
        void glEvalCoord2fv(IntPtr u)
        {
            glEvalCoord2fv_(u);
        }

        #endregion

        #region glEvalCoord2fv(object u)

        public static
        void glEvalCoord2fv(object u)
        {
            GCHandle h0 = GCHandle.Alloc(u, GCHandleType.Pinned);
            try
            {
                glEvalCoord2fv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glEvalCoord2fv(GLfloat[] u)

        public static
        void glEvalCoord2fv(GLfloat[] u)
        {
            GCHandle h0 = GCHandle.Alloc(u, GCHandleType.Pinned);
            try
            {
                glEvalCoord2fv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glPixelMapfv(GLenum map, GLint mapsize, IntPtr values)

        public static
        void glPixelMapfv(GLenum map, GLint mapsize, IntPtr values)
        {
            glPixelMapfv_(map, mapsize, values);
        }

        #endregion

        #region glPixelMapfv(GLenum map, GLint mapsize, object values)

        public static
        void glPixelMapfv(GLenum map, GLint mapsize, object values)
        {
            GCHandle h0 = GCHandle.Alloc(values, GCHandleType.Pinned);
            try
            {
                glPixelMapfv_(map, mapsize, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glPixelMapfv(GLenum map, GLint mapsize, GLfloat[] values)

        public static
        void glPixelMapfv(GLenum map, GLint mapsize, GLfloat[] values)
        {
            GCHandle h0 = GCHandle.Alloc(values, GCHandleType.Pinned);
            try
            {
                glPixelMapfv_(map, mapsize, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glPixelMapuiv(GLenum map, GLint mapsize, IntPtr values)

        public static
        void glPixelMapuiv(GLenum map, GLint mapsize, IntPtr values)
        {
            glPixelMapuiv_(map, mapsize, values);
        }

        #endregion

        #region glPixelMapuiv(GLenum map, GLint mapsize, object values)

        public static
        void glPixelMapuiv(GLenum map, GLint mapsize, object values)
        {
            GCHandle h0 = GCHandle.Alloc(values, GCHandleType.Pinned);
            try
            {
                glPixelMapuiv_(map, mapsize, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glPixelMapuiv(GLenum map, GLint mapsize, GLuint[] values)

        public static
        void glPixelMapuiv(GLenum map, GLint mapsize, GLuint[] values)
        {
            GCHandle h0 = GCHandle.Alloc(values, GCHandleType.Pinned);
            try
            {
                glPixelMapuiv_(map, mapsize, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glPixelMapusv(GLenum map, GLint mapsize, IntPtr values)

        public static
        void glPixelMapusv(GLenum map, GLint mapsize, IntPtr values)
        {
            glPixelMapusv_(map, mapsize, values);
        }

        #endregion

        #region glPixelMapusv(GLenum map, GLint mapsize, object values)

        public static
        void glPixelMapusv(GLenum map, GLint mapsize, object values)
        {
            GCHandle h0 = GCHandle.Alloc(values, GCHandleType.Pinned);
            try
            {
                glPixelMapusv_(map, mapsize, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glPixelMapusv(GLenum map, GLint mapsize, GLushort[] values)

        public static
        void glPixelMapusv(GLenum map, GLint mapsize, GLushort[] values)
        {
            GCHandle h0 = GCHandle.Alloc(values, GCHandleType.Pinned);
            try
            {
                glPixelMapusv_(map, mapsize, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, IntPtr pixels)

        public static
        void glReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, IntPtr pixels)
        {
            glReadPixels_(x, y, width, height, format, type, pixels);
        }

        #endregion

        #region glReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, object pixels)

        public static
        void glReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, object pixels)
        {
            GCHandle h0 = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                glReadPixels_(x, y, width, height, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glDrawPixels(GLsizei width, GLsizei height, GLenum format, GLenum type, IntPtr pixels)

        public static
        void glDrawPixels(GLsizei width, GLsizei height, GLenum format, GLenum type, IntPtr pixels)
        {
            glDrawPixels_(width, height, format, type, pixels);
        }

        #endregion

        #region glDrawPixels(GLsizei width, GLsizei height, GLenum format, GLenum type, object pixels)

        public static
        void glDrawPixels(GLsizei width, GLsizei height, GLenum format, GLenum type, object pixels)
        {
            GCHandle h0 = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                glDrawPixels_(width, height, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetBooleanv(GLenum pname, IntPtr parameters)

        public static
        void glGetBooleanv(GLenum pname, IntPtr parameters)
        {
            glGetBooleanv_(pname, parameters);
        }

        #endregion

        #region glGetBooleanv(GLenum pname, object parameters)

        public static
        void glGetBooleanv(GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetBooleanv_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetBooleanv(GLenum pname, GLboolean[] parameters)

        public static
        void glGetBooleanv(GLenum pname, GLboolean[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetBooleanv_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetClipPlane(GLenum plane, IntPtr equation)

        public static
        void glGetClipPlane(GLenum plane, IntPtr equation)
        {
            glGetClipPlane_(plane, equation);
        }

        #endregion

        #region glGetClipPlane(GLenum plane, object equation)

        public static
        void glGetClipPlane(GLenum plane, object equation)
        {
            GCHandle h0 = GCHandle.Alloc(equation, GCHandleType.Pinned);
            try
            {
                glGetClipPlane_(plane, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetClipPlane(GLenum plane, GLdouble[] equation)

        public static
        void glGetClipPlane(GLenum plane, GLdouble[] equation)
        {
            GCHandle h0 = GCHandle.Alloc(equation, GCHandleType.Pinned);
            try
            {
                glGetClipPlane_(plane, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetDoublev(GLenum pname, IntPtr parameters)

        public static
        void glGetDoublev(GLenum pname, IntPtr parameters)
        {
            glGetDoublev_(pname, parameters);
        }

        #endregion

        #region glGetDoublev(GLenum pname, object parameters)

        public static
        void glGetDoublev(GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetDoublev_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetDoublev(GLenum pname, GLdouble[] parameters)

        public static
        void glGetDoublev(GLenum pname, GLdouble[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetDoublev_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetFloatv(GLenum pname, IntPtr parameters)

        public static
        void glGetFloatv(GLenum pname, IntPtr parameters)
        {
            glGetFloatv_(pname, parameters);
        }

        #endregion

        #region glGetFloatv(GLenum pname, object parameters)

        public static
        void glGetFloatv(GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetFloatv_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetFloatv(GLenum pname, GLfloat[] parameters)

        public static
        void glGetFloatv(GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetFloatv_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetIntegerv(GLenum pname, IntPtr parameters)

        public static
        void glGetIntegerv(GLenum pname, IntPtr parameters)
        {
            glGetIntegerv_(pname, parameters);
        }

        #endregion

        #region glGetIntegerv(GLenum pname, object parameters)

        public static
        void glGetIntegerv(GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetIntegerv_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetIntegerv(GLenum pname, GLint[] parameters)

        public static
        void glGetIntegerv(GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetIntegerv_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetLightfv(GLenum light, GLenum pname, IntPtr parameters)

        public static
        void glGetLightfv(GLenum light, GLenum pname, IntPtr parameters)
        {
            glGetLightfv_(light, pname, parameters);
        }

        #endregion

        #region glGetLightfv(GLenum light, GLenum pname, object parameters)

        public static
        void glGetLightfv(GLenum light, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetLightfv_(light, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetLightfv(GLenum light, GLenum pname, GLfloat[] parameters)

        public static
        void glGetLightfv(GLenum light, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetLightfv_(light, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetLightiv(GLenum light, GLenum pname, IntPtr parameters)

        public static
        void glGetLightiv(GLenum light, GLenum pname, IntPtr parameters)
        {
            glGetLightiv_(light, pname, parameters);
        }

        #endregion

        #region glGetLightiv(GLenum light, GLenum pname, object parameters)

        public static
        void glGetLightiv(GLenum light, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetLightiv_(light, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetLightiv(GLenum light, GLenum pname, GLint[] parameters)

        public static
        void glGetLightiv(GLenum light, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetLightiv_(light, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetMapdv(GLenum target, GLenum query, IntPtr v)

        public static
        void glGetMapdv(GLenum target, GLenum query, IntPtr v)
        {
            glGetMapdv_(target, query, v);
        }

        #endregion

        #region glGetMapdv(GLenum target, GLenum query, object v)

        public static
        void glGetMapdv(GLenum target, GLenum query, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glGetMapdv_(target, query, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetMapdv(GLenum target, GLenum query, GLdouble[] v)

        public static
        void glGetMapdv(GLenum target, GLenum query, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glGetMapdv_(target, query, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetMapfv(GLenum target, GLenum query, IntPtr v)

        public static
        void glGetMapfv(GLenum target, GLenum query, IntPtr v)
        {
            glGetMapfv_(target, query, v);
        }

        #endregion

        #region glGetMapfv(GLenum target, GLenum query, object v)

        public static
        void glGetMapfv(GLenum target, GLenum query, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glGetMapfv_(target, query, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetMapfv(GLenum target, GLenum query, GLfloat[] v)

        public static
        void glGetMapfv(GLenum target, GLenum query, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glGetMapfv_(target, query, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetMapiv(GLenum target, GLenum query, IntPtr v)

        public static
        void glGetMapiv(GLenum target, GLenum query, IntPtr v)
        {
            glGetMapiv_(target, query, v);
        }

        #endregion

        #region glGetMapiv(GLenum target, GLenum query, object v)

        public static
        void glGetMapiv(GLenum target, GLenum query, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glGetMapiv_(target, query, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetMapiv(GLenum target, GLenum query, GLint[] v)

        public static
        void glGetMapiv(GLenum target, GLenum query, GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glGetMapiv_(target, query, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetMaterialfv(GLenum face, GLenum pname, IntPtr parameters)

        public static
        void glGetMaterialfv(GLenum face, GLenum pname, IntPtr parameters)
        {
            glGetMaterialfv_(face, pname, parameters);
        }

        #endregion

        #region glGetMaterialfv(GLenum face, GLenum pname, object parameters)

        public static
        void glGetMaterialfv(GLenum face, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetMaterialfv_(face, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetMaterialfv(GLenum face, GLenum pname, GLfloat[] parameters)

        public static
        void glGetMaterialfv(GLenum face, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetMaterialfv_(face, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetMaterialiv(GLenum face, GLenum pname, IntPtr parameters)

        public static
        void glGetMaterialiv(GLenum face, GLenum pname, IntPtr parameters)
        {
            glGetMaterialiv_(face, pname, parameters);
        }

        #endregion

        #region glGetMaterialiv(GLenum face, GLenum pname, object parameters)

        public static
        void glGetMaterialiv(GLenum face, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetMaterialiv_(face, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetMaterialiv(GLenum face, GLenum pname, GLint[] parameters)

        public static
        void glGetMaterialiv(GLenum face, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetMaterialiv_(face, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetPixelMapfv(GLenum map, IntPtr values)

        public static
        void glGetPixelMapfv(GLenum map, IntPtr values)
        {
            glGetPixelMapfv_(map, values);
        }

        #endregion

        #region glGetPixelMapfv(GLenum map, object values)

        public static
        void glGetPixelMapfv(GLenum map, object values)
        {
            GCHandle h0 = GCHandle.Alloc(values, GCHandleType.Pinned);
            try
            {
                glGetPixelMapfv_(map, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetPixelMapfv(GLenum map, GLfloat[] values)

        public static
        void glGetPixelMapfv(GLenum map, GLfloat[] values)
        {
            GCHandle h0 = GCHandle.Alloc(values, GCHandleType.Pinned);
            try
            {
                glGetPixelMapfv_(map, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetPixelMapuiv(GLenum map, IntPtr values)

        public static
        void glGetPixelMapuiv(GLenum map, IntPtr values)
        {
            glGetPixelMapuiv_(map, values);
        }

        #endregion

        #region glGetPixelMapuiv(GLenum map, object values)

        public static
        void glGetPixelMapuiv(GLenum map, object values)
        {
            GCHandle h0 = GCHandle.Alloc(values, GCHandleType.Pinned);
            try
            {
                glGetPixelMapuiv_(map, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetPixelMapuiv(GLenum map, GLuint[] values)

        public static
        void glGetPixelMapuiv(GLenum map, GLuint[] values)
        {
            GCHandle h0 = GCHandle.Alloc(values, GCHandleType.Pinned);
            try
            {
                glGetPixelMapuiv_(map, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetPixelMapusv(GLenum map, IntPtr values)

        public static
        void glGetPixelMapusv(GLenum map, IntPtr values)
        {
            glGetPixelMapusv_(map, values);
        }

        #endregion

        #region glGetPixelMapusv(GLenum map, object values)

        public static
        void glGetPixelMapusv(GLenum map, object values)
        {
            GCHandle h0 = GCHandle.Alloc(values, GCHandleType.Pinned);
            try
            {
                glGetPixelMapusv_(map, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetPixelMapusv(GLenum map, GLushort[] values)

        public static
        void glGetPixelMapusv(GLenum map, GLushort[] values)
        {
            GCHandle h0 = GCHandle.Alloc(values, GCHandleType.Pinned);
            try
            {
                glGetPixelMapusv_(map, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetPolygonStipple(IntPtr mask)

        public static
        void glGetPolygonStipple(IntPtr mask)
        {
            glGetPolygonStipple_(mask);
        }

        #endregion

        #region glGetPolygonStipple(object mask)

        public static
        void glGetPolygonStipple(object mask)
        {
            GCHandle h0 = GCHandle.Alloc(mask, GCHandleType.Pinned);
            try
            {
                glGetPolygonStipple_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetPolygonStipple(GLubyte[] mask)

        public static
        void glGetPolygonStipple(GLubyte[] mask)
        {
            GCHandle h0 = GCHandle.Alloc(mask, GCHandleType.Pinned);
            try
            {
                glGetPolygonStipple_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetString(GLenum name)

        public static
        string glGetString(GLenum name)
        {
            return Marshal.PtrToStringAnsi(glGetString_(name));
        }

        #endregion

        #region glGetTexEnvfv(GLenum target, GLenum pname, IntPtr parameters)

        public static
        void glGetTexEnvfv(GLenum target, GLenum pname, IntPtr parameters)
        {
            glGetTexEnvfv_(target, pname, parameters);
        }

        #endregion

        #region glGetTexEnvfv(GLenum target, GLenum pname, object parameters)

        public static
        void glGetTexEnvfv(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetTexEnvfv_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetTexEnvfv(GLenum target, GLenum pname, GLfloat[] parameters)

        public static
        void glGetTexEnvfv(GLenum target, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetTexEnvfv_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetTexEnviv(GLenum target, GLenum pname, IntPtr parameters)

        public static
        void glGetTexEnviv(GLenum target, GLenum pname, IntPtr parameters)
        {
            glGetTexEnviv_(target, pname, parameters);
        }

        #endregion

        #region glGetTexEnviv(GLenum target, GLenum pname, object parameters)

        public static
        void glGetTexEnviv(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetTexEnviv_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetTexEnviv(GLenum target, GLenum pname, GLint[] parameters)

        public static
        void glGetTexEnviv(GLenum target, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetTexEnviv_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetTexGendv(GLenum coord, GLenum pname, IntPtr parameters)

        public static
        void glGetTexGendv(GLenum coord, GLenum pname, IntPtr parameters)
        {
            glGetTexGendv_(coord, pname, parameters);
        }

        #endregion

        #region glGetTexGendv(GLenum coord, GLenum pname, object parameters)

        public static
        void glGetTexGendv(GLenum coord, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetTexGendv_(coord, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetTexGendv(GLenum coord, GLenum pname, GLdouble[] parameters)

        public static
        void glGetTexGendv(GLenum coord, GLenum pname, GLdouble[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetTexGendv_(coord, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetTexGenfv(GLenum coord, GLenum pname, IntPtr parameters)

        public static
        void glGetTexGenfv(GLenum coord, GLenum pname, IntPtr parameters)
        {
            glGetTexGenfv_(coord, pname, parameters);
        }

        #endregion

        #region glGetTexGenfv(GLenum coord, GLenum pname, object parameters)

        public static
        void glGetTexGenfv(GLenum coord, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetTexGenfv_(coord, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetTexGenfv(GLenum coord, GLenum pname, GLfloat[] parameters)

        public static
        void glGetTexGenfv(GLenum coord, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetTexGenfv_(coord, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetTexGeniv(GLenum coord, GLenum pname, IntPtr parameters)

        public static
        void glGetTexGeniv(GLenum coord, GLenum pname, IntPtr parameters)
        {
            glGetTexGeniv_(coord, pname, parameters);
        }

        #endregion

        #region glGetTexGeniv(GLenum coord, GLenum pname, object parameters)

        public static
        void glGetTexGeniv(GLenum coord, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetTexGeniv_(coord, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetTexGeniv(GLenum coord, GLenum pname, GLint[] parameters)

        public static
        void glGetTexGeniv(GLenum coord, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetTexGeniv_(coord, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetTexImage(GLenum target, GLint level, GLenum format, GLenum type, IntPtr pixels)

        public static
        void glGetTexImage(GLenum target, GLint level, GLenum format, GLenum type, IntPtr pixels)
        {
            glGetTexImage_(target, level, format, type, pixels);
        }

        #endregion

        #region glGetTexImage(GLenum target, GLint level, GLenum format, GLenum type, object pixels)

        public static
        void glGetTexImage(GLenum target, GLint level, GLenum format, GLenum type, object pixels)
        {
            GCHandle h0 = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                glGetTexImage_(target, level, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetTexParameterfv(GLenum target, GLenum pname, IntPtr parameters)

        public static
        void glGetTexParameterfv(GLenum target, GLenum pname, IntPtr parameters)
        {
            glGetTexParameterfv_(target, pname, parameters);
        }

        #endregion

        #region glGetTexParameterfv(GLenum target, GLenum pname, object parameters)

        public static
        void glGetTexParameterfv(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetTexParameterfv_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetTexParameterfv(GLenum target, GLenum pname, GLfloat[] parameters)

        public static
        void glGetTexParameterfv(GLenum target, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetTexParameterfv_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetTexParameteriv(GLenum target, GLenum pname, IntPtr parameters)

        public static
        void glGetTexParameteriv(GLenum target, GLenum pname, IntPtr parameters)
        {
            glGetTexParameteriv_(target, pname, parameters);
        }

        #endregion

        #region glGetTexParameteriv(GLenum target, GLenum pname, object parameters)

        public static
        void glGetTexParameteriv(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetTexParameteriv_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetTexParameteriv(GLenum target, GLenum pname, GLint[] parameters)

        public static
        void glGetTexParameteriv(GLenum target, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetTexParameteriv_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, IntPtr parameters)

        public static
        void glGetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, IntPtr parameters)
        {
            glGetTexLevelParameterfv_(target, level, pname, parameters);
        }

        #endregion

        #region glGetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, object parameters)

        public static
        void glGetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetTexLevelParameterfv_(target, level, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, GLfloat[] parameters)

        public static
        void glGetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetTexLevelParameterfv_(target, level, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, IntPtr parameters)

        public static
        void glGetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, IntPtr parameters)
        {
            glGetTexLevelParameteriv_(target, level, pname, parameters);
        }

        #endregion

        #region glGetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, object parameters)

        public static
        void glGetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetTexLevelParameteriv_(target, level, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, GLint[] parameters)

        public static
        void glGetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetTexLevelParameteriv_(target, level, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glLoadMatrixf(IntPtr m)

        public static
        void glLoadMatrixf(IntPtr m)
        {
            glLoadMatrixf_(m);
        }

        #endregion

        #region glLoadMatrixf(object m)

        public static
        void glLoadMatrixf(object m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                glLoadMatrixf_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glLoadMatrixf(GLfloat[] m)

        public static
        void glLoadMatrixf(GLfloat[] m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                glLoadMatrixf_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glLoadMatrixd(IntPtr m)

        public static
        void glLoadMatrixd(IntPtr m)
        {
            glLoadMatrixd_(m);
        }

        #endregion

        #region glLoadMatrixd(object m)

        public static
        void glLoadMatrixd(object m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                glLoadMatrixd_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glLoadMatrixd(GLdouble[] m)

        public static
        void glLoadMatrixd(GLdouble[] m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                glLoadMatrixd_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultMatrixf(IntPtr m)

        public static
        void glMultMatrixf(IntPtr m)
        {
            glMultMatrixf_(m);
        }

        #endregion

        #region glMultMatrixf(object m)

        public static
        void glMultMatrixf(object m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                glMultMatrixf_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultMatrixf(GLfloat[] m)

        public static
        void glMultMatrixf(GLfloat[] m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                glMultMatrixf_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultMatrixd(IntPtr m)

        public static
        void glMultMatrixd(IntPtr m)
        {
            glMultMatrixd_(m);
        }

        #endregion

        #region glMultMatrixd(object m)

        public static
        void glMultMatrixd(object m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                glMultMatrixd_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultMatrixd(GLdouble[] m)

        public static
        void glMultMatrixd(GLdouble[] m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                glMultMatrixd_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glColorPointer(GLint size, GLenum type, GLsizei stride, IntPtr pointer)

        public static
        void glColorPointer(GLint size, GLenum type, GLsizei stride, IntPtr pointer)
        {
            glColorPointer_(size, type, stride, pointer);
        }

        #endregion

        #region glColorPointer(GLint size, GLenum type, GLsizei stride, object pointer)

        public static
        void glColorPointer(GLint size, GLenum type, GLsizei stride, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                glColorPointer_(size, type, stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glDrawElements(GLenum mode, GLsizei count, GLenum type, IntPtr indices)

        public static
        void glDrawElements(GLenum mode, GLsizei count, GLenum type, IntPtr indices)
        {
            glDrawElements_(mode, count, type, indices);
        }

        #endregion

        #region glDrawElements(GLenum mode, GLsizei count, GLenum type, object indices)

        public static
        void glDrawElements(GLenum mode, GLsizei count, GLenum type, object indices)
        {
            GCHandle h0 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                glDrawElements_(mode, count, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glEdgeFlagPointer(GLsizei stride, IntPtr pointer)

        public static
        void glEdgeFlagPointer(GLsizei stride, IntPtr pointer)
        {
            glEdgeFlagPointer_(stride, pointer);
        }

        #endregion

        #region glEdgeFlagPointer(GLsizei stride, object pointer)

        public static
        void glEdgeFlagPointer(GLsizei stride, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                glEdgeFlagPointer_(stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetPointerv(GLenum pname, IntPtr parameters)

        public static
        void glGetPointerv(GLenum pname, IntPtr parameters)
        {
            glGetPointerv_(pname, parameters);
        }

        #endregion

        #region glGetPointerv(GLenum pname, object parameters)

        public static
        void glGetPointerv(GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetPointerv_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetPointerv(GLenum pname, IntPtr[] parameters)

        public static
        void glGetPointerv(GLenum pname, IntPtr[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetPointerv_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glIndexPointer(GLenum type, GLsizei stride, IntPtr pointer)

        public static
        void glIndexPointer(GLenum type, GLsizei stride, IntPtr pointer)
        {
            glIndexPointer_(type, stride, pointer);
        }

        #endregion

        #region glIndexPointer(GLenum type, GLsizei stride, object pointer)

        public static
        void glIndexPointer(GLenum type, GLsizei stride, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                glIndexPointer_(type, stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glInterleavedArrays(GLenum format, GLsizei stride, IntPtr pointer)

        public static
        void glInterleavedArrays(GLenum format, GLsizei stride, IntPtr pointer)
        {
            glInterleavedArrays_(format, stride, pointer);
        }

        #endregion

        #region glInterleavedArrays(GLenum format, GLsizei stride, object pointer)

        public static
        void glInterleavedArrays(GLenum format, GLsizei stride, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                glInterleavedArrays_(format, stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glNormalPointer(GLenum type, GLsizei stride, IntPtr pointer)

        public static
        void glNormalPointer(GLenum type, GLsizei stride, IntPtr pointer)
        {
            glNormalPointer_(type, stride, pointer);
        }

        #endregion

        #region glNormalPointer(GLenum type, GLsizei stride, object pointer)

        public static
        void glNormalPointer(GLenum type, GLsizei stride, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                glNormalPointer_(type, stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexCoordPointer(GLint size, GLenum type, GLsizei stride, IntPtr pointer)

        public static
        void glTexCoordPointer(GLint size, GLenum type, GLsizei stride, IntPtr pointer)
        {
            glTexCoordPointer_(size, type, stride, pointer);
        }

        #endregion

        #region glTexCoordPointer(GLint size, GLenum type, GLsizei stride, object pointer)

        public static
        void glTexCoordPointer(GLint size, GLenum type, GLsizei stride, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                glTexCoordPointer_(size, type, stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexPointer(GLint size, GLenum type, GLsizei stride, IntPtr pointer)

        public static
        void glVertexPointer(GLint size, GLenum type, GLsizei stride, IntPtr pointer)
        {
            glVertexPointer_(size, type, stride, pointer);
        }

        #endregion

        #region glVertexPointer(GLint size, GLenum type, GLsizei stride, object pointer)

        public static
        void glVertexPointer(GLint size, GLenum type, GLsizei stride, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                glVertexPointer_(size, type, stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, IntPtr pixels)

        public static
        void glTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, IntPtr pixels)
        {
            glTexSubImage1D_(target, level, xoffset, width, format, type, pixels);
        }

        #endregion

        #region glTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, object pixels)

        public static
        void glTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, object pixels)
        {
            GCHandle h0 = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                glTexSubImage1D_(target, level, xoffset, width, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, IntPtr pixels)

        public static
        void glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, IntPtr pixels)
        {
            glTexSubImage2D_(target, level, xoffset, yoffset, width, height, format, type, pixels);
        }

        #endregion

        #region glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, object pixels)

        public static
        void glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, object pixels)
        {
            GCHandle h0 = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                glTexSubImage2D_(target, level, xoffset, yoffset, width, height, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glAreTexturesResident(GLsizei n, IntPtr textures, IntPtr residences)

        public static
        GLboolean glAreTexturesResident(GLsizei n, IntPtr textures, IntPtr residences)
        {
            return glAreTexturesResident_(n, textures, residences);
        }

        #endregion

        #region glAreTexturesResident(GLsizei n, IntPtr textures, object residences)

        public static
        GLboolean glAreTexturesResident(GLsizei n, IntPtr textures, object residences)
        {
            GCHandle h0 = GCHandle.Alloc(residences, GCHandleType.Pinned);
            try
            {
                return glAreTexturesResident_(n, textures, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glAreTexturesResident(GLsizei n, IntPtr textures, GLboolean[] residences)

        public static
        GLboolean glAreTexturesResident(GLsizei n, IntPtr textures, GLboolean[] residences)
        {
            GCHandle h0 = GCHandle.Alloc(residences, GCHandleType.Pinned);
            try
            {
                return glAreTexturesResident_(n, textures, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glAreTexturesResident(GLsizei n, object textures, IntPtr residences)

        public static
        GLboolean glAreTexturesResident(GLsizei n, object textures, IntPtr residences)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            try
            {
                return glAreTexturesResident_(n, h0.AddrOfPinnedObject(), residences);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glAreTexturesResident(GLsizei n, object textures, object residences)

        public static
        GLboolean glAreTexturesResident(GLsizei n, object textures, object residences)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(residences, GCHandleType.Pinned);
            try
            {
                return glAreTexturesResident_(n, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glAreTexturesResident(GLsizei n, object textures, GLboolean[] residences)

        public static
        GLboolean glAreTexturesResident(GLsizei n, object textures, GLboolean[] residences)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(residences, GCHandleType.Pinned);
            try
            {
                return glAreTexturesResident_(n, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glAreTexturesResident(GLsizei n, GLuint[] textures, IntPtr residences)

        public static
        GLboolean glAreTexturesResident(GLsizei n, GLuint[] textures, IntPtr residences)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            try
            {
                return glAreTexturesResident_(n, h0.AddrOfPinnedObject(), residences);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glAreTexturesResident(GLsizei n, GLuint[] textures, object residences)

        public static
        GLboolean glAreTexturesResident(GLsizei n, GLuint[] textures, object residences)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(residences, GCHandleType.Pinned);
            try
            {
                return glAreTexturesResident_(n, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glAreTexturesResident(GLsizei n, GLuint[] textures, GLboolean[] residences)

        public static
        GLboolean glAreTexturesResident(GLsizei n, GLuint[] textures, GLboolean[] residences)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(residences, GCHandleType.Pinned);
            try
            {
                return glAreTexturesResident_(n, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glDeleteTextures(GLsizei n, IntPtr textures)

        public static
        void glDeleteTextures(GLsizei n, IntPtr textures)
        {
            glDeleteTextures_(n, textures);
        }

        #endregion

        #region glDeleteTextures(GLsizei n, object textures)

        public static
        void glDeleteTextures(GLsizei n, object textures)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            try
            {
                glDeleteTextures_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glDeleteTextures(GLsizei n, GLuint[] textures)

        public static
        void glDeleteTextures(GLsizei n, GLuint[] textures)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            try
            {
                glDeleteTextures_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGenTextures(GLsizei n, IntPtr textures)

        public static
        void glGenTextures(GLsizei n, IntPtr textures)
        {
            glGenTextures_(n, textures);
        }

        #endregion

        #region glGenTextures(GLsizei n, object textures)

        public static
        void glGenTextures(GLsizei n, object textures)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            try
            {
                glGenTextures_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGenTextures(GLsizei n, GLuint[] textures)

        public static
        void glGenTextures(GLsizei n, GLuint[] textures)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            try
            {
                glGenTextures_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glPrioritizeTextures(GLsizei n, IntPtr textures, IntPtr priorities)

        public static
        void glPrioritizeTextures(GLsizei n, IntPtr textures, IntPtr priorities)
        {
            glPrioritizeTextures_(n, textures, priorities);
        }

        #endregion

        #region glPrioritizeTextures(GLsizei n, IntPtr textures, object priorities)

        public static
        void glPrioritizeTextures(GLsizei n, IntPtr textures, object priorities)
        {
            GCHandle h0 = GCHandle.Alloc(priorities, GCHandleType.Pinned);
            try
            {
                glPrioritizeTextures_(n, textures, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glPrioritizeTextures(GLsizei n, IntPtr textures, GLclampf[] priorities)

        public static
        void glPrioritizeTextures(GLsizei n, IntPtr textures, GLclampf[] priorities)
        {
            GCHandle h0 = GCHandle.Alloc(priorities, GCHandleType.Pinned);
            try
            {
                glPrioritizeTextures_(n, textures, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glPrioritizeTextures(GLsizei n, object textures, IntPtr priorities)

        public static
        void glPrioritizeTextures(GLsizei n, object textures, IntPtr priorities)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            try
            {
                glPrioritizeTextures_(n, h0.AddrOfPinnedObject(), priorities);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glPrioritizeTextures(GLsizei n, object textures, object priorities)

        public static
        void glPrioritizeTextures(GLsizei n, object textures, object priorities)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(priorities, GCHandleType.Pinned);
            try
            {
                glPrioritizeTextures_(n, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glPrioritizeTextures(GLsizei n, object textures, GLclampf[] priorities)

        public static
        void glPrioritizeTextures(GLsizei n, object textures, GLclampf[] priorities)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(priorities, GCHandleType.Pinned);
            try
            {
                glPrioritizeTextures_(n, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glPrioritizeTextures(GLsizei n, GLuint[] textures, IntPtr priorities)

        public static
        void glPrioritizeTextures(GLsizei n, GLuint[] textures, IntPtr priorities)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            try
            {
                glPrioritizeTextures_(n, h0.AddrOfPinnedObject(), priorities);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glPrioritizeTextures(GLsizei n, GLuint[] textures, object priorities)

        public static
        void glPrioritizeTextures(GLsizei n, GLuint[] textures, object priorities)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(priorities, GCHandleType.Pinned);
            try
            {
                glPrioritizeTextures_(n, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glPrioritizeTextures(GLsizei n, GLuint[] textures, GLclampf[] priorities)

        public static
        void glPrioritizeTextures(GLsizei n, GLuint[] textures, GLclampf[] priorities)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(priorities, GCHandleType.Pinned);
            try
            {
                glPrioritizeTextures_(n, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glIndexubv(IntPtr c)

        public static
        void glIndexubv(IntPtr c)
        {
            glIndexubv_(c);
        }

        #endregion

        #region glIndexubv(object c)

        public static
        void glIndexubv(object c)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                glIndexubv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glIndexubv(GLubyte[] c)

        public static
        void glIndexubv(GLubyte[] c)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                glIndexubv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glDrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, IntPtr indices)

        public static
        void glDrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, IntPtr indices)
        {
            glDrawRangeElements_(mode, start, end, count, type, indices);
        }

        #endregion

        #region glDrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, object indices)

        public static
        void glDrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, object indices)
        {
            GCHandle h0 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                glDrawRangeElements_(mode, start, end, count, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glColorTable(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, IntPtr table)

        public static
        void glColorTable(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, IntPtr table)
        {
            glColorTable_(target, internalformat, width, format, type, table);
        }

        #endregion

        #region glColorTable(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, object table)

        public static
        void glColorTable(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, object table)
        {
            GCHandle h0 = GCHandle.Alloc(table, GCHandleType.Pinned);
            try
            {
                glColorTable_(target, internalformat, width, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glColorTableParameterfv(GLenum target, GLenum pname, IntPtr parameters)

        public static
        void glColorTableParameterfv(GLenum target, GLenum pname, IntPtr parameters)
        {
            glColorTableParameterfv_(target, pname, parameters);
        }

        #endregion

        #region glColorTableParameterfv(GLenum target, GLenum pname, object parameters)

        public static
        void glColorTableParameterfv(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glColorTableParameterfv_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glColorTableParameterfv(GLenum target, GLenum pname, GLfloat[] parameters)

        public static
        void glColorTableParameterfv(GLenum target, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glColorTableParameterfv_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glColorTableParameteriv(GLenum target, GLenum pname, IntPtr parameters)

        public static
        void glColorTableParameteriv(GLenum target, GLenum pname, IntPtr parameters)
        {
            glColorTableParameteriv_(target, pname, parameters);
        }

        #endregion

        #region glColorTableParameteriv(GLenum target, GLenum pname, object parameters)

        public static
        void glColorTableParameteriv(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glColorTableParameteriv_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glColorTableParameteriv(GLenum target, GLenum pname, GLint[] parameters)

        public static
        void glColorTableParameteriv(GLenum target, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glColorTableParameteriv_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetColorTable(GLenum target, GLenum format, GLenum type, IntPtr table)

        public static
        void glGetColorTable(GLenum target, GLenum format, GLenum type, IntPtr table)
        {
            glGetColorTable_(target, format, type, table);
        }

        #endregion

        #region glGetColorTable(GLenum target, GLenum format, GLenum type, object table)

        public static
        void glGetColorTable(GLenum target, GLenum format, GLenum type, object table)
        {
            GCHandle h0 = GCHandle.Alloc(table, GCHandleType.Pinned);
            try
            {
                glGetColorTable_(target, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetColorTableParameterfv(GLenum target, GLenum pname, IntPtr parameters)

        public static
        void glGetColorTableParameterfv(GLenum target, GLenum pname, IntPtr parameters)
        {
            glGetColorTableParameterfv_(target, pname, parameters);
        }

        #endregion

        #region glGetColorTableParameterfv(GLenum target, GLenum pname, object parameters)

        public static
        void glGetColorTableParameterfv(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetColorTableParameterfv_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetColorTableParameterfv(GLenum target, GLenum pname, GLfloat[] parameters)

        public static
        void glGetColorTableParameterfv(GLenum target, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetColorTableParameterfv_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetColorTableParameteriv(GLenum target, GLenum pname, IntPtr parameters)

        public static
        void glGetColorTableParameteriv(GLenum target, GLenum pname, IntPtr parameters)
        {
            glGetColorTableParameteriv_(target, pname, parameters);
        }

        #endregion

        #region glGetColorTableParameteriv(GLenum target, GLenum pname, object parameters)

        public static
        void glGetColorTableParameteriv(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetColorTableParameteriv_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetColorTableParameteriv(GLenum target, GLenum pname, GLint[] parameters)

        public static
        void glGetColorTableParameteriv(GLenum target, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetColorTableParameteriv_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glColorSubTable(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, IntPtr data)

        public static
        void glColorSubTable(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, IntPtr data)
        {
            glColorSubTable_(target, start, count, format, type, data);
        }

        #endregion

        #region glColorSubTable(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, object data)

        public static
        void glColorSubTable(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                glColorSubTable_(target, start, count, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glConvolutionFilter1D(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, IntPtr image)

        public static
        void glConvolutionFilter1D(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, IntPtr image)
        {
            glConvolutionFilter1D_(target, internalformat, width, format, type, image);
        }

        #endregion

        #region glConvolutionFilter1D(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, object image)

        public static
        void glConvolutionFilter1D(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, object image)
        {
            GCHandle h0 = GCHandle.Alloc(image, GCHandleType.Pinned);
            try
            {
                glConvolutionFilter1D_(target, internalformat, width, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glConvolutionFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, IntPtr image)

        public static
        void glConvolutionFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, IntPtr image)
        {
            glConvolutionFilter2D_(target, internalformat, width, height, format, type, image);
        }

        #endregion

        #region glConvolutionFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, object image)

        public static
        void glConvolutionFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, object image)
        {
            GCHandle h0 = GCHandle.Alloc(image, GCHandleType.Pinned);
            try
            {
                glConvolutionFilter2D_(target, internalformat, width, height, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glConvolutionParameterfv(GLenum target, GLenum pname, IntPtr parameters)

        public static
        void glConvolutionParameterfv(GLenum target, GLenum pname, IntPtr parameters)
        {
            glConvolutionParameterfv_(target, pname, parameters);
        }

        #endregion

        #region glConvolutionParameterfv(GLenum target, GLenum pname, object parameters)

        public static
        void glConvolutionParameterfv(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glConvolutionParameterfv_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glConvolutionParameterfv(GLenum target, GLenum pname, GLfloat[] parameters)

        public static
        void glConvolutionParameterfv(GLenum target, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glConvolutionParameterfv_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glConvolutionParameteriv(GLenum target, GLenum pname, IntPtr parameters)

        public static
        void glConvolutionParameteriv(GLenum target, GLenum pname, IntPtr parameters)
        {
            glConvolutionParameteriv_(target, pname, parameters);
        }

        #endregion

        #region glConvolutionParameteriv(GLenum target, GLenum pname, object parameters)

        public static
        void glConvolutionParameteriv(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glConvolutionParameteriv_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glConvolutionParameteriv(GLenum target, GLenum pname, GLint[] parameters)

        public static
        void glConvolutionParameteriv(GLenum target, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glConvolutionParameteriv_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetConvolutionFilter(GLenum target, GLenum format, GLenum type, IntPtr image)

        public static
        void glGetConvolutionFilter(GLenum target, GLenum format, GLenum type, IntPtr image)
        {
            glGetConvolutionFilter_(target, format, type, image);
        }

        #endregion

        #region glGetConvolutionFilter(GLenum target, GLenum format, GLenum type, object image)

        public static
        void glGetConvolutionFilter(GLenum target, GLenum format, GLenum type, object image)
        {
            GCHandle h0 = GCHandle.Alloc(image, GCHandleType.Pinned);
            try
            {
                glGetConvolutionFilter_(target, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetConvolutionParameterfv(GLenum target, GLenum pname, IntPtr parameters)

        public static
        void glGetConvolutionParameterfv(GLenum target, GLenum pname, IntPtr parameters)
        {
            glGetConvolutionParameterfv_(target, pname, parameters);
        }

        #endregion

        #region glGetConvolutionParameterfv(GLenum target, GLenum pname, object parameters)

        public static
        void glGetConvolutionParameterfv(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetConvolutionParameterfv_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetConvolutionParameterfv(GLenum target, GLenum pname, GLfloat[] parameters)

        public static
        void glGetConvolutionParameterfv(GLenum target, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetConvolutionParameterfv_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetConvolutionParameteriv(GLenum target, GLenum pname, IntPtr parameters)

        public static
        void glGetConvolutionParameteriv(GLenum target, GLenum pname, IntPtr parameters)
        {
            glGetConvolutionParameteriv_(target, pname, parameters);
        }

        #endregion

        #region glGetConvolutionParameteriv(GLenum target, GLenum pname, object parameters)

        public static
        void glGetConvolutionParameteriv(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetConvolutionParameteriv_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetConvolutionParameteriv(GLenum target, GLenum pname, GLint[] parameters)

        public static
        void glGetConvolutionParameteriv(GLenum target, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetConvolutionParameteriv_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetSeparableFilter(GLenum target, GLenum format, GLenum type, IntPtr row, IntPtr column, IntPtr span)

        public static
        void glGetSeparableFilter(GLenum target, GLenum format, GLenum type, IntPtr row, IntPtr column, IntPtr span)
        {
            glGetSeparableFilter_(target, format, type, row, column, span);
        }

        #endregion

        #region glGetSeparableFilter(GLenum target, GLenum format, GLenum type, IntPtr row, IntPtr column, object span)

        public static
        void glGetSeparableFilter(GLenum target, GLenum format, GLenum type, IntPtr row, IntPtr column, object span)
        {
            GCHandle h0 = GCHandle.Alloc(span, GCHandleType.Pinned);
            try
            {
                glGetSeparableFilter_(target, format, type, row, column, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetSeparableFilter(GLenum target, GLenum format, GLenum type, IntPtr row, object column, IntPtr span)

        public static
        void glGetSeparableFilter(GLenum target, GLenum format, GLenum type, IntPtr row, object column, IntPtr span)
        {
            GCHandle h0 = GCHandle.Alloc(column, GCHandleType.Pinned);
            try
            {
                glGetSeparableFilter_(target, format, type, row, h0.AddrOfPinnedObject(), span);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetSeparableFilter(GLenum target, GLenum format, GLenum type, IntPtr row, object column, object span)

        public static
        void glGetSeparableFilter(GLenum target, GLenum format, GLenum type, IntPtr row, object column, object span)
        {
            GCHandle h0 = GCHandle.Alloc(column, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(span, GCHandleType.Pinned);
            try
            {
                glGetSeparableFilter_(target, format, type, row, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glGetSeparableFilter(GLenum target, GLenum format, GLenum type, object row, IntPtr column, IntPtr span)

        public static
        void glGetSeparableFilter(GLenum target, GLenum format, GLenum type, object row, IntPtr column, IntPtr span)
        {
            GCHandle h0 = GCHandle.Alloc(row, GCHandleType.Pinned);
            try
            {
                glGetSeparableFilter_(target, format, type, h0.AddrOfPinnedObject(), column, span);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetSeparableFilter(GLenum target, GLenum format, GLenum type, object row, IntPtr column, object span)

        public static
        void glGetSeparableFilter(GLenum target, GLenum format, GLenum type, object row, IntPtr column, object span)
        {
            GCHandle h0 = GCHandle.Alloc(row, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(span, GCHandleType.Pinned);
            try
            {
                glGetSeparableFilter_(target, format, type, h0.AddrOfPinnedObject(), column, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glGetSeparableFilter(GLenum target, GLenum format, GLenum type, object row, object column, IntPtr span)

        public static
        void glGetSeparableFilter(GLenum target, GLenum format, GLenum type, object row, object column, IntPtr span)
        {
            GCHandle h0 = GCHandle.Alloc(row, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(column, GCHandleType.Pinned);
            try
            {
                glGetSeparableFilter_(target, format, type, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), span);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glGetSeparableFilter(GLenum target, GLenum format, GLenum type, object row, object column, object span)

        public static
        void glGetSeparableFilter(GLenum target, GLenum format, GLenum type, object row, object column, object span)
        {
            GCHandle h0 = GCHandle.Alloc(row, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(column, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(span, GCHandleType.Pinned);
            try
            {
                glGetSeparableFilter_(target, format, type, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glSeparableFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, IntPtr row, IntPtr column)

        public static
        void glSeparableFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, IntPtr row, IntPtr column)
        {
            glSeparableFilter2D_(target, internalformat, width, height, format, type, row, column);
        }

        #endregion

        #region glSeparableFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, IntPtr row, object column)

        public static
        void glSeparableFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, IntPtr row, object column)
        {
            GCHandle h0 = GCHandle.Alloc(column, GCHandleType.Pinned);
            try
            {
                glSeparableFilter2D_(target, internalformat, width, height, format, type, row, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glSeparableFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, object row, IntPtr column)

        public static
        void glSeparableFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, object row, IntPtr column)
        {
            GCHandle h0 = GCHandle.Alloc(row, GCHandleType.Pinned);
            try
            {
                glSeparableFilter2D_(target, internalformat, width, height, format, type, h0.AddrOfPinnedObject(), column);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glSeparableFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, object row, object column)

        public static
        void glSeparableFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, object row, object column)
        {
            GCHandle h0 = GCHandle.Alloc(row, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(column, GCHandleType.Pinned);
            try
            {
                glSeparableFilter2D_(target, internalformat, width, height, format, type, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glGetHistogram(GLenum target, GLboolean reset, GLenum format, GLenum type, IntPtr values)

        public static
        void glGetHistogram(GLenum target, GLboolean reset, GLenum format, GLenum type, IntPtr values)
        {
            glGetHistogram_(target, reset, format, type, values);
        }

        #endregion

        #region glGetHistogram(GLenum target, GLboolean reset, GLenum format, GLenum type, object values)

        public static
        void glGetHistogram(GLenum target, GLboolean reset, GLenum format, GLenum type, object values)
        {
            GCHandle h0 = GCHandle.Alloc(values, GCHandleType.Pinned);
            try
            {
                glGetHistogram_(target, reset, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetHistogramParameterfv(GLenum target, GLenum pname, IntPtr parameters)

        public static
        void glGetHistogramParameterfv(GLenum target, GLenum pname, IntPtr parameters)
        {
            glGetHistogramParameterfv_(target, pname, parameters);
        }

        #endregion

        #region glGetHistogramParameterfv(GLenum target, GLenum pname, object parameters)

        public static
        void glGetHistogramParameterfv(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetHistogramParameterfv_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetHistogramParameterfv(GLenum target, GLenum pname, GLfloat[] parameters)

        public static
        void glGetHistogramParameterfv(GLenum target, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetHistogramParameterfv_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetHistogramParameteriv(GLenum target, GLenum pname, IntPtr parameters)

        public static
        void glGetHistogramParameteriv(GLenum target, GLenum pname, IntPtr parameters)
        {
            glGetHistogramParameteriv_(target, pname, parameters);
        }

        #endregion

        #region glGetHistogramParameteriv(GLenum target, GLenum pname, object parameters)

        public static
        void glGetHistogramParameteriv(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetHistogramParameteriv_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetHistogramParameteriv(GLenum target, GLenum pname, GLint[] parameters)

        public static
        void glGetHistogramParameteriv(GLenum target, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetHistogramParameteriv_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetMinmax(GLenum target, GLboolean reset, GLenum format, GLenum type, IntPtr values)

        public static
        void glGetMinmax(GLenum target, GLboolean reset, GLenum format, GLenum type, IntPtr values)
        {
            glGetMinmax_(target, reset, format, type, values);
        }

        #endregion

        #region glGetMinmax(GLenum target, GLboolean reset, GLenum format, GLenum type, object values)

        public static
        void glGetMinmax(GLenum target, GLboolean reset, GLenum format, GLenum type, object values)
        {
            GCHandle h0 = GCHandle.Alloc(values, GCHandleType.Pinned);
            try
            {
                glGetMinmax_(target, reset, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetMinmaxParameterfv(GLenum target, GLenum pname, IntPtr parameters)

        public static
        void glGetMinmaxParameterfv(GLenum target, GLenum pname, IntPtr parameters)
        {
            glGetMinmaxParameterfv_(target, pname, parameters);
        }

        #endregion

        #region glGetMinmaxParameterfv(GLenum target, GLenum pname, object parameters)

        public static
        void glGetMinmaxParameterfv(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetMinmaxParameterfv_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetMinmaxParameterfv(GLenum target, GLenum pname, GLfloat[] parameters)

        public static
        void glGetMinmaxParameterfv(GLenum target, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetMinmaxParameterfv_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetMinmaxParameteriv(GLenum target, GLenum pname, IntPtr parameters)

        public static
        void glGetMinmaxParameteriv(GLenum target, GLenum pname, IntPtr parameters)
        {
            glGetMinmaxParameteriv_(target, pname, parameters);
        }

        #endregion

        #region glGetMinmaxParameteriv(GLenum target, GLenum pname, object parameters)

        public static
        void glGetMinmaxParameteriv(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetMinmaxParameteriv_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetMinmaxParameteriv(GLenum target, GLenum pname, GLint[] parameters)

        public static
        void glGetMinmaxParameteriv(GLenum target, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetMinmaxParameteriv_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, IntPtr pixels)

        public static
        void glTexImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, IntPtr pixels)
        {
            glTexImage3D_(target, level, internalformat, width, height, depth, border, format, type, pixels);
        }

        #endregion

        #region glTexImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, object pixels)

        public static
        void glTexImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, object pixels)
        {
            GCHandle h0 = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                glTexImage3D_(target, level, internalformat, width, height, depth, border, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, IntPtr pixels)

        public static
        void glTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, IntPtr pixels)
        {
            glTexSubImage3D_(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
        }

        #endregion

        #region glTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, object pixels)

        public static
        void glTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, object pixels)
        {
            GCHandle h0 = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                glTexSubImage3D_(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiTexCoord1dv(GLenum target, IntPtr v)

        public static
        void glMultiTexCoord1dv(GLenum target, IntPtr v)
        {
            glMultiTexCoord1dv_(target, v);
        }

        #endregion

        #region glMultiTexCoord1dv(GLenum target, object v)

        public static
        void glMultiTexCoord1dv(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glMultiTexCoord1dv_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiTexCoord1dv(GLenum target, GLdouble[] v)

        public static
        void glMultiTexCoord1dv(GLenum target, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glMultiTexCoord1dv_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiTexCoord1fv(GLenum target, IntPtr v)

        public static
        void glMultiTexCoord1fv(GLenum target, IntPtr v)
        {
            glMultiTexCoord1fv_(target, v);
        }

        #endregion

        #region glMultiTexCoord1fv(GLenum target, object v)

        public static
        void glMultiTexCoord1fv(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glMultiTexCoord1fv_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiTexCoord1fv(GLenum target, GLfloat[] v)

        public static
        void glMultiTexCoord1fv(GLenum target, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glMultiTexCoord1fv_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiTexCoord1iv(GLenum target, IntPtr v)

        public static
        void glMultiTexCoord1iv(GLenum target, IntPtr v)
        {
            glMultiTexCoord1iv_(target, v);
        }

        #endregion

        #region glMultiTexCoord1iv(GLenum target, object v)

        public static
        void glMultiTexCoord1iv(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glMultiTexCoord1iv_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiTexCoord1iv(GLenum target, GLint[] v)

        public static
        void glMultiTexCoord1iv(GLenum target, GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glMultiTexCoord1iv_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiTexCoord1sv(GLenum target, IntPtr v)

        public static
        void glMultiTexCoord1sv(GLenum target, IntPtr v)
        {
            glMultiTexCoord1sv_(target, v);
        }

        #endregion

        #region glMultiTexCoord1sv(GLenum target, object v)

        public static
        void glMultiTexCoord1sv(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glMultiTexCoord1sv_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiTexCoord1sv(GLenum target, GLshort[] v)

        public static
        void glMultiTexCoord1sv(GLenum target, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glMultiTexCoord1sv_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiTexCoord2dv(GLenum target, IntPtr v)

        public static
        void glMultiTexCoord2dv(GLenum target, IntPtr v)
        {
            glMultiTexCoord2dv_(target, v);
        }

        #endregion

        #region glMultiTexCoord2dv(GLenum target, object v)

        public static
        void glMultiTexCoord2dv(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glMultiTexCoord2dv_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiTexCoord2dv(GLenum target, GLdouble[] v)

        public static
        void glMultiTexCoord2dv(GLenum target, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glMultiTexCoord2dv_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiTexCoord2fv(GLenum target, IntPtr v)

        public static
        void glMultiTexCoord2fv(GLenum target, IntPtr v)
        {
            glMultiTexCoord2fv_(target, v);
        }

        #endregion

        #region glMultiTexCoord2fv(GLenum target, object v)

        public static
        void glMultiTexCoord2fv(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glMultiTexCoord2fv_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiTexCoord2fv(GLenum target, GLfloat[] v)

        public static
        void glMultiTexCoord2fv(GLenum target, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glMultiTexCoord2fv_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiTexCoord2iv(GLenum target, IntPtr v)

        public static
        void glMultiTexCoord2iv(GLenum target, IntPtr v)
        {
            glMultiTexCoord2iv_(target, v);
        }

        #endregion

        #region glMultiTexCoord2iv(GLenum target, object v)

        public static
        void glMultiTexCoord2iv(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glMultiTexCoord2iv_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiTexCoord2iv(GLenum target, GLint[] v)

        public static
        void glMultiTexCoord2iv(GLenum target, GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glMultiTexCoord2iv_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiTexCoord2sv(GLenum target, IntPtr v)

        public static
        void glMultiTexCoord2sv(GLenum target, IntPtr v)
        {
            glMultiTexCoord2sv_(target, v);
        }

        #endregion

        #region glMultiTexCoord2sv(GLenum target, object v)

        public static
        void glMultiTexCoord2sv(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glMultiTexCoord2sv_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiTexCoord2sv(GLenum target, GLshort[] v)

        public static
        void glMultiTexCoord2sv(GLenum target, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glMultiTexCoord2sv_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiTexCoord3dv(GLenum target, IntPtr v)

        public static
        void glMultiTexCoord3dv(GLenum target, IntPtr v)
        {
            glMultiTexCoord3dv_(target, v);
        }

        #endregion

        #region glMultiTexCoord3dv(GLenum target, object v)

        public static
        void glMultiTexCoord3dv(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glMultiTexCoord3dv_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiTexCoord3dv(GLenum target, GLdouble[] v)

        public static
        void glMultiTexCoord3dv(GLenum target, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glMultiTexCoord3dv_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiTexCoord3fv(GLenum target, IntPtr v)

        public static
        void glMultiTexCoord3fv(GLenum target, IntPtr v)
        {
            glMultiTexCoord3fv_(target, v);
        }

        #endregion

        #region glMultiTexCoord3fv(GLenum target, object v)

        public static
        void glMultiTexCoord3fv(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glMultiTexCoord3fv_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiTexCoord3fv(GLenum target, GLfloat[] v)

        public static
        void glMultiTexCoord3fv(GLenum target, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glMultiTexCoord3fv_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiTexCoord3iv(GLenum target, IntPtr v)

        public static
        void glMultiTexCoord3iv(GLenum target, IntPtr v)
        {
            glMultiTexCoord3iv_(target, v);
        }

        #endregion

        #region glMultiTexCoord3iv(GLenum target, object v)

        public static
        void glMultiTexCoord3iv(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glMultiTexCoord3iv_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiTexCoord3iv(GLenum target, GLint[] v)

        public static
        void glMultiTexCoord3iv(GLenum target, GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glMultiTexCoord3iv_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiTexCoord3sv(GLenum target, IntPtr v)

        public static
        void glMultiTexCoord3sv(GLenum target, IntPtr v)
        {
            glMultiTexCoord3sv_(target, v);
        }

        #endregion

        #region glMultiTexCoord3sv(GLenum target, object v)

        public static
        void glMultiTexCoord3sv(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glMultiTexCoord3sv_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiTexCoord3sv(GLenum target, GLshort[] v)

        public static
        void glMultiTexCoord3sv(GLenum target, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glMultiTexCoord3sv_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiTexCoord4dv(GLenum target, IntPtr v)

        public static
        void glMultiTexCoord4dv(GLenum target, IntPtr v)
        {
            glMultiTexCoord4dv_(target, v);
        }

        #endregion

        #region glMultiTexCoord4dv(GLenum target, object v)

        public static
        void glMultiTexCoord4dv(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glMultiTexCoord4dv_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiTexCoord4dv(GLenum target, GLdouble[] v)

        public static
        void glMultiTexCoord4dv(GLenum target, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glMultiTexCoord4dv_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiTexCoord4fv(GLenum target, IntPtr v)

        public static
        void glMultiTexCoord4fv(GLenum target, IntPtr v)
        {
            glMultiTexCoord4fv_(target, v);
        }

        #endregion

        #region glMultiTexCoord4fv(GLenum target, object v)

        public static
        void glMultiTexCoord4fv(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glMultiTexCoord4fv_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiTexCoord4fv(GLenum target, GLfloat[] v)

        public static
        void glMultiTexCoord4fv(GLenum target, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glMultiTexCoord4fv_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiTexCoord4iv(GLenum target, IntPtr v)

        public static
        void glMultiTexCoord4iv(GLenum target, IntPtr v)
        {
            glMultiTexCoord4iv_(target, v);
        }

        #endregion

        #region glMultiTexCoord4iv(GLenum target, object v)

        public static
        void glMultiTexCoord4iv(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glMultiTexCoord4iv_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiTexCoord4iv(GLenum target, GLint[] v)

        public static
        void glMultiTexCoord4iv(GLenum target, GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glMultiTexCoord4iv_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiTexCoord4sv(GLenum target, IntPtr v)

        public static
        void glMultiTexCoord4sv(GLenum target, IntPtr v)
        {
            glMultiTexCoord4sv_(target, v);
        }

        #endregion

        #region glMultiTexCoord4sv(GLenum target, object v)

        public static
        void glMultiTexCoord4sv(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glMultiTexCoord4sv_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiTexCoord4sv(GLenum target, GLshort[] v)

        public static
        void glMultiTexCoord4sv(GLenum target, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glMultiTexCoord4sv_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glLoadTransposeMatrixf(IntPtr m)

        public static
        void glLoadTransposeMatrixf(IntPtr m)
        {
            glLoadTransposeMatrixf_(m);
        }

        #endregion

        #region glLoadTransposeMatrixf(object m)

        public static
        void glLoadTransposeMatrixf(object m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                glLoadTransposeMatrixf_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glLoadTransposeMatrixf(GLfloat[] m)

        public static
        void glLoadTransposeMatrixf(GLfloat[] m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                glLoadTransposeMatrixf_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glLoadTransposeMatrixd(IntPtr m)

        public static
        void glLoadTransposeMatrixd(IntPtr m)
        {
            glLoadTransposeMatrixd_(m);
        }

        #endregion

        #region glLoadTransposeMatrixd(object m)

        public static
        void glLoadTransposeMatrixd(object m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                glLoadTransposeMatrixd_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glLoadTransposeMatrixd(GLdouble[] m)

        public static
        void glLoadTransposeMatrixd(GLdouble[] m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                glLoadTransposeMatrixd_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultTransposeMatrixf(IntPtr m)

        public static
        void glMultTransposeMatrixf(IntPtr m)
        {
            glMultTransposeMatrixf_(m);
        }

        #endregion

        #region glMultTransposeMatrixf(object m)

        public static
        void glMultTransposeMatrixf(object m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                glMultTransposeMatrixf_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultTransposeMatrixf(GLfloat[] m)

        public static
        void glMultTransposeMatrixf(GLfloat[] m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                glMultTransposeMatrixf_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultTransposeMatrixd(IntPtr m)

        public static
        void glMultTransposeMatrixd(IntPtr m)
        {
            glMultTransposeMatrixd_(m);
        }

        #endregion

        #region glMultTransposeMatrixd(object m)

        public static
        void glMultTransposeMatrixd(object m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                glMultTransposeMatrixd_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultTransposeMatrixd(GLdouble[] m)

        public static
        void glMultTransposeMatrixd(GLdouble[] m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                glMultTransposeMatrixd_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glCompressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, IntPtr data)

        public static
        void glCompressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, IntPtr data)
        {
            glCompressedTexImage3D_(target, level, internalformat, width, height, depth, border, imageSize, data);
        }

        #endregion

        #region glCompressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, object data)

        public static
        void glCompressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                glCompressedTexImage3D_(target, level, internalformat, width, height, depth, border, imageSize, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, IntPtr data)

        public static
        void glCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, IntPtr data)
        {
            glCompressedTexImage2D_(target, level, internalformat, width, height, border, imageSize, data);
        }

        #endregion

        #region glCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, object data)

        public static
        void glCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                glCompressedTexImage2D_(target, level, internalformat, width, height, border, imageSize, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glCompressedTexImage1D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, IntPtr data)

        public static
        void glCompressedTexImage1D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, IntPtr data)
        {
            glCompressedTexImage1D_(target, level, internalformat, width, border, imageSize, data);
        }

        #endregion

        #region glCompressedTexImage1D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, object data)

        public static
        void glCompressedTexImage1D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                glCompressedTexImage1D_(target, level, internalformat, width, border, imageSize, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glCompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, IntPtr data)

        public static
        void glCompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, IntPtr data)
        {
            glCompressedTexSubImage3D_(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
        }

        #endregion

        #region glCompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, object data)

        public static
        void glCompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                glCompressedTexSubImage3D_(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, IntPtr data)

        public static
        void glCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, IntPtr data)
        {
            glCompressedTexSubImage2D_(target, level, xoffset, yoffset, width, height, format, imageSize, data);
        }

        #endregion

        #region glCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, object data)

        public static
        void glCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                glCompressedTexSubImage2D_(target, level, xoffset, yoffset, width, height, format, imageSize, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glCompressedTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, IntPtr data)

        public static
        void glCompressedTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, IntPtr data)
        {
            glCompressedTexSubImage1D_(target, level, xoffset, width, format, imageSize, data);
        }

        #endregion

        #region glCompressedTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, object data)

        public static
        void glCompressedTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                glCompressedTexSubImage1D_(target, level, xoffset, width, format, imageSize, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetCompressedTexImage(GLenum target, GLint level, IntPtr img)

        public static
        void glGetCompressedTexImage(GLenum target, GLint level, IntPtr img)
        {
            glGetCompressedTexImage_(target, level, img);
        }

        #endregion

        #region glGetCompressedTexImage(GLenum target, GLint level, object img)

        public static
        void glGetCompressedTexImage(GLenum target, GLint level, object img)
        {
            GCHandle h0 = GCHandle.Alloc(img, GCHandleType.Pinned);
            try
            {
                glGetCompressedTexImage_(target, level, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glFogCoordfv(IntPtr coord)

        public static
        void glFogCoordfv(IntPtr coord)
        {
            glFogCoordfv_(coord);
        }

        #endregion

        #region glFogCoordfv(object coord)

        public static
        void glFogCoordfv(object coord)
        {
            GCHandle h0 = GCHandle.Alloc(coord, GCHandleType.Pinned);
            try
            {
                glFogCoordfv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glFogCoordfv(GLfloat[] coord)

        public static
        void glFogCoordfv(GLfloat[] coord)
        {
            GCHandle h0 = GCHandle.Alloc(coord, GCHandleType.Pinned);
            try
            {
                glFogCoordfv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glFogCoorddv(IntPtr coord)

        public static
        void glFogCoorddv(IntPtr coord)
        {
            glFogCoorddv_(coord);
        }

        #endregion

        #region glFogCoorddv(object coord)

        public static
        void glFogCoorddv(object coord)
        {
            GCHandle h0 = GCHandle.Alloc(coord, GCHandleType.Pinned);
            try
            {
                glFogCoorddv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glFogCoorddv(GLdouble[] coord)

        public static
        void glFogCoorddv(GLdouble[] coord)
        {
            GCHandle h0 = GCHandle.Alloc(coord, GCHandleType.Pinned);
            try
            {
                glFogCoorddv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glFogCoordPointer(GLenum type, GLsizei stride, IntPtr pointer)

        public static
        void glFogCoordPointer(GLenum type, GLsizei stride, IntPtr pointer)
        {
            glFogCoordPointer_(type, stride, pointer);
        }

        #endregion

        #region glFogCoordPointer(GLenum type, GLsizei stride, object pointer)

        public static
        void glFogCoordPointer(GLenum type, GLsizei stride, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                glFogCoordPointer_(type, stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiDrawArrays(GLenum mode, IntPtr first, IntPtr count, GLsizei primcount)

        public static
        void glMultiDrawArrays(GLenum mode, IntPtr first, IntPtr count, GLsizei primcount)
        {
            glMultiDrawArrays_(mode, first, count, primcount);
        }

        #endregion

        #region glMultiDrawArrays(GLenum mode, IntPtr first, object count, GLsizei primcount)

        public static
        void glMultiDrawArrays(GLenum mode, IntPtr first, object count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                glMultiDrawArrays_(mode, first, h0.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiDrawArrays(GLenum mode, IntPtr first, GLsizei[] count, GLsizei primcount)

        public static
        void glMultiDrawArrays(GLenum mode, IntPtr first, GLsizei[] count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                glMultiDrawArrays_(mode, first, h0.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiDrawArrays(GLenum mode, object first, IntPtr count, GLsizei primcount)

        public static
        void glMultiDrawArrays(GLenum mode, object first, IntPtr count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            try
            {
                glMultiDrawArrays_(mode, h0.AddrOfPinnedObject(), count, primcount);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiDrawArrays(GLenum mode, object first, object count, GLsizei primcount)

        public static
        void glMultiDrawArrays(GLenum mode, object first, object count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                glMultiDrawArrays_(mode, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glMultiDrawArrays(GLenum mode, object first, GLsizei[] count, GLsizei primcount)

        public static
        void glMultiDrawArrays(GLenum mode, object first, GLsizei[] count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                glMultiDrawArrays_(mode, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glMultiDrawArrays(GLenum mode, GLint[] first, IntPtr count, GLsizei primcount)

        public static
        void glMultiDrawArrays(GLenum mode, GLint[] first, IntPtr count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            try
            {
                glMultiDrawArrays_(mode, h0.AddrOfPinnedObject(), count, primcount);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiDrawArrays(GLenum mode, GLint[] first, object count, GLsizei primcount)

        public static
        void glMultiDrawArrays(GLenum mode, GLint[] first, object count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                glMultiDrawArrays_(mode, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glMultiDrawArrays(GLenum mode, GLint[] first, GLsizei[] count, GLsizei primcount)

        public static
        void glMultiDrawArrays(GLenum mode, GLint[] first, GLsizei[] count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                glMultiDrawArrays_(mode, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glMultiDrawElements(GLenum mode, IntPtr count, GLenum type, IntPtr indices, GLsizei primcount)

        public static
        void glMultiDrawElements(GLenum mode, IntPtr count, GLenum type, IntPtr indices, GLsizei primcount)
        {
            glMultiDrawElements_(mode, count, type, indices, primcount);
        }

        #endregion

        #region glMultiDrawElements(GLenum mode, IntPtr count, GLenum type, object indices, GLsizei primcount)

        public static
        void glMultiDrawElements(GLenum mode, IntPtr count, GLenum type, object indices, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                glMultiDrawElements_(mode, count, type, h0.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiDrawElements(GLenum mode, IntPtr count, GLenum type, IntPtr[] indices, GLsizei primcount)

        public static
        void glMultiDrawElements(GLenum mode, IntPtr count, GLenum type, IntPtr[] indices, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                glMultiDrawElements_(mode, count, type, h0.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiDrawElements(GLenum mode, object count, GLenum type, IntPtr indices, GLsizei primcount)

        public static
        void glMultiDrawElements(GLenum mode, object count, GLenum type, IntPtr indices, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                glMultiDrawElements_(mode, h0.AddrOfPinnedObject(), type, indices, primcount);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiDrawElements(GLenum mode, object count, GLenum type, object indices, GLsizei primcount)

        public static
        void glMultiDrawElements(GLenum mode, object count, GLenum type, object indices, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                glMultiDrawElements_(mode, h0.AddrOfPinnedObject(), type, h1.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glMultiDrawElements(GLenum mode, object count, GLenum type, IntPtr[] indices, GLsizei primcount)

        public static
        void glMultiDrawElements(GLenum mode, object count, GLenum type, IntPtr[] indices, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                glMultiDrawElements_(mode, h0.AddrOfPinnedObject(), type, h1.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glMultiDrawElements(GLenum mode, GLsizei[] count, GLenum type, IntPtr indices, GLsizei primcount)

        public static
        void glMultiDrawElements(GLenum mode, GLsizei[] count, GLenum type, IntPtr indices, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                glMultiDrawElements_(mode, h0.AddrOfPinnedObject(), type, indices, primcount);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiDrawElements(GLenum mode, GLsizei[] count, GLenum type, object indices, GLsizei primcount)

        public static
        void glMultiDrawElements(GLenum mode, GLsizei[] count, GLenum type, object indices, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                glMultiDrawElements_(mode, h0.AddrOfPinnedObject(), type, h1.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glMultiDrawElements(GLenum mode, GLsizei[] count, GLenum type, IntPtr[] indices, GLsizei primcount)

        public static
        void glMultiDrawElements(GLenum mode, GLsizei[] count, GLenum type, IntPtr[] indices, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                glMultiDrawElements_(mode, h0.AddrOfPinnedObject(), type, h1.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glPointParameterfv(GLenum pname, IntPtr parameters)

        public static
        void glPointParameterfv(GLenum pname, IntPtr parameters)
        {
            glPointParameterfv_(pname, parameters);
        }

        #endregion

        #region glPointParameterfv(GLenum pname, object parameters)

        public static
        void glPointParameterfv(GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glPointParameterfv_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glPointParameterfv(GLenum pname, GLfloat[] parameters)

        public static
        void glPointParameterfv(GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glPointParameterfv_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glPointParameteriv(GLenum pname, IntPtr parameters)

        public static
        void glPointParameteriv(GLenum pname, IntPtr parameters)
        {
            glPointParameteriv_(pname, parameters);
        }

        #endregion

        #region glPointParameteriv(GLenum pname, object parameters)

        public static
        void glPointParameteriv(GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glPointParameteriv_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glPointParameteriv(GLenum pname, GLint[] parameters)

        public static
        void glPointParameteriv(GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glPointParameteriv_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glSecondaryColor3bv(IntPtr v)

        public static
        void glSecondaryColor3bv(IntPtr v)
        {
            glSecondaryColor3bv_(v);
        }

        #endregion

        #region glSecondaryColor3bv(object v)

        public static
        void glSecondaryColor3bv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glSecondaryColor3bv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glSecondaryColor3bv(GLbyte[] v)

        public static
        void glSecondaryColor3bv(GLbyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glSecondaryColor3bv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glSecondaryColor3dv(IntPtr v)

        public static
        void glSecondaryColor3dv(IntPtr v)
        {
            glSecondaryColor3dv_(v);
        }

        #endregion

        #region glSecondaryColor3dv(object v)

        public static
        void glSecondaryColor3dv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glSecondaryColor3dv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glSecondaryColor3dv(GLdouble[] v)

        public static
        void glSecondaryColor3dv(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glSecondaryColor3dv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glSecondaryColor3fv(IntPtr v)

        public static
        void glSecondaryColor3fv(IntPtr v)
        {
            glSecondaryColor3fv_(v);
        }

        #endregion

        #region glSecondaryColor3fv(object v)

        public static
        void glSecondaryColor3fv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glSecondaryColor3fv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glSecondaryColor3fv(GLfloat[] v)

        public static
        void glSecondaryColor3fv(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glSecondaryColor3fv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glSecondaryColor3iv(IntPtr v)

        public static
        void glSecondaryColor3iv(IntPtr v)
        {
            glSecondaryColor3iv_(v);
        }

        #endregion

        #region glSecondaryColor3iv(object v)

        public static
        void glSecondaryColor3iv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glSecondaryColor3iv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glSecondaryColor3iv(GLint[] v)

        public static
        void glSecondaryColor3iv(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glSecondaryColor3iv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glSecondaryColor3sv(IntPtr v)

        public static
        void glSecondaryColor3sv(IntPtr v)
        {
            glSecondaryColor3sv_(v);
        }

        #endregion

        #region glSecondaryColor3sv(object v)

        public static
        void glSecondaryColor3sv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glSecondaryColor3sv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glSecondaryColor3sv(GLshort[] v)

        public static
        void glSecondaryColor3sv(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glSecondaryColor3sv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glSecondaryColor3ubv(IntPtr v)

        public static
        void glSecondaryColor3ubv(IntPtr v)
        {
            glSecondaryColor3ubv_(v);
        }

        #endregion

        #region glSecondaryColor3ubv(object v)

        public static
        void glSecondaryColor3ubv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glSecondaryColor3ubv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glSecondaryColor3ubv(GLubyte[] v)

        public static
        void glSecondaryColor3ubv(GLubyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glSecondaryColor3ubv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glSecondaryColor3uiv(IntPtr v)

        public static
        void glSecondaryColor3uiv(IntPtr v)
        {
            glSecondaryColor3uiv_(v);
        }

        #endregion

        #region glSecondaryColor3uiv(object v)

        public static
        void glSecondaryColor3uiv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glSecondaryColor3uiv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glSecondaryColor3uiv(GLuint[] v)

        public static
        void glSecondaryColor3uiv(GLuint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glSecondaryColor3uiv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glSecondaryColor3usv(IntPtr v)

        public static
        void glSecondaryColor3usv(IntPtr v)
        {
            glSecondaryColor3usv_(v);
        }

        #endregion

        #region glSecondaryColor3usv(object v)

        public static
        void glSecondaryColor3usv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glSecondaryColor3usv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glSecondaryColor3usv(GLushort[] v)

        public static
        void glSecondaryColor3usv(GLushort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glSecondaryColor3usv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glSecondaryColorPointer(GLint size, GLenum type, GLsizei stride, IntPtr pointer)

        public static
        void glSecondaryColorPointer(GLint size, GLenum type, GLsizei stride, IntPtr pointer)
        {
            glSecondaryColorPointer_(size, type, stride, pointer);
        }

        #endregion

        #region glSecondaryColorPointer(GLint size, GLenum type, GLsizei stride, object pointer)

        public static
        void glSecondaryColorPointer(GLint size, GLenum type, GLsizei stride, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                glSecondaryColorPointer_(size, type, stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glWindowPos2dv(IntPtr v)

        public static
        void glWindowPos2dv(IntPtr v)
        {
            glWindowPos2dv_(v);
        }

        #endregion

        #region glWindowPos2dv(object v)

        public static
        void glWindowPos2dv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glWindowPos2dv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glWindowPos2dv(GLdouble[] v)

        public static
        void glWindowPos2dv(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glWindowPos2dv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glWindowPos2fv(IntPtr v)

        public static
        void glWindowPos2fv(IntPtr v)
        {
            glWindowPos2fv_(v);
        }

        #endregion

        #region glWindowPos2fv(object v)

        public static
        void glWindowPos2fv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glWindowPos2fv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glWindowPos2fv(GLfloat[] v)

        public static
        void glWindowPos2fv(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glWindowPos2fv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glWindowPos2iv(IntPtr v)

        public static
        void glWindowPos2iv(IntPtr v)
        {
            glWindowPos2iv_(v);
        }

        #endregion

        #region glWindowPos2iv(object v)

        public static
        void glWindowPos2iv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glWindowPos2iv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glWindowPos2iv(GLint[] v)

        public static
        void glWindowPos2iv(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glWindowPos2iv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glWindowPos2sv(IntPtr v)

        public static
        void glWindowPos2sv(IntPtr v)
        {
            glWindowPos2sv_(v);
        }

        #endregion

        #region glWindowPos2sv(object v)

        public static
        void glWindowPos2sv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glWindowPos2sv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glWindowPos2sv(GLshort[] v)

        public static
        void glWindowPos2sv(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glWindowPos2sv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glWindowPos3dv(IntPtr v)

        public static
        void glWindowPos3dv(IntPtr v)
        {
            glWindowPos3dv_(v);
        }

        #endregion

        #region glWindowPos3dv(object v)

        public static
        void glWindowPos3dv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glWindowPos3dv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glWindowPos3dv(GLdouble[] v)

        public static
        void glWindowPos3dv(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glWindowPos3dv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glWindowPos3fv(IntPtr v)

        public static
        void glWindowPos3fv(IntPtr v)
        {
            glWindowPos3fv_(v);
        }

        #endregion

        #region glWindowPos3fv(object v)

        public static
        void glWindowPos3fv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glWindowPos3fv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glWindowPos3fv(GLfloat[] v)

        public static
        void glWindowPos3fv(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glWindowPos3fv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glWindowPos3iv(IntPtr v)

        public static
        void glWindowPos3iv(IntPtr v)
        {
            glWindowPos3iv_(v);
        }

        #endregion

        #region glWindowPos3iv(object v)

        public static
        void glWindowPos3iv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glWindowPos3iv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glWindowPos3iv(GLint[] v)

        public static
        void glWindowPos3iv(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glWindowPos3iv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glWindowPos3sv(IntPtr v)

        public static
        void glWindowPos3sv(IntPtr v)
        {
            glWindowPos3sv_(v);
        }

        #endregion

        #region glWindowPos3sv(object v)

        public static
        void glWindowPos3sv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glWindowPos3sv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glWindowPos3sv(GLshort[] v)

        public static
        void glWindowPos3sv(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glWindowPos3sv_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGenQueries(GLsizei n, IntPtr ids)

        public static
        void glGenQueries(GLsizei n, IntPtr ids)
        {
            glGenQueries_(n, ids);
        }

        #endregion

        #region glGenQueries(GLsizei n, object ids)

        public static
        void glGenQueries(GLsizei n, object ids)
        {
            GCHandle h0 = GCHandle.Alloc(ids, GCHandleType.Pinned);
            try
            {
                glGenQueries_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGenQueries(GLsizei n, GLuint[] ids)

        public static
        void glGenQueries(GLsizei n, GLuint[] ids)
        {
            GCHandle h0 = GCHandle.Alloc(ids, GCHandleType.Pinned);
            try
            {
                glGenQueries_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glDeleteQueries(GLsizei n, IntPtr ids)

        public static
        void glDeleteQueries(GLsizei n, IntPtr ids)
        {
            glDeleteQueries_(n, ids);
        }

        #endregion

        #region glDeleteQueries(GLsizei n, object ids)

        public static
        void glDeleteQueries(GLsizei n, object ids)
        {
            GCHandle h0 = GCHandle.Alloc(ids, GCHandleType.Pinned);
            try
            {
                glDeleteQueries_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glDeleteQueries(GLsizei n, GLuint[] ids)

        public static
        void glDeleteQueries(GLsizei n, GLuint[] ids)
        {
            GCHandle h0 = GCHandle.Alloc(ids, GCHandleType.Pinned);
            try
            {
                glDeleteQueries_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetQueryiv(GLenum target, GLenum pname, IntPtr parameters)

        public static
        void glGetQueryiv(GLenum target, GLenum pname, IntPtr parameters)
        {
            glGetQueryiv_(target, pname, parameters);
        }

        #endregion

        #region glGetQueryiv(GLenum target, GLenum pname, object parameters)

        public static
        void glGetQueryiv(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetQueryiv_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetQueryiv(GLenum target, GLenum pname, GLint[] parameters)

        public static
        void glGetQueryiv(GLenum target, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetQueryiv_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetQueryObjectiv(GLuint id, GLenum pname, IntPtr parameters)

        public static
        void glGetQueryObjectiv(GLuint id, GLenum pname, IntPtr parameters)
        {
            glGetQueryObjectiv_(id, pname, parameters);
        }

        #endregion

        #region glGetQueryObjectiv(GLuint id, GLenum pname, object parameters)

        public static
        void glGetQueryObjectiv(GLuint id, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetQueryObjectiv_(id, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetQueryObjectiv(GLuint id, GLenum pname, GLint[] parameters)

        public static
        void glGetQueryObjectiv(GLuint id, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetQueryObjectiv_(id, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetQueryObjectuiv(GLuint id, GLenum pname, IntPtr parameters)

        public static
        void glGetQueryObjectuiv(GLuint id, GLenum pname, IntPtr parameters)
        {
            glGetQueryObjectuiv_(id, pname, parameters);
        }

        #endregion

        #region glGetQueryObjectuiv(GLuint id, GLenum pname, object parameters)

        public static
        void glGetQueryObjectuiv(GLuint id, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetQueryObjectuiv_(id, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetQueryObjectuiv(GLuint id, GLenum pname, GLuint[] parameters)

        public static
        void glGetQueryObjectuiv(GLuint id, GLenum pname, GLuint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetQueryObjectuiv_(id, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glDeleteBuffers(GLsizei n, IntPtr buffers)

        public static
        void glDeleteBuffers(GLsizei n, IntPtr buffers)
        {
            glDeleteBuffers_(n, buffers);
        }

        #endregion

        #region glDeleteBuffers(GLsizei n, object buffers)

        public static
        void glDeleteBuffers(GLsizei n, object buffers)
        {
            GCHandle h0 = GCHandle.Alloc(buffers, GCHandleType.Pinned);
            try
            {
                glDeleteBuffers_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glDeleteBuffers(GLsizei n, GLuint[] buffers)

        public static
        void glDeleteBuffers(GLsizei n, GLuint[] buffers)
        {
            GCHandle h0 = GCHandle.Alloc(buffers, GCHandleType.Pinned);
            try
            {
                glDeleteBuffers_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGenBuffers(GLsizei n, IntPtr buffers)

        public static
        void glGenBuffers(GLsizei n, IntPtr buffers)
        {
            glGenBuffers_(n, buffers);
        }

        #endregion

        #region glGenBuffers(GLsizei n, object buffers)

        public static
        void glGenBuffers(GLsizei n, object buffers)
        {
            GCHandle h0 = GCHandle.Alloc(buffers, GCHandleType.Pinned);
            try
            {
                glGenBuffers_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGenBuffers(GLsizei n, GLuint[] buffers)

        public static
        void glGenBuffers(GLsizei n, GLuint[] buffers)
        {
            GCHandle h0 = GCHandle.Alloc(buffers, GCHandleType.Pinned);
            try
            {
                glGenBuffers_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glBufferData(GLenum target, GLsizeiptr size, IntPtr data, GLenum usage)

        public static
        void glBufferData(GLenum target, GLsizeiptr size, IntPtr data, GLenum usage)
        {
            glBufferData_(target, size, data, usage);
        }

        #endregion

        #region glBufferData(GLenum target, GLsizeiptr size, object data, GLenum usage)

        public static
        void glBufferData(GLenum target, GLsizeiptr size, object data, GLenum usage)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                glBufferData_(target, size, h0.AddrOfPinnedObject(), usage);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, IntPtr data)

        public static
        void glBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, IntPtr data)
        {
            glBufferSubData_(target, offset, size, data);
        }

        #endregion

        #region glBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, object data)

        public static
        void glBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                glBufferSubData_(target, offset, size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, IntPtr data)

        public static
        void glGetBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, IntPtr data)
        {
            glGetBufferSubData_(target, offset, size, data);
        }

        #endregion

        #region glGetBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, object data)

        public static
        void glGetBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                glGetBufferSubData_(target, offset, size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetBufferParameteriv(GLenum target, GLenum pname, IntPtr parameters)

        public static
        void glGetBufferParameteriv(GLenum target, GLenum pname, IntPtr parameters)
        {
            glGetBufferParameteriv_(target, pname, parameters);
        }

        #endregion

        #region glGetBufferParameteriv(GLenum target, GLenum pname, object parameters)

        public static
        void glGetBufferParameteriv(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetBufferParameteriv_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetBufferParameteriv(GLenum target, GLenum pname, GLint[] parameters)

        public static
        void glGetBufferParameteriv(GLenum target, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetBufferParameteriv_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetBufferPointerv(GLenum target, GLenum pname, IntPtr parameters)

        public static
        void glGetBufferPointerv(GLenum target, GLenum pname, IntPtr parameters)
        {
            glGetBufferPointerv_(target, pname, parameters);
        }

        #endregion

        #region glGetBufferPointerv(GLenum target, GLenum pname, object parameters)

        public static
        void glGetBufferPointerv(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetBufferPointerv_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetBufferPointerv(GLenum target, GLenum pname, IntPtr[] parameters)

        public static
        void glGetBufferPointerv(GLenum target, GLenum pname, IntPtr[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetBufferPointerv_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glDrawBuffers(GLsizei n, IntPtr bufs)

        public static
        void glDrawBuffers(GLsizei n, IntPtr bufs)
        {
            glDrawBuffers_(n, bufs);
        }

        #endregion

        #region glDrawBuffers(GLsizei n, object bufs)

        public static
        void glDrawBuffers(GLsizei n, object bufs)
        {
            GCHandle h0 = GCHandle.Alloc(bufs, GCHandleType.Pinned);
            try
            {
                glDrawBuffers_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glDrawBuffers(GLsizei n, GLenum[] bufs)

        public static
        void glDrawBuffers(GLsizei n, GLenum[] bufs)
        {
            GCHandle h0 = GCHandle.Alloc(bufs, GCHandleType.Pinned);
            try
            {
                glDrawBuffers_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, IntPtr size, IntPtr type, StringBuilder name)

        public static
        void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, IntPtr size, IntPtr type, StringBuilder name)
        {
            glGetActiveAttrib_(program, index, bufSize, length, size, type, name);
        }

        #endregion

        #region glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, IntPtr size, object type, StringBuilder name)

        public static
        void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, IntPtr size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                glGetActiveAttrib_(program, index, bufSize, length, size, h0.AddrOfPinnedObject(), name);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, IntPtr size, GLenum[] type, StringBuilder name)

        public static
        void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, IntPtr size, GLenum[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                glGetActiveAttrib_(program, index, bufSize, length, size, h0.AddrOfPinnedObject(), name);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, object size, IntPtr type, StringBuilder name)

        public static
        void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, object size, IntPtr type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(size, GCHandleType.Pinned);
            try
            {
                glGetActiveAttrib_(program, index, bufSize, length, h0.AddrOfPinnedObject(), type, name);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, object size, object type, StringBuilder name)

        public static
        void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, object size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                glGetActiveAttrib_(program, index, bufSize, length, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, object size, GLenum[] type, StringBuilder name)

        public static
        void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, object size, GLenum[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                glGetActiveAttrib_(program, index, bufSize, length, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, GLint[] size, IntPtr type, StringBuilder name)

        public static
        void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, GLint[] size, IntPtr type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(size, GCHandleType.Pinned);
            try
            {
                glGetActiveAttrib_(program, index, bufSize, length, h0.AddrOfPinnedObject(), type, name);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, GLint[] size, object type, StringBuilder name)

        public static
        void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, GLint[] size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                glGetActiveAttrib_(program, index, bufSize, length, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, GLint[] size, GLenum[] type, StringBuilder name)

        public static
        void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, GLint[] size, GLenum[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                glGetActiveAttrib_(program, index, bufSize, length, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, object length, IntPtr size, IntPtr type, StringBuilder name)

        public static
        void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, object length, IntPtr size, IntPtr type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            try
            {
                glGetActiveAttrib_(program, index, bufSize, h0.AddrOfPinnedObject(), size, type, name);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, object length, IntPtr size, object type, StringBuilder name)

        public static
        void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, object length, IntPtr size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                glGetActiveAttrib_(program, index, bufSize, h0.AddrOfPinnedObject(), size, h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, object length, IntPtr size, GLenum[] type, StringBuilder name)

        public static
        void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, object length, IntPtr size, GLenum[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                glGetActiveAttrib_(program, index, bufSize, h0.AddrOfPinnedObject(), size, h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, object length, object size, IntPtr type, StringBuilder name)

        public static
        void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, object length, object size, IntPtr type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            try
            {
                glGetActiveAttrib_(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), type, name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, object length, object size, object type, StringBuilder name)

        public static
        void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, object length, object size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                glGetActiveAttrib_(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, object length, object size, GLenum[] type, StringBuilder name)

        public static
        void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, object length, object size, GLenum[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                glGetActiveAttrib_(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, object length, GLint[] size, IntPtr type, StringBuilder name)

        public static
        void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, object length, GLint[] size, IntPtr type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            try
            {
                glGetActiveAttrib_(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), type, name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, object length, GLint[] size, object type, StringBuilder name)

        public static
        void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, object length, GLint[] size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                glGetActiveAttrib_(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, object length, GLint[] size, GLenum[] type, StringBuilder name)

        public static
        void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, object length, GLint[] size, GLenum[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                glGetActiveAttrib_(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, IntPtr size, IntPtr type, StringBuilder name)

        public static
        void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, IntPtr size, IntPtr type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            try
            {
                glGetActiveAttrib_(program, index, bufSize, h0.AddrOfPinnedObject(), size, type, name);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, IntPtr size, object type, StringBuilder name)

        public static
        void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, IntPtr size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                glGetActiveAttrib_(program, index, bufSize, h0.AddrOfPinnedObject(), size, h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, IntPtr size, GLenum[] type, StringBuilder name)

        public static
        void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, IntPtr size, GLenum[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                glGetActiveAttrib_(program, index, bufSize, h0.AddrOfPinnedObject(), size, h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, object size, IntPtr type, StringBuilder name)

        public static
        void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, object size, IntPtr type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            try
            {
                glGetActiveAttrib_(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), type, name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, object size, object type, StringBuilder name)

        public static
        void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, object size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                glGetActiveAttrib_(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, object size, GLenum[] type, StringBuilder name)

        public static
        void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, object size, GLenum[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                glGetActiveAttrib_(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, GLint[] size, IntPtr type, StringBuilder name)

        public static
        void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, GLint[] size, IntPtr type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            try
            {
                glGetActiveAttrib_(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), type, name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, GLint[] size, object type, StringBuilder name)

        public static
        void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, GLint[] size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                glGetActiveAttrib_(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, GLint[] size, GLenum[] type, StringBuilder name)

        public static
        void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, GLint[] size, GLenum[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                glGetActiveAttrib_(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, IntPtr size, IntPtr type, StringBuilder name)

        public static
        void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, IntPtr size, IntPtr type, StringBuilder name)
        {
            glGetActiveUniform_(program, index, bufSize, length, size, type, name);
        }

        #endregion

        #region glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, IntPtr size, object type, StringBuilder name)

        public static
        void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, IntPtr size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                glGetActiveUniform_(program, index, bufSize, length, size, h0.AddrOfPinnedObject(), name);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, IntPtr size, GLenum[] type, StringBuilder name)

        public static
        void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, IntPtr size, GLenum[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                glGetActiveUniform_(program, index, bufSize, length, size, h0.AddrOfPinnedObject(), name);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, object size, IntPtr type, StringBuilder name)

        public static
        void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, object size, IntPtr type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(size, GCHandleType.Pinned);
            try
            {
                glGetActiveUniform_(program, index, bufSize, length, h0.AddrOfPinnedObject(), type, name);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, object size, object type, StringBuilder name)

        public static
        void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, object size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                glGetActiveUniform_(program, index, bufSize, length, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, object size, GLenum[] type, StringBuilder name)

        public static
        void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, object size, GLenum[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                glGetActiveUniform_(program, index, bufSize, length, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, GLint[] size, IntPtr type, StringBuilder name)

        public static
        void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, GLint[] size, IntPtr type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(size, GCHandleType.Pinned);
            try
            {
                glGetActiveUniform_(program, index, bufSize, length, h0.AddrOfPinnedObject(), type, name);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, GLint[] size, object type, StringBuilder name)

        public static
        void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, GLint[] size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                glGetActiveUniform_(program, index, bufSize, length, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, GLint[] size, GLenum[] type, StringBuilder name)

        public static
        void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, GLint[] size, GLenum[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                glGetActiveUniform_(program, index, bufSize, length, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, object length, IntPtr size, IntPtr type, StringBuilder name)

        public static
        void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, object length, IntPtr size, IntPtr type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            try
            {
                glGetActiveUniform_(program, index, bufSize, h0.AddrOfPinnedObject(), size, type, name);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, object length, IntPtr size, object type, StringBuilder name)

        public static
        void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, object length, IntPtr size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                glGetActiveUniform_(program, index, bufSize, h0.AddrOfPinnedObject(), size, h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, object length, IntPtr size, GLenum[] type, StringBuilder name)

        public static
        void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, object length, IntPtr size, GLenum[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                glGetActiveUniform_(program, index, bufSize, h0.AddrOfPinnedObject(), size, h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, object length, object size, IntPtr type, StringBuilder name)

        public static
        void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, object length, object size, IntPtr type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            try
            {
                glGetActiveUniform_(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), type, name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, object length, object size, object type, StringBuilder name)

        public static
        void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, object length, object size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                glGetActiveUniform_(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, object length, object size, GLenum[] type, StringBuilder name)

        public static
        void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, object length, object size, GLenum[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                glGetActiveUniform_(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, object length, GLint[] size, IntPtr type, StringBuilder name)

        public static
        void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, object length, GLint[] size, IntPtr type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            try
            {
                glGetActiveUniform_(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), type, name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, object length, GLint[] size, object type, StringBuilder name)

        public static
        void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, object length, GLint[] size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                glGetActiveUniform_(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, object length, GLint[] size, GLenum[] type, StringBuilder name)

        public static
        void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, object length, GLint[] size, GLenum[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                glGetActiveUniform_(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, IntPtr size, IntPtr type, StringBuilder name)

        public static
        void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, IntPtr size, IntPtr type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            try
            {
                glGetActiveUniform_(program, index, bufSize, h0.AddrOfPinnedObject(), size, type, name);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, IntPtr size, object type, StringBuilder name)

        public static
        void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, IntPtr size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                glGetActiveUniform_(program, index, bufSize, h0.AddrOfPinnedObject(), size, h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, IntPtr size, GLenum[] type, StringBuilder name)

        public static
        void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, IntPtr size, GLenum[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                glGetActiveUniform_(program, index, bufSize, h0.AddrOfPinnedObject(), size, h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, object size, IntPtr type, StringBuilder name)

        public static
        void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, object size, IntPtr type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            try
            {
                glGetActiveUniform_(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), type, name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, object size, object type, StringBuilder name)

        public static
        void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, object size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                glGetActiveUniform_(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, object size, GLenum[] type, StringBuilder name)

        public static
        void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, object size, GLenum[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                glGetActiveUniform_(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, GLint[] size, IntPtr type, StringBuilder name)

        public static
        void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, GLint[] size, IntPtr type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            try
            {
                glGetActiveUniform_(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), type, name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, GLint[] size, object type, StringBuilder name)

        public static
        void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, GLint[] size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                glGetActiveUniform_(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, GLint[] size, GLenum[] type, StringBuilder name)

        public static
        void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, GLint[] size, GLenum[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                glGetActiveUniform_(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glGetAttachedShaders(GLuint program, GLsizei maxCount, IntPtr count, IntPtr obj)

        public static
        void glGetAttachedShaders(GLuint program, GLsizei maxCount, IntPtr count, IntPtr obj)
        {
            glGetAttachedShaders_(program, maxCount, count, obj);
        }

        #endregion

        #region glGetAttachedShaders(GLuint program, GLsizei maxCount, IntPtr count, object obj)

        public static
        void glGetAttachedShaders(GLuint program, GLsizei maxCount, IntPtr count, object obj)
        {
            GCHandle h0 = GCHandle.Alloc(obj, GCHandleType.Pinned);
            try
            {
                glGetAttachedShaders_(program, maxCount, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetAttachedShaders(GLuint program, GLsizei maxCount, IntPtr count, GLuint[] obj)

        public static
        void glGetAttachedShaders(GLuint program, GLsizei maxCount, IntPtr count, GLuint[] obj)
        {
            GCHandle h0 = GCHandle.Alloc(obj, GCHandleType.Pinned);
            try
            {
                glGetAttachedShaders_(program, maxCount, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetAttachedShaders(GLuint program, GLsizei maxCount, object count, IntPtr obj)

        public static
        void glGetAttachedShaders(GLuint program, GLsizei maxCount, object count, IntPtr obj)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                glGetAttachedShaders_(program, maxCount, h0.AddrOfPinnedObject(), obj);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetAttachedShaders(GLuint program, GLsizei maxCount, object count, object obj)

        public static
        void glGetAttachedShaders(GLuint program, GLsizei maxCount, object count, object obj)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(obj, GCHandleType.Pinned);
            try
            {
                glGetAttachedShaders_(program, maxCount, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glGetAttachedShaders(GLuint program, GLsizei maxCount, object count, GLuint[] obj)

        public static
        void glGetAttachedShaders(GLuint program, GLsizei maxCount, object count, GLuint[] obj)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(obj, GCHandleType.Pinned);
            try
            {
                glGetAttachedShaders_(program, maxCount, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glGetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei[] count, IntPtr obj)

        public static
        void glGetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei[] count, IntPtr obj)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                glGetAttachedShaders_(program, maxCount, h0.AddrOfPinnedObject(), obj);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei[] count, object obj)

        public static
        void glGetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei[] count, object obj)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(obj, GCHandleType.Pinned);
            try
            {
                glGetAttachedShaders_(program, maxCount, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glGetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei[] count, GLuint[] obj)

        public static
        void glGetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei[] count, GLuint[] obj)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(obj, GCHandleType.Pinned);
            try
            {
                glGetAttachedShaders_(program, maxCount, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glGetProgramiv(GLuint program, GLenum pname, IntPtr parameters)

        public static
        void glGetProgramiv(GLuint program, GLenum pname, IntPtr parameters)
        {
            glGetProgramiv_(program, pname, parameters);
        }

        #endregion

        #region glGetProgramiv(GLuint program, GLenum pname, object parameters)

        public static
        void glGetProgramiv(GLuint program, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetProgramiv_(program, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetProgramiv(GLuint program, GLenum pname, GLint[] parameters)

        public static
        void glGetProgramiv(GLuint program, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetProgramiv_(program, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetProgramInfoLog(GLuint program, GLsizei bufSize, IntPtr length, StringBuilder infoLog)

        public static
        void glGetProgramInfoLog(GLuint program, GLsizei bufSize, IntPtr length, StringBuilder infoLog)
        {
            glGetProgramInfoLog_(program, bufSize, length, infoLog);
        }

        #endregion

        #region glGetProgramInfoLog(GLuint program, GLsizei bufSize, object length, StringBuilder infoLog)

        public static
        void glGetProgramInfoLog(GLuint program, GLsizei bufSize, object length, StringBuilder infoLog)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            try
            {
                glGetProgramInfoLog_(program, bufSize, h0.AddrOfPinnedObject(), infoLog);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetProgramInfoLog(GLuint program, GLsizei bufSize, GLsizei[] length, StringBuilder infoLog)

        public static
        void glGetProgramInfoLog(GLuint program, GLsizei bufSize, GLsizei[] length, StringBuilder infoLog)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            try
            {
                glGetProgramInfoLog_(program, bufSize, h0.AddrOfPinnedObject(), infoLog);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetShaderiv(GLuint shader, GLenum pname, IntPtr parameters)

        public static
        void glGetShaderiv(GLuint shader, GLenum pname, IntPtr parameters)
        {
            glGetShaderiv_(shader, pname, parameters);
        }

        #endregion

        #region glGetShaderiv(GLuint shader, GLenum pname, object parameters)

        public static
        void glGetShaderiv(GLuint shader, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetShaderiv_(shader, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetShaderiv(GLuint shader, GLenum pname, GLint[] parameters)

        public static
        void glGetShaderiv(GLuint shader, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetShaderiv_(shader, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetShaderInfoLog(GLuint shader, GLsizei bufSize, IntPtr length, StringBuilder infoLog)

        public static
        void glGetShaderInfoLog(GLuint shader, GLsizei bufSize, IntPtr length, StringBuilder infoLog)
        {
            glGetShaderInfoLog_(shader, bufSize, length, infoLog);
        }

        #endregion

        #region glGetShaderInfoLog(GLuint shader, GLsizei bufSize, object length, StringBuilder infoLog)

        public static
        void glGetShaderInfoLog(GLuint shader, GLsizei bufSize, object length, StringBuilder infoLog)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            try
            {
                glGetShaderInfoLog_(shader, bufSize, h0.AddrOfPinnedObject(), infoLog);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetShaderInfoLog(GLuint shader, GLsizei bufSize, GLsizei[] length, StringBuilder infoLog)

        public static
        void glGetShaderInfoLog(GLuint shader, GLsizei bufSize, GLsizei[] length, StringBuilder infoLog)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            try
            {
                glGetShaderInfoLog_(shader, bufSize, h0.AddrOfPinnedObject(), infoLog);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetShaderSource(GLuint shader, GLsizei bufSize, IntPtr length, StringBuilder source)

        public static
        void glGetShaderSource(GLuint shader, GLsizei bufSize, IntPtr length, StringBuilder source)
        {
            glGetShaderSource_(shader, bufSize, length, source);
        }

        #endregion

        #region glGetShaderSource(GLuint shader, GLsizei bufSize, object length, StringBuilder source)

        public static
        void glGetShaderSource(GLuint shader, GLsizei bufSize, object length, StringBuilder source)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            try
            {
                glGetShaderSource_(shader, bufSize, h0.AddrOfPinnedObject(), source);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetShaderSource(GLuint shader, GLsizei bufSize, GLsizei[] length, StringBuilder source)

        public static
        void glGetShaderSource(GLuint shader, GLsizei bufSize, GLsizei[] length, StringBuilder source)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            try
            {
                glGetShaderSource_(shader, bufSize, h0.AddrOfPinnedObject(), source);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetUniformfv(GLuint program, GLint location, IntPtr parameters)

        public static
        void glGetUniformfv(GLuint program, GLint location, IntPtr parameters)
        {
            glGetUniformfv_(program, location, parameters);
        }

        #endregion

        #region glGetUniformfv(GLuint program, GLint location, object parameters)

        public static
        void glGetUniformfv(GLuint program, GLint location, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetUniformfv_(program, location, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetUniformfv(GLuint program, GLint location, GLfloat[] parameters)

        public static
        void glGetUniformfv(GLuint program, GLint location, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetUniformfv_(program, location, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetUniformiv(GLuint program, GLint location, IntPtr parameters)

        public static
        void glGetUniformiv(GLuint program, GLint location, IntPtr parameters)
        {
            glGetUniformiv_(program, location, parameters);
        }

        #endregion

        #region glGetUniformiv(GLuint program, GLint location, object parameters)

        public static
        void glGetUniformiv(GLuint program, GLint location, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetUniformiv_(program, location, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetUniformiv(GLuint program, GLint location, GLint[] parameters)

        public static
        void glGetUniformiv(GLuint program, GLint location, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetUniformiv_(program, location, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetVertexAttribdv(GLuint index, GLenum pname, IntPtr parameters)

        public static
        void glGetVertexAttribdv(GLuint index, GLenum pname, IntPtr parameters)
        {
            glGetVertexAttribdv_(index, pname, parameters);
        }

        #endregion

        #region glGetVertexAttribdv(GLuint index, GLenum pname, object parameters)

        public static
        void glGetVertexAttribdv(GLuint index, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetVertexAttribdv_(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetVertexAttribdv(GLuint index, GLenum pname, GLdouble[] parameters)

        public static
        void glGetVertexAttribdv(GLuint index, GLenum pname, GLdouble[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetVertexAttribdv_(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetVertexAttribfv(GLuint index, GLenum pname, IntPtr parameters)

        public static
        void glGetVertexAttribfv(GLuint index, GLenum pname, IntPtr parameters)
        {
            glGetVertexAttribfv_(index, pname, parameters);
        }

        #endregion

        #region glGetVertexAttribfv(GLuint index, GLenum pname, object parameters)

        public static
        void glGetVertexAttribfv(GLuint index, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetVertexAttribfv_(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetVertexAttribfv(GLuint index, GLenum pname, GLfloat[] parameters)

        public static
        void glGetVertexAttribfv(GLuint index, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetVertexAttribfv_(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetVertexAttribiv(GLuint index, GLenum pname, IntPtr parameters)

        public static
        void glGetVertexAttribiv(GLuint index, GLenum pname, IntPtr parameters)
        {
            glGetVertexAttribiv_(index, pname, parameters);
        }

        #endregion

        #region glGetVertexAttribiv(GLuint index, GLenum pname, object parameters)

        public static
        void glGetVertexAttribiv(GLuint index, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetVertexAttribiv_(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetVertexAttribiv(GLuint index, GLenum pname, GLint[] parameters)

        public static
        void glGetVertexAttribiv(GLuint index, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetVertexAttribiv_(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetVertexAttribPointerv(GLuint index, GLenum pname, IntPtr pointer)

        public static
        void glGetVertexAttribPointerv(GLuint index, GLenum pname, IntPtr pointer)
        {
            glGetVertexAttribPointerv_(index, pname, pointer);
        }

        #endregion

        #region glGetVertexAttribPointerv(GLuint index, GLenum pname, object pointer)

        public static
        void glGetVertexAttribPointerv(GLuint index, GLenum pname, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                glGetVertexAttribPointerv_(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetVertexAttribPointerv(GLuint index, GLenum pname, IntPtr[] pointer)

        public static
        void glGetVertexAttribPointerv(GLuint index, GLenum pname, IntPtr[] pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                glGetVertexAttribPointerv_(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glShaderSource(GLuint shader, GLsizei count, string[] @string, IntPtr length)

        public static
        void glShaderSource(GLuint shader, GLsizei count, string[] @string, IntPtr length)
        {
            glShaderSource_(shader, count, @string, length);
        }

        #endregion

        #region glShaderSource(GLuint shader, GLsizei count, string[] @string, object length)

        public static
        void glShaderSource(GLuint shader, GLsizei count, string[] @string, object length)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            try
            {
                glShaderSource_(shader, count, @string, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glShaderSource(GLuint shader, GLsizei count, string[] @string, GLint[] length)

        public static
        void glShaderSource(GLuint shader, GLsizei count, string[] @string, GLint[] length)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            try
            {
                glShaderSource_(shader, count, @string, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glUniform1fv(GLint location, GLsizei count, IntPtr value)

        public static
        void glUniform1fv(GLint location, GLsizei count, IntPtr value)
        {
            glUniform1fv_(location, count, value);
        }

        #endregion

        #region glUniform1fv(GLint location, GLsizei count, object value)

        public static
        void glUniform1fv(GLint location, GLsizei count, object value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                glUniform1fv_(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glUniform1fv(GLint location, GLsizei count, GLfloat[] value)

        public static
        void glUniform1fv(GLint location, GLsizei count, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                glUniform1fv_(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glUniform2fv(GLint location, GLsizei count, IntPtr value)

        public static
        void glUniform2fv(GLint location, GLsizei count, IntPtr value)
        {
            glUniform2fv_(location, count, value);
        }

        #endregion

        #region glUniform2fv(GLint location, GLsizei count, object value)

        public static
        void glUniform2fv(GLint location, GLsizei count, object value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                glUniform2fv_(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glUniform2fv(GLint location, GLsizei count, GLfloat[] value)

        public static
        void glUniform2fv(GLint location, GLsizei count, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                glUniform2fv_(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glUniform3fv(GLint location, GLsizei count, IntPtr value)

        public static
        void glUniform3fv(GLint location, GLsizei count, IntPtr value)
        {
            glUniform3fv_(location, count, value);
        }

        #endregion

        #region glUniform3fv(GLint location, GLsizei count, object value)

        public static
        void glUniform3fv(GLint location, GLsizei count, object value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                glUniform3fv_(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glUniform3fv(GLint location, GLsizei count, GLfloat[] value)

        public static
        void glUniform3fv(GLint location, GLsizei count, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                glUniform3fv_(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glUniform4fv(GLint location, GLsizei count, IntPtr value)

        public static
        void glUniform4fv(GLint location, GLsizei count, IntPtr value)
        {
            glUniform4fv_(location, count, value);
        }

        #endregion

        #region glUniform4fv(GLint location, GLsizei count, object value)

        public static
        void glUniform4fv(GLint location, GLsizei count, object value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                glUniform4fv_(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glUniform4fv(GLint location, GLsizei count, GLfloat[] value)

        public static
        void glUniform4fv(GLint location, GLsizei count, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                glUniform4fv_(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glUniform1iv(GLint location, GLsizei count, IntPtr value)

        public static
        void glUniform1iv(GLint location, GLsizei count, IntPtr value)
        {
            glUniform1iv_(location, count, value);
        }

        #endregion

        #region glUniform1iv(GLint location, GLsizei count, object value)

        public static
        void glUniform1iv(GLint location, GLsizei count, object value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                glUniform1iv_(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glUniform1iv(GLint location, GLsizei count, GLint[] value)

        public static
        void glUniform1iv(GLint location, GLsizei count, GLint[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                glUniform1iv_(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glUniform2iv(GLint location, GLsizei count, IntPtr value)

        public static
        void glUniform2iv(GLint location, GLsizei count, IntPtr value)
        {
            glUniform2iv_(location, count, value);
        }

        #endregion

        #region glUniform2iv(GLint location, GLsizei count, object value)

        public static
        void glUniform2iv(GLint location, GLsizei count, object value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                glUniform2iv_(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glUniform2iv(GLint location, GLsizei count, GLint[] value)

        public static
        void glUniform2iv(GLint location, GLsizei count, GLint[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                glUniform2iv_(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glUniform3iv(GLint location, GLsizei count, IntPtr value)

        public static
        void glUniform3iv(GLint location, GLsizei count, IntPtr value)
        {
            glUniform3iv_(location, count, value);
        }

        #endregion

        #region glUniform3iv(GLint location, GLsizei count, object value)

        public static
        void glUniform3iv(GLint location, GLsizei count, object value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                glUniform3iv_(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glUniform3iv(GLint location, GLsizei count, GLint[] value)

        public static
        void glUniform3iv(GLint location, GLsizei count, GLint[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                glUniform3iv_(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glUniform4iv(GLint location, GLsizei count, IntPtr value)

        public static
        void glUniform4iv(GLint location, GLsizei count, IntPtr value)
        {
            glUniform4iv_(location, count, value);
        }

        #endregion

        #region glUniform4iv(GLint location, GLsizei count, object value)

        public static
        void glUniform4iv(GLint location, GLsizei count, object value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                glUniform4iv_(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glUniform4iv(GLint location, GLsizei count, GLint[] value)

        public static
        void glUniform4iv(GLint location, GLsizei count, GLint[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                glUniform4iv_(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, IntPtr value)

        public static
        void glUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, IntPtr value)
        {
            glUniformMatrix2fv_(location, count, transpose, value);
        }

        #endregion

        #region glUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, object value)

        public static
        void glUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, object value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                glUniformMatrix2fv_(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, GLfloat[] value)

        public static
        void glUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                glUniformMatrix2fv_(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, IntPtr value)

        public static
        void glUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, IntPtr value)
        {
            glUniformMatrix3fv_(location, count, transpose, value);
        }

        #endregion

        #region glUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, object value)

        public static
        void glUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, object value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                glUniformMatrix3fv_(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, GLfloat[] value)

        public static
        void glUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                glUniformMatrix3fv_(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, IntPtr value)

        public static
        void glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, IntPtr value)
        {
            glUniformMatrix4fv_(location, count, transpose, value);
        }

        #endregion

        #region glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, object value)

        public static
        void glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, object value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                glUniformMatrix4fv_(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, GLfloat[] value)

        public static
        void glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                glUniformMatrix4fv_(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib1dv(GLuint index, IntPtr v)

        public static
        void glVertexAttrib1dv(GLuint index, IntPtr v)
        {
            glVertexAttrib1dv_(index, v);
        }

        #endregion

        #region glVertexAttrib1dv(GLuint index, object v)

        public static
        void glVertexAttrib1dv(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib1dv_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib1dv(GLuint index, GLdouble[] v)

        public static
        void glVertexAttrib1dv(GLuint index, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib1dv_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib1fv(GLuint index, IntPtr v)

        public static
        void glVertexAttrib1fv(GLuint index, IntPtr v)
        {
            glVertexAttrib1fv_(index, v);
        }

        #endregion

        #region glVertexAttrib1fv(GLuint index, object v)

        public static
        void glVertexAttrib1fv(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib1fv_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib1fv(GLuint index, GLfloat[] v)

        public static
        void glVertexAttrib1fv(GLuint index, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib1fv_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib1sv(GLuint index, IntPtr v)

        public static
        void glVertexAttrib1sv(GLuint index, IntPtr v)
        {
            glVertexAttrib1sv_(index, v);
        }

        #endregion

        #region glVertexAttrib1sv(GLuint index, object v)

        public static
        void glVertexAttrib1sv(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib1sv_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib1sv(GLuint index, GLshort[] v)

        public static
        void glVertexAttrib1sv(GLuint index, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib1sv_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib2dv(GLuint index, IntPtr v)

        public static
        void glVertexAttrib2dv(GLuint index, IntPtr v)
        {
            glVertexAttrib2dv_(index, v);
        }

        #endregion

        #region glVertexAttrib2dv(GLuint index, object v)

        public static
        void glVertexAttrib2dv(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib2dv_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib2dv(GLuint index, GLdouble[] v)

        public static
        void glVertexAttrib2dv(GLuint index, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib2dv_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib2fv(GLuint index, IntPtr v)

        public static
        void glVertexAttrib2fv(GLuint index, IntPtr v)
        {
            glVertexAttrib2fv_(index, v);
        }

        #endregion

        #region glVertexAttrib2fv(GLuint index, object v)

        public static
        void glVertexAttrib2fv(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib2fv_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib2fv(GLuint index, GLfloat[] v)

        public static
        void glVertexAttrib2fv(GLuint index, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib2fv_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib2sv(GLuint index, IntPtr v)

        public static
        void glVertexAttrib2sv(GLuint index, IntPtr v)
        {
            glVertexAttrib2sv_(index, v);
        }

        #endregion

        #region glVertexAttrib2sv(GLuint index, object v)

        public static
        void glVertexAttrib2sv(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib2sv_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib2sv(GLuint index, GLshort[] v)

        public static
        void glVertexAttrib2sv(GLuint index, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib2sv_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib3dv(GLuint index, IntPtr v)

        public static
        void glVertexAttrib3dv(GLuint index, IntPtr v)
        {
            glVertexAttrib3dv_(index, v);
        }

        #endregion

        #region glVertexAttrib3dv(GLuint index, object v)

        public static
        void glVertexAttrib3dv(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib3dv_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib3dv(GLuint index, GLdouble[] v)

        public static
        void glVertexAttrib3dv(GLuint index, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib3dv_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib3fv(GLuint index, IntPtr v)

        public static
        void glVertexAttrib3fv(GLuint index, IntPtr v)
        {
            glVertexAttrib3fv_(index, v);
        }

        #endregion

        #region glVertexAttrib3fv(GLuint index, object v)

        public static
        void glVertexAttrib3fv(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib3fv_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib3fv(GLuint index, GLfloat[] v)

        public static
        void glVertexAttrib3fv(GLuint index, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib3fv_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib3sv(GLuint index, IntPtr v)

        public static
        void glVertexAttrib3sv(GLuint index, IntPtr v)
        {
            glVertexAttrib3sv_(index, v);
        }

        #endregion

        #region glVertexAttrib3sv(GLuint index, object v)

        public static
        void glVertexAttrib3sv(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib3sv_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib3sv(GLuint index, GLshort[] v)

        public static
        void glVertexAttrib3sv(GLuint index, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib3sv_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib4Nbv(GLuint index, IntPtr v)

        public static
        void glVertexAttrib4Nbv(GLuint index, IntPtr v)
        {
            glVertexAttrib4Nbv_(index, v);
        }

        #endregion

        #region glVertexAttrib4Nbv(GLuint index, object v)

        public static
        void glVertexAttrib4Nbv(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib4Nbv_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib4Nbv(GLuint index, GLbyte[] v)

        public static
        void glVertexAttrib4Nbv(GLuint index, GLbyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib4Nbv_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib4Niv(GLuint index, IntPtr v)

        public static
        void glVertexAttrib4Niv(GLuint index, IntPtr v)
        {
            glVertexAttrib4Niv_(index, v);
        }

        #endregion

        #region glVertexAttrib4Niv(GLuint index, object v)

        public static
        void glVertexAttrib4Niv(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib4Niv_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib4Niv(GLuint index, GLint[] v)

        public static
        void glVertexAttrib4Niv(GLuint index, GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib4Niv_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib4Nsv(GLuint index, IntPtr v)

        public static
        void glVertexAttrib4Nsv(GLuint index, IntPtr v)
        {
            glVertexAttrib4Nsv_(index, v);
        }

        #endregion

        #region glVertexAttrib4Nsv(GLuint index, object v)

        public static
        void glVertexAttrib4Nsv(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib4Nsv_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib4Nsv(GLuint index, GLshort[] v)

        public static
        void glVertexAttrib4Nsv(GLuint index, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib4Nsv_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib4Nubv(GLuint index, IntPtr v)

        public static
        void glVertexAttrib4Nubv(GLuint index, IntPtr v)
        {
            glVertexAttrib4Nubv_(index, v);
        }

        #endregion

        #region glVertexAttrib4Nubv(GLuint index, object v)

        public static
        void glVertexAttrib4Nubv(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib4Nubv_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib4Nubv(GLuint index, GLubyte[] v)

        public static
        void glVertexAttrib4Nubv(GLuint index, GLubyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib4Nubv_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib4Nuiv(GLuint index, IntPtr v)

        public static
        void glVertexAttrib4Nuiv(GLuint index, IntPtr v)
        {
            glVertexAttrib4Nuiv_(index, v);
        }

        #endregion

        #region glVertexAttrib4Nuiv(GLuint index, object v)

        public static
        void glVertexAttrib4Nuiv(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib4Nuiv_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib4Nuiv(GLuint index, GLuint[] v)

        public static
        void glVertexAttrib4Nuiv(GLuint index, GLuint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib4Nuiv_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib4Nusv(GLuint index, IntPtr v)

        public static
        void glVertexAttrib4Nusv(GLuint index, IntPtr v)
        {
            glVertexAttrib4Nusv_(index, v);
        }

        #endregion

        #region glVertexAttrib4Nusv(GLuint index, object v)

        public static
        void glVertexAttrib4Nusv(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib4Nusv_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib4Nusv(GLuint index, GLushort[] v)

        public static
        void glVertexAttrib4Nusv(GLuint index, GLushort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib4Nusv_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib4bv(GLuint index, IntPtr v)

        public static
        void glVertexAttrib4bv(GLuint index, IntPtr v)
        {
            glVertexAttrib4bv_(index, v);
        }

        #endregion

        #region glVertexAttrib4bv(GLuint index, object v)

        public static
        void glVertexAttrib4bv(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib4bv_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib4bv(GLuint index, GLbyte[] v)

        public static
        void glVertexAttrib4bv(GLuint index, GLbyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib4bv_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib4dv(GLuint index, IntPtr v)

        public static
        void glVertexAttrib4dv(GLuint index, IntPtr v)
        {
            glVertexAttrib4dv_(index, v);
        }

        #endregion

        #region glVertexAttrib4dv(GLuint index, object v)

        public static
        void glVertexAttrib4dv(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib4dv_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib4dv(GLuint index, GLdouble[] v)

        public static
        void glVertexAttrib4dv(GLuint index, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib4dv_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib4fv(GLuint index, IntPtr v)

        public static
        void glVertexAttrib4fv(GLuint index, IntPtr v)
        {
            glVertexAttrib4fv_(index, v);
        }

        #endregion

        #region glVertexAttrib4fv(GLuint index, object v)

        public static
        void glVertexAttrib4fv(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib4fv_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib4fv(GLuint index, GLfloat[] v)

        public static
        void glVertexAttrib4fv(GLuint index, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib4fv_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib4iv(GLuint index, IntPtr v)

        public static
        void glVertexAttrib4iv(GLuint index, IntPtr v)
        {
            glVertexAttrib4iv_(index, v);
        }

        #endregion

        #region glVertexAttrib4iv(GLuint index, object v)

        public static
        void glVertexAttrib4iv(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib4iv_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib4iv(GLuint index, GLint[] v)

        public static
        void glVertexAttrib4iv(GLuint index, GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib4iv_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib4sv(GLuint index, IntPtr v)

        public static
        void glVertexAttrib4sv(GLuint index, IntPtr v)
        {
            glVertexAttrib4sv_(index, v);
        }

        #endregion

        #region glVertexAttrib4sv(GLuint index, object v)

        public static
        void glVertexAttrib4sv(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib4sv_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib4sv(GLuint index, GLshort[] v)

        public static
        void glVertexAttrib4sv(GLuint index, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib4sv_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib4ubv(GLuint index, IntPtr v)

        public static
        void glVertexAttrib4ubv(GLuint index, IntPtr v)
        {
            glVertexAttrib4ubv_(index, v);
        }

        #endregion

        #region glVertexAttrib4ubv(GLuint index, object v)

        public static
        void glVertexAttrib4ubv(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib4ubv_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib4ubv(GLuint index, GLubyte[] v)

        public static
        void glVertexAttrib4ubv(GLuint index, GLubyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib4ubv_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib4uiv(GLuint index, IntPtr v)

        public static
        void glVertexAttrib4uiv(GLuint index, IntPtr v)
        {
            glVertexAttrib4uiv_(index, v);
        }

        #endregion

        #region glVertexAttrib4uiv(GLuint index, object v)

        public static
        void glVertexAttrib4uiv(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib4uiv_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib4uiv(GLuint index, GLuint[] v)

        public static
        void glVertexAttrib4uiv(GLuint index, GLuint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib4uiv_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib4usv(GLuint index, IntPtr v)

        public static
        void glVertexAttrib4usv(GLuint index, IntPtr v)
        {
            glVertexAttrib4usv_(index, v);
        }

        #endregion

        #region glVertexAttrib4usv(GLuint index, object v)

        public static
        void glVertexAttrib4usv(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib4usv_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib4usv(GLuint index, GLushort[] v)

        public static
        void glVertexAttrib4usv(GLuint index, GLushort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib4usv_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, IntPtr pointer)

        public static
        void glVertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, IntPtr pointer)
        {
            glVertexAttribPointer_(index, size, type, normalized, stride, pointer);
        }

        #endregion

        #region glVertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, object pointer)

        public static
        void glVertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                glVertexAttribPointer_(index, size, type, normalized, stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glUniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, IntPtr value)

        public static
        void glUniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, IntPtr value)
        {
            glUniformMatrix2x3fv_(location, count, transpose, value);
        }

        #endregion

        #region glUniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, object value)

        public static
        void glUniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, object value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                glUniformMatrix2x3fv_(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glUniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, GLfloat[] value)

        public static
        void glUniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                glUniformMatrix2x3fv_(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glUniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, IntPtr value)

        public static
        void glUniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, IntPtr value)
        {
            glUniformMatrix3x2fv_(location, count, transpose, value);
        }

        #endregion

        #region glUniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, object value)

        public static
        void glUniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, object value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                glUniformMatrix3x2fv_(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glUniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, GLfloat[] value)

        public static
        void glUniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                glUniformMatrix3x2fv_(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glUniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, IntPtr value)

        public static
        void glUniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, IntPtr value)
        {
            glUniformMatrix2x4fv_(location, count, transpose, value);
        }

        #endregion

        #region glUniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, object value)

        public static
        void glUniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, object value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                glUniformMatrix2x4fv_(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glUniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, GLfloat[] value)

        public static
        void glUniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                glUniformMatrix2x4fv_(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glUniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, IntPtr value)

        public static
        void glUniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, IntPtr value)
        {
            glUniformMatrix4x2fv_(location, count, transpose, value);
        }

        #endregion

        #region glUniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, object value)

        public static
        void glUniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, object value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                glUniformMatrix4x2fv_(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glUniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, GLfloat[] value)

        public static
        void glUniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                glUniformMatrix4x2fv_(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glUniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, IntPtr value)

        public static
        void glUniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, IntPtr value)
        {
            glUniformMatrix3x4fv_(location, count, transpose, value);
        }

        #endregion

        #region glUniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, object value)

        public static
        void glUniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, object value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                glUniformMatrix3x4fv_(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glUniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, GLfloat[] value)

        public static
        void glUniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                glUniformMatrix3x4fv_(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glUniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, IntPtr value)

        public static
        void glUniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, IntPtr value)
        {
            glUniformMatrix4x3fv_(location, count, transpose, value);
        }

        #endregion

        #region glUniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, object value)

        public static
        void glUniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, object value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                glUniformMatrix4x3fv_(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glUniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, GLfloat[] value)

        public static
        void glUniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                glUniformMatrix4x3fv_(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiTexCoord1dvARB(GLenum target, IntPtr v)

        public static
        void glMultiTexCoord1dvARB(GLenum target, IntPtr v)
        {
            glMultiTexCoord1dvARB_(target, v);
        }

        #endregion

        #region glMultiTexCoord1dvARB(GLenum target, object v)

        public static
        void glMultiTexCoord1dvARB(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glMultiTexCoord1dvARB_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiTexCoord1dvARB(GLenum target, GLdouble[] v)

        public static
        void glMultiTexCoord1dvARB(GLenum target, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glMultiTexCoord1dvARB_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiTexCoord1fvARB(GLenum target, IntPtr v)

        public static
        void glMultiTexCoord1fvARB(GLenum target, IntPtr v)
        {
            glMultiTexCoord1fvARB_(target, v);
        }

        #endregion

        #region glMultiTexCoord1fvARB(GLenum target, object v)

        public static
        void glMultiTexCoord1fvARB(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glMultiTexCoord1fvARB_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiTexCoord1fvARB(GLenum target, GLfloat[] v)

        public static
        void glMultiTexCoord1fvARB(GLenum target, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glMultiTexCoord1fvARB_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiTexCoord1ivARB(GLenum target, IntPtr v)

        public static
        void glMultiTexCoord1ivARB(GLenum target, IntPtr v)
        {
            glMultiTexCoord1ivARB_(target, v);
        }

        #endregion

        #region glMultiTexCoord1ivARB(GLenum target, object v)

        public static
        void glMultiTexCoord1ivARB(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glMultiTexCoord1ivARB_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiTexCoord1ivARB(GLenum target, GLint[] v)

        public static
        void glMultiTexCoord1ivARB(GLenum target, GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glMultiTexCoord1ivARB_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiTexCoord1svARB(GLenum target, IntPtr v)

        public static
        void glMultiTexCoord1svARB(GLenum target, IntPtr v)
        {
            glMultiTexCoord1svARB_(target, v);
        }

        #endregion

        #region glMultiTexCoord1svARB(GLenum target, object v)

        public static
        void glMultiTexCoord1svARB(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glMultiTexCoord1svARB_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiTexCoord1svARB(GLenum target, GLshort[] v)

        public static
        void glMultiTexCoord1svARB(GLenum target, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glMultiTexCoord1svARB_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiTexCoord2dvARB(GLenum target, IntPtr v)

        public static
        void glMultiTexCoord2dvARB(GLenum target, IntPtr v)
        {
            glMultiTexCoord2dvARB_(target, v);
        }

        #endregion

        #region glMultiTexCoord2dvARB(GLenum target, object v)

        public static
        void glMultiTexCoord2dvARB(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glMultiTexCoord2dvARB_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiTexCoord2dvARB(GLenum target, GLdouble[] v)

        public static
        void glMultiTexCoord2dvARB(GLenum target, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glMultiTexCoord2dvARB_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiTexCoord2fvARB(GLenum target, IntPtr v)

        public static
        void glMultiTexCoord2fvARB(GLenum target, IntPtr v)
        {
            glMultiTexCoord2fvARB_(target, v);
        }

        #endregion

        #region glMultiTexCoord2fvARB(GLenum target, object v)

        public static
        void glMultiTexCoord2fvARB(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glMultiTexCoord2fvARB_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiTexCoord2fvARB(GLenum target, GLfloat[] v)

        public static
        void glMultiTexCoord2fvARB(GLenum target, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glMultiTexCoord2fvARB_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiTexCoord2ivARB(GLenum target, IntPtr v)

        public static
        void glMultiTexCoord2ivARB(GLenum target, IntPtr v)
        {
            glMultiTexCoord2ivARB_(target, v);
        }

        #endregion

        #region glMultiTexCoord2ivARB(GLenum target, object v)

        public static
        void glMultiTexCoord2ivARB(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glMultiTexCoord2ivARB_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiTexCoord2ivARB(GLenum target, GLint[] v)

        public static
        void glMultiTexCoord2ivARB(GLenum target, GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glMultiTexCoord2ivARB_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiTexCoord2svARB(GLenum target, IntPtr v)

        public static
        void glMultiTexCoord2svARB(GLenum target, IntPtr v)
        {
            glMultiTexCoord2svARB_(target, v);
        }

        #endregion

        #region glMultiTexCoord2svARB(GLenum target, object v)

        public static
        void glMultiTexCoord2svARB(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glMultiTexCoord2svARB_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiTexCoord2svARB(GLenum target, GLshort[] v)

        public static
        void glMultiTexCoord2svARB(GLenum target, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glMultiTexCoord2svARB_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiTexCoord3dvARB(GLenum target, IntPtr v)

        public static
        void glMultiTexCoord3dvARB(GLenum target, IntPtr v)
        {
            glMultiTexCoord3dvARB_(target, v);
        }

        #endregion

        #region glMultiTexCoord3dvARB(GLenum target, object v)

        public static
        void glMultiTexCoord3dvARB(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glMultiTexCoord3dvARB_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiTexCoord3dvARB(GLenum target, GLdouble[] v)

        public static
        void glMultiTexCoord3dvARB(GLenum target, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glMultiTexCoord3dvARB_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiTexCoord3fvARB(GLenum target, IntPtr v)

        public static
        void glMultiTexCoord3fvARB(GLenum target, IntPtr v)
        {
            glMultiTexCoord3fvARB_(target, v);
        }

        #endregion

        #region glMultiTexCoord3fvARB(GLenum target, object v)

        public static
        void glMultiTexCoord3fvARB(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glMultiTexCoord3fvARB_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiTexCoord3fvARB(GLenum target, GLfloat[] v)

        public static
        void glMultiTexCoord3fvARB(GLenum target, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glMultiTexCoord3fvARB_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiTexCoord3ivARB(GLenum target, IntPtr v)

        public static
        void glMultiTexCoord3ivARB(GLenum target, IntPtr v)
        {
            glMultiTexCoord3ivARB_(target, v);
        }

        #endregion

        #region glMultiTexCoord3ivARB(GLenum target, object v)

        public static
        void glMultiTexCoord3ivARB(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glMultiTexCoord3ivARB_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiTexCoord3ivARB(GLenum target, GLint[] v)

        public static
        void glMultiTexCoord3ivARB(GLenum target, GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glMultiTexCoord3ivARB_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiTexCoord3svARB(GLenum target, IntPtr v)

        public static
        void glMultiTexCoord3svARB(GLenum target, IntPtr v)
        {
            glMultiTexCoord3svARB_(target, v);
        }

        #endregion

        #region glMultiTexCoord3svARB(GLenum target, object v)

        public static
        void glMultiTexCoord3svARB(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glMultiTexCoord3svARB_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiTexCoord3svARB(GLenum target, GLshort[] v)

        public static
        void glMultiTexCoord3svARB(GLenum target, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glMultiTexCoord3svARB_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiTexCoord4dvARB(GLenum target, IntPtr v)

        public static
        void glMultiTexCoord4dvARB(GLenum target, IntPtr v)
        {
            glMultiTexCoord4dvARB_(target, v);
        }

        #endregion

        #region glMultiTexCoord4dvARB(GLenum target, object v)

        public static
        void glMultiTexCoord4dvARB(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glMultiTexCoord4dvARB_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiTexCoord4dvARB(GLenum target, GLdouble[] v)

        public static
        void glMultiTexCoord4dvARB(GLenum target, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glMultiTexCoord4dvARB_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiTexCoord4fvARB(GLenum target, IntPtr v)

        public static
        void glMultiTexCoord4fvARB(GLenum target, IntPtr v)
        {
            glMultiTexCoord4fvARB_(target, v);
        }

        #endregion

        #region glMultiTexCoord4fvARB(GLenum target, object v)

        public static
        void glMultiTexCoord4fvARB(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glMultiTexCoord4fvARB_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiTexCoord4fvARB(GLenum target, GLfloat[] v)

        public static
        void glMultiTexCoord4fvARB(GLenum target, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glMultiTexCoord4fvARB_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiTexCoord4ivARB(GLenum target, IntPtr v)

        public static
        void glMultiTexCoord4ivARB(GLenum target, IntPtr v)
        {
            glMultiTexCoord4ivARB_(target, v);
        }

        #endregion

        #region glMultiTexCoord4ivARB(GLenum target, object v)

        public static
        void glMultiTexCoord4ivARB(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glMultiTexCoord4ivARB_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiTexCoord4ivARB(GLenum target, GLint[] v)

        public static
        void glMultiTexCoord4ivARB(GLenum target, GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glMultiTexCoord4ivARB_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiTexCoord4svARB(GLenum target, IntPtr v)

        public static
        void glMultiTexCoord4svARB(GLenum target, IntPtr v)
        {
            glMultiTexCoord4svARB_(target, v);
        }

        #endregion

        #region glMultiTexCoord4svARB(GLenum target, object v)

        public static
        void glMultiTexCoord4svARB(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glMultiTexCoord4svARB_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiTexCoord4svARB(GLenum target, GLshort[] v)

        public static
        void glMultiTexCoord4svARB(GLenum target, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glMultiTexCoord4svARB_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glLoadTransposeMatrixfARB(IntPtr m)

        public static
        void glLoadTransposeMatrixfARB(IntPtr m)
        {
            glLoadTransposeMatrixfARB_(m);
        }

        #endregion

        #region glLoadTransposeMatrixfARB(object m)

        public static
        void glLoadTransposeMatrixfARB(object m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                glLoadTransposeMatrixfARB_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glLoadTransposeMatrixfARB(GLfloat[] m)

        public static
        void glLoadTransposeMatrixfARB(GLfloat[] m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                glLoadTransposeMatrixfARB_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glLoadTransposeMatrixdARB(IntPtr m)

        public static
        void glLoadTransposeMatrixdARB(IntPtr m)
        {
            glLoadTransposeMatrixdARB_(m);
        }

        #endregion

        #region glLoadTransposeMatrixdARB(object m)

        public static
        void glLoadTransposeMatrixdARB(object m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                glLoadTransposeMatrixdARB_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glLoadTransposeMatrixdARB(GLdouble[] m)

        public static
        void glLoadTransposeMatrixdARB(GLdouble[] m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                glLoadTransposeMatrixdARB_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultTransposeMatrixfARB(IntPtr m)

        public static
        void glMultTransposeMatrixfARB(IntPtr m)
        {
            glMultTransposeMatrixfARB_(m);
        }

        #endregion

        #region glMultTransposeMatrixfARB(object m)

        public static
        void glMultTransposeMatrixfARB(object m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                glMultTransposeMatrixfARB_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultTransposeMatrixfARB(GLfloat[] m)

        public static
        void glMultTransposeMatrixfARB(GLfloat[] m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                glMultTransposeMatrixfARB_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultTransposeMatrixdARB(IntPtr m)

        public static
        void glMultTransposeMatrixdARB(IntPtr m)
        {
            glMultTransposeMatrixdARB_(m);
        }

        #endregion

        #region glMultTransposeMatrixdARB(object m)

        public static
        void glMultTransposeMatrixdARB(object m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                glMultTransposeMatrixdARB_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultTransposeMatrixdARB(GLdouble[] m)

        public static
        void glMultTransposeMatrixdARB(GLdouble[] m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                glMultTransposeMatrixdARB_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glCompressedTexImage3DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, IntPtr data)

        public static
        void glCompressedTexImage3DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, IntPtr data)
        {
            glCompressedTexImage3DARB_(target, level, internalformat, width, height, depth, border, imageSize, data);
        }

        #endregion

        #region glCompressedTexImage3DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, object data)

        public static
        void glCompressedTexImage3DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                glCompressedTexImage3DARB_(target, level, internalformat, width, height, depth, border, imageSize, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glCompressedTexImage2DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, IntPtr data)

        public static
        void glCompressedTexImage2DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, IntPtr data)
        {
            glCompressedTexImage2DARB_(target, level, internalformat, width, height, border, imageSize, data);
        }

        #endregion

        #region glCompressedTexImage2DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, object data)

        public static
        void glCompressedTexImage2DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                glCompressedTexImage2DARB_(target, level, internalformat, width, height, border, imageSize, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glCompressedTexImage1DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, IntPtr data)

        public static
        void glCompressedTexImage1DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, IntPtr data)
        {
            glCompressedTexImage1DARB_(target, level, internalformat, width, border, imageSize, data);
        }

        #endregion

        #region glCompressedTexImage1DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, object data)

        public static
        void glCompressedTexImage1DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                glCompressedTexImage1DARB_(target, level, internalformat, width, border, imageSize, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glCompressedTexSubImage3DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, IntPtr data)

        public static
        void glCompressedTexSubImage3DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, IntPtr data)
        {
            glCompressedTexSubImage3DARB_(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
        }

        #endregion

        #region glCompressedTexSubImage3DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, object data)

        public static
        void glCompressedTexSubImage3DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                glCompressedTexSubImage3DARB_(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glCompressedTexSubImage2DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, IntPtr data)

        public static
        void glCompressedTexSubImage2DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, IntPtr data)
        {
            glCompressedTexSubImage2DARB_(target, level, xoffset, yoffset, width, height, format, imageSize, data);
        }

        #endregion

        #region glCompressedTexSubImage2DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, object data)

        public static
        void glCompressedTexSubImage2DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                glCompressedTexSubImage2DARB_(target, level, xoffset, yoffset, width, height, format, imageSize, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glCompressedTexSubImage1DARB(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, IntPtr data)

        public static
        void glCompressedTexSubImage1DARB(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, IntPtr data)
        {
            glCompressedTexSubImage1DARB_(target, level, xoffset, width, format, imageSize, data);
        }

        #endregion

        #region glCompressedTexSubImage1DARB(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, object data)

        public static
        void glCompressedTexSubImage1DARB(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                glCompressedTexSubImage1DARB_(target, level, xoffset, width, format, imageSize, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetCompressedTexImageARB(GLenum target, GLint level, IntPtr img)

        public static
        void glGetCompressedTexImageARB(GLenum target, GLint level, IntPtr img)
        {
            glGetCompressedTexImageARB_(target, level, img);
        }

        #endregion

        #region glGetCompressedTexImageARB(GLenum target, GLint level, object img)

        public static
        void glGetCompressedTexImageARB(GLenum target, GLint level, object img)
        {
            GCHandle h0 = GCHandle.Alloc(img, GCHandleType.Pinned);
            try
            {
                glGetCompressedTexImageARB_(target, level, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glPointParameterfvARB(GLenum pname, IntPtr parameters)

        public static
        void glPointParameterfvARB(GLenum pname, IntPtr parameters)
        {
            glPointParameterfvARB_(pname, parameters);
        }

        #endregion

        #region glPointParameterfvARB(GLenum pname, object parameters)

        public static
        void glPointParameterfvARB(GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glPointParameterfvARB_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glPointParameterfvARB(GLenum pname, GLfloat[] parameters)

        public static
        void glPointParameterfvARB(GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glPointParameterfvARB_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glWeightbvARB(GLint size, IntPtr weights)

        public static
        void glWeightbvARB(GLint size, IntPtr weights)
        {
            glWeightbvARB_(size, weights);
        }

        #endregion

        #region glWeightbvARB(GLint size, object weights)

        public static
        void glWeightbvARB(GLint size, object weights)
        {
            GCHandle h0 = GCHandle.Alloc(weights, GCHandleType.Pinned);
            try
            {
                glWeightbvARB_(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glWeightbvARB(GLint size, GLbyte[] weights)

        public static
        void glWeightbvARB(GLint size, GLbyte[] weights)
        {
            GCHandle h0 = GCHandle.Alloc(weights, GCHandleType.Pinned);
            try
            {
                glWeightbvARB_(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glWeightsvARB(GLint size, IntPtr weights)

        public static
        void glWeightsvARB(GLint size, IntPtr weights)
        {
            glWeightsvARB_(size, weights);
        }

        #endregion

        #region glWeightsvARB(GLint size, object weights)

        public static
        void glWeightsvARB(GLint size, object weights)
        {
            GCHandle h0 = GCHandle.Alloc(weights, GCHandleType.Pinned);
            try
            {
                glWeightsvARB_(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glWeightsvARB(GLint size, GLshort[] weights)

        public static
        void glWeightsvARB(GLint size, GLshort[] weights)
        {
            GCHandle h0 = GCHandle.Alloc(weights, GCHandleType.Pinned);
            try
            {
                glWeightsvARB_(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glWeightivARB(GLint size, IntPtr weights)

        public static
        void glWeightivARB(GLint size, IntPtr weights)
        {
            glWeightivARB_(size, weights);
        }

        #endregion

        #region glWeightivARB(GLint size, object weights)

        public static
        void glWeightivARB(GLint size, object weights)
        {
            GCHandle h0 = GCHandle.Alloc(weights, GCHandleType.Pinned);
            try
            {
                glWeightivARB_(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glWeightivARB(GLint size, GLint[] weights)

        public static
        void glWeightivARB(GLint size, GLint[] weights)
        {
            GCHandle h0 = GCHandle.Alloc(weights, GCHandleType.Pinned);
            try
            {
                glWeightivARB_(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glWeightfvARB(GLint size, IntPtr weights)

        public static
        void glWeightfvARB(GLint size, IntPtr weights)
        {
            glWeightfvARB_(size, weights);
        }

        #endregion

        #region glWeightfvARB(GLint size, object weights)

        public static
        void glWeightfvARB(GLint size, object weights)
        {
            GCHandle h0 = GCHandle.Alloc(weights, GCHandleType.Pinned);
            try
            {
                glWeightfvARB_(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glWeightfvARB(GLint size, GLfloat[] weights)

        public static
        void glWeightfvARB(GLint size, GLfloat[] weights)
        {
            GCHandle h0 = GCHandle.Alloc(weights, GCHandleType.Pinned);
            try
            {
                glWeightfvARB_(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glWeightdvARB(GLint size, IntPtr weights)

        public static
        void glWeightdvARB(GLint size, IntPtr weights)
        {
            glWeightdvARB_(size, weights);
        }

        #endregion

        #region glWeightdvARB(GLint size, object weights)

        public static
        void glWeightdvARB(GLint size, object weights)
        {
            GCHandle h0 = GCHandle.Alloc(weights, GCHandleType.Pinned);
            try
            {
                glWeightdvARB_(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glWeightdvARB(GLint size, GLdouble[] weights)

        public static
        void glWeightdvARB(GLint size, GLdouble[] weights)
        {
            GCHandle h0 = GCHandle.Alloc(weights, GCHandleType.Pinned);
            try
            {
                glWeightdvARB_(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glWeightubvARB(GLint size, IntPtr weights)

        public static
        void glWeightubvARB(GLint size, IntPtr weights)
        {
            glWeightubvARB_(size, weights);
        }

        #endregion

        #region glWeightubvARB(GLint size, object weights)

        public static
        void glWeightubvARB(GLint size, object weights)
        {
            GCHandle h0 = GCHandle.Alloc(weights, GCHandleType.Pinned);
            try
            {
                glWeightubvARB_(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glWeightubvARB(GLint size, GLubyte[] weights)

        public static
        void glWeightubvARB(GLint size, GLubyte[] weights)
        {
            GCHandle h0 = GCHandle.Alloc(weights, GCHandleType.Pinned);
            try
            {
                glWeightubvARB_(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glWeightusvARB(GLint size, IntPtr weights)

        public static
        void glWeightusvARB(GLint size, IntPtr weights)
        {
            glWeightusvARB_(size, weights);
        }

        #endregion

        #region glWeightusvARB(GLint size, object weights)

        public static
        void glWeightusvARB(GLint size, object weights)
        {
            GCHandle h0 = GCHandle.Alloc(weights, GCHandleType.Pinned);
            try
            {
                glWeightusvARB_(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glWeightusvARB(GLint size, GLushort[] weights)

        public static
        void glWeightusvARB(GLint size, GLushort[] weights)
        {
            GCHandle h0 = GCHandle.Alloc(weights, GCHandleType.Pinned);
            try
            {
                glWeightusvARB_(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glWeightuivARB(GLint size, IntPtr weights)

        public static
        void glWeightuivARB(GLint size, IntPtr weights)
        {
            glWeightuivARB_(size, weights);
        }

        #endregion

        #region glWeightuivARB(GLint size, object weights)

        public static
        void glWeightuivARB(GLint size, object weights)
        {
            GCHandle h0 = GCHandle.Alloc(weights, GCHandleType.Pinned);
            try
            {
                glWeightuivARB_(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glWeightuivARB(GLint size, GLuint[] weights)

        public static
        void glWeightuivARB(GLint size, GLuint[] weights)
        {
            GCHandle h0 = GCHandle.Alloc(weights, GCHandleType.Pinned);
            try
            {
                glWeightuivARB_(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glWeightPointerARB(GLint size, GLenum type, GLsizei stride, IntPtr pointer)

        public static
        void glWeightPointerARB(GLint size, GLenum type, GLsizei stride, IntPtr pointer)
        {
            glWeightPointerARB_(size, type, stride, pointer);
        }

        #endregion

        #region glWeightPointerARB(GLint size, GLenum type, GLsizei stride, object pointer)

        public static
        void glWeightPointerARB(GLint size, GLenum type, GLsizei stride, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                glWeightPointerARB_(size, type, stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMatrixIndexubvARB(GLint size, IntPtr indices)

        public static
        void glMatrixIndexubvARB(GLint size, IntPtr indices)
        {
            glMatrixIndexubvARB_(size, indices);
        }

        #endregion

        #region glMatrixIndexubvARB(GLint size, object indices)

        public static
        void glMatrixIndexubvARB(GLint size, object indices)
        {
            GCHandle h0 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                glMatrixIndexubvARB_(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMatrixIndexubvARB(GLint size, GLubyte[] indices)

        public static
        void glMatrixIndexubvARB(GLint size, GLubyte[] indices)
        {
            GCHandle h0 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                glMatrixIndexubvARB_(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMatrixIndexusvARB(GLint size, IntPtr indices)

        public static
        void glMatrixIndexusvARB(GLint size, IntPtr indices)
        {
            glMatrixIndexusvARB_(size, indices);
        }

        #endregion

        #region glMatrixIndexusvARB(GLint size, object indices)

        public static
        void glMatrixIndexusvARB(GLint size, object indices)
        {
            GCHandle h0 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                glMatrixIndexusvARB_(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMatrixIndexusvARB(GLint size, GLushort[] indices)

        public static
        void glMatrixIndexusvARB(GLint size, GLushort[] indices)
        {
            GCHandle h0 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                glMatrixIndexusvARB_(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMatrixIndexuivARB(GLint size, IntPtr indices)

        public static
        void glMatrixIndexuivARB(GLint size, IntPtr indices)
        {
            glMatrixIndexuivARB_(size, indices);
        }

        #endregion

        #region glMatrixIndexuivARB(GLint size, object indices)

        public static
        void glMatrixIndexuivARB(GLint size, object indices)
        {
            GCHandle h0 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                glMatrixIndexuivARB_(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMatrixIndexuivARB(GLint size, GLuint[] indices)

        public static
        void glMatrixIndexuivARB(GLint size, GLuint[] indices)
        {
            GCHandle h0 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                glMatrixIndexuivARB_(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMatrixIndexPointerARB(GLint size, GLenum type, GLsizei stride, IntPtr pointer)

        public static
        void glMatrixIndexPointerARB(GLint size, GLenum type, GLsizei stride, IntPtr pointer)
        {
            glMatrixIndexPointerARB_(size, type, stride, pointer);
        }

        #endregion

        #region glMatrixIndexPointerARB(GLint size, GLenum type, GLsizei stride, object pointer)

        public static
        void glMatrixIndexPointerARB(GLint size, GLenum type, GLsizei stride, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                glMatrixIndexPointerARB_(size, type, stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glWindowPos2dvARB(IntPtr v)

        public static
        void glWindowPos2dvARB(IntPtr v)
        {
            glWindowPos2dvARB_(v);
        }

        #endregion

        #region glWindowPos2dvARB(object v)

        public static
        void glWindowPos2dvARB(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glWindowPos2dvARB_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glWindowPos2dvARB(GLdouble[] v)

        public static
        void glWindowPos2dvARB(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glWindowPos2dvARB_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glWindowPos2fvARB(IntPtr v)

        public static
        void glWindowPos2fvARB(IntPtr v)
        {
            glWindowPos2fvARB_(v);
        }

        #endregion

        #region glWindowPos2fvARB(object v)

        public static
        void glWindowPos2fvARB(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glWindowPos2fvARB_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glWindowPos2fvARB(GLfloat[] v)

        public static
        void glWindowPos2fvARB(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glWindowPos2fvARB_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glWindowPos2ivARB(IntPtr v)

        public static
        void glWindowPos2ivARB(IntPtr v)
        {
            glWindowPos2ivARB_(v);
        }

        #endregion

        #region glWindowPos2ivARB(object v)

        public static
        void glWindowPos2ivARB(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glWindowPos2ivARB_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glWindowPos2ivARB(GLint[] v)

        public static
        void glWindowPos2ivARB(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glWindowPos2ivARB_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glWindowPos2svARB(IntPtr v)

        public static
        void glWindowPos2svARB(IntPtr v)
        {
            glWindowPos2svARB_(v);
        }

        #endregion

        #region glWindowPos2svARB(object v)

        public static
        void glWindowPos2svARB(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glWindowPos2svARB_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glWindowPos2svARB(GLshort[] v)

        public static
        void glWindowPos2svARB(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glWindowPos2svARB_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glWindowPos3dvARB(IntPtr v)

        public static
        void glWindowPos3dvARB(IntPtr v)
        {
            glWindowPos3dvARB_(v);
        }

        #endregion

        #region glWindowPos3dvARB(object v)

        public static
        void glWindowPos3dvARB(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glWindowPos3dvARB_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glWindowPos3dvARB(GLdouble[] v)

        public static
        void glWindowPos3dvARB(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glWindowPos3dvARB_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glWindowPos3fvARB(IntPtr v)

        public static
        void glWindowPos3fvARB(IntPtr v)
        {
            glWindowPos3fvARB_(v);
        }

        #endregion

        #region glWindowPos3fvARB(object v)

        public static
        void glWindowPos3fvARB(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glWindowPos3fvARB_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glWindowPos3fvARB(GLfloat[] v)

        public static
        void glWindowPos3fvARB(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glWindowPos3fvARB_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glWindowPos3ivARB(IntPtr v)

        public static
        void glWindowPos3ivARB(IntPtr v)
        {
            glWindowPos3ivARB_(v);
        }

        #endregion

        #region glWindowPos3ivARB(object v)

        public static
        void glWindowPos3ivARB(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glWindowPos3ivARB_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glWindowPos3ivARB(GLint[] v)

        public static
        void glWindowPos3ivARB(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glWindowPos3ivARB_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glWindowPos3svARB(IntPtr v)

        public static
        void glWindowPos3svARB(IntPtr v)
        {
            glWindowPos3svARB_(v);
        }

        #endregion

        #region glWindowPos3svARB(object v)

        public static
        void glWindowPos3svARB(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glWindowPos3svARB_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glWindowPos3svARB(GLshort[] v)

        public static
        void glWindowPos3svARB(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glWindowPos3svARB_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib1dvARB(GLuint index, IntPtr v)

        public static
        void glVertexAttrib1dvARB(GLuint index, IntPtr v)
        {
            glVertexAttrib1dvARB_(index, v);
        }

        #endregion

        #region glVertexAttrib1dvARB(GLuint index, object v)

        public static
        void glVertexAttrib1dvARB(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib1dvARB_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib1dvARB(GLuint index, GLdouble[] v)

        public static
        void glVertexAttrib1dvARB(GLuint index, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib1dvARB_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib1fvARB(GLuint index, IntPtr v)

        public static
        void glVertexAttrib1fvARB(GLuint index, IntPtr v)
        {
            glVertexAttrib1fvARB_(index, v);
        }

        #endregion

        #region glVertexAttrib1fvARB(GLuint index, object v)

        public static
        void glVertexAttrib1fvARB(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib1fvARB_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib1fvARB(GLuint index, GLfloat[] v)

        public static
        void glVertexAttrib1fvARB(GLuint index, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib1fvARB_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib1svARB(GLuint index, IntPtr v)

        public static
        void glVertexAttrib1svARB(GLuint index, IntPtr v)
        {
            glVertexAttrib1svARB_(index, v);
        }

        #endregion

        #region glVertexAttrib1svARB(GLuint index, object v)

        public static
        void glVertexAttrib1svARB(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib1svARB_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib1svARB(GLuint index, GLshort[] v)

        public static
        void glVertexAttrib1svARB(GLuint index, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib1svARB_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib2dvARB(GLuint index, IntPtr v)

        public static
        void glVertexAttrib2dvARB(GLuint index, IntPtr v)
        {
            glVertexAttrib2dvARB_(index, v);
        }

        #endregion

        #region glVertexAttrib2dvARB(GLuint index, object v)

        public static
        void glVertexAttrib2dvARB(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib2dvARB_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib2dvARB(GLuint index, GLdouble[] v)

        public static
        void glVertexAttrib2dvARB(GLuint index, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib2dvARB_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib2fvARB(GLuint index, IntPtr v)

        public static
        void glVertexAttrib2fvARB(GLuint index, IntPtr v)
        {
            glVertexAttrib2fvARB_(index, v);
        }

        #endregion

        #region glVertexAttrib2fvARB(GLuint index, object v)

        public static
        void glVertexAttrib2fvARB(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib2fvARB_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib2fvARB(GLuint index, GLfloat[] v)

        public static
        void glVertexAttrib2fvARB(GLuint index, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib2fvARB_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib2svARB(GLuint index, IntPtr v)

        public static
        void glVertexAttrib2svARB(GLuint index, IntPtr v)
        {
            glVertexAttrib2svARB_(index, v);
        }

        #endregion

        #region glVertexAttrib2svARB(GLuint index, object v)

        public static
        void glVertexAttrib2svARB(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib2svARB_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib2svARB(GLuint index, GLshort[] v)

        public static
        void glVertexAttrib2svARB(GLuint index, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib2svARB_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib3dvARB(GLuint index, IntPtr v)

        public static
        void glVertexAttrib3dvARB(GLuint index, IntPtr v)
        {
            glVertexAttrib3dvARB_(index, v);
        }

        #endregion

        #region glVertexAttrib3dvARB(GLuint index, object v)

        public static
        void glVertexAttrib3dvARB(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib3dvARB_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib3dvARB(GLuint index, GLdouble[] v)

        public static
        void glVertexAttrib3dvARB(GLuint index, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib3dvARB_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib3fvARB(GLuint index, IntPtr v)

        public static
        void glVertexAttrib3fvARB(GLuint index, IntPtr v)
        {
            glVertexAttrib3fvARB_(index, v);
        }

        #endregion

        #region glVertexAttrib3fvARB(GLuint index, object v)

        public static
        void glVertexAttrib3fvARB(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib3fvARB_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib3fvARB(GLuint index, GLfloat[] v)

        public static
        void glVertexAttrib3fvARB(GLuint index, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib3fvARB_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib3svARB(GLuint index, IntPtr v)

        public static
        void glVertexAttrib3svARB(GLuint index, IntPtr v)
        {
            glVertexAttrib3svARB_(index, v);
        }

        #endregion

        #region glVertexAttrib3svARB(GLuint index, object v)

        public static
        void glVertexAttrib3svARB(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib3svARB_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib3svARB(GLuint index, GLshort[] v)

        public static
        void glVertexAttrib3svARB(GLuint index, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib3svARB_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib4NbvARB(GLuint index, IntPtr v)

        public static
        void glVertexAttrib4NbvARB(GLuint index, IntPtr v)
        {
            glVertexAttrib4NbvARB_(index, v);
        }

        #endregion

        #region glVertexAttrib4NbvARB(GLuint index, object v)

        public static
        void glVertexAttrib4NbvARB(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib4NbvARB_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib4NbvARB(GLuint index, GLbyte[] v)

        public static
        void glVertexAttrib4NbvARB(GLuint index, GLbyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib4NbvARB_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib4NivARB(GLuint index, IntPtr v)

        public static
        void glVertexAttrib4NivARB(GLuint index, IntPtr v)
        {
            glVertexAttrib4NivARB_(index, v);
        }

        #endregion

        #region glVertexAttrib4NivARB(GLuint index, object v)

        public static
        void glVertexAttrib4NivARB(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib4NivARB_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib4NivARB(GLuint index, GLint[] v)

        public static
        void glVertexAttrib4NivARB(GLuint index, GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib4NivARB_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib4NsvARB(GLuint index, IntPtr v)

        public static
        void glVertexAttrib4NsvARB(GLuint index, IntPtr v)
        {
            glVertexAttrib4NsvARB_(index, v);
        }

        #endregion

        #region glVertexAttrib4NsvARB(GLuint index, object v)

        public static
        void glVertexAttrib4NsvARB(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib4NsvARB_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib4NsvARB(GLuint index, GLshort[] v)

        public static
        void glVertexAttrib4NsvARB(GLuint index, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib4NsvARB_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib4NubvARB(GLuint index, IntPtr v)

        public static
        void glVertexAttrib4NubvARB(GLuint index, IntPtr v)
        {
            glVertexAttrib4NubvARB_(index, v);
        }

        #endregion

        #region glVertexAttrib4NubvARB(GLuint index, object v)

        public static
        void glVertexAttrib4NubvARB(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib4NubvARB_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib4NubvARB(GLuint index, GLubyte[] v)

        public static
        void glVertexAttrib4NubvARB(GLuint index, GLubyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib4NubvARB_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib4NuivARB(GLuint index, IntPtr v)

        public static
        void glVertexAttrib4NuivARB(GLuint index, IntPtr v)
        {
            glVertexAttrib4NuivARB_(index, v);
        }

        #endregion

        #region glVertexAttrib4NuivARB(GLuint index, object v)

        public static
        void glVertexAttrib4NuivARB(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib4NuivARB_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib4NuivARB(GLuint index, GLuint[] v)

        public static
        void glVertexAttrib4NuivARB(GLuint index, GLuint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib4NuivARB_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib4NusvARB(GLuint index, IntPtr v)

        public static
        void glVertexAttrib4NusvARB(GLuint index, IntPtr v)
        {
            glVertexAttrib4NusvARB_(index, v);
        }

        #endregion

        #region glVertexAttrib4NusvARB(GLuint index, object v)

        public static
        void glVertexAttrib4NusvARB(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib4NusvARB_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib4NusvARB(GLuint index, GLushort[] v)

        public static
        void glVertexAttrib4NusvARB(GLuint index, GLushort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib4NusvARB_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib4bvARB(GLuint index, IntPtr v)

        public static
        void glVertexAttrib4bvARB(GLuint index, IntPtr v)
        {
            glVertexAttrib4bvARB_(index, v);
        }

        #endregion

        #region glVertexAttrib4bvARB(GLuint index, object v)

        public static
        void glVertexAttrib4bvARB(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib4bvARB_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib4bvARB(GLuint index, GLbyte[] v)

        public static
        void glVertexAttrib4bvARB(GLuint index, GLbyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib4bvARB_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib4dvARB(GLuint index, IntPtr v)

        public static
        void glVertexAttrib4dvARB(GLuint index, IntPtr v)
        {
            glVertexAttrib4dvARB_(index, v);
        }

        #endregion

        #region glVertexAttrib4dvARB(GLuint index, object v)

        public static
        void glVertexAttrib4dvARB(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib4dvARB_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib4dvARB(GLuint index, GLdouble[] v)

        public static
        void glVertexAttrib4dvARB(GLuint index, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib4dvARB_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib4fvARB(GLuint index, IntPtr v)

        public static
        void glVertexAttrib4fvARB(GLuint index, IntPtr v)
        {
            glVertexAttrib4fvARB_(index, v);
        }

        #endregion

        #region glVertexAttrib4fvARB(GLuint index, object v)

        public static
        void glVertexAttrib4fvARB(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib4fvARB_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib4fvARB(GLuint index, GLfloat[] v)

        public static
        void glVertexAttrib4fvARB(GLuint index, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib4fvARB_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib4ivARB(GLuint index, IntPtr v)

        public static
        void glVertexAttrib4ivARB(GLuint index, IntPtr v)
        {
            glVertexAttrib4ivARB_(index, v);
        }

        #endregion

        #region glVertexAttrib4ivARB(GLuint index, object v)

        public static
        void glVertexAttrib4ivARB(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib4ivARB_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib4ivARB(GLuint index, GLint[] v)

        public static
        void glVertexAttrib4ivARB(GLuint index, GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib4ivARB_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib4svARB(GLuint index, IntPtr v)

        public static
        void glVertexAttrib4svARB(GLuint index, IntPtr v)
        {
            glVertexAttrib4svARB_(index, v);
        }

        #endregion

        #region glVertexAttrib4svARB(GLuint index, object v)

        public static
        void glVertexAttrib4svARB(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib4svARB_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib4svARB(GLuint index, GLshort[] v)

        public static
        void glVertexAttrib4svARB(GLuint index, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib4svARB_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib4ubvARB(GLuint index, IntPtr v)

        public static
        void glVertexAttrib4ubvARB(GLuint index, IntPtr v)
        {
            glVertexAttrib4ubvARB_(index, v);
        }

        #endregion

        #region glVertexAttrib4ubvARB(GLuint index, object v)

        public static
        void glVertexAttrib4ubvARB(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib4ubvARB_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib4ubvARB(GLuint index, GLubyte[] v)

        public static
        void glVertexAttrib4ubvARB(GLuint index, GLubyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib4ubvARB_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib4uivARB(GLuint index, IntPtr v)

        public static
        void glVertexAttrib4uivARB(GLuint index, IntPtr v)
        {
            glVertexAttrib4uivARB_(index, v);
        }

        #endregion

        #region glVertexAttrib4uivARB(GLuint index, object v)

        public static
        void glVertexAttrib4uivARB(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib4uivARB_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib4uivARB(GLuint index, GLuint[] v)

        public static
        void glVertexAttrib4uivARB(GLuint index, GLuint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib4uivARB_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib4usvARB(GLuint index, IntPtr v)

        public static
        void glVertexAttrib4usvARB(GLuint index, IntPtr v)
        {
            glVertexAttrib4usvARB_(index, v);
        }

        #endregion

        #region glVertexAttrib4usvARB(GLuint index, object v)

        public static
        void glVertexAttrib4usvARB(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib4usvARB_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib4usvARB(GLuint index, GLushort[] v)

        public static
        void glVertexAttrib4usvARB(GLuint index, GLushort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib4usvARB_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttribPointerARB(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, IntPtr pointer)

        public static
        void glVertexAttribPointerARB(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, IntPtr pointer)
        {
            glVertexAttribPointerARB_(index, size, type, normalized, stride, pointer);
        }

        #endregion

        #region glVertexAttribPointerARB(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, object pointer)

        public static
        void glVertexAttribPointerARB(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                glVertexAttribPointerARB_(index, size, type, normalized, stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glProgramStringARB(GLenum target, GLenum format, GLsizei len, IntPtr @string)

        public static
        void glProgramStringARB(GLenum target, GLenum format, GLsizei len, IntPtr @string)
        {
            glProgramStringARB_(target, format, len, @string);
        }

        #endregion

        #region glProgramStringARB(GLenum target, GLenum format, GLsizei len, object @string)

        public static
        void glProgramStringARB(GLenum target, GLenum format, GLsizei len, object @string)
        {
            GCHandle h0 = GCHandle.Alloc(@string, GCHandleType.Pinned);
            try
            {
                glProgramStringARB_(target, format, len, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glDeleteProgramsARB(GLsizei n, IntPtr programs)

        public static
        void glDeleteProgramsARB(GLsizei n, IntPtr programs)
        {
            glDeleteProgramsARB_(n, programs);
        }

        #endregion

        #region glDeleteProgramsARB(GLsizei n, object programs)

        public static
        void glDeleteProgramsARB(GLsizei n, object programs)
        {
            GCHandle h0 = GCHandle.Alloc(programs, GCHandleType.Pinned);
            try
            {
                glDeleteProgramsARB_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glDeleteProgramsARB(GLsizei n, GLuint[] programs)

        public static
        void glDeleteProgramsARB(GLsizei n, GLuint[] programs)
        {
            GCHandle h0 = GCHandle.Alloc(programs, GCHandleType.Pinned);
            try
            {
                glDeleteProgramsARB_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGenProgramsARB(GLsizei n, IntPtr programs)

        public static
        void glGenProgramsARB(GLsizei n, IntPtr programs)
        {
            glGenProgramsARB_(n, programs);
        }

        #endregion

        #region glGenProgramsARB(GLsizei n, object programs)

        public static
        void glGenProgramsARB(GLsizei n, object programs)
        {
            GCHandle h0 = GCHandle.Alloc(programs, GCHandleType.Pinned);
            try
            {
                glGenProgramsARB_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGenProgramsARB(GLsizei n, GLuint[] programs)

        public static
        void glGenProgramsARB(GLsizei n, GLuint[] programs)
        {
            GCHandle h0 = GCHandle.Alloc(programs, GCHandleType.Pinned);
            try
            {
                glGenProgramsARB_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glProgramEnvParameter4dvARB(GLenum target, GLuint index, IntPtr parameters)

        public static
        void glProgramEnvParameter4dvARB(GLenum target, GLuint index, IntPtr parameters)
        {
            glProgramEnvParameter4dvARB_(target, index, parameters);
        }

        #endregion

        #region glProgramEnvParameter4dvARB(GLenum target, GLuint index, object parameters)

        public static
        void glProgramEnvParameter4dvARB(GLenum target, GLuint index, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glProgramEnvParameter4dvARB_(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glProgramEnvParameter4dvARB(GLenum target, GLuint index, GLdouble[] parameters)

        public static
        void glProgramEnvParameter4dvARB(GLenum target, GLuint index, GLdouble[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glProgramEnvParameter4dvARB_(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glProgramEnvParameter4fvARB(GLenum target, GLuint index, IntPtr parameters)

        public static
        void glProgramEnvParameter4fvARB(GLenum target, GLuint index, IntPtr parameters)
        {
            glProgramEnvParameter4fvARB_(target, index, parameters);
        }

        #endregion

        #region glProgramEnvParameter4fvARB(GLenum target, GLuint index, object parameters)

        public static
        void glProgramEnvParameter4fvARB(GLenum target, GLuint index, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glProgramEnvParameter4fvARB_(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glProgramEnvParameter4fvARB(GLenum target, GLuint index, GLfloat[] parameters)

        public static
        void glProgramEnvParameter4fvARB(GLenum target, GLuint index, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glProgramEnvParameter4fvARB_(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glProgramLocalParameter4dvARB(GLenum target, GLuint index, IntPtr parameters)

        public static
        void glProgramLocalParameter4dvARB(GLenum target, GLuint index, IntPtr parameters)
        {
            glProgramLocalParameter4dvARB_(target, index, parameters);
        }

        #endregion

        #region glProgramLocalParameter4dvARB(GLenum target, GLuint index, object parameters)

        public static
        void glProgramLocalParameter4dvARB(GLenum target, GLuint index, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glProgramLocalParameter4dvARB_(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glProgramLocalParameter4dvARB(GLenum target, GLuint index, GLdouble[] parameters)

        public static
        void glProgramLocalParameter4dvARB(GLenum target, GLuint index, GLdouble[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glProgramLocalParameter4dvARB_(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glProgramLocalParameter4fvARB(GLenum target, GLuint index, IntPtr parameters)

        public static
        void glProgramLocalParameter4fvARB(GLenum target, GLuint index, IntPtr parameters)
        {
            glProgramLocalParameter4fvARB_(target, index, parameters);
        }

        #endregion

        #region glProgramLocalParameter4fvARB(GLenum target, GLuint index, object parameters)

        public static
        void glProgramLocalParameter4fvARB(GLenum target, GLuint index, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glProgramLocalParameter4fvARB_(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glProgramLocalParameter4fvARB(GLenum target, GLuint index, GLfloat[] parameters)

        public static
        void glProgramLocalParameter4fvARB(GLenum target, GLuint index, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glProgramLocalParameter4fvARB_(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetProgramEnvParameterdvARB(GLenum target, GLuint index, IntPtr parameters)

        public static
        void glGetProgramEnvParameterdvARB(GLenum target, GLuint index, IntPtr parameters)
        {
            glGetProgramEnvParameterdvARB_(target, index, parameters);
        }

        #endregion

        #region glGetProgramEnvParameterdvARB(GLenum target, GLuint index, object parameters)

        public static
        void glGetProgramEnvParameterdvARB(GLenum target, GLuint index, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetProgramEnvParameterdvARB_(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetProgramEnvParameterdvARB(GLenum target, GLuint index, GLdouble[] parameters)

        public static
        void glGetProgramEnvParameterdvARB(GLenum target, GLuint index, GLdouble[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetProgramEnvParameterdvARB_(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetProgramEnvParameterfvARB(GLenum target, GLuint index, IntPtr parameters)

        public static
        void glGetProgramEnvParameterfvARB(GLenum target, GLuint index, IntPtr parameters)
        {
            glGetProgramEnvParameterfvARB_(target, index, parameters);
        }

        #endregion

        #region glGetProgramEnvParameterfvARB(GLenum target, GLuint index, object parameters)

        public static
        void glGetProgramEnvParameterfvARB(GLenum target, GLuint index, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetProgramEnvParameterfvARB_(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetProgramEnvParameterfvARB(GLenum target, GLuint index, GLfloat[] parameters)

        public static
        void glGetProgramEnvParameterfvARB(GLenum target, GLuint index, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetProgramEnvParameterfvARB_(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetProgramLocalParameterdvARB(GLenum target, GLuint index, IntPtr parameters)

        public static
        void glGetProgramLocalParameterdvARB(GLenum target, GLuint index, IntPtr parameters)
        {
            glGetProgramLocalParameterdvARB_(target, index, parameters);
        }

        #endregion

        #region glGetProgramLocalParameterdvARB(GLenum target, GLuint index, object parameters)

        public static
        void glGetProgramLocalParameterdvARB(GLenum target, GLuint index, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetProgramLocalParameterdvARB_(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetProgramLocalParameterdvARB(GLenum target, GLuint index, GLdouble[] parameters)

        public static
        void glGetProgramLocalParameterdvARB(GLenum target, GLuint index, GLdouble[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetProgramLocalParameterdvARB_(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetProgramLocalParameterfvARB(GLenum target, GLuint index, IntPtr parameters)

        public static
        void glGetProgramLocalParameterfvARB(GLenum target, GLuint index, IntPtr parameters)
        {
            glGetProgramLocalParameterfvARB_(target, index, parameters);
        }

        #endregion

        #region glGetProgramLocalParameterfvARB(GLenum target, GLuint index, object parameters)

        public static
        void glGetProgramLocalParameterfvARB(GLenum target, GLuint index, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetProgramLocalParameterfvARB_(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetProgramLocalParameterfvARB(GLenum target, GLuint index, GLfloat[] parameters)

        public static
        void glGetProgramLocalParameterfvARB(GLenum target, GLuint index, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetProgramLocalParameterfvARB_(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetProgramivARB(GLenum target, GLenum pname, IntPtr parameters)

        public static
        void glGetProgramivARB(GLenum target, GLenum pname, IntPtr parameters)
        {
            glGetProgramivARB_(target, pname, parameters);
        }

        #endregion

        #region glGetProgramivARB(GLenum target, GLenum pname, object parameters)

        public static
        void glGetProgramivARB(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetProgramivARB_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetProgramivARB(GLenum target, GLenum pname, GLint[] parameters)

        public static
        void glGetProgramivARB(GLenum target, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetProgramivARB_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetProgramStringARB(GLenum target, GLenum pname, IntPtr @string)

        public static
        void glGetProgramStringARB(GLenum target, GLenum pname, IntPtr @string)
        {
            glGetProgramStringARB_(target, pname, @string);
        }

        #endregion

        #region glGetProgramStringARB(GLenum target, GLenum pname, object @string)

        public static
        void glGetProgramStringARB(GLenum target, GLenum pname, object @string)
        {
            GCHandle h0 = GCHandle.Alloc(@string, GCHandleType.Pinned);
            try
            {
                glGetProgramStringARB_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetVertexAttribdvARB(GLuint index, GLenum pname, IntPtr parameters)

        public static
        void glGetVertexAttribdvARB(GLuint index, GLenum pname, IntPtr parameters)
        {
            glGetVertexAttribdvARB_(index, pname, parameters);
        }

        #endregion

        #region glGetVertexAttribdvARB(GLuint index, GLenum pname, object parameters)

        public static
        void glGetVertexAttribdvARB(GLuint index, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetVertexAttribdvARB_(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetVertexAttribdvARB(GLuint index, GLenum pname, GLdouble[] parameters)

        public static
        void glGetVertexAttribdvARB(GLuint index, GLenum pname, GLdouble[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetVertexAttribdvARB_(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetVertexAttribfvARB(GLuint index, GLenum pname, IntPtr parameters)

        public static
        void glGetVertexAttribfvARB(GLuint index, GLenum pname, IntPtr parameters)
        {
            glGetVertexAttribfvARB_(index, pname, parameters);
        }

        #endregion

        #region glGetVertexAttribfvARB(GLuint index, GLenum pname, object parameters)

        public static
        void glGetVertexAttribfvARB(GLuint index, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetVertexAttribfvARB_(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetVertexAttribfvARB(GLuint index, GLenum pname, GLfloat[] parameters)

        public static
        void glGetVertexAttribfvARB(GLuint index, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetVertexAttribfvARB_(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetVertexAttribivARB(GLuint index, GLenum pname, IntPtr parameters)

        public static
        void glGetVertexAttribivARB(GLuint index, GLenum pname, IntPtr parameters)
        {
            glGetVertexAttribivARB_(index, pname, parameters);
        }

        #endregion

        #region glGetVertexAttribivARB(GLuint index, GLenum pname, object parameters)

        public static
        void glGetVertexAttribivARB(GLuint index, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetVertexAttribivARB_(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetVertexAttribivARB(GLuint index, GLenum pname, GLint[] parameters)

        public static
        void glGetVertexAttribivARB(GLuint index, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetVertexAttribivARB_(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetVertexAttribPointervARB(GLuint index, GLenum pname, IntPtr pointer)

        public static
        void glGetVertexAttribPointervARB(GLuint index, GLenum pname, IntPtr pointer)
        {
            glGetVertexAttribPointervARB_(index, pname, pointer);
        }

        #endregion

        #region glGetVertexAttribPointervARB(GLuint index, GLenum pname, object pointer)

        public static
        void glGetVertexAttribPointervARB(GLuint index, GLenum pname, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                glGetVertexAttribPointervARB_(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetVertexAttribPointervARB(GLuint index, GLenum pname, IntPtr[] pointer)

        public static
        void glGetVertexAttribPointervARB(GLuint index, GLenum pname, IntPtr[] pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                glGetVertexAttribPointervARB_(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glDeleteBuffersARB(GLsizei n, IntPtr buffers)

        public static
        void glDeleteBuffersARB(GLsizei n, IntPtr buffers)
        {
            glDeleteBuffersARB_(n, buffers);
        }

        #endregion

        #region glDeleteBuffersARB(GLsizei n, object buffers)

        public static
        void glDeleteBuffersARB(GLsizei n, object buffers)
        {
            GCHandle h0 = GCHandle.Alloc(buffers, GCHandleType.Pinned);
            try
            {
                glDeleteBuffersARB_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glDeleteBuffersARB(GLsizei n, GLuint[] buffers)

        public static
        void glDeleteBuffersARB(GLsizei n, GLuint[] buffers)
        {
            GCHandle h0 = GCHandle.Alloc(buffers, GCHandleType.Pinned);
            try
            {
                glDeleteBuffersARB_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGenBuffersARB(GLsizei n, IntPtr buffers)

        public static
        void glGenBuffersARB(GLsizei n, IntPtr buffers)
        {
            glGenBuffersARB_(n, buffers);
        }

        #endregion

        #region glGenBuffersARB(GLsizei n, object buffers)

        public static
        void glGenBuffersARB(GLsizei n, object buffers)
        {
            GCHandle h0 = GCHandle.Alloc(buffers, GCHandleType.Pinned);
            try
            {
                glGenBuffersARB_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGenBuffersARB(GLsizei n, GLuint[] buffers)

        public static
        void glGenBuffersARB(GLsizei n, GLuint[] buffers)
        {
            GCHandle h0 = GCHandle.Alloc(buffers, GCHandleType.Pinned);
            try
            {
                glGenBuffersARB_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glBufferDataARB(GLenum target, GLsizeiptrARB size, IntPtr data, GLenum usage)

        public static
        void glBufferDataARB(GLenum target, GLsizeiptrARB size, IntPtr data, GLenum usage)
        {
            glBufferDataARB_(target, size, data, usage);
        }

        #endregion

        #region glBufferDataARB(GLenum target, GLsizeiptrARB size, object data, GLenum usage)

        public static
        void glBufferDataARB(GLenum target, GLsizeiptrARB size, object data, GLenum usage)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                glBufferDataARB_(target, size, h0.AddrOfPinnedObject(), usage);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, IntPtr data)

        public static
        void glBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, IntPtr data)
        {
            glBufferSubDataARB_(target, offset, size, data);
        }

        #endregion

        #region glBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, object data)

        public static
        void glBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                glBufferSubDataARB_(target, offset, size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, IntPtr data)

        public static
        void glGetBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, IntPtr data)
        {
            glGetBufferSubDataARB_(target, offset, size, data);
        }

        #endregion

        #region glGetBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, object data)

        public static
        void glGetBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                glGetBufferSubDataARB_(target, offset, size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetBufferParameterivARB(GLenum target, GLenum pname, IntPtr parameters)

        public static
        void glGetBufferParameterivARB(GLenum target, GLenum pname, IntPtr parameters)
        {
            glGetBufferParameterivARB_(target, pname, parameters);
        }

        #endregion

        #region glGetBufferParameterivARB(GLenum target, GLenum pname, object parameters)

        public static
        void glGetBufferParameterivARB(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetBufferParameterivARB_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetBufferParameterivARB(GLenum target, GLenum pname, GLint[] parameters)

        public static
        void glGetBufferParameterivARB(GLenum target, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetBufferParameterivARB_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetBufferPointervARB(GLenum target, GLenum pname, IntPtr parameters)

        public static
        void glGetBufferPointervARB(GLenum target, GLenum pname, IntPtr parameters)
        {
            glGetBufferPointervARB_(target, pname, parameters);
        }

        #endregion

        #region glGetBufferPointervARB(GLenum target, GLenum pname, object parameters)

        public static
        void glGetBufferPointervARB(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetBufferPointervARB_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetBufferPointervARB(GLenum target, GLenum pname, IntPtr[] parameters)

        public static
        void glGetBufferPointervARB(GLenum target, GLenum pname, IntPtr[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetBufferPointervARB_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGenQueriesARB(GLsizei n, IntPtr ids)

        public static
        void glGenQueriesARB(GLsizei n, IntPtr ids)
        {
            glGenQueriesARB_(n, ids);
        }

        #endregion

        #region glGenQueriesARB(GLsizei n, object ids)

        public static
        void glGenQueriesARB(GLsizei n, object ids)
        {
            GCHandle h0 = GCHandle.Alloc(ids, GCHandleType.Pinned);
            try
            {
                glGenQueriesARB_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGenQueriesARB(GLsizei n, GLuint[] ids)

        public static
        void glGenQueriesARB(GLsizei n, GLuint[] ids)
        {
            GCHandle h0 = GCHandle.Alloc(ids, GCHandleType.Pinned);
            try
            {
                glGenQueriesARB_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glDeleteQueriesARB(GLsizei n, IntPtr ids)

        public static
        void glDeleteQueriesARB(GLsizei n, IntPtr ids)
        {
            glDeleteQueriesARB_(n, ids);
        }

        #endregion

        #region glDeleteQueriesARB(GLsizei n, object ids)

        public static
        void glDeleteQueriesARB(GLsizei n, object ids)
        {
            GCHandle h0 = GCHandle.Alloc(ids, GCHandleType.Pinned);
            try
            {
                glDeleteQueriesARB_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glDeleteQueriesARB(GLsizei n, GLuint[] ids)

        public static
        void glDeleteQueriesARB(GLsizei n, GLuint[] ids)
        {
            GCHandle h0 = GCHandle.Alloc(ids, GCHandleType.Pinned);
            try
            {
                glDeleteQueriesARB_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetQueryivARB(GLenum target, GLenum pname, IntPtr parameters)

        public static
        void glGetQueryivARB(GLenum target, GLenum pname, IntPtr parameters)
        {
            glGetQueryivARB_(target, pname, parameters);
        }

        #endregion

        #region glGetQueryivARB(GLenum target, GLenum pname, object parameters)

        public static
        void glGetQueryivARB(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetQueryivARB_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetQueryivARB(GLenum target, GLenum pname, GLint[] parameters)

        public static
        void glGetQueryivARB(GLenum target, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetQueryivARB_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetQueryObjectivARB(GLuint id, GLenum pname, IntPtr parameters)

        public static
        void glGetQueryObjectivARB(GLuint id, GLenum pname, IntPtr parameters)
        {
            glGetQueryObjectivARB_(id, pname, parameters);
        }

        #endregion

        #region glGetQueryObjectivARB(GLuint id, GLenum pname, object parameters)

        public static
        void glGetQueryObjectivARB(GLuint id, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetQueryObjectivARB_(id, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetQueryObjectivARB(GLuint id, GLenum pname, GLint[] parameters)

        public static
        void glGetQueryObjectivARB(GLuint id, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetQueryObjectivARB_(id, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetQueryObjectuivARB(GLuint id, GLenum pname, IntPtr parameters)

        public static
        void glGetQueryObjectuivARB(GLuint id, GLenum pname, IntPtr parameters)
        {
            glGetQueryObjectuivARB_(id, pname, parameters);
        }

        #endregion

        #region glGetQueryObjectuivARB(GLuint id, GLenum pname, object parameters)

        public static
        void glGetQueryObjectuivARB(GLuint id, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetQueryObjectuivARB_(id, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetQueryObjectuivARB(GLuint id, GLenum pname, GLuint[] parameters)

        public static
        void glGetQueryObjectuivARB(GLuint id, GLenum pname, GLuint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetQueryObjectuivARB_(id, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glShaderSourceARB(GLhandleARB shaderObj, GLsizei count, string @string, IntPtr length)

        public static
        void glShaderSourceARB(GLhandleARB shaderObj, GLsizei count, string @string, IntPtr length)
        {
            glShaderSourceARB_(shaderObj, count, @string, length);
        }

        #endregion

        #region glShaderSourceARB(GLhandleARB shaderObj, GLsizei count, string @string, object length)

        public static
        void glShaderSourceARB(GLhandleARB shaderObj, GLsizei count, string @string, object length)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            try
            {
                glShaderSourceARB_(shaderObj, count, @string, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glShaderSourceARB(GLhandleARB shaderObj, GLsizei count, string @string, GLint[] length)

        public static
        void glShaderSourceARB(GLhandleARB shaderObj, GLsizei count, string @string, GLint[] length)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            try
            {
                glShaderSourceARB_(shaderObj, count, @string, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glUniform1fvARB(GLint location, GLsizei count, IntPtr value)

        public static
        void glUniform1fvARB(GLint location, GLsizei count, IntPtr value)
        {
            glUniform1fvARB_(location, count, value);
        }

        #endregion

        #region glUniform1fvARB(GLint location, GLsizei count, object value)

        public static
        void glUniform1fvARB(GLint location, GLsizei count, object value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                glUniform1fvARB_(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glUniform1fvARB(GLint location, GLsizei count, GLfloat[] value)

        public static
        void glUniform1fvARB(GLint location, GLsizei count, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                glUniform1fvARB_(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glUniform2fvARB(GLint location, GLsizei count, IntPtr value)

        public static
        void glUniform2fvARB(GLint location, GLsizei count, IntPtr value)
        {
            glUniform2fvARB_(location, count, value);
        }

        #endregion

        #region glUniform2fvARB(GLint location, GLsizei count, object value)

        public static
        void glUniform2fvARB(GLint location, GLsizei count, object value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                glUniform2fvARB_(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glUniform2fvARB(GLint location, GLsizei count, GLfloat[] value)

        public static
        void glUniform2fvARB(GLint location, GLsizei count, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                glUniform2fvARB_(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glUniform3fvARB(GLint location, GLsizei count, IntPtr value)

        public static
        void glUniform3fvARB(GLint location, GLsizei count, IntPtr value)
        {
            glUniform3fvARB_(location, count, value);
        }

        #endregion

        #region glUniform3fvARB(GLint location, GLsizei count, object value)

        public static
        void glUniform3fvARB(GLint location, GLsizei count, object value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                glUniform3fvARB_(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glUniform3fvARB(GLint location, GLsizei count, GLfloat[] value)

        public static
        void glUniform3fvARB(GLint location, GLsizei count, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                glUniform3fvARB_(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glUniform4fvARB(GLint location, GLsizei count, IntPtr value)

        public static
        void glUniform4fvARB(GLint location, GLsizei count, IntPtr value)
        {
            glUniform4fvARB_(location, count, value);
        }

        #endregion

        #region glUniform4fvARB(GLint location, GLsizei count, object value)

        public static
        void glUniform4fvARB(GLint location, GLsizei count, object value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                glUniform4fvARB_(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glUniform4fvARB(GLint location, GLsizei count, GLfloat[] value)

        public static
        void glUniform4fvARB(GLint location, GLsizei count, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                glUniform4fvARB_(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glUniform1ivARB(GLint location, GLsizei count, IntPtr value)

        public static
        void glUniform1ivARB(GLint location, GLsizei count, IntPtr value)
        {
            glUniform1ivARB_(location, count, value);
        }

        #endregion

        #region glUniform1ivARB(GLint location, GLsizei count, object value)

        public static
        void glUniform1ivARB(GLint location, GLsizei count, object value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                glUniform1ivARB_(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glUniform1ivARB(GLint location, GLsizei count, GLint[] value)

        public static
        void glUniform1ivARB(GLint location, GLsizei count, GLint[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                glUniform1ivARB_(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glUniform2ivARB(GLint location, GLsizei count, IntPtr value)

        public static
        void glUniform2ivARB(GLint location, GLsizei count, IntPtr value)
        {
            glUniform2ivARB_(location, count, value);
        }

        #endregion

        #region glUniform2ivARB(GLint location, GLsizei count, object value)

        public static
        void glUniform2ivARB(GLint location, GLsizei count, object value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                glUniform2ivARB_(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glUniform2ivARB(GLint location, GLsizei count, GLint[] value)

        public static
        void glUniform2ivARB(GLint location, GLsizei count, GLint[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                glUniform2ivARB_(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glUniform3ivARB(GLint location, GLsizei count, IntPtr value)

        public static
        void glUniform3ivARB(GLint location, GLsizei count, IntPtr value)
        {
            glUniform3ivARB_(location, count, value);
        }

        #endregion

        #region glUniform3ivARB(GLint location, GLsizei count, object value)

        public static
        void glUniform3ivARB(GLint location, GLsizei count, object value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                glUniform3ivARB_(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glUniform3ivARB(GLint location, GLsizei count, GLint[] value)

        public static
        void glUniform3ivARB(GLint location, GLsizei count, GLint[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                glUniform3ivARB_(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glUniform4ivARB(GLint location, GLsizei count, IntPtr value)

        public static
        void glUniform4ivARB(GLint location, GLsizei count, IntPtr value)
        {
            glUniform4ivARB_(location, count, value);
        }

        #endregion

        #region glUniform4ivARB(GLint location, GLsizei count, object value)

        public static
        void glUniform4ivARB(GLint location, GLsizei count, object value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                glUniform4ivARB_(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glUniform4ivARB(GLint location, GLsizei count, GLint[] value)

        public static
        void glUniform4ivARB(GLint location, GLsizei count, GLint[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                glUniform4ivARB_(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glUniformMatrix2fvARB(GLint location, GLsizei count, GLboolean transpose, IntPtr value)

        public static
        void glUniformMatrix2fvARB(GLint location, GLsizei count, GLboolean transpose, IntPtr value)
        {
            glUniformMatrix2fvARB_(location, count, transpose, value);
        }

        #endregion

        #region glUniformMatrix2fvARB(GLint location, GLsizei count, GLboolean transpose, object value)

        public static
        void glUniformMatrix2fvARB(GLint location, GLsizei count, GLboolean transpose, object value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                glUniformMatrix2fvARB_(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glUniformMatrix2fvARB(GLint location, GLsizei count, GLboolean transpose, GLfloat[] value)

        public static
        void glUniformMatrix2fvARB(GLint location, GLsizei count, GLboolean transpose, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                glUniformMatrix2fvARB_(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glUniformMatrix3fvARB(GLint location, GLsizei count, GLboolean transpose, IntPtr value)

        public static
        void glUniformMatrix3fvARB(GLint location, GLsizei count, GLboolean transpose, IntPtr value)
        {
            glUniformMatrix3fvARB_(location, count, transpose, value);
        }

        #endregion

        #region glUniformMatrix3fvARB(GLint location, GLsizei count, GLboolean transpose, object value)

        public static
        void glUniformMatrix3fvARB(GLint location, GLsizei count, GLboolean transpose, object value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                glUniformMatrix3fvARB_(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glUniformMatrix3fvARB(GLint location, GLsizei count, GLboolean transpose, GLfloat[] value)

        public static
        void glUniformMatrix3fvARB(GLint location, GLsizei count, GLboolean transpose, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                glUniformMatrix3fvARB_(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glUniformMatrix4fvARB(GLint location, GLsizei count, GLboolean transpose, IntPtr value)

        public static
        void glUniformMatrix4fvARB(GLint location, GLsizei count, GLboolean transpose, IntPtr value)
        {
            glUniformMatrix4fvARB_(location, count, transpose, value);
        }

        #endregion

        #region glUniformMatrix4fvARB(GLint location, GLsizei count, GLboolean transpose, object value)

        public static
        void glUniformMatrix4fvARB(GLint location, GLsizei count, GLboolean transpose, object value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                glUniformMatrix4fvARB_(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glUniformMatrix4fvARB(GLint location, GLsizei count, GLboolean transpose, GLfloat[] value)

        public static
        void glUniformMatrix4fvARB(GLint location, GLsizei count, GLboolean transpose, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                glUniformMatrix4fvARB_(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetObjectParameterfvARB(GLhandleARB obj, GLenum pname, IntPtr parameters)

        public static
        void glGetObjectParameterfvARB(GLhandleARB obj, GLenum pname, IntPtr parameters)
        {
            glGetObjectParameterfvARB_(obj, pname, parameters);
        }

        #endregion

        #region glGetObjectParameterfvARB(GLhandleARB obj, GLenum pname, object parameters)

        public static
        void glGetObjectParameterfvARB(GLhandleARB obj, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetObjectParameterfvARB_(obj, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetObjectParameterfvARB(GLhandleARB obj, GLenum pname, GLfloat[] parameters)

        public static
        void glGetObjectParameterfvARB(GLhandleARB obj, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetObjectParameterfvARB_(obj, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetObjectParameterivARB(GLhandleARB obj, GLenum pname, IntPtr parameters)

        public static
        void glGetObjectParameterivARB(GLhandleARB obj, GLenum pname, IntPtr parameters)
        {
            glGetObjectParameterivARB_(obj, pname, parameters);
        }

        #endregion

        #region glGetObjectParameterivARB(GLhandleARB obj, GLenum pname, object parameters)

        public static
        void glGetObjectParameterivARB(GLhandleARB obj, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetObjectParameterivARB_(obj, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetObjectParameterivARB(GLhandleARB obj, GLenum pname, GLint[] parameters)

        public static
        void glGetObjectParameterivARB(GLhandleARB obj, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetObjectParameterivARB_(obj, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetInfoLogARB(GLhandleARB obj, GLsizei maxLength, IntPtr length, StringBuilder infoLog)

        public static
        void glGetInfoLogARB(GLhandleARB obj, GLsizei maxLength, IntPtr length, StringBuilder infoLog)
        {
            glGetInfoLogARB_(obj, maxLength, length, infoLog);
        }

        #endregion

        #region glGetInfoLogARB(GLhandleARB obj, GLsizei maxLength, object length, StringBuilder infoLog)

        public static
        void glGetInfoLogARB(GLhandleARB obj, GLsizei maxLength, object length, StringBuilder infoLog)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            try
            {
                glGetInfoLogARB_(obj, maxLength, h0.AddrOfPinnedObject(), infoLog);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetInfoLogARB(GLhandleARB obj, GLsizei maxLength, GLsizei[] length, StringBuilder infoLog)

        public static
        void glGetInfoLogARB(GLhandleARB obj, GLsizei maxLength, GLsizei[] length, StringBuilder infoLog)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            try
            {
                glGetInfoLogARB_(obj, maxLength, h0.AddrOfPinnedObject(), infoLog);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, IntPtr count, IntPtr obj)

        public static
        void glGetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, IntPtr count, IntPtr obj)
        {
            glGetAttachedObjectsARB_(containerObj, maxCount, count, obj);
        }

        #endregion

        #region glGetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, IntPtr count, object obj)

        public static
        void glGetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, IntPtr count, object obj)
        {
            GCHandle h0 = GCHandle.Alloc(obj, GCHandleType.Pinned);
            try
            {
                glGetAttachedObjectsARB_(containerObj, maxCount, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, IntPtr count, GLhandleARB[] obj)

        public static
        void glGetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, IntPtr count, GLhandleARB[] obj)
        {
            GCHandle h0 = GCHandle.Alloc(obj, GCHandleType.Pinned);
            try
            {
                glGetAttachedObjectsARB_(containerObj, maxCount, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, object count, IntPtr obj)

        public static
        void glGetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, object count, IntPtr obj)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                glGetAttachedObjectsARB_(containerObj, maxCount, h0.AddrOfPinnedObject(), obj);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, object count, object obj)

        public static
        void glGetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, object count, object obj)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(obj, GCHandleType.Pinned);
            try
            {
                glGetAttachedObjectsARB_(containerObj, maxCount, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glGetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, object count, GLhandleARB[] obj)

        public static
        void glGetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, object count, GLhandleARB[] obj)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(obj, GCHandleType.Pinned);
            try
            {
                glGetAttachedObjectsARB_(containerObj, maxCount, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glGetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, GLsizei[] count, IntPtr obj)

        public static
        void glGetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, GLsizei[] count, IntPtr obj)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                glGetAttachedObjectsARB_(containerObj, maxCount, h0.AddrOfPinnedObject(), obj);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, GLsizei[] count, object obj)

        public static
        void glGetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, GLsizei[] count, object obj)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(obj, GCHandleType.Pinned);
            try
            {
                glGetAttachedObjectsARB_(containerObj, maxCount, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glGetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, GLsizei[] count, GLhandleARB[] obj)

        public static
        void glGetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, GLsizei[] count, GLhandleARB[] obj)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(obj, GCHandleType.Pinned);
            try
            {
                glGetAttachedObjectsARB_(containerObj, maxCount, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, IntPtr size, IntPtr type, StringBuilder name)

        public static
        void glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, IntPtr size, IntPtr type, StringBuilder name)
        {
            glGetActiveUniformARB_(programObj, index, maxLength, length, size, type, name);
        }

        #endregion

        #region glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, IntPtr size, object type, StringBuilder name)

        public static
        void glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, IntPtr size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                glGetActiveUniformARB_(programObj, index, maxLength, length, size, h0.AddrOfPinnedObject(), name);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, IntPtr size, GLenum[] type, StringBuilder name)

        public static
        void glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, IntPtr size, GLenum[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                glGetActiveUniformARB_(programObj, index, maxLength, length, size, h0.AddrOfPinnedObject(), name);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, object size, IntPtr type, StringBuilder name)

        public static
        void glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, object size, IntPtr type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(size, GCHandleType.Pinned);
            try
            {
                glGetActiveUniformARB_(programObj, index, maxLength, length, h0.AddrOfPinnedObject(), type, name);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, object size, object type, StringBuilder name)

        public static
        void glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, object size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                glGetActiveUniformARB_(programObj, index, maxLength, length, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, object size, GLenum[] type, StringBuilder name)

        public static
        void glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, object size, GLenum[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                glGetActiveUniformARB_(programObj, index, maxLength, length, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, GLint[] size, IntPtr type, StringBuilder name)

        public static
        void glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, GLint[] size, IntPtr type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(size, GCHandleType.Pinned);
            try
            {
                glGetActiveUniformARB_(programObj, index, maxLength, length, h0.AddrOfPinnedObject(), type, name);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, GLint[] size, object type, StringBuilder name)

        public static
        void glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, GLint[] size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                glGetActiveUniformARB_(programObj, index, maxLength, length, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, GLint[] size, GLenum[] type, StringBuilder name)

        public static
        void glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, GLint[] size, GLenum[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                glGetActiveUniformARB_(programObj, index, maxLength, length, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, IntPtr size, IntPtr type, StringBuilder name)

        public static
        void glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, IntPtr size, IntPtr type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            try
            {
                glGetActiveUniformARB_(programObj, index, maxLength, h0.AddrOfPinnedObject(), size, type, name);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, IntPtr size, object type, StringBuilder name)

        public static
        void glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, IntPtr size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                glGetActiveUniformARB_(programObj, index, maxLength, h0.AddrOfPinnedObject(), size, h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, IntPtr size, GLenum[] type, StringBuilder name)

        public static
        void glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, IntPtr size, GLenum[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                glGetActiveUniformARB_(programObj, index, maxLength, h0.AddrOfPinnedObject(), size, h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, object size, IntPtr type, StringBuilder name)

        public static
        void glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, object size, IntPtr type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            try
            {
                glGetActiveUniformARB_(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), type, name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, object size, object type, StringBuilder name)

        public static
        void glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, object size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                glGetActiveUniformARB_(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, object size, GLenum[] type, StringBuilder name)

        public static
        void glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, object size, GLenum[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                glGetActiveUniformARB_(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, GLint[] size, IntPtr type, StringBuilder name)

        public static
        void glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, GLint[] size, IntPtr type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            try
            {
                glGetActiveUniformARB_(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), type, name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, GLint[] size, object type, StringBuilder name)

        public static
        void glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, GLint[] size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                glGetActiveUniformARB_(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, GLint[] size, GLenum[] type, StringBuilder name)

        public static
        void glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, GLint[] size, GLenum[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                glGetActiveUniformARB_(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, IntPtr size, IntPtr type, StringBuilder name)

        public static
        void glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, IntPtr size, IntPtr type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            try
            {
                glGetActiveUniformARB_(programObj, index, maxLength, h0.AddrOfPinnedObject(), size, type, name);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, IntPtr size, object type, StringBuilder name)

        public static
        void glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, IntPtr size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                glGetActiveUniformARB_(programObj, index, maxLength, h0.AddrOfPinnedObject(), size, h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, IntPtr size, GLenum[] type, StringBuilder name)

        public static
        void glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, IntPtr size, GLenum[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                glGetActiveUniformARB_(programObj, index, maxLength, h0.AddrOfPinnedObject(), size, h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, object size, IntPtr type, StringBuilder name)

        public static
        void glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, object size, IntPtr type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            try
            {
                glGetActiveUniformARB_(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), type, name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, object size, object type, StringBuilder name)

        public static
        void glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, object size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                glGetActiveUniformARB_(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, object size, GLenum[] type, StringBuilder name)

        public static
        void glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, object size, GLenum[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                glGetActiveUniformARB_(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, GLint[] size, IntPtr type, StringBuilder name)

        public static
        void glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, GLint[] size, IntPtr type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            try
            {
                glGetActiveUniformARB_(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), type, name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, GLint[] size, object type, StringBuilder name)

        public static
        void glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, GLint[] size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                glGetActiveUniformARB_(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, GLint[] size, GLenum[] type, StringBuilder name)

        public static
        void glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, GLint[] size, GLenum[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                glGetActiveUniformARB_(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glGetUniformfvARB(GLhandleARB programObj, GLint location, IntPtr parameters)

        public static
        void glGetUniformfvARB(GLhandleARB programObj, GLint location, IntPtr parameters)
        {
            glGetUniformfvARB_(programObj, location, parameters);
        }

        #endregion

        #region glGetUniformfvARB(GLhandleARB programObj, GLint location, object parameters)

        public static
        void glGetUniformfvARB(GLhandleARB programObj, GLint location, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetUniformfvARB_(programObj, location, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetUniformfvARB(GLhandleARB programObj, GLint location, GLfloat[] parameters)

        public static
        void glGetUniformfvARB(GLhandleARB programObj, GLint location, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetUniformfvARB_(programObj, location, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetUniformivARB(GLhandleARB programObj, GLint location, IntPtr parameters)

        public static
        void glGetUniformivARB(GLhandleARB programObj, GLint location, IntPtr parameters)
        {
            glGetUniformivARB_(programObj, location, parameters);
        }

        #endregion

        #region glGetUniformivARB(GLhandleARB programObj, GLint location, object parameters)

        public static
        void glGetUniformivARB(GLhandleARB programObj, GLint location, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetUniformivARB_(programObj, location, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetUniformivARB(GLhandleARB programObj, GLint location, GLint[] parameters)

        public static
        void glGetUniformivARB(GLhandleARB programObj, GLint location, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetUniformivARB_(programObj, location, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetShaderSourceARB(GLhandleARB obj, GLsizei maxLength, IntPtr length, StringBuilder source)

        public static
        void glGetShaderSourceARB(GLhandleARB obj, GLsizei maxLength, IntPtr length, StringBuilder source)
        {
            glGetShaderSourceARB_(obj, maxLength, length, source);
        }

        #endregion

        #region glGetShaderSourceARB(GLhandleARB obj, GLsizei maxLength, object length, StringBuilder source)

        public static
        void glGetShaderSourceARB(GLhandleARB obj, GLsizei maxLength, object length, StringBuilder source)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            try
            {
                glGetShaderSourceARB_(obj, maxLength, h0.AddrOfPinnedObject(), source);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetShaderSourceARB(GLhandleARB obj, GLsizei maxLength, GLsizei[] length, StringBuilder source)

        public static
        void glGetShaderSourceARB(GLhandleARB obj, GLsizei maxLength, GLsizei[] length, StringBuilder source)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            try
            {
                glGetShaderSourceARB_(obj, maxLength, h0.AddrOfPinnedObject(), source);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, IntPtr size, IntPtr type, StringBuilder name)

        public static
        void glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, IntPtr size, IntPtr type, StringBuilder name)
        {
            glGetActiveAttribARB_(programObj, index, maxLength, length, size, type, name);
        }

        #endregion

        #region glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, IntPtr size, object type, StringBuilder name)

        public static
        void glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, IntPtr size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                glGetActiveAttribARB_(programObj, index, maxLength, length, size, h0.AddrOfPinnedObject(), name);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, IntPtr size, GLenum[] type, StringBuilder name)

        public static
        void glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, IntPtr size, GLenum[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                glGetActiveAttribARB_(programObj, index, maxLength, length, size, h0.AddrOfPinnedObject(), name);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, object size, IntPtr type, StringBuilder name)

        public static
        void glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, object size, IntPtr type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(size, GCHandleType.Pinned);
            try
            {
                glGetActiveAttribARB_(programObj, index, maxLength, length, h0.AddrOfPinnedObject(), type, name);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, object size, object type, StringBuilder name)

        public static
        void glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, object size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                glGetActiveAttribARB_(programObj, index, maxLength, length, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, object size, GLenum[] type, StringBuilder name)

        public static
        void glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, object size, GLenum[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                glGetActiveAttribARB_(programObj, index, maxLength, length, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, GLint[] size, IntPtr type, StringBuilder name)

        public static
        void glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, GLint[] size, IntPtr type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(size, GCHandleType.Pinned);
            try
            {
                glGetActiveAttribARB_(programObj, index, maxLength, length, h0.AddrOfPinnedObject(), type, name);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, GLint[] size, object type, StringBuilder name)

        public static
        void glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, GLint[] size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                glGetActiveAttribARB_(programObj, index, maxLength, length, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, GLint[] size, GLenum[] type, StringBuilder name)

        public static
        void glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, GLint[] size, GLenum[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                glGetActiveAttribARB_(programObj, index, maxLength, length, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, IntPtr size, IntPtr type, StringBuilder name)

        public static
        void glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, IntPtr size, IntPtr type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            try
            {
                glGetActiveAttribARB_(programObj, index, maxLength, h0.AddrOfPinnedObject(), size, type, name);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, IntPtr size, object type, StringBuilder name)

        public static
        void glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, IntPtr size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                glGetActiveAttribARB_(programObj, index, maxLength, h0.AddrOfPinnedObject(), size, h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, IntPtr size, GLenum[] type, StringBuilder name)

        public static
        void glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, IntPtr size, GLenum[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                glGetActiveAttribARB_(programObj, index, maxLength, h0.AddrOfPinnedObject(), size, h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, object size, IntPtr type, StringBuilder name)

        public static
        void glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, object size, IntPtr type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            try
            {
                glGetActiveAttribARB_(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), type, name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, object size, object type, StringBuilder name)

        public static
        void glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, object size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                glGetActiveAttribARB_(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, object size, GLenum[] type, StringBuilder name)

        public static
        void glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, object size, GLenum[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                glGetActiveAttribARB_(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, GLint[] size, IntPtr type, StringBuilder name)

        public static
        void glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, GLint[] size, IntPtr type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            try
            {
                glGetActiveAttribARB_(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), type, name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, GLint[] size, object type, StringBuilder name)

        public static
        void glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, GLint[] size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                glGetActiveAttribARB_(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, GLint[] size, GLenum[] type, StringBuilder name)

        public static
        void glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, GLint[] size, GLenum[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                glGetActiveAttribARB_(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, IntPtr size, IntPtr type, StringBuilder name)

        public static
        void glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, IntPtr size, IntPtr type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            try
            {
                glGetActiveAttribARB_(programObj, index, maxLength, h0.AddrOfPinnedObject(), size, type, name);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, IntPtr size, object type, StringBuilder name)

        public static
        void glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, IntPtr size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                glGetActiveAttribARB_(programObj, index, maxLength, h0.AddrOfPinnedObject(), size, h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, IntPtr size, GLenum[] type, StringBuilder name)

        public static
        void glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, IntPtr size, GLenum[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                glGetActiveAttribARB_(programObj, index, maxLength, h0.AddrOfPinnedObject(), size, h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, object size, IntPtr type, StringBuilder name)

        public static
        void glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, object size, IntPtr type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            try
            {
                glGetActiveAttribARB_(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), type, name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, object size, object type, StringBuilder name)

        public static
        void glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, object size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                glGetActiveAttribARB_(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, object size, GLenum[] type, StringBuilder name)

        public static
        void glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, object size, GLenum[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                glGetActiveAttribARB_(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, GLint[] size, IntPtr type, StringBuilder name)

        public static
        void glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, GLint[] size, IntPtr type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            try
            {
                glGetActiveAttribARB_(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), type, name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, GLint[] size, object type, StringBuilder name)

        public static
        void glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, GLint[] size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                glGetActiveAttribARB_(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, GLint[] size, GLenum[] type, StringBuilder name)

        public static
        void glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, GLint[] size, GLenum[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                glGetActiveAttribARB_(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glDrawBuffersARB(GLsizei n, IntPtr bufs)

        public static
        void glDrawBuffersARB(GLsizei n, IntPtr bufs)
        {
            glDrawBuffersARB_(n, bufs);
        }

        #endregion

        #region glDrawBuffersARB(GLsizei n, object bufs)

        public static
        void glDrawBuffersARB(GLsizei n, object bufs)
        {
            GCHandle h0 = GCHandle.Alloc(bufs, GCHandleType.Pinned);
            try
            {
                glDrawBuffersARB_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glDrawBuffersARB(GLsizei n, GLenum[] bufs)

        public static
        void glDrawBuffersARB(GLsizei n, GLenum[] bufs)
        {
            GCHandle h0 = GCHandle.Alloc(bufs, GCHandleType.Pinned);
            try
            {
                glDrawBuffersARB_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexImage3DEXT(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, IntPtr pixels)

        public static
        void glTexImage3DEXT(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, IntPtr pixels)
        {
            glTexImage3DEXT_(target, level, internalformat, width, height, depth, border, format, type, pixels);
        }

        #endregion

        #region glTexImage3DEXT(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, object pixels)

        public static
        void glTexImage3DEXT(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, object pixels)
        {
            GCHandle h0 = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                glTexImage3DEXT_(target, level, internalformat, width, height, depth, border, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexSubImage3DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, IntPtr pixels)

        public static
        void glTexSubImage3DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, IntPtr pixels)
        {
            glTexSubImage3DEXT_(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
        }

        #endregion

        #region glTexSubImage3DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, object pixels)

        public static
        void glTexSubImage3DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, object pixels)
        {
            GCHandle h0 = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                glTexSubImage3DEXT_(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetTexFilterFuncSGIS(GLenum target, GLenum filter, IntPtr weights)

        public static
        void glGetTexFilterFuncSGIS(GLenum target, GLenum filter, IntPtr weights)
        {
            glGetTexFilterFuncSGIS_(target, filter, weights);
        }

        #endregion

        #region glGetTexFilterFuncSGIS(GLenum target, GLenum filter, object weights)

        public static
        void glGetTexFilterFuncSGIS(GLenum target, GLenum filter, object weights)
        {
            GCHandle h0 = GCHandle.Alloc(weights, GCHandleType.Pinned);
            try
            {
                glGetTexFilterFuncSGIS_(target, filter, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetTexFilterFuncSGIS(GLenum target, GLenum filter, GLfloat[] weights)

        public static
        void glGetTexFilterFuncSGIS(GLenum target, GLenum filter, GLfloat[] weights)
        {
            GCHandle h0 = GCHandle.Alloc(weights, GCHandleType.Pinned);
            try
            {
                glGetTexFilterFuncSGIS_(target, filter, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexFilterFuncSGIS(GLenum target, GLenum filter, GLsizei n, IntPtr weights)

        public static
        void glTexFilterFuncSGIS(GLenum target, GLenum filter, GLsizei n, IntPtr weights)
        {
            glTexFilterFuncSGIS_(target, filter, n, weights);
        }

        #endregion

        #region glTexFilterFuncSGIS(GLenum target, GLenum filter, GLsizei n, object weights)

        public static
        void glTexFilterFuncSGIS(GLenum target, GLenum filter, GLsizei n, object weights)
        {
            GCHandle h0 = GCHandle.Alloc(weights, GCHandleType.Pinned);
            try
            {
                glTexFilterFuncSGIS_(target, filter, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexFilterFuncSGIS(GLenum target, GLenum filter, GLsizei n, GLfloat[] weights)

        public static
        void glTexFilterFuncSGIS(GLenum target, GLenum filter, GLsizei n, GLfloat[] weights)
        {
            GCHandle h0 = GCHandle.Alloc(weights, GCHandleType.Pinned);
            try
            {
                glTexFilterFuncSGIS_(target, filter, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexSubImage1DEXT(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, IntPtr pixels)

        public static
        void glTexSubImage1DEXT(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, IntPtr pixels)
        {
            glTexSubImage1DEXT_(target, level, xoffset, width, format, type, pixels);
        }

        #endregion

        #region glTexSubImage1DEXT(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, object pixels)

        public static
        void glTexSubImage1DEXT(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, object pixels)
        {
            GCHandle h0 = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                glTexSubImage1DEXT_(target, level, xoffset, width, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexSubImage2DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, IntPtr pixels)

        public static
        void glTexSubImage2DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, IntPtr pixels)
        {
            glTexSubImage2DEXT_(target, level, xoffset, yoffset, width, height, format, type, pixels);
        }

        #endregion

        #region glTexSubImage2DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, object pixels)

        public static
        void glTexSubImage2DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, object pixels)
        {
            GCHandle h0 = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                glTexSubImage2DEXT_(target, level, xoffset, yoffset, width, height, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetHistogramEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, IntPtr values)

        public static
        void glGetHistogramEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, IntPtr values)
        {
            glGetHistogramEXT_(target, reset, format, type, values);
        }

        #endregion

        #region glGetHistogramEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, object values)

        public static
        void glGetHistogramEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, object values)
        {
            GCHandle h0 = GCHandle.Alloc(values, GCHandleType.Pinned);
            try
            {
                glGetHistogramEXT_(target, reset, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetHistogramParameterfvEXT(GLenum target, GLenum pname, IntPtr parameters)

        public static
        void glGetHistogramParameterfvEXT(GLenum target, GLenum pname, IntPtr parameters)
        {
            glGetHistogramParameterfvEXT_(target, pname, parameters);
        }

        #endregion

        #region glGetHistogramParameterfvEXT(GLenum target, GLenum pname, object parameters)

        public static
        void glGetHistogramParameterfvEXT(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetHistogramParameterfvEXT_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetHistogramParameterfvEXT(GLenum target, GLenum pname, GLfloat[] parameters)

        public static
        void glGetHistogramParameterfvEXT(GLenum target, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetHistogramParameterfvEXT_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetHistogramParameterivEXT(GLenum target, GLenum pname, IntPtr parameters)

        public static
        void glGetHistogramParameterivEXT(GLenum target, GLenum pname, IntPtr parameters)
        {
            glGetHistogramParameterivEXT_(target, pname, parameters);
        }

        #endregion

        #region glGetHistogramParameterivEXT(GLenum target, GLenum pname, object parameters)

        public static
        void glGetHistogramParameterivEXT(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetHistogramParameterivEXT_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetHistogramParameterivEXT(GLenum target, GLenum pname, GLint[] parameters)

        public static
        void glGetHistogramParameterivEXT(GLenum target, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetHistogramParameterivEXT_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetMinmaxEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, IntPtr values)

        public static
        void glGetMinmaxEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, IntPtr values)
        {
            glGetMinmaxEXT_(target, reset, format, type, values);
        }

        #endregion

        #region glGetMinmaxEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, object values)

        public static
        void glGetMinmaxEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, object values)
        {
            GCHandle h0 = GCHandle.Alloc(values, GCHandleType.Pinned);
            try
            {
                glGetMinmaxEXT_(target, reset, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetMinmaxParameterfvEXT(GLenum target, GLenum pname, IntPtr parameters)

        public static
        void glGetMinmaxParameterfvEXT(GLenum target, GLenum pname, IntPtr parameters)
        {
            glGetMinmaxParameterfvEXT_(target, pname, parameters);
        }

        #endregion

        #region glGetMinmaxParameterfvEXT(GLenum target, GLenum pname, object parameters)

        public static
        void glGetMinmaxParameterfvEXT(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetMinmaxParameterfvEXT_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetMinmaxParameterfvEXT(GLenum target, GLenum pname, GLfloat[] parameters)

        public static
        void glGetMinmaxParameterfvEXT(GLenum target, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetMinmaxParameterfvEXT_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetMinmaxParameterivEXT(GLenum target, GLenum pname, IntPtr parameters)

        public static
        void glGetMinmaxParameterivEXT(GLenum target, GLenum pname, IntPtr parameters)
        {
            glGetMinmaxParameterivEXT_(target, pname, parameters);
        }

        #endregion

        #region glGetMinmaxParameterivEXT(GLenum target, GLenum pname, object parameters)

        public static
        void glGetMinmaxParameterivEXT(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetMinmaxParameterivEXT_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetMinmaxParameterivEXT(GLenum target, GLenum pname, GLint[] parameters)

        public static
        void glGetMinmaxParameterivEXT(GLenum target, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetMinmaxParameterivEXT_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glConvolutionFilter1DEXT(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, IntPtr image)

        public static
        void glConvolutionFilter1DEXT(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, IntPtr image)
        {
            glConvolutionFilter1DEXT_(target, internalformat, width, format, type, image);
        }

        #endregion

        #region glConvolutionFilter1DEXT(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, object image)

        public static
        void glConvolutionFilter1DEXT(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, object image)
        {
            GCHandle h0 = GCHandle.Alloc(image, GCHandleType.Pinned);
            try
            {
                glConvolutionFilter1DEXT_(target, internalformat, width, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glConvolutionFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, IntPtr image)

        public static
        void glConvolutionFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, IntPtr image)
        {
            glConvolutionFilter2DEXT_(target, internalformat, width, height, format, type, image);
        }

        #endregion

        #region glConvolutionFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, object image)

        public static
        void glConvolutionFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, object image)
        {
            GCHandle h0 = GCHandle.Alloc(image, GCHandleType.Pinned);
            try
            {
                glConvolutionFilter2DEXT_(target, internalformat, width, height, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glConvolutionParameterfvEXT(GLenum target, GLenum pname, IntPtr parameters)

        public static
        void glConvolutionParameterfvEXT(GLenum target, GLenum pname, IntPtr parameters)
        {
            glConvolutionParameterfvEXT_(target, pname, parameters);
        }

        #endregion

        #region glConvolutionParameterfvEXT(GLenum target, GLenum pname, object parameters)

        public static
        void glConvolutionParameterfvEXT(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glConvolutionParameterfvEXT_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glConvolutionParameterfvEXT(GLenum target, GLenum pname, GLfloat[] parameters)

        public static
        void glConvolutionParameterfvEXT(GLenum target, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glConvolutionParameterfvEXT_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glConvolutionParameterivEXT(GLenum target, GLenum pname, IntPtr parameters)

        public static
        void glConvolutionParameterivEXT(GLenum target, GLenum pname, IntPtr parameters)
        {
            glConvolutionParameterivEXT_(target, pname, parameters);
        }

        #endregion

        #region glConvolutionParameterivEXT(GLenum target, GLenum pname, object parameters)

        public static
        void glConvolutionParameterivEXT(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glConvolutionParameterivEXT_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glConvolutionParameterivEXT(GLenum target, GLenum pname, GLint[] parameters)

        public static
        void glConvolutionParameterivEXT(GLenum target, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glConvolutionParameterivEXT_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetConvolutionFilterEXT(GLenum target, GLenum format, GLenum type, IntPtr image)

        public static
        void glGetConvolutionFilterEXT(GLenum target, GLenum format, GLenum type, IntPtr image)
        {
            glGetConvolutionFilterEXT_(target, format, type, image);
        }

        #endregion

        #region glGetConvolutionFilterEXT(GLenum target, GLenum format, GLenum type, object image)

        public static
        void glGetConvolutionFilterEXT(GLenum target, GLenum format, GLenum type, object image)
        {
            GCHandle h0 = GCHandle.Alloc(image, GCHandleType.Pinned);
            try
            {
                glGetConvolutionFilterEXT_(target, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetConvolutionParameterfvEXT(GLenum target, GLenum pname, IntPtr parameters)

        public static
        void glGetConvolutionParameterfvEXT(GLenum target, GLenum pname, IntPtr parameters)
        {
            glGetConvolutionParameterfvEXT_(target, pname, parameters);
        }

        #endregion

        #region glGetConvolutionParameterfvEXT(GLenum target, GLenum pname, object parameters)

        public static
        void glGetConvolutionParameterfvEXT(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetConvolutionParameterfvEXT_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetConvolutionParameterfvEXT(GLenum target, GLenum pname, GLfloat[] parameters)

        public static
        void glGetConvolutionParameterfvEXT(GLenum target, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetConvolutionParameterfvEXT_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetConvolutionParameterivEXT(GLenum target, GLenum pname, IntPtr parameters)

        public static
        void glGetConvolutionParameterivEXT(GLenum target, GLenum pname, IntPtr parameters)
        {
            glGetConvolutionParameterivEXT_(target, pname, parameters);
        }

        #endregion

        #region glGetConvolutionParameterivEXT(GLenum target, GLenum pname, object parameters)

        public static
        void glGetConvolutionParameterivEXT(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetConvolutionParameterivEXT_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetConvolutionParameterivEXT(GLenum target, GLenum pname, GLint[] parameters)

        public static
        void glGetConvolutionParameterivEXT(GLenum target, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetConvolutionParameterivEXT_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetSeparableFilterEXT(GLenum target, GLenum format, GLenum type, IntPtr row, IntPtr column, IntPtr span)

        public static
        void glGetSeparableFilterEXT(GLenum target, GLenum format, GLenum type, IntPtr row, IntPtr column, IntPtr span)
        {
            glGetSeparableFilterEXT_(target, format, type, row, column, span);
        }

        #endregion

        #region glGetSeparableFilterEXT(GLenum target, GLenum format, GLenum type, IntPtr row, IntPtr column, object span)

        public static
        void glGetSeparableFilterEXT(GLenum target, GLenum format, GLenum type, IntPtr row, IntPtr column, object span)
        {
            GCHandle h0 = GCHandle.Alloc(span, GCHandleType.Pinned);
            try
            {
                glGetSeparableFilterEXT_(target, format, type, row, column, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetSeparableFilterEXT(GLenum target, GLenum format, GLenum type, IntPtr row, object column, IntPtr span)

        public static
        void glGetSeparableFilterEXT(GLenum target, GLenum format, GLenum type, IntPtr row, object column, IntPtr span)
        {
            GCHandle h0 = GCHandle.Alloc(column, GCHandleType.Pinned);
            try
            {
                glGetSeparableFilterEXT_(target, format, type, row, h0.AddrOfPinnedObject(), span);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetSeparableFilterEXT(GLenum target, GLenum format, GLenum type, IntPtr row, object column, object span)

        public static
        void glGetSeparableFilterEXT(GLenum target, GLenum format, GLenum type, IntPtr row, object column, object span)
        {
            GCHandle h0 = GCHandle.Alloc(column, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(span, GCHandleType.Pinned);
            try
            {
                glGetSeparableFilterEXT_(target, format, type, row, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glGetSeparableFilterEXT(GLenum target, GLenum format, GLenum type, object row, IntPtr column, IntPtr span)

        public static
        void glGetSeparableFilterEXT(GLenum target, GLenum format, GLenum type, object row, IntPtr column, IntPtr span)
        {
            GCHandle h0 = GCHandle.Alloc(row, GCHandleType.Pinned);
            try
            {
                glGetSeparableFilterEXT_(target, format, type, h0.AddrOfPinnedObject(), column, span);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetSeparableFilterEXT(GLenum target, GLenum format, GLenum type, object row, IntPtr column, object span)

        public static
        void glGetSeparableFilterEXT(GLenum target, GLenum format, GLenum type, object row, IntPtr column, object span)
        {
            GCHandle h0 = GCHandle.Alloc(row, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(span, GCHandleType.Pinned);
            try
            {
                glGetSeparableFilterEXT_(target, format, type, h0.AddrOfPinnedObject(), column, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glGetSeparableFilterEXT(GLenum target, GLenum format, GLenum type, object row, object column, IntPtr span)

        public static
        void glGetSeparableFilterEXT(GLenum target, GLenum format, GLenum type, object row, object column, IntPtr span)
        {
            GCHandle h0 = GCHandle.Alloc(row, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(column, GCHandleType.Pinned);
            try
            {
                glGetSeparableFilterEXT_(target, format, type, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), span);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glGetSeparableFilterEXT(GLenum target, GLenum format, GLenum type, object row, object column, object span)

        public static
        void glGetSeparableFilterEXT(GLenum target, GLenum format, GLenum type, object row, object column, object span)
        {
            GCHandle h0 = GCHandle.Alloc(row, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(column, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(span, GCHandleType.Pinned);
            try
            {
                glGetSeparableFilterEXT_(target, format, type, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glSeparableFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, IntPtr row, IntPtr column)

        public static
        void glSeparableFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, IntPtr row, IntPtr column)
        {
            glSeparableFilter2DEXT_(target, internalformat, width, height, format, type, row, column);
        }

        #endregion

        #region glSeparableFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, IntPtr row, object column)

        public static
        void glSeparableFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, IntPtr row, object column)
        {
            GCHandle h0 = GCHandle.Alloc(column, GCHandleType.Pinned);
            try
            {
                glSeparableFilter2DEXT_(target, internalformat, width, height, format, type, row, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glSeparableFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, object row, IntPtr column)

        public static
        void glSeparableFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, object row, IntPtr column)
        {
            GCHandle h0 = GCHandle.Alloc(row, GCHandleType.Pinned);
            try
            {
                glSeparableFilter2DEXT_(target, internalformat, width, height, format, type, h0.AddrOfPinnedObject(), column);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glSeparableFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, object row, object column)

        public static
        void glSeparableFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, object row, object column)
        {
            GCHandle h0 = GCHandle.Alloc(row, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(column, GCHandleType.Pinned);
            try
            {
                glSeparableFilter2DEXT_(target, internalformat, width, height, format, type, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glColorTableSGI(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, IntPtr table)

        public static
        void glColorTableSGI(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, IntPtr table)
        {
            glColorTableSGI_(target, internalformat, width, format, type, table);
        }

        #endregion

        #region glColorTableSGI(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, object table)

        public static
        void glColorTableSGI(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, object table)
        {
            GCHandle h0 = GCHandle.Alloc(table, GCHandleType.Pinned);
            try
            {
                glColorTableSGI_(target, internalformat, width, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glColorTableParameterfvSGI(GLenum target, GLenum pname, IntPtr parameters)

        public static
        void glColorTableParameterfvSGI(GLenum target, GLenum pname, IntPtr parameters)
        {
            glColorTableParameterfvSGI_(target, pname, parameters);
        }

        #endregion

        #region glColorTableParameterfvSGI(GLenum target, GLenum pname, object parameters)

        public static
        void glColorTableParameterfvSGI(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glColorTableParameterfvSGI_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glColorTableParameterfvSGI(GLenum target, GLenum pname, GLfloat[] parameters)

        public static
        void glColorTableParameterfvSGI(GLenum target, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glColorTableParameterfvSGI_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glColorTableParameterivSGI(GLenum target, GLenum pname, IntPtr parameters)

        public static
        void glColorTableParameterivSGI(GLenum target, GLenum pname, IntPtr parameters)
        {
            glColorTableParameterivSGI_(target, pname, parameters);
        }

        #endregion

        #region glColorTableParameterivSGI(GLenum target, GLenum pname, object parameters)

        public static
        void glColorTableParameterivSGI(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glColorTableParameterivSGI_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glColorTableParameterivSGI(GLenum target, GLenum pname, GLint[] parameters)

        public static
        void glColorTableParameterivSGI(GLenum target, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glColorTableParameterivSGI_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetColorTableSGI(GLenum target, GLenum format, GLenum type, IntPtr table)

        public static
        void glGetColorTableSGI(GLenum target, GLenum format, GLenum type, IntPtr table)
        {
            glGetColorTableSGI_(target, format, type, table);
        }

        #endregion

        #region glGetColorTableSGI(GLenum target, GLenum format, GLenum type, object table)

        public static
        void glGetColorTableSGI(GLenum target, GLenum format, GLenum type, object table)
        {
            GCHandle h0 = GCHandle.Alloc(table, GCHandleType.Pinned);
            try
            {
                glGetColorTableSGI_(target, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetColorTableParameterfvSGI(GLenum target, GLenum pname, IntPtr parameters)

        public static
        void glGetColorTableParameterfvSGI(GLenum target, GLenum pname, IntPtr parameters)
        {
            glGetColorTableParameterfvSGI_(target, pname, parameters);
        }

        #endregion

        #region glGetColorTableParameterfvSGI(GLenum target, GLenum pname, object parameters)

        public static
        void glGetColorTableParameterfvSGI(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetColorTableParameterfvSGI_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetColorTableParameterfvSGI(GLenum target, GLenum pname, GLfloat[] parameters)

        public static
        void glGetColorTableParameterfvSGI(GLenum target, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetColorTableParameterfvSGI_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetColorTableParameterivSGI(GLenum target, GLenum pname, IntPtr parameters)

        public static
        void glGetColorTableParameterivSGI(GLenum target, GLenum pname, IntPtr parameters)
        {
            glGetColorTableParameterivSGI_(target, pname, parameters);
        }

        #endregion

        #region glGetColorTableParameterivSGI(GLenum target, GLenum pname, object parameters)

        public static
        void glGetColorTableParameterivSGI(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetColorTableParameterivSGI_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetColorTableParameterivSGI(GLenum target, GLenum pname, GLint[] parameters)

        public static
        void glGetColorTableParameterivSGI(GLenum target, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetColorTableParameterivSGI_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glPixelTexGenParameterivSGIS(GLenum pname, IntPtr parameters)

        public static
        void glPixelTexGenParameterivSGIS(GLenum pname, IntPtr parameters)
        {
            glPixelTexGenParameterivSGIS_(pname, parameters);
        }

        #endregion

        #region glPixelTexGenParameterivSGIS(GLenum pname, object parameters)

        public static
        void glPixelTexGenParameterivSGIS(GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glPixelTexGenParameterivSGIS_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glPixelTexGenParameterivSGIS(GLenum pname, GLint[] parameters)

        public static
        void glPixelTexGenParameterivSGIS(GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glPixelTexGenParameterivSGIS_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glPixelTexGenParameterfvSGIS(GLenum pname, IntPtr parameters)

        public static
        void glPixelTexGenParameterfvSGIS(GLenum pname, IntPtr parameters)
        {
            glPixelTexGenParameterfvSGIS_(pname, parameters);
        }

        #endregion

        #region glPixelTexGenParameterfvSGIS(GLenum pname, object parameters)

        public static
        void glPixelTexGenParameterfvSGIS(GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glPixelTexGenParameterfvSGIS_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glPixelTexGenParameterfvSGIS(GLenum pname, GLfloat[] parameters)

        public static
        void glPixelTexGenParameterfvSGIS(GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glPixelTexGenParameterfvSGIS_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetPixelTexGenParameterivSGIS(GLenum pname, IntPtr parameters)

        public static
        void glGetPixelTexGenParameterivSGIS(GLenum pname, IntPtr parameters)
        {
            glGetPixelTexGenParameterivSGIS_(pname, parameters);
        }

        #endregion

        #region glGetPixelTexGenParameterivSGIS(GLenum pname, object parameters)

        public static
        void glGetPixelTexGenParameterivSGIS(GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetPixelTexGenParameterivSGIS_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetPixelTexGenParameterivSGIS(GLenum pname, GLint[] parameters)

        public static
        void glGetPixelTexGenParameterivSGIS(GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetPixelTexGenParameterivSGIS_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetPixelTexGenParameterfvSGIS(GLenum pname, IntPtr parameters)

        public static
        void glGetPixelTexGenParameterfvSGIS(GLenum pname, IntPtr parameters)
        {
            glGetPixelTexGenParameterfvSGIS_(pname, parameters);
        }

        #endregion

        #region glGetPixelTexGenParameterfvSGIS(GLenum pname, object parameters)

        public static
        void glGetPixelTexGenParameterfvSGIS(GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetPixelTexGenParameterfvSGIS_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetPixelTexGenParameterfvSGIS(GLenum pname, GLfloat[] parameters)

        public static
        void glGetPixelTexGenParameterfvSGIS(GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetPixelTexGenParameterfvSGIS_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexImage4DSGIS(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GLenum format, GLenum type, IntPtr pixels)

        public static
        void glTexImage4DSGIS(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GLenum format, GLenum type, IntPtr pixels)
        {
            glTexImage4DSGIS_(target, level, internalformat, width, height, depth, size4d, border, format, type, pixels);
        }

        #endregion

        #region glTexImage4DSGIS(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GLenum format, GLenum type, object pixels)

        public static
        void glTexImage4DSGIS(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GLenum format, GLenum type, object pixels)
        {
            GCHandle h0 = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                glTexImage4DSGIS_(target, level, internalformat, width, height, depth, size4d, border, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexSubImage4DSGIS(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLenum format, GLenum type, IntPtr pixels)

        public static
        void glTexSubImage4DSGIS(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLenum format, GLenum type, IntPtr pixels)
        {
            glTexSubImage4DSGIS_(target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, type, pixels);
        }

        #endregion

        #region glTexSubImage4DSGIS(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLenum format, GLenum type, object pixels)

        public static
        void glTexSubImage4DSGIS(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLenum format, GLenum type, object pixels)
        {
            GCHandle h0 = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                glTexSubImage4DSGIS_(target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glAreTexturesResidentEXT(GLsizei n, IntPtr textures, IntPtr residences)

        public static
        GLboolean glAreTexturesResidentEXT(GLsizei n, IntPtr textures, IntPtr residences)
        {
            return glAreTexturesResidentEXT_(n, textures, residences);
        }

        #endregion

        #region glAreTexturesResidentEXT(GLsizei n, IntPtr textures, object residences)

        public static
        GLboolean glAreTexturesResidentEXT(GLsizei n, IntPtr textures, object residences)
        {
            GCHandle h0 = GCHandle.Alloc(residences, GCHandleType.Pinned);
            try
            {
                return glAreTexturesResidentEXT_(n, textures, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glAreTexturesResidentEXT(GLsizei n, IntPtr textures, GLboolean[] residences)

        public static
        GLboolean glAreTexturesResidentEXT(GLsizei n, IntPtr textures, GLboolean[] residences)
        {
            GCHandle h0 = GCHandle.Alloc(residences, GCHandleType.Pinned);
            try
            {
                return glAreTexturesResidentEXT_(n, textures, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glAreTexturesResidentEXT(GLsizei n, object textures, IntPtr residences)

        public static
        GLboolean glAreTexturesResidentEXT(GLsizei n, object textures, IntPtr residences)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            try
            {
                return glAreTexturesResidentEXT_(n, h0.AddrOfPinnedObject(), residences);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glAreTexturesResidentEXT(GLsizei n, object textures, object residences)

        public static
        GLboolean glAreTexturesResidentEXT(GLsizei n, object textures, object residences)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(residences, GCHandleType.Pinned);
            try
            {
                return glAreTexturesResidentEXT_(n, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glAreTexturesResidentEXT(GLsizei n, object textures, GLboolean[] residences)

        public static
        GLboolean glAreTexturesResidentEXT(GLsizei n, object textures, GLboolean[] residences)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(residences, GCHandleType.Pinned);
            try
            {
                return glAreTexturesResidentEXT_(n, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glAreTexturesResidentEXT(GLsizei n, GLuint[] textures, IntPtr residences)

        public static
        GLboolean glAreTexturesResidentEXT(GLsizei n, GLuint[] textures, IntPtr residences)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            try
            {
                return glAreTexturesResidentEXT_(n, h0.AddrOfPinnedObject(), residences);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glAreTexturesResidentEXT(GLsizei n, GLuint[] textures, object residences)

        public static
        GLboolean glAreTexturesResidentEXT(GLsizei n, GLuint[] textures, object residences)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(residences, GCHandleType.Pinned);
            try
            {
                return glAreTexturesResidentEXT_(n, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glAreTexturesResidentEXT(GLsizei n, GLuint[] textures, GLboolean[] residences)

        public static
        GLboolean glAreTexturesResidentEXT(GLsizei n, GLuint[] textures, GLboolean[] residences)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(residences, GCHandleType.Pinned);
            try
            {
                return glAreTexturesResidentEXT_(n, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glDeleteTexturesEXT(GLsizei n, IntPtr textures)

        public static
        void glDeleteTexturesEXT(GLsizei n, IntPtr textures)
        {
            glDeleteTexturesEXT_(n, textures);
        }

        #endregion

        #region glDeleteTexturesEXT(GLsizei n, object textures)

        public static
        void glDeleteTexturesEXT(GLsizei n, object textures)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            try
            {
                glDeleteTexturesEXT_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glDeleteTexturesEXT(GLsizei n, GLuint[] textures)

        public static
        void glDeleteTexturesEXT(GLsizei n, GLuint[] textures)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            try
            {
                glDeleteTexturesEXT_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGenTexturesEXT(GLsizei n, IntPtr textures)

        public static
        void glGenTexturesEXT(GLsizei n, IntPtr textures)
        {
            glGenTexturesEXT_(n, textures);
        }

        #endregion

        #region glGenTexturesEXT(GLsizei n, object textures)

        public static
        void glGenTexturesEXT(GLsizei n, object textures)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            try
            {
                glGenTexturesEXT_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGenTexturesEXT(GLsizei n, GLuint[] textures)

        public static
        void glGenTexturesEXT(GLsizei n, GLuint[] textures)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            try
            {
                glGenTexturesEXT_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glPrioritizeTexturesEXT(GLsizei n, IntPtr textures, IntPtr priorities)

        public static
        void glPrioritizeTexturesEXT(GLsizei n, IntPtr textures, IntPtr priorities)
        {
            glPrioritizeTexturesEXT_(n, textures, priorities);
        }

        #endregion

        #region glPrioritizeTexturesEXT(GLsizei n, IntPtr textures, object priorities)

        public static
        void glPrioritizeTexturesEXT(GLsizei n, IntPtr textures, object priorities)
        {
            GCHandle h0 = GCHandle.Alloc(priorities, GCHandleType.Pinned);
            try
            {
                glPrioritizeTexturesEXT_(n, textures, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glPrioritizeTexturesEXT(GLsizei n, IntPtr textures, GLclampf[] priorities)

        public static
        void glPrioritizeTexturesEXT(GLsizei n, IntPtr textures, GLclampf[] priorities)
        {
            GCHandle h0 = GCHandle.Alloc(priorities, GCHandleType.Pinned);
            try
            {
                glPrioritizeTexturesEXT_(n, textures, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glPrioritizeTexturesEXT(GLsizei n, object textures, IntPtr priorities)

        public static
        void glPrioritizeTexturesEXT(GLsizei n, object textures, IntPtr priorities)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            try
            {
                glPrioritizeTexturesEXT_(n, h0.AddrOfPinnedObject(), priorities);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glPrioritizeTexturesEXT(GLsizei n, object textures, object priorities)

        public static
        void glPrioritizeTexturesEXT(GLsizei n, object textures, object priorities)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(priorities, GCHandleType.Pinned);
            try
            {
                glPrioritizeTexturesEXT_(n, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glPrioritizeTexturesEXT(GLsizei n, object textures, GLclampf[] priorities)

        public static
        void glPrioritizeTexturesEXT(GLsizei n, object textures, GLclampf[] priorities)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(priorities, GCHandleType.Pinned);
            try
            {
                glPrioritizeTexturesEXT_(n, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glPrioritizeTexturesEXT(GLsizei n, GLuint[] textures, IntPtr priorities)

        public static
        void glPrioritizeTexturesEXT(GLsizei n, GLuint[] textures, IntPtr priorities)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            try
            {
                glPrioritizeTexturesEXT_(n, h0.AddrOfPinnedObject(), priorities);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glPrioritizeTexturesEXT(GLsizei n, GLuint[] textures, object priorities)

        public static
        void glPrioritizeTexturesEXT(GLsizei n, GLuint[] textures, object priorities)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(priorities, GCHandleType.Pinned);
            try
            {
                glPrioritizeTexturesEXT_(n, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glPrioritizeTexturesEXT(GLsizei n, GLuint[] textures, GLclampf[] priorities)

        public static
        void glPrioritizeTexturesEXT(GLsizei n, GLuint[] textures, GLclampf[] priorities)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(priorities, GCHandleType.Pinned);
            try
            {
                glPrioritizeTexturesEXT_(n, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glDetailTexFuncSGIS(GLenum target, GLsizei n, IntPtr points)

        public static
        void glDetailTexFuncSGIS(GLenum target, GLsizei n, IntPtr points)
        {
            glDetailTexFuncSGIS_(target, n, points);
        }

        #endregion

        #region glDetailTexFuncSGIS(GLenum target, GLsizei n, object points)

        public static
        void glDetailTexFuncSGIS(GLenum target, GLsizei n, object points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                glDetailTexFuncSGIS_(target, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glDetailTexFuncSGIS(GLenum target, GLsizei n, GLfloat[] points)

        public static
        void glDetailTexFuncSGIS(GLenum target, GLsizei n, GLfloat[] points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                glDetailTexFuncSGIS_(target, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetDetailTexFuncSGIS(GLenum target, IntPtr points)

        public static
        void glGetDetailTexFuncSGIS(GLenum target, IntPtr points)
        {
            glGetDetailTexFuncSGIS_(target, points);
        }

        #endregion

        #region glGetDetailTexFuncSGIS(GLenum target, object points)

        public static
        void glGetDetailTexFuncSGIS(GLenum target, object points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                glGetDetailTexFuncSGIS_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetDetailTexFuncSGIS(GLenum target, GLfloat[] points)

        public static
        void glGetDetailTexFuncSGIS(GLenum target, GLfloat[] points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                glGetDetailTexFuncSGIS_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glSharpenTexFuncSGIS(GLenum target, GLsizei n, IntPtr points)

        public static
        void glSharpenTexFuncSGIS(GLenum target, GLsizei n, IntPtr points)
        {
            glSharpenTexFuncSGIS_(target, n, points);
        }

        #endregion

        #region glSharpenTexFuncSGIS(GLenum target, GLsizei n, object points)

        public static
        void glSharpenTexFuncSGIS(GLenum target, GLsizei n, object points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                glSharpenTexFuncSGIS_(target, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glSharpenTexFuncSGIS(GLenum target, GLsizei n, GLfloat[] points)

        public static
        void glSharpenTexFuncSGIS(GLenum target, GLsizei n, GLfloat[] points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                glSharpenTexFuncSGIS_(target, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetSharpenTexFuncSGIS(GLenum target, IntPtr points)

        public static
        void glGetSharpenTexFuncSGIS(GLenum target, IntPtr points)
        {
            glGetSharpenTexFuncSGIS_(target, points);
        }

        #endregion

        #region glGetSharpenTexFuncSGIS(GLenum target, object points)

        public static
        void glGetSharpenTexFuncSGIS(GLenum target, object points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                glGetSharpenTexFuncSGIS_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetSharpenTexFuncSGIS(GLenum target, GLfloat[] points)

        public static
        void glGetSharpenTexFuncSGIS(GLenum target, GLfloat[] points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                glGetSharpenTexFuncSGIS_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glColorPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, IntPtr pointer)

        public static
        void glColorPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, IntPtr pointer)
        {
            glColorPointerEXT_(size, type, stride, count, pointer);
        }

        #endregion

        #region glColorPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, object pointer)

        public static
        void glColorPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                glColorPointerEXT_(size, type, stride, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glEdgeFlagPointerEXT(GLsizei stride, GLsizei count, IntPtr pointer)

        public static
        void glEdgeFlagPointerEXT(GLsizei stride, GLsizei count, IntPtr pointer)
        {
            glEdgeFlagPointerEXT_(stride, count, pointer);
        }

        #endregion

        #region glEdgeFlagPointerEXT(GLsizei stride, GLsizei count, object pointer)

        public static
        void glEdgeFlagPointerEXT(GLsizei stride, GLsizei count, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                glEdgeFlagPointerEXT_(stride, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glEdgeFlagPointerEXT(GLsizei stride, GLsizei count, GLboolean[] pointer)

        public static
        void glEdgeFlagPointerEXT(GLsizei stride, GLsizei count, GLboolean[] pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                glEdgeFlagPointerEXT_(stride, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetPointervEXT(GLenum pname, IntPtr parameters)

        public static
        void glGetPointervEXT(GLenum pname, IntPtr parameters)
        {
            glGetPointervEXT_(pname, parameters);
        }

        #endregion

        #region glGetPointervEXT(GLenum pname, object parameters)

        public static
        void glGetPointervEXT(GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetPointervEXT_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetPointervEXT(GLenum pname, IntPtr[] parameters)

        public static
        void glGetPointervEXT(GLenum pname, IntPtr[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetPointervEXT_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glIndexPointerEXT(GLenum type, GLsizei stride, GLsizei count, IntPtr pointer)

        public static
        void glIndexPointerEXT(GLenum type, GLsizei stride, GLsizei count, IntPtr pointer)
        {
            glIndexPointerEXT_(type, stride, count, pointer);
        }

        #endregion

        #region glIndexPointerEXT(GLenum type, GLsizei stride, GLsizei count, object pointer)

        public static
        void glIndexPointerEXT(GLenum type, GLsizei stride, GLsizei count, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                glIndexPointerEXT_(type, stride, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glNormalPointerEXT(GLenum type, GLsizei stride, GLsizei count, IntPtr pointer)

        public static
        void glNormalPointerEXT(GLenum type, GLsizei stride, GLsizei count, IntPtr pointer)
        {
            glNormalPointerEXT_(type, stride, count, pointer);
        }

        #endregion

        #region glNormalPointerEXT(GLenum type, GLsizei stride, GLsizei count, object pointer)

        public static
        void glNormalPointerEXT(GLenum type, GLsizei stride, GLsizei count, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                glNormalPointerEXT_(type, stride, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexCoordPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, IntPtr pointer)

        public static
        void glTexCoordPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, IntPtr pointer)
        {
            glTexCoordPointerEXT_(size, type, stride, count, pointer);
        }

        #endregion

        #region glTexCoordPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, object pointer)

        public static
        void glTexCoordPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                glTexCoordPointerEXT_(size, type, stride, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, IntPtr pointer)

        public static
        void glVertexPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, IntPtr pointer)
        {
            glVertexPointerEXT_(size, type, stride, count, pointer);
        }

        #endregion

        #region glVertexPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, object pointer)

        public static
        void glVertexPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                glVertexPointerEXT_(size, type, stride, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glSpriteParameterfvSGIX(GLenum pname, IntPtr parameters)

        public static
        void glSpriteParameterfvSGIX(GLenum pname, IntPtr parameters)
        {
            glSpriteParameterfvSGIX_(pname, parameters);
        }

        #endregion

        #region glSpriteParameterfvSGIX(GLenum pname, object parameters)

        public static
        void glSpriteParameterfvSGIX(GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glSpriteParameterfvSGIX_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glSpriteParameterfvSGIX(GLenum pname, GLfloat[] parameters)

        public static
        void glSpriteParameterfvSGIX(GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glSpriteParameterfvSGIX_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glSpriteParameterivSGIX(GLenum pname, IntPtr parameters)

        public static
        void glSpriteParameterivSGIX(GLenum pname, IntPtr parameters)
        {
            glSpriteParameterivSGIX_(pname, parameters);
        }

        #endregion

        #region glSpriteParameterivSGIX(GLenum pname, object parameters)

        public static
        void glSpriteParameterivSGIX(GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glSpriteParameterivSGIX_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glSpriteParameterivSGIX(GLenum pname, GLint[] parameters)

        public static
        void glSpriteParameterivSGIX(GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glSpriteParameterivSGIX_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glPointParameterfvEXT(GLenum pname, IntPtr parameters)

        public static
        void glPointParameterfvEXT(GLenum pname, IntPtr parameters)
        {
            glPointParameterfvEXT_(pname, parameters);
        }

        #endregion

        #region glPointParameterfvEXT(GLenum pname, object parameters)

        public static
        void glPointParameterfvEXT(GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glPointParameterfvEXT_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glPointParameterfvEXT(GLenum pname, GLfloat[] parameters)

        public static
        void glPointParameterfvEXT(GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glPointParameterfvEXT_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glPointParameterfvSGIS(GLenum pname, IntPtr parameters)

        public static
        void glPointParameterfvSGIS(GLenum pname, IntPtr parameters)
        {
            glPointParameterfvSGIS_(pname, parameters);
        }

        #endregion

        #region glPointParameterfvSGIS(GLenum pname, object parameters)

        public static
        void glPointParameterfvSGIS(GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glPointParameterfvSGIS_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glPointParameterfvSGIS(GLenum pname, GLfloat[] parameters)

        public static
        void glPointParameterfvSGIS(GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glPointParameterfvSGIS_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glInstrumentsBufferSGIX(GLsizei size, IntPtr buffer)

        public static
        void glInstrumentsBufferSGIX(GLsizei size, IntPtr buffer)
        {
            glInstrumentsBufferSGIX_(size, buffer);
        }

        #endregion

        #region glInstrumentsBufferSGIX(GLsizei size, object buffer)

        public static
        void glInstrumentsBufferSGIX(GLsizei size, object buffer)
        {
            GCHandle h0 = GCHandle.Alloc(buffer, GCHandleType.Pinned);
            try
            {
                glInstrumentsBufferSGIX_(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glInstrumentsBufferSGIX(GLsizei size, GLint[] buffer)

        public static
        void glInstrumentsBufferSGIX(GLsizei size, GLint[] buffer)
        {
            GCHandle h0 = GCHandle.Alloc(buffer, GCHandleType.Pinned);
            try
            {
                glInstrumentsBufferSGIX_(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glPollInstrumentsSGIX(IntPtr marker_p)

        public static
        GLint glPollInstrumentsSGIX(IntPtr marker_p)
        {
            return glPollInstrumentsSGIX_(marker_p);
        }

        #endregion

        #region glPollInstrumentsSGIX(object marker_p)

        public static
        GLint glPollInstrumentsSGIX(object marker_p)
        {
            GCHandle h0 = GCHandle.Alloc(marker_p, GCHandleType.Pinned);
            try
            {
                return glPollInstrumentsSGIX_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glPollInstrumentsSGIX(GLint[] marker_p)

        public static
        GLint glPollInstrumentsSGIX(GLint[] marker_p)
        {
            GCHandle h0 = GCHandle.Alloc(marker_p, GCHandleType.Pinned);
            try
            {
                return glPollInstrumentsSGIX_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glDeformationMap3dSGIX(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, IntPtr points)

        public static
        void glDeformationMap3dSGIX(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, IntPtr points)
        {
            glDeformationMap3dSGIX_(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points);
        }

        #endregion

        #region glDeformationMap3dSGIX(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, object points)

        public static
        void glDeformationMap3dSGIX(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, object points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                glDeformationMap3dSGIX_(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glDeformationMap3dSGIX(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, GLdouble[] points)

        public static
        void glDeformationMap3dSGIX(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, GLdouble[] points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                glDeformationMap3dSGIX_(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glDeformationMap3fSGIX(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, IntPtr points)

        public static
        void glDeformationMap3fSGIX(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, IntPtr points)
        {
            glDeformationMap3fSGIX_(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points);
        }

        #endregion

        #region glDeformationMap3fSGIX(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, object points)

        public static
        void glDeformationMap3fSGIX(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, object points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                glDeformationMap3fSGIX_(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glDeformationMap3fSGIX(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, GLfloat[] points)

        public static
        void glDeformationMap3fSGIX(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, GLfloat[] points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                glDeformationMap3fSGIX_(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glReferencePlaneSGIX(IntPtr equation)

        public static
        void glReferencePlaneSGIX(IntPtr equation)
        {
            glReferencePlaneSGIX_(equation);
        }

        #endregion

        #region glReferencePlaneSGIX(object equation)

        public static
        void glReferencePlaneSGIX(object equation)
        {
            GCHandle h0 = GCHandle.Alloc(equation, GCHandleType.Pinned);
            try
            {
                glReferencePlaneSGIX_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glReferencePlaneSGIX(GLdouble[] equation)

        public static
        void glReferencePlaneSGIX(GLdouble[] equation)
        {
            GCHandle h0 = GCHandle.Alloc(equation, GCHandleType.Pinned);
            try
            {
                glReferencePlaneSGIX_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glFogFuncSGIS(GLsizei n, IntPtr points)

        public static
        void glFogFuncSGIS(GLsizei n, IntPtr points)
        {
            glFogFuncSGIS_(n, points);
        }

        #endregion

        #region glFogFuncSGIS(GLsizei n, object points)

        public static
        void glFogFuncSGIS(GLsizei n, object points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                glFogFuncSGIS_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glFogFuncSGIS(GLsizei n, GLfloat[] points)

        public static
        void glFogFuncSGIS(GLsizei n, GLfloat[] points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                glFogFuncSGIS_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetFogFuncSGIS(IntPtr points)

        public static
        void glGetFogFuncSGIS(IntPtr points)
        {
            glGetFogFuncSGIS_(points);
        }

        #endregion

        #region glGetFogFuncSGIS(object points)

        public static
        void glGetFogFuncSGIS(object points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                glGetFogFuncSGIS_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetFogFuncSGIS(GLfloat[] points)

        public static
        void glGetFogFuncSGIS(GLfloat[] points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                glGetFogFuncSGIS_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glImageTransformParameterivHP(GLenum target, GLenum pname, IntPtr parameters)

        public static
        void glImageTransformParameterivHP(GLenum target, GLenum pname, IntPtr parameters)
        {
            glImageTransformParameterivHP_(target, pname, parameters);
        }

        #endregion

        #region glImageTransformParameterivHP(GLenum target, GLenum pname, object parameters)

        public static
        void glImageTransformParameterivHP(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glImageTransformParameterivHP_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glImageTransformParameterivHP(GLenum target, GLenum pname, GLint[] parameters)

        public static
        void glImageTransformParameterivHP(GLenum target, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glImageTransformParameterivHP_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glImageTransformParameterfvHP(GLenum target, GLenum pname, IntPtr parameters)

        public static
        void glImageTransformParameterfvHP(GLenum target, GLenum pname, IntPtr parameters)
        {
            glImageTransformParameterfvHP_(target, pname, parameters);
        }

        #endregion

        #region glImageTransformParameterfvHP(GLenum target, GLenum pname, object parameters)

        public static
        void glImageTransformParameterfvHP(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glImageTransformParameterfvHP_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glImageTransformParameterfvHP(GLenum target, GLenum pname, GLfloat[] parameters)

        public static
        void glImageTransformParameterfvHP(GLenum target, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glImageTransformParameterfvHP_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetImageTransformParameterivHP(GLenum target, GLenum pname, IntPtr parameters)

        public static
        void glGetImageTransformParameterivHP(GLenum target, GLenum pname, IntPtr parameters)
        {
            glGetImageTransformParameterivHP_(target, pname, parameters);
        }

        #endregion

        #region glGetImageTransformParameterivHP(GLenum target, GLenum pname, object parameters)

        public static
        void glGetImageTransformParameterivHP(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetImageTransformParameterivHP_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetImageTransformParameterivHP(GLenum target, GLenum pname, GLint[] parameters)

        public static
        void glGetImageTransformParameterivHP(GLenum target, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetImageTransformParameterivHP_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetImageTransformParameterfvHP(GLenum target, GLenum pname, IntPtr parameters)

        public static
        void glGetImageTransformParameterfvHP(GLenum target, GLenum pname, IntPtr parameters)
        {
            glGetImageTransformParameterfvHP_(target, pname, parameters);
        }

        #endregion

        #region glGetImageTransformParameterfvHP(GLenum target, GLenum pname, object parameters)

        public static
        void glGetImageTransformParameterfvHP(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetImageTransformParameterfvHP_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetImageTransformParameterfvHP(GLenum target, GLenum pname, GLfloat[] parameters)

        public static
        void glGetImageTransformParameterfvHP(GLenum target, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetImageTransformParameterfvHP_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glColorSubTableEXT(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, IntPtr data)

        public static
        void glColorSubTableEXT(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, IntPtr data)
        {
            glColorSubTableEXT_(target, start, count, format, type, data);
        }

        #endregion

        #region glColorSubTableEXT(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, object data)

        public static
        void glColorSubTableEXT(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                glColorSubTableEXT_(target, start, count, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glColorTableEXT(GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, IntPtr table)

        public static
        void glColorTableEXT(GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, IntPtr table)
        {
            glColorTableEXT_(target, internalFormat, width, format, type, table);
        }

        #endregion

        #region glColorTableEXT(GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, object table)

        public static
        void glColorTableEXT(GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, object table)
        {
            GCHandle h0 = GCHandle.Alloc(table, GCHandleType.Pinned);
            try
            {
                glColorTableEXT_(target, internalFormat, width, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetColorTableEXT(GLenum target, GLenum format, GLenum type, IntPtr data)

        public static
        void glGetColorTableEXT(GLenum target, GLenum format, GLenum type, IntPtr data)
        {
            glGetColorTableEXT_(target, format, type, data);
        }

        #endregion

        #region glGetColorTableEXT(GLenum target, GLenum format, GLenum type, object data)

        public static
        void glGetColorTableEXT(GLenum target, GLenum format, GLenum type, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                glGetColorTableEXT_(target, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetColorTableParameterivEXT(GLenum target, GLenum pname, IntPtr parameters)

        public static
        void glGetColorTableParameterivEXT(GLenum target, GLenum pname, IntPtr parameters)
        {
            glGetColorTableParameterivEXT_(target, pname, parameters);
        }

        #endregion

        #region glGetColorTableParameterivEXT(GLenum target, GLenum pname, object parameters)

        public static
        void glGetColorTableParameterivEXT(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetColorTableParameterivEXT_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetColorTableParameterivEXT(GLenum target, GLenum pname, GLint[] parameters)

        public static
        void glGetColorTableParameterivEXT(GLenum target, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetColorTableParameterivEXT_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetColorTableParameterfvEXT(GLenum target, GLenum pname, IntPtr parameters)

        public static
        void glGetColorTableParameterfvEXT(GLenum target, GLenum pname, IntPtr parameters)
        {
            glGetColorTableParameterfvEXT_(target, pname, parameters);
        }

        #endregion

        #region glGetColorTableParameterfvEXT(GLenum target, GLenum pname, object parameters)

        public static
        void glGetColorTableParameterfvEXT(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetColorTableParameterfvEXT_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetColorTableParameterfvEXT(GLenum target, GLenum pname, GLfloat[] parameters)

        public static
        void glGetColorTableParameterfvEXT(GLenum target, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetColorTableParameterfvEXT_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetListParameterfvSGIX(GLuint list, GLenum pname, IntPtr parameters)

        public static
        void glGetListParameterfvSGIX(GLuint list, GLenum pname, IntPtr parameters)
        {
            glGetListParameterfvSGIX_(list, pname, parameters);
        }

        #endregion

        #region glGetListParameterfvSGIX(GLuint list, GLenum pname, object parameters)

        public static
        void glGetListParameterfvSGIX(GLuint list, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetListParameterfvSGIX_(list, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetListParameterfvSGIX(GLuint list, GLenum pname, GLfloat[] parameters)

        public static
        void glGetListParameterfvSGIX(GLuint list, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetListParameterfvSGIX_(list, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetListParameterivSGIX(GLuint list, GLenum pname, IntPtr parameters)

        public static
        void glGetListParameterivSGIX(GLuint list, GLenum pname, IntPtr parameters)
        {
            glGetListParameterivSGIX_(list, pname, parameters);
        }

        #endregion

        #region glGetListParameterivSGIX(GLuint list, GLenum pname, object parameters)

        public static
        void glGetListParameterivSGIX(GLuint list, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetListParameterivSGIX_(list, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetListParameterivSGIX(GLuint list, GLenum pname, GLint[] parameters)

        public static
        void glGetListParameterivSGIX(GLuint list, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetListParameterivSGIX_(list, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glListParameterfvSGIX(GLuint list, GLenum pname, IntPtr parameters)

        public static
        void glListParameterfvSGIX(GLuint list, GLenum pname, IntPtr parameters)
        {
            glListParameterfvSGIX_(list, pname, parameters);
        }

        #endregion

        #region glListParameterfvSGIX(GLuint list, GLenum pname, object parameters)

        public static
        void glListParameterfvSGIX(GLuint list, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glListParameterfvSGIX_(list, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glListParameterfvSGIX(GLuint list, GLenum pname, GLfloat[] parameters)

        public static
        void glListParameterfvSGIX(GLuint list, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glListParameterfvSGIX_(list, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glListParameterivSGIX(GLuint list, GLenum pname, IntPtr parameters)

        public static
        void glListParameterivSGIX(GLuint list, GLenum pname, IntPtr parameters)
        {
            glListParameterivSGIX_(list, pname, parameters);
        }

        #endregion

        #region glListParameterivSGIX(GLuint list, GLenum pname, object parameters)

        public static
        void glListParameterivSGIX(GLuint list, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glListParameterivSGIX_(list, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glListParameterivSGIX(GLuint list, GLenum pname, GLint[] parameters)

        public static
        void glListParameterivSGIX(GLuint list, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glListParameterivSGIX_(list, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glCullParameterdvEXT(GLenum pname, IntPtr parameters)

        public static
        void glCullParameterdvEXT(GLenum pname, IntPtr parameters)
        {
            glCullParameterdvEXT_(pname, parameters);
        }

        #endregion

        #region glCullParameterdvEXT(GLenum pname, object parameters)

        public static
        void glCullParameterdvEXT(GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glCullParameterdvEXT_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glCullParameterdvEXT(GLenum pname, GLdouble[] parameters)

        public static
        void glCullParameterdvEXT(GLenum pname, GLdouble[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glCullParameterdvEXT_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glCullParameterfvEXT(GLenum pname, IntPtr parameters)

        public static
        void glCullParameterfvEXT(GLenum pname, IntPtr parameters)
        {
            glCullParameterfvEXT_(pname, parameters);
        }

        #endregion

        #region glCullParameterfvEXT(GLenum pname, object parameters)

        public static
        void glCullParameterfvEXT(GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glCullParameterfvEXT_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glCullParameterfvEXT(GLenum pname, GLfloat[] parameters)

        public static
        void glCullParameterfvEXT(GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glCullParameterfvEXT_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glFragmentLightfvSGIX(GLenum light, GLenum pname, IntPtr parameters)

        public static
        void glFragmentLightfvSGIX(GLenum light, GLenum pname, IntPtr parameters)
        {
            glFragmentLightfvSGIX_(light, pname, parameters);
        }

        #endregion

        #region glFragmentLightfvSGIX(GLenum light, GLenum pname, object parameters)

        public static
        void glFragmentLightfvSGIX(GLenum light, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glFragmentLightfvSGIX_(light, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glFragmentLightfvSGIX(GLenum light, GLenum pname, GLfloat[] parameters)

        public static
        void glFragmentLightfvSGIX(GLenum light, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glFragmentLightfvSGIX_(light, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glFragmentLightivSGIX(GLenum light, GLenum pname, IntPtr parameters)

        public static
        void glFragmentLightivSGIX(GLenum light, GLenum pname, IntPtr parameters)
        {
            glFragmentLightivSGIX_(light, pname, parameters);
        }

        #endregion

        #region glFragmentLightivSGIX(GLenum light, GLenum pname, object parameters)

        public static
        void glFragmentLightivSGIX(GLenum light, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glFragmentLightivSGIX_(light, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glFragmentLightivSGIX(GLenum light, GLenum pname, GLint[] parameters)

        public static
        void glFragmentLightivSGIX(GLenum light, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glFragmentLightivSGIX_(light, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glFragmentLightModelfvSGIX(GLenum pname, IntPtr parameters)

        public static
        void glFragmentLightModelfvSGIX(GLenum pname, IntPtr parameters)
        {
            glFragmentLightModelfvSGIX_(pname, parameters);
        }

        #endregion

        #region glFragmentLightModelfvSGIX(GLenum pname, object parameters)

        public static
        void glFragmentLightModelfvSGIX(GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glFragmentLightModelfvSGIX_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glFragmentLightModelfvSGIX(GLenum pname, GLfloat[] parameters)

        public static
        void glFragmentLightModelfvSGIX(GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glFragmentLightModelfvSGIX_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glFragmentLightModelivSGIX(GLenum pname, IntPtr parameters)

        public static
        void glFragmentLightModelivSGIX(GLenum pname, IntPtr parameters)
        {
            glFragmentLightModelivSGIX_(pname, parameters);
        }

        #endregion

        #region glFragmentLightModelivSGIX(GLenum pname, object parameters)

        public static
        void glFragmentLightModelivSGIX(GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glFragmentLightModelivSGIX_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glFragmentLightModelivSGIX(GLenum pname, GLint[] parameters)

        public static
        void glFragmentLightModelivSGIX(GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glFragmentLightModelivSGIX_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glFragmentMaterialfvSGIX(GLenum face, GLenum pname, IntPtr parameters)

        public static
        void glFragmentMaterialfvSGIX(GLenum face, GLenum pname, IntPtr parameters)
        {
            glFragmentMaterialfvSGIX_(face, pname, parameters);
        }

        #endregion

        #region glFragmentMaterialfvSGIX(GLenum face, GLenum pname, object parameters)

        public static
        void glFragmentMaterialfvSGIX(GLenum face, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glFragmentMaterialfvSGIX_(face, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glFragmentMaterialfvSGIX(GLenum face, GLenum pname, GLfloat[] parameters)

        public static
        void glFragmentMaterialfvSGIX(GLenum face, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glFragmentMaterialfvSGIX_(face, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glFragmentMaterialivSGIX(GLenum face, GLenum pname, IntPtr parameters)

        public static
        void glFragmentMaterialivSGIX(GLenum face, GLenum pname, IntPtr parameters)
        {
            glFragmentMaterialivSGIX_(face, pname, parameters);
        }

        #endregion

        #region glFragmentMaterialivSGIX(GLenum face, GLenum pname, object parameters)

        public static
        void glFragmentMaterialivSGIX(GLenum face, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glFragmentMaterialivSGIX_(face, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glFragmentMaterialivSGIX(GLenum face, GLenum pname, GLint[] parameters)

        public static
        void glFragmentMaterialivSGIX(GLenum face, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glFragmentMaterialivSGIX_(face, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetFragmentLightfvSGIX(GLenum light, GLenum pname, IntPtr parameters)

        public static
        void glGetFragmentLightfvSGIX(GLenum light, GLenum pname, IntPtr parameters)
        {
            glGetFragmentLightfvSGIX_(light, pname, parameters);
        }

        #endregion

        #region glGetFragmentLightfvSGIX(GLenum light, GLenum pname, object parameters)

        public static
        void glGetFragmentLightfvSGIX(GLenum light, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetFragmentLightfvSGIX_(light, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetFragmentLightfvSGIX(GLenum light, GLenum pname, GLfloat[] parameters)

        public static
        void glGetFragmentLightfvSGIX(GLenum light, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetFragmentLightfvSGIX_(light, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetFragmentLightivSGIX(GLenum light, GLenum pname, IntPtr parameters)

        public static
        void glGetFragmentLightivSGIX(GLenum light, GLenum pname, IntPtr parameters)
        {
            glGetFragmentLightivSGIX_(light, pname, parameters);
        }

        #endregion

        #region glGetFragmentLightivSGIX(GLenum light, GLenum pname, object parameters)

        public static
        void glGetFragmentLightivSGIX(GLenum light, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetFragmentLightivSGIX_(light, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetFragmentLightivSGIX(GLenum light, GLenum pname, GLint[] parameters)

        public static
        void glGetFragmentLightivSGIX(GLenum light, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetFragmentLightivSGIX_(light, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetFragmentMaterialfvSGIX(GLenum face, GLenum pname, IntPtr parameters)

        public static
        void glGetFragmentMaterialfvSGIX(GLenum face, GLenum pname, IntPtr parameters)
        {
            glGetFragmentMaterialfvSGIX_(face, pname, parameters);
        }

        #endregion

        #region glGetFragmentMaterialfvSGIX(GLenum face, GLenum pname, object parameters)

        public static
        void glGetFragmentMaterialfvSGIX(GLenum face, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetFragmentMaterialfvSGIX_(face, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetFragmentMaterialfvSGIX(GLenum face, GLenum pname, GLfloat[] parameters)

        public static
        void glGetFragmentMaterialfvSGIX(GLenum face, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetFragmentMaterialfvSGIX_(face, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetFragmentMaterialivSGIX(GLenum face, GLenum pname, IntPtr parameters)

        public static
        void glGetFragmentMaterialivSGIX(GLenum face, GLenum pname, IntPtr parameters)
        {
            glGetFragmentMaterialivSGIX_(face, pname, parameters);
        }

        #endregion

        #region glGetFragmentMaterialivSGIX(GLenum face, GLenum pname, object parameters)

        public static
        void glGetFragmentMaterialivSGIX(GLenum face, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetFragmentMaterialivSGIX_(face, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetFragmentMaterialivSGIX(GLenum face, GLenum pname, GLint[] parameters)

        public static
        void glGetFragmentMaterialivSGIX(GLenum face, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetFragmentMaterialivSGIX_(face, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glDrawRangeElementsEXT(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, IntPtr indices)

        public static
        void glDrawRangeElementsEXT(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, IntPtr indices)
        {
            glDrawRangeElementsEXT_(mode, start, end, count, type, indices);
        }

        #endregion

        #region glDrawRangeElementsEXT(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, object indices)

        public static
        void glDrawRangeElementsEXT(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, object indices)
        {
            GCHandle h0 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                glDrawRangeElementsEXT_(mode, start, end, count, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glFinishAsyncSGIX(IntPtr markerp)

        public static
        GLint glFinishAsyncSGIX(IntPtr markerp)
        {
            return glFinishAsyncSGIX_(markerp);
        }

        #endregion

        #region glFinishAsyncSGIX(object markerp)

        public static
        GLint glFinishAsyncSGIX(object markerp)
        {
            GCHandle h0 = GCHandle.Alloc(markerp, GCHandleType.Pinned);
            try
            {
                return glFinishAsyncSGIX_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glFinishAsyncSGIX(GLuint[] markerp)

        public static
        GLint glFinishAsyncSGIX(GLuint[] markerp)
        {
            GCHandle h0 = GCHandle.Alloc(markerp, GCHandleType.Pinned);
            try
            {
                return glFinishAsyncSGIX_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glPollAsyncSGIX(IntPtr markerp)

        public static
        GLint glPollAsyncSGIX(IntPtr markerp)
        {
            return glPollAsyncSGIX_(markerp);
        }

        #endregion

        #region glPollAsyncSGIX(object markerp)

        public static
        GLint glPollAsyncSGIX(object markerp)
        {
            GCHandle h0 = GCHandle.Alloc(markerp, GCHandleType.Pinned);
            try
            {
                return glPollAsyncSGIX_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glPollAsyncSGIX(GLuint[] markerp)

        public static
        GLint glPollAsyncSGIX(GLuint[] markerp)
        {
            GCHandle h0 = GCHandle.Alloc(markerp, GCHandleType.Pinned);
            try
            {
                return glPollAsyncSGIX_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexPointervINTEL(GLint size, GLenum type, IntPtr pointer)

        public static
        void glVertexPointervINTEL(GLint size, GLenum type, IntPtr pointer)
        {
            glVertexPointervINTEL_(size, type, pointer);
        }

        #endregion

        #region glVertexPointervINTEL(GLint size, GLenum type, object pointer)

        public static
        void glVertexPointervINTEL(GLint size, GLenum type, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                glVertexPointervINTEL_(size, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexPointervINTEL(GLint size, GLenum type, IntPtr[] pointer)

        public static
        void glVertexPointervINTEL(GLint size, GLenum type, IntPtr[] pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                glVertexPointervINTEL_(size, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glNormalPointervINTEL(GLenum type, IntPtr pointer)

        public static
        void glNormalPointervINTEL(GLenum type, IntPtr pointer)
        {
            glNormalPointervINTEL_(type, pointer);
        }

        #endregion

        #region glNormalPointervINTEL(GLenum type, object pointer)

        public static
        void glNormalPointervINTEL(GLenum type, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                glNormalPointervINTEL_(type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glNormalPointervINTEL(GLenum type, IntPtr[] pointer)

        public static
        void glNormalPointervINTEL(GLenum type, IntPtr[] pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                glNormalPointervINTEL_(type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glColorPointervINTEL(GLint size, GLenum type, IntPtr pointer)

        public static
        void glColorPointervINTEL(GLint size, GLenum type, IntPtr pointer)
        {
            glColorPointervINTEL_(size, type, pointer);
        }

        #endregion

        #region glColorPointervINTEL(GLint size, GLenum type, object pointer)

        public static
        void glColorPointervINTEL(GLint size, GLenum type, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                glColorPointervINTEL_(size, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glColorPointervINTEL(GLint size, GLenum type, IntPtr[] pointer)

        public static
        void glColorPointervINTEL(GLint size, GLenum type, IntPtr[] pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                glColorPointervINTEL_(size, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexCoordPointervINTEL(GLint size, GLenum type, IntPtr pointer)

        public static
        void glTexCoordPointervINTEL(GLint size, GLenum type, IntPtr pointer)
        {
            glTexCoordPointervINTEL_(size, type, pointer);
        }

        #endregion

        #region glTexCoordPointervINTEL(GLint size, GLenum type, object pointer)

        public static
        void glTexCoordPointervINTEL(GLint size, GLenum type, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                glTexCoordPointervINTEL_(size, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexCoordPointervINTEL(GLint size, GLenum type, IntPtr[] pointer)

        public static
        void glTexCoordPointervINTEL(GLint size, GLenum type, IntPtr[] pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                glTexCoordPointervINTEL_(size, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glPixelTransformParameterivEXT(GLenum target, GLenum pname, IntPtr parameters)

        public static
        void glPixelTransformParameterivEXT(GLenum target, GLenum pname, IntPtr parameters)
        {
            glPixelTransformParameterivEXT_(target, pname, parameters);
        }

        #endregion

        #region glPixelTransformParameterivEXT(GLenum target, GLenum pname, object parameters)

        public static
        void glPixelTransformParameterivEXT(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glPixelTransformParameterivEXT_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glPixelTransformParameterivEXT(GLenum target, GLenum pname, GLint[] parameters)

        public static
        void glPixelTransformParameterivEXT(GLenum target, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glPixelTransformParameterivEXT_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glPixelTransformParameterfvEXT(GLenum target, GLenum pname, IntPtr parameters)

        public static
        void glPixelTransformParameterfvEXT(GLenum target, GLenum pname, IntPtr parameters)
        {
            glPixelTransformParameterfvEXT_(target, pname, parameters);
        }

        #endregion

        #region glPixelTransformParameterfvEXT(GLenum target, GLenum pname, object parameters)

        public static
        void glPixelTransformParameterfvEXT(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glPixelTransformParameterfvEXT_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glPixelTransformParameterfvEXT(GLenum target, GLenum pname, GLfloat[] parameters)

        public static
        void glPixelTransformParameterfvEXT(GLenum target, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glPixelTransformParameterfvEXT_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glSecondaryColor3bvEXT(IntPtr v)

        public static
        void glSecondaryColor3bvEXT(IntPtr v)
        {
            glSecondaryColor3bvEXT_(v);
        }

        #endregion

        #region glSecondaryColor3bvEXT(object v)

        public static
        void glSecondaryColor3bvEXT(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glSecondaryColor3bvEXT_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glSecondaryColor3bvEXT(GLbyte[] v)

        public static
        void glSecondaryColor3bvEXT(GLbyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glSecondaryColor3bvEXT_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glSecondaryColor3dvEXT(IntPtr v)

        public static
        void glSecondaryColor3dvEXT(IntPtr v)
        {
            glSecondaryColor3dvEXT_(v);
        }

        #endregion

        #region glSecondaryColor3dvEXT(object v)

        public static
        void glSecondaryColor3dvEXT(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glSecondaryColor3dvEXT_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glSecondaryColor3dvEXT(GLdouble[] v)

        public static
        void glSecondaryColor3dvEXT(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glSecondaryColor3dvEXT_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glSecondaryColor3fvEXT(IntPtr v)

        public static
        void glSecondaryColor3fvEXT(IntPtr v)
        {
            glSecondaryColor3fvEXT_(v);
        }

        #endregion

        #region glSecondaryColor3fvEXT(object v)

        public static
        void glSecondaryColor3fvEXT(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glSecondaryColor3fvEXT_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glSecondaryColor3fvEXT(GLfloat[] v)

        public static
        void glSecondaryColor3fvEXT(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glSecondaryColor3fvEXT_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glSecondaryColor3ivEXT(IntPtr v)

        public static
        void glSecondaryColor3ivEXT(IntPtr v)
        {
            glSecondaryColor3ivEXT_(v);
        }

        #endregion

        #region glSecondaryColor3ivEXT(object v)

        public static
        void glSecondaryColor3ivEXT(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glSecondaryColor3ivEXT_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glSecondaryColor3ivEXT(GLint[] v)

        public static
        void glSecondaryColor3ivEXT(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glSecondaryColor3ivEXT_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glSecondaryColor3svEXT(IntPtr v)

        public static
        void glSecondaryColor3svEXT(IntPtr v)
        {
            glSecondaryColor3svEXT_(v);
        }

        #endregion

        #region glSecondaryColor3svEXT(object v)

        public static
        void glSecondaryColor3svEXT(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glSecondaryColor3svEXT_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glSecondaryColor3svEXT(GLshort[] v)

        public static
        void glSecondaryColor3svEXT(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glSecondaryColor3svEXT_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glSecondaryColor3ubvEXT(IntPtr v)

        public static
        void glSecondaryColor3ubvEXT(IntPtr v)
        {
            glSecondaryColor3ubvEXT_(v);
        }

        #endregion

        #region glSecondaryColor3ubvEXT(object v)

        public static
        void glSecondaryColor3ubvEXT(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glSecondaryColor3ubvEXT_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glSecondaryColor3ubvEXT(GLubyte[] v)

        public static
        void glSecondaryColor3ubvEXT(GLubyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glSecondaryColor3ubvEXT_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glSecondaryColor3uivEXT(IntPtr v)

        public static
        void glSecondaryColor3uivEXT(IntPtr v)
        {
            glSecondaryColor3uivEXT_(v);
        }

        #endregion

        #region glSecondaryColor3uivEXT(object v)

        public static
        void glSecondaryColor3uivEXT(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glSecondaryColor3uivEXT_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glSecondaryColor3uivEXT(GLuint[] v)

        public static
        void glSecondaryColor3uivEXT(GLuint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glSecondaryColor3uivEXT_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glSecondaryColor3usvEXT(IntPtr v)

        public static
        void glSecondaryColor3usvEXT(IntPtr v)
        {
            glSecondaryColor3usvEXT_(v);
        }

        #endregion

        #region glSecondaryColor3usvEXT(object v)

        public static
        void glSecondaryColor3usvEXT(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glSecondaryColor3usvEXT_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glSecondaryColor3usvEXT(GLushort[] v)

        public static
        void glSecondaryColor3usvEXT(GLushort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glSecondaryColor3usvEXT_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glSecondaryColorPointerEXT(GLint size, GLenum type, GLsizei stride, IntPtr pointer)

        public static
        void glSecondaryColorPointerEXT(GLint size, GLenum type, GLsizei stride, IntPtr pointer)
        {
            glSecondaryColorPointerEXT_(size, type, stride, pointer);
        }

        #endregion

        #region glSecondaryColorPointerEXT(GLint size, GLenum type, GLsizei stride, object pointer)

        public static
        void glSecondaryColorPointerEXT(GLint size, GLenum type, GLsizei stride, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                glSecondaryColorPointerEXT_(size, type, stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiDrawArraysEXT(GLenum mode, IntPtr first, IntPtr count, GLsizei primcount)

        public static
        void glMultiDrawArraysEXT(GLenum mode, IntPtr first, IntPtr count, GLsizei primcount)
        {
            glMultiDrawArraysEXT_(mode, first, count, primcount);
        }

        #endregion

        #region glMultiDrawArraysEXT(GLenum mode, IntPtr first, object count, GLsizei primcount)

        public static
        void glMultiDrawArraysEXT(GLenum mode, IntPtr first, object count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                glMultiDrawArraysEXT_(mode, first, h0.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiDrawArraysEXT(GLenum mode, IntPtr first, GLsizei[] count, GLsizei primcount)

        public static
        void glMultiDrawArraysEXT(GLenum mode, IntPtr first, GLsizei[] count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                glMultiDrawArraysEXT_(mode, first, h0.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiDrawArraysEXT(GLenum mode, object first, IntPtr count, GLsizei primcount)

        public static
        void glMultiDrawArraysEXT(GLenum mode, object first, IntPtr count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            try
            {
                glMultiDrawArraysEXT_(mode, h0.AddrOfPinnedObject(), count, primcount);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiDrawArraysEXT(GLenum mode, object first, object count, GLsizei primcount)

        public static
        void glMultiDrawArraysEXT(GLenum mode, object first, object count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                glMultiDrawArraysEXT_(mode, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glMultiDrawArraysEXT(GLenum mode, object first, GLsizei[] count, GLsizei primcount)

        public static
        void glMultiDrawArraysEXT(GLenum mode, object first, GLsizei[] count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                glMultiDrawArraysEXT_(mode, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glMultiDrawArraysEXT(GLenum mode, GLint[] first, IntPtr count, GLsizei primcount)

        public static
        void glMultiDrawArraysEXT(GLenum mode, GLint[] first, IntPtr count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            try
            {
                glMultiDrawArraysEXT_(mode, h0.AddrOfPinnedObject(), count, primcount);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiDrawArraysEXT(GLenum mode, GLint[] first, object count, GLsizei primcount)

        public static
        void glMultiDrawArraysEXT(GLenum mode, GLint[] first, object count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                glMultiDrawArraysEXT_(mode, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glMultiDrawArraysEXT(GLenum mode, GLint[] first, GLsizei[] count, GLsizei primcount)

        public static
        void glMultiDrawArraysEXT(GLenum mode, GLint[] first, GLsizei[] count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                glMultiDrawArraysEXT_(mode, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glMultiDrawElementsEXT(GLenum mode, IntPtr count, GLenum type, IntPtr indices, GLsizei primcount)

        public static
        void glMultiDrawElementsEXT(GLenum mode, IntPtr count, GLenum type, IntPtr indices, GLsizei primcount)
        {
            glMultiDrawElementsEXT_(mode, count, type, indices, primcount);
        }

        #endregion

        #region glMultiDrawElementsEXT(GLenum mode, IntPtr count, GLenum type, object indices, GLsizei primcount)

        public static
        void glMultiDrawElementsEXT(GLenum mode, IntPtr count, GLenum type, object indices, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                glMultiDrawElementsEXT_(mode, count, type, h0.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiDrawElementsEXT(GLenum mode, IntPtr count, GLenum type, IntPtr[] indices, GLsizei primcount)

        public static
        void glMultiDrawElementsEXT(GLenum mode, IntPtr count, GLenum type, IntPtr[] indices, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                glMultiDrawElementsEXT_(mode, count, type, h0.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiDrawElementsEXT(GLenum mode, object count, GLenum type, IntPtr indices, GLsizei primcount)

        public static
        void glMultiDrawElementsEXT(GLenum mode, object count, GLenum type, IntPtr indices, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                glMultiDrawElementsEXT_(mode, h0.AddrOfPinnedObject(), type, indices, primcount);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiDrawElementsEXT(GLenum mode, object count, GLenum type, object indices, GLsizei primcount)

        public static
        void glMultiDrawElementsEXT(GLenum mode, object count, GLenum type, object indices, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                glMultiDrawElementsEXT_(mode, h0.AddrOfPinnedObject(), type, h1.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glMultiDrawElementsEXT(GLenum mode, object count, GLenum type, IntPtr[] indices, GLsizei primcount)

        public static
        void glMultiDrawElementsEXT(GLenum mode, object count, GLenum type, IntPtr[] indices, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                glMultiDrawElementsEXT_(mode, h0.AddrOfPinnedObject(), type, h1.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glMultiDrawElementsEXT(GLenum mode, GLsizei[] count, GLenum type, IntPtr indices, GLsizei primcount)

        public static
        void glMultiDrawElementsEXT(GLenum mode, GLsizei[] count, GLenum type, IntPtr indices, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                glMultiDrawElementsEXT_(mode, h0.AddrOfPinnedObject(), type, indices, primcount);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiDrawElementsEXT(GLenum mode, GLsizei[] count, GLenum type, object indices, GLsizei primcount)

        public static
        void glMultiDrawElementsEXT(GLenum mode, GLsizei[] count, GLenum type, object indices, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                glMultiDrawElementsEXT_(mode, h0.AddrOfPinnedObject(), type, h1.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glMultiDrawElementsEXT(GLenum mode, GLsizei[] count, GLenum type, IntPtr[] indices, GLsizei primcount)

        public static
        void glMultiDrawElementsEXT(GLenum mode, GLsizei[] count, GLenum type, IntPtr[] indices, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                glMultiDrawElementsEXT_(mode, h0.AddrOfPinnedObject(), type, h1.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glFogCoordfvEXT(IntPtr coord)

        public static
        void glFogCoordfvEXT(IntPtr coord)
        {
            glFogCoordfvEXT_(coord);
        }

        #endregion

        #region glFogCoordfvEXT(object coord)

        public static
        void glFogCoordfvEXT(object coord)
        {
            GCHandle h0 = GCHandle.Alloc(coord, GCHandleType.Pinned);
            try
            {
                glFogCoordfvEXT_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glFogCoordfvEXT(GLfloat[] coord)

        public static
        void glFogCoordfvEXT(GLfloat[] coord)
        {
            GCHandle h0 = GCHandle.Alloc(coord, GCHandleType.Pinned);
            try
            {
                glFogCoordfvEXT_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glFogCoorddvEXT(IntPtr coord)

        public static
        void glFogCoorddvEXT(IntPtr coord)
        {
            glFogCoorddvEXT_(coord);
        }

        #endregion

        #region glFogCoorddvEXT(object coord)

        public static
        void glFogCoorddvEXT(object coord)
        {
            GCHandle h0 = GCHandle.Alloc(coord, GCHandleType.Pinned);
            try
            {
                glFogCoorddvEXT_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glFogCoorddvEXT(GLdouble[] coord)

        public static
        void glFogCoorddvEXT(GLdouble[] coord)
        {
            GCHandle h0 = GCHandle.Alloc(coord, GCHandleType.Pinned);
            try
            {
                glFogCoorddvEXT_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glFogCoordPointerEXT(GLenum type, GLsizei stride, IntPtr pointer)

        public static
        void glFogCoordPointerEXT(GLenum type, GLsizei stride, IntPtr pointer)
        {
            glFogCoordPointerEXT_(type, stride, pointer);
        }

        #endregion

        #region glFogCoordPointerEXT(GLenum type, GLsizei stride, object pointer)

        public static
        void glFogCoordPointerEXT(GLenum type, GLsizei stride, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                glFogCoordPointerEXT_(type, stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTangent3bvEXT(IntPtr v)

        public static
        void glTangent3bvEXT(IntPtr v)
        {
            glTangent3bvEXT_(v);
        }

        #endregion

        #region glTangent3bvEXT(object v)

        public static
        void glTangent3bvEXT(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTangent3bvEXT_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTangent3bvEXT(GLbyte[] v)

        public static
        void glTangent3bvEXT(GLbyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTangent3bvEXT_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTangent3dvEXT(IntPtr v)

        public static
        void glTangent3dvEXT(IntPtr v)
        {
            glTangent3dvEXT_(v);
        }

        #endregion

        #region glTangent3dvEXT(object v)

        public static
        void glTangent3dvEXT(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTangent3dvEXT_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTangent3dvEXT(GLdouble[] v)

        public static
        void glTangent3dvEXT(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTangent3dvEXT_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTangent3fvEXT(IntPtr v)

        public static
        void glTangent3fvEXT(IntPtr v)
        {
            glTangent3fvEXT_(v);
        }

        #endregion

        #region glTangent3fvEXT(object v)

        public static
        void glTangent3fvEXT(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTangent3fvEXT_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTangent3fvEXT(GLfloat[] v)

        public static
        void glTangent3fvEXT(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTangent3fvEXT_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTangent3ivEXT(IntPtr v)

        public static
        void glTangent3ivEXT(IntPtr v)
        {
            glTangent3ivEXT_(v);
        }

        #endregion

        #region glTangent3ivEXT(object v)

        public static
        void glTangent3ivEXT(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTangent3ivEXT_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTangent3ivEXT(GLint[] v)

        public static
        void glTangent3ivEXT(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTangent3ivEXT_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTangent3svEXT(IntPtr v)

        public static
        void glTangent3svEXT(IntPtr v)
        {
            glTangent3svEXT_(v);
        }

        #endregion

        #region glTangent3svEXT(object v)

        public static
        void glTangent3svEXT(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTangent3svEXT_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTangent3svEXT(GLshort[] v)

        public static
        void glTangent3svEXT(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTangent3svEXT_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glBinormal3bvEXT(IntPtr v)

        public static
        void glBinormal3bvEXT(IntPtr v)
        {
            glBinormal3bvEXT_(v);
        }

        #endregion

        #region glBinormal3bvEXT(object v)

        public static
        void glBinormal3bvEXT(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glBinormal3bvEXT_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glBinormal3bvEXT(GLbyte[] v)

        public static
        void glBinormal3bvEXT(GLbyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glBinormal3bvEXT_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glBinormal3dvEXT(IntPtr v)

        public static
        void glBinormal3dvEXT(IntPtr v)
        {
            glBinormal3dvEXT_(v);
        }

        #endregion

        #region glBinormal3dvEXT(object v)

        public static
        void glBinormal3dvEXT(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glBinormal3dvEXT_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glBinormal3dvEXT(GLdouble[] v)

        public static
        void glBinormal3dvEXT(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glBinormal3dvEXT_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glBinormal3fvEXT(IntPtr v)

        public static
        void glBinormal3fvEXT(IntPtr v)
        {
            glBinormal3fvEXT_(v);
        }

        #endregion

        #region glBinormal3fvEXT(object v)

        public static
        void glBinormal3fvEXT(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glBinormal3fvEXT_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glBinormal3fvEXT(GLfloat[] v)

        public static
        void glBinormal3fvEXT(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glBinormal3fvEXT_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glBinormal3ivEXT(IntPtr v)

        public static
        void glBinormal3ivEXT(IntPtr v)
        {
            glBinormal3ivEXT_(v);
        }

        #endregion

        #region glBinormal3ivEXT(object v)

        public static
        void glBinormal3ivEXT(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glBinormal3ivEXT_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glBinormal3ivEXT(GLint[] v)

        public static
        void glBinormal3ivEXT(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glBinormal3ivEXT_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glBinormal3svEXT(IntPtr v)

        public static
        void glBinormal3svEXT(IntPtr v)
        {
            glBinormal3svEXT_(v);
        }

        #endregion

        #region glBinormal3svEXT(object v)

        public static
        void glBinormal3svEXT(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glBinormal3svEXT_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glBinormal3svEXT(GLshort[] v)

        public static
        void glBinormal3svEXT(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glBinormal3svEXT_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTangentPointerEXT(GLenum type, GLsizei stride, IntPtr pointer)

        public static
        void glTangentPointerEXT(GLenum type, GLsizei stride, IntPtr pointer)
        {
            glTangentPointerEXT_(type, stride, pointer);
        }

        #endregion

        #region glTangentPointerEXT(GLenum type, GLsizei stride, object pointer)

        public static
        void glTangentPointerEXT(GLenum type, GLsizei stride, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                glTangentPointerEXT_(type, stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glBinormalPointerEXT(GLenum type, GLsizei stride, IntPtr pointer)

        public static
        void glBinormalPointerEXT(GLenum type, GLsizei stride, IntPtr pointer)
        {
            glBinormalPointerEXT_(type, stride, pointer);
        }

        #endregion

        #region glBinormalPointerEXT(GLenum type, GLsizei stride, object pointer)

        public static
        void glBinormalPointerEXT(GLenum type, GLsizei stride, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                glBinormalPointerEXT_(type, stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuivSUN(IntPtr code)

        public static
        void glReplacementCodeuivSUN(IntPtr code)
        {
            glReplacementCodeuivSUN_(code);
        }

        #endregion

        #region glReplacementCodeuivSUN(object code)

        public static
        void glReplacementCodeuivSUN(object code)
        {
            GCHandle h0 = GCHandle.Alloc(code, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuivSUN_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuivSUN(GLuint[] code)

        public static
        void glReplacementCodeuivSUN(GLuint[] code)
        {
            GCHandle h0 = GCHandle.Alloc(code, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuivSUN_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeusvSUN(IntPtr code)

        public static
        void glReplacementCodeusvSUN(IntPtr code)
        {
            glReplacementCodeusvSUN_(code);
        }

        #endregion

        #region glReplacementCodeusvSUN(object code)

        public static
        void glReplacementCodeusvSUN(object code)
        {
            GCHandle h0 = GCHandle.Alloc(code, GCHandleType.Pinned);
            try
            {
                glReplacementCodeusvSUN_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeusvSUN(GLushort[] code)

        public static
        void glReplacementCodeusvSUN(GLushort[] code)
        {
            GCHandle h0 = GCHandle.Alloc(code, GCHandleType.Pinned);
            try
            {
                glReplacementCodeusvSUN_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeubvSUN(IntPtr code)

        public static
        void glReplacementCodeubvSUN(IntPtr code)
        {
            glReplacementCodeubvSUN_(code);
        }

        #endregion

        #region glReplacementCodeubvSUN(object code)

        public static
        void glReplacementCodeubvSUN(object code)
        {
            GCHandle h0 = GCHandle.Alloc(code, GCHandleType.Pinned);
            try
            {
                glReplacementCodeubvSUN_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeubvSUN(GLubyte[] code)

        public static
        void glReplacementCodeubvSUN(GLubyte[] code)
        {
            GCHandle h0 = GCHandle.Alloc(code, GCHandleType.Pinned);
            try
            {
                glReplacementCodeubvSUN_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodePointerSUN(GLenum type, GLsizei stride, IntPtr pointer)

        public static
        void glReplacementCodePointerSUN(GLenum type, GLsizei stride, IntPtr pointer)
        {
            glReplacementCodePointerSUN_(type, stride, pointer);
        }

        #endregion

        #region glReplacementCodePointerSUN(GLenum type, GLsizei stride, object pointer)

        public static
        void glReplacementCodePointerSUN(GLenum type, GLsizei stride, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                glReplacementCodePointerSUN_(type, stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodePointerSUN(GLenum type, GLsizei stride, IntPtr[] pointer)

        public static
        void glReplacementCodePointerSUN(GLenum type, GLsizei stride, IntPtr[] pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                glReplacementCodePointerSUN_(type, stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glColor4ubVertex2fvSUN(IntPtr c, IntPtr v)

        public static
        void glColor4ubVertex2fvSUN(IntPtr c, IntPtr v)
        {
            glColor4ubVertex2fvSUN_(c, v);
        }

        #endregion

        #region glColor4ubVertex2fvSUN(IntPtr c, object v)

        public static
        void glColor4ubVertex2fvSUN(IntPtr c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glColor4ubVertex2fvSUN_(c, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glColor4ubVertex2fvSUN(IntPtr c, GLfloat[] v)

        public static
        void glColor4ubVertex2fvSUN(IntPtr c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glColor4ubVertex2fvSUN_(c, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glColor4ubVertex2fvSUN(object c, IntPtr v)

        public static
        void glColor4ubVertex2fvSUN(object c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                glColor4ubVertex2fvSUN_(h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glColor4ubVertex2fvSUN(object c, object v)

        public static
        void glColor4ubVertex2fvSUN(object c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glColor4ubVertex2fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glColor4ubVertex2fvSUN(object c, GLfloat[] v)

        public static
        void glColor4ubVertex2fvSUN(object c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glColor4ubVertex2fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glColor4ubVertex2fvSUN(GLubyte[] c, IntPtr v)

        public static
        void glColor4ubVertex2fvSUN(GLubyte[] c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                glColor4ubVertex2fvSUN_(h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glColor4ubVertex2fvSUN(GLubyte[] c, object v)

        public static
        void glColor4ubVertex2fvSUN(GLubyte[] c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glColor4ubVertex2fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glColor4ubVertex2fvSUN(GLubyte[] c, GLfloat[] v)

        public static
        void glColor4ubVertex2fvSUN(GLubyte[] c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glColor4ubVertex2fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glColor4ubVertex3fvSUN(IntPtr c, IntPtr v)

        public static
        void glColor4ubVertex3fvSUN(IntPtr c, IntPtr v)
        {
            glColor4ubVertex3fvSUN_(c, v);
        }

        #endregion

        #region glColor4ubVertex3fvSUN(IntPtr c, object v)

        public static
        void glColor4ubVertex3fvSUN(IntPtr c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glColor4ubVertex3fvSUN_(c, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glColor4ubVertex3fvSUN(IntPtr c, GLfloat[] v)

        public static
        void glColor4ubVertex3fvSUN(IntPtr c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glColor4ubVertex3fvSUN_(c, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glColor4ubVertex3fvSUN(object c, IntPtr v)

        public static
        void glColor4ubVertex3fvSUN(object c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                glColor4ubVertex3fvSUN_(h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glColor4ubVertex3fvSUN(object c, object v)

        public static
        void glColor4ubVertex3fvSUN(object c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glColor4ubVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glColor4ubVertex3fvSUN(object c, GLfloat[] v)

        public static
        void glColor4ubVertex3fvSUN(object c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glColor4ubVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glColor4ubVertex3fvSUN(GLubyte[] c, IntPtr v)

        public static
        void glColor4ubVertex3fvSUN(GLubyte[] c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                glColor4ubVertex3fvSUN_(h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glColor4ubVertex3fvSUN(GLubyte[] c, object v)

        public static
        void glColor4ubVertex3fvSUN(GLubyte[] c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glColor4ubVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glColor4ubVertex3fvSUN(GLubyte[] c, GLfloat[] v)

        public static
        void glColor4ubVertex3fvSUN(GLubyte[] c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glColor4ubVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glColor3fVertex3fvSUN(IntPtr c, IntPtr v)

        public static
        void glColor3fVertex3fvSUN(IntPtr c, IntPtr v)
        {
            glColor3fVertex3fvSUN_(c, v);
        }

        #endregion

        #region glColor3fVertex3fvSUN(IntPtr c, object v)

        public static
        void glColor3fVertex3fvSUN(IntPtr c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glColor3fVertex3fvSUN_(c, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glColor3fVertex3fvSUN(IntPtr c, GLfloat[] v)

        public static
        void glColor3fVertex3fvSUN(IntPtr c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glColor3fVertex3fvSUN_(c, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glColor3fVertex3fvSUN(object c, IntPtr v)

        public static
        void glColor3fVertex3fvSUN(object c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                glColor3fVertex3fvSUN_(h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glColor3fVertex3fvSUN(object c, object v)

        public static
        void glColor3fVertex3fvSUN(object c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glColor3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glColor3fVertex3fvSUN(object c, GLfloat[] v)

        public static
        void glColor3fVertex3fvSUN(object c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glColor3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glColor3fVertex3fvSUN(GLfloat[] c, IntPtr v)

        public static
        void glColor3fVertex3fvSUN(GLfloat[] c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                glColor3fVertex3fvSUN_(h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glColor3fVertex3fvSUN(GLfloat[] c, object v)

        public static
        void glColor3fVertex3fvSUN(GLfloat[] c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glColor3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glColor3fVertex3fvSUN(GLfloat[] c, GLfloat[] v)

        public static
        void glColor3fVertex3fvSUN(GLfloat[] c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glColor3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glNormal3fVertex3fvSUN(IntPtr n, IntPtr v)

        public static
        void glNormal3fVertex3fvSUN(IntPtr n, IntPtr v)
        {
            glNormal3fVertex3fvSUN_(n, v);
        }

        #endregion

        #region glNormal3fVertex3fvSUN(IntPtr n, object v)

        public static
        void glNormal3fVertex3fvSUN(IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glNormal3fVertex3fvSUN_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glNormal3fVertex3fvSUN(IntPtr n, GLfloat[] v)

        public static
        void glNormal3fVertex3fvSUN(IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glNormal3fVertex3fvSUN_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glNormal3fVertex3fvSUN(object n, IntPtr v)

        public static
        void glNormal3fVertex3fvSUN(object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glNormal3fVertex3fvSUN(object n, object v)

        public static
        void glNormal3fVertex3fvSUN(object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glNormal3fVertex3fvSUN(object n, GLfloat[] v)

        public static
        void glNormal3fVertex3fvSUN(object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glNormal3fVertex3fvSUN(GLfloat[] n, IntPtr v)

        public static
        void glNormal3fVertex3fvSUN(GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glNormal3fVertex3fvSUN(GLfloat[] n, object v)

        public static
        void glNormal3fVertex3fvSUN(GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glNormal3fVertex3fvSUN(GLfloat[] n, GLfloat[] v)

        public static
        void glNormal3fVertex3fvSUN(GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glColor4fNormal3fVertex3fvSUN(IntPtr c, IntPtr n, IntPtr v)

        public static
        void glColor4fNormal3fVertex3fvSUN(IntPtr c, IntPtr n, IntPtr v)
        {
            glColor4fNormal3fVertex3fvSUN_(c, n, v);
        }

        #endregion

        #region glColor4fNormal3fVertex3fvSUN(IntPtr c, IntPtr n, object v)

        public static
        void glColor4fNormal3fVertex3fvSUN(IntPtr c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glColor4fNormal3fVertex3fvSUN_(c, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glColor4fNormal3fVertex3fvSUN(IntPtr c, IntPtr n, GLfloat[] v)

        public static
        void glColor4fNormal3fVertex3fvSUN(IntPtr c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glColor4fNormal3fVertex3fvSUN_(c, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glColor4fNormal3fVertex3fvSUN(IntPtr c, object n, IntPtr v)

        public static
        void glColor4fNormal3fVertex3fvSUN(IntPtr c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glColor4fNormal3fVertex3fvSUN_(c, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glColor4fNormal3fVertex3fvSUN(IntPtr c, object n, object v)

        public static
        void glColor4fNormal3fVertex3fvSUN(IntPtr c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glColor4fNormal3fVertex3fvSUN_(c, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glColor4fNormal3fVertex3fvSUN(IntPtr c, object n, GLfloat[] v)

        public static
        void glColor4fNormal3fVertex3fvSUN(IntPtr c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glColor4fNormal3fVertex3fvSUN_(c, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glColor4fNormal3fVertex3fvSUN(IntPtr c, GLfloat[] n, IntPtr v)

        public static
        void glColor4fNormal3fVertex3fvSUN(IntPtr c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glColor4fNormal3fVertex3fvSUN_(c, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glColor4fNormal3fVertex3fvSUN(IntPtr c, GLfloat[] n, object v)

        public static
        void glColor4fNormal3fVertex3fvSUN(IntPtr c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glColor4fNormal3fVertex3fvSUN_(c, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glColor4fNormal3fVertex3fvSUN(IntPtr c, GLfloat[] n, GLfloat[] v)

        public static
        void glColor4fNormal3fVertex3fvSUN(IntPtr c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glColor4fNormal3fVertex3fvSUN_(c, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glColor4fNormal3fVertex3fvSUN(object c, IntPtr n, IntPtr v)

        public static
        void glColor4fNormal3fVertex3fvSUN(object c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                glColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glColor4fNormal3fVertex3fvSUN(object c, IntPtr n, object v)

        public static
        void glColor4fNormal3fVertex3fvSUN(object c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glColor4fNormal3fVertex3fvSUN(object c, IntPtr n, GLfloat[] v)

        public static
        void glColor4fNormal3fVertex3fvSUN(object c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glColor4fNormal3fVertex3fvSUN(object c, object n, IntPtr v)

        public static
        void glColor4fNormal3fVertex3fvSUN(object c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glColor4fNormal3fVertex3fvSUN(object c, object n, object v)

        public static
        void glColor4fNormal3fVertex3fvSUN(object c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glColor4fNormal3fVertex3fvSUN(object c, object n, GLfloat[] v)

        public static
        void glColor4fNormal3fVertex3fvSUN(object c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glColor4fNormal3fVertex3fvSUN(object c, GLfloat[] n, IntPtr v)

        public static
        void glColor4fNormal3fVertex3fvSUN(object c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glColor4fNormal3fVertex3fvSUN(object c, GLfloat[] n, object v)

        public static
        void glColor4fNormal3fVertex3fvSUN(object c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glColor4fNormal3fVertex3fvSUN(object c, GLfloat[] n, GLfloat[] v)

        public static
        void glColor4fNormal3fVertex3fvSUN(object c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glColor4fNormal3fVertex3fvSUN(GLfloat[] c, IntPtr n, IntPtr v)

        public static
        void glColor4fNormal3fVertex3fvSUN(GLfloat[] c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                glColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glColor4fNormal3fVertex3fvSUN(GLfloat[] c, IntPtr n, object v)

        public static
        void glColor4fNormal3fVertex3fvSUN(GLfloat[] c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glColor4fNormal3fVertex3fvSUN(GLfloat[] c, IntPtr n, GLfloat[] v)

        public static
        void glColor4fNormal3fVertex3fvSUN(GLfloat[] c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glColor4fNormal3fVertex3fvSUN(GLfloat[] c, object n, IntPtr v)

        public static
        void glColor4fNormal3fVertex3fvSUN(GLfloat[] c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glColor4fNormal3fVertex3fvSUN(GLfloat[] c, object n, object v)

        public static
        void glColor4fNormal3fVertex3fvSUN(GLfloat[] c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glColor4fNormal3fVertex3fvSUN(GLfloat[] c, object n, GLfloat[] v)

        public static
        void glColor4fNormal3fVertex3fvSUN(GLfloat[] c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glColor4fNormal3fVertex3fvSUN(GLfloat[] c, GLfloat[] n, IntPtr v)

        public static
        void glColor4fNormal3fVertex3fvSUN(GLfloat[] c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glColor4fNormal3fVertex3fvSUN(GLfloat[] c, GLfloat[] n, object v)

        public static
        void glColor4fNormal3fVertex3fvSUN(GLfloat[] c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glColor4fNormal3fVertex3fvSUN(GLfloat[] c, GLfloat[] n, GLfloat[] v)

        public static
        void glColor4fNormal3fVertex3fvSUN(GLfloat[] c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fVertex3fvSUN(IntPtr tc, IntPtr v)

        public static
        void glTexCoord2fVertex3fvSUN(IntPtr tc, IntPtr v)
        {
            glTexCoord2fVertex3fvSUN_(tc, v);
        }

        #endregion

        #region glTexCoord2fVertex3fvSUN(IntPtr tc, object v)

        public static
        void glTexCoord2fVertex3fvSUN(IntPtr tc, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fVertex3fvSUN_(tc, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fVertex3fvSUN(IntPtr tc, GLfloat[] v)

        public static
        void glTexCoord2fVertex3fvSUN(IntPtr tc, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fVertex3fvSUN_(tc, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fVertex3fvSUN(object tc, IntPtr v)

        public static
        void glTexCoord2fVertex3fvSUN(object tc, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                glTexCoord2fVertex3fvSUN_(h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fVertex3fvSUN(object tc, object v)

        public static
        void glTexCoord2fVertex3fvSUN(object tc, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fVertex3fvSUN(object tc, GLfloat[] v)

        public static
        void glTexCoord2fVertex3fvSUN(object tc, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fVertex3fvSUN(GLfloat[] tc, IntPtr v)

        public static
        void glTexCoord2fVertex3fvSUN(GLfloat[] tc, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                glTexCoord2fVertex3fvSUN_(h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fVertex3fvSUN(GLfloat[] tc, object v)

        public static
        void glTexCoord2fVertex3fvSUN(GLfloat[] tc, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fVertex3fvSUN(GLfloat[] tc, GLfloat[] v)

        public static
        void glTexCoord2fVertex3fvSUN(GLfloat[] tc, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord4fVertex4fvSUN(IntPtr tc, IntPtr v)

        public static
        void glTexCoord4fVertex4fvSUN(IntPtr tc, IntPtr v)
        {
            glTexCoord4fVertex4fvSUN_(tc, v);
        }

        #endregion

        #region glTexCoord4fVertex4fvSUN(IntPtr tc, object v)

        public static
        void glTexCoord4fVertex4fvSUN(IntPtr tc, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord4fVertex4fvSUN_(tc, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord4fVertex4fvSUN(IntPtr tc, GLfloat[] v)

        public static
        void glTexCoord4fVertex4fvSUN(IntPtr tc, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord4fVertex4fvSUN_(tc, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord4fVertex4fvSUN(object tc, IntPtr v)

        public static
        void glTexCoord4fVertex4fvSUN(object tc, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                glTexCoord4fVertex4fvSUN_(h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord4fVertex4fvSUN(object tc, object v)

        public static
        void glTexCoord4fVertex4fvSUN(object tc, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord4fVertex4fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord4fVertex4fvSUN(object tc, GLfloat[] v)

        public static
        void glTexCoord4fVertex4fvSUN(object tc, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord4fVertex4fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord4fVertex4fvSUN(GLfloat[] tc, IntPtr v)

        public static
        void glTexCoord4fVertex4fvSUN(GLfloat[] tc, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                glTexCoord4fVertex4fvSUN_(h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord4fVertex4fvSUN(GLfloat[] tc, object v)

        public static
        void glTexCoord4fVertex4fvSUN(GLfloat[] tc, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord4fVertex4fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord4fVertex4fvSUN(GLfloat[] tc, GLfloat[] v)

        public static
        void glTexCoord4fVertex4fvSUN(GLfloat[] tc, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord4fVertex4fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4ubVertex3fvSUN(IntPtr tc, IntPtr c, IntPtr v)

        public static
        void glTexCoord2fColor4ubVertex3fvSUN(IntPtr tc, IntPtr c, IntPtr v)
        {
            glTexCoord2fColor4ubVertex3fvSUN_(tc, c, v);
        }

        #endregion

        #region glTexCoord2fColor4ubVertex3fvSUN(IntPtr tc, IntPtr c, object v)

        public static
        void glTexCoord2fColor4ubVertex3fvSUN(IntPtr tc, IntPtr c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4ubVertex3fvSUN_(tc, c, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4ubVertex3fvSUN(IntPtr tc, IntPtr c, GLfloat[] v)

        public static
        void glTexCoord2fColor4ubVertex3fvSUN(IntPtr tc, IntPtr c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4ubVertex3fvSUN_(tc, c, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4ubVertex3fvSUN(IntPtr tc, object c, IntPtr v)

        public static
        void glTexCoord2fColor4ubVertex3fvSUN(IntPtr tc, object c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4ubVertex3fvSUN_(tc, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4ubVertex3fvSUN(IntPtr tc, object c, object v)

        public static
        void glTexCoord2fColor4ubVertex3fvSUN(IntPtr tc, object c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4ubVertex3fvSUN_(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4ubVertex3fvSUN(IntPtr tc, object c, GLfloat[] v)

        public static
        void glTexCoord2fColor4ubVertex3fvSUN(IntPtr tc, object c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4ubVertex3fvSUN_(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4ubVertex3fvSUN(IntPtr tc, GLubyte[] c, IntPtr v)

        public static
        void glTexCoord2fColor4ubVertex3fvSUN(IntPtr tc, GLubyte[] c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4ubVertex3fvSUN_(tc, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4ubVertex3fvSUN(IntPtr tc, GLubyte[] c, object v)

        public static
        void glTexCoord2fColor4ubVertex3fvSUN(IntPtr tc, GLubyte[] c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4ubVertex3fvSUN_(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4ubVertex3fvSUN(IntPtr tc, GLubyte[] c, GLfloat[] v)

        public static
        void glTexCoord2fColor4ubVertex3fvSUN(IntPtr tc, GLubyte[] c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4ubVertex3fvSUN_(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4ubVertex3fvSUN(object tc, IntPtr c, IntPtr v)

        public static
        void glTexCoord2fColor4ubVertex3fvSUN(object tc, IntPtr c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4ubVertex3fvSUN_(h0.AddrOfPinnedObject(), c, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4ubVertex3fvSUN(object tc, IntPtr c, object v)

        public static
        void glTexCoord2fColor4ubVertex3fvSUN(object tc, IntPtr c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4ubVertex3fvSUN_(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4ubVertex3fvSUN(object tc, IntPtr c, GLfloat[] v)

        public static
        void glTexCoord2fColor4ubVertex3fvSUN(object tc, IntPtr c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4ubVertex3fvSUN_(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4ubVertex3fvSUN(object tc, object c, IntPtr v)

        public static
        void glTexCoord2fColor4ubVertex3fvSUN(object tc, object c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4ubVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4ubVertex3fvSUN(object tc, object c, object v)

        public static
        void glTexCoord2fColor4ubVertex3fvSUN(object tc, object c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4ubVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4ubVertex3fvSUN(object tc, object c, GLfloat[] v)

        public static
        void glTexCoord2fColor4ubVertex3fvSUN(object tc, object c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4ubVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4ubVertex3fvSUN(object tc, GLubyte[] c, IntPtr v)

        public static
        void glTexCoord2fColor4ubVertex3fvSUN(object tc, GLubyte[] c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4ubVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4ubVertex3fvSUN(object tc, GLubyte[] c, object v)

        public static
        void glTexCoord2fColor4ubVertex3fvSUN(object tc, GLubyte[] c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4ubVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4ubVertex3fvSUN(object tc, GLubyte[] c, GLfloat[] v)

        public static
        void glTexCoord2fColor4ubVertex3fvSUN(object tc, GLubyte[] c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4ubVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4ubVertex3fvSUN(GLfloat[] tc, IntPtr c, IntPtr v)

        public static
        void glTexCoord2fColor4ubVertex3fvSUN(GLfloat[] tc, IntPtr c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4ubVertex3fvSUN_(h0.AddrOfPinnedObject(), c, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4ubVertex3fvSUN(GLfloat[] tc, IntPtr c, object v)

        public static
        void glTexCoord2fColor4ubVertex3fvSUN(GLfloat[] tc, IntPtr c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4ubVertex3fvSUN_(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4ubVertex3fvSUN(GLfloat[] tc, IntPtr c, GLfloat[] v)

        public static
        void glTexCoord2fColor4ubVertex3fvSUN(GLfloat[] tc, IntPtr c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4ubVertex3fvSUN_(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4ubVertex3fvSUN(GLfloat[] tc, object c, IntPtr v)

        public static
        void glTexCoord2fColor4ubVertex3fvSUN(GLfloat[] tc, object c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4ubVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4ubVertex3fvSUN(GLfloat[] tc, object c, object v)

        public static
        void glTexCoord2fColor4ubVertex3fvSUN(GLfloat[] tc, object c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4ubVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4ubVertex3fvSUN(GLfloat[] tc, object c, GLfloat[] v)

        public static
        void glTexCoord2fColor4ubVertex3fvSUN(GLfloat[] tc, object c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4ubVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4ubVertex3fvSUN(GLfloat[] tc, GLubyte[] c, IntPtr v)

        public static
        void glTexCoord2fColor4ubVertex3fvSUN(GLfloat[] tc, GLubyte[] c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4ubVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4ubVertex3fvSUN(GLfloat[] tc, GLubyte[] c, object v)

        public static
        void glTexCoord2fColor4ubVertex3fvSUN(GLfloat[] tc, GLubyte[] c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4ubVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4ubVertex3fvSUN(GLfloat[] tc, GLubyte[] c, GLfloat[] v)

        public static
        void glTexCoord2fColor4ubVertex3fvSUN(GLfloat[] tc, GLubyte[] c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4ubVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor3fVertex3fvSUN(IntPtr tc, IntPtr c, IntPtr v)

        public static
        void glTexCoord2fColor3fVertex3fvSUN(IntPtr tc, IntPtr c, IntPtr v)
        {
            glTexCoord2fColor3fVertex3fvSUN_(tc, c, v);
        }

        #endregion

        #region glTexCoord2fColor3fVertex3fvSUN(IntPtr tc, IntPtr c, object v)

        public static
        void glTexCoord2fColor3fVertex3fvSUN(IntPtr tc, IntPtr c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor3fVertex3fvSUN_(tc, c, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor3fVertex3fvSUN(IntPtr tc, IntPtr c, GLfloat[] v)

        public static
        void glTexCoord2fColor3fVertex3fvSUN(IntPtr tc, IntPtr c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor3fVertex3fvSUN_(tc, c, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor3fVertex3fvSUN(IntPtr tc, object c, IntPtr v)

        public static
        void glTexCoord2fColor3fVertex3fvSUN(IntPtr tc, object c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor3fVertex3fvSUN_(tc, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor3fVertex3fvSUN(IntPtr tc, object c, object v)

        public static
        void glTexCoord2fColor3fVertex3fvSUN(IntPtr tc, object c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor3fVertex3fvSUN_(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor3fVertex3fvSUN(IntPtr tc, object c, GLfloat[] v)

        public static
        void glTexCoord2fColor3fVertex3fvSUN(IntPtr tc, object c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor3fVertex3fvSUN_(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor3fVertex3fvSUN(IntPtr tc, GLfloat[] c, IntPtr v)

        public static
        void glTexCoord2fColor3fVertex3fvSUN(IntPtr tc, GLfloat[] c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor3fVertex3fvSUN_(tc, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor3fVertex3fvSUN(IntPtr tc, GLfloat[] c, object v)

        public static
        void glTexCoord2fColor3fVertex3fvSUN(IntPtr tc, GLfloat[] c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor3fVertex3fvSUN_(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor3fVertex3fvSUN(IntPtr tc, GLfloat[] c, GLfloat[] v)

        public static
        void glTexCoord2fColor3fVertex3fvSUN(IntPtr tc, GLfloat[] c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor3fVertex3fvSUN_(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor3fVertex3fvSUN(object tc, IntPtr c, IntPtr v)

        public static
        void glTexCoord2fColor3fVertex3fvSUN(object tc, IntPtr c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor3fVertex3fvSUN_(h0.AddrOfPinnedObject(), c, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor3fVertex3fvSUN(object tc, IntPtr c, object v)

        public static
        void glTexCoord2fColor3fVertex3fvSUN(object tc, IntPtr c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor3fVertex3fvSUN_(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor3fVertex3fvSUN(object tc, IntPtr c, GLfloat[] v)

        public static
        void glTexCoord2fColor3fVertex3fvSUN(object tc, IntPtr c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor3fVertex3fvSUN_(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor3fVertex3fvSUN(object tc, object c, IntPtr v)

        public static
        void glTexCoord2fColor3fVertex3fvSUN(object tc, object c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor3fVertex3fvSUN(object tc, object c, object v)

        public static
        void glTexCoord2fColor3fVertex3fvSUN(object tc, object c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor3fVertex3fvSUN(object tc, object c, GLfloat[] v)

        public static
        void glTexCoord2fColor3fVertex3fvSUN(object tc, object c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor3fVertex3fvSUN(object tc, GLfloat[] c, IntPtr v)

        public static
        void glTexCoord2fColor3fVertex3fvSUN(object tc, GLfloat[] c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor3fVertex3fvSUN(object tc, GLfloat[] c, object v)

        public static
        void glTexCoord2fColor3fVertex3fvSUN(object tc, GLfloat[] c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor3fVertex3fvSUN(object tc, GLfloat[] c, GLfloat[] v)

        public static
        void glTexCoord2fColor3fVertex3fvSUN(object tc, GLfloat[] c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor3fVertex3fvSUN(GLfloat[] tc, IntPtr c, IntPtr v)

        public static
        void glTexCoord2fColor3fVertex3fvSUN(GLfloat[] tc, IntPtr c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor3fVertex3fvSUN_(h0.AddrOfPinnedObject(), c, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor3fVertex3fvSUN(GLfloat[] tc, IntPtr c, object v)

        public static
        void glTexCoord2fColor3fVertex3fvSUN(GLfloat[] tc, IntPtr c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor3fVertex3fvSUN_(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor3fVertex3fvSUN(GLfloat[] tc, IntPtr c, GLfloat[] v)

        public static
        void glTexCoord2fColor3fVertex3fvSUN(GLfloat[] tc, IntPtr c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor3fVertex3fvSUN_(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor3fVertex3fvSUN(GLfloat[] tc, object c, IntPtr v)

        public static
        void glTexCoord2fColor3fVertex3fvSUN(GLfloat[] tc, object c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor3fVertex3fvSUN(GLfloat[] tc, object c, object v)

        public static
        void glTexCoord2fColor3fVertex3fvSUN(GLfloat[] tc, object c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor3fVertex3fvSUN(GLfloat[] tc, object c, GLfloat[] v)

        public static
        void glTexCoord2fColor3fVertex3fvSUN(GLfloat[] tc, object c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor3fVertex3fvSUN(GLfloat[] tc, GLfloat[] c, IntPtr v)

        public static
        void glTexCoord2fColor3fVertex3fvSUN(GLfloat[] tc, GLfloat[] c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor3fVertex3fvSUN(GLfloat[] tc, GLfloat[] c, object v)

        public static
        void glTexCoord2fColor3fVertex3fvSUN(GLfloat[] tc, GLfloat[] c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor3fVertex3fvSUN(GLfloat[] tc, GLfloat[] c, GLfloat[] v)

        public static
        void glTexCoord2fColor3fVertex3fvSUN(GLfloat[] tc, GLfloat[] c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fNormal3fVertex3fvSUN(IntPtr tc, IntPtr n, IntPtr v)

        public static
        void glTexCoord2fNormal3fVertex3fvSUN(IntPtr tc, IntPtr n, IntPtr v)
        {
            glTexCoord2fNormal3fVertex3fvSUN_(tc, n, v);
        }

        #endregion

        #region glTexCoord2fNormal3fVertex3fvSUN(IntPtr tc, IntPtr n, object v)

        public static
        void glTexCoord2fNormal3fVertex3fvSUN(IntPtr tc, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fNormal3fVertex3fvSUN_(tc, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fNormal3fVertex3fvSUN(IntPtr tc, IntPtr n, GLfloat[] v)

        public static
        void glTexCoord2fNormal3fVertex3fvSUN(IntPtr tc, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fNormal3fVertex3fvSUN_(tc, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fNormal3fVertex3fvSUN(IntPtr tc, object n, IntPtr v)

        public static
        void glTexCoord2fNormal3fVertex3fvSUN(IntPtr tc, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glTexCoord2fNormal3fVertex3fvSUN_(tc, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fNormal3fVertex3fvSUN(IntPtr tc, object n, object v)

        public static
        void glTexCoord2fNormal3fVertex3fvSUN(IntPtr tc, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fNormal3fVertex3fvSUN_(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fNormal3fVertex3fvSUN(IntPtr tc, object n, GLfloat[] v)

        public static
        void glTexCoord2fNormal3fVertex3fvSUN(IntPtr tc, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fNormal3fVertex3fvSUN_(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fNormal3fVertex3fvSUN(IntPtr tc, GLfloat[] n, IntPtr v)

        public static
        void glTexCoord2fNormal3fVertex3fvSUN(IntPtr tc, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glTexCoord2fNormal3fVertex3fvSUN_(tc, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fNormal3fVertex3fvSUN(IntPtr tc, GLfloat[] n, object v)

        public static
        void glTexCoord2fNormal3fVertex3fvSUN(IntPtr tc, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fNormal3fVertex3fvSUN_(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fNormal3fVertex3fvSUN(IntPtr tc, GLfloat[] n, GLfloat[] v)

        public static
        void glTexCoord2fNormal3fVertex3fvSUN(IntPtr tc, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fNormal3fVertex3fvSUN_(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fNormal3fVertex3fvSUN(object tc, IntPtr n, IntPtr v)

        public static
        void glTexCoord2fNormal3fVertex3fvSUN(object tc, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                glTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fNormal3fVertex3fvSUN(object tc, IntPtr n, object v)

        public static
        void glTexCoord2fNormal3fVertex3fvSUN(object tc, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fNormal3fVertex3fvSUN(object tc, IntPtr n, GLfloat[] v)

        public static
        void glTexCoord2fNormal3fVertex3fvSUN(object tc, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fNormal3fVertex3fvSUN(object tc, object n, IntPtr v)

        public static
        void glTexCoord2fNormal3fVertex3fvSUN(object tc, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fNormal3fVertex3fvSUN(object tc, object n, object v)

        public static
        void glTexCoord2fNormal3fVertex3fvSUN(object tc, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fNormal3fVertex3fvSUN(object tc, object n, GLfloat[] v)

        public static
        void glTexCoord2fNormal3fVertex3fvSUN(object tc, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fNormal3fVertex3fvSUN(object tc, GLfloat[] n, IntPtr v)

        public static
        void glTexCoord2fNormal3fVertex3fvSUN(object tc, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fNormal3fVertex3fvSUN(object tc, GLfloat[] n, object v)

        public static
        void glTexCoord2fNormal3fVertex3fvSUN(object tc, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fNormal3fVertex3fvSUN(object tc, GLfloat[] n, GLfloat[] v)

        public static
        void glTexCoord2fNormal3fVertex3fvSUN(object tc, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fNormal3fVertex3fvSUN(GLfloat[] tc, IntPtr n, IntPtr v)

        public static
        void glTexCoord2fNormal3fVertex3fvSUN(GLfloat[] tc, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                glTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fNormal3fVertex3fvSUN(GLfloat[] tc, IntPtr n, object v)

        public static
        void glTexCoord2fNormal3fVertex3fvSUN(GLfloat[] tc, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fNormal3fVertex3fvSUN(GLfloat[] tc, IntPtr n, GLfloat[] v)

        public static
        void glTexCoord2fNormal3fVertex3fvSUN(GLfloat[] tc, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fNormal3fVertex3fvSUN(GLfloat[] tc, object n, IntPtr v)

        public static
        void glTexCoord2fNormal3fVertex3fvSUN(GLfloat[] tc, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fNormal3fVertex3fvSUN(GLfloat[] tc, object n, object v)

        public static
        void glTexCoord2fNormal3fVertex3fvSUN(GLfloat[] tc, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fNormal3fVertex3fvSUN(GLfloat[] tc, object n, GLfloat[] v)

        public static
        void glTexCoord2fNormal3fVertex3fvSUN(GLfloat[] tc, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat[] n, IntPtr v)

        public static
        void glTexCoord2fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat[] n, object v)

        public static
        void glTexCoord2fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat[] n, GLfloat[] v)

        public static
        void glTexCoord2fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, IntPtr c, IntPtr n, IntPtr v)

        public static
        void glTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, IntPtr c, IntPtr n, IntPtr v)
        {
            glTexCoord2fColor4fNormal3fVertex3fvSUN_(tc, c, n, v);
        }

        #endregion

        #region glTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, IntPtr c, IntPtr n, object v)

        public static
        void glTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, IntPtr c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4fNormal3fVertex3fvSUN_(tc, c, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, IntPtr c, IntPtr n, GLfloat[] v)

        public static
        void glTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, IntPtr c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4fNormal3fVertex3fvSUN_(tc, c, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, IntPtr c, object n, IntPtr v)

        public static
        void glTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, IntPtr c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4fNormal3fVertex3fvSUN_(tc, c, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, IntPtr c, object n, object v)

        public static
        void glTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, IntPtr c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4fNormal3fVertex3fvSUN_(tc, c, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, IntPtr c, object n, GLfloat[] v)

        public static
        void glTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, IntPtr c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4fNormal3fVertex3fvSUN_(tc, c, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, IntPtr c, GLfloat[] n, IntPtr v)

        public static
        void glTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, IntPtr c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4fNormal3fVertex3fvSUN_(tc, c, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, IntPtr c, GLfloat[] n, object v)

        public static
        void glTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, IntPtr c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4fNormal3fVertex3fvSUN_(tc, c, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, IntPtr c, GLfloat[] n, GLfloat[] v)

        public static
        void glTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, IntPtr c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4fNormal3fVertex3fvSUN_(tc, c, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, object c, IntPtr n, IntPtr v)

        public static
        void glTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, object c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4fNormal3fVertex3fvSUN_(tc, h0.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, object c, IntPtr n, object v)

        public static
        void glTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, object c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4fNormal3fVertex3fvSUN_(tc, h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, object c, IntPtr n, GLfloat[] v)

        public static
        void glTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, object c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4fNormal3fVertex3fvSUN_(tc, h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, object c, object n, IntPtr v)

        public static
        void glTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, object c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4fNormal3fVertex3fvSUN_(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, object c, object n, object v)

        public static
        void glTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, object c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4fNormal3fVertex3fvSUN_(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, object c, object n, GLfloat[] v)

        public static
        void glTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, object c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4fNormal3fVertex3fvSUN_(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, object c, GLfloat[] n, IntPtr v)

        public static
        void glTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, object c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4fNormal3fVertex3fvSUN_(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, object c, GLfloat[] n, object v)

        public static
        void glTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, object c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4fNormal3fVertex3fvSUN_(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, object c, GLfloat[] n, GLfloat[] v)

        public static
        void glTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, object c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4fNormal3fVertex3fvSUN_(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, GLfloat[] c, IntPtr n, IntPtr v)

        public static
        void glTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, GLfloat[] c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4fNormal3fVertex3fvSUN_(tc, h0.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, GLfloat[] c, IntPtr n, object v)

        public static
        void glTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, GLfloat[] c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4fNormal3fVertex3fvSUN_(tc, h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, GLfloat[] c, IntPtr n, GLfloat[] v)

        public static
        void glTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, GLfloat[] c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4fNormal3fVertex3fvSUN_(tc, h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, GLfloat[] c, object n, IntPtr v)

        public static
        void glTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, GLfloat[] c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4fNormal3fVertex3fvSUN_(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, GLfloat[] c, object n, object v)

        public static
        void glTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, GLfloat[] c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4fNormal3fVertex3fvSUN_(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, GLfloat[] c, object n, GLfloat[] v)

        public static
        void glTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, GLfloat[] c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4fNormal3fVertex3fvSUN_(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, GLfloat[] c, GLfloat[] n, IntPtr v)

        public static
        void glTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, GLfloat[] c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4fNormal3fVertex3fvSUN_(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, GLfloat[] c, GLfloat[] n, object v)

        public static
        void glTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, GLfloat[] c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4fNormal3fVertex3fvSUN_(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)

        public static
        void glTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4fNormal3fVertex3fvSUN_(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4fNormal3fVertex3fvSUN(object tc, IntPtr c, IntPtr n, IntPtr v)

        public static
        void glTexCoord2fColor4fNormal3fVertex3fvSUN(object tc, IntPtr c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), c, n, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4fNormal3fVertex3fvSUN(object tc, IntPtr c, IntPtr n, object v)

        public static
        void glTexCoord2fColor4fNormal3fVertex3fvSUN(object tc, IntPtr c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), c, n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4fNormal3fVertex3fvSUN(object tc, IntPtr c, IntPtr n, GLfloat[] v)

        public static
        void glTexCoord2fColor4fNormal3fVertex3fvSUN(object tc, IntPtr c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), c, n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4fNormal3fVertex3fvSUN(object tc, IntPtr c, object n, IntPtr v)

        public static
        void glTexCoord2fColor4fNormal3fVertex3fvSUN(object tc, IntPtr c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4fNormal3fVertex3fvSUN(object tc, IntPtr c, object n, object v)

        public static
        void glTexCoord2fColor4fNormal3fVertex3fvSUN(object tc, IntPtr c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4fNormal3fVertex3fvSUN(object tc, IntPtr c, object n, GLfloat[] v)

        public static
        void glTexCoord2fColor4fNormal3fVertex3fvSUN(object tc, IntPtr c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4fNormal3fVertex3fvSUN(object tc, IntPtr c, GLfloat[] n, IntPtr v)

        public static
        void glTexCoord2fColor4fNormal3fVertex3fvSUN(object tc, IntPtr c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4fNormal3fVertex3fvSUN(object tc, IntPtr c, GLfloat[] n, object v)

        public static
        void glTexCoord2fColor4fNormal3fVertex3fvSUN(object tc, IntPtr c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4fNormal3fVertex3fvSUN(object tc, IntPtr c, GLfloat[] n, GLfloat[] v)

        public static
        void glTexCoord2fColor4fNormal3fVertex3fvSUN(object tc, IntPtr c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4fNormal3fVertex3fvSUN(object tc, object c, IntPtr n, IntPtr v)

        public static
        void glTexCoord2fColor4fNormal3fVertex3fvSUN(object tc, object c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4fNormal3fVertex3fvSUN(object tc, object c, IntPtr n, object v)

        public static
        void glTexCoord2fColor4fNormal3fVertex3fvSUN(object tc, object c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4fNormal3fVertex3fvSUN(object tc, object c, IntPtr n, GLfloat[] v)

        public static
        void glTexCoord2fColor4fNormal3fVertex3fvSUN(object tc, object c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4fNormal3fVertex3fvSUN(object tc, object c, object n, IntPtr v)

        public static
        void glTexCoord2fColor4fNormal3fVertex3fvSUN(object tc, object c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4fNormal3fVertex3fvSUN(object tc, object c, object n, object v)

        public static
        void glTexCoord2fColor4fNormal3fVertex3fvSUN(object tc, object c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4fNormal3fVertex3fvSUN(object tc, object c, object n, GLfloat[] v)

        public static
        void glTexCoord2fColor4fNormal3fVertex3fvSUN(object tc, object c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4fNormal3fVertex3fvSUN(object tc, object c, GLfloat[] n, IntPtr v)

        public static
        void glTexCoord2fColor4fNormal3fVertex3fvSUN(object tc, object c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4fNormal3fVertex3fvSUN(object tc, object c, GLfloat[] n, object v)

        public static
        void glTexCoord2fColor4fNormal3fVertex3fvSUN(object tc, object c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4fNormal3fVertex3fvSUN(object tc, object c, GLfloat[] n, GLfloat[] v)

        public static
        void glTexCoord2fColor4fNormal3fVertex3fvSUN(object tc, object c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4fNormal3fVertex3fvSUN(object tc, GLfloat[] c, IntPtr n, IntPtr v)

        public static
        void glTexCoord2fColor4fNormal3fVertex3fvSUN(object tc, GLfloat[] c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4fNormal3fVertex3fvSUN(object tc, GLfloat[] c, IntPtr n, object v)

        public static
        void glTexCoord2fColor4fNormal3fVertex3fvSUN(object tc, GLfloat[] c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4fNormal3fVertex3fvSUN(object tc, GLfloat[] c, IntPtr n, GLfloat[] v)

        public static
        void glTexCoord2fColor4fNormal3fVertex3fvSUN(object tc, GLfloat[] c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4fNormal3fVertex3fvSUN(object tc, GLfloat[] c, object n, IntPtr v)

        public static
        void glTexCoord2fColor4fNormal3fVertex3fvSUN(object tc, GLfloat[] c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4fNormal3fVertex3fvSUN(object tc, GLfloat[] c, object n, object v)

        public static
        void glTexCoord2fColor4fNormal3fVertex3fvSUN(object tc, GLfloat[] c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4fNormal3fVertex3fvSUN(object tc, GLfloat[] c, object n, GLfloat[] v)

        public static
        void glTexCoord2fColor4fNormal3fVertex3fvSUN(object tc, GLfloat[] c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4fNormal3fVertex3fvSUN(object tc, GLfloat[] c, GLfloat[] n, IntPtr v)

        public static
        void glTexCoord2fColor4fNormal3fVertex3fvSUN(object tc, GLfloat[] c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4fNormal3fVertex3fvSUN(object tc, GLfloat[] c, GLfloat[] n, object v)

        public static
        void glTexCoord2fColor4fNormal3fVertex3fvSUN(object tc, GLfloat[] c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4fNormal3fVertex3fvSUN(object tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)

        public static
        void glTexCoord2fColor4fNormal3fVertex3fvSUN(object tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, IntPtr c, IntPtr n, IntPtr v)

        public static
        void glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, IntPtr c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), c, n, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, IntPtr c, IntPtr n, object v)

        public static
        void glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, IntPtr c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), c, n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, IntPtr c, IntPtr n, GLfloat[] v)

        public static
        void glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, IntPtr c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), c, n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, IntPtr c, object n, IntPtr v)

        public static
        void glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, IntPtr c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, IntPtr c, object n, object v)

        public static
        void glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, IntPtr c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, IntPtr c, object n, GLfloat[] v)

        public static
        void glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, IntPtr c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, IntPtr c, GLfloat[] n, IntPtr v)

        public static
        void glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, IntPtr c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, IntPtr c, GLfloat[] n, object v)

        public static
        void glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, IntPtr c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, IntPtr c, GLfloat[] n, GLfloat[] v)

        public static
        void glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, IntPtr c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, object c, IntPtr n, IntPtr v)

        public static
        void glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, object c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, object c, IntPtr n, object v)

        public static
        void glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, object c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, object c, IntPtr n, GLfloat[] v)

        public static
        void glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, object c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, object c, object n, IntPtr v)

        public static
        void glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, object c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, object c, object n, object v)

        public static
        void glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, object c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, object c, object n, GLfloat[] v)

        public static
        void glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, object c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, object c, GLfloat[] n, IntPtr v)

        public static
        void glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, object c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, object c, GLfloat[] n, object v)

        public static
        void glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, object c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, object c, GLfloat[] n, GLfloat[] v)

        public static
        void glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, object c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat[] c, IntPtr n, IntPtr v)

        public static
        void glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat[] c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat[] c, IntPtr n, object v)

        public static
        void glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat[] c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat[] c, IntPtr n, GLfloat[] v)

        public static
        void glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat[] c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat[] c, object n, IntPtr v)

        public static
        void glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat[] c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat[] c, object n, object v)

        public static
        void glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat[] c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat[] c, object n, GLfloat[] v)

        public static
        void glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat[] c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat[] c, GLfloat[] n, IntPtr v)

        public static
        void glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat[] c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat[] c, GLfloat[] n, object v)

        public static
        void glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat[] c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)

        public static
        void glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, IntPtr c, IntPtr n, IntPtr v)

        public static
        void glTexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, IntPtr c, IntPtr n, IntPtr v)
        {
            glTexCoord4fColor4fNormal3fVertex4fvSUN_(tc, c, n, v);
        }

        #endregion

        #region glTexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, IntPtr c, IntPtr n, object v)

        public static
        void glTexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, IntPtr c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord4fColor4fNormal3fVertex4fvSUN_(tc, c, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, IntPtr c, IntPtr n, GLfloat[] v)

        public static
        void glTexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, IntPtr c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord4fColor4fNormal3fVertex4fvSUN_(tc, c, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, IntPtr c, object n, IntPtr v)

        public static
        void glTexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, IntPtr c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glTexCoord4fColor4fNormal3fVertex4fvSUN_(tc, c, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, IntPtr c, object n, object v)

        public static
        void glTexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, IntPtr c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord4fColor4fNormal3fVertex4fvSUN_(tc, c, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, IntPtr c, object n, GLfloat[] v)

        public static
        void glTexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, IntPtr c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord4fColor4fNormal3fVertex4fvSUN_(tc, c, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, IntPtr c, GLfloat[] n, IntPtr v)

        public static
        void glTexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, IntPtr c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glTexCoord4fColor4fNormal3fVertex4fvSUN_(tc, c, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, IntPtr c, GLfloat[] n, object v)

        public static
        void glTexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, IntPtr c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord4fColor4fNormal3fVertex4fvSUN_(tc, c, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, IntPtr c, GLfloat[] n, GLfloat[] v)

        public static
        void glTexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, IntPtr c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord4fColor4fNormal3fVertex4fvSUN_(tc, c, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, object c, IntPtr n, IntPtr v)

        public static
        void glTexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, object c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                glTexCoord4fColor4fNormal3fVertex4fvSUN_(tc, h0.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, object c, IntPtr n, object v)

        public static
        void glTexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, object c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord4fColor4fNormal3fVertex4fvSUN_(tc, h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, object c, IntPtr n, GLfloat[] v)

        public static
        void glTexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, object c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord4fColor4fNormal3fVertex4fvSUN_(tc, h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, object c, object n, IntPtr v)

        public static
        void glTexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, object c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glTexCoord4fColor4fNormal3fVertex4fvSUN_(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, object c, object n, object v)

        public static
        void glTexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, object c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord4fColor4fNormal3fVertex4fvSUN_(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, object c, object n, GLfloat[] v)

        public static
        void glTexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, object c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord4fColor4fNormal3fVertex4fvSUN_(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, object c, GLfloat[] n, IntPtr v)

        public static
        void glTexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, object c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glTexCoord4fColor4fNormal3fVertex4fvSUN_(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, object c, GLfloat[] n, object v)

        public static
        void glTexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, object c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord4fColor4fNormal3fVertex4fvSUN_(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, object c, GLfloat[] n, GLfloat[] v)

        public static
        void glTexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, object c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord4fColor4fNormal3fVertex4fvSUN_(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, GLfloat[] c, IntPtr n, IntPtr v)

        public static
        void glTexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, GLfloat[] c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                glTexCoord4fColor4fNormal3fVertex4fvSUN_(tc, h0.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, GLfloat[] c, IntPtr n, object v)

        public static
        void glTexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, GLfloat[] c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord4fColor4fNormal3fVertex4fvSUN_(tc, h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, GLfloat[] c, IntPtr n, GLfloat[] v)

        public static
        void glTexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, GLfloat[] c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord4fColor4fNormal3fVertex4fvSUN_(tc, h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, GLfloat[] c, object n, IntPtr v)

        public static
        void glTexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, GLfloat[] c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glTexCoord4fColor4fNormal3fVertex4fvSUN_(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, GLfloat[] c, object n, object v)

        public static
        void glTexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, GLfloat[] c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord4fColor4fNormal3fVertex4fvSUN_(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, GLfloat[] c, object n, GLfloat[] v)

        public static
        void glTexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, GLfloat[] c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord4fColor4fNormal3fVertex4fvSUN_(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, GLfloat[] c, GLfloat[] n, IntPtr v)

        public static
        void glTexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, GLfloat[] c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glTexCoord4fColor4fNormal3fVertex4fvSUN_(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, GLfloat[] c, GLfloat[] n, object v)

        public static
        void glTexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, GLfloat[] c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord4fColor4fNormal3fVertex4fvSUN_(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)

        public static
        void glTexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord4fColor4fNormal3fVertex4fvSUN_(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord4fColor4fNormal3fVertex4fvSUN(object tc, IntPtr c, IntPtr n, IntPtr v)

        public static
        void glTexCoord4fColor4fNormal3fVertex4fvSUN(object tc, IntPtr c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                glTexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), c, n, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord4fColor4fNormal3fVertex4fvSUN(object tc, IntPtr c, IntPtr n, object v)

        public static
        void glTexCoord4fColor4fNormal3fVertex4fvSUN(object tc, IntPtr c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), c, n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord4fColor4fNormal3fVertex4fvSUN(object tc, IntPtr c, IntPtr n, GLfloat[] v)

        public static
        void glTexCoord4fColor4fNormal3fVertex4fvSUN(object tc, IntPtr c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), c, n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord4fColor4fNormal3fVertex4fvSUN(object tc, IntPtr c, object n, IntPtr v)

        public static
        void glTexCoord4fColor4fNormal3fVertex4fvSUN(object tc, IntPtr c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glTexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord4fColor4fNormal3fVertex4fvSUN(object tc, IntPtr c, object n, object v)

        public static
        void glTexCoord4fColor4fNormal3fVertex4fvSUN(object tc, IntPtr c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord4fColor4fNormal3fVertex4fvSUN(object tc, IntPtr c, object n, GLfloat[] v)

        public static
        void glTexCoord4fColor4fNormal3fVertex4fvSUN(object tc, IntPtr c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord4fColor4fNormal3fVertex4fvSUN(object tc, IntPtr c, GLfloat[] n, IntPtr v)

        public static
        void glTexCoord4fColor4fNormal3fVertex4fvSUN(object tc, IntPtr c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glTexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord4fColor4fNormal3fVertex4fvSUN(object tc, IntPtr c, GLfloat[] n, object v)

        public static
        void glTexCoord4fColor4fNormal3fVertex4fvSUN(object tc, IntPtr c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord4fColor4fNormal3fVertex4fvSUN(object tc, IntPtr c, GLfloat[] n, GLfloat[] v)

        public static
        void glTexCoord4fColor4fNormal3fVertex4fvSUN(object tc, IntPtr c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord4fColor4fNormal3fVertex4fvSUN(object tc, object c, IntPtr n, IntPtr v)

        public static
        void glTexCoord4fColor4fNormal3fVertex4fvSUN(object tc, object c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                glTexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord4fColor4fNormal3fVertex4fvSUN(object tc, object c, IntPtr n, object v)

        public static
        void glTexCoord4fColor4fNormal3fVertex4fvSUN(object tc, object c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord4fColor4fNormal3fVertex4fvSUN(object tc, object c, IntPtr n, GLfloat[] v)

        public static
        void glTexCoord4fColor4fNormal3fVertex4fvSUN(object tc, object c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord4fColor4fNormal3fVertex4fvSUN(object tc, object c, object n, IntPtr v)

        public static
        void glTexCoord4fColor4fNormal3fVertex4fvSUN(object tc, object c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glTexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord4fColor4fNormal3fVertex4fvSUN(object tc, object c, object n, object v)

        public static
        void glTexCoord4fColor4fNormal3fVertex4fvSUN(object tc, object c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord4fColor4fNormal3fVertex4fvSUN(object tc, object c, object n, GLfloat[] v)

        public static
        void glTexCoord4fColor4fNormal3fVertex4fvSUN(object tc, object c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord4fColor4fNormal3fVertex4fvSUN(object tc, object c, GLfloat[] n, IntPtr v)

        public static
        void glTexCoord4fColor4fNormal3fVertex4fvSUN(object tc, object c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glTexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord4fColor4fNormal3fVertex4fvSUN(object tc, object c, GLfloat[] n, object v)

        public static
        void glTexCoord4fColor4fNormal3fVertex4fvSUN(object tc, object c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord4fColor4fNormal3fVertex4fvSUN(object tc, object c, GLfloat[] n, GLfloat[] v)

        public static
        void glTexCoord4fColor4fNormal3fVertex4fvSUN(object tc, object c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord4fColor4fNormal3fVertex4fvSUN(object tc, GLfloat[] c, IntPtr n, IntPtr v)

        public static
        void glTexCoord4fColor4fNormal3fVertex4fvSUN(object tc, GLfloat[] c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                glTexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord4fColor4fNormal3fVertex4fvSUN(object tc, GLfloat[] c, IntPtr n, object v)

        public static
        void glTexCoord4fColor4fNormal3fVertex4fvSUN(object tc, GLfloat[] c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord4fColor4fNormal3fVertex4fvSUN(object tc, GLfloat[] c, IntPtr n, GLfloat[] v)

        public static
        void glTexCoord4fColor4fNormal3fVertex4fvSUN(object tc, GLfloat[] c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord4fColor4fNormal3fVertex4fvSUN(object tc, GLfloat[] c, object n, IntPtr v)

        public static
        void glTexCoord4fColor4fNormal3fVertex4fvSUN(object tc, GLfloat[] c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glTexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord4fColor4fNormal3fVertex4fvSUN(object tc, GLfloat[] c, object n, object v)

        public static
        void glTexCoord4fColor4fNormal3fVertex4fvSUN(object tc, GLfloat[] c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord4fColor4fNormal3fVertex4fvSUN(object tc, GLfloat[] c, object n, GLfloat[] v)

        public static
        void glTexCoord4fColor4fNormal3fVertex4fvSUN(object tc, GLfloat[] c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord4fColor4fNormal3fVertex4fvSUN(object tc, GLfloat[] c, GLfloat[] n, IntPtr v)

        public static
        void glTexCoord4fColor4fNormal3fVertex4fvSUN(object tc, GLfloat[] c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glTexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord4fColor4fNormal3fVertex4fvSUN(object tc, GLfloat[] c, GLfloat[] n, object v)

        public static
        void glTexCoord4fColor4fNormal3fVertex4fvSUN(object tc, GLfloat[] c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord4fColor4fNormal3fVertex4fvSUN(object tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)

        public static
        void glTexCoord4fColor4fNormal3fVertex4fvSUN(object tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, IntPtr c, IntPtr n, IntPtr v)

        public static
        void glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, IntPtr c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                glTexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), c, n, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, IntPtr c, IntPtr n, object v)

        public static
        void glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, IntPtr c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), c, n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, IntPtr c, IntPtr n, GLfloat[] v)

        public static
        void glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, IntPtr c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), c, n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, IntPtr c, object n, IntPtr v)

        public static
        void glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, IntPtr c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glTexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, IntPtr c, object n, object v)

        public static
        void glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, IntPtr c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, IntPtr c, object n, GLfloat[] v)

        public static
        void glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, IntPtr c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, IntPtr c, GLfloat[] n, IntPtr v)

        public static
        void glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, IntPtr c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glTexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, IntPtr c, GLfloat[] n, object v)

        public static
        void glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, IntPtr c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, IntPtr c, GLfloat[] n, GLfloat[] v)

        public static
        void glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, IntPtr c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, object c, IntPtr n, IntPtr v)

        public static
        void glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, object c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                glTexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, object c, IntPtr n, object v)

        public static
        void glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, object c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, object c, IntPtr n, GLfloat[] v)

        public static
        void glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, object c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, object c, object n, IntPtr v)

        public static
        void glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, object c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glTexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, object c, object n, object v)

        public static
        void glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, object c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, object c, object n, GLfloat[] v)

        public static
        void glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, object c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, object c, GLfloat[] n, IntPtr v)

        public static
        void glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, object c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glTexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, object c, GLfloat[] n, object v)

        public static
        void glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, object c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, object c, GLfloat[] n, GLfloat[] v)

        public static
        void glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, object c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, GLfloat[] c, IntPtr n, IntPtr v)

        public static
        void glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, GLfloat[] c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                glTexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, GLfloat[] c, IntPtr n, object v)

        public static
        void glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, GLfloat[] c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, GLfloat[] c, IntPtr n, GLfloat[] v)

        public static
        void glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, GLfloat[] c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, GLfloat[] c, object n, IntPtr v)

        public static
        void glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, GLfloat[] c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glTexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, GLfloat[] c, object n, object v)

        public static
        void glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, GLfloat[] c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, GLfloat[] c, object n, GLfloat[] v)

        public static
        void glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, GLfloat[] c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, GLfloat[] c, GLfloat[] n, IntPtr v)

        public static
        void glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, GLfloat[] c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glTexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, GLfloat[] c, GLfloat[] n, object v)

        public static
        void glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, GLfloat[] c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)

        public static
        void glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord4fColor4fNormal3fVertex4fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiVertex3fvSUN(IntPtr rc, IntPtr v)

        public static
        void glReplacementCodeuiVertex3fvSUN(IntPtr rc, IntPtr v)
        {
            glReplacementCodeuiVertex3fvSUN_(rc, v);
        }

        #endregion

        #region glReplacementCodeuiVertex3fvSUN(IntPtr rc, object v)

        public static
        void glReplacementCodeuiVertex3fvSUN(IntPtr rc, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiVertex3fvSUN_(rc, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiVertex3fvSUN(IntPtr rc, GLfloat[] v)

        public static
        void glReplacementCodeuiVertex3fvSUN(IntPtr rc, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiVertex3fvSUN_(rc, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiVertex3fvSUN(object rc, IntPtr v)

        public static
        void glReplacementCodeuiVertex3fvSUN(object rc, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiVertex3fvSUN_(h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiVertex3fvSUN(object rc, object v)

        public static
        void glReplacementCodeuiVertex3fvSUN(object rc, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiVertex3fvSUN(object rc, GLfloat[] v)

        public static
        void glReplacementCodeuiVertex3fvSUN(object rc, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiVertex3fvSUN(GLuint[] rc, IntPtr v)

        public static
        void glReplacementCodeuiVertex3fvSUN(GLuint[] rc, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiVertex3fvSUN_(h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiVertex3fvSUN(GLuint[] rc, object v)

        public static
        void glReplacementCodeuiVertex3fvSUN(GLuint[] rc, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiVertex3fvSUN(GLuint[] rc, GLfloat[] v)

        public static
        void glReplacementCodeuiVertex3fvSUN(GLuint[] rc, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4ubVertex3fvSUN(IntPtr rc, IntPtr c, IntPtr v)

        public static
        void glReplacementCodeuiColor4ubVertex3fvSUN(IntPtr rc, IntPtr c, IntPtr v)
        {
            glReplacementCodeuiColor4ubVertex3fvSUN_(rc, c, v);
        }

        #endregion

        #region glReplacementCodeuiColor4ubVertex3fvSUN(IntPtr rc, IntPtr c, object v)

        public static
        void glReplacementCodeuiColor4ubVertex3fvSUN(IntPtr rc, IntPtr c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4ubVertex3fvSUN_(rc, c, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4ubVertex3fvSUN(IntPtr rc, IntPtr c, GLfloat[] v)

        public static
        void glReplacementCodeuiColor4ubVertex3fvSUN(IntPtr rc, IntPtr c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4ubVertex3fvSUN_(rc, c, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4ubVertex3fvSUN(IntPtr rc, object c, IntPtr v)

        public static
        void glReplacementCodeuiColor4ubVertex3fvSUN(IntPtr rc, object c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4ubVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4ubVertex3fvSUN(IntPtr rc, object c, object v)

        public static
        void glReplacementCodeuiColor4ubVertex3fvSUN(IntPtr rc, object c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4ubVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4ubVertex3fvSUN(IntPtr rc, object c, GLfloat[] v)

        public static
        void glReplacementCodeuiColor4ubVertex3fvSUN(IntPtr rc, object c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4ubVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4ubVertex3fvSUN(IntPtr rc, GLubyte[] c, IntPtr v)

        public static
        void glReplacementCodeuiColor4ubVertex3fvSUN(IntPtr rc, GLubyte[] c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4ubVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4ubVertex3fvSUN(IntPtr rc, GLubyte[] c, object v)

        public static
        void glReplacementCodeuiColor4ubVertex3fvSUN(IntPtr rc, GLubyte[] c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4ubVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4ubVertex3fvSUN(IntPtr rc, GLubyte[] c, GLfloat[] v)

        public static
        void glReplacementCodeuiColor4ubVertex3fvSUN(IntPtr rc, GLubyte[] c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4ubVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4ubVertex3fvSUN(object rc, IntPtr c, IntPtr v)

        public static
        void glReplacementCodeuiColor4ubVertex3fvSUN(object rc, IntPtr c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4ubVertex3fvSUN_(h0.AddrOfPinnedObject(), c, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4ubVertex3fvSUN(object rc, IntPtr c, object v)

        public static
        void glReplacementCodeuiColor4ubVertex3fvSUN(object rc, IntPtr c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4ubVertex3fvSUN_(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4ubVertex3fvSUN(object rc, IntPtr c, GLfloat[] v)

        public static
        void glReplacementCodeuiColor4ubVertex3fvSUN(object rc, IntPtr c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4ubVertex3fvSUN_(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4ubVertex3fvSUN(object rc, object c, IntPtr v)

        public static
        void glReplacementCodeuiColor4ubVertex3fvSUN(object rc, object c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4ubVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4ubVertex3fvSUN(object rc, object c, object v)

        public static
        void glReplacementCodeuiColor4ubVertex3fvSUN(object rc, object c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4ubVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4ubVertex3fvSUN(object rc, object c, GLfloat[] v)

        public static
        void glReplacementCodeuiColor4ubVertex3fvSUN(object rc, object c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4ubVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4ubVertex3fvSUN(object rc, GLubyte[] c, IntPtr v)

        public static
        void glReplacementCodeuiColor4ubVertex3fvSUN(object rc, GLubyte[] c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4ubVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4ubVertex3fvSUN(object rc, GLubyte[] c, object v)

        public static
        void glReplacementCodeuiColor4ubVertex3fvSUN(object rc, GLubyte[] c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4ubVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4ubVertex3fvSUN(object rc, GLubyte[] c, GLfloat[] v)

        public static
        void glReplacementCodeuiColor4ubVertex3fvSUN(object rc, GLubyte[] c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4ubVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4ubVertex3fvSUN(GLuint[] rc, IntPtr c, IntPtr v)

        public static
        void glReplacementCodeuiColor4ubVertex3fvSUN(GLuint[] rc, IntPtr c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4ubVertex3fvSUN_(h0.AddrOfPinnedObject(), c, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4ubVertex3fvSUN(GLuint[] rc, IntPtr c, object v)

        public static
        void glReplacementCodeuiColor4ubVertex3fvSUN(GLuint[] rc, IntPtr c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4ubVertex3fvSUN_(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4ubVertex3fvSUN(GLuint[] rc, IntPtr c, GLfloat[] v)

        public static
        void glReplacementCodeuiColor4ubVertex3fvSUN(GLuint[] rc, IntPtr c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4ubVertex3fvSUN_(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4ubVertex3fvSUN(GLuint[] rc, object c, IntPtr v)

        public static
        void glReplacementCodeuiColor4ubVertex3fvSUN(GLuint[] rc, object c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4ubVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4ubVertex3fvSUN(GLuint[] rc, object c, object v)

        public static
        void glReplacementCodeuiColor4ubVertex3fvSUN(GLuint[] rc, object c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4ubVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4ubVertex3fvSUN(GLuint[] rc, object c, GLfloat[] v)

        public static
        void glReplacementCodeuiColor4ubVertex3fvSUN(GLuint[] rc, object c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4ubVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4ubVertex3fvSUN(GLuint[] rc, GLubyte[] c, IntPtr v)

        public static
        void glReplacementCodeuiColor4ubVertex3fvSUN(GLuint[] rc, GLubyte[] c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4ubVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4ubVertex3fvSUN(GLuint[] rc, GLubyte[] c, object v)

        public static
        void glReplacementCodeuiColor4ubVertex3fvSUN(GLuint[] rc, GLubyte[] c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4ubVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4ubVertex3fvSUN(GLuint[] rc, GLubyte[] c, GLfloat[] v)

        public static
        void glReplacementCodeuiColor4ubVertex3fvSUN(GLuint[] rc, GLubyte[] c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4ubVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor3fVertex3fvSUN(IntPtr rc, IntPtr c, IntPtr v)

        public static
        void glReplacementCodeuiColor3fVertex3fvSUN(IntPtr rc, IntPtr c, IntPtr v)
        {
            glReplacementCodeuiColor3fVertex3fvSUN_(rc, c, v);
        }

        #endregion

        #region glReplacementCodeuiColor3fVertex3fvSUN(IntPtr rc, IntPtr c, object v)

        public static
        void glReplacementCodeuiColor3fVertex3fvSUN(IntPtr rc, IntPtr c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor3fVertex3fvSUN_(rc, c, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor3fVertex3fvSUN(IntPtr rc, IntPtr c, GLfloat[] v)

        public static
        void glReplacementCodeuiColor3fVertex3fvSUN(IntPtr rc, IntPtr c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor3fVertex3fvSUN_(rc, c, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor3fVertex3fvSUN(IntPtr rc, object c, IntPtr v)

        public static
        void glReplacementCodeuiColor3fVertex3fvSUN(IntPtr rc, object c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor3fVertex3fvSUN(IntPtr rc, object c, object v)

        public static
        void glReplacementCodeuiColor3fVertex3fvSUN(IntPtr rc, object c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor3fVertex3fvSUN(IntPtr rc, object c, GLfloat[] v)

        public static
        void glReplacementCodeuiColor3fVertex3fvSUN(IntPtr rc, object c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor3fVertex3fvSUN(IntPtr rc, GLfloat[] c, IntPtr v)

        public static
        void glReplacementCodeuiColor3fVertex3fvSUN(IntPtr rc, GLfloat[] c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor3fVertex3fvSUN(IntPtr rc, GLfloat[] c, object v)

        public static
        void glReplacementCodeuiColor3fVertex3fvSUN(IntPtr rc, GLfloat[] c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor3fVertex3fvSUN(IntPtr rc, GLfloat[] c, GLfloat[] v)

        public static
        void glReplacementCodeuiColor3fVertex3fvSUN(IntPtr rc, GLfloat[] c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor3fVertex3fvSUN(object rc, IntPtr c, IntPtr v)

        public static
        void glReplacementCodeuiColor3fVertex3fvSUN(object rc, IntPtr c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor3fVertex3fvSUN_(h0.AddrOfPinnedObject(), c, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor3fVertex3fvSUN(object rc, IntPtr c, object v)

        public static
        void glReplacementCodeuiColor3fVertex3fvSUN(object rc, IntPtr c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor3fVertex3fvSUN_(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor3fVertex3fvSUN(object rc, IntPtr c, GLfloat[] v)

        public static
        void glReplacementCodeuiColor3fVertex3fvSUN(object rc, IntPtr c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor3fVertex3fvSUN_(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor3fVertex3fvSUN(object rc, object c, IntPtr v)

        public static
        void glReplacementCodeuiColor3fVertex3fvSUN(object rc, object c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor3fVertex3fvSUN(object rc, object c, object v)

        public static
        void glReplacementCodeuiColor3fVertex3fvSUN(object rc, object c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor3fVertex3fvSUN(object rc, object c, GLfloat[] v)

        public static
        void glReplacementCodeuiColor3fVertex3fvSUN(object rc, object c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor3fVertex3fvSUN(object rc, GLfloat[] c, IntPtr v)

        public static
        void glReplacementCodeuiColor3fVertex3fvSUN(object rc, GLfloat[] c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor3fVertex3fvSUN(object rc, GLfloat[] c, object v)

        public static
        void glReplacementCodeuiColor3fVertex3fvSUN(object rc, GLfloat[] c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor3fVertex3fvSUN(object rc, GLfloat[] c, GLfloat[] v)

        public static
        void glReplacementCodeuiColor3fVertex3fvSUN(object rc, GLfloat[] c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor3fVertex3fvSUN(GLuint[] rc, IntPtr c, IntPtr v)

        public static
        void glReplacementCodeuiColor3fVertex3fvSUN(GLuint[] rc, IntPtr c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor3fVertex3fvSUN_(h0.AddrOfPinnedObject(), c, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor3fVertex3fvSUN(GLuint[] rc, IntPtr c, object v)

        public static
        void glReplacementCodeuiColor3fVertex3fvSUN(GLuint[] rc, IntPtr c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor3fVertex3fvSUN_(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor3fVertex3fvSUN(GLuint[] rc, IntPtr c, GLfloat[] v)

        public static
        void glReplacementCodeuiColor3fVertex3fvSUN(GLuint[] rc, IntPtr c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor3fVertex3fvSUN_(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor3fVertex3fvSUN(GLuint[] rc, object c, IntPtr v)

        public static
        void glReplacementCodeuiColor3fVertex3fvSUN(GLuint[] rc, object c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor3fVertex3fvSUN(GLuint[] rc, object c, object v)

        public static
        void glReplacementCodeuiColor3fVertex3fvSUN(GLuint[] rc, object c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor3fVertex3fvSUN(GLuint[] rc, object c, GLfloat[] v)

        public static
        void glReplacementCodeuiColor3fVertex3fvSUN(GLuint[] rc, object c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor3fVertex3fvSUN(GLuint[] rc, GLfloat[] c, IntPtr v)

        public static
        void glReplacementCodeuiColor3fVertex3fvSUN(GLuint[] rc, GLfloat[] c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor3fVertex3fvSUN(GLuint[] rc, GLfloat[] c, object v)

        public static
        void glReplacementCodeuiColor3fVertex3fvSUN(GLuint[] rc, GLfloat[] c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor3fVertex3fvSUN(GLuint[] rc, GLfloat[] c, GLfloat[] v)

        public static
        void glReplacementCodeuiColor3fVertex3fvSUN(GLuint[] rc, GLfloat[] c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiNormal3fVertex3fvSUN(IntPtr rc, IntPtr n, IntPtr v)

        public static
        void glReplacementCodeuiNormal3fVertex3fvSUN(IntPtr rc, IntPtr n, IntPtr v)
        {
            glReplacementCodeuiNormal3fVertex3fvSUN_(rc, n, v);
        }

        #endregion

        #region glReplacementCodeuiNormal3fVertex3fvSUN(IntPtr rc, IntPtr n, object v)

        public static
        void glReplacementCodeuiNormal3fVertex3fvSUN(IntPtr rc, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiNormal3fVertex3fvSUN_(rc, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiNormal3fVertex3fvSUN(IntPtr rc, IntPtr n, GLfloat[] v)

        public static
        void glReplacementCodeuiNormal3fVertex3fvSUN(IntPtr rc, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiNormal3fVertex3fvSUN_(rc, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiNormal3fVertex3fvSUN(IntPtr rc, object n, IntPtr v)

        public static
        void glReplacementCodeuiNormal3fVertex3fvSUN(IntPtr rc, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiNormal3fVertex3fvSUN(IntPtr rc, object n, object v)

        public static
        void glReplacementCodeuiNormal3fVertex3fvSUN(IntPtr rc, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiNormal3fVertex3fvSUN(IntPtr rc, object n, GLfloat[] v)

        public static
        void glReplacementCodeuiNormal3fVertex3fvSUN(IntPtr rc, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] n, IntPtr v)

        public static
        void glReplacementCodeuiNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] n, object v)

        public static
        void glReplacementCodeuiNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] n, GLfloat[] v)

        public static
        void glReplacementCodeuiNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiNormal3fVertex3fvSUN(object rc, IntPtr n, IntPtr v)

        public static
        void glReplacementCodeuiNormal3fVertex3fvSUN(object rc, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiNormal3fVertex3fvSUN(object rc, IntPtr n, object v)

        public static
        void glReplacementCodeuiNormal3fVertex3fvSUN(object rc, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiNormal3fVertex3fvSUN(object rc, IntPtr n, GLfloat[] v)

        public static
        void glReplacementCodeuiNormal3fVertex3fvSUN(object rc, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiNormal3fVertex3fvSUN(object rc, object n, IntPtr v)

        public static
        void glReplacementCodeuiNormal3fVertex3fvSUN(object rc, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiNormal3fVertex3fvSUN(object rc, object n, object v)

        public static
        void glReplacementCodeuiNormal3fVertex3fvSUN(object rc, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiNormal3fVertex3fvSUN(object rc, object n, GLfloat[] v)

        public static
        void glReplacementCodeuiNormal3fVertex3fvSUN(object rc, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiNormal3fVertex3fvSUN(object rc, GLfloat[] n, IntPtr v)

        public static
        void glReplacementCodeuiNormal3fVertex3fvSUN(object rc, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiNormal3fVertex3fvSUN(object rc, GLfloat[] n, object v)

        public static
        void glReplacementCodeuiNormal3fVertex3fvSUN(object rc, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiNormal3fVertex3fvSUN(object rc, GLfloat[] n, GLfloat[] v)

        public static
        void glReplacementCodeuiNormal3fVertex3fvSUN(object rc, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiNormal3fVertex3fvSUN(GLuint[] rc, IntPtr n, IntPtr v)

        public static
        void glReplacementCodeuiNormal3fVertex3fvSUN(GLuint[] rc, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiNormal3fVertex3fvSUN(GLuint[] rc, IntPtr n, object v)

        public static
        void glReplacementCodeuiNormal3fVertex3fvSUN(GLuint[] rc, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiNormal3fVertex3fvSUN(GLuint[] rc, IntPtr n, GLfloat[] v)

        public static
        void glReplacementCodeuiNormal3fVertex3fvSUN(GLuint[] rc, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiNormal3fVertex3fvSUN(GLuint[] rc, object n, IntPtr v)

        public static
        void glReplacementCodeuiNormal3fVertex3fvSUN(GLuint[] rc, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiNormal3fVertex3fvSUN(GLuint[] rc, object n, object v)

        public static
        void glReplacementCodeuiNormal3fVertex3fvSUN(GLuint[] rc, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiNormal3fVertex3fvSUN(GLuint[] rc, object n, GLfloat[] v)

        public static
        void glReplacementCodeuiNormal3fVertex3fvSUN(GLuint[] rc, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] n, IntPtr v)

        public static
        void glReplacementCodeuiNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] n, object v)

        public static
        void glReplacementCodeuiNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] n, GLfloat[] v)

        public static
        void glReplacementCodeuiNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr c, IntPtr n, IntPtr v)

        public static
        void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr c, IntPtr n, IntPtr v)
        {
            glReplacementCodeuiColor4fNormal3fVertex3fvSUN_(rc, c, n, v);
        }

        #endregion

        #region glReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr c, IntPtr n, object v)

        public static
        void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4fNormal3fVertex3fvSUN_(rc, c, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr c, IntPtr n, GLfloat[] v)

        public static
        void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4fNormal3fVertex3fvSUN_(rc, c, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr c, object n, IntPtr v)

        public static
        void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4fNormal3fVertex3fvSUN_(rc, c, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr c, object n, object v)

        public static
        void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4fNormal3fVertex3fvSUN_(rc, c, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr c, object n, GLfloat[] v)

        public static
        void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4fNormal3fVertex3fvSUN_(rc, c, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr c, GLfloat[] n, IntPtr v)

        public static
        void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4fNormal3fVertex3fvSUN_(rc, c, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr c, GLfloat[] n, object v)

        public static
        void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4fNormal3fVertex3fvSUN_(rc, c, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr c, GLfloat[] n, GLfloat[] v)

        public static
        void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4fNormal3fVertex3fvSUN_(rc, c, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, object c, IntPtr n, IntPtr v)

        public static
        void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, object c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, object c, IntPtr n, object v)

        public static
        void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, object c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, object c, IntPtr n, GLfloat[] v)

        public static
        void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, object c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, object c, object n, IntPtr v)

        public static
        void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, object c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, object c, object n, object v)

        public static
        void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, object c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, object c, object n, GLfloat[] v)

        public static
        void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, object c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, object c, GLfloat[] n, IntPtr v)

        public static
        void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, object c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, object c, GLfloat[] n, object v)

        public static
        void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, object c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, object c, GLfloat[] n, GLfloat[] v)

        public static
        void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, object c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] c, IntPtr n, IntPtr v)

        public static
        void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] c, IntPtr n, object v)

        public static
        void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] c, IntPtr n, GLfloat[] v)

        public static
        void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] c, object n, IntPtr v)

        public static
        void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] c, object n, object v)

        public static
        void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] c, object n, GLfloat[] v)

        public static
        void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] c, GLfloat[] n, IntPtr v)

        public static
        void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] c, GLfloat[] n, object v)

        public static
        void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] c, GLfloat[] n, GLfloat[] v)

        public static
        void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, IntPtr c, IntPtr n, IntPtr v)

        public static
        void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, IntPtr c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), c, n, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, IntPtr c, IntPtr n, object v)

        public static
        void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, IntPtr c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), c, n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, IntPtr c, IntPtr n, GLfloat[] v)

        public static
        void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, IntPtr c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), c, n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, IntPtr c, object n, IntPtr v)

        public static
        void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, IntPtr c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, IntPtr c, object n, object v)

        public static
        void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, IntPtr c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, IntPtr c, object n, GLfloat[] v)

        public static
        void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, IntPtr c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, IntPtr c, GLfloat[] n, IntPtr v)

        public static
        void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, IntPtr c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, IntPtr c, GLfloat[] n, object v)

        public static
        void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, IntPtr c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, IntPtr c, GLfloat[] n, GLfloat[] v)

        public static
        void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, IntPtr c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, object c, IntPtr n, IntPtr v)

        public static
        void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, object c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, object c, IntPtr n, object v)

        public static
        void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, object c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, object c, IntPtr n, GLfloat[] v)

        public static
        void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, object c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, object c, object n, IntPtr v)

        public static
        void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, object c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, object c, object n, object v)

        public static
        void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, object c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, object c, object n, GLfloat[] v)

        public static
        void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, object c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, object c, GLfloat[] n, IntPtr v)

        public static
        void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, object c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, object c, GLfloat[] n, object v)

        public static
        void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, object c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, object c, GLfloat[] n, GLfloat[] v)

        public static
        void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, object c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] c, IntPtr n, IntPtr v)

        public static
        void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] c, IntPtr n, object v)

        public static
        void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] c, IntPtr n, GLfloat[] v)

        public static
        void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] c, object n, IntPtr v)

        public static
        void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] c, object n, object v)

        public static
        void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] c, object n, GLfloat[] v)

        public static
        void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] c, GLfloat[] n, IntPtr v)

        public static
        void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] c, GLfloat[] n, object v)

        public static
        void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] c, GLfloat[] n, GLfloat[] v)

        public static
        void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr c, IntPtr n, IntPtr v)

        public static
        void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), c, n, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr c, IntPtr n, object v)

        public static
        void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), c, n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr c, IntPtr n, GLfloat[] v)

        public static
        void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), c, n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr c, object n, IntPtr v)

        public static
        void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr c, object n, object v)

        public static
        void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr c, object n, GLfloat[] v)

        public static
        void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr c, GLfloat[] n, IntPtr v)

        public static
        void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr c, GLfloat[] n, object v)

        public static
        void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr c, GLfloat[] n, GLfloat[] v)

        public static
        void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, object c, IntPtr n, IntPtr v)

        public static
        void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, object c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, object c, IntPtr n, object v)

        public static
        void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, object c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, object c, IntPtr n, GLfloat[] v)

        public static
        void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, object c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, object c, object n, IntPtr v)

        public static
        void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, object c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, object c, object n, object v)

        public static
        void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, object c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, object c, object n, GLfloat[] v)

        public static
        void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, object c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, object c, GLfloat[] n, IntPtr v)

        public static
        void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, object c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, object c, GLfloat[] n, object v)

        public static
        void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, object c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, object c, GLfloat[] n, GLfloat[] v)

        public static
        void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, object c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] c, IntPtr n, IntPtr v)

        public static
        void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] c, IntPtr n, object v)

        public static
        void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] c, IntPtr n, GLfloat[] v)

        public static
        void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] c, object n, IntPtr v)

        public static
        void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] c, object n, object v)

        public static
        void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] c, object n, GLfloat[] v)

        public static
        void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] c, GLfloat[] n, IntPtr v)

        public static
        void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] c, GLfloat[] n, object v)

        public static
        void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] c, GLfloat[] n, GLfloat[] v)

        public static
        void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fVertex3fvSUN(IntPtr rc, IntPtr tc, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fVertex3fvSUN(IntPtr rc, IntPtr tc, IntPtr v)
        {
            glReplacementCodeuiTexCoord2fVertex3fvSUN_(rc, tc, v);
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fVertex3fvSUN(IntPtr rc, IntPtr tc, object v)

        public static
        void glReplacementCodeuiTexCoord2fVertex3fvSUN(IntPtr rc, IntPtr tc, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fVertex3fvSUN_(rc, tc, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fVertex3fvSUN(IntPtr rc, IntPtr tc, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fVertex3fvSUN(IntPtr rc, IntPtr tc, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fVertex3fvSUN_(rc, tc, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fVertex3fvSUN(IntPtr rc, object tc, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fVertex3fvSUN(IntPtr rc, object tc, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fVertex3fvSUN(IntPtr rc, object tc, object v)

        public static
        void glReplacementCodeuiTexCoord2fVertex3fvSUN(IntPtr rc, object tc, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fVertex3fvSUN(IntPtr rc, object tc, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fVertex3fvSUN(IntPtr rc, object tc, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fVertex3fvSUN(IntPtr rc, GLfloat[] tc, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fVertex3fvSUN(IntPtr rc, GLfloat[] tc, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fVertex3fvSUN(IntPtr rc, GLfloat[] tc, object v)

        public static
        void glReplacementCodeuiTexCoord2fVertex3fvSUN(IntPtr rc, GLfloat[] tc, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fVertex3fvSUN(IntPtr rc, GLfloat[] tc, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fVertex3fvSUN(IntPtr rc, GLfloat[] tc, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fVertex3fvSUN(object rc, IntPtr tc, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fVertex3fvSUN(object rc, IntPtr tc, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fVertex3fvSUN(object rc, IntPtr tc, object v)

        public static
        void glReplacementCodeuiTexCoord2fVertex3fvSUN(object rc, IntPtr tc, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fVertex3fvSUN(object rc, IntPtr tc, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fVertex3fvSUN(object rc, IntPtr tc, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fVertex3fvSUN(object rc, object tc, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fVertex3fvSUN(object rc, object tc, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fVertex3fvSUN(object rc, object tc, object v)

        public static
        void glReplacementCodeuiTexCoord2fVertex3fvSUN(object rc, object tc, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fVertex3fvSUN(object rc, object tc, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fVertex3fvSUN(object rc, object tc, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fVertex3fvSUN(object rc, GLfloat[] tc, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fVertex3fvSUN(object rc, GLfloat[] tc, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fVertex3fvSUN(object rc, GLfloat[] tc, object v)

        public static
        void glReplacementCodeuiTexCoord2fVertex3fvSUN(object rc, GLfloat[] tc, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fVertex3fvSUN(object rc, GLfloat[] tc, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fVertex3fvSUN(object rc, GLfloat[] tc, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fVertex3fvSUN(GLuint[] rc, IntPtr tc, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fVertex3fvSUN(GLuint[] rc, IntPtr tc, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fVertex3fvSUN(GLuint[] rc, IntPtr tc, object v)

        public static
        void glReplacementCodeuiTexCoord2fVertex3fvSUN(GLuint[] rc, IntPtr tc, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fVertex3fvSUN(GLuint[] rc, IntPtr tc, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fVertex3fvSUN(GLuint[] rc, IntPtr tc, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fVertex3fvSUN(GLuint[] rc, object tc, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fVertex3fvSUN(GLuint[] rc, object tc, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fVertex3fvSUN(GLuint[] rc, object tc, object v)

        public static
        void glReplacementCodeuiTexCoord2fVertex3fvSUN(GLuint[] rc, object tc, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fVertex3fvSUN(GLuint[] rc, object tc, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fVertex3fvSUN(GLuint[] rc, object tc, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, object v)

        public static
        void glReplacementCodeuiTexCoord2fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, IntPtr n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, IntPtr n, IntPtr v)
        {
            glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(rc, tc, n, v);
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, IntPtr n, object v)

        public static
        void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(rc, tc, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, IntPtr n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(rc, tc, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, object n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(rc, tc, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, object n, object v)

        public static
        void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(rc, tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, object n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(rc, tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, GLfloat[] n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(rc, tc, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, GLfloat[] n, object v)

        public static
        void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(rc, tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, GLfloat[] n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(rc, tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, object tc, IntPtr n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, object tc, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, object tc, IntPtr n, object v)

        public static
        void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, object tc, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, object tc, IntPtr n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, object tc, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, object tc, object n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, object tc, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, object tc, object n, object v)

        public static
        void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, object tc, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, object tc, object n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, object tc, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, object tc, GLfloat[] n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, object tc, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, object tc, GLfloat[] n, object v)

        public static
        void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, object tc, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, object tc, GLfloat[] n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, object tc, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, IntPtr n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, IntPtr n, object v)

        public static
        void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, IntPtr n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, object n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, object n, object v)

        public static
        void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, object n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, GLfloat[] n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, GLfloat[] n, object v)

        public static
        void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, GLfloat[] n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, IntPtr tc, IntPtr n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, IntPtr tc, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, n, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, IntPtr tc, IntPtr n, object v)

        public static
        void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, IntPtr tc, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, IntPtr tc, IntPtr n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, IntPtr tc, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, IntPtr tc, object n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, IntPtr tc, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, IntPtr tc, object n, object v)

        public static
        void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, IntPtr tc, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, IntPtr tc, object n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, IntPtr tc, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, IntPtr tc, GLfloat[] n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, IntPtr tc, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, IntPtr tc, GLfloat[] n, object v)

        public static
        void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, IntPtr tc, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, IntPtr tc, GLfloat[] n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, IntPtr tc, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, object tc, IntPtr n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, object tc, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, object tc, IntPtr n, object v)

        public static
        void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, object tc, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, object tc, IntPtr n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, object tc, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, object tc, object n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, object tc, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, object tc, object n, object v)

        public static
        void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, object tc, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, object tc, object n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, object tc, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, object tc, GLfloat[] n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, object tc, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, object tc, GLfloat[] n, object v)

        public static
        void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, object tc, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, object tc, GLfloat[] n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, object tc, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, IntPtr n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, IntPtr n, object v)

        public static
        void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, IntPtr n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, object n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, object n, object v)

        public static
        void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, object n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, GLfloat[] n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, GLfloat[] n, object v)

        public static
        void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, GLfloat[] n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, IntPtr n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, n, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, IntPtr n, object v)

        public static
        void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, IntPtr n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, object n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, object n, object v)

        public static
        void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, object n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, GLfloat[] n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, GLfloat[] n, object v)

        public static
        void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, GLfloat[] n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, object tc, IntPtr n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, object tc, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, object tc, IntPtr n, object v)

        public static
        void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, object tc, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, object tc, IntPtr n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, object tc, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, object tc, object n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, object tc, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, object tc, object n, object v)

        public static
        void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, object tc, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, object tc, object n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, object tc, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, object tc, GLfloat[] n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, object tc, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, object tc, GLfloat[] n, object v)

        public static
        void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, object tc, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, object tc, GLfloat[] n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, object tc, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, IntPtr n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, IntPtr n, object v)

        public static
        void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, IntPtr n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, object n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, object n, object v)

        public static
        void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, object n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] n, object v)

        public static
        void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, IntPtr c, IntPtr n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, IntPtr c, IntPtr n, IntPtr v)
        {
            glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, tc, c, n, v);
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, IntPtr c, IntPtr n, object v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, IntPtr c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, tc, c, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, IntPtr c, IntPtr n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, IntPtr c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, tc, c, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, IntPtr c, object n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, IntPtr c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, tc, c, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, IntPtr c, object n, object v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, IntPtr c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, tc, c, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, IntPtr c, object n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, IntPtr c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, tc, c, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, IntPtr c, GLfloat[] n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, IntPtr c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, tc, c, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, IntPtr c, GLfloat[] n, object v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, IntPtr c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, tc, c, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, IntPtr c, GLfloat[] n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, IntPtr c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, tc, c, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, object c, IntPtr n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, object c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, tc, h0.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, object c, IntPtr n, object v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, object c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, tc, h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, object c, IntPtr n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, object c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, tc, h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, object c, object n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, object c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, object c, object n, object v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, object c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, object c, object n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, object c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, object c, GLfloat[] n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, object c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, object c, GLfloat[] n, object v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, object c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, object c, GLfloat[] n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, object c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, GLfloat[] c, IntPtr n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, GLfloat[] c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, tc, h0.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, GLfloat[] c, IntPtr n, object v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, GLfloat[] c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, tc, h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, GLfloat[] c, IntPtr n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, GLfloat[] c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, tc, h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, GLfloat[] c, object n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, GLfloat[] c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, GLfloat[] c, object n, object v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, GLfloat[] c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, GLfloat[] c, object n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, GLfloat[] c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, GLfloat[] c, GLfloat[] n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, GLfloat[] c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, GLfloat[] c, GLfloat[] n, object v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, GLfloat[] c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, IntPtr c, IntPtr n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, IntPtr c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), c, n, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, IntPtr c, IntPtr n, object v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, IntPtr c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), c, n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, IntPtr c, IntPtr n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, IntPtr c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), c, n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, IntPtr c, object n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, IntPtr c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, IntPtr c, object n, object v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, IntPtr c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, IntPtr c, object n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, IntPtr c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, IntPtr c, GLfloat[] n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, IntPtr c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, IntPtr c, GLfloat[] n, object v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, IntPtr c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, IntPtr c, GLfloat[] n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, IntPtr c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, object c, IntPtr n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, object c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, object c, IntPtr n, object v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, object c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, object c, IntPtr n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, object c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, object c, object n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, object c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, object c, object n, object v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, object c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, object c, object n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, object c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, object c, GLfloat[] n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, object c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, object c, GLfloat[] n, object v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, object c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, object c, GLfloat[] n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, object c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, GLfloat[] c, IntPtr n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, GLfloat[] c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, GLfloat[] c, IntPtr n, object v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, GLfloat[] c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, GLfloat[] c, IntPtr n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, GLfloat[] c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, GLfloat[] c, object n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, GLfloat[] c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, GLfloat[] c, object n, object v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, GLfloat[] c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, GLfloat[] c, object n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, GLfloat[] c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, GLfloat[] c, GLfloat[] n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, GLfloat[] c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, GLfloat[] c, GLfloat[] n, object v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, GLfloat[] c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, IntPtr c, IntPtr n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, IntPtr c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), c, n, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, IntPtr c, IntPtr n, object v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, IntPtr c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), c, n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, IntPtr c, IntPtr n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, IntPtr c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), c, n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, IntPtr c, object n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, IntPtr c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, IntPtr c, object n, object v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, IntPtr c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, IntPtr c, object n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, IntPtr c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, IntPtr c, GLfloat[] n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, IntPtr c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, IntPtr c, GLfloat[] n, object v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, IntPtr c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, IntPtr c, GLfloat[] n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, IntPtr c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, object c, IntPtr n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, object c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, object c, IntPtr n, object v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, object c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, object c, IntPtr n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, object c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, object c, object n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, object c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, object c, object n, object v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, object c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, object c, object n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, object c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, object c, GLfloat[] n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, object c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, object c, GLfloat[] n, object v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, object c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, object c, GLfloat[] n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, object c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, GLfloat[] c, IntPtr n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, GLfloat[] c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, GLfloat[] c, IntPtr n, object v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, GLfloat[] c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, GLfloat[] c, IntPtr n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, GLfloat[] c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, GLfloat[] c, object n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, GLfloat[] c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, GLfloat[] c, object n, object v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, GLfloat[] c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, GLfloat[] c, object n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, GLfloat[] c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, GLfloat[] c, GLfloat[] n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, GLfloat[] c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, GLfloat[] c, GLfloat[] n, object v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, GLfloat[] c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, IntPtr c, IntPtr n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, IntPtr c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, c, n, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, IntPtr c, IntPtr n, object v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, IntPtr c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, c, n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, IntPtr c, IntPtr n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, IntPtr c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, c, n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, IntPtr c, object n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, IntPtr c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, c, h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, IntPtr c, object n, object v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, IntPtr c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, IntPtr c, object n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, IntPtr c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, IntPtr c, GLfloat[] n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, IntPtr c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, c, h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, IntPtr c, GLfloat[] n, object v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, IntPtr c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, IntPtr c, GLfloat[] n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, IntPtr c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, object c, IntPtr n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, object c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, object c, IntPtr n, object v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, object c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, object c, IntPtr n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, object c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, object c, object n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, object c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, object c, object n, object v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, object c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, object c, object n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, object c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, object c, GLfloat[] n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, object c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, object c, GLfloat[] n, object v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, object c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, object c, GLfloat[] n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, object c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, GLfloat[] c, IntPtr n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, GLfloat[] c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, GLfloat[] c, IntPtr n, object v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, GLfloat[] c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, GLfloat[] c, IntPtr n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, GLfloat[] c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, GLfloat[] c, object n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, GLfloat[] c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, GLfloat[] c, object n, object v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, GLfloat[] c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, GLfloat[] c, object n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, GLfloat[] c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, GLfloat[] c, GLfloat[] n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, GLfloat[] c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, GLfloat[] c, GLfloat[] n, object v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, GLfloat[] c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, IntPtr c, IntPtr n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, IntPtr c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, n, v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, IntPtr c, IntPtr n, object v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, IntPtr c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, IntPtr c, IntPtr n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, IntPtr c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, IntPtr c, object n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, IntPtr c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, IntPtr c, object n, object v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, IntPtr c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, IntPtr c, object n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, IntPtr c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, IntPtr c, GLfloat[] n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, IntPtr c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, IntPtr c, GLfloat[] n, object v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, IntPtr c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, IntPtr c, GLfloat[] n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, IntPtr c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, object c, IntPtr n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, object c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, object c, IntPtr n, object v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, object c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), n, h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, object c, IntPtr n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, object c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), n, h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, object c, object n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, object c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), v);
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, object c, object n, object v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, object c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h4.Free();
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, object c, object n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, object c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h4.Free();
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, object c, GLfloat[] n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, object c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), v);
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, object c, GLfloat[] n, object v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, object c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h4.Free();
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, object c, GLfloat[] n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, object c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h4.Free();
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, GLfloat[] c, IntPtr n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, GLfloat[] c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, GLfloat[] c, IntPtr n, object v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, GLfloat[] c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), n, h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, GLfloat[] c, IntPtr n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, GLfloat[] c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), n, h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, GLfloat[] c, object n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, GLfloat[] c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), v);
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, GLfloat[] c, object n, object v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, GLfloat[] c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h4.Free();
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, GLfloat[] c, object n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, GLfloat[] c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h4.Free();
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, GLfloat[] c, GLfloat[] n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, GLfloat[] c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), v);
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, GLfloat[] c, GLfloat[] n, object v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, GLfloat[] c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h4.Free();
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h4.Free();
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, IntPtr c, IntPtr n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, IntPtr c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, n, v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, IntPtr c, IntPtr n, object v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, IntPtr c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, IntPtr c, IntPtr n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, IntPtr c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, IntPtr c, object n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, IntPtr c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, IntPtr c, object n, object v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, IntPtr c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, IntPtr c, object n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, IntPtr c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, IntPtr c, GLfloat[] n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, IntPtr c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, IntPtr c, GLfloat[] n, object v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, IntPtr c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, IntPtr c, GLfloat[] n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, IntPtr c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, object c, IntPtr n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, object c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, object c, IntPtr n, object v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, object c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), n, h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, object c, IntPtr n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, object c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), n, h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, object c, object n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, object c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), v);
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, object c, object n, object v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, object c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h4.Free();
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, object c, object n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, object c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h4.Free();
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, object c, GLfloat[] n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, object c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), v);
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, object c, GLfloat[] n, object v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, object c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h4.Free();
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, object c, GLfloat[] n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, object c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h4.Free();
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, GLfloat[] c, IntPtr n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, GLfloat[] c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, GLfloat[] c, IntPtr n, object v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, GLfloat[] c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), n, h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, GLfloat[] c, IntPtr n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, GLfloat[] c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), n, h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, GLfloat[] c, object n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, GLfloat[] c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), v);
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, GLfloat[] c, object n, object v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, GLfloat[] c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h4.Free();
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, GLfloat[] c, object n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, GLfloat[] c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h4.Free();
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, GLfloat[] c, GLfloat[] n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, GLfloat[] c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), v);
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, GLfloat[] c, GLfloat[] n, object v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, GLfloat[] c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h4.Free();
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h4.Free();
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, IntPtr c, IntPtr n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, IntPtr c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, c, n, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, IntPtr c, IntPtr n, object v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, IntPtr c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, c, n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, IntPtr c, IntPtr n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, IntPtr c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, c, n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, IntPtr c, object n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, IntPtr c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, c, h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, IntPtr c, object n, object v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, IntPtr c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, IntPtr c, object n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, IntPtr c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, IntPtr c, GLfloat[] n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, IntPtr c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, c, h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, IntPtr c, GLfloat[] n, object v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, IntPtr c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, IntPtr c, GLfloat[] n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, IntPtr c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, object c, IntPtr n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, object c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, object c, IntPtr n, object v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, object c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, object c, IntPtr n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, object c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, object c, object n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, object c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, object c, object n, object v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, object c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, object c, object n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, object c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, object c, GLfloat[] n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, object c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, object c, GLfloat[] n, object v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, object c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, object c, GLfloat[] n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, object c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, GLfloat[] c, IntPtr n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, GLfloat[] c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, GLfloat[] c, IntPtr n, object v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, GLfloat[] c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, GLfloat[] c, IntPtr n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, GLfloat[] c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, GLfloat[] c, object n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, GLfloat[] c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, GLfloat[] c, object n, object v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, GLfloat[] c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, GLfloat[] c, object n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, GLfloat[] c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, GLfloat[] c, GLfloat[] n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, GLfloat[] c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, GLfloat[] c, GLfloat[] n, object v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, GLfloat[] c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, IntPtr c, IntPtr n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, IntPtr c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, n, v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, IntPtr c, IntPtr n, object v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, IntPtr c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, IntPtr c, IntPtr n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, IntPtr c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, IntPtr c, object n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, IntPtr c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, IntPtr c, object n, object v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, IntPtr c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, IntPtr c, object n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, IntPtr c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, IntPtr c, GLfloat[] n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, IntPtr c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, IntPtr c, GLfloat[] n, object v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, IntPtr c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, IntPtr c, GLfloat[] n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, IntPtr c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, object c, IntPtr n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, object c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, object c, IntPtr n, object v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, object c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), n, h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, object c, IntPtr n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, object c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), n, h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, object c, object n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, object c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), v);
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, object c, object n, object v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, object c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h4.Free();
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, object c, object n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, object c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h4.Free();
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, object c, GLfloat[] n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, object c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), v);
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, object c, GLfloat[] n, object v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, object c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h4.Free();
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, object c, GLfloat[] n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, object c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h4.Free();
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, GLfloat[] c, IntPtr n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, GLfloat[] c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, GLfloat[] c, IntPtr n, object v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, GLfloat[] c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), n, h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, GLfloat[] c, IntPtr n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, GLfloat[] c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), n, h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, GLfloat[] c, object n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, GLfloat[] c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), v);
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, GLfloat[] c, object n, object v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, GLfloat[] c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h4.Free();
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, GLfloat[] c, object n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, GLfloat[] c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h4.Free();
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, GLfloat[] c, GLfloat[] n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, GLfloat[] c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), v);
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, GLfloat[] c, GLfloat[] n, object v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, GLfloat[] c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h4.Free();
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h4.Free();
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, IntPtr c, IntPtr n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, IntPtr c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, n, v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, IntPtr c, IntPtr n, object v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, IntPtr c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, IntPtr c, IntPtr n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, IntPtr c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, IntPtr c, object n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, IntPtr c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, IntPtr c, object n, object v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, IntPtr c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, IntPtr c, object n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, IntPtr c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, IntPtr c, GLfloat[] n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, IntPtr c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, IntPtr c, GLfloat[] n, object v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, IntPtr c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, IntPtr c, GLfloat[] n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, IntPtr c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, object c, IntPtr n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, object c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, object c, IntPtr n, object v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, object c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), n, h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, object c, IntPtr n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, object c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), n, h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, object c, object n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, object c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), v);
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, object c, object n, object v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, object c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h4.Free();
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, object c, object n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, object c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h4.Free();
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, object c, GLfloat[] n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, object c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), v);
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, object c, GLfloat[] n, object v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, object c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h4.Free();
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, object c, GLfloat[] n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, object c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h4.Free();
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] c, IntPtr n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] c, IntPtr n, object v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), n, h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] c, IntPtr n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), n, h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] c, object n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), v);
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] c, object n, object v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h4.Free();
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] c, object n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h4.Free();
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] c, GLfloat[] n, IntPtr v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), v);
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] c, GLfloat[] n, object v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h4.Free();
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)

        public static
        void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h4.Free();
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glVertexWeightfvEXT(IntPtr weight)

        public static
        void glVertexWeightfvEXT(IntPtr weight)
        {
            glVertexWeightfvEXT_(weight);
        }

        #endregion

        #region glVertexWeightfvEXT(object weight)

        public static
        void glVertexWeightfvEXT(object weight)
        {
            GCHandle h0 = GCHandle.Alloc(weight, GCHandleType.Pinned);
            try
            {
                glVertexWeightfvEXT_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexWeightfvEXT(GLfloat[] weight)

        public static
        void glVertexWeightfvEXT(GLfloat[] weight)
        {
            GCHandle h0 = GCHandle.Alloc(weight, GCHandleType.Pinned);
            try
            {
                glVertexWeightfvEXT_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexWeightPointerEXT(GLsizei size, GLenum type, GLsizei stride, IntPtr pointer)

        public static
        void glVertexWeightPointerEXT(GLsizei size, GLenum type, GLsizei stride, IntPtr pointer)
        {
            glVertexWeightPointerEXT_(size, type, stride, pointer);
        }

        #endregion

        #region glVertexWeightPointerEXT(GLsizei size, GLenum type, GLsizei stride, object pointer)

        public static
        void glVertexWeightPointerEXT(GLsizei size, GLenum type, GLsizei stride, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                glVertexWeightPointerEXT_(size, type, stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexArrayRangeNV(GLsizei length, IntPtr pointer)

        public static
        void glVertexArrayRangeNV(GLsizei length, IntPtr pointer)
        {
            glVertexArrayRangeNV_(length, pointer);
        }

        #endregion

        #region glVertexArrayRangeNV(GLsizei length, object pointer)

        public static
        void glVertexArrayRangeNV(GLsizei length, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                glVertexArrayRangeNV_(length, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glCombinerParameterfvNV(GLenum pname, IntPtr parameters)

        public static
        void glCombinerParameterfvNV(GLenum pname, IntPtr parameters)
        {
            glCombinerParameterfvNV_(pname, parameters);
        }

        #endregion

        #region glCombinerParameterfvNV(GLenum pname, object parameters)

        public static
        void glCombinerParameterfvNV(GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glCombinerParameterfvNV_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glCombinerParameterfvNV(GLenum pname, GLfloat[] parameters)

        public static
        void glCombinerParameterfvNV(GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glCombinerParameterfvNV_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glCombinerParameterivNV(GLenum pname, IntPtr parameters)

        public static
        void glCombinerParameterivNV(GLenum pname, IntPtr parameters)
        {
            glCombinerParameterivNV_(pname, parameters);
        }

        #endregion

        #region glCombinerParameterivNV(GLenum pname, object parameters)

        public static
        void glCombinerParameterivNV(GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glCombinerParameterivNV_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glCombinerParameterivNV(GLenum pname, GLint[] parameters)

        public static
        void glCombinerParameterivNV(GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glCombinerParameterivNV_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetCombinerInputParameterfvNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, IntPtr parameters)

        public static
        void glGetCombinerInputParameterfvNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, IntPtr parameters)
        {
            glGetCombinerInputParameterfvNV_(stage, portion, variable, pname, parameters);
        }

        #endregion

        #region glGetCombinerInputParameterfvNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, object parameters)

        public static
        void glGetCombinerInputParameterfvNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetCombinerInputParameterfvNV_(stage, portion, variable, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetCombinerInputParameterfvNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat[] parameters)

        public static
        void glGetCombinerInputParameterfvNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetCombinerInputParameterfvNV_(stage, portion, variable, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetCombinerInputParameterivNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, IntPtr parameters)

        public static
        void glGetCombinerInputParameterivNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, IntPtr parameters)
        {
            glGetCombinerInputParameterivNV_(stage, portion, variable, pname, parameters);
        }

        #endregion

        #region glGetCombinerInputParameterivNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, object parameters)

        public static
        void glGetCombinerInputParameterivNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetCombinerInputParameterivNV_(stage, portion, variable, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetCombinerInputParameterivNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint[] parameters)

        public static
        void glGetCombinerInputParameterivNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetCombinerInputParameterivNV_(stage, portion, variable, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetCombinerOutputParameterfvNV(GLenum stage, GLenum portion, GLenum pname, IntPtr parameters)

        public static
        void glGetCombinerOutputParameterfvNV(GLenum stage, GLenum portion, GLenum pname, IntPtr parameters)
        {
            glGetCombinerOutputParameterfvNV_(stage, portion, pname, parameters);
        }

        #endregion

        #region glGetCombinerOutputParameterfvNV(GLenum stage, GLenum portion, GLenum pname, object parameters)

        public static
        void glGetCombinerOutputParameterfvNV(GLenum stage, GLenum portion, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetCombinerOutputParameterfvNV_(stage, portion, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetCombinerOutputParameterfvNV(GLenum stage, GLenum portion, GLenum pname, GLfloat[] parameters)

        public static
        void glGetCombinerOutputParameterfvNV(GLenum stage, GLenum portion, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetCombinerOutputParameterfvNV_(stage, portion, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetCombinerOutputParameterivNV(GLenum stage, GLenum portion, GLenum pname, IntPtr parameters)

        public static
        void glGetCombinerOutputParameterivNV(GLenum stage, GLenum portion, GLenum pname, IntPtr parameters)
        {
            glGetCombinerOutputParameterivNV_(stage, portion, pname, parameters);
        }

        #endregion

        #region glGetCombinerOutputParameterivNV(GLenum stage, GLenum portion, GLenum pname, object parameters)

        public static
        void glGetCombinerOutputParameterivNV(GLenum stage, GLenum portion, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetCombinerOutputParameterivNV_(stage, portion, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetCombinerOutputParameterivNV(GLenum stage, GLenum portion, GLenum pname, GLint[] parameters)

        public static
        void glGetCombinerOutputParameterivNV(GLenum stage, GLenum portion, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetCombinerOutputParameterivNV_(stage, portion, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetFinalCombinerInputParameterfvNV(GLenum variable, GLenum pname, IntPtr parameters)

        public static
        void glGetFinalCombinerInputParameterfvNV(GLenum variable, GLenum pname, IntPtr parameters)
        {
            glGetFinalCombinerInputParameterfvNV_(variable, pname, parameters);
        }

        #endregion

        #region glGetFinalCombinerInputParameterfvNV(GLenum variable, GLenum pname, object parameters)

        public static
        void glGetFinalCombinerInputParameterfvNV(GLenum variable, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetFinalCombinerInputParameterfvNV_(variable, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetFinalCombinerInputParameterfvNV(GLenum variable, GLenum pname, GLfloat[] parameters)

        public static
        void glGetFinalCombinerInputParameterfvNV(GLenum variable, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetFinalCombinerInputParameterfvNV_(variable, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetFinalCombinerInputParameterivNV(GLenum variable, GLenum pname, IntPtr parameters)

        public static
        void glGetFinalCombinerInputParameterivNV(GLenum variable, GLenum pname, IntPtr parameters)
        {
            glGetFinalCombinerInputParameterivNV_(variable, pname, parameters);
        }

        #endregion

        #region glGetFinalCombinerInputParameterivNV(GLenum variable, GLenum pname, object parameters)

        public static
        void glGetFinalCombinerInputParameterivNV(GLenum variable, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetFinalCombinerInputParameterivNV_(variable, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetFinalCombinerInputParameterivNV(GLenum variable, GLenum pname, GLint[] parameters)

        public static
        void glGetFinalCombinerInputParameterivNV(GLenum variable, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetFinalCombinerInputParameterivNV_(variable, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glWindowPos2dvMESA(IntPtr v)

        public static
        void glWindowPos2dvMESA(IntPtr v)
        {
            glWindowPos2dvMESA_(v);
        }

        #endregion

        #region glWindowPos2dvMESA(object v)

        public static
        void glWindowPos2dvMESA(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glWindowPos2dvMESA_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glWindowPos2dvMESA(GLdouble[] v)

        public static
        void glWindowPos2dvMESA(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glWindowPos2dvMESA_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glWindowPos2fvMESA(IntPtr v)

        public static
        void glWindowPos2fvMESA(IntPtr v)
        {
            glWindowPos2fvMESA_(v);
        }

        #endregion

        #region glWindowPos2fvMESA(object v)

        public static
        void glWindowPos2fvMESA(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glWindowPos2fvMESA_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glWindowPos2fvMESA(GLfloat[] v)

        public static
        void glWindowPos2fvMESA(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glWindowPos2fvMESA_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glWindowPos2ivMESA(IntPtr v)

        public static
        void glWindowPos2ivMESA(IntPtr v)
        {
            glWindowPos2ivMESA_(v);
        }

        #endregion

        #region glWindowPos2ivMESA(object v)

        public static
        void glWindowPos2ivMESA(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glWindowPos2ivMESA_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glWindowPos2ivMESA(GLint[] v)

        public static
        void glWindowPos2ivMESA(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glWindowPos2ivMESA_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glWindowPos2svMESA(IntPtr v)

        public static
        void glWindowPos2svMESA(IntPtr v)
        {
            glWindowPos2svMESA_(v);
        }

        #endregion

        #region glWindowPos2svMESA(object v)

        public static
        void glWindowPos2svMESA(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glWindowPos2svMESA_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glWindowPos2svMESA(GLshort[] v)

        public static
        void glWindowPos2svMESA(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glWindowPos2svMESA_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glWindowPos3dvMESA(IntPtr v)

        public static
        void glWindowPos3dvMESA(IntPtr v)
        {
            glWindowPos3dvMESA_(v);
        }

        #endregion

        #region glWindowPos3dvMESA(object v)

        public static
        void glWindowPos3dvMESA(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glWindowPos3dvMESA_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glWindowPos3dvMESA(GLdouble[] v)

        public static
        void glWindowPos3dvMESA(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glWindowPos3dvMESA_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glWindowPos3fvMESA(IntPtr v)

        public static
        void glWindowPos3fvMESA(IntPtr v)
        {
            glWindowPos3fvMESA_(v);
        }

        #endregion

        #region glWindowPos3fvMESA(object v)

        public static
        void glWindowPos3fvMESA(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glWindowPos3fvMESA_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glWindowPos3fvMESA(GLfloat[] v)

        public static
        void glWindowPos3fvMESA(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glWindowPos3fvMESA_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glWindowPos3ivMESA(IntPtr v)

        public static
        void glWindowPos3ivMESA(IntPtr v)
        {
            glWindowPos3ivMESA_(v);
        }

        #endregion

        #region glWindowPos3ivMESA(object v)

        public static
        void glWindowPos3ivMESA(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glWindowPos3ivMESA_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glWindowPos3ivMESA(GLint[] v)

        public static
        void glWindowPos3ivMESA(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glWindowPos3ivMESA_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glWindowPos3svMESA(IntPtr v)

        public static
        void glWindowPos3svMESA(IntPtr v)
        {
            glWindowPos3svMESA_(v);
        }

        #endregion

        #region glWindowPos3svMESA(object v)

        public static
        void glWindowPos3svMESA(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glWindowPos3svMESA_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glWindowPos3svMESA(GLshort[] v)

        public static
        void glWindowPos3svMESA(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glWindowPos3svMESA_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glWindowPos4dvMESA(IntPtr v)

        public static
        void glWindowPos4dvMESA(IntPtr v)
        {
            glWindowPos4dvMESA_(v);
        }

        #endregion

        #region glWindowPos4dvMESA(object v)

        public static
        void glWindowPos4dvMESA(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glWindowPos4dvMESA_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glWindowPos4dvMESA(GLdouble[] v)

        public static
        void glWindowPos4dvMESA(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glWindowPos4dvMESA_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glWindowPos4fvMESA(IntPtr v)

        public static
        void glWindowPos4fvMESA(IntPtr v)
        {
            glWindowPos4fvMESA_(v);
        }

        #endregion

        #region glWindowPos4fvMESA(object v)

        public static
        void glWindowPos4fvMESA(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glWindowPos4fvMESA_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glWindowPos4fvMESA(GLfloat[] v)

        public static
        void glWindowPos4fvMESA(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glWindowPos4fvMESA_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glWindowPos4ivMESA(IntPtr v)

        public static
        void glWindowPos4ivMESA(IntPtr v)
        {
            glWindowPos4ivMESA_(v);
        }

        #endregion

        #region glWindowPos4ivMESA(object v)

        public static
        void glWindowPos4ivMESA(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glWindowPos4ivMESA_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glWindowPos4ivMESA(GLint[] v)

        public static
        void glWindowPos4ivMESA(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glWindowPos4ivMESA_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glWindowPos4svMESA(IntPtr v)

        public static
        void glWindowPos4svMESA(IntPtr v)
        {
            glWindowPos4svMESA_(v);
        }

        #endregion

        #region glWindowPos4svMESA(object v)

        public static
        void glWindowPos4svMESA(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glWindowPos4svMESA_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glWindowPos4svMESA(GLshort[] v)

        public static
        void glWindowPos4svMESA(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glWindowPos4svMESA_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiModeDrawArraysIBM(IntPtr mode, IntPtr first, IntPtr count, GLsizei primcount, GLint modestride)

        public static
        void glMultiModeDrawArraysIBM(IntPtr mode, IntPtr first, IntPtr count, GLsizei primcount, GLint modestride)
        {
            glMultiModeDrawArraysIBM_(mode, first, count, primcount, modestride);
        }

        #endregion

        #region glMultiModeDrawArraysIBM(IntPtr mode, IntPtr first, object count, GLsizei primcount, GLint modestride)

        public static
        void glMultiModeDrawArraysIBM(IntPtr mode, IntPtr first, object count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                glMultiModeDrawArraysIBM_(mode, first, h0.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiModeDrawArraysIBM(IntPtr mode, IntPtr first, GLsizei[] count, GLsizei primcount, GLint modestride)

        public static
        void glMultiModeDrawArraysIBM(IntPtr mode, IntPtr first, GLsizei[] count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                glMultiModeDrawArraysIBM_(mode, first, h0.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiModeDrawArraysIBM(IntPtr mode, object first, IntPtr count, GLsizei primcount, GLint modestride)

        public static
        void glMultiModeDrawArraysIBM(IntPtr mode, object first, IntPtr count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            try
            {
                glMultiModeDrawArraysIBM_(mode, h0.AddrOfPinnedObject(), count, primcount, modestride);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiModeDrawArraysIBM(IntPtr mode, object first, object count, GLsizei primcount, GLint modestride)

        public static
        void glMultiModeDrawArraysIBM(IntPtr mode, object first, object count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                glMultiModeDrawArraysIBM_(mode, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glMultiModeDrawArraysIBM(IntPtr mode, object first, GLsizei[] count, GLsizei primcount, GLint modestride)

        public static
        void glMultiModeDrawArraysIBM(IntPtr mode, object first, GLsizei[] count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                glMultiModeDrawArraysIBM_(mode, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glMultiModeDrawArraysIBM(IntPtr mode, GLint[] first, IntPtr count, GLsizei primcount, GLint modestride)

        public static
        void glMultiModeDrawArraysIBM(IntPtr mode, GLint[] first, IntPtr count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            try
            {
                glMultiModeDrawArraysIBM_(mode, h0.AddrOfPinnedObject(), count, primcount, modestride);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiModeDrawArraysIBM(IntPtr mode, GLint[] first, object count, GLsizei primcount, GLint modestride)

        public static
        void glMultiModeDrawArraysIBM(IntPtr mode, GLint[] first, object count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                glMultiModeDrawArraysIBM_(mode, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glMultiModeDrawArraysIBM(IntPtr mode, GLint[] first, GLsizei[] count, GLsizei primcount, GLint modestride)

        public static
        void glMultiModeDrawArraysIBM(IntPtr mode, GLint[] first, GLsizei[] count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                glMultiModeDrawArraysIBM_(mode, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glMultiModeDrawArraysIBM(object mode, IntPtr first, IntPtr count, GLsizei primcount, GLint modestride)

        public static
        void glMultiModeDrawArraysIBM(object mode, IntPtr first, IntPtr count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            try
            {
                glMultiModeDrawArraysIBM_(h0.AddrOfPinnedObject(), first, count, primcount, modestride);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiModeDrawArraysIBM(object mode, IntPtr first, object count, GLsizei primcount, GLint modestride)

        public static
        void glMultiModeDrawArraysIBM(object mode, IntPtr first, object count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                glMultiModeDrawArraysIBM_(h0.AddrOfPinnedObject(), first, h1.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glMultiModeDrawArraysIBM(object mode, IntPtr first, GLsizei[] count, GLsizei primcount, GLint modestride)

        public static
        void glMultiModeDrawArraysIBM(object mode, IntPtr first, GLsizei[] count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                glMultiModeDrawArraysIBM_(h0.AddrOfPinnedObject(), first, h1.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glMultiModeDrawArraysIBM(object mode, object first, IntPtr count, GLsizei primcount, GLint modestride)

        public static
        void glMultiModeDrawArraysIBM(object mode, object first, IntPtr count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(first, GCHandleType.Pinned);
            try
            {
                glMultiModeDrawArraysIBM_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), count, primcount, modestride);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glMultiModeDrawArraysIBM(object mode, object first, object count, GLsizei primcount, GLint modestride)

        public static
        void glMultiModeDrawArraysIBM(object mode, object first, object count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                glMultiModeDrawArraysIBM_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glMultiModeDrawArraysIBM(object mode, object first, GLsizei[] count, GLsizei primcount, GLint modestride)

        public static
        void glMultiModeDrawArraysIBM(object mode, object first, GLsizei[] count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                glMultiModeDrawArraysIBM_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glMultiModeDrawArraysIBM(object mode, GLint[] first, IntPtr count, GLsizei primcount, GLint modestride)

        public static
        void glMultiModeDrawArraysIBM(object mode, GLint[] first, IntPtr count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(first, GCHandleType.Pinned);
            try
            {
                glMultiModeDrawArraysIBM_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), count, primcount, modestride);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glMultiModeDrawArraysIBM(object mode, GLint[] first, object count, GLsizei primcount, GLint modestride)

        public static
        void glMultiModeDrawArraysIBM(object mode, GLint[] first, object count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                glMultiModeDrawArraysIBM_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glMultiModeDrawArraysIBM(object mode, GLint[] first, GLsizei[] count, GLsizei primcount, GLint modestride)

        public static
        void glMultiModeDrawArraysIBM(object mode, GLint[] first, GLsizei[] count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                glMultiModeDrawArraysIBM_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glMultiModeDrawArraysIBM(GLenum[] mode, IntPtr first, IntPtr count, GLsizei primcount, GLint modestride)

        public static
        void glMultiModeDrawArraysIBM(GLenum[] mode, IntPtr first, IntPtr count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            try
            {
                glMultiModeDrawArraysIBM_(h0.AddrOfPinnedObject(), first, count, primcount, modestride);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiModeDrawArraysIBM(GLenum[] mode, IntPtr first, object count, GLsizei primcount, GLint modestride)

        public static
        void glMultiModeDrawArraysIBM(GLenum[] mode, IntPtr first, object count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                glMultiModeDrawArraysIBM_(h0.AddrOfPinnedObject(), first, h1.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glMultiModeDrawArraysIBM(GLenum[] mode, IntPtr first, GLsizei[] count, GLsizei primcount, GLint modestride)

        public static
        void glMultiModeDrawArraysIBM(GLenum[] mode, IntPtr first, GLsizei[] count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                glMultiModeDrawArraysIBM_(h0.AddrOfPinnedObject(), first, h1.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glMultiModeDrawArraysIBM(GLenum[] mode, object first, IntPtr count, GLsizei primcount, GLint modestride)

        public static
        void glMultiModeDrawArraysIBM(GLenum[] mode, object first, IntPtr count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(first, GCHandleType.Pinned);
            try
            {
                glMultiModeDrawArraysIBM_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), count, primcount, modestride);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glMultiModeDrawArraysIBM(GLenum[] mode, object first, object count, GLsizei primcount, GLint modestride)

        public static
        void glMultiModeDrawArraysIBM(GLenum[] mode, object first, object count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                glMultiModeDrawArraysIBM_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glMultiModeDrawArraysIBM(GLenum[] mode, object first, GLsizei[] count, GLsizei primcount, GLint modestride)

        public static
        void glMultiModeDrawArraysIBM(GLenum[] mode, object first, GLsizei[] count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                glMultiModeDrawArraysIBM_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glMultiModeDrawArraysIBM(GLenum[] mode, GLint[] first, IntPtr count, GLsizei primcount, GLint modestride)

        public static
        void glMultiModeDrawArraysIBM(GLenum[] mode, GLint[] first, IntPtr count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(first, GCHandleType.Pinned);
            try
            {
                glMultiModeDrawArraysIBM_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), count, primcount, modestride);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glMultiModeDrawArraysIBM(GLenum[] mode, GLint[] first, object count, GLsizei primcount, GLint modestride)

        public static
        void glMultiModeDrawArraysIBM(GLenum[] mode, GLint[] first, object count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                glMultiModeDrawArraysIBM_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glMultiModeDrawArraysIBM(GLenum[] mode, GLint[] first, GLsizei[] count, GLsizei primcount, GLint modestride)

        public static
        void glMultiModeDrawArraysIBM(GLenum[] mode, GLint[] first, GLsizei[] count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                glMultiModeDrawArraysIBM_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glMultiModeDrawElementsIBM(IntPtr mode, IntPtr count, GLenum type, IntPtr indices, GLsizei primcount, GLint modestride)

        public static
        void glMultiModeDrawElementsIBM(IntPtr mode, IntPtr count, GLenum type, IntPtr indices, GLsizei primcount, GLint modestride)
        {
            glMultiModeDrawElementsIBM_(mode, count, type, indices, primcount, modestride);
        }

        #endregion

        #region glMultiModeDrawElementsIBM(IntPtr mode, IntPtr count, GLenum type, object indices, GLsizei primcount, GLint modestride)

        public static
        void glMultiModeDrawElementsIBM(IntPtr mode, IntPtr count, GLenum type, object indices, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                glMultiModeDrawElementsIBM_(mode, count, type, h0.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiModeDrawElementsIBM(IntPtr mode, object count, GLenum type, IntPtr indices, GLsizei primcount, GLint modestride)

        public static
        void glMultiModeDrawElementsIBM(IntPtr mode, object count, GLenum type, IntPtr indices, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                glMultiModeDrawElementsIBM_(mode, h0.AddrOfPinnedObject(), type, indices, primcount, modestride);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiModeDrawElementsIBM(IntPtr mode, object count, GLenum type, object indices, GLsizei primcount, GLint modestride)

        public static
        void glMultiModeDrawElementsIBM(IntPtr mode, object count, GLenum type, object indices, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                glMultiModeDrawElementsIBM_(mode, h0.AddrOfPinnedObject(), type, h1.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glMultiModeDrawElementsIBM(IntPtr mode, GLsizei[] count, GLenum type, IntPtr indices, GLsizei primcount, GLint modestride)

        public static
        void glMultiModeDrawElementsIBM(IntPtr mode, GLsizei[] count, GLenum type, IntPtr indices, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                glMultiModeDrawElementsIBM_(mode, h0.AddrOfPinnedObject(), type, indices, primcount, modestride);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiModeDrawElementsIBM(IntPtr mode, GLsizei[] count, GLenum type, object indices, GLsizei primcount, GLint modestride)

        public static
        void glMultiModeDrawElementsIBM(IntPtr mode, GLsizei[] count, GLenum type, object indices, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                glMultiModeDrawElementsIBM_(mode, h0.AddrOfPinnedObject(), type, h1.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glMultiModeDrawElementsIBM(object mode, IntPtr count, GLenum type, IntPtr indices, GLsizei primcount, GLint modestride)

        public static
        void glMultiModeDrawElementsIBM(object mode, IntPtr count, GLenum type, IntPtr indices, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            try
            {
                glMultiModeDrawElementsIBM_(h0.AddrOfPinnedObject(), count, type, indices, primcount, modestride);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiModeDrawElementsIBM(object mode, IntPtr count, GLenum type, object indices, GLsizei primcount, GLint modestride)

        public static
        void glMultiModeDrawElementsIBM(object mode, IntPtr count, GLenum type, object indices, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                glMultiModeDrawElementsIBM_(h0.AddrOfPinnedObject(), count, type, h1.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glMultiModeDrawElementsIBM(object mode, object count, GLenum type, IntPtr indices, GLsizei primcount, GLint modestride)

        public static
        void glMultiModeDrawElementsIBM(object mode, object count, GLenum type, IntPtr indices, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                glMultiModeDrawElementsIBM_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), type, indices, primcount, modestride);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glMultiModeDrawElementsIBM(object mode, object count, GLenum type, object indices, GLsizei primcount, GLint modestride)

        public static
        void glMultiModeDrawElementsIBM(object mode, object count, GLenum type, object indices, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                glMultiModeDrawElementsIBM_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), type, h2.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glMultiModeDrawElementsIBM(object mode, GLsizei[] count, GLenum type, IntPtr indices, GLsizei primcount, GLint modestride)

        public static
        void glMultiModeDrawElementsIBM(object mode, GLsizei[] count, GLenum type, IntPtr indices, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                glMultiModeDrawElementsIBM_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), type, indices, primcount, modestride);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glMultiModeDrawElementsIBM(object mode, GLsizei[] count, GLenum type, object indices, GLsizei primcount, GLint modestride)

        public static
        void glMultiModeDrawElementsIBM(object mode, GLsizei[] count, GLenum type, object indices, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                glMultiModeDrawElementsIBM_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), type, h2.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glMultiModeDrawElementsIBM(GLenum[] mode, IntPtr count, GLenum type, IntPtr indices, GLsizei primcount, GLint modestride)

        public static
        void glMultiModeDrawElementsIBM(GLenum[] mode, IntPtr count, GLenum type, IntPtr indices, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            try
            {
                glMultiModeDrawElementsIBM_(h0.AddrOfPinnedObject(), count, type, indices, primcount, modestride);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiModeDrawElementsIBM(GLenum[] mode, IntPtr count, GLenum type, object indices, GLsizei primcount, GLint modestride)

        public static
        void glMultiModeDrawElementsIBM(GLenum[] mode, IntPtr count, GLenum type, object indices, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                glMultiModeDrawElementsIBM_(h0.AddrOfPinnedObject(), count, type, h1.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glMultiModeDrawElementsIBM(GLenum[] mode, object count, GLenum type, IntPtr indices, GLsizei primcount, GLint modestride)

        public static
        void glMultiModeDrawElementsIBM(GLenum[] mode, object count, GLenum type, IntPtr indices, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                glMultiModeDrawElementsIBM_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), type, indices, primcount, modestride);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glMultiModeDrawElementsIBM(GLenum[] mode, object count, GLenum type, object indices, GLsizei primcount, GLint modestride)

        public static
        void glMultiModeDrawElementsIBM(GLenum[] mode, object count, GLenum type, object indices, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                glMultiModeDrawElementsIBM_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), type, h2.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glMultiModeDrawElementsIBM(GLenum[] mode, GLsizei[] count, GLenum type, IntPtr indices, GLsizei primcount, GLint modestride)

        public static
        void glMultiModeDrawElementsIBM(GLenum[] mode, GLsizei[] count, GLenum type, IntPtr indices, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                glMultiModeDrawElementsIBM_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), type, indices, primcount, modestride);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glMultiModeDrawElementsIBM(GLenum[] mode, GLsizei[] count, GLenum type, object indices, GLsizei primcount, GLint modestride)

        public static
        void glMultiModeDrawElementsIBM(GLenum[] mode, GLsizei[] count, GLenum type, object indices, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                glMultiModeDrawElementsIBM_(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), type, h2.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glColorPointerListIBM(GLint size, GLenum type, GLint stride, IntPtr pointer, GLint ptrstride)

        public static
        void glColorPointerListIBM(GLint size, GLenum type, GLint stride, IntPtr pointer, GLint ptrstride)
        {
            glColorPointerListIBM_(size, type, stride, pointer, ptrstride);
        }

        #endregion

        #region glColorPointerListIBM(GLint size, GLenum type, GLint stride, object pointer, GLint ptrstride)

        public static
        void glColorPointerListIBM(GLint size, GLenum type, GLint stride, object pointer, GLint ptrstride)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                glColorPointerListIBM_(size, type, stride, h0.AddrOfPinnedObject(), ptrstride);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glColorPointerListIBM(GLint size, GLenum type, GLint stride, IntPtr[] pointer, GLint ptrstride)

        public static
        void glColorPointerListIBM(GLint size, GLenum type, GLint stride, IntPtr[] pointer, GLint ptrstride)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                glColorPointerListIBM_(size, type, stride, h0.AddrOfPinnedObject(), ptrstride);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glSecondaryColorPointerListIBM(GLint size, GLenum type, GLint stride, IntPtr pointer, GLint ptrstride)

        public static
        void glSecondaryColorPointerListIBM(GLint size, GLenum type, GLint stride, IntPtr pointer, GLint ptrstride)
        {
            glSecondaryColorPointerListIBM_(size, type, stride, pointer, ptrstride);
        }

        #endregion

        #region glSecondaryColorPointerListIBM(GLint size, GLenum type, GLint stride, object pointer, GLint ptrstride)

        public static
        void glSecondaryColorPointerListIBM(GLint size, GLenum type, GLint stride, object pointer, GLint ptrstride)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                glSecondaryColorPointerListIBM_(size, type, stride, h0.AddrOfPinnedObject(), ptrstride);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glSecondaryColorPointerListIBM(GLint size, GLenum type, GLint stride, IntPtr[] pointer, GLint ptrstride)

        public static
        void glSecondaryColorPointerListIBM(GLint size, GLenum type, GLint stride, IntPtr[] pointer, GLint ptrstride)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                glSecondaryColorPointerListIBM_(size, type, stride, h0.AddrOfPinnedObject(), ptrstride);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glEdgeFlagPointerListIBM(GLint stride, IntPtr pointer, GLint ptrstride)

        public static
        void glEdgeFlagPointerListIBM(GLint stride, IntPtr pointer, GLint ptrstride)
        {
            glEdgeFlagPointerListIBM_(stride, pointer, ptrstride);
        }

        #endregion

        #region glEdgeFlagPointerListIBM(GLint stride, object pointer, GLint ptrstride)

        public static
        void glEdgeFlagPointerListIBM(GLint stride, object pointer, GLint ptrstride)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                glEdgeFlagPointerListIBM_(stride, h0.AddrOfPinnedObject(), ptrstride);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glEdgeFlagPointerListIBM(GLint stride, GLboolean[] pointer, GLint ptrstride)

        public static
        void glEdgeFlagPointerListIBM(GLint stride, GLboolean[] pointer, GLint ptrstride)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                glEdgeFlagPointerListIBM_(stride, h0.AddrOfPinnedObject(), ptrstride);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glFogCoordPointerListIBM(GLenum type, GLint stride, IntPtr pointer, GLint ptrstride)

        public static
        void glFogCoordPointerListIBM(GLenum type, GLint stride, IntPtr pointer, GLint ptrstride)
        {
            glFogCoordPointerListIBM_(type, stride, pointer, ptrstride);
        }

        #endregion

        #region glFogCoordPointerListIBM(GLenum type, GLint stride, object pointer, GLint ptrstride)

        public static
        void glFogCoordPointerListIBM(GLenum type, GLint stride, object pointer, GLint ptrstride)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                glFogCoordPointerListIBM_(type, stride, h0.AddrOfPinnedObject(), ptrstride);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glFogCoordPointerListIBM(GLenum type, GLint stride, IntPtr[] pointer, GLint ptrstride)

        public static
        void glFogCoordPointerListIBM(GLenum type, GLint stride, IntPtr[] pointer, GLint ptrstride)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                glFogCoordPointerListIBM_(type, stride, h0.AddrOfPinnedObject(), ptrstride);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glIndexPointerListIBM(GLenum type, GLint stride, IntPtr pointer, GLint ptrstride)

        public static
        void glIndexPointerListIBM(GLenum type, GLint stride, IntPtr pointer, GLint ptrstride)
        {
            glIndexPointerListIBM_(type, stride, pointer, ptrstride);
        }

        #endregion

        #region glIndexPointerListIBM(GLenum type, GLint stride, object pointer, GLint ptrstride)

        public static
        void glIndexPointerListIBM(GLenum type, GLint stride, object pointer, GLint ptrstride)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                glIndexPointerListIBM_(type, stride, h0.AddrOfPinnedObject(), ptrstride);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glIndexPointerListIBM(GLenum type, GLint stride, IntPtr[] pointer, GLint ptrstride)

        public static
        void glIndexPointerListIBM(GLenum type, GLint stride, IntPtr[] pointer, GLint ptrstride)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                glIndexPointerListIBM_(type, stride, h0.AddrOfPinnedObject(), ptrstride);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glNormalPointerListIBM(GLenum type, GLint stride, IntPtr pointer, GLint ptrstride)

        public static
        void glNormalPointerListIBM(GLenum type, GLint stride, IntPtr pointer, GLint ptrstride)
        {
            glNormalPointerListIBM_(type, stride, pointer, ptrstride);
        }

        #endregion

        #region glNormalPointerListIBM(GLenum type, GLint stride, object pointer, GLint ptrstride)

        public static
        void glNormalPointerListIBM(GLenum type, GLint stride, object pointer, GLint ptrstride)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                glNormalPointerListIBM_(type, stride, h0.AddrOfPinnedObject(), ptrstride);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glNormalPointerListIBM(GLenum type, GLint stride, IntPtr[] pointer, GLint ptrstride)

        public static
        void glNormalPointerListIBM(GLenum type, GLint stride, IntPtr[] pointer, GLint ptrstride)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                glNormalPointerListIBM_(type, stride, h0.AddrOfPinnedObject(), ptrstride);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexCoordPointerListIBM(GLint size, GLenum type, GLint stride, IntPtr pointer, GLint ptrstride)

        public static
        void glTexCoordPointerListIBM(GLint size, GLenum type, GLint stride, IntPtr pointer, GLint ptrstride)
        {
            glTexCoordPointerListIBM_(size, type, stride, pointer, ptrstride);
        }

        #endregion

        #region glTexCoordPointerListIBM(GLint size, GLenum type, GLint stride, object pointer, GLint ptrstride)

        public static
        void glTexCoordPointerListIBM(GLint size, GLenum type, GLint stride, object pointer, GLint ptrstride)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                glTexCoordPointerListIBM_(size, type, stride, h0.AddrOfPinnedObject(), ptrstride);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexCoordPointerListIBM(GLint size, GLenum type, GLint stride, IntPtr[] pointer, GLint ptrstride)

        public static
        void glTexCoordPointerListIBM(GLint size, GLenum type, GLint stride, IntPtr[] pointer, GLint ptrstride)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                glTexCoordPointerListIBM_(size, type, stride, h0.AddrOfPinnedObject(), ptrstride);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexPointerListIBM(GLint size, GLenum type, GLint stride, IntPtr pointer, GLint ptrstride)

        public static
        void glVertexPointerListIBM(GLint size, GLenum type, GLint stride, IntPtr pointer, GLint ptrstride)
        {
            glVertexPointerListIBM_(size, type, stride, pointer, ptrstride);
        }

        #endregion

        #region glVertexPointerListIBM(GLint size, GLenum type, GLint stride, object pointer, GLint ptrstride)

        public static
        void glVertexPointerListIBM(GLint size, GLenum type, GLint stride, object pointer, GLint ptrstride)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                glVertexPointerListIBM_(size, type, stride, h0.AddrOfPinnedObject(), ptrstride);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexPointerListIBM(GLint size, GLenum type, GLint stride, IntPtr[] pointer, GLint ptrstride)

        public static
        void glVertexPointerListIBM(GLint size, GLenum type, GLint stride, IntPtr[] pointer, GLint ptrstride)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                glVertexPointerListIBM_(size, type, stride, h0.AddrOfPinnedObject(), ptrstride);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glIglooInterfaceSGIX(GLenum pname, IntPtr parameters)

        public static
        void glIglooInterfaceSGIX(GLenum pname, IntPtr parameters)
        {
            glIglooInterfaceSGIX_(pname, parameters);
        }

        #endregion

        #region glIglooInterfaceSGIX(GLenum pname, object parameters)

        public static
        void glIglooInterfaceSGIX(GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glIglooInterfaceSGIX_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glDeleteFencesNV(GLsizei n, IntPtr fences)

        public static
        void glDeleteFencesNV(GLsizei n, IntPtr fences)
        {
            glDeleteFencesNV_(n, fences);
        }

        #endregion

        #region glDeleteFencesNV(GLsizei n, object fences)

        public static
        void glDeleteFencesNV(GLsizei n, object fences)
        {
            GCHandle h0 = GCHandle.Alloc(fences, GCHandleType.Pinned);
            try
            {
                glDeleteFencesNV_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glDeleteFencesNV(GLsizei n, GLuint[] fences)

        public static
        void glDeleteFencesNV(GLsizei n, GLuint[] fences)
        {
            GCHandle h0 = GCHandle.Alloc(fences, GCHandleType.Pinned);
            try
            {
                glDeleteFencesNV_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGenFencesNV(GLsizei n, IntPtr fences)

        public static
        void glGenFencesNV(GLsizei n, IntPtr fences)
        {
            glGenFencesNV_(n, fences);
        }

        #endregion

        #region glGenFencesNV(GLsizei n, object fences)

        public static
        void glGenFencesNV(GLsizei n, object fences)
        {
            GCHandle h0 = GCHandle.Alloc(fences, GCHandleType.Pinned);
            try
            {
                glGenFencesNV_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGenFencesNV(GLsizei n, GLuint[] fences)

        public static
        void glGenFencesNV(GLsizei n, GLuint[] fences)
        {
            GCHandle h0 = GCHandle.Alloc(fences, GCHandleType.Pinned);
            try
            {
                glGenFencesNV_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetFenceivNV(GLuint fence, GLenum pname, IntPtr parameters)

        public static
        void glGetFenceivNV(GLuint fence, GLenum pname, IntPtr parameters)
        {
            glGetFenceivNV_(fence, pname, parameters);
        }

        #endregion

        #region glGetFenceivNV(GLuint fence, GLenum pname, object parameters)

        public static
        void glGetFenceivNV(GLuint fence, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetFenceivNV_(fence, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetFenceivNV(GLuint fence, GLenum pname, GLint[] parameters)

        public static
        void glGetFenceivNV(GLuint fence, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetFenceivNV_(fence, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, IntPtr points)

        public static
        void glMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, IntPtr points)
        {
            glMapControlPointsNV_(target, index, type, ustride, vstride, uorder, vorder, packed, points);
        }

        #endregion

        #region glMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, object points)

        public static
        void glMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, object points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                glMapControlPointsNV_(target, index, type, ustride, vstride, uorder, vorder, packed, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMapParameterivNV(GLenum target, GLenum pname, IntPtr parameters)

        public static
        void glMapParameterivNV(GLenum target, GLenum pname, IntPtr parameters)
        {
            glMapParameterivNV_(target, pname, parameters);
        }

        #endregion

        #region glMapParameterivNV(GLenum target, GLenum pname, object parameters)

        public static
        void glMapParameterivNV(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glMapParameterivNV_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMapParameterivNV(GLenum target, GLenum pname, GLint[] parameters)

        public static
        void glMapParameterivNV(GLenum target, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glMapParameterivNV_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMapParameterfvNV(GLenum target, GLenum pname, IntPtr parameters)

        public static
        void glMapParameterfvNV(GLenum target, GLenum pname, IntPtr parameters)
        {
            glMapParameterfvNV_(target, pname, parameters);
        }

        #endregion

        #region glMapParameterfvNV(GLenum target, GLenum pname, object parameters)

        public static
        void glMapParameterfvNV(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glMapParameterfvNV_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMapParameterfvNV(GLenum target, GLenum pname, GLfloat[] parameters)

        public static
        void glMapParameterfvNV(GLenum target, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glMapParameterfvNV_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, IntPtr points)

        public static
        void glGetMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, IntPtr points)
        {
            glGetMapControlPointsNV_(target, index, type, ustride, vstride, packed, points);
        }

        #endregion

        #region glGetMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, object points)

        public static
        void glGetMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, object points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                glGetMapControlPointsNV_(target, index, type, ustride, vstride, packed, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetMapParameterivNV(GLenum target, GLenum pname, IntPtr parameters)

        public static
        void glGetMapParameterivNV(GLenum target, GLenum pname, IntPtr parameters)
        {
            glGetMapParameterivNV_(target, pname, parameters);
        }

        #endregion

        #region glGetMapParameterivNV(GLenum target, GLenum pname, object parameters)

        public static
        void glGetMapParameterivNV(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetMapParameterivNV_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetMapParameterivNV(GLenum target, GLenum pname, GLint[] parameters)

        public static
        void glGetMapParameterivNV(GLenum target, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetMapParameterivNV_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetMapParameterfvNV(GLenum target, GLenum pname, IntPtr parameters)

        public static
        void glGetMapParameterfvNV(GLenum target, GLenum pname, IntPtr parameters)
        {
            glGetMapParameterfvNV_(target, pname, parameters);
        }

        #endregion

        #region glGetMapParameterfvNV(GLenum target, GLenum pname, object parameters)

        public static
        void glGetMapParameterfvNV(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetMapParameterfvNV_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetMapParameterfvNV(GLenum target, GLenum pname, GLfloat[] parameters)

        public static
        void glGetMapParameterfvNV(GLenum target, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetMapParameterfvNV_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetMapAttribParameterivNV(GLenum target, GLuint index, GLenum pname, IntPtr parameters)

        public static
        void glGetMapAttribParameterivNV(GLenum target, GLuint index, GLenum pname, IntPtr parameters)
        {
            glGetMapAttribParameterivNV_(target, index, pname, parameters);
        }

        #endregion

        #region glGetMapAttribParameterivNV(GLenum target, GLuint index, GLenum pname, object parameters)

        public static
        void glGetMapAttribParameterivNV(GLenum target, GLuint index, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetMapAttribParameterivNV_(target, index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetMapAttribParameterivNV(GLenum target, GLuint index, GLenum pname, GLint[] parameters)

        public static
        void glGetMapAttribParameterivNV(GLenum target, GLuint index, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetMapAttribParameterivNV_(target, index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetMapAttribParameterfvNV(GLenum target, GLuint index, GLenum pname, IntPtr parameters)

        public static
        void glGetMapAttribParameterfvNV(GLenum target, GLuint index, GLenum pname, IntPtr parameters)
        {
            glGetMapAttribParameterfvNV_(target, index, pname, parameters);
        }

        #endregion

        #region glGetMapAttribParameterfvNV(GLenum target, GLuint index, GLenum pname, object parameters)

        public static
        void glGetMapAttribParameterfvNV(GLenum target, GLuint index, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetMapAttribParameterfvNV_(target, index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetMapAttribParameterfvNV(GLenum target, GLuint index, GLenum pname, GLfloat[] parameters)

        public static
        void glGetMapAttribParameterfvNV(GLenum target, GLuint index, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetMapAttribParameterfvNV_(target, index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glCombinerStageParameterfvNV(GLenum stage, GLenum pname, IntPtr parameters)

        public static
        void glCombinerStageParameterfvNV(GLenum stage, GLenum pname, IntPtr parameters)
        {
            glCombinerStageParameterfvNV_(stage, pname, parameters);
        }

        #endregion

        #region glCombinerStageParameterfvNV(GLenum stage, GLenum pname, object parameters)

        public static
        void glCombinerStageParameterfvNV(GLenum stage, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glCombinerStageParameterfvNV_(stage, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glCombinerStageParameterfvNV(GLenum stage, GLenum pname, GLfloat[] parameters)

        public static
        void glCombinerStageParameterfvNV(GLenum stage, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glCombinerStageParameterfvNV_(stage, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetCombinerStageParameterfvNV(GLenum stage, GLenum pname, IntPtr parameters)

        public static
        void glGetCombinerStageParameterfvNV(GLenum stage, GLenum pname, IntPtr parameters)
        {
            glGetCombinerStageParameterfvNV_(stage, pname, parameters);
        }

        #endregion

        #region glGetCombinerStageParameterfvNV(GLenum stage, GLenum pname, object parameters)

        public static
        void glGetCombinerStageParameterfvNV(GLenum stage, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetCombinerStageParameterfvNV_(stage, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetCombinerStageParameterfvNV(GLenum stage, GLenum pname, GLfloat[] parameters)

        public static
        void glGetCombinerStageParameterfvNV(GLenum stage, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetCombinerStageParameterfvNV_(stage, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glAreProgramsResidentNV(GLsizei n, IntPtr programs, IntPtr residences)

        public static
        GLboolean glAreProgramsResidentNV(GLsizei n, IntPtr programs, IntPtr residences)
        {
            return glAreProgramsResidentNV_(n, programs, residences);
        }

        #endregion

        #region glAreProgramsResidentNV(GLsizei n, IntPtr programs, object residences)

        public static
        GLboolean glAreProgramsResidentNV(GLsizei n, IntPtr programs, object residences)
        {
            GCHandle h0 = GCHandle.Alloc(residences, GCHandleType.Pinned);
            try
            {
                return glAreProgramsResidentNV_(n, programs, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glAreProgramsResidentNV(GLsizei n, IntPtr programs, GLboolean[] residences)

        public static
        GLboolean glAreProgramsResidentNV(GLsizei n, IntPtr programs, GLboolean[] residences)
        {
            GCHandle h0 = GCHandle.Alloc(residences, GCHandleType.Pinned);
            try
            {
                return glAreProgramsResidentNV_(n, programs, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glAreProgramsResidentNV(GLsizei n, object programs, IntPtr residences)

        public static
        GLboolean glAreProgramsResidentNV(GLsizei n, object programs, IntPtr residences)
        {
            GCHandle h0 = GCHandle.Alloc(programs, GCHandleType.Pinned);
            try
            {
                return glAreProgramsResidentNV_(n, h0.AddrOfPinnedObject(), residences);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glAreProgramsResidentNV(GLsizei n, object programs, object residences)

        public static
        GLboolean glAreProgramsResidentNV(GLsizei n, object programs, object residences)
        {
            GCHandle h0 = GCHandle.Alloc(programs, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(residences, GCHandleType.Pinned);
            try
            {
                return glAreProgramsResidentNV_(n, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glAreProgramsResidentNV(GLsizei n, object programs, GLboolean[] residences)

        public static
        GLboolean glAreProgramsResidentNV(GLsizei n, object programs, GLboolean[] residences)
        {
            GCHandle h0 = GCHandle.Alloc(programs, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(residences, GCHandleType.Pinned);
            try
            {
                return glAreProgramsResidentNV_(n, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glAreProgramsResidentNV(GLsizei n, GLuint[] programs, IntPtr residences)

        public static
        GLboolean glAreProgramsResidentNV(GLsizei n, GLuint[] programs, IntPtr residences)
        {
            GCHandle h0 = GCHandle.Alloc(programs, GCHandleType.Pinned);
            try
            {
                return glAreProgramsResidentNV_(n, h0.AddrOfPinnedObject(), residences);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glAreProgramsResidentNV(GLsizei n, GLuint[] programs, object residences)

        public static
        GLboolean glAreProgramsResidentNV(GLsizei n, GLuint[] programs, object residences)
        {
            GCHandle h0 = GCHandle.Alloc(programs, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(residences, GCHandleType.Pinned);
            try
            {
                return glAreProgramsResidentNV_(n, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glAreProgramsResidentNV(GLsizei n, GLuint[] programs, GLboolean[] residences)

        public static
        GLboolean glAreProgramsResidentNV(GLsizei n, GLuint[] programs, GLboolean[] residences)
        {
            GCHandle h0 = GCHandle.Alloc(programs, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(residences, GCHandleType.Pinned);
            try
            {
                return glAreProgramsResidentNV_(n, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glDeleteProgramsNV(GLsizei n, IntPtr programs)

        public static
        void glDeleteProgramsNV(GLsizei n, IntPtr programs)
        {
            glDeleteProgramsNV_(n, programs);
        }

        #endregion

        #region glDeleteProgramsNV(GLsizei n, object programs)

        public static
        void glDeleteProgramsNV(GLsizei n, object programs)
        {
            GCHandle h0 = GCHandle.Alloc(programs, GCHandleType.Pinned);
            try
            {
                glDeleteProgramsNV_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glDeleteProgramsNV(GLsizei n, GLuint[] programs)

        public static
        void glDeleteProgramsNV(GLsizei n, GLuint[] programs)
        {
            GCHandle h0 = GCHandle.Alloc(programs, GCHandleType.Pinned);
            try
            {
                glDeleteProgramsNV_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glExecuteProgramNV(GLenum target, GLuint id, IntPtr parameters)

        public static
        void glExecuteProgramNV(GLenum target, GLuint id, IntPtr parameters)
        {
            glExecuteProgramNV_(target, id, parameters);
        }

        #endregion

        #region glExecuteProgramNV(GLenum target, GLuint id, object parameters)

        public static
        void glExecuteProgramNV(GLenum target, GLuint id, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glExecuteProgramNV_(target, id, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glExecuteProgramNV(GLenum target, GLuint id, GLfloat[] parameters)

        public static
        void glExecuteProgramNV(GLenum target, GLuint id, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glExecuteProgramNV_(target, id, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGenProgramsNV(GLsizei n, IntPtr programs)

        public static
        void glGenProgramsNV(GLsizei n, IntPtr programs)
        {
            glGenProgramsNV_(n, programs);
        }

        #endregion

        #region glGenProgramsNV(GLsizei n, object programs)

        public static
        void glGenProgramsNV(GLsizei n, object programs)
        {
            GCHandle h0 = GCHandle.Alloc(programs, GCHandleType.Pinned);
            try
            {
                glGenProgramsNV_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGenProgramsNV(GLsizei n, GLuint[] programs)

        public static
        void glGenProgramsNV(GLsizei n, GLuint[] programs)
        {
            GCHandle h0 = GCHandle.Alloc(programs, GCHandleType.Pinned);
            try
            {
                glGenProgramsNV_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetProgramParameterdvNV(GLenum target, GLuint index, GLenum pname, IntPtr parameters)

        public static
        void glGetProgramParameterdvNV(GLenum target, GLuint index, GLenum pname, IntPtr parameters)
        {
            glGetProgramParameterdvNV_(target, index, pname, parameters);
        }

        #endregion

        #region glGetProgramParameterdvNV(GLenum target, GLuint index, GLenum pname, object parameters)

        public static
        void glGetProgramParameterdvNV(GLenum target, GLuint index, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetProgramParameterdvNV_(target, index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetProgramParameterdvNV(GLenum target, GLuint index, GLenum pname, GLdouble[] parameters)

        public static
        void glGetProgramParameterdvNV(GLenum target, GLuint index, GLenum pname, GLdouble[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetProgramParameterdvNV_(target, index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetProgramParameterfvNV(GLenum target, GLuint index, GLenum pname, IntPtr parameters)

        public static
        void glGetProgramParameterfvNV(GLenum target, GLuint index, GLenum pname, IntPtr parameters)
        {
            glGetProgramParameterfvNV_(target, index, pname, parameters);
        }

        #endregion

        #region glGetProgramParameterfvNV(GLenum target, GLuint index, GLenum pname, object parameters)

        public static
        void glGetProgramParameterfvNV(GLenum target, GLuint index, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetProgramParameterfvNV_(target, index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetProgramParameterfvNV(GLenum target, GLuint index, GLenum pname, GLfloat[] parameters)

        public static
        void glGetProgramParameterfvNV(GLenum target, GLuint index, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetProgramParameterfvNV_(target, index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetProgramivNV(GLuint id, GLenum pname, IntPtr parameters)

        public static
        void glGetProgramivNV(GLuint id, GLenum pname, IntPtr parameters)
        {
            glGetProgramivNV_(id, pname, parameters);
        }

        #endregion

        #region glGetProgramivNV(GLuint id, GLenum pname, object parameters)

        public static
        void glGetProgramivNV(GLuint id, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetProgramivNV_(id, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetProgramivNV(GLuint id, GLenum pname, GLint[] parameters)

        public static
        void glGetProgramivNV(GLuint id, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetProgramivNV_(id, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetProgramStringNV(GLuint id, GLenum pname, IntPtr program)

        public static
        void glGetProgramStringNV(GLuint id, GLenum pname, IntPtr program)
        {
            glGetProgramStringNV_(id, pname, program);
        }

        #endregion

        #region glGetProgramStringNV(GLuint id, GLenum pname, object program)

        public static
        void glGetProgramStringNV(GLuint id, GLenum pname, object program)
        {
            GCHandle h0 = GCHandle.Alloc(program, GCHandleType.Pinned);
            try
            {
                glGetProgramStringNV_(id, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetProgramStringNV(GLuint id, GLenum pname, GLubyte[] program)

        public static
        void glGetProgramStringNV(GLuint id, GLenum pname, GLubyte[] program)
        {
            GCHandle h0 = GCHandle.Alloc(program, GCHandleType.Pinned);
            try
            {
                glGetProgramStringNV_(id, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetTrackMatrixivNV(GLenum target, GLuint address, GLenum pname, IntPtr parameters)

        public static
        void glGetTrackMatrixivNV(GLenum target, GLuint address, GLenum pname, IntPtr parameters)
        {
            glGetTrackMatrixivNV_(target, address, pname, parameters);
        }

        #endregion

        #region glGetTrackMatrixivNV(GLenum target, GLuint address, GLenum pname, object parameters)

        public static
        void glGetTrackMatrixivNV(GLenum target, GLuint address, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetTrackMatrixivNV_(target, address, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetTrackMatrixivNV(GLenum target, GLuint address, GLenum pname, GLint[] parameters)

        public static
        void glGetTrackMatrixivNV(GLenum target, GLuint address, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetTrackMatrixivNV_(target, address, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetVertexAttribdvNV(GLuint index, GLenum pname, IntPtr parameters)

        public static
        void glGetVertexAttribdvNV(GLuint index, GLenum pname, IntPtr parameters)
        {
            glGetVertexAttribdvNV_(index, pname, parameters);
        }

        #endregion

        #region glGetVertexAttribdvNV(GLuint index, GLenum pname, object parameters)

        public static
        void glGetVertexAttribdvNV(GLuint index, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetVertexAttribdvNV_(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetVertexAttribdvNV(GLuint index, GLenum pname, GLdouble[] parameters)

        public static
        void glGetVertexAttribdvNV(GLuint index, GLenum pname, GLdouble[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetVertexAttribdvNV_(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetVertexAttribfvNV(GLuint index, GLenum pname, IntPtr parameters)

        public static
        void glGetVertexAttribfvNV(GLuint index, GLenum pname, IntPtr parameters)
        {
            glGetVertexAttribfvNV_(index, pname, parameters);
        }

        #endregion

        #region glGetVertexAttribfvNV(GLuint index, GLenum pname, object parameters)

        public static
        void glGetVertexAttribfvNV(GLuint index, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetVertexAttribfvNV_(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetVertexAttribfvNV(GLuint index, GLenum pname, GLfloat[] parameters)

        public static
        void glGetVertexAttribfvNV(GLuint index, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetVertexAttribfvNV_(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetVertexAttribivNV(GLuint index, GLenum pname, IntPtr parameters)

        public static
        void glGetVertexAttribivNV(GLuint index, GLenum pname, IntPtr parameters)
        {
            glGetVertexAttribivNV_(index, pname, parameters);
        }

        #endregion

        #region glGetVertexAttribivNV(GLuint index, GLenum pname, object parameters)

        public static
        void glGetVertexAttribivNV(GLuint index, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetVertexAttribivNV_(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetVertexAttribivNV(GLuint index, GLenum pname, GLint[] parameters)

        public static
        void glGetVertexAttribivNV(GLuint index, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetVertexAttribivNV_(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetVertexAttribPointervNV(GLuint index, GLenum pname, IntPtr pointer)

        public static
        void glGetVertexAttribPointervNV(GLuint index, GLenum pname, IntPtr pointer)
        {
            glGetVertexAttribPointervNV_(index, pname, pointer);
        }

        #endregion

        #region glGetVertexAttribPointervNV(GLuint index, GLenum pname, object pointer)

        public static
        void glGetVertexAttribPointervNV(GLuint index, GLenum pname, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                glGetVertexAttribPointervNV_(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetVertexAttribPointervNV(GLuint index, GLenum pname, IntPtr[] pointer)

        public static
        void glGetVertexAttribPointervNV(GLuint index, GLenum pname, IntPtr[] pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                glGetVertexAttribPointervNV_(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glLoadProgramNV(GLenum target, GLuint id, GLsizei len, IntPtr program)

        public static
        void glLoadProgramNV(GLenum target, GLuint id, GLsizei len, IntPtr program)
        {
            glLoadProgramNV_(target, id, len, program);
        }

        #endregion

        #region glLoadProgramNV(GLenum target, GLuint id, GLsizei len, object program)

        public static
        void glLoadProgramNV(GLenum target, GLuint id, GLsizei len, object program)
        {
            GCHandle h0 = GCHandle.Alloc(program, GCHandleType.Pinned);
            try
            {
                glLoadProgramNV_(target, id, len, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glLoadProgramNV(GLenum target, GLuint id, GLsizei len, GLubyte[] program)

        public static
        void glLoadProgramNV(GLenum target, GLuint id, GLsizei len, GLubyte[] program)
        {
            GCHandle h0 = GCHandle.Alloc(program, GCHandleType.Pinned);
            try
            {
                glLoadProgramNV_(target, id, len, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glProgramParameter4dvNV(GLenum target, GLuint index, IntPtr v)

        public static
        void glProgramParameter4dvNV(GLenum target, GLuint index, IntPtr v)
        {
            glProgramParameter4dvNV_(target, index, v);
        }

        #endregion

        #region glProgramParameter4dvNV(GLenum target, GLuint index, object v)

        public static
        void glProgramParameter4dvNV(GLenum target, GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glProgramParameter4dvNV_(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glProgramParameter4dvNV(GLenum target, GLuint index, GLdouble[] v)

        public static
        void glProgramParameter4dvNV(GLenum target, GLuint index, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glProgramParameter4dvNV_(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glProgramParameter4fvNV(GLenum target, GLuint index, IntPtr v)

        public static
        void glProgramParameter4fvNV(GLenum target, GLuint index, IntPtr v)
        {
            glProgramParameter4fvNV_(target, index, v);
        }

        #endregion

        #region glProgramParameter4fvNV(GLenum target, GLuint index, object v)

        public static
        void glProgramParameter4fvNV(GLenum target, GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glProgramParameter4fvNV_(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glProgramParameter4fvNV(GLenum target, GLuint index, GLfloat[] v)

        public static
        void glProgramParameter4fvNV(GLenum target, GLuint index, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glProgramParameter4fvNV_(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glProgramParameters4dvNV(GLenum target, GLuint index, GLuint count, IntPtr v)

        public static
        void glProgramParameters4dvNV(GLenum target, GLuint index, GLuint count, IntPtr v)
        {
            glProgramParameters4dvNV_(target, index, count, v);
        }

        #endregion

        #region glProgramParameters4dvNV(GLenum target, GLuint index, GLuint count, object v)

        public static
        void glProgramParameters4dvNV(GLenum target, GLuint index, GLuint count, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glProgramParameters4dvNV_(target, index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glProgramParameters4dvNV(GLenum target, GLuint index, GLuint count, GLdouble[] v)

        public static
        void glProgramParameters4dvNV(GLenum target, GLuint index, GLuint count, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glProgramParameters4dvNV_(target, index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glProgramParameters4fvNV(GLenum target, GLuint index, GLuint count, IntPtr v)

        public static
        void glProgramParameters4fvNV(GLenum target, GLuint index, GLuint count, IntPtr v)
        {
            glProgramParameters4fvNV_(target, index, count, v);
        }

        #endregion

        #region glProgramParameters4fvNV(GLenum target, GLuint index, GLuint count, object v)

        public static
        void glProgramParameters4fvNV(GLenum target, GLuint index, GLuint count, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glProgramParameters4fvNV_(target, index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glProgramParameters4fvNV(GLenum target, GLuint index, GLuint count, GLfloat[] v)

        public static
        void glProgramParameters4fvNV(GLenum target, GLuint index, GLuint count, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glProgramParameters4fvNV_(target, index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glRequestResidentProgramsNV(GLsizei n, IntPtr programs)

        public static
        void glRequestResidentProgramsNV(GLsizei n, IntPtr programs)
        {
            glRequestResidentProgramsNV_(n, programs);
        }

        #endregion

        #region glRequestResidentProgramsNV(GLsizei n, object programs)

        public static
        void glRequestResidentProgramsNV(GLsizei n, object programs)
        {
            GCHandle h0 = GCHandle.Alloc(programs, GCHandleType.Pinned);
            try
            {
                glRequestResidentProgramsNV_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glRequestResidentProgramsNV(GLsizei n, GLuint[] programs)

        public static
        void glRequestResidentProgramsNV(GLsizei n, GLuint[] programs)
        {
            GCHandle h0 = GCHandle.Alloc(programs, GCHandleType.Pinned);
            try
            {
                glRequestResidentProgramsNV_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttribPointerNV(GLuint index, GLint fsize, GLenum type, GLsizei stride, IntPtr pointer)

        public static
        void glVertexAttribPointerNV(GLuint index, GLint fsize, GLenum type, GLsizei stride, IntPtr pointer)
        {
            glVertexAttribPointerNV_(index, fsize, type, stride, pointer);
        }

        #endregion

        #region glVertexAttribPointerNV(GLuint index, GLint fsize, GLenum type, GLsizei stride, object pointer)

        public static
        void glVertexAttribPointerNV(GLuint index, GLint fsize, GLenum type, GLsizei stride, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                glVertexAttribPointerNV_(index, fsize, type, stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib1dvNV(GLuint index, IntPtr v)

        public static
        void glVertexAttrib1dvNV(GLuint index, IntPtr v)
        {
            glVertexAttrib1dvNV_(index, v);
        }

        #endregion

        #region glVertexAttrib1dvNV(GLuint index, object v)

        public static
        void glVertexAttrib1dvNV(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib1dvNV_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib1dvNV(GLuint index, GLdouble[] v)

        public static
        void glVertexAttrib1dvNV(GLuint index, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib1dvNV_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib1fvNV(GLuint index, IntPtr v)

        public static
        void glVertexAttrib1fvNV(GLuint index, IntPtr v)
        {
            glVertexAttrib1fvNV_(index, v);
        }

        #endregion

        #region glVertexAttrib1fvNV(GLuint index, object v)

        public static
        void glVertexAttrib1fvNV(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib1fvNV_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib1fvNV(GLuint index, GLfloat[] v)

        public static
        void glVertexAttrib1fvNV(GLuint index, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib1fvNV_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib1svNV(GLuint index, IntPtr v)

        public static
        void glVertexAttrib1svNV(GLuint index, IntPtr v)
        {
            glVertexAttrib1svNV_(index, v);
        }

        #endregion

        #region glVertexAttrib1svNV(GLuint index, object v)

        public static
        void glVertexAttrib1svNV(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib1svNV_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib1svNV(GLuint index, GLshort[] v)

        public static
        void glVertexAttrib1svNV(GLuint index, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib1svNV_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib2dvNV(GLuint index, IntPtr v)

        public static
        void glVertexAttrib2dvNV(GLuint index, IntPtr v)
        {
            glVertexAttrib2dvNV_(index, v);
        }

        #endregion

        #region glVertexAttrib2dvNV(GLuint index, object v)

        public static
        void glVertexAttrib2dvNV(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib2dvNV_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib2dvNV(GLuint index, GLdouble[] v)

        public static
        void glVertexAttrib2dvNV(GLuint index, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib2dvNV_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib2fvNV(GLuint index, IntPtr v)

        public static
        void glVertexAttrib2fvNV(GLuint index, IntPtr v)
        {
            glVertexAttrib2fvNV_(index, v);
        }

        #endregion

        #region glVertexAttrib2fvNV(GLuint index, object v)

        public static
        void glVertexAttrib2fvNV(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib2fvNV_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib2fvNV(GLuint index, GLfloat[] v)

        public static
        void glVertexAttrib2fvNV(GLuint index, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib2fvNV_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib2svNV(GLuint index, IntPtr v)

        public static
        void glVertexAttrib2svNV(GLuint index, IntPtr v)
        {
            glVertexAttrib2svNV_(index, v);
        }

        #endregion

        #region glVertexAttrib2svNV(GLuint index, object v)

        public static
        void glVertexAttrib2svNV(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib2svNV_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib2svNV(GLuint index, GLshort[] v)

        public static
        void glVertexAttrib2svNV(GLuint index, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib2svNV_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib3dvNV(GLuint index, IntPtr v)

        public static
        void glVertexAttrib3dvNV(GLuint index, IntPtr v)
        {
            glVertexAttrib3dvNV_(index, v);
        }

        #endregion

        #region glVertexAttrib3dvNV(GLuint index, object v)

        public static
        void glVertexAttrib3dvNV(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib3dvNV_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib3dvNV(GLuint index, GLdouble[] v)

        public static
        void glVertexAttrib3dvNV(GLuint index, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib3dvNV_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib3fvNV(GLuint index, IntPtr v)

        public static
        void glVertexAttrib3fvNV(GLuint index, IntPtr v)
        {
            glVertexAttrib3fvNV_(index, v);
        }

        #endregion

        #region glVertexAttrib3fvNV(GLuint index, object v)

        public static
        void glVertexAttrib3fvNV(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib3fvNV_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib3fvNV(GLuint index, GLfloat[] v)

        public static
        void glVertexAttrib3fvNV(GLuint index, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib3fvNV_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib3svNV(GLuint index, IntPtr v)

        public static
        void glVertexAttrib3svNV(GLuint index, IntPtr v)
        {
            glVertexAttrib3svNV_(index, v);
        }

        #endregion

        #region glVertexAttrib3svNV(GLuint index, object v)

        public static
        void glVertexAttrib3svNV(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib3svNV_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib3svNV(GLuint index, GLshort[] v)

        public static
        void glVertexAttrib3svNV(GLuint index, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib3svNV_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib4dvNV(GLuint index, IntPtr v)

        public static
        void glVertexAttrib4dvNV(GLuint index, IntPtr v)
        {
            glVertexAttrib4dvNV_(index, v);
        }

        #endregion

        #region glVertexAttrib4dvNV(GLuint index, object v)

        public static
        void glVertexAttrib4dvNV(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib4dvNV_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib4dvNV(GLuint index, GLdouble[] v)

        public static
        void glVertexAttrib4dvNV(GLuint index, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib4dvNV_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib4fvNV(GLuint index, IntPtr v)

        public static
        void glVertexAttrib4fvNV(GLuint index, IntPtr v)
        {
            glVertexAttrib4fvNV_(index, v);
        }

        #endregion

        #region glVertexAttrib4fvNV(GLuint index, object v)

        public static
        void glVertexAttrib4fvNV(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib4fvNV_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib4fvNV(GLuint index, GLfloat[] v)

        public static
        void glVertexAttrib4fvNV(GLuint index, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib4fvNV_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib4svNV(GLuint index, IntPtr v)

        public static
        void glVertexAttrib4svNV(GLuint index, IntPtr v)
        {
            glVertexAttrib4svNV_(index, v);
        }

        #endregion

        #region glVertexAttrib4svNV(GLuint index, object v)

        public static
        void glVertexAttrib4svNV(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib4svNV_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib4svNV(GLuint index, GLshort[] v)

        public static
        void glVertexAttrib4svNV(GLuint index, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib4svNV_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib4ubvNV(GLuint index, IntPtr v)

        public static
        void glVertexAttrib4ubvNV(GLuint index, IntPtr v)
        {
            glVertexAttrib4ubvNV_(index, v);
        }

        #endregion

        #region glVertexAttrib4ubvNV(GLuint index, object v)

        public static
        void glVertexAttrib4ubvNV(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib4ubvNV_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib4ubvNV(GLuint index, GLubyte[] v)

        public static
        void glVertexAttrib4ubvNV(GLuint index, GLubyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib4ubvNV_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttribs1dvNV(GLuint index, GLsizei count, IntPtr v)

        public static
        void glVertexAttribs1dvNV(GLuint index, GLsizei count, IntPtr v)
        {
            glVertexAttribs1dvNV_(index, count, v);
        }

        #endregion

        #region glVertexAttribs1dvNV(GLuint index, GLsizei count, object v)

        public static
        void glVertexAttribs1dvNV(GLuint index, GLsizei count, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttribs1dvNV_(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttribs1dvNV(GLuint index, GLsizei count, GLdouble[] v)

        public static
        void glVertexAttribs1dvNV(GLuint index, GLsizei count, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttribs1dvNV_(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttribs1fvNV(GLuint index, GLsizei count, IntPtr v)

        public static
        void glVertexAttribs1fvNV(GLuint index, GLsizei count, IntPtr v)
        {
            glVertexAttribs1fvNV_(index, count, v);
        }

        #endregion

        #region glVertexAttribs1fvNV(GLuint index, GLsizei count, object v)

        public static
        void glVertexAttribs1fvNV(GLuint index, GLsizei count, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttribs1fvNV_(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttribs1fvNV(GLuint index, GLsizei count, GLfloat[] v)

        public static
        void glVertexAttribs1fvNV(GLuint index, GLsizei count, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttribs1fvNV_(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttribs1svNV(GLuint index, GLsizei count, IntPtr v)

        public static
        void glVertexAttribs1svNV(GLuint index, GLsizei count, IntPtr v)
        {
            glVertexAttribs1svNV_(index, count, v);
        }

        #endregion

        #region glVertexAttribs1svNV(GLuint index, GLsizei count, object v)

        public static
        void glVertexAttribs1svNV(GLuint index, GLsizei count, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttribs1svNV_(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttribs1svNV(GLuint index, GLsizei count, GLshort[] v)

        public static
        void glVertexAttribs1svNV(GLuint index, GLsizei count, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttribs1svNV_(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttribs2dvNV(GLuint index, GLsizei count, IntPtr v)

        public static
        void glVertexAttribs2dvNV(GLuint index, GLsizei count, IntPtr v)
        {
            glVertexAttribs2dvNV_(index, count, v);
        }

        #endregion

        #region glVertexAttribs2dvNV(GLuint index, GLsizei count, object v)

        public static
        void glVertexAttribs2dvNV(GLuint index, GLsizei count, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttribs2dvNV_(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttribs2dvNV(GLuint index, GLsizei count, GLdouble[] v)

        public static
        void glVertexAttribs2dvNV(GLuint index, GLsizei count, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttribs2dvNV_(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttribs2fvNV(GLuint index, GLsizei count, IntPtr v)

        public static
        void glVertexAttribs2fvNV(GLuint index, GLsizei count, IntPtr v)
        {
            glVertexAttribs2fvNV_(index, count, v);
        }

        #endregion

        #region glVertexAttribs2fvNV(GLuint index, GLsizei count, object v)

        public static
        void glVertexAttribs2fvNV(GLuint index, GLsizei count, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttribs2fvNV_(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttribs2fvNV(GLuint index, GLsizei count, GLfloat[] v)

        public static
        void glVertexAttribs2fvNV(GLuint index, GLsizei count, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttribs2fvNV_(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttribs2svNV(GLuint index, GLsizei count, IntPtr v)

        public static
        void glVertexAttribs2svNV(GLuint index, GLsizei count, IntPtr v)
        {
            glVertexAttribs2svNV_(index, count, v);
        }

        #endregion

        #region glVertexAttribs2svNV(GLuint index, GLsizei count, object v)

        public static
        void glVertexAttribs2svNV(GLuint index, GLsizei count, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttribs2svNV_(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttribs2svNV(GLuint index, GLsizei count, GLshort[] v)

        public static
        void glVertexAttribs2svNV(GLuint index, GLsizei count, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttribs2svNV_(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttribs3dvNV(GLuint index, GLsizei count, IntPtr v)

        public static
        void glVertexAttribs3dvNV(GLuint index, GLsizei count, IntPtr v)
        {
            glVertexAttribs3dvNV_(index, count, v);
        }

        #endregion

        #region glVertexAttribs3dvNV(GLuint index, GLsizei count, object v)

        public static
        void glVertexAttribs3dvNV(GLuint index, GLsizei count, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttribs3dvNV_(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttribs3dvNV(GLuint index, GLsizei count, GLdouble[] v)

        public static
        void glVertexAttribs3dvNV(GLuint index, GLsizei count, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttribs3dvNV_(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttribs3fvNV(GLuint index, GLsizei count, IntPtr v)

        public static
        void glVertexAttribs3fvNV(GLuint index, GLsizei count, IntPtr v)
        {
            glVertexAttribs3fvNV_(index, count, v);
        }

        #endregion

        #region glVertexAttribs3fvNV(GLuint index, GLsizei count, object v)

        public static
        void glVertexAttribs3fvNV(GLuint index, GLsizei count, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttribs3fvNV_(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttribs3fvNV(GLuint index, GLsizei count, GLfloat[] v)

        public static
        void glVertexAttribs3fvNV(GLuint index, GLsizei count, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttribs3fvNV_(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttribs3svNV(GLuint index, GLsizei count, IntPtr v)

        public static
        void glVertexAttribs3svNV(GLuint index, GLsizei count, IntPtr v)
        {
            glVertexAttribs3svNV_(index, count, v);
        }

        #endregion

        #region glVertexAttribs3svNV(GLuint index, GLsizei count, object v)

        public static
        void glVertexAttribs3svNV(GLuint index, GLsizei count, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttribs3svNV_(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttribs3svNV(GLuint index, GLsizei count, GLshort[] v)

        public static
        void glVertexAttribs3svNV(GLuint index, GLsizei count, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttribs3svNV_(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttribs4dvNV(GLuint index, GLsizei count, IntPtr v)

        public static
        void glVertexAttribs4dvNV(GLuint index, GLsizei count, IntPtr v)
        {
            glVertexAttribs4dvNV_(index, count, v);
        }

        #endregion

        #region glVertexAttribs4dvNV(GLuint index, GLsizei count, object v)

        public static
        void glVertexAttribs4dvNV(GLuint index, GLsizei count, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttribs4dvNV_(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttribs4dvNV(GLuint index, GLsizei count, GLdouble[] v)

        public static
        void glVertexAttribs4dvNV(GLuint index, GLsizei count, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttribs4dvNV_(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttribs4fvNV(GLuint index, GLsizei count, IntPtr v)

        public static
        void glVertexAttribs4fvNV(GLuint index, GLsizei count, IntPtr v)
        {
            glVertexAttribs4fvNV_(index, count, v);
        }

        #endregion

        #region glVertexAttribs4fvNV(GLuint index, GLsizei count, object v)

        public static
        void glVertexAttribs4fvNV(GLuint index, GLsizei count, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttribs4fvNV_(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttribs4fvNV(GLuint index, GLsizei count, GLfloat[] v)

        public static
        void glVertexAttribs4fvNV(GLuint index, GLsizei count, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttribs4fvNV_(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttribs4svNV(GLuint index, GLsizei count, IntPtr v)

        public static
        void glVertexAttribs4svNV(GLuint index, GLsizei count, IntPtr v)
        {
            glVertexAttribs4svNV_(index, count, v);
        }

        #endregion

        #region glVertexAttribs4svNV(GLuint index, GLsizei count, object v)

        public static
        void glVertexAttribs4svNV(GLuint index, GLsizei count, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttribs4svNV_(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttribs4svNV(GLuint index, GLsizei count, GLshort[] v)

        public static
        void glVertexAttribs4svNV(GLuint index, GLsizei count, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttribs4svNV_(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttribs4ubvNV(GLuint index, GLsizei count, IntPtr v)

        public static
        void glVertexAttribs4ubvNV(GLuint index, GLsizei count, IntPtr v)
        {
            glVertexAttribs4ubvNV_(index, count, v);
        }

        #endregion

        #region glVertexAttribs4ubvNV(GLuint index, GLsizei count, object v)

        public static
        void glVertexAttribs4ubvNV(GLuint index, GLsizei count, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttribs4ubvNV_(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttribs4ubvNV(GLuint index, GLsizei count, GLubyte[] v)

        public static
        void glVertexAttribs4ubvNV(GLuint index, GLsizei count, GLubyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttribs4ubvNV_(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexBumpParameterivATI(GLenum pname, IntPtr param)

        public static
        void glTexBumpParameterivATI(GLenum pname, IntPtr param)
        {
            glTexBumpParameterivATI_(pname, param);
        }

        #endregion

        #region glTexBumpParameterivATI(GLenum pname, object param)

        public static
        void glTexBumpParameterivATI(GLenum pname, object param)
        {
            GCHandle h0 = GCHandle.Alloc(param, GCHandleType.Pinned);
            try
            {
                glTexBumpParameterivATI_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexBumpParameterivATI(GLenum pname, GLint[] param)

        public static
        void glTexBumpParameterivATI(GLenum pname, GLint[] param)
        {
            GCHandle h0 = GCHandle.Alloc(param, GCHandleType.Pinned);
            try
            {
                glTexBumpParameterivATI_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexBumpParameterfvATI(GLenum pname, IntPtr param)

        public static
        void glTexBumpParameterfvATI(GLenum pname, IntPtr param)
        {
            glTexBumpParameterfvATI_(pname, param);
        }

        #endregion

        #region glTexBumpParameterfvATI(GLenum pname, object param)

        public static
        void glTexBumpParameterfvATI(GLenum pname, object param)
        {
            GCHandle h0 = GCHandle.Alloc(param, GCHandleType.Pinned);
            try
            {
                glTexBumpParameterfvATI_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexBumpParameterfvATI(GLenum pname, GLfloat[] param)

        public static
        void glTexBumpParameterfvATI(GLenum pname, GLfloat[] param)
        {
            GCHandle h0 = GCHandle.Alloc(param, GCHandleType.Pinned);
            try
            {
                glTexBumpParameterfvATI_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetTexBumpParameterivATI(GLenum pname, IntPtr param)

        public static
        void glGetTexBumpParameterivATI(GLenum pname, IntPtr param)
        {
            glGetTexBumpParameterivATI_(pname, param);
        }

        #endregion

        #region glGetTexBumpParameterivATI(GLenum pname, object param)

        public static
        void glGetTexBumpParameterivATI(GLenum pname, object param)
        {
            GCHandle h0 = GCHandle.Alloc(param, GCHandleType.Pinned);
            try
            {
                glGetTexBumpParameterivATI_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetTexBumpParameterivATI(GLenum pname, GLint[] param)

        public static
        void glGetTexBumpParameterivATI(GLenum pname, GLint[] param)
        {
            GCHandle h0 = GCHandle.Alloc(param, GCHandleType.Pinned);
            try
            {
                glGetTexBumpParameterivATI_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetTexBumpParameterfvATI(GLenum pname, IntPtr param)

        public static
        void glGetTexBumpParameterfvATI(GLenum pname, IntPtr param)
        {
            glGetTexBumpParameterfvATI_(pname, param);
        }

        #endregion

        #region glGetTexBumpParameterfvATI(GLenum pname, object param)

        public static
        void glGetTexBumpParameterfvATI(GLenum pname, object param)
        {
            GCHandle h0 = GCHandle.Alloc(param, GCHandleType.Pinned);
            try
            {
                glGetTexBumpParameterfvATI_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetTexBumpParameterfvATI(GLenum pname, GLfloat[] param)

        public static
        void glGetTexBumpParameterfvATI(GLenum pname, GLfloat[] param)
        {
            GCHandle h0 = GCHandle.Alloc(param, GCHandleType.Pinned);
            try
            {
                glGetTexBumpParameterfvATI_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glSetFragmentShaderConstantATI(GLuint dst, IntPtr value)

        public static
        void glSetFragmentShaderConstantATI(GLuint dst, IntPtr value)
        {
            glSetFragmentShaderConstantATI_(dst, value);
        }

        #endregion

        #region glSetFragmentShaderConstantATI(GLuint dst, object value)

        public static
        void glSetFragmentShaderConstantATI(GLuint dst, object value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                glSetFragmentShaderConstantATI_(dst, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glSetFragmentShaderConstantATI(GLuint dst, GLfloat[] value)

        public static
        void glSetFragmentShaderConstantATI(GLuint dst, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                glSetFragmentShaderConstantATI_(dst, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glNewObjectBufferATI(GLsizei size, IntPtr pointer, GLenum usage)

        public static
        GLuint glNewObjectBufferATI(GLsizei size, IntPtr pointer, GLenum usage)
        {
            return glNewObjectBufferATI_(size, pointer, usage);
        }

        #endregion

        #region glNewObjectBufferATI(GLsizei size, object pointer, GLenum usage)

        public static
        GLuint glNewObjectBufferATI(GLsizei size, object pointer, GLenum usage)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                return glNewObjectBufferATI_(size, h0.AddrOfPinnedObject(), usage);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glUpdateObjectBufferATI(GLuint buffer, GLuint offset, GLsizei size, IntPtr pointer, GLenum preserve)

        public static
        void glUpdateObjectBufferATI(GLuint buffer, GLuint offset, GLsizei size, IntPtr pointer, GLenum preserve)
        {
            glUpdateObjectBufferATI_(buffer, offset, size, pointer, preserve);
        }

        #endregion

        #region glUpdateObjectBufferATI(GLuint buffer, GLuint offset, GLsizei size, object pointer, GLenum preserve)

        public static
        void glUpdateObjectBufferATI(GLuint buffer, GLuint offset, GLsizei size, object pointer, GLenum preserve)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                glUpdateObjectBufferATI_(buffer, offset, size, h0.AddrOfPinnedObject(), preserve);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetObjectBufferfvATI(GLuint buffer, GLenum pname, IntPtr parameters)

        public static
        void glGetObjectBufferfvATI(GLuint buffer, GLenum pname, IntPtr parameters)
        {
            glGetObjectBufferfvATI_(buffer, pname, parameters);
        }

        #endregion

        #region glGetObjectBufferfvATI(GLuint buffer, GLenum pname, object parameters)

        public static
        void glGetObjectBufferfvATI(GLuint buffer, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetObjectBufferfvATI_(buffer, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetObjectBufferfvATI(GLuint buffer, GLenum pname, GLfloat[] parameters)

        public static
        void glGetObjectBufferfvATI(GLuint buffer, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetObjectBufferfvATI_(buffer, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetObjectBufferivATI(GLuint buffer, GLenum pname, IntPtr parameters)

        public static
        void glGetObjectBufferivATI(GLuint buffer, GLenum pname, IntPtr parameters)
        {
            glGetObjectBufferivATI_(buffer, pname, parameters);
        }

        #endregion

        #region glGetObjectBufferivATI(GLuint buffer, GLenum pname, object parameters)

        public static
        void glGetObjectBufferivATI(GLuint buffer, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetObjectBufferivATI_(buffer, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetObjectBufferivATI(GLuint buffer, GLenum pname, GLint[] parameters)

        public static
        void glGetObjectBufferivATI(GLuint buffer, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetObjectBufferivATI_(buffer, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetArrayObjectfvATI(GLenum array, GLenum pname, IntPtr parameters)

        public static
        void glGetArrayObjectfvATI(GLenum array, GLenum pname, IntPtr parameters)
        {
            glGetArrayObjectfvATI_(array, pname, parameters);
        }

        #endregion

        #region glGetArrayObjectfvATI(GLenum array, GLenum pname, object parameters)

        public static
        void glGetArrayObjectfvATI(GLenum array, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetArrayObjectfvATI_(array, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetArrayObjectfvATI(GLenum array, GLenum pname, GLfloat[] parameters)

        public static
        void glGetArrayObjectfvATI(GLenum array, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetArrayObjectfvATI_(array, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetArrayObjectivATI(GLenum array, GLenum pname, IntPtr parameters)

        public static
        void glGetArrayObjectivATI(GLenum array, GLenum pname, IntPtr parameters)
        {
            glGetArrayObjectivATI_(array, pname, parameters);
        }

        #endregion

        #region glGetArrayObjectivATI(GLenum array, GLenum pname, object parameters)

        public static
        void glGetArrayObjectivATI(GLenum array, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetArrayObjectivATI_(array, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetArrayObjectivATI(GLenum array, GLenum pname, GLint[] parameters)

        public static
        void glGetArrayObjectivATI(GLenum array, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetArrayObjectivATI_(array, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetVariantArrayObjectfvATI(GLuint id, GLenum pname, IntPtr parameters)

        public static
        void glGetVariantArrayObjectfvATI(GLuint id, GLenum pname, IntPtr parameters)
        {
            glGetVariantArrayObjectfvATI_(id, pname, parameters);
        }

        #endregion

        #region glGetVariantArrayObjectfvATI(GLuint id, GLenum pname, object parameters)

        public static
        void glGetVariantArrayObjectfvATI(GLuint id, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetVariantArrayObjectfvATI_(id, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetVariantArrayObjectfvATI(GLuint id, GLenum pname, GLfloat[] parameters)

        public static
        void glGetVariantArrayObjectfvATI(GLuint id, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetVariantArrayObjectfvATI_(id, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetVariantArrayObjectivATI(GLuint id, GLenum pname, IntPtr parameters)

        public static
        void glGetVariantArrayObjectivATI(GLuint id, GLenum pname, IntPtr parameters)
        {
            glGetVariantArrayObjectivATI_(id, pname, parameters);
        }

        #endregion

        #region glGetVariantArrayObjectivATI(GLuint id, GLenum pname, object parameters)

        public static
        void glGetVariantArrayObjectivATI(GLuint id, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetVariantArrayObjectivATI_(id, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetVariantArrayObjectivATI(GLuint id, GLenum pname, GLint[] parameters)

        public static
        void glGetVariantArrayObjectivATI(GLuint id, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetVariantArrayObjectivATI_(id, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glSetInvariantEXT(GLuint id, GLenum type, IntPtr addr)

        public static
        void glSetInvariantEXT(GLuint id, GLenum type, IntPtr addr)
        {
            glSetInvariantEXT_(id, type, addr);
        }

        #endregion

        #region glSetInvariantEXT(GLuint id, GLenum type, object addr)

        public static
        void glSetInvariantEXT(GLuint id, GLenum type, object addr)
        {
            GCHandle h0 = GCHandle.Alloc(addr, GCHandleType.Pinned);
            try
            {
                glSetInvariantEXT_(id, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glSetLocalConstantEXT(GLuint id, GLenum type, IntPtr addr)

        public static
        void glSetLocalConstantEXT(GLuint id, GLenum type, IntPtr addr)
        {
            glSetLocalConstantEXT_(id, type, addr);
        }

        #endregion

        #region glSetLocalConstantEXT(GLuint id, GLenum type, object addr)

        public static
        void glSetLocalConstantEXT(GLuint id, GLenum type, object addr)
        {
            GCHandle h0 = GCHandle.Alloc(addr, GCHandleType.Pinned);
            try
            {
                glSetLocalConstantEXT_(id, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVariantbvEXT(GLuint id, IntPtr addr)

        public static
        void glVariantbvEXT(GLuint id, IntPtr addr)
        {
            glVariantbvEXT_(id, addr);
        }

        #endregion

        #region glVariantbvEXT(GLuint id, object addr)

        public static
        void glVariantbvEXT(GLuint id, object addr)
        {
            GCHandle h0 = GCHandle.Alloc(addr, GCHandleType.Pinned);
            try
            {
                glVariantbvEXT_(id, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVariantbvEXT(GLuint id, GLbyte[] addr)

        public static
        void glVariantbvEXT(GLuint id, GLbyte[] addr)
        {
            GCHandle h0 = GCHandle.Alloc(addr, GCHandleType.Pinned);
            try
            {
                glVariantbvEXT_(id, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVariantsvEXT(GLuint id, IntPtr addr)

        public static
        void glVariantsvEXT(GLuint id, IntPtr addr)
        {
            glVariantsvEXT_(id, addr);
        }

        #endregion

        #region glVariantsvEXT(GLuint id, object addr)

        public static
        void glVariantsvEXT(GLuint id, object addr)
        {
            GCHandle h0 = GCHandle.Alloc(addr, GCHandleType.Pinned);
            try
            {
                glVariantsvEXT_(id, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVariantsvEXT(GLuint id, GLshort[] addr)

        public static
        void glVariantsvEXT(GLuint id, GLshort[] addr)
        {
            GCHandle h0 = GCHandle.Alloc(addr, GCHandleType.Pinned);
            try
            {
                glVariantsvEXT_(id, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVariantivEXT(GLuint id, IntPtr addr)

        public static
        void glVariantivEXT(GLuint id, IntPtr addr)
        {
            glVariantivEXT_(id, addr);
        }

        #endregion

        #region glVariantivEXT(GLuint id, object addr)

        public static
        void glVariantivEXT(GLuint id, object addr)
        {
            GCHandle h0 = GCHandle.Alloc(addr, GCHandleType.Pinned);
            try
            {
                glVariantivEXT_(id, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVariantivEXT(GLuint id, GLint[] addr)

        public static
        void glVariantivEXT(GLuint id, GLint[] addr)
        {
            GCHandle h0 = GCHandle.Alloc(addr, GCHandleType.Pinned);
            try
            {
                glVariantivEXT_(id, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVariantfvEXT(GLuint id, IntPtr addr)

        public static
        void glVariantfvEXT(GLuint id, IntPtr addr)
        {
            glVariantfvEXT_(id, addr);
        }

        #endregion

        #region glVariantfvEXT(GLuint id, object addr)

        public static
        void glVariantfvEXT(GLuint id, object addr)
        {
            GCHandle h0 = GCHandle.Alloc(addr, GCHandleType.Pinned);
            try
            {
                glVariantfvEXT_(id, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVariantfvEXT(GLuint id, GLfloat[] addr)

        public static
        void glVariantfvEXT(GLuint id, GLfloat[] addr)
        {
            GCHandle h0 = GCHandle.Alloc(addr, GCHandleType.Pinned);
            try
            {
                glVariantfvEXT_(id, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVariantdvEXT(GLuint id, IntPtr addr)

        public static
        void glVariantdvEXT(GLuint id, IntPtr addr)
        {
            glVariantdvEXT_(id, addr);
        }

        #endregion

        #region glVariantdvEXT(GLuint id, object addr)

        public static
        void glVariantdvEXT(GLuint id, object addr)
        {
            GCHandle h0 = GCHandle.Alloc(addr, GCHandleType.Pinned);
            try
            {
                glVariantdvEXT_(id, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVariantdvEXT(GLuint id, GLdouble[] addr)

        public static
        void glVariantdvEXT(GLuint id, GLdouble[] addr)
        {
            GCHandle h0 = GCHandle.Alloc(addr, GCHandleType.Pinned);
            try
            {
                glVariantdvEXT_(id, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVariantubvEXT(GLuint id, IntPtr addr)

        public static
        void glVariantubvEXT(GLuint id, IntPtr addr)
        {
            glVariantubvEXT_(id, addr);
        }

        #endregion

        #region glVariantubvEXT(GLuint id, object addr)

        public static
        void glVariantubvEXT(GLuint id, object addr)
        {
            GCHandle h0 = GCHandle.Alloc(addr, GCHandleType.Pinned);
            try
            {
                glVariantubvEXT_(id, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVariantubvEXT(GLuint id, GLubyte[] addr)

        public static
        void glVariantubvEXT(GLuint id, GLubyte[] addr)
        {
            GCHandle h0 = GCHandle.Alloc(addr, GCHandleType.Pinned);
            try
            {
                glVariantubvEXT_(id, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVariantusvEXT(GLuint id, IntPtr addr)

        public static
        void glVariantusvEXT(GLuint id, IntPtr addr)
        {
            glVariantusvEXT_(id, addr);
        }

        #endregion

        #region glVariantusvEXT(GLuint id, object addr)

        public static
        void glVariantusvEXT(GLuint id, object addr)
        {
            GCHandle h0 = GCHandle.Alloc(addr, GCHandleType.Pinned);
            try
            {
                glVariantusvEXT_(id, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVariantusvEXT(GLuint id, GLushort[] addr)

        public static
        void glVariantusvEXT(GLuint id, GLushort[] addr)
        {
            GCHandle h0 = GCHandle.Alloc(addr, GCHandleType.Pinned);
            try
            {
                glVariantusvEXT_(id, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVariantuivEXT(GLuint id, IntPtr addr)

        public static
        void glVariantuivEXT(GLuint id, IntPtr addr)
        {
            glVariantuivEXT_(id, addr);
        }

        #endregion

        #region glVariantuivEXT(GLuint id, object addr)

        public static
        void glVariantuivEXT(GLuint id, object addr)
        {
            GCHandle h0 = GCHandle.Alloc(addr, GCHandleType.Pinned);
            try
            {
                glVariantuivEXT_(id, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVariantuivEXT(GLuint id, GLuint[] addr)

        public static
        void glVariantuivEXT(GLuint id, GLuint[] addr)
        {
            GCHandle h0 = GCHandle.Alloc(addr, GCHandleType.Pinned);
            try
            {
                glVariantuivEXT_(id, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVariantPointerEXT(GLuint id, GLenum type, GLuint stride, IntPtr addr)

        public static
        void glVariantPointerEXT(GLuint id, GLenum type, GLuint stride, IntPtr addr)
        {
            glVariantPointerEXT_(id, type, stride, addr);
        }

        #endregion

        #region glVariantPointerEXT(GLuint id, GLenum type, GLuint stride, object addr)

        public static
        void glVariantPointerEXT(GLuint id, GLenum type, GLuint stride, object addr)
        {
            GCHandle h0 = GCHandle.Alloc(addr, GCHandleType.Pinned);
            try
            {
                glVariantPointerEXT_(id, type, stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetVariantBooleanvEXT(GLuint id, GLenum value, IntPtr data)

        public static
        void glGetVariantBooleanvEXT(GLuint id, GLenum value, IntPtr data)
        {
            glGetVariantBooleanvEXT_(id, value, data);
        }

        #endregion

        #region glGetVariantBooleanvEXT(GLuint id, GLenum value, object data)

        public static
        void glGetVariantBooleanvEXT(GLuint id, GLenum value, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                glGetVariantBooleanvEXT_(id, value, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetVariantBooleanvEXT(GLuint id, GLenum value, GLboolean[] data)

        public static
        void glGetVariantBooleanvEXT(GLuint id, GLenum value, GLboolean[] data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                glGetVariantBooleanvEXT_(id, value, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetVariantIntegervEXT(GLuint id, GLenum value, IntPtr data)

        public static
        void glGetVariantIntegervEXT(GLuint id, GLenum value, IntPtr data)
        {
            glGetVariantIntegervEXT_(id, value, data);
        }

        #endregion

        #region glGetVariantIntegervEXT(GLuint id, GLenum value, object data)

        public static
        void glGetVariantIntegervEXT(GLuint id, GLenum value, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                glGetVariantIntegervEXT_(id, value, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetVariantIntegervEXT(GLuint id, GLenum value, GLint[] data)

        public static
        void glGetVariantIntegervEXT(GLuint id, GLenum value, GLint[] data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                glGetVariantIntegervEXT_(id, value, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetVariantFloatvEXT(GLuint id, GLenum value, IntPtr data)

        public static
        void glGetVariantFloatvEXT(GLuint id, GLenum value, IntPtr data)
        {
            glGetVariantFloatvEXT_(id, value, data);
        }

        #endregion

        #region glGetVariantFloatvEXT(GLuint id, GLenum value, object data)

        public static
        void glGetVariantFloatvEXT(GLuint id, GLenum value, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                glGetVariantFloatvEXT_(id, value, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetVariantFloatvEXT(GLuint id, GLenum value, GLfloat[] data)

        public static
        void glGetVariantFloatvEXT(GLuint id, GLenum value, GLfloat[] data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                glGetVariantFloatvEXT_(id, value, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetVariantPointervEXT(GLuint id, GLenum value, IntPtr data)

        public static
        void glGetVariantPointervEXT(GLuint id, GLenum value, IntPtr data)
        {
            glGetVariantPointervEXT_(id, value, data);
        }

        #endregion

        #region glGetVariantPointervEXT(GLuint id, GLenum value, object data)

        public static
        void glGetVariantPointervEXT(GLuint id, GLenum value, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                glGetVariantPointervEXT_(id, value, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetVariantPointervEXT(GLuint id, GLenum value, IntPtr[] data)

        public static
        void glGetVariantPointervEXT(GLuint id, GLenum value, IntPtr[] data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                glGetVariantPointervEXT_(id, value, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetInvariantBooleanvEXT(GLuint id, GLenum value, IntPtr data)

        public static
        void glGetInvariantBooleanvEXT(GLuint id, GLenum value, IntPtr data)
        {
            glGetInvariantBooleanvEXT_(id, value, data);
        }

        #endregion

        #region glGetInvariantBooleanvEXT(GLuint id, GLenum value, object data)

        public static
        void glGetInvariantBooleanvEXT(GLuint id, GLenum value, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                glGetInvariantBooleanvEXT_(id, value, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetInvariantBooleanvEXT(GLuint id, GLenum value, GLboolean[] data)

        public static
        void glGetInvariantBooleanvEXT(GLuint id, GLenum value, GLboolean[] data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                glGetInvariantBooleanvEXT_(id, value, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetInvariantIntegervEXT(GLuint id, GLenum value, IntPtr data)

        public static
        void glGetInvariantIntegervEXT(GLuint id, GLenum value, IntPtr data)
        {
            glGetInvariantIntegervEXT_(id, value, data);
        }

        #endregion

        #region glGetInvariantIntegervEXT(GLuint id, GLenum value, object data)

        public static
        void glGetInvariantIntegervEXT(GLuint id, GLenum value, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                glGetInvariantIntegervEXT_(id, value, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetInvariantIntegervEXT(GLuint id, GLenum value, GLint[] data)

        public static
        void glGetInvariantIntegervEXT(GLuint id, GLenum value, GLint[] data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                glGetInvariantIntegervEXT_(id, value, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetInvariantFloatvEXT(GLuint id, GLenum value, IntPtr data)

        public static
        void glGetInvariantFloatvEXT(GLuint id, GLenum value, IntPtr data)
        {
            glGetInvariantFloatvEXT_(id, value, data);
        }

        #endregion

        #region glGetInvariantFloatvEXT(GLuint id, GLenum value, object data)

        public static
        void glGetInvariantFloatvEXT(GLuint id, GLenum value, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                glGetInvariantFloatvEXT_(id, value, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetInvariantFloatvEXT(GLuint id, GLenum value, GLfloat[] data)

        public static
        void glGetInvariantFloatvEXT(GLuint id, GLenum value, GLfloat[] data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                glGetInvariantFloatvEXT_(id, value, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetLocalConstantBooleanvEXT(GLuint id, GLenum value, IntPtr data)

        public static
        void glGetLocalConstantBooleanvEXT(GLuint id, GLenum value, IntPtr data)
        {
            glGetLocalConstantBooleanvEXT_(id, value, data);
        }

        #endregion

        #region glGetLocalConstantBooleanvEXT(GLuint id, GLenum value, object data)

        public static
        void glGetLocalConstantBooleanvEXT(GLuint id, GLenum value, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                glGetLocalConstantBooleanvEXT_(id, value, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetLocalConstantBooleanvEXT(GLuint id, GLenum value, GLboolean[] data)

        public static
        void glGetLocalConstantBooleanvEXT(GLuint id, GLenum value, GLboolean[] data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                glGetLocalConstantBooleanvEXT_(id, value, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetLocalConstantIntegervEXT(GLuint id, GLenum value, IntPtr data)

        public static
        void glGetLocalConstantIntegervEXT(GLuint id, GLenum value, IntPtr data)
        {
            glGetLocalConstantIntegervEXT_(id, value, data);
        }

        #endregion

        #region glGetLocalConstantIntegervEXT(GLuint id, GLenum value, object data)

        public static
        void glGetLocalConstantIntegervEXT(GLuint id, GLenum value, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                glGetLocalConstantIntegervEXT_(id, value, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetLocalConstantIntegervEXT(GLuint id, GLenum value, GLint[] data)

        public static
        void glGetLocalConstantIntegervEXT(GLuint id, GLenum value, GLint[] data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                glGetLocalConstantIntegervEXT_(id, value, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetLocalConstantFloatvEXT(GLuint id, GLenum value, IntPtr data)

        public static
        void glGetLocalConstantFloatvEXT(GLuint id, GLenum value, IntPtr data)
        {
            glGetLocalConstantFloatvEXT_(id, value, data);
        }

        #endregion

        #region glGetLocalConstantFloatvEXT(GLuint id, GLenum value, object data)

        public static
        void glGetLocalConstantFloatvEXT(GLuint id, GLenum value, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                glGetLocalConstantFloatvEXT_(id, value, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetLocalConstantFloatvEXT(GLuint id, GLenum value, GLfloat[] data)

        public static
        void glGetLocalConstantFloatvEXT(GLuint id, GLenum value, GLfloat[] data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                glGetLocalConstantFloatvEXT_(id, value, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexStream1svATI(GLenum stream, IntPtr coords)

        public static
        void glVertexStream1svATI(GLenum stream, IntPtr coords)
        {
            glVertexStream1svATI_(stream, coords);
        }

        #endregion

        #region glVertexStream1svATI(GLenum stream, object coords)

        public static
        void glVertexStream1svATI(GLenum stream, object coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                glVertexStream1svATI_(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexStream1svATI(GLenum stream, GLshort[] coords)

        public static
        void glVertexStream1svATI(GLenum stream, GLshort[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                glVertexStream1svATI_(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexStream1ivATI(GLenum stream, IntPtr coords)

        public static
        void glVertexStream1ivATI(GLenum stream, IntPtr coords)
        {
            glVertexStream1ivATI_(stream, coords);
        }

        #endregion

        #region glVertexStream1ivATI(GLenum stream, object coords)

        public static
        void glVertexStream1ivATI(GLenum stream, object coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                glVertexStream1ivATI_(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexStream1ivATI(GLenum stream, GLint[] coords)

        public static
        void glVertexStream1ivATI(GLenum stream, GLint[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                glVertexStream1ivATI_(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexStream1fvATI(GLenum stream, IntPtr coords)

        public static
        void glVertexStream1fvATI(GLenum stream, IntPtr coords)
        {
            glVertexStream1fvATI_(stream, coords);
        }

        #endregion

        #region glVertexStream1fvATI(GLenum stream, object coords)

        public static
        void glVertexStream1fvATI(GLenum stream, object coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                glVertexStream1fvATI_(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexStream1fvATI(GLenum stream, GLfloat[] coords)

        public static
        void glVertexStream1fvATI(GLenum stream, GLfloat[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                glVertexStream1fvATI_(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexStream1dvATI(GLenum stream, IntPtr coords)

        public static
        void glVertexStream1dvATI(GLenum stream, IntPtr coords)
        {
            glVertexStream1dvATI_(stream, coords);
        }

        #endregion

        #region glVertexStream1dvATI(GLenum stream, object coords)

        public static
        void glVertexStream1dvATI(GLenum stream, object coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                glVertexStream1dvATI_(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexStream1dvATI(GLenum stream, GLdouble[] coords)

        public static
        void glVertexStream1dvATI(GLenum stream, GLdouble[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                glVertexStream1dvATI_(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexStream2svATI(GLenum stream, IntPtr coords)

        public static
        void glVertexStream2svATI(GLenum stream, IntPtr coords)
        {
            glVertexStream2svATI_(stream, coords);
        }

        #endregion

        #region glVertexStream2svATI(GLenum stream, object coords)

        public static
        void glVertexStream2svATI(GLenum stream, object coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                glVertexStream2svATI_(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexStream2svATI(GLenum stream, GLshort[] coords)

        public static
        void glVertexStream2svATI(GLenum stream, GLshort[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                glVertexStream2svATI_(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexStream2ivATI(GLenum stream, IntPtr coords)

        public static
        void glVertexStream2ivATI(GLenum stream, IntPtr coords)
        {
            glVertexStream2ivATI_(stream, coords);
        }

        #endregion

        #region glVertexStream2ivATI(GLenum stream, object coords)

        public static
        void glVertexStream2ivATI(GLenum stream, object coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                glVertexStream2ivATI_(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexStream2ivATI(GLenum stream, GLint[] coords)

        public static
        void glVertexStream2ivATI(GLenum stream, GLint[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                glVertexStream2ivATI_(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexStream2fvATI(GLenum stream, IntPtr coords)

        public static
        void glVertexStream2fvATI(GLenum stream, IntPtr coords)
        {
            glVertexStream2fvATI_(stream, coords);
        }

        #endregion

        #region glVertexStream2fvATI(GLenum stream, object coords)

        public static
        void glVertexStream2fvATI(GLenum stream, object coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                glVertexStream2fvATI_(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexStream2fvATI(GLenum stream, GLfloat[] coords)

        public static
        void glVertexStream2fvATI(GLenum stream, GLfloat[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                glVertexStream2fvATI_(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexStream2dvATI(GLenum stream, IntPtr coords)

        public static
        void glVertexStream2dvATI(GLenum stream, IntPtr coords)
        {
            glVertexStream2dvATI_(stream, coords);
        }

        #endregion

        #region glVertexStream2dvATI(GLenum stream, object coords)

        public static
        void glVertexStream2dvATI(GLenum stream, object coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                glVertexStream2dvATI_(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexStream2dvATI(GLenum stream, GLdouble[] coords)

        public static
        void glVertexStream2dvATI(GLenum stream, GLdouble[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                glVertexStream2dvATI_(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexStream3svATI(GLenum stream, IntPtr coords)

        public static
        void glVertexStream3svATI(GLenum stream, IntPtr coords)
        {
            glVertexStream3svATI_(stream, coords);
        }

        #endregion

        #region glVertexStream3svATI(GLenum stream, object coords)

        public static
        void glVertexStream3svATI(GLenum stream, object coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                glVertexStream3svATI_(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexStream3svATI(GLenum stream, GLshort[] coords)

        public static
        void glVertexStream3svATI(GLenum stream, GLshort[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                glVertexStream3svATI_(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexStream3ivATI(GLenum stream, IntPtr coords)

        public static
        void glVertexStream3ivATI(GLenum stream, IntPtr coords)
        {
            glVertexStream3ivATI_(stream, coords);
        }

        #endregion

        #region glVertexStream3ivATI(GLenum stream, object coords)

        public static
        void glVertexStream3ivATI(GLenum stream, object coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                glVertexStream3ivATI_(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexStream3ivATI(GLenum stream, GLint[] coords)

        public static
        void glVertexStream3ivATI(GLenum stream, GLint[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                glVertexStream3ivATI_(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexStream3fvATI(GLenum stream, IntPtr coords)

        public static
        void glVertexStream3fvATI(GLenum stream, IntPtr coords)
        {
            glVertexStream3fvATI_(stream, coords);
        }

        #endregion

        #region glVertexStream3fvATI(GLenum stream, object coords)

        public static
        void glVertexStream3fvATI(GLenum stream, object coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                glVertexStream3fvATI_(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexStream3fvATI(GLenum stream, GLfloat[] coords)

        public static
        void glVertexStream3fvATI(GLenum stream, GLfloat[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                glVertexStream3fvATI_(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexStream3dvATI(GLenum stream, IntPtr coords)

        public static
        void glVertexStream3dvATI(GLenum stream, IntPtr coords)
        {
            glVertexStream3dvATI_(stream, coords);
        }

        #endregion

        #region glVertexStream3dvATI(GLenum stream, object coords)

        public static
        void glVertexStream3dvATI(GLenum stream, object coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                glVertexStream3dvATI_(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexStream3dvATI(GLenum stream, GLdouble[] coords)

        public static
        void glVertexStream3dvATI(GLenum stream, GLdouble[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                glVertexStream3dvATI_(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexStream4svATI(GLenum stream, IntPtr coords)

        public static
        void glVertexStream4svATI(GLenum stream, IntPtr coords)
        {
            glVertexStream4svATI_(stream, coords);
        }

        #endregion

        #region glVertexStream4svATI(GLenum stream, object coords)

        public static
        void glVertexStream4svATI(GLenum stream, object coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                glVertexStream4svATI_(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexStream4svATI(GLenum stream, GLshort[] coords)

        public static
        void glVertexStream4svATI(GLenum stream, GLshort[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                glVertexStream4svATI_(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexStream4ivATI(GLenum stream, IntPtr coords)

        public static
        void glVertexStream4ivATI(GLenum stream, IntPtr coords)
        {
            glVertexStream4ivATI_(stream, coords);
        }

        #endregion

        #region glVertexStream4ivATI(GLenum stream, object coords)

        public static
        void glVertexStream4ivATI(GLenum stream, object coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                glVertexStream4ivATI_(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexStream4ivATI(GLenum stream, GLint[] coords)

        public static
        void glVertexStream4ivATI(GLenum stream, GLint[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                glVertexStream4ivATI_(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexStream4fvATI(GLenum stream, IntPtr coords)

        public static
        void glVertexStream4fvATI(GLenum stream, IntPtr coords)
        {
            glVertexStream4fvATI_(stream, coords);
        }

        #endregion

        #region glVertexStream4fvATI(GLenum stream, object coords)

        public static
        void glVertexStream4fvATI(GLenum stream, object coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                glVertexStream4fvATI_(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexStream4fvATI(GLenum stream, GLfloat[] coords)

        public static
        void glVertexStream4fvATI(GLenum stream, GLfloat[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                glVertexStream4fvATI_(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexStream4dvATI(GLenum stream, IntPtr coords)

        public static
        void glVertexStream4dvATI(GLenum stream, IntPtr coords)
        {
            glVertexStream4dvATI_(stream, coords);
        }

        #endregion

        #region glVertexStream4dvATI(GLenum stream, object coords)

        public static
        void glVertexStream4dvATI(GLenum stream, object coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                glVertexStream4dvATI_(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexStream4dvATI(GLenum stream, GLdouble[] coords)

        public static
        void glVertexStream4dvATI(GLenum stream, GLdouble[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                glVertexStream4dvATI_(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glNormalStream3bvATI(GLenum stream, IntPtr coords)

        public static
        void glNormalStream3bvATI(GLenum stream, IntPtr coords)
        {
            glNormalStream3bvATI_(stream, coords);
        }

        #endregion

        #region glNormalStream3bvATI(GLenum stream, object coords)

        public static
        void glNormalStream3bvATI(GLenum stream, object coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                glNormalStream3bvATI_(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glNormalStream3bvATI(GLenum stream, GLbyte[] coords)

        public static
        void glNormalStream3bvATI(GLenum stream, GLbyte[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                glNormalStream3bvATI_(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glNormalStream3svATI(GLenum stream, IntPtr coords)

        public static
        void glNormalStream3svATI(GLenum stream, IntPtr coords)
        {
            glNormalStream3svATI_(stream, coords);
        }

        #endregion

        #region glNormalStream3svATI(GLenum stream, object coords)

        public static
        void glNormalStream3svATI(GLenum stream, object coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                glNormalStream3svATI_(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glNormalStream3svATI(GLenum stream, GLshort[] coords)

        public static
        void glNormalStream3svATI(GLenum stream, GLshort[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                glNormalStream3svATI_(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glNormalStream3ivATI(GLenum stream, IntPtr coords)

        public static
        void glNormalStream3ivATI(GLenum stream, IntPtr coords)
        {
            glNormalStream3ivATI_(stream, coords);
        }

        #endregion

        #region glNormalStream3ivATI(GLenum stream, object coords)

        public static
        void glNormalStream3ivATI(GLenum stream, object coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                glNormalStream3ivATI_(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glNormalStream3ivATI(GLenum stream, GLint[] coords)

        public static
        void glNormalStream3ivATI(GLenum stream, GLint[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                glNormalStream3ivATI_(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glNormalStream3fvATI(GLenum stream, IntPtr coords)

        public static
        void glNormalStream3fvATI(GLenum stream, IntPtr coords)
        {
            glNormalStream3fvATI_(stream, coords);
        }

        #endregion

        #region glNormalStream3fvATI(GLenum stream, object coords)

        public static
        void glNormalStream3fvATI(GLenum stream, object coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                glNormalStream3fvATI_(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glNormalStream3fvATI(GLenum stream, GLfloat[] coords)

        public static
        void glNormalStream3fvATI(GLenum stream, GLfloat[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                glNormalStream3fvATI_(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glNormalStream3dvATI(GLenum stream, IntPtr coords)

        public static
        void glNormalStream3dvATI(GLenum stream, IntPtr coords)
        {
            glNormalStream3dvATI_(stream, coords);
        }

        #endregion

        #region glNormalStream3dvATI(GLenum stream, object coords)

        public static
        void glNormalStream3dvATI(GLenum stream, object coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                glNormalStream3dvATI_(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glNormalStream3dvATI(GLenum stream, GLdouble[] coords)

        public static
        void glNormalStream3dvATI(GLenum stream, GLdouble[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                glNormalStream3dvATI_(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glElementPointerATI(GLenum type, IntPtr pointer)

        public static
        void glElementPointerATI(GLenum type, IntPtr pointer)
        {
            glElementPointerATI_(type, pointer);
        }

        #endregion

        #region glElementPointerATI(GLenum type, object pointer)

        public static
        void glElementPointerATI(GLenum type, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                glElementPointerATI_(type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGenOcclusionQueriesNV(GLsizei n, IntPtr ids)

        public static
        void glGenOcclusionQueriesNV(GLsizei n, IntPtr ids)
        {
            glGenOcclusionQueriesNV_(n, ids);
        }

        #endregion

        #region glGenOcclusionQueriesNV(GLsizei n, object ids)

        public static
        void glGenOcclusionQueriesNV(GLsizei n, object ids)
        {
            GCHandle h0 = GCHandle.Alloc(ids, GCHandleType.Pinned);
            try
            {
                glGenOcclusionQueriesNV_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGenOcclusionQueriesNV(GLsizei n, GLuint[] ids)

        public static
        void glGenOcclusionQueriesNV(GLsizei n, GLuint[] ids)
        {
            GCHandle h0 = GCHandle.Alloc(ids, GCHandleType.Pinned);
            try
            {
                glGenOcclusionQueriesNV_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glDeleteOcclusionQueriesNV(GLsizei n, IntPtr ids)

        public static
        void glDeleteOcclusionQueriesNV(GLsizei n, IntPtr ids)
        {
            glDeleteOcclusionQueriesNV_(n, ids);
        }

        #endregion

        #region glDeleteOcclusionQueriesNV(GLsizei n, object ids)

        public static
        void glDeleteOcclusionQueriesNV(GLsizei n, object ids)
        {
            GCHandle h0 = GCHandle.Alloc(ids, GCHandleType.Pinned);
            try
            {
                glDeleteOcclusionQueriesNV_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glDeleteOcclusionQueriesNV(GLsizei n, GLuint[] ids)

        public static
        void glDeleteOcclusionQueriesNV(GLsizei n, GLuint[] ids)
        {
            GCHandle h0 = GCHandle.Alloc(ids, GCHandleType.Pinned);
            try
            {
                glDeleteOcclusionQueriesNV_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetOcclusionQueryivNV(GLuint id, GLenum pname, IntPtr parameters)

        public static
        void glGetOcclusionQueryivNV(GLuint id, GLenum pname, IntPtr parameters)
        {
            glGetOcclusionQueryivNV_(id, pname, parameters);
        }

        #endregion

        #region glGetOcclusionQueryivNV(GLuint id, GLenum pname, object parameters)

        public static
        void glGetOcclusionQueryivNV(GLuint id, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetOcclusionQueryivNV_(id, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetOcclusionQueryivNV(GLuint id, GLenum pname, GLint[] parameters)

        public static
        void glGetOcclusionQueryivNV(GLuint id, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetOcclusionQueryivNV_(id, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetOcclusionQueryuivNV(GLuint id, GLenum pname, IntPtr parameters)

        public static
        void glGetOcclusionQueryuivNV(GLuint id, GLenum pname, IntPtr parameters)
        {
            glGetOcclusionQueryuivNV_(id, pname, parameters);
        }

        #endregion

        #region glGetOcclusionQueryuivNV(GLuint id, GLenum pname, object parameters)

        public static
        void glGetOcclusionQueryuivNV(GLuint id, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetOcclusionQueryuivNV_(id, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetOcclusionQueryuivNV(GLuint id, GLenum pname, GLuint[] parameters)

        public static
        void glGetOcclusionQueryuivNV(GLuint id, GLenum pname, GLuint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetOcclusionQueryuivNV_(id, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glPointParameterivNV(GLenum pname, IntPtr parameters)

        public static
        void glPointParameterivNV(GLenum pname, IntPtr parameters)
        {
            glPointParameterivNV_(pname, parameters);
        }

        #endregion

        #region glPointParameterivNV(GLenum pname, object parameters)

        public static
        void glPointParameterivNV(GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glPointParameterivNV_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glPointParameterivNV(GLenum pname, GLint[] parameters)

        public static
        void glPointParameterivNV(GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glPointParameterivNV_(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glElementPointerAPPLE(GLenum type, IntPtr pointer)

        public static
        void glElementPointerAPPLE(GLenum type, IntPtr pointer)
        {
            glElementPointerAPPLE_(type, pointer);
        }

        #endregion

        #region glElementPointerAPPLE(GLenum type, object pointer)

        public static
        void glElementPointerAPPLE(GLenum type, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                glElementPointerAPPLE_(type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiDrawElementArrayAPPLE(GLenum mode, IntPtr first, IntPtr count, GLsizei primcount)

        public static
        void glMultiDrawElementArrayAPPLE(GLenum mode, IntPtr first, IntPtr count, GLsizei primcount)
        {
            glMultiDrawElementArrayAPPLE_(mode, first, count, primcount);
        }

        #endregion

        #region glMultiDrawElementArrayAPPLE(GLenum mode, IntPtr first, object count, GLsizei primcount)

        public static
        void glMultiDrawElementArrayAPPLE(GLenum mode, IntPtr first, object count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                glMultiDrawElementArrayAPPLE_(mode, first, h0.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiDrawElementArrayAPPLE(GLenum mode, IntPtr first, GLsizei[] count, GLsizei primcount)

        public static
        void glMultiDrawElementArrayAPPLE(GLenum mode, IntPtr first, GLsizei[] count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                glMultiDrawElementArrayAPPLE_(mode, first, h0.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiDrawElementArrayAPPLE(GLenum mode, object first, IntPtr count, GLsizei primcount)

        public static
        void glMultiDrawElementArrayAPPLE(GLenum mode, object first, IntPtr count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            try
            {
                glMultiDrawElementArrayAPPLE_(mode, h0.AddrOfPinnedObject(), count, primcount);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiDrawElementArrayAPPLE(GLenum mode, object first, object count, GLsizei primcount)

        public static
        void glMultiDrawElementArrayAPPLE(GLenum mode, object first, object count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                glMultiDrawElementArrayAPPLE_(mode, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glMultiDrawElementArrayAPPLE(GLenum mode, object first, GLsizei[] count, GLsizei primcount)

        public static
        void glMultiDrawElementArrayAPPLE(GLenum mode, object first, GLsizei[] count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                glMultiDrawElementArrayAPPLE_(mode, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glMultiDrawElementArrayAPPLE(GLenum mode, GLint[] first, IntPtr count, GLsizei primcount)

        public static
        void glMultiDrawElementArrayAPPLE(GLenum mode, GLint[] first, IntPtr count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            try
            {
                glMultiDrawElementArrayAPPLE_(mode, h0.AddrOfPinnedObject(), count, primcount);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiDrawElementArrayAPPLE(GLenum mode, GLint[] first, object count, GLsizei primcount)

        public static
        void glMultiDrawElementArrayAPPLE(GLenum mode, GLint[] first, object count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                glMultiDrawElementArrayAPPLE_(mode, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glMultiDrawElementArrayAPPLE(GLenum mode, GLint[] first, GLsizei[] count, GLsizei primcount)

        public static
        void glMultiDrawElementArrayAPPLE(GLenum mode, GLint[] first, GLsizei[] count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                glMultiDrawElementArrayAPPLE_(mode, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glMultiDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, IntPtr first, IntPtr count, GLsizei primcount)

        public static
        void glMultiDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, IntPtr first, IntPtr count, GLsizei primcount)
        {
            glMultiDrawRangeElementArrayAPPLE_(mode, start, end, first, count, primcount);
        }

        #endregion

        #region glMultiDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, IntPtr first, object count, GLsizei primcount)

        public static
        void glMultiDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, IntPtr first, object count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                glMultiDrawRangeElementArrayAPPLE_(mode, start, end, first, h0.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, IntPtr first, GLsizei[] count, GLsizei primcount)

        public static
        void glMultiDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, IntPtr first, GLsizei[] count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                glMultiDrawRangeElementArrayAPPLE_(mode, start, end, first, h0.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, object first, IntPtr count, GLsizei primcount)

        public static
        void glMultiDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, object first, IntPtr count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            try
            {
                glMultiDrawRangeElementArrayAPPLE_(mode, start, end, h0.AddrOfPinnedObject(), count, primcount);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, object first, object count, GLsizei primcount)

        public static
        void glMultiDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, object first, object count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                glMultiDrawRangeElementArrayAPPLE_(mode, start, end, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glMultiDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, object first, GLsizei[] count, GLsizei primcount)

        public static
        void glMultiDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, object first, GLsizei[] count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                glMultiDrawRangeElementArrayAPPLE_(mode, start, end, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glMultiDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, GLint[] first, IntPtr count, GLsizei primcount)

        public static
        void glMultiDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, GLint[] first, IntPtr count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            try
            {
                glMultiDrawRangeElementArrayAPPLE_(mode, start, end, h0.AddrOfPinnedObject(), count, primcount);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, GLint[] first, object count, GLsizei primcount)

        public static
        void glMultiDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, GLint[] first, object count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                glMultiDrawRangeElementArrayAPPLE_(mode, start, end, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glMultiDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, GLint[] first, GLsizei[] count, GLsizei primcount)

        public static
        void glMultiDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, GLint[] first, GLsizei[] count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                glMultiDrawRangeElementArrayAPPLE_(mode, start, end, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glGenFencesAPPLE(GLsizei n, IntPtr fences)

        public static
        void glGenFencesAPPLE(GLsizei n, IntPtr fences)
        {
            glGenFencesAPPLE_(n, fences);
        }

        #endregion

        #region glGenFencesAPPLE(GLsizei n, object fences)

        public static
        void glGenFencesAPPLE(GLsizei n, object fences)
        {
            GCHandle h0 = GCHandle.Alloc(fences, GCHandleType.Pinned);
            try
            {
                glGenFencesAPPLE_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGenFencesAPPLE(GLsizei n, GLuint[] fences)

        public static
        void glGenFencesAPPLE(GLsizei n, GLuint[] fences)
        {
            GCHandle h0 = GCHandle.Alloc(fences, GCHandleType.Pinned);
            try
            {
                glGenFencesAPPLE_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glDeleteFencesAPPLE(GLsizei n, IntPtr fences)

        public static
        void glDeleteFencesAPPLE(GLsizei n, IntPtr fences)
        {
            glDeleteFencesAPPLE_(n, fences);
        }

        #endregion

        #region glDeleteFencesAPPLE(GLsizei n, object fences)

        public static
        void glDeleteFencesAPPLE(GLsizei n, object fences)
        {
            GCHandle h0 = GCHandle.Alloc(fences, GCHandleType.Pinned);
            try
            {
                glDeleteFencesAPPLE_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glDeleteFencesAPPLE(GLsizei n, GLuint[] fences)

        public static
        void glDeleteFencesAPPLE(GLsizei n, GLuint[] fences)
        {
            GCHandle h0 = GCHandle.Alloc(fences, GCHandleType.Pinned);
            try
            {
                glDeleteFencesAPPLE_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glDeleteVertexArraysAPPLE(GLsizei n, IntPtr arrays)

        public static
        void glDeleteVertexArraysAPPLE(GLsizei n, IntPtr arrays)
        {
            glDeleteVertexArraysAPPLE_(n, arrays);
        }

        #endregion

        #region glDeleteVertexArraysAPPLE(GLsizei n, object arrays)

        public static
        void glDeleteVertexArraysAPPLE(GLsizei n, object arrays)
        {
            GCHandle h0 = GCHandle.Alloc(arrays, GCHandleType.Pinned);
            try
            {
                glDeleteVertexArraysAPPLE_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glDeleteVertexArraysAPPLE(GLsizei n, GLuint[] arrays)

        public static
        void glDeleteVertexArraysAPPLE(GLsizei n, GLuint[] arrays)
        {
            GCHandle h0 = GCHandle.Alloc(arrays, GCHandleType.Pinned);
            try
            {
                glDeleteVertexArraysAPPLE_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGenVertexArraysAPPLE(GLsizei n, IntPtr arrays)

        public static
        void glGenVertexArraysAPPLE(GLsizei n, IntPtr arrays)
        {
            glGenVertexArraysAPPLE_(n, arrays);
        }

        #endregion

        #region glGenVertexArraysAPPLE(GLsizei n, object arrays)

        public static
        void glGenVertexArraysAPPLE(GLsizei n, object arrays)
        {
            GCHandle h0 = GCHandle.Alloc(arrays, GCHandleType.Pinned);
            try
            {
                glGenVertexArraysAPPLE_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGenVertexArraysAPPLE(GLsizei n, GLuint[] arrays)

        public static
        void glGenVertexArraysAPPLE(GLsizei n, GLuint[] arrays)
        {
            GCHandle h0 = GCHandle.Alloc(arrays, GCHandleType.Pinned);
            try
            {
                glGenVertexArraysAPPLE_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexArrayRangeAPPLE(GLsizei length, IntPtr pointer)

        public static
        void glVertexArrayRangeAPPLE(GLsizei length, IntPtr pointer)
        {
            glVertexArrayRangeAPPLE_(length, pointer);
        }

        #endregion

        #region glVertexArrayRangeAPPLE(GLsizei length, object pointer)

        public static
        void glVertexArrayRangeAPPLE(GLsizei length, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                glVertexArrayRangeAPPLE_(length, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glFlushVertexArrayRangeAPPLE(GLsizei length, IntPtr pointer)

        public static
        void glFlushVertexArrayRangeAPPLE(GLsizei length, IntPtr pointer)
        {
            glFlushVertexArrayRangeAPPLE_(length, pointer);
        }

        #endregion

        #region glFlushVertexArrayRangeAPPLE(GLsizei length, object pointer)

        public static
        void glFlushVertexArrayRangeAPPLE(GLsizei length, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                glFlushVertexArrayRangeAPPLE_(length, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glDrawBuffersATI(GLsizei n, IntPtr bufs)

        public static
        void glDrawBuffersATI(GLsizei n, IntPtr bufs)
        {
            glDrawBuffersATI_(n, bufs);
        }

        #endregion

        #region glDrawBuffersATI(GLsizei n, object bufs)

        public static
        void glDrawBuffersATI(GLsizei n, object bufs)
        {
            GCHandle h0 = GCHandle.Alloc(bufs, GCHandleType.Pinned);
            try
            {
                glDrawBuffersATI_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glDrawBuffersATI(GLsizei n, GLenum[] bufs)

        public static
        void glDrawBuffersATI(GLsizei n, GLenum[] bufs)
        {
            GCHandle h0 = GCHandle.Alloc(bufs, GCHandleType.Pinned);
            try
            {
                glDrawBuffersATI_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glProgramNamedParameter4fNV(GLuint id, GLsizei len, IntPtr name, GLfloat x, GLfloat y, GLfloat z, GLfloat w)

        public static
        void glProgramNamedParameter4fNV(GLuint id, GLsizei len, IntPtr name, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
        {
            glProgramNamedParameter4fNV_(id, len, name, x, y, z, w);
        }

        #endregion

        #region glProgramNamedParameter4fNV(GLuint id, GLsizei len, object name, GLfloat x, GLfloat y, GLfloat z, GLfloat w)

        public static
        void glProgramNamedParameter4fNV(GLuint id, GLsizei len, object name, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            try
            {
                glProgramNamedParameter4fNV_(id, len, h0.AddrOfPinnedObject(), x, y, z, w);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glProgramNamedParameter4fNV(GLuint id, GLsizei len, GLubyte[] name, GLfloat x, GLfloat y, GLfloat z, GLfloat w)

        public static
        void glProgramNamedParameter4fNV(GLuint id, GLsizei len, GLubyte[] name, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            try
            {
                glProgramNamedParameter4fNV_(id, len, h0.AddrOfPinnedObject(), x, y, z, w);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glProgramNamedParameter4dNV(GLuint id, GLsizei len, IntPtr name, GLdouble x, GLdouble y, GLdouble z, GLdouble w)

        public static
        void glProgramNamedParameter4dNV(GLuint id, GLsizei len, IntPtr name, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
        {
            glProgramNamedParameter4dNV_(id, len, name, x, y, z, w);
        }

        #endregion

        #region glProgramNamedParameter4dNV(GLuint id, GLsizei len, object name, GLdouble x, GLdouble y, GLdouble z, GLdouble w)

        public static
        void glProgramNamedParameter4dNV(GLuint id, GLsizei len, object name, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            try
            {
                glProgramNamedParameter4dNV_(id, len, h0.AddrOfPinnedObject(), x, y, z, w);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glProgramNamedParameter4dNV(GLuint id, GLsizei len, GLubyte[] name, GLdouble x, GLdouble y, GLdouble z, GLdouble w)

        public static
        void glProgramNamedParameter4dNV(GLuint id, GLsizei len, GLubyte[] name, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            try
            {
                glProgramNamedParameter4dNV_(id, len, h0.AddrOfPinnedObject(), x, y, z, w);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glProgramNamedParameter4fvNV(GLuint id, GLsizei len, IntPtr name, IntPtr v)

        public static
        void glProgramNamedParameter4fvNV(GLuint id, GLsizei len, IntPtr name, IntPtr v)
        {
            glProgramNamedParameter4fvNV_(id, len, name, v);
        }

        #endregion

        #region glProgramNamedParameter4fvNV(GLuint id, GLsizei len, IntPtr name, object v)

        public static
        void glProgramNamedParameter4fvNV(GLuint id, GLsizei len, IntPtr name, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glProgramNamedParameter4fvNV_(id, len, name, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glProgramNamedParameter4fvNV(GLuint id, GLsizei len, IntPtr name, GLfloat[] v)

        public static
        void glProgramNamedParameter4fvNV(GLuint id, GLsizei len, IntPtr name, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glProgramNamedParameter4fvNV_(id, len, name, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glProgramNamedParameter4fvNV(GLuint id, GLsizei len, object name, IntPtr v)

        public static
        void glProgramNamedParameter4fvNV(GLuint id, GLsizei len, object name, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            try
            {
                glProgramNamedParameter4fvNV_(id, len, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glProgramNamedParameter4fvNV(GLuint id, GLsizei len, object name, object v)

        public static
        void glProgramNamedParameter4fvNV(GLuint id, GLsizei len, object name, object v)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glProgramNamedParameter4fvNV_(id, len, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glProgramNamedParameter4fvNV(GLuint id, GLsizei len, object name, GLfloat[] v)

        public static
        void glProgramNamedParameter4fvNV(GLuint id, GLsizei len, object name, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glProgramNamedParameter4fvNV_(id, len, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glProgramNamedParameter4fvNV(GLuint id, GLsizei len, GLubyte[] name, IntPtr v)

        public static
        void glProgramNamedParameter4fvNV(GLuint id, GLsizei len, GLubyte[] name, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            try
            {
                glProgramNamedParameter4fvNV_(id, len, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glProgramNamedParameter4fvNV(GLuint id, GLsizei len, GLubyte[] name, object v)

        public static
        void glProgramNamedParameter4fvNV(GLuint id, GLsizei len, GLubyte[] name, object v)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glProgramNamedParameter4fvNV_(id, len, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glProgramNamedParameter4fvNV(GLuint id, GLsizei len, GLubyte[] name, GLfloat[] v)

        public static
        void glProgramNamedParameter4fvNV(GLuint id, GLsizei len, GLubyte[] name, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glProgramNamedParameter4fvNV_(id, len, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glProgramNamedParameter4dvNV(GLuint id, GLsizei len, IntPtr name, IntPtr v)

        public static
        void glProgramNamedParameter4dvNV(GLuint id, GLsizei len, IntPtr name, IntPtr v)
        {
            glProgramNamedParameter4dvNV_(id, len, name, v);
        }

        #endregion

        #region glProgramNamedParameter4dvNV(GLuint id, GLsizei len, IntPtr name, object v)

        public static
        void glProgramNamedParameter4dvNV(GLuint id, GLsizei len, IntPtr name, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glProgramNamedParameter4dvNV_(id, len, name, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glProgramNamedParameter4dvNV(GLuint id, GLsizei len, IntPtr name, GLdouble[] v)

        public static
        void glProgramNamedParameter4dvNV(GLuint id, GLsizei len, IntPtr name, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glProgramNamedParameter4dvNV_(id, len, name, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glProgramNamedParameter4dvNV(GLuint id, GLsizei len, object name, IntPtr v)

        public static
        void glProgramNamedParameter4dvNV(GLuint id, GLsizei len, object name, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            try
            {
                glProgramNamedParameter4dvNV_(id, len, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glProgramNamedParameter4dvNV(GLuint id, GLsizei len, object name, object v)

        public static
        void glProgramNamedParameter4dvNV(GLuint id, GLsizei len, object name, object v)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glProgramNamedParameter4dvNV_(id, len, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glProgramNamedParameter4dvNV(GLuint id, GLsizei len, object name, GLdouble[] v)

        public static
        void glProgramNamedParameter4dvNV(GLuint id, GLsizei len, object name, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glProgramNamedParameter4dvNV_(id, len, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glProgramNamedParameter4dvNV(GLuint id, GLsizei len, GLubyte[] name, IntPtr v)

        public static
        void glProgramNamedParameter4dvNV(GLuint id, GLsizei len, GLubyte[] name, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            try
            {
                glProgramNamedParameter4dvNV_(id, len, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glProgramNamedParameter4dvNV(GLuint id, GLsizei len, GLubyte[] name, object v)

        public static
        void glProgramNamedParameter4dvNV(GLuint id, GLsizei len, GLubyte[] name, object v)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glProgramNamedParameter4dvNV_(id, len, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glProgramNamedParameter4dvNV(GLuint id, GLsizei len, GLubyte[] name, GLdouble[] v)

        public static
        void glProgramNamedParameter4dvNV(GLuint id, GLsizei len, GLubyte[] name, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glProgramNamedParameter4dvNV_(id, len, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glGetProgramNamedParameterfvNV(GLuint id, GLsizei len, IntPtr name, IntPtr parameters)

        public static
        void glGetProgramNamedParameterfvNV(GLuint id, GLsizei len, IntPtr name, IntPtr parameters)
        {
            glGetProgramNamedParameterfvNV_(id, len, name, parameters);
        }

        #endregion

        #region glGetProgramNamedParameterfvNV(GLuint id, GLsizei len, IntPtr name, object parameters)

        public static
        void glGetProgramNamedParameterfvNV(GLuint id, GLsizei len, IntPtr name, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetProgramNamedParameterfvNV_(id, len, name, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetProgramNamedParameterfvNV(GLuint id, GLsizei len, IntPtr name, GLfloat[] parameters)

        public static
        void glGetProgramNamedParameterfvNV(GLuint id, GLsizei len, IntPtr name, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetProgramNamedParameterfvNV_(id, len, name, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetProgramNamedParameterfvNV(GLuint id, GLsizei len, object name, IntPtr parameters)

        public static
        void glGetProgramNamedParameterfvNV(GLuint id, GLsizei len, object name, IntPtr parameters)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            try
            {
                glGetProgramNamedParameterfvNV_(id, len, h0.AddrOfPinnedObject(), parameters);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetProgramNamedParameterfvNV(GLuint id, GLsizei len, object name, object parameters)

        public static
        void glGetProgramNamedParameterfvNV(GLuint id, GLsizei len, object name, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetProgramNamedParameterfvNV_(id, len, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glGetProgramNamedParameterfvNV(GLuint id, GLsizei len, object name, GLfloat[] parameters)

        public static
        void glGetProgramNamedParameterfvNV(GLuint id, GLsizei len, object name, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetProgramNamedParameterfvNV_(id, len, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glGetProgramNamedParameterfvNV(GLuint id, GLsizei len, GLubyte[] name, IntPtr parameters)

        public static
        void glGetProgramNamedParameterfvNV(GLuint id, GLsizei len, GLubyte[] name, IntPtr parameters)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            try
            {
                glGetProgramNamedParameterfvNV_(id, len, h0.AddrOfPinnedObject(), parameters);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetProgramNamedParameterfvNV(GLuint id, GLsizei len, GLubyte[] name, object parameters)

        public static
        void glGetProgramNamedParameterfvNV(GLuint id, GLsizei len, GLubyte[] name, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetProgramNamedParameterfvNV_(id, len, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glGetProgramNamedParameterfvNV(GLuint id, GLsizei len, GLubyte[] name, GLfloat[] parameters)

        public static
        void glGetProgramNamedParameterfvNV(GLuint id, GLsizei len, GLubyte[] name, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetProgramNamedParameterfvNV_(id, len, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glGetProgramNamedParameterdvNV(GLuint id, GLsizei len, IntPtr name, IntPtr parameters)

        public static
        void glGetProgramNamedParameterdvNV(GLuint id, GLsizei len, IntPtr name, IntPtr parameters)
        {
            glGetProgramNamedParameterdvNV_(id, len, name, parameters);
        }

        #endregion

        #region glGetProgramNamedParameterdvNV(GLuint id, GLsizei len, IntPtr name, object parameters)

        public static
        void glGetProgramNamedParameterdvNV(GLuint id, GLsizei len, IntPtr name, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetProgramNamedParameterdvNV_(id, len, name, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetProgramNamedParameterdvNV(GLuint id, GLsizei len, IntPtr name, GLdouble[] parameters)

        public static
        void glGetProgramNamedParameterdvNV(GLuint id, GLsizei len, IntPtr name, GLdouble[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetProgramNamedParameterdvNV_(id, len, name, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetProgramNamedParameterdvNV(GLuint id, GLsizei len, object name, IntPtr parameters)

        public static
        void glGetProgramNamedParameterdvNV(GLuint id, GLsizei len, object name, IntPtr parameters)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            try
            {
                glGetProgramNamedParameterdvNV_(id, len, h0.AddrOfPinnedObject(), parameters);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetProgramNamedParameterdvNV(GLuint id, GLsizei len, object name, object parameters)

        public static
        void glGetProgramNamedParameterdvNV(GLuint id, GLsizei len, object name, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetProgramNamedParameterdvNV_(id, len, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glGetProgramNamedParameterdvNV(GLuint id, GLsizei len, object name, GLdouble[] parameters)

        public static
        void glGetProgramNamedParameterdvNV(GLuint id, GLsizei len, object name, GLdouble[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetProgramNamedParameterdvNV_(id, len, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glGetProgramNamedParameterdvNV(GLuint id, GLsizei len, GLubyte[] name, IntPtr parameters)

        public static
        void glGetProgramNamedParameterdvNV(GLuint id, GLsizei len, GLubyte[] name, IntPtr parameters)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            try
            {
                glGetProgramNamedParameterdvNV_(id, len, h0.AddrOfPinnedObject(), parameters);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetProgramNamedParameterdvNV(GLuint id, GLsizei len, GLubyte[] name, object parameters)

        public static
        void glGetProgramNamedParameterdvNV(GLuint id, GLsizei len, GLubyte[] name, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetProgramNamedParameterdvNV_(id, len, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glGetProgramNamedParameterdvNV(GLuint id, GLsizei len, GLubyte[] name, GLdouble[] parameters)

        public static
        void glGetProgramNamedParameterdvNV(GLuint id, GLsizei len, GLubyte[] name, GLdouble[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetProgramNamedParameterdvNV_(id, len, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region glVertex2hvNV(IntPtr v)

        public static
        void glVertex2hvNV(IntPtr v)
        {
            glVertex2hvNV_(v);
        }

        #endregion

        #region glVertex2hvNV(object v)

        public static
        void glVertex2hvNV(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertex2hvNV_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertex2hvNV(GLhalfNV[] v)

        public static
        void glVertex2hvNV(GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertex2hvNV_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertex3hvNV(IntPtr v)

        public static
        void glVertex3hvNV(IntPtr v)
        {
            glVertex3hvNV_(v);
        }

        #endregion

        #region glVertex3hvNV(object v)

        public static
        void glVertex3hvNV(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertex3hvNV_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertex3hvNV(GLhalfNV[] v)

        public static
        void glVertex3hvNV(GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertex3hvNV_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertex4hvNV(IntPtr v)

        public static
        void glVertex4hvNV(IntPtr v)
        {
            glVertex4hvNV_(v);
        }

        #endregion

        #region glVertex4hvNV(object v)

        public static
        void glVertex4hvNV(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertex4hvNV_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertex4hvNV(GLhalfNV[] v)

        public static
        void glVertex4hvNV(GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertex4hvNV_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glNormal3hvNV(IntPtr v)

        public static
        void glNormal3hvNV(IntPtr v)
        {
            glNormal3hvNV_(v);
        }

        #endregion

        #region glNormal3hvNV(object v)

        public static
        void glNormal3hvNV(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glNormal3hvNV_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glNormal3hvNV(GLhalfNV[] v)

        public static
        void glNormal3hvNV(GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glNormal3hvNV_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glColor3hvNV(IntPtr v)

        public static
        void glColor3hvNV(IntPtr v)
        {
            glColor3hvNV_(v);
        }

        #endregion

        #region glColor3hvNV(object v)

        public static
        void glColor3hvNV(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glColor3hvNV_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glColor3hvNV(GLhalfNV[] v)

        public static
        void glColor3hvNV(GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glColor3hvNV_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glColor4hvNV(IntPtr v)

        public static
        void glColor4hvNV(IntPtr v)
        {
            glColor4hvNV_(v);
        }

        #endregion

        #region glColor4hvNV(object v)

        public static
        void glColor4hvNV(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glColor4hvNV_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glColor4hvNV(GLhalfNV[] v)

        public static
        void glColor4hvNV(GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glColor4hvNV_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord1hvNV(IntPtr v)

        public static
        void glTexCoord1hvNV(IntPtr v)
        {
            glTexCoord1hvNV_(v);
        }

        #endregion

        #region glTexCoord1hvNV(object v)

        public static
        void glTexCoord1hvNV(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord1hvNV_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord1hvNV(GLhalfNV[] v)

        public static
        void glTexCoord1hvNV(GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord1hvNV_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2hvNV(IntPtr v)

        public static
        void glTexCoord2hvNV(IntPtr v)
        {
            glTexCoord2hvNV_(v);
        }

        #endregion

        #region glTexCoord2hvNV(object v)

        public static
        void glTexCoord2hvNV(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2hvNV_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord2hvNV(GLhalfNV[] v)

        public static
        void glTexCoord2hvNV(GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord2hvNV_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord3hvNV(IntPtr v)

        public static
        void glTexCoord3hvNV(IntPtr v)
        {
            glTexCoord3hvNV_(v);
        }

        #endregion

        #region glTexCoord3hvNV(object v)

        public static
        void glTexCoord3hvNV(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord3hvNV_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord3hvNV(GLhalfNV[] v)

        public static
        void glTexCoord3hvNV(GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord3hvNV_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord4hvNV(IntPtr v)

        public static
        void glTexCoord4hvNV(IntPtr v)
        {
            glTexCoord4hvNV_(v);
        }

        #endregion

        #region glTexCoord4hvNV(object v)

        public static
        void glTexCoord4hvNV(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord4hvNV_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glTexCoord4hvNV(GLhalfNV[] v)

        public static
        void glTexCoord4hvNV(GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glTexCoord4hvNV_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiTexCoord1hvNV(GLenum target, IntPtr v)

        public static
        void glMultiTexCoord1hvNV(GLenum target, IntPtr v)
        {
            glMultiTexCoord1hvNV_(target, v);
        }

        #endregion

        #region glMultiTexCoord1hvNV(GLenum target, object v)

        public static
        void glMultiTexCoord1hvNV(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glMultiTexCoord1hvNV_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiTexCoord1hvNV(GLenum target, GLhalfNV[] v)

        public static
        void glMultiTexCoord1hvNV(GLenum target, GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glMultiTexCoord1hvNV_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiTexCoord2hvNV(GLenum target, IntPtr v)

        public static
        void glMultiTexCoord2hvNV(GLenum target, IntPtr v)
        {
            glMultiTexCoord2hvNV_(target, v);
        }

        #endregion

        #region glMultiTexCoord2hvNV(GLenum target, object v)

        public static
        void glMultiTexCoord2hvNV(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glMultiTexCoord2hvNV_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiTexCoord2hvNV(GLenum target, GLhalfNV[] v)

        public static
        void glMultiTexCoord2hvNV(GLenum target, GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glMultiTexCoord2hvNV_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiTexCoord3hvNV(GLenum target, IntPtr v)

        public static
        void glMultiTexCoord3hvNV(GLenum target, IntPtr v)
        {
            glMultiTexCoord3hvNV_(target, v);
        }

        #endregion

        #region glMultiTexCoord3hvNV(GLenum target, object v)

        public static
        void glMultiTexCoord3hvNV(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glMultiTexCoord3hvNV_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiTexCoord3hvNV(GLenum target, GLhalfNV[] v)

        public static
        void glMultiTexCoord3hvNV(GLenum target, GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glMultiTexCoord3hvNV_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiTexCoord4hvNV(GLenum target, IntPtr v)

        public static
        void glMultiTexCoord4hvNV(GLenum target, IntPtr v)
        {
            glMultiTexCoord4hvNV_(target, v);
        }

        #endregion

        #region glMultiTexCoord4hvNV(GLenum target, object v)

        public static
        void glMultiTexCoord4hvNV(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glMultiTexCoord4hvNV_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glMultiTexCoord4hvNV(GLenum target, GLhalfNV[] v)

        public static
        void glMultiTexCoord4hvNV(GLenum target, GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glMultiTexCoord4hvNV_(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glFogCoordhvNV(IntPtr fog)

        public static
        void glFogCoordhvNV(IntPtr fog)
        {
            glFogCoordhvNV_(fog);
        }

        #endregion

        #region glFogCoordhvNV(object fog)

        public static
        void glFogCoordhvNV(object fog)
        {
            GCHandle h0 = GCHandle.Alloc(fog, GCHandleType.Pinned);
            try
            {
                glFogCoordhvNV_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glFogCoordhvNV(GLhalfNV[] fog)

        public static
        void glFogCoordhvNV(GLhalfNV[] fog)
        {
            GCHandle h0 = GCHandle.Alloc(fog, GCHandleType.Pinned);
            try
            {
                glFogCoordhvNV_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glSecondaryColor3hvNV(IntPtr v)

        public static
        void glSecondaryColor3hvNV(IntPtr v)
        {
            glSecondaryColor3hvNV_(v);
        }

        #endregion

        #region glSecondaryColor3hvNV(object v)

        public static
        void glSecondaryColor3hvNV(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glSecondaryColor3hvNV_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glSecondaryColor3hvNV(GLhalfNV[] v)

        public static
        void glSecondaryColor3hvNV(GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glSecondaryColor3hvNV_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexWeighthvNV(IntPtr weight)

        public static
        void glVertexWeighthvNV(IntPtr weight)
        {
            glVertexWeighthvNV_(weight);
        }

        #endregion

        #region glVertexWeighthvNV(object weight)

        public static
        void glVertexWeighthvNV(object weight)
        {
            GCHandle h0 = GCHandle.Alloc(weight, GCHandleType.Pinned);
            try
            {
                glVertexWeighthvNV_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexWeighthvNV(GLhalfNV[] weight)

        public static
        void glVertexWeighthvNV(GLhalfNV[] weight)
        {
            GCHandle h0 = GCHandle.Alloc(weight, GCHandleType.Pinned);
            try
            {
                glVertexWeighthvNV_(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib1hvNV(GLuint index, IntPtr v)

        public static
        void glVertexAttrib1hvNV(GLuint index, IntPtr v)
        {
            glVertexAttrib1hvNV_(index, v);
        }

        #endregion

        #region glVertexAttrib1hvNV(GLuint index, object v)

        public static
        void glVertexAttrib1hvNV(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib1hvNV_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib1hvNV(GLuint index, GLhalfNV[] v)

        public static
        void glVertexAttrib1hvNV(GLuint index, GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib1hvNV_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib2hvNV(GLuint index, IntPtr v)

        public static
        void glVertexAttrib2hvNV(GLuint index, IntPtr v)
        {
            glVertexAttrib2hvNV_(index, v);
        }

        #endregion

        #region glVertexAttrib2hvNV(GLuint index, object v)

        public static
        void glVertexAttrib2hvNV(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib2hvNV_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib2hvNV(GLuint index, GLhalfNV[] v)

        public static
        void glVertexAttrib2hvNV(GLuint index, GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib2hvNV_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib3hvNV(GLuint index, IntPtr v)

        public static
        void glVertexAttrib3hvNV(GLuint index, IntPtr v)
        {
            glVertexAttrib3hvNV_(index, v);
        }

        #endregion

        #region glVertexAttrib3hvNV(GLuint index, object v)

        public static
        void glVertexAttrib3hvNV(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib3hvNV_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib3hvNV(GLuint index, GLhalfNV[] v)

        public static
        void glVertexAttrib3hvNV(GLuint index, GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib3hvNV_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib4hvNV(GLuint index, IntPtr v)

        public static
        void glVertexAttrib4hvNV(GLuint index, IntPtr v)
        {
            glVertexAttrib4hvNV_(index, v);
        }

        #endregion

        #region glVertexAttrib4hvNV(GLuint index, object v)

        public static
        void glVertexAttrib4hvNV(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib4hvNV_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttrib4hvNV(GLuint index, GLhalfNV[] v)

        public static
        void glVertexAttrib4hvNV(GLuint index, GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttrib4hvNV_(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttribs1hvNV(GLuint index, GLsizei n, IntPtr v)

        public static
        void glVertexAttribs1hvNV(GLuint index, GLsizei n, IntPtr v)
        {
            glVertexAttribs1hvNV_(index, n, v);
        }

        #endregion

        #region glVertexAttribs1hvNV(GLuint index, GLsizei n, object v)

        public static
        void glVertexAttribs1hvNV(GLuint index, GLsizei n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttribs1hvNV_(index, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttribs1hvNV(GLuint index, GLsizei n, GLhalfNV[] v)

        public static
        void glVertexAttribs1hvNV(GLuint index, GLsizei n, GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttribs1hvNV_(index, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttribs2hvNV(GLuint index, GLsizei n, IntPtr v)

        public static
        void glVertexAttribs2hvNV(GLuint index, GLsizei n, IntPtr v)
        {
            glVertexAttribs2hvNV_(index, n, v);
        }

        #endregion

        #region glVertexAttribs2hvNV(GLuint index, GLsizei n, object v)

        public static
        void glVertexAttribs2hvNV(GLuint index, GLsizei n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttribs2hvNV_(index, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttribs2hvNV(GLuint index, GLsizei n, GLhalfNV[] v)

        public static
        void glVertexAttribs2hvNV(GLuint index, GLsizei n, GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttribs2hvNV_(index, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttribs3hvNV(GLuint index, GLsizei n, IntPtr v)

        public static
        void glVertexAttribs3hvNV(GLuint index, GLsizei n, IntPtr v)
        {
            glVertexAttribs3hvNV_(index, n, v);
        }

        #endregion

        #region glVertexAttribs3hvNV(GLuint index, GLsizei n, object v)

        public static
        void glVertexAttribs3hvNV(GLuint index, GLsizei n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttribs3hvNV_(index, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttribs3hvNV(GLuint index, GLsizei n, GLhalfNV[] v)

        public static
        void glVertexAttribs3hvNV(GLuint index, GLsizei n, GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttribs3hvNV_(index, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttribs4hvNV(GLuint index, GLsizei n, IntPtr v)

        public static
        void glVertexAttribs4hvNV(GLuint index, GLsizei n, IntPtr v)
        {
            glVertexAttribs4hvNV_(index, n, v);
        }

        #endregion

        #region glVertexAttribs4hvNV(GLuint index, GLsizei n, object v)

        public static
        void glVertexAttribs4hvNV(GLuint index, GLsizei n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttribs4hvNV_(index, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glVertexAttribs4hvNV(GLuint index, GLsizei n, GLhalfNV[] v)

        public static
        void glVertexAttribs4hvNV(GLuint index, GLsizei n, GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                glVertexAttribs4hvNV_(index, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glPixelDataRangeNV(GLenum target, GLsizei length, IntPtr pointer)

        public static
        void glPixelDataRangeNV(GLenum target, GLsizei length, IntPtr pointer)
        {
            glPixelDataRangeNV_(target, length, pointer);
        }

        #endregion

        #region glPixelDataRangeNV(GLenum target, GLsizei length, object pointer)

        public static
        void glPixelDataRangeNV(GLenum target, GLsizei length, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                glPixelDataRangeNV_(target, length, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetVertexAttribArrayObjectfvATI(GLuint index, GLenum pname, IntPtr parameters)

        public static
        void glGetVertexAttribArrayObjectfvATI(GLuint index, GLenum pname, IntPtr parameters)
        {
            glGetVertexAttribArrayObjectfvATI_(index, pname, parameters);
        }

        #endregion

        #region glGetVertexAttribArrayObjectfvATI(GLuint index, GLenum pname, object parameters)

        public static
        void glGetVertexAttribArrayObjectfvATI(GLuint index, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetVertexAttribArrayObjectfvATI_(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetVertexAttribArrayObjectfvATI(GLuint index, GLenum pname, GLfloat[] parameters)

        public static
        void glGetVertexAttribArrayObjectfvATI(GLuint index, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetVertexAttribArrayObjectfvATI_(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetVertexAttribArrayObjectivATI(GLuint index, GLenum pname, IntPtr parameters)

        public static
        void glGetVertexAttribArrayObjectivATI(GLuint index, GLenum pname, IntPtr parameters)
        {
            glGetVertexAttribArrayObjectivATI_(index, pname, parameters);
        }

        #endregion

        #region glGetVertexAttribArrayObjectivATI(GLuint index, GLenum pname, object parameters)

        public static
        void glGetVertexAttribArrayObjectivATI(GLuint index, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetVertexAttribArrayObjectivATI_(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetVertexAttribArrayObjectivATI(GLuint index, GLenum pname, GLint[] parameters)

        public static
        void glGetVertexAttribArrayObjectivATI(GLuint index, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetVertexAttribArrayObjectivATI_(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glDeleteRenderbuffersEXT(GLsizei n, IntPtr renderbuffers)

        public static
        void glDeleteRenderbuffersEXT(GLsizei n, IntPtr renderbuffers)
        {
            glDeleteRenderbuffersEXT_(n, renderbuffers);
        }

        #endregion

        #region glDeleteRenderbuffersEXT(GLsizei n, object renderbuffers)

        public static
        void glDeleteRenderbuffersEXT(GLsizei n, object renderbuffers)
        {
            GCHandle h0 = GCHandle.Alloc(renderbuffers, GCHandleType.Pinned);
            try
            {
                glDeleteRenderbuffersEXT_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glDeleteRenderbuffersEXT(GLsizei n, GLuint[] renderbuffers)

        public static
        void glDeleteRenderbuffersEXT(GLsizei n, GLuint[] renderbuffers)
        {
            GCHandle h0 = GCHandle.Alloc(renderbuffers, GCHandleType.Pinned);
            try
            {
                glDeleteRenderbuffersEXT_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGenRenderbuffersEXT(GLsizei n, IntPtr renderbuffers)

        public static
        void glGenRenderbuffersEXT(GLsizei n, IntPtr renderbuffers)
        {
            glGenRenderbuffersEXT_(n, renderbuffers);
        }

        #endregion

        #region glGenRenderbuffersEXT(GLsizei n, object renderbuffers)

        public static
        void glGenRenderbuffersEXT(GLsizei n, object renderbuffers)
        {
            GCHandle h0 = GCHandle.Alloc(renderbuffers, GCHandleType.Pinned);
            try
            {
                glGenRenderbuffersEXT_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGenRenderbuffersEXT(GLsizei n, GLuint[] renderbuffers)

        public static
        void glGenRenderbuffersEXT(GLsizei n, GLuint[] renderbuffers)
        {
            GCHandle h0 = GCHandle.Alloc(renderbuffers, GCHandleType.Pinned);
            try
            {
                glGenRenderbuffersEXT_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetRenderbufferParameterivEXT(GLenum target, GLenum pname, IntPtr parameters)

        public static
        void glGetRenderbufferParameterivEXT(GLenum target, GLenum pname, IntPtr parameters)
        {
            glGetRenderbufferParameterivEXT_(target, pname, parameters);
        }

        #endregion

        #region glGetRenderbufferParameterivEXT(GLenum target, GLenum pname, object parameters)

        public static
        void glGetRenderbufferParameterivEXT(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetRenderbufferParameterivEXT_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetRenderbufferParameterivEXT(GLenum target, GLenum pname, GLint[] parameters)

        public static
        void glGetRenderbufferParameterivEXT(GLenum target, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetRenderbufferParameterivEXT_(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glDeleteFramebuffersEXT(GLsizei n, IntPtr framebuffers)

        public static
        void glDeleteFramebuffersEXT(GLsizei n, IntPtr framebuffers)
        {
            glDeleteFramebuffersEXT_(n, framebuffers);
        }

        #endregion

        #region glDeleteFramebuffersEXT(GLsizei n, object framebuffers)

        public static
        void glDeleteFramebuffersEXT(GLsizei n, object framebuffers)
        {
            GCHandle h0 = GCHandle.Alloc(framebuffers, GCHandleType.Pinned);
            try
            {
                glDeleteFramebuffersEXT_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glDeleteFramebuffersEXT(GLsizei n, GLuint[] framebuffers)

        public static
        void glDeleteFramebuffersEXT(GLsizei n, GLuint[] framebuffers)
        {
            GCHandle h0 = GCHandle.Alloc(framebuffers, GCHandleType.Pinned);
            try
            {
                glDeleteFramebuffersEXT_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGenFramebuffersEXT(GLsizei n, IntPtr framebuffers)

        public static
        void glGenFramebuffersEXT(GLsizei n, IntPtr framebuffers)
        {
            glGenFramebuffersEXT_(n, framebuffers);
        }

        #endregion

        #region glGenFramebuffersEXT(GLsizei n, object framebuffers)

        public static
        void glGenFramebuffersEXT(GLsizei n, object framebuffers)
        {
            GCHandle h0 = GCHandle.Alloc(framebuffers, GCHandleType.Pinned);
            try
            {
                glGenFramebuffersEXT_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGenFramebuffersEXT(GLsizei n, GLuint[] framebuffers)

        public static
        void glGenFramebuffersEXT(GLsizei n, GLuint[] framebuffers)
        {
            GCHandle h0 = GCHandle.Alloc(framebuffers, GCHandleType.Pinned);
            try
            {
                glGenFramebuffersEXT_(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetFramebufferAttachmentParameterivEXT(GLenum target, GLenum attachment, GLenum pname, IntPtr parameters)

        public static
        void glGetFramebufferAttachmentParameterivEXT(GLenum target, GLenum attachment, GLenum pname, IntPtr parameters)
        {
            glGetFramebufferAttachmentParameterivEXT_(target, attachment, pname, parameters);
        }

        #endregion

        #region glGetFramebufferAttachmentParameterivEXT(GLenum target, GLenum attachment, GLenum pname, object parameters)

        public static
        void glGetFramebufferAttachmentParameterivEXT(GLenum target, GLenum attachment, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetFramebufferAttachmentParameterivEXT_(target, attachment, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetFramebufferAttachmentParameterivEXT(GLenum target, GLenum attachment, GLenum pname, GLint[] parameters)

        public static
        void glGetFramebufferAttachmentParameterivEXT(GLenum target, GLenum attachment, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetFramebufferAttachmentParameterivEXT_(target, attachment, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glStringMarkerGREMEDY(GLsizei len, IntPtr @string)

        public static
        void glStringMarkerGREMEDY(GLsizei len, IntPtr @string)
        {
            glStringMarkerGREMEDY_(len, @string);
        }

        #endregion

        #region glStringMarkerGREMEDY(GLsizei len, object @string)

        public static
        void glStringMarkerGREMEDY(GLsizei len, object @string)
        {
            GCHandle h0 = GCHandle.Alloc(@string, GCHandleType.Pinned);
            try
            {
                glStringMarkerGREMEDY_(len, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetQueryObjecti64vEXT(GLuint id, GLenum pname, IntPtr parameters)

        public static
        void glGetQueryObjecti64vEXT(GLuint id, GLenum pname, IntPtr parameters)
        {
            glGetQueryObjecti64vEXT_(id, pname, parameters);
        }

        #endregion

        #region glGetQueryObjecti64vEXT(GLuint id, GLenum pname, object parameters)

        public static
        void glGetQueryObjecti64vEXT(GLuint id, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetQueryObjecti64vEXT_(id, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetQueryObjecti64vEXT(GLuint id, GLenum pname, GLint64[] parameters)

        public static
        void glGetQueryObjecti64vEXT(GLuint id, GLenum pname, GLint64[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetQueryObjecti64vEXT_(id, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetQueryObjectui64vEXT(GLuint id, GLenum pname, IntPtr parameters)

        public static
        void glGetQueryObjectui64vEXT(GLuint id, GLenum pname, IntPtr parameters)
        {
            glGetQueryObjectui64vEXT_(id, pname, parameters);
        }

        #endregion

        #region glGetQueryObjectui64vEXT(GLuint id, GLenum pname, object parameters)

        public static
        void glGetQueryObjectui64vEXT(GLuint id, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetQueryObjectui64vEXT_(id, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glGetQueryObjectui64vEXT(GLuint id, GLenum pname, GLuint64[] parameters)

        public static
        void glGetQueryObjectui64vEXT(GLuint id, GLenum pname, GLuint64[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glGetQueryObjectui64vEXT_(id, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glProgramEnvParameters4fvEXT(GLenum target, GLuint index, GLsizei count, IntPtr parameters)

        public static
        void glProgramEnvParameters4fvEXT(GLenum target, GLuint index, GLsizei count, IntPtr parameters)
        {
            glProgramEnvParameters4fvEXT_(target, index, count, parameters);
        }

        #endregion

        #region glProgramEnvParameters4fvEXT(GLenum target, GLuint index, GLsizei count, object parameters)

        public static
        void glProgramEnvParameters4fvEXT(GLenum target, GLuint index, GLsizei count, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glProgramEnvParameters4fvEXT_(target, index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glProgramEnvParameters4fvEXT(GLenum target, GLuint index, GLsizei count, GLfloat[] parameters)

        public static
        void glProgramEnvParameters4fvEXT(GLenum target, GLuint index, GLsizei count, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glProgramEnvParameters4fvEXT_(target, index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glProgramLocalParameters4fvEXT(GLenum target, GLuint index, GLsizei count, IntPtr parameters)

        public static
        void glProgramLocalParameters4fvEXT(GLenum target, GLuint index, GLsizei count, IntPtr parameters)
        {
            glProgramLocalParameters4fvEXT_(target, index, count, parameters);
        }

        #endregion

        #region glProgramLocalParameters4fvEXT(GLenum target, GLuint index, GLsizei count, object parameters)

        public static
        void glProgramLocalParameters4fvEXT(GLenum target, GLuint index, GLsizei count, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glProgramLocalParameters4fvEXT_(target, index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region glProgramLocalParameters4fvEXT(GLenum target, GLuint index, GLsizei count, GLfloat[] parameters)

        public static
        void glProgramLocalParameters4fvEXT(GLenum target, GLuint index, GLsizei count, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                glProgramLocalParameters4fvEXT_(target, index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #endregion Wrappers

        #region static Constructor

        static Gl()
        {
            if (Environment.OSVersion.Platform == PlatformID.Win32NT && Environment.OSVersion.Version.Major < 6 || Environment.OSVersion.Platform == PlatformID.Win32Windows)
            {
                #region Older Windows Core
                Gl.glNewList = new Gl.Delegates.glNewList(Imports.glNewList);
                Gl.glEndList = new Gl.Delegates.glEndList(Imports.glEndList);
                Gl.glCallList = new Gl.Delegates.glCallList(Imports.glCallList);
                Gl.glCallLists_ = new Gl.Delegates.glCallLists_(Imports.glCallLists_);
                Gl.glDeleteLists = new Gl.Delegates.glDeleteLists(Imports.glDeleteLists);
                Gl.glGenLists = new Gl.Delegates.glGenLists(Imports.glGenLists);
                Gl.glListBase = new Gl.Delegates.glListBase(Imports.glListBase);
                Gl.glBegin = new Gl.Delegates.glBegin(Imports.glBegin);
                Gl.glBitmap_ = new Gl.Delegates.glBitmap_(Imports.glBitmap_);
                Gl.glColor3b = new Gl.Delegates.glColor3b(Imports.glColor3b);
                Gl.glColor3bv_ = new Gl.Delegates.glColor3bv_(Imports.glColor3bv_);
                Gl.glColor3d = new Gl.Delegates.glColor3d(Imports.glColor3d);
                Gl.glColor3dv_ = new Gl.Delegates.glColor3dv_(Imports.glColor3dv_);
                Gl.glColor3f = new Gl.Delegates.glColor3f(Imports.glColor3f);
                Gl.glColor3fv_ = new Gl.Delegates.glColor3fv_(Imports.glColor3fv_);
                Gl.glColor3i = new Gl.Delegates.glColor3i(Imports.glColor3i);
                Gl.glColor3iv_ = new Gl.Delegates.glColor3iv_(Imports.glColor3iv_);
                Gl.glColor3s = new Gl.Delegates.glColor3s(Imports.glColor3s);
                Gl.glColor3sv_ = new Gl.Delegates.glColor3sv_(Imports.glColor3sv_);
                Gl.glColor3ub = new Gl.Delegates.glColor3ub(Imports.glColor3ub);
                Gl.glColor3ubv_ = new Gl.Delegates.glColor3ubv_(Imports.glColor3ubv_);
                Gl.glColor3ui = new Gl.Delegates.glColor3ui(Imports.glColor3ui);
                Gl.glColor3uiv_ = new Gl.Delegates.glColor3uiv_(Imports.glColor3uiv_);
                Gl.glColor3us = new Gl.Delegates.glColor3us(Imports.glColor3us);
                Gl.glColor3usv_ = new Gl.Delegates.glColor3usv_(Imports.glColor3usv_);
                Gl.glColor4b = new Gl.Delegates.glColor4b(Imports.glColor4b);
                Gl.glColor4bv_ = new Gl.Delegates.glColor4bv_(Imports.glColor4bv_);
                Gl.glColor4d = new Gl.Delegates.glColor4d(Imports.glColor4d);
                Gl.glColor4dv_ = new Gl.Delegates.glColor4dv_(Imports.glColor4dv_);
                Gl.glColor4f = new Gl.Delegates.glColor4f(Imports.glColor4f);
                Gl.glColor4fv_ = new Gl.Delegates.glColor4fv_(Imports.glColor4fv_);
                Gl.glColor4i = new Gl.Delegates.glColor4i(Imports.glColor4i);
                Gl.glColor4iv_ = new Gl.Delegates.glColor4iv_(Imports.glColor4iv_);
                Gl.glColor4s = new Gl.Delegates.glColor4s(Imports.glColor4s);
                Gl.glColor4sv_ = new Gl.Delegates.glColor4sv_(Imports.glColor4sv_);
                Gl.glColor4ub = new Gl.Delegates.glColor4ub(Imports.glColor4ub);
                Gl.glColor4ubv_ = new Gl.Delegates.glColor4ubv_(Imports.glColor4ubv_);
                Gl.glColor4ui = new Gl.Delegates.glColor4ui(Imports.glColor4ui);
                Gl.glColor4uiv_ = new Gl.Delegates.glColor4uiv_(Imports.glColor4uiv_);
                Gl.glColor4us = new Gl.Delegates.glColor4us(Imports.glColor4us);
                Gl.glColor4usv_ = new Gl.Delegates.glColor4usv_(Imports.glColor4usv_);
                Gl.glEdgeFlag = new Gl.Delegates.glEdgeFlag(Imports.glEdgeFlag);
                Gl.glEdgeFlagv_ = new Gl.Delegates.glEdgeFlagv_(Imports.glEdgeFlagv_);
                Gl.glEnd = new Gl.Delegates.glEnd(Imports.glEnd);
                Gl.glIndexd = new Gl.Delegates.glIndexd(Imports.glIndexd);
                Gl.glIndexdv_ = new Gl.Delegates.glIndexdv_(Imports.glIndexdv_);
                Gl.glIndexf = new Gl.Delegates.glIndexf(Imports.glIndexf);
                Gl.glIndexfv_ = new Gl.Delegates.glIndexfv_(Imports.glIndexfv_);
                Gl.glIndexi = new Gl.Delegates.glIndexi(Imports.glIndexi);
                Gl.glIndexiv_ = new Gl.Delegates.glIndexiv_(Imports.glIndexiv_);
                Gl.glIndexs = new Gl.Delegates.glIndexs(Imports.glIndexs);
                Gl.glIndexsv_ = new Gl.Delegates.glIndexsv_(Imports.glIndexsv_);
                Gl.glNormal3b = new Gl.Delegates.glNormal3b(Imports.glNormal3b);
                Gl.glNormal3bv_ = new Gl.Delegates.glNormal3bv_(Imports.glNormal3bv_);
                Gl.glNormal3d = new Gl.Delegates.glNormal3d(Imports.glNormal3d);
                Gl.glNormal3dv_ = new Gl.Delegates.glNormal3dv_(Imports.glNormal3dv_);
                Gl.glNormal3f = new Gl.Delegates.glNormal3f(Imports.glNormal3f);
                Gl.glNormal3fv_ = new Gl.Delegates.glNormal3fv_(Imports.glNormal3fv_);
                Gl.glNormal3i = new Gl.Delegates.glNormal3i(Imports.glNormal3i);
                Gl.glNormal3iv_ = new Gl.Delegates.glNormal3iv_(Imports.glNormal3iv_);
                Gl.glNormal3s = new Gl.Delegates.glNormal3s(Imports.glNormal3s);
                Gl.glNormal3sv_ = new Gl.Delegates.glNormal3sv_(Imports.glNormal3sv_);
                Gl.glRasterPos2d = new Gl.Delegates.glRasterPos2d(Imports.glRasterPos2d);
                Gl.glRasterPos2dv_ = new Gl.Delegates.glRasterPos2dv_(Imports.glRasterPos2dv_);
                Gl.glRasterPos2f = new Gl.Delegates.glRasterPos2f(Imports.glRasterPos2f);
                Gl.glRasterPos2fv_ = new Gl.Delegates.glRasterPos2fv_(Imports.glRasterPos2fv_);
                Gl.glRasterPos2i = new Gl.Delegates.glRasterPos2i(Imports.glRasterPos2i);
                Gl.glRasterPos2iv_ = new Gl.Delegates.glRasterPos2iv_(Imports.glRasterPos2iv_);
                Gl.glRasterPos2s = new Gl.Delegates.glRasterPos2s(Imports.glRasterPos2s);
                Gl.glRasterPos2sv_ = new Gl.Delegates.glRasterPos2sv_(Imports.glRasterPos2sv_);
                Gl.glRasterPos3d = new Gl.Delegates.glRasterPos3d(Imports.glRasterPos3d);
                Gl.glRasterPos3dv_ = new Gl.Delegates.glRasterPos3dv_(Imports.glRasterPos3dv_);
                Gl.glRasterPos3f = new Gl.Delegates.glRasterPos3f(Imports.glRasterPos3f);
                Gl.glRasterPos3fv_ = new Gl.Delegates.glRasterPos3fv_(Imports.glRasterPos3fv_);
                Gl.glRasterPos3i = new Gl.Delegates.glRasterPos3i(Imports.glRasterPos3i);
                Gl.glRasterPos3iv_ = new Gl.Delegates.glRasterPos3iv_(Imports.glRasterPos3iv_);
                Gl.glRasterPos3s = new Gl.Delegates.glRasterPos3s(Imports.glRasterPos3s);
                Gl.glRasterPos3sv_ = new Gl.Delegates.glRasterPos3sv_(Imports.glRasterPos3sv_);
                Gl.glRasterPos4d = new Gl.Delegates.glRasterPos4d(Imports.glRasterPos4d);
                Gl.glRasterPos4dv_ = new Gl.Delegates.glRasterPos4dv_(Imports.glRasterPos4dv_);
                Gl.glRasterPos4f = new Gl.Delegates.glRasterPos4f(Imports.glRasterPos4f);
                Gl.glRasterPos4fv_ = new Gl.Delegates.glRasterPos4fv_(Imports.glRasterPos4fv_);
                Gl.glRasterPos4i = new Gl.Delegates.glRasterPos4i(Imports.glRasterPos4i);
                Gl.glRasterPos4iv_ = new Gl.Delegates.glRasterPos4iv_(Imports.glRasterPos4iv_);
                Gl.glRasterPos4s = new Gl.Delegates.glRasterPos4s(Imports.glRasterPos4s);
                Gl.glRasterPos4sv_ = new Gl.Delegates.glRasterPos4sv_(Imports.glRasterPos4sv_);
                Gl.glRectd = new Gl.Delegates.glRectd(Imports.glRectd);
                Gl.glRectdv_ = new Gl.Delegates.glRectdv_(Imports.glRectdv_);
                Gl.glRectf = new Gl.Delegates.glRectf(Imports.glRectf);
                Gl.glRectfv_ = new Gl.Delegates.glRectfv_(Imports.glRectfv_);
                Gl.glRecti = new Gl.Delegates.glRecti(Imports.glRecti);
                Gl.glRectiv_ = new Gl.Delegates.glRectiv_(Imports.glRectiv_);
                Gl.glRects = new Gl.Delegates.glRects(Imports.glRects);
                Gl.glRectsv_ = new Gl.Delegates.glRectsv_(Imports.glRectsv_);
                Gl.glTexCoord1d = new Gl.Delegates.glTexCoord1d(Imports.glTexCoord1d);
                Gl.glTexCoord1dv_ = new Gl.Delegates.glTexCoord1dv_(Imports.glTexCoord1dv_);
                Gl.glTexCoord1f = new Gl.Delegates.glTexCoord1f(Imports.glTexCoord1f);
                Gl.glTexCoord1fv_ = new Gl.Delegates.glTexCoord1fv_(Imports.glTexCoord1fv_);
                Gl.glTexCoord1i = new Gl.Delegates.glTexCoord1i(Imports.glTexCoord1i);
                Gl.glTexCoord1iv_ = new Gl.Delegates.glTexCoord1iv_(Imports.glTexCoord1iv_);
                Gl.glTexCoord1s = new Gl.Delegates.glTexCoord1s(Imports.glTexCoord1s);
                Gl.glTexCoord1sv_ = new Gl.Delegates.glTexCoord1sv_(Imports.glTexCoord1sv_);
                Gl.glTexCoord2d = new Gl.Delegates.glTexCoord2d(Imports.glTexCoord2d);
                Gl.glTexCoord2dv_ = new Gl.Delegates.glTexCoord2dv_(Imports.glTexCoord2dv_);
                Gl.glTexCoord2f = new Gl.Delegates.glTexCoord2f(Imports.glTexCoord2f);
                Gl.glTexCoord2fv_ = new Gl.Delegates.glTexCoord2fv_(Imports.glTexCoord2fv_);
                Gl.glTexCoord2i = new Gl.Delegates.glTexCoord2i(Imports.glTexCoord2i);
                Gl.glTexCoord2iv_ = new Gl.Delegates.glTexCoord2iv_(Imports.glTexCoord2iv_);
                Gl.glTexCoord2s = new Gl.Delegates.glTexCoord2s(Imports.glTexCoord2s);
                Gl.glTexCoord2sv_ = new Gl.Delegates.glTexCoord2sv_(Imports.glTexCoord2sv_);
                Gl.glTexCoord3d = new Gl.Delegates.glTexCoord3d(Imports.glTexCoord3d);
                Gl.glTexCoord3dv_ = new Gl.Delegates.glTexCoord3dv_(Imports.glTexCoord3dv_);
                Gl.glTexCoord3f = new Gl.Delegates.glTexCoord3f(Imports.glTexCoord3f);
                Gl.glTexCoord3fv_ = new Gl.Delegates.glTexCoord3fv_(Imports.glTexCoord3fv_);
                Gl.glTexCoord3i = new Gl.Delegates.glTexCoord3i(Imports.glTexCoord3i);
                Gl.glTexCoord3iv_ = new Gl.Delegates.glTexCoord3iv_(Imports.glTexCoord3iv_);
                Gl.glTexCoord3s = new Gl.Delegates.glTexCoord3s(Imports.glTexCoord3s);
                Gl.glTexCoord3sv_ = new Gl.Delegates.glTexCoord3sv_(Imports.glTexCoord3sv_);
                Gl.glTexCoord4d = new Gl.Delegates.glTexCoord4d(Imports.glTexCoord4d);
                Gl.glTexCoord4dv_ = new Gl.Delegates.glTexCoord4dv_(Imports.glTexCoord4dv_);
                Gl.glTexCoord4f = new Gl.Delegates.glTexCoord4f(Imports.glTexCoord4f);
                Gl.glTexCoord4fv_ = new Gl.Delegates.glTexCoord4fv_(Imports.glTexCoord4fv_);
                Gl.glTexCoord4i = new Gl.Delegates.glTexCoord4i(Imports.glTexCoord4i);
                Gl.glTexCoord4iv_ = new Gl.Delegates.glTexCoord4iv_(Imports.glTexCoord4iv_);
                Gl.glTexCoord4s = new Gl.Delegates.glTexCoord4s(Imports.glTexCoord4s);
                Gl.glTexCoord4sv_ = new Gl.Delegates.glTexCoord4sv_(Imports.glTexCoord4sv_);
                Gl.glVertex2d = new Gl.Delegates.glVertex2d(Imports.glVertex2d);
                Gl.glVertex2dv_ = new Gl.Delegates.glVertex2dv_(Imports.glVertex2dv_);
                Gl.glVertex2f = new Gl.Delegates.glVertex2f(Imports.glVertex2f);
                Gl.glVertex2fv_ = new Gl.Delegates.glVertex2fv_(Imports.glVertex2fv_);
                Gl.glVertex2i = new Gl.Delegates.glVertex2i(Imports.glVertex2i);
                Gl.glVertex2iv_ = new Gl.Delegates.glVertex2iv_(Imports.glVertex2iv_);
                Gl.glVertex2s = new Gl.Delegates.glVertex2s(Imports.glVertex2s);
                Gl.glVertex2sv_ = new Gl.Delegates.glVertex2sv_(Imports.glVertex2sv_);
                Gl.glVertex3d = new Gl.Delegates.glVertex3d(Imports.glVertex3d);
                Gl.glVertex3dv_ = new Gl.Delegates.glVertex3dv_(Imports.glVertex3dv_);
                Gl.glVertex3f = new Gl.Delegates.glVertex3f(Imports.glVertex3f);
                Gl.glVertex3fv_ = new Gl.Delegates.glVertex3fv_(Imports.glVertex3fv_);
                Gl.glVertex3i = new Gl.Delegates.glVertex3i(Imports.glVertex3i);
                Gl.glVertex3iv_ = new Gl.Delegates.glVertex3iv_(Imports.glVertex3iv_);
                Gl.glVertex3s = new Gl.Delegates.glVertex3s(Imports.glVertex3s);
                Gl.glVertex3sv_ = new Gl.Delegates.glVertex3sv_(Imports.glVertex3sv_);
                Gl.glVertex4d = new Gl.Delegates.glVertex4d(Imports.glVertex4d);
                Gl.glVertex4dv_ = new Gl.Delegates.glVertex4dv_(Imports.glVertex4dv_);
                Gl.glVertex4f = new Gl.Delegates.glVertex4f(Imports.glVertex4f);
                Gl.glVertex4fv_ = new Gl.Delegates.glVertex4fv_(Imports.glVertex4fv_);
                Gl.glVertex4i = new Gl.Delegates.glVertex4i(Imports.glVertex4i);
                Gl.glVertex4iv_ = new Gl.Delegates.glVertex4iv_(Imports.glVertex4iv_);
                Gl.glVertex4s = new Gl.Delegates.glVertex4s(Imports.glVertex4s);
                Gl.glVertex4sv_ = new Gl.Delegates.glVertex4sv_(Imports.glVertex4sv_);
                Gl.glClipPlane_ = new Gl.Delegates.glClipPlane_(Imports.glClipPlane_);
                Gl.glColorMaterial = new Gl.Delegates.glColorMaterial(Imports.glColorMaterial);
                Gl.glCullFace = new Gl.Delegates.glCullFace(Imports.glCullFace);
                Gl.glFogf = new Gl.Delegates.glFogf(Imports.glFogf);
                Gl.glFogfv_ = new Gl.Delegates.glFogfv_(Imports.glFogfv_);
                Gl.glFogi = new Gl.Delegates.glFogi(Imports.glFogi);
                Gl.glFogiv_ = new Gl.Delegates.glFogiv_(Imports.glFogiv_);
                Gl.glFrontFace = new Gl.Delegates.glFrontFace(Imports.glFrontFace);
                Gl.glHint = new Gl.Delegates.glHint(Imports.glHint);
                Gl.glLightf = new Gl.Delegates.glLightf(Imports.glLightf);
                Gl.glLightfv_ = new Gl.Delegates.glLightfv_(Imports.glLightfv_);
                Gl.glLighti = new Gl.Delegates.glLighti(Imports.glLighti);
                Gl.glLightiv_ = new Gl.Delegates.glLightiv_(Imports.glLightiv_);
                Gl.glLightModelf = new Gl.Delegates.glLightModelf(Imports.glLightModelf);
                Gl.glLightModelfv_ = new Gl.Delegates.glLightModelfv_(Imports.glLightModelfv_);
                Gl.glLightModeli = new Gl.Delegates.glLightModeli(Imports.glLightModeli);
                Gl.glLightModeliv_ = new Gl.Delegates.glLightModeliv_(Imports.glLightModeliv_);
                Gl.glLineStipple_ = new Gl.Delegates.glLineStipple_(Imports.glLineStipple_);
                Gl.glLineWidth = new Gl.Delegates.glLineWidth(Imports.glLineWidth);
                Gl.glMaterialf = new Gl.Delegates.glMaterialf(Imports.glMaterialf);
                Gl.glMaterialfv_ = new Gl.Delegates.glMaterialfv_(Imports.glMaterialfv_);
                Gl.glMateriali = new Gl.Delegates.glMateriali(Imports.glMateriali);
                Gl.glMaterialiv_ = new Gl.Delegates.glMaterialiv_(Imports.glMaterialiv_);
                Gl.glPointSize = new Gl.Delegates.glPointSize(Imports.glPointSize);
                Gl.glPolygonMode = new Gl.Delegates.glPolygonMode(Imports.glPolygonMode);
                Gl.glPolygonStipple_ = new Gl.Delegates.glPolygonStipple_(Imports.glPolygonStipple_);
                Gl.glScissor = new Gl.Delegates.glScissor(Imports.glScissor);
                Gl.glShadeModel = new Gl.Delegates.glShadeModel(Imports.glShadeModel);
                Gl.glTexParameterf = new Gl.Delegates.glTexParameterf(Imports.glTexParameterf);
                Gl.glTexParameterfv_ = new Gl.Delegates.glTexParameterfv_(Imports.glTexParameterfv_);
                Gl.glTexParameteri = new Gl.Delegates.glTexParameteri(Imports.glTexParameteri);
                Gl.glTexParameteriv_ = new Gl.Delegates.glTexParameteriv_(Imports.glTexParameteriv_);
                Gl.glTexImage1D_ = new Gl.Delegates.glTexImage1D_(Imports.glTexImage1D_);
                Gl.glTexImage2D_ = new Gl.Delegates.glTexImage2D_(Imports.glTexImage2D_);
                Gl.glTexEnvf = new Gl.Delegates.glTexEnvf(Imports.glTexEnvf);
                Gl.glTexEnvfv_ = new Gl.Delegates.glTexEnvfv_(Imports.glTexEnvfv_);
                Gl.glTexEnvi = new Gl.Delegates.glTexEnvi(Imports.glTexEnvi);
                Gl.glTexEnviv_ = new Gl.Delegates.glTexEnviv_(Imports.glTexEnviv_);
                Gl.glTexGend = new Gl.Delegates.glTexGend(Imports.glTexGend);
                Gl.glTexGendv_ = new Gl.Delegates.glTexGendv_(Imports.glTexGendv_);
                Gl.glTexGenf = new Gl.Delegates.glTexGenf(Imports.glTexGenf);
                Gl.glTexGenfv_ = new Gl.Delegates.glTexGenfv_(Imports.glTexGenfv_);
                Gl.glTexGeni = new Gl.Delegates.glTexGeni(Imports.glTexGeni);
                Gl.glTexGeniv_ = new Gl.Delegates.glTexGeniv_(Imports.glTexGeniv_);
                Gl.glFeedbackBuffer_ = new Gl.Delegates.glFeedbackBuffer_(Imports.glFeedbackBuffer_);
                Gl.glSelectBuffer_ = new Gl.Delegates.glSelectBuffer_(Imports.glSelectBuffer_);
                Gl.glRenderMode = new Gl.Delegates.glRenderMode(Imports.glRenderMode);
                Gl.glInitNames = new Gl.Delegates.glInitNames(Imports.glInitNames);
                Gl.glLoadName = new Gl.Delegates.glLoadName(Imports.glLoadName);
                Gl.glPassThrough = new Gl.Delegates.glPassThrough(Imports.glPassThrough);
                Gl.glPopName = new Gl.Delegates.glPopName(Imports.glPopName);
                Gl.glPushName = new Gl.Delegates.glPushName(Imports.glPushName);
                Gl.glDrawBuffer = new Gl.Delegates.glDrawBuffer(Imports.glDrawBuffer);
                Gl.glClear = new Gl.Delegates.glClear(Imports.glClear);
                Gl.glClearAccum = new Gl.Delegates.glClearAccum(Imports.glClearAccum);
                Gl.glClearIndex = new Gl.Delegates.glClearIndex(Imports.glClearIndex);
                Gl.glClearColor = new Gl.Delegates.glClearColor(Imports.glClearColor);
                Gl.glClearStencil = new Gl.Delegates.glClearStencil(Imports.glClearStencil);
                Gl.glClearDepth = new Gl.Delegates.glClearDepth(Imports.glClearDepth);
                Gl.glStencilMask = new Gl.Delegates.glStencilMask(Imports.glStencilMask);
                Gl.glColorMask = new Gl.Delegates.glColorMask(Imports.glColorMask);
                Gl.glDepthMask = new Gl.Delegates.glDepthMask(Imports.glDepthMask);
                Gl.glIndexMask = new Gl.Delegates.glIndexMask(Imports.glIndexMask);
                Gl.glAccum = new Gl.Delegates.glAccum(Imports.glAccum);
                Gl.glDisable = new Gl.Delegates.glDisable(Imports.glDisable);
                Gl.glEnable = new Gl.Delegates.glEnable(Imports.glEnable);
                Gl.glFinish = new Gl.Delegates.glFinish(Imports.glFinish);
                Gl.glFlush = new Gl.Delegates.glFlush(Imports.glFlush);
                Gl.glPopAttrib = new Gl.Delegates.glPopAttrib(Imports.glPopAttrib);
                Gl.glPushAttrib = new Gl.Delegates.glPushAttrib(Imports.glPushAttrib);
                Gl.glMap1d_ = new Gl.Delegates.glMap1d_(Imports.glMap1d_);
                Gl.glMap1f_ = new Gl.Delegates.glMap1f_(Imports.glMap1f_);
                Gl.glMap2d_ = new Gl.Delegates.glMap2d_(Imports.glMap2d_);
                Gl.glMap2f_ = new Gl.Delegates.glMap2f_(Imports.glMap2f_);
                Gl.glMapGrid1d = new Gl.Delegates.glMapGrid1d(Imports.glMapGrid1d);
                Gl.glMapGrid1f = new Gl.Delegates.glMapGrid1f(Imports.glMapGrid1f);
                Gl.glMapGrid2d = new Gl.Delegates.glMapGrid2d(Imports.glMapGrid2d);
                Gl.glMapGrid2f = new Gl.Delegates.glMapGrid2f(Imports.glMapGrid2f);
                Gl.glEvalCoord1d = new Gl.Delegates.glEvalCoord1d(Imports.glEvalCoord1d);
                Gl.glEvalCoord1dv_ = new Gl.Delegates.glEvalCoord1dv_(Imports.glEvalCoord1dv_);
                Gl.glEvalCoord1f = new Gl.Delegates.glEvalCoord1f(Imports.glEvalCoord1f);
                Gl.glEvalCoord1fv_ = new Gl.Delegates.glEvalCoord1fv_(Imports.glEvalCoord1fv_);
                Gl.glEvalCoord2d = new Gl.Delegates.glEvalCoord2d(Imports.glEvalCoord2d);
                Gl.glEvalCoord2dv_ = new Gl.Delegates.glEvalCoord2dv_(Imports.glEvalCoord2dv_);
                Gl.glEvalCoord2f = new Gl.Delegates.glEvalCoord2f(Imports.glEvalCoord2f);
                Gl.glEvalCoord2fv_ = new Gl.Delegates.glEvalCoord2fv_(Imports.glEvalCoord2fv_);
                Gl.glEvalMesh1 = new Gl.Delegates.glEvalMesh1(Imports.glEvalMesh1);
                Gl.glEvalPoint1 = new Gl.Delegates.glEvalPoint1(Imports.glEvalPoint1);
                Gl.glEvalMesh2 = new Gl.Delegates.glEvalMesh2(Imports.glEvalMesh2);
                Gl.glEvalPoint2 = new Gl.Delegates.glEvalPoint2(Imports.glEvalPoint2);
                Gl.glAlphaFunc = new Gl.Delegates.glAlphaFunc(Imports.glAlphaFunc);
                Gl.glBlendFunc = new Gl.Delegates.glBlendFunc(Imports.glBlendFunc);
                Gl.glLogicOp = new Gl.Delegates.glLogicOp(Imports.glLogicOp);
                Gl.glStencilFunc = new Gl.Delegates.glStencilFunc(Imports.glStencilFunc);
                Gl.glStencilOp = new Gl.Delegates.glStencilOp(Imports.glStencilOp);
                Gl.glDepthFunc = new Gl.Delegates.glDepthFunc(Imports.glDepthFunc);
                Gl.glPixelZoom = new Gl.Delegates.glPixelZoom(Imports.glPixelZoom);
                Gl.glPixelTransferf = new Gl.Delegates.glPixelTransferf(Imports.glPixelTransferf);
                Gl.glPixelTransferi = new Gl.Delegates.glPixelTransferi(Imports.glPixelTransferi);
                Gl.glPixelStoref = new Gl.Delegates.glPixelStoref(Imports.glPixelStoref);
                Gl.glPixelStorei = new Gl.Delegates.glPixelStorei(Imports.glPixelStorei);
                Gl.glPixelMapfv_ = new Gl.Delegates.glPixelMapfv_(Imports.glPixelMapfv_);
                Gl.glPixelMapuiv_ = new Gl.Delegates.glPixelMapuiv_(Imports.glPixelMapuiv_);
                Gl.glPixelMapusv_ = new Gl.Delegates.glPixelMapusv_(Imports.glPixelMapusv_);
                Gl.glReadBuffer = new Gl.Delegates.glReadBuffer(Imports.glReadBuffer);
                Gl.glCopyPixels = new Gl.Delegates.glCopyPixels(Imports.glCopyPixels);
                Gl.glReadPixels_ = new Gl.Delegates.glReadPixels_(Imports.glReadPixels_);
                Gl.glDrawPixels_ = new Gl.Delegates.glDrawPixels_(Imports.glDrawPixels_);
                Gl.glGetBooleanv_ = new Gl.Delegates.glGetBooleanv_(Imports.glGetBooleanv_);
                Gl.glGetClipPlane_ = new Gl.Delegates.glGetClipPlane_(Imports.glGetClipPlane_);
                Gl.glGetDoublev_ = new Gl.Delegates.glGetDoublev_(Imports.glGetDoublev_);
                Gl.glGetError = new Gl.Delegates.glGetError(Imports.glGetError);
                Gl.glGetFloatv_ = new Gl.Delegates.glGetFloatv_(Imports.glGetFloatv_);
                Gl.glGetIntegerv_ = new Gl.Delegates.glGetIntegerv_(Imports.glGetIntegerv_);
                Gl.glGetLightfv_ = new Gl.Delegates.glGetLightfv_(Imports.glGetLightfv_);
                Gl.glGetLightiv_ = new Gl.Delegates.glGetLightiv_(Imports.glGetLightiv_);
                Gl.glGetMapdv_ = new Gl.Delegates.glGetMapdv_(Imports.glGetMapdv_);
                Gl.glGetMapfv_ = new Gl.Delegates.glGetMapfv_(Imports.glGetMapfv_);
                Gl.glGetMapiv_ = new Gl.Delegates.glGetMapiv_(Imports.glGetMapiv_);
                Gl.glGetMaterialfv_ = new Gl.Delegates.glGetMaterialfv_(Imports.glGetMaterialfv_);
                Gl.glGetMaterialiv_ = new Gl.Delegates.glGetMaterialiv_(Imports.glGetMaterialiv_);
                Gl.glGetPixelMapfv_ = new Gl.Delegates.glGetPixelMapfv_(Imports.glGetPixelMapfv_);
                Gl.glGetPixelMapuiv_ = new Gl.Delegates.glGetPixelMapuiv_(Imports.glGetPixelMapuiv_);
                Gl.glGetPixelMapusv_ = new Gl.Delegates.glGetPixelMapusv_(Imports.glGetPixelMapusv_);
                Gl.glGetPolygonStipple_ = new Gl.Delegates.glGetPolygonStipple_(Imports.glGetPolygonStipple_);
                Gl.glGetString_ = new Gl.Delegates.glGetString_(Imports.glGetString_);
                Gl.glGetTexEnvfv_ = new Gl.Delegates.glGetTexEnvfv_(Imports.glGetTexEnvfv_);
                Gl.glGetTexEnviv_ = new Gl.Delegates.glGetTexEnviv_(Imports.glGetTexEnviv_);
                Gl.glGetTexGendv_ = new Gl.Delegates.glGetTexGendv_(Imports.glGetTexGendv_);
                Gl.glGetTexGenfv_ = new Gl.Delegates.glGetTexGenfv_(Imports.glGetTexGenfv_);
                Gl.glGetTexGeniv_ = new Gl.Delegates.glGetTexGeniv_(Imports.glGetTexGeniv_);
                Gl.glGetTexImage_ = new Gl.Delegates.glGetTexImage_(Imports.glGetTexImage_);
                Gl.glGetTexParameterfv_ = new Gl.Delegates.glGetTexParameterfv_(Imports.glGetTexParameterfv_);
                Gl.glGetTexParameteriv_ = new Gl.Delegates.glGetTexParameteriv_(Imports.glGetTexParameteriv_);
                Gl.glGetTexLevelParameterfv_ = new Gl.Delegates.glGetTexLevelParameterfv_(Imports.glGetTexLevelParameterfv_);
                Gl.glGetTexLevelParameteriv_ = new Gl.Delegates.glGetTexLevelParameteriv_(Imports.glGetTexLevelParameteriv_);
                Gl.glIsEnabled = new Gl.Delegates.glIsEnabled(Imports.glIsEnabled);
                Gl.glIsList = new Gl.Delegates.glIsList(Imports.glIsList);
                Gl.glDepthRange = new Gl.Delegates.glDepthRange(Imports.glDepthRange);
                Gl.glFrustum = new Gl.Delegates.glFrustum(Imports.glFrustum);
                Gl.glLoadIdentity = new Gl.Delegates.glLoadIdentity(Imports.glLoadIdentity);
                Gl.glLoadMatrixf_ = new Gl.Delegates.glLoadMatrixf_(Imports.glLoadMatrixf_);
                Gl.glLoadMatrixd_ = new Gl.Delegates.glLoadMatrixd_(Imports.glLoadMatrixd_);
                Gl.glMatrixMode = new Gl.Delegates.glMatrixMode(Imports.glMatrixMode);
                Gl.glMultMatrixf_ = new Gl.Delegates.glMultMatrixf_(Imports.glMultMatrixf_);
                Gl.glMultMatrixd_ = new Gl.Delegates.glMultMatrixd_(Imports.glMultMatrixd_);
                Gl.glOrtho = new Gl.Delegates.glOrtho(Imports.glOrtho);
                Gl.glPopMatrix = new Gl.Delegates.glPopMatrix(Imports.glPopMatrix);
                Gl.glPushMatrix = new Gl.Delegates.glPushMatrix(Imports.glPushMatrix);
                Gl.glRotated = new Gl.Delegates.glRotated(Imports.glRotated);
                Gl.glRotatef = new Gl.Delegates.glRotatef(Imports.glRotatef);
                Gl.glScaled = new Gl.Delegates.glScaled(Imports.glScaled);
                Gl.glScalef = new Gl.Delegates.glScalef(Imports.glScalef);
                Gl.glTranslated = new Gl.Delegates.glTranslated(Imports.glTranslated);
                Gl.glTranslatef = new Gl.Delegates.glTranslatef(Imports.glTranslatef);
                Gl.glViewport = new Gl.Delegates.glViewport(Imports.glViewport);
                Gl.glArrayElement = new Gl.Delegates.glArrayElement(Imports.glArrayElement);
                Gl.glColorPointer_ = new Gl.Delegates.glColorPointer_(Imports.glColorPointer_);
                Gl.glDisableClientState = new Gl.Delegates.glDisableClientState(Imports.glDisableClientState);
                Gl.glDrawArrays = new Gl.Delegates.glDrawArrays(Imports.glDrawArrays);
                Gl.glDrawElements_ = new Gl.Delegates.glDrawElements_(Imports.glDrawElements_);
                Gl.glEdgeFlagPointer_ = new Gl.Delegates.glEdgeFlagPointer_(Imports.glEdgeFlagPointer_);
                Gl.glEnableClientState = new Gl.Delegates.glEnableClientState(Imports.glEnableClientState);
                Gl.glGetPointerv_ = new Gl.Delegates.glGetPointerv_(Imports.glGetPointerv_);
                Gl.glIndexPointer_ = new Gl.Delegates.glIndexPointer_(Imports.glIndexPointer_);
                Gl.glInterleavedArrays_ = new Gl.Delegates.glInterleavedArrays_(Imports.glInterleavedArrays_);
                Gl.glNormalPointer_ = new Gl.Delegates.glNormalPointer_(Imports.glNormalPointer_);
                Gl.glTexCoordPointer_ = new Gl.Delegates.glTexCoordPointer_(Imports.glTexCoordPointer_);
                Gl.glVertexPointer_ = new Gl.Delegates.glVertexPointer_(Imports.glVertexPointer_);
                Gl.glPolygonOffset = new Gl.Delegates.glPolygonOffset(Imports.glPolygonOffset);
                Gl.glCopyTexImage1D = new Gl.Delegates.glCopyTexImage1D(Imports.glCopyTexImage1D);
                Gl.glCopyTexImage2D = new Gl.Delegates.glCopyTexImage2D(Imports.glCopyTexImage2D);
                Gl.glCopyTexSubImage1D = new Gl.Delegates.glCopyTexSubImage1D(Imports.glCopyTexSubImage1D);
                Gl.glCopyTexSubImage2D = new Gl.Delegates.glCopyTexSubImage2D(Imports.glCopyTexSubImage2D);
                Gl.glTexSubImage1D_ = new Gl.Delegates.glTexSubImage1D_(Imports.glTexSubImage1D_);
                Gl.glTexSubImage2D_ = new Gl.Delegates.glTexSubImage2D_(Imports.glTexSubImage2D_);
                Gl.glAreTexturesResident_ = new Gl.Delegates.glAreTexturesResident_(Imports.glAreTexturesResident_);
                Gl.glBindTexture = new Gl.Delegates.glBindTexture(Imports.glBindTexture);
                Gl.glDeleteTextures_ = new Gl.Delegates.glDeleteTextures_(Imports.glDeleteTextures_);
                Gl.glGenTextures_ = new Gl.Delegates.glGenTextures_(Imports.glGenTextures_);
                Gl.glIsTexture = new Gl.Delegates.glIsTexture(Imports.glIsTexture);
                Gl.glPrioritizeTextures_ = new Gl.Delegates.glPrioritizeTextures_(Imports.glPrioritizeTextures_);
                Gl.glIndexub = new Gl.Delegates.glIndexub(Imports.glIndexub);
                Gl.glIndexubv_ = new Gl.Delegates.glIndexubv_(Imports.glIndexubv_);
                Gl.glPopClientAttrib = new Gl.Delegates.glPopClientAttrib(Imports.glPopClientAttrib);
                Gl.glPushClientAttrib = new Gl.Delegates.glPushClientAttrib(Imports.glPushClientAttrib);
                #endregion Older Windows Core
            }
            else if (Environment.OSVersion.Platform == PlatformID.Win32NT && Environment.OSVersion.Version.Major >= 6)
            {
                #region Windows Vista Core
                Gl.glNewList = new Gl.Delegates.glNewList(Imports.glNewList);
                Gl.glEndList = new Gl.Delegates.glEndList(Imports.glEndList);
                Gl.glCallList = new Gl.Delegates.glCallList(Imports.glCallList);
                Gl.glCallLists_ = new Gl.Delegates.glCallLists_(Imports.glCallLists_);
                Gl.glDeleteLists = new Gl.Delegates.glDeleteLists(Imports.glDeleteLists);
                Gl.glGenLists = new Gl.Delegates.glGenLists(Imports.glGenLists);
                Gl.glListBase = new Gl.Delegates.glListBase(Imports.glListBase);
                Gl.glBegin = new Gl.Delegates.glBegin(Imports.glBegin);
                Gl.glBitmap_ = new Gl.Delegates.glBitmap_(Imports.glBitmap_);
                Gl.glColor3b = new Gl.Delegates.glColor3b(Imports.glColor3b);
                Gl.glColor3bv_ = new Gl.Delegates.glColor3bv_(Imports.glColor3bv_);
                Gl.glColor3d = new Gl.Delegates.glColor3d(Imports.glColor3d);
                Gl.glColor3dv_ = new Gl.Delegates.glColor3dv_(Imports.glColor3dv_);
                Gl.glColor3f = new Gl.Delegates.glColor3f(Imports.glColor3f);
                Gl.glColor3fv_ = new Gl.Delegates.glColor3fv_(Imports.glColor3fv_);
                Gl.glColor3i = new Gl.Delegates.glColor3i(Imports.glColor3i);
                Gl.glColor3iv_ = new Gl.Delegates.glColor3iv_(Imports.glColor3iv_);
                Gl.glColor3s = new Gl.Delegates.glColor3s(Imports.glColor3s);
                Gl.glColor3sv_ = new Gl.Delegates.glColor3sv_(Imports.glColor3sv_);
                Gl.glColor3ub = new Gl.Delegates.glColor3ub(Imports.glColor3ub);
                Gl.glColor3ubv_ = new Gl.Delegates.glColor3ubv_(Imports.glColor3ubv_);
                Gl.glColor3ui = new Gl.Delegates.glColor3ui(Imports.glColor3ui);
                Gl.glColor3uiv_ = new Gl.Delegates.glColor3uiv_(Imports.glColor3uiv_);
                Gl.glColor3us = new Gl.Delegates.glColor3us(Imports.glColor3us);
                Gl.glColor3usv_ = new Gl.Delegates.glColor3usv_(Imports.glColor3usv_);
                Gl.glColor4b = new Gl.Delegates.glColor4b(Imports.glColor4b);
                Gl.glColor4bv_ = new Gl.Delegates.glColor4bv_(Imports.glColor4bv_);
                Gl.glColor4d = new Gl.Delegates.glColor4d(Imports.glColor4d);
                Gl.glColor4dv_ = new Gl.Delegates.glColor4dv_(Imports.glColor4dv_);
                Gl.glColor4f = new Gl.Delegates.glColor4f(Imports.glColor4f);
                Gl.glColor4fv_ = new Gl.Delegates.glColor4fv_(Imports.glColor4fv_);
                Gl.glColor4i = new Gl.Delegates.glColor4i(Imports.glColor4i);
                Gl.glColor4iv_ = new Gl.Delegates.glColor4iv_(Imports.glColor4iv_);
                Gl.glColor4s = new Gl.Delegates.glColor4s(Imports.glColor4s);
                Gl.glColor4sv_ = new Gl.Delegates.glColor4sv_(Imports.glColor4sv_);
                Gl.glColor4ub = new Gl.Delegates.glColor4ub(Imports.glColor4ub);
                Gl.glColor4ubv_ = new Gl.Delegates.glColor4ubv_(Imports.glColor4ubv_);
                Gl.glColor4ui = new Gl.Delegates.glColor4ui(Imports.glColor4ui);
                Gl.glColor4uiv_ = new Gl.Delegates.glColor4uiv_(Imports.glColor4uiv_);
                Gl.glColor4us = new Gl.Delegates.glColor4us(Imports.glColor4us);
                Gl.glColor4usv_ = new Gl.Delegates.glColor4usv_(Imports.glColor4usv_);
                Gl.glEdgeFlag = new Gl.Delegates.glEdgeFlag(Imports.glEdgeFlag);
                Gl.glEdgeFlagv_ = new Gl.Delegates.glEdgeFlagv_(Imports.glEdgeFlagv_);
                Gl.glEnd = new Gl.Delegates.glEnd(Imports.glEnd);
                Gl.glIndexd = new Gl.Delegates.glIndexd(Imports.glIndexd);
                Gl.glIndexdv_ = new Gl.Delegates.glIndexdv_(Imports.glIndexdv_);
                Gl.glIndexf = new Gl.Delegates.glIndexf(Imports.glIndexf);
                Gl.glIndexfv_ = new Gl.Delegates.glIndexfv_(Imports.glIndexfv_);
                Gl.glIndexi = new Gl.Delegates.glIndexi(Imports.glIndexi);
                Gl.glIndexiv_ = new Gl.Delegates.glIndexiv_(Imports.glIndexiv_);
                Gl.glIndexs = new Gl.Delegates.glIndexs(Imports.glIndexs);
                Gl.glIndexsv_ = new Gl.Delegates.glIndexsv_(Imports.glIndexsv_);
                Gl.glNormal3b = new Gl.Delegates.glNormal3b(Imports.glNormal3b);
                Gl.glNormal3bv_ = new Gl.Delegates.glNormal3bv_(Imports.glNormal3bv_);
                Gl.glNormal3d = new Gl.Delegates.glNormal3d(Imports.glNormal3d);
                Gl.glNormal3dv_ = new Gl.Delegates.glNormal3dv_(Imports.glNormal3dv_);
                Gl.glNormal3f = new Gl.Delegates.glNormal3f(Imports.glNormal3f);
                Gl.glNormal3fv_ = new Gl.Delegates.glNormal3fv_(Imports.glNormal3fv_);
                Gl.glNormal3i = new Gl.Delegates.glNormal3i(Imports.glNormal3i);
                Gl.glNormal3iv_ = new Gl.Delegates.glNormal3iv_(Imports.glNormal3iv_);
                Gl.glNormal3s = new Gl.Delegates.glNormal3s(Imports.glNormal3s);
                Gl.glNormal3sv_ = new Gl.Delegates.glNormal3sv_(Imports.glNormal3sv_);
                Gl.glRasterPos2d = new Gl.Delegates.glRasterPos2d(Imports.glRasterPos2d);
                Gl.glRasterPos2dv_ = new Gl.Delegates.glRasterPos2dv_(Imports.glRasterPos2dv_);
                Gl.glRasterPos2f = new Gl.Delegates.glRasterPos2f(Imports.glRasterPos2f);
                Gl.glRasterPos2fv_ = new Gl.Delegates.glRasterPos2fv_(Imports.glRasterPos2fv_);
                Gl.glRasterPos2i = new Gl.Delegates.glRasterPos2i(Imports.glRasterPos2i);
                Gl.glRasterPos2iv_ = new Gl.Delegates.glRasterPos2iv_(Imports.glRasterPos2iv_);
                Gl.glRasterPos2s = new Gl.Delegates.glRasterPos2s(Imports.glRasterPos2s);
                Gl.glRasterPos2sv_ = new Gl.Delegates.glRasterPos2sv_(Imports.glRasterPos2sv_);
                Gl.glRasterPos3d = new Gl.Delegates.glRasterPos3d(Imports.glRasterPos3d);
                Gl.glRasterPos3dv_ = new Gl.Delegates.glRasterPos3dv_(Imports.glRasterPos3dv_);
                Gl.glRasterPos3f = new Gl.Delegates.glRasterPos3f(Imports.glRasterPos3f);
                Gl.glRasterPos3fv_ = new Gl.Delegates.glRasterPos3fv_(Imports.glRasterPos3fv_);
                Gl.glRasterPos3i = new Gl.Delegates.glRasterPos3i(Imports.glRasterPos3i);
                Gl.glRasterPos3iv_ = new Gl.Delegates.glRasterPos3iv_(Imports.glRasterPos3iv_);
                Gl.glRasterPos3s = new Gl.Delegates.glRasterPos3s(Imports.glRasterPos3s);
                Gl.glRasterPos3sv_ = new Gl.Delegates.glRasterPos3sv_(Imports.glRasterPos3sv_);
                Gl.glRasterPos4d = new Gl.Delegates.glRasterPos4d(Imports.glRasterPos4d);
                Gl.glRasterPos4dv_ = new Gl.Delegates.glRasterPos4dv_(Imports.glRasterPos4dv_);
                Gl.glRasterPos4f = new Gl.Delegates.glRasterPos4f(Imports.glRasterPos4f);
                Gl.glRasterPos4fv_ = new Gl.Delegates.glRasterPos4fv_(Imports.glRasterPos4fv_);
                Gl.glRasterPos4i = new Gl.Delegates.glRasterPos4i(Imports.glRasterPos4i);
                Gl.glRasterPos4iv_ = new Gl.Delegates.glRasterPos4iv_(Imports.glRasterPos4iv_);
                Gl.glRasterPos4s = new Gl.Delegates.glRasterPos4s(Imports.glRasterPos4s);
                Gl.glRasterPos4sv_ = new Gl.Delegates.glRasterPos4sv_(Imports.glRasterPos4sv_);
                Gl.glRectd = new Gl.Delegates.glRectd(Imports.glRectd);
                Gl.glRectdv_ = new Gl.Delegates.glRectdv_(Imports.glRectdv_);
                Gl.glRectf = new Gl.Delegates.glRectf(Imports.glRectf);
                Gl.glRectfv_ = new Gl.Delegates.glRectfv_(Imports.glRectfv_);
                Gl.glRecti = new Gl.Delegates.glRecti(Imports.glRecti);
                Gl.glRectiv_ = new Gl.Delegates.glRectiv_(Imports.glRectiv_);
                Gl.glRects = new Gl.Delegates.glRects(Imports.glRects);
                Gl.glRectsv_ = new Gl.Delegates.glRectsv_(Imports.glRectsv_);
                Gl.glTexCoord1d = new Gl.Delegates.glTexCoord1d(Imports.glTexCoord1d);
                Gl.glTexCoord1dv_ = new Gl.Delegates.glTexCoord1dv_(Imports.glTexCoord1dv_);
                Gl.glTexCoord1f = new Gl.Delegates.glTexCoord1f(Imports.glTexCoord1f);
                Gl.glTexCoord1fv_ = new Gl.Delegates.glTexCoord1fv_(Imports.glTexCoord1fv_);
                Gl.glTexCoord1i = new Gl.Delegates.glTexCoord1i(Imports.glTexCoord1i);
                Gl.glTexCoord1iv_ = new Gl.Delegates.glTexCoord1iv_(Imports.glTexCoord1iv_);
                Gl.glTexCoord1s = new Gl.Delegates.glTexCoord1s(Imports.glTexCoord1s);
                Gl.glTexCoord1sv_ = new Gl.Delegates.glTexCoord1sv_(Imports.glTexCoord1sv_);
                Gl.glTexCoord2d = new Gl.Delegates.glTexCoord2d(Imports.glTexCoord2d);
                Gl.glTexCoord2dv_ = new Gl.Delegates.glTexCoord2dv_(Imports.glTexCoord2dv_);
                Gl.glTexCoord2f = new Gl.Delegates.glTexCoord2f(Imports.glTexCoord2f);
                Gl.glTexCoord2fv_ = new Gl.Delegates.glTexCoord2fv_(Imports.glTexCoord2fv_);
                Gl.glTexCoord2i = new Gl.Delegates.glTexCoord2i(Imports.glTexCoord2i);
                Gl.glTexCoord2iv_ = new Gl.Delegates.glTexCoord2iv_(Imports.glTexCoord2iv_);
                Gl.glTexCoord2s = new Gl.Delegates.glTexCoord2s(Imports.glTexCoord2s);
                Gl.glTexCoord2sv_ = new Gl.Delegates.glTexCoord2sv_(Imports.glTexCoord2sv_);
                Gl.glTexCoord3d = new Gl.Delegates.glTexCoord3d(Imports.glTexCoord3d);
                Gl.glTexCoord3dv_ = new Gl.Delegates.glTexCoord3dv_(Imports.glTexCoord3dv_);
                Gl.glTexCoord3f = new Gl.Delegates.glTexCoord3f(Imports.glTexCoord3f);
                Gl.glTexCoord3fv_ = new Gl.Delegates.glTexCoord3fv_(Imports.glTexCoord3fv_);
                Gl.glTexCoord3i = new Gl.Delegates.glTexCoord3i(Imports.glTexCoord3i);
                Gl.glTexCoord3iv_ = new Gl.Delegates.glTexCoord3iv_(Imports.glTexCoord3iv_);
                Gl.glTexCoord3s = new Gl.Delegates.glTexCoord3s(Imports.glTexCoord3s);
                Gl.glTexCoord3sv_ = new Gl.Delegates.glTexCoord3sv_(Imports.glTexCoord3sv_);
                Gl.glTexCoord4d = new Gl.Delegates.glTexCoord4d(Imports.glTexCoord4d);
                Gl.glTexCoord4dv_ = new Gl.Delegates.glTexCoord4dv_(Imports.glTexCoord4dv_);
                Gl.glTexCoord4f = new Gl.Delegates.glTexCoord4f(Imports.glTexCoord4f);
                Gl.glTexCoord4fv_ = new Gl.Delegates.glTexCoord4fv_(Imports.glTexCoord4fv_);
                Gl.glTexCoord4i = new Gl.Delegates.glTexCoord4i(Imports.glTexCoord4i);
                Gl.glTexCoord4iv_ = new Gl.Delegates.glTexCoord4iv_(Imports.glTexCoord4iv_);
                Gl.glTexCoord4s = new Gl.Delegates.glTexCoord4s(Imports.glTexCoord4s);
                Gl.glTexCoord4sv_ = new Gl.Delegates.glTexCoord4sv_(Imports.glTexCoord4sv_);
                Gl.glVertex2d = new Gl.Delegates.glVertex2d(Imports.glVertex2d);
                Gl.glVertex2dv_ = new Gl.Delegates.glVertex2dv_(Imports.glVertex2dv_);
                Gl.glVertex2f = new Gl.Delegates.glVertex2f(Imports.glVertex2f);
                Gl.glVertex2fv_ = new Gl.Delegates.glVertex2fv_(Imports.glVertex2fv_);
                Gl.glVertex2i = new Gl.Delegates.glVertex2i(Imports.glVertex2i);
                Gl.glVertex2iv_ = new Gl.Delegates.glVertex2iv_(Imports.glVertex2iv_);
                Gl.glVertex2s = new Gl.Delegates.glVertex2s(Imports.glVertex2s);
                Gl.glVertex2sv_ = new Gl.Delegates.glVertex2sv_(Imports.glVertex2sv_);
                Gl.glVertex3d = new Gl.Delegates.glVertex3d(Imports.glVertex3d);
                Gl.glVertex3dv_ = new Gl.Delegates.glVertex3dv_(Imports.glVertex3dv_);
                Gl.glVertex3f = new Gl.Delegates.glVertex3f(Imports.glVertex3f);
                Gl.glVertex3fv_ = new Gl.Delegates.glVertex3fv_(Imports.glVertex3fv_);
                Gl.glVertex3i = new Gl.Delegates.glVertex3i(Imports.glVertex3i);
                Gl.glVertex3iv_ = new Gl.Delegates.glVertex3iv_(Imports.glVertex3iv_);
                Gl.glVertex3s = new Gl.Delegates.glVertex3s(Imports.glVertex3s);
                Gl.glVertex3sv_ = new Gl.Delegates.glVertex3sv_(Imports.glVertex3sv_);
                Gl.glVertex4d = new Gl.Delegates.glVertex4d(Imports.glVertex4d);
                Gl.glVertex4dv_ = new Gl.Delegates.glVertex4dv_(Imports.glVertex4dv_);
                Gl.glVertex4f = new Gl.Delegates.glVertex4f(Imports.glVertex4f);
                Gl.glVertex4fv_ = new Gl.Delegates.glVertex4fv_(Imports.glVertex4fv_);
                Gl.glVertex4i = new Gl.Delegates.glVertex4i(Imports.glVertex4i);
                Gl.glVertex4iv_ = new Gl.Delegates.glVertex4iv_(Imports.glVertex4iv_);
                Gl.glVertex4s = new Gl.Delegates.glVertex4s(Imports.glVertex4s);
                Gl.glVertex4sv_ = new Gl.Delegates.glVertex4sv_(Imports.glVertex4sv_);
                Gl.glClipPlane_ = new Gl.Delegates.glClipPlane_(Imports.glClipPlane_);
                Gl.glColorMaterial = new Gl.Delegates.glColorMaterial(Imports.glColorMaterial);
                Gl.glCullFace = new Gl.Delegates.glCullFace(Imports.glCullFace);
                Gl.glFogf = new Gl.Delegates.glFogf(Imports.glFogf);
                Gl.glFogfv_ = new Gl.Delegates.glFogfv_(Imports.glFogfv_);
                Gl.glFogi = new Gl.Delegates.glFogi(Imports.glFogi);
                Gl.glFogiv_ = new Gl.Delegates.glFogiv_(Imports.glFogiv_);
                Gl.glFrontFace = new Gl.Delegates.glFrontFace(Imports.glFrontFace);
                Gl.glHint = new Gl.Delegates.glHint(Imports.glHint);
                Gl.glLightf = new Gl.Delegates.glLightf(Imports.glLightf);
                Gl.glLightfv_ = new Gl.Delegates.glLightfv_(Imports.glLightfv_);
                Gl.glLighti = new Gl.Delegates.glLighti(Imports.glLighti);
                Gl.glLightiv_ = new Gl.Delegates.glLightiv_(Imports.glLightiv_);
                Gl.glLightModelf = new Gl.Delegates.glLightModelf(Imports.glLightModelf);
                Gl.glLightModelfv_ = new Gl.Delegates.glLightModelfv_(Imports.glLightModelfv_);
                Gl.glLightModeli = new Gl.Delegates.glLightModeli(Imports.glLightModeli);
                Gl.glLightModeliv_ = new Gl.Delegates.glLightModeliv_(Imports.glLightModeliv_);
                Gl.glLineStipple_ = new Gl.Delegates.glLineStipple_(Imports.glLineStipple_);
                Gl.glLineWidth = new Gl.Delegates.glLineWidth(Imports.glLineWidth);
                Gl.glMaterialf = new Gl.Delegates.glMaterialf(Imports.glMaterialf);
                Gl.glMaterialfv_ = new Gl.Delegates.glMaterialfv_(Imports.glMaterialfv_);
                Gl.glMateriali = new Gl.Delegates.glMateriali(Imports.glMateriali);
                Gl.glMaterialiv_ = new Gl.Delegates.glMaterialiv_(Imports.glMaterialiv_);
                Gl.glPointSize = new Gl.Delegates.glPointSize(Imports.glPointSize);
                Gl.glPolygonMode = new Gl.Delegates.glPolygonMode(Imports.glPolygonMode);
                Gl.glPolygonStipple_ = new Gl.Delegates.glPolygonStipple_(Imports.glPolygonStipple_);
                Gl.glScissor = new Gl.Delegates.glScissor(Imports.glScissor);
                Gl.glShadeModel = new Gl.Delegates.glShadeModel(Imports.glShadeModel);
                Gl.glTexParameterf = new Gl.Delegates.glTexParameterf(Imports.glTexParameterf);
                Gl.glTexParameterfv_ = new Gl.Delegates.glTexParameterfv_(Imports.glTexParameterfv_);
                Gl.glTexParameteri = new Gl.Delegates.glTexParameteri(Imports.glTexParameteri);
                Gl.glTexParameteriv_ = new Gl.Delegates.glTexParameteriv_(Imports.glTexParameteriv_);
                Gl.glTexImage1D_ = new Gl.Delegates.glTexImage1D_(Imports.glTexImage1D_);
                Gl.glTexImage2D_ = new Gl.Delegates.glTexImage2D_(Imports.glTexImage2D_);
                Gl.glTexEnvf = new Gl.Delegates.glTexEnvf(Imports.glTexEnvf);
                Gl.glTexEnvfv_ = new Gl.Delegates.glTexEnvfv_(Imports.glTexEnvfv_);
                Gl.glTexEnvi = new Gl.Delegates.glTexEnvi(Imports.glTexEnvi);
                Gl.glTexEnviv_ = new Gl.Delegates.glTexEnviv_(Imports.glTexEnviv_);
                Gl.glTexGend = new Gl.Delegates.glTexGend(Imports.glTexGend);
                Gl.glTexGendv_ = new Gl.Delegates.glTexGendv_(Imports.glTexGendv_);
                Gl.glTexGenf = new Gl.Delegates.glTexGenf(Imports.glTexGenf);
                Gl.glTexGenfv_ = new Gl.Delegates.glTexGenfv_(Imports.glTexGenfv_);
                Gl.glTexGeni = new Gl.Delegates.glTexGeni(Imports.glTexGeni);
                Gl.glTexGeniv_ = new Gl.Delegates.glTexGeniv_(Imports.glTexGeniv_);
                Gl.glFeedbackBuffer_ = new Gl.Delegates.glFeedbackBuffer_(Imports.glFeedbackBuffer_);
                Gl.glSelectBuffer_ = new Gl.Delegates.glSelectBuffer_(Imports.glSelectBuffer_);
                Gl.glRenderMode = new Gl.Delegates.glRenderMode(Imports.glRenderMode);
                Gl.glInitNames = new Gl.Delegates.glInitNames(Imports.glInitNames);
                Gl.glLoadName = new Gl.Delegates.glLoadName(Imports.glLoadName);
                Gl.glPassThrough = new Gl.Delegates.glPassThrough(Imports.glPassThrough);
                Gl.glPopName = new Gl.Delegates.glPopName(Imports.glPopName);
                Gl.glPushName = new Gl.Delegates.glPushName(Imports.glPushName);
                Gl.glDrawBuffer = new Gl.Delegates.glDrawBuffer(Imports.glDrawBuffer);
                Gl.glClear = new Gl.Delegates.glClear(Imports.glClear);
                Gl.glClearAccum = new Gl.Delegates.glClearAccum(Imports.glClearAccum);
                Gl.glClearIndex = new Gl.Delegates.glClearIndex(Imports.glClearIndex);
                Gl.glClearColor = new Gl.Delegates.glClearColor(Imports.glClearColor);
                Gl.glClearStencil = new Gl.Delegates.glClearStencil(Imports.glClearStencil);
                Gl.glClearDepth = new Gl.Delegates.glClearDepth(Imports.glClearDepth);
                Gl.glStencilMask = new Gl.Delegates.glStencilMask(Imports.glStencilMask);
                Gl.glColorMask = new Gl.Delegates.glColorMask(Imports.glColorMask);
                Gl.glDepthMask = new Gl.Delegates.glDepthMask(Imports.glDepthMask);
                Gl.glIndexMask = new Gl.Delegates.glIndexMask(Imports.glIndexMask);
                Gl.glAccum = new Gl.Delegates.glAccum(Imports.glAccum);
                Gl.glDisable = new Gl.Delegates.glDisable(Imports.glDisable);
                Gl.glEnable = new Gl.Delegates.glEnable(Imports.glEnable);
                Gl.glFinish = new Gl.Delegates.glFinish(Imports.glFinish);
                Gl.glFlush = new Gl.Delegates.glFlush(Imports.glFlush);
                Gl.glPopAttrib = new Gl.Delegates.glPopAttrib(Imports.glPopAttrib);
                Gl.glPushAttrib = new Gl.Delegates.glPushAttrib(Imports.glPushAttrib);
                Gl.glMap1d_ = new Gl.Delegates.glMap1d_(Imports.glMap1d_);
                Gl.glMap1f_ = new Gl.Delegates.glMap1f_(Imports.glMap1f_);
                Gl.glMap2d_ = new Gl.Delegates.glMap2d_(Imports.glMap2d_);
                Gl.glMap2f_ = new Gl.Delegates.glMap2f_(Imports.glMap2f_);
                Gl.glMapGrid1d = new Gl.Delegates.glMapGrid1d(Imports.glMapGrid1d);
                Gl.glMapGrid1f = new Gl.Delegates.glMapGrid1f(Imports.glMapGrid1f);
                Gl.glMapGrid2d = new Gl.Delegates.glMapGrid2d(Imports.glMapGrid2d);
                Gl.glMapGrid2f = new Gl.Delegates.glMapGrid2f(Imports.glMapGrid2f);
                Gl.glEvalCoord1d = new Gl.Delegates.glEvalCoord1d(Imports.glEvalCoord1d);
                Gl.glEvalCoord1dv_ = new Gl.Delegates.glEvalCoord1dv_(Imports.glEvalCoord1dv_);
                Gl.glEvalCoord1f = new Gl.Delegates.glEvalCoord1f(Imports.glEvalCoord1f);
                Gl.glEvalCoord1fv_ = new Gl.Delegates.glEvalCoord1fv_(Imports.glEvalCoord1fv_);
                Gl.glEvalCoord2d = new Gl.Delegates.glEvalCoord2d(Imports.glEvalCoord2d);
                Gl.glEvalCoord2dv_ = new Gl.Delegates.glEvalCoord2dv_(Imports.glEvalCoord2dv_);
                Gl.glEvalCoord2f = new Gl.Delegates.glEvalCoord2f(Imports.glEvalCoord2f);
                Gl.glEvalCoord2fv_ = new Gl.Delegates.glEvalCoord2fv_(Imports.glEvalCoord2fv_);
                Gl.glEvalMesh1 = new Gl.Delegates.glEvalMesh1(Imports.glEvalMesh1);
                Gl.glEvalPoint1 = new Gl.Delegates.glEvalPoint1(Imports.glEvalPoint1);
                Gl.glEvalMesh2 = new Gl.Delegates.glEvalMesh2(Imports.glEvalMesh2);
                Gl.glEvalPoint2 = new Gl.Delegates.glEvalPoint2(Imports.glEvalPoint2);
                Gl.glAlphaFunc = new Gl.Delegates.glAlphaFunc(Imports.glAlphaFunc);
                Gl.glBlendFunc = new Gl.Delegates.glBlendFunc(Imports.glBlendFunc);
                Gl.glLogicOp = new Gl.Delegates.glLogicOp(Imports.glLogicOp);
                Gl.glStencilFunc = new Gl.Delegates.glStencilFunc(Imports.glStencilFunc);
                Gl.glStencilOp = new Gl.Delegates.glStencilOp(Imports.glStencilOp);
                Gl.glDepthFunc = new Gl.Delegates.glDepthFunc(Imports.glDepthFunc);
                Gl.glPixelZoom = new Gl.Delegates.glPixelZoom(Imports.glPixelZoom);
                Gl.glPixelTransferf = new Gl.Delegates.glPixelTransferf(Imports.glPixelTransferf);
                Gl.glPixelTransferi = new Gl.Delegates.glPixelTransferi(Imports.glPixelTransferi);
                Gl.glPixelStoref = new Gl.Delegates.glPixelStoref(Imports.glPixelStoref);
                Gl.glPixelStorei = new Gl.Delegates.glPixelStorei(Imports.glPixelStorei);
                Gl.glPixelMapfv_ = new Gl.Delegates.glPixelMapfv_(Imports.glPixelMapfv_);
                Gl.glPixelMapuiv_ = new Gl.Delegates.glPixelMapuiv_(Imports.glPixelMapuiv_);
                Gl.glPixelMapusv_ = new Gl.Delegates.glPixelMapusv_(Imports.glPixelMapusv_);
                Gl.glReadBuffer = new Gl.Delegates.glReadBuffer(Imports.glReadBuffer);
                Gl.glCopyPixels = new Gl.Delegates.glCopyPixels(Imports.glCopyPixels);
                Gl.glReadPixels_ = new Gl.Delegates.glReadPixels_(Imports.glReadPixels_);
                Gl.glDrawPixels_ = new Gl.Delegates.glDrawPixels_(Imports.glDrawPixels_);
                Gl.glGetBooleanv_ = new Gl.Delegates.glGetBooleanv_(Imports.glGetBooleanv_);
                Gl.glGetClipPlane_ = new Gl.Delegates.glGetClipPlane_(Imports.glGetClipPlane_);
                Gl.glGetDoublev_ = new Gl.Delegates.glGetDoublev_(Imports.glGetDoublev_);
                Gl.glGetError = new Gl.Delegates.glGetError(Imports.glGetError);
                Gl.glGetFloatv_ = new Gl.Delegates.glGetFloatv_(Imports.glGetFloatv_);
                Gl.glGetIntegerv_ = new Gl.Delegates.glGetIntegerv_(Imports.glGetIntegerv_);
                Gl.glGetLightfv_ = new Gl.Delegates.glGetLightfv_(Imports.glGetLightfv_);
                Gl.glGetLightiv_ = new Gl.Delegates.glGetLightiv_(Imports.glGetLightiv_);
                Gl.glGetMapdv_ = new Gl.Delegates.glGetMapdv_(Imports.glGetMapdv_);
                Gl.glGetMapfv_ = new Gl.Delegates.glGetMapfv_(Imports.glGetMapfv_);
                Gl.glGetMapiv_ = new Gl.Delegates.glGetMapiv_(Imports.glGetMapiv_);
                Gl.glGetMaterialfv_ = new Gl.Delegates.glGetMaterialfv_(Imports.glGetMaterialfv_);
                Gl.glGetMaterialiv_ = new Gl.Delegates.glGetMaterialiv_(Imports.glGetMaterialiv_);
                Gl.glGetPixelMapfv_ = new Gl.Delegates.glGetPixelMapfv_(Imports.glGetPixelMapfv_);
                Gl.glGetPixelMapuiv_ = new Gl.Delegates.glGetPixelMapuiv_(Imports.glGetPixelMapuiv_);
                Gl.glGetPixelMapusv_ = new Gl.Delegates.glGetPixelMapusv_(Imports.glGetPixelMapusv_);
                Gl.glGetPolygonStipple_ = new Gl.Delegates.glGetPolygonStipple_(Imports.glGetPolygonStipple_);
                Gl.glGetString_ = new Gl.Delegates.glGetString_(Imports.glGetString_);
                Gl.glGetTexEnvfv_ = new Gl.Delegates.glGetTexEnvfv_(Imports.glGetTexEnvfv_);
                Gl.glGetTexEnviv_ = new Gl.Delegates.glGetTexEnviv_(Imports.glGetTexEnviv_);
                Gl.glGetTexGendv_ = new Gl.Delegates.glGetTexGendv_(Imports.glGetTexGendv_);
                Gl.glGetTexGenfv_ = new Gl.Delegates.glGetTexGenfv_(Imports.glGetTexGenfv_);
                Gl.glGetTexGeniv_ = new Gl.Delegates.glGetTexGeniv_(Imports.glGetTexGeniv_);
                Gl.glGetTexImage_ = new Gl.Delegates.glGetTexImage_(Imports.glGetTexImage_);
                Gl.glGetTexParameterfv_ = new Gl.Delegates.glGetTexParameterfv_(Imports.glGetTexParameterfv_);
                Gl.glGetTexParameteriv_ = new Gl.Delegates.glGetTexParameteriv_(Imports.glGetTexParameteriv_);
                Gl.glGetTexLevelParameterfv_ = new Gl.Delegates.glGetTexLevelParameterfv_(Imports.glGetTexLevelParameterfv_);
                Gl.glGetTexLevelParameteriv_ = new Gl.Delegates.glGetTexLevelParameteriv_(Imports.glGetTexLevelParameteriv_);
                Gl.glIsEnabled = new Gl.Delegates.glIsEnabled(Imports.glIsEnabled);
                Gl.glIsList = new Gl.Delegates.glIsList(Imports.glIsList);
                Gl.glDepthRange = new Gl.Delegates.glDepthRange(Imports.glDepthRange);
                Gl.glFrustum = new Gl.Delegates.glFrustum(Imports.glFrustum);
                Gl.glLoadIdentity = new Gl.Delegates.glLoadIdentity(Imports.glLoadIdentity);
                Gl.glLoadMatrixf_ = new Gl.Delegates.glLoadMatrixf_(Imports.glLoadMatrixf_);
                Gl.glLoadMatrixd_ = new Gl.Delegates.glLoadMatrixd_(Imports.glLoadMatrixd_);
                Gl.glMatrixMode = new Gl.Delegates.glMatrixMode(Imports.glMatrixMode);
                Gl.glMultMatrixf_ = new Gl.Delegates.glMultMatrixf_(Imports.glMultMatrixf_);
                Gl.glMultMatrixd_ = new Gl.Delegates.glMultMatrixd_(Imports.glMultMatrixd_);
                Gl.glOrtho = new Gl.Delegates.glOrtho(Imports.glOrtho);
                Gl.glPopMatrix = new Gl.Delegates.glPopMatrix(Imports.glPopMatrix);
                Gl.glPushMatrix = new Gl.Delegates.glPushMatrix(Imports.glPushMatrix);
                Gl.glRotated = new Gl.Delegates.glRotated(Imports.glRotated);
                Gl.glRotatef = new Gl.Delegates.glRotatef(Imports.glRotatef);
                Gl.glScaled = new Gl.Delegates.glScaled(Imports.glScaled);
                Gl.glScalef = new Gl.Delegates.glScalef(Imports.glScalef);
                Gl.glTranslated = new Gl.Delegates.glTranslated(Imports.glTranslated);
                Gl.glTranslatef = new Gl.Delegates.glTranslatef(Imports.glTranslatef);
                Gl.glViewport = new Gl.Delegates.glViewport(Imports.glViewport);
                Gl.glArrayElement = new Gl.Delegates.glArrayElement(Imports.glArrayElement);
                Gl.glColorPointer_ = new Gl.Delegates.glColorPointer_(Imports.glColorPointer_);
                Gl.glDisableClientState = new Gl.Delegates.glDisableClientState(Imports.glDisableClientState);
                Gl.glDrawArrays = new Gl.Delegates.glDrawArrays(Imports.glDrawArrays);
                Gl.glDrawElements_ = new Gl.Delegates.glDrawElements_(Imports.glDrawElements_);
                Gl.glEdgeFlagPointer_ = new Gl.Delegates.glEdgeFlagPointer_(Imports.glEdgeFlagPointer_);
                Gl.glEnableClientState = new Gl.Delegates.glEnableClientState(Imports.glEnableClientState);
                Gl.glGetPointerv_ = new Gl.Delegates.glGetPointerv_(Imports.glGetPointerv_);
                Gl.glIndexPointer_ = new Gl.Delegates.glIndexPointer_(Imports.glIndexPointer_);
                Gl.glInterleavedArrays_ = new Gl.Delegates.glInterleavedArrays_(Imports.glInterleavedArrays_);
                Gl.glNormalPointer_ = new Gl.Delegates.glNormalPointer_(Imports.glNormalPointer_);
                Gl.glTexCoordPointer_ = new Gl.Delegates.glTexCoordPointer_(Imports.glTexCoordPointer_);
                Gl.glVertexPointer_ = new Gl.Delegates.glVertexPointer_(Imports.glVertexPointer_);
                Gl.glPolygonOffset = new Gl.Delegates.glPolygonOffset(Imports.glPolygonOffset);
                Gl.glCopyTexImage1D = new Gl.Delegates.glCopyTexImage1D(Imports.glCopyTexImage1D);
                Gl.glCopyTexImage2D = new Gl.Delegates.glCopyTexImage2D(Imports.glCopyTexImage2D);
                Gl.glCopyTexSubImage1D = new Gl.Delegates.glCopyTexSubImage1D(Imports.glCopyTexSubImage1D);
                Gl.glCopyTexSubImage2D = new Gl.Delegates.glCopyTexSubImage2D(Imports.glCopyTexSubImage2D);
                Gl.glTexSubImage1D_ = new Gl.Delegates.glTexSubImage1D_(Imports.glTexSubImage1D_);
                Gl.glTexSubImage2D_ = new Gl.Delegates.glTexSubImage2D_(Imports.glTexSubImage2D_);
                Gl.glAreTexturesResident_ = new Gl.Delegates.glAreTexturesResident_(Imports.glAreTexturesResident_);
                Gl.glBindTexture = new Gl.Delegates.glBindTexture(Imports.glBindTexture);
                Gl.glDeleteTextures_ = new Gl.Delegates.glDeleteTextures_(Imports.glDeleteTextures_);
                Gl.glGenTextures_ = new Gl.Delegates.glGenTextures_(Imports.glGenTextures_);
                Gl.glIsTexture = new Gl.Delegates.glIsTexture(Imports.glIsTexture);
                Gl.glPrioritizeTextures_ = new Gl.Delegates.glPrioritizeTextures_(Imports.glPrioritizeTextures_);
                Gl.glIndexub = new Gl.Delegates.glIndexub(Imports.glIndexub);
                Gl.glIndexubv_ = new Gl.Delegates.glIndexubv_(Imports.glIndexubv_);
                Gl.glPopClientAttrib = new Gl.Delegates.glPopClientAttrib(Imports.glPopClientAttrib);
                Gl.glPushClientAttrib = new Gl.Delegates.glPushClientAttrib(Imports.glPushClientAttrib);
                Gl.glBlendColor = new Gl.Delegates.glBlendColor(Imports.glBlendColor);
                Gl.glBlendEquation = new Gl.Delegates.glBlendEquation(Imports.glBlendEquation);
                Gl.glDrawRangeElements_ = new Gl.Delegates.glDrawRangeElements_(Imports.glDrawRangeElements_);
                Gl.glColorTable_ = new Gl.Delegates.glColorTable_(Imports.glColorTable_);
                Gl.glColorTableParameterfv_ = new Gl.Delegates.glColorTableParameterfv_(Imports.glColorTableParameterfv_);
                Gl.glColorTableParameteriv_ = new Gl.Delegates.glColorTableParameteriv_(Imports.glColorTableParameteriv_);
                Gl.glCopyColorTable = new Gl.Delegates.glCopyColorTable(Imports.glCopyColorTable);
                Gl.glGetColorTable_ = new Gl.Delegates.glGetColorTable_(Imports.glGetColorTable_);
                Gl.glGetColorTableParameterfv_ = new Gl.Delegates.glGetColorTableParameterfv_(Imports.glGetColorTableParameterfv_);
                Gl.glGetColorTableParameteriv_ = new Gl.Delegates.glGetColorTableParameteriv_(Imports.glGetColorTableParameteriv_);
                Gl.glColorSubTable_ = new Gl.Delegates.glColorSubTable_(Imports.glColorSubTable_);
                Gl.glCopyColorSubTable = new Gl.Delegates.glCopyColorSubTable(Imports.glCopyColorSubTable);
                Gl.glConvolutionFilter1D_ = new Gl.Delegates.glConvolutionFilter1D_(Imports.glConvolutionFilter1D_);
                Gl.glConvolutionFilter2D_ = new Gl.Delegates.glConvolutionFilter2D_(Imports.glConvolutionFilter2D_);
                Gl.glConvolutionParameterf = new Gl.Delegates.glConvolutionParameterf(Imports.glConvolutionParameterf);
                Gl.glConvolutionParameterfv_ = new Gl.Delegates.glConvolutionParameterfv_(Imports.glConvolutionParameterfv_);
                Gl.glConvolutionParameteri = new Gl.Delegates.glConvolutionParameteri(Imports.glConvolutionParameteri);
                Gl.glConvolutionParameteriv_ = new Gl.Delegates.glConvolutionParameteriv_(Imports.glConvolutionParameteriv_);
                Gl.glCopyConvolutionFilter1D = new Gl.Delegates.glCopyConvolutionFilter1D(Imports.glCopyConvolutionFilter1D);
                Gl.glCopyConvolutionFilter2D = new Gl.Delegates.glCopyConvolutionFilter2D(Imports.glCopyConvolutionFilter2D);
                Gl.glGetConvolutionFilter_ = new Gl.Delegates.glGetConvolutionFilter_(Imports.glGetConvolutionFilter_);
                Gl.glGetConvolutionParameterfv_ = new Gl.Delegates.glGetConvolutionParameterfv_(Imports.glGetConvolutionParameterfv_);
                Gl.glGetConvolutionParameteriv_ = new Gl.Delegates.glGetConvolutionParameteriv_(Imports.glGetConvolutionParameteriv_);
                Gl.glGetSeparableFilter_ = new Gl.Delegates.glGetSeparableFilter_(Imports.glGetSeparableFilter_);
                Gl.glSeparableFilter2D_ = new Gl.Delegates.glSeparableFilter2D_(Imports.glSeparableFilter2D_);
                Gl.glGetHistogram_ = new Gl.Delegates.glGetHistogram_(Imports.glGetHistogram_);
                Gl.glGetHistogramParameterfv_ = new Gl.Delegates.glGetHistogramParameterfv_(Imports.glGetHistogramParameterfv_);
                Gl.glGetHistogramParameteriv_ = new Gl.Delegates.glGetHistogramParameteriv_(Imports.glGetHistogramParameteriv_);
                Gl.glGetMinmax_ = new Gl.Delegates.glGetMinmax_(Imports.glGetMinmax_);
                Gl.glGetMinmaxParameterfv_ = new Gl.Delegates.glGetMinmaxParameterfv_(Imports.glGetMinmaxParameterfv_);
                Gl.glGetMinmaxParameteriv_ = new Gl.Delegates.glGetMinmaxParameteriv_(Imports.glGetMinmaxParameteriv_);
                Gl.glHistogram = new Gl.Delegates.glHistogram(Imports.glHistogram);
                Gl.glMinmax = new Gl.Delegates.glMinmax(Imports.glMinmax);
                Gl.glResetHistogram = new Gl.Delegates.glResetHistogram(Imports.glResetHistogram);
                Gl.glResetMinmax = new Gl.Delegates.glResetMinmax(Imports.glResetMinmax);
                Gl.glTexImage3D_ = new Gl.Delegates.glTexImage3D_(Imports.glTexImage3D_);
                Gl.glTexSubImage3D_ = new Gl.Delegates.glTexSubImage3D_(Imports.glTexSubImage3D_);
                Gl.glCopyTexSubImage3D = new Gl.Delegates.glCopyTexSubImage3D(Imports.glCopyTexSubImage3D);
                Gl.glActiveTexture = new Gl.Delegates.glActiveTexture(Imports.glActiveTexture);
                Gl.glClientActiveTexture = new Gl.Delegates.glClientActiveTexture(Imports.glClientActiveTexture);
                Gl.glMultiTexCoord1d = new Gl.Delegates.glMultiTexCoord1d(Imports.glMultiTexCoord1d);
                Gl.glMultiTexCoord1dv_ = new Gl.Delegates.glMultiTexCoord1dv_(Imports.glMultiTexCoord1dv_);
                Gl.glMultiTexCoord1f = new Gl.Delegates.glMultiTexCoord1f(Imports.glMultiTexCoord1f);
                Gl.glMultiTexCoord1fv_ = new Gl.Delegates.glMultiTexCoord1fv_(Imports.glMultiTexCoord1fv_);
                Gl.glMultiTexCoord1i = new Gl.Delegates.glMultiTexCoord1i(Imports.glMultiTexCoord1i);
                Gl.glMultiTexCoord1iv_ = new Gl.Delegates.glMultiTexCoord1iv_(Imports.glMultiTexCoord1iv_);
                Gl.glMultiTexCoord1s = new Gl.Delegates.glMultiTexCoord1s(Imports.glMultiTexCoord1s);
                Gl.glMultiTexCoord1sv_ = new Gl.Delegates.glMultiTexCoord1sv_(Imports.glMultiTexCoord1sv_);
                Gl.glMultiTexCoord2d = new Gl.Delegates.glMultiTexCoord2d(Imports.glMultiTexCoord2d);
                Gl.glMultiTexCoord2dv_ = new Gl.Delegates.glMultiTexCoord2dv_(Imports.glMultiTexCoord2dv_);
                Gl.glMultiTexCoord2f = new Gl.Delegates.glMultiTexCoord2f(Imports.glMultiTexCoord2f);
                Gl.glMultiTexCoord2fv_ = new Gl.Delegates.glMultiTexCoord2fv_(Imports.glMultiTexCoord2fv_);
                Gl.glMultiTexCoord2i = new Gl.Delegates.glMultiTexCoord2i(Imports.glMultiTexCoord2i);
                Gl.glMultiTexCoord2iv_ = new Gl.Delegates.glMultiTexCoord2iv_(Imports.glMultiTexCoord2iv_);
                Gl.glMultiTexCoord2s = new Gl.Delegates.glMultiTexCoord2s(Imports.glMultiTexCoord2s);
                Gl.glMultiTexCoord2sv_ = new Gl.Delegates.glMultiTexCoord2sv_(Imports.glMultiTexCoord2sv_);
                Gl.glMultiTexCoord3d = new Gl.Delegates.glMultiTexCoord3d(Imports.glMultiTexCoord3d);
                Gl.glMultiTexCoord3dv_ = new Gl.Delegates.glMultiTexCoord3dv_(Imports.glMultiTexCoord3dv_);
                Gl.glMultiTexCoord3f = new Gl.Delegates.glMultiTexCoord3f(Imports.glMultiTexCoord3f);
                Gl.glMultiTexCoord3fv_ = new Gl.Delegates.glMultiTexCoord3fv_(Imports.glMultiTexCoord3fv_);
                Gl.glMultiTexCoord3i = new Gl.Delegates.glMultiTexCoord3i(Imports.glMultiTexCoord3i);
                Gl.glMultiTexCoord3iv_ = new Gl.Delegates.glMultiTexCoord3iv_(Imports.glMultiTexCoord3iv_);
                Gl.glMultiTexCoord3s = new Gl.Delegates.glMultiTexCoord3s(Imports.glMultiTexCoord3s);
                Gl.glMultiTexCoord3sv_ = new Gl.Delegates.glMultiTexCoord3sv_(Imports.glMultiTexCoord3sv_);
                Gl.glMultiTexCoord4d = new Gl.Delegates.glMultiTexCoord4d(Imports.glMultiTexCoord4d);
                Gl.glMultiTexCoord4dv_ = new Gl.Delegates.glMultiTexCoord4dv_(Imports.glMultiTexCoord4dv_);
                Gl.glMultiTexCoord4f = new Gl.Delegates.glMultiTexCoord4f(Imports.glMultiTexCoord4f);
                Gl.glMultiTexCoord4fv_ = new Gl.Delegates.glMultiTexCoord4fv_(Imports.glMultiTexCoord4fv_);
                Gl.glMultiTexCoord4i = new Gl.Delegates.glMultiTexCoord4i(Imports.glMultiTexCoord4i);
                Gl.glMultiTexCoord4iv_ = new Gl.Delegates.glMultiTexCoord4iv_(Imports.glMultiTexCoord4iv_);
                Gl.glMultiTexCoord4s = new Gl.Delegates.glMultiTexCoord4s(Imports.glMultiTexCoord4s);
                Gl.glMultiTexCoord4sv_ = new Gl.Delegates.glMultiTexCoord4sv_(Imports.glMultiTexCoord4sv_);
                Gl.glLoadTransposeMatrixf_ = new Gl.Delegates.glLoadTransposeMatrixf_(Imports.glLoadTransposeMatrixf_);
                Gl.glLoadTransposeMatrixd_ = new Gl.Delegates.glLoadTransposeMatrixd_(Imports.glLoadTransposeMatrixd_);
                Gl.glMultTransposeMatrixf_ = new Gl.Delegates.glMultTransposeMatrixf_(Imports.glMultTransposeMatrixf_);
                Gl.glMultTransposeMatrixd_ = new Gl.Delegates.glMultTransposeMatrixd_(Imports.glMultTransposeMatrixd_);
                Gl.glSampleCoverage = new Gl.Delegates.glSampleCoverage(Imports.glSampleCoverage);
                Gl.glCompressedTexImage3D_ = new Gl.Delegates.glCompressedTexImage3D_(Imports.glCompressedTexImage3D_);
                Gl.glCompressedTexImage2D_ = new Gl.Delegates.glCompressedTexImage2D_(Imports.glCompressedTexImage2D_);
                Gl.glCompressedTexImage1D_ = new Gl.Delegates.glCompressedTexImage1D_(Imports.glCompressedTexImage1D_);
                Gl.glCompressedTexSubImage3D_ = new Gl.Delegates.glCompressedTexSubImage3D_(Imports.glCompressedTexSubImage3D_);
                Gl.glCompressedTexSubImage2D_ = new Gl.Delegates.glCompressedTexSubImage2D_(Imports.glCompressedTexSubImage2D_);
                Gl.glCompressedTexSubImage1D_ = new Gl.Delegates.glCompressedTexSubImage1D_(Imports.glCompressedTexSubImage1D_);
                Gl.glGetCompressedTexImage_ = new Gl.Delegates.glGetCompressedTexImage_(Imports.glGetCompressedTexImage_);
                Gl.glBlendFuncSeparate = new Gl.Delegates.glBlendFuncSeparate(Imports.glBlendFuncSeparate);
                Gl.glFogCoordf = new Gl.Delegates.glFogCoordf(Imports.glFogCoordf);
                Gl.glFogCoordfv_ = new Gl.Delegates.glFogCoordfv_(Imports.glFogCoordfv_);
                Gl.glFogCoordd = new Gl.Delegates.glFogCoordd(Imports.glFogCoordd);
                Gl.glFogCoorddv_ = new Gl.Delegates.glFogCoorddv_(Imports.glFogCoorddv_);
                Gl.glFogCoordPointer_ = new Gl.Delegates.glFogCoordPointer_(Imports.glFogCoordPointer_);
                Gl.glMultiDrawArrays_ = new Gl.Delegates.glMultiDrawArrays_(Imports.glMultiDrawArrays_);
                Gl.glMultiDrawElements_ = new Gl.Delegates.glMultiDrawElements_(Imports.glMultiDrawElements_);
                Gl.glPointParameterf = new Gl.Delegates.glPointParameterf(Imports.glPointParameterf);
                Gl.glPointParameterfv_ = new Gl.Delegates.glPointParameterfv_(Imports.glPointParameterfv_);
                Gl.glPointParameteri = new Gl.Delegates.glPointParameteri(Imports.glPointParameteri);
                Gl.glPointParameteriv_ = new Gl.Delegates.glPointParameteriv_(Imports.glPointParameteriv_);
                Gl.glSecondaryColor3b = new Gl.Delegates.glSecondaryColor3b(Imports.glSecondaryColor3b);
                Gl.glSecondaryColor3bv_ = new Gl.Delegates.glSecondaryColor3bv_(Imports.glSecondaryColor3bv_);
                Gl.glSecondaryColor3d = new Gl.Delegates.glSecondaryColor3d(Imports.glSecondaryColor3d);
                Gl.glSecondaryColor3dv_ = new Gl.Delegates.glSecondaryColor3dv_(Imports.glSecondaryColor3dv_);
                Gl.glSecondaryColor3f = new Gl.Delegates.glSecondaryColor3f(Imports.glSecondaryColor3f);
                Gl.glSecondaryColor3fv_ = new Gl.Delegates.glSecondaryColor3fv_(Imports.glSecondaryColor3fv_);
                Gl.glSecondaryColor3i = new Gl.Delegates.glSecondaryColor3i(Imports.glSecondaryColor3i);
                Gl.glSecondaryColor3iv_ = new Gl.Delegates.glSecondaryColor3iv_(Imports.glSecondaryColor3iv_);
                Gl.glSecondaryColor3s = new Gl.Delegates.glSecondaryColor3s(Imports.glSecondaryColor3s);
                Gl.glSecondaryColor3sv_ = new Gl.Delegates.glSecondaryColor3sv_(Imports.glSecondaryColor3sv_);
                Gl.glSecondaryColor3ub = new Gl.Delegates.glSecondaryColor3ub(Imports.glSecondaryColor3ub);
                Gl.glSecondaryColor3ubv_ = new Gl.Delegates.glSecondaryColor3ubv_(Imports.glSecondaryColor3ubv_);
                Gl.glSecondaryColor3ui = new Gl.Delegates.glSecondaryColor3ui(Imports.glSecondaryColor3ui);
                Gl.glSecondaryColor3uiv_ = new Gl.Delegates.glSecondaryColor3uiv_(Imports.glSecondaryColor3uiv_);
                Gl.glSecondaryColor3us = new Gl.Delegates.glSecondaryColor3us(Imports.glSecondaryColor3us);
                Gl.glSecondaryColor3usv_ = new Gl.Delegates.glSecondaryColor3usv_(Imports.glSecondaryColor3usv_);
                Gl.glSecondaryColorPointer_ = new Gl.Delegates.glSecondaryColorPointer_(Imports.glSecondaryColorPointer_);
                Gl.glWindowPos2d = new Gl.Delegates.glWindowPos2d(Imports.glWindowPos2d);
                Gl.glWindowPos2dv_ = new Gl.Delegates.glWindowPos2dv_(Imports.glWindowPos2dv_);
                Gl.glWindowPos2f = new Gl.Delegates.glWindowPos2f(Imports.glWindowPos2f);
                Gl.glWindowPos2fv_ = new Gl.Delegates.glWindowPos2fv_(Imports.glWindowPos2fv_);
                Gl.glWindowPos2i = new Gl.Delegates.glWindowPos2i(Imports.glWindowPos2i);
                Gl.glWindowPos2iv_ = new Gl.Delegates.glWindowPos2iv_(Imports.glWindowPos2iv_);
                Gl.glWindowPos2s = new Gl.Delegates.glWindowPos2s(Imports.glWindowPos2s);
                Gl.glWindowPos2sv_ = new Gl.Delegates.glWindowPos2sv_(Imports.glWindowPos2sv_);
                Gl.glWindowPos3d = new Gl.Delegates.glWindowPos3d(Imports.glWindowPos3d);
                Gl.glWindowPos3dv_ = new Gl.Delegates.glWindowPos3dv_(Imports.glWindowPos3dv_);
                Gl.glWindowPos3f = new Gl.Delegates.glWindowPos3f(Imports.glWindowPos3f);
                Gl.glWindowPos3fv_ = new Gl.Delegates.glWindowPos3fv_(Imports.glWindowPos3fv_);
                Gl.glWindowPos3i = new Gl.Delegates.glWindowPos3i(Imports.glWindowPos3i);
                Gl.glWindowPos3iv_ = new Gl.Delegates.glWindowPos3iv_(Imports.glWindowPos3iv_);
                Gl.glWindowPos3s = new Gl.Delegates.glWindowPos3s(Imports.glWindowPos3s);
                Gl.glWindowPos3sv_ = new Gl.Delegates.glWindowPos3sv_(Imports.glWindowPos3sv_);
                #endregion Windows Vista Core
            }
            else if (Environment.OSVersion.Platform == PlatformID.Unix)
            {
                #region X11 Core
                Gl.glNewList = new Gl.Delegates.glNewList(Imports.glNewList);
                Gl.glEndList = new Gl.Delegates.glEndList(Imports.glEndList);
                Gl.glCallList = new Gl.Delegates.glCallList(Imports.glCallList);
                Gl.glCallLists_ = new Gl.Delegates.glCallLists_(Imports.glCallLists_);
                Gl.glDeleteLists = new Gl.Delegates.glDeleteLists(Imports.glDeleteLists);
                Gl.glGenLists = new Gl.Delegates.glGenLists(Imports.glGenLists);
                Gl.glListBase = new Gl.Delegates.glListBase(Imports.glListBase);
                Gl.glBegin = new Gl.Delegates.glBegin(Imports.glBegin);
                Gl.glBitmap_ = new Gl.Delegates.glBitmap_(Imports.glBitmap_);
                Gl.glColor3b = new Gl.Delegates.glColor3b(Imports.glColor3b);
                Gl.glColor3bv_ = new Gl.Delegates.glColor3bv_(Imports.glColor3bv_);
                Gl.glColor3d = new Gl.Delegates.glColor3d(Imports.glColor3d);
                Gl.glColor3dv_ = new Gl.Delegates.glColor3dv_(Imports.glColor3dv_);
                Gl.glColor3f = new Gl.Delegates.glColor3f(Imports.glColor3f);
                Gl.glColor3fv_ = new Gl.Delegates.glColor3fv_(Imports.glColor3fv_);
                Gl.glColor3i = new Gl.Delegates.glColor3i(Imports.glColor3i);
                Gl.glColor3iv_ = new Gl.Delegates.glColor3iv_(Imports.glColor3iv_);
                Gl.glColor3s = new Gl.Delegates.glColor3s(Imports.glColor3s);
                Gl.glColor3sv_ = new Gl.Delegates.glColor3sv_(Imports.glColor3sv_);
                Gl.glColor3ub = new Gl.Delegates.glColor3ub(Imports.glColor3ub);
                Gl.glColor3ubv_ = new Gl.Delegates.glColor3ubv_(Imports.glColor3ubv_);
                Gl.glColor3ui = new Gl.Delegates.glColor3ui(Imports.glColor3ui);
                Gl.glColor3uiv_ = new Gl.Delegates.glColor3uiv_(Imports.glColor3uiv_);
                Gl.glColor3us = new Gl.Delegates.glColor3us(Imports.glColor3us);
                Gl.glColor3usv_ = new Gl.Delegates.glColor3usv_(Imports.glColor3usv_);
                Gl.glColor4b = new Gl.Delegates.glColor4b(Imports.glColor4b);
                Gl.glColor4bv_ = new Gl.Delegates.glColor4bv_(Imports.glColor4bv_);
                Gl.glColor4d = new Gl.Delegates.glColor4d(Imports.glColor4d);
                Gl.glColor4dv_ = new Gl.Delegates.glColor4dv_(Imports.glColor4dv_);
                Gl.glColor4f = new Gl.Delegates.glColor4f(Imports.glColor4f);
                Gl.glColor4fv_ = new Gl.Delegates.glColor4fv_(Imports.glColor4fv_);
                Gl.glColor4i = new Gl.Delegates.glColor4i(Imports.glColor4i);
                Gl.glColor4iv_ = new Gl.Delegates.glColor4iv_(Imports.glColor4iv_);
                Gl.glColor4s = new Gl.Delegates.glColor4s(Imports.glColor4s);
                Gl.glColor4sv_ = new Gl.Delegates.glColor4sv_(Imports.glColor4sv_);
                Gl.glColor4ub = new Gl.Delegates.glColor4ub(Imports.glColor4ub);
                Gl.glColor4ubv_ = new Gl.Delegates.glColor4ubv_(Imports.glColor4ubv_);
                Gl.glColor4ui = new Gl.Delegates.glColor4ui(Imports.glColor4ui);
                Gl.glColor4uiv_ = new Gl.Delegates.glColor4uiv_(Imports.glColor4uiv_);
                Gl.glColor4us = new Gl.Delegates.glColor4us(Imports.glColor4us);
                Gl.glColor4usv_ = new Gl.Delegates.glColor4usv_(Imports.glColor4usv_);
                Gl.glEdgeFlag = new Gl.Delegates.glEdgeFlag(Imports.glEdgeFlag);
                Gl.glEdgeFlagv_ = new Gl.Delegates.glEdgeFlagv_(Imports.glEdgeFlagv_);
                Gl.glEnd = new Gl.Delegates.glEnd(Imports.glEnd);
                Gl.glIndexd = new Gl.Delegates.glIndexd(Imports.glIndexd);
                Gl.glIndexdv_ = new Gl.Delegates.glIndexdv_(Imports.glIndexdv_);
                Gl.glIndexf = new Gl.Delegates.glIndexf(Imports.glIndexf);
                Gl.glIndexfv_ = new Gl.Delegates.glIndexfv_(Imports.glIndexfv_);
                Gl.glIndexi = new Gl.Delegates.glIndexi(Imports.glIndexi);
                Gl.glIndexiv_ = new Gl.Delegates.glIndexiv_(Imports.glIndexiv_);
                Gl.glIndexs = new Gl.Delegates.glIndexs(Imports.glIndexs);
                Gl.glIndexsv_ = new Gl.Delegates.glIndexsv_(Imports.glIndexsv_);
                Gl.glNormal3b = new Gl.Delegates.glNormal3b(Imports.glNormal3b);
                Gl.glNormal3bv_ = new Gl.Delegates.glNormal3bv_(Imports.glNormal3bv_);
                Gl.glNormal3d = new Gl.Delegates.glNormal3d(Imports.glNormal3d);
                Gl.glNormal3dv_ = new Gl.Delegates.glNormal3dv_(Imports.glNormal3dv_);
                Gl.glNormal3f = new Gl.Delegates.glNormal3f(Imports.glNormal3f);
                Gl.glNormal3fv_ = new Gl.Delegates.glNormal3fv_(Imports.glNormal3fv_);
                Gl.glNormal3i = new Gl.Delegates.glNormal3i(Imports.glNormal3i);
                Gl.glNormal3iv_ = new Gl.Delegates.glNormal3iv_(Imports.glNormal3iv_);
                Gl.glNormal3s = new Gl.Delegates.glNormal3s(Imports.glNormal3s);
                Gl.glNormal3sv_ = new Gl.Delegates.glNormal3sv_(Imports.glNormal3sv_);
                Gl.glRasterPos2d = new Gl.Delegates.glRasterPos2d(Imports.glRasterPos2d);
                Gl.glRasterPos2dv_ = new Gl.Delegates.glRasterPos2dv_(Imports.glRasterPos2dv_);
                Gl.glRasterPos2f = new Gl.Delegates.glRasterPos2f(Imports.glRasterPos2f);
                Gl.glRasterPos2fv_ = new Gl.Delegates.glRasterPos2fv_(Imports.glRasterPos2fv_);
                Gl.glRasterPos2i = new Gl.Delegates.glRasterPos2i(Imports.glRasterPos2i);
                Gl.glRasterPos2iv_ = new Gl.Delegates.glRasterPos2iv_(Imports.glRasterPos2iv_);
                Gl.glRasterPos2s = new Gl.Delegates.glRasterPos2s(Imports.glRasterPos2s);
                Gl.glRasterPos2sv_ = new Gl.Delegates.glRasterPos2sv_(Imports.glRasterPos2sv_);
                Gl.glRasterPos3d = new Gl.Delegates.glRasterPos3d(Imports.glRasterPos3d);
                Gl.glRasterPos3dv_ = new Gl.Delegates.glRasterPos3dv_(Imports.glRasterPos3dv_);
                Gl.glRasterPos3f = new Gl.Delegates.glRasterPos3f(Imports.glRasterPos3f);
                Gl.glRasterPos3fv_ = new Gl.Delegates.glRasterPos3fv_(Imports.glRasterPos3fv_);
                Gl.glRasterPos3i = new Gl.Delegates.glRasterPos3i(Imports.glRasterPos3i);
                Gl.glRasterPos3iv_ = new Gl.Delegates.glRasterPos3iv_(Imports.glRasterPos3iv_);
                Gl.glRasterPos3s = new Gl.Delegates.glRasterPos3s(Imports.glRasterPos3s);
                Gl.glRasterPos3sv_ = new Gl.Delegates.glRasterPos3sv_(Imports.glRasterPos3sv_);
                Gl.glRasterPos4d = new Gl.Delegates.glRasterPos4d(Imports.glRasterPos4d);
                Gl.glRasterPos4dv_ = new Gl.Delegates.glRasterPos4dv_(Imports.glRasterPos4dv_);
                Gl.glRasterPos4f = new Gl.Delegates.glRasterPos4f(Imports.glRasterPos4f);
                Gl.glRasterPos4fv_ = new Gl.Delegates.glRasterPos4fv_(Imports.glRasterPos4fv_);
                Gl.glRasterPos4i = new Gl.Delegates.glRasterPos4i(Imports.glRasterPos4i);
                Gl.glRasterPos4iv_ = new Gl.Delegates.glRasterPos4iv_(Imports.glRasterPos4iv_);
                Gl.glRasterPos4s = new Gl.Delegates.glRasterPos4s(Imports.glRasterPos4s);
                Gl.glRasterPos4sv_ = new Gl.Delegates.glRasterPos4sv_(Imports.glRasterPos4sv_);
                Gl.glRectd = new Gl.Delegates.glRectd(Imports.glRectd);
                Gl.glRectdv_ = new Gl.Delegates.glRectdv_(Imports.glRectdv_);
                Gl.glRectf = new Gl.Delegates.glRectf(Imports.glRectf);
                Gl.glRectfv_ = new Gl.Delegates.glRectfv_(Imports.glRectfv_);
                Gl.glRecti = new Gl.Delegates.glRecti(Imports.glRecti);
                Gl.glRectiv_ = new Gl.Delegates.glRectiv_(Imports.glRectiv_);
                Gl.glRects = new Gl.Delegates.glRects(Imports.glRects);
                Gl.glRectsv_ = new Gl.Delegates.glRectsv_(Imports.glRectsv_);
                Gl.glTexCoord1d = new Gl.Delegates.glTexCoord1d(Imports.glTexCoord1d);
                Gl.glTexCoord1dv_ = new Gl.Delegates.glTexCoord1dv_(Imports.glTexCoord1dv_);
                Gl.glTexCoord1f = new Gl.Delegates.glTexCoord1f(Imports.glTexCoord1f);
                Gl.glTexCoord1fv_ = new Gl.Delegates.glTexCoord1fv_(Imports.glTexCoord1fv_);
                Gl.glTexCoord1i = new Gl.Delegates.glTexCoord1i(Imports.glTexCoord1i);
                Gl.glTexCoord1iv_ = new Gl.Delegates.glTexCoord1iv_(Imports.glTexCoord1iv_);
                Gl.glTexCoord1s = new Gl.Delegates.glTexCoord1s(Imports.glTexCoord1s);
                Gl.glTexCoord1sv_ = new Gl.Delegates.glTexCoord1sv_(Imports.glTexCoord1sv_);
                Gl.glTexCoord2d = new Gl.Delegates.glTexCoord2d(Imports.glTexCoord2d);
                Gl.glTexCoord2dv_ = new Gl.Delegates.glTexCoord2dv_(Imports.glTexCoord2dv_);
                Gl.glTexCoord2f = new Gl.Delegates.glTexCoord2f(Imports.glTexCoord2f);
                Gl.glTexCoord2fv_ = new Gl.Delegates.glTexCoord2fv_(Imports.glTexCoord2fv_);
                Gl.glTexCoord2i = new Gl.Delegates.glTexCoord2i(Imports.glTexCoord2i);
                Gl.glTexCoord2iv_ = new Gl.Delegates.glTexCoord2iv_(Imports.glTexCoord2iv_);
                Gl.glTexCoord2s = new Gl.Delegates.glTexCoord2s(Imports.glTexCoord2s);
                Gl.glTexCoord2sv_ = new Gl.Delegates.glTexCoord2sv_(Imports.glTexCoord2sv_);
                Gl.glTexCoord3d = new Gl.Delegates.glTexCoord3d(Imports.glTexCoord3d);
                Gl.glTexCoord3dv_ = new Gl.Delegates.glTexCoord3dv_(Imports.glTexCoord3dv_);
                Gl.glTexCoord3f = new Gl.Delegates.glTexCoord3f(Imports.glTexCoord3f);
                Gl.glTexCoord3fv_ = new Gl.Delegates.glTexCoord3fv_(Imports.glTexCoord3fv_);
                Gl.glTexCoord3i = new Gl.Delegates.glTexCoord3i(Imports.glTexCoord3i);
                Gl.glTexCoord3iv_ = new Gl.Delegates.glTexCoord3iv_(Imports.glTexCoord3iv_);
                Gl.glTexCoord3s = new Gl.Delegates.glTexCoord3s(Imports.glTexCoord3s);
                Gl.glTexCoord3sv_ = new Gl.Delegates.glTexCoord3sv_(Imports.glTexCoord3sv_);
                Gl.glTexCoord4d = new Gl.Delegates.glTexCoord4d(Imports.glTexCoord4d);
                Gl.glTexCoord4dv_ = new Gl.Delegates.glTexCoord4dv_(Imports.glTexCoord4dv_);
                Gl.glTexCoord4f = new Gl.Delegates.glTexCoord4f(Imports.glTexCoord4f);
                Gl.glTexCoord4fv_ = new Gl.Delegates.glTexCoord4fv_(Imports.glTexCoord4fv_);
                Gl.glTexCoord4i = new Gl.Delegates.glTexCoord4i(Imports.glTexCoord4i);
                Gl.glTexCoord4iv_ = new Gl.Delegates.glTexCoord4iv_(Imports.glTexCoord4iv_);
                Gl.glTexCoord4s = new Gl.Delegates.glTexCoord4s(Imports.glTexCoord4s);
                Gl.glTexCoord4sv_ = new Gl.Delegates.glTexCoord4sv_(Imports.glTexCoord4sv_);
                Gl.glVertex2d = new Gl.Delegates.glVertex2d(Imports.glVertex2d);
                Gl.glVertex2dv_ = new Gl.Delegates.glVertex2dv_(Imports.glVertex2dv_);
                Gl.glVertex2f = new Gl.Delegates.glVertex2f(Imports.glVertex2f);
                Gl.glVertex2fv_ = new Gl.Delegates.glVertex2fv_(Imports.glVertex2fv_);
                Gl.glVertex2i = new Gl.Delegates.glVertex2i(Imports.glVertex2i);
                Gl.glVertex2iv_ = new Gl.Delegates.glVertex2iv_(Imports.glVertex2iv_);
                Gl.glVertex2s = new Gl.Delegates.glVertex2s(Imports.glVertex2s);
                Gl.glVertex2sv_ = new Gl.Delegates.glVertex2sv_(Imports.glVertex2sv_);
                Gl.glVertex3d = new Gl.Delegates.glVertex3d(Imports.glVertex3d);
                Gl.glVertex3dv_ = new Gl.Delegates.glVertex3dv_(Imports.glVertex3dv_);
                Gl.glVertex3f = new Gl.Delegates.glVertex3f(Imports.glVertex3f);
                Gl.glVertex3fv_ = new Gl.Delegates.glVertex3fv_(Imports.glVertex3fv_);
                Gl.glVertex3i = new Gl.Delegates.glVertex3i(Imports.glVertex3i);
                Gl.glVertex3iv_ = new Gl.Delegates.glVertex3iv_(Imports.glVertex3iv_);
                Gl.glVertex3s = new Gl.Delegates.glVertex3s(Imports.glVertex3s);
                Gl.glVertex3sv_ = new Gl.Delegates.glVertex3sv_(Imports.glVertex3sv_);
                Gl.glVertex4d = new Gl.Delegates.glVertex4d(Imports.glVertex4d);
                Gl.glVertex4dv_ = new Gl.Delegates.glVertex4dv_(Imports.glVertex4dv_);
                Gl.glVertex4f = new Gl.Delegates.glVertex4f(Imports.glVertex4f);
                Gl.glVertex4fv_ = new Gl.Delegates.glVertex4fv_(Imports.glVertex4fv_);
                Gl.glVertex4i = new Gl.Delegates.glVertex4i(Imports.glVertex4i);
                Gl.glVertex4iv_ = new Gl.Delegates.glVertex4iv_(Imports.glVertex4iv_);
                Gl.glVertex4s = new Gl.Delegates.glVertex4s(Imports.glVertex4s);
                Gl.glVertex4sv_ = new Gl.Delegates.glVertex4sv_(Imports.glVertex4sv_);
                Gl.glClipPlane_ = new Gl.Delegates.glClipPlane_(Imports.glClipPlane_);
                Gl.glColorMaterial = new Gl.Delegates.glColorMaterial(Imports.glColorMaterial);
                Gl.glCullFace = new Gl.Delegates.glCullFace(Imports.glCullFace);
                Gl.glFogf = new Gl.Delegates.glFogf(Imports.glFogf);
                Gl.glFogfv_ = new Gl.Delegates.glFogfv_(Imports.glFogfv_);
                Gl.glFogi = new Gl.Delegates.glFogi(Imports.glFogi);
                Gl.glFogiv_ = new Gl.Delegates.glFogiv_(Imports.glFogiv_);
                Gl.glFrontFace = new Gl.Delegates.glFrontFace(Imports.glFrontFace);
                Gl.glHint = new Gl.Delegates.glHint(Imports.glHint);
                Gl.glLightf = new Gl.Delegates.glLightf(Imports.glLightf);
                Gl.glLightfv_ = new Gl.Delegates.glLightfv_(Imports.glLightfv_);
                Gl.glLighti = new Gl.Delegates.glLighti(Imports.glLighti);
                Gl.glLightiv_ = new Gl.Delegates.glLightiv_(Imports.glLightiv_);
                Gl.glLightModelf = new Gl.Delegates.glLightModelf(Imports.glLightModelf);
                Gl.glLightModelfv_ = new Gl.Delegates.glLightModelfv_(Imports.glLightModelfv_);
                Gl.glLightModeli = new Gl.Delegates.glLightModeli(Imports.glLightModeli);
                Gl.glLightModeliv_ = new Gl.Delegates.glLightModeliv_(Imports.glLightModeliv_);
                Gl.glLineStipple_ = new Gl.Delegates.glLineStipple_(Imports.glLineStipple_);
                Gl.glLineWidth = new Gl.Delegates.glLineWidth(Imports.glLineWidth);
                Gl.glMaterialf = new Gl.Delegates.glMaterialf(Imports.glMaterialf);
                Gl.glMaterialfv_ = new Gl.Delegates.glMaterialfv_(Imports.glMaterialfv_);
                Gl.glMateriali = new Gl.Delegates.glMateriali(Imports.glMateriali);
                Gl.glMaterialiv_ = new Gl.Delegates.glMaterialiv_(Imports.glMaterialiv_);
                Gl.glPointSize = new Gl.Delegates.glPointSize(Imports.glPointSize);
                Gl.glPolygonMode = new Gl.Delegates.glPolygonMode(Imports.glPolygonMode);
                Gl.glPolygonStipple_ = new Gl.Delegates.glPolygonStipple_(Imports.glPolygonStipple_);
                Gl.glScissor = new Gl.Delegates.glScissor(Imports.glScissor);
                Gl.glShadeModel = new Gl.Delegates.glShadeModel(Imports.glShadeModel);
                Gl.glTexParameterf = new Gl.Delegates.glTexParameterf(Imports.glTexParameterf);
                Gl.glTexParameterfv_ = new Gl.Delegates.glTexParameterfv_(Imports.glTexParameterfv_);
                Gl.glTexParameteri = new Gl.Delegates.glTexParameteri(Imports.glTexParameteri);
                Gl.glTexParameteriv_ = new Gl.Delegates.glTexParameteriv_(Imports.glTexParameteriv_);
                Gl.glTexImage1D_ = new Gl.Delegates.glTexImage1D_(Imports.glTexImage1D_);
                Gl.glTexImage2D_ = new Gl.Delegates.glTexImage2D_(Imports.glTexImage2D_);
                Gl.glTexEnvf = new Gl.Delegates.glTexEnvf(Imports.glTexEnvf);
                Gl.glTexEnvfv_ = new Gl.Delegates.glTexEnvfv_(Imports.glTexEnvfv_);
                Gl.glTexEnvi = new Gl.Delegates.glTexEnvi(Imports.glTexEnvi);
                Gl.glTexEnviv_ = new Gl.Delegates.glTexEnviv_(Imports.glTexEnviv_);
                Gl.glTexGend = new Gl.Delegates.glTexGend(Imports.glTexGend);
                Gl.glTexGendv_ = new Gl.Delegates.glTexGendv_(Imports.glTexGendv_);
                Gl.glTexGenf = new Gl.Delegates.glTexGenf(Imports.glTexGenf);
                Gl.glTexGenfv_ = new Gl.Delegates.glTexGenfv_(Imports.glTexGenfv_);
                Gl.glTexGeni = new Gl.Delegates.glTexGeni(Imports.glTexGeni);
                Gl.glTexGeniv_ = new Gl.Delegates.glTexGeniv_(Imports.glTexGeniv_);
                Gl.glFeedbackBuffer_ = new Gl.Delegates.glFeedbackBuffer_(Imports.glFeedbackBuffer_);
                Gl.glSelectBuffer_ = new Gl.Delegates.glSelectBuffer_(Imports.glSelectBuffer_);
                Gl.glRenderMode = new Gl.Delegates.glRenderMode(Imports.glRenderMode);
                Gl.glInitNames = new Gl.Delegates.glInitNames(Imports.glInitNames);
                Gl.glLoadName = new Gl.Delegates.glLoadName(Imports.glLoadName);
                Gl.glPassThrough = new Gl.Delegates.glPassThrough(Imports.glPassThrough);
                Gl.glPopName = new Gl.Delegates.glPopName(Imports.glPopName);
                Gl.glPushName = new Gl.Delegates.glPushName(Imports.glPushName);
                Gl.glDrawBuffer = new Gl.Delegates.glDrawBuffer(Imports.glDrawBuffer);
                Gl.glClear = new Gl.Delegates.glClear(Imports.glClear);
                Gl.glClearAccum = new Gl.Delegates.glClearAccum(Imports.glClearAccum);
                Gl.glClearIndex = new Gl.Delegates.glClearIndex(Imports.glClearIndex);
                Gl.glClearColor = new Gl.Delegates.glClearColor(Imports.glClearColor);
                Gl.glClearStencil = new Gl.Delegates.glClearStencil(Imports.glClearStencil);
                Gl.glClearDepth = new Gl.Delegates.glClearDepth(Imports.glClearDepth);
                Gl.glStencilMask = new Gl.Delegates.glStencilMask(Imports.glStencilMask);
                Gl.glColorMask = new Gl.Delegates.glColorMask(Imports.glColorMask);
                Gl.glDepthMask = new Gl.Delegates.glDepthMask(Imports.glDepthMask);
                Gl.glIndexMask = new Gl.Delegates.glIndexMask(Imports.glIndexMask);
                Gl.glAccum = new Gl.Delegates.glAccum(Imports.glAccum);
                Gl.glDisable = new Gl.Delegates.glDisable(Imports.glDisable);
                Gl.glEnable = new Gl.Delegates.glEnable(Imports.glEnable);
                Gl.glFinish = new Gl.Delegates.glFinish(Imports.glFinish);
                Gl.glFlush = new Gl.Delegates.glFlush(Imports.glFlush);
                Gl.glPopAttrib = new Gl.Delegates.glPopAttrib(Imports.glPopAttrib);
                Gl.glPushAttrib = new Gl.Delegates.glPushAttrib(Imports.glPushAttrib);
                Gl.glMap1d_ = new Gl.Delegates.glMap1d_(Imports.glMap1d_);
                Gl.glMap1f_ = new Gl.Delegates.glMap1f_(Imports.glMap1f_);
                Gl.glMap2d_ = new Gl.Delegates.glMap2d_(Imports.glMap2d_);
                Gl.glMap2f_ = new Gl.Delegates.glMap2f_(Imports.glMap2f_);
                Gl.glMapGrid1d = new Gl.Delegates.glMapGrid1d(Imports.glMapGrid1d);
                Gl.glMapGrid1f = new Gl.Delegates.glMapGrid1f(Imports.glMapGrid1f);
                Gl.glMapGrid2d = new Gl.Delegates.glMapGrid2d(Imports.glMapGrid2d);
                Gl.glMapGrid2f = new Gl.Delegates.glMapGrid2f(Imports.glMapGrid2f);
                Gl.glEvalCoord1d = new Gl.Delegates.glEvalCoord1d(Imports.glEvalCoord1d);
                Gl.glEvalCoord1dv_ = new Gl.Delegates.glEvalCoord1dv_(Imports.glEvalCoord1dv_);
                Gl.glEvalCoord1f = new Gl.Delegates.glEvalCoord1f(Imports.glEvalCoord1f);
                Gl.glEvalCoord1fv_ = new Gl.Delegates.glEvalCoord1fv_(Imports.glEvalCoord1fv_);
                Gl.glEvalCoord2d = new Gl.Delegates.glEvalCoord2d(Imports.glEvalCoord2d);
                Gl.glEvalCoord2dv_ = new Gl.Delegates.glEvalCoord2dv_(Imports.glEvalCoord2dv_);
                Gl.glEvalCoord2f = new Gl.Delegates.glEvalCoord2f(Imports.glEvalCoord2f);
                Gl.glEvalCoord2fv_ = new Gl.Delegates.glEvalCoord2fv_(Imports.glEvalCoord2fv_);
                Gl.glEvalMesh1 = new Gl.Delegates.glEvalMesh1(Imports.glEvalMesh1);
                Gl.glEvalPoint1 = new Gl.Delegates.glEvalPoint1(Imports.glEvalPoint1);
                Gl.glEvalMesh2 = new Gl.Delegates.glEvalMesh2(Imports.glEvalMesh2);
                Gl.glEvalPoint2 = new Gl.Delegates.glEvalPoint2(Imports.glEvalPoint2);
                Gl.glAlphaFunc = new Gl.Delegates.glAlphaFunc(Imports.glAlphaFunc);
                Gl.glBlendFunc = new Gl.Delegates.glBlendFunc(Imports.glBlendFunc);
                Gl.glLogicOp = new Gl.Delegates.glLogicOp(Imports.glLogicOp);
                Gl.glStencilFunc = new Gl.Delegates.glStencilFunc(Imports.glStencilFunc);
                Gl.glStencilOp = new Gl.Delegates.glStencilOp(Imports.glStencilOp);
                Gl.glDepthFunc = new Gl.Delegates.glDepthFunc(Imports.glDepthFunc);
                Gl.glPixelZoom = new Gl.Delegates.glPixelZoom(Imports.glPixelZoom);
                Gl.glPixelTransferf = new Gl.Delegates.glPixelTransferf(Imports.glPixelTransferf);
                Gl.glPixelTransferi = new Gl.Delegates.glPixelTransferi(Imports.glPixelTransferi);
                Gl.glPixelStoref = new Gl.Delegates.glPixelStoref(Imports.glPixelStoref);
                Gl.glPixelStorei = new Gl.Delegates.glPixelStorei(Imports.glPixelStorei);
                Gl.glPixelMapfv_ = new Gl.Delegates.glPixelMapfv_(Imports.glPixelMapfv_);
                Gl.glPixelMapuiv_ = new Gl.Delegates.glPixelMapuiv_(Imports.glPixelMapuiv_);
                Gl.glPixelMapusv_ = new Gl.Delegates.glPixelMapusv_(Imports.glPixelMapusv_);
                Gl.glReadBuffer = new Gl.Delegates.glReadBuffer(Imports.glReadBuffer);
                Gl.glCopyPixels = new Gl.Delegates.glCopyPixels(Imports.glCopyPixels);
                Gl.glReadPixels_ = new Gl.Delegates.glReadPixels_(Imports.glReadPixels_);
                Gl.glDrawPixels_ = new Gl.Delegates.glDrawPixels_(Imports.glDrawPixels_);
                Gl.glGetBooleanv_ = new Gl.Delegates.glGetBooleanv_(Imports.glGetBooleanv_);
                Gl.glGetClipPlane_ = new Gl.Delegates.glGetClipPlane_(Imports.glGetClipPlane_);
                Gl.glGetDoublev_ = new Gl.Delegates.glGetDoublev_(Imports.glGetDoublev_);
                Gl.glGetError = new Gl.Delegates.glGetError(Imports.glGetError);
                Gl.glGetFloatv_ = new Gl.Delegates.glGetFloatv_(Imports.glGetFloatv_);
                Gl.glGetIntegerv_ = new Gl.Delegates.glGetIntegerv_(Imports.glGetIntegerv_);
                Gl.glGetLightfv_ = new Gl.Delegates.glGetLightfv_(Imports.glGetLightfv_);
                Gl.glGetLightiv_ = new Gl.Delegates.glGetLightiv_(Imports.glGetLightiv_);
                Gl.glGetMapdv_ = new Gl.Delegates.glGetMapdv_(Imports.glGetMapdv_);
                Gl.glGetMapfv_ = new Gl.Delegates.glGetMapfv_(Imports.glGetMapfv_);
                Gl.glGetMapiv_ = new Gl.Delegates.glGetMapiv_(Imports.glGetMapiv_);
                Gl.glGetMaterialfv_ = new Gl.Delegates.glGetMaterialfv_(Imports.glGetMaterialfv_);
                Gl.glGetMaterialiv_ = new Gl.Delegates.glGetMaterialiv_(Imports.glGetMaterialiv_);
                Gl.glGetPixelMapfv_ = new Gl.Delegates.glGetPixelMapfv_(Imports.glGetPixelMapfv_);
                Gl.glGetPixelMapuiv_ = new Gl.Delegates.glGetPixelMapuiv_(Imports.glGetPixelMapuiv_);
                Gl.glGetPixelMapusv_ = new Gl.Delegates.glGetPixelMapusv_(Imports.glGetPixelMapusv_);
                Gl.glGetPolygonStipple_ = new Gl.Delegates.glGetPolygonStipple_(Imports.glGetPolygonStipple_);
                Gl.glGetString_ = new Gl.Delegates.glGetString_(Imports.glGetString_);
                Gl.glGetTexEnvfv_ = new Gl.Delegates.glGetTexEnvfv_(Imports.glGetTexEnvfv_);
                Gl.glGetTexEnviv_ = new Gl.Delegates.glGetTexEnviv_(Imports.glGetTexEnviv_);
                Gl.glGetTexGendv_ = new Gl.Delegates.glGetTexGendv_(Imports.glGetTexGendv_);
                Gl.glGetTexGenfv_ = new Gl.Delegates.glGetTexGenfv_(Imports.glGetTexGenfv_);
                Gl.glGetTexGeniv_ = new Gl.Delegates.glGetTexGeniv_(Imports.glGetTexGeniv_);
                Gl.glGetTexImage_ = new Gl.Delegates.glGetTexImage_(Imports.glGetTexImage_);
                Gl.glGetTexParameterfv_ = new Gl.Delegates.glGetTexParameterfv_(Imports.glGetTexParameterfv_);
                Gl.glGetTexParameteriv_ = new Gl.Delegates.glGetTexParameteriv_(Imports.glGetTexParameteriv_);
                Gl.glGetTexLevelParameterfv_ = new Gl.Delegates.glGetTexLevelParameterfv_(Imports.glGetTexLevelParameterfv_);
                Gl.glGetTexLevelParameteriv_ = new Gl.Delegates.glGetTexLevelParameteriv_(Imports.glGetTexLevelParameteriv_);
                Gl.glIsEnabled = new Gl.Delegates.glIsEnabled(Imports.glIsEnabled);
                Gl.glIsList = new Gl.Delegates.glIsList(Imports.glIsList);
                Gl.glDepthRange = new Gl.Delegates.glDepthRange(Imports.glDepthRange);
                Gl.glFrustum = new Gl.Delegates.glFrustum(Imports.glFrustum);
                Gl.glLoadIdentity = new Gl.Delegates.glLoadIdentity(Imports.glLoadIdentity);
                Gl.glLoadMatrixf_ = new Gl.Delegates.glLoadMatrixf_(Imports.glLoadMatrixf_);
                Gl.glLoadMatrixd_ = new Gl.Delegates.glLoadMatrixd_(Imports.glLoadMatrixd_);
                Gl.glMatrixMode = new Gl.Delegates.glMatrixMode(Imports.glMatrixMode);
                Gl.glMultMatrixf_ = new Gl.Delegates.glMultMatrixf_(Imports.glMultMatrixf_);
                Gl.glMultMatrixd_ = new Gl.Delegates.glMultMatrixd_(Imports.glMultMatrixd_);
                Gl.glOrtho = new Gl.Delegates.glOrtho(Imports.glOrtho);
                Gl.glPopMatrix = new Gl.Delegates.glPopMatrix(Imports.glPopMatrix);
                Gl.glPushMatrix = new Gl.Delegates.glPushMatrix(Imports.glPushMatrix);
                Gl.glRotated = new Gl.Delegates.glRotated(Imports.glRotated);
                Gl.glRotatef = new Gl.Delegates.glRotatef(Imports.glRotatef);
                Gl.glScaled = new Gl.Delegates.glScaled(Imports.glScaled);
                Gl.glScalef = new Gl.Delegates.glScalef(Imports.glScalef);
                Gl.glTranslated = new Gl.Delegates.glTranslated(Imports.glTranslated);
                Gl.glTranslatef = new Gl.Delegates.glTranslatef(Imports.glTranslatef);
                Gl.glViewport = new Gl.Delegates.glViewport(Imports.glViewport);
                Gl.glArrayElement = new Gl.Delegates.glArrayElement(Imports.glArrayElement);
                Gl.glColorPointer_ = new Gl.Delegates.glColorPointer_(Imports.glColorPointer_);
                Gl.glDisableClientState = new Gl.Delegates.glDisableClientState(Imports.glDisableClientState);
                Gl.glDrawArrays = new Gl.Delegates.glDrawArrays(Imports.glDrawArrays);
                Gl.glDrawElements_ = new Gl.Delegates.glDrawElements_(Imports.glDrawElements_);
                Gl.glEdgeFlagPointer_ = new Gl.Delegates.glEdgeFlagPointer_(Imports.glEdgeFlagPointer_);
                Gl.glEnableClientState = new Gl.Delegates.glEnableClientState(Imports.glEnableClientState);
                Gl.glGetPointerv_ = new Gl.Delegates.glGetPointerv_(Imports.glGetPointerv_);
                Gl.glIndexPointer_ = new Gl.Delegates.glIndexPointer_(Imports.glIndexPointer_);
                Gl.glInterleavedArrays_ = new Gl.Delegates.glInterleavedArrays_(Imports.glInterleavedArrays_);
                Gl.glNormalPointer_ = new Gl.Delegates.glNormalPointer_(Imports.glNormalPointer_);
                Gl.glTexCoordPointer_ = new Gl.Delegates.glTexCoordPointer_(Imports.glTexCoordPointer_);
                Gl.glVertexPointer_ = new Gl.Delegates.glVertexPointer_(Imports.glVertexPointer_);
                Gl.glPolygonOffset = new Gl.Delegates.glPolygonOffset(Imports.glPolygonOffset);
                Gl.glCopyTexImage1D = new Gl.Delegates.glCopyTexImage1D(Imports.glCopyTexImage1D);
                Gl.glCopyTexImage2D = new Gl.Delegates.glCopyTexImage2D(Imports.glCopyTexImage2D);
                Gl.glCopyTexSubImage1D = new Gl.Delegates.glCopyTexSubImage1D(Imports.glCopyTexSubImage1D);
                Gl.glCopyTexSubImage2D = new Gl.Delegates.glCopyTexSubImage2D(Imports.glCopyTexSubImage2D);
                Gl.glTexSubImage1D_ = new Gl.Delegates.glTexSubImage1D_(Imports.glTexSubImage1D_);
                Gl.glTexSubImage2D_ = new Gl.Delegates.glTexSubImage2D_(Imports.glTexSubImage2D_);
                Gl.glAreTexturesResident_ = new Gl.Delegates.glAreTexturesResident_(Imports.glAreTexturesResident_);
                Gl.glBindTexture = new Gl.Delegates.glBindTexture(Imports.glBindTexture);
                Gl.glDeleteTextures_ = new Gl.Delegates.glDeleteTextures_(Imports.glDeleteTextures_);
                Gl.glGenTextures_ = new Gl.Delegates.glGenTextures_(Imports.glGenTextures_);
                Gl.glIsTexture = new Gl.Delegates.glIsTexture(Imports.glIsTexture);
                Gl.glPrioritizeTextures_ = new Gl.Delegates.glPrioritizeTextures_(Imports.glPrioritizeTextures_);
                Gl.glIndexub = new Gl.Delegates.glIndexub(Imports.glIndexub);
                Gl.glIndexubv_ = new Gl.Delegates.glIndexubv_(Imports.glIndexubv_);
                Gl.glPopClientAttrib = new Gl.Delegates.glPopClientAttrib(Imports.glPopClientAttrib);
                Gl.glPushClientAttrib = new Gl.Delegates.glPushClientAttrib(Imports.glPushClientAttrib);
                Gl.glBlendColor = new Gl.Delegates.glBlendColor(Imports.glBlendColor);
                Gl.glBlendEquation = new Gl.Delegates.glBlendEquation(Imports.glBlendEquation);
                Gl.glDrawRangeElements_ = new Gl.Delegates.glDrawRangeElements_(Imports.glDrawRangeElements_);
                Gl.glColorTable_ = new Gl.Delegates.glColorTable_(Imports.glColorTable_);
                Gl.glColorTableParameterfv_ = new Gl.Delegates.glColorTableParameterfv_(Imports.glColorTableParameterfv_);
                Gl.glColorTableParameteriv_ = new Gl.Delegates.glColorTableParameteriv_(Imports.glColorTableParameteriv_);
                Gl.glCopyColorTable = new Gl.Delegates.glCopyColorTable(Imports.glCopyColorTable);
                Gl.glGetColorTable_ = new Gl.Delegates.glGetColorTable_(Imports.glGetColorTable_);
                Gl.glGetColorTableParameterfv_ = new Gl.Delegates.glGetColorTableParameterfv_(Imports.glGetColorTableParameterfv_);
                Gl.glGetColorTableParameteriv_ = new Gl.Delegates.glGetColorTableParameteriv_(Imports.glGetColorTableParameteriv_);
                Gl.glColorSubTable_ = new Gl.Delegates.glColorSubTable_(Imports.glColorSubTable_);
                Gl.glCopyColorSubTable = new Gl.Delegates.glCopyColorSubTable(Imports.glCopyColorSubTable);
                Gl.glConvolutionFilter1D_ = new Gl.Delegates.glConvolutionFilter1D_(Imports.glConvolutionFilter1D_);
                Gl.glConvolutionFilter2D_ = new Gl.Delegates.glConvolutionFilter2D_(Imports.glConvolutionFilter2D_);
                Gl.glConvolutionParameterf = new Gl.Delegates.glConvolutionParameterf(Imports.glConvolutionParameterf);
                Gl.glConvolutionParameterfv_ = new Gl.Delegates.glConvolutionParameterfv_(Imports.glConvolutionParameterfv_);
                Gl.glConvolutionParameteri = new Gl.Delegates.glConvolutionParameteri(Imports.glConvolutionParameteri);
                Gl.glConvolutionParameteriv_ = new Gl.Delegates.glConvolutionParameteriv_(Imports.glConvolutionParameteriv_);
                Gl.glCopyConvolutionFilter1D = new Gl.Delegates.glCopyConvolutionFilter1D(Imports.glCopyConvolutionFilter1D);
                Gl.glCopyConvolutionFilter2D = new Gl.Delegates.glCopyConvolutionFilter2D(Imports.glCopyConvolutionFilter2D);
                Gl.glGetConvolutionFilter_ = new Gl.Delegates.glGetConvolutionFilter_(Imports.glGetConvolutionFilter_);
                Gl.glGetConvolutionParameterfv_ = new Gl.Delegates.glGetConvolutionParameterfv_(Imports.glGetConvolutionParameterfv_);
                Gl.glGetConvolutionParameteriv_ = new Gl.Delegates.glGetConvolutionParameteriv_(Imports.glGetConvolutionParameteriv_);
                Gl.glGetSeparableFilter_ = new Gl.Delegates.glGetSeparableFilter_(Imports.glGetSeparableFilter_);
                Gl.glSeparableFilter2D_ = new Gl.Delegates.glSeparableFilter2D_(Imports.glSeparableFilter2D_);
                Gl.glGetHistogram_ = new Gl.Delegates.glGetHistogram_(Imports.glGetHistogram_);
                Gl.glGetHistogramParameterfv_ = new Gl.Delegates.glGetHistogramParameterfv_(Imports.glGetHistogramParameterfv_);
                Gl.glGetHistogramParameteriv_ = new Gl.Delegates.glGetHistogramParameteriv_(Imports.glGetHistogramParameteriv_);
                Gl.glGetMinmax_ = new Gl.Delegates.glGetMinmax_(Imports.glGetMinmax_);
                Gl.glGetMinmaxParameterfv_ = new Gl.Delegates.glGetMinmaxParameterfv_(Imports.glGetMinmaxParameterfv_);
                Gl.glGetMinmaxParameteriv_ = new Gl.Delegates.glGetMinmaxParameteriv_(Imports.glGetMinmaxParameteriv_);
                Gl.glHistogram = new Gl.Delegates.glHistogram(Imports.glHistogram);
                Gl.glMinmax = new Gl.Delegates.glMinmax(Imports.glMinmax);
                Gl.glResetHistogram = new Gl.Delegates.glResetHistogram(Imports.glResetHistogram);
                Gl.glResetMinmax = new Gl.Delegates.glResetMinmax(Imports.glResetMinmax);
                Gl.glTexImage3D_ = new Gl.Delegates.glTexImage3D_(Imports.glTexImage3D_);
                Gl.glTexSubImage3D_ = new Gl.Delegates.glTexSubImage3D_(Imports.glTexSubImage3D_);
                Gl.glCopyTexSubImage3D = new Gl.Delegates.glCopyTexSubImage3D(Imports.glCopyTexSubImage3D);
                Gl.glActiveTexture = new Gl.Delegates.glActiveTexture(Imports.glActiveTexture);
                Gl.glClientActiveTexture = new Gl.Delegates.glClientActiveTexture(Imports.glClientActiveTexture);
                Gl.glMultiTexCoord1d = new Gl.Delegates.glMultiTexCoord1d(Imports.glMultiTexCoord1d);
                Gl.glMultiTexCoord1dv_ = new Gl.Delegates.glMultiTexCoord1dv_(Imports.glMultiTexCoord1dv_);
                Gl.glMultiTexCoord1f = new Gl.Delegates.glMultiTexCoord1f(Imports.glMultiTexCoord1f);
                Gl.glMultiTexCoord1fv_ = new Gl.Delegates.glMultiTexCoord1fv_(Imports.glMultiTexCoord1fv_);
                Gl.glMultiTexCoord1i = new Gl.Delegates.glMultiTexCoord1i(Imports.glMultiTexCoord1i);
                Gl.glMultiTexCoord1iv_ = new Gl.Delegates.glMultiTexCoord1iv_(Imports.glMultiTexCoord1iv_);
                Gl.glMultiTexCoord1s = new Gl.Delegates.glMultiTexCoord1s(Imports.glMultiTexCoord1s);
                Gl.glMultiTexCoord1sv_ = new Gl.Delegates.glMultiTexCoord1sv_(Imports.glMultiTexCoord1sv_);
                Gl.glMultiTexCoord2d = new Gl.Delegates.glMultiTexCoord2d(Imports.glMultiTexCoord2d);
                Gl.glMultiTexCoord2dv_ = new Gl.Delegates.glMultiTexCoord2dv_(Imports.glMultiTexCoord2dv_);
                Gl.glMultiTexCoord2f = new Gl.Delegates.glMultiTexCoord2f(Imports.glMultiTexCoord2f);
                Gl.glMultiTexCoord2fv_ = new Gl.Delegates.glMultiTexCoord2fv_(Imports.glMultiTexCoord2fv_);
                Gl.glMultiTexCoord2i = new Gl.Delegates.glMultiTexCoord2i(Imports.glMultiTexCoord2i);
                Gl.glMultiTexCoord2iv_ = new Gl.Delegates.glMultiTexCoord2iv_(Imports.glMultiTexCoord2iv_);
                Gl.glMultiTexCoord2s = new Gl.Delegates.glMultiTexCoord2s(Imports.glMultiTexCoord2s);
                Gl.glMultiTexCoord2sv_ = new Gl.Delegates.glMultiTexCoord2sv_(Imports.glMultiTexCoord2sv_);
                Gl.glMultiTexCoord3d = new Gl.Delegates.glMultiTexCoord3d(Imports.glMultiTexCoord3d);
                Gl.glMultiTexCoord3dv_ = new Gl.Delegates.glMultiTexCoord3dv_(Imports.glMultiTexCoord3dv_);
                Gl.glMultiTexCoord3f = new Gl.Delegates.glMultiTexCoord3f(Imports.glMultiTexCoord3f);
                Gl.glMultiTexCoord3fv_ = new Gl.Delegates.glMultiTexCoord3fv_(Imports.glMultiTexCoord3fv_);
                Gl.glMultiTexCoord3i = new Gl.Delegates.glMultiTexCoord3i(Imports.glMultiTexCoord3i);
                Gl.glMultiTexCoord3iv_ = new Gl.Delegates.glMultiTexCoord3iv_(Imports.glMultiTexCoord3iv_);
                Gl.glMultiTexCoord3s = new Gl.Delegates.glMultiTexCoord3s(Imports.glMultiTexCoord3s);
                Gl.glMultiTexCoord3sv_ = new Gl.Delegates.glMultiTexCoord3sv_(Imports.glMultiTexCoord3sv_);
                Gl.glMultiTexCoord4d = new Gl.Delegates.glMultiTexCoord4d(Imports.glMultiTexCoord4d);
                Gl.glMultiTexCoord4dv_ = new Gl.Delegates.glMultiTexCoord4dv_(Imports.glMultiTexCoord4dv_);
                Gl.glMultiTexCoord4f = new Gl.Delegates.glMultiTexCoord4f(Imports.glMultiTexCoord4f);
                Gl.glMultiTexCoord4fv_ = new Gl.Delegates.glMultiTexCoord4fv_(Imports.glMultiTexCoord4fv_);
                Gl.glMultiTexCoord4i = new Gl.Delegates.glMultiTexCoord4i(Imports.glMultiTexCoord4i);
                Gl.glMultiTexCoord4iv_ = new Gl.Delegates.glMultiTexCoord4iv_(Imports.glMultiTexCoord4iv_);
                Gl.glMultiTexCoord4s = new Gl.Delegates.glMultiTexCoord4s(Imports.glMultiTexCoord4s);
                Gl.glMultiTexCoord4sv_ = new Gl.Delegates.glMultiTexCoord4sv_(Imports.glMultiTexCoord4sv_);
                Gl.glLoadTransposeMatrixf_ = new Gl.Delegates.glLoadTransposeMatrixf_(Imports.glLoadTransposeMatrixf_);
                Gl.glLoadTransposeMatrixd_ = new Gl.Delegates.glLoadTransposeMatrixd_(Imports.glLoadTransposeMatrixd_);
                Gl.glMultTransposeMatrixf_ = new Gl.Delegates.glMultTransposeMatrixf_(Imports.glMultTransposeMatrixf_);
                Gl.glMultTransposeMatrixd_ = new Gl.Delegates.glMultTransposeMatrixd_(Imports.glMultTransposeMatrixd_);
                Gl.glSampleCoverage = new Gl.Delegates.glSampleCoverage(Imports.glSampleCoverage);
                Gl.glCompressedTexImage3D_ = new Gl.Delegates.glCompressedTexImage3D_(Imports.glCompressedTexImage3D_);
                Gl.glCompressedTexImage2D_ = new Gl.Delegates.glCompressedTexImage2D_(Imports.glCompressedTexImage2D_);
                Gl.glCompressedTexImage1D_ = new Gl.Delegates.glCompressedTexImage1D_(Imports.glCompressedTexImage1D_);
                Gl.glCompressedTexSubImage3D_ = new Gl.Delegates.glCompressedTexSubImage3D_(Imports.glCompressedTexSubImage3D_);
                Gl.glCompressedTexSubImage2D_ = new Gl.Delegates.glCompressedTexSubImage2D_(Imports.glCompressedTexSubImage2D_);
                Gl.glCompressedTexSubImage1D_ = new Gl.Delegates.glCompressedTexSubImage1D_(Imports.glCompressedTexSubImage1D_);
                Gl.glGetCompressedTexImage_ = new Gl.Delegates.glGetCompressedTexImage_(Imports.glGetCompressedTexImage_);
                Gl.glBlendFuncSeparate = new Gl.Delegates.glBlendFuncSeparate(Imports.glBlendFuncSeparate);
                Gl.glFogCoordf = new Gl.Delegates.glFogCoordf(Imports.glFogCoordf);
                Gl.glFogCoordfv_ = new Gl.Delegates.glFogCoordfv_(Imports.glFogCoordfv_);
                Gl.glFogCoordd = new Gl.Delegates.glFogCoordd(Imports.glFogCoordd);
                Gl.glFogCoorddv_ = new Gl.Delegates.glFogCoorddv_(Imports.glFogCoorddv_);
                Gl.glFogCoordPointer_ = new Gl.Delegates.glFogCoordPointer_(Imports.glFogCoordPointer_);
                Gl.glMultiDrawArrays_ = new Gl.Delegates.glMultiDrawArrays_(Imports.glMultiDrawArrays_);
                Gl.glMultiDrawElements_ = new Gl.Delegates.glMultiDrawElements_(Imports.glMultiDrawElements_);
                Gl.glPointParameterf = new Gl.Delegates.glPointParameterf(Imports.glPointParameterf);
                Gl.glPointParameterfv_ = new Gl.Delegates.glPointParameterfv_(Imports.glPointParameterfv_);
                Gl.glPointParameteri = new Gl.Delegates.glPointParameteri(Imports.glPointParameteri);
                Gl.glPointParameteriv_ = new Gl.Delegates.glPointParameteriv_(Imports.glPointParameteriv_);
                Gl.glSecondaryColor3b = new Gl.Delegates.glSecondaryColor3b(Imports.glSecondaryColor3b);
                Gl.glSecondaryColor3bv_ = new Gl.Delegates.glSecondaryColor3bv_(Imports.glSecondaryColor3bv_);
                Gl.glSecondaryColor3d = new Gl.Delegates.glSecondaryColor3d(Imports.glSecondaryColor3d);
                Gl.glSecondaryColor3dv_ = new Gl.Delegates.glSecondaryColor3dv_(Imports.glSecondaryColor3dv_);
                Gl.glSecondaryColor3f = new Gl.Delegates.glSecondaryColor3f(Imports.glSecondaryColor3f);
                Gl.glSecondaryColor3fv_ = new Gl.Delegates.glSecondaryColor3fv_(Imports.glSecondaryColor3fv_);
                Gl.glSecondaryColor3i = new Gl.Delegates.glSecondaryColor3i(Imports.glSecondaryColor3i);
                Gl.glSecondaryColor3iv_ = new Gl.Delegates.glSecondaryColor3iv_(Imports.glSecondaryColor3iv_);
                Gl.glSecondaryColor3s = new Gl.Delegates.glSecondaryColor3s(Imports.glSecondaryColor3s);
                Gl.glSecondaryColor3sv_ = new Gl.Delegates.glSecondaryColor3sv_(Imports.glSecondaryColor3sv_);
                Gl.glSecondaryColor3ub = new Gl.Delegates.glSecondaryColor3ub(Imports.glSecondaryColor3ub);
                Gl.glSecondaryColor3ubv_ = new Gl.Delegates.glSecondaryColor3ubv_(Imports.glSecondaryColor3ubv_);
                Gl.glSecondaryColor3ui = new Gl.Delegates.glSecondaryColor3ui(Imports.glSecondaryColor3ui);
                Gl.glSecondaryColor3uiv_ = new Gl.Delegates.glSecondaryColor3uiv_(Imports.glSecondaryColor3uiv_);
                Gl.glSecondaryColor3us = new Gl.Delegates.glSecondaryColor3us(Imports.glSecondaryColor3us);
                Gl.glSecondaryColor3usv_ = new Gl.Delegates.glSecondaryColor3usv_(Imports.glSecondaryColor3usv_);
                Gl.glSecondaryColorPointer_ = new Gl.Delegates.glSecondaryColorPointer_(Imports.glSecondaryColorPointer_);
                Gl.glWindowPos2d = new Gl.Delegates.glWindowPos2d(Imports.glWindowPos2d);
                Gl.glWindowPos2dv_ = new Gl.Delegates.glWindowPos2dv_(Imports.glWindowPos2dv_);
                Gl.glWindowPos2f = new Gl.Delegates.glWindowPos2f(Imports.glWindowPos2f);
                Gl.glWindowPos2fv_ = new Gl.Delegates.glWindowPos2fv_(Imports.glWindowPos2fv_);
                Gl.glWindowPos2i = new Gl.Delegates.glWindowPos2i(Imports.glWindowPos2i);
                Gl.glWindowPos2iv_ = new Gl.Delegates.glWindowPos2iv_(Imports.glWindowPos2iv_);
                Gl.glWindowPos2s = new Gl.Delegates.glWindowPos2s(Imports.glWindowPos2s);
                Gl.glWindowPos2sv_ = new Gl.Delegates.glWindowPos2sv_(Imports.glWindowPos2sv_);
                Gl.glWindowPos3d = new Gl.Delegates.glWindowPos3d(Imports.glWindowPos3d);
                Gl.glWindowPos3dv_ = new Gl.Delegates.glWindowPos3dv_(Imports.glWindowPos3dv_);
                Gl.glWindowPos3f = new Gl.Delegates.glWindowPos3f(Imports.glWindowPos3f);
                Gl.glWindowPos3fv_ = new Gl.Delegates.glWindowPos3fv_(Imports.glWindowPos3fv_);
                Gl.glWindowPos3i = new Gl.Delegates.glWindowPos3i(Imports.glWindowPos3i);
                Gl.glWindowPos3iv_ = new Gl.Delegates.glWindowPos3iv_(Imports.glWindowPos3iv_);
                Gl.glWindowPos3s = new Gl.Delegates.glWindowPos3s(Imports.glWindowPos3s);
                Gl.glWindowPos3sv_ = new Gl.Delegates.glWindowPos3sv_(Imports.glWindowPos3sv_);
                Gl.glGenQueries_ = new Gl.Delegates.glGenQueries_(Imports.glGenQueries_);
                Gl.glDeleteQueries_ = new Gl.Delegates.glDeleteQueries_(Imports.glDeleteQueries_);
                Gl.glIsQuery = new Gl.Delegates.glIsQuery(Imports.glIsQuery);
                Gl.glBeginQuery = new Gl.Delegates.glBeginQuery(Imports.glBeginQuery);
                Gl.glEndQuery = new Gl.Delegates.glEndQuery(Imports.glEndQuery);
                Gl.glGetQueryiv_ = new Gl.Delegates.glGetQueryiv_(Imports.glGetQueryiv_);
                Gl.glGetQueryObjectiv_ = new Gl.Delegates.glGetQueryObjectiv_(Imports.glGetQueryObjectiv_);
                Gl.glGetQueryObjectuiv_ = new Gl.Delegates.glGetQueryObjectuiv_(Imports.glGetQueryObjectuiv_);
                Gl.glBindBuffer = new Gl.Delegates.glBindBuffer(Imports.glBindBuffer);
                Gl.glDeleteBuffers_ = new Gl.Delegates.glDeleteBuffers_(Imports.glDeleteBuffers_);
                Gl.glGenBuffers_ = new Gl.Delegates.glGenBuffers_(Imports.glGenBuffers_);
                Gl.glIsBuffer = new Gl.Delegates.glIsBuffer(Imports.glIsBuffer);
                Gl.glBufferData_ = new Gl.Delegates.glBufferData_(Imports.glBufferData_);
                Gl.glBufferSubData_ = new Gl.Delegates.glBufferSubData_(Imports.glBufferSubData_);
                Gl.glGetBufferSubData_ = new Gl.Delegates.glGetBufferSubData_(Imports.glGetBufferSubData_);
                Gl.glMapBuffer = new Gl.Delegates.glMapBuffer(Imports.glMapBuffer);
                Gl.glUnmapBuffer = new Gl.Delegates.glUnmapBuffer(Imports.glUnmapBuffer);
                Gl.glGetBufferParameteriv_ = new Gl.Delegates.glGetBufferParameteriv_(Imports.glGetBufferParameteriv_);
                Gl.glGetBufferPointerv_ = new Gl.Delegates.glGetBufferPointerv_(Imports.glGetBufferPointerv_);
                Gl.glBlendEquationSeparate = new Gl.Delegates.glBlendEquationSeparate(Imports.glBlendEquationSeparate);
                Gl.glDrawBuffers_ = new Gl.Delegates.glDrawBuffers_(Imports.glDrawBuffers_);
                Gl.glStencilOpSeparate = new Gl.Delegates.glStencilOpSeparate(Imports.glStencilOpSeparate);
                Gl.glStencilFuncSeparate = new Gl.Delegates.glStencilFuncSeparate(Imports.glStencilFuncSeparate);
                Gl.glStencilMaskSeparate = new Gl.Delegates.glStencilMaskSeparate(Imports.glStencilMaskSeparate);
                Gl.glAttachShader = new Gl.Delegates.glAttachShader(Imports.glAttachShader);
                Gl.glBindAttribLocation = new Gl.Delegates.glBindAttribLocation(Imports.glBindAttribLocation);
                Gl.glCompileShader = new Gl.Delegates.glCompileShader(Imports.glCompileShader);
                Gl.glCreateProgram = new Gl.Delegates.glCreateProgram(Imports.glCreateProgram);
                Gl.glCreateShader = new Gl.Delegates.glCreateShader(Imports.glCreateShader);
                Gl.glDeleteProgram = new Gl.Delegates.glDeleteProgram(Imports.glDeleteProgram);
                Gl.glDeleteShader = new Gl.Delegates.glDeleteShader(Imports.glDeleteShader);
                Gl.glDetachShader = new Gl.Delegates.glDetachShader(Imports.glDetachShader);
                Gl.glDisableVertexAttribArray = new Gl.Delegates.glDisableVertexAttribArray(Imports.glDisableVertexAttribArray);
                Gl.glEnableVertexAttribArray = new Gl.Delegates.glEnableVertexAttribArray(Imports.glEnableVertexAttribArray);
                Gl.glGetActiveAttrib_ = new Gl.Delegates.glGetActiveAttrib_(Imports.glGetActiveAttrib_);
                Gl.glGetActiveUniform_ = new Gl.Delegates.glGetActiveUniform_(Imports.glGetActiveUniform_);
                Gl.glGetAttachedShaders_ = new Gl.Delegates.glGetAttachedShaders_(Imports.glGetAttachedShaders_);
                Gl.glGetAttribLocation = new Gl.Delegates.glGetAttribLocation(Imports.glGetAttribLocation);
                Gl.glGetProgramiv_ = new Gl.Delegates.glGetProgramiv_(Imports.glGetProgramiv_);
                Gl.glGetProgramInfoLog_ = new Gl.Delegates.glGetProgramInfoLog_(Imports.glGetProgramInfoLog_);
                Gl.glGetShaderiv_ = new Gl.Delegates.glGetShaderiv_(Imports.glGetShaderiv_);
                Gl.glGetShaderInfoLog_ = new Gl.Delegates.glGetShaderInfoLog_(Imports.glGetShaderInfoLog_);
                Gl.glGetShaderSource_ = new Gl.Delegates.glGetShaderSource_(Imports.glGetShaderSource_);
                Gl.glGetUniformLocation = new Gl.Delegates.glGetUniformLocation(Imports.glGetUniformLocation);
                Gl.glGetUniformfv_ = new Gl.Delegates.glGetUniformfv_(Imports.glGetUniformfv_);
                Gl.glGetUniformiv_ = new Gl.Delegates.glGetUniformiv_(Imports.glGetUniformiv_);
                Gl.glGetVertexAttribdv_ = new Gl.Delegates.glGetVertexAttribdv_(Imports.glGetVertexAttribdv_);
                Gl.glGetVertexAttribfv_ = new Gl.Delegates.glGetVertexAttribfv_(Imports.glGetVertexAttribfv_);
                Gl.glGetVertexAttribiv_ = new Gl.Delegates.glGetVertexAttribiv_(Imports.glGetVertexAttribiv_);
                Gl.glGetVertexAttribPointerv_ = new Gl.Delegates.glGetVertexAttribPointerv_(Imports.glGetVertexAttribPointerv_);
                Gl.glIsProgram = new Gl.Delegates.glIsProgram(Imports.glIsProgram);
                Gl.glIsShader = new Gl.Delegates.glIsShader(Imports.glIsShader);
                Gl.glLinkProgram = new Gl.Delegates.glLinkProgram(Imports.glLinkProgram);
                Gl.glShaderSource_ = new Gl.Delegates.glShaderSource_(Imports.glShaderSource_);
                Gl.glUseProgram = new Gl.Delegates.glUseProgram(Imports.glUseProgram);
                Gl.glUniform1f = new Gl.Delegates.glUniform1f(Imports.glUniform1f);
                Gl.glUniform2f = new Gl.Delegates.glUniform2f(Imports.glUniform2f);
                Gl.glUniform3f = new Gl.Delegates.glUniform3f(Imports.glUniform3f);
                Gl.glUniform4f = new Gl.Delegates.glUniform4f(Imports.glUniform4f);
                Gl.glUniform1i = new Gl.Delegates.glUniform1i(Imports.glUniform1i);
                Gl.glUniform2i = new Gl.Delegates.glUniform2i(Imports.glUniform2i);
                Gl.glUniform3i = new Gl.Delegates.glUniform3i(Imports.glUniform3i);
                Gl.glUniform4i = new Gl.Delegates.glUniform4i(Imports.glUniform4i);
                Gl.glUniform1fv_ = new Gl.Delegates.glUniform1fv_(Imports.glUniform1fv_);
                Gl.glUniform2fv_ = new Gl.Delegates.glUniform2fv_(Imports.glUniform2fv_);
                Gl.glUniform3fv_ = new Gl.Delegates.glUniform3fv_(Imports.glUniform3fv_);
                Gl.glUniform4fv_ = new Gl.Delegates.glUniform4fv_(Imports.glUniform4fv_);
                Gl.glUniform1iv_ = new Gl.Delegates.glUniform1iv_(Imports.glUniform1iv_);
                Gl.glUniform2iv_ = new Gl.Delegates.glUniform2iv_(Imports.glUniform2iv_);
                Gl.glUniform3iv_ = new Gl.Delegates.glUniform3iv_(Imports.glUniform3iv_);
                Gl.glUniform4iv_ = new Gl.Delegates.glUniform4iv_(Imports.glUniform4iv_);
                Gl.glUniformMatrix2fv_ = new Gl.Delegates.glUniformMatrix2fv_(Imports.glUniformMatrix2fv_);
                Gl.glUniformMatrix3fv_ = new Gl.Delegates.glUniformMatrix3fv_(Imports.glUniformMatrix3fv_);
                Gl.glUniformMatrix4fv_ = new Gl.Delegates.glUniformMatrix4fv_(Imports.glUniformMatrix4fv_);
                Gl.glValidateProgram = new Gl.Delegates.glValidateProgram(Imports.glValidateProgram);
                Gl.glVertexAttrib1d = new Gl.Delegates.glVertexAttrib1d(Imports.glVertexAttrib1d);
                Gl.glVertexAttrib1dv_ = new Gl.Delegates.glVertexAttrib1dv_(Imports.glVertexAttrib1dv_);
                Gl.glVertexAttrib1f = new Gl.Delegates.glVertexAttrib1f(Imports.glVertexAttrib1f);
                Gl.glVertexAttrib1fv_ = new Gl.Delegates.glVertexAttrib1fv_(Imports.glVertexAttrib1fv_);
                Gl.glVertexAttrib1s = new Gl.Delegates.glVertexAttrib1s(Imports.glVertexAttrib1s);
                Gl.glVertexAttrib1sv_ = new Gl.Delegates.glVertexAttrib1sv_(Imports.glVertexAttrib1sv_);
                Gl.glVertexAttrib2d = new Gl.Delegates.glVertexAttrib2d(Imports.glVertexAttrib2d);
                Gl.glVertexAttrib2dv_ = new Gl.Delegates.glVertexAttrib2dv_(Imports.glVertexAttrib2dv_);
                Gl.glVertexAttrib2f = new Gl.Delegates.glVertexAttrib2f(Imports.glVertexAttrib2f);
                Gl.glVertexAttrib2fv_ = new Gl.Delegates.glVertexAttrib2fv_(Imports.glVertexAttrib2fv_);
                Gl.glVertexAttrib2s = new Gl.Delegates.glVertexAttrib2s(Imports.glVertexAttrib2s);
                Gl.glVertexAttrib2sv_ = new Gl.Delegates.glVertexAttrib2sv_(Imports.glVertexAttrib2sv_);
                Gl.glVertexAttrib3d = new Gl.Delegates.glVertexAttrib3d(Imports.glVertexAttrib3d);
                Gl.glVertexAttrib3dv_ = new Gl.Delegates.glVertexAttrib3dv_(Imports.glVertexAttrib3dv_);
                Gl.glVertexAttrib3f = new Gl.Delegates.glVertexAttrib3f(Imports.glVertexAttrib3f);
                Gl.glVertexAttrib3fv_ = new Gl.Delegates.glVertexAttrib3fv_(Imports.glVertexAttrib3fv_);
                Gl.glVertexAttrib3s = new Gl.Delegates.glVertexAttrib3s(Imports.glVertexAttrib3s);
                Gl.glVertexAttrib3sv_ = new Gl.Delegates.glVertexAttrib3sv_(Imports.glVertexAttrib3sv_);
                Gl.glVertexAttrib4Nbv_ = new Gl.Delegates.glVertexAttrib4Nbv_(Imports.glVertexAttrib4Nbv_);
                Gl.glVertexAttrib4Niv_ = new Gl.Delegates.glVertexAttrib4Niv_(Imports.glVertexAttrib4Niv_);
                Gl.glVertexAttrib4Nsv_ = new Gl.Delegates.glVertexAttrib4Nsv_(Imports.glVertexAttrib4Nsv_);
                Gl.glVertexAttrib4Nub = new Gl.Delegates.glVertexAttrib4Nub(Imports.glVertexAttrib4Nub);
                Gl.glVertexAttrib4Nubv_ = new Gl.Delegates.glVertexAttrib4Nubv_(Imports.glVertexAttrib4Nubv_);
                Gl.glVertexAttrib4Nuiv_ = new Gl.Delegates.glVertexAttrib4Nuiv_(Imports.glVertexAttrib4Nuiv_);
                Gl.glVertexAttrib4Nusv_ = new Gl.Delegates.glVertexAttrib4Nusv_(Imports.glVertexAttrib4Nusv_);
                Gl.glVertexAttrib4bv_ = new Gl.Delegates.glVertexAttrib4bv_(Imports.glVertexAttrib4bv_);
                Gl.glVertexAttrib4d = new Gl.Delegates.glVertexAttrib4d(Imports.glVertexAttrib4d);
                Gl.glVertexAttrib4dv_ = new Gl.Delegates.glVertexAttrib4dv_(Imports.glVertexAttrib4dv_);
                Gl.glVertexAttrib4f = new Gl.Delegates.glVertexAttrib4f(Imports.glVertexAttrib4f);
                Gl.glVertexAttrib4fv_ = new Gl.Delegates.glVertexAttrib4fv_(Imports.glVertexAttrib4fv_);
                Gl.glVertexAttrib4iv_ = new Gl.Delegates.glVertexAttrib4iv_(Imports.glVertexAttrib4iv_);
                Gl.glVertexAttrib4s = new Gl.Delegates.glVertexAttrib4s(Imports.glVertexAttrib4s);
                Gl.glVertexAttrib4sv_ = new Gl.Delegates.glVertexAttrib4sv_(Imports.glVertexAttrib4sv_);
                Gl.glVertexAttrib4ubv_ = new Gl.Delegates.glVertexAttrib4ubv_(Imports.glVertexAttrib4ubv_);
                Gl.glVertexAttrib4uiv_ = new Gl.Delegates.glVertexAttrib4uiv_(Imports.glVertexAttrib4uiv_);
                Gl.glVertexAttrib4usv_ = new Gl.Delegates.glVertexAttrib4usv_(Imports.glVertexAttrib4usv_);
                Gl.glVertexAttribPointer_ = new Gl.Delegates.glVertexAttribPointer_(Imports.glVertexAttribPointer_);
                Gl.glUniformMatrix2x3fv_ = new Gl.Delegates.glUniformMatrix2x3fv_(Imports.glUniformMatrix2x3fv_);
                Gl.glUniformMatrix3x2fv_ = new Gl.Delegates.glUniformMatrix3x2fv_(Imports.glUniformMatrix3x2fv_);
                Gl.glUniformMatrix2x4fv_ = new Gl.Delegates.glUniformMatrix2x4fv_(Imports.glUniformMatrix2x4fv_);
                Gl.glUniformMatrix4x2fv_ = new Gl.Delegates.glUniformMatrix4x2fv_(Imports.glUniformMatrix4x2fv_);
                Gl.glUniformMatrix3x4fv_ = new Gl.Delegates.glUniformMatrix3x4fv_(Imports.glUniformMatrix3x4fv_);
                Gl.glUniformMatrix4x3fv_ = new Gl.Delegates.glUniformMatrix4x3fv_(Imports.glUniformMatrix4x3fv_);
                #endregion X11 Core
            }
        }
        #endregion static Constructor

        #region Delegate GetAddress
        public static Delegate GetAddress(string s, Type function_signature)
        {
            IntPtr address = Tao.OpenGl.GlExtensionLoader.GetProcAddress(s);
            if (address == IntPtr.Zero)
            {
                return null;
            }
            else
            {
                return Marshal.GetDelegateForFunctionPointer(address, function_signature);
            }
        }
        #endregion Delegate GetAddress
    }
    #pragma warning restore 1591
}

