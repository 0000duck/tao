#region License
/*
THIS FILE IS AUTOMATICALLY GENERATED
DO NOT EDIT BY HAND!!

MIT License
Copyright 2003-2006 Tao Framework Team
http://www.taoframework.com
All rights reserved.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/
#endregion License

using System;
using System.Runtime.InteropServices;
using System.Text;

namespace Tao.OpenGl
{
    #region Types

    using GLsizei = System.Int32;
    using GLsizeiptr = System.IntPtr;
    using GLintptr = System.IntPtr;
    using GLenum = System.Int32;
    using GLboolean = System.Int32;
    using GLbitfield = System.Int32;
    using GLchar = System.Char;
    using GLbyte = System.Byte;
    using GLubyte = System.Byte;
    using GLshort = System.Int16;
    using GLushort = System.Int16;
    using GLint = System.Int32;
    using GLuint = System.Int32;
    using GLfloat = System.Single;
    using GLclampf = System.Single;
    using GLdouble = System.Double;
    using GLclampd = System.Double;
    using GLstring = System.String;
    using GLsizeiptrARB = System.IntPtr;
    using GLintptrARB = System.IntPtr;
    using GLhandleARB = System.Int32;
    using GLhalfARB = System.Int16;
    using GLhalfNV = System.Int16;
    using GLcharARB = System.Char;
    using GLint64EXT = System.Int64;
    using GLuint64EXT = System.Int64;
    using GLint64 = System.Int64;
    using GLuint64 = System.Int64;

    #endregion

    public static partial class Gl
    {
        #region Private Constants

        #region string GL_NATIVE_LIBRARY

        /// <summary>
        /// Specifies OpenGl's native library archive.
        /// </summary>
        /// <remarks>
        /// Specifies opengl32.dll everywhere; will be mapped via .config for mono.
        /// </remarks>
        private const string GL_NATIVE_LIBRARY = "opengl32.dll";

        #endregion string GL_NATIVE_LIBRARY

        #endregion Private Constants

        #region Public Constants

        #pragma warning disable 1591

        public const GLuint GL_VERSION_1_1 = 1;
        public const GLuint GL_VERSION_1_2 = 1;
        public const GLuint GL_VERSION_1_3 = 1;
        public const GLuint GL_VERSION_1_4 = 1;
        public const GLuint GL_VERSION_1_5 = 1;
        public const GLuint GL_ARB_imaging = 1;
        public const GLuint GL_EXT_abgr = 1;
        public const GLuint GL_EXT_blend_color = 1;
        public const GLuint GL_EXT_blend_logic_op = 1;
        public const GLuint GL_EXT_blend_minmax = 1;
        public const GLuint GL_EXT_blend_subtract = 1;
        public const GLuint GL_EXT_cmyka = 1;
        public const GLuint GL_EXT_convolution = 1;
        public const GLuint GL_EXT_copy_texture = 1;
        public const GLuint GL_EXT_histogram = 1;
        public const GLuint GL_EXT_packed_pixels = 1;
        public const GLuint GL_EXT_point_parameters = 1;
        public const GLuint GL_EXT_polygon_offset = 1;
        public const GLuint GL_EXT_rescale_normal = 1;
        public const GLuint GL_EXT_shared_texture_palette = 1;
        public const GLuint GL_EXT_subtexture = 1;
        public const GLuint GL_EXT_texture = 1;
        public const GLuint GL_EXT_texture3D = 1;
        public const GLuint GL_EXT_texture_object = 1;
        public const GLuint GL_EXT_vertex_array = 1;
        public const GLuint GL_SGIS_detail_texture = 1;
        public const GLuint GL_SGIS_fog_function = 1;
        public const GLuint GL_SGIS_generate_mipmap = 1;
        public const GLuint GL_SGIS_multisample = 1;
        public const GLuint GL_SGIS_pixel_texture = 1;
        public const GLuint GL_SGIS_point_line_texgen = 1;
        public const GLuint GL_SGIS_point_parameters = 1;
        public const GLuint GL_SGIS_sharpen_texture = 1;
        public const GLuint GL_SGIS_texture4D = 1;
        public const GLuint GL_SGIS_texture_border_clamp = 1;
        public const GLuint GL_SGIS_texture_edge_clamp = 1;
        public const GLuint GL_SGIS_texture_filter4 = 1;
        public const GLuint GL_SGIS_texture_lod = 1;
        public const GLuint GL_SGIS_texture_select = 1;
        public const GLuint GL_SGIX_async = 1;
        public const GLuint GL_SGIX_async_histogram = 1;
        public const GLuint GL_SGIX_async_pixel = 1;
        public const GLuint GL_SGIX_blend_alpha_minmax = 1;
        public const GLuint GL_SGIX_calligraphic_fragment = 1;
        public const GLuint GL_SGIX_clipmap = 1;
        public const GLuint GL_SGIX_convolution_accuracy = 1;
        public const GLuint GL_SGIX_depth_texture = 1;
        public const GLuint GL_SGIX_flush_raster = 1;
        public const GLuint GL_SGIX_fog_offset = 1;
        public const GLuint GL_SGIX_fragment_lighting = 1;
        public const GLuint GL_SGIX_framezoom = 1;
        public const GLuint GL_SGIX_icc_texture = 1;
        public const GLuint GL_SGIX_impact_pixel_texture = 1;
        public const GLuint GL_SGIX_instruments = 1;
        public const GLuint GL_SGIX_interlace = 1;
        public const GLuint GL_SGIX_ir_instrument1 = 1;
        public const GLuint GL_SGIX_list_priority = 1;
        public const GLuint GL_SGIX_pixel_texture = 1;
        public const GLuint GL_SGIX_pixel_tiles = 1;
        public const GLuint GL_SGIX_polynomial_ffd = 1;
        public const GLuint GL_SGIX_reference_plane = 1;
        public const GLuint GL_SGIX_resample = 1;
        public const GLuint GL_SGIX_scalebias_hint = 1;
        public const GLuint GL_SGIX_shadow = 1;
        public const GLuint GL_SGIX_shadow_ambient = 1;
        public const GLuint GL_SGIX_sprite = 1;
        public const GLuint GL_SGIX_subsample = 1;
        public const GLuint GL_SGIX_tag_sample_buffer = 1;
        public const GLuint GL_SGIX_texture_add_env = 1;
        public const GLuint GL_SGIX_texture_coordinate_clamp = 1;
        public const GLuint GL_SGIX_texture_lod_bias = 1;
        public const GLuint GL_SGIX_texture_multi_buffer = 1;
        public const GLuint GL_SGIX_texture_scale_bias = 1;
        public const GLuint GL_SGIX_vertex_preclip = 1;
        public const GLuint GL_SGIX_ycrcb = 1;
        public const GLuint GL_SGI_color_matrix = 1;
        public const GLuint GL_SGI_color_table = 1;
        public const GLuint GL_SGI_texture_color_table = 1;
        public const GLuint GL_CURRENT_BIT = 0x00000001;
        public const GLuint GL_POINT_BIT = 0x00000002;
        public const GLuint GL_LINE_BIT = 0x00000004;
        public const GLuint GL_POLYGON_BIT = 0x00000008;
        public const GLuint GL_POLYGON_STIPPLE_BIT = 0x00000010;
        public const GLuint GL_PIXEL_MODE_BIT = 0x00000020;
        public const GLuint GL_LIGHTING_BIT = 0x00000040;
        public const GLuint GL_FOG_BIT = 0x00000080;
        public const GLuint GL_DEPTH_BUFFER_BIT = 0x00000100;
        public const GLuint GL_ACCUM_BUFFER_BIT = 0x00000200;
        public const GLuint GL_STENCIL_BUFFER_BIT = 0x00000400;
        public const GLuint GL_VIEWPORT_BIT = 0x00000800;
        public const GLuint GL_TRANSFORM_BIT = 0x00001000;
        public const GLuint GL_ENABLE_BIT = 0x00002000;
        public const GLuint GL_COLOR_BUFFER_BIT = 0x00004000;
        public const GLuint GL_HINT_BIT = 0x00008000;
        public const GLuint GL_EVAL_BIT = 0x00010000;
        public const GLuint GL_LIST_BIT = 0x00020000;
        public const GLuint GL_TEXTURE_BIT = 0x00040000;
        public const GLuint GL_SCISSOR_BIT = 0x00080000;
        public const GLuint GL_ALL_ATTRIB_BITS = unchecked((int)0xFFFFFFFF);
        public const GLuint GL_CLIENT_PIXEL_STORE_BIT = 0x00000001;
        public const GLuint GL_CLIENT_VERTEX_ARRAY_BIT = 0x00000002;
        public const GLuint GL_CLIENT_ALL_ATTRIB_BITS = unchecked((int)0xFFFFFFFF);
        public const GLuint GL_FALSE = 0;
        public const GLuint GL_TRUE = 1;
        public const GLuint GL_POINTS = 0x0000;
        public const GLuint GL_LINES = 0x0001;
        public const GLuint GL_LINE_LOOP = 0x0002;
        public const GLuint GL_LINE_STRIP = 0x0003;
        public const GLuint GL_TRIANGLES = 0x0004;
        public const GLuint GL_TRIANGLE_STRIP = 0x0005;
        public const GLuint GL_TRIANGLE_FAN = 0x0006;
        public const GLuint GL_QUADS = 0x0007;
        public const GLuint GL_QUAD_STRIP = 0x0008;
        public const GLuint GL_POLYGON = 0x0009;
        public const GLuint GL_ACCUM = 0x0100;
        public const GLuint GL_LOAD = 0x0101;
        public const GLuint GL_RETURN = 0x0102;
        public const GLuint GL_MULT = 0x0103;
        public const GLuint GL_ADD = 0x0104;
        public const GLuint GL_NEVER = 0x0200;
        public const GLuint GL_LESS = 0x0201;
        public const GLuint GL_EQUAL = 0x0202;
        public const GLuint GL_LEQUAL = 0x0203;
        public const GLuint GL_GREATER = 0x0204;
        public const GLuint GL_NOTEQUAL = 0x0205;
        public const GLuint GL_GEQUAL = 0x0206;
        public const GLuint GL_ALWAYS = 0x0207;
        public const GLuint GL_ZERO = 0;
        public const GLuint GL_ONE = 1;
        public const GLuint GL_SRC_COLOR = 0x0300;
        public const GLuint GL_ONE_MINUS_SRC_COLOR = 0x0301;
        public const GLuint GL_SRC_ALPHA = 0x0302;
        public const GLuint GL_ONE_MINUS_SRC_ALPHA = 0x0303;
        public const GLuint GL_DST_ALPHA = 0x0304;
        public const GLuint GL_ONE_MINUS_DST_ALPHA = 0x0305;
        public const GLuint GL_DST_COLOR = 0x0306;
        public const GLuint GL_ONE_MINUS_DST_COLOR = 0x0307;
        public const GLuint GL_SRC_ALPHA_SATURATE = 0x0308;
        public const GLuint GL_NONE = 0;
        public const GLuint GL_FRONT_LEFT = 0x0400;
        public const GLuint GL_FRONT_RIGHT = 0x0401;
        public const GLuint GL_BACK_LEFT = 0x0402;
        public const GLuint GL_BACK_RIGHT = 0x0403;
        public const GLuint GL_FRONT = 0x0404;
        public const GLuint GL_BACK = 0x0405;
        public const GLuint GL_LEFT = 0x0406;
        public const GLuint GL_RIGHT = 0x0407;
        public const GLuint GL_FRONT_AND_BACK = 0x0408;
        public const GLuint GL_AUX0 = 0x0409;
        public const GLuint GL_AUX1 = 0x040A;
        public const GLuint GL_AUX2 = 0x040B;
        public const GLuint GL_AUX3 = 0x040C;
        public const GLuint GL_NO_ERROR = 0;
        public const GLuint GL_INVALID_ENUM = 0x0500;
        public const GLuint GL_INVALID_VALUE = 0x0501;
        public const GLuint GL_INVALID_OPERATION = 0x0502;
        public const GLuint GL_STACK_OVERFLOW = 0x0503;
        public const GLuint GL_STACK_UNDERFLOW = 0x0504;
        public const GLuint GL_OUT_OF_MEMORY = 0x0505;
        public const GLuint GL_2D = 0x0600;
        public const GLuint GL_3D = 0x0601;
        public const GLuint GL_3D_COLOR = 0x0602;
        public const GLuint GL_3D_COLOR_TEXTURE = 0x0603;
        public const GLuint GL_4D_COLOR_TEXTURE = 0x0604;
        public const GLuint GL_PASS_THROUGH_TOKEN = 0x0700;
        public const GLuint GL_POINT_TOKEN = 0x0701;
        public const GLuint GL_LINE_TOKEN = 0x0702;
        public const GLuint GL_POLYGON_TOKEN = 0x0703;
        public const GLuint GL_BITMAP_TOKEN = 0x0704;
        public const GLuint GL_DRAW_PIXEL_TOKEN = 0x0705;
        public const GLuint GL_COPY_PIXEL_TOKEN = 0x0706;
        public const GLuint GL_LINE_RESET_TOKEN = 0x0707;
        public const GLuint GL_TEXTURE_DEFORMATION_BIT_SGIX = 0x00000001;
        public const GLuint GL_GEOMETRY_DEFORMATION_BIT_SGIX = 0x00000002;
        public const GLuint GL_EXP = 0x0800;
        public const GLuint GL_EXP2 = 0x0801;
        public const GLuint GL_CW = 0x0900;
        public const GLuint GL_CCW = 0x0901;
        public const GLuint GL_COEFF = 0x0A00;
        public const GLuint GL_ORDER = 0x0A01;
        public const GLuint GL_DOMAIN = 0x0A02;
        public const GLuint GL_PIXEL_MAP_I_TO_I = 0x0C70;
        public const GLuint GL_PIXEL_MAP_S_TO_S = 0x0C71;
        public const GLuint GL_PIXEL_MAP_I_TO_R = 0x0C72;
        public const GLuint GL_PIXEL_MAP_I_TO_G = 0x0C73;
        public const GLuint GL_PIXEL_MAP_I_TO_B = 0x0C74;
        public const GLuint GL_PIXEL_MAP_I_TO_A = 0x0C75;
        public const GLuint GL_PIXEL_MAP_R_TO_R = 0x0C76;
        public const GLuint GL_PIXEL_MAP_G_TO_G = 0x0C77;
        public const GLuint GL_PIXEL_MAP_B_TO_B = 0x0C78;
        public const GLuint GL_PIXEL_MAP_A_TO_A = 0x0C79;
        public const GLuint GL_VERTEX_ARRAY_POINTER = 0x808E;
        public const GLuint GL_NORMAL_ARRAY_POINTER = 0x808F;
        public const GLuint GL_COLOR_ARRAY_POINTER = 0x8090;
        public const GLuint GL_INDEX_ARRAY_POINTER = 0x8091;
        public const GLuint GL_TEXTURE_COORD_ARRAY_POINTER = 0x8092;
        public const GLuint GL_EDGE_FLAG_ARRAY_POINTER = 0x8093;
        public const GLuint GL_FEEDBACK_BUFFER_POINTER = 0x0DF0;
        public const GLuint GL_SELECTION_BUFFER_POINTER = 0x0DF3;
        public const GLuint GL_CURRENT_COLOR = 0x0B00;
        public const GLuint GL_CURRENT_INDEX = 0x0B01;
        public const GLuint GL_CURRENT_NORMAL = 0x0B02;
        public const GLuint GL_CURRENT_TEXTURE_COORDS = 0x0B03;
        public const GLuint GL_CURRENT_RASTER_COLOR = 0x0B04;
        public const GLuint GL_CURRENT_RASTER_INDEX = 0x0B05;
        public const GLuint GL_CURRENT_RASTER_TEXTURE_COORDS = 0x0B06;
        public const GLuint GL_CURRENT_RASTER_POSITION = 0x0B07;
        public const GLuint GL_CURRENT_RASTER_POSITION_VALID = 0x0B08;
        public const GLuint GL_CURRENT_RASTER_DISTANCE = 0x0B09;
        public const GLuint GL_POINT_SMOOTH = 0x0B10;
        public const GLuint GL_POINT_SIZE = 0x0B11;
        public const GLuint GL_POINT_SIZE_RANGE = 0x0B12;
        public const GLuint GL_POINT_SIZE_GRANULARITY = 0x0B13;
        public const GLuint GL_LINE_SMOOTH = 0x0B20;
        public const GLuint GL_LINE_WIDTH = 0x0B21;
        public const GLuint GL_LINE_WIDTH_RANGE = 0x0B22;
        public const GLuint GL_LINE_WIDTH_GRANULARITY = 0x0B23;
        public const GLuint GL_LINE_STIPPLE = 0x0B24;
        public const GLuint GL_LINE_STIPPLE_PATTERN = 0x0B25;
        public const GLuint GL_LINE_STIPPLE_REPEAT = 0x0B26;
        public const GLuint GL_LIST_MODE = 0x0B30;
        public const GLuint GL_MAX_LIST_NESTING = 0x0B31;
        public const GLuint GL_LIST_BASE = 0x0B32;
        public const GLuint GL_LIST_INDEX = 0x0B33;
        public const GLuint GL_POLYGON_MODE = 0x0B40;
        public const GLuint GL_POLYGON_SMOOTH = 0x0B41;
        public const GLuint GL_POLYGON_STIPPLE = 0x0B42;
        public const GLuint GL_EDGE_FLAG = 0x0B43;
        public const GLuint GL_CULL_FACE = 0x0B44;
        public const GLuint GL_CULL_FACE_MODE = 0x0B45;
        public const GLuint GL_FRONT_FACE = 0x0B46;
        public const GLuint GL_LIGHTING = 0x0B50;
        public const GLuint GL_LIGHT_MODEL_LOCAL_VIEWER = 0x0B51;
        public const GLuint GL_LIGHT_MODEL_TWO_SIDE = 0x0B52;
        public const GLuint GL_LIGHT_MODEL_AMBIENT = 0x0B53;
        public const GLuint GL_SHADE_MODEL = 0x0B54;
        public const GLuint GL_COLOR_MATERIAL_FACE = 0x0B55;
        public const GLuint GL_COLOR_MATERIAL_PARAMETER = 0x0B56;
        public const GLuint GL_COLOR_MATERIAL = 0x0B57;
        public const GLuint GL_FOG = 0x0B60;
        public const GLuint GL_FOG_INDEX = 0x0B61;
        public const GLuint GL_FOG_DENSITY = 0x0B62;
        public const GLuint GL_FOG_START = 0x0B63;
        public const GLuint GL_FOG_END = 0x0B64;
        public const GLuint GL_FOG_MODE = 0x0B65;
        public const GLuint GL_FOG_COLOR = 0x0B66;
        public const GLuint GL_DEPTH_RANGE = 0x0B70;
        public const GLuint GL_DEPTH_TEST = 0x0B71;
        public const GLuint GL_DEPTH_WRITEMASK = 0x0B72;
        public const GLuint GL_DEPTH_CLEAR_VALUE = 0x0B73;
        public const GLuint GL_DEPTH_FUNC = 0x0B74;
        public const GLuint GL_ACCUM_CLEAR_VALUE = 0x0B80;
        public const GLuint GL_STENCIL_TEST = 0x0B90;
        public const GLuint GL_STENCIL_CLEAR_VALUE = 0x0B91;
        public const GLuint GL_STENCIL_FUNC = 0x0B92;
        public const GLuint GL_STENCIL_VALUE_MASK = 0x0B93;
        public const GLuint GL_STENCIL_FAIL = 0x0B94;
        public const GLuint GL_STENCIL_PASS_DEPTH_FAIL = 0x0B95;
        public const GLuint GL_STENCIL_PASS_DEPTH_PASS = 0x0B96;
        public const GLuint GL_STENCIL_REF = 0x0B97;
        public const GLuint GL_STENCIL_WRITEMASK = 0x0B98;
        public const GLuint GL_MATRIX_MODE = 0x0BA0;
        public const GLuint GL_NORMALIZE = 0x0BA1;
        public const GLuint GL_VIEWPORT = 0x0BA2;
        public const GLuint GL_MODELVIEW_STACK_DEPTH = 0x0BA3;
        public const GLuint GL_PROJECTION_STACK_DEPTH = 0x0BA4;
        public const GLuint GL_TEXTURE_STACK_DEPTH = 0x0BA5;
        public const GLuint GL_MODELVIEW_MATRIX = 0x0BA6;
        public const GLuint GL_PROJECTION_MATRIX = 0x0BA7;
        public const GLuint GL_TEXTURE_MATRIX = 0x0BA8;
        public const GLuint GL_ATTRIB_STACK_DEPTH = 0x0BB0;
        public const GLuint GL_CLIENT_ATTRIB_STACK_DEPTH = 0x0BB1;
        public const GLuint GL_ALPHA_TEST = 0x0BC0;
        public const GLuint GL_ALPHA_TEST_FUNC = 0x0BC1;
        public const GLuint GL_ALPHA_TEST_REF = 0x0BC2;
        public const GLuint GL_DITHER = 0x0BD0;
        public const GLuint GL_BLEND_DST = 0x0BE0;
        public const GLuint GL_BLEND_SRC = 0x0BE1;
        public const GLuint GL_BLEND = 0x0BE2;
        public const GLuint GL_LOGIC_OP_MODE = 0x0BF0;
        public const GLuint GL_INDEX_LOGIC_OP = 0x0BF1;
        public const GLuint GL_LOGIC_OP = 0x0BF1;
        public const GLuint GL_COLOR_LOGIC_OP = 0x0BF2;
        public const GLuint GL_AUX_BUFFERS = 0x0C00;
        public const GLuint GL_DRAW_BUFFER = 0x0C01;
        public const GLuint GL_READ_BUFFER = 0x0C02;
        public const GLuint GL_SCISSOR_BOX = 0x0C10;
        public const GLuint GL_SCISSOR_TEST = 0x0C11;
        public const GLuint GL_INDEX_CLEAR_VALUE = 0x0C20;
        public const GLuint GL_INDEX_WRITEMASK = 0x0C21;
        public const GLuint GL_COLOR_CLEAR_VALUE = 0x0C22;
        public const GLuint GL_COLOR_WRITEMASK = 0x0C23;
        public const GLuint GL_INDEX_MODE = 0x0C30;
        public const GLuint GL_RGBA_MODE = 0x0C31;
        public const GLuint GL_DOUBLEBUFFER = 0x0C32;
        public const GLuint GL_STEREO = 0x0C33;
        public const GLuint GL_RENDER_MODE = 0x0C40;
        public const GLuint GL_PERSPECTIVE_CORRECTION_HINT = 0x0C50;
        public const GLuint GL_POINT_SMOOTH_HINT = 0x0C51;
        public const GLuint GL_LINE_SMOOTH_HINT = 0x0C52;
        public const GLuint GL_POLYGON_SMOOTH_HINT = 0x0C53;
        public const GLuint GL_FOG_HINT = 0x0C54;
        public const GLuint GL_TEXTURE_GEN_S = 0x0C60;
        public const GLuint GL_TEXTURE_GEN_T = 0x0C61;
        public const GLuint GL_TEXTURE_GEN_R = 0x0C62;
        public const GLuint GL_TEXTURE_GEN_Q = 0x0C63;
        public const GLuint GL_PIXEL_MAP_I_TO_I_SIZE = 0x0CB0;
        public const GLuint GL_PIXEL_MAP_S_TO_S_SIZE = 0x0CB1;
        public const GLuint GL_PIXEL_MAP_I_TO_R_SIZE = 0x0CB2;
        public const GLuint GL_PIXEL_MAP_I_TO_G_SIZE = 0x0CB3;
        public const GLuint GL_PIXEL_MAP_I_TO_B_SIZE = 0x0CB4;
        public const GLuint GL_PIXEL_MAP_I_TO_A_SIZE = 0x0CB5;
        public const GLuint GL_PIXEL_MAP_R_TO_R_SIZE = 0x0CB6;
        public const GLuint GL_PIXEL_MAP_G_TO_G_SIZE = 0x0CB7;
        public const GLuint GL_PIXEL_MAP_B_TO_B_SIZE = 0x0CB8;
        public const GLuint GL_PIXEL_MAP_A_TO_A_SIZE = 0x0CB9;
        public const GLuint GL_UNPACK_SWAP_BYTES = 0x0CF0;
        public const GLuint GL_UNPACK_LSB_FIRST = 0x0CF1;
        public const GLuint GL_UNPACK_ROW_LENGTH = 0x0CF2;
        public const GLuint GL_UNPACK_SKIP_ROWS = 0x0CF3;
        public const GLuint GL_UNPACK_SKIP_PIXELS = 0x0CF4;
        public const GLuint GL_UNPACK_ALIGNMENT = 0x0CF5;
        public const GLuint GL_PACK_SWAP_BYTES = 0x0D00;
        public const GLuint GL_PACK_LSB_FIRST = 0x0D01;
        public const GLuint GL_PACK_ROW_LENGTH = 0x0D02;
        public const GLuint GL_PACK_SKIP_ROWS = 0x0D03;
        public const GLuint GL_PACK_SKIP_PIXELS = 0x0D04;
        public const GLuint GL_PACK_ALIGNMENT = 0x0D05;
        public const GLuint GL_MAP_COLOR = 0x0D10;
        public const GLuint GL_MAP_STENCIL = 0x0D11;
        public const GLuint GL_INDEX_SHIFT = 0x0D12;
        public const GLuint GL_INDEX_OFFSET = 0x0D13;
        public const GLuint GL_RED_SCALE = 0x0D14;
        public const GLuint GL_RED_BIAS = 0x0D15;
        public const GLuint GL_ZOOM_X = 0x0D16;
        public const GLuint GL_ZOOM_Y = 0x0D17;
        public const GLuint GL_GREEN_SCALE = 0x0D18;
        public const GLuint GL_GREEN_BIAS = 0x0D19;
        public const GLuint GL_BLUE_SCALE = 0x0D1A;
        public const GLuint GL_BLUE_BIAS = 0x0D1B;
        public const GLuint GL_ALPHA_SCALE = 0x0D1C;
        public const GLuint GL_ALPHA_BIAS = 0x0D1D;
        public const GLuint GL_DEPTH_SCALE = 0x0D1E;
        public const GLuint GL_DEPTH_BIAS = 0x0D1F;
        public const GLuint GL_MAX_EVAL_ORDER = 0x0D30;
        public const GLuint GL_MAX_LIGHTS = 0x0D31;
        public const GLuint GL_MAX_CLIP_PLANES = 0x0D32;
        public const GLuint GL_MAX_TEXTURE_SIZE = 0x0D33;
        public const GLuint GL_MAX_PIXEL_MAP_TABLE = 0x0D34;
        public const GLuint GL_MAX_ATTRIB_STACK_DEPTH = 0x0D35;
        public const GLuint GL_MAX_MODELVIEW_STACK_DEPTH = 0x0D36;
        public const GLuint GL_MAX_NAME_STACK_DEPTH = 0x0D37;
        public const GLuint GL_MAX_PROJECTION_STACK_DEPTH = 0x0D38;
        public const GLuint GL_MAX_TEXTURE_STACK_DEPTH = 0x0D39;
        public const GLuint GL_MAX_VIEWPORT_DIMS = 0x0D3A;
        public const GLuint GL_MAX_CLIENT_ATTRIB_STACK_DEPTH = 0x0D3B;
        public const GLuint GL_SUBPIXEL_BITS = 0x0D50;
        public const GLuint GL_INDEX_BITS = 0x0D51;
        public const GLuint GL_RED_BITS = 0x0D52;
        public const GLuint GL_GREEN_BITS = 0x0D53;
        public const GLuint GL_BLUE_BITS = 0x0D54;
        public const GLuint GL_ALPHA_BITS = 0x0D55;
        public const GLuint GL_DEPTH_BITS = 0x0D56;
        public const GLuint GL_STENCIL_BITS = 0x0D57;
        public const GLuint GL_ACCUM_RED_BITS = 0x0D58;
        public const GLuint GL_ACCUM_GREEN_BITS = 0x0D59;
        public const GLuint GL_ACCUM_BLUE_BITS = 0x0D5A;
        public const GLuint GL_ACCUM_ALPHA_BITS = 0x0D5B;
        public const GLuint GL_NAME_STACK_DEPTH = 0x0D70;
        public const GLuint GL_AUTO_NORMAL = 0x0D80;
        public const GLuint GL_MAP1_COLOR_4 = 0x0D90;
        public const GLuint GL_MAP1_INDEX = 0x0D91;
        public const GLuint GL_MAP1_NORMAL = 0x0D92;
        public const GLuint GL_MAP1_TEXTURE_COORD_1 = 0x0D93;
        public const GLuint GL_MAP1_TEXTURE_COORD_2 = 0x0D94;
        public const GLuint GL_MAP1_TEXTURE_COORD_3 = 0x0D95;
        public const GLuint GL_MAP1_TEXTURE_COORD_4 = 0x0D96;
        public const GLuint GL_MAP1_VERTEX_3 = 0x0D97;
        public const GLuint GL_MAP1_VERTEX_4 = 0x0D98;
        public const GLuint GL_MAP2_COLOR_4 = 0x0DB0;
        public const GLuint GL_MAP2_INDEX = 0x0DB1;
        public const GLuint GL_MAP2_NORMAL = 0x0DB2;
        public const GLuint GL_MAP2_TEXTURE_COORD_1 = 0x0DB3;
        public const GLuint GL_MAP2_TEXTURE_COORD_2 = 0x0DB4;
        public const GLuint GL_MAP2_TEXTURE_COORD_3 = 0x0DB5;
        public const GLuint GL_MAP2_TEXTURE_COORD_4 = 0x0DB6;
        public const GLuint GL_MAP2_VERTEX_3 = 0x0DB7;
        public const GLuint GL_MAP2_VERTEX_4 = 0x0DB8;
        public const GLuint GL_MAP1_GRID_DOMAIN = 0x0DD0;
        public const GLuint GL_MAP1_GRID_SEGMENTS = 0x0DD1;
        public const GLuint GL_MAP2_GRID_DOMAIN = 0x0DD2;
        public const GLuint GL_MAP2_GRID_SEGMENTS = 0x0DD3;
        public const GLuint GL_TEXTURE_1D = 0x0DE0;
        public const GLuint GL_TEXTURE_2D = 0x0DE1;
        public const GLuint GL_FEEDBACK_BUFFER_SIZE = 0x0DF1;
        public const GLuint GL_FEEDBACK_BUFFER_TYPE = 0x0DF2;
        public const GLuint GL_SELECTION_BUFFER_SIZE = 0x0DF4;
        public const GLuint GL_POLYGON_OFFSET_UNITS = 0x2A00;
        public const GLuint GL_POLYGON_OFFSET_POINT = 0x2A01;
        public const GLuint GL_POLYGON_OFFSET_LINE = 0x2A02;
        public const GLuint GL_POLYGON_OFFSET_FILL = 0x8037;
        public const GLuint GL_POLYGON_OFFSET_FACTOR = 0x8038;
        public const GLuint GL_TEXTURE_BINDING_1D = 0x8068;
        public const GLuint GL_TEXTURE_BINDING_2D = 0x8069;
        public const GLuint GL_TEXTURE_BINDING_3D = 0x806A;
        public const GLuint GL_VERTEX_ARRAY = 0x8074;
        public const GLuint GL_NORMAL_ARRAY = 0x8075;
        public const GLuint GL_COLOR_ARRAY = 0x8076;
        public const GLuint GL_INDEX_ARRAY = 0x8077;
        public const GLuint GL_TEXTURE_COORD_ARRAY = 0x8078;
        public const GLuint GL_EDGE_FLAG_ARRAY = 0x8079;
        public const GLuint GL_VERTEX_ARRAY_SIZE = 0x807A;
        public const GLuint GL_VERTEX_ARRAY_TYPE = 0x807B;
        public const GLuint GL_VERTEX_ARRAY_STRIDE = 0x807C;
        public const GLuint GL_NORMAL_ARRAY_TYPE = 0x807E;
        public const GLuint GL_NORMAL_ARRAY_STRIDE = 0x807F;
        public const GLuint GL_COLOR_ARRAY_SIZE = 0x8081;
        public const GLuint GL_COLOR_ARRAY_TYPE = 0x8082;
        public const GLuint GL_COLOR_ARRAY_STRIDE = 0x8083;
        public const GLuint GL_INDEX_ARRAY_TYPE = 0x8085;
        public const GLuint GL_INDEX_ARRAY_STRIDE = 0x8086;
        public const GLuint GL_TEXTURE_COORD_ARRAY_SIZE = 0x8088;
        public const GLuint GL_TEXTURE_COORD_ARRAY_TYPE = 0x8089;
        public const GLuint GL_TEXTURE_COORD_ARRAY_STRIDE = 0x808A;
        public const GLuint GL_EDGE_FLAG_ARRAY_STRIDE = 0x808C;
        public const GLuint GL_TEXTURE_WIDTH = 0x1000;
        public const GLuint GL_TEXTURE_HEIGHT = 0x1001;
        public const GLuint GL_TEXTURE_INTERNAL_FORMAT = 0x1003;
        public const GLuint GL_TEXTURE_COMPONENTS = 0x1003;
        public const GLuint GL_TEXTURE_BORDER_COLOR = 0x1004;
        public const GLuint GL_TEXTURE_BORDER = 0x1005;
        public const GLuint GL_TEXTURE_RED_SIZE = 0x805C;
        public const GLuint GL_TEXTURE_GREEN_SIZE = 0x805D;
        public const GLuint GL_TEXTURE_BLUE_SIZE = 0x805E;
        public const GLuint GL_TEXTURE_ALPHA_SIZE = 0x805F;
        public const GLuint GL_TEXTURE_LUMINANCE_SIZE = 0x8060;
        public const GLuint GL_TEXTURE_INTENSITY_SIZE = 0x8061;
        public const GLuint GL_TEXTURE_PRIORITY = 0x8066;
        public const GLuint GL_TEXTURE_RESIDENT = 0x8067;
        public const GLuint GL_DONT_CARE = 0x1100;
        public const GLuint GL_FASTEST = 0x1101;
        public const GLuint GL_NICEST = 0x1102;
        public const GLuint GL_AMBIENT = 0x1200;
        public const GLuint GL_DIFFUSE = 0x1201;
        public const GLuint GL_SPECULAR = 0x1202;
        public const GLuint GL_POSITION = 0x1203;
        public const GLuint GL_SPOT_DIRECTION = 0x1204;
        public const GLuint GL_SPOT_EXPONENT = 0x1205;
        public const GLuint GL_SPOT_CUTOFF = 0x1206;
        public const GLuint GL_CONSTANT_ATTENUATION = 0x1207;
        public const GLuint GL_LINEAR_ATTENUATION = 0x1208;
        public const GLuint GL_QUADRATIC_ATTENUATION = 0x1209;
        public const GLuint GL_COMPILE = 0x1300;
        public const GLuint GL_COMPILE_AND_EXECUTE = 0x1301;
        public const GLuint GL_BYTE = 0x1400;
        public const GLuint GL_UNSIGNED_BYTE = 0x1401;
        public const GLuint GL_SHORT = 0x1402;
        public const GLuint GL_UNSIGNED_SHORT = 0x1403;
        public const GLuint GL_INT = 0x1404;
        public const GLuint GL_UNSIGNED_INT = 0x1405;
        public const GLuint GL_FLOAT = 0x1406;
        public const GLuint GL_2_BYTES = 0x1407;
        public const GLuint GL_3_BYTES = 0x1408;
        public const GLuint GL_4_BYTES = 0x1409;
        public const GLuint GL_DOUBLE = 0x140A;
        public const GLuint GL_DOUBLE_EXT = 0x140A;
        public const GLuint GL_CLEAR = 0x1500;
        public const GLuint GL_AND = 0x1501;
        public const GLuint GL_AND_REVERSE = 0x1502;
        public const GLuint GL_COPY = 0x1503;
        public const GLuint GL_AND_INVERTED = 0x1504;
        public const GLuint GL_NOOP = 0x1505;
        public const GLuint GL_XOR = 0x1506;
        public const GLuint GL_OR = 0x1507;
        public const GLuint GL_NOR = 0x1508;
        public const GLuint GL_EQUIV = 0x1509;
        public const GLuint GL_INVERT = 0x150A;
        public const GLuint GL_OR_REVERSE = 0x150B;
        public const GLuint GL_COPY_INVERTED = 0x150C;
        public const GLuint GL_OR_INVERTED = 0x150D;
        public const GLuint GL_NAND = 0x150E;
        public const GLuint GL_SET = 0x150F;
        public const GLuint GL_EMISSION = 0x1600;
        public const GLuint GL_SHININESS = 0x1601;
        public const GLuint GL_AMBIENT_AND_DIFFUSE = 0x1602;
        public const GLuint GL_COLOR_INDEXES = 0x1603;
        public const GLuint GL_MODELVIEW = 0x1700;
        public const GLuint GL_PROJECTION = 0x1701;
        public const GLuint GL_TEXTURE = 0x1702;
        public const GLuint GL_COLOR = 0x1800;
        public const GLuint GL_DEPTH = 0x1801;
        public const GLuint GL_STENCIL = 0x1802;
        public const GLuint GL_COLOR_INDEX = 0x1900;
        public const GLuint GL_STENCIL_INDEX = 0x1901;
        public const GLuint GL_DEPTH_COMPONENT = 0x1902;
        public const GLuint GL_RED = 0x1903;
        public const GLuint GL_GREEN = 0x1904;
        public const GLuint GL_BLUE = 0x1905;
        public const GLuint GL_ALPHA = 0x1906;
        public const GLuint GL_RGB = 0x1907;
        public const GLuint GL_RGBA = 0x1908;
        public const GLuint GL_LUMINANCE = 0x1909;
        public const GLuint GL_LUMINANCE_ALPHA = 0x190A;
        public const GLuint GL_BITMAP = 0x1A00;
        public const GLuint GL_POINT = 0x1B00;
        public const GLuint GL_LINE = 0x1B01;
        public const GLuint GL_FILL = 0x1B02;
        public const GLuint GL_RENDER = 0x1C00;
        public const GLuint GL_FEEDBACK = 0x1C01;
        public const GLuint GL_SELECT = 0x1C02;
        public const GLuint GL_FLAT = 0x1D00;
        public const GLuint GL_SMOOTH = 0x1D01;
        public const GLuint GL_KEEP = 0x1E00;
        public const GLuint GL_REPLACE = 0x1E01;
        public const GLuint GL_INCR = 0x1E02;
        public const GLuint GL_DECR = 0x1E03;
        public const GLuint GL_VENDOR = 0x1F00;
        public const GLuint GL_RENDERER = 0x1F01;
        public const GLuint GL_VERSION = 0x1F02;
        public const GLuint GL_EXTENSIONS = 0x1F03;
        public const GLuint GL_S = 0x2000;
        public const GLuint GL_T = 0x2001;
        public const GLuint GL_R = 0x2002;
        public const GLuint GL_Q = 0x2003;
        public const GLuint GL_MODULATE = 0x2100;
        public const GLuint GL_DECAL = 0x2101;
        public const GLuint GL_TEXTURE_ENV_MODE = 0x2200;
        public const GLuint GL_TEXTURE_ENV_COLOR = 0x2201;
        public const GLuint GL_TEXTURE_ENV = 0x2300;
        public const GLuint GL_EYE_LINEAR = 0x2400;
        public const GLuint GL_OBJECT_LINEAR = 0x2401;
        public const GLuint GL_SPHERE_MAP = 0x2402;
        public const GLuint GL_TEXTURE_GEN_MODE = 0x2500;
        public const GLuint GL_OBJECT_PLANE = 0x2501;
        public const GLuint GL_EYE_PLANE = 0x2502;
        public const GLuint GL_NEAREST = 0x2600;
        public const GLuint GL_LINEAR = 0x2601;
        public const GLuint GL_NEAREST_MIPMAP_NEAREST = 0x2700;
        public const GLuint GL_LINEAR_MIPMAP_NEAREST = 0x2701;
        public const GLuint GL_NEAREST_MIPMAP_LINEAR = 0x2702;
        public const GLuint GL_LINEAR_MIPMAP_LINEAR = 0x2703;
        public const GLuint GL_TEXTURE_MAG_FILTER = 0x2800;
        public const GLuint GL_TEXTURE_MIN_FILTER = 0x2801;
        public const GLuint GL_TEXTURE_WRAP_S = 0x2802;
        public const GLuint GL_TEXTURE_WRAP_T = 0x2803;
        public const GLuint GL_PROXY_TEXTURE_1D = 0x8063;
        public const GLuint GL_PROXY_TEXTURE_2D = 0x8064;
        public const GLuint GL_CLAMP = 0x2900;
        public const GLuint GL_REPEAT = 0x2901;
        public const GLuint GL_R3_G3_B2 = 0x2A10;
        public const GLuint GL_ALPHA4 = 0x803B;
        public const GLuint GL_ALPHA8 = 0x803C;
        public const GLuint GL_ALPHA12 = 0x803D;
        public const GLuint GL_ALPHA16 = 0x803E;
        public const GLuint GL_LUMINANCE4 = 0x803F;
        public const GLuint GL_LUMINANCE8 = 0x8040;
        public const GLuint GL_LUMINANCE12 = 0x8041;
        public const GLuint GL_LUMINANCE16 = 0x8042;
        public const GLuint GL_LUMINANCE4_ALPHA4 = 0x8043;
        public const GLuint GL_LUMINANCE6_ALPHA2 = 0x8044;
        public const GLuint GL_LUMINANCE8_ALPHA8 = 0x8045;
        public const GLuint GL_LUMINANCE12_ALPHA4 = 0x8046;
        public const GLuint GL_LUMINANCE12_ALPHA12 = 0x8047;
        public const GLuint GL_LUMINANCE16_ALPHA16 = 0x8048;
        public const GLuint GL_INTENSITY = 0x8049;
        public const GLuint GL_INTENSITY4 = 0x804A;
        public const GLuint GL_INTENSITY8 = 0x804B;
        public const GLuint GL_INTENSITY12 = 0x804C;
        public const GLuint GL_INTENSITY16 = 0x804D;
        public const GLuint GL_RGB4 = 0x804F;
        public const GLuint GL_RGB5 = 0x8050;
        public const GLuint GL_RGB8 = 0x8051;
        public const GLuint GL_RGB10 = 0x8052;
        public const GLuint GL_RGB12 = 0x8053;
        public const GLuint GL_RGB16 = 0x8054;
        public const GLuint GL_RGBA2 = 0x8055;
        public const GLuint GL_RGBA4 = 0x8056;
        public const GLuint GL_RGB5_A1 = 0x8057;
        public const GLuint GL_RGBA8 = 0x8058;
        public const GLuint GL_RGB10_A2 = 0x8059;
        public const GLuint GL_RGBA12 = 0x805A;
        public const GLuint GL_RGBA16 = 0x805B;
        public const GLuint GL_V2F = 0x2A20;
        public const GLuint GL_V3F = 0x2A21;
        public const GLuint GL_C4UB_V2F = 0x2A22;
        public const GLuint GL_C4UB_V3F = 0x2A23;
        public const GLuint GL_C3F_V3F = 0x2A24;
        public const GLuint GL_N3F_V3F = 0x2A25;
        public const GLuint GL_C4F_N3F_V3F = 0x2A26;
        public const GLuint GL_T2F_V3F = 0x2A27;
        public const GLuint GL_T4F_V4F = 0x2A28;
        public const GLuint GL_T2F_C4UB_V3F = 0x2A29;
        public const GLuint GL_T2F_C3F_V3F = 0x2A2A;
        public const GLuint GL_T2F_N3F_V3F = 0x2A2B;
        public const GLuint GL_T2F_C4F_N3F_V3F = 0x2A2C;
        public const GLuint GL_T4F_C4F_N3F_V4F = 0x2A2D;
        public const GLuint GL_CLIP_PLANE0 = 0x3000;
        public const GLuint GL_CLIP_PLANE1 = 0x3001;
        public const GLuint GL_CLIP_PLANE2 = 0x3002;
        public const GLuint GL_CLIP_PLANE3 = 0x3003;
        public const GLuint GL_CLIP_PLANE4 = 0x3004;
        public const GLuint GL_CLIP_PLANE5 = 0x3005;
        public const GLuint GL_LIGHT0 = 0x4000;
        public const GLuint GL_LIGHT1 = 0x4001;
        public const GLuint GL_LIGHT2 = 0x4002;
        public const GLuint GL_LIGHT3 = 0x4003;
        public const GLuint GL_LIGHT4 = 0x4004;
        public const GLuint GL_LIGHT5 = 0x4005;
        public const GLuint GL_LIGHT6 = 0x4006;
        public const GLuint GL_LIGHT7 = 0x4007;
        public const GLuint GL_ABGR_EXT = 0x8000;
        public const GLuint GL_CONSTANT_COLOR = 0x8001;
        public const GLuint GL_CONSTANT_COLOR_EXT = 0x8001;
        public const GLuint GL_ONE_MINUS_CONSTANT_COLOR = 0x8002;
        public const GLuint GL_ONE_MINUS_CONSTANT_COLOR_EXT = 0x8002;
        public const GLuint GL_CONSTANT_ALPHA = 0x8003;
        public const GLuint GL_CONSTANT_ALPHA_EXT = 0x8003;
        public const GLuint GL_ONE_MINUS_CONSTANT_ALPHA = 0x8004;
        public const GLuint GL_ONE_MINUS_CONSTANT_ALPHA_EXT = 0x8004;
        public const GLuint GL_BLEND_COLOR = 0x8005;
        public const GLuint GL_BLEND_COLOR_EXT = 0x8005;
        public const GLuint GL_FUNC_ADD = 0x8006;
        public const GLuint GL_FUNC_ADD_EXT = 0x8006;
        public const GLuint GL_MIN = 0x8007;
        public const GLuint GL_MIN_EXT = 0x8007;
        public const GLuint GL_MAX = 0x8008;
        public const GLuint GL_MAX_EXT = 0x8008;
        public const GLuint GL_BLEND_EQUATION = 0x8009;
        public const GLuint GL_BLEND_EQUATION_EXT = 0x8009;
        public const GLuint GL_FUNC_SUBTRACT = 0x800A;
        public const GLuint GL_FUNC_SUBTRACT_EXT = 0x800A;
        public const GLuint GL_FUNC_REVERSE_SUBTRACT = 0x800B;
        public const GLuint GL_FUNC_REVERSE_SUBTRACT_EXT = 0x800B;
        public const GLuint GL_CMYK_EXT = 0x800C;
        public const GLuint GL_CMYKA_EXT = 0x800D;
        public const GLuint GL_PACK_CMYK_HINT_EXT = 0x800E;
        public const GLuint GL_UNPACK_CMYK_HINT_EXT = 0x800F;
        public const GLuint GL_CONVOLUTION_1D = 0x8010;
        public const GLuint GL_CONVOLUTION_1D_EXT = 0x8010;
        public const GLuint GL_CONVOLUTION_2D = 0x8011;
        public const GLuint GL_CONVOLUTION_2D_EXT = 0x8011;
        public const GLuint GL_SEPARABLE_2D = 0x8012;
        public const GLuint GL_SEPARABLE_2D_EXT = 0x8012;
        public const GLuint GL_CONVOLUTION_BORDER_MODE = 0x8013;
        public const GLuint GL_CONVOLUTION_BORDER_MODE_EXT = 0x8013;
        public const GLuint GL_CONVOLUTION_FILTER_SCALE = 0x8014;
        public const GLuint GL_CONVOLUTION_FILTER_SCALE_EXT = 0x8014;
        public const GLuint GL_CONVOLUTION_FILTER_BIAS = 0x8015;
        public const GLuint GL_CONVOLUTION_FILTER_BIAS_EXT = 0x8015;
        public const GLuint GL_REDUCE = 0x8016;
        public const GLuint GL_REDUCE_EXT = 0x8016;
        public const GLuint GL_CONVOLUTION_FORMAT = 0x8017;
        public const GLuint GL_CONVOLUTION_FORMAT_EXT = 0x8017;
        public const GLuint GL_CONVOLUTION_WIDTH = 0x8018;
        public const GLuint GL_CONVOLUTION_WIDTH_EXT = 0x8018;
        public const GLuint GL_CONVOLUTION_HEIGHT = 0x8019;
        public const GLuint GL_CONVOLUTION_HEIGHT_EXT = 0x8019;
        public const GLuint GL_MAX_CONVOLUTION_WIDTH = 0x801A;
        public const GLuint GL_MAX_CONVOLUTION_WIDTH_EXT = 0x801A;
        public const GLuint GL_MAX_CONVOLUTION_HEIGHT = 0x801B;
        public const GLuint GL_MAX_CONVOLUTION_HEIGHT_EXT = 0x801B;
        public const GLuint GL_POST_CONVOLUTION_RED_SCALE = 0x801C;
        public const GLuint GL_POST_CONVOLUTION_RED_SCALE_EXT = 0x801C;
        public const GLuint GL_POST_CONVOLUTION_GREEN_SCALE = 0x801D;
        public const GLuint GL_POST_CONVOLUTION_GREEN_SCALE_EXT = 0x801D;
        public const GLuint GL_POST_CONVOLUTION_BLUE_SCALE = 0x801E;
        public const GLuint GL_POST_CONVOLUTION_BLUE_SCALE_EXT = 0x801E;
        public const GLuint GL_POST_CONVOLUTION_ALPHA_SCALE = 0x801F;
        public const GLuint GL_POST_CONVOLUTION_ALPHA_SCALE_EXT = 0x801F;
        public const GLuint GL_POST_CONVOLUTION_RED_BIAS = 0x8020;
        public const GLuint GL_POST_CONVOLUTION_RED_BIAS_EXT = 0x8020;
        public const GLuint GL_POST_CONVOLUTION_GREEN_BIAS = 0x8021;
        public const GLuint GL_POST_CONVOLUTION_GREEN_BIAS_EXT = 0x8021;
        public const GLuint GL_POST_CONVOLUTION_BLUE_BIAS = 0x8022;
        public const GLuint GL_POST_CONVOLUTION_BLUE_BIAS_EXT = 0x8022;
        public const GLuint GL_POST_CONVOLUTION_ALPHA_BIAS = 0x8023;
        public const GLuint GL_POST_CONVOLUTION_ALPHA_BIAS_EXT = 0x8023;
        public const GLuint GL_HISTOGRAM = 0x8024;
        public const GLuint GL_HISTOGRAM_EXT = 0x8024;
        public const GLuint GL_PROXY_HISTOGRAM = 0x8025;
        public const GLuint GL_PROXY_HISTOGRAM_EXT = 0x8025;
        public const GLuint GL_HISTOGRAM_WIDTH = 0x8026;
        public const GLuint GL_HISTOGRAM_WIDTH_EXT = 0x8026;
        public const GLuint GL_HISTOGRAM_FORMAT = 0x8027;
        public const GLuint GL_HISTOGRAM_FORMAT_EXT = 0x8027;
        public const GLuint GL_HISTOGRAM_RED_SIZE = 0x8028;
        public const GLuint GL_HISTOGRAM_RED_SIZE_EXT = 0x8028;
        public const GLuint GL_HISTOGRAM_GREEN_SIZE = 0x8029;
        public const GLuint GL_HISTOGRAM_GREEN_SIZE_EXT = 0x8029;
        public const GLuint GL_HISTOGRAM_BLUE_SIZE = 0x802A;
        public const GLuint GL_HISTOGRAM_BLUE_SIZE_EXT = 0x802A;
        public const GLuint GL_HISTOGRAM_ALPHA_SIZE = 0x802B;
        public const GLuint GL_HISTOGRAM_ALPHA_SIZE_EXT = 0x802B;
        public const GLuint GL_HISTOGRAM_LUMINANCE_SIZE = 0x802C;
        public const GLuint GL_HISTOGRAM_LUMINANCE_SIZE_EXT = 0x802C;
        public const GLuint GL_HISTOGRAM_SINK = 0x802D;
        public const GLuint GL_HISTOGRAM_SINK_EXT = 0x802D;
        public const GLuint GL_MINMAX = 0x802E;
        public const GLuint GL_MINMAX_EXT = 0x802E;
        public const GLuint GL_MINMAX_FORMAT = 0x802F;
        public const GLuint GL_MINMAX_FORMAT_EXT = 0x802F;
        public const GLuint GL_MINMAX_SINK = 0x8030;
        public const GLuint GL_MINMAX_SINK_EXT = 0x8030;
        public const GLuint GL_TABLE_TOO_LARGE = 0x8031;
        public const GLuint GL_TABLE_TOO_LARGE_EXT = 0x8031;
        public const GLuint GL_UNSIGNED_BYTE_3_3_2 = 0x8032;
        public const GLuint GL_UNSIGNED_BYTE_3_3_2_EXT = 0x8032;
        public const GLuint GL_UNSIGNED_SHORT_4_4_4_4 = 0x8033;
        public const GLuint GL_UNSIGNED_SHORT_4_4_4_4_EXT = 0x8033;
        public const GLuint GL_UNSIGNED_SHORT_5_5_5_1 = 0x8034;
        public const GLuint GL_UNSIGNED_SHORT_5_5_5_1_EXT = 0x8034;
        public const GLuint GL_UNSIGNED_INT_8_8_8_8 = 0x8035;
        public const GLuint GL_UNSIGNED_INT_8_8_8_8_EXT = 0x8035;
        public const GLuint GL_UNSIGNED_INT_10_10_10_2 = 0x8036;
        public const GLuint GL_UNSIGNED_INT_10_10_10_2_EXT = 0x8036;
        public const GLuint GL_UNSIGNED_BYTE_2_3_3_REV = 0x8362;
        public const GLuint GL_UNSIGNED_BYTE_2_3_3_REV_EXT = 0x8362;
        public const GLuint GL_UNSIGNED_SHORT_5_6_5 = 0x8363;
        public const GLuint GL_UNSIGNED_SHORT_5_6_5_EXT = 0x8363;
        public const GLuint GL_UNSIGNED_SHORT_5_6_5_REV = 0x8364;
        public const GLuint GL_UNSIGNED_SHORT_5_6_5_REV_EXT = 0x8364;
        public const GLuint GL_UNSIGNED_SHORT_4_4_4_4_REV = 0x8365;
        public const GLuint GL_UNSIGNED_SHORT_4_4_4_4_REV_EXT = 0x8365;
        public const GLuint GL_UNSIGNED_SHORT_1_5_5_5_REV = 0x8366;
        public const GLuint GL_UNSIGNED_SHORT_1_5_5_5_REV_EXT = 0x8366;
        public const GLuint GL_UNSIGNED_INT_8_8_8_8_REV = 0x8367;
        public const GLuint GL_UNSIGNED_INT_8_8_8_8_REV_EXT = 0x8367;
        public const GLuint GL_UNSIGNED_INT_2_10_10_10_REV = 0x8368;
        public const GLuint GL_UNSIGNED_INT_2_10_10_10_REV_EXT = 0x8368;
        public const GLuint GL_POLYGON_OFFSET_EXT = 0x8037;
        public const GLuint GL_POLYGON_OFFSET_FACTOR_EXT = 0x8038;
        public const GLuint GL_POLYGON_OFFSET_BIAS_EXT = 0x8039;
        public const GLuint GL_RESCALE_NORMAL = 0x803A;
        public const GLuint GL_RESCALE_NORMAL_EXT = 0x803A;
        public const GLuint GL_ALPHA4_EXT = 0x803B;
        public const GLuint GL_ALPHA8_EXT = 0x803C;
        public const GLuint GL_ALPHA12_EXT = 0x803D;
        public const GLuint GL_ALPHA16_EXT = 0x803E;
        public const GLuint GL_LUMINANCE4_EXT = 0x803F;
        public const GLuint GL_LUMINANCE8_EXT = 0x8040;
        public const GLuint GL_LUMINANCE12_EXT = 0x8041;
        public const GLuint GL_LUMINANCE16_EXT = 0x8042;
        public const GLuint GL_LUMINANCE4_ALPHA4_EXT = 0x8043;
        public const GLuint GL_LUMINANCE6_ALPHA2_EXT = 0x8044;
        public const GLuint GL_LUMINANCE8_ALPHA8_EXT = 0x8045;
        public const GLuint GL_LUMINANCE12_ALPHA4_EXT = 0x8046;
        public const GLuint GL_LUMINANCE12_ALPHA12_EXT = 0x8047;
        public const GLuint GL_LUMINANCE16_ALPHA16_EXT = 0x8048;
        public const GLuint GL_INTENSITY_EXT = 0x8049;
        public const GLuint GL_INTENSITY4_EXT = 0x804A;
        public const GLuint GL_INTENSITY8_EXT = 0x804B;
        public const GLuint GL_INTENSITY12_EXT = 0x804C;
        public const GLuint GL_INTENSITY16_EXT = 0x804D;
        public const GLuint GL_RGB2_EXT = 0x804E;
        public const GLuint GL_RGB4_EXT = 0x804F;
        public const GLuint GL_RGB5_EXT = 0x8050;
        public const GLuint GL_RGB8_EXT = 0x8051;
        public const GLuint GL_RGB10_EXT = 0x8052;
        public const GLuint GL_RGB12_EXT = 0x8053;
        public const GLuint GL_RGB16_EXT = 0x8054;
        public const GLuint GL_RGBA2_EXT = 0x8055;
        public const GLuint GL_RGBA4_EXT = 0x8056;
        public const GLuint GL_RGB5_A1_EXT = 0x8057;
        public const GLuint GL_RGBA8_EXT = 0x8058;
        public const GLuint GL_RGB10_A2_EXT = 0x8059;
        public const GLuint GL_RGBA12_EXT = 0x805A;
        public const GLuint GL_RGBA16_EXT = 0x805B;
        public const GLuint GL_TEXTURE_RED_SIZE_EXT = 0x805C;
        public const GLuint GL_TEXTURE_GREEN_SIZE_EXT = 0x805D;
        public const GLuint GL_TEXTURE_BLUE_SIZE_EXT = 0x805E;
        public const GLuint GL_TEXTURE_ALPHA_SIZE_EXT = 0x805F;
        public const GLuint GL_TEXTURE_LUMINANCE_SIZE_EXT = 0x8060;
        public const GLuint GL_TEXTURE_INTENSITY_SIZE_EXT = 0x8061;
        public const GLuint GL_REPLACE_EXT = 0x8062;
        public const GLuint GL_PROXY_TEXTURE_1D_EXT = 0x8063;
        public const GLuint GL_PROXY_TEXTURE_2D_EXT = 0x8064;
        public const GLuint GL_TEXTURE_TOO_LARGE_EXT = 0x8065;
        public const GLuint GL_TEXTURE_PRIORITY_EXT = 0x8066;
        public const GLuint GL_TEXTURE_RESIDENT_EXT = 0x8067;
        public const GLuint GL_TEXTURE_1D_BINDING_EXT = 0x8068;
        public const GLuint GL_TEXTURE_2D_BINDING_EXT = 0x8069;
        public const GLuint GL_TEXTURE_3D_BINDING_EXT = 0x806A;
        public const GLuint GL_PACK_SKIP_IMAGES = 0x806B;
        public const GLuint GL_PACK_SKIP_IMAGES_EXT = 0x806B;
        public const GLuint GL_PACK_IMAGE_HEIGHT = 0x806C;
        public const GLuint GL_PACK_IMAGE_HEIGHT_EXT = 0x806C;
        public const GLuint GL_UNPACK_SKIP_IMAGES = 0x806D;
        public const GLuint GL_UNPACK_SKIP_IMAGES_EXT = 0x806D;
        public const GLuint GL_UNPACK_IMAGE_HEIGHT = 0x806E;
        public const GLuint GL_UNPACK_IMAGE_HEIGHT_EXT = 0x806E;
        public const GLuint GL_TEXTURE_3D = 0x806F;
        public const GLuint GL_TEXTURE_3D_EXT = 0x806F;
        public const GLuint GL_PROXY_TEXTURE_3D = 0x8070;
        public const GLuint GL_PROXY_TEXTURE_3D_EXT = 0x8070;
        public const GLuint GL_TEXTURE_DEPTH = 0x8071;
        public const GLuint GL_TEXTURE_DEPTH_EXT = 0x8071;
        public const GLuint GL_TEXTURE_WRAP_R = 0x8072;
        public const GLuint GL_TEXTURE_WRAP_R_EXT = 0x8072;
        public const GLuint GL_MAX_3D_TEXTURE_SIZE = 0x8073;
        public const GLuint GL_MAX_3D_TEXTURE_SIZE_EXT = 0x8073;
        public const GLuint GL_VERTEX_ARRAY_EXT = 0x8074;
        public const GLuint GL_NORMAL_ARRAY_EXT = 0x8075;
        public const GLuint GL_COLOR_ARRAY_EXT = 0x8076;
        public const GLuint GL_INDEX_ARRAY_EXT = 0x8077;
        public const GLuint GL_TEXTURE_COORD_ARRAY_EXT = 0x8078;
        public const GLuint GL_EDGE_FLAG_ARRAY_EXT = 0x8079;
        public const GLuint GL_VERTEX_ARRAY_SIZE_EXT = 0x807A;
        public const GLuint GL_VERTEX_ARRAY_TYPE_EXT = 0x807B;
        public const GLuint GL_VERTEX_ARRAY_STRIDE_EXT = 0x807C;
        public const GLuint GL_VERTEX_ARRAY_COUNT_EXT = 0x807D;
        public const GLuint GL_NORMAL_ARRAY_TYPE_EXT = 0x807E;
        public const GLuint GL_NORMAL_ARRAY_STRIDE_EXT = 0x807F;
        public const GLuint GL_NORMAL_ARRAY_COUNT_EXT = 0x8080;
        public const GLuint GL_COLOR_ARRAY_SIZE_EXT = 0x8081;
        public const GLuint GL_COLOR_ARRAY_TYPE_EXT = 0x8082;
        public const GLuint GL_COLOR_ARRAY_STRIDE_EXT = 0x8083;
        public const GLuint GL_COLOR_ARRAY_COUNT_EXT = 0x8084;
        public const GLuint GL_INDEX_ARRAY_TYPE_EXT = 0x8085;
        public const GLuint GL_INDEX_ARRAY_STRIDE_EXT = 0x8086;
        public const GLuint GL_INDEX_ARRAY_COUNT_EXT = 0x8087;
        public const GLuint GL_TEXTURE_COORD_ARRAY_SIZE_EXT = 0x8088;
        public const GLuint GL_TEXTURE_COORD_ARRAY_TYPE_EXT = 0x8089;
        public const GLuint GL_TEXTURE_COORD_ARRAY_STRIDE_EXT = 0x808A;
        public const GLuint GL_TEXTURE_COORD_ARRAY_COUNT_EXT = 0x808B;
        public const GLuint GL_EDGE_FLAG_ARRAY_STRIDE_EXT = 0x808C;
        public const GLuint GL_EDGE_FLAG_ARRAY_COUNT_EXT = 0x808D;
        public const GLuint GL_VERTEX_ARRAY_POINTER_EXT = 0x808E;
        public const GLuint GL_NORMAL_ARRAY_POINTER_EXT = 0x808F;
        public const GLuint GL_COLOR_ARRAY_POINTER_EXT = 0x8090;
        public const GLuint GL_INDEX_ARRAY_POINTER_EXT = 0x8091;
        public const GLuint GL_TEXTURE_COORD_ARRAY_POINTER_EXT = 0x8092;
        public const GLuint GL_EDGE_FLAG_ARRAY_POINTER_EXT = 0x8093;
        public const GLuint GL_INTERLACE_SGIX = 0x8094;
        public const GLuint GL_DETAIL_TEXTURE_2D_SGIS = 0x8095;
        public const GLuint GL_DETAIL_TEXTURE_2D_BINDING_SGIS = 0x8096;
        public const GLuint GL_LINEAR_DETAIL_SGIS = 0x8097;
        public const GLuint GL_LINEAR_DETAIL_ALPHA_SGIS = 0x8098;
        public const GLuint GL_LINEAR_DETAIL_COLOR_SGIS = 0x8099;
        public const GLuint GL_DETAIL_TEXTURE_LEVEL_SGIS = 0x809A;
        public const GLuint GL_DETAIL_TEXTURE_MODE_SGIS = 0x809B;
        public const GLuint GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS = 0x809C;
        public const GLuint GL_MULTISAMPLE = 0x809D;
        public const GLuint GL_MULTISAMPLE_ARB = 0x809D;
        public const GLuint GL_SAMPLE_ALPHA_TO_COVERAGE = 0x809E;
        public const GLuint GL_SAMPLE_ALPHA_TO_COVERAGE_ARB = 0x809E;
        public const GLuint GL_SAMPLE_ALPHA_TO_ONE = 0x809F;
        public const GLuint GL_SAMPLE_ALPHA_TO_ONE_ARB = 0x809F;
        public const GLuint GL_SAMPLE_COVERAGE = 0x80A0;
        public const GLuint GL_SAMPLE_COVERAGE_ARB = 0x80A0;
        public const GLuint GL_SAMPLE_BUFFERS = 0x80A8;
        public const GLuint GL_SAMPLE_BUFFERS_ARB = 0x80A8;
        public const GLuint GL_SAMPLES = 0x80A9;
        public const GLuint GL_SAMPLES_ARB = 0x80A9;
        public const GLuint GL_SAMPLE_COVERAGE_VALUE = 0x80AA;
        public const GLuint GL_SAMPLE_COVERAGE_VALUE_ARB = 0x80AA;
        public const GLuint GL_SAMPLE_COVERAGE_INVERT = 0x80AB;
        public const GLuint GL_SAMPLE_COVERAGE_INVERT_ARB = 0x80AB;
        public const GLuint GL_MULTISAMPLE_SGIS = 0x809D;
        public const GLuint GL_SAMPLE_ALPHA_TO_MASK_SGIS = 0x809E;
        public const GLuint GL_SAMPLE_ALPHA_TO_ONE_SGIS = 0x809F;
        public const GLuint GL_SAMPLE_MASK_SGIS = 0x80A0;
        public const GLuint GL_1PASS_SGIS = 0x80A1;
        public const GLuint GL_2PASS_0_SGIS = 0x80A2;
        public const GLuint GL_2PASS_1_SGIS = 0x80A3;
        public const GLuint GL_4PASS_0_SGIS = 0x80A4;
        public const GLuint GL_4PASS_1_SGIS = 0x80A5;
        public const GLuint GL_4PASS_2_SGIS = 0x80A6;
        public const GLuint GL_4PASS_3_SGIS = 0x80A7;
        public const GLuint GL_SAMPLE_BUFFERS_SGIS = 0x80A8;
        public const GLuint GL_SAMPLES_SGIS = 0x80A9;
        public const GLuint GL_SAMPLE_MASK_VALUE_SGIS = 0x80AA;
        public const GLuint GL_SAMPLE_MASK_INVERT_SGIS = 0x80AB;
        public const GLuint GL_SAMPLE_PATTERN_SGIS = 0x80AC;
        public const GLuint GL_LINEAR_SHARPEN_SGIS = 0x80AD;
        public const GLuint GL_LINEAR_SHARPEN_ALPHA_SGIS = 0x80AE;
        public const GLuint GL_LINEAR_SHARPEN_COLOR_SGIS = 0x80AF;
        public const GLuint GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS = 0x80B0;
        public const GLuint GL_COLOR_MATRIX = 0x80B1;
        public const GLuint GL_COLOR_MATRIX_SGI = 0x80B1;
        public const GLuint GL_COLOR_MATRIX_STACK_DEPTH = 0x80B2;
        public const GLuint GL_COLOR_MATRIX_STACK_DEPTH_SGI = 0x80B2;
        public const GLuint GL_MAX_COLOR_MATRIX_STACK_DEPTH = 0x80B3;
        public const GLuint GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI = 0x80B3;
        public const GLuint GL_POST_COLOR_MATRIX_RED_SCALE = 0x80B4;
        public const GLuint GL_POST_COLOR_MATRIX_RED_SCALE_SGI = 0x80B4;
        public const GLuint GL_POST_COLOR_MATRIX_GREEN_SCALE = 0x80B5;
        public const GLuint GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI = 0x80B5;
        public const GLuint GL_POST_COLOR_MATRIX_BLUE_SCALE = 0x80B6;
        public const GLuint GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI = 0x80B6;
        public const GLuint GL_POST_COLOR_MATRIX_ALPHA_SCALE = 0x80B7;
        public const GLuint GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI = 0x80B7;
        public const GLuint GL_POST_COLOR_MATRIX_RED_BIAS = 0x80B8;
        public const GLuint GL_POST_COLOR_MATRIX_RED_BIAS_SGI = 0x80B8;
        public const GLuint GL_POST_COLOR_MATRIX_GREEN_BIAS = 0x80B9;
        public const GLuint GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI = 0x80B9;
        public const GLuint GL_POST_COLOR_MATRIX_BLUE_BIAS = 0x80BA;
        public const GLuint GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI = 0x80BA;
        public const GLuint GL_POST_COLOR_MATRIX_ALPHA_BIAS = 0x80BB;
        public const GLuint GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI = 0x80BB;
        public const GLuint GL_TEXTURE_COLOR_TABLE_SGI = 0x80BC;
        public const GLuint GL_PROXY_TEXTURE_COLOR_TABLE_SGI = 0x80BD;
        public const GLuint GL_TEXTURE_ENV_BIAS_SGIX = 0x80BE;
        public const GLuint GL_SHADOW_AMBIENT_SGIX = 0x80BF;
        public const GLuint GL_COLOR_TABLE = 0x80D0;
        public const GLuint GL_COLOR_TABLE_SGI = 0x80D0;
        public const GLuint GL_POST_CONVOLUTION_COLOR_TABLE = 0x80D1;
        public const GLuint GL_POST_CONVOLUTION_COLOR_TABLE_SGI = 0x80D1;
        public const GLuint GL_POST_COLOR_MATRIX_COLOR_TABLE = 0x80D2;
        public const GLuint GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI = 0x80D2;
        public const GLuint GL_PROXY_COLOR_TABLE = 0x80D3;
        public const GLuint GL_PROXY_COLOR_TABLE_SGI = 0x80D3;
        public const GLuint GL_PROXY_POST_CONVOLUTION_COLOR_TABLE = 0x80D4;
        public const GLuint GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI = 0x80D4;
        public const GLuint GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE = 0x80D5;
        public const GLuint GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI = 0x80D5;
        public const GLuint GL_COLOR_TABLE_SCALE = 0x80D6;
        public const GLuint GL_COLOR_TABLE_SCALE_SGI = 0x80D6;
        public const GLuint GL_COLOR_TABLE_BIAS = 0x80D7;
        public const GLuint GL_COLOR_TABLE_BIAS_SGI = 0x80D7;
        public const GLuint GL_COLOR_TABLE_FORMAT = 0x80D8;
        public const GLuint GL_COLOR_TABLE_FORMAT_SGI = 0x80D8;
        public const GLuint GL_COLOR_TABLE_WIDTH = 0x80D9;
        public const GLuint GL_COLOR_TABLE_WIDTH_SGI = 0x80D9;
        public const GLuint GL_COLOR_TABLE_RED_SIZE = 0x80DA;
        public const GLuint GL_COLOR_TABLE_RED_SIZE_SGI = 0x80DA;
        public const GLuint GL_COLOR_TABLE_GREEN_SIZE = 0x80DB;
        public const GLuint GL_COLOR_TABLE_GREEN_SIZE_SGI = 0x80DB;
        public const GLuint GL_COLOR_TABLE_BLUE_SIZE = 0x80DC;
        public const GLuint GL_COLOR_TABLE_BLUE_SIZE_SGI = 0x80DC;
        public const GLuint GL_COLOR_TABLE_ALPHA_SIZE = 0x80DD;
        public const GLuint GL_COLOR_TABLE_ALPHA_SIZE_SGI = 0x80DD;
        public const GLuint GL_COLOR_TABLE_LUMINANCE_SIZE = 0x80DE;
        public const GLuint GL_COLOR_TABLE_LUMINANCE_SIZE_SGI = 0x80DE;
        public const GLuint GL_COLOR_TABLE_INTENSITY_SIZE = 0x80DF;
        public const GLuint GL_COLOR_TABLE_INTENSITY_SIZE_SGI = 0x80DF;
        public const GLuint GL_BGR = 0x80E0;
        public const GLuint GL_BGR_EXT = 0x80E0;
        public const GLuint GL_BGRA = 0x80E1;
        public const GLuint GL_BGRA_EXT = 0x80E1;
        public const GLuint GL_MAX_ELEMENTS_VERTICES = 0x80E8;
        public const GLuint GL_MAX_ELEMENTS_INDICES = 0x80E9;
        public const GLuint GL_DUAL_ALPHA4_SGIS = 0x8110;
        public const GLuint GL_DUAL_ALPHA8_SGIS = 0x8111;
        public const GLuint GL_DUAL_ALPHA12_SGIS = 0x8112;
        public const GLuint GL_DUAL_ALPHA16_SGIS = 0x8113;
        public const GLuint GL_DUAL_LUMINANCE4_SGIS = 0x8114;
        public const GLuint GL_DUAL_LUMINANCE8_SGIS = 0x8115;
        public const GLuint GL_DUAL_LUMINANCE12_SGIS = 0x8116;
        public const GLuint GL_DUAL_LUMINANCE16_SGIS = 0x8117;
        public const GLuint GL_DUAL_INTENSITY4_SGIS = 0x8118;
        public const GLuint GL_DUAL_INTENSITY8_SGIS = 0x8119;
        public const GLuint GL_DUAL_INTENSITY12_SGIS = 0x811A;
        public const GLuint GL_DUAL_INTENSITY16_SGIS = 0x811B;
        public const GLuint GL_DUAL_LUMINANCE_ALPHA4_SGIS = 0x811C;
        public const GLuint GL_DUAL_LUMINANCE_ALPHA8_SGIS = 0x811D;
        public const GLuint GL_QUAD_ALPHA4_SGIS = 0x811E;
        public const GLuint GL_QUAD_ALPHA8_SGIS = 0x811F;
        public const GLuint GL_QUAD_LUMINANCE4_SGIS = 0x8120;
        public const GLuint GL_QUAD_LUMINANCE8_SGIS = 0x8121;
        public const GLuint GL_QUAD_INTENSITY4_SGIS = 0x8122;
        public const GLuint GL_QUAD_INTENSITY8_SGIS = 0x8123;
        public const GLuint GL_DUAL_TEXTURE_SELECT_SGIS = 0x8124;
        public const GLuint GL_QUAD_TEXTURE_SELECT_SGIS = 0x8125;
        public const GLuint GL_POINT_SIZE_MIN = 0x8126;
        public const GLuint GL_POINT_SIZE_MIN_ARB = 0x8126;
        public const GLuint GL_POINT_SIZE_MIN_EXT = 0x8126;
        public const GLuint GL_POINT_SIZE_MIN_SGIS = 0x8126;
        public const GLuint GL_POINT_SIZE_MAX = 0x8127;
        public const GLuint GL_POINT_SIZE_MAX_ARB = 0x8127;
        public const GLuint GL_POINT_SIZE_MAX_EXT = 0x8127;
        public const GLuint GL_POINT_SIZE_MAX_SGIS = 0x8127;
        public const GLuint GL_POINT_FADE_THRESHOLD_SIZE = 0x8128;
        public const GLuint GL_POINT_FADE_THRESHOLD_SIZE_ARB = 0x8128;
        public const GLuint GL_POINT_FADE_THRESHOLD_SIZE_EXT = 0x8128;
        public const GLuint GL_POINT_FADE_THRESHOLD_SIZE_SGIS = 0x8128;
        public const GLuint GL_POINT_DISTANCE_ATTENUATION = 0x8129;
        public const GLuint GL_POINT_DISTANCE_ATTENUATION_ARB = 0x8129;
        public const GLuint GL_DISTANCE_ATTENUATION_EXT = 0x8129;
        public const GLuint GL_DISTANCE_ATTENUATION_SGIS = 0x8129;
        public const GLuint GL_FOG_FUNC_SGIS = 0x812A;
        public const GLuint GL_FOG_FUNC_POINTS_SGIS = 0x812B;
        public const GLuint GL_MAX_FOG_FUNC_POINTS_SGIS = 0x812C;
        public const GLuint GL_CLAMP_TO_BORDER = 0x812D;
        public const GLuint GL_CLAMP_TO_BORDER_ARB = 0x812D;
        public const GLuint GL_CLAMP_TO_BORDER_SGIS = 0x812D;
        public const GLuint GL_TEXTURE_MULTI_BUFFER_HINT_SGIX = 0x812E;
        public const GLuint GL_CLAMP_TO_EDGE = 0x812F;
        public const GLuint GL_CLAMP_TO_EDGE_SGIS = 0x812F;
        public const GLuint GL_PACK_SKIP_VOLUMES_SGIS = 0x8130;
        public const GLuint GL_PACK_IMAGE_DEPTH_SGIS = 0x8131;
        public const GLuint GL_UNPACK_SKIP_VOLUMES_SGIS = 0x8132;
        public const GLuint GL_UNPACK_IMAGE_DEPTH_SGIS = 0x8133;
        public const GLuint GL_TEXTURE_4D_SGIS = 0x8134;
        public const GLuint GL_PROXY_TEXTURE_4D_SGIS = 0x8135;
        public const GLuint GL_TEXTURE_4DSIZE_SGIS = 0x8136;
        public const GLuint GL_TEXTURE_WRAP_Q_SGIS = 0x8137;
        public const GLuint GL_MAX_4D_TEXTURE_SIZE_SGIS = 0x8138;
        public const GLuint GL_TEXTURE_4D_BINDING_SGIS = 0x814F;
        public const GLuint GL_PIXEL_TEX_GEN_SGIX = 0x8139;
        public const GLuint GL_PIXEL_TEX_GEN_MODE_SGIX = 0x832B;
        public const GLuint GL_TEXTURE_MIN_LOD = 0x813A;
        public const GLuint GL_TEXTURE_MIN_LOD_SGIS = 0x813A;
        public const GLuint GL_TEXTURE_MAX_LOD = 0x813B;
        public const GLuint GL_TEXTURE_MAX_LOD_SGIS = 0x813B;
        public const GLuint GL_TEXTURE_BASE_LEVEL = 0x813C;
        public const GLuint GL_TEXTURE_BASE_LEVEL_SGIS = 0x813C;
        public const GLuint GL_TEXTURE_MAX_LEVEL = 0x813D;
        public const GLuint GL_TEXTURE_MAX_LEVEL_SGIS = 0x813D;
        public const GLuint GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX = 0x813E;
        public const GLuint GL_PIXEL_TILE_CACHE_INCREMENT_SGIX = 0x813F;
        public const GLuint GL_PIXEL_TILE_WIDTH_SGIX = 0x8140;
        public const GLuint GL_PIXEL_TILE_HEIGHT_SGIX = 0x8141;
        public const GLuint GL_PIXEL_TILE_GRID_WIDTH_SGIX = 0x8142;
        public const GLuint GL_PIXEL_TILE_GRID_HEIGHT_SGIX = 0x8143;
        public const GLuint GL_PIXEL_TILE_GRID_DEPTH_SGIX = 0x8144;
        public const GLuint GL_PIXEL_TILE_CACHE_SIZE_SGIX = 0x8145;
        public const GLuint GL_FILTER4_SGIS = 0x8146;
        public const GLuint GL_TEXTURE_FILTER4_SIZE_SGIS = 0x8147;
        public const GLuint GL_SPRITE_SGIX = 0x8148;
        public const GLuint GL_SPRITE_MODE_SGIX = 0x8149;
        public const GLuint GL_SPRITE_AXIS_SGIX = 0x814A;
        public const GLuint GL_SPRITE_TRANSLATION_SGIX = 0x814B;
        public const GLuint GL_SPRITE_AXIAL_SGIX = 0x814C;
        public const GLuint GL_SPRITE_OBJECT_ALIGNED_SGIX = 0x814D;
        public const GLuint GL_SPRITE_EYE_ALIGNED_SGIX = 0x814E;
        public const GLuint GL_IGNORE_BORDER_HP = 0x8150;
        public const GLuint GL_CONSTANT_BORDER = 0x8151;
        public const GLuint GL_CONSTANT_BORDER_HP = 0x8151;
        public const GLuint GL_REPLICATE_BORDER = 0x8153;
        public const GLuint GL_REPLICATE_BORDER_HP = 0x8153;
        public const GLuint GL_CONVOLUTION_BORDER_COLOR = 0x8154;
        public const GLuint GL_CONVOLUTION_BORDER_COLOR_HP = 0x8154;
        public const GLuint GL_LINEAR_CLIPMAP_LINEAR_SGIX = 0x8170;
        public const GLuint GL_TEXTURE_CLIPMAP_CENTER_SGIX = 0x8171;
        public const GLuint GL_TEXTURE_CLIPMAP_FRAME_SGIX = 0x8172;
        public const GLuint GL_TEXTURE_CLIPMAP_OFFSET_SGIX = 0x8173;
        public const GLuint GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX = 0x8174;
        public const GLuint GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX = 0x8175;
        public const GLuint GL_TEXTURE_CLIPMAP_DEPTH_SGIX = 0x8176;
        public const GLuint GL_MAX_CLIPMAP_DEPTH_SGIX = 0x8177;
        public const GLuint GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX = 0x8178;
        public const GLuint GL_NEAREST_CLIPMAP_NEAREST_SGIX = 0x844D;
        public const GLuint GL_NEAREST_CLIPMAP_LINEAR_SGIX = 0x844E;
        public const GLuint GL_LINEAR_CLIPMAP_NEAREST_SGIX = 0x844F;
        public const GLuint GL_POST_TEXTURE_FILTER_BIAS_SGIX = 0x8179;
        public const GLuint GL_POST_TEXTURE_FILTER_SCALE_SGIX = 0x817A;
        public const GLuint GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX = 0x817B;
        public const GLuint GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX = 0x817C;
        public const GLuint GL_REFERENCE_PLANE_SGIX = 0x817D;
        public const GLuint GL_REFERENCE_PLANE_EQUATION_SGIX = 0x817E;
        public const GLuint GL_IR_INSTRUMENT1_SGIX = 0x817F;
        public const GLuint GL_INSTRUMENT_BUFFER_POINTER_SGIX = 0x8180;
        public const GLuint GL_INSTRUMENT_MEASUREMENTS_SGIX = 0x8181;
        public const GLuint GL_LIST_PRIORITY_SGIX = 0x8182;
        public const GLuint GL_CALLIGRAPHIC_FRAGMENT_SGIX = 0x8183;
        public const GLuint GL_PIXEL_TEX_GEN_Q_CEILING_SGIX = 0x8184;
        public const GLuint GL_PIXEL_TEX_GEN_Q_ROUND_SGIX = 0x8185;
        public const GLuint GL_PIXEL_TEX_GEN_Q_FLOOR_SGIX = 0x8186;
        public const GLuint GL_PIXEL_TEX_GEN_ALPHA_REPLACE_SGIX = 0x8187;
        public const GLuint GL_PIXEL_TEX_GEN_ALPHA_NO_REPLACE_SGIX = 0x8188;
        public const GLuint GL_PIXEL_TEX_GEN_ALPHA_LS_SGIX = 0x8189;
        public const GLuint GL_PIXEL_TEX_GEN_ALPHA_MS_SGIX = 0x818A;
        public const GLuint GL_FRAMEZOOM_SGIX = 0x818B;
        public const GLuint GL_FRAMEZOOM_FACTOR_SGIX = 0x818C;
        public const GLuint GL_MAX_FRAMEZOOM_FACTOR_SGIX = 0x818D;
        public const GLuint GL_TEXTURE_LOD_BIAS_S_SGIX = 0x818E;
        public const GLuint GL_TEXTURE_LOD_BIAS_T_SGIX = 0x818F;
        public const GLuint GL_TEXTURE_LOD_BIAS_R_SGIX = 0x8190;
        public const GLuint GL_GENERATE_MIPMAP = 0x8191;
        public const GLuint GL_GENERATE_MIPMAP_SGIS = 0x8191;
        public const GLuint GL_GENERATE_MIPMAP_HINT = 0x8192;
        public const GLuint GL_GENERATE_MIPMAP_HINT_SGIS = 0x8192;
        public const GLuint GL_GEOMETRY_DEFORMATION_SGIX = 0x8194;
        public const GLuint GL_TEXTURE_DEFORMATION_SGIX = 0x8195;
        public const GLuint GL_DEFORMATIONS_MASK_SGIX = 0x8196;
        public const GLuint GL_MAX_DEFORMATION_ORDER_SGIX = 0x8197;
        public const GLuint GL_FOG_OFFSET_SGIX = 0x8198;
        public const GLuint GL_FOG_OFFSET_VALUE_SGIX = 0x8199;
        public const GLuint GL_TEXTURE_COMPARE_SGIX = 0x819A;
        public const GLuint GL_TEXTURE_COMPARE_OPERATOR_SGIX = 0x819B;
        public const GLuint GL_TEXTURE_LEQUAL_R_SGIX = 0x819C;
        public const GLuint GL_TEXTURE_GEQUAL_R_SGIX = 0x819D;
        public const GLuint GL_DEPTH_COMPONENT16 = 0x81A5;
        public const GLuint GL_DEPTH_COMPONENT16_SGIX = 0x81A5;
        public const GLuint GL_DEPTH_COMPONENT24 = 0x81A6;
        public const GLuint GL_DEPTH_COMPONENT24_SGIX = 0x81A6;
        public const GLuint GL_DEPTH_COMPONENT32 = 0x81A7;
        public const GLuint GL_DEPTH_COMPONENT32_SGIX = 0x81A7;
        public const GLuint GL_YCRCB_422_SGIX = 0x81BB;
        public const GLuint GL_YCRCB_444_SGIX = 0x81BC;
        public const GLuint GL_TEXTURE_COLOR_WRITEMASK_SGIS = 0x81EF;
        public const GLuint GL_EYE_DISTANCE_TO_POINT_SGIS = 0x81F0;
        public const GLuint GL_OBJECT_DISTANCE_TO_POINT_SGIS = 0x81F1;
        public const GLuint GL_EYE_DISTANCE_TO_LINE_SGIS = 0x81F2;
        public const GLuint GL_OBJECT_DISTANCE_TO_LINE_SGIS = 0x81F3;
        public const GLuint GL_EYE_POINT_SGIS = 0x81F4;
        public const GLuint GL_OBJECT_POINT_SGIS = 0x81F5;
        public const GLuint GL_EYE_LINE_SGIS = 0x81F6;
        public const GLuint GL_OBJECT_LINE_SGIS = 0x81F7;
        public const GLuint GL_LIGHT_MODEL_COLOR_CONTROL = 0x81F8;
        public const GLuint GL_LIGHT_MODEL_COLOR_CONTROL_EXT = 0x81F8;
        public const GLuint GL_SINGLE_COLOR = 0x81F9;
        public const GLuint GL_SINGLE_COLOR_EXT = 0x81F9;
        public const GLuint GL_SEPARATE_SPECULAR_COLOR = 0x81FA;
        public const GLuint GL_SEPARATE_SPECULAR_COLOR_EXT = 0x81FA;
        public const GLuint GL_SHARED_TEXTURE_PALETTE_EXT = 0x81FB;
        public const GLuint GL_CONVOLUTION_HINT_SGIX = 0x8316;
        public const GLuint GL_ALPHA_MIN_SGIX = 0x8320;
        public const GLuint GL_ALPHA_MAX_SGIX = 0x8321;
        public const GLuint GL_ASYNC_MARKER_SGIX = 0x8329;
        public const GLuint GL_ASYNC_HISTOGRAM_SGIX = 0x832C;
        public const GLuint GL_MAX_ASYNC_HISTOGRAM_SGIX = 0x832D;
        public const GLuint GL_PIXEL_TRANSFORM_2D_EXT = 0x8330;
        public const GLuint GL_PIXEL_MAG_FILTER_EXT = 0x8331;
        public const GLuint GL_PIXEL_MIN_FILTER_EXT = 0x8332;
        public const GLuint GL_PIXEL_CUBIC_WEIGHT_EXT = 0x8333;
        public const GLuint GL_CUBIC_EXT = 0x8334;
        public const GLuint GL_AVERAGE_EXT = 0x8335;
        public const GLuint GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT = 0x8336;
        public const GLuint GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT = 0x8337;
        public const GLuint GL_PIXEL_TRANSFORM_2D_MATRIX_EXT = 0x8338;
        public const GLuint GL_PIXEL_TEXTURE_SGIS = 0x8353;
        public const GLuint GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS = 0x8354;
        public const GLuint GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS = 0x8355;
        public const GLuint GL_PIXEL_GROUP_COLOR_SGIS = 0x8356;
        public const GLuint GL_ASYNC_TEX_IMAGE_SGIX = 0x835C;
        public const GLuint GL_ASYNC_DRAW_PIXELS_SGIX = 0x835D;
        public const GLuint GL_ASYNC_READ_PIXELS_SGIX = 0x835E;
        public const GLuint GL_MAX_ASYNC_TEX_IMAGE_SGIX = 0x835F;
        public const GLuint GL_MAX_ASYNC_DRAW_PIXELS_SGIX = 0x8360;
        public const GLuint GL_MAX_ASYNC_READ_PIXELS_SGIX = 0x8361;
        public const GLuint GL_TEXTURE_MAX_CLAMP_S_SGIX = 0x8369;
        public const GLuint GL_TEXTURE_MAX_CLAMP_T_SGIX = 0x836A;
        public const GLuint GL_TEXTURE_MAX_CLAMP_R_SGIX = 0x836B;
        public const GLuint GL_FOG_FACTOR_TO_ALPHA_SGIX = 0x836F;
        public const GLuint GL_VERTEX_PRECLIP_SGIX = 0x83EE;
        public const GLuint GL_VERTEX_PRECLIP_HINT_SGIX = 0x83EF;
        public const GLuint GL_COMPRESSED_RGB_S3TC_DXT1_EXT = 0x83F0;
        public const GLuint GL_COMPRESSED_RGBA_S3TC_DXT1_EXT = 0x83F1;
        public const GLuint GL_COMPRESSED_RGBA_S3TC_DXT3_EXT = 0x83F2;
        public const GLuint GL_COMPRESSED_RGBA_S3TC_DXT5_EXT = 0x83F3;
        public const GLuint GL_PARALLEL_ARRAYS_INTEL = 0x83F4;
        public const GLuint GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL = 0x83F5;
        public const GLuint GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL = 0x83F6;
        public const GLuint GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL = 0x83F7;
        public const GLuint GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL = 0x83F8;
        public const GLuint GL_FRAGMENT_LIGHTING_SGIX = 0x8400;
        public const GLuint GL_FRAGMENT_COLOR_MATERIAL_SGIX = 0x8401;
        public const GLuint GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX = 0x8402;
        public const GLuint GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX = 0x8403;
        public const GLuint GL_MAX_FRAGMENT_LIGHTS_SGIX = 0x8404;
        public const GLuint GL_MAX_ACTIVE_LIGHTS_SGIX = 0x8405;
        public const GLuint GL_CURRENT_RASTER_NORMAL_SGIX = 0x8406;
        public const GLuint GL_LIGHT_ENV_MODE_SGIX = 0x8407;
        public const GLuint GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX = 0x8408;
        public const GLuint GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX = 0x8409;
        public const GLuint GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX = 0x840A;
        public const GLuint GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX = 0x840B;
        public const GLuint GL_FRAGMENT_LIGHT0_SGIX = 0x840C;
        public const GLuint GL_FRAGMENT_LIGHT1_SGIX = 0x840D;
        public const GLuint GL_FRAGMENT_LIGHT2_SGIX = 0x840E;
        public const GLuint GL_FRAGMENT_LIGHT3_SGIX = 0x840F;
        public const GLuint GL_FRAGMENT_LIGHT4_SGIX = 0x8410;
        public const GLuint GL_FRAGMENT_LIGHT5_SGIX = 0x8411;
        public const GLuint GL_FRAGMENT_LIGHT6_SGIX = 0x8412;
        public const GLuint GL_FRAGMENT_LIGHT7_SGIX = 0x8413;
        public const GLuint GL_PACK_RESAMPLE_SGIX = 0x842C;
        public const GLuint GL_UNPACK_RESAMPLE_SGIX = 0x842D;
        public const GLuint GL_RESAMPLE_REPLICATE_SGIX = 0x842E;
        public const GLuint GL_RESAMPLE_ZERO_FILL_SGIX = 0x842F;
        public const GLuint GL_RESAMPLE_DECIMATE_SGIX = 0x8430;
        public const GLuint GL_SMOOTH_POINT_SIZE_RANGE = 0x0B12;
        public const GLuint GL_SMOOTH_POINT_SIZE_GRANULARITY = 0x0B13;
        public const GLuint GL_SMOOTH_LINE_WIDTH_RANGE = 0x0B22;
        public const GLuint GL_SMOOTH_LINE_WIDTH_GRANULARITY = 0x0B23;
        public const GLuint GL_ALIASED_POINT_SIZE_RANGE = 0x846D;
        public const GLuint GL_ALIASED_LINE_WIDTH_RANGE = 0x846E;
        public const GLuint GL_PACK_SUBSAMPLE_RATE_SGIX = 0x85A0;
        public const GLuint GL_UNPACK_SUBSAMPLE_RATE_SGIX = 0x85A1;
        public const GLuint GL_PIXEL_SUBSAMPLE_4444_SGIX = 0x85A2;
        public const GLuint GL_PIXEL_SUBSAMPLE_2424_SGIX = 0x85A3;
        public const GLuint GL_PIXEL_SUBSAMPLE_4242_SGIX = 0x85A4;
        public const GLuint GL_TEXTURE0 = 0x84C0;
        public const GLuint GL_TEXTURE1 = 0x84C1;
        public const GLuint GL_TEXTURE2 = 0x84C2;
        public const GLuint GL_TEXTURE3 = 0x84C3;
        public const GLuint GL_TEXTURE4 = 0x84C4;
        public const GLuint GL_TEXTURE5 = 0x84C5;
        public const GLuint GL_TEXTURE6 = 0x84C6;
        public const GLuint GL_TEXTURE7 = 0x84C7;
        public const GLuint GL_TEXTURE8 = 0x84C8;
        public const GLuint GL_TEXTURE9 = 0x84C9;
        public const GLuint GL_TEXTURE10 = 0x84CA;
        public const GLuint GL_TEXTURE11 = 0x84CB;
        public const GLuint GL_TEXTURE12 = 0x84CC;
        public const GLuint GL_TEXTURE13 = 0x84CD;
        public const GLuint GL_TEXTURE14 = 0x84CE;
        public const GLuint GL_TEXTURE15 = 0x84CF;
        public const GLuint GL_TEXTURE16 = 0x84D0;
        public const GLuint GL_TEXTURE17 = 0x84D1;
        public const GLuint GL_TEXTURE18 = 0x84D2;
        public const GLuint GL_TEXTURE19 = 0x84D3;
        public const GLuint GL_TEXTURE20 = 0x84D4;
        public const GLuint GL_TEXTURE21 = 0x84D5;
        public const GLuint GL_TEXTURE22 = 0x84D6;
        public const GLuint GL_TEXTURE23 = 0x84D7;
        public const GLuint GL_TEXTURE24 = 0x84D8;
        public const GLuint GL_TEXTURE25 = 0x84D9;
        public const GLuint GL_TEXTURE26 = 0x84DA;
        public const GLuint GL_TEXTURE27 = 0x84DB;
        public const GLuint GL_TEXTURE28 = 0x84DC;
        public const GLuint GL_TEXTURE29 = 0x84DD;
        public const GLuint GL_TEXTURE30 = 0x84DE;
        public const GLuint GL_TEXTURE31 = 0x84DF;
        public const GLuint GL_ACTIVE_TEXTURE = 0x84E0;
        public const GLuint GL_CLIENT_ACTIVE_TEXTURE = 0x84E1;
        public const GLuint GL_MAX_TEXTURE_UNITS = 0x84E2;
        public const GLuint GL_TRANSPOSE_MODELVIEW_MATRIX = 0x84E3;
        public const GLuint GL_TRANSPOSE_PROJECTION_MATRIX = 0x84E4;
        public const GLuint GL_TRANSPOSE_TEXTURE_MATRIX = 0x84E5;
        public const GLuint GL_TRANSPOSE_COLOR_MATRIX = 0x84E6;
        public const GLuint GL_MULTISAMPLE_BIT = 0x20000000;
        public const GLuint GL_NORMAL_MAP = 0x8511;
        public const GLuint GL_REFLECTION_MAP = 0x8512;
        public const GLuint GL_TEXTURE_CUBE_MAP = 0x8513;
        public const GLuint GL_TEXTURE_BINDING_CUBE_MAP = 0x8514;
        public const GLuint GL_TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515;
        public const GLuint GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516;
        public const GLuint GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517;
        public const GLuint GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518;
        public const GLuint GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519;
        public const GLuint GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851A;
        public const GLuint GL_PROXY_TEXTURE_CUBE_MAP = 0x851B;
        public const GLuint GL_MAX_CUBE_MAP_TEXTURE_SIZE = 0x851C;
        public const GLuint GL_COMPRESSED_ALPHA = 0x84E9;
        public const GLuint GL_COMPRESSED_LUMINANCE = 0x84EA;
        public const GLuint GL_COMPRESSED_LUMINANCE_ALPHA = 0x84EB;
        public const GLuint GL_COMPRESSED_INTENSITY = 0x84EC;
        public const GLuint GL_COMPRESSED_RGB = 0x84ED;
        public const GLuint GL_COMPRESSED_RGBA = 0x84EE;
        public const GLuint GL_TEXTURE_COMPRESSION_HINT = 0x84EF;
        public const GLuint GL_TEXTURE_COMPRESSED_IMAGE_SIZE = 0x86A0;
        public const GLuint GL_TEXTURE_COMPRESSED = 0x86A1;
        public const GLuint GL_NUM_COMPRESSED_TEXTURE_FORMATS = 0x86A2;
        public const GLuint GL_COMPRESSED_TEXTURE_FORMATS = 0x86A3;
        public const GLuint GL_COMBINE = 0x8570;
        public const GLuint GL_COMBINE_RGB = 0x8571;
        public const GLuint GL_COMBINE_ALPHA = 0x8572;
        public const GLuint GL_SOURCE0_RGB = 0x8580;
        public const GLuint GL_SOURCE1_RGB = 0x8581;
        public const GLuint GL_SOURCE2_RGB = 0x8582;
        public const GLuint GL_SOURCE0_ALPHA = 0x8588;
        public const GLuint GL_SOURCE1_ALPHA = 0x8589;
        public const GLuint GL_SOURCE2_ALPHA = 0x858A;
        public const GLuint GL_OPERAND0_RGB = 0x8590;
        public const GLuint GL_OPERAND1_RGB = 0x8591;
        public const GLuint GL_OPERAND2_RGB = 0x8592;
        public const GLuint GL_OPERAND0_ALPHA = 0x8598;
        public const GLuint GL_OPERAND1_ALPHA = 0x8599;
        public const GLuint GL_OPERAND2_ALPHA = 0x859A;
        public const GLuint GL_RGB_SCALE = 0x8573;
        public const GLuint GL_ADD_SIGNED = 0x8574;
        public const GLuint GL_INTERPOLATE = 0x8575;
        public const GLuint GL_SUBTRACT = 0x84E7;
        public const GLuint GL_CONSTANT = 0x8576;
        public const GLuint GL_PRIMARY_COLOR = 0x8577;
        public const GLuint GL_PREVIOUS = 0x8578;
        public const GLuint GL_DOT3_RGB = 0x86AE;
        public const GLuint GL_DOT3_RGBA = 0x86AF;
        public const GLuint GL_BLEND_DST_RGB = 0x80C8;
        public const GLuint GL_BLEND_SRC_RGB = 0x80C9;
        public const GLuint GL_BLEND_DST_ALPHA = 0x80CA;
        public const GLuint GL_BLEND_SRC_ALPHA = 0x80CB;
        public const GLuint GL_MIRRORED_REPEAT = 0x8370;
        public const GLuint GL_FOG_COORDINATE_SOURCE = 0x8450;
        public const GLuint GL_FOG_COORDINATE = 0x8451;
        public const GLuint GL_FRAGMENT_DEPTH = 0x8452;
        public const GLuint GL_CURRENT_FOG_COORDINATE = 0x8453;
        public const GLuint GL_FOG_COORDINATE_ARRAY_TYPE = 0x8454;
        public const GLuint GL_FOG_COORDINATE_ARRAY_STRIDE = 0x8455;
        public const GLuint GL_FOG_COORDINATE_ARRAY_POINTER = 0x8456;
        public const GLuint GL_FOG_COORDINATE_ARRAY = 0x8457;
        public const GLuint GL_COLOR_SUM = 0x8458;
        public const GLuint GL_CURRENT_SECONDARY_COLOR = 0x8459;
        public const GLuint GL_SECONDARY_COLOR_ARRAY_SIZE = 0x845A;
        public const GLuint GL_SECONDARY_COLOR_ARRAY_TYPE = 0x845B;
        public const GLuint GL_SECONDARY_COLOR_ARRAY_STRIDE = 0x845C;
        public const GLuint GL_SECONDARY_COLOR_ARRAY_POINTER = 0x845D;
        public const GLuint GL_SECONDARY_COLOR_ARRAY = 0x845E;
        public const GLuint GL_MAX_TEXTURE_LOD_BIAS = 0x84FD;
        public const GLuint GL_TEXTURE_FILTER_CONTROL = 0x8500;
        public const GLuint GL_TEXTURE_LOD_BIAS = 0x8501;
        public const GLuint GL_INCR_WRAP = 0x8507;
        public const GLuint GL_DECR_WRAP = 0x8508;
        public const GLuint GL_TEXTURE_DEPTH_SIZE = 0x884A;
        public const GLuint GL_DEPTH_TEXTURE_MODE = 0x884B;
        public const GLuint GL_TEXTURE_COMPARE_MODE = 0x884C;
        public const GLuint GL_TEXTURE_COMPARE_FUNC = 0x884D;
        public const GLuint GL_COMPARE_R_TO_TEXTURE = 0x884E;
        public const GLuint GL_BUFFER_SIZE = 0x8764;
        public const GLuint GL_BUFFER_USAGE = 0x8765;
        public const GLuint GL_QUERY_COUNTER_BITS = 0x8864;
        public const GLuint GL_CURRENT_QUERY = 0x8865;
        public const GLuint GL_QUERY_RESULT = 0x8866;
        public const GLuint GL_QUERY_RESULT_AVAILABLE = 0x8867;
        public const GLuint GL_ARRAY_BUFFER = 0x8892;
        public const GLuint GL_ELEMENT_ARRAY_BUFFER = 0x8893;
        public const GLuint GL_ARRAY_BUFFER_BINDING = 0x8894;
        public const GLuint GL_ELEMENT_ARRAY_BUFFER_BINDING = 0x8895;
        public const GLuint GL_VERTEX_ARRAY_BUFFER_BINDING = 0x8896;
        public const GLuint GL_NORMAL_ARRAY_BUFFER_BINDING = 0x8897;
        public const GLuint GL_COLOR_ARRAY_BUFFER_BINDING = 0x8898;
        public const GLuint GL_INDEX_ARRAY_BUFFER_BINDING = 0x8899;
        public const GLuint GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING = 0x889A;
        public const GLuint GL_EDGE_FLAG_ARRAY_BUFFER_BINDING = 0x889B;
        public const GLuint GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING = 0x889C;
        public const GLuint GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING = 0x889D;
        public const GLuint GL_WEIGHT_ARRAY_BUFFER_BINDING = 0x889E;
        public const GLuint GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889F;
        public const GLuint GL_READ_ONLY = 0x88B8;
        public const GLuint GL_WRITE_ONLY = 0x88B9;
        public const GLuint GL_READ_WRITE = 0x88BA;
        public const GLuint GL_BUFFER_ACCESS = 0x88BB;
        public const GLuint GL_BUFFER_MAPPED = 0x88BC;
        public const GLuint GL_BUFFER_MAP_POINTER = 0x88BD;
        public const GLuint GL_STREAM_DRAW = 0x88E0;
        public const GLuint GL_STREAM_READ = 0x88E1;
        public const GLuint GL_STREAM_COPY = 0x88E2;
        public const GLuint GL_STATIC_DRAW = 0x88E4;
        public const GLuint GL_STATIC_READ = 0x88E5;
        public const GLuint GL_STATIC_COPY = 0x88E6;
        public const GLuint GL_DYNAMIC_DRAW = 0x88E8;
        public const GLuint GL_DYNAMIC_READ = 0x88E9;
        public const GLuint GL_DYNAMIC_COPY = 0x88EA;
        public const GLuint GL_SAMPLES_PASSED = 0x8914;
        public const GLuint GL_FOG_COORD_SRC = GL_FOG_COORDINATE_SOURCE;
        public const GLuint GL_FOG_COORD = GL_FOG_COORDINATE;
        public const GLuint GL_CURRENT_FOG_COORD = GL_CURRENT_FOG_COORDINATE;
        public const GLuint GL_FOG_COORD_ARRAY_TYPE = GL_FOG_COORDINATE_ARRAY_TYPE;
        public const GLuint GL_FOG_COORD_ARRAY_STRIDE = GL_FOG_COORDINATE_ARRAY_STRIDE;
        public const GLuint GL_FOG_COORD_ARRAY_POINTER = GL_FOG_COORDINATE_ARRAY_POINTER;
        public const GLuint GL_FOG_COORD_ARRAY = GL_FOG_COORDINATE_ARRAY;
        public const GLuint GL_FOG_COORD_ARRAY_BUFFER_BINDING = GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING;
        public const GLuint GL_SRC0_RGB = GL_SOURCE0_RGB;
        public const GLuint GL_SRC1_RGB = GL_SOURCE1_RGB;
        public const GLuint GL_SRC2_RGB = GL_SOURCE2_RGB;
        public const GLuint GL_SRC0_ALPHA = GL_SOURCE0_ALPHA;
        public const GLuint GL_SRC1_ALPHA = GL_SOURCE1_ALPHA;
        public const GLuint GL_SRC2_ALPHA = GL_SOURCE2_ALPHA;
        public const GLuint GL_BLEND_EQUATION_RGB = GL_BLEND_EQUATION;
        public const GLuint GL_VERTEX_ATTRIB_ARRAY_ENABLED = 0x8622;
        public const GLuint GL_VERTEX_ATTRIB_ARRAY_SIZE = 0x8623;
        public const GLuint GL_VERTEX_ATTRIB_ARRAY_STRIDE = 0x8624;
        public const GLuint GL_VERTEX_ATTRIB_ARRAY_TYPE = 0x8625;
        public const GLuint GL_CURRENT_VERTEX_ATTRIB = 0x8626;
        public const GLuint GL_VERTEX_PROGRAM_POINT_SIZE = 0x8642;
        public const GLuint GL_VERTEX_PROGRAM_TWO_SIDE = 0x8643;
        public const GLuint GL_VERTEX_ATTRIB_ARRAY_POINTER = 0x8645;
        public const GLuint GL_STENCIL_BACK_FUNC = 0x8800;
        public const GLuint GL_STENCIL_BACK_FAIL = 0x8801;
        public const GLuint GL_STENCIL_BACK_PASS_DEPTH_FAIL = 0x8802;
        public const GLuint GL_STENCIL_BACK_PASS_DEPTH_PASS = 0x8803;
        public const GLuint GL_MAX_DRAW_BUFFERS = 0x8824;
        public const GLuint GL_DRAW_BUFFER0 = 0x8825;
        public const GLuint GL_DRAW_BUFFER1 = 0x8826;
        public const GLuint GL_DRAW_BUFFER2 = 0x8827;
        public const GLuint GL_DRAW_BUFFER3 = 0x8828;
        public const GLuint GL_DRAW_BUFFER4 = 0x8829;
        public const GLuint GL_DRAW_BUFFER5 = 0x882A;
        public const GLuint GL_DRAW_BUFFER6 = 0x882B;
        public const GLuint GL_DRAW_BUFFER7 = 0x882C;
        public const GLuint GL_DRAW_BUFFER8 = 0x882D;
        public const GLuint GL_DRAW_BUFFER9 = 0x882E;
        public const GLuint GL_DRAW_BUFFER10 = 0x882F;
        public const GLuint GL_DRAW_BUFFER11 = 0x8830;
        public const GLuint GL_DRAW_BUFFER12 = 0x8831;
        public const GLuint GL_DRAW_BUFFER13 = 0x8832;
        public const GLuint GL_DRAW_BUFFER14 = 0x8833;
        public const GLuint GL_DRAW_BUFFER15 = 0x8834;
        public const GLuint GL_BLEND_EQUATION_ALPHA = 0x883D;
        public const GLuint GL_POINT_SPRITE = 0x8861;
        public const GLuint GL_COORD_REPLACE = 0x8862;
        public const GLuint GL_MAX_VERTEX_ATTRIBS = 0x8869;
        public const GLuint GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = 0x886A;
        public const GLuint GL_MAX_TEXTURE_COORDS = 0x8871;
        public const GLuint GL_MAX_TEXTURE_IMAGE_UNITS = 0x8872;
        public const GLuint GL_FRAGMENT_SHADER = 0x8B30;
        public const GLuint GL_VERTEX_SHADER = 0x8B31;
        public const GLuint GL_MAX_FRAGMENT_UNIFORM_COMPONENTS = 0x8B49;
        public const GLuint GL_MAX_VERTEX_UNIFORM_COMPONENTS = 0x8B4A;
        public const GLuint GL_MAX_VARYING_FLOATS = 0x8B4B;
        public const GLuint GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x8B4C;
        public const GLuint GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D;
        public const GLuint GL_SHADER_TYPE = 0x8B4F;
        public const GLuint GL_FLOAT_VEC2 = 0x8B50;
        public const GLuint GL_FLOAT_VEC3 = 0x8B51;
        public const GLuint GL_FLOAT_VEC4 = 0x8B52;
        public const GLuint GL_INT_VEC2 = 0x8B53;
        public const GLuint GL_INT_VEC3 = 0x8B54;
        public const GLuint GL_INT_VEC4 = 0x8B55;
        public const GLuint GL_BOOL = 0x8B56;
        public const GLuint GL_BOOL_VEC2 = 0x8B57;
        public const GLuint GL_BOOL_VEC3 = 0x8B58;
        public const GLuint GL_BOOL_VEC4 = 0x8B59;
        public const GLuint GL_FLOAT_MAT2 = 0x8B5A;
        public const GLuint GL_FLOAT_MAT3 = 0x8B5B;
        public const GLuint GL_FLOAT_MAT4 = 0x8B5C;
        public const GLuint GL_SAMPLER_1D = 0x8B5D;
        public const GLuint GL_SAMPLER_2D = 0x8B5E;
        public const GLuint GL_SAMPLER_3D = 0x8B5F;
        public const GLuint GL_SAMPLER_CUBE = 0x8B60;
        public const GLuint GL_SAMPLER_1D_SHADOW = 0x8B61;
        public const GLuint GL_SAMPLER_2D_SHADOW = 0x8B62;
        public const GLuint GL_DELETE_STATUS = 0x8B80;
        public const GLuint GL_COMPILE_STATUS = 0x8B81;
        public const GLuint GL_LINK_STATUS = 0x8B82;
        public const GLuint GL_VALIDATE_STATUS = 0x8B83;
        public const GLuint GL_INFO_LOG_LENGTH = 0x8B84;
        public const GLuint GL_ATTACHED_SHADERS = 0x8B85;
        public const GLuint GL_ACTIVE_UNIFORMS = 0x8B86;
        public const GLuint GL_ACTIVE_UNIFORM_MAX_LENGTH = 0x8B87;
        public const GLuint GL_SHADER_SOURCE_LENGTH = 0x8B88;
        public const GLuint GL_ACTIVE_ATTRIBUTES = 0x8B89;
        public const GLuint GL_ACTIVE_ATTRIBUTE_MAX_LENGTH = 0x8B8A;
        public const GLuint GL_FRAGMENT_SHADER_DERIVATIVE_HINT = 0x8B8B;
        public const GLuint GL_SHADING_LANGUAGE_VERSION = 0x8B8C;
        public const GLuint GL_CURRENT_PROGRAM = 0x8B8D;
        public const GLuint GL_POINT_SPRITE_COORD_ORIGIN = 0x8CA0;
        public const GLuint GL_LOWER_LEFT = 0x8CA1;
        public const GLuint GL_UPPER_LEFT = 0x8CA2;
        public const GLuint GL_STENCIL_BACK_REF = 0x8CA3;
        public const GLuint GL_STENCIL_BACK_VALUE_MASK = 0x8CA4;
        public const GLuint GL_STENCIL_BACK_WRITEMASK = 0x8CA5;
        public const GLuint GL_CURRENT_RASTER_SECONDARY_COLOR = 0x845F;
        public const GLuint GL_PIXEL_PACK_BUFFER = 0x88EB;
        public const GLuint GL_PIXEL_UNPACK_BUFFER = 0x88EC;
        public const GLuint GL_PIXEL_PACK_BUFFER_BINDING = 0x88ED;
        public const GLuint GL_PIXEL_UNPACK_BUFFER_BINDING = 0x88EF;
        public const GLuint GL_FLOAT_MAT2x3 = 0x8B65;
        public const GLuint GL_FLOAT_MAT2x4 = 0x8B66;
        public const GLuint GL_FLOAT_MAT3x2 = 0x8B67;
        public const GLuint GL_FLOAT_MAT3x4 = 0x8B68;
        public const GLuint GL_FLOAT_MAT4x2 = 0x8B69;
        public const GLuint GL_FLOAT_MAT4x3 = 0x8B6A;
        public const GLuint GL_SRGB = 0x8C40;
        public const GLuint GL_SRGB8 = 0x8C41;
        public const GLuint GL_SRGB_ALPHA = 0x8C42;
        public const GLuint GL_SRGB8_ALPHA8 = 0x8C43;
        public const GLuint GL_SLUMINANCE_ALPHA = 0x8C44;
        public const GLuint GL_SLUMINANCE8_ALPHA8 = 0x8C45;
        public const GLuint GL_SLUMINANCE = 0x8C46;
        public const GLuint GL_SLUMINANCE8 = 0x8C47;
        public const GLuint GL_COMPRESSED_SRGB = 0x8C48;
        public const GLuint GL_COMPRESSED_SRGB_ALPHA = 0x8C49;
        public const GLuint GL_COMPRESSED_SLUMINANCE = 0x8C4A;
        public const GLuint GL_COMPRESSED_SLUMINANCE_ALPHA = 0x8C4B;
        public const GLuint GL_TEXTURE0_ARB = 0x84C0;
        public const GLuint GL_TEXTURE1_ARB = 0x84C1;
        public const GLuint GL_TEXTURE2_ARB = 0x84C2;
        public const GLuint GL_TEXTURE3_ARB = 0x84C3;
        public const GLuint GL_TEXTURE4_ARB = 0x84C4;
        public const GLuint GL_TEXTURE5_ARB = 0x84C5;
        public const GLuint GL_TEXTURE6_ARB = 0x84C6;
        public const GLuint GL_TEXTURE7_ARB = 0x84C7;
        public const GLuint GL_TEXTURE8_ARB = 0x84C8;
        public const GLuint GL_TEXTURE9_ARB = 0x84C9;
        public const GLuint GL_TEXTURE10_ARB = 0x84CA;
        public const GLuint GL_TEXTURE11_ARB = 0x84CB;
        public const GLuint GL_TEXTURE12_ARB = 0x84CC;
        public const GLuint GL_TEXTURE13_ARB = 0x84CD;
        public const GLuint GL_TEXTURE14_ARB = 0x84CE;
        public const GLuint GL_TEXTURE15_ARB = 0x84CF;
        public const GLuint GL_TEXTURE16_ARB = 0x84D0;
        public const GLuint GL_TEXTURE17_ARB = 0x84D1;
        public const GLuint GL_TEXTURE18_ARB = 0x84D2;
        public const GLuint GL_TEXTURE19_ARB = 0x84D3;
        public const GLuint GL_TEXTURE20_ARB = 0x84D4;
        public const GLuint GL_TEXTURE21_ARB = 0x84D5;
        public const GLuint GL_TEXTURE22_ARB = 0x84D6;
        public const GLuint GL_TEXTURE23_ARB = 0x84D7;
        public const GLuint GL_TEXTURE24_ARB = 0x84D8;
        public const GLuint GL_TEXTURE25_ARB = 0x84D9;
        public const GLuint GL_TEXTURE26_ARB = 0x84DA;
        public const GLuint GL_TEXTURE27_ARB = 0x84DB;
        public const GLuint GL_TEXTURE28_ARB = 0x84DC;
        public const GLuint GL_TEXTURE29_ARB = 0x84DD;
        public const GLuint GL_TEXTURE30_ARB = 0x84DE;
        public const GLuint GL_TEXTURE31_ARB = 0x84DF;
        public const GLuint GL_ACTIVE_TEXTURE_ARB = 0x84E0;
        public const GLuint GL_CLIENT_ACTIVE_TEXTURE_ARB = 0x84E1;
        public const GLuint GL_MAX_TEXTURE_UNITS_ARB = 0x84E2;
        public const GLuint GL_TRANSPOSE_MODELVIEW_MATRIX_ARB = 0x84E3;
        public const GLuint GL_TRANSPOSE_PROJECTION_MATRIX_ARB = 0x84E4;
        public const GLuint GL_TRANSPOSE_TEXTURE_MATRIX_ARB = 0x84E5;
        public const GLuint GL_TRANSPOSE_COLOR_MATRIX_ARB = 0x84E6;
        public const GLuint GL_MULTISAMPLE_BIT_ARB = 0x20000000;
        public const GLuint GL_NORMAL_MAP_ARB = 0x8511;
        public const GLuint GL_REFLECTION_MAP_ARB = 0x8512;
        public const GLuint GL_TEXTURE_CUBE_MAP_ARB = 0x8513;
        public const GLuint GL_TEXTURE_BINDING_CUBE_MAP_ARB = 0x8514;
        public const GLuint GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB = 0x8515;
        public const GLuint GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB = 0x8516;
        public const GLuint GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB = 0x8517;
        public const GLuint GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB = 0x8518;
        public const GLuint GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB = 0x8519;
        public const GLuint GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB = 0x851A;
        public const GLuint GL_PROXY_TEXTURE_CUBE_MAP_ARB = 0x851B;
        public const GLuint GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB = 0x851C;
        public const GLuint GL_COMPRESSED_ALPHA_ARB = 0x84E9;
        public const GLuint GL_COMPRESSED_LUMINANCE_ARB = 0x84EA;
        public const GLuint GL_COMPRESSED_LUMINANCE_ALPHA_ARB = 0x84EB;
        public const GLuint GL_COMPRESSED_INTENSITY_ARB = 0x84EC;
        public const GLuint GL_COMPRESSED_RGB_ARB = 0x84ED;
        public const GLuint GL_COMPRESSED_RGBA_ARB = 0x84EE;
        public const GLuint GL_TEXTURE_COMPRESSION_HINT_ARB = 0x84EF;
        public const GLuint GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB = 0x86A0;
        public const GLuint GL_TEXTURE_COMPRESSED_ARB = 0x86A1;
        public const GLuint GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB = 0x86A2;
        public const GLuint GL_COMPRESSED_TEXTURE_FORMATS_ARB = 0x86A3;
        public const GLuint GL_MAX_VERTEX_UNITS_ARB = 0x86A4;
        public const GLuint GL_ACTIVE_VERTEX_UNITS_ARB = 0x86A5;
        public const GLuint GL_WEIGHT_SUM_UNITY_ARB = 0x86A6;
        public const GLuint GL_VERTEX_BLEND_ARB = 0x86A7;
        public const GLuint GL_CURRENT_WEIGHT_ARB = 0x86A8;
        public const GLuint GL_WEIGHT_ARRAY_TYPE_ARB = 0x86A9;
        public const GLuint GL_WEIGHT_ARRAY_STRIDE_ARB = 0x86AA;
        public const GLuint GL_WEIGHT_ARRAY_SIZE_ARB = 0x86AB;
        public const GLuint GL_WEIGHT_ARRAY_POINTER_ARB = 0x86AC;
        public const GLuint GL_WEIGHT_ARRAY_ARB = 0x86AD;
        public const GLuint GL_MODELVIEW0_ARB = 0x1700;
        public const GLuint GL_MODELVIEW1_ARB = 0x850A;
        public const GLuint GL_MODELVIEW2_ARB = 0x8722;
        public const GLuint GL_MODELVIEW3_ARB = 0x8723;
        public const GLuint GL_MODELVIEW4_ARB = 0x8724;
        public const GLuint GL_MODELVIEW5_ARB = 0x8725;
        public const GLuint GL_MODELVIEW6_ARB = 0x8726;
        public const GLuint GL_MODELVIEW7_ARB = 0x8727;
        public const GLuint GL_MODELVIEW8_ARB = 0x8728;
        public const GLuint GL_MODELVIEW9_ARB = 0x8729;
        public const GLuint GL_MODELVIEW10_ARB = 0x872A;
        public const GLuint GL_MODELVIEW11_ARB = 0x872B;
        public const GLuint GL_MODELVIEW12_ARB = 0x872C;
        public const GLuint GL_MODELVIEW13_ARB = 0x872D;
        public const GLuint GL_MODELVIEW14_ARB = 0x872E;
        public const GLuint GL_MODELVIEW15_ARB = 0x872F;
        public const GLuint GL_MODELVIEW16_ARB = 0x8730;
        public const GLuint GL_MODELVIEW17_ARB = 0x8731;
        public const GLuint GL_MODELVIEW18_ARB = 0x8732;
        public const GLuint GL_MODELVIEW19_ARB = 0x8733;
        public const GLuint GL_MODELVIEW20_ARB = 0x8734;
        public const GLuint GL_MODELVIEW21_ARB = 0x8735;
        public const GLuint GL_MODELVIEW22_ARB = 0x8736;
        public const GLuint GL_MODELVIEW23_ARB = 0x8737;
        public const GLuint GL_MODELVIEW24_ARB = 0x8738;
        public const GLuint GL_MODELVIEW25_ARB = 0x8739;
        public const GLuint GL_MODELVIEW26_ARB = 0x873A;
        public const GLuint GL_MODELVIEW27_ARB = 0x873B;
        public const GLuint GL_MODELVIEW28_ARB = 0x873C;
        public const GLuint GL_MODELVIEW29_ARB = 0x873D;
        public const GLuint GL_MODELVIEW30_ARB = 0x873E;
        public const GLuint GL_MODELVIEW31_ARB = 0x873F;
        public const GLuint GL_MATRIX_PALETTE_ARB = 0x8840;
        public const GLuint GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB = 0x8841;
        public const GLuint GL_MAX_PALETTE_MATRICES_ARB = 0x8842;
        public const GLuint GL_CURRENT_PALETTE_MATRIX_ARB = 0x8843;
        public const GLuint GL_MATRIX_INDEX_ARRAY_ARB = 0x8844;
        public const GLuint GL_CURRENT_MATRIX_INDEX_ARB = 0x8845;
        public const GLuint GL_MATRIX_INDEX_ARRAY_SIZE_ARB = 0x8846;
        public const GLuint GL_MATRIX_INDEX_ARRAY_TYPE_ARB = 0x8847;
        public const GLuint GL_MATRIX_INDEX_ARRAY_STRIDE_ARB = 0x8848;
        public const GLuint GL_MATRIX_INDEX_ARRAY_POINTER_ARB = 0x8849;
        public const GLuint GL_COMBINE_ARB = 0x8570;
        public const GLuint GL_COMBINE_RGB_ARB = 0x8571;
        public const GLuint GL_COMBINE_ALPHA_ARB = 0x8572;
        public const GLuint GL_SOURCE0_RGB_ARB = 0x8580;
        public const GLuint GL_SOURCE1_RGB_ARB = 0x8581;
        public const GLuint GL_SOURCE2_RGB_ARB = 0x8582;
        public const GLuint GL_SOURCE0_ALPHA_ARB = 0x8588;
        public const GLuint GL_SOURCE1_ALPHA_ARB = 0x8589;
        public const GLuint GL_SOURCE2_ALPHA_ARB = 0x858A;
        public const GLuint GL_OPERAND0_RGB_ARB = 0x8590;
        public const GLuint GL_OPERAND1_RGB_ARB = 0x8591;
        public const GLuint GL_OPERAND2_RGB_ARB = 0x8592;
        public const GLuint GL_OPERAND0_ALPHA_ARB = 0x8598;
        public const GLuint GL_OPERAND1_ALPHA_ARB = 0x8599;
        public const GLuint GL_OPERAND2_ALPHA_ARB = 0x859A;
        public const GLuint GL_RGB_SCALE_ARB = 0x8573;
        public const GLuint GL_ADD_SIGNED_ARB = 0x8574;
        public const GLuint GL_INTERPOLATE_ARB = 0x8575;
        public const GLuint GL_SUBTRACT_ARB = 0x84E7;
        public const GLuint GL_CONSTANT_ARB = 0x8576;
        public const GLuint GL_PRIMARY_COLOR_ARB = 0x8577;
        public const GLuint GL_PREVIOUS_ARB = 0x8578;
        public const GLuint GL_DOT3_RGB_ARB = 0x86AE;
        public const GLuint GL_DOT3_RGBA_ARB = 0x86AF;
        public const GLuint GL_MIRRORED_REPEAT_ARB = 0x8370;
        public const GLuint GL_DEPTH_COMPONENT16_ARB = 0x81A5;
        public const GLuint GL_DEPTH_COMPONENT24_ARB = 0x81A6;
        public const GLuint GL_DEPTH_COMPONENT32_ARB = 0x81A7;
        public const GLuint GL_TEXTURE_DEPTH_SIZE_ARB = 0x884A;
        public const GLuint GL_DEPTH_TEXTURE_MODE_ARB = 0x884B;
        public const GLuint GL_TEXTURE_COMPARE_MODE_ARB = 0x884C;
        public const GLuint GL_TEXTURE_COMPARE_FUNC_ARB = 0x884D;
        public const GLuint GL_COMPARE_R_TO_TEXTURE_ARB = 0x884E;
        public const GLuint GL_TEXTURE_COMPARE_FAIL_VALUE_ARB = 0x80BF;
        public const GLuint GL_COLOR_SUM_ARB = 0x8458;
        public const GLuint GL_VERTEX_PROGRAM_ARB = 0x8620;
        public const GLuint GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB = 0x8622;
        public const GLuint GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB = 0x8623;
        public const GLuint GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB = 0x8624;
        public const GLuint GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB = 0x8625;
        public const GLuint GL_CURRENT_VERTEX_ATTRIB_ARB = 0x8626;
        public const GLuint GL_PROGRAM_LENGTH_ARB = 0x8627;
        public const GLuint GL_PROGRAM_STRING_ARB = 0x8628;
        public const GLuint GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB = 0x862E;
        public const GLuint GL_MAX_PROGRAM_MATRICES_ARB = 0x862F;
        public const GLuint GL_CURRENT_MATRIX_STACK_DEPTH_ARB = 0x8640;
        public const GLuint GL_CURRENT_MATRIX_ARB = 0x8641;
        public const GLuint GL_VERTEX_PROGRAM_POINT_SIZE_ARB = 0x8642;
        public const GLuint GL_VERTEX_PROGRAM_TWO_SIDE_ARB = 0x8643;
        public const GLuint GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB = 0x8645;
        public const GLuint GL_PROGRAM_ERROR_POSITION_ARB = 0x864B;
        public const GLuint GL_PROGRAM_BINDING_ARB = 0x8677;
        public const GLuint GL_MAX_VERTEX_ATTRIBS_ARB = 0x8869;
        public const GLuint GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB = 0x886A;
        public const GLuint GL_PROGRAM_ERROR_STRING_ARB = 0x8874;
        public const GLuint GL_PROGRAM_FORMAT_ASCII_ARB = 0x8875;
        public const GLuint GL_PROGRAM_FORMAT_ARB = 0x8876;
        public const GLuint GL_PROGRAM_INSTRUCTIONS_ARB = 0x88A0;
        public const GLuint GL_MAX_PROGRAM_INSTRUCTIONS_ARB = 0x88A1;
        public const GLuint GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB = 0x88A2;
        public const GLuint GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB = 0x88A3;
        public const GLuint GL_PROGRAM_TEMPORARIES_ARB = 0x88A4;
        public const GLuint GL_MAX_PROGRAM_TEMPORARIES_ARB = 0x88A5;
        public const GLuint GL_PROGRAM_NATIVE_TEMPORARIES_ARB = 0x88A6;
        public const GLuint GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB = 0x88A7;
        public const GLuint GL_PROGRAM_PARAMETERS_ARB = 0x88A8;
        public const GLuint GL_MAX_PROGRAM_PARAMETERS_ARB = 0x88A9;
        public const GLuint GL_PROGRAM_NATIVE_PARAMETERS_ARB = 0x88AA;
        public const GLuint GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB = 0x88AB;
        public const GLuint GL_PROGRAM_ATTRIBS_ARB = 0x88AC;
        public const GLuint GL_MAX_PROGRAM_ATTRIBS_ARB = 0x88AD;
        public const GLuint GL_PROGRAM_NATIVE_ATTRIBS_ARB = 0x88AE;
        public const GLuint GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB = 0x88AF;
        public const GLuint GL_PROGRAM_ADDRESS_REGISTERS_ARB = 0x88B0;
        public const GLuint GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB = 0x88B1;
        public const GLuint GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = 0x88B2;
        public const GLuint GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = 0x88B3;
        public const GLuint GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB = 0x88B4;
        public const GLuint GL_MAX_PROGRAM_ENV_PARAMETERS_ARB = 0x88B5;
        public const GLuint GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB = 0x88B6;
        public const GLuint GL_TRANSPOSE_CURRENT_MATRIX_ARB = 0x88B7;
        public const GLuint GL_MATRIX0_ARB = 0x88C0;
        public const GLuint GL_MATRIX1_ARB = 0x88C1;
        public const GLuint GL_MATRIX2_ARB = 0x88C2;
        public const GLuint GL_MATRIX3_ARB = 0x88C3;
        public const GLuint GL_MATRIX4_ARB = 0x88C4;
        public const GLuint GL_MATRIX5_ARB = 0x88C5;
        public const GLuint GL_MATRIX6_ARB = 0x88C6;
        public const GLuint GL_MATRIX7_ARB = 0x88C7;
        public const GLuint GL_MATRIX8_ARB = 0x88C8;
        public const GLuint GL_MATRIX9_ARB = 0x88C9;
        public const GLuint GL_MATRIX10_ARB = 0x88CA;
        public const GLuint GL_MATRIX11_ARB = 0x88CB;
        public const GLuint GL_MATRIX12_ARB = 0x88CC;
        public const GLuint GL_MATRIX13_ARB = 0x88CD;
        public const GLuint GL_MATRIX14_ARB = 0x88CE;
        public const GLuint GL_MATRIX15_ARB = 0x88CF;
        public const GLuint GL_MATRIX16_ARB = 0x88D0;
        public const GLuint GL_MATRIX17_ARB = 0x88D1;
        public const GLuint GL_MATRIX18_ARB = 0x88D2;
        public const GLuint GL_MATRIX19_ARB = 0x88D3;
        public const GLuint GL_MATRIX20_ARB = 0x88D4;
        public const GLuint GL_MATRIX21_ARB = 0x88D5;
        public const GLuint GL_MATRIX22_ARB = 0x88D6;
        public const GLuint GL_MATRIX23_ARB = 0x88D7;
        public const GLuint GL_MATRIX24_ARB = 0x88D8;
        public const GLuint GL_MATRIX25_ARB = 0x88D9;
        public const GLuint GL_MATRIX26_ARB = 0x88DA;
        public const GLuint GL_MATRIX27_ARB = 0x88DB;
        public const GLuint GL_MATRIX28_ARB = 0x88DC;
        public const GLuint GL_MATRIX29_ARB = 0x88DD;
        public const GLuint GL_MATRIX30_ARB = 0x88DE;
        public const GLuint GL_MATRIX31_ARB = 0x88DF;
        public const GLuint GL_FRAGMENT_PROGRAM_ARB = 0x8804;
        public const GLuint GL_PROGRAM_ALU_INSTRUCTIONS_ARB = 0x8805;
        public const GLuint GL_PROGRAM_TEX_INSTRUCTIONS_ARB = 0x8806;
        public const GLuint GL_PROGRAM_TEX_INDIRECTIONS_ARB = 0x8807;
        public const GLuint GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = 0x8808;
        public const GLuint GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = 0x8809;
        public const GLuint GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = 0x880A;
        public const GLuint GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB = 0x880B;
        public const GLuint GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB = 0x880C;
        public const GLuint GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB = 0x880D;
        public const GLuint GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = 0x880E;
        public const GLuint GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = 0x880F;
        public const GLuint GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = 0x8810;
        public const GLuint GL_MAX_TEXTURE_COORDS_ARB = 0x8871;
        public const GLuint GL_MAX_TEXTURE_IMAGE_UNITS_ARB = 0x8872;
        public const GLuint GL_BUFFER_SIZE_ARB = 0x8764;
        public const GLuint GL_BUFFER_USAGE_ARB = 0x8765;
        public const GLuint GL_ARRAY_BUFFER_ARB = 0x8892;
        public const GLuint GL_ELEMENT_ARRAY_BUFFER_ARB = 0x8893;
        public const GLuint GL_ARRAY_BUFFER_BINDING_ARB = 0x8894;
        public const GLuint GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB = 0x8895;
        public const GLuint GL_VERTEX_ARRAY_BUFFER_BINDING_ARB = 0x8896;
        public const GLuint GL_NORMAL_ARRAY_BUFFER_BINDING_ARB = 0x8897;
        public const GLuint GL_COLOR_ARRAY_BUFFER_BINDING_ARB = 0x8898;
        public const GLuint GL_INDEX_ARRAY_BUFFER_BINDING_ARB = 0x8899;
        public const GLuint GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB = 0x889A;
        public const GLuint GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB = 0x889B;
        public const GLuint GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB = 0x889C;
        public const GLuint GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB = 0x889D;
        public const GLuint GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB = 0x889E;
        public const GLuint GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB = 0x889F;
        public const GLuint GL_READ_ONLY_ARB = 0x88B8;
        public const GLuint GL_WRITE_ONLY_ARB = 0x88B9;
        public const GLuint GL_READ_WRITE_ARB = 0x88BA;
        public const GLuint GL_BUFFER_ACCESS_ARB = 0x88BB;
        public const GLuint GL_BUFFER_MAPPED_ARB = 0x88BC;
        public const GLuint GL_BUFFER_MAP_POINTER_ARB = 0x88BD;
        public const GLuint GL_STREAM_DRAW_ARB = 0x88E0;
        public const GLuint GL_STREAM_READ_ARB = 0x88E1;
        public const GLuint GL_STREAM_COPY_ARB = 0x88E2;
        public const GLuint GL_STATIC_DRAW_ARB = 0x88E4;
        public const GLuint GL_STATIC_READ_ARB = 0x88E5;
        public const GLuint GL_STATIC_COPY_ARB = 0x88E6;
        public const GLuint GL_DYNAMIC_DRAW_ARB = 0x88E8;
        public const GLuint GL_DYNAMIC_READ_ARB = 0x88E9;
        public const GLuint GL_DYNAMIC_COPY_ARB = 0x88EA;
        public const GLuint GL_QUERY_COUNTER_BITS_ARB = 0x8864;
        public const GLuint GL_CURRENT_QUERY_ARB = 0x8865;
        public const GLuint GL_QUERY_RESULT_ARB = 0x8866;
        public const GLuint GL_QUERY_RESULT_AVAILABLE_ARB = 0x8867;
        public const GLuint GL_SAMPLES_PASSED_ARB = 0x8914;
        public const GLuint GL_PROGRAM_OBJECT_ARB = 0x8B40;
        public const GLuint GL_SHADER_OBJECT_ARB = 0x8B48;
        public const GLuint GL_OBJECT_TYPE_ARB = 0x8B4E;
        public const GLuint GL_OBJECT_SUBTYPE_ARB = 0x8B4F;
        public const GLuint GL_FLOAT_VEC2_ARB = 0x8B50;
        public const GLuint GL_FLOAT_VEC3_ARB = 0x8B51;
        public const GLuint GL_FLOAT_VEC4_ARB = 0x8B52;
        public const GLuint GL_INT_VEC2_ARB = 0x8B53;
        public const GLuint GL_INT_VEC3_ARB = 0x8B54;
        public const GLuint GL_INT_VEC4_ARB = 0x8B55;
        public const GLuint GL_BOOL_ARB = 0x8B56;
        public const GLuint GL_BOOL_VEC2_ARB = 0x8B57;
        public const GLuint GL_BOOL_VEC3_ARB = 0x8B58;
        public const GLuint GL_BOOL_VEC4_ARB = 0x8B59;
        public const GLuint GL_FLOAT_MAT2_ARB = 0x8B5A;
        public const GLuint GL_FLOAT_MAT3_ARB = 0x8B5B;
        public const GLuint GL_FLOAT_MAT4_ARB = 0x8B5C;
        public const GLuint GL_SAMPLER_1D_ARB = 0x8B5D;
        public const GLuint GL_SAMPLER_2D_ARB = 0x8B5E;
        public const GLuint GL_SAMPLER_3D_ARB = 0x8B5F;
        public const GLuint GL_SAMPLER_CUBE_ARB = 0x8B60;
        public const GLuint GL_SAMPLER_1D_SHADOW_ARB = 0x8B61;
        public const GLuint GL_SAMPLER_2D_SHADOW_ARB = 0x8B62;
        public const GLuint GL_SAMPLER_2D_RECT_ARB = 0x8B63;
        public const GLuint GL_SAMPLER_2D_RECT_SHADOW_ARB = 0x8B64;
        public const GLuint GL_OBJECT_DELETE_STATUS_ARB = 0x8B80;
        public const GLuint GL_OBJECT_COMPILE_STATUS_ARB = 0x8B81;
        public const GLuint GL_OBJECT_LINK_STATUS_ARB = 0x8B82;
        public const GLuint GL_OBJECT_VALIDATE_STATUS_ARB = 0x8B83;
        public const GLuint GL_OBJECT_INFO_LOG_LENGTH_ARB = 0x8B84;
        public const GLuint GL_OBJECT_ATTACHED_OBJECTS_ARB = 0x8B85;
        public const GLuint GL_OBJECT_ACTIVE_UNIFORMS_ARB = 0x8B86;
        public const GLuint GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB = 0x8B87;
        public const GLuint GL_OBJECT_SHADER_SOURCE_LENGTH_ARB = 0x8B88;
        public const GLuint GL_VERTEX_SHADER_ARB = 0x8B31;
        public const GLuint GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB = 0x8B4A;
        public const GLuint GL_MAX_VARYING_FLOATS_ARB = 0x8B4B;
        public const GLuint GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB = 0x8B4C;
        public const GLuint GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB = 0x8B4D;
        public const GLuint GL_OBJECT_ACTIVE_ATTRIBUTES_ARB = 0x8B89;
        public const GLuint GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB = 0x8B8A;
        public const GLuint GL_FRAGMENT_SHADER_ARB = 0x8B30;
        public const GLuint GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB = 0x8B49;
        public const GLuint GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB = 0x8B8B;
        public const GLuint GL_SHADING_LANGUAGE_VERSION_ARB = 0x8B8C;
        public const GLuint GL_POINT_SPRITE_ARB = 0x8861;
        public const GLuint GL_COORD_REPLACE_ARB = 0x8862;
        public const GLuint GL_MAX_DRAW_BUFFERS_ARB = 0x8824;
        public const GLuint GL_DRAW_BUFFER0_ARB = 0x8825;
        public const GLuint GL_DRAW_BUFFER1_ARB = 0x8826;
        public const GLuint GL_DRAW_BUFFER2_ARB = 0x8827;
        public const GLuint GL_DRAW_BUFFER3_ARB = 0x8828;
        public const GLuint GL_DRAW_BUFFER4_ARB = 0x8829;
        public const GLuint GL_DRAW_BUFFER5_ARB = 0x882A;
        public const GLuint GL_DRAW_BUFFER6_ARB = 0x882B;
        public const GLuint GL_DRAW_BUFFER7_ARB = 0x882C;
        public const GLuint GL_DRAW_BUFFER8_ARB = 0x882D;
        public const GLuint GL_DRAW_BUFFER9_ARB = 0x882E;
        public const GLuint GL_DRAW_BUFFER10_ARB = 0x882F;
        public const GLuint GL_DRAW_BUFFER11_ARB = 0x8830;
        public const GLuint GL_DRAW_BUFFER12_ARB = 0x8831;
        public const GLuint GL_DRAW_BUFFER13_ARB = 0x8832;
        public const GLuint GL_DRAW_BUFFER14_ARB = 0x8833;
        public const GLuint GL_DRAW_BUFFER15_ARB = 0x8834;
        public const GLuint GL_TEXTURE_RECTANGLE_ARB = 0x84F5;
        public const GLuint GL_TEXTURE_BINDING_RECTANGLE_ARB = 0x84F6;
        public const GLuint GL_PROXY_TEXTURE_RECTANGLE_ARB = 0x84F7;
        public const GLuint GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB = 0x84F8;
        public const GLuint GL_RGBA_FLOAT_MODE_ARB = 0x8820;
        public const GLuint GL_CLAMP_VERTEX_COLOR_ARB = 0x891A;
        public const GLuint GL_CLAMP_FRAGMENT_COLOR_ARB = 0x891B;
        public const GLuint GL_CLAMP_READ_COLOR_ARB = 0x891C;
        public const GLuint GL_FIXED_ONLY_ARB = 0x891D;
        public const GLuint GL_HALF_FLOAT_ARB = 0x140B;
        public const GLuint GL_TEXTURE_RED_TYPE_ARB = 0x8C10;
        public const GLuint GL_TEXTURE_GREEN_TYPE_ARB = 0x8C11;
        public const GLuint GL_TEXTURE_BLUE_TYPE_ARB = 0x8C12;
        public const GLuint GL_TEXTURE_ALPHA_TYPE_ARB = 0x8C13;
        public const GLuint GL_TEXTURE_LUMINANCE_TYPE_ARB = 0x8C14;
        public const GLuint GL_TEXTURE_INTENSITY_TYPE_ARB = 0x8C15;
        public const GLuint GL_TEXTURE_DEPTH_TYPE_ARB = 0x8C16;
        public const GLuint GL_UNSIGNED_NORMALIZED_ARB = 0x8C17;
        public const GLuint GL_RGBA32F_ARB = 0x8814;
        public const GLuint GL_RGB32F_ARB = 0x8815;
        public const GLuint GL_ALPHA32F_ARB = 0x8816;
        public const GLuint GL_INTENSITY32F_ARB = 0x8817;
        public const GLuint GL_LUMINANCE32F_ARB = 0x8818;
        public const GLuint GL_LUMINANCE_ALPHA32F_ARB = 0x8819;
        public const GLuint GL_RGBA16F_ARB = 0x881A;
        public const GLuint GL_RGB16F_ARB = 0x881B;
        public const GLuint GL_ALPHA16F_ARB = 0x881C;
        public const GLuint GL_INTENSITY16F_ARB = 0x881D;
        public const GLuint GL_LUMINANCE16F_ARB = 0x881E;
        public const GLuint GL_LUMINANCE_ALPHA16F_ARB = 0x881F;
        public const GLuint GL_PIXEL_PACK_BUFFER_ARB = 0x88EB;
        public const GLuint GL_PIXEL_UNPACK_BUFFER_ARB = 0x88EC;
        public const GLuint GL_PIXEL_PACK_BUFFER_BINDING_ARB = 0x88ED;
        public const GLuint GL_PIXEL_UNPACK_BUFFER_BINDING_ARB = 0x88EF;
        public const GLuint GL_IMAGE_SCALE_X_HP = 0x8155;
        public const GLuint GL_IMAGE_SCALE_Y_HP = 0x8156;
        public const GLuint GL_IMAGE_TRANSLATE_X_HP = 0x8157;
        public const GLuint GL_IMAGE_TRANSLATE_Y_HP = 0x8158;
        public const GLuint GL_IMAGE_ROTATE_ANGLE_HP = 0x8159;
        public const GLuint GL_IMAGE_ROTATE_ORIGIN_X_HP = 0x815A;
        public const GLuint GL_IMAGE_ROTATE_ORIGIN_Y_HP = 0x815B;
        public const GLuint GL_IMAGE_MAG_FILTER_HP = 0x815C;
        public const GLuint GL_IMAGE_MIN_FILTER_HP = 0x815D;
        public const GLuint GL_IMAGE_CUBIC_WEIGHT_HP = 0x815E;
        public const GLuint GL_CUBIC_HP = 0x815F;
        public const GLuint GL_AVERAGE_HP = 0x8160;
        public const GLuint GL_IMAGE_TRANSFORM_2D_HP = 0x8161;
        public const GLuint GL_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP = 0x8162;
        public const GLuint GL_PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP = 0x8163;
        public const GLuint GL_VERTEX_DATA_HINT_PGI = 0x1A22A;
        public const GLuint GL_VERTEX_CONSISTENT_HINT_PGI = 0x1A22B;
        public const GLuint GL_MATERIAL_SIDE_HINT_PGI = 0x1A22C;
        public const GLuint GL_MAX_VERTEX_HINT_PGI = 0x1A22D;
        public const GLuint GL_COLOR3_BIT_PGI = 0x00010000;
        public const GLuint GL_COLOR4_BIT_PGI = 0x00020000;
        public const GLuint GL_EDGEFLAG_BIT_PGI = 0x00040000;
        public const GLuint GL_INDEX_BIT_PGI = 0x00080000;
        public const GLuint GL_MAT_AMBIENT_BIT_PGI = 0x00100000;
        public const GLuint GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI = 0x00200000;
        public const GLuint GL_MAT_DIFFUSE_BIT_PGI = 0x00400000;
        public const GLuint GL_MAT_EMISSION_BIT_PGI = 0x00800000;
        public const GLuint GL_MAT_COLOR_INDEXES_BIT_PGI = 0x01000000;
        public const GLuint GL_MAT_SHININESS_BIT_PGI = 0x02000000;
        public const GLuint GL_MAT_SPECULAR_BIT_PGI = 0x04000000;
        public const GLuint GL_NORMAL_BIT_PGI = 0x08000000;
        public const GLuint GL_TEXCOORD1_BIT_PGI = 0x10000000;
        public const GLuint GL_TEXCOORD2_BIT_PGI = 0x20000000;
        public const GLuint GL_TEXCOORD3_BIT_PGI = 0x40000000;
        public const GLuint GL_TEXCOORD4_BIT_PGI = unchecked((int)0x80000000);
        public const GLuint GL_VERTEX23_BIT_PGI = 0x00000004;
        public const GLuint GL_VERTEX4_BIT_PGI = 0x00000008;
        public const GLuint GL_PREFER_DOUBLEBUFFER_HINT_PGI = 0x1A1F8;
        public const GLuint GL_CONSERVE_MEMORY_HINT_PGI = 0x1A1FD;
        public const GLuint GL_RECLAIM_MEMORY_HINT_PGI = 0x1A1FE;
        public const GLuint GL_NATIVE_GRAPHICS_HANDLE_PGI = 0x1A202;
        public const GLuint GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI = 0x1A203;
        public const GLuint GL_NATIVE_GRAPHICS_END_HINT_PGI = 0x1A204;
        public const GLuint GL_ALWAYS_FAST_HINT_PGI = 0x1A20C;
        public const GLuint GL_ALWAYS_SOFT_HINT_PGI = 0x1A20D;
        public const GLuint GL_ALLOW_DRAW_OBJ_HINT_PGI = 0x1A20E;
        public const GLuint GL_ALLOW_DRAW_WIN_HINT_PGI = 0x1A20F;
        public const GLuint GL_ALLOW_DRAW_FRG_HINT_PGI = 0x1A210;
        public const GLuint GL_ALLOW_DRAW_MEM_HINT_PGI = 0x1A211;
        public const GLuint GL_STRICT_DEPTHFUNC_HINT_PGI = 0x1A216;
        public const GLuint GL_STRICT_LIGHTING_HINT_PGI = 0x1A217;
        public const GLuint GL_STRICT_SCISSOR_HINT_PGI = 0x1A218;
        public const GLuint GL_FULL_STIPPLE_HINT_PGI = 0x1A219;
        public const GLuint GL_CLIP_NEAR_HINT_PGI = 0x1A220;
        public const GLuint GL_CLIP_FAR_HINT_PGI = 0x1A221;
        public const GLuint GL_WIDE_LINE_HINT_PGI = 0x1A222;
        public const GLuint GL_BACK_NORMALS_HINT_PGI = 0x1A223;
        public const GLuint GL_COLOR_INDEX1_EXT = 0x80E2;
        public const GLuint GL_COLOR_INDEX2_EXT = 0x80E3;
        public const GLuint GL_COLOR_INDEX4_EXT = 0x80E4;
        public const GLuint GL_COLOR_INDEX8_EXT = 0x80E5;
        public const GLuint GL_COLOR_INDEX12_EXT = 0x80E6;
        public const GLuint GL_COLOR_INDEX16_EXT = 0x80E7;
        public const GLuint GL_TEXTURE_INDEX_SIZE_EXT = 0x80ED;
        public const GLuint GL_CLIP_VOLUME_CLIPPING_HINT_EXT = 0x80F0;
        public const GLuint GL_INDEX_MATERIAL_EXT = 0x81B8;
        public const GLuint GL_INDEX_MATERIAL_PARAMETER_EXT = 0x81B9;
        public const GLuint GL_INDEX_MATERIAL_FACE_EXT = 0x81BA;
        public const GLuint GL_INDEX_TEST_EXT = 0x81B5;
        public const GLuint GL_INDEX_TEST_FUNC_EXT = 0x81B6;
        public const GLuint GL_INDEX_TEST_REF_EXT = 0x81B7;
        public const GLuint GL_IUI_V2F_EXT = 0x81AD;
        public const GLuint GL_IUI_V3F_EXT = 0x81AE;
        public const GLuint GL_IUI_N3F_V2F_EXT = 0x81AF;
        public const GLuint GL_IUI_N3F_V3F_EXT = 0x81B0;
        public const GLuint GL_T2F_IUI_V2F_EXT = 0x81B1;
        public const GLuint GL_T2F_IUI_V3F_EXT = 0x81B2;
        public const GLuint GL_T2F_IUI_N3F_V2F_EXT = 0x81B3;
        public const GLuint GL_T2F_IUI_N3F_V3F_EXT = 0x81B4;
        public const GLuint GL_ARRAY_ELEMENT_LOCK_FIRST_EXT = 0x81A8;
        public const GLuint GL_ARRAY_ELEMENT_LOCK_COUNT_EXT = 0x81A9;
        public const GLuint GL_CULL_VERTEX_EXT = 0x81AA;
        public const GLuint GL_CULL_VERTEX_EYE_POSITION_EXT = 0x81AB;
        public const GLuint GL_CULL_VERTEX_OBJECT_POSITION_EXT = 0x81AC;
        public const GLuint GL_RASTER_POSITION_UNCLIPPED_IBM = 0x19262;
        public const GLuint GL_TEXTURE_LIGHTING_MODE_HP = 0x8167;
        public const GLuint GL_TEXTURE_POST_SPECULAR_HP = 0x8168;
        public const GLuint GL_TEXTURE_PRE_SPECULAR_HP = 0x8169;
        public const GLuint GL_MAX_ELEMENTS_VERTICES_EXT = 0x80E8;
        public const GLuint GL_MAX_ELEMENTS_INDICES_EXT = 0x80E9;
        public const GLuint GL_PHONG_WIN = 0x80EA;
        public const GLuint GL_PHONG_HINT_WIN = 0x80EB;
        public const GLuint GL_FOG_SPECULAR_TEXTURE_WIN = 0x80EC;
        public const GLuint GL_FRAGMENT_MATERIAL_EXT = 0x8349;
        public const GLuint GL_FRAGMENT_NORMAL_EXT = 0x834A;
        public const GLuint GL_FRAGMENT_COLOR_EXT = 0x834C;
        public const GLuint GL_ATTENUATION_EXT = 0x834D;
        public const GLuint GL_SHADOW_ATTENUATION_EXT = 0x834E;
        public const GLuint GL_TEXTURE_APPLICATION_MODE_EXT = 0x834F;
        public const GLuint GL_TEXTURE_LIGHT_EXT = 0x8350;
        public const GLuint GL_TEXTURE_MATERIAL_FACE_EXT = 0x8351;
        public const GLuint GL_TEXTURE_MATERIAL_PARAMETER_EXT = 0x8352;
        public const GLuint GL_OCCLUSION_TEST_HP = 0x8165;
        public const GLuint GL_OCCLUSION_TEST_RESULT_HP = 0x8166;
        public const GLuint GL_COLOR_SUM_EXT = 0x8458;
        public const GLuint GL_CURRENT_SECONDARY_COLOR_EXT = 0x8459;
        public const GLuint GL_SECONDARY_COLOR_ARRAY_SIZE_EXT = 0x845A;
        public const GLuint GL_SECONDARY_COLOR_ARRAY_TYPE_EXT = 0x845B;
        public const GLuint GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT = 0x845C;
        public const GLuint GL_SECONDARY_COLOR_ARRAY_POINTER_EXT = 0x845D;
        public const GLuint GL_SECONDARY_COLOR_ARRAY_EXT = 0x845E;
        public const GLuint GL_PERTURB_EXT = 0x85AE;
        public const GLuint GL_TEXTURE_NORMAL_EXT = 0x85AF;
        public const GLuint GL_FOG_COORDINATE_SOURCE_EXT = 0x8450;
        public const GLuint GL_FOG_COORDINATE_EXT = 0x8451;
        public const GLuint GL_FRAGMENT_DEPTH_EXT = 0x8452;
        public const GLuint GL_CURRENT_FOG_COORDINATE_EXT = 0x8453;
        public const GLuint GL_FOG_COORDINATE_ARRAY_TYPE_EXT = 0x8454;
        public const GLuint GL_FOG_COORDINATE_ARRAY_STRIDE_EXT = 0x8455;
        public const GLuint GL_FOG_COORDINATE_ARRAY_POINTER_EXT = 0x8456;
        public const GLuint GL_FOG_COORDINATE_ARRAY_EXT = 0x8457;
        public const GLuint GL_SCREEN_COORDINATES_REND = 0x8490;
        public const GLuint GL_INVERTED_SCREEN_W_REND = 0x8491;
        public const GLuint GL_TANGENT_ARRAY_EXT = 0x8439;
        public const GLuint GL_BINORMAL_ARRAY_EXT = 0x843A;
        public const GLuint GL_CURRENT_TANGENT_EXT = 0x843B;
        public const GLuint GL_CURRENT_BINORMAL_EXT = 0x843C;
        public const GLuint GL_TANGENT_ARRAY_TYPE_EXT = 0x843E;
        public const GLuint GL_TANGENT_ARRAY_STRIDE_EXT = 0x843F;
        public const GLuint GL_BINORMAL_ARRAY_TYPE_EXT = 0x8440;
        public const GLuint GL_BINORMAL_ARRAY_STRIDE_EXT = 0x8441;
        public const GLuint GL_TANGENT_ARRAY_POINTER_EXT = 0x8442;
        public const GLuint GL_BINORMAL_ARRAY_POINTER_EXT = 0x8443;
        public const GLuint GL_MAP1_TANGENT_EXT = 0x8444;
        public const GLuint GL_MAP2_TANGENT_EXT = 0x8445;
        public const GLuint GL_MAP1_BINORMAL_EXT = 0x8446;
        public const GLuint GL_MAP2_BINORMAL_EXT = 0x8447;
        public const GLuint GL_COMBINE_EXT = 0x8570;
        public const GLuint GL_COMBINE_RGB_EXT = 0x8571;
        public const GLuint GL_COMBINE_ALPHA_EXT = 0x8572;
        public const GLuint GL_RGB_SCALE_EXT = 0x8573;
        public const GLuint GL_ADD_SIGNED_EXT = 0x8574;
        public const GLuint GL_INTERPOLATE_EXT = 0x8575;
        public const GLuint GL_CONSTANT_EXT = 0x8576;
        public const GLuint GL_PRIMARY_COLOR_EXT = 0x8577;
        public const GLuint GL_PREVIOUS_EXT = 0x8578;
        public const GLuint GL_SOURCE0_RGB_EXT = 0x8580;
        public const GLuint GL_SOURCE1_RGB_EXT = 0x8581;
        public const GLuint GL_SOURCE2_RGB_EXT = 0x8582;
        public const GLuint GL_SOURCE0_ALPHA_EXT = 0x8588;
        public const GLuint GL_SOURCE1_ALPHA_EXT = 0x8589;
        public const GLuint GL_SOURCE2_ALPHA_EXT = 0x858A;
        public const GLuint GL_OPERAND0_RGB_EXT = 0x8590;
        public const GLuint GL_OPERAND1_RGB_EXT = 0x8591;
        public const GLuint GL_OPERAND2_RGB_EXT = 0x8592;
        public const GLuint GL_OPERAND0_ALPHA_EXT = 0x8598;
        public const GLuint GL_OPERAND1_ALPHA_EXT = 0x8599;
        public const GLuint GL_OPERAND2_ALPHA_EXT = 0x859A;
        public const GLuint GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE = 0x85B0;
        public const GLuint GL_TRANSFORM_HINT_APPLE = 0x85B1;
        public const GLuint GL_FOG_SCALE_SGIX = 0x81FC;
        public const GLuint GL_FOG_SCALE_VALUE_SGIX = 0x81FD;
        public const GLuint GL_UNPACK_CONSTANT_DATA_SUNX = 0x81D5;
        public const GLuint GL_TEXTURE_CONSTANT_DATA_SUNX = 0x81D6;
        public const GLuint GL_GLOBAL_ALPHA_SUN = 0x81D9;
        public const GLuint GL_GLOBAL_ALPHA_FACTOR_SUN = 0x81DA;
        public const GLuint GL_RESTART_SUN = 0x0001;
        public const GLuint GL_REPLACE_MIDDLE_SUN = 0x0002;
        public const GLuint GL_REPLACE_OLDEST_SUN = 0x0003;
        public const GLuint GL_TRIANGLE_LIST_SUN = 0x81D7;
        public const GLuint GL_REPLACEMENT_CODE_SUN = 0x81D8;
        public const GLuint GL_REPLACEMENT_CODE_ARRAY_SUN = 0x85C0;
        public const GLuint GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN = 0x85C1;
        public const GLuint GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN = 0x85C2;
        public const GLuint GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN = 0x85C3;
        public const GLuint GL_R1UI_V3F_SUN = 0x85C4;
        public const GLuint GL_R1UI_C4UB_V3F_SUN = 0x85C5;
        public const GLuint GL_R1UI_C3F_V3F_SUN = 0x85C6;
        public const GLuint GL_R1UI_N3F_V3F_SUN = 0x85C7;
        public const GLuint GL_R1UI_C4F_N3F_V3F_SUN = 0x85C8;
        public const GLuint GL_R1UI_T2F_V3F_SUN = 0x85C9;
        public const GLuint GL_R1UI_T2F_N3F_V3F_SUN = 0x85CA;
        public const GLuint GL_R1UI_T2F_C4F_N3F_V3F_SUN = 0x85CB;
        public const GLuint GL_BLEND_DST_RGB_EXT = 0x80C8;
        public const GLuint GL_BLEND_SRC_RGB_EXT = 0x80C9;
        public const GLuint GL_BLEND_DST_ALPHA_EXT = 0x80CA;
        public const GLuint GL_BLEND_SRC_ALPHA_EXT = 0x80CB;
        public const GLuint GL_RED_MIN_CLAMP_INGR = 0x8560;
        public const GLuint GL_GREEN_MIN_CLAMP_INGR = 0x8561;
        public const GLuint GL_BLUE_MIN_CLAMP_INGR = 0x8562;
        public const GLuint GL_ALPHA_MIN_CLAMP_INGR = 0x8563;
        public const GLuint GL_RED_MAX_CLAMP_INGR = 0x8564;
        public const GLuint GL_GREEN_MAX_CLAMP_INGR = 0x8565;
        public const GLuint GL_BLUE_MAX_CLAMP_INGR = 0x8566;
        public const GLuint GL_ALPHA_MAX_CLAMP_INGR = 0x8567;
        public const GLuint GL_INTERLACE_READ_INGR = 0x8568;
        public const GLuint GL_INCR_WRAP_EXT = 0x8507;
        public const GLuint GL_DECR_WRAP_EXT = 0x8508;
        public const GLuint GL_422_EXT = 0x80CC;
        public const GLuint GL_422_REV_EXT = 0x80CD;
        public const GLuint GL_422_AVERAGE_EXT = 0x80CE;
        public const GLuint GL_422_REV_AVERAGE_EXT = 0x80CF;
        public const GLuint GL_NORMAL_MAP_NV = 0x8511;
        public const GLuint GL_REFLECTION_MAP_NV = 0x8512;
        public const GLuint GL_NORMAL_MAP_EXT = 0x8511;
        public const GLuint GL_REFLECTION_MAP_EXT = 0x8512;
        public const GLuint GL_TEXTURE_CUBE_MAP_EXT = 0x8513;
        public const GLuint GL_TEXTURE_BINDING_CUBE_MAP_EXT = 0x8514;
        public const GLuint GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT = 0x8515;
        public const GLuint GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT = 0x8516;
        public const GLuint GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT = 0x8517;
        public const GLuint GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT = 0x8518;
        public const GLuint GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT = 0x8519;
        public const GLuint GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT = 0x851A;
        public const GLuint GL_PROXY_TEXTURE_CUBE_MAP_EXT = 0x851B;
        public const GLuint GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT = 0x851C;
        public const GLuint GL_WRAP_BORDER_SUN = 0x81D4;
        public const GLuint GL_MAX_TEXTURE_LOD_BIAS_EXT = 0x84FD;
        public const GLuint GL_TEXTURE_FILTER_CONTROL_EXT = 0x8500;
        public const GLuint GL_TEXTURE_LOD_BIAS_EXT = 0x8501;
        public const GLuint GL_TEXTURE_MAX_ANISOTROPY_EXT = 0x84FE;
        public const GLuint GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT = 0x84FF;
        public const GLuint GL_MODELVIEW0_STACK_DEPTH_EXT = GL_MODELVIEW_STACK_DEPTH;
        public const GLuint GL_MODELVIEW1_STACK_DEPTH_EXT = 0x8502;
        public const GLuint GL_MODELVIEW0_MATRIX_EXT = GL_MODELVIEW_MATRIX;
        public const GLuint GL_MODELVIEW1_MATRIX_EXT = 0x8506;
        public const GLuint GL_VERTEX_WEIGHTING_EXT = 0x8509;
        public const GLuint GL_MODELVIEW0_EXT = GL_MODELVIEW;
        public const GLuint GL_MODELVIEW1_EXT = 0x850A;
        public const GLuint GL_CURRENT_VERTEX_WEIGHT_EXT = 0x850B;
        public const GLuint GL_VERTEX_WEIGHT_ARRAY_EXT = 0x850C;
        public const GLuint GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT = 0x850D;
        public const GLuint GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT = 0x850E;
        public const GLuint GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT = 0x850F;
        public const GLuint GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT = 0x8510;
        public const GLuint GL_MAX_SHININESS_NV = 0x8504;
        public const GLuint GL_MAX_SPOT_EXPONENT_NV = 0x8505;
        public const GLuint GL_VERTEX_ARRAY_RANGE_NV = 0x851D;
        public const GLuint GL_VERTEX_ARRAY_RANGE_LENGTH_NV = 0x851E;
        public const GLuint GL_VERTEX_ARRAY_RANGE_VALID_NV = 0x851F;
        public const GLuint GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV = 0x8520;
        public const GLuint GL_VERTEX_ARRAY_RANGE_POINTER_NV = 0x8521;
        public const GLuint GL_REGISTER_COMBINERS_NV = 0x8522;
        public const GLuint GL_VARIABLE_A_NV = 0x8523;
        public const GLuint GL_VARIABLE_B_NV = 0x8524;
        public const GLuint GL_VARIABLE_C_NV = 0x8525;
        public const GLuint GL_VARIABLE_D_NV = 0x8526;
        public const GLuint GL_VARIABLE_E_NV = 0x8527;
        public const GLuint GL_VARIABLE_F_NV = 0x8528;
        public const GLuint GL_VARIABLE_G_NV = 0x8529;
        public const GLuint GL_CONSTANT_COLOR0_NV = 0x852A;
        public const GLuint GL_CONSTANT_COLOR1_NV = 0x852B;
        public const GLuint GL_PRIMARY_COLOR_NV = 0x852C;
        public const GLuint GL_SECONDARY_COLOR_NV = 0x852D;
        public const GLuint GL_SPARE0_NV = 0x852E;
        public const GLuint GL_SPARE1_NV = 0x852F;
        public const GLuint GL_DISCARD_NV = 0x8530;
        public const GLuint GL_E_TIMES_F_NV = 0x8531;
        public const GLuint GL_SPARE0_PLUS_SECONDARY_COLOR_NV = 0x8532;
        public const GLuint GL_UNSIGNED_IDENTITY_NV = 0x8536;
        public const GLuint GL_UNSIGNED_INVERT_NV = 0x8537;
        public const GLuint GL_EXPAND_NORMAL_NV = 0x8538;
        public const GLuint GL_EXPAND_NEGATE_NV = 0x8539;
        public const GLuint GL_HALF_BIAS_NORMAL_NV = 0x853A;
        public const GLuint GL_HALF_BIAS_NEGATE_NV = 0x853B;
        public const GLuint GL_SIGNED_IDENTITY_NV = 0x853C;
        public const GLuint GL_SIGNED_NEGATE_NV = 0x853D;
        public const GLuint GL_SCALE_BY_TWO_NV = 0x853E;
        public const GLuint GL_SCALE_BY_FOUR_NV = 0x853F;
        public const GLuint GL_SCALE_BY_ONE_HALF_NV = 0x8540;
        public const GLuint GL_BIAS_BY_NEGATIVE_ONE_HALF_NV = 0x8541;
        public const GLuint GL_COMBINER_INPUT_NV = 0x8542;
        public const GLuint GL_COMBINER_MAPPING_NV = 0x8543;
        public const GLuint GL_COMBINER_COMPONENT_USAGE_NV = 0x8544;
        public const GLuint GL_COMBINER_AB_DOT_PRODUCT_NV = 0x8545;
        public const GLuint GL_COMBINER_CD_DOT_PRODUCT_NV = 0x8546;
        public const GLuint GL_COMBINER_MUX_SUM_NV = 0x8547;
        public const GLuint GL_COMBINER_SCALE_NV = 0x8548;
        public const GLuint GL_COMBINER_BIAS_NV = 0x8549;
        public const GLuint GL_COMBINER_AB_OUTPUT_NV = 0x854A;
        public const GLuint GL_COMBINER_CD_OUTPUT_NV = 0x854B;
        public const GLuint GL_COMBINER_SUM_OUTPUT_NV = 0x854C;
        public const GLuint GL_MAX_GENERAL_COMBINERS_NV = 0x854D;
        public const GLuint GL_NUM_GENERAL_COMBINERS_NV = 0x854E;
        public const GLuint GL_COLOR_SUM_CLAMP_NV = 0x854F;
        public const GLuint GL_COMBINER0_NV = 0x8550;
        public const GLuint GL_COMBINER1_NV = 0x8551;
        public const GLuint GL_COMBINER2_NV = 0x8552;
        public const GLuint GL_COMBINER3_NV = 0x8553;
        public const GLuint GL_COMBINER4_NV = 0x8554;
        public const GLuint GL_COMBINER5_NV = 0x8555;
        public const GLuint GL_COMBINER6_NV = 0x8556;
        public const GLuint GL_COMBINER7_NV = 0x8557;
        public const GLuint GL_FOG_DISTANCE_MODE_NV = 0x855A;
        public const GLuint GL_EYE_RADIAL_NV = 0x855B;
        public const GLuint GL_EYE_PLANE_ABSOLUTE_NV = 0x855C;
        public const GLuint GL_EMBOSS_LIGHT_NV = 0x855D;
        public const GLuint GL_EMBOSS_CONSTANT_NV = 0x855E;
        public const GLuint GL_EMBOSS_MAP_NV = 0x855F;
        public const GLuint GL_COMBINE4_NV = 0x8503;
        public const GLuint GL_SOURCE3_RGB_NV = 0x8583;
        public const GLuint GL_SOURCE3_ALPHA_NV = 0x858B;
        public const GLuint GL_OPERAND3_RGB_NV = 0x8593;
        public const GLuint GL_OPERAND3_ALPHA_NV = 0x859B;
        public const GLuint GL_CULL_VERTEX_IBM = 103050;
        public const GLuint GL_VERTEX_ARRAY_LIST_IBM = 103070;
        public const GLuint GL_NORMAL_ARRAY_LIST_IBM = 103071;
        public const GLuint GL_COLOR_ARRAY_LIST_IBM = 103072;
        public const GLuint GL_INDEX_ARRAY_LIST_IBM = 103073;
        public const GLuint GL_TEXTURE_COORD_ARRAY_LIST_IBM = 103074;
        public const GLuint GL_EDGE_FLAG_ARRAY_LIST_IBM = 103075;
        public const GLuint GL_FOG_COORDINATE_ARRAY_LIST_IBM = 103076;
        public const GLuint GL_SECONDARY_COLOR_ARRAY_LIST_IBM = 103077;
        public const GLuint GL_VERTEX_ARRAY_LIST_STRIDE_IBM = 103080;
        public const GLuint GL_NORMAL_ARRAY_LIST_STRIDE_IBM = 103081;
        public const GLuint GL_COLOR_ARRAY_LIST_STRIDE_IBM = 103082;
        public const GLuint GL_INDEX_ARRAY_LIST_STRIDE_IBM = 103083;
        public const GLuint GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM = 103084;
        public const GLuint GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM = 103085;
        public const GLuint GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM = 103086;
        public const GLuint GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM = 103087;
        public const GLuint GL_YCRCB_SGIX = 0x8318;
        public const GLuint GL_YCRCBA_SGIX = 0x8319;
        public const GLuint GL_DEPTH_PASS_INSTRUMENT_SGIX = 0x8310;
        public const GLuint GL_DEPTH_PASS_INSTRUMENT_COUNTERS_SGIX = 0x8311;
        public const GLuint GL_DEPTH_PASS_INSTRUMENT_MAX_SGIX = 0x8312;
        public const GLuint GL_COMPRESSED_RGB_FXT1_3DFX = 0x86B0;
        public const GLuint GL_COMPRESSED_RGBA_FXT1_3DFX = 0x86B1;
        public const GLuint GL_MULTISAMPLE_3DFX = 0x86B2;
        public const GLuint GL_SAMPLE_BUFFERS_3DFX = 0x86B3;
        public const GLuint GL_SAMPLES_3DFX = 0x86B4;
        public const GLuint GL_MULTISAMPLE_BIT_3DFX = 0x20000000;
        public const GLuint GL_MULTISAMPLE_EXT = 0x809D;
        public const GLuint GL_SAMPLE_ALPHA_TO_MASK_EXT = 0x809E;
        public const GLuint GL_SAMPLE_ALPHA_TO_ONE_EXT = 0x809F;
        public const GLuint GL_SAMPLE_MASK_EXT = 0x80A0;
        public const GLuint GL_1PASS_EXT = 0x80A1;
        public const GLuint GL_2PASS_0_EXT = 0x80A2;
        public const GLuint GL_2PASS_1_EXT = 0x80A3;
        public const GLuint GL_4PASS_0_EXT = 0x80A4;
        public const GLuint GL_4PASS_1_EXT = 0x80A5;
        public const GLuint GL_4PASS_2_EXT = 0x80A6;
        public const GLuint GL_4PASS_3_EXT = 0x80A7;
        public const GLuint GL_SAMPLE_BUFFERS_EXT = 0x80A8;
        public const GLuint GL_SAMPLES_EXT = 0x80A9;
        public const GLuint GL_SAMPLE_MASK_VALUE_EXT = 0x80AA;
        public const GLuint GL_SAMPLE_MASK_INVERT_EXT = 0x80AB;
        public const GLuint GL_SAMPLE_PATTERN_EXT = 0x80AC;
        public const GLuint GL_MULTISAMPLE_BIT_EXT = 0x20000000;
        public const GLuint GL_DOT3_RGB_EXT = 0x8740;
        public const GLuint GL_DOT3_RGBA_EXT = 0x8741;
        public const GLuint GL_MIRROR_CLAMP_ATI = 0x8742;
        public const GLuint GL_MIRROR_CLAMP_TO_EDGE_ATI = 0x8743;
        public const GLuint GL_ALL_COMPLETED_NV = 0x84F2;
        public const GLuint GL_FENCE_STATUS_NV = 0x84F3;
        public const GLuint GL_FENCE_CONDITION_NV = 0x84F4;
        public const GLuint GL_MIRRORED_REPEAT_IBM = 0x8370;
        public const GLuint GL_EVAL_2D_NV = 0x86C0;
        public const GLuint GL_EVAL_TRIANGULAR_2D_NV = 0x86C1;
        public const GLuint GL_MAP_TESSELLATION_NV = 0x86C2;
        public const GLuint GL_MAP_ATTRIB_U_ORDER_NV = 0x86C3;
        public const GLuint GL_MAP_ATTRIB_V_ORDER_NV = 0x86C4;
        public const GLuint GL_EVAL_FRACTIONAL_TESSELLATION_NV = 0x86C5;
        public const GLuint GL_EVAL_VERTEX_ATTRIB0_NV = 0x86C6;
        public const GLuint GL_EVAL_VERTEX_ATTRIB1_NV = 0x86C7;
        public const GLuint GL_EVAL_VERTEX_ATTRIB2_NV = 0x86C8;
        public const GLuint GL_EVAL_VERTEX_ATTRIB3_NV = 0x86C9;
        public const GLuint GL_EVAL_VERTEX_ATTRIB4_NV = 0x86CA;
        public const GLuint GL_EVAL_VERTEX_ATTRIB5_NV = 0x86CB;
        public const GLuint GL_EVAL_VERTEX_ATTRIB6_NV = 0x86CC;
        public const GLuint GL_EVAL_VERTEX_ATTRIB7_NV = 0x86CD;
        public const GLuint GL_EVAL_VERTEX_ATTRIB8_NV = 0x86CE;
        public const GLuint GL_EVAL_VERTEX_ATTRIB9_NV = 0x86CF;
        public const GLuint GL_EVAL_VERTEX_ATTRIB10_NV = 0x86D0;
        public const GLuint GL_EVAL_VERTEX_ATTRIB11_NV = 0x86D1;
        public const GLuint GL_EVAL_VERTEX_ATTRIB12_NV = 0x86D2;
        public const GLuint GL_EVAL_VERTEX_ATTRIB13_NV = 0x86D3;
        public const GLuint GL_EVAL_VERTEX_ATTRIB14_NV = 0x86D4;
        public const GLuint GL_EVAL_VERTEX_ATTRIB15_NV = 0x86D5;
        public const GLuint GL_MAX_MAP_TESSELLATION_NV = 0x86D6;
        public const GLuint GL_MAX_RATIONAL_EVAL_ORDER_NV = 0x86D7;
        public const GLuint GL_DEPTH_STENCIL_NV = 0x84F9;
        public const GLuint GL_UNSIGNED_INT_24_8_NV = 0x84FA;
        public const GLuint GL_PER_STAGE_CONSTANTS_NV = 0x8535;
        public const GLuint GL_TEXTURE_RECTANGLE_NV = 0x84F5;
        public const GLuint GL_TEXTURE_BINDING_RECTANGLE_NV = 0x84F6;
        public const GLuint GL_PROXY_TEXTURE_RECTANGLE_NV = 0x84F7;
        public const GLuint GL_MAX_RECTANGLE_TEXTURE_SIZE_NV = 0x84F8;
        public const GLuint GL_OFFSET_TEXTURE_RECTANGLE_NV = 0x864C;
        public const GLuint GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV = 0x864D;
        public const GLuint GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV = 0x864E;
        public const GLuint GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV = 0x86D9;
        public const GLuint GL_UNSIGNED_INT_S8_S8_8_8_NV = 0x86DA;
        public const GLuint GL_UNSIGNED_INT_8_8_S8_S8_REV_NV = 0x86DB;
        public const GLuint GL_DSDT_MAG_INTENSITY_NV = 0x86DC;
        public const GLuint GL_SHADER_CONSISTENT_NV = 0x86DD;
        public const GLuint GL_TEXTURE_SHADER_NV = 0x86DE;
        public const GLuint GL_SHADER_OPERATION_NV = 0x86DF;
        public const GLuint GL_CULL_MODES_NV = 0x86E0;
        public const GLuint GL_OFFSET_TEXTURE_MATRIX_NV = 0x86E1;
        public const GLuint GL_OFFSET_TEXTURE_SCALE_NV = 0x86E2;
        public const GLuint GL_OFFSET_TEXTURE_BIAS_NV = 0x86E3;
        public const GLuint GL_OFFSET_TEXTURE_2D_MATRIX_NV = GL_OFFSET_TEXTURE_MATRIX_NV;
        public const GLuint GL_OFFSET_TEXTURE_2D_SCALE_NV = GL_OFFSET_TEXTURE_SCALE_NV;
        public const GLuint GL_OFFSET_TEXTURE_2D_BIAS_NV = GL_OFFSET_TEXTURE_BIAS_NV;
        public const GLuint GL_PREVIOUS_TEXTURE_INPUT_NV = 0x86E4;
        public const GLuint GL_CONST_EYE_NV = 0x86E5;
        public const GLuint GL_PASS_THROUGH_NV = 0x86E6;
        public const GLuint GL_CULL_FRAGMENT_NV = 0x86E7;
        public const GLuint GL_OFFSET_TEXTURE_2D_NV = 0x86E8;
        public const GLuint GL_DEPENDENT_AR_TEXTURE_2D_NV = 0x86E9;
        public const GLuint GL_DEPENDENT_GB_TEXTURE_2D_NV = 0x86EA;
        public const GLuint GL_DOT_PRODUCT_NV = 0x86EC;
        public const GLuint GL_DOT_PRODUCT_DEPTH_REPLACE_NV = 0x86ED;
        public const GLuint GL_DOT_PRODUCT_TEXTURE_2D_NV = 0x86EE;
        public const GLuint GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV = 0x86F0;
        public const GLuint GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV = 0x86F1;
        public const GLuint GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV = 0x86F2;
        public const GLuint GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV = 0x86F3;
        public const GLuint GL_HILO_NV = 0x86F4;
        public const GLuint GL_DSDT_NV = 0x86F5;
        public const GLuint GL_DSDT_MAG_NV = 0x86F6;
        public const GLuint GL_DSDT_MAG_VIB_NV = 0x86F7;
        public const GLuint GL_HILO16_NV = 0x86F8;
        public const GLuint GL_SIGNED_HILO_NV = 0x86F9;
        public const GLuint GL_SIGNED_HILO16_NV = 0x86FA;
        public const GLuint GL_SIGNED_RGBA_NV = 0x86FB;
        public const GLuint GL_SIGNED_RGBA8_NV = 0x86FC;
        public const GLuint GL_SIGNED_RGB_NV = 0x86FE;
        public const GLuint GL_SIGNED_RGB8_NV = 0x86FF;
        public const GLuint GL_SIGNED_LUMINANCE_NV = 0x8701;
        public const GLuint GL_SIGNED_LUMINANCE8_NV = 0x8702;
        public const GLuint GL_SIGNED_LUMINANCE_ALPHA_NV = 0x8703;
        public const GLuint GL_SIGNED_LUMINANCE8_ALPHA8_NV = 0x8704;
        public const GLuint GL_SIGNED_ALPHA_NV = 0x8705;
        public const GLuint GL_SIGNED_ALPHA8_NV = 0x8706;
        public const GLuint GL_SIGNED_INTENSITY_NV = 0x8707;
        public const GLuint GL_SIGNED_INTENSITY8_NV = 0x8708;
        public const GLuint GL_DSDT8_NV = 0x8709;
        public const GLuint GL_DSDT8_MAG8_NV = 0x870A;
        public const GLuint GL_DSDT8_MAG8_INTENSITY8_NV = 0x870B;
        public const GLuint GL_SIGNED_RGB_UNSIGNED_ALPHA_NV = 0x870C;
        public const GLuint GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV = 0x870D;
        public const GLuint GL_HI_SCALE_NV = 0x870E;
        public const GLuint GL_LO_SCALE_NV = 0x870F;
        public const GLuint GL_DS_SCALE_NV = 0x8710;
        public const GLuint GL_DT_SCALE_NV = 0x8711;
        public const GLuint GL_MAGNITUDE_SCALE_NV = 0x8712;
        public const GLuint GL_VIBRANCE_SCALE_NV = 0x8713;
        public const GLuint GL_HI_BIAS_NV = 0x8714;
        public const GLuint GL_LO_BIAS_NV = 0x8715;
        public const GLuint GL_DS_BIAS_NV = 0x8716;
        public const GLuint GL_DT_BIAS_NV = 0x8717;
        public const GLuint GL_MAGNITUDE_BIAS_NV = 0x8718;
        public const GLuint GL_VIBRANCE_BIAS_NV = 0x8719;
        public const GLuint GL_TEXTURE_BORDER_VALUES_NV = 0x871A;
        public const GLuint GL_TEXTURE_HI_SIZE_NV = 0x871B;
        public const GLuint GL_TEXTURE_LO_SIZE_NV = 0x871C;
        public const GLuint GL_TEXTURE_DS_SIZE_NV = 0x871D;
        public const GLuint GL_TEXTURE_DT_SIZE_NV = 0x871E;
        public const GLuint GL_TEXTURE_MAG_SIZE_NV = 0x871F;
        public const GLuint GL_DOT_PRODUCT_TEXTURE_3D_NV = 0x86EF;
        public const GLuint GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV = 0x8533;
        public const GLuint GL_VERTEX_PROGRAM_NV = 0x8620;
        public const GLuint GL_VERTEX_STATE_PROGRAM_NV = 0x8621;
        public const GLuint GL_ATTRIB_ARRAY_SIZE_NV = 0x8623;
        public const GLuint GL_ATTRIB_ARRAY_STRIDE_NV = 0x8624;
        public const GLuint GL_ATTRIB_ARRAY_TYPE_NV = 0x8625;
        public const GLuint GL_CURRENT_ATTRIB_NV = 0x8626;
        public const GLuint GL_PROGRAM_LENGTH_NV = 0x8627;
        public const GLuint GL_PROGRAM_STRING_NV = 0x8628;
        public const GLuint GL_MODELVIEW_PROJECTION_NV = 0x8629;
        public const GLuint GL_IDENTITY_NV = 0x862A;
        public const GLuint GL_INVERSE_NV = 0x862B;
        public const GLuint GL_TRANSPOSE_NV = 0x862C;
        public const GLuint GL_INVERSE_TRANSPOSE_NV = 0x862D;
        public const GLuint GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV = 0x862E;
        public const GLuint GL_MAX_TRACK_MATRICES_NV = 0x862F;
        public const GLuint GL_MATRIX0_NV = 0x8630;
        public const GLuint GL_MATRIX1_NV = 0x8631;
        public const GLuint GL_MATRIX2_NV = 0x8632;
        public const GLuint GL_MATRIX3_NV = 0x8633;
        public const GLuint GL_MATRIX4_NV = 0x8634;
        public const GLuint GL_MATRIX5_NV = 0x8635;
        public const GLuint GL_MATRIX6_NV = 0x8636;
        public const GLuint GL_MATRIX7_NV = 0x8637;
        public const GLuint GL_CURRENT_MATRIX_STACK_DEPTH_NV = 0x8640;
        public const GLuint GL_CURRENT_MATRIX_NV = 0x8641;
        public const GLuint GL_VERTEX_PROGRAM_POINT_SIZE_NV = 0x8642;
        public const GLuint GL_VERTEX_PROGRAM_TWO_SIDE_NV = 0x8643;
        public const GLuint GL_PROGRAM_PARAMETER_NV = 0x8644;
        public const GLuint GL_ATTRIB_ARRAY_POINTER_NV = 0x8645;
        public const GLuint GL_PROGRAM_TARGET_NV = 0x8646;
        public const GLuint GL_PROGRAM_RESIDENT_NV = 0x8647;
        public const GLuint GL_TRACK_MATRIX_NV = 0x8648;
        public const GLuint GL_TRACK_MATRIX_TRANSFORM_NV = 0x8649;
        public const GLuint GL_VERTEX_PROGRAM_BINDING_NV = 0x864A;
        public const GLuint GL_PROGRAM_ERROR_POSITION_NV = 0x864B;
        public const GLuint GL_VERTEX_ATTRIB_ARRAY0_NV = 0x8650;
        public const GLuint GL_VERTEX_ATTRIB_ARRAY1_NV = 0x8651;
        public const GLuint GL_VERTEX_ATTRIB_ARRAY2_NV = 0x8652;
        public const GLuint GL_VERTEX_ATTRIB_ARRAY3_NV = 0x8653;
        public const GLuint GL_VERTEX_ATTRIB_ARRAY4_NV = 0x8654;
        public const GLuint GL_VERTEX_ATTRIB_ARRAY5_NV = 0x8655;
        public const GLuint GL_VERTEX_ATTRIB_ARRAY6_NV = 0x8656;
        public const GLuint GL_VERTEX_ATTRIB_ARRAY7_NV = 0x8657;
        public const GLuint GL_VERTEX_ATTRIB_ARRAY8_NV = 0x8658;
        public const GLuint GL_VERTEX_ATTRIB_ARRAY9_NV = 0x8659;
        public const GLuint GL_VERTEX_ATTRIB_ARRAY10_NV = 0x865A;
        public const GLuint GL_VERTEX_ATTRIB_ARRAY11_NV = 0x865B;
        public const GLuint GL_VERTEX_ATTRIB_ARRAY12_NV = 0x865C;
        public const GLuint GL_VERTEX_ATTRIB_ARRAY13_NV = 0x865D;
        public const GLuint GL_VERTEX_ATTRIB_ARRAY14_NV = 0x865E;
        public const GLuint GL_VERTEX_ATTRIB_ARRAY15_NV = 0x865F;
        public const GLuint GL_MAP1_VERTEX_ATTRIB0_4_NV = 0x8660;
        public const GLuint GL_MAP1_VERTEX_ATTRIB1_4_NV = 0x8661;
        public const GLuint GL_MAP1_VERTEX_ATTRIB2_4_NV = 0x8662;
        public const GLuint GL_MAP1_VERTEX_ATTRIB3_4_NV = 0x8663;
        public const GLuint GL_MAP1_VERTEX_ATTRIB4_4_NV = 0x8664;
        public const GLuint GL_MAP1_VERTEX_ATTRIB5_4_NV = 0x8665;
        public const GLuint GL_MAP1_VERTEX_ATTRIB6_4_NV = 0x8666;
        public const GLuint GL_MAP1_VERTEX_ATTRIB7_4_NV = 0x8667;
        public const GLuint GL_MAP1_VERTEX_ATTRIB8_4_NV = 0x8668;
        public const GLuint GL_MAP1_VERTEX_ATTRIB9_4_NV = 0x8669;
        public const GLuint GL_MAP1_VERTEX_ATTRIB10_4_NV = 0x866A;
        public const GLuint GL_MAP1_VERTEX_ATTRIB11_4_NV = 0x866B;
        public const GLuint GL_MAP1_VERTEX_ATTRIB12_4_NV = 0x866C;
        public const GLuint GL_MAP1_VERTEX_ATTRIB13_4_NV = 0x866D;
        public const GLuint GL_MAP1_VERTEX_ATTRIB14_4_NV = 0x866E;
        public const GLuint GL_MAP1_VERTEX_ATTRIB15_4_NV = 0x866F;
        public const GLuint GL_MAP2_VERTEX_ATTRIB0_4_NV = 0x8670;
        public const GLuint GL_MAP2_VERTEX_ATTRIB1_4_NV = 0x8671;
        public const GLuint GL_MAP2_VERTEX_ATTRIB2_4_NV = 0x8672;
        public const GLuint GL_MAP2_VERTEX_ATTRIB3_4_NV = 0x8673;
        public const GLuint GL_MAP2_VERTEX_ATTRIB4_4_NV = 0x8674;
        public const GLuint GL_MAP2_VERTEX_ATTRIB5_4_NV = 0x8675;
        public const GLuint GL_MAP2_VERTEX_ATTRIB6_4_NV = 0x8676;
        public const GLuint GL_MAP2_VERTEX_ATTRIB7_4_NV = 0x8677;
        public const GLuint GL_MAP2_VERTEX_ATTRIB8_4_NV = 0x8678;
        public const GLuint GL_MAP2_VERTEX_ATTRIB9_4_NV = 0x8679;
        public const GLuint GL_MAP2_VERTEX_ATTRIB10_4_NV = 0x867A;
        public const GLuint GL_MAP2_VERTEX_ATTRIB11_4_NV = 0x867B;
        public const GLuint GL_MAP2_VERTEX_ATTRIB12_4_NV = 0x867C;
        public const GLuint GL_MAP2_VERTEX_ATTRIB13_4_NV = 0x867D;
        public const GLuint GL_MAP2_VERTEX_ATTRIB14_4_NV = 0x867E;
        public const GLuint GL_MAP2_VERTEX_ATTRIB15_4_NV = 0x867F;
        public const GLuint GL_SCALEBIAS_HINT_SGIX = 0x8322;
        public const GLuint GL_INTERLACE_OML = 0x8980;
        public const GLuint GL_INTERLACE_READ_OML = 0x8981;
        public const GLuint GL_FORMAT_SUBSAMPLE_24_24_OML = 0x8982;
        public const GLuint GL_FORMAT_SUBSAMPLE_244_244_OML = 0x8983;
        public const GLuint GL_PACK_RESAMPLE_OML = 0x8984;
        public const GLuint GL_UNPACK_RESAMPLE_OML = 0x8985;
        public const GLuint GL_RESAMPLE_REPLICATE_OML = 0x8986;
        public const GLuint GL_RESAMPLE_ZERO_FILL_OML = 0x8987;
        public const GLuint GL_RESAMPLE_AVERAGE_OML = 0x8988;
        public const GLuint GL_RESAMPLE_DECIMATE_OML = 0x8989;
        public const GLuint GL_DEPTH_STENCIL_TO_RGBA_NV = 0x886E;
        public const GLuint GL_DEPTH_STENCIL_TO_BGRA_NV = 0x886F;
        public const GLuint GL_BUMP_ROT_MATRIX_ATI = 0x8775;
        public const GLuint GL_BUMP_ROT_MATRIX_SIZE_ATI = 0x8776;
        public const GLuint GL_BUMP_NUM_TEX_UNITS_ATI = 0x8777;
        public const GLuint GL_BUMP_TEX_UNITS_ATI = 0x8778;
        public const GLuint GL_DUDV_ATI = 0x8779;
        public const GLuint GL_DU8DV8_ATI = 0x877A;
        public const GLuint GL_BUMP_ENVMAP_ATI = 0x877B;
        public const GLuint GL_BUMP_TARGET_ATI = 0x877C;
        public const GLuint GL_FRAGMENT_SHADER_ATI = 0x8920;
        public const GLuint GL_REG_0_ATI = 0x8921;
        public const GLuint GL_REG_1_ATI = 0x8922;
        public const GLuint GL_REG_2_ATI = 0x8923;
        public const GLuint GL_REG_3_ATI = 0x8924;
        public const GLuint GL_REG_4_ATI = 0x8925;
        public const GLuint GL_REG_5_ATI = 0x8926;
        public const GLuint GL_REG_6_ATI = 0x8927;
        public const GLuint GL_REG_7_ATI = 0x8928;
        public const GLuint GL_REG_8_ATI = 0x8929;
        public const GLuint GL_REG_9_ATI = 0x892A;
        public const GLuint GL_REG_10_ATI = 0x892B;
        public const GLuint GL_REG_11_ATI = 0x892C;
        public const GLuint GL_REG_12_ATI = 0x892D;
        public const GLuint GL_REG_13_ATI = 0x892E;
        public const GLuint GL_REG_14_ATI = 0x892F;
        public const GLuint GL_REG_15_ATI = 0x8930;
        public const GLuint GL_REG_16_ATI = 0x8931;
        public const GLuint GL_REG_17_ATI = 0x8932;
        public const GLuint GL_REG_18_ATI = 0x8933;
        public const GLuint GL_REG_19_ATI = 0x8934;
        public const GLuint GL_REG_20_ATI = 0x8935;
        public const GLuint GL_REG_21_ATI = 0x8936;
        public const GLuint GL_REG_22_ATI = 0x8937;
        public const GLuint GL_REG_23_ATI = 0x8938;
        public const GLuint GL_REG_24_ATI = 0x8939;
        public const GLuint GL_REG_25_ATI = 0x893A;
        public const GLuint GL_REG_26_ATI = 0x893B;
        public const GLuint GL_REG_27_ATI = 0x893C;
        public const GLuint GL_REG_28_ATI = 0x893D;
        public const GLuint GL_REG_29_ATI = 0x893E;
        public const GLuint GL_REG_30_ATI = 0x893F;
        public const GLuint GL_REG_31_ATI = 0x8940;
        public const GLuint GL_CON_0_ATI = 0x8941;
        public const GLuint GL_CON_1_ATI = 0x8942;
        public const GLuint GL_CON_2_ATI = 0x8943;
        public const GLuint GL_CON_3_ATI = 0x8944;
        public const GLuint GL_CON_4_ATI = 0x8945;
        public const GLuint GL_CON_5_ATI = 0x8946;
        public const GLuint GL_CON_6_ATI = 0x8947;
        public const GLuint GL_CON_7_ATI = 0x8948;
        public const GLuint GL_CON_8_ATI = 0x8949;
        public const GLuint GL_CON_9_ATI = 0x894A;
        public const GLuint GL_CON_10_ATI = 0x894B;
        public const GLuint GL_CON_11_ATI = 0x894C;
        public const GLuint GL_CON_12_ATI = 0x894D;
        public const GLuint GL_CON_13_ATI = 0x894E;
        public const GLuint GL_CON_14_ATI = 0x894F;
        public const GLuint GL_CON_15_ATI = 0x8950;
        public const GLuint GL_CON_16_ATI = 0x8951;
        public const GLuint GL_CON_17_ATI = 0x8952;
        public const GLuint GL_CON_18_ATI = 0x8953;
        public const GLuint GL_CON_19_ATI = 0x8954;
        public const GLuint GL_CON_20_ATI = 0x8955;
        public const GLuint GL_CON_21_ATI = 0x8956;
        public const GLuint GL_CON_22_ATI = 0x8957;
        public const GLuint GL_CON_23_ATI = 0x8958;
        public const GLuint GL_CON_24_ATI = 0x8959;
        public const GLuint GL_CON_25_ATI = 0x895A;
        public const GLuint GL_CON_26_ATI = 0x895B;
        public const GLuint GL_CON_27_ATI = 0x895C;
        public const GLuint GL_CON_28_ATI = 0x895D;
        public const GLuint GL_CON_29_ATI = 0x895E;
        public const GLuint GL_CON_30_ATI = 0x895F;
        public const GLuint GL_CON_31_ATI = 0x8960;
        public const GLuint GL_MOV_ATI = 0x8961;
        public const GLuint GL_ADD_ATI = 0x8963;
        public const GLuint GL_MUL_ATI = 0x8964;
        public const GLuint GL_SUB_ATI = 0x8965;
        public const GLuint GL_DOT3_ATI = 0x8966;
        public const GLuint GL_DOT4_ATI = 0x8967;
        public const GLuint GL_MAD_ATI = 0x8968;
        public const GLuint GL_LERP_ATI = 0x8969;
        public const GLuint GL_CND_ATI = 0x896A;
        public const GLuint GL_CND0_ATI = 0x896B;
        public const GLuint GL_DOT2_ADD_ATI = 0x896C;
        public const GLuint GL_SECONDARY_INTERPOLATOR_ATI = 0x896D;
        public const GLuint GL_NUM_FRAGMENT_REGISTERS_ATI = 0x896E;
        public const GLuint GL_NUM_FRAGMENT_CONSTANTS_ATI = 0x896F;
        public const GLuint GL_NUM_PASSES_ATI = 0x8970;
        public const GLuint GL_NUM_INSTRUCTIONS_PER_PASS_ATI = 0x8971;
        public const GLuint GL_NUM_INSTRUCTIONS_TOTAL_ATI = 0x8972;
        public const GLuint GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI = 0x8973;
        public const GLuint GL_NUM_LOOPBACK_COMPONENTS_ATI = 0x8974;
        public const GLuint GL_COLOR_ALPHA_PAIRING_ATI = 0x8975;
        public const GLuint GL_SWIZZLE_STR_ATI = 0x8976;
        public const GLuint GL_SWIZZLE_STQ_ATI = 0x8977;
        public const GLuint GL_SWIZZLE_STR_DR_ATI = 0x8978;
        public const GLuint GL_SWIZZLE_STQ_DQ_ATI = 0x8979;
        public const GLuint GL_SWIZZLE_STRQ_ATI = 0x897A;
        public const GLuint GL_SWIZZLE_STRQ_DQ_ATI = 0x897B;
        public const GLuint GL_RED_BIT_ATI = 0x00000001;
        public const GLuint GL_GREEN_BIT_ATI = 0x00000002;
        public const GLuint GL_BLUE_BIT_ATI = 0x00000004;
        public const GLuint GL_2X_BIT_ATI = 0x00000001;
        public const GLuint GL_4X_BIT_ATI = 0x00000002;
        public const GLuint GL_8X_BIT_ATI = 0x00000004;
        public const GLuint GL_HALF_BIT_ATI = 0x00000008;
        public const GLuint GL_QUARTER_BIT_ATI = 0x00000010;
        public const GLuint GL_EIGHTH_BIT_ATI = 0x00000020;
        public const GLuint GL_SATURATE_BIT_ATI = 0x00000040;
        public const GLuint GL_COMP_BIT_ATI = 0x00000002;
        public const GLuint GL_NEGATE_BIT_ATI = 0x00000004;
        public const GLuint GL_BIAS_BIT_ATI = 0x00000008;
        public const GLuint GL_PN_TRIANGLES_ATI = 0x87F0;
        public const GLuint GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI = 0x87F1;
        public const GLuint GL_PN_TRIANGLES_POINT_MODE_ATI = 0x87F2;
        public const GLuint GL_PN_TRIANGLES_NORMAL_MODE_ATI = 0x87F3;
        public const GLuint GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI = 0x87F4;
        public const GLuint GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI = 0x87F5;
        public const GLuint GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI = 0x87F6;
        public const GLuint GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI = 0x87F7;
        public const GLuint GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI = 0x87F8;
        public const GLuint GL_STATIC_ATI = 0x8760;
        public const GLuint GL_DYNAMIC_ATI = 0x8761;
        public const GLuint GL_PRESERVE_ATI = 0x8762;
        public const GLuint GL_DISCARD_ATI = 0x8763;
        public const GLuint GL_OBJECT_BUFFER_SIZE_ATI = 0x8764;
        public const GLuint GL_OBJECT_BUFFER_USAGE_ATI = 0x8765;
        public const GLuint GL_ARRAY_OBJECT_BUFFER_ATI = 0x8766;
        public const GLuint GL_ARRAY_OBJECT_OFFSET_ATI = 0x8767;
        public const GLuint GL_VERTEX_SHADER_EXT = 0x8780;
        public const GLuint GL_VERTEX_SHADER_BINDING_EXT = 0x8781;
        public const GLuint GL_OP_INDEX_EXT = 0x8782;
        public const GLuint GL_OP_NEGATE_EXT = 0x8783;
        public const GLuint GL_OP_DOT3_EXT = 0x8784;
        public const GLuint GL_OP_DOT4_EXT = 0x8785;
        public const GLuint GL_OP_MUL_EXT = 0x8786;
        public const GLuint GL_OP_ADD_EXT = 0x8787;
        public const GLuint GL_OP_MADD_EXT = 0x8788;
        public const GLuint GL_OP_FRAC_EXT = 0x8789;
        public const GLuint GL_OP_MAX_EXT = 0x878A;
        public const GLuint GL_OP_MIN_EXT = 0x878B;
        public const GLuint GL_OP_SET_GE_EXT = 0x878C;
        public const GLuint GL_OP_SET_LT_EXT = 0x878D;
        public const GLuint GL_OP_CLAMP_EXT = 0x878E;
        public const GLuint GL_OP_FLOOR_EXT = 0x878F;
        public const GLuint GL_OP_ROUND_EXT = 0x8790;
        public const GLuint GL_OP_EXP_BASE_2_EXT = 0x8791;
        public const GLuint GL_OP_LOG_BASE_2_EXT = 0x8792;
        public const GLuint GL_OP_POWER_EXT = 0x8793;
        public const GLuint GL_OP_RECIP_EXT = 0x8794;
        public const GLuint GL_OP_RECIP_SQRT_EXT = 0x8795;
        public const GLuint GL_OP_SUB_EXT = 0x8796;
        public const GLuint GL_OP_CROSS_PRODUCT_EXT = 0x8797;
        public const GLuint GL_OP_MULTIPLY_MATRIX_EXT = 0x8798;
        public const GLuint GL_OP_MOV_EXT = 0x8799;
        public const GLuint GL_OUTPUT_VERTEX_EXT = 0x879A;
        public const GLuint GL_OUTPUT_COLOR0_EXT = 0x879B;
        public const GLuint GL_OUTPUT_COLOR1_EXT = 0x879C;
        public const GLuint GL_OUTPUT_TEXTURE_COORD0_EXT = 0x879D;
        public const GLuint GL_OUTPUT_TEXTURE_COORD1_EXT = 0x879E;
        public const GLuint GL_OUTPUT_TEXTURE_COORD2_EXT = 0x879F;
        public const GLuint GL_OUTPUT_TEXTURE_COORD3_EXT = 0x87A0;
        public const GLuint GL_OUTPUT_TEXTURE_COORD4_EXT = 0x87A1;
        public const GLuint GL_OUTPUT_TEXTURE_COORD5_EXT = 0x87A2;
        public const GLuint GL_OUTPUT_TEXTURE_COORD6_EXT = 0x87A3;
        public const GLuint GL_OUTPUT_TEXTURE_COORD7_EXT = 0x87A4;
        public const GLuint GL_OUTPUT_TEXTURE_COORD8_EXT = 0x87A5;
        public const GLuint GL_OUTPUT_TEXTURE_COORD9_EXT = 0x87A6;
        public const GLuint GL_OUTPUT_TEXTURE_COORD10_EXT = 0x87A7;
        public const GLuint GL_OUTPUT_TEXTURE_COORD11_EXT = 0x87A8;
        public const GLuint GL_OUTPUT_TEXTURE_COORD12_EXT = 0x87A9;
        public const GLuint GL_OUTPUT_TEXTURE_COORD13_EXT = 0x87AA;
        public const GLuint GL_OUTPUT_TEXTURE_COORD14_EXT = 0x87AB;
        public const GLuint GL_OUTPUT_TEXTURE_COORD15_EXT = 0x87AC;
        public const GLuint GL_OUTPUT_TEXTURE_COORD16_EXT = 0x87AD;
        public const GLuint GL_OUTPUT_TEXTURE_COORD17_EXT = 0x87AE;
        public const GLuint GL_OUTPUT_TEXTURE_COORD18_EXT = 0x87AF;
        public const GLuint GL_OUTPUT_TEXTURE_COORD19_EXT = 0x87B0;
        public const GLuint GL_OUTPUT_TEXTURE_COORD20_EXT = 0x87B1;
        public const GLuint GL_OUTPUT_TEXTURE_COORD21_EXT = 0x87B2;
        public const GLuint GL_OUTPUT_TEXTURE_COORD22_EXT = 0x87B3;
        public const GLuint GL_OUTPUT_TEXTURE_COORD23_EXT = 0x87B4;
        public const GLuint GL_OUTPUT_TEXTURE_COORD24_EXT = 0x87B5;
        public const GLuint GL_OUTPUT_TEXTURE_COORD25_EXT = 0x87B6;
        public const GLuint GL_OUTPUT_TEXTURE_COORD26_EXT = 0x87B7;
        public const GLuint GL_OUTPUT_TEXTURE_COORD27_EXT = 0x87B8;
        public const GLuint GL_OUTPUT_TEXTURE_COORD28_EXT = 0x87B9;
        public const GLuint GL_OUTPUT_TEXTURE_COORD29_EXT = 0x87BA;
        public const GLuint GL_OUTPUT_TEXTURE_COORD30_EXT = 0x87BB;
        public const GLuint GL_OUTPUT_TEXTURE_COORD31_EXT = 0x87BC;
        public const GLuint GL_OUTPUT_FOG_EXT = 0x87BD;
        public const GLuint GL_SCALAR_EXT = 0x87BE;
        public const GLuint GL_VECTOR_EXT = 0x87BF;
        public const GLuint GL_MATRIX_EXT = 0x87C0;
        public const GLuint GL_VARIANT_EXT = 0x87C1;
        public const GLuint GL_INVARIANT_EXT = 0x87C2;
        public const GLuint GL_LOCAL_CONSTANT_EXT = 0x87C3;
        public const GLuint GL_LOCAL_EXT = 0x87C4;
        public const GLuint GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT = 0x87C5;
        public const GLuint GL_MAX_VERTEX_SHADER_VARIANTS_EXT = 0x87C6;
        public const GLuint GL_MAX_VERTEX_SHADER_INVARIANTS_EXT = 0x87C7;
        public const GLuint GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 0x87C8;
        public const GLuint GL_MAX_VERTEX_SHADER_LOCALS_EXT = 0x87C9;
        public const GLuint GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT = 0x87CA;
        public const GLuint GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT = 0x87CB;
        public const GLuint GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 0x87CC;
        public const GLuint GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT = 0x87CD;
        public const GLuint GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT = 0x87CE;
        public const GLuint GL_VERTEX_SHADER_INSTRUCTIONS_EXT = 0x87CF;
        public const GLuint GL_VERTEX_SHADER_VARIANTS_EXT = 0x87D0;
        public const GLuint GL_VERTEX_SHADER_INVARIANTS_EXT = 0x87D1;
        public const GLuint GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 0x87D2;
        public const GLuint GL_VERTEX_SHADER_LOCALS_EXT = 0x87D3;
        public const GLuint GL_VERTEX_SHADER_OPTIMIZED_EXT = 0x87D4;
        public const GLuint GL_X_EXT = 0x87D5;
        public const GLuint GL_Y_EXT = 0x87D6;
        public const GLuint GL_Z_EXT = 0x87D7;
        public const GLuint GL_W_EXT = 0x87D8;
        public const GLuint GL_NEGATIVE_X_EXT = 0x87D9;
        public const GLuint GL_NEGATIVE_Y_EXT = 0x87DA;
        public const GLuint GL_NEGATIVE_Z_EXT = 0x87DB;
        public const GLuint GL_NEGATIVE_W_EXT = 0x87DC;
        public const GLuint GL_ZERO_EXT = 0x87DD;
        public const GLuint GL_ONE_EXT = 0x87DE;
        public const GLuint GL_NEGATIVE_ONE_EXT = 0x87DF;
        public const GLuint GL_NORMALIZED_RANGE_EXT = 0x87E0;
        public const GLuint GL_FULL_RANGE_EXT = 0x87E1;
        public const GLuint GL_CURRENT_VERTEX_EXT = 0x87E2;
        public const GLuint GL_MVP_MATRIX_EXT = 0x87E3;
        public const GLuint GL_VARIANT_VALUE_EXT = 0x87E4;
        public const GLuint GL_VARIANT_DATATYPE_EXT = 0x87E5;
        public const GLuint GL_VARIANT_ARRAY_STRIDE_EXT = 0x87E6;
        public const GLuint GL_VARIANT_ARRAY_TYPE_EXT = 0x87E7;
        public const GLuint GL_VARIANT_ARRAY_EXT = 0x87E8;
        public const GLuint GL_VARIANT_ARRAY_POINTER_EXT = 0x87E9;
        public const GLuint GL_INVARIANT_VALUE_EXT = 0x87EA;
        public const GLuint GL_INVARIANT_DATATYPE_EXT = 0x87EB;
        public const GLuint GL_LOCAL_CONSTANT_VALUE_EXT = 0x87EC;
        public const GLuint GL_LOCAL_CONSTANT_DATATYPE_EXT = 0x87ED;
        public const GLuint GL_MAX_VERTEX_STREAMS_ATI = 0x876B;
        public const GLuint GL_VERTEX_STREAM0_ATI = 0x876C;
        public const GLuint GL_VERTEX_STREAM1_ATI = 0x876D;
        public const GLuint GL_VERTEX_STREAM2_ATI = 0x876E;
        public const GLuint GL_VERTEX_STREAM3_ATI = 0x876F;
        public const GLuint GL_VERTEX_STREAM4_ATI = 0x8770;
        public const GLuint GL_VERTEX_STREAM5_ATI = 0x8771;
        public const GLuint GL_VERTEX_STREAM6_ATI = 0x8772;
        public const GLuint GL_VERTEX_STREAM7_ATI = 0x8773;
        public const GLuint GL_VERTEX_SOURCE_ATI = 0x8774;
        public const GLuint GL_ELEMENT_ARRAY_ATI = 0x8768;
        public const GLuint GL_ELEMENT_ARRAY_TYPE_ATI = 0x8769;
        public const GLuint GL_ELEMENT_ARRAY_POINTER_ATI = 0x876A;
        public const GLuint GL_QUAD_MESH_SUN = 0x8614;
        public const GLuint GL_TRIANGLE_MESH_SUN = 0x8615;
        public const GLuint GL_SLICE_ACCUM_SUN = 0x85CC;
        public const GLuint GL_MULTISAMPLE_FILTER_HINT_NV = 0x8534;
        public const GLuint GL_DEPTH_CLAMP_NV = 0x864F;
        public const GLuint GL_PIXEL_COUNTER_BITS_NV = 0x8864;
        public const GLuint GL_CURRENT_OCCLUSION_QUERY_ID_NV = 0x8865;
        public const GLuint GL_PIXEL_COUNT_NV = 0x8866;
        public const GLuint GL_PIXEL_COUNT_AVAILABLE_NV = 0x8867;
        public const GLuint GL_POINT_SPRITE_NV = 0x8861;
        public const GLuint GL_COORD_REPLACE_NV = 0x8862;
        public const GLuint GL_POINT_SPRITE_R_MODE_NV = 0x8863;
        public const GLuint GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV = 0x8850;
        public const GLuint GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV = 0x8851;
        public const GLuint GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV = 0x8852;
        public const GLuint GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV = 0x8853;
        public const GLuint GL_OFFSET_HILO_TEXTURE_2D_NV = 0x8854;
        public const GLuint GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV = 0x8855;
        public const GLuint GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV = 0x8856;
        public const GLuint GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV = 0x8857;
        public const GLuint GL_DEPENDENT_HILO_TEXTURE_2D_NV = 0x8858;
        public const GLuint GL_DEPENDENT_RGB_TEXTURE_3D_NV = 0x8859;
        public const GLuint GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV = 0x885A;
        public const GLuint GL_DOT_PRODUCT_PASS_THROUGH_NV = 0x885B;
        public const GLuint GL_DOT_PRODUCT_TEXTURE_1D_NV = 0x885C;
        public const GLuint GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV = 0x885D;
        public const GLuint GL_HILO8_NV = 0x885E;
        public const GLuint GL_SIGNED_HILO8_NV = 0x885F;
        public const GLuint GL_FORCE_BLUE_TO_ONE_NV = 0x8860;
        public const GLuint GL_STENCIL_TEST_TWO_SIDE_EXT = 0x8910;
        public const GLuint GL_ACTIVE_STENCIL_FACE_EXT = 0x8911;
        public const GLuint GL_TEXT_FRAGMENT_SHADER_ATI = 0x8200;
        public const GLuint GL_UNPACK_CLIENT_STORAGE_APPLE = 0x85B2;
        public const GLuint GL_ELEMENT_ARRAY_APPLE = 0x8768;
        public const GLuint GL_ELEMENT_ARRAY_TYPE_APPLE = 0x8769;
        public const GLuint GL_ELEMENT_ARRAY_POINTER_APPLE = 0x876A;
        public const GLuint GL_DRAW_PIXELS_APPLE = 0x8A0A;
        public const GLuint GL_FENCE_APPLE = 0x8A0B;
        public const GLuint GL_VERTEX_ARRAY_BINDING_APPLE = 0x85B5;
        public const GLuint GL_VERTEX_ARRAY_RANGE_APPLE = 0x851D;
        public const GLuint GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE = 0x851E;
        public const GLuint GL_VERTEX_ARRAY_STORAGE_HINT_APPLE = 0x851F;
        public const GLuint GL_VERTEX_ARRAY_RANGE_POINTER_APPLE = 0x8521;
        public const GLuint GL_STORAGE_CACHED_APPLE = 0x85BE;
        public const GLuint GL_STORAGE_SHARED_APPLE = 0x85BF;
        public const GLuint GL_YCBCR_422_APPLE = 0x85B9;
        public const GLuint GL_UNSIGNED_SHORT_8_8_APPLE = 0x85BA;
        public const GLuint GL_UNSIGNED_SHORT_8_8_REV_APPLE = 0x85BB;
        public const GLuint GL_RGB_S3TC = 0x83A0;
        public const GLuint GL_RGB4_S3TC = 0x83A1;
        public const GLuint GL_RGBA_S3TC = 0x83A2;
        public const GLuint GL_RGBA4_S3TC = 0x83A3;
        public const GLuint GL_MAX_DRAW_BUFFERS_ATI = 0x8824;
        public const GLuint GL_DRAW_BUFFER0_ATI = 0x8825;
        public const GLuint GL_DRAW_BUFFER1_ATI = 0x8826;
        public const GLuint GL_DRAW_BUFFER2_ATI = 0x8827;
        public const GLuint GL_DRAW_BUFFER3_ATI = 0x8828;
        public const GLuint GL_DRAW_BUFFER4_ATI = 0x8829;
        public const GLuint GL_DRAW_BUFFER5_ATI = 0x882A;
        public const GLuint GL_DRAW_BUFFER6_ATI = 0x882B;
        public const GLuint GL_DRAW_BUFFER7_ATI = 0x882C;
        public const GLuint GL_DRAW_BUFFER8_ATI = 0x882D;
        public const GLuint GL_DRAW_BUFFER9_ATI = 0x882E;
        public const GLuint GL_DRAW_BUFFER10_ATI = 0x882F;
        public const GLuint GL_DRAW_BUFFER11_ATI = 0x8830;
        public const GLuint GL_DRAW_BUFFER12_ATI = 0x8831;
        public const GLuint GL_DRAW_BUFFER13_ATI = 0x8832;
        public const GLuint GL_DRAW_BUFFER14_ATI = 0x8833;
        public const GLuint GL_DRAW_BUFFER15_ATI = 0x8834;
        public const GLuint GL_TYPE_RGBA_FLOAT_ATI = 0x8820;
        public const GLuint GL_COLOR_CLEAR_UNCLAMPED_VALUE_ATI = 0x8835;
        public const GLuint GL_MODULATE_ADD_ATI = 0x8744;
        public const GLuint GL_MODULATE_SIGNED_ADD_ATI = 0x8745;
        public const GLuint GL_MODULATE_SUBTRACT_ATI = 0x8746;
        public const GLuint GL_RGBA_FLOAT32_ATI = 0x8814;
        public const GLuint GL_RGB_FLOAT32_ATI = 0x8815;
        public const GLuint GL_ALPHA_FLOAT32_ATI = 0x8816;
        public const GLuint GL_INTENSITY_FLOAT32_ATI = 0x8817;
        public const GLuint GL_LUMINANCE_FLOAT32_ATI = 0x8818;
        public const GLuint GL_LUMINANCE_ALPHA_FLOAT32_ATI = 0x8819;
        public const GLuint GL_RGBA_FLOAT16_ATI = 0x881A;
        public const GLuint GL_RGB_FLOAT16_ATI = 0x881B;
        public const GLuint GL_ALPHA_FLOAT16_ATI = 0x881C;
        public const GLuint GL_INTENSITY_FLOAT16_ATI = 0x881D;
        public const GLuint GL_LUMINANCE_FLOAT16_ATI = 0x881E;
        public const GLuint GL_LUMINANCE_ALPHA_FLOAT16_ATI = 0x881F;
        public const GLuint GL_FLOAT_R_NV = 0x8880;
        public const GLuint GL_FLOAT_RG_NV = 0x8881;
        public const GLuint GL_FLOAT_RGB_NV = 0x8882;
        public const GLuint GL_FLOAT_RGBA_NV = 0x8883;
        public const GLuint GL_FLOAT_R16_NV = 0x8884;
        public const GLuint GL_FLOAT_R32_NV = 0x8885;
        public const GLuint GL_FLOAT_RG16_NV = 0x8886;
        public const GLuint GL_FLOAT_RG32_NV = 0x8887;
        public const GLuint GL_FLOAT_RGB16_NV = 0x8888;
        public const GLuint GL_FLOAT_RGB32_NV = 0x8889;
        public const GLuint GL_FLOAT_RGBA16_NV = 0x888A;
        public const GLuint GL_FLOAT_RGBA32_NV = 0x888B;
        public const GLuint GL_TEXTURE_FLOAT_COMPONENTS_NV = 0x888C;
        public const GLuint GL_FLOAT_CLEAR_COLOR_VALUE_NV = 0x888D;
        public const GLuint GL_FLOAT_RGBA_MODE_NV = 0x888E;
        public const GLuint GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV = 0x8868;
        public const GLuint GL_FRAGMENT_PROGRAM_NV = 0x8870;
        public const GLuint GL_MAX_TEXTURE_COORDS_NV = 0x8871;
        public const GLuint GL_MAX_TEXTURE_IMAGE_UNITS_NV = 0x8872;
        public const GLuint GL_FRAGMENT_PROGRAM_BINDING_NV = 0x8873;
        public const GLuint GL_PROGRAM_ERROR_STRING_NV = 0x8874;
        public const GLuint GL_HALF_FLOAT_NV = 0x140B;
        public const GLuint GL_WRITE_PIXEL_DATA_RANGE_NV = 0x8878;
        public const GLuint GL_READ_PIXEL_DATA_RANGE_NV = 0x8879;
        public const GLuint GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV = 0x887A;
        public const GLuint GL_READ_PIXEL_DATA_RANGE_LENGTH_NV = 0x887B;
        public const GLuint GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV = 0x887C;
        public const GLuint GL_READ_PIXEL_DATA_RANGE_POINTER_NV = 0x887D;
        public const GLuint GL_PRIMITIVE_RESTART_NV = 0x8558;
        public const GLuint GL_PRIMITIVE_RESTART_INDEX_NV = 0x8559;
        public const GLuint GL_TEXTURE_UNSIGNED_REMAP_MODE_NV = 0x888F;
        public const GLuint GL_STENCIL_BACK_FUNC_ATI = 0x8800;
        public const GLuint GL_STENCIL_BACK_FAIL_ATI = 0x8801;
        public const GLuint GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI = 0x8802;
        public const GLuint GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI = 0x8803;
        public const GLuint GL_IMPLEMENTATION_COLOR_READ_TYPE_OES = 0x8B9A;
        public const GLuint GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES = 0x8B9B;
        public const GLuint GL_DEPTH_BOUNDS_TEST_EXT = 0x8890;
        public const GLuint GL_DEPTH_BOUNDS_EXT = 0x8891;
        public const GLuint GL_MIRROR_CLAMP_EXT = 0x8742;
        public const GLuint GL_MIRROR_CLAMP_TO_EDGE_EXT = 0x8743;
        public const GLuint GL_MIRROR_CLAMP_TO_BORDER_EXT = 0x8912;
        public const GLuint GL_BLEND_EQUATION_RGB_EXT = GL_BLEND_EQUATION;
        public const GLuint GL_BLEND_EQUATION_ALPHA_EXT = 0x883D;
        public const GLuint GL_PACK_INVERT_MESA = 0x8758;
        public const GLuint GL_UNSIGNED_SHORT_8_8_MESA = 0x85BA;
        public const GLuint GL_UNSIGNED_SHORT_8_8_REV_MESA = 0x85BB;
        public const GLuint GL_YCBCR_MESA = 0x8757;
        public const GLuint GL_PIXEL_PACK_BUFFER_EXT = 0x88EB;
        public const GLuint GL_PIXEL_UNPACK_BUFFER_EXT = 0x88EC;
        public const GLuint GL_PIXEL_PACK_BUFFER_BINDING_EXT = 0x88ED;
        public const GLuint GL_PIXEL_UNPACK_BUFFER_BINDING_EXT = 0x88EF;
        public const GLuint GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV = 0x88F4;
        public const GLuint GL_MAX_PROGRAM_CALL_DEPTH_NV = 0x88F5;
        public const GLuint GL_MAX_PROGRAM_IF_DEPTH_NV = 0x88F6;
        public const GLuint GL_MAX_PROGRAM_LOOP_DEPTH_NV = 0x88F7;
        public const GLuint GL_MAX_PROGRAM_LOOP_COUNT_NV = 0x88F8;
        public const GLuint GL_INVALID_FRAMEBUFFER_OPERATION_EXT = 0x0506;
        public const GLuint GL_MAX_RENDERBUFFER_SIZE_EXT = 0x84E8;
        public const GLuint GL_FRAMEBUFFER_BINDING_EXT = 0x8CA6;
        public const GLuint GL_RENDERBUFFER_BINDING_EXT = 0x8CA7;
        public const GLuint GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT = 0x8CD0;
        public const GLuint GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT = 0x8CD1;
        public const GLuint GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT = 0x8CD2;
        public const GLuint GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT = 0x8CD3;
        public const GLuint GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT = 0x8CD4;
        public const GLuint GL_FRAMEBUFFER_COMPLETE_EXT = 0x8CD5;
        public const GLuint GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT = 0x8CD6;
        public const GLuint GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT = 0x8CD7;
        public const GLuint GL_FRAMEBUFFER_INCOMPLETE_DUPLICATE_ATTACHMENT_EXT = 0x8CD8;
        public const GLuint GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT = 0x8CD9;
        public const GLuint GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT = 0x8CDA;
        public const GLuint GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT = 0x8CDB;
        public const GLuint GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT = 0x8CDC;
        public const GLuint GL_FRAMEBUFFER_UNSUPPORTED_EXT = 0x8CDD;
        public const GLuint GL_MAX_COLOR_ATTACHMENTS_EXT = 0x8CDF;
        public const GLuint GL_COLOR_ATTACHMENT0_EXT = 0x8CE0;
        public const GLuint GL_COLOR_ATTACHMENT1_EXT = 0x8CE1;
        public const GLuint GL_COLOR_ATTACHMENT2_EXT = 0x8CE2;
        public const GLuint GL_COLOR_ATTACHMENT3_EXT = 0x8CE3;
        public const GLuint GL_COLOR_ATTACHMENT4_EXT = 0x8CE4;
        public const GLuint GL_COLOR_ATTACHMENT5_EXT = 0x8CE5;
        public const GLuint GL_COLOR_ATTACHMENT6_EXT = 0x8CE6;
        public const GLuint GL_COLOR_ATTACHMENT7_EXT = 0x8CE7;
        public const GLuint GL_COLOR_ATTACHMENT8_EXT = 0x8CE8;
        public const GLuint GL_COLOR_ATTACHMENT9_EXT = 0x8CE9;
        public const GLuint GL_COLOR_ATTACHMENT10_EXT = 0x8CEA;
        public const GLuint GL_COLOR_ATTACHMENT11_EXT = 0x8CEB;
        public const GLuint GL_COLOR_ATTACHMENT12_EXT = 0x8CEC;
        public const GLuint GL_COLOR_ATTACHMENT13_EXT = 0x8CED;
        public const GLuint GL_COLOR_ATTACHMENT14_EXT = 0x8CEE;
        public const GLuint GL_COLOR_ATTACHMENT15_EXT = 0x8CEF;
        public const GLuint GL_DEPTH_ATTACHMENT_EXT = 0x8D00;
        public const GLuint GL_STENCIL_ATTACHMENT_EXT = 0x8D20;
        public const GLuint GL_FRAMEBUFFER_EXT = 0x8D40;
        public const GLuint GL_RENDERBUFFER_EXT = 0x8D41;
        public const GLuint GL_RENDERBUFFER_WIDTH_EXT = 0x8D42;
        public const GLuint GL_RENDERBUFFER_HEIGHT_EXT = 0x8D43;
        public const GLuint GL_RENDERBUFFER_INTERNAL_FORMAT_EXT = 0x8D44;
        public const GLuint GL_STENCIL_INDEX1_EXT = 0x8D46;
        public const GLuint GL_STENCIL_INDEX4_EXT = 0x8D47;
        public const GLuint GL_STENCIL_INDEX8_EXT = 0x8D48;
        public const GLuint GL_STENCIL_INDEX16_EXT = 0x8D49;
        public const GLuint GL_RENDERBUFFER_RED_SIZE_EXT = 0x8D50;
        public const GLuint GL_RENDERBUFFER_GREEN_SIZE_EXT = 0x8D51;
        public const GLuint GL_RENDERBUFFER_BLUE_SIZE_EXT = 0x8D52;
        public const GLuint GL_RENDERBUFFER_ALPHA_SIZE_EXT = 0x8D53;
        public const GLuint GL_RENDERBUFFER_DEPTH_SIZE_EXT = 0x8D54;
        public const GLuint GL_RENDERBUFFER_STENCIL_SIZE_EXT = 0x8D55;
        public const GLuint GL_DEPTH_STENCIL_EXT = 0x84F9;
        public const GLuint GL_UNSIGNED_INT_24_8_EXT = 0x84FA;
        public const GLuint GL_DEPTH24_STENCIL8_EXT = 0x88F0;
        public const GLuint GL_TEXTURE_STENCIL_SIZE_EXT = 0x88F1;
        public const GLuint GL_STENCIL_TAG_BITS_EXT = 0x88F2;
        public const GLuint GL_STENCIL_CLEAR_TAG_VALUE_EXT = 0x88F3;
        public const GLuint GL_SRGB_EXT = 0x8C40;
        public const GLuint GL_SRGB8_EXT = 0x8C41;
        public const GLuint GL_SRGB_ALPHA_EXT = 0x8C42;
        public const GLuint GL_SRGB8_ALPHA8_EXT = 0x8C43;
        public const GLuint GL_SLUMINANCE_ALPHA_EXT = 0x8C44;
        public const GLuint GL_SLUMINANCE8_ALPHA8_EXT = 0x8C45;
        public const GLuint GL_SLUMINANCE_EXT = 0x8C46;
        public const GLuint GL_SLUMINANCE8_EXT = 0x8C47;
        public const GLuint GL_COMPRESSED_SRGB_EXT = 0x8C48;
        public const GLuint GL_COMPRESSED_SRGB_ALPHA_EXT = 0x8C49;
        public const GLuint GL_COMPRESSED_SLUMINANCE_EXT = 0x8C4A;
        public const GLuint GL_COMPRESSED_SLUMINANCE_ALPHA_EXT = 0x8C4B;
        public const GLuint GL_COMPRESSED_SRGB_S3TC_DXT1_EXT = 0x8C4C;
        public const GLuint GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT = 0x8C4D;
        public const GLuint GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT = 0x8C4E;
        public const GLuint GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT = 0x8C4F;
        public const GLuint GL_READ_FRAMEBUFFER_EXT = 0x8CA8;
        public const GLuint GL_DRAW_FRAMEBUFFER_EXT = 0x8CA9;
        public const GLuint GL_READ_FRAMEBUFFER_BINDING_EXT = GL_FRAMEBUFFER_BINDING_EXT;
        public const GLuint GL_DRAW_FRAMEBUFFER_BINDING_EXT = 0x8CAA;
        public const GLuint GL_RENDERBUFFER_SAMPLES_EXT = 0x8CAB;
        public const GLuint GL_TEXTURE_1D_STACK_MESAX = 0x8759;
        public const GLuint GL_TEXTURE_2D_STACK_MESAX = 0x875A;
        public const GLuint GL_PROXY_TEXTURE_1D_STACK_MESAX = 0x875B;
        public const GLuint GL_PROXY_TEXTURE_2D_STACK_MESAX = 0x875C;
        public const GLuint GL_TEXTURE_1D_STACK_BINDING_MESAX = 0x875D;
        public const GLuint GL_TEXTURE_2D_STACK_BINDING_MESAX = 0x875E;
        public const GLuint GL_TIME_ELAPSED_EXT = 0x88BF;

        #pragma warning restore 1591

        #endregion Public Constants

        #region internal static class Delegates

        /// <summary>
        /// Contains delegate signatures for all OpenGL functions.
        /// </summary>
        internal static class Delegates
        {
            static Delegates() { }

            #region NewList

            /// <summary>
            /// 
            /// </summary>
            public delegate void NewList(GLuint list, GLenum mode);
            public static NewList glNewList = (NewList)GetDelegateForExtensionMethod("glNewList", typeof(Delegates.NewList));

            #endregion NewList

            #region EndList

            /// <summary>
            /// 
            /// </summary>
            public delegate void EndList();
            public static EndList glEndList = (EndList)GetDelegateForExtensionMethod("glEndList", typeof(Delegates.EndList));

            #endregion EndList

            #region CallList

            /// <summary>
            /// 
            /// </summary>
            public delegate void CallList(GLuint list);
            public static CallList glCallList = (CallList)GetDelegateForExtensionMethod("glCallList", typeof(Delegates.CallList));

            #endregion CallList

            #region CallLists

            /// <summary>
            /// 
            /// </summary>
            public delegate void CallLists(GLsizei n, GLenum type, IntPtr lists);
            public static CallLists glCallLists = (CallLists)GetDelegateForExtensionMethod("glCallLists", typeof(Delegates.CallLists));

            #endregion CallLists

            #region DeleteLists

            /// <summary>
            /// 
            /// </summary>
            public delegate void DeleteLists(GLuint list, GLsizei range);
            public static DeleteLists glDeleteLists = (DeleteLists)GetDelegateForExtensionMethod("glDeleteLists", typeof(Delegates.DeleteLists));

            #endregion DeleteLists

            #region GenLists

            /// <summary>
            /// 
            /// </summary>
            public delegate GLuint GenLists(GLsizei range);
            public static GenLists glGenLists = (GenLists)GetDelegateForExtensionMethod("glGenLists", typeof(Delegates.GenLists));

            #endregion GenLists

            #region ListBase

            /// <summary>
            /// 
            /// </summary>
            public delegate void ListBase(GLuint @base);
            public static ListBase glListBase = (ListBase)GetDelegateForExtensionMethod("glListBase", typeof(Delegates.ListBase));

            #endregion ListBase

            #region Begin

            /// <summary>
            /// 
            /// </summary>
            public delegate void Begin(GLenum mode);
            public static Begin glBegin = (Begin)GetDelegateForExtensionMethod("glBegin", typeof(Delegates.Begin));

            #endregion Begin

            #region Bitmap

            /// <summary>
            /// 
            /// </summary>
            public delegate void Bitmap(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, IntPtr bitmap);
            public static Bitmap glBitmap = (Bitmap)GetDelegateForExtensionMethod("glBitmap", typeof(Delegates.Bitmap));

            #endregion Bitmap

            #region Color3b

            /// <summary>
            /// 
            /// </summary>
            public delegate void Color3b(GLbyte red, GLbyte green, GLbyte blue);
            public static Color3b glColor3b = (Color3b)GetDelegateForExtensionMethod("glColor3b", typeof(Delegates.Color3b));

            #endregion Color3b

            #region Color3bv

            /// <summary>
            /// 
            /// </summary>
            public delegate void Color3bv(IntPtr v);
            public static Color3bv glColor3bv = (Color3bv)GetDelegateForExtensionMethod("glColor3bv", typeof(Delegates.Color3bv));

            #endregion Color3bv

            #region Color3d

            /// <summary>
            /// 
            /// </summary>
            public delegate void Color3d(GLdouble red, GLdouble green, GLdouble blue);
            public static Color3d glColor3d = (Color3d)GetDelegateForExtensionMethod("glColor3d", typeof(Delegates.Color3d));

            #endregion Color3d

            #region Color3dv

            /// <summary>
            /// 
            /// </summary>
            public delegate void Color3dv(IntPtr v);
            public static Color3dv glColor3dv = (Color3dv)GetDelegateForExtensionMethod("glColor3dv", typeof(Delegates.Color3dv));

            #endregion Color3dv

            #region Color3f

            /// <summary>
            /// 
            /// </summary>
            public delegate void Color3f(GLfloat red, GLfloat green, GLfloat blue);
            public static Color3f glColor3f = (Color3f)GetDelegateForExtensionMethod("glColor3f", typeof(Delegates.Color3f));

            #endregion Color3f

            #region Color3fv

            /// <summary>
            /// 
            /// </summary>
            public delegate void Color3fv(IntPtr v);
            public static Color3fv glColor3fv = (Color3fv)GetDelegateForExtensionMethod("glColor3fv", typeof(Delegates.Color3fv));

            #endregion Color3fv

            #region Color3i

            /// <summary>
            /// 
            /// </summary>
            public delegate void Color3i(GLint red, GLint green, GLint blue);
            public static Color3i glColor3i = (Color3i)GetDelegateForExtensionMethod("glColor3i", typeof(Delegates.Color3i));

            #endregion Color3i

            #region Color3iv

            /// <summary>
            /// 
            /// </summary>
            public delegate void Color3iv(IntPtr v);
            public static Color3iv glColor3iv = (Color3iv)GetDelegateForExtensionMethod("glColor3iv", typeof(Delegates.Color3iv));

            #endregion Color3iv

            #region Color3s

            /// <summary>
            /// 
            /// </summary>
            public delegate void Color3s(GLshort red, GLshort green, GLshort blue);
            public static Color3s glColor3s = (Color3s)GetDelegateForExtensionMethod("glColor3s", typeof(Delegates.Color3s));

            #endregion Color3s

            #region Color3sv

            /// <summary>
            /// 
            /// </summary>
            public delegate void Color3sv(IntPtr v);
            public static Color3sv glColor3sv = (Color3sv)GetDelegateForExtensionMethod("glColor3sv", typeof(Delegates.Color3sv));

            #endregion Color3sv

            #region Color3ub

            /// <summary>
            /// 
            /// </summary>
            public delegate void Color3ub(GLubyte red, GLubyte green, GLubyte blue);
            public static Color3ub glColor3ub = (Color3ub)GetDelegateForExtensionMethod("glColor3ub", typeof(Delegates.Color3ub));

            #endregion Color3ub

            #region Color3ubv

            /// <summary>
            /// 
            /// </summary>
            public delegate void Color3ubv(IntPtr v);
            public static Color3ubv glColor3ubv = (Color3ubv)GetDelegateForExtensionMethod("glColor3ubv", typeof(Delegates.Color3ubv));

            #endregion Color3ubv

            #region Color3ui

            /// <summary>
            /// 
            /// </summary>
            public delegate void Color3ui(GLuint red, GLuint green, GLuint blue);
            public static Color3ui glColor3ui = (Color3ui)GetDelegateForExtensionMethod("glColor3ui", typeof(Delegates.Color3ui));

            #endregion Color3ui

            #region Color3uiv

            /// <summary>
            /// 
            /// </summary>
            public delegate void Color3uiv(IntPtr v);
            public static Color3uiv glColor3uiv = (Color3uiv)GetDelegateForExtensionMethod("glColor3uiv", typeof(Delegates.Color3uiv));

            #endregion Color3uiv

            #region Color3us

            /// <summary>
            /// 
            /// </summary>
            public delegate void Color3us(GLushort red, GLushort green, GLushort blue);
            public static Color3us glColor3us = (Color3us)GetDelegateForExtensionMethod("glColor3us", typeof(Delegates.Color3us));

            #endregion Color3us

            #region Color3usv

            /// <summary>
            /// 
            /// </summary>
            public delegate void Color3usv(IntPtr v);
            public static Color3usv glColor3usv = (Color3usv)GetDelegateForExtensionMethod("glColor3usv", typeof(Delegates.Color3usv));

            #endregion Color3usv

            #region Color4b

            /// <summary>
            /// 
            /// </summary>
            public delegate void Color4b(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha);
            public static Color4b glColor4b = (Color4b)GetDelegateForExtensionMethod("glColor4b", typeof(Delegates.Color4b));

            #endregion Color4b

            #region Color4bv

            /// <summary>
            /// 
            /// </summary>
            public delegate void Color4bv(IntPtr v);
            public static Color4bv glColor4bv = (Color4bv)GetDelegateForExtensionMethod("glColor4bv", typeof(Delegates.Color4bv));

            #endregion Color4bv

            #region Color4d

            /// <summary>
            /// 
            /// </summary>
            public delegate void Color4d(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha);
            public static Color4d glColor4d = (Color4d)GetDelegateForExtensionMethod("glColor4d", typeof(Delegates.Color4d));

            #endregion Color4d

            #region Color4dv

            /// <summary>
            /// 
            /// </summary>
            public delegate void Color4dv(IntPtr v);
            public static Color4dv glColor4dv = (Color4dv)GetDelegateForExtensionMethod("glColor4dv", typeof(Delegates.Color4dv));

            #endregion Color4dv

            #region Color4f

            /// <summary>
            /// 
            /// </summary>
            public delegate void Color4f(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
            public static Color4f glColor4f = (Color4f)GetDelegateForExtensionMethod("glColor4f", typeof(Delegates.Color4f));

            #endregion Color4f

            #region Color4fv

            /// <summary>
            /// 
            /// </summary>
            public delegate void Color4fv(IntPtr v);
            public static Color4fv glColor4fv = (Color4fv)GetDelegateForExtensionMethod("glColor4fv", typeof(Delegates.Color4fv));

            #endregion Color4fv

            #region Color4i

            /// <summary>
            /// 
            /// </summary>
            public delegate void Color4i(GLint red, GLint green, GLint blue, GLint alpha);
            public static Color4i glColor4i = (Color4i)GetDelegateForExtensionMethod("glColor4i", typeof(Delegates.Color4i));

            #endregion Color4i

            #region Color4iv

            /// <summary>
            /// 
            /// </summary>
            public delegate void Color4iv(IntPtr v);
            public static Color4iv glColor4iv = (Color4iv)GetDelegateForExtensionMethod("glColor4iv", typeof(Delegates.Color4iv));

            #endregion Color4iv

            #region Color4s

            /// <summary>
            /// 
            /// </summary>
            public delegate void Color4s(GLshort red, GLshort green, GLshort blue, GLshort alpha);
            public static Color4s glColor4s = (Color4s)GetDelegateForExtensionMethod("glColor4s", typeof(Delegates.Color4s));

            #endregion Color4s

            #region Color4sv

            /// <summary>
            /// 
            /// </summary>
            public delegate void Color4sv(IntPtr v);
            public static Color4sv glColor4sv = (Color4sv)GetDelegateForExtensionMethod("glColor4sv", typeof(Delegates.Color4sv));

            #endregion Color4sv

            #region Color4ub

            /// <summary>
            /// 
            /// </summary>
            public delegate void Color4ub(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha);
            public static Color4ub glColor4ub = (Color4ub)GetDelegateForExtensionMethod("glColor4ub", typeof(Delegates.Color4ub));

            #endregion Color4ub

            #region Color4ubv

            /// <summary>
            /// 
            /// </summary>
            public delegate void Color4ubv(IntPtr v);
            public static Color4ubv glColor4ubv = (Color4ubv)GetDelegateForExtensionMethod("glColor4ubv", typeof(Delegates.Color4ubv));

            #endregion Color4ubv

            #region Color4ui

            /// <summary>
            /// 
            /// </summary>
            public delegate void Color4ui(GLuint red, GLuint green, GLuint blue, GLuint alpha);
            public static Color4ui glColor4ui = (Color4ui)GetDelegateForExtensionMethod("glColor4ui", typeof(Delegates.Color4ui));

            #endregion Color4ui

            #region Color4uiv

            /// <summary>
            /// 
            /// </summary>
            public delegate void Color4uiv(IntPtr v);
            public static Color4uiv glColor4uiv = (Color4uiv)GetDelegateForExtensionMethod("glColor4uiv", typeof(Delegates.Color4uiv));

            #endregion Color4uiv

            #region Color4us

            /// <summary>
            /// 
            /// </summary>
            public delegate void Color4us(GLushort red, GLushort green, GLushort blue, GLushort alpha);
            public static Color4us glColor4us = (Color4us)GetDelegateForExtensionMethod("glColor4us", typeof(Delegates.Color4us));

            #endregion Color4us

            #region Color4usv

            /// <summary>
            /// 
            /// </summary>
            public delegate void Color4usv(IntPtr v);
            public static Color4usv glColor4usv = (Color4usv)GetDelegateForExtensionMethod("glColor4usv", typeof(Delegates.Color4usv));

            #endregion Color4usv

            #region EdgeFlag

            /// <summary>
            /// 
            /// </summary>
            public delegate void EdgeFlag(GLboolean flag);
            public static EdgeFlag glEdgeFlag = (EdgeFlag)GetDelegateForExtensionMethod("glEdgeFlag", typeof(Delegates.EdgeFlag));

            #endregion EdgeFlag

            #region EdgeFlagv

            /// <summary>
            /// 
            /// </summary>
            public delegate void EdgeFlagv(IntPtr flag);
            public static EdgeFlagv glEdgeFlagv = (EdgeFlagv)GetDelegateForExtensionMethod("glEdgeFlagv", typeof(Delegates.EdgeFlagv));

            #endregion EdgeFlagv

            #region End

            /// <summary>
            /// 
            /// </summary>
            public delegate void End();
            public static End glEnd = (End)GetDelegateForExtensionMethod("glEnd", typeof(Delegates.End));

            #endregion End

            #region Indexd

            /// <summary>
            /// 
            /// </summary>
            public delegate void Indexd(GLdouble c);
            public static Indexd glIndexd = (Indexd)GetDelegateForExtensionMethod("glIndexd", typeof(Delegates.Indexd));

            #endregion Indexd

            #region Indexdv

            /// <summary>
            /// 
            /// </summary>
            public delegate void Indexdv(IntPtr c);
            public static Indexdv glIndexdv = (Indexdv)GetDelegateForExtensionMethod("glIndexdv", typeof(Delegates.Indexdv));

            #endregion Indexdv

            #region Indexf

            /// <summary>
            /// 
            /// </summary>
            public delegate void Indexf(GLfloat c);
            public static Indexf glIndexf = (Indexf)GetDelegateForExtensionMethod("glIndexf", typeof(Delegates.Indexf));

            #endregion Indexf

            #region Indexfv

            /// <summary>
            /// 
            /// </summary>
            public delegate void Indexfv(IntPtr c);
            public static Indexfv glIndexfv = (Indexfv)GetDelegateForExtensionMethod("glIndexfv", typeof(Delegates.Indexfv));

            #endregion Indexfv

            #region Indexi

            /// <summary>
            /// 
            /// </summary>
            public delegate void Indexi(GLint c);
            public static Indexi glIndexi = (Indexi)GetDelegateForExtensionMethod("glIndexi", typeof(Delegates.Indexi));

            #endregion Indexi

            #region Indexiv

            /// <summary>
            /// 
            /// </summary>
            public delegate void Indexiv(IntPtr c);
            public static Indexiv glIndexiv = (Indexiv)GetDelegateForExtensionMethod("glIndexiv", typeof(Delegates.Indexiv));

            #endregion Indexiv

            #region Indexs

            /// <summary>
            /// 
            /// </summary>
            public delegate void Indexs(GLshort c);
            public static Indexs glIndexs = (Indexs)GetDelegateForExtensionMethod("glIndexs", typeof(Delegates.Indexs));

            #endregion Indexs

            #region Indexsv

            /// <summary>
            /// 
            /// </summary>
            public delegate void Indexsv(IntPtr c);
            public static Indexsv glIndexsv = (Indexsv)GetDelegateForExtensionMethod("glIndexsv", typeof(Delegates.Indexsv));

            #endregion Indexsv

            #region Normal3b

            /// <summary>
            /// 
            /// </summary>
            public delegate void Normal3b(GLbyte nx, GLbyte ny, GLbyte nz);
            public static Normal3b glNormal3b = (Normal3b)GetDelegateForExtensionMethod("glNormal3b", typeof(Delegates.Normal3b));

            #endregion Normal3b

            #region Normal3bv

            /// <summary>
            /// 
            /// </summary>
            public delegate void Normal3bv(IntPtr v);
            public static Normal3bv glNormal3bv = (Normal3bv)GetDelegateForExtensionMethod("glNormal3bv", typeof(Delegates.Normal3bv));

            #endregion Normal3bv

            #region Normal3d

            /// <summary>
            /// 
            /// </summary>
            public delegate void Normal3d(GLdouble nx, GLdouble ny, GLdouble nz);
            public static Normal3d glNormal3d = (Normal3d)GetDelegateForExtensionMethod("glNormal3d", typeof(Delegates.Normal3d));

            #endregion Normal3d

            #region Normal3dv

            /// <summary>
            /// 
            /// </summary>
            public delegate void Normal3dv(IntPtr v);
            public static Normal3dv glNormal3dv = (Normal3dv)GetDelegateForExtensionMethod("glNormal3dv", typeof(Delegates.Normal3dv));

            #endregion Normal3dv

            #region Normal3f

            /// <summary>
            /// 
            /// </summary>
            public delegate void Normal3f(GLfloat nx, GLfloat ny, GLfloat nz);
            public static Normal3f glNormal3f = (Normal3f)GetDelegateForExtensionMethod("glNormal3f", typeof(Delegates.Normal3f));

            #endregion Normal3f

            #region Normal3fv

            /// <summary>
            /// 
            /// </summary>
            public delegate void Normal3fv(IntPtr v);
            public static Normal3fv glNormal3fv = (Normal3fv)GetDelegateForExtensionMethod("glNormal3fv", typeof(Delegates.Normal3fv));

            #endregion Normal3fv

            #region Normal3i

            /// <summary>
            /// 
            /// </summary>
            public delegate void Normal3i(GLint nx, GLint ny, GLint nz);
            public static Normal3i glNormal3i = (Normal3i)GetDelegateForExtensionMethod("glNormal3i", typeof(Delegates.Normal3i));

            #endregion Normal3i

            #region Normal3iv

            /// <summary>
            /// 
            /// </summary>
            public delegate void Normal3iv(IntPtr v);
            public static Normal3iv glNormal3iv = (Normal3iv)GetDelegateForExtensionMethod("glNormal3iv", typeof(Delegates.Normal3iv));

            #endregion Normal3iv

            #region Normal3s

            /// <summary>
            /// 
            /// </summary>
            public delegate void Normal3s(GLshort nx, GLshort ny, GLshort nz);
            public static Normal3s glNormal3s = (Normal3s)GetDelegateForExtensionMethod("glNormal3s", typeof(Delegates.Normal3s));

            #endregion Normal3s

            #region Normal3sv

            /// <summary>
            /// 
            /// </summary>
            public delegate void Normal3sv(IntPtr v);
            public static Normal3sv glNormal3sv = (Normal3sv)GetDelegateForExtensionMethod("glNormal3sv", typeof(Delegates.Normal3sv));

            #endregion Normal3sv

            #region RasterPos2d

            /// <summary>
            /// 
            /// </summary>
            public delegate void RasterPos2d(GLdouble x, GLdouble y);
            public static RasterPos2d glRasterPos2d = (RasterPos2d)GetDelegateForExtensionMethod("glRasterPos2d", typeof(Delegates.RasterPos2d));

            #endregion RasterPos2d

            #region RasterPos2dv

            /// <summary>
            /// 
            /// </summary>
            public delegate void RasterPos2dv(IntPtr v);
            public static RasterPos2dv glRasterPos2dv = (RasterPos2dv)GetDelegateForExtensionMethod("glRasterPos2dv", typeof(Delegates.RasterPos2dv));

            #endregion RasterPos2dv

            #region RasterPos2f

            /// <summary>
            /// 
            /// </summary>
            public delegate void RasterPos2f(GLfloat x, GLfloat y);
            public static RasterPos2f glRasterPos2f = (RasterPos2f)GetDelegateForExtensionMethod("glRasterPos2f", typeof(Delegates.RasterPos2f));

            #endregion RasterPos2f

            #region RasterPos2fv

            /// <summary>
            /// 
            /// </summary>
            public delegate void RasterPos2fv(IntPtr v);
            public static RasterPos2fv glRasterPos2fv = (RasterPos2fv)GetDelegateForExtensionMethod("glRasterPos2fv", typeof(Delegates.RasterPos2fv));

            #endregion RasterPos2fv

            #region RasterPos2i

            /// <summary>
            /// 
            /// </summary>
            public delegate void RasterPos2i(GLint x, GLint y);
            public static RasterPos2i glRasterPos2i = (RasterPos2i)GetDelegateForExtensionMethod("glRasterPos2i", typeof(Delegates.RasterPos2i));

            #endregion RasterPos2i

            #region RasterPos2iv

            /// <summary>
            /// 
            /// </summary>
            public delegate void RasterPos2iv(IntPtr v);
            public static RasterPos2iv glRasterPos2iv = (RasterPos2iv)GetDelegateForExtensionMethod("glRasterPos2iv", typeof(Delegates.RasterPos2iv));

            #endregion RasterPos2iv

            #region RasterPos2s

            /// <summary>
            /// 
            /// </summary>
            public delegate void RasterPos2s(GLshort x, GLshort y);
            public static RasterPos2s glRasterPos2s = (RasterPos2s)GetDelegateForExtensionMethod("glRasterPos2s", typeof(Delegates.RasterPos2s));

            #endregion RasterPos2s

            #region RasterPos2sv

            /// <summary>
            /// 
            /// </summary>
            public delegate void RasterPos2sv(IntPtr v);
            public static RasterPos2sv glRasterPos2sv = (RasterPos2sv)GetDelegateForExtensionMethod("glRasterPos2sv", typeof(Delegates.RasterPos2sv));

            #endregion RasterPos2sv

            #region RasterPos3d

            /// <summary>
            /// 
            /// </summary>
            public delegate void RasterPos3d(GLdouble x, GLdouble y, GLdouble z);
            public static RasterPos3d glRasterPos3d = (RasterPos3d)GetDelegateForExtensionMethod("glRasterPos3d", typeof(Delegates.RasterPos3d));

            #endregion RasterPos3d

            #region RasterPos3dv

            /// <summary>
            /// 
            /// </summary>
            public delegate void RasterPos3dv(IntPtr v);
            public static RasterPos3dv glRasterPos3dv = (RasterPos3dv)GetDelegateForExtensionMethod("glRasterPos3dv", typeof(Delegates.RasterPos3dv));

            #endregion RasterPos3dv

            #region RasterPos3f

            /// <summary>
            /// 
            /// </summary>
            public delegate void RasterPos3f(GLfloat x, GLfloat y, GLfloat z);
            public static RasterPos3f glRasterPos3f = (RasterPos3f)GetDelegateForExtensionMethod("glRasterPos3f", typeof(Delegates.RasterPos3f));

            #endregion RasterPos3f

            #region RasterPos3fv

            /// <summary>
            /// 
            /// </summary>
            public delegate void RasterPos3fv(IntPtr v);
            public static RasterPos3fv glRasterPos3fv = (RasterPos3fv)GetDelegateForExtensionMethod("glRasterPos3fv", typeof(Delegates.RasterPos3fv));

            #endregion RasterPos3fv

            #region RasterPos3i

            /// <summary>
            /// 
            /// </summary>
            public delegate void RasterPos3i(GLint x, GLint y, GLint z);
            public static RasterPos3i glRasterPos3i = (RasterPos3i)GetDelegateForExtensionMethod("glRasterPos3i", typeof(Delegates.RasterPos3i));

            #endregion RasterPos3i

            #region RasterPos3iv

            /// <summary>
            /// 
            /// </summary>
            public delegate void RasterPos3iv(IntPtr v);
            public static RasterPos3iv glRasterPos3iv = (RasterPos3iv)GetDelegateForExtensionMethod("glRasterPos3iv", typeof(Delegates.RasterPos3iv));

            #endregion RasterPos3iv

            #region RasterPos3s

            /// <summary>
            /// 
            /// </summary>
            public delegate void RasterPos3s(GLshort x, GLshort y, GLshort z);
            public static RasterPos3s glRasterPos3s = (RasterPos3s)GetDelegateForExtensionMethod("glRasterPos3s", typeof(Delegates.RasterPos3s));

            #endregion RasterPos3s

            #region RasterPos3sv

            /// <summary>
            /// 
            /// </summary>
            public delegate void RasterPos3sv(IntPtr v);
            public static RasterPos3sv glRasterPos3sv = (RasterPos3sv)GetDelegateForExtensionMethod("glRasterPos3sv", typeof(Delegates.RasterPos3sv));

            #endregion RasterPos3sv

            #region RasterPos4d

            /// <summary>
            /// 
            /// </summary>
            public delegate void RasterPos4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
            public static RasterPos4d glRasterPos4d = (RasterPos4d)GetDelegateForExtensionMethod("glRasterPos4d", typeof(Delegates.RasterPos4d));

            #endregion RasterPos4d

            #region RasterPos4dv

            /// <summary>
            /// 
            /// </summary>
            public delegate void RasterPos4dv(IntPtr v);
            public static RasterPos4dv glRasterPos4dv = (RasterPos4dv)GetDelegateForExtensionMethod("glRasterPos4dv", typeof(Delegates.RasterPos4dv));

            #endregion RasterPos4dv

            #region RasterPos4f

            /// <summary>
            /// 
            /// </summary>
            public delegate void RasterPos4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
            public static RasterPos4f glRasterPos4f = (RasterPos4f)GetDelegateForExtensionMethod("glRasterPos4f", typeof(Delegates.RasterPos4f));

            #endregion RasterPos4f

            #region RasterPos4fv

            /// <summary>
            /// 
            /// </summary>
            public delegate void RasterPos4fv(IntPtr v);
            public static RasterPos4fv glRasterPos4fv = (RasterPos4fv)GetDelegateForExtensionMethod("glRasterPos4fv", typeof(Delegates.RasterPos4fv));

            #endregion RasterPos4fv

            #region RasterPos4i

            /// <summary>
            /// 
            /// </summary>
            public delegate void RasterPos4i(GLint x, GLint y, GLint z, GLint w);
            public static RasterPos4i glRasterPos4i = (RasterPos4i)GetDelegateForExtensionMethod("glRasterPos4i", typeof(Delegates.RasterPos4i));

            #endregion RasterPos4i

            #region RasterPos4iv

            /// <summary>
            /// 
            /// </summary>
            public delegate void RasterPos4iv(IntPtr v);
            public static RasterPos4iv glRasterPos4iv = (RasterPos4iv)GetDelegateForExtensionMethod("glRasterPos4iv", typeof(Delegates.RasterPos4iv));

            #endregion RasterPos4iv

            #region RasterPos4s

            /// <summary>
            /// 
            /// </summary>
            public delegate void RasterPos4s(GLshort x, GLshort y, GLshort z, GLshort w);
            public static RasterPos4s glRasterPos4s = (RasterPos4s)GetDelegateForExtensionMethod("glRasterPos4s", typeof(Delegates.RasterPos4s));

            #endregion RasterPos4s

            #region RasterPos4sv

            /// <summary>
            /// 
            /// </summary>
            public delegate void RasterPos4sv(IntPtr v);
            public static RasterPos4sv glRasterPos4sv = (RasterPos4sv)GetDelegateForExtensionMethod("glRasterPos4sv", typeof(Delegates.RasterPos4sv));

            #endregion RasterPos4sv

            #region Rectd

            /// <summary>
            /// 
            /// </summary>
            public delegate void Rectd(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2);
            public static Rectd glRectd = (Rectd)GetDelegateForExtensionMethod("glRectd", typeof(Delegates.Rectd));

            #endregion Rectd

            #region Rectdv

            /// <summary>
            /// 
            /// </summary>
            public delegate void Rectdv(IntPtr v1, IntPtr v2);
            public static Rectdv glRectdv = (Rectdv)GetDelegateForExtensionMethod("glRectdv", typeof(Delegates.Rectdv));

            #endregion Rectdv

            #region Rectf

            /// <summary>
            /// 
            /// </summary>
            public delegate void Rectf(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2);
            public static Rectf glRectf = (Rectf)GetDelegateForExtensionMethod("glRectf", typeof(Delegates.Rectf));

            #endregion Rectf

            #region Rectfv

            /// <summary>
            /// 
            /// </summary>
            public delegate void Rectfv(IntPtr v1, IntPtr v2);
            public static Rectfv glRectfv = (Rectfv)GetDelegateForExtensionMethod("glRectfv", typeof(Delegates.Rectfv));

            #endregion Rectfv

            #region Recti

            /// <summary>
            /// 
            /// </summary>
            public delegate void Recti(GLint x1, GLint y1, GLint x2, GLint y2);
            public static Recti glRecti = (Recti)GetDelegateForExtensionMethod("glRecti", typeof(Delegates.Recti));

            #endregion Recti

            #region Rectiv

            /// <summary>
            /// 
            /// </summary>
            public delegate void Rectiv(IntPtr v1, IntPtr v2);
            public static Rectiv glRectiv = (Rectiv)GetDelegateForExtensionMethod("glRectiv", typeof(Delegates.Rectiv));

            #endregion Rectiv

            #region Rects

            /// <summary>
            /// 
            /// </summary>
            public delegate void Rects(GLshort x1, GLshort y1, GLshort x2, GLshort y2);
            public static Rects glRects = (Rects)GetDelegateForExtensionMethod("glRects", typeof(Delegates.Rects));

            #endregion Rects

            #region Rectsv

            /// <summary>
            /// 
            /// </summary>
            public delegate void Rectsv(IntPtr v1, IntPtr v2);
            public static Rectsv glRectsv = (Rectsv)GetDelegateForExtensionMethod("glRectsv", typeof(Delegates.Rectsv));

            #endregion Rectsv

            #region TexCoord1d

            /// <summary>
            /// 
            /// </summary>
            public delegate void TexCoord1d(GLdouble s);
            public static TexCoord1d glTexCoord1d = (TexCoord1d)GetDelegateForExtensionMethod("glTexCoord1d", typeof(Delegates.TexCoord1d));

            #endregion TexCoord1d

            #region TexCoord1dv

            /// <summary>
            /// 
            /// </summary>
            public delegate void TexCoord1dv(IntPtr v);
            public static TexCoord1dv glTexCoord1dv = (TexCoord1dv)GetDelegateForExtensionMethod("glTexCoord1dv", typeof(Delegates.TexCoord1dv));

            #endregion TexCoord1dv

            #region TexCoord1f

            /// <summary>
            /// 
            /// </summary>
            public delegate void TexCoord1f(GLfloat s);
            public static TexCoord1f glTexCoord1f = (TexCoord1f)GetDelegateForExtensionMethod("glTexCoord1f", typeof(Delegates.TexCoord1f));

            #endregion TexCoord1f

            #region TexCoord1fv

            /// <summary>
            /// 
            /// </summary>
            public delegate void TexCoord1fv(IntPtr v);
            public static TexCoord1fv glTexCoord1fv = (TexCoord1fv)GetDelegateForExtensionMethod("glTexCoord1fv", typeof(Delegates.TexCoord1fv));

            #endregion TexCoord1fv

            #region TexCoord1i

            /// <summary>
            /// 
            /// </summary>
            public delegate void TexCoord1i(GLint s);
            public static TexCoord1i glTexCoord1i = (TexCoord1i)GetDelegateForExtensionMethod("glTexCoord1i", typeof(Delegates.TexCoord1i));

            #endregion TexCoord1i

            #region TexCoord1iv

            /// <summary>
            /// 
            /// </summary>
            public delegate void TexCoord1iv(IntPtr v);
            public static TexCoord1iv glTexCoord1iv = (TexCoord1iv)GetDelegateForExtensionMethod("glTexCoord1iv", typeof(Delegates.TexCoord1iv));

            #endregion TexCoord1iv

            #region TexCoord1s

            /// <summary>
            /// 
            /// </summary>
            public delegate void TexCoord1s(GLshort s);
            public static TexCoord1s glTexCoord1s = (TexCoord1s)GetDelegateForExtensionMethod("glTexCoord1s", typeof(Delegates.TexCoord1s));

            #endregion TexCoord1s

            #region TexCoord1sv

            /// <summary>
            /// 
            /// </summary>
            public delegate void TexCoord1sv(IntPtr v);
            public static TexCoord1sv glTexCoord1sv = (TexCoord1sv)GetDelegateForExtensionMethod("glTexCoord1sv", typeof(Delegates.TexCoord1sv));

            #endregion TexCoord1sv

            #region TexCoord2d

            /// <summary>
            /// 
            /// </summary>
            public delegate void TexCoord2d(GLdouble s, GLdouble t);
            public static TexCoord2d glTexCoord2d = (TexCoord2d)GetDelegateForExtensionMethod("glTexCoord2d", typeof(Delegates.TexCoord2d));

            #endregion TexCoord2d

            #region TexCoord2dv

            /// <summary>
            /// 
            /// </summary>
            public delegate void TexCoord2dv(IntPtr v);
            public static TexCoord2dv glTexCoord2dv = (TexCoord2dv)GetDelegateForExtensionMethod("glTexCoord2dv", typeof(Delegates.TexCoord2dv));

            #endregion TexCoord2dv

            #region TexCoord2f

            /// <summary>
            /// 
            /// </summary>
            public delegate void TexCoord2f(GLfloat s, GLfloat t);
            public static TexCoord2f glTexCoord2f = (TexCoord2f)GetDelegateForExtensionMethod("glTexCoord2f", typeof(Delegates.TexCoord2f));

            #endregion TexCoord2f

            #region TexCoord2fv

            /// <summary>
            /// 
            /// </summary>
            public delegate void TexCoord2fv(IntPtr v);
            public static TexCoord2fv glTexCoord2fv = (TexCoord2fv)GetDelegateForExtensionMethod("glTexCoord2fv", typeof(Delegates.TexCoord2fv));

            #endregion TexCoord2fv

            #region TexCoord2i

            /// <summary>
            /// 
            /// </summary>
            public delegate void TexCoord2i(GLint s, GLint t);
            public static TexCoord2i glTexCoord2i = (TexCoord2i)GetDelegateForExtensionMethod("glTexCoord2i", typeof(Delegates.TexCoord2i));

            #endregion TexCoord2i

            #region TexCoord2iv

            /// <summary>
            /// 
            /// </summary>
            public delegate void TexCoord2iv(IntPtr v);
            public static TexCoord2iv glTexCoord2iv = (TexCoord2iv)GetDelegateForExtensionMethod("glTexCoord2iv", typeof(Delegates.TexCoord2iv));

            #endregion TexCoord2iv

            #region TexCoord2s

            /// <summary>
            /// 
            /// </summary>
            public delegate void TexCoord2s(GLshort s, GLshort t);
            public static TexCoord2s glTexCoord2s = (TexCoord2s)GetDelegateForExtensionMethod("glTexCoord2s", typeof(Delegates.TexCoord2s));

            #endregion TexCoord2s

            #region TexCoord2sv

            /// <summary>
            /// 
            /// </summary>
            public delegate void TexCoord2sv(IntPtr v);
            public static TexCoord2sv glTexCoord2sv = (TexCoord2sv)GetDelegateForExtensionMethod("glTexCoord2sv", typeof(Delegates.TexCoord2sv));

            #endregion TexCoord2sv

            #region TexCoord3d

            /// <summary>
            /// 
            /// </summary>
            public delegate void TexCoord3d(GLdouble s, GLdouble t, GLdouble r);
            public static TexCoord3d glTexCoord3d = (TexCoord3d)GetDelegateForExtensionMethod("glTexCoord3d", typeof(Delegates.TexCoord3d));

            #endregion TexCoord3d

            #region TexCoord3dv

            /// <summary>
            /// 
            /// </summary>
            public delegate void TexCoord3dv(IntPtr v);
            public static TexCoord3dv glTexCoord3dv = (TexCoord3dv)GetDelegateForExtensionMethod("glTexCoord3dv", typeof(Delegates.TexCoord3dv));

            #endregion TexCoord3dv

            #region TexCoord3f

            /// <summary>
            /// 
            /// </summary>
            public delegate void TexCoord3f(GLfloat s, GLfloat t, GLfloat r);
            public static TexCoord3f glTexCoord3f = (TexCoord3f)GetDelegateForExtensionMethod("glTexCoord3f", typeof(Delegates.TexCoord3f));

            #endregion TexCoord3f

            #region TexCoord3fv

            /// <summary>
            /// 
            /// </summary>
            public delegate void TexCoord3fv(IntPtr v);
            public static TexCoord3fv glTexCoord3fv = (TexCoord3fv)GetDelegateForExtensionMethod("glTexCoord3fv", typeof(Delegates.TexCoord3fv));

            #endregion TexCoord3fv

            #region TexCoord3i

            /// <summary>
            /// 
            /// </summary>
            public delegate void TexCoord3i(GLint s, GLint t, GLint r);
            public static TexCoord3i glTexCoord3i = (TexCoord3i)GetDelegateForExtensionMethod("glTexCoord3i", typeof(Delegates.TexCoord3i));

            #endregion TexCoord3i

            #region TexCoord3iv

            /// <summary>
            /// 
            /// </summary>
            public delegate void TexCoord3iv(IntPtr v);
            public static TexCoord3iv glTexCoord3iv = (TexCoord3iv)GetDelegateForExtensionMethod("glTexCoord3iv", typeof(Delegates.TexCoord3iv));

            #endregion TexCoord3iv

            #region TexCoord3s

            /// <summary>
            /// 
            /// </summary>
            public delegate void TexCoord3s(GLshort s, GLshort t, GLshort r);
            public static TexCoord3s glTexCoord3s = (TexCoord3s)GetDelegateForExtensionMethod("glTexCoord3s", typeof(Delegates.TexCoord3s));

            #endregion TexCoord3s

            #region TexCoord3sv

            /// <summary>
            /// 
            /// </summary>
            public delegate void TexCoord3sv(IntPtr v);
            public static TexCoord3sv glTexCoord3sv = (TexCoord3sv)GetDelegateForExtensionMethod("glTexCoord3sv", typeof(Delegates.TexCoord3sv));

            #endregion TexCoord3sv

            #region TexCoord4d

            /// <summary>
            /// 
            /// </summary>
            public delegate void TexCoord4d(GLdouble s, GLdouble t, GLdouble r, GLdouble q);
            public static TexCoord4d glTexCoord4d = (TexCoord4d)GetDelegateForExtensionMethod("glTexCoord4d", typeof(Delegates.TexCoord4d));

            #endregion TexCoord4d

            #region TexCoord4dv

            /// <summary>
            /// 
            /// </summary>
            public delegate void TexCoord4dv(IntPtr v);
            public static TexCoord4dv glTexCoord4dv = (TexCoord4dv)GetDelegateForExtensionMethod("glTexCoord4dv", typeof(Delegates.TexCoord4dv));

            #endregion TexCoord4dv

            #region TexCoord4f

            /// <summary>
            /// 
            /// </summary>
            public delegate void TexCoord4f(GLfloat s, GLfloat t, GLfloat r, GLfloat q);
            public static TexCoord4f glTexCoord4f = (TexCoord4f)GetDelegateForExtensionMethod("glTexCoord4f", typeof(Delegates.TexCoord4f));

            #endregion TexCoord4f

            #region TexCoord4fv

            /// <summary>
            /// 
            /// </summary>
            public delegate void TexCoord4fv(IntPtr v);
            public static TexCoord4fv glTexCoord4fv = (TexCoord4fv)GetDelegateForExtensionMethod("glTexCoord4fv", typeof(Delegates.TexCoord4fv));

            #endregion TexCoord4fv

            #region TexCoord4i

            /// <summary>
            /// 
            /// </summary>
            public delegate void TexCoord4i(GLint s, GLint t, GLint r, GLint q);
            public static TexCoord4i glTexCoord4i = (TexCoord4i)GetDelegateForExtensionMethod("glTexCoord4i", typeof(Delegates.TexCoord4i));

            #endregion TexCoord4i

            #region TexCoord4iv

            /// <summary>
            /// 
            /// </summary>
            public delegate void TexCoord4iv(IntPtr v);
            public static TexCoord4iv glTexCoord4iv = (TexCoord4iv)GetDelegateForExtensionMethod("glTexCoord4iv", typeof(Delegates.TexCoord4iv));

            #endregion TexCoord4iv

            #region TexCoord4s

            /// <summary>
            /// 
            /// </summary>
            public delegate void TexCoord4s(GLshort s, GLshort t, GLshort r, GLshort q);
            public static TexCoord4s glTexCoord4s = (TexCoord4s)GetDelegateForExtensionMethod("glTexCoord4s", typeof(Delegates.TexCoord4s));

            #endregion TexCoord4s

            #region TexCoord4sv

            /// <summary>
            /// 
            /// </summary>
            public delegate void TexCoord4sv(IntPtr v);
            public static TexCoord4sv glTexCoord4sv = (TexCoord4sv)GetDelegateForExtensionMethod("glTexCoord4sv", typeof(Delegates.TexCoord4sv));

            #endregion TexCoord4sv

            #region Vertex2d

            /// <summary>
            /// 
            /// </summary>
            public delegate void Vertex2d(GLdouble x, GLdouble y);
            public static Vertex2d glVertex2d = (Vertex2d)GetDelegateForExtensionMethod("glVertex2d", typeof(Delegates.Vertex2d));

            #endregion Vertex2d

            #region Vertex2dv

            /// <summary>
            /// 
            /// </summary>
            public delegate void Vertex2dv(IntPtr v);
            public static Vertex2dv glVertex2dv = (Vertex2dv)GetDelegateForExtensionMethod("glVertex2dv", typeof(Delegates.Vertex2dv));

            #endregion Vertex2dv

            #region Vertex2f

            /// <summary>
            /// 
            /// </summary>
            public delegate void Vertex2f(GLfloat x, GLfloat y);
            public static Vertex2f glVertex2f = (Vertex2f)GetDelegateForExtensionMethod("glVertex2f", typeof(Delegates.Vertex2f));

            #endregion Vertex2f

            #region Vertex2fv

            /// <summary>
            /// 
            /// </summary>
            public delegate void Vertex2fv(IntPtr v);
            public static Vertex2fv glVertex2fv = (Vertex2fv)GetDelegateForExtensionMethod("glVertex2fv", typeof(Delegates.Vertex2fv));

            #endregion Vertex2fv

            #region Vertex2i

            /// <summary>
            /// 
            /// </summary>
            public delegate void Vertex2i(GLint x, GLint y);
            public static Vertex2i glVertex2i = (Vertex2i)GetDelegateForExtensionMethod("glVertex2i", typeof(Delegates.Vertex2i));

            #endregion Vertex2i

            #region Vertex2iv

            /// <summary>
            /// 
            /// </summary>
            public delegate void Vertex2iv(IntPtr v);
            public static Vertex2iv glVertex2iv = (Vertex2iv)GetDelegateForExtensionMethod("glVertex2iv", typeof(Delegates.Vertex2iv));

            #endregion Vertex2iv

            #region Vertex2s

            /// <summary>
            /// 
            /// </summary>
            public delegate void Vertex2s(GLshort x, GLshort y);
            public static Vertex2s glVertex2s = (Vertex2s)GetDelegateForExtensionMethod("glVertex2s", typeof(Delegates.Vertex2s));

            #endregion Vertex2s

            #region Vertex2sv

            /// <summary>
            /// 
            /// </summary>
            public delegate void Vertex2sv(IntPtr v);
            public static Vertex2sv glVertex2sv = (Vertex2sv)GetDelegateForExtensionMethod("glVertex2sv", typeof(Delegates.Vertex2sv));

            #endregion Vertex2sv

            #region Vertex3d

            /// <summary>
            /// 
            /// </summary>
            public delegate void Vertex3d(GLdouble x, GLdouble y, GLdouble z);
            public static Vertex3d glVertex3d = (Vertex3d)GetDelegateForExtensionMethod("glVertex3d", typeof(Delegates.Vertex3d));

            #endregion Vertex3d

            #region Vertex3dv

            /// <summary>
            /// 
            /// </summary>
            public delegate void Vertex3dv(IntPtr v);
            public static Vertex3dv glVertex3dv = (Vertex3dv)GetDelegateForExtensionMethod("glVertex3dv", typeof(Delegates.Vertex3dv));

            #endregion Vertex3dv

            #region Vertex3f

            /// <summary>
            /// 
            /// </summary>
            public delegate void Vertex3f(GLfloat x, GLfloat y, GLfloat z);
            public static Vertex3f glVertex3f = (Vertex3f)GetDelegateForExtensionMethod("glVertex3f", typeof(Delegates.Vertex3f));

            #endregion Vertex3f

            #region Vertex3fv

            /// <summary>
            /// 
            /// </summary>
            public delegate void Vertex3fv(IntPtr v);
            public static Vertex3fv glVertex3fv = (Vertex3fv)GetDelegateForExtensionMethod("glVertex3fv", typeof(Delegates.Vertex3fv));

            #endregion Vertex3fv

            #region Vertex3i

            /// <summary>
            /// 
            /// </summary>
            public delegate void Vertex3i(GLint x, GLint y, GLint z);
            public static Vertex3i glVertex3i = (Vertex3i)GetDelegateForExtensionMethod("glVertex3i", typeof(Delegates.Vertex3i));

            #endregion Vertex3i

            #region Vertex3iv

            /// <summary>
            /// 
            /// </summary>
            public delegate void Vertex3iv(IntPtr v);
            public static Vertex3iv glVertex3iv = (Vertex3iv)GetDelegateForExtensionMethod("glVertex3iv", typeof(Delegates.Vertex3iv));

            #endregion Vertex3iv

            #region Vertex3s

            /// <summary>
            /// 
            /// </summary>
            public delegate void Vertex3s(GLshort x, GLshort y, GLshort z);
            public static Vertex3s glVertex3s = (Vertex3s)GetDelegateForExtensionMethod("glVertex3s", typeof(Delegates.Vertex3s));

            #endregion Vertex3s

            #region Vertex3sv

            /// <summary>
            /// 
            /// </summary>
            public delegate void Vertex3sv(IntPtr v);
            public static Vertex3sv glVertex3sv = (Vertex3sv)GetDelegateForExtensionMethod("glVertex3sv", typeof(Delegates.Vertex3sv));

            #endregion Vertex3sv

            #region Vertex4d

            /// <summary>
            /// 
            /// </summary>
            public delegate void Vertex4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
            public static Vertex4d glVertex4d = (Vertex4d)GetDelegateForExtensionMethod("glVertex4d", typeof(Delegates.Vertex4d));

            #endregion Vertex4d

            #region Vertex4dv

            /// <summary>
            /// 
            /// </summary>
            public delegate void Vertex4dv(IntPtr v);
            public static Vertex4dv glVertex4dv = (Vertex4dv)GetDelegateForExtensionMethod("glVertex4dv", typeof(Delegates.Vertex4dv));

            #endregion Vertex4dv

            #region Vertex4f

            /// <summary>
            /// 
            /// </summary>
            public delegate void Vertex4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
            public static Vertex4f glVertex4f = (Vertex4f)GetDelegateForExtensionMethod("glVertex4f", typeof(Delegates.Vertex4f));

            #endregion Vertex4f

            #region Vertex4fv

            /// <summary>
            /// 
            /// </summary>
            public delegate void Vertex4fv(IntPtr v);
            public static Vertex4fv glVertex4fv = (Vertex4fv)GetDelegateForExtensionMethod("glVertex4fv", typeof(Delegates.Vertex4fv));

            #endregion Vertex4fv

            #region Vertex4i

            /// <summary>
            /// 
            /// </summary>
            public delegate void Vertex4i(GLint x, GLint y, GLint z, GLint w);
            public static Vertex4i glVertex4i = (Vertex4i)GetDelegateForExtensionMethod("glVertex4i", typeof(Delegates.Vertex4i));

            #endregion Vertex4i

            #region Vertex4iv

            /// <summary>
            /// 
            /// </summary>
            public delegate void Vertex4iv(IntPtr v);
            public static Vertex4iv glVertex4iv = (Vertex4iv)GetDelegateForExtensionMethod("glVertex4iv", typeof(Delegates.Vertex4iv));

            #endregion Vertex4iv

            #region Vertex4s

            /// <summary>
            /// 
            /// </summary>
            public delegate void Vertex4s(GLshort x, GLshort y, GLshort z, GLshort w);
            public static Vertex4s glVertex4s = (Vertex4s)GetDelegateForExtensionMethod("glVertex4s", typeof(Delegates.Vertex4s));

            #endregion Vertex4s

            #region Vertex4sv

            /// <summary>
            /// 
            /// </summary>
            public delegate void Vertex4sv(IntPtr v);
            public static Vertex4sv glVertex4sv = (Vertex4sv)GetDelegateForExtensionMethod("glVertex4sv", typeof(Delegates.Vertex4sv));

            #endregion Vertex4sv

            #region ClipPlane

            /// <summary>
            /// 
            /// </summary>
            public delegate void ClipPlane(GLenum plane, IntPtr equation);
            public static ClipPlane glClipPlane = (ClipPlane)GetDelegateForExtensionMethod("glClipPlane", typeof(Delegates.ClipPlane));

            #endregion ClipPlane

            #region ColorMaterial

            /// <summary>
            /// 
            /// </summary>
            public delegate void ColorMaterial(GLenum face, GLenum mode);
            public static ColorMaterial glColorMaterial = (ColorMaterial)GetDelegateForExtensionMethod("glColorMaterial", typeof(Delegates.ColorMaterial));

            #endregion ColorMaterial

            #region CullFace

            /// <summary>
            /// 
            /// </summary>
            public delegate void CullFace(GLenum mode);
            public static CullFace glCullFace = (CullFace)GetDelegateForExtensionMethod("glCullFace", typeof(Delegates.CullFace));

            #endregion CullFace

            #region Fogf

            /// <summary>
            /// 
            /// </summary>
            public delegate void Fogf(GLenum pname, GLfloat param);
            public static Fogf glFogf = (Fogf)GetDelegateForExtensionMethod("glFogf", typeof(Delegates.Fogf));

            #endregion Fogf

            #region Fogfv

            /// <summary>
            /// 
            /// </summary>
            public delegate void Fogfv(GLenum pname, IntPtr parameters);
            public static Fogfv glFogfv = (Fogfv)GetDelegateForExtensionMethod("glFogfv", typeof(Delegates.Fogfv));

            #endregion Fogfv

            #region Fogi

            /// <summary>
            /// 
            /// </summary>
            public delegate void Fogi(GLenum pname, GLint param);
            public static Fogi glFogi = (Fogi)GetDelegateForExtensionMethod("glFogi", typeof(Delegates.Fogi));

            #endregion Fogi

            #region Fogiv

            /// <summary>
            /// 
            /// </summary>
            public delegate void Fogiv(GLenum pname, IntPtr parameters);
            public static Fogiv glFogiv = (Fogiv)GetDelegateForExtensionMethod("glFogiv", typeof(Delegates.Fogiv));

            #endregion Fogiv

            #region FrontFace

            /// <summary>
            /// 
            /// </summary>
            public delegate void FrontFace(GLenum mode);
            public static FrontFace glFrontFace = (FrontFace)GetDelegateForExtensionMethod("glFrontFace", typeof(Delegates.FrontFace));

            #endregion FrontFace

            #region Hint

            /// <summary>
            /// 
            /// </summary>
            public delegate void Hint(GLenum target, GLenum mode);
            public static Hint glHint = (Hint)GetDelegateForExtensionMethod("glHint", typeof(Delegates.Hint));

            #endregion Hint

            #region Lightf

            /// <summary>
            /// 
            /// </summary>
            public delegate void Lightf(GLenum light, GLenum pname, GLfloat param);
            public static Lightf glLightf = (Lightf)GetDelegateForExtensionMethod("glLightf", typeof(Delegates.Lightf));

            #endregion Lightf

            #region Lightfv

            /// <summary>
            /// 
            /// </summary>
            public delegate void Lightfv(GLenum light, GLenum pname, IntPtr parameters);
            public static Lightfv glLightfv = (Lightfv)GetDelegateForExtensionMethod("glLightfv", typeof(Delegates.Lightfv));

            #endregion Lightfv

            #region Lighti

            /// <summary>
            /// 
            /// </summary>
            public delegate void Lighti(GLenum light, GLenum pname, GLint param);
            public static Lighti glLighti = (Lighti)GetDelegateForExtensionMethod("glLighti", typeof(Delegates.Lighti));

            #endregion Lighti

            #region Lightiv

            /// <summary>
            /// 
            /// </summary>
            public delegate void Lightiv(GLenum light, GLenum pname, IntPtr parameters);
            public static Lightiv glLightiv = (Lightiv)GetDelegateForExtensionMethod("glLightiv", typeof(Delegates.Lightiv));

            #endregion Lightiv

            #region LightModelf

            /// <summary>
            /// 
            /// </summary>
            public delegate void LightModelf(GLenum pname, GLfloat param);
            public static LightModelf glLightModelf = (LightModelf)GetDelegateForExtensionMethod("glLightModelf", typeof(Delegates.LightModelf));

            #endregion LightModelf

            #region LightModelfv

            /// <summary>
            /// 
            /// </summary>
            public delegate void LightModelfv(GLenum pname, IntPtr parameters);
            public static LightModelfv glLightModelfv = (LightModelfv)GetDelegateForExtensionMethod("glLightModelfv", typeof(Delegates.LightModelfv));

            #endregion LightModelfv

            #region LightModeli

            /// <summary>
            /// 
            /// </summary>
            public delegate void LightModeli(GLenum pname, GLint param);
            public static LightModeli glLightModeli = (LightModeli)GetDelegateForExtensionMethod("glLightModeli", typeof(Delegates.LightModeli));

            #endregion LightModeli

            #region LightModeliv

            /// <summary>
            /// 
            /// </summary>
            public delegate void LightModeliv(GLenum pname, IntPtr parameters);
            public static LightModeliv glLightModeliv = (LightModeliv)GetDelegateForExtensionMethod("glLightModeliv", typeof(Delegates.LightModeliv));

            #endregion LightModeliv

            #region LineStipple

            /// <summary>
            /// 
            /// </summary>
            public delegate void LineStipple(GLint factor, GLushort pattern);
            public static LineStipple glLineStipple = (LineStipple)GetDelegateForExtensionMethod("glLineStipple", typeof(Delegates.LineStipple));

            #endregion LineStipple

            #region LineWidth

            /// <summary>
            /// 
            /// </summary>
            public delegate void LineWidth(GLfloat width);
            public static LineWidth glLineWidth = (LineWidth)GetDelegateForExtensionMethod("glLineWidth", typeof(Delegates.LineWidth));

            #endregion LineWidth

            #region Materialf

            /// <summary>
            /// 
            /// </summary>
            public delegate void Materialf(GLenum face, GLenum pname, GLfloat param);
            public static Materialf glMaterialf = (Materialf)GetDelegateForExtensionMethod("glMaterialf", typeof(Delegates.Materialf));

            #endregion Materialf

            #region Materialfv

            /// <summary>
            /// 
            /// </summary>
            public delegate void Materialfv(GLenum face, GLenum pname, IntPtr parameters);
            public static Materialfv glMaterialfv = (Materialfv)GetDelegateForExtensionMethod("glMaterialfv", typeof(Delegates.Materialfv));

            #endregion Materialfv

            #region Materiali

            /// <summary>
            /// 
            /// </summary>
            public delegate void Materiali(GLenum face, GLenum pname, GLint param);
            public static Materiali glMateriali = (Materiali)GetDelegateForExtensionMethod("glMateriali", typeof(Delegates.Materiali));

            #endregion Materiali

            #region Materialiv

            /// <summary>
            /// 
            /// </summary>
            public delegate void Materialiv(GLenum face, GLenum pname, IntPtr parameters);
            public static Materialiv glMaterialiv = (Materialiv)GetDelegateForExtensionMethod("glMaterialiv", typeof(Delegates.Materialiv));

            #endregion Materialiv

            #region PointSize

            /// <summary>
            /// 
            /// </summary>
            public delegate void PointSize(GLfloat size);
            public static PointSize glPointSize = (PointSize)GetDelegateForExtensionMethod("glPointSize", typeof(Delegates.PointSize));

            #endregion PointSize

            #region PolygonMode

            /// <summary>
            /// 
            /// </summary>
            public delegate void PolygonMode(GLenum face, GLenum mode);
            public static PolygonMode glPolygonMode = (PolygonMode)GetDelegateForExtensionMethod("glPolygonMode", typeof(Delegates.PolygonMode));

            #endregion PolygonMode

            #region PolygonStipple

            /// <summary>
            /// 
            /// </summary>
            public delegate void PolygonStipple(IntPtr mask);
            public static PolygonStipple glPolygonStipple = (PolygonStipple)GetDelegateForExtensionMethod("glPolygonStipple", typeof(Delegates.PolygonStipple));

            #endregion PolygonStipple

            #region Scissor

            /// <summary>
            /// 
            /// </summary>
            public delegate void Scissor(GLint x, GLint y, GLsizei width, GLsizei height);
            public static Scissor glScissor = (Scissor)GetDelegateForExtensionMethod("glScissor", typeof(Delegates.Scissor));

            #endregion Scissor

            #region ShadeModel

            /// <summary>
            /// 
            /// </summary>
            public delegate void ShadeModel(GLenum mode);
            public static ShadeModel glShadeModel = (ShadeModel)GetDelegateForExtensionMethod("glShadeModel", typeof(Delegates.ShadeModel));

            #endregion ShadeModel

            #region TexParameterf

            /// <summary>
            /// 
            /// </summary>
            public delegate void TexParameterf(GLenum target, GLenum pname, GLfloat param);
            public static TexParameterf glTexParameterf = (TexParameterf)GetDelegateForExtensionMethod("glTexParameterf", typeof(Delegates.TexParameterf));

            #endregion TexParameterf

            #region TexParameterfv

            /// <summary>
            /// 
            /// </summary>
            public delegate void TexParameterfv(GLenum target, GLenum pname, IntPtr parameters);
            public static TexParameterfv glTexParameterfv = (TexParameterfv)GetDelegateForExtensionMethod("glTexParameterfv", typeof(Delegates.TexParameterfv));

            #endregion TexParameterfv

            #region TexParameteri

            /// <summary>
            /// 
            /// </summary>
            public delegate void TexParameteri(GLenum target, GLenum pname, GLint param);
            public static TexParameteri glTexParameteri = (TexParameteri)GetDelegateForExtensionMethod("glTexParameteri", typeof(Delegates.TexParameteri));

            #endregion TexParameteri

            #region TexParameteriv

            /// <summary>
            /// 
            /// </summary>
            public delegate void TexParameteriv(GLenum target, GLenum pname, IntPtr parameters);
            public static TexParameteriv glTexParameteriv = (TexParameteriv)GetDelegateForExtensionMethod("glTexParameteriv", typeof(Delegates.TexParameteriv));

            #endregion TexParameteriv

            #region TexImage1D

            /// <summary>
            /// 
            /// </summary>
            public delegate void TexImage1D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, IntPtr pixels);
            public static TexImage1D glTexImage1D = (TexImage1D)GetDelegateForExtensionMethod("glTexImage1D", typeof(Delegates.TexImage1D));

            #endregion TexImage1D

            #region TexImage2D

            /// <summary>
            /// 
            /// </summary>
            public delegate void TexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, IntPtr pixels);
            public static TexImage2D glTexImage2D = (TexImage2D)GetDelegateForExtensionMethod("glTexImage2D", typeof(Delegates.TexImage2D));

            #endregion TexImage2D

            #region TexEnvf

            /// <summary>
            /// 
            /// </summary>
            public delegate void TexEnvf(GLenum target, GLenum pname, GLfloat param);
            public static TexEnvf glTexEnvf = (TexEnvf)GetDelegateForExtensionMethod("glTexEnvf", typeof(Delegates.TexEnvf));

            #endregion TexEnvf

            #region TexEnvfv

            /// <summary>
            /// 
            /// </summary>
            public delegate void TexEnvfv(GLenum target, GLenum pname, IntPtr parameters);
            public static TexEnvfv glTexEnvfv = (TexEnvfv)GetDelegateForExtensionMethod("glTexEnvfv", typeof(Delegates.TexEnvfv));

            #endregion TexEnvfv

            #region TexEnvi

            /// <summary>
            /// 
            /// </summary>
            public delegate void TexEnvi(GLenum target, GLenum pname, GLint param);
            public static TexEnvi glTexEnvi = (TexEnvi)GetDelegateForExtensionMethod("glTexEnvi", typeof(Delegates.TexEnvi));

            #endregion TexEnvi

            #region TexEnviv

            /// <summary>
            /// 
            /// </summary>
            public delegate void TexEnviv(GLenum target, GLenum pname, IntPtr parameters);
            public static TexEnviv glTexEnviv = (TexEnviv)GetDelegateForExtensionMethod("glTexEnviv", typeof(Delegates.TexEnviv));

            #endregion TexEnviv

            #region TexGend

            /// <summary>
            /// 
            /// </summary>
            public delegate void TexGend(GLenum coord, GLenum pname, GLdouble param);
            public static TexGend glTexGend = (TexGend)GetDelegateForExtensionMethod("glTexGend", typeof(Delegates.TexGend));

            #endregion TexGend

            #region TexGendv

            /// <summary>
            /// 
            /// </summary>
            public delegate void TexGendv(GLenum coord, GLenum pname, IntPtr parameters);
            public static TexGendv glTexGendv = (TexGendv)GetDelegateForExtensionMethod("glTexGendv", typeof(Delegates.TexGendv));

            #endregion TexGendv

            #region TexGenf

            /// <summary>
            /// 
            /// </summary>
            public delegate void TexGenf(GLenum coord, GLenum pname, GLfloat param);
            public static TexGenf glTexGenf = (TexGenf)GetDelegateForExtensionMethod("glTexGenf", typeof(Delegates.TexGenf));

            #endregion TexGenf

            #region TexGenfv

            /// <summary>
            /// 
            /// </summary>
            public delegate void TexGenfv(GLenum coord, GLenum pname, IntPtr parameters);
            public static TexGenfv glTexGenfv = (TexGenfv)GetDelegateForExtensionMethod("glTexGenfv", typeof(Delegates.TexGenfv));

            #endregion TexGenfv

            #region TexGeni

            /// <summary>
            /// 
            /// </summary>
            public delegate void TexGeni(GLenum coord, GLenum pname, GLint param);
            public static TexGeni glTexGeni = (TexGeni)GetDelegateForExtensionMethod("glTexGeni", typeof(Delegates.TexGeni));

            #endregion TexGeni

            #region TexGeniv

            /// <summary>
            /// 
            /// </summary>
            public delegate void TexGeniv(GLenum coord, GLenum pname, IntPtr parameters);
            public static TexGeniv glTexGeniv = (TexGeniv)GetDelegateForExtensionMethod("glTexGeniv", typeof(Delegates.TexGeniv));

            #endregion TexGeniv

            #region FeedbackBuffer

            /// <summary>
            /// 
            /// </summary>
            public delegate void FeedbackBuffer(GLsizei size, GLenum type, IntPtr buffer);
            public static FeedbackBuffer glFeedbackBuffer = (FeedbackBuffer)GetDelegateForExtensionMethod("glFeedbackBuffer", typeof(Delegates.FeedbackBuffer));

            #endregion FeedbackBuffer

            #region SelectBuffer

            /// <summary>
            /// 
            /// </summary>
            public delegate void SelectBuffer(GLsizei size, IntPtr buffer);
            public static SelectBuffer glSelectBuffer = (SelectBuffer)GetDelegateForExtensionMethod("glSelectBuffer", typeof(Delegates.SelectBuffer));

            #endregion SelectBuffer

            #region RenderMode

            /// <summary>
            /// 
            /// </summary>
            public delegate GLint RenderMode(GLenum mode);
            public static RenderMode glRenderMode = (RenderMode)GetDelegateForExtensionMethod("glRenderMode", typeof(Delegates.RenderMode));

            #endregion RenderMode

            #region InitNames

            /// <summary>
            /// 
            /// </summary>
            public delegate void InitNames();
            public static InitNames glInitNames = (InitNames)GetDelegateForExtensionMethod("glInitNames", typeof(Delegates.InitNames));

            #endregion InitNames

            #region LoadName

            /// <summary>
            /// 
            /// </summary>
            public delegate void LoadName(GLuint name);
            public static LoadName glLoadName = (LoadName)GetDelegateForExtensionMethod("glLoadName", typeof(Delegates.LoadName));

            #endregion LoadName

            #region PassThrough

            /// <summary>
            /// 
            /// </summary>
            public delegate void PassThrough(GLfloat token);
            public static PassThrough glPassThrough = (PassThrough)GetDelegateForExtensionMethod("glPassThrough", typeof(Delegates.PassThrough));

            #endregion PassThrough

            #region PopName

            /// <summary>
            /// 
            /// </summary>
            public delegate void PopName();
            public static PopName glPopName = (PopName)GetDelegateForExtensionMethod("glPopName", typeof(Delegates.PopName));

            #endregion PopName

            #region PushName

            /// <summary>
            /// 
            /// </summary>
            public delegate void PushName(GLuint name);
            public static PushName glPushName = (PushName)GetDelegateForExtensionMethod("glPushName", typeof(Delegates.PushName));

            #endregion PushName

            #region DrawBuffer

            /// <summary>
            /// 
            /// </summary>
            public delegate void DrawBuffer(GLenum mode);
            public static DrawBuffer glDrawBuffer = (DrawBuffer)GetDelegateForExtensionMethod("glDrawBuffer", typeof(Delegates.DrawBuffer));

            #endregion DrawBuffer

            #region Clear

            /// <summary>
            /// 
            /// </summary>
            public delegate void Clear(GLbitfield mask);
            public static Clear glClear = (Clear)GetDelegateForExtensionMethod("glClear", typeof(Delegates.Clear));

            #endregion Clear

            #region ClearAccum

            /// <summary>
            /// 
            /// </summary>
            public delegate void ClearAccum(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
            public static ClearAccum glClearAccum = (ClearAccum)GetDelegateForExtensionMethod("glClearAccum", typeof(Delegates.ClearAccum));

            #endregion ClearAccum

            #region ClearIndex

            /// <summary>
            /// 
            /// </summary>
            public delegate void ClearIndex(GLfloat c);
            public static ClearIndex glClearIndex = (ClearIndex)GetDelegateForExtensionMethod("glClearIndex", typeof(Delegates.ClearIndex));

            #endregion ClearIndex

            #region ClearColor

            /// <summary>
            /// 
            /// </summary>
            public delegate void ClearColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
            public static ClearColor glClearColor = (ClearColor)GetDelegateForExtensionMethod("glClearColor", typeof(Delegates.ClearColor));

            #endregion ClearColor

            #region ClearStencil

            /// <summary>
            /// 
            /// </summary>
            public delegate void ClearStencil(GLint s);
            public static ClearStencil glClearStencil = (ClearStencil)GetDelegateForExtensionMethod("glClearStencil", typeof(Delegates.ClearStencil));

            #endregion ClearStencil

            #region ClearDepth

            /// <summary>
            /// 
            /// </summary>
            public delegate void ClearDepth(GLclampd depth);
            public static ClearDepth glClearDepth = (ClearDepth)GetDelegateForExtensionMethod("glClearDepth", typeof(Delegates.ClearDepth));

            #endregion ClearDepth

            #region StencilMask

            /// <summary>
            /// 
            /// </summary>
            public delegate void StencilMask(GLuint mask);
            public static StencilMask glStencilMask = (StencilMask)GetDelegateForExtensionMethod("glStencilMask", typeof(Delegates.StencilMask));

            #endregion StencilMask

            #region ColorMask

            /// <summary>
            /// 
            /// </summary>
            public delegate void ColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
            public static ColorMask glColorMask = (ColorMask)GetDelegateForExtensionMethod("glColorMask", typeof(Delegates.ColorMask));

            #endregion ColorMask

            #region DepthMask

            /// <summary>
            /// 
            /// </summary>
            public delegate void DepthMask(GLboolean flag);
            public static DepthMask glDepthMask = (DepthMask)GetDelegateForExtensionMethod("glDepthMask", typeof(Delegates.DepthMask));

            #endregion DepthMask

            #region IndexMask

            /// <summary>
            /// 
            /// </summary>
            public delegate void IndexMask(GLuint mask);
            public static IndexMask glIndexMask = (IndexMask)GetDelegateForExtensionMethod("glIndexMask", typeof(Delegates.IndexMask));

            #endregion IndexMask

            #region Accum

            /// <summary>
            /// 
            /// </summary>
            public delegate void Accum(GLenum op, GLfloat value);
            public static Accum glAccum = (Accum)GetDelegateForExtensionMethod("glAccum", typeof(Delegates.Accum));

            #endregion Accum

            #region Disable

            /// <summary>
            /// 
            /// </summary>
            public delegate void Disable(GLenum cap);
            public static Disable glDisable = (Disable)GetDelegateForExtensionMethod("glDisable", typeof(Delegates.Disable));

            #endregion Disable

            #region Enable

            /// <summary>
            /// 
            /// </summary>
            public delegate void Enable(GLenum cap);
            public static Enable glEnable = (Enable)GetDelegateForExtensionMethod("glEnable", typeof(Delegates.Enable));

            #endregion Enable

            #region Finish

            /// <summary>
            /// 
            /// </summary>
            public delegate void Finish();
            public static Finish glFinish = (Finish)GetDelegateForExtensionMethod("glFinish", typeof(Delegates.Finish));

            #endregion Finish

            #region Flush

            /// <summary>
            /// 
            /// </summary>
            public delegate void Flush();
            public static Flush glFlush = (Flush)GetDelegateForExtensionMethod("glFlush", typeof(Delegates.Flush));

            #endregion Flush

            #region PopAttrib

            /// <summary>
            /// 
            /// </summary>
            public delegate void PopAttrib();
            public static PopAttrib glPopAttrib = (PopAttrib)GetDelegateForExtensionMethod("glPopAttrib", typeof(Delegates.PopAttrib));

            #endregion PopAttrib

            #region PushAttrib

            /// <summary>
            /// 
            /// </summary>
            public delegate void PushAttrib(GLbitfield mask);
            public static PushAttrib glPushAttrib = (PushAttrib)GetDelegateForExtensionMethod("glPushAttrib", typeof(Delegates.PushAttrib));

            #endregion PushAttrib

            #region Map1d

            /// <summary>
            /// 
            /// </summary>
            public delegate void Map1d(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, IntPtr points);
            public static Map1d glMap1d = (Map1d)GetDelegateForExtensionMethod("glMap1d", typeof(Delegates.Map1d));

            #endregion Map1d

            #region Map1f

            /// <summary>
            /// 
            /// </summary>
            public delegate void Map1f(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, IntPtr points);
            public static Map1f glMap1f = (Map1f)GetDelegateForExtensionMethod("glMap1f", typeof(Delegates.Map1f));

            #endregion Map1f

            #region Map2d

            /// <summary>
            /// 
            /// </summary>
            public delegate void Map2d(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, IntPtr points);
            public static Map2d glMap2d = (Map2d)GetDelegateForExtensionMethod("glMap2d", typeof(Delegates.Map2d));

            #endregion Map2d

            #region Map2f

            /// <summary>
            /// 
            /// </summary>
            public delegate void Map2f(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, IntPtr points);
            public static Map2f glMap2f = (Map2f)GetDelegateForExtensionMethod("glMap2f", typeof(Delegates.Map2f));

            #endregion Map2f

            #region MapGrid1d

            /// <summary>
            /// 
            /// </summary>
            public delegate void MapGrid1d(GLint un, GLdouble u1, GLdouble u2);
            public static MapGrid1d glMapGrid1d = (MapGrid1d)GetDelegateForExtensionMethod("glMapGrid1d", typeof(Delegates.MapGrid1d));

            #endregion MapGrid1d

            #region MapGrid1f

            /// <summary>
            /// 
            /// </summary>
            public delegate void MapGrid1f(GLint un, GLfloat u1, GLfloat u2);
            public static MapGrid1f glMapGrid1f = (MapGrid1f)GetDelegateForExtensionMethod("glMapGrid1f", typeof(Delegates.MapGrid1f));

            #endregion MapGrid1f

            #region MapGrid2d

            /// <summary>
            /// 
            /// </summary>
            public delegate void MapGrid2d(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2);
            public static MapGrid2d glMapGrid2d = (MapGrid2d)GetDelegateForExtensionMethod("glMapGrid2d", typeof(Delegates.MapGrid2d));

            #endregion MapGrid2d

            #region MapGrid2f

            /// <summary>
            /// 
            /// </summary>
            public delegate void MapGrid2f(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2);
            public static MapGrid2f glMapGrid2f = (MapGrid2f)GetDelegateForExtensionMethod("glMapGrid2f", typeof(Delegates.MapGrid2f));

            #endregion MapGrid2f

            #region EvalCoord1d

            /// <summary>
            /// 
            /// </summary>
            public delegate void EvalCoord1d(GLdouble u);
            public static EvalCoord1d glEvalCoord1d = (EvalCoord1d)GetDelegateForExtensionMethod("glEvalCoord1d", typeof(Delegates.EvalCoord1d));

            #endregion EvalCoord1d

            #region EvalCoord1dv

            /// <summary>
            /// 
            /// </summary>
            public delegate void EvalCoord1dv(IntPtr u);
            public static EvalCoord1dv glEvalCoord1dv = (EvalCoord1dv)GetDelegateForExtensionMethod("glEvalCoord1dv", typeof(Delegates.EvalCoord1dv));

            #endregion EvalCoord1dv

            #region EvalCoord1f

            /// <summary>
            /// 
            /// </summary>
            public delegate void EvalCoord1f(GLfloat u);
            public static EvalCoord1f glEvalCoord1f = (EvalCoord1f)GetDelegateForExtensionMethod("glEvalCoord1f", typeof(Delegates.EvalCoord1f));

            #endregion EvalCoord1f

            #region EvalCoord1fv

            /// <summary>
            /// 
            /// </summary>
            public delegate void EvalCoord1fv(IntPtr u);
            public static EvalCoord1fv glEvalCoord1fv = (EvalCoord1fv)GetDelegateForExtensionMethod("glEvalCoord1fv", typeof(Delegates.EvalCoord1fv));

            #endregion EvalCoord1fv

            #region EvalCoord2d

            /// <summary>
            /// 
            /// </summary>
            public delegate void EvalCoord2d(GLdouble u, GLdouble v);
            public static EvalCoord2d glEvalCoord2d = (EvalCoord2d)GetDelegateForExtensionMethod("glEvalCoord2d", typeof(Delegates.EvalCoord2d));

            #endregion EvalCoord2d

            #region EvalCoord2dv

            /// <summary>
            /// 
            /// </summary>
            public delegate void EvalCoord2dv(IntPtr u);
            public static EvalCoord2dv glEvalCoord2dv = (EvalCoord2dv)GetDelegateForExtensionMethod("glEvalCoord2dv", typeof(Delegates.EvalCoord2dv));

            #endregion EvalCoord2dv

            #region EvalCoord2f

            /// <summary>
            /// 
            /// </summary>
            public delegate void EvalCoord2f(GLfloat u, GLfloat v);
            public static EvalCoord2f glEvalCoord2f = (EvalCoord2f)GetDelegateForExtensionMethod("glEvalCoord2f", typeof(Delegates.EvalCoord2f));

            #endregion EvalCoord2f

            #region EvalCoord2fv

            /// <summary>
            /// 
            /// </summary>
            public delegate void EvalCoord2fv(IntPtr u);
            public static EvalCoord2fv glEvalCoord2fv = (EvalCoord2fv)GetDelegateForExtensionMethod("glEvalCoord2fv", typeof(Delegates.EvalCoord2fv));

            #endregion EvalCoord2fv

            #region EvalMesh1

            /// <summary>
            /// 
            /// </summary>
            public delegate void EvalMesh1(GLenum mode, GLint i1, GLint i2);
            public static EvalMesh1 glEvalMesh1 = (EvalMesh1)GetDelegateForExtensionMethod("glEvalMesh1", typeof(Delegates.EvalMesh1));

            #endregion EvalMesh1

            #region EvalPoint1

            /// <summary>
            /// 
            /// </summary>
            public delegate void EvalPoint1(GLint i);
            public static EvalPoint1 glEvalPoint1 = (EvalPoint1)GetDelegateForExtensionMethod("glEvalPoint1", typeof(Delegates.EvalPoint1));

            #endregion EvalPoint1

            #region EvalMesh2

            /// <summary>
            /// 
            /// </summary>
            public delegate void EvalMesh2(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2);
            public static EvalMesh2 glEvalMesh2 = (EvalMesh2)GetDelegateForExtensionMethod("glEvalMesh2", typeof(Delegates.EvalMesh2));

            #endregion EvalMesh2

            #region EvalPoint2

            /// <summary>
            /// 
            /// </summary>
            public delegate void EvalPoint2(GLint i, GLint j);
            public static EvalPoint2 glEvalPoint2 = (EvalPoint2)GetDelegateForExtensionMethod("glEvalPoint2", typeof(Delegates.EvalPoint2));

            #endregion EvalPoint2

            #region AlphaFunc

            /// <summary>
            /// 
            /// </summary>
            public delegate void AlphaFunc(GLenum func, GLclampf reference);
            public static AlphaFunc glAlphaFunc = (AlphaFunc)GetDelegateForExtensionMethod("glAlphaFunc", typeof(Delegates.AlphaFunc));

            #endregion AlphaFunc

            #region BlendFunc

            /// <summary>
            /// 
            /// </summary>
            public delegate void BlendFunc(GLenum sfactor, GLenum dfactor);
            public static BlendFunc glBlendFunc = (BlendFunc)GetDelegateForExtensionMethod("glBlendFunc", typeof(Delegates.BlendFunc));

            #endregion BlendFunc

            #region LogicOp

            /// <summary>
            /// 
            /// </summary>
            public delegate void LogicOp(GLenum opcode);
            public static LogicOp glLogicOp = (LogicOp)GetDelegateForExtensionMethod("glLogicOp", typeof(Delegates.LogicOp));

            #endregion LogicOp

            #region StencilFunc

            /// <summary>
            /// 
            /// </summary>
            public delegate void StencilFunc(GLenum func, GLint reference, GLuint mask);
            public static StencilFunc glStencilFunc = (StencilFunc)GetDelegateForExtensionMethod("glStencilFunc", typeof(Delegates.StencilFunc));

            #endregion StencilFunc

            #region StencilOp

            /// <summary>
            /// 
            /// </summary>
            public delegate void StencilOp(GLenum fail, GLenum zfail, GLenum zpass);
            public static StencilOp glStencilOp = (StencilOp)GetDelegateForExtensionMethod("glStencilOp", typeof(Delegates.StencilOp));

            #endregion StencilOp

            #region DepthFunc

            /// <summary>
            /// 
            /// </summary>
            public delegate void DepthFunc(GLenum func);
            public static DepthFunc glDepthFunc = (DepthFunc)GetDelegateForExtensionMethod("glDepthFunc", typeof(Delegates.DepthFunc));

            #endregion DepthFunc

            #region PixelZoom

            /// <summary>
            /// 
            /// </summary>
            public delegate void PixelZoom(GLfloat xfactor, GLfloat yfactor);
            public static PixelZoom glPixelZoom = (PixelZoom)GetDelegateForExtensionMethod("glPixelZoom", typeof(Delegates.PixelZoom));

            #endregion PixelZoom

            #region PixelTransferf

            /// <summary>
            /// 
            /// </summary>
            public delegate void PixelTransferf(GLenum pname, GLfloat param);
            public static PixelTransferf glPixelTransferf = (PixelTransferf)GetDelegateForExtensionMethod("glPixelTransferf", typeof(Delegates.PixelTransferf));

            #endregion PixelTransferf

            #region PixelTransferi

            /// <summary>
            /// 
            /// </summary>
            public delegate void PixelTransferi(GLenum pname, GLint param);
            public static PixelTransferi glPixelTransferi = (PixelTransferi)GetDelegateForExtensionMethod("glPixelTransferi", typeof(Delegates.PixelTransferi));

            #endregion PixelTransferi

            #region PixelStoref

            /// <summary>
            /// 
            /// </summary>
            public delegate void PixelStoref(GLenum pname, GLfloat param);
            public static PixelStoref glPixelStoref = (PixelStoref)GetDelegateForExtensionMethod("glPixelStoref", typeof(Delegates.PixelStoref));

            #endregion PixelStoref

            #region PixelStorei

            /// <summary>
            /// 
            /// </summary>
            public delegate void PixelStorei(GLenum pname, GLint param);
            public static PixelStorei glPixelStorei = (PixelStorei)GetDelegateForExtensionMethod("glPixelStorei", typeof(Delegates.PixelStorei));

            #endregion PixelStorei

            #region PixelMapfv

            /// <summary>
            /// 
            /// </summary>
            public delegate void PixelMapfv(GLenum map, GLint mapsize, IntPtr values);
            public static PixelMapfv glPixelMapfv = (PixelMapfv)GetDelegateForExtensionMethod("glPixelMapfv", typeof(Delegates.PixelMapfv));

            #endregion PixelMapfv

            #region PixelMapuiv

            /// <summary>
            /// 
            /// </summary>
            public delegate void PixelMapuiv(GLenum map, GLint mapsize, IntPtr values);
            public static PixelMapuiv glPixelMapuiv = (PixelMapuiv)GetDelegateForExtensionMethod("glPixelMapuiv", typeof(Delegates.PixelMapuiv));

            #endregion PixelMapuiv

            #region PixelMapusv

            /// <summary>
            /// 
            /// </summary>
            public delegate void PixelMapusv(GLenum map, GLint mapsize, IntPtr values);
            public static PixelMapusv glPixelMapusv = (PixelMapusv)GetDelegateForExtensionMethod("glPixelMapusv", typeof(Delegates.PixelMapusv));

            #endregion PixelMapusv

            #region ReadBuffer

            /// <summary>
            /// 
            /// </summary>
            public delegate void ReadBuffer(GLenum mode);
            public static ReadBuffer glReadBuffer = (ReadBuffer)GetDelegateForExtensionMethod("glReadBuffer", typeof(Delegates.ReadBuffer));

            #endregion ReadBuffer

            #region CopyPixels

            /// <summary>
            /// 
            /// </summary>
            public delegate void CopyPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type);
            public static CopyPixels glCopyPixels = (CopyPixels)GetDelegateForExtensionMethod("glCopyPixels", typeof(Delegates.CopyPixels));

            #endregion CopyPixels

            #region ReadPixels

            /// <summary>
            /// 
            /// </summary>
            public delegate void ReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, IntPtr pixels);
            public static ReadPixels glReadPixels = (ReadPixels)GetDelegateForExtensionMethod("glReadPixels", typeof(Delegates.ReadPixels));

            #endregion ReadPixels

            #region DrawPixels

            /// <summary>
            /// 
            /// </summary>
            public delegate void DrawPixels(GLsizei width, GLsizei height, GLenum format, GLenum type, IntPtr pixels);
            public static DrawPixels glDrawPixels = (DrawPixels)GetDelegateForExtensionMethod("glDrawPixels", typeof(Delegates.DrawPixels));

            #endregion DrawPixels

            #region GetBooleanv

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetBooleanv(GLenum pname, IntPtr parameters);
            public static GetBooleanv glGetBooleanv = (GetBooleanv)GetDelegateForExtensionMethod("glGetBooleanv", typeof(Delegates.GetBooleanv));

            #endregion GetBooleanv

            #region GetClipPlane

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetClipPlane(GLenum plane, IntPtr equation);
            public static GetClipPlane glGetClipPlane = (GetClipPlane)GetDelegateForExtensionMethod("glGetClipPlane", typeof(Delegates.GetClipPlane));

            #endregion GetClipPlane

            #region GetDoublev

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetDoublev(GLenum pname, IntPtr parameters);
            public static GetDoublev glGetDoublev = (GetDoublev)GetDelegateForExtensionMethod("glGetDoublev", typeof(Delegates.GetDoublev));

            #endregion GetDoublev

            #region GetError

            /// <summary>
            /// 
            /// </summary>
            public delegate GLenum GetError();
            public static GetError glGetError = (GetError)GetDelegateForExtensionMethod("glGetError", typeof(Delegates.GetError));

            #endregion GetError

            #region GetFloatv

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetFloatv(GLenum pname, IntPtr parameters);
            public static GetFloatv glGetFloatv = (GetFloatv)GetDelegateForExtensionMethod("glGetFloatv", typeof(Delegates.GetFloatv));

            #endregion GetFloatv

            #region GetIntegerv

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetIntegerv(GLenum pname, IntPtr parameters);
            public static GetIntegerv glGetIntegerv = (GetIntegerv)GetDelegateForExtensionMethod("glGetIntegerv", typeof(Delegates.GetIntegerv));

            #endregion GetIntegerv

            #region GetLightfv

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetLightfv(GLenum light, GLenum pname, IntPtr parameters);
            public static GetLightfv glGetLightfv = (GetLightfv)GetDelegateForExtensionMethod("glGetLightfv", typeof(Delegates.GetLightfv));

            #endregion GetLightfv

            #region GetLightiv

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetLightiv(GLenum light, GLenum pname, IntPtr parameters);
            public static GetLightiv glGetLightiv = (GetLightiv)GetDelegateForExtensionMethod("glGetLightiv", typeof(Delegates.GetLightiv));

            #endregion GetLightiv

            #region GetMapdv

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetMapdv(GLenum target, GLenum query, IntPtr v);
            public static GetMapdv glGetMapdv = (GetMapdv)GetDelegateForExtensionMethod("glGetMapdv", typeof(Delegates.GetMapdv));

            #endregion GetMapdv

            #region GetMapfv

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetMapfv(GLenum target, GLenum query, IntPtr v);
            public static GetMapfv glGetMapfv = (GetMapfv)GetDelegateForExtensionMethod("glGetMapfv", typeof(Delegates.GetMapfv));

            #endregion GetMapfv

            #region GetMapiv

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetMapiv(GLenum target, GLenum query, IntPtr v);
            public static GetMapiv glGetMapiv = (GetMapiv)GetDelegateForExtensionMethod("glGetMapiv", typeof(Delegates.GetMapiv));

            #endregion GetMapiv

            #region GetMaterialfv

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetMaterialfv(GLenum face, GLenum pname, IntPtr parameters);
            public static GetMaterialfv glGetMaterialfv = (GetMaterialfv)GetDelegateForExtensionMethod("glGetMaterialfv", typeof(Delegates.GetMaterialfv));

            #endregion GetMaterialfv

            #region GetMaterialiv

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetMaterialiv(GLenum face, GLenum pname, IntPtr parameters);
            public static GetMaterialiv glGetMaterialiv = (GetMaterialiv)GetDelegateForExtensionMethod("glGetMaterialiv", typeof(Delegates.GetMaterialiv));

            #endregion GetMaterialiv

            #region GetPixelMapfv

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetPixelMapfv(GLenum map, IntPtr values);
            public static GetPixelMapfv glGetPixelMapfv = (GetPixelMapfv)GetDelegateForExtensionMethod("glGetPixelMapfv", typeof(Delegates.GetPixelMapfv));

            #endregion GetPixelMapfv

            #region GetPixelMapuiv

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetPixelMapuiv(GLenum map, IntPtr values);
            public static GetPixelMapuiv glGetPixelMapuiv = (GetPixelMapuiv)GetDelegateForExtensionMethod("glGetPixelMapuiv", typeof(Delegates.GetPixelMapuiv));

            #endregion GetPixelMapuiv

            #region GetPixelMapusv

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetPixelMapusv(GLenum map, IntPtr values);
            public static GetPixelMapusv glGetPixelMapusv = (GetPixelMapusv)GetDelegateForExtensionMethod("glGetPixelMapusv", typeof(Delegates.GetPixelMapusv));

            #endregion GetPixelMapusv

            #region GetPolygonStipple

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetPolygonStipple(IntPtr mask);
            public static GetPolygonStipple glGetPolygonStipple = (GetPolygonStipple)GetDelegateForExtensionMethod("glGetPolygonStipple", typeof(Delegates.GetPolygonStipple));

            #endregion GetPolygonStipple

            #region GetString

            /// <summary>
            /// 
            /// </summary>
            public delegate IntPtr GetString(GLenum name);
            public static GetString glGetString = (GetString)GetDelegateForExtensionMethod("glGetString", typeof(Delegates.GetString));

            #endregion GetString

            #region GetTexEnvfv

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetTexEnvfv(GLenum target, GLenum pname, IntPtr parameters);
            public static GetTexEnvfv glGetTexEnvfv = (GetTexEnvfv)GetDelegateForExtensionMethod("glGetTexEnvfv", typeof(Delegates.GetTexEnvfv));

            #endregion GetTexEnvfv

            #region GetTexEnviv

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetTexEnviv(GLenum target, GLenum pname, IntPtr parameters);
            public static GetTexEnviv glGetTexEnviv = (GetTexEnviv)GetDelegateForExtensionMethod("glGetTexEnviv", typeof(Delegates.GetTexEnviv));

            #endregion GetTexEnviv

            #region GetTexGendv

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetTexGendv(GLenum coord, GLenum pname, IntPtr parameters);
            public static GetTexGendv glGetTexGendv = (GetTexGendv)GetDelegateForExtensionMethod("glGetTexGendv", typeof(Delegates.GetTexGendv));

            #endregion GetTexGendv

            #region GetTexGenfv

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetTexGenfv(GLenum coord, GLenum pname, IntPtr parameters);
            public static GetTexGenfv glGetTexGenfv = (GetTexGenfv)GetDelegateForExtensionMethod("glGetTexGenfv", typeof(Delegates.GetTexGenfv));

            #endregion GetTexGenfv

            #region GetTexGeniv

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetTexGeniv(GLenum coord, GLenum pname, IntPtr parameters);
            public static GetTexGeniv glGetTexGeniv = (GetTexGeniv)GetDelegateForExtensionMethod("glGetTexGeniv", typeof(Delegates.GetTexGeniv));

            #endregion GetTexGeniv

            #region GetTexImage

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetTexImage(GLenum target, GLint level, GLenum format, GLenum type, IntPtr pixels);
            public static GetTexImage glGetTexImage = (GetTexImage)GetDelegateForExtensionMethod("glGetTexImage", typeof(Delegates.GetTexImage));

            #endregion GetTexImage

            #region GetTexParameterfv

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetTexParameterfv(GLenum target, GLenum pname, IntPtr parameters);
            public static GetTexParameterfv glGetTexParameterfv = (GetTexParameterfv)GetDelegateForExtensionMethod("glGetTexParameterfv", typeof(Delegates.GetTexParameterfv));

            #endregion GetTexParameterfv

            #region GetTexParameteriv

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetTexParameteriv(GLenum target, GLenum pname, IntPtr parameters);
            public static GetTexParameteriv glGetTexParameteriv = (GetTexParameteriv)GetDelegateForExtensionMethod("glGetTexParameteriv", typeof(Delegates.GetTexParameteriv));

            #endregion GetTexParameteriv

            #region GetTexLevelParameterfv

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, IntPtr parameters);
            public static GetTexLevelParameterfv glGetTexLevelParameterfv = (GetTexLevelParameterfv)GetDelegateForExtensionMethod("glGetTexLevelParameterfv", typeof(Delegates.GetTexLevelParameterfv));

            #endregion GetTexLevelParameterfv

            #region GetTexLevelParameteriv

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, IntPtr parameters);
            public static GetTexLevelParameteriv glGetTexLevelParameteriv = (GetTexLevelParameteriv)GetDelegateForExtensionMethod("glGetTexLevelParameteriv", typeof(Delegates.GetTexLevelParameteriv));

            #endregion GetTexLevelParameteriv

            #region IsEnabled

            /// <summary>
            /// 
            /// </summary>
            public delegate GLboolean IsEnabled(GLenum cap);
            public static IsEnabled glIsEnabled = (IsEnabled)GetDelegateForExtensionMethod("glIsEnabled", typeof(Delegates.IsEnabled));

            #endregion IsEnabled

            #region IsList

            /// <summary>
            /// 
            /// </summary>
            public delegate GLboolean IsList(GLuint list);
            public static IsList glIsList = (IsList)GetDelegateForExtensionMethod("glIsList", typeof(Delegates.IsList));

            #endregion IsList

            #region DepthRange

            /// <summary>
            /// 
            /// </summary>
            public delegate void DepthRange(GLclampd near, GLclampd far);
            public static DepthRange glDepthRange = (DepthRange)GetDelegateForExtensionMethod("glDepthRange", typeof(Delegates.DepthRange));

            #endregion DepthRange

            #region Frustum

            /// <summary>
            /// 
            /// </summary>
            public delegate void Frustum(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
            public static Frustum glFrustum = (Frustum)GetDelegateForExtensionMethod("glFrustum", typeof(Delegates.Frustum));

            #endregion Frustum

            #region LoadIdentity

            /// <summary>
            /// 
            /// </summary>
            public delegate void LoadIdentity();
            public static LoadIdentity glLoadIdentity = (LoadIdentity)GetDelegateForExtensionMethod("glLoadIdentity", typeof(Delegates.LoadIdentity));

            #endregion LoadIdentity

            #region LoadMatrixf

            /// <summary>
            /// 
            /// </summary>
            public delegate void LoadMatrixf(IntPtr m);
            public static LoadMatrixf glLoadMatrixf = (LoadMatrixf)GetDelegateForExtensionMethod("glLoadMatrixf", typeof(Delegates.LoadMatrixf));

            #endregion LoadMatrixf

            #region LoadMatrixd

            /// <summary>
            /// 
            /// </summary>
            public delegate void LoadMatrixd(IntPtr m);
            public static LoadMatrixd glLoadMatrixd = (LoadMatrixd)GetDelegateForExtensionMethod("glLoadMatrixd", typeof(Delegates.LoadMatrixd));

            #endregion LoadMatrixd

            #region MatrixMode

            /// <summary>
            /// 
            /// </summary>
            public delegate void MatrixMode(GLenum mode);
            public static MatrixMode glMatrixMode = (MatrixMode)GetDelegateForExtensionMethod("glMatrixMode", typeof(Delegates.MatrixMode));

            #endregion MatrixMode

            #region MultMatrixf

            /// <summary>
            /// 
            /// </summary>
            public delegate void MultMatrixf(IntPtr m);
            public static MultMatrixf glMultMatrixf = (MultMatrixf)GetDelegateForExtensionMethod("glMultMatrixf", typeof(Delegates.MultMatrixf));

            #endregion MultMatrixf

            #region MultMatrixd

            /// <summary>
            /// 
            /// </summary>
            public delegate void MultMatrixd(IntPtr m);
            public static MultMatrixd glMultMatrixd = (MultMatrixd)GetDelegateForExtensionMethod("glMultMatrixd", typeof(Delegates.MultMatrixd));

            #endregion MultMatrixd

            #region Ortho

            /// <summary>
            /// 
            /// </summary>
            public delegate void Ortho(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
            public static Ortho glOrtho = (Ortho)GetDelegateForExtensionMethod("glOrtho", typeof(Delegates.Ortho));

            #endregion Ortho

            #region PopMatrix

            /// <summary>
            /// 
            /// </summary>
            public delegate void PopMatrix();
            public static PopMatrix glPopMatrix = (PopMatrix)GetDelegateForExtensionMethod("glPopMatrix", typeof(Delegates.PopMatrix));

            #endregion PopMatrix

            #region PushMatrix

            /// <summary>
            /// 
            /// </summary>
            public delegate void PushMatrix();
            public static PushMatrix glPushMatrix = (PushMatrix)GetDelegateForExtensionMethod("glPushMatrix", typeof(Delegates.PushMatrix));

            #endregion PushMatrix

            #region Rotated

            /// <summary>
            /// 
            /// </summary>
            public delegate void Rotated(GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
            public static Rotated glRotated = (Rotated)GetDelegateForExtensionMethod("glRotated", typeof(Delegates.Rotated));

            #endregion Rotated

            #region Rotatef

            /// <summary>
            /// 
            /// </summary>
            public delegate void Rotatef(GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
            public static Rotatef glRotatef = (Rotatef)GetDelegateForExtensionMethod("glRotatef", typeof(Delegates.Rotatef));

            #endregion Rotatef

            #region Scaled

            /// <summary>
            /// 
            /// </summary>
            public delegate void Scaled(GLdouble x, GLdouble y, GLdouble z);
            public static Scaled glScaled = (Scaled)GetDelegateForExtensionMethod("glScaled", typeof(Delegates.Scaled));

            #endregion Scaled

            #region Scalef

            /// <summary>
            /// 
            /// </summary>
            public delegate void Scalef(GLfloat x, GLfloat y, GLfloat z);
            public static Scalef glScalef = (Scalef)GetDelegateForExtensionMethod("glScalef", typeof(Delegates.Scalef));

            #endregion Scalef

            #region Translated

            /// <summary>
            /// 
            /// </summary>
            public delegate void Translated(GLdouble x, GLdouble y, GLdouble z);
            public static Translated glTranslated = (Translated)GetDelegateForExtensionMethod("glTranslated", typeof(Delegates.Translated));

            #endregion Translated

            #region Translatef

            /// <summary>
            /// 
            /// </summary>
            public delegate void Translatef(GLfloat x, GLfloat y, GLfloat z);
            public static Translatef glTranslatef = (Translatef)GetDelegateForExtensionMethod("glTranslatef", typeof(Delegates.Translatef));

            #endregion Translatef

            #region Viewport

            /// <summary>
            /// 
            /// </summary>
            public delegate void Viewport(GLint x, GLint y, GLsizei width, GLsizei height);
            public static Viewport glViewport = (Viewport)GetDelegateForExtensionMethod("glViewport", typeof(Delegates.Viewport));

            #endregion Viewport

            #region ArrayElement

            /// <summary>
            /// 
            /// </summary>
            public delegate void ArrayElement(GLint i);
            public static ArrayElement glArrayElement = (ArrayElement)GetDelegateForExtensionMethod("glArrayElement", typeof(Delegates.ArrayElement));

            #endregion ArrayElement

            #region ColorPointer

            /// <summary>
            /// 
            /// </summary>
            public delegate void ColorPointer(GLint size, GLenum type, GLsizei stride, IntPtr pointer);
            public static ColorPointer glColorPointer = (ColorPointer)GetDelegateForExtensionMethod("glColorPointer", typeof(Delegates.ColorPointer));

            #endregion ColorPointer

            #region DisableClientState

            /// <summary>
            /// 
            /// </summary>
            public delegate void DisableClientState(GLenum array);
            public static DisableClientState glDisableClientState = (DisableClientState)GetDelegateForExtensionMethod("glDisableClientState", typeof(Delegates.DisableClientState));

            #endregion DisableClientState

            #region DrawArrays

            /// <summary>
            /// 
            /// </summary>
            public delegate void DrawArrays(GLenum mode, GLint first, GLsizei count);
            public static DrawArrays glDrawArrays = (DrawArrays)GetDelegateForExtensionMethod("glDrawArrays", typeof(Delegates.DrawArrays));

            #endregion DrawArrays

            #region DrawElements

            /// <summary>
            /// 
            /// </summary>
            public delegate void DrawElements(GLenum mode, GLsizei count, GLenum type, IntPtr indices);
            public static DrawElements glDrawElements = (DrawElements)GetDelegateForExtensionMethod("glDrawElements", typeof(Delegates.DrawElements));

            #endregion DrawElements

            #region EdgeFlagPointer

            /// <summary>
            /// 
            /// </summary>
            public delegate void EdgeFlagPointer(GLsizei stride, IntPtr pointer);
            public static EdgeFlagPointer glEdgeFlagPointer = (EdgeFlagPointer)GetDelegateForExtensionMethod("glEdgeFlagPointer", typeof(Delegates.EdgeFlagPointer));

            #endregion EdgeFlagPointer

            #region EnableClientState

            /// <summary>
            /// 
            /// </summary>
            public delegate void EnableClientState(GLenum array);
            public static EnableClientState glEnableClientState = (EnableClientState)GetDelegateForExtensionMethod("glEnableClientState", typeof(Delegates.EnableClientState));

            #endregion EnableClientState

            #region GetPointerv

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetPointerv(GLenum pname, IntPtr parameters);
            public static GetPointerv glGetPointerv = (GetPointerv)GetDelegateForExtensionMethod("glGetPointerv", typeof(Delegates.GetPointerv));

            #endregion GetPointerv

            #region IndexPointer

            /// <summary>
            /// 
            /// </summary>
            public delegate void IndexPointer(GLenum type, GLsizei stride, IntPtr pointer);
            public static IndexPointer glIndexPointer = (IndexPointer)GetDelegateForExtensionMethod("glIndexPointer", typeof(Delegates.IndexPointer));

            #endregion IndexPointer

            #region InterleavedArrays

            /// <summary>
            /// 
            /// </summary>
            public delegate void InterleavedArrays(GLenum format, GLsizei stride, IntPtr pointer);
            public static InterleavedArrays glInterleavedArrays = (InterleavedArrays)GetDelegateForExtensionMethod("glInterleavedArrays", typeof(Delegates.InterleavedArrays));

            #endregion InterleavedArrays

            #region NormalPointer

            /// <summary>
            /// 
            /// </summary>
            public delegate void NormalPointer(GLenum type, GLsizei stride, IntPtr pointer);
            public static NormalPointer glNormalPointer = (NormalPointer)GetDelegateForExtensionMethod("glNormalPointer", typeof(Delegates.NormalPointer));

            #endregion NormalPointer

            #region TexCoordPointer

            /// <summary>
            /// 
            /// </summary>
            public delegate void TexCoordPointer(GLint size, GLenum type, GLsizei stride, IntPtr pointer);
            public static TexCoordPointer glTexCoordPointer = (TexCoordPointer)GetDelegateForExtensionMethod("glTexCoordPointer", typeof(Delegates.TexCoordPointer));

            #endregion TexCoordPointer

            #region VertexPointer

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexPointer(GLint size, GLenum type, GLsizei stride, IntPtr pointer);
            public static VertexPointer glVertexPointer = (VertexPointer)GetDelegateForExtensionMethod("glVertexPointer", typeof(Delegates.VertexPointer));

            #endregion VertexPointer

            #region PolygonOffset

            /// <summary>
            /// 
            /// </summary>
            public delegate void PolygonOffset(GLfloat factor, GLfloat units);
            public static PolygonOffset glPolygonOffset = (PolygonOffset)GetDelegateForExtensionMethod("glPolygonOffset", typeof(Delegates.PolygonOffset));

            #endregion PolygonOffset

            #region CopyTexImage1D

            /// <summary>
            /// 
            /// </summary>
            public delegate void CopyTexImage1D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
            public static CopyTexImage1D glCopyTexImage1D = (CopyTexImage1D)GetDelegateForExtensionMethod("glCopyTexImage1D", typeof(Delegates.CopyTexImage1D));

            #endregion CopyTexImage1D

            #region CopyTexImage2D

            /// <summary>
            /// 
            /// </summary>
            public delegate void CopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
            public static CopyTexImage2D glCopyTexImage2D = (CopyTexImage2D)GetDelegateForExtensionMethod("glCopyTexImage2D", typeof(Delegates.CopyTexImage2D));

            #endregion CopyTexImage2D

            #region CopyTexSubImage1D

            /// <summary>
            /// 
            /// </summary>
            public delegate void CopyTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
            public static CopyTexSubImage1D glCopyTexSubImage1D = (CopyTexSubImage1D)GetDelegateForExtensionMethod("glCopyTexSubImage1D", typeof(Delegates.CopyTexSubImage1D));

            #endregion CopyTexSubImage1D

            #region CopyTexSubImage2D

            /// <summary>
            /// 
            /// </summary>
            public delegate void CopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
            public static CopyTexSubImage2D glCopyTexSubImage2D = (CopyTexSubImage2D)GetDelegateForExtensionMethod("glCopyTexSubImage2D", typeof(Delegates.CopyTexSubImage2D));

            #endregion CopyTexSubImage2D

            #region TexSubImage1D

            /// <summary>
            /// 
            /// </summary>
            public delegate void TexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, IntPtr pixels);
            public static TexSubImage1D glTexSubImage1D = (TexSubImage1D)GetDelegateForExtensionMethod("glTexSubImage1D", typeof(Delegates.TexSubImage1D));

            #endregion TexSubImage1D

            #region TexSubImage2D

            /// <summary>
            /// 
            /// </summary>
            public delegate void TexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, IntPtr pixels);
            public static TexSubImage2D glTexSubImage2D = (TexSubImage2D)GetDelegateForExtensionMethod("glTexSubImage2D", typeof(Delegates.TexSubImage2D));

            #endregion TexSubImage2D

            #region AreTexturesResident

            /// <summary>
            /// 
            /// </summary>
            public delegate GLboolean AreTexturesResident(GLsizei n, IntPtr textures, IntPtr residences);
            public static AreTexturesResident glAreTexturesResident = (AreTexturesResident)GetDelegateForExtensionMethod("glAreTexturesResident", typeof(Delegates.AreTexturesResident));

            #endregion AreTexturesResident

            #region BindTexture

            /// <summary>
            /// 
            /// </summary>
            public delegate void BindTexture(GLenum target, GLuint texture);
            public static BindTexture glBindTexture = (BindTexture)GetDelegateForExtensionMethod("glBindTexture", typeof(Delegates.BindTexture));

            #endregion BindTexture

            #region DeleteTextures

            /// <summary>
            /// 
            /// </summary>
            public delegate void DeleteTextures(GLsizei n, IntPtr textures);
            public static DeleteTextures glDeleteTextures = (DeleteTextures)GetDelegateForExtensionMethod("glDeleteTextures", typeof(Delegates.DeleteTextures));

            #endregion DeleteTextures

            #region GenTextures

            /// <summary>
            /// 
            /// </summary>
            public delegate void GenTextures(GLsizei n, IntPtr textures);
            public static GenTextures glGenTextures = (GenTextures)GetDelegateForExtensionMethod("glGenTextures", typeof(Delegates.GenTextures));

            #endregion GenTextures

            #region IsTexture

            /// <summary>
            /// 
            /// </summary>
            public delegate GLboolean IsTexture(GLuint texture);
            public static IsTexture glIsTexture = (IsTexture)GetDelegateForExtensionMethod("glIsTexture", typeof(Delegates.IsTexture));

            #endregion IsTexture

            #region PrioritizeTextures

            /// <summary>
            /// 
            /// </summary>
            public delegate void PrioritizeTextures(GLsizei n, IntPtr textures, IntPtr priorities);
            public static PrioritizeTextures glPrioritizeTextures = (PrioritizeTextures)GetDelegateForExtensionMethod("glPrioritizeTextures", typeof(Delegates.PrioritizeTextures));

            #endregion PrioritizeTextures

            #region Indexub

            /// <summary>
            /// 
            /// </summary>
            public delegate void Indexub(GLubyte c);
            public static Indexub glIndexub = (Indexub)GetDelegateForExtensionMethod("glIndexub", typeof(Delegates.Indexub));

            #endregion Indexub

            #region Indexubv

            /// <summary>
            /// 
            /// </summary>
            public delegate void Indexubv(IntPtr c);
            public static Indexubv glIndexubv = (Indexubv)GetDelegateForExtensionMethod("glIndexubv", typeof(Delegates.Indexubv));

            #endregion Indexubv

            #region PopClientAttrib

            /// <summary>
            /// 
            /// </summary>
            public delegate void PopClientAttrib();
            public static PopClientAttrib glPopClientAttrib = (PopClientAttrib)GetDelegateForExtensionMethod("glPopClientAttrib", typeof(Delegates.PopClientAttrib));

            #endregion PopClientAttrib

            #region PushClientAttrib

            /// <summary>
            /// 
            /// </summary>
            public delegate void PushClientAttrib(GLbitfield mask);
            public static PushClientAttrib glPushClientAttrib = (PushClientAttrib)GetDelegateForExtensionMethod("glPushClientAttrib", typeof(Delegates.PushClientAttrib));

            #endregion PushClientAttrib

            #region BlendColor

            /// <summary>
            /// 
            /// </summary>
            public delegate void BlendColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
            public static BlendColor glBlendColor = (BlendColor)GetDelegateForExtensionMethod("glBlendColor", typeof(Delegates.BlendColor));

            #endregion BlendColor

            #region BlendEquation

            /// <summary>
            /// 
            /// </summary>
            public delegate void BlendEquation(GLenum mode);
            public static BlendEquation glBlendEquation = (BlendEquation)GetDelegateForExtensionMethod("glBlendEquation", typeof(Delegates.BlendEquation));

            #endregion BlendEquation

            #region DrawRangeElements

            /// <summary>
            /// 
            /// </summary>
            public delegate void DrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, IntPtr indices);
            public static DrawRangeElements glDrawRangeElements = (DrawRangeElements)GetDelegateForExtensionMethod("glDrawRangeElements", typeof(Delegates.DrawRangeElements));

            #endregion DrawRangeElements

            #region ColorTable

            /// <summary>
            /// 
            /// </summary>
            public delegate void ColorTable(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, IntPtr table);
            public static ColorTable glColorTable = (ColorTable)GetDelegateForExtensionMethod("glColorTable", typeof(Delegates.ColorTable));

            #endregion ColorTable

            #region ColorTableParameterfv

            /// <summary>
            /// 
            /// </summary>
            public delegate void ColorTableParameterfv(GLenum target, GLenum pname, IntPtr parameters);
            public static ColorTableParameterfv glColorTableParameterfv = (ColorTableParameterfv)GetDelegateForExtensionMethod("glColorTableParameterfv", typeof(Delegates.ColorTableParameterfv));

            #endregion ColorTableParameterfv

            #region ColorTableParameteriv

            /// <summary>
            /// 
            /// </summary>
            public delegate void ColorTableParameteriv(GLenum target, GLenum pname, IntPtr parameters);
            public static ColorTableParameteriv glColorTableParameteriv = (ColorTableParameteriv)GetDelegateForExtensionMethod("glColorTableParameteriv", typeof(Delegates.ColorTableParameteriv));

            #endregion ColorTableParameteriv

            #region CopyColorTable

            /// <summary>
            /// 
            /// </summary>
            public delegate void CopyColorTable(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
            public static CopyColorTable glCopyColorTable = (CopyColorTable)GetDelegateForExtensionMethod("glCopyColorTable", typeof(Delegates.CopyColorTable));

            #endregion CopyColorTable

            #region GetColorTable

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetColorTable(GLenum target, GLenum format, GLenum type, IntPtr table);
            public static GetColorTable glGetColorTable = (GetColorTable)GetDelegateForExtensionMethod("glGetColorTable", typeof(Delegates.GetColorTable));

            #endregion GetColorTable

            #region GetColorTableParameterfv

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetColorTableParameterfv(GLenum target, GLenum pname, IntPtr parameters);
            public static GetColorTableParameterfv glGetColorTableParameterfv = (GetColorTableParameterfv)GetDelegateForExtensionMethod("glGetColorTableParameterfv", typeof(Delegates.GetColorTableParameterfv));

            #endregion GetColorTableParameterfv

            #region GetColorTableParameteriv

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetColorTableParameteriv(GLenum target, GLenum pname, IntPtr parameters);
            public static GetColorTableParameteriv glGetColorTableParameteriv = (GetColorTableParameteriv)GetDelegateForExtensionMethod("glGetColorTableParameteriv", typeof(Delegates.GetColorTableParameteriv));

            #endregion GetColorTableParameteriv

            #region ColorSubTable

            /// <summary>
            /// 
            /// </summary>
            public delegate void ColorSubTable(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, IntPtr data);
            public static ColorSubTable glColorSubTable = (ColorSubTable)GetDelegateForExtensionMethod("glColorSubTable", typeof(Delegates.ColorSubTable));

            #endregion ColorSubTable

            #region CopyColorSubTable

            /// <summary>
            /// 
            /// </summary>
            public delegate void CopyColorSubTable(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width);
            public static CopyColorSubTable glCopyColorSubTable = (CopyColorSubTable)GetDelegateForExtensionMethod("glCopyColorSubTable", typeof(Delegates.CopyColorSubTable));

            #endregion CopyColorSubTable

            #region ConvolutionFilter1D

            /// <summary>
            /// 
            /// </summary>
            public delegate void ConvolutionFilter1D(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, IntPtr image);
            public static ConvolutionFilter1D glConvolutionFilter1D = (ConvolutionFilter1D)GetDelegateForExtensionMethod("glConvolutionFilter1D", typeof(Delegates.ConvolutionFilter1D));

            #endregion ConvolutionFilter1D

            #region ConvolutionFilter2D

            /// <summary>
            /// 
            /// </summary>
            public delegate void ConvolutionFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, IntPtr image);
            public static ConvolutionFilter2D glConvolutionFilter2D = (ConvolutionFilter2D)GetDelegateForExtensionMethod("glConvolutionFilter2D", typeof(Delegates.ConvolutionFilter2D));

            #endregion ConvolutionFilter2D

            #region ConvolutionParameterf

            /// <summary>
            /// 
            /// </summary>
            public delegate void ConvolutionParameterf(GLenum target, GLenum pname, GLfloat parameters);
            public static ConvolutionParameterf glConvolutionParameterf = (ConvolutionParameterf)GetDelegateForExtensionMethod("glConvolutionParameterf", typeof(Delegates.ConvolutionParameterf));

            #endregion ConvolutionParameterf

            #region ConvolutionParameterfv

            /// <summary>
            /// 
            /// </summary>
            public delegate void ConvolutionParameterfv(GLenum target, GLenum pname, IntPtr parameters);
            public static ConvolutionParameterfv glConvolutionParameterfv = (ConvolutionParameterfv)GetDelegateForExtensionMethod("glConvolutionParameterfv", typeof(Delegates.ConvolutionParameterfv));

            #endregion ConvolutionParameterfv

            #region ConvolutionParameteri

            /// <summary>
            /// 
            /// </summary>
            public delegate void ConvolutionParameteri(GLenum target, GLenum pname, GLint parameters);
            public static ConvolutionParameteri glConvolutionParameteri = (ConvolutionParameteri)GetDelegateForExtensionMethod("glConvolutionParameteri", typeof(Delegates.ConvolutionParameteri));

            #endregion ConvolutionParameteri

            #region ConvolutionParameteriv

            /// <summary>
            /// 
            /// </summary>
            public delegate void ConvolutionParameteriv(GLenum target, GLenum pname, IntPtr parameters);
            public static ConvolutionParameteriv glConvolutionParameteriv = (ConvolutionParameteriv)GetDelegateForExtensionMethod("glConvolutionParameteriv", typeof(Delegates.ConvolutionParameteriv));

            #endregion ConvolutionParameteriv

            #region CopyConvolutionFilter1D

            /// <summary>
            /// 
            /// </summary>
            public delegate void CopyConvolutionFilter1D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
            public static CopyConvolutionFilter1D glCopyConvolutionFilter1D = (CopyConvolutionFilter1D)GetDelegateForExtensionMethod("glCopyConvolutionFilter1D", typeof(Delegates.CopyConvolutionFilter1D));

            #endregion CopyConvolutionFilter1D

            #region CopyConvolutionFilter2D

            /// <summary>
            /// 
            /// </summary>
            public delegate void CopyConvolutionFilter2D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height);
            public static CopyConvolutionFilter2D glCopyConvolutionFilter2D = (CopyConvolutionFilter2D)GetDelegateForExtensionMethod("glCopyConvolutionFilter2D", typeof(Delegates.CopyConvolutionFilter2D));

            #endregion CopyConvolutionFilter2D

            #region GetConvolutionFilter

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetConvolutionFilter(GLenum target, GLenum format, GLenum type, IntPtr image);
            public static GetConvolutionFilter glGetConvolutionFilter = (GetConvolutionFilter)GetDelegateForExtensionMethod("glGetConvolutionFilter", typeof(Delegates.GetConvolutionFilter));

            #endregion GetConvolutionFilter

            #region GetConvolutionParameterfv

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetConvolutionParameterfv(GLenum target, GLenum pname, IntPtr parameters);
            public static GetConvolutionParameterfv glGetConvolutionParameterfv = (GetConvolutionParameterfv)GetDelegateForExtensionMethod("glGetConvolutionParameterfv", typeof(Delegates.GetConvolutionParameterfv));

            #endregion GetConvolutionParameterfv

            #region GetConvolutionParameteriv

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetConvolutionParameteriv(GLenum target, GLenum pname, IntPtr parameters);
            public static GetConvolutionParameteriv glGetConvolutionParameteriv = (GetConvolutionParameteriv)GetDelegateForExtensionMethod("glGetConvolutionParameteriv", typeof(Delegates.GetConvolutionParameteriv));

            #endregion GetConvolutionParameteriv

            #region GetSeparableFilter

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetSeparableFilter(GLenum target, GLenum format, GLenum type, IntPtr row, IntPtr column, IntPtr span);
            public static GetSeparableFilter glGetSeparableFilter = (GetSeparableFilter)GetDelegateForExtensionMethod("glGetSeparableFilter", typeof(Delegates.GetSeparableFilter));

            #endregion GetSeparableFilter

            #region SeparableFilter2D

            /// <summary>
            /// 
            /// </summary>
            public delegate void SeparableFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, IntPtr row, IntPtr column);
            public static SeparableFilter2D glSeparableFilter2D = (SeparableFilter2D)GetDelegateForExtensionMethod("glSeparableFilter2D", typeof(Delegates.SeparableFilter2D));

            #endregion SeparableFilter2D

            #region GetHistogram

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetHistogram(GLenum target, GLboolean reset, GLenum format, GLenum type, IntPtr values);
            public static GetHistogram glGetHistogram = (GetHistogram)GetDelegateForExtensionMethod("glGetHistogram", typeof(Delegates.GetHistogram));

            #endregion GetHistogram

            #region GetHistogramParameterfv

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetHistogramParameterfv(GLenum target, GLenum pname, IntPtr parameters);
            public static GetHistogramParameterfv glGetHistogramParameterfv = (GetHistogramParameterfv)GetDelegateForExtensionMethod("glGetHistogramParameterfv", typeof(Delegates.GetHistogramParameterfv));

            #endregion GetHistogramParameterfv

            #region GetHistogramParameteriv

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetHistogramParameteriv(GLenum target, GLenum pname, IntPtr parameters);
            public static GetHistogramParameteriv glGetHistogramParameteriv = (GetHistogramParameteriv)GetDelegateForExtensionMethod("glGetHistogramParameteriv", typeof(Delegates.GetHistogramParameteriv));

            #endregion GetHistogramParameteriv

            #region GetMinmax

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetMinmax(GLenum target, GLboolean reset, GLenum format, GLenum type, IntPtr values);
            public static GetMinmax glGetMinmax = (GetMinmax)GetDelegateForExtensionMethod("glGetMinmax", typeof(Delegates.GetMinmax));

            #endregion GetMinmax

            #region GetMinmaxParameterfv

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetMinmaxParameterfv(GLenum target, GLenum pname, IntPtr parameters);
            public static GetMinmaxParameterfv glGetMinmaxParameterfv = (GetMinmaxParameterfv)GetDelegateForExtensionMethod("glGetMinmaxParameterfv", typeof(Delegates.GetMinmaxParameterfv));

            #endregion GetMinmaxParameterfv

            #region GetMinmaxParameteriv

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetMinmaxParameteriv(GLenum target, GLenum pname, IntPtr parameters);
            public static GetMinmaxParameteriv glGetMinmaxParameteriv = (GetMinmaxParameteriv)GetDelegateForExtensionMethod("glGetMinmaxParameteriv", typeof(Delegates.GetMinmaxParameteriv));

            #endregion GetMinmaxParameteriv

            #region Histogram

            /// <summary>
            /// 
            /// </summary>
            public delegate void Histogram(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink);
            public static Histogram glHistogram = (Histogram)GetDelegateForExtensionMethod("glHistogram", typeof(Delegates.Histogram));

            #endregion Histogram

            #region Minmax

            /// <summary>
            /// 
            /// </summary>
            public delegate void Minmax(GLenum target, GLenum internalformat, GLboolean sink);
            public static Minmax glMinmax = (Minmax)GetDelegateForExtensionMethod("glMinmax", typeof(Delegates.Minmax));

            #endregion Minmax

            #region ResetHistogram

            /// <summary>
            /// 
            /// </summary>
            public delegate void ResetHistogram(GLenum target);
            public static ResetHistogram glResetHistogram = (ResetHistogram)GetDelegateForExtensionMethod("glResetHistogram", typeof(Delegates.ResetHistogram));

            #endregion ResetHistogram

            #region ResetMinmax

            /// <summary>
            /// 
            /// </summary>
            public delegate void ResetMinmax(GLenum target);
            public static ResetMinmax glResetMinmax = (ResetMinmax)GetDelegateForExtensionMethod("glResetMinmax", typeof(Delegates.ResetMinmax));

            #endregion ResetMinmax

            #region TexImage3D

            /// <summary>
            /// 
            /// </summary>
            public delegate void TexImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, IntPtr pixels);
            public static TexImage3D glTexImage3D = (TexImage3D)GetDelegateForExtensionMethod("glTexImage3D", typeof(Delegates.TexImage3D));

            #endregion TexImage3D

            #region TexSubImage3D

            /// <summary>
            /// 
            /// </summary>
            public delegate void TexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, IntPtr pixels);
            public static TexSubImage3D glTexSubImage3D = (TexSubImage3D)GetDelegateForExtensionMethod("glTexSubImage3D", typeof(Delegates.TexSubImage3D));

            #endregion TexSubImage3D

            #region CopyTexSubImage3D

            /// <summary>
            /// 
            /// </summary>
            public delegate void CopyTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
            public static CopyTexSubImage3D glCopyTexSubImage3D = (CopyTexSubImage3D)GetDelegateForExtensionMethod("glCopyTexSubImage3D", typeof(Delegates.CopyTexSubImage3D));

            #endregion CopyTexSubImage3D

            #region ActiveTexture

            /// <summary>
            /// 
            /// </summary>
            public delegate void ActiveTexture(GLenum texture);
            public static ActiveTexture glActiveTexture = (ActiveTexture)GetDelegateForExtensionMethod("glActiveTexture", typeof(Delegates.ActiveTexture));

            #endregion ActiveTexture

            #region ClientActiveTexture

            /// <summary>
            /// 
            /// </summary>
            public delegate void ClientActiveTexture(GLenum texture);
            public static ClientActiveTexture glClientActiveTexture = (ClientActiveTexture)GetDelegateForExtensionMethod("glClientActiveTexture", typeof(Delegates.ClientActiveTexture));

            #endregion ClientActiveTexture

            #region MultiTexCoord1d

            /// <summary>
            /// 
            /// </summary>
            public delegate void MultiTexCoord1d(GLenum target, GLdouble s);
            public static MultiTexCoord1d glMultiTexCoord1d = (MultiTexCoord1d)GetDelegateForExtensionMethod("glMultiTexCoord1d", typeof(Delegates.MultiTexCoord1d));

            #endregion MultiTexCoord1d

            #region MultiTexCoord1dv

            /// <summary>
            /// 
            /// </summary>
            public delegate void MultiTexCoord1dv(GLenum target, IntPtr v);
            public static MultiTexCoord1dv glMultiTexCoord1dv = (MultiTexCoord1dv)GetDelegateForExtensionMethod("glMultiTexCoord1dv", typeof(Delegates.MultiTexCoord1dv));

            #endregion MultiTexCoord1dv

            #region MultiTexCoord1f

            /// <summary>
            /// 
            /// </summary>
            public delegate void MultiTexCoord1f(GLenum target, GLfloat s);
            public static MultiTexCoord1f glMultiTexCoord1f = (MultiTexCoord1f)GetDelegateForExtensionMethod("glMultiTexCoord1f", typeof(Delegates.MultiTexCoord1f));

            #endregion MultiTexCoord1f

            #region MultiTexCoord1fv

            /// <summary>
            /// 
            /// </summary>
            public delegate void MultiTexCoord1fv(GLenum target, IntPtr v);
            public static MultiTexCoord1fv glMultiTexCoord1fv = (MultiTexCoord1fv)GetDelegateForExtensionMethod("glMultiTexCoord1fv", typeof(Delegates.MultiTexCoord1fv));

            #endregion MultiTexCoord1fv

            #region MultiTexCoord1i

            /// <summary>
            /// 
            /// </summary>
            public delegate void MultiTexCoord1i(GLenum target, GLint s);
            public static MultiTexCoord1i glMultiTexCoord1i = (MultiTexCoord1i)GetDelegateForExtensionMethod("glMultiTexCoord1i", typeof(Delegates.MultiTexCoord1i));

            #endregion MultiTexCoord1i

            #region MultiTexCoord1iv

            /// <summary>
            /// 
            /// </summary>
            public delegate void MultiTexCoord1iv(GLenum target, IntPtr v);
            public static MultiTexCoord1iv glMultiTexCoord1iv = (MultiTexCoord1iv)GetDelegateForExtensionMethod("glMultiTexCoord1iv", typeof(Delegates.MultiTexCoord1iv));

            #endregion MultiTexCoord1iv

            #region MultiTexCoord1s

            /// <summary>
            /// 
            /// </summary>
            public delegate void MultiTexCoord1s(GLenum target, GLshort s);
            public static MultiTexCoord1s glMultiTexCoord1s = (MultiTexCoord1s)GetDelegateForExtensionMethod("glMultiTexCoord1s", typeof(Delegates.MultiTexCoord1s));

            #endregion MultiTexCoord1s

            #region MultiTexCoord1sv

            /// <summary>
            /// 
            /// </summary>
            public delegate void MultiTexCoord1sv(GLenum target, IntPtr v);
            public static MultiTexCoord1sv glMultiTexCoord1sv = (MultiTexCoord1sv)GetDelegateForExtensionMethod("glMultiTexCoord1sv", typeof(Delegates.MultiTexCoord1sv));

            #endregion MultiTexCoord1sv

            #region MultiTexCoord2d

            /// <summary>
            /// 
            /// </summary>
            public delegate void MultiTexCoord2d(GLenum target, GLdouble s, GLdouble t);
            public static MultiTexCoord2d glMultiTexCoord2d = (MultiTexCoord2d)GetDelegateForExtensionMethod("glMultiTexCoord2d", typeof(Delegates.MultiTexCoord2d));

            #endregion MultiTexCoord2d

            #region MultiTexCoord2dv

            /// <summary>
            /// 
            /// </summary>
            public delegate void MultiTexCoord2dv(GLenum target, IntPtr v);
            public static MultiTexCoord2dv glMultiTexCoord2dv = (MultiTexCoord2dv)GetDelegateForExtensionMethod("glMultiTexCoord2dv", typeof(Delegates.MultiTexCoord2dv));

            #endregion MultiTexCoord2dv

            #region MultiTexCoord2f

            /// <summary>
            /// 
            /// </summary>
            public delegate void MultiTexCoord2f(GLenum target, GLfloat s, GLfloat t);
            public static MultiTexCoord2f glMultiTexCoord2f = (MultiTexCoord2f)GetDelegateForExtensionMethod("glMultiTexCoord2f", typeof(Delegates.MultiTexCoord2f));

            #endregion MultiTexCoord2f

            #region MultiTexCoord2fv

            /// <summary>
            /// 
            /// </summary>
            public delegate void MultiTexCoord2fv(GLenum target, IntPtr v);
            public static MultiTexCoord2fv glMultiTexCoord2fv = (MultiTexCoord2fv)GetDelegateForExtensionMethod("glMultiTexCoord2fv", typeof(Delegates.MultiTexCoord2fv));

            #endregion MultiTexCoord2fv

            #region MultiTexCoord2i

            /// <summary>
            /// 
            /// </summary>
            public delegate void MultiTexCoord2i(GLenum target, GLint s, GLint t);
            public static MultiTexCoord2i glMultiTexCoord2i = (MultiTexCoord2i)GetDelegateForExtensionMethod("glMultiTexCoord2i", typeof(Delegates.MultiTexCoord2i));

            #endregion MultiTexCoord2i

            #region MultiTexCoord2iv

            /// <summary>
            /// 
            /// </summary>
            public delegate void MultiTexCoord2iv(GLenum target, IntPtr v);
            public static MultiTexCoord2iv glMultiTexCoord2iv = (MultiTexCoord2iv)GetDelegateForExtensionMethod("glMultiTexCoord2iv", typeof(Delegates.MultiTexCoord2iv));

            #endregion MultiTexCoord2iv

            #region MultiTexCoord2s

            /// <summary>
            /// 
            /// </summary>
            public delegate void MultiTexCoord2s(GLenum target, GLshort s, GLshort t);
            public static MultiTexCoord2s glMultiTexCoord2s = (MultiTexCoord2s)GetDelegateForExtensionMethod("glMultiTexCoord2s", typeof(Delegates.MultiTexCoord2s));

            #endregion MultiTexCoord2s

            #region MultiTexCoord2sv

            /// <summary>
            /// 
            /// </summary>
            public delegate void MultiTexCoord2sv(GLenum target, IntPtr v);
            public static MultiTexCoord2sv glMultiTexCoord2sv = (MultiTexCoord2sv)GetDelegateForExtensionMethod("glMultiTexCoord2sv", typeof(Delegates.MultiTexCoord2sv));

            #endregion MultiTexCoord2sv

            #region MultiTexCoord3d

            /// <summary>
            /// 
            /// </summary>
            public delegate void MultiTexCoord3d(GLenum target, GLdouble s, GLdouble t, GLdouble r);
            public static MultiTexCoord3d glMultiTexCoord3d = (MultiTexCoord3d)GetDelegateForExtensionMethod("glMultiTexCoord3d", typeof(Delegates.MultiTexCoord3d));

            #endregion MultiTexCoord3d

            #region MultiTexCoord3dv

            /// <summary>
            /// 
            /// </summary>
            public delegate void MultiTexCoord3dv(GLenum target, IntPtr v);
            public static MultiTexCoord3dv glMultiTexCoord3dv = (MultiTexCoord3dv)GetDelegateForExtensionMethod("glMultiTexCoord3dv", typeof(Delegates.MultiTexCoord3dv));

            #endregion MultiTexCoord3dv

            #region MultiTexCoord3f

            /// <summary>
            /// 
            /// </summary>
            public delegate void MultiTexCoord3f(GLenum target, GLfloat s, GLfloat t, GLfloat r);
            public static MultiTexCoord3f glMultiTexCoord3f = (MultiTexCoord3f)GetDelegateForExtensionMethod("glMultiTexCoord3f", typeof(Delegates.MultiTexCoord3f));

            #endregion MultiTexCoord3f

            #region MultiTexCoord3fv

            /// <summary>
            /// 
            /// </summary>
            public delegate void MultiTexCoord3fv(GLenum target, IntPtr v);
            public static MultiTexCoord3fv glMultiTexCoord3fv = (MultiTexCoord3fv)GetDelegateForExtensionMethod("glMultiTexCoord3fv", typeof(Delegates.MultiTexCoord3fv));

            #endregion MultiTexCoord3fv

            #region MultiTexCoord3i

            /// <summary>
            /// 
            /// </summary>
            public delegate void MultiTexCoord3i(GLenum target, GLint s, GLint t, GLint r);
            public static MultiTexCoord3i glMultiTexCoord3i = (MultiTexCoord3i)GetDelegateForExtensionMethod("glMultiTexCoord3i", typeof(Delegates.MultiTexCoord3i));

            #endregion MultiTexCoord3i

            #region MultiTexCoord3iv

            /// <summary>
            /// 
            /// </summary>
            public delegate void MultiTexCoord3iv(GLenum target, IntPtr v);
            public static MultiTexCoord3iv glMultiTexCoord3iv = (MultiTexCoord3iv)GetDelegateForExtensionMethod("glMultiTexCoord3iv", typeof(Delegates.MultiTexCoord3iv));

            #endregion MultiTexCoord3iv

            #region MultiTexCoord3s

            /// <summary>
            /// 
            /// </summary>
            public delegate void MultiTexCoord3s(GLenum target, GLshort s, GLshort t, GLshort r);
            public static MultiTexCoord3s glMultiTexCoord3s = (MultiTexCoord3s)GetDelegateForExtensionMethod("glMultiTexCoord3s", typeof(Delegates.MultiTexCoord3s));

            #endregion MultiTexCoord3s

            #region MultiTexCoord3sv

            /// <summary>
            /// 
            /// </summary>
            public delegate void MultiTexCoord3sv(GLenum target, IntPtr v);
            public static MultiTexCoord3sv glMultiTexCoord3sv = (MultiTexCoord3sv)GetDelegateForExtensionMethod("glMultiTexCoord3sv", typeof(Delegates.MultiTexCoord3sv));

            #endregion MultiTexCoord3sv

            #region MultiTexCoord4d

            /// <summary>
            /// 
            /// </summary>
            public delegate void MultiTexCoord4d(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
            public static MultiTexCoord4d glMultiTexCoord4d = (MultiTexCoord4d)GetDelegateForExtensionMethod("glMultiTexCoord4d", typeof(Delegates.MultiTexCoord4d));

            #endregion MultiTexCoord4d

            #region MultiTexCoord4dv

            /// <summary>
            /// 
            /// </summary>
            public delegate void MultiTexCoord4dv(GLenum target, IntPtr v);
            public static MultiTexCoord4dv glMultiTexCoord4dv = (MultiTexCoord4dv)GetDelegateForExtensionMethod("glMultiTexCoord4dv", typeof(Delegates.MultiTexCoord4dv));

            #endregion MultiTexCoord4dv

            #region MultiTexCoord4f

            /// <summary>
            /// 
            /// </summary>
            public delegate void MultiTexCoord4f(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
            public static MultiTexCoord4f glMultiTexCoord4f = (MultiTexCoord4f)GetDelegateForExtensionMethod("glMultiTexCoord4f", typeof(Delegates.MultiTexCoord4f));

            #endregion MultiTexCoord4f

            #region MultiTexCoord4fv

            /// <summary>
            /// 
            /// </summary>
            public delegate void MultiTexCoord4fv(GLenum target, IntPtr v);
            public static MultiTexCoord4fv glMultiTexCoord4fv = (MultiTexCoord4fv)GetDelegateForExtensionMethod("glMultiTexCoord4fv", typeof(Delegates.MultiTexCoord4fv));

            #endregion MultiTexCoord4fv

            #region MultiTexCoord4i

            /// <summary>
            /// 
            /// </summary>
            public delegate void MultiTexCoord4i(GLenum target, GLint s, GLint t, GLint r, GLint q);
            public static MultiTexCoord4i glMultiTexCoord4i = (MultiTexCoord4i)GetDelegateForExtensionMethod("glMultiTexCoord4i", typeof(Delegates.MultiTexCoord4i));

            #endregion MultiTexCoord4i

            #region MultiTexCoord4iv

            /// <summary>
            /// 
            /// </summary>
            public delegate void MultiTexCoord4iv(GLenum target, IntPtr v);
            public static MultiTexCoord4iv glMultiTexCoord4iv = (MultiTexCoord4iv)GetDelegateForExtensionMethod("glMultiTexCoord4iv", typeof(Delegates.MultiTexCoord4iv));

            #endregion MultiTexCoord4iv

            #region MultiTexCoord4s

            /// <summary>
            /// 
            /// </summary>
            public delegate void MultiTexCoord4s(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
            public static MultiTexCoord4s glMultiTexCoord4s = (MultiTexCoord4s)GetDelegateForExtensionMethod("glMultiTexCoord4s", typeof(Delegates.MultiTexCoord4s));

            #endregion MultiTexCoord4s

            #region MultiTexCoord4sv

            /// <summary>
            /// 
            /// </summary>
            public delegate void MultiTexCoord4sv(GLenum target, IntPtr v);
            public static MultiTexCoord4sv glMultiTexCoord4sv = (MultiTexCoord4sv)GetDelegateForExtensionMethod("glMultiTexCoord4sv", typeof(Delegates.MultiTexCoord4sv));

            #endregion MultiTexCoord4sv

            #region LoadTransposeMatrixf

            /// <summary>
            /// 
            /// </summary>
            public delegate void LoadTransposeMatrixf(IntPtr m);
            public static LoadTransposeMatrixf glLoadTransposeMatrixf = (LoadTransposeMatrixf)GetDelegateForExtensionMethod("glLoadTransposeMatrixf", typeof(Delegates.LoadTransposeMatrixf));

            #endregion LoadTransposeMatrixf

            #region LoadTransposeMatrixd

            /// <summary>
            /// 
            /// </summary>
            public delegate void LoadTransposeMatrixd(IntPtr m);
            public static LoadTransposeMatrixd glLoadTransposeMatrixd = (LoadTransposeMatrixd)GetDelegateForExtensionMethod("glLoadTransposeMatrixd", typeof(Delegates.LoadTransposeMatrixd));

            #endregion LoadTransposeMatrixd

            #region MultTransposeMatrixf

            /// <summary>
            /// 
            /// </summary>
            public delegate void MultTransposeMatrixf(IntPtr m);
            public static MultTransposeMatrixf glMultTransposeMatrixf = (MultTransposeMatrixf)GetDelegateForExtensionMethod("glMultTransposeMatrixf", typeof(Delegates.MultTransposeMatrixf));

            #endregion MultTransposeMatrixf

            #region MultTransposeMatrixd

            /// <summary>
            /// 
            /// </summary>
            public delegate void MultTransposeMatrixd(IntPtr m);
            public static MultTransposeMatrixd glMultTransposeMatrixd = (MultTransposeMatrixd)GetDelegateForExtensionMethod("glMultTransposeMatrixd", typeof(Delegates.MultTransposeMatrixd));

            #endregion MultTransposeMatrixd

            #region SampleCoverage

            /// <summary>
            /// 
            /// </summary>
            public delegate void SampleCoverage(GLclampf value, GLboolean invert);
            public static SampleCoverage glSampleCoverage = (SampleCoverage)GetDelegateForExtensionMethod("glSampleCoverage", typeof(Delegates.SampleCoverage));

            #endregion SampleCoverage

            #region CompressedTexImage3D

            /// <summary>
            /// 
            /// </summary>
            public delegate void CompressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, IntPtr data);
            public static CompressedTexImage3D glCompressedTexImage3D = (CompressedTexImage3D)GetDelegateForExtensionMethod("glCompressedTexImage3D", typeof(Delegates.CompressedTexImage3D));

            #endregion CompressedTexImage3D

            #region CompressedTexImage2D

            /// <summary>
            /// 
            /// </summary>
            public delegate void CompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, IntPtr data);
            public static CompressedTexImage2D glCompressedTexImage2D = (CompressedTexImage2D)GetDelegateForExtensionMethod("glCompressedTexImage2D", typeof(Delegates.CompressedTexImage2D));

            #endregion CompressedTexImage2D

            #region CompressedTexImage1D

            /// <summary>
            /// 
            /// </summary>
            public delegate void CompressedTexImage1D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, IntPtr data);
            public static CompressedTexImage1D glCompressedTexImage1D = (CompressedTexImage1D)GetDelegateForExtensionMethod("glCompressedTexImage1D", typeof(Delegates.CompressedTexImage1D));

            #endregion CompressedTexImage1D

            #region CompressedTexSubImage3D

            /// <summary>
            /// 
            /// </summary>
            public delegate void CompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, IntPtr data);
            public static CompressedTexSubImage3D glCompressedTexSubImage3D = (CompressedTexSubImage3D)GetDelegateForExtensionMethod("glCompressedTexSubImage3D", typeof(Delegates.CompressedTexSubImage3D));

            #endregion CompressedTexSubImage3D

            #region CompressedTexSubImage2D

            /// <summary>
            /// 
            /// </summary>
            public delegate void CompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, IntPtr data);
            public static CompressedTexSubImage2D glCompressedTexSubImage2D = (CompressedTexSubImage2D)GetDelegateForExtensionMethod("glCompressedTexSubImage2D", typeof(Delegates.CompressedTexSubImage2D));

            #endregion CompressedTexSubImage2D

            #region CompressedTexSubImage1D

            /// <summary>
            /// 
            /// </summary>
            public delegate void CompressedTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, IntPtr data);
            public static CompressedTexSubImage1D glCompressedTexSubImage1D = (CompressedTexSubImage1D)GetDelegateForExtensionMethod("glCompressedTexSubImage1D", typeof(Delegates.CompressedTexSubImage1D));

            #endregion CompressedTexSubImage1D

            #region GetCompressedTexImage

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetCompressedTexImage(GLenum target, GLint level, IntPtr img);
            public static GetCompressedTexImage glGetCompressedTexImage = (GetCompressedTexImage)GetDelegateForExtensionMethod("glGetCompressedTexImage", typeof(Delegates.GetCompressedTexImage));

            #endregion GetCompressedTexImage

            #region BlendFuncSeparate

            /// <summary>
            /// 
            /// </summary>
            public delegate void BlendFuncSeparate(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
            public static BlendFuncSeparate glBlendFuncSeparate = (BlendFuncSeparate)GetDelegateForExtensionMethod("glBlendFuncSeparate", typeof(Delegates.BlendFuncSeparate));

            #endregion BlendFuncSeparate

            #region FogCoordf

            /// <summary>
            /// 
            /// </summary>
            public delegate void FogCoordf(GLfloat coord);
            public static FogCoordf glFogCoordf = (FogCoordf)GetDelegateForExtensionMethod("glFogCoordf", typeof(Delegates.FogCoordf));

            #endregion FogCoordf

            #region FogCoordfv

            /// <summary>
            /// 
            /// </summary>
            public delegate void FogCoordfv(IntPtr coord);
            public static FogCoordfv glFogCoordfv = (FogCoordfv)GetDelegateForExtensionMethod("glFogCoordfv", typeof(Delegates.FogCoordfv));

            #endregion FogCoordfv

            #region FogCoordd

            /// <summary>
            /// 
            /// </summary>
            public delegate void FogCoordd(GLdouble coord);
            public static FogCoordd glFogCoordd = (FogCoordd)GetDelegateForExtensionMethod("glFogCoordd", typeof(Delegates.FogCoordd));

            #endregion FogCoordd

            #region FogCoorddv

            /// <summary>
            /// 
            /// </summary>
            public delegate void FogCoorddv(IntPtr coord);
            public static FogCoorddv glFogCoorddv = (FogCoorddv)GetDelegateForExtensionMethod("glFogCoorddv", typeof(Delegates.FogCoorddv));

            #endregion FogCoorddv

            #region FogCoordPointer

            /// <summary>
            /// 
            /// </summary>
            public delegate void FogCoordPointer(GLenum type, GLsizei stride, IntPtr pointer);
            public static FogCoordPointer glFogCoordPointer = (FogCoordPointer)GetDelegateForExtensionMethod("glFogCoordPointer", typeof(Delegates.FogCoordPointer));

            #endregion FogCoordPointer

            #region MultiDrawArrays

            /// <summary>
            /// 
            /// </summary>
            public delegate void MultiDrawArrays(GLenum mode, IntPtr first, IntPtr count, GLsizei primcount);
            public static MultiDrawArrays glMultiDrawArrays = (MultiDrawArrays)GetDelegateForExtensionMethod("glMultiDrawArrays", typeof(Delegates.MultiDrawArrays));

            #endregion MultiDrawArrays

            #region MultiDrawElements

            /// <summary>
            /// 
            /// </summary>
            public delegate void MultiDrawElements(GLenum mode, IntPtr count, GLenum type, IntPtr indices, GLsizei primcount);
            public static MultiDrawElements glMultiDrawElements = (MultiDrawElements)GetDelegateForExtensionMethod("glMultiDrawElements", typeof(Delegates.MultiDrawElements));

            #endregion MultiDrawElements

            #region PointParameterf

            /// <summary>
            /// 
            /// </summary>
            public delegate void PointParameterf(GLenum pname, GLfloat param);
            public static PointParameterf glPointParameterf = (PointParameterf)GetDelegateForExtensionMethod("glPointParameterf", typeof(Delegates.PointParameterf));

            #endregion PointParameterf

            #region PointParameterfv

            /// <summary>
            /// 
            /// </summary>
            public delegate void PointParameterfv(GLenum pname, IntPtr parameters);
            public static PointParameterfv glPointParameterfv = (PointParameterfv)GetDelegateForExtensionMethod("glPointParameterfv", typeof(Delegates.PointParameterfv));

            #endregion PointParameterfv

            #region PointParameteri

            /// <summary>
            /// 
            /// </summary>
            public delegate void PointParameteri(GLenum pname, GLint param);
            public static PointParameteri glPointParameteri = (PointParameteri)GetDelegateForExtensionMethod("glPointParameteri", typeof(Delegates.PointParameteri));

            #endregion PointParameteri

            #region PointParameteriv

            /// <summary>
            /// 
            /// </summary>
            public delegate void PointParameteriv(GLenum pname, IntPtr parameters);
            public static PointParameteriv glPointParameteriv = (PointParameteriv)GetDelegateForExtensionMethod("glPointParameteriv", typeof(Delegates.PointParameteriv));

            #endregion PointParameteriv

            #region SecondaryColor3b

            /// <summary>
            /// 
            /// </summary>
            public delegate void SecondaryColor3b(GLbyte red, GLbyte green, GLbyte blue);
            public static SecondaryColor3b glSecondaryColor3b = (SecondaryColor3b)GetDelegateForExtensionMethod("glSecondaryColor3b", typeof(Delegates.SecondaryColor3b));

            #endregion SecondaryColor3b

            #region SecondaryColor3bv

            /// <summary>
            /// 
            /// </summary>
            public delegate void SecondaryColor3bv(IntPtr v);
            public static SecondaryColor3bv glSecondaryColor3bv = (SecondaryColor3bv)GetDelegateForExtensionMethod("glSecondaryColor3bv", typeof(Delegates.SecondaryColor3bv));

            #endregion SecondaryColor3bv

            #region SecondaryColor3d

            /// <summary>
            /// 
            /// </summary>
            public delegate void SecondaryColor3d(GLdouble red, GLdouble green, GLdouble blue);
            public static SecondaryColor3d glSecondaryColor3d = (SecondaryColor3d)GetDelegateForExtensionMethod("glSecondaryColor3d", typeof(Delegates.SecondaryColor3d));

            #endregion SecondaryColor3d

            #region SecondaryColor3dv

            /// <summary>
            /// 
            /// </summary>
            public delegate void SecondaryColor3dv(IntPtr v);
            public static SecondaryColor3dv glSecondaryColor3dv = (SecondaryColor3dv)GetDelegateForExtensionMethod("glSecondaryColor3dv", typeof(Delegates.SecondaryColor3dv));

            #endregion SecondaryColor3dv

            #region SecondaryColor3f

            /// <summary>
            /// 
            /// </summary>
            public delegate void SecondaryColor3f(GLfloat red, GLfloat green, GLfloat blue);
            public static SecondaryColor3f glSecondaryColor3f = (SecondaryColor3f)GetDelegateForExtensionMethod("glSecondaryColor3f", typeof(Delegates.SecondaryColor3f));

            #endregion SecondaryColor3f

            #region SecondaryColor3fv

            /// <summary>
            /// 
            /// </summary>
            public delegate void SecondaryColor3fv(IntPtr v);
            public static SecondaryColor3fv glSecondaryColor3fv = (SecondaryColor3fv)GetDelegateForExtensionMethod("glSecondaryColor3fv", typeof(Delegates.SecondaryColor3fv));

            #endregion SecondaryColor3fv

            #region SecondaryColor3i

            /// <summary>
            /// 
            /// </summary>
            public delegate void SecondaryColor3i(GLint red, GLint green, GLint blue);
            public static SecondaryColor3i glSecondaryColor3i = (SecondaryColor3i)GetDelegateForExtensionMethod("glSecondaryColor3i", typeof(Delegates.SecondaryColor3i));

            #endregion SecondaryColor3i

            #region SecondaryColor3iv

            /// <summary>
            /// 
            /// </summary>
            public delegate void SecondaryColor3iv(IntPtr v);
            public static SecondaryColor3iv glSecondaryColor3iv = (SecondaryColor3iv)GetDelegateForExtensionMethod("glSecondaryColor3iv", typeof(Delegates.SecondaryColor3iv));

            #endregion SecondaryColor3iv

            #region SecondaryColor3s

            /// <summary>
            /// 
            /// </summary>
            public delegate void SecondaryColor3s(GLshort red, GLshort green, GLshort blue);
            public static SecondaryColor3s glSecondaryColor3s = (SecondaryColor3s)GetDelegateForExtensionMethod("glSecondaryColor3s", typeof(Delegates.SecondaryColor3s));

            #endregion SecondaryColor3s

            #region SecondaryColor3sv

            /// <summary>
            /// 
            /// </summary>
            public delegate void SecondaryColor3sv(IntPtr v);
            public static SecondaryColor3sv glSecondaryColor3sv = (SecondaryColor3sv)GetDelegateForExtensionMethod("glSecondaryColor3sv", typeof(Delegates.SecondaryColor3sv));

            #endregion SecondaryColor3sv

            #region SecondaryColor3ub

            /// <summary>
            /// 
            /// </summary>
            public delegate void SecondaryColor3ub(GLubyte red, GLubyte green, GLubyte blue);
            public static SecondaryColor3ub glSecondaryColor3ub = (SecondaryColor3ub)GetDelegateForExtensionMethod("glSecondaryColor3ub", typeof(Delegates.SecondaryColor3ub));

            #endregion SecondaryColor3ub

            #region SecondaryColor3ubv

            /// <summary>
            /// 
            /// </summary>
            public delegate void SecondaryColor3ubv(IntPtr v);
            public static SecondaryColor3ubv glSecondaryColor3ubv = (SecondaryColor3ubv)GetDelegateForExtensionMethod("glSecondaryColor3ubv", typeof(Delegates.SecondaryColor3ubv));

            #endregion SecondaryColor3ubv

            #region SecondaryColor3ui

            /// <summary>
            /// 
            /// </summary>
            public delegate void SecondaryColor3ui(GLuint red, GLuint green, GLuint blue);
            public static SecondaryColor3ui glSecondaryColor3ui = (SecondaryColor3ui)GetDelegateForExtensionMethod("glSecondaryColor3ui", typeof(Delegates.SecondaryColor3ui));

            #endregion SecondaryColor3ui

            #region SecondaryColor3uiv

            /// <summary>
            /// 
            /// </summary>
            public delegate void SecondaryColor3uiv(IntPtr v);
            public static SecondaryColor3uiv glSecondaryColor3uiv = (SecondaryColor3uiv)GetDelegateForExtensionMethod("glSecondaryColor3uiv", typeof(Delegates.SecondaryColor3uiv));

            #endregion SecondaryColor3uiv

            #region SecondaryColor3us

            /// <summary>
            /// 
            /// </summary>
            public delegate void SecondaryColor3us(GLushort red, GLushort green, GLushort blue);
            public static SecondaryColor3us glSecondaryColor3us = (SecondaryColor3us)GetDelegateForExtensionMethod("glSecondaryColor3us", typeof(Delegates.SecondaryColor3us));

            #endregion SecondaryColor3us

            #region SecondaryColor3usv

            /// <summary>
            /// 
            /// </summary>
            public delegate void SecondaryColor3usv(IntPtr v);
            public static SecondaryColor3usv glSecondaryColor3usv = (SecondaryColor3usv)GetDelegateForExtensionMethod("glSecondaryColor3usv", typeof(Delegates.SecondaryColor3usv));

            #endregion SecondaryColor3usv

            #region SecondaryColorPointer

            /// <summary>
            /// 
            /// </summary>
            public delegate void SecondaryColorPointer(GLint size, GLenum type, GLsizei stride, IntPtr pointer);
            public static SecondaryColorPointer glSecondaryColorPointer = (SecondaryColorPointer)GetDelegateForExtensionMethod("glSecondaryColorPointer", typeof(Delegates.SecondaryColorPointer));

            #endregion SecondaryColorPointer

            #region WindowPos2d

            /// <summary>
            /// 
            /// </summary>
            public delegate void WindowPos2d(GLdouble x, GLdouble y);
            public static WindowPos2d glWindowPos2d = (WindowPos2d)GetDelegateForExtensionMethod("glWindowPos2d", typeof(Delegates.WindowPos2d));

            #endregion WindowPos2d

            #region WindowPos2dv

            /// <summary>
            /// 
            /// </summary>
            public delegate void WindowPos2dv(IntPtr v);
            public static WindowPos2dv glWindowPos2dv = (WindowPos2dv)GetDelegateForExtensionMethod("glWindowPos2dv", typeof(Delegates.WindowPos2dv));

            #endregion WindowPos2dv

            #region WindowPos2f

            /// <summary>
            /// 
            /// </summary>
            public delegate void WindowPos2f(GLfloat x, GLfloat y);
            public static WindowPos2f glWindowPos2f = (WindowPos2f)GetDelegateForExtensionMethod("glWindowPos2f", typeof(Delegates.WindowPos2f));

            #endregion WindowPos2f

            #region WindowPos2fv

            /// <summary>
            /// 
            /// </summary>
            public delegate void WindowPos2fv(IntPtr v);
            public static WindowPos2fv glWindowPos2fv = (WindowPos2fv)GetDelegateForExtensionMethod("glWindowPos2fv", typeof(Delegates.WindowPos2fv));

            #endregion WindowPos2fv

            #region WindowPos2i

            /// <summary>
            /// 
            /// </summary>
            public delegate void WindowPos2i(GLint x, GLint y);
            public static WindowPos2i glWindowPos2i = (WindowPos2i)GetDelegateForExtensionMethod("glWindowPos2i", typeof(Delegates.WindowPos2i));

            #endregion WindowPos2i

            #region WindowPos2iv

            /// <summary>
            /// 
            /// </summary>
            public delegate void WindowPos2iv(IntPtr v);
            public static WindowPos2iv glWindowPos2iv = (WindowPos2iv)GetDelegateForExtensionMethod("glWindowPos2iv", typeof(Delegates.WindowPos2iv));

            #endregion WindowPos2iv

            #region WindowPos2s

            /// <summary>
            /// 
            /// </summary>
            public delegate void WindowPos2s(GLshort x, GLshort y);
            public static WindowPos2s glWindowPos2s = (WindowPos2s)GetDelegateForExtensionMethod("glWindowPos2s", typeof(Delegates.WindowPos2s));

            #endregion WindowPos2s

            #region WindowPos2sv

            /// <summary>
            /// 
            /// </summary>
            public delegate void WindowPos2sv(IntPtr v);
            public static WindowPos2sv glWindowPos2sv = (WindowPos2sv)GetDelegateForExtensionMethod("glWindowPos2sv", typeof(Delegates.WindowPos2sv));

            #endregion WindowPos2sv

            #region WindowPos3d

            /// <summary>
            /// 
            /// </summary>
            public delegate void WindowPos3d(GLdouble x, GLdouble y, GLdouble z);
            public static WindowPos3d glWindowPos3d = (WindowPos3d)GetDelegateForExtensionMethod("glWindowPos3d", typeof(Delegates.WindowPos3d));

            #endregion WindowPos3d

            #region WindowPos3dv

            /// <summary>
            /// 
            /// </summary>
            public delegate void WindowPos3dv(IntPtr v);
            public static WindowPos3dv glWindowPos3dv = (WindowPos3dv)GetDelegateForExtensionMethod("glWindowPos3dv", typeof(Delegates.WindowPos3dv));

            #endregion WindowPos3dv

            #region WindowPos3f

            /// <summary>
            /// 
            /// </summary>
            public delegate void WindowPos3f(GLfloat x, GLfloat y, GLfloat z);
            public static WindowPos3f glWindowPos3f = (WindowPos3f)GetDelegateForExtensionMethod("glWindowPos3f", typeof(Delegates.WindowPos3f));

            #endregion WindowPos3f

            #region WindowPos3fv

            /// <summary>
            /// 
            /// </summary>
            public delegate void WindowPos3fv(IntPtr v);
            public static WindowPos3fv glWindowPos3fv = (WindowPos3fv)GetDelegateForExtensionMethod("glWindowPos3fv", typeof(Delegates.WindowPos3fv));

            #endregion WindowPos3fv

            #region WindowPos3i

            /// <summary>
            /// 
            /// </summary>
            public delegate void WindowPos3i(GLint x, GLint y, GLint z);
            public static WindowPos3i glWindowPos3i = (WindowPos3i)GetDelegateForExtensionMethod("glWindowPos3i", typeof(Delegates.WindowPos3i));

            #endregion WindowPos3i

            #region WindowPos3iv

            /// <summary>
            /// 
            /// </summary>
            public delegate void WindowPos3iv(IntPtr v);
            public static WindowPos3iv glWindowPos3iv = (WindowPos3iv)GetDelegateForExtensionMethod("glWindowPos3iv", typeof(Delegates.WindowPos3iv));

            #endregion WindowPos3iv

            #region WindowPos3s

            /// <summary>
            /// 
            /// </summary>
            public delegate void WindowPos3s(GLshort x, GLshort y, GLshort z);
            public static WindowPos3s glWindowPos3s = (WindowPos3s)GetDelegateForExtensionMethod("glWindowPos3s", typeof(Delegates.WindowPos3s));

            #endregion WindowPos3s

            #region WindowPos3sv

            /// <summary>
            /// 
            /// </summary>
            public delegate void WindowPos3sv(IntPtr v);
            public static WindowPos3sv glWindowPos3sv = (WindowPos3sv)GetDelegateForExtensionMethod("glWindowPos3sv", typeof(Delegates.WindowPos3sv));

            #endregion WindowPos3sv

            #region GenQueries

            /// <summary>
            /// 
            /// </summary>
            public delegate void GenQueries(GLsizei n, IntPtr ids);
            public static GenQueries glGenQueries = (GenQueries)GetDelegateForExtensionMethod("glGenQueries", typeof(Delegates.GenQueries));

            #endregion GenQueries

            #region DeleteQueries

            /// <summary>
            /// 
            /// </summary>
            public delegate void DeleteQueries(GLsizei n, IntPtr ids);
            public static DeleteQueries glDeleteQueries = (DeleteQueries)GetDelegateForExtensionMethod("glDeleteQueries", typeof(Delegates.DeleteQueries));

            #endregion DeleteQueries

            #region IsQuery

            /// <summary>
            /// 
            /// </summary>
            public delegate GLboolean IsQuery(GLuint id);
            public static IsQuery glIsQuery = (IsQuery)GetDelegateForExtensionMethod("glIsQuery", typeof(Delegates.IsQuery));

            #endregion IsQuery

            #region BeginQuery

            /// <summary>
            /// 
            /// </summary>
            public delegate void BeginQuery(GLenum target, GLuint id);
            public static BeginQuery glBeginQuery = (BeginQuery)GetDelegateForExtensionMethod("glBeginQuery", typeof(Delegates.BeginQuery));

            #endregion BeginQuery

            #region EndQuery

            /// <summary>
            /// 
            /// </summary>
            public delegate void EndQuery(GLenum target);
            public static EndQuery glEndQuery = (EndQuery)GetDelegateForExtensionMethod("glEndQuery", typeof(Delegates.EndQuery));

            #endregion EndQuery

            #region GetQueryiv

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetQueryiv(GLenum target, GLenum pname, IntPtr parameters);
            public static GetQueryiv glGetQueryiv = (GetQueryiv)GetDelegateForExtensionMethod("glGetQueryiv", typeof(Delegates.GetQueryiv));

            #endregion GetQueryiv

            #region GetQueryObjectiv

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetQueryObjectiv(GLuint id, GLenum pname, IntPtr parameters);
            public static GetQueryObjectiv glGetQueryObjectiv = (GetQueryObjectiv)GetDelegateForExtensionMethod("glGetQueryObjectiv", typeof(Delegates.GetQueryObjectiv));

            #endregion GetQueryObjectiv

            #region GetQueryObjectuiv

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetQueryObjectuiv(GLuint id, GLenum pname, IntPtr parameters);
            public static GetQueryObjectuiv glGetQueryObjectuiv = (GetQueryObjectuiv)GetDelegateForExtensionMethod("glGetQueryObjectuiv", typeof(Delegates.GetQueryObjectuiv));

            #endregion GetQueryObjectuiv

            #region BindBuffer

            /// <summary>
            /// 
            /// </summary>
            public delegate void BindBuffer(GLenum target, GLuint buffer);
            public static BindBuffer glBindBuffer = (BindBuffer)GetDelegateForExtensionMethod("glBindBuffer", typeof(Delegates.BindBuffer));

            #endregion BindBuffer

            #region DeleteBuffers

            /// <summary>
            /// 
            /// </summary>
            public delegate void DeleteBuffers(GLsizei n, IntPtr buffers);
            public static DeleteBuffers glDeleteBuffers = (DeleteBuffers)GetDelegateForExtensionMethod("glDeleteBuffers", typeof(Delegates.DeleteBuffers));

            #endregion DeleteBuffers

            #region GenBuffers

            /// <summary>
            /// 
            /// </summary>
            public delegate void GenBuffers(GLsizei n, IntPtr buffers);
            public static GenBuffers glGenBuffers = (GenBuffers)GetDelegateForExtensionMethod("glGenBuffers", typeof(Delegates.GenBuffers));

            #endregion GenBuffers

            #region IsBuffer

            /// <summary>
            /// 
            /// </summary>
            public delegate GLboolean IsBuffer(GLuint buffer);
            public static IsBuffer glIsBuffer = (IsBuffer)GetDelegateForExtensionMethod("glIsBuffer", typeof(Delegates.IsBuffer));

            #endregion IsBuffer

            #region BufferData

            /// <summary>
            /// 
            /// </summary>
            public delegate void BufferData(GLenum target, GLsizeiptr size, IntPtr data, GLenum usage);
            public static BufferData glBufferData = (BufferData)GetDelegateForExtensionMethod("glBufferData", typeof(Delegates.BufferData));

            #endregion BufferData

            #region BufferSubData

            /// <summary>
            /// 
            /// </summary>
            public delegate void BufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, IntPtr data);
            public static BufferSubData glBufferSubData = (BufferSubData)GetDelegateForExtensionMethod("glBufferSubData", typeof(Delegates.BufferSubData));

            #endregion BufferSubData

            #region GetBufferSubData

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, IntPtr data);
            public static GetBufferSubData glGetBufferSubData = (GetBufferSubData)GetDelegateForExtensionMethod("glGetBufferSubData", typeof(Delegates.GetBufferSubData));

            #endregion GetBufferSubData

            #region MapBuffer

            /// <summary>
            /// 
            /// </summary>
            public delegate IntPtr MapBuffer(GLenum target, GLenum access);
            public static MapBuffer glMapBuffer = (MapBuffer)GetDelegateForExtensionMethod("glMapBuffer", typeof(Delegates.MapBuffer));

            #endregion MapBuffer

            #region UnmapBuffer

            /// <summary>
            /// 
            /// </summary>
            public delegate GLboolean UnmapBuffer(GLenum target);
            public static UnmapBuffer glUnmapBuffer = (UnmapBuffer)GetDelegateForExtensionMethod("glUnmapBuffer", typeof(Delegates.UnmapBuffer));

            #endregion UnmapBuffer

            #region GetBufferParameteriv

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetBufferParameteriv(GLenum target, GLenum pname, IntPtr parameters);
            public static GetBufferParameteriv glGetBufferParameteriv = (GetBufferParameteriv)GetDelegateForExtensionMethod("glGetBufferParameteriv", typeof(Delegates.GetBufferParameteriv));

            #endregion GetBufferParameteriv

            #region GetBufferPointerv

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetBufferPointerv(GLenum target, GLenum pname, IntPtr parameters);
            public static GetBufferPointerv glGetBufferPointerv = (GetBufferPointerv)GetDelegateForExtensionMethod("glGetBufferPointerv", typeof(Delegates.GetBufferPointerv));

            #endregion GetBufferPointerv

            #region BlendEquationSeparate

            /// <summary>
            /// 
            /// </summary>
            public delegate void BlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha);
            public static BlendEquationSeparate glBlendEquationSeparate = (BlendEquationSeparate)GetDelegateForExtensionMethod("glBlendEquationSeparate", typeof(Delegates.BlendEquationSeparate));

            #endregion BlendEquationSeparate

            #region DrawBuffers

            /// <summary>
            /// 
            /// </summary>
            public delegate void DrawBuffers(GLsizei n, IntPtr bufs);
            public static DrawBuffers glDrawBuffers = (DrawBuffers)GetDelegateForExtensionMethod("glDrawBuffers", typeof(Delegates.DrawBuffers));

            #endregion DrawBuffers

            #region StencilOpSeparate

            /// <summary>
            /// 
            /// </summary>
            public delegate void StencilOpSeparate(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
            public static StencilOpSeparate glStencilOpSeparate = (StencilOpSeparate)GetDelegateForExtensionMethod("glStencilOpSeparate", typeof(Delegates.StencilOpSeparate));

            #endregion StencilOpSeparate

            #region StencilFuncSeparate

            /// <summary>
            /// 
            /// </summary>
            public delegate void StencilFuncSeparate(GLenum frontfunc, GLenum backfunc, GLint reference, GLuint mask);
            public static StencilFuncSeparate glStencilFuncSeparate = (StencilFuncSeparate)GetDelegateForExtensionMethod("glStencilFuncSeparate", typeof(Delegates.StencilFuncSeparate));

            #endregion StencilFuncSeparate

            #region StencilMaskSeparate

            /// <summary>
            /// 
            /// </summary>
            public delegate void StencilMaskSeparate(GLenum face, GLuint mask);
            public static StencilMaskSeparate glStencilMaskSeparate = (StencilMaskSeparate)GetDelegateForExtensionMethod("glStencilMaskSeparate", typeof(Delegates.StencilMaskSeparate));

            #endregion StencilMaskSeparate

            #region AttachShader

            /// <summary>
            /// 
            /// </summary>
            public delegate void AttachShader(GLuint program, GLuint shader);
            public static AttachShader glAttachShader = (AttachShader)GetDelegateForExtensionMethod("glAttachShader", typeof(Delegates.AttachShader));

            #endregion AttachShader

            #region BindAttribLocation

            /// <summary>
            /// 
            /// </summary>
            public delegate void BindAttribLocation(GLuint program, GLuint index, string name);
            public static BindAttribLocation glBindAttribLocation = (BindAttribLocation)GetDelegateForExtensionMethod("glBindAttribLocation", typeof(Delegates.BindAttribLocation));

            #endregion BindAttribLocation

            #region CompileShader

            /// <summary>
            /// 
            /// </summary>
            public delegate void CompileShader(GLuint shader);
            public static CompileShader glCompileShader = (CompileShader)GetDelegateForExtensionMethod("glCompileShader", typeof(Delegates.CompileShader));

            #endregion CompileShader

            #region CreateProgram

            /// <summary>
            /// 
            /// </summary>
            public delegate GLuint CreateProgram();
            public static CreateProgram glCreateProgram = (CreateProgram)GetDelegateForExtensionMethod("glCreateProgram", typeof(Delegates.CreateProgram));

            #endregion CreateProgram

            #region CreateShader

            /// <summary>
            /// 
            /// </summary>
            public delegate GLuint CreateShader(GLenum type);
            public static CreateShader glCreateShader = (CreateShader)GetDelegateForExtensionMethod("glCreateShader", typeof(Delegates.CreateShader));

            #endregion CreateShader

            #region DeleteProgram

            /// <summary>
            /// 
            /// </summary>
            public delegate void DeleteProgram(GLuint program);
            public static DeleteProgram glDeleteProgram = (DeleteProgram)GetDelegateForExtensionMethod("glDeleteProgram", typeof(Delegates.DeleteProgram));

            #endregion DeleteProgram

            #region DeleteShader

            /// <summary>
            /// 
            /// </summary>
            public delegate void DeleteShader(GLuint shader);
            public static DeleteShader glDeleteShader = (DeleteShader)GetDelegateForExtensionMethod("glDeleteShader", typeof(Delegates.DeleteShader));

            #endregion DeleteShader

            #region DetachShader

            /// <summary>
            /// 
            /// </summary>
            public delegate void DetachShader(GLuint program, GLuint shader);
            public static DetachShader glDetachShader = (DetachShader)GetDelegateForExtensionMethod("glDetachShader", typeof(Delegates.DetachShader));

            #endregion DetachShader

            #region DisableVertexAttribArray

            /// <summary>
            /// 
            /// </summary>
            public delegate void DisableVertexAttribArray(GLuint index);
            public static DisableVertexAttribArray glDisableVertexAttribArray = (DisableVertexAttribArray)GetDelegateForExtensionMethod("glDisableVertexAttribArray", typeof(Delegates.DisableVertexAttribArray));

            #endregion DisableVertexAttribArray

            #region EnableVertexAttribArray

            /// <summary>
            /// 
            /// </summary>
            public delegate void EnableVertexAttribArray(GLuint index);
            public static EnableVertexAttribArray glEnableVertexAttribArray = (EnableVertexAttribArray)GetDelegateForExtensionMethod("glEnableVertexAttribArray", typeof(Delegates.EnableVertexAttribArray));

            #endregion EnableVertexAttribArray

            #region GetActiveAttrib

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, IntPtr size, IntPtr type, StringBuilder name);
            public static GetActiveAttrib glGetActiveAttrib = (GetActiveAttrib)GetDelegateForExtensionMethod("glGetActiveAttrib", typeof(Delegates.GetActiveAttrib));

            #endregion GetActiveAttrib

            #region GetActiveUniform

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, IntPtr size, IntPtr type, StringBuilder name);
            public static GetActiveUniform glGetActiveUniform = (GetActiveUniform)GetDelegateForExtensionMethod("glGetActiveUniform", typeof(Delegates.GetActiveUniform));

            #endregion GetActiveUniform

            #region GetAttachedShaders

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetAttachedShaders(GLuint program, GLsizei maxCount, IntPtr count, IntPtr obj);
            public static GetAttachedShaders glGetAttachedShaders = (GetAttachedShaders)GetDelegateForExtensionMethod("glGetAttachedShaders", typeof(Delegates.GetAttachedShaders));

            #endregion GetAttachedShaders

            #region GetAttribLocation

            /// <summary>
            /// 
            /// </summary>
            public delegate GLint GetAttribLocation(GLuint program, string name);
            public static GetAttribLocation glGetAttribLocation = (GetAttribLocation)GetDelegateForExtensionMethod("glGetAttribLocation", typeof(Delegates.GetAttribLocation));

            #endregion GetAttribLocation

            #region GetProgramiv

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetProgramiv(GLuint program, GLenum pname, IntPtr parameters);
            public static GetProgramiv glGetProgramiv = (GetProgramiv)GetDelegateForExtensionMethod("glGetProgramiv", typeof(Delegates.GetProgramiv));

            #endregion GetProgramiv

            #region GetProgramInfoLog

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetProgramInfoLog(GLuint program, GLsizei bufSize, IntPtr length, StringBuilder infoLog);
            public static GetProgramInfoLog glGetProgramInfoLog = (GetProgramInfoLog)GetDelegateForExtensionMethod("glGetProgramInfoLog", typeof(Delegates.GetProgramInfoLog));

            #endregion GetProgramInfoLog

            #region GetShaderiv

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetShaderiv(GLuint shader, GLenum pname, IntPtr parameters);
            public static GetShaderiv glGetShaderiv = (GetShaderiv)GetDelegateForExtensionMethod("glGetShaderiv", typeof(Delegates.GetShaderiv));

            #endregion GetShaderiv

            #region GetShaderInfoLog

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetShaderInfoLog(GLuint shader, GLsizei bufSize, IntPtr length, StringBuilder infoLog);
            public static GetShaderInfoLog glGetShaderInfoLog = (GetShaderInfoLog)GetDelegateForExtensionMethod("glGetShaderInfoLog", typeof(Delegates.GetShaderInfoLog));

            #endregion GetShaderInfoLog

            #region GetShaderSource

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetShaderSource(GLuint shader, GLsizei bufSize, IntPtr length, StringBuilder source);
            public static GetShaderSource glGetShaderSource = (GetShaderSource)GetDelegateForExtensionMethod("glGetShaderSource", typeof(Delegates.GetShaderSource));

            #endregion GetShaderSource

            #region GetUniformLocation

            /// <summary>
            /// 
            /// </summary>
            public delegate GLint GetUniformLocation(GLuint program, string name);
            public static GetUniformLocation glGetUniformLocation = (GetUniformLocation)GetDelegateForExtensionMethod("glGetUniformLocation", typeof(Delegates.GetUniformLocation));

            #endregion GetUniformLocation

            #region GetUniformfv

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetUniformfv(GLuint program, GLint location, IntPtr parameters);
            public static GetUniformfv glGetUniformfv = (GetUniformfv)GetDelegateForExtensionMethod("glGetUniformfv", typeof(Delegates.GetUniformfv));

            #endregion GetUniformfv

            #region GetUniformiv

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetUniformiv(GLuint program, GLint location, IntPtr parameters);
            public static GetUniformiv glGetUniformiv = (GetUniformiv)GetDelegateForExtensionMethod("glGetUniformiv", typeof(Delegates.GetUniformiv));

            #endregion GetUniformiv

            #region GetVertexAttribdv

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetVertexAttribdv(GLuint index, GLenum pname, IntPtr parameters);
            public static GetVertexAttribdv glGetVertexAttribdv = (GetVertexAttribdv)GetDelegateForExtensionMethod("glGetVertexAttribdv", typeof(Delegates.GetVertexAttribdv));

            #endregion GetVertexAttribdv

            #region GetVertexAttribfv

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetVertexAttribfv(GLuint index, GLenum pname, IntPtr parameters);
            public static GetVertexAttribfv glGetVertexAttribfv = (GetVertexAttribfv)GetDelegateForExtensionMethod("glGetVertexAttribfv", typeof(Delegates.GetVertexAttribfv));

            #endregion GetVertexAttribfv

            #region GetVertexAttribiv

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetVertexAttribiv(GLuint index, GLenum pname, IntPtr parameters);
            public static GetVertexAttribiv glGetVertexAttribiv = (GetVertexAttribiv)GetDelegateForExtensionMethod("glGetVertexAttribiv", typeof(Delegates.GetVertexAttribiv));

            #endregion GetVertexAttribiv

            #region GetVertexAttribPointerv

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetVertexAttribPointerv(GLuint index, GLenum pname, IntPtr pointer);
            public static GetVertexAttribPointerv glGetVertexAttribPointerv = (GetVertexAttribPointerv)GetDelegateForExtensionMethod("glGetVertexAttribPointerv", typeof(Delegates.GetVertexAttribPointerv));

            #endregion GetVertexAttribPointerv

            #region IsProgram

            /// <summary>
            /// 
            /// </summary>
            public delegate GLboolean IsProgram(GLuint program);
            public static IsProgram glIsProgram = (IsProgram)GetDelegateForExtensionMethod("glIsProgram", typeof(Delegates.IsProgram));

            #endregion IsProgram

            #region IsShader

            /// <summary>
            /// 
            /// </summary>
            public delegate GLboolean IsShader(GLuint shader);
            public static IsShader glIsShader = (IsShader)GetDelegateForExtensionMethod("glIsShader", typeof(Delegates.IsShader));

            #endregion IsShader

            #region LinkProgram

            /// <summary>
            /// 
            /// </summary>
            public delegate void LinkProgram(GLuint program);
            public static LinkProgram glLinkProgram = (LinkProgram)GetDelegateForExtensionMethod("glLinkProgram", typeof(Delegates.LinkProgram));

            #endregion LinkProgram

            #region ShaderSource

            /// <summary>
            /// 
            /// </summary>
            public delegate void ShaderSource(GLuint shader, GLsizei count, string[] @string, IntPtr length);
            public static ShaderSource glShaderSource = (ShaderSource)GetDelegateForExtensionMethod("glShaderSource", typeof(Delegates.ShaderSource));

            #endregion ShaderSource

            #region UseProgram

            /// <summary>
            /// 
            /// </summary>
            public delegate void UseProgram(GLuint program);
            public static UseProgram glUseProgram = (UseProgram)GetDelegateForExtensionMethod("glUseProgram", typeof(Delegates.UseProgram));

            #endregion UseProgram

            #region Uniform1f

            /// <summary>
            /// 
            /// </summary>
            public delegate void Uniform1f(GLint location, GLfloat v0);
            public static Uniform1f glUniform1f = (Uniform1f)GetDelegateForExtensionMethod("glUniform1f", typeof(Delegates.Uniform1f));

            #endregion Uniform1f

            #region Uniform2f

            /// <summary>
            /// 
            /// </summary>
            public delegate void Uniform2f(GLint location, GLfloat v0, GLfloat v1);
            public static Uniform2f glUniform2f = (Uniform2f)GetDelegateForExtensionMethod("glUniform2f", typeof(Delegates.Uniform2f));

            #endregion Uniform2f

            #region Uniform3f

            /// <summary>
            /// 
            /// </summary>
            public delegate void Uniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
            public static Uniform3f glUniform3f = (Uniform3f)GetDelegateForExtensionMethod("glUniform3f", typeof(Delegates.Uniform3f));

            #endregion Uniform3f

            #region Uniform4f

            /// <summary>
            /// 
            /// </summary>
            public delegate void Uniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
            public static Uniform4f glUniform4f = (Uniform4f)GetDelegateForExtensionMethod("glUniform4f", typeof(Delegates.Uniform4f));

            #endregion Uniform4f

            #region Uniform1i

            /// <summary>
            /// 
            /// </summary>
            public delegate void Uniform1i(GLint location, GLint v0);
            public static Uniform1i glUniform1i = (Uniform1i)GetDelegateForExtensionMethod("glUniform1i", typeof(Delegates.Uniform1i));

            #endregion Uniform1i

            #region Uniform2i

            /// <summary>
            /// 
            /// </summary>
            public delegate void Uniform2i(GLint location, GLint v0, GLint v1);
            public static Uniform2i glUniform2i = (Uniform2i)GetDelegateForExtensionMethod("glUniform2i", typeof(Delegates.Uniform2i));

            #endregion Uniform2i

            #region Uniform3i

            /// <summary>
            /// 
            /// </summary>
            public delegate void Uniform3i(GLint location, GLint v0, GLint v1, GLint v2);
            public static Uniform3i glUniform3i = (Uniform3i)GetDelegateForExtensionMethod("glUniform3i", typeof(Delegates.Uniform3i));

            #endregion Uniform3i

            #region Uniform4i

            /// <summary>
            /// 
            /// </summary>
            public delegate void Uniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
            public static Uniform4i glUniform4i = (Uniform4i)GetDelegateForExtensionMethod("glUniform4i", typeof(Delegates.Uniform4i));

            #endregion Uniform4i

            #region Uniform1fv

            /// <summary>
            /// 
            /// </summary>
            public delegate void Uniform1fv(GLint location, GLsizei count, IntPtr value);
            public static Uniform1fv glUniform1fv = (Uniform1fv)GetDelegateForExtensionMethod("glUniform1fv", typeof(Delegates.Uniform1fv));

            #endregion Uniform1fv

            #region Uniform2fv

            /// <summary>
            /// 
            /// </summary>
            public delegate void Uniform2fv(GLint location, GLsizei count, IntPtr value);
            public static Uniform2fv glUniform2fv = (Uniform2fv)GetDelegateForExtensionMethod("glUniform2fv", typeof(Delegates.Uniform2fv));

            #endregion Uniform2fv

            #region Uniform3fv

            /// <summary>
            /// 
            /// </summary>
            public delegate void Uniform3fv(GLint location, GLsizei count, IntPtr value);
            public static Uniform3fv glUniform3fv = (Uniform3fv)GetDelegateForExtensionMethod("glUniform3fv", typeof(Delegates.Uniform3fv));

            #endregion Uniform3fv

            #region Uniform4fv

            /// <summary>
            /// 
            /// </summary>
            public delegate void Uniform4fv(GLint location, GLsizei count, IntPtr value);
            public static Uniform4fv glUniform4fv = (Uniform4fv)GetDelegateForExtensionMethod("glUniform4fv", typeof(Delegates.Uniform4fv));

            #endregion Uniform4fv

            #region Uniform1iv

            /// <summary>
            /// 
            /// </summary>
            public delegate void Uniform1iv(GLint location, GLsizei count, IntPtr value);
            public static Uniform1iv glUniform1iv = (Uniform1iv)GetDelegateForExtensionMethod("glUniform1iv", typeof(Delegates.Uniform1iv));

            #endregion Uniform1iv

            #region Uniform2iv

            /// <summary>
            /// 
            /// </summary>
            public delegate void Uniform2iv(GLint location, GLsizei count, IntPtr value);
            public static Uniform2iv glUniform2iv = (Uniform2iv)GetDelegateForExtensionMethod("glUniform2iv", typeof(Delegates.Uniform2iv));

            #endregion Uniform2iv

            #region Uniform3iv

            /// <summary>
            /// 
            /// </summary>
            public delegate void Uniform3iv(GLint location, GLsizei count, IntPtr value);
            public static Uniform3iv glUniform3iv = (Uniform3iv)GetDelegateForExtensionMethod("glUniform3iv", typeof(Delegates.Uniform3iv));

            #endregion Uniform3iv

            #region Uniform4iv

            /// <summary>
            /// 
            /// </summary>
            public delegate void Uniform4iv(GLint location, GLsizei count, IntPtr value);
            public static Uniform4iv glUniform4iv = (Uniform4iv)GetDelegateForExtensionMethod("glUniform4iv", typeof(Delegates.Uniform4iv));

            #endregion Uniform4iv

            #region UniformMatrix2fv

            /// <summary>
            /// 
            /// </summary>
            public delegate void UniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, IntPtr value);
            public static UniformMatrix2fv glUniformMatrix2fv = (UniformMatrix2fv)GetDelegateForExtensionMethod("glUniformMatrix2fv", typeof(Delegates.UniformMatrix2fv));

            #endregion UniformMatrix2fv

            #region UniformMatrix3fv

            /// <summary>
            /// 
            /// </summary>
            public delegate void UniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, IntPtr value);
            public static UniformMatrix3fv glUniformMatrix3fv = (UniformMatrix3fv)GetDelegateForExtensionMethod("glUniformMatrix3fv", typeof(Delegates.UniformMatrix3fv));

            #endregion UniformMatrix3fv

            #region UniformMatrix4fv

            /// <summary>
            /// 
            /// </summary>
            public delegate void UniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, IntPtr value);
            public static UniformMatrix4fv glUniformMatrix4fv = (UniformMatrix4fv)GetDelegateForExtensionMethod("glUniformMatrix4fv", typeof(Delegates.UniformMatrix4fv));

            #endregion UniformMatrix4fv

            #region ValidateProgram

            /// <summary>
            /// 
            /// </summary>
            public delegate void ValidateProgram(GLuint program);
            public static ValidateProgram glValidateProgram = (ValidateProgram)GetDelegateForExtensionMethod("glValidateProgram", typeof(Delegates.ValidateProgram));

            #endregion ValidateProgram

            #region VertexAttrib1d

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib1d(GLuint index, GLdouble x);
            public static VertexAttrib1d glVertexAttrib1d = (VertexAttrib1d)GetDelegateForExtensionMethod("glVertexAttrib1d", typeof(Delegates.VertexAttrib1d));

            #endregion VertexAttrib1d

            #region VertexAttrib1dv

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib1dv(GLuint index, IntPtr v);
            public static VertexAttrib1dv glVertexAttrib1dv = (VertexAttrib1dv)GetDelegateForExtensionMethod("glVertexAttrib1dv", typeof(Delegates.VertexAttrib1dv));

            #endregion VertexAttrib1dv

            #region VertexAttrib1f

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib1f(GLuint index, GLfloat x);
            public static VertexAttrib1f glVertexAttrib1f = (VertexAttrib1f)GetDelegateForExtensionMethod("glVertexAttrib1f", typeof(Delegates.VertexAttrib1f));

            #endregion VertexAttrib1f

            #region VertexAttrib1fv

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib1fv(GLuint index, IntPtr v);
            public static VertexAttrib1fv glVertexAttrib1fv = (VertexAttrib1fv)GetDelegateForExtensionMethod("glVertexAttrib1fv", typeof(Delegates.VertexAttrib1fv));

            #endregion VertexAttrib1fv

            #region VertexAttrib1s

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib1s(GLuint index, GLshort x);
            public static VertexAttrib1s glVertexAttrib1s = (VertexAttrib1s)GetDelegateForExtensionMethod("glVertexAttrib1s", typeof(Delegates.VertexAttrib1s));

            #endregion VertexAttrib1s

            #region VertexAttrib1sv

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib1sv(GLuint index, IntPtr v);
            public static VertexAttrib1sv glVertexAttrib1sv = (VertexAttrib1sv)GetDelegateForExtensionMethod("glVertexAttrib1sv", typeof(Delegates.VertexAttrib1sv));

            #endregion VertexAttrib1sv

            #region VertexAttrib2d

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib2d(GLuint index, GLdouble x, GLdouble y);
            public static VertexAttrib2d glVertexAttrib2d = (VertexAttrib2d)GetDelegateForExtensionMethod("glVertexAttrib2d", typeof(Delegates.VertexAttrib2d));

            #endregion VertexAttrib2d

            #region VertexAttrib2dv

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib2dv(GLuint index, IntPtr v);
            public static VertexAttrib2dv glVertexAttrib2dv = (VertexAttrib2dv)GetDelegateForExtensionMethod("glVertexAttrib2dv", typeof(Delegates.VertexAttrib2dv));

            #endregion VertexAttrib2dv

            #region VertexAttrib2f

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib2f(GLuint index, GLfloat x, GLfloat y);
            public static VertexAttrib2f glVertexAttrib2f = (VertexAttrib2f)GetDelegateForExtensionMethod("glVertexAttrib2f", typeof(Delegates.VertexAttrib2f));

            #endregion VertexAttrib2f

            #region VertexAttrib2fv

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib2fv(GLuint index, IntPtr v);
            public static VertexAttrib2fv glVertexAttrib2fv = (VertexAttrib2fv)GetDelegateForExtensionMethod("glVertexAttrib2fv", typeof(Delegates.VertexAttrib2fv));

            #endregion VertexAttrib2fv

            #region VertexAttrib2s

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib2s(GLuint index, GLshort x, GLshort y);
            public static VertexAttrib2s glVertexAttrib2s = (VertexAttrib2s)GetDelegateForExtensionMethod("glVertexAttrib2s", typeof(Delegates.VertexAttrib2s));

            #endregion VertexAttrib2s

            #region VertexAttrib2sv

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib2sv(GLuint index, IntPtr v);
            public static VertexAttrib2sv glVertexAttrib2sv = (VertexAttrib2sv)GetDelegateForExtensionMethod("glVertexAttrib2sv", typeof(Delegates.VertexAttrib2sv));

            #endregion VertexAttrib2sv

            #region VertexAttrib3d

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib3d(GLuint index, GLdouble x, GLdouble y, GLdouble z);
            public static VertexAttrib3d glVertexAttrib3d = (VertexAttrib3d)GetDelegateForExtensionMethod("glVertexAttrib3d", typeof(Delegates.VertexAttrib3d));

            #endregion VertexAttrib3d

            #region VertexAttrib3dv

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib3dv(GLuint index, IntPtr v);
            public static VertexAttrib3dv glVertexAttrib3dv = (VertexAttrib3dv)GetDelegateForExtensionMethod("glVertexAttrib3dv", typeof(Delegates.VertexAttrib3dv));

            #endregion VertexAttrib3dv

            #region VertexAttrib3f

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib3f(GLuint index, GLfloat x, GLfloat y, GLfloat z);
            public static VertexAttrib3f glVertexAttrib3f = (VertexAttrib3f)GetDelegateForExtensionMethod("glVertexAttrib3f", typeof(Delegates.VertexAttrib3f));

            #endregion VertexAttrib3f

            #region VertexAttrib3fv

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib3fv(GLuint index, IntPtr v);
            public static VertexAttrib3fv glVertexAttrib3fv = (VertexAttrib3fv)GetDelegateForExtensionMethod("glVertexAttrib3fv", typeof(Delegates.VertexAttrib3fv));

            #endregion VertexAttrib3fv

            #region VertexAttrib3s

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib3s(GLuint index, GLshort x, GLshort y, GLshort z);
            public static VertexAttrib3s glVertexAttrib3s = (VertexAttrib3s)GetDelegateForExtensionMethod("glVertexAttrib3s", typeof(Delegates.VertexAttrib3s));

            #endregion VertexAttrib3s

            #region VertexAttrib3sv

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib3sv(GLuint index, IntPtr v);
            public static VertexAttrib3sv glVertexAttrib3sv = (VertexAttrib3sv)GetDelegateForExtensionMethod("glVertexAttrib3sv", typeof(Delegates.VertexAttrib3sv));

            #endregion VertexAttrib3sv

            #region VertexAttrib4Nbv

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib4Nbv(GLuint index, IntPtr v);
            public static VertexAttrib4Nbv glVertexAttrib4Nbv = (VertexAttrib4Nbv)GetDelegateForExtensionMethod("glVertexAttrib4Nbv", typeof(Delegates.VertexAttrib4Nbv));

            #endregion VertexAttrib4Nbv

            #region VertexAttrib4Niv

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib4Niv(GLuint index, IntPtr v);
            public static VertexAttrib4Niv glVertexAttrib4Niv = (VertexAttrib4Niv)GetDelegateForExtensionMethod("glVertexAttrib4Niv", typeof(Delegates.VertexAttrib4Niv));

            #endregion VertexAttrib4Niv

            #region VertexAttrib4Nsv

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib4Nsv(GLuint index, IntPtr v);
            public static VertexAttrib4Nsv glVertexAttrib4Nsv = (VertexAttrib4Nsv)GetDelegateForExtensionMethod("glVertexAttrib4Nsv", typeof(Delegates.VertexAttrib4Nsv));

            #endregion VertexAttrib4Nsv

            #region VertexAttrib4Nub

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib4Nub(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
            public static VertexAttrib4Nub glVertexAttrib4Nub = (VertexAttrib4Nub)GetDelegateForExtensionMethod("glVertexAttrib4Nub", typeof(Delegates.VertexAttrib4Nub));

            #endregion VertexAttrib4Nub

            #region VertexAttrib4Nubv

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib4Nubv(GLuint index, IntPtr v);
            public static VertexAttrib4Nubv glVertexAttrib4Nubv = (VertexAttrib4Nubv)GetDelegateForExtensionMethod("glVertexAttrib4Nubv", typeof(Delegates.VertexAttrib4Nubv));

            #endregion VertexAttrib4Nubv

            #region VertexAttrib4Nuiv

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib4Nuiv(GLuint index, IntPtr v);
            public static VertexAttrib4Nuiv glVertexAttrib4Nuiv = (VertexAttrib4Nuiv)GetDelegateForExtensionMethod("glVertexAttrib4Nuiv", typeof(Delegates.VertexAttrib4Nuiv));

            #endregion VertexAttrib4Nuiv

            #region VertexAttrib4Nusv

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib4Nusv(GLuint index, IntPtr v);
            public static VertexAttrib4Nusv glVertexAttrib4Nusv = (VertexAttrib4Nusv)GetDelegateForExtensionMethod("glVertexAttrib4Nusv", typeof(Delegates.VertexAttrib4Nusv));

            #endregion VertexAttrib4Nusv

            #region VertexAttrib4bv

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib4bv(GLuint index, IntPtr v);
            public static VertexAttrib4bv glVertexAttrib4bv = (VertexAttrib4bv)GetDelegateForExtensionMethod("glVertexAttrib4bv", typeof(Delegates.VertexAttrib4bv));

            #endregion VertexAttrib4bv

            #region VertexAttrib4d

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
            public static VertexAttrib4d glVertexAttrib4d = (VertexAttrib4d)GetDelegateForExtensionMethod("glVertexAttrib4d", typeof(Delegates.VertexAttrib4d));

            #endregion VertexAttrib4d

            #region VertexAttrib4dv

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib4dv(GLuint index, IntPtr v);
            public static VertexAttrib4dv glVertexAttrib4dv = (VertexAttrib4dv)GetDelegateForExtensionMethod("glVertexAttrib4dv", typeof(Delegates.VertexAttrib4dv));

            #endregion VertexAttrib4dv

            #region VertexAttrib4f

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib4f(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
            public static VertexAttrib4f glVertexAttrib4f = (VertexAttrib4f)GetDelegateForExtensionMethod("glVertexAttrib4f", typeof(Delegates.VertexAttrib4f));

            #endregion VertexAttrib4f

            #region VertexAttrib4fv

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib4fv(GLuint index, IntPtr v);
            public static VertexAttrib4fv glVertexAttrib4fv = (VertexAttrib4fv)GetDelegateForExtensionMethod("glVertexAttrib4fv", typeof(Delegates.VertexAttrib4fv));

            #endregion VertexAttrib4fv

            #region VertexAttrib4iv

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib4iv(GLuint index, IntPtr v);
            public static VertexAttrib4iv glVertexAttrib4iv = (VertexAttrib4iv)GetDelegateForExtensionMethod("glVertexAttrib4iv", typeof(Delegates.VertexAttrib4iv));

            #endregion VertexAttrib4iv

            #region VertexAttrib4s

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib4s(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
            public static VertexAttrib4s glVertexAttrib4s = (VertexAttrib4s)GetDelegateForExtensionMethod("glVertexAttrib4s", typeof(Delegates.VertexAttrib4s));

            #endregion VertexAttrib4s

            #region VertexAttrib4sv

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib4sv(GLuint index, IntPtr v);
            public static VertexAttrib4sv glVertexAttrib4sv = (VertexAttrib4sv)GetDelegateForExtensionMethod("glVertexAttrib4sv", typeof(Delegates.VertexAttrib4sv));

            #endregion VertexAttrib4sv

            #region VertexAttrib4ubv

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib4ubv(GLuint index, IntPtr v);
            public static VertexAttrib4ubv glVertexAttrib4ubv = (VertexAttrib4ubv)GetDelegateForExtensionMethod("glVertexAttrib4ubv", typeof(Delegates.VertexAttrib4ubv));

            #endregion VertexAttrib4ubv

            #region VertexAttrib4uiv

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib4uiv(GLuint index, IntPtr v);
            public static VertexAttrib4uiv glVertexAttrib4uiv = (VertexAttrib4uiv)GetDelegateForExtensionMethod("glVertexAttrib4uiv", typeof(Delegates.VertexAttrib4uiv));

            #endregion VertexAttrib4uiv

            #region VertexAttrib4usv

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib4usv(GLuint index, IntPtr v);
            public static VertexAttrib4usv glVertexAttrib4usv = (VertexAttrib4usv)GetDelegateForExtensionMethod("glVertexAttrib4usv", typeof(Delegates.VertexAttrib4usv));

            #endregion VertexAttrib4usv

            #region VertexAttribPointer

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, IntPtr pointer);
            public static VertexAttribPointer glVertexAttribPointer = (VertexAttribPointer)GetDelegateForExtensionMethod("glVertexAttribPointer", typeof(Delegates.VertexAttribPointer));

            #endregion VertexAttribPointer

            #region UniformMatrix2x3fv

            /// <summary>
            /// 
            /// </summary>
            public delegate void UniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, IntPtr value);
            public static UniformMatrix2x3fv glUniformMatrix2x3fv = (UniformMatrix2x3fv)GetDelegateForExtensionMethod("glUniformMatrix2x3fv", typeof(Delegates.UniformMatrix2x3fv));

            #endregion UniformMatrix2x3fv

            #region UniformMatrix3x2fv

            /// <summary>
            /// 
            /// </summary>
            public delegate void UniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, IntPtr value);
            public static UniformMatrix3x2fv glUniformMatrix3x2fv = (UniformMatrix3x2fv)GetDelegateForExtensionMethod("glUniformMatrix3x2fv", typeof(Delegates.UniformMatrix3x2fv));

            #endregion UniformMatrix3x2fv

            #region UniformMatrix2x4fv

            /// <summary>
            /// 
            /// </summary>
            public delegate void UniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, IntPtr value);
            public static UniformMatrix2x4fv glUniformMatrix2x4fv = (UniformMatrix2x4fv)GetDelegateForExtensionMethod("glUniformMatrix2x4fv", typeof(Delegates.UniformMatrix2x4fv));

            #endregion UniformMatrix2x4fv

            #region UniformMatrix4x2fv

            /// <summary>
            /// 
            /// </summary>
            public delegate void UniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, IntPtr value);
            public static UniformMatrix4x2fv glUniformMatrix4x2fv = (UniformMatrix4x2fv)GetDelegateForExtensionMethod("glUniformMatrix4x2fv", typeof(Delegates.UniformMatrix4x2fv));

            #endregion UniformMatrix4x2fv

            #region UniformMatrix3x4fv

            /// <summary>
            /// 
            /// </summary>
            public delegate void UniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, IntPtr value);
            public static UniformMatrix3x4fv glUniformMatrix3x4fv = (UniformMatrix3x4fv)GetDelegateForExtensionMethod("glUniformMatrix3x4fv", typeof(Delegates.UniformMatrix3x4fv));

            #endregion UniformMatrix3x4fv

            #region UniformMatrix4x3fv

            /// <summary>
            /// 
            /// </summary>
            public delegate void UniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, IntPtr value);
            public static UniformMatrix4x3fv glUniformMatrix4x3fv = (UniformMatrix4x3fv)GetDelegateForExtensionMethod("glUniformMatrix4x3fv", typeof(Delegates.UniformMatrix4x3fv));

            #endregion UniformMatrix4x3fv

            #region ActiveTextureARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void ActiveTextureARB(GLenum texture);
            public static ActiveTextureARB glActiveTextureARB = (ActiveTextureARB)GetDelegateForExtensionMethod("glActiveTextureARB", typeof(Delegates.ActiveTextureARB));

            #endregion ActiveTextureARB

            #region ClientActiveTextureARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void ClientActiveTextureARB(GLenum texture);
            public static ClientActiveTextureARB glClientActiveTextureARB = (ClientActiveTextureARB)GetDelegateForExtensionMethod("glClientActiveTextureARB", typeof(Delegates.ClientActiveTextureARB));

            #endregion ClientActiveTextureARB

            #region MultiTexCoord1dARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void MultiTexCoord1dARB(GLenum target, GLdouble s);
            public static MultiTexCoord1dARB glMultiTexCoord1dARB = (MultiTexCoord1dARB)GetDelegateForExtensionMethod("glMultiTexCoord1dARB", typeof(Delegates.MultiTexCoord1dARB));

            #endregion MultiTexCoord1dARB

            #region MultiTexCoord1dvARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void MultiTexCoord1dvARB(GLenum target, IntPtr v);
            public static MultiTexCoord1dvARB glMultiTexCoord1dvARB = (MultiTexCoord1dvARB)GetDelegateForExtensionMethod("glMultiTexCoord1dvARB", typeof(Delegates.MultiTexCoord1dvARB));

            #endregion MultiTexCoord1dvARB

            #region MultiTexCoord1fARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void MultiTexCoord1fARB(GLenum target, GLfloat s);
            public static MultiTexCoord1fARB glMultiTexCoord1fARB = (MultiTexCoord1fARB)GetDelegateForExtensionMethod("glMultiTexCoord1fARB", typeof(Delegates.MultiTexCoord1fARB));

            #endregion MultiTexCoord1fARB

            #region MultiTexCoord1fvARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void MultiTexCoord1fvARB(GLenum target, IntPtr v);
            public static MultiTexCoord1fvARB glMultiTexCoord1fvARB = (MultiTexCoord1fvARB)GetDelegateForExtensionMethod("glMultiTexCoord1fvARB", typeof(Delegates.MultiTexCoord1fvARB));

            #endregion MultiTexCoord1fvARB

            #region MultiTexCoord1iARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void MultiTexCoord1iARB(GLenum target, GLint s);
            public static MultiTexCoord1iARB glMultiTexCoord1iARB = (MultiTexCoord1iARB)GetDelegateForExtensionMethod("glMultiTexCoord1iARB", typeof(Delegates.MultiTexCoord1iARB));

            #endregion MultiTexCoord1iARB

            #region MultiTexCoord1ivARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void MultiTexCoord1ivARB(GLenum target, IntPtr v);
            public static MultiTexCoord1ivARB glMultiTexCoord1ivARB = (MultiTexCoord1ivARB)GetDelegateForExtensionMethod("glMultiTexCoord1ivARB", typeof(Delegates.MultiTexCoord1ivARB));

            #endregion MultiTexCoord1ivARB

            #region MultiTexCoord1sARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void MultiTexCoord1sARB(GLenum target, GLshort s);
            public static MultiTexCoord1sARB glMultiTexCoord1sARB = (MultiTexCoord1sARB)GetDelegateForExtensionMethod("glMultiTexCoord1sARB", typeof(Delegates.MultiTexCoord1sARB));

            #endregion MultiTexCoord1sARB

            #region MultiTexCoord1svARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void MultiTexCoord1svARB(GLenum target, IntPtr v);
            public static MultiTexCoord1svARB glMultiTexCoord1svARB = (MultiTexCoord1svARB)GetDelegateForExtensionMethod("glMultiTexCoord1svARB", typeof(Delegates.MultiTexCoord1svARB));

            #endregion MultiTexCoord1svARB

            #region MultiTexCoord2dARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void MultiTexCoord2dARB(GLenum target, GLdouble s, GLdouble t);
            public static MultiTexCoord2dARB glMultiTexCoord2dARB = (MultiTexCoord2dARB)GetDelegateForExtensionMethod("glMultiTexCoord2dARB", typeof(Delegates.MultiTexCoord2dARB));

            #endregion MultiTexCoord2dARB

            #region MultiTexCoord2dvARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void MultiTexCoord2dvARB(GLenum target, IntPtr v);
            public static MultiTexCoord2dvARB glMultiTexCoord2dvARB = (MultiTexCoord2dvARB)GetDelegateForExtensionMethod("glMultiTexCoord2dvARB", typeof(Delegates.MultiTexCoord2dvARB));

            #endregion MultiTexCoord2dvARB

            #region MultiTexCoord2fARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void MultiTexCoord2fARB(GLenum target, GLfloat s, GLfloat t);
            public static MultiTexCoord2fARB glMultiTexCoord2fARB = (MultiTexCoord2fARB)GetDelegateForExtensionMethod("glMultiTexCoord2fARB", typeof(Delegates.MultiTexCoord2fARB));

            #endregion MultiTexCoord2fARB

            #region MultiTexCoord2fvARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void MultiTexCoord2fvARB(GLenum target, IntPtr v);
            public static MultiTexCoord2fvARB glMultiTexCoord2fvARB = (MultiTexCoord2fvARB)GetDelegateForExtensionMethod("glMultiTexCoord2fvARB", typeof(Delegates.MultiTexCoord2fvARB));

            #endregion MultiTexCoord2fvARB

            #region MultiTexCoord2iARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void MultiTexCoord2iARB(GLenum target, GLint s, GLint t);
            public static MultiTexCoord2iARB glMultiTexCoord2iARB = (MultiTexCoord2iARB)GetDelegateForExtensionMethod("glMultiTexCoord2iARB", typeof(Delegates.MultiTexCoord2iARB));

            #endregion MultiTexCoord2iARB

            #region MultiTexCoord2ivARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void MultiTexCoord2ivARB(GLenum target, IntPtr v);
            public static MultiTexCoord2ivARB glMultiTexCoord2ivARB = (MultiTexCoord2ivARB)GetDelegateForExtensionMethod("glMultiTexCoord2ivARB", typeof(Delegates.MultiTexCoord2ivARB));

            #endregion MultiTexCoord2ivARB

            #region MultiTexCoord2sARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void MultiTexCoord2sARB(GLenum target, GLshort s, GLshort t);
            public static MultiTexCoord2sARB glMultiTexCoord2sARB = (MultiTexCoord2sARB)GetDelegateForExtensionMethod("glMultiTexCoord2sARB", typeof(Delegates.MultiTexCoord2sARB));

            #endregion MultiTexCoord2sARB

            #region MultiTexCoord2svARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void MultiTexCoord2svARB(GLenum target, IntPtr v);
            public static MultiTexCoord2svARB glMultiTexCoord2svARB = (MultiTexCoord2svARB)GetDelegateForExtensionMethod("glMultiTexCoord2svARB", typeof(Delegates.MultiTexCoord2svARB));

            #endregion MultiTexCoord2svARB

            #region MultiTexCoord3dARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void MultiTexCoord3dARB(GLenum target, GLdouble s, GLdouble t, GLdouble r);
            public static MultiTexCoord3dARB glMultiTexCoord3dARB = (MultiTexCoord3dARB)GetDelegateForExtensionMethod("glMultiTexCoord3dARB", typeof(Delegates.MultiTexCoord3dARB));

            #endregion MultiTexCoord3dARB

            #region MultiTexCoord3dvARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void MultiTexCoord3dvARB(GLenum target, IntPtr v);
            public static MultiTexCoord3dvARB glMultiTexCoord3dvARB = (MultiTexCoord3dvARB)GetDelegateForExtensionMethod("glMultiTexCoord3dvARB", typeof(Delegates.MultiTexCoord3dvARB));

            #endregion MultiTexCoord3dvARB

            #region MultiTexCoord3fARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void MultiTexCoord3fARB(GLenum target, GLfloat s, GLfloat t, GLfloat r);
            public static MultiTexCoord3fARB glMultiTexCoord3fARB = (MultiTexCoord3fARB)GetDelegateForExtensionMethod("glMultiTexCoord3fARB", typeof(Delegates.MultiTexCoord3fARB));

            #endregion MultiTexCoord3fARB

            #region MultiTexCoord3fvARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void MultiTexCoord3fvARB(GLenum target, IntPtr v);
            public static MultiTexCoord3fvARB glMultiTexCoord3fvARB = (MultiTexCoord3fvARB)GetDelegateForExtensionMethod("glMultiTexCoord3fvARB", typeof(Delegates.MultiTexCoord3fvARB));

            #endregion MultiTexCoord3fvARB

            #region MultiTexCoord3iARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void MultiTexCoord3iARB(GLenum target, GLint s, GLint t, GLint r);
            public static MultiTexCoord3iARB glMultiTexCoord3iARB = (MultiTexCoord3iARB)GetDelegateForExtensionMethod("glMultiTexCoord3iARB", typeof(Delegates.MultiTexCoord3iARB));

            #endregion MultiTexCoord3iARB

            #region MultiTexCoord3ivARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void MultiTexCoord3ivARB(GLenum target, IntPtr v);
            public static MultiTexCoord3ivARB glMultiTexCoord3ivARB = (MultiTexCoord3ivARB)GetDelegateForExtensionMethod("glMultiTexCoord3ivARB", typeof(Delegates.MultiTexCoord3ivARB));

            #endregion MultiTexCoord3ivARB

            #region MultiTexCoord3sARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void MultiTexCoord3sARB(GLenum target, GLshort s, GLshort t, GLshort r);
            public static MultiTexCoord3sARB glMultiTexCoord3sARB = (MultiTexCoord3sARB)GetDelegateForExtensionMethod("glMultiTexCoord3sARB", typeof(Delegates.MultiTexCoord3sARB));

            #endregion MultiTexCoord3sARB

            #region MultiTexCoord3svARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void MultiTexCoord3svARB(GLenum target, IntPtr v);
            public static MultiTexCoord3svARB glMultiTexCoord3svARB = (MultiTexCoord3svARB)GetDelegateForExtensionMethod("glMultiTexCoord3svARB", typeof(Delegates.MultiTexCoord3svARB));

            #endregion MultiTexCoord3svARB

            #region MultiTexCoord4dARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void MultiTexCoord4dARB(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
            public static MultiTexCoord4dARB glMultiTexCoord4dARB = (MultiTexCoord4dARB)GetDelegateForExtensionMethod("glMultiTexCoord4dARB", typeof(Delegates.MultiTexCoord4dARB));

            #endregion MultiTexCoord4dARB

            #region MultiTexCoord4dvARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void MultiTexCoord4dvARB(GLenum target, IntPtr v);
            public static MultiTexCoord4dvARB glMultiTexCoord4dvARB = (MultiTexCoord4dvARB)GetDelegateForExtensionMethod("glMultiTexCoord4dvARB", typeof(Delegates.MultiTexCoord4dvARB));

            #endregion MultiTexCoord4dvARB

            #region MultiTexCoord4fARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void MultiTexCoord4fARB(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
            public static MultiTexCoord4fARB glMultiTexCoord4fARB = (MultiTexCoord4fARB)GetDelegateForExtensionMethod("glMultiTexCoord4fARB", typeof(Delegates.MultiTexCoord4fARB));

            #endregion MultiTexCoord4fARB

            #region MultiTexCoord4fvARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void MultiTexCoord4fvARB(GLenum target, IntPtr v);
            public static MultiTexCoord4fvARB glMultiTexCoord4fvARB = (MultiTexCoord4fvARB)GetDelegateForExtensionMethod("glMultiTexCoord4fvARB", typeof(Delegates.MultiTexCoord4fvARB));

            #endregion MultiTexCoord4fvARB

            #region MultiTexCoord4iARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void MultiTexCoord4iARB(GLenum target, GLint s, GLint t, GLint r, GLint q);
            public static MultiTexCoord4iARB glMultiTexCoord4iARB = (MultiTexCoord4iARB)GetDelegateForExtensionMethod("glMultiTexCoord4iARB", typeof(Delegates.MultiTexCoord4iARB));

            #endregion MultiTexCoord4iARB

            #region MultiTexCoord4ivARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void MultiTexCoord4ivARB(GLenum target, IntPtr v);
            public static MultiTexCoord4ivARB glMultiTexCoord4ivARB = (MultiTexCoord4ivARB)GetDelegateForExtensionMethod("glMultiTexCoord4ivARB", typeof(Delegates.MultiTexCoord4ivARB));

            #endregion MultiTexCoord4ivARB

            #region MultiTexCoord4sARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void MultiTexCoord4sARB(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
            public static MultiTexCoord4sARB glMultiTexCoord4sARB = (MultiTexCoord4sARB)GetDelegateForExtensionMethod("glMultiTexCoord4sARB", typeof(Delegates.MultiTexCoord4sARB));

            #endregion MultiTexCoord4sARB

            #region MultiTexCoord4svARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void MultiTexCoord4svARB(GLenum target, IntPtr v);
            public static MultiTexCoord4svARB glMultiTexCoord4svARB = (MultiTexCoord4svARB)GetDelegateForExtensionMethod("glMultiTexCoord4svARB", typeof(Delegates.MultiTexCoord4svARB));

            #endregion MultiTexCoord4svARB

            #region LoadTransposeMatrixfARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void LoadTransposeMatrixfARB(IntPtr m);
            public static LoadTransposeMatrixfARB glLoadTransposeMatrixfARB = (LoadTransposeMatrixfARB)GetDelegateForExtensionMethod("glLoadTransposeMatrixfARB", typeof(Delegates.LoadTransposeMatrixfARB));

            #endregion LoadTransposeMatrixfARB

            #region LoadTransposeMatrixdARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void LoadTransposeMatrixdARB(IntPtr m);
            public static LoadTransposeMatrixdARB glLoadTransposeMatrixdARB = (LoadTransposeMatrixdARB)GetDelegateForExtensionMethod("glLoadTransposeMatrixdARB", typeof(Delegates.LoadTransposeMatrixdARB));

            #endregion LoadTransposeMatrixdARB

            #region MultTransposeMatrixfARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void MultTransposeMatrixfARB(IntPtr m);
            public static MultTransposeMatrixfARB glMultTransposeMatrixfARB = (MultTransposeMatrixfARB)GetDelegateForExtensionMethod("glMultTransposeMatrixfARB", typeof(Delegates.MultTransposeMatrixfARB));

            #endregion MultTransposeMatrixfARB

            #region MultTransposeMatrixdARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void MultTransposeMatrixdARB(IntPtr m);
            public static MultTransposeMatrixdARB glMultTransposeMatrixdARB = (MultTransposeMatrixdARB)GetDelegateForExtensionMethod("glMultTransposeMatrixdARB", typeof(Delegates.MultTransposeMatrixdARB));

            #endregion MultTransposeMatrixdARB

            #region SampleCoverageARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void SampleCoverageARB(GLclampf value, GLboolean invert);
            public static SampleCoverageARB glSampleCoverageARB = (SampleCoverageARB)GetDelegateForExtensionMethod("glSampleCoverageARB", typeof(Delegates.SampleCoverageARB));

            #endregion SampleCoverageARB

            #region CompressedTexImage3DARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void CompressedTexImage3DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, IntPtr data);
            public static CompressedTexImage3DARB glCompressedTexImage3DARB = (CompressedTexImage3DARB)GetDelegateForExtensionMethod("glCompressedTexImage3DARB", typeof(Delegates.CompressedTexImage3DARB));

            #endregion CompressedTexImage3DARB

            #region CompressedTexImage2DARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void CompressedTexImage2DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, IntPtr data);
            public static CompressedTexImage2DARB glCompressedTexImage2DARB = (CompressedTexImage2DARB)GetDelegateForExtensionMethod("glCompressedTexImage2DARB", typeof(Delegates.CompressedTexImage2DARB));

            #endregion CompressedTexImage2DARB

            #region CompressedTexImage1DARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void CompressedTexImage1DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, IntPtr data);
            public static CompressedTexImage1DARB glCompressedTexImage1DARB = (CompressedTexImage1DARB)GetDelegateForExtensionMethod("glCompressedTexImage1DARB", typeof(Delegates.CompressedTexImage1DARB));

            #endregion CompressedTexImage1DARB

            #region CompressedTexSubImage3DARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void CompressedTexSubImage3DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, IntPtr data);
            public static CompressedTexSubImage3DARB glCompressedTexSubImage3DARB = (CompressedTexSubImage3DARB)GetDelegateForExtensionMethod("glCompressedTexSubImage3DARB", typeof(Delegates.CompressedTexSubImage3DARB));

            #endregion CompressedTexSubImage3DARB

            #region CompressedTexSubImage2DARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void CompressedTexSubImage2DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, IntPtr data);
            public static CompressedTexSubImage2DARB glCompressedTexSubImage2DARB = (CompressedTexSubImage2DARB)GetDelegateForExtensionMethod("glCompressedTexSubImage2DARB", typeof(Delegates.CompressedTexSubImage2DARB));

            #endregion CompressedTexSubImage2DARB

            #region CompressedTexSubImage1DARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void CompressedTexSubImage1DARB(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, IntPtr data);
            public static CompressedTexSubImage1DARB glCompressedTexSubImage1DARB = (CompressedTexSubImage1DARB)GetDelegateForExtensionMethod("glCompressedTexSubImage1DARB", typeof(Delegates.CompressedTexSubImage1DARB));

            #endregion CompressedTexSubImage1DARB

            #region GetCompressedTexImageARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetCompressedTexImageARB(GLenum target, GLint level, IntPtr img);
            public static GetCompressedTexImageARB glGetCompressedTexImageARB = (GetCompressedTexImageARB)GetDelegateForExtensionMethod("glGetCompressedTexImageARB", typeof(Delegates.GetCompressedTexImageARB));

            #endregion GetCompressedTexImageARB

            #region PointParameterfARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void PointParameterfARB(GLenum pname, GLfloat param);
            public static PointParameterfARB glPointParameterfARB = (PointParameterfARB)GetDelegateForExtensionMethod("glPointParameterfARB", typeof(Delegates.PointParameterfARB));

            #endregion PointParameterfARB

            #region PointParameterfvARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void PointParameterfvARB(GLenum pname, IntPtr parameters);
            public static PointParameterfvARB glPointParameterfvARB = (PointParameterfvARB)GetDelegateForExtensionMethod("glPointParameterfvARB", typeof(Delegates.PointParameterfvARB));

            #endregion PointParameterfvARB

            #region WeightbvARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void WeightbvARB(GLint size, IntPtr weights);
            public static WeightbvARB glWeightbvARB = (WeightbvARB)GetDelegateForExtensionMethod("glWeightbvARB", typeof(Delegates.WeightbvARB));

            #endregion WeightbvARB

            #region WeightsvARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void WeightsvARB(GLint size, IntPtr weights);
            public static WeightsvARB glWeightsvARB = (WeightsvARB)GetDelegateForExtensionMethod("glWeightsvARB", typeof(Delegates.WeightsvARB));

            #endregion WeightsvARB

            #region WeightivARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void WeightivARB(GLint size, IntPtr weights);
            public static WeightivARB glWeightivARB = (WeightivARB)GetDelegateForExtensionMethod("glWeightivARB", typeof(Delegates.WeightivARB));

            #endregion WeightivARB

            #region WeightfvARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void WeightfvARB(GLint size, IntPtr weights);
            public static WeightfvARB glWeightfvARB = (WeightfvARB)GetDelegateForExtensionMethod("glWeightfvARB", typeof(Delegates.WeightfvARB));

            #endregion WeightfvARB

            #region WeightdvARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void WeightdvARB(GLint size, IntPtr weights);
            public static WeightdvARB glWeightdvARB = (WeightdvARB)GetDelegateForExtensionMethod("glWeightdvARB", typeof(Delegates.WeightdvARB));

            #endregion WeightdvARB

            #region WeightubvARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void WeightubvARB(GLint size, IntPtr weights);
            public static WeightubvARB glWeightubvARB = (WeightubvARB)GetDelegateForExtensionMethod("glWeightubvARB", typeof(Delegates.WeightubvARB));

            #endregion WeightubvARB

            #region WeightusvARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void WeightusvARB(GLint size, IntPtr weights);
            public static WeightusvARB glWeightusvARB = (WeightusvARB)GetDelegateForExtensionMethod("glWeightusvARB", typeof(Delegates.WeightusvARB));

            #endregion WeightusvARB

            #region WeightuivARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void WeightuivARB(GLint size, IntPtr weights);
            public static WeightuivARB glWeightuivARB = (WeightuivARB)GetDelegateForExtensionMethod("glWeightuivARB", typeof(Delegates.WeightuivARB));

            #endregion WeightuivARB

            #region WeightPointerARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void WeightPointerARB(GLint size, GLenum type, GLsizei stride, IntPtr pointer);
            public static WeightPointerARB glWeightPointerARB = (WeightPointerARB)GetDelegateForExtensionMethod("glWeightPointerARB", typeof(Delegates.WeightPointerARB));

            #endregion WeightPointerARB

            #region VertexBlendARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexBlendARB(GLint count);
            public static VertexBlendARB glVertexBlendARB = (VertexBlendARB)GetDelegateForExtensionMethod("glVertexBlendARB", typeof(Delegates.VertexBlendARB));

            #endregion VertexBlendARB

            #region CurrentPaletteMatrixARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void CurrentPaletteMatrixARB(GLint index);
            public static CurrentPaletteMatrixARB glCurrentPaletteMatrixARB = (CurrentPaletteMatrixARB)GetDelegateForExtensionMethod("glCurrentPaletteMatrixARB", typeof(Delegates.CurrentPaletteMatrixARB));

            #endregion CurrentPaletteMatrixARB

            #region MatrixIndexubvARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void MatrixIndexubvARB(GLint size, IntPtr indices);
            public static MatrixIndexubvARB glMatrixIndexubvARB = (MatrixIndexubvARB)GetDelegateForExtensionMethod("glMatrixIndexubvARB", typeof(Delegates.MatrixIndexubvARB));

            #endregion MatrixIndexubvARB

            #region MatrixIndexusvARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void MatrixIndexusvARB(GLint size, IntPtr indices);
            public static MatrixIndexusvARB glMatrixIndexusvARB = (MatrixIndexusvARB)GetDelegateForExtensionMethod("glMatrixIndexusvARB", typeof(Delegates.MatrixIndexusvARB));

            #endregion MatrixIndexusvARB

            #region MatrixIndexuivARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void MatrixIndexuivARB(GLint size, IntPtr indices);
            public static MatrixIndexuivARB glMatrixIndexuivARB = (MatrixIndexuivARB)GetDelegateForExtensionMethod("glMatrixIndexuivARB", typeof(Delegates.MatrixIndexuivARB));

            #endregion MatrixIndexuivARB

            #region MatrixIndexPointerARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void MatrixIndexPointerARB(GLint size, GLenum type, GLsizei stride, IntPtr pointer);
            public static MatrixIndexPointerARB glMatrixIndexPointerARB = (MatrixIndexPointerARB)GetDelegateForExtensionMethod("glMatrixIndexPointerARB", typeof(Delegates.MatrixIndexPointerARB));

            #endregion MatrixIndexPointerARB

            #region WindowPos2dARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void WindowPos2dARB(GLdouble x, GLdouble y);
            public static WindowPos2dARB glWindowPos2dARB = (WindowPos2dARB)GetDelegateForExtensionMethod("glWindowPos2dARB", typeof(Delegates.WindowPos2dARB));

            #endregion WindowPos2dARB

            #region WindowPos2dvARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void WindowPos2dvARB(IntPtr v);
            public static WindowPos2dvARB glWindowPos2dvARB = (WindowPos2dvARB)GetDelegateForExtensionMethod("glWindowPos2dvARB", typeof(Delegates.WindowPos2dvARB));

            #endregion WindowPos2dvARB

            #region WindowPos2fARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void WindowPos2fARB(GLfloat x, GLfloat y);
            public static WindowPos2fARB glWindowPos2fARB = (WindowPos2fARB)GetDelegateForExtensionMethod("glWindowPos2fARB", typeof(Delegates.WindowPos2fARB));

            #endregion WindowPos2fARB

            #region WindowPos2fvARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void WindowPos2fvARB(IntPtr v);
            public static WindowPos2fvARB glWindowPos2fvARB = (WindowPos2fvARB)GetDelegateForExtensionMethod("glWindowPos2fvARB", typeof(Delegates.WindowPos2fvARB));

            #endregion WindowPos2fvARB

            #region WindowPos2iARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void WindowPos2iARB(GLint x, GLint y);
            public static WindowPos2iARB glWindowPos2iARB = (WindowPos2iARB)GetDelegateForExtensionMethod("glWindowPos2iARB", typeof(Delegates.WindowPos2iARB));

            #endregion WindowPos2iARB

            #region WindowPos2ivARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void WindowPos2ivARB(IntPtr v);
            public static WindowPos2ivARB glWindowPos2ivARB = (WindowPos2ivARB)GetDelegateForExtensionMethod("glWindowPos2ivARB", typeof(Delegates.WindowPos2ivARB));

            #endregion WindowPos2ivARB

            #region WindowPos2sARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void WindowPos2sARB(GLshort x, GLshort y);
            public static WindowPos2sARB glWindowPos2sARB = (WindowPos2sARB)GetDelegateForExtensionMethod("glWindowPos2sARB", typeof(Delegates.WindowPos2sARB));

            #endregion WindowPos2sARB

            #region WindowPos2svARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void WindowPos2svARB(IntPtr v);
            public static WindowPos2svARB glWindowPos2svARB = (WindowPos2svARB)GetDelegateForExtensionMethod("glWindowPos2svARB", typeof(Delegates.WindowPos2svARB));

            #endregion WindowPos2svARB

            #region WindowPos3dARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void WindowPos3dARB(GLdouble x, GLdouble y, GLdouble z);
            public static WindowPos3dARB glWindowPos3dARB = (WindowPos3dARB)GetDelegateForExtensionMethod("glWindowPos3dARB", typeof(Delegates.WindowPos3dARB));

            #endregion WindowPos3dARB

            #region WindowPos3dvARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void WindowPos3dvARB(IntPtr v);
            public static WindowPos3dvARB glWindowPos3dvARB = (WindowPos3dvARB)GetDelegateForExtensionMethod("glWindowPos3dvARB", typeof(Delegates.WindowPos3dvARB));

            #endregion WindowPos3dvARB

            #region WindowPos3fARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void WindowPos3fARB(GLfloat x, GLfloat y, GLfloat z);
            public static WindowPos3fARB glWindowPos3fARB = (WindowPos3fARB)GetDelegateForExtensionMethod("glWindowPos3fARB", typeof(Delegates.WindowPos3fARB));

            #endregion WindowPos3fARB

            #region WindowPos3fvARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void WindowPos3fvARB(IntPtr v);
            public static WindowPos3fvARB glWindowPos3fvARB = (WindowPos3fvARB)GetDelegateForExtensionMethod("glWindowPos3fvARB", typeof(Delegates.WindowPos3fvARB));

            #endregion WindowPos3fvARB

            #region WindowPos3iARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void WindowPos3iARB(GLint x, GLint y, GLint z);
            public static WindowPos3iARB glWindowPos3iARB = (WindowPos3iARB)GetDelegateForExtensionMethod("glWindowPos3iARB", typeof(Delegates.WindowPos3iARB));

            #endregion WindowPos3iARB

            #region WindowPos3ivARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void WindowPos3ivARB(IntPtr v);
            public static WindowPos3ivARB glWindowPos3ivARB = (WindowPos3ivARB)GetDelegateForExtensionMethod("glWindowPos3ivARB", typeof(Delegates.WindowPos3ivARB));

            #endregion WindowPos3ivARB

            #region WindowPos3sARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void WindowPos3sARB(GLshort x, GLshort y, GLshort z);
            public static WindowPos3sARB glWindowPos3sARB = (WindowPos3sARB)GetDelegateForExtensionMethod("glWindowPos3sARB", typeof(Delegates.WindowPos3sARB));

            #endregion WindowPos3sARB

            #region WindowPos3svARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void WindowPos3svARB(IntPtr v);
            public static WindowPos3svARB glWindowPos3svARB = (WindowPos3svARB)GetDelegateForExtensionMethod("glWindowPos3svARB", typeof(Delegates.WindowPos3svARB));

            #endregion WindowPos3svARB

            #region VertexAttrib1dARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib1dARB(GLuint index, GLdouble x);
            public static VertexAttrib1dARB glVertexAttrib1dARB = (VertexAttrib1dARB)GetDelegateForExtensionMethod("glVertexAttrib1dARB", typeof(Delegates.VertexAttrib1dARB));

            #endregion VertexAttrib1dARB

            #region VertexAttrib1dvARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib1dvARB(GLuint index, IntPtr v);
            public static VertexAttrib1dvARB glVertexAttrib1dvARB = (VertexAttrib1dvARB)GetDelegateForExtensionMethod("glVertexAttrib1dvARB", typeof(Delegates.VertexAttrib1dvARB));

            #endregion VertexAttrib1dvARB

            #region VertexAttrib1fARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib1fARB(GLuint index, GLfloat x);
            public static VertexAttrib1fARB glVertexAttrib1fARB = (VertexAttrib1fARB)GetDelegateForExtensionMethod("glVertexAttrib1fARB", typeof(Delegates.VertexAttrib1fARB));

            #endregion VertexAttrib1fARB

            #region VertexAttrib1fvARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib1fvARB(GLuint index, IntPtr v);
            public static VertexAttrib1fvARB glVertexAttrib1fvARB = (VertexAttrib1fvARB)GetDelegateForExtensionMethod("glVertexAttrib1fvARB", typeof(Delegates.VertexAttrib1fvARB));

            #endregion VertexAttrib1fvARB

            #region VertexAttrib1sARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib1sARB(GLuint index, GLshort x);
            public static VertexAttrib1sARB glVertexAttrib1sARB = (VertexAttrib1sARB)GetDelegateForExtensionMethod("glVertexAttrib1sARB", typeof(Delegates.VertexAttrib1sARB));

            #endregion VertexAttrib1sARB

            #region VertexAttrib1svARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib1svARB(GLuint index, IntPtr v);
            public static VertexAttrib1svARB glVertexAttrib1svARB = (VertexAttrib1svARB)GetDelegateForExtensionMethod("glVertexAttrib1svARB", typeof(Delegates.VertexAttrib1svARB));

            #endregion VertexAttrib1svARB

            #region VertexAttrib2dARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib2dARB(GLuint index, GLdouble x, GLdouble y);
            public static VertexAttrib2dARB glVertexAttrib2dARB = (VertexAttrib2dARB)GetDelegateForExtensionMethod("glVertexAttrib2dARB", typeof(Delegates.VertexAttrib2dARB));

            #endregion VertexAttrib2dARB

            #region VertexAttrib2dvARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib2dvARB(GLuint index, IntPtr v);
            public static VertexAttrib2dvARB glVertexAttrib2dvARB = (VertexAttrib2dvARB)GetDelegateForExtensionMethod("glVertexAttrib2dvARB", typeof(Delegates.VertexAttrib2dvARB));

            #endregion VertexAttrib2dvARB

            #region VertexAttrib2fARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib2fARB(GLuint index, GLfloat x, GLfloat y);
            public static VertexAttrib2fARB glVertexAttrib2fARB = (VertexAttrib2fARB)GetDelegateForExtensionMethod("glVertexAttrib2fARB", typeof(Delegates.VertexAttrib2fARB));

            #endregion VertexAttrib2fARB

            #region VertexAttrib2fvARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib2fvARB(GLuint index, IntPtr v);
            public static VertexAttrib2fvARB glVertexAttrib2fvARB = (VertexAttrib2fvARB)GetDelegateForExtensionMethod("glVertexAttrib2fvARB", typeof(Delegates.VertexAttrib2fvARB));

            #endregion VertexAttrib2fvARB

            #region VertexAttrib2sARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib2sARB(GLuint index, GLshort x, GLshort y);
            public static VertexAttrib2sARB glVertexAttrib2sARB = (VertexAttrib2sARB)GetDelegateForExtensionMethod("glVertexAttrib2sARB", typeof(Delegates.VertexAttrib2sARB));

            #endregion VertexAttrib2sARB

            #region VertexAttrib2svARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib2svARB(GLuint index, IntPtr v);
            public static VertexAttrib2svARB glVertexAttrib2svARB = (VertexAttrib2svARB)GetDelegateForExtensionMethod("glVertexAttrib2svARB", typeof(Delegates.VertexAttrib2svARB));

            #endregion VertexAttrib2svARB

            #region VertexAttrib3dARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib3dARB(GLuint index, GLdouble x, GLdouble y, GLdouble z);
            public static VertexAttrib3dARB glVertexAttrib3dARB = (VertexAttrib3dARB)GetDelegateForExtensionMethod("glVertexAttrib3dARB", typeof(Delegates.VertexAttrib3dARB));

            #endregion VertexAttrib3dARB

            #region VertexAttrib3dvARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib3dvARB(GLuint index, IntPtr v);
            public static VertexAttrib3dvARB glVertexAttrib3dvARB = (VertexAttrib3dvARB)GetDelegateForExtensionMethod("glVertexAttrib3dvARB", typeof(Delegates.VertexAttrib3dvARB));

            #endregion VertexAttrib3dvARB

            #region VertexAttrib3fARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib3fARB(GLuint index, GLfloat x, GLfloat y, GLfloat z);
            public static VertexAttrib3fARB glVertexAttrib3fARB = (VertexAttrib3fARB)GetDelegateForExtensionMethod("glVertexAttrib3fARB", typeof(Delegates.VertexAttrib3fARB));

            #endregion VertexAttrib3fARB

            #region VertexAttrib3fvARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib3fvARB(GLuint index, IntPtr v);
            public static VertexAttrib3fvARB glVertexAttrib3fvARB = (VertexAttrib3fvARB)GetDelegateForExtensionMethod("glVertexAttrib3fvARB", typeof(Delegates.VertexAttrib3fvARB));

            #endregion VertexAttrib3fvARB

            #region VertexAttrib3sARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib3sARB(GLuint index, GLshort x, GLshort y, GLshort z);
            public static VertexAttrib3sARB glVertexAttrib3sARB = (VertexAttrib3sARB)GetDelegateForExtensionMethod("glVertexAttrib3sARB", typeof(Delegates.VertexAttrib3sARB));

            #endregion VertexAttrib3sARB

            #region VertexAttrib3svARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib3svARB(GLuint index, IntPtr v);
            public static VertexAttrib3svARB glVertexAttrib3svARB = (VertexAttrib3svARB)GetDelegateForExtensionMethod("glVertexAttrib3svARB", typeof(Delegates.VertexAttrib3svARB));

            #endregion VertexAttrib3svARB

            #region VertexAttrib4NbvARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib4NbvARB(GLuint index, IntPtr v);
            public static VertexAttrib4NbvARB glVertexAttrib4NbvARB = (VertexAttrib4NbvARB)GetDelegateForExtensionMethod("glVertexAttrib4NbvARB", typeof(Delegates.VertexAttrib4NbvARB));

            #endregion VertexAttrib4NbvARB

            #region VertexAttrib4NivARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib4NivARB(GLuint index, IntPtr v);
            public static VertexAttrib4NivARB glVertexAttrib4NivARB = (VertexAttrib4NivARB)GetDelegateForExtensionMethod("glVertexAttrib4NivARB", typeof(Delegates.VertexAttrib4NivARB));

            #endregion VertexAttrib4NivARB

            #region VertexAttrib4NsvARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib4NsvARB(GLuint index, IntPtr v);
            public static VertexAttrib4NsvARB glVertexAttrib4NsvARB = (VertexAttrib4NsvARB)GetDelegateForExtensionMethod("glVertexAttrib4NsvARB", typeof(Delegates.VertexAttrib4NsvARB));

            #endregion VertexAttrib4NsvARB

            #region VertexAttrib4NubARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib4NubARB(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
            public static VertexAttrib4NubARB glVertexAttrib4NubARB = (VertexAttrib4NubARB)GetDelegateForExtensionMethod("glVertexAttrib4NubARB", typeof(Delegates.VertexAttrib4NubARB));

            #endregion VertexAttrib4NubARB

            #region VertexAttrib4NubvARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib4NubvARB(GLuint index, IntPtr v);
            public static VertexAttrib4NubvARB glVertexAttrib4NubvARB = (VertexAttrib4NubvARB)GetDelegateForExtensionMethod("glVertexAttrib4NubvARB", typeof(Delegates.VertexAttrib4NubvARB));

            #endregion VertexAttrib4NubvARB

            #region VertexAttrib4NuivARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib4NuivARB(GLuint index, IntPtr v);
            public static VertexAttrib4NuivARB glVertexAttrib4NuivARB = (VertexAttrib4NuivARB)GetDelegateForExtensionMethod("glVertexAttrib4NuivARB", typeof(Delegates.VertexAttrib4NuivARB));

            #endregion VertexAttrib4NuivARB

            #region VertexAttrib4NusvARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib4NusvARB(GLuint index, IntPtr v);
            public static VertexAttrib4NusvARB glVertexAttrib4NusvARB = (VertexAttrib4NusvARB)GetDelegateForExtensionMethod("glVertexAttrib4NusvARB", typeof(Delegates.VertexAttrib4NusvARB));

            #endregion VertexAttrib4NusvARB

            #region VertexAttrib4bvARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib4bvARB(GLuint index, IntPtr v);
            public static VertexAttrib4bvARB glVertexAttrib4bvARB = (VertexAttrib4bvARB)GetDelegateForExtensionMethod("glVertexAttrib4bvARB", typeof(Delegates.VertexAttrib4bvARB));

            #endregion VertexAttrib4bvARB

            #region VertexAttrib4dARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib4dARB(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
            public static VertexAttrib4dARB glVertexAttrib4dARB = (VertexAttrib4dARB)GetDelegateForExtensionMethod("glVertexAttrib4dARB", typeof(Delegates.VertexAttrib4dARB));

            #endregion VertexAttrib4dARB

            #region VertexAttrib4dvARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib4dvARB(GLuint index, IntPtr v);
            public static VertexAttrib4dvARB glVertexAttrib4dvARB = (VertexAttrib4dvARB)GetDelegateForExtensionMethod("glVertexAttrib4dvARB", typeof(Delegates.VertexAttrib4dvARB));

            #endregion VertexAttrib4dvARB

            #region VertexAttrib4fARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib4fARB(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
            public static VertexAttrib4fARB glVertexAttrib4fARB = (VertexAttrib4fARB)GetDelegateForExtensionMethod("glVertexAttrib4fARB", typeof(Delegates.VertexAttrib4fARB));

            #endregion VertexAttrib4fARB

            #region VertexAttrib4fvARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib4fvARB(GLuint index, IntPtr v);
            public static VertexAttrib4fvARB glVertexAttrib4fvARB = (VertexAttrib4fvARB)GetDelegateForExtensionMethod("glVertexAttrib4fvARB", typeof(Delegates.VertexAttrib4fvARB));

            #endregion VertexAttrib4fvARB

            #region VertexAttrib4ivARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib4ivARB(GLuint index, IntPtr v);
            public static VertexAttrib4ivARB glVertexAttrib4ivARB = (VertexAttrib4ivARB)GetDelegateForExtensionMethod("glVertexAttrib4ivARB", typeof(Delegates.VertexAttrib4ivARB));

            #endregion VertexAttrib4ivARB

            #region VertexAttrib4sARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib4sARB(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
            public static VertexAttrib4sARB glVertexAttrib4sARB = (VertexAttrib4sARB)GetDelegateForExtensionMethod("glVertexAttrib4sARB", typeof(Delegates.VertexAttrib4sARB));

            #endregion VertexAttrib4sARB

            #region VertexAttrib4svARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib4svARB(GLuint index, IntPtr v);
            public static VertexAttrib4svARB glVertexAttrib4svARB = (VertexAttrib4svARB)GetDelegateForExtensionMethod("glVertexAttrib4svARB", typeof(Delegates.VertexAttrib4svARB));

            #endregion VertexAttrib4svARB

            #region VertexAttrib4ubvARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib4ubvARB(GLuint index, IntPtr v);
            public static VertexAttrib4ubvARB glVertexAttrib4ubvARB = (VertexAttrib4ubvARB)GetDelegateForExtensionMethod("glVertexAttrib4ubvARB", typeof(Delegates.VertexAttrib4ubvARB));

            #endregion VertexAttrib4ubvARB

            #region VertexAttrib4uivARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib4uivARB(GLuint index, IntPtr v);
            public static VertexAttrib4uivARB glVertexAttrib4uivARB = (VertexAttrib4uivARB)GetDelegateForExtensionMethod("glVertexAttrib4uivARB", typeof(Delegates.VertexAttrib4uivARB));

            #endregion VertexAttrib4uivARB

            #region VertexAttrib4usvARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib4usvARB(GLuint index, IntPtr v);
            public static VertexAttrib4usvARB glVertexAttrib4usvARB = (VertexAttrib4usvARB)GetDelegateForExtensionMethod("glVertexAttrib4usvARB", typeof(Delegates.VertexAttrib4usvARB));

            #endregion VertexAttrib4usvARB

            #region VertexAttribPointerARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttribPointerARB(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, IntPtr pointer);
            public static VertexAttribPointerARB glVertexAttribPointerARB = (VertexAttribPointerARB)GetDelegateForExtensionMethod("glVertexAttribPointerARB", typeof(Delegates.VertexAttribPointerARB));

            #endregion VertexAttribPointerARB

            #region EnableVertexAttribArrayARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void EnableVertexAttribArrayARB(GLuint index);
            public static EnableVertexAttribArrayARB glEnableVertexAttribArrayARB = (EnableVertexAttribArrayARB)GetDelegateForExtensionMethod("glEnableVertexAttribArrayARB", typeof(Delegates.EnableVertexAttribArrayARB));

            #endregion EnableVertexAttribArrayARB

            #region DisableVertexAttribArrayARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void DisableVertexAttribArrayARB(GLuint index);
            public static DisableVertexAttribArrayARB glDisableVertexAttribArrayARB = (DisableVertexAttribArrayARB)GetDelegateForExtensionMethod("glDisableVertexAttribArrayARB", typeof(Delegates.DisableVertexAttribArrayARB));

            #endregion DisableVertexAttribArrayARB

            #region ProgramStringARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void ProgramStringARB(GLenum target, GLenum format, GLsizei len, IntPtr @string);
            public static ProgramStringARB glProgramStringARB = (ProgramStringARB)GetDelegateForExtensionMethod("glProgramStringARB", typeof(Delegates.ProgramStringARB));

            #endregion ProgramStringARB

            #region BindProgramARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void BindProgramARB(GLenum target, GLuint program);
            public static BindProgramARB glBindProgramARB = (BindProgramARB)GetDelegateForExtensionMethod("glBindProgramARB", typeof(Delegates.BindProgramARB));

            #endregion BindProgramARB

            #region DeleteProgramsARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void DeleteProgramsARB(GLsizei n, IntPtr programs);
            public static DeleteProgramsARB glDeleteProgramsARB = (DeleteProgramsARB)GetDelegateForExtensionMethod("glDeleteProgramsARB", typeof(Delegates.DeleteProgramsARB));

            #endregion DeleteProgramsARB

            #region GenProgramsARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void GenProgramsARB(GLsizei n, IntPtr programs);
            public static GenProgramsARB glGenProgramsARB = (GenProgramsARB)GetDelegateForExtensionMethod("glGenProgramsARB", typeof(Delegates.GenProgramsARB));

            #endregion GenProgramsARB

            #region ProgramEnvParameter4dARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void ProgramEnvParameter4dARB(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
            public static ProgramEnvParameter4dARB glProgramEnvParameter4dARB = (ProgramEnvParameter4dARB)GetDelegateForExtensionMethod("glProgramEnvParameter4dARB", typeof(Delegates.ProgramEnvParameter4dARB));

            #endregion ProgramEnvParameter4dARB

            #region ProgramEnvParameter4dvARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void ProgramEnvParameter4dvARB(GLenum target, GLuint index, IntPtr parameters);
            public static ProgramEnvParameter4dvARB glProgramEnvParameter4dvARB = (ProgramEnvParameter4dvARB)GetDelegateForExtensionMethod("glProgramEnvParameter4dvARB", typeof(Delegates.ProgramEnvParameter4dvARB));

            #endregion ProgramEnvParameter4dvARB

            #region ProgramEnvParameter4fARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void ProgramEnvParameter4fARB(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
            public static ProgramEnvParameter4fARB glProgramEnvParameter4fARB = (ProgramEnvParameter4fARB)GetDelegateForExtensionMethod("glProgramEnvParameter4fARB", typeof(Delegates.ProgramEnvParameter4fARB));

            #endregion ProgramEnvParameter4fARB

            #region ProgramEnvParameter4fvARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void ProgramEnvParameter4fvARB(GLenum target, GLuint index, IntPtr parameters);
            public static ProgramEnvParameter4fvARB glProgramEnvParameter4fvARB = (ProgramEnvParameter4fvARB)GetDelegateForExtensionMethod("glProgramEnvParameter4fvARB", typeof(Delegates.ProgramEnvParameter4fvARB));

            #endregion ProgramEnvParameter4fvARB

            #region ProgramLocalParameter4dARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void ProgramLocalParameter4dARB(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
            public static ProgramLocalParameter4dARB glProgramLocalParameter4dARB = (ProgramLocalParameter4dARB)GetDelegateForExtensionMethod("glProgramLocalParameter4dARB", typeof(Delegates.ProgramLocalParameter4dARB));

            #endregion ProgramLocalParameter4dARB

            #region ProgramLocalParameter4dvARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void ProgramLocalParameter4dvARB(GLenum target, GLuint index, IntPtr parameters);
            public static ProgramLocalParameter4dvARB glProgramLocalParameter4dvARB = (ProgramLocalParameter4dvARB)GetDelegateForExtensionMethod("glProgramLocalParameter4dvARB", typeof(Delegates.ProgramLocalParameter4dvARB));

            #endregion ProgramLocalParameter4dvARB

            #region ProgramLocalParameter4fARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void ProgramLocalParameter4fARB(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
            public static ProgramLocalParameter4fARB glProgramLocalParameter4fARB = (ProgramLocalParameter4fARB)GetDelegateForExtensionMethod("glProgramLocalParameter4fARB", typeof(Delegates.ProgramLocalParameter4fARB));

            #endregion ProgramLocalParameter4fARB

            #region ProgramLocalParameter4fvARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void ProgramLocalParameter4fvARB(GLenum target, GLuint index, IntPtr parameters);
            public static ProgramLocalParameter4fvARB glProgramLocalParameter4fvARB = (ProgramLocalParameter4fvARB)GetDelegateForExtensionMethod("glProgramLocalParameter4fvARB", typeof(Delegates.ProgramLocalParameter4fvARB));

            #endregion ProgramLocalParameter4fvARB

            #region GetProgramEnvParameterdvARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetProgramEnvParameterdvARB(GLenum target, GLuint index, IntPtr parameters);
            public static GetProgramEnvParameterdvARB glGetProgramEnvParameterdvARB = (GetProgramEnvParameterdvARB)GetDelegateForExtensionMethod("glGetProgramEnvParameterdvARB", typeof(Delegates.GetProgramEnvParameterdvARB));

            #endregion GetProgramEnvParameterdvARB

            #region GetProgramEnvParameterfvARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetProgramEnvParameterfvARB(GLenum target, GLuint index, IntPtr parameters);
            public static GetProgramEnvParameterfvARB glGetProgramEnvParameterfvARB = (GetProgramEnvParameterfvARB)GetDelegateForExtensionMethod("glGetProgramEnvParameterfvARB", typeof(Delegates.GetProgramEnvParameterfvARB));

            #endregion GetProgramEnvParameterfvARB

            #region GetProgramLocalParameterdvARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetProgramLocalParameterdvARB(GLenum target, GLuint index, IntPtr parameters);
            public static GetProgramLocalParameterdvARB glGetProgramLocalParameterdvARB = (GetProgramLocalParameterdvARB)GetDelegateForExtensionMethod("glGetProgramLocalParameterdvARB", typeof(Delegates.GetProgramLocalParameterdvARB));

            #endregion GetProgramLocalParameterdvARB

            #region GetProgramLocalParameterfvARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetProgramLocalParameterfvARB(GLenum target, GLuint index, IntPtr parameters);
            public static GetProgramLocalParameterfvARB glGetProgramLocalParameterfvARB = (GetProgramLocalParameterfvARB)GetDelegateForExtensionMethod("glGetProgramLocalParameterfvARB", typeof(Delegates.GetProgramLocalParameterfvARB));

            #endregion GetProgramLocalParameterfvARB

            #region GetProgramivARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetProgramivARB(GLenum target, GLenum pname, IntPtr parameters);
            public static GetProgramivARB glGetProgramivARB = (GetProgramivARB)GetDelegateForExtensionMethod("glGetProgramivARB", typeof(Delegates.GetProgramivARB));

            #endregion GetProgramivARB

            #region GetProgramStringARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetProgramStringARB(GLenum target, GLenum pname, IntPtr @string);
            public static GetProgramStringARB glGetProgramStringARB = (GetProgramStringARB)GetDelegateForExtensionMethod("glGetProgramStringARB", typeof(Delegates.GetProgramStringARB));

            #endregion GetProgramStringARB

            #region GetVertexAttribdvARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetVertexAttribdvARB(GLuint index, GLenum pname, IntPtr parameters);
            public static GetVertexAttribdvARB glGetVertexAttribdvARB = (GetVertexAttribdvARB)GetDelegateForExtensionMethod("glGetVertexAttribdvARB", typeof(Delegates.GetVertexAttribdvARB));

            #endregion GetVertexAttribdvARB

            #region GetVertexAttribfvARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetVertexAttribfvARB(GLuint index, GLenum pname, IntPtr parameters);
            public static GetVertexAttribfvARB glGetVertexAttribfvARB = (GetVertexAttribfvARB)GetDelegateForExtensionMethod("glGetVertexAttribfvARB", typeof(Delegates.GetVertexAttribfvARB));

            #endregion GetVertexAttribfvARB

            #region GetVertexAttribivARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetVertexAttribivARB(GLuint index, GLenum pname, IntPtr parameters);
            public static GetVertexAttribivARB glGetVertexAttribivARB = (GetVertexAttribivARB)GetDelegateForExtensionMethod("glGetVertexAttribivARB", typeof(Delegates.GetVertexAttribivARB));

            #endregion GetVertexAttribivARB

            #region GetVertexAttribPointervARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetVertexAttribPointervARB(GLuint index, GLenum pname, IntPtr pointer);
            public static GetVertexAttribPointervARB glGetVertexAttribPointervARB = (GetVertexAttribPointervARB)GetDelegateForExtensionMethod("glGetVertexAttribPointervARB", typeof(Delegates.GetVertexAttribPointervARB));

            #endregion GetVertexAttribPointervARB

            #region IsProgramARB

            /// <summary>
            /// 
            /// </summary>
            public delegate GLboolean IsProgramARB(GLuint program);
            public static IsProgramARB glIsProgramARB = (IsProgramARB)GetDelegateForExtensionMethod("glIsProgramARB", typeof(Delegates.IsProgramARB));

            #endregion IsProgramARB

            #region BindBufferARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void BindBufferARB(GLenum target, GLuint buffer);
            public static BindBufferARB glBindBufferARB = (BindBufferARB)GetDelegateForExtensionMethod("glBindBufferARB", typeof(Delegates.BindBufferARB));

            #endregion BindBufferARB

            #region DeleteBuffersARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void DeleteBuffersARB(GLsizei n, IntPtr buffers);
            public static DeleteBuffersARB glDeleteBuffersARB = (DeleteBuffersARB)GetDelegateForExtensionMethod("glDeleteBuffersARB", typeof(Delegates.DeleteBuffersARB));

            #endregion DeleteBuffersARB

            #region GenBuffersARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void GenBuffersARB(GLsizei n, IntPtr buffers);
            public static GenBuffersARB glGenBuffersARB = (GenBuffersARB)GetDelegateForExtensionMethod("glGenBuffersARB", typeof(Delegates.GenBuffersARB));

            #endregion GenBuffersARB

            #region IsBufferARB

            /// <summary>
            /// 
            /// </summary>
            public delegate GLboolean IsBufferARB(GLuint buffer);
            public static IsBufferARB glIsBufferARB = (IsBufferARB)GetDelegateForExtensionMethod("glIsBufferARB", typeof(Delegates.IsBufferARB));

            #endregion IsBufferARB

            #region BufferDataARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void BufferDataARB(GLenum target, GLsizeiptrARB size, IntPtr data, GLenum usage);
            public static BufferDataARB glBufferDataARB = (BufferDataARB)GetDelegateForExtensionMethod("glBufferDataARB", typeof(Delegates.BufferDataARB));

            #endregion BufferDataARB

            #region BufferSubDataARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void BufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, IntPtr data);
            public static BufferSubDataARB glBufferSubDataARB = (BufferSubDataARB)GetDelegateForExtensionMethod("glBufferSubDataARB", typeof(Delegates.BufferSubDataARB));

            #endregion BufferSubDataARB

            #region GetBufferSubDataARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, IntPtr data);
            public static GetBufferSubDataARB glGetBufferSubDataARB = (GetBufferSubDataARB)GetDelegateForExtensionMethod("glGetBufferSubDataARB", typeof(Delegates.GetBufferSubDataARB));

            #endregion GetBufferSubDataARB

            #region MapBufferARB

            /// <summary>
            /// 
            /// </summary>
            public delegate IntPtr MapBufferARB(GLenum target, GLenum access);
            public static MapBufferARB glMapBufferARB = (MapBufferARB)GetDelegateForExtensionMethod("glMapBufferARB", typeof(Delegates.MapBufferARB));

            #endregion MapBufferARB

            #region UnmapBufferARB

            /// <summary>
            /// 
            /// </summary>
            public delegate GLboolean UnmapBufferARB(GLenum target);
            public static UnmapBufferARB glUnmapBufferARB = (UnmapBufferARB)GetDelegateForExtensionMethod("glUnmapBufferARB", typeof(Delegates.UnmapBufferARB));

            #endregion UnmapBufferARB

            #region GetBufferParameterivARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetBufferParameterivARB(GLenum target, GLenum pname, IntPtr parameters);
            public static GetBufferParameterivARB glGetBufferParameterivARB = (GetBufferParameterivARB)GetDelegateForExtensionMethod("glGetBufferParameterivARB", typeof(Delegates.GetBufferParameterivARB));

            #endregion GetBufferParameterivARB

            #region GetBufferPointervARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetBufferPointervARB(GLenum target, GLenum pname, IntPtr parameters);
            public static GetBufferPointervARB glGetBufferPointervARB = (GetBufferPointervARB)GetDelegateForExtensionMethod("glGetBufferPointervARB", typeof(Delegates.GetBufferPointervARB));

            #endregion GetBufferPointervARB

            #region GenQueriesARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void GenQueriesARB(GLsizei n, IntPtr ids);
            public static GenQueriesARB glGenQueriesARB = (GenQueriesARB)GetDelegateForExtensionMethod("glGenQueriesARB", typeof(Delegates.GenQueriesARB));

            #endregion GenQueriesARB

            #region DeleteQueriesARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void DeleteQueriesARB(GLsizei n, IntPtr ids);
            public static DeleteQueriesARB glDeleteQueriesARB = (DeleteQueriesARB)GetDelegateForExtensionMethod("glDeleteQueriesARB", typeof(Delegates.DeleteQueriesARB));

            #endregion DeleteQueriesARB

            #region IsQueryARB

            /// <summary>
            /// 
            /// </summary>
            public delegate GLboolean IsQueryARB(GLuint id);
            public static IsQueryARB glIsQueryARB = (IsQueryARB)GetDelegateForExtensionMethod("glIsQueryARB", typeof(Delegates.IsQueryARB));

            #endregion IsQueryARB

            #region BeginQueryARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void BeginQueryARB(GLenum target, GLuint id);
            public static BeginQueryARB glBeginQueryARB = (BeginQueryARB)GetDelegateForExtensionMethod("glBeginQueryARB", typeof(Delegates.BeginQueryARB));

            #endregion BeginQueryARB

            #region EndQueryARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void EndQueryARB(GLenum target);
            public static EndQueryARB glEndQueryARB = (EndQueryARB)GetDelegateForExtensionMethod("glEndQueryARB", typeof(Delegates.EndQueryARB));

            #endregion EndQueryARB

            #region GetQueryivARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetQueryivARB(GLenum target, GLenum pname, IntPtr parameters);
            public static GetQueryivARB glGetQueryivARB = (GetQueryivARB)GetDelegateForExtensionMethod("glGetQueryivARB", typeof(Delegates.GetQueryivARB));

            #endregion GetQueryivARB

            #region GetQueryObjectivARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetQueryObjectivARB(GLuint id, GLenum pname, IntPtr parameters);
            public static GetQueryObjectivARB glGetQueryObjectivARB = (GetQueryObjectivARB)GetDelegateForExtensionMethod("glGetQueryObjectivARB", typeof(Delegates.GetQueryObjectivARB));

            #endregion GetQueryObjectivARB

            #region GetQueryObjectuivARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetQueryObjectuivARB(GLuint id, GLenum pname, IntPtr parameters);
            public static GetQueryObjectuivARB glGetQueryObjectuivARB = (GetQueryObjectuivARB)GetDelegateForExtensionMethod("glGetQueryObjectuivARB", typeof(Delegates.GetQueryObjectuivARB));

            #endregion GetQueryObjectuivARB

            #region DeleteObjectARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void DeleteObjectARB(GLhandleARB obj);
            public static DeleteObjectARB glDeleteObjectARB = (DeleteObjectARB)GetDelegateForExtensionMethod("glDeleteObjectARB", typeof(Delegates.DeleteObjectARB));

            #endregion DeleteObjectARB

            #region GetHandleARB

            /// <summary>
            /// 
            /// </summary>
            public delegate GLhandleARB GetHandleARB(GLenum pname);
            public static GetHandleARB glGetHandleARB = (GetHandleARB)GetDelegateForExtensionMethod("glGetHandleARB", typeof(Delegates.GetHandleARB));

            #endregion GetHandleARB

            #region DetachObjectARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void DetachObjectARB(GLhandleARB containerObj, GLhandleARB attachedObj);
            public static DetachObjectARB glDetachObjectARB = (DetachObjectARB)GetDelegateForExtensionMethod("glDetachObjectARB", typeof(Delegates.DetachObjectARB));

            #endregion DetachObjectARB

            #region CreateShaderObjectARB

            /// <summary>
            /// 
            /// </summary>
            public delegate GLhandleARB CreateShaderObjectARB(GLenum shaderType);
            public static CreateShaderObjectARB glCreateShaderObjectARB = (CreateShaderObjectARB)GetDelegateForExtensionMethod("glCreateShaderObjectARB", typeof(Delegates.CreateShaderObjectARB));

            #endregion CreateShaderObjectARB

            #region ShaderSourceARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void ShaderSourceARB(GLhandleARB shaderObj, GLsizei count, string[] @string, IntPtr length);
            public static ShaderSourceARB glShaderSourceARB = (ShaderSourceARB)GetDelegateForExtensionMethod("glShaderSourceARB", typeof(Delegates.ShaderSourceARB));

            #endregion ShaderSourceARB

            #region CompileShaderARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void CompileShaderARB(GLhandleARB shaderObj);
            public static CompileShaderARB glCompileShaderARB = (CompileShaderARB)GetDelegateForExtensionMethod("glCompileShaderARB", typeof(Delegates.CompileShaderARB));

            #endregion CompileShaderARB

            #region CreateProgramObjectARB

            /// <summary>
            /// 
            /// </summary>
            public delegate GLhandleARB CreateProgramObjectARB();
            public static CreateProgramObjectARB glCreateProgramObjectARB = (CreateProgramObjectARB)GetDelegateForExtensionMethod("glCreateProgramObjectARB", typeof(Delegates.CreateProgramObjectARB));

            #endregion CreateProgramObjectARB

            #region AttachObjectARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void AttachObjectARB(GLhandleARB containerObj, GLhandleARB obj);
            public static AttachObjectARB glAttachObjectARB = (AttachObjectARB)GetDelegateForExtensionMethod("glAttachObjectARB", typeof(Delegates.AttachObjectARB));

            #endregion AttachObjectARB

            #region LinkProgramARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void LinkProgramARB(GLhandleARB programObj);
            public static LinkProgramARB glLinkProgramARB = (LinkProgramARB)GetDelegateForExtensionMethod("glLinkProgramARB", typeof(Delegates.LinkProgramARB));

            #endregion LinkProgramARB

            #region UseProgramObjectARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void UseProgramObjectARB(GLhandleARB programObj);
            public static UseProgramObjectARB glUseProgramObjectARB = (UseProgramObjectARB)GetDelegateForExtensionMethod("glUseProgramObjectARB", typeof(Delegates.UseProgramObjectARB));

            #endregion UseProgramObjectARB

            #region ValidateProgramARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void ValidateProgramARB(GLhandleARB programObj);
            public static ValidateProgramARB glValidateProgramARB = (ValidateProgramARB)GetDelegateForExtensionMethod("glValidateProgramARB", typeof(Delegates.ValidateProgramARB));

            #endregion ValidateProgramARB

            #region Uniform1fARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void Uniform1fARB(GLint location, GLfloat v0);
            public static Uniform1fARB glUniform1fARB = (Uniform1fARB)GetDelegateForExtensionMethod("glUniform1fARB", typeof(Delegates.Uniform1fARB));

            #endregion Uniform1fARB

            #region Uniform2fARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void Uniform2fARB(GLint location, GLfloat v0, GLfloat v1);
            public static Uniform2fARB glUniform2fARB = (Uniform2fARB)GetDelegateForExtensionMethod("glUniform2fARB", typeof(Delegates.Uniform2fARB));

            #endregion Uniform2fARB

            #region Uniform3fARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void Uniform3fARB(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
            public static Uniform3fARB glUniform3fARB = (Uniform3fARB)GetDelegateForExtensionMethod("glUniform3fARB", typeof(Delegates.Uniform3fARB));

            #endregion Uniform3fARB

            #region Uniform4fARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void Uniform4fARB(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
            public static Uniform4fARB glUniform4fARB = (Uniform4fARB)GetDelegateForExtensionMethod("glUniform4fARB", typeof(Delegates.Uniform4fARB));

            #endregion Uniform4fARB

            #region Uniform1iARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void Uniform1iARB(GLint location, GLint v0);
            public static Uniform1iARB glUniform1iARB = (Uniform1iARB)GetDelegateForExtensionMethod("glUniform1iARB", typeof(Delegates.Uniform1iARB));

            #endregion Uniform1iARB

            #region Uniform2iARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void Uniform2iARB(GLint location, GLint v0, GLint v1);
            public static Uniform2iARB glUniform2iARB = (Uniform2iARB)GetDelegateForExtensionMethod("glUniform2iARB", typeof(Delegates.Uniform2iARB));

            #endregion Uniform2iARB

            #region Uniform3iARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void Uniform3iARB(GLint location, GLint v0, GLint v1, GLint v2);
            public static Uniform3iARB glUniform3iARB = (Uniform3iARB)GetDelegateForExtensionMethod("glUniform3iARB", typeof(Delegates.Uniform3iARB));

            #endregion Uniform3iARB

            #region Uniform4iARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void Uniform4iARB(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
            public static Uniform4iARB glUniform4iARB = (Uniform4iARB)GetDelegateForExtensionMethod("glUniform4iARB", typeof(Delegates.Uniform4iARB));

            #endregion Uniform4iARB

            #region Uniform1fvARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void Uniform1fvARB(GLint location, GLsizei count, IntPtr value);
            public static Uniform1fvARB glUniform1fvARB = (Uniform1fvARB)GetDelegateForExtensionMethod("glUniform1fvARB", typeof(Delegates.Uniform1fvARB));

            #endregion Uniform1fvARB

            #region Uniform2fvARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void Uniform2fvARB(GLint location, GLsizei count, IntPtr value);
            public static Uniform2fvARB glUniform2fvARB = (Uniform2fvARB)GetDelegateForExtensionMethod("glUniform2fvARB", typeof(Delegates.Uniform2fvARB));

            #endregion Uniform2fvARB

            #region Uniform3fvARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void Uniform3fvARB(GLint location, GLsizei count, IntPtr value);
            public static Uniform3fvARB glUniform3fvARB = (Uniform3fvARB)GetDelegateForExtensionMethod("glUniform3fvARB", typeof(Delegates.Uniform3fvARB));

            #endregion Uniform3fvARB

            #region Uniform4fvARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void Uniform4fvARB(GLint location, GLsizei count, IntPtr value);
            public static Uniform4fvARB glUniform4fvARB = (Uniform4fvARB)GetDelegateForExtensionMethod("glUniform4fvARB", typeof(Delegates.Uniform4fvARB));

            #endregion Uniform4fvARB

            #region Uniform1ivARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void Uniform1ivARB(GLint location, GLsizei count, IntPtr value);
            public static Uniform1ivARB glUniform1ivARB = (Uniform1ivARB)GetDelegateForExtensionMethod("glUniform1ivARB", typeof(Delegates.Uniform1ivARB));

            #endregion Uniform1ivARB

            #region Uniform2ivARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void Uniform2ivARB(GLint location, GLsizei count, IntPtr value);
            public static Uniform2ivARB glUniform2ivARB = (Uniform2ivARB)GetDelegateForExtensionMethod("glUniform2ivARB", typeof(Delegates.Uniform2ivARB));

            #endregion Uniform2ivARB

            #region Uniform3ivARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void Uniform3ivARB(GLint location, GLsizei count, IntPtr value);
            public static Uniform3ivARB glUniform3ivARB = (Uniform3ivARB)GetDelegateForExtensionMethod("glUniform3ivARB", typeof(Delegates.Uniform3ivARB));

            #endregion Uniform3ivARB

            #region Uniform4ivARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void Uniform4ivARB(GLint location, GLsizei count, IntPtr value);
            public static Uniform4ivARB glUniform4ivARB = (Uniform4ivARB)GetDelegateForExtensionMethod("glUniform4ivARB", typeof(Delegates.Uniform4ivARB));

            #endregion Uniform4ivARB

            #region UniformMatrix2fvARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void UniformMatrix2fvARB(GLint location, GLsizei count, GLboolean transpose, IntPtr value);
            public static UniformMatrix2fvARB glUniformMatrix2fvARB = (UniformMatrix2fvARB)GetDelegateForExtensionMethod("glUniformMatrix2fvARB", typeof(Delegates.UniformMatrix2fvARB));

            #endregion UniformMatrix2fvARB

            #region UniformMatrix3fvARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void UniformMatrix3fvARB(GLint location, GLsizei count, GLboolean transpose, IntPtr value);
            public static UniformMatrix3fvARB glUniformMatrix3fvARB = (UniformMatrix3fvARB)GetDelegateForExtensionMethod("glUniformMatrix3fvARB", typeof(Delegates.UniformMatrix3fvARB));

            #endregion UniformMatrix3fvARB

            #region UniformMatrix4fvARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void UniformMatrix4fvARB(GLint location, GLsizei count, GLboolean transpose, IntPtr value);
            public static UniformMatrix4fvARB glUniformMatrix4fvARB = (UniformMatrix4fvARB)GetDelegateForExtensionMethod("glUniformMatrix4fvARB", typeof(Delegates.UniformMatrix4fvARB));

            #endregion UniformMatrix4fvARB

            #region GetObjectParameterfvARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetObjectParameterfvARB(GLhandleARB obj, GLenum pname, IntPtr parameters);
            public static GetObjectParameterfvARB glGetObjectParameterfvARB = (GetObjectParameterfvARB)GetDelegateForExtensionMethod("glGetObjectParameterfvARB", typeof(Delegates.GetObjectParameterfvARB));

            #endregion GetObjectParameterfvARB

            #region GetObjectParameterivARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetObjectParameterivARB(GLhandleARB obj, GLenum pname, IntPtr parameters);
            public static GetObjectParameterivARB glGetObjectParameterivARB = (GetObjectParameterivARB)GetDelegateForExtensionMethod("glGetObjectParameterivARB", typeof(Delegates.GetObjectParameterivARB));

            #endregion GetObjectParameterivARB

            #region GetInfoLogARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetInfoLogARB(GLhandleARB obj, GLsizei maxLength, IntPtr length, StringBuilder infoLog);
            public static GetInfoLogARB glGetInfoLogARB = (GetInfoLogARB)GetDelegateForExtensionMethod("glGetInfoLogARB", typeof(Delegates.GetInfoLogARB));

            #endregion GetInfoLogARB

            #region GetAttachedObjectsARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, IntPtr count, IntPtr obj);
            public static GetAttachedObjectsARB glGetAttachedObjectsARB = (GetAttachedObjectsARB)GetDelegateForExtensionMethod("glGetAttachedObjectsARB", typeof(Delegates.GetAttachedObjectsARB));

            #endregion GetAttachedObjectsARB

            #region GetUniformLocationARB

            /// <summary>
            /// 
            /// </summary>
            public delegate GLint GetUniformLocationARB(GLhandleARB programObj, string name);
            public static GetUniformLocationARB glGetUniformLocationARB = (GetUniformLocationARB)GetDelegateForExtensionMethod("glGetUniformLocationARB", typeof(Delegates.GetUniformLocationARB));

            #endregion GetUniformLocationARB

            #region GetActiveUniformARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, IntPtr size, IntPtr type, StringBuilder name);
            public static GetActiveUniformARB glGetActiveUniformARB = (GetActiveUniformARB)GetDelegateForExtensionMethod("glGetActiveUniformARB", typeof(Delegates.GetActiveUniformARB));

            #endregion GetActiveUniformARB

            #region GetUniformfvARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetUniformfvARB(GLhandleARB programObj, GLint location, IntPtr parameters);
            public static GetUniformfvARB glGetUniformfvARB = (GetUniformfvARB)GetDelegateForExtensionMethod("glGetUniformfvARB", typeof(Delegates.GetUniformfvARB));

            #endregion GetUniformfvARB

            #region GetUniformivARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetUniformivARB(GLhandleARB programObj, GLint location, IntPtr parameters);
            public static GetUniformivARB glGetUniformivARB = (GetUniformivARB)GetDelegateForExtensionMethod("glGetUniformivARB", typeof(Delegates.GetUniformivARB));

            #endregion GetUniformivARB

            #region GetShaderSourceARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetShaderSourceARB(GLhandleARB obj, GLsizei maxLength, IntPtr length, StringBuilder source);
            public static GetShaderSourceARB glGetShaderSourceARB = (GetShaderSourceARB)GetDelegateForExtensionMethod("glGetShaderSourceARB", typeof(Delegates.GetShaderSourceARB));

            #endregion GetShaderSourceARB

            #region BindAttribLocationARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void BindAttribLocationARB(GLhandleARB programObj, GLuint index, string name);
            public static BindAttribLocationARB glBindAttribLocationARB = (BindAttribLocationARB)GetDelegateForExtensionMethod("glBindAttribLocationARB", typeof(Delegates.BindAttribLocationARB));

            #endregion BindAttribLocationARB

            #region GetActiveAttribARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, IntPtr size, IntPtr type, StringBuilder name);
            public static GetActiveAttribARB glGetActiveAttribARB = (GetActiveAttribARB)GetDelegateForExtensionMethod("glGetActiveAttribARB", typeof(Delegates.GetActiveAttribARB));

            #endregion GetActiveAttribARB

            #region GetAttribLocationARB

            /// <summary>
            /// 
            /// </summary>
            public delegate GLint GetAttribLocationARB(GLhandleARB programObj, string name);
            public static GetAttribLocationARB glGetAttribLocationARB = (GetAttribLocationARB)GetDelegateForExtensionMethod("glGetAttribLocationARB", typeof(Delegates.GetAttribLocationARB));

            #endregion GetAttribLocationARB

            #region DrawBuffersARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void DrawBuffersARB(GLsizei n, IntPtr bufs);
            public static DrawBuffersARB glDrawBuffersARB = (DrawBuffersARB)GetDelegateForExtensionMethod("glDrawBuffersARB", typeof(Delegates.DrawBuffersARB));

            #endregion DrawBuffersARB

            #region ClampColorARB

            /// <summary>
            /// 
            /// </summary>
            public delegate void ClampColorARB(GLenum target, GLenum clamp);
            public static ClampColorARB glClampColorARB = (ClampColorARB)GetDelegateForExtensionMethod("glClampColorARB", typeof(Delegates.ClampColorARB));

            #endregion ClampColorARB

            #region BlendColorEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void BlendColorEXT(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
            public static BlendColorEXT glBlendColorEXT = (BlendColorEXT)GetDelegateForExtensionMethod("glBlendColorEXT", typeof(Delegates.BlendColorEXT));

            #endregion BlendColorEXT

            #region PolygonOffsetEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void PolygonOffsetEXT(GLfloat factor, GLfloat bias);
            public static PolygonOffsetEXT glPolygonOffsetEXT = (PolygonOffsetEXT)GetDelegateForExtensionMethod("glPolygonOffsetEXT", typeof(Delegates.PolygonOffsetEXT));

            #endregion PolygonOffsetEXT

            #region TexImage3DEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void TexImage3DEXT(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, IntPtr pixels);
            public static TexImage3DEXT glTexImage3DEXT = (TexImage3DEXT)GetDelegateForExtensionMethod("glTexImage3DEXT", typeof(Delegates.TexImage3DEXT));

            #endregion TexImage3DEXT

            #region TexSubImage3DEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void TexSubImage3DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, IntPtr pixels);
            public static TexSubImage3DEXT glTexSubImage3DEXT = (TexSubImage3DEXT)GetDelegateForExtensionMethod("glTexSubImage3DEXT", typeof(Delegates.TexSubImage3DEXT));

            #endregion TexSubImage3DEXT

            #region GetTexFilterFuncSGIS

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetTexFilterFuncSGIS(GLenum target, GLenum filter, IntPtr weights);
            public static GetTexFilterFuncSGIS glGetTexFilterFuncSGIS = (GetTexFilterFuncSGIS)GetDelegateForExtensionMethod("glGetTexFilterFuncSGIS", typeof(Delegates.GetTexFilterFuncSGIS));

            #endregion GetTexFilterFuncSGIS

            #region TexFilterFuncSGIS

            /// <summary>
            /// 
            /// </summary>
            public delegate void TexFilterFuncSGIS(GLenum target, GLenum filter, GLsizei n, IntPtr weights);
            public static TexFilterFuncSGIS glTexFilterFuncSGIS = (TexFilterFuncSGIS)GetDelegateForExtensionMethod("glTexFilterFuncSGIS", typeof(Delegates.TexFilterFuncSGIS));

            #endregion TexFilterFuncSGIS

            #region TexSubImage1DEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void TexSubImage1DEXT(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, IntPtr pixels);
            public static TexSubImage1DEXT glTexSubImage1DEXT = (TexSubImage1DEXT)GetDelegateForExtensionMethod("glTexSubImage1DEXT", typeof(Delegates.TexSubImage1DEXT));

            #endregion TexSubImage1DEXT

            #region TexSubImage2DEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void TexSubImage2DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, IntPtr pixels);
            public static TexSubImage2DEXT glTexSubImage2DEXT = (TexSubImage2DEXT)GetDelegateForExtensionMethod("glTexSubImage2DEXT", typeof(Delegates.TexSubImage2DEXT));

            #endregion TexSubImage2DEXT

            #region CopyTexImage1DEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void CopyTexImage1DEXT(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
            public static CopyTexImage1DEXT glCopyTexImage1DEXT = (CopyTexImage1DEXT)GetDelegateForExtensionMethod("glCopyTexImage1DEXT", typeof(Delegates.CopyTexImage1DEXT));

            #endregion CopyTexImage1DEXT

            #region CopyTexImage2DEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void CopyTexImage2DEXT(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
            public static CopyTexImage2DEXT glCopyTexImage2DEXT = (CopyTexImage2DEXT)GetDelegateForExtensionMethod("glCopyTexImage2DEXT", typeof(Delegates.CopyTexImage2DEXT));

            #endregion CopyTexImage2DEXT

            #region CopyTexSubImage1DEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void CopyTexSubImage1DEXT(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
            public static CopyTexSubImage1DEXT glCopyTexSubImage1DEXT = (CopyTexSubImage1DEXT)GetDelegateForExtensionMethod("glCopyTexSubImage1DEXT", typeof(Delegates.CopyTexSubImage1DEXT));

            #endregion CopyTexSubImage1DEXT

            #region CopyTexSubImage2DEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void CopyTexSubImage2DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
            public static CopyTexSubImage2DEXT glCopyTexSubImage2DEXT = (CopyTexSubImage2DEXT)GetDelegateForExtensionMethod("glCopyTexSubImage2DEXT", typeof(Delegates.CopyTexSubImage2DEXT));

            #endregion CopyTexSubImage2DEXT

            #region CopyTexSubImage3DEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void CopyTexSubImage3DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
            public static CopyTexSubImage3DEXT glCopyTexSubImage3DEXT = (CopyTexSubImage3DEXT)GetDelegateForExtensionMethod("glCopyTexSubImage3DEXT", typeof(Delegates.CopyTexSubImage3DEXT));

            #endregion CopyTexSubImage3DEXT

            #region GetHistogramEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetHistogramEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, IntPtr values);
            public static GetHistogramEXT glGetHistogramEXT = (GetHistogramEXT)GetDelegateForExtensionMethod("glGetHistogramEXT", typeof(Delegates.GetHistogramEXT));

            #endregion GetHistogramEXT

            #region GetHistogramParameterfvEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetHistogramParameterfvEXT(GLenum target, GLenum pname, IntPtr parameters);
            public static GetHistogramParameterfvEXT glGetHistogramParameterfvEXT = (GetHistogramParameterfvEXT)GetDelegateForExtensionMethod("glGetHistogramParameterfvEXT", typeof(Delegates.GetHistogramParameterfvEXT));

            #endregion GetHistogramParameterfvEXT

            #region GetHistogramParameterivEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetHistogramParameterivEXT(GLenum target, GLenum pname, IntPtr parameters);
            public static GetHistogramParameterivEXT glGetHistogramParameterivEXT = (GetHistogramParameterivEXT)GetDelegateForExtensionMethod("glGetHistogramParameterivEXT", typeof(Delegates.GetHistogramParameterivEXT));

            #endregion GetHistogramParameterivEXT

            #region GetMinmaxEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetMinmaxEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, IntPtr values);
            public static GetMinmaxEXT glGetMinmaxEXT = (GetMinmaxEXT)GetDelegateForExtensionMethod("glGetMinmaxEXT", typeof(Delegates.GetMinmaxEXT));

            #endregion GetMinmaxEXT

            #region GetMinmaxParameterfvEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetMinmaxParameterfvEXT(GLenum target, GLenum pname, IntPtr parameters);
            public static GetMinmaxParameterfvEXT glGetMinmaxParameterfvEXT = (GetMinmaxParameterfvEXT)GetDelegateForExtensionMethod("glGetMinmaxParameterfvEXT", typeof(Delegates.GetMinmaxParameterfvEXT));

            #endregion GetMinmaxParameterfvEXT

            #region GetMinmaxParameterivEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetMinmaxParameterivEXT(GLenum target, GLenum pname, IntPtr parameters);
            public static GetMinmaxParameterivEXT glGetMinmaxParameterivEXT = (GetMinmaxParameterivEXT)GetDelegateForExtensionMethod("glGetMinmaxParameterivEXT", typeof(Delegates.GetMinmaxParameterivEXT));

            #endregion GetMinmaxParameterivEXT

            #region HistogramEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void HistogramEXT(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink);
            public static HistogramEXT glHistogramEXT = (HistogramEXT)GetDelegateForExtensionMethod("glHistogramEXT", typeof(Delegates.HistogramEXT));

            #endregion HistogramEXT

            #region MinmaxEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void MinmaxEXT(GLenum target, GLenum internalformat, GLboolean sink);
            public static MinmaxEXT glMinmaxEXT = (MinmaxEXT)GetDelegateForExtensionMethod("glMinmaxEXT", typeof(Delegates.MinmaxEXT));

            #endregion MinmaxEXT

            #region ResetHistogramEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void ResetHistogramEXT(GLenum target);
            public static ResetHistogramEXT glResetHistogramEXT = (ResetHistogramEXT)GetDelegateForExtensionMethod("glResetHistogramEXT", typeof(Delegates.ResetHistogramEXT));

            #endregion ResetHistogramEXT

            #region ResetMinmaxEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void ResetMinmaxEXT(GLenum target);
            public static ResetMinmaxEXT glResetMinmaxEXT = (ResetMinmaxEXT)GetDelegateForExtensionMethod("glResetMinmaxEXT", typeof(Delegates.ResetMinmaxEXT));

            #endregion ResetMinmaxEXT

            #region ConvolutionFilter1DEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void ConvolutionFilter1DEXT(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, IntPtr image);
            public static ConvolutionFilter1DEXT glConvolutionFilter1DEXT = (ConvolutionFilter1DEXT)GetDelegateForExtensionMethod("glConvolutionFilter1DEXT", typeof(Delegates.ConvolutionFilter1DEXT));

            #endregion ConvolutionFilter1DEXT

            #region ConvolutionFilter2DEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void ConvolutionFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, IntPtr image);
            public static ConvolutionFilter2DEXT glConvolutionFilter2DEXT = (ConvolutionFilter2DEXT)GetDelegateForExtensionMethod("glConvolutionFilter2DEXT", typeof(Delegates.ConvolutionFilter2DEXT));

            #endregion ConvolutionFilter2DEXT

            #region ConvolutionParameterfEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void ConvolutionParameterfEXT(GLenum target, GLenum pname, GLfloat parameters);
            public static ConvolutionParameterfEXT glConvolutionParameterfEXT = (ConvolutionParameterfEXT)GetDelegateForExtensionMethod("glConvolutionParameterfEXT", typeof(Delegates.ConvolutionParameterfEXT));

            #endregion ConvolutionParameterfEXT

            #region ConvolutionParameterfvEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void ConvolutionParameterfvEXT(GLenum target, GLenum pname, IntPtr parameters);
            public static ConvolutionParameterfvEXT glConvolutionParameterfvEXT = (ConvolutionParameterfvEXT)GetDelegateForExtensionMethod("glConvolutionParameterfvEXT", typeof(Delegates.ConvolutionParameterfvEXT));

            #endregion ConvolutionParameterfvEXT

            #region ConvolutionParameteriEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void ConvolutionParameteriEXT(GLenum target, GLenum pname, GLint parameters);
            public static ConvolutionParameteriEXT glConvolutionParameteriEXT = (ConvolutionParameteriEXT)GetDelegateForExtensionMethod("glConvolutionParameteriEXT", typeof(Delegates.ConvolutionParameteriEXT));

            #endregion ConvolutionParameteriEXT

            #region ConvolutionParameterivEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void ConvolutionParameterivEXT(GLenum target, GLenum pname, IntPtr parameters);
            public static ConvolutionParameterivEXT glConvolutionParameterivEXT = (ConvolutionParameterivEXT)GetDelegateForExtensionMethod("glConvolutionParameterivEXT", typeof(Delegates.ConvolutionParameterivEXT));

            #endregion ConvolutionParameterivEXT

            #region CopyConvolutionFilter1DEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void CopyConvolutionFilter1DEXT(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
            public static CopyConvolutionFilter1DEXT glCopyConvolutionFilter1DEXT = (CopyConvolutionFilter1DEXT)GetDelegateForExtensionMethod("glCopyConvolutionFilter1DEXT", typeof(Delegates.CopyConvolutionFilter1DEXT));

            #endregion CopyConvolutionFilter1DEXT

            #region CopyConvolutionFilter2DEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void CopyConvolutionFilter2DEXT(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height);
            public static CopyConvolutionFilter2DEXT glCopyConvolutionFilter2DEXT = (CopyConvolutionFilter2DEXT)GetDelegateForExtensionMethod("glCopyConvolutionFilter2DEXT", typeof(Delegates.CopyConvolutionFilter2DEXT));

            #endregion CopyConvolutionFilter2DEXT

            #region GetConvolutionFilterEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetConvolutionFilterEXT(GLenum target, GLenum format, GLenum type, IntPtr image);
            public static GetConvolutionFilterEXT glGetConvolutionFilterEXT = (GetConvolutionFilterEXT)GetDelegateForExtensionMethod("glGetConvolutionFilterEXT", typeof(Delegates.GetConvolutionFilterEXT));

            #endregion GetConvolutionFilterEXT

            #region GetConvolutionParameterfvEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetConvolutionParameterfvEXT(GLenum target, GLenum pname, IntPtr parameters);
            public static GetConvolutionParameterfvEXT glGetConvolutionParameterfvEXT = (GetConvolutionParameterfvEXT)GetDelegateForExtensionMethod("glGetConvolutionParameterfvEXT", typeof(Delegates.GetConvolutionParameterfvEXT));

            #endregion GetConvolutionParameterfvEXT

            #region GetConvolutionParameterivEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetConvolutionParameterivEXT(GLenum target, GLenum pname, IntPtr parameters);
            public static GetConvolutionParameterivEXT glGetConvolutionParameterivEXT = (GetConvolutionParameterivEXT)GetDelegateForExtensionMethod("glGetConvolutionParameterivEXT", typeof(Delegates.GetConvolutionParameterivEXT));

            #endregion GetConvolutionParameterivEXT

            #region GetSeparableFilterEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetSeparableFilterEXT(GLenum target, GLenum format, GLenum type, IntPtr row, IntPtr column, IntPtr span);
            public static GetSeparableFilterEXT glGetSeparableFilterEXT = (GetSeparableFilterEXT)GetDelegateForExtensionMethod("glGetSeparableFilterEXT", typeof(Delegates.GetSeparableFilterEXT));

            #endregion GetSeparableFilterEXT

            #region SeparableFilter2DEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void SeparableFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, IntPtr row, IntPtr column);
            public static SeparableFilter2DEXT glSeparableFilter2DEXT = (SeparableFilter2DEXT)GetDelegateForExtensionMethod("glSeparableFilter2DEXT", typeof(Delegates.SeparableFilter2DEXT));

            #endregion SeparableFilter2DEXT

            #region ColorTableSGI

            /// <summary>
            /// 
            /// </summary>
            public delegate void ColorTableSGI(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, IntPtr table);
            public static ColorTableSGI glColorTableSGI = (ColorTableSGI)GetDelegateForExtensionMethod("glColorTableSGI", typeof(Delegates.ColorTableSGI));

            #endregion ColorTableSGI

            #region ColorTableParameterfvSGI

            /// <summary>
            /// 
            /// </summary>
            public delegate void ColorTableParameterfvSGI(GLenum target, GLenum pname, IntPtr parameters);
            public static ColorTableParameterfvSGI glColorTableParameterfvSGI = (ColorTableParameterfvSGI)GetDelegateForExtensionMethod("glColorTableParameterfvSGI", typeof(Delegates.ColorTableParameterfvSGI));

            #endregion ColorTableParameterfvSGI

            #region ColorTableParameterivSGI

            /// <summary>
            /// 
            /// </summary>
            public delegate void ColorTableParameterivSGI(GLenum target, GLenum pname, IntPtr parameters);
            public static ColorTableParameterivSGI glColorTableParameterivSGI = (ColorTableParameterivSGI)GetDelegateForExtensionMethod("glColorTableParameterivSGI", typeof(Delegates.ColorTableParameterivSGI));

            #endregion ColorTableParameterivSGI

            #region CopyColorTableSGI

            /// <summary>
            /// 
            /// </summary>
            public delegate void CopyColorTableSGI(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
            public static CopyColorTableSGI glCopyColorTableSGI = (CopyColorTableSGI)GetDelegateForExtensionMethod("glCopyColorTableSGI", typeof(Delegates.CopyColorTableSGI));

            #endregion CopyColorTableSGI

            #region GetColorTableSGI

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetColorTableSGI(GLenum target, GLenum format, GLenum type, IntPtr table);
            public static GetColorTableSGI glGetColorTableSGI = (GetColorTableSGI)GetDelegateForExtensionMethod("glGetColorTableSGI", typeof(Delegates.GetColorTableSGI));

            #endregion GetColorTableSGI

            #region GetColorTableParameterfvSGI

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetColorTableParameterfvSGI(GLenum target, GLenum pname, IntPtr parameters);
            public static GetColorTableParameterfvSGI glGetColorTableParameterfvSGI = (GetColorTableParameterfvSGI)GetDelegateForExtensionMethod("glGetColorTableParameterfvSGI", typeof(Delegates.GetColorTableParameterfvSGI));

            #endregion GetColorTableParameterfvSGI

            #region GetColorTableParameterivSGI

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetColorTableParameterivSGI(GLenum target, GLenum pname, IntPtr parameters);
            public static GetColorTableParameterivSGI glGetColorTableParameterivSGI = (GetColorTableParameterivSGI)GetDelegateForExtensionMethod("glGetColorTableParameterivSGI", typeof(Delegates.GetColorTableParameterivSGI));

            #endregion GetColorTableParameterivSGI

            #region PixelTexGenSGIX

            /// <summary>
            /// 
            /// </summary>
            public delegate void PixelTexGenSGIX(GLenum mode);
            public static PixelTexGenSGIX glPixelTexGenSGIX = (PixelTexGenSGIX)GetDelegateForExtensionMethod("glPixelTexGenSGIX", typeof(Delegates.PixelTexGenSGIX));

            #endregion PixelTexGenSGIX

            #region PixelTexGenParameteriSGIS

            /// <summary>
            /// 
            /// </summary>
            public delegate void PixelTexGenParameteriSGIS(GLenum pname, GLint param);
            public static PixelTexGenParameteriSGIS glPixelTexGenParameteriSGIS = (PixelTexGenParameteriSGIS)GetDelegateForExtensionMethod("glPixelTexGenParameteriSGIS", typeof(Delegates.PixelTexGenParameteriSGIS));

            #endregion PixelTexGenParameteriSGIS

            #region PixelTexGenParameterivSGIS

            /// <summary>
            /// 
            /// </summary>
            public delegate void PixelTexGenParameterivSGIS(GLenum pname, IntPtr parameters);
            public static PixelTexGenParameterivSGIS glPixelTexGenParameterivSGIS = (PixelTexGenParameterivSGIS)GetDelegateForExtensionMethod("glPixelTexGenParameterivSGIS", typeof(Delegates.PixelTexGenParameterivSGIS));

            #endregion PixelTexGenParameterivSGIS

            #region PixelTexGenParameterfSGIS

            /// <summary>
            /// 
            /// </summary>
            public delegate void PixelTexGenParameterfSGIS(GLenum pname, GLfloat param);
            public static PixelTexGenParameterfSGIS glPixelTexGenParameterfSGIS = (PixelTexGenParameterfSGIS)GetDelegateForExtensionMethod("glPixelTexGenParameterfSGIS", typeof(Delegates.PixelTexGenParameterfSGIS));

            #endregion PixelTexGenParameterfSGIS

            #region PixelTexGenParameterfvSGIS

            /// <summary>
            /// 
            /// </summary>
            public delegate void PixelTexGenParameterfvSGIS(GLenum pname, IntPtr parameters);
            public static PixelTexGenParameterfvSGIS glPixelTexGenParameterfvSGIS = (PixelTexGenParameterfvSGIS)GetDelegateForExtensionMethod("glPixelTexGenParameterfvSGIS", typeof(Delegates.PixelTexGenParameterfvSGIS));

            #endregion PixelTexGenParameterfvSGIS

            #region GetPixelTexGenParameterivSGIS

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetPixelTexGenParameterivSGIS(GLenum pname, IntPtr parameters);
            public static GetPixelTexGenParameterivSGIS glGetPixelTexGenParameterivSGIS = (GetPixelTexGenParameterivSGIS)GetDelegateForExtensionMethod("glGetPixelTexGenParameterivSGIS", typeof(Delegates.GetPixelTexGenParameterivSGIS));

            #endregion GetPixelTexGenParameterivSGIS

            #region GetPixelTexGenParameterfvSGIS

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetPixelTexGenParameterfvSGIS(GLenum pname, IntPtr parameters);
            public static GetPixelTexGenParameterfvSGIS glGetPixelTexGenParameterfvSGIS = (GetPixelTexGenParameterfvSGIS)GetDelegateForExtensionMethod("glGetPixelTexGenParameterfvSGIS", typeof(Delegates.GetPixelTexGenParameterfvSGIS));

            #endregion GetPixelTexGenParameterfvSGIS

            #region TexImage4DSGIS

            /// <summary>
            /// 
            /// </summary>
            public delegate void TexImage4DSGIS(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GLenum format, GLenum type, IntPtr pixels);
            public static TexImage4DSGIS glTexImage4DSGIS = (TexImage4DSGIS)GetDelegateForExtensionMethod("glTexImage4DSGIS", typeof(Delegates.TexImage4DSGIS));

            #endregion TexImage4DSGIS

            #region TexSubImage4DSGIS

            /// <summary>
            /// 
            /// </summary>
            public delegate void TexSubImage4DSGIS(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLenum format, GLenum type, IntPtr pixels);
            public static TexSubImage4DSGIS glTexSubImage4DSGIS = (TexSubImage4DSGIS)GetDelegateForExtensionMethod("glTexSubImage4DSGIS", typeof(Delegates.TexSubImage4DSGIS));

            #endregion TexSubImage4DSGIS

            #region AreTexturesResidentEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate GLboolean AreTexturesResidentEXT(GLsizei n, IntPtr textures, IntPtr residences);
            public static AreTexturesResidentEXT glAreTexturesResidentEXT = (AreTexturesResidentEXT)GetDelegateForExtensionMethod("glAreTexturesResidentEXT", typeof(Delegates.AreTexturesResidentEXT));

            #endregion AreTexturesResidentEXT

            #region BindTextureEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void BindTextureEXT(GLenum target, GLuint texture);
            public static BindTextureEXT glBindTextureEXT = (BindTextureEXT)GetDelegateForExtensionMethod("glBindTextureEXT", typeof(Delegates.BindTextureEXT));

            #endregion BindTextureEXT

            #region DeleteTexturesEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void DeleteTexturesEXT(GLsizei n, IntPtr textures);
            public static DeleteTexturesEXT glDeleteTexturesEXT = (DeleteTexturesEXT)GetDelegateForExtensionMethod("glDeleteTexturesEXT", typeof(Delegates.DeleteTexturesEXT));

            #endregion DeleteTexturesEXT

            #region GenTexturesEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void GenTexturesEXT(GLsizei n, IntPtr textures);
            public static GenTexturesEXT glGenTexturesEXT = (GenTexturesEXT)GetDelegateForExtensionMethod("glGenTexturesEXT", typeof(Delegates.GenTexturesEXT));

            #endregion GenTexturesEXT

            #region IsTextureEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate GLboolean IsTextureEXT(GLuint texture);
            public static IsTextureEXT glIsTextureEXT = (IsTextureEXT)GetDelegateForExtensionMethod("glIsTextureEXT", typeof(Delegates.IsTextureEXT));

            #endregion IsTextureEXT

            #region PrioritizeTexturesEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void PrioritizeTexturesEXT(GLsizei n, IntPtr textures, IntPtr priorities);
            public static PrioritizeTexturesEXT glPrioritizeTexturesEXT = (PrioritizeTexturesEXT)GetDelegateForExtensionMethod("glPrioritizeTexturesEXT", typeof(Delegates.PrioritizeTexturesEXT));

            #endregion PrioritizeTexturesEXT

            #region DetailTexFuncSGIS

            /// <summary>
            /// 
            /// </summary>
            public delegate void DetailTexFuncSGIS(GLenum target, GLsizei n, IntPtr points);
            public static DetailTexFuncSGIS glDetailTexFuncSGIS = (DetailTexFuncSGIS)GetDelegateForExtensionMethod("glDetailTexFuncSGIS", typeof(Delegates.DetailTexFuncSGIS));

            #endregion DetailTexFuncSGIS

            #region GetDetailTexFuncSGIS

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetDetailTexFuncSGIS(GLenum target, IntPtr points);
            public static GetDetailTexFuncSGIS glGetDetailTexFuncSGIS = (GetDetailTexFuncSGIS)GetDelegateForExtensionMethod("glGetDetailTexFuncSGIS", typeof(Delegates.GetDetailTexFuncSGIS));

            #endregion GetDetailTexFuncSGIS

            #region SharpenTexFuncSGIS

            /// <summary>
            /// 
            /// </summary>
            public delegate void SharpenTexFuncSGIS(GLenum target, GLsizei n, IntPtr points);
            public static SharpenTexFuncSGIS glSharpenTexFuncSGIS = (SharpenTexFuncSGIS)GetDelegateForExtensionMethod("glSharpenTexFuncSGIS", typeof(Delegates.SharpenTexFuncSGIS));

            #endregion SharpenTexFuncSGIS

            #region GetSharpenTexFuncSGIS

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetSharpenTexFuncSGIS(GLenum target, IntPtr points);
            public static GetSharpenTexFuncSGIS glGetSharpenTexFuncSGIS = (GetSharpenTexFuncSGIS)GetDelegateForExtensionMethod("glGetSharpenTexFuncSGIS", typeof(Delegates.GetSharpenTexFuncSGIS));

            #endregion GetSharpenTexFuncSGIS

            #region SampleMaskSGIS

            /// <summary>
            /// 
            /// </summary>
            public delegate void SampleMaskSGIS(GLclampf value, GLboolean invert);
            public static SampleMaskSGIS glSampleMaskSGIS = (SampleMaskSGIS)GetDelegateForExtensionMethod("glSampleMaskSGIS", typeof(Delegates.SampleMaskSGIS));

            #endregion SampleMaskSGIS

            #region SamplePatternSGIS

            /// <summary>
            /// 
            /// </summary>
            public delegate void SamplePatternSGIS(GLenum pattern);
            public static SamplePatternSGIS glSamplePatternSGIS = (SamplePatternSGIS)GetDelegateForExtensionMethod("glSamplePatternSGIS", typeof(Delegates.SamplePatternSGIS));

            #endregion SamplePatternSGIS

            #region ArrayElementEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void ArrayElementEXT(GLint i);
            public static ArrayElementEXT glArrayElementEXT = (ArrayElementEXT)GetDelegateForExtensionMethod("glArrayElementEXT", typeof(Delegates.ArrayElementEXT));

            #endregion ArrayElementEXT

            #region ColorPointerEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void ColorPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, IntPtr pointer);
            public static ColorPointerEXT glColorPointerEXT = (ColorPointerEXT)GetDelegateForExtensionMethod("glColorPointerEXT", typeof(Delegates.ColorPointerEXT));

            #endregion ColorPointerEXT

            #region DrawArraysEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void DrawArraysEXT(GLenum mode, GLint first, GLsizei count);
            public static DrawArraysEXT glDrawArraysEXT = (DrawArraysEXT)GetDelegateForExtensionMethod("glDrawArraysEXT", typeof(Delegates.DrawArraysEXT));

            #endregion DrawArraysEXT

            #region EdgeFlagPointerEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void EdgeFlagPointerEXT(GLsizei stride, GLsizei count, IntPtr pointer);
            public static EdgeFlagPointerEXT glEdgeFlagPointerEXT = (EdgeFlagPointerEXT)GetDelegateForExtensionMethod("glEdgeFlagPointerEXT", typeof(Delegates.EdgeFlagPointerEXT));

            #endregion EdgeFlagPointerEXT

            #region GetPointervEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetPointervEXT(GLenum pname, IntPtr parameters);
            public static GetPointervEXT glGetPointervEXT = (GetPointervEXT)GetDelegateForExtensionMethod("glGetPointervEXT", typeof(Delegates.GetPointervEXT));

            #endregion GetPointervEXT

            #region IndexPointerEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void IndexPointerEXT(GLenum type, GLsizei stride, GLsizei count, IntPtr pointer);
            public static IndexPointerEXT glIndexPointerEXT = (IndexPointerEXT)GetDelegateForExtensionMethod("glIndexPointerEXT", typeof(Delegates.IndexPointerEXT));

            #endregion IndexPointerEXT

            #region NormalPointerEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void NormalPointerEXT(GLenum type, GLsizei stride, GLsizei count, IntPtr pointer);
            public static NormalPointerEXT glNormalPointerEXT = (NormalPointerEXT)GetDelegateForExtensionMethod("glNormalPointerEXT", typeof(Delegates.NormalPointerEXT));

            #endregion NormalPointerEXT

            #region TexCoordPointerEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void TexCoordPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, IntPtr pointer);
            public static TexCoordPointerEXT glTexCoordPointerEXT = (TexCoordPointerEXT)GetDelegateForExtensionMethod("glTexCoordPointerEXT", typeof(Delegates.TexCoordPointerEXT));

            #endregion TexCoordPointerEXT

            #region VertexPointerEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, IntPtr pointer);
            public static VertexPointerEXT glVertexPointerEXT = (VertexPointerEXT)GetDelegateForExtensionMethod("glVertexPointerEXT", typeof(Delegates.VertexPointerEXT));

            #endregion VertexPointerEXT

            #region BlendEquationEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void BlendEquationEXT(GLenum mode);
            public static BlendEquationEXT glBlendEquationEXT = (BlendEquationEXT)GetDelegateForExtensionMethod("glBlendEquationEXT", typeof(Delegates.BlendEquationEXT));

            #endregion BlendEquationEXT

            #region SpriteParameterfSGIX

            /// <summary>
            /// 
            /// </summary>
            public delegate void SpriteParameterfSGIX(GLenum pname, GLfloat param);
            public static SpriteParameterfSGIX glSpriteParameterfSGIX = (SpriteParameterfSGIX)GetDelegateForExtensionMethod("glSpriteParameterfSGIX", typeof(Delegates.SpriteParameterfSGIX));

            #endregion SpriteParameterfSGIX

            #region SpriteParameterfvSGIX

            /// <summary>
            /// 
            /// </summary>
            public delegate void SpriteParameterfvSGIX(GLenum pname, IntPtr parameters);
            public static SpriteParameterfvSGIX glSpriteParameterfvSGIX = (SpriteParameterfvSGIX)GetDelegateForExtensionMethod("glSpriteParameterfvSGIX", typeof(Delegates.SpriteParameterfvSGIX));

            #endregion SpriteParameterfvSGIX

            #region SpriteParameteriSGIX

            /// <summary>
            /// 
            /// </summary>
            public delegate void SpriteParameteriSGIX(GLenum pname, GLint param);
            public static SpriteParameteriSGIX glSpriteParameteriSGIX = (SpriteParameteriSGIX)GetDelegateForExtensionMethod("glSpriteParameteriSGIX", typeof(Delegates.SpriteParameteriSGIX));

            #endregion SpriteParameteriSGIX

            #region SpriteParameterivSGIX

            /// <summary>
            /// 
            /// </summary>
            public delegate void SpriteParameterivSGIX(GLenum pname, IntPtr parameters);
            public static SpriteParameterivSGIX glSpriteParameterivSGIX = (SpriteParameterivSGIX)GetDelegateForExtensionMethod("glSpriteParameterivSGIX", typeof(Delegates.SpriteParameterivSGIX));

            #endregion SpriteParameterivSGIX

            #region PointParameterfEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void PointParameterfEXT(GLenum pname, GLfloat param);
            public static PointParameterfEXT glPointParameterfEXT = (PointParameterfEXT)GetDelegateForExtensionMethod("glPointParameterfEXT", typeof(Delegates.PointParameterfEXT));

            #endregion PointParameterfEXT

            #region PointParameterfvEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void PointParameterfvEXT(GLenum pname, IntPtr parameters);
            public static PointParameterfvEXT glPointParameterfvEXT = (PointParameterfvEXT)GetDelegateForExtensionMethod("glPointParameterfvEXT", typeof(Delegates.PointParameterfvEXT));

            #endregion PointParameterfvEXT

            #region PointParameterfSGIS

            /// <summary>
            /// 
            /// </summary>
            public delegate void PointParameterfSGIS(GLenum pname, GLfloat param);
            public static PointParameterfSGIS glPointParameterfSGIS = (PointParameterfSGIS)GetDelegateForExtensionMethod("glPointParameterfSGIS", typeof(Delegates.PointParameterfSGIS));

            #endregion PointParameterfSGIS

            #region PointParameterfvSGIS

            /// <summary>
            /// 
            /// </summary>
            public delegate void PointParameterfvSGIS(GLenum pname, IntPtr parameters);
            public static PointParameterfvSGIS glPointParameterfvSGIS = (PointParameterfvSGIS)GetDelegateForExtensionMethod("glPointParameterfvSGIS", typeof(Delegates.PointParameterfvSGIS));

            #endregion PointParameterfvSGIS

            #region GetInstrumentsSGIX

            /// <summary>
            /// 
            /// </summary>
            public delegate GLint GetInstrumentsSGIX();
            public static GetInstrumentsSGIX glGetInstrumentsSGIX = (GetInstrumentsSGIX)GetDelegateForExtensionMethod("glGetInstrumentsSGIX", typeof(Delegates.GetInstrumentsSGIX));

            #endregion GetInstrumentsSGIX

            #region InstrumentsBufferSGIX

            /// <summary>
            /// 
            /// </summary>
            public delegate void InstrumentsBufferSGIX(GLsizei size, IntPtr buffer);
            public static InstrumentsBufferSGIX glInstrumentsBufferSGIX = (InstrumentsBufferSGIX)GetDelegateForExtensionMethod("glInstrumentsBufferSGIX", typeof(Delegates.InstrumentsBufferSGIX));

            #endregion InstrumentsBufferSGIX

            #region PollInstrumentsSGIX

            /// <summary>
            /// 
            /// </summary>
            public delegate GLint PollInstrumentsSGIX(IntPtr marker_p);
            public static PollInstrumentsSGIX glPollInstrumentsSGIX = (PollInstrumentsSGIX)GetDelegateForExtensionMethod("glPollInstrumentsSGIX", typeof(Delegates.PollInstrumentsSGIX));

            #endregion PollInstrumentsSGIX

            #region ReadInstrumentsSGIX

            /// <summary>
            /// 
            /// </summary>
            public delegate void ReadInstrumentsSGIX(GLint marker);
            public static ReadInstrumentsSGIX glReadInstrumentsSGIX = (ReadInstrumentsSGIX)GetDelegateForExtensionMethod("glReadInstrumentsSGIX", typeof(Delegates.ReadInstrumentsSGIX));

            #endregion ReadInstrumentsSGIX

            #region StartInstrumentsSGIX

            /// <summary>
            /// 
            /// </summary>
            public delegate void StartInstrumentsSGIX();
            public static StartInstrumentsSGIX glStartInstrumentsSGIX = (StartInstrumentsSGIX)GetDelegateForExtensionMethod("glStartInstrumentsSGIX", typeof(Delegates.StartInstrumentsSGIX));

            #endregion StartInstrumentsSGIX

            #region StopInstrumentsSGIX

            /// <summary>
            /// 
            /// </summary>
            public delegate void StopInstrumentsSGIX(GLint marker);
            public static StopInstrumentsSGIX glStopInstrumentsSGIX = (StopInstrumentsSGIX)GetDelegateForExtensionMethod("glStopInstrumentsSGIX", typeof(Delegates.StopInstrumentsSGIX));

            #endregion StopInstrumentsSGIX

            #region FrameZoomSGIX

            /// <summary>
            /// 
            /// </summary>
            public delegate void FrameZoomSGIX(GLint factor);
            public static FrameZoomSGIX glFrameZoomSGIX = (FrameZoomSGIX)GetDelegateForExtensionMethod("glFrameZoomSGIX", typeof(Delegates.FrameZoomSGIX));

            #endregion FrameZoomSGIX

            #region TagSampleBufferSGIX

            /// <summary>
            /// 
            /// </summary>
            public delegate void TagSampleBufferSGIX();
            public static TagSampleBufferSGIX glTagSampleBufferSGIX = (TagSampleBufferSGIX)GetDelegateForExtensionMethod("glTagSampleBufferSGIX", typeof(Delegates.TagSampleBufferSGIX));

            #endregion TagSampleBufferSGIX

            #region DeformationMap3dSGIX

            /// <summary>
            /// 
            /// </summary>
            public delegate void DeformationMap3dSGIX(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, IntPtr points);
            public static DeformationMap3dSGIX glDeformationMap3dSGIX = (DeformationMap3dSGIX)GetDelegateForExtensionMethod("glDeformationMap3dSGIX", typeof(Delegates.DeformationMap3dSGIX));

            #endregion DeformationMap3dSGIX

            #region DeformationMap3fSGIX

            /// <summary>
            /// 
            /// </summary>
            public delegate void DeformationMap3fSGIX(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, IntPtr points);
            public static DeformationMap3fSGIX glDeformationMap3fSGIX = (DeformationMap3fSGIX)GetDelegateForExtensionMethod("glDeformationMap3fSGIX", typeof(Delegates.DeformationMap3fSGIX));

            #endregion DeformationMap3fSGIX

            #region DeformSGIX

            /// <summary>
            /// 
            /// </summary>
            public delegate void DeformSGIX(GLbitfield mask);
            public static DeformSGIX glDeformSGIX = (DeformSGIX)GetDelegateForExtensionMethod("glDeformSGIX", typeof(Delegates.DeformSGIX));

            #endregion DeformSGIX

            #region LoadIdentityDeformationMapSGIX

            /// <summary>
            /// 
            /// </summary>
            public delegate void LoadIdentityDeformationMapSGIX(GLbitfield mask);
            public static LoadIdentityDeformationMapSGIX glLoadIdentityDeformationMapSGIX = (LoadIdentityDeformationMapSGIX)GetDelegateForExtensionMethod("glLoadIdentityDeformationMapSGIX", typeof(Delegates.LoadIdentityDeformationMapSGIX));

            #endregion LoadIdentityDeformationMapSGIX

            #region ReferencePlaneSGIX

            /// <summary>
            /// 
            /// </summary>
            public delegate void ReferencePlaneSGIX(IntPtr equation);
            public static ReferencePlaneSGIX glReferencePlaneSGIX = (ReferencePlaneSGIX)GetDelegateForExtensionMethod("glReferencePlaneSGIX", typeof(Delegates.ReferencePlaneSGIX));

            #endregion ReferencePlaneSGIX

            #region FlushRasterSGIX

            /// <summary>
            /// 
            /// </summary>
            public delegate void FlushRasterSGIX();
            public static FlushRasterSGIX glFlushRasterSGIX = (FlushRasterSGIX)GetDelegateForExtensionMethod("glFlushRasterSGIX", typeof(Delegates.FlushRasterSGIX));

            #endregion FlushRasterSGIX

            #region FogFuncSGIS

            /// <summary>
            /// 
            /// </summary>
            public delegate void FogFuncSGIS(GLsizei n, IntPtr points);
            public static FogFuncSGIS glFogFuncSGIS = (FogFuncSGIS)GetDelegateForExtensionMethod("glFogFuncSGIS", typeof(Delegates.FogFuncSGIS));

            #endregion FogFuncSGIS

            #region GetFogFuncSGIS

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetFogFuncSGIS(IntPtr points);
            public static GetFogFuncSGIS glGetFogFuncSGIS = (GetFogFuncSGIS)GetDelegateForExtensionMethod("glGetFogFuncSGIS", typeof(Delegates.GetFogFuncSGIS));

            #endregion GetFogFuncSGIS

            #region ImageTransformParameteriHP

            /// <summary>
            /// 
            /// </summary>
            public delegate void ImageTransformParameteriHP(GLenum target, GLenum pname, GLint param);
            public static ImageTransformParameteriHP glImageTransformParameteriHP = (ImageTransformParameteriHP)GetDelegateForExtensionMethod("glImageTransformParameteriHP", typeof(Delegates.ImageTransformParameteriHP));

            #endregion ImageTransformParameteriHP

            #region ImageTransformParameterfHP

            /// <summary>
            /// 
            /// </summary>
            public delegate void ImageTransformParameterfHP(GLenum target, GLenum pname, GLfloat param);
            public static ImageTransformParameterfHP glImageTransformParameterfHP = (ImageTransformParameterfHP)GetDelegateForExtensionMethod("glImageTransformParameterfHP", typeof(Delegates.ImageTransformParameterfHP));

            #endregion ImageTransformParameterfHP

            #region ImageTransformParameterivHP

            /// <summary>
            /// 
            /// </summary>
            public delegate void ImageTransformParameterivHP(GLenum target, GLenum pname, IntPtr parameters);
            public static ImageTransformParameterivHP glImageTransformParameterivHP = (ImageTransformParameterivHP)GetDelegateForExtensionMethod("glImageTransformParameterivHP", typeof(Delegates.ImageTransformParameterivHP));

            #endregion ImageTransformParameterivHP

            #region ImageTransformParameterfvHP

            /// <summary>
            /// 
            /// </summary>
            public delegate void ImageTransformParameterfvHP(GLenum target, GLenum pname, IntPtr parameters);
            public static ImageTransformParameterfvHP glImageTransformParameterfvHP = (ImageTransformParameterfvHP)GetDelegateForExtensionMethod("glImageTransformParameterfvHP", typeof(Delegates.ImageTransformParameterfvHP));

            #endregion ImageTransformParameterfvHP

            #region GetImageTransformParameterivHP

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetImageTransformParameterivHP(GLenum target, GLenum pname, IntPtr parameters);
            public static GetImageTransformParameterivHP glGetImageTransformParameterivHP = (GetImageTransformParameterivHP)GetDelegateForExtensionMethod("glGetImageTransformParameterivHP", typeof(Delegates.GetImageTransformParameterivHP));

            #endregion GetImageTransformParameterivHP

            #region GetImageTransformParameterfvHP

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetImageTransformParameterfvHP(GLenum target, GLenum pname, IntPtr parameters);
            public static GetImageTransformParameterfvHP glGetImageTransformParameterfvHP = (GetImageTransformParameterfvHP)GetDelegateForExtensionMethod("glGetImageTransformParameterfvHP", typeof(Delegates.GetImageTransformParameterfvHP));

            #endregion GetImageTransformParameterfvHP

            #region ColorSubTableEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void ColorSubTableEXT(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, IntPtr data);
            public static ColorSubTableEXT glColorSubTableEXT = (ColorSubTableEXT)GetDelegateForExtensionMethod("glColorSubTableEXT", typeof(Delegates.ColorSubTableEXT));

            #endregion ColorSubTableEXT

            #region CopyColorSubTableEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void CopyColorSubTableEXT(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width);
            public static CopyColorSubTableEXT glCopyColorSubTableEXT = (CopyColorSubTableEXT)GetDelegateForExtensionMethod("glCopyColorSubTableEXT", typeof(Delegates.CopyColorSubTableEXT));

            #endregion CopyColorSubTableEXT

            #region HintPGI

            /// <summary>
            /// 
            /// </summary>
            public delegate void HintPGI(GLenum target, GLint mode);
            public static HintPGI glHintPGI = (HintPGI)GetDelegateForExtensionMethod("glHintPGI", typeof(Delegates.HintPGI));

            #endregion HintPGI

            #region ColorTableEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void ColorTableEXT(GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, IntPtr table);
            public static ColorTableEXT glColorTableEXT = (ColorTableEXT)GetDelegateForExtensionMethod("glColorTableEXT", typeof(Delegates.ColorTableEXT));

            #endregion ColorTableEXT

            #region GetColorTableEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetColorTableEXT(GLenum target, GLenum format, GLenum type, IntPtr data);
            public static GetColorTableEXT glGetColorTableEXT = (GetColorTableEXT)GetDelegateForExtensionMethod("glGetColorTableEXT", typeof(Delegates.GetColorTableEXT));

            #endregion GetColorTableEXT

            #region GetColorTableParameterivEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetColorTableParameterivEXT(GLenum target, GLenum pname, IntPtr parameters);
            public static GetColorTableParameterivEXT glGetColorTableParameterivEXT = (GetColorTableParameterivEXT)GetDelegateForExtensionMethod("glGetColorTableParameterivEXT", typeof(Delegates.GetColorTableParameterivEXT));

            #endregion GetColorTableParameterivEXT

            #region GetColorTableParameterfvEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetColorTableParameterfvEXT(GLenum target, GLenum pname, IntPtr parameters);
            public static GetColorTableParameterfvEXT glGetColorTableParameterfvEXT = (GetColorTableParameterfvEXT)GetDelegateForExtensionMethod("glGetColorTableParameterfvEXT", typeof(Delegates.GetColorTableParameterfvEXT));

            #endregion GetColorTableParameterfvEXT

            #region GetListParameterfvSGIX

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetListParameterfvSGIX(GLuint list, GLenum pname, IntPtr parameters);
            public static GetListParameterfvSGIX glGetListParameterfvSGIX = (GetListParameterfvSGIX)GetDelegateForExtensionMethod("glGetListParameterfvSGIX", typeof(Delegates.GetListParameterfvSGIX));

            #endregion GetListParameterfvSGIX

            #region GetListParameterivSGIX

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetListParameterivSGIX(GLuint list, GLenum pname, IntPtr parameters);
            public static GetListParameterivSGIX glGetListParameterivSGIX = (GetListParameterivSGIX)GetDelegateForExtensionMethod("glGetListParameterivSGIX", typeof(Delegates.GetListParameterivSGIX));

            #endregion GetListParameterivSGIX

            #region ListParameterfSGIX

            /// <summary>
            /// 
            /// </summary>
            public delegate void ListParameterfSGIX(GLuint list, GLenum pname, GLfloat param);
            public static ListParameterfSGIX glListParameterfSGIX = (ListParameterfSGIX)GetDelegateForExtensionMethod("glListParameterfSGIX", typeof(Delegates.ListParameterfSGIX));

            #endregion ListParameterfSGIX

            #region ListParameterfvSGIX

            /// <summary>
            /// 
            /// </summary>
            public delegate void ListParameterfvSGIX(GLuint list, GLenum pname, IntPtr parameters);
            public static ListParameterfvSGIX glListParameterfvSGIX = (ListParameterfvSGIX)GetDelegateForExtensionMethod("glListParameterfvSGIX", typeof(Delegates.ListParameterfvSGIX));

            #endregion ListParameterfvSGIX

            #region ListParameteriSGIX

            /// <summary>
            /// 
            /// </summary>
            public delegate void ListParameteriSGIX(GLuint list, GLenum pname, GLint param);
            public static ListParameteriSGIX glListParameteriSGIX = (ListParameteriSGIX)GetDelegateForExtensionMethod("glListParameteriSGIX", typeof(Delegates.ListParameteriSGIX));

            #endregion ListParameteriSGIX

            #region ListParameterivSGIX

            /// <summary>
            /// 
            /// </summary>
            public delegate void ListParameterivSGIX(GLuint list, GLenum pname, IntPtr parameters);
            public static ListParameterivSGIX glListParameterivSGIX = (ListParameterivSGIX)GetDelegateForExtensionMethod("glListParameterivSGIX", typeof(Delegates.ListParameterivSGIX));

            #endregion ListParameterivSGIX

            #region IndexMaterialEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void IndexMaterialEXT(GLenum face, GLenum mode);
            public static IndexMaterialEXT glIndexMaterialEXT = (IndexMaterialEXT)GetDelegateForExtensionMethod("glIndexMaterialEXT", typeof(Delegates.IndexMaterialEXT));

            #endregion IndexMaterialEXT

            #region IndexFuncEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void IndexFuncEXT(GLenum func, GLclampf reference);
            public static IndexFuncEXT glIndexFuncEXT = (IndexFuncEXT)GetDelegateForExtensionMethod("glIndexFuncEXT", typeof(Delegates.IndexFuncEXT));

            #endregion IndexFuncEXT

            #region LockArraysEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void LockArraysEXT(GLint first, GLsizei count);
            public static LockArraysEXT glLockArraysEXT = (LockArraysEXT)GetDelegateForExtensionMethod("glLockArraysEXT", typeof(Delegates.LockArraysEXT));

            #endregion LockArraysEXT

            #region UnlockArraysEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void UnlockArraysEXT();
            public static UnlockArraysEXT glUnlockArraysEXT = (UnlockArraysEXT)GetDelegateForExtensionMethod("glUnlockArraysEXT", typeof(Delegates.UnlockArraysEXT));

            #endregion UnlockArraysEXT

            #region CullParameterdvEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void CullParameterdvEXT(GLenum pname, IntPtr parameters);
            public static CullParameterdvEXT glCullParameterdvEXT = (CullParameterdvEXT)GetDelegateForExtensionMethod("glCullParameterdvEXT", typeof(Delegates.CullParameterdvEXT));

            #endregion CullParameterdvEXT

            #region CullParameterfvEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void CullParameterfvEXT(GLenum pname, IntPtr parameters);
            public static CullParameterfvEXT glCullParameterfvEXT = (CullParameterfvEXT)GetDelegateForExtensionMethod("glCullParameterfvEXT", typeof(Delegates.CullParameterfvEXT));

            #endregion CullParameterfvEXT

            #region FragmentColorMaterialSGIX

            /// <summary>
            /// 
            /// </summary>
            public delegate void FragmentColorMaterialSGIX(GLenum face, GLenum mode);
            public static FragmentColorMaterialSGIX glFragmentColorMaterialSGIX = (FragmentColorMaterialSGIX)GetDelegateForExtensionMethod("glFragmentColorMaterialSGIX", typeof(Delegates.FragmentColorMaterialSGIX));

            #endregion FragmentColorMaterialSGIX

            #region FragmentLightfSGIX

            /// <summary>
            /// 
            /// </summary>
            public delegate void FragmentLightfSGIX(GLenum light, GLenum pname, GLfloat param);
            public static FragmentLightfSGIX glFragmentLightfSGIX = (FragmentLightfSGIX)GetDelegateForExtensionMethod("glFragmentLightfSGIX", typeof(Delegates.FragmentLightfSGIX));

            #endregion FragmentLightfSGIX

            #region FragmentLightfvSGIX

            /// <summary>
            /// 
            /// </summary>
            public delegate void FragmentLightfvSGIX(GLenum light, GLenum pname, IntPtr parameters);
            public static FragmentLightfvSGIX glFragmentLightfvSGIX = (FragmentLightfvSGIX)GetDelegateForExtensionMethod("glFragmentLightfvSGIX", typeof(Delegates.FragmentLightfvSGIX));

            #endregion FragmentLightfvSGIX

            #region FragmentLightiSGIX

            /// <summary>
            /// 
            /// </summary>
            public delegate void FragmentLightiSGIX(GLenum light, GLenum pname, GLint param);
            public static FragmentLightiSGIX glFragmentLightiSGIX = (FragmentLightiSGIX)GetDelegateForExtensionMethod("glFragmentLightiSGIX", typeof(Delegates.FragmentLightiSGIX));

            #endregion FragmentLightiSGIX

            #region FragmentLightivSGIX

            /// <summary>
            /// 
            /// </summary>
            public delegate void FragmentLightivSGIX(GLenum light, GLenum pname, IntPtr parameters);
            public static FragmentLightivSGIX glFragmentLightivSGIX = (FragmentLightivSGIX)GetDelegateForExtensionMethod("glFragmentLightivSGIX", typeof(Delegates.FragmentLightivSGIX));

            #endregion FragmentLightivSGIX

            #region FragmentLightModelfSGIX

            /// <summary>
            /// 
            /// </summary>
            public delegate void FragmentLightModelfSGIX(GLenum pname, GLfloat param);
            public static FragmentLightModelfSGIX glFragmentLightModelfSGIX = (FragmentLightModelfSGIX)GetDelegateForExtensionMethod("glFragmentLightModelfSGIX", typeof(Delegates.FragmentLightModelfSGIX));

            #endregion FragmentLightModelfSGIX

            #region FragmentLightModelfvSGIX

            /// <summary>
            /// 
            /// </summary>
            public delegate void FragmentLightModelfvSGIX(GLenum pname, IntPtr parameters);
            public static FragmentLightModelfvSGIX glFragmentLightModelfvSGIX = (FragmentLightModelfvSGIX)GetDelegateForExtensionMethod("glFragmentLightModelfvSGIX", typeof(Delegates.FragmentLightModelfvSGIX));

            #endregion FragmentLightModelfvSGIX

            #region FragmentLightModeliSGIX

            /// <summary>
            /// 
            /// </summary>
            public delegate void FragmentLightModeliSGIX(GLenum pname, GLint param);
            public static FragmentLightModeliSGIX glFragmentLightModeliSGIX = (FragmentLightModeliSGIX)GetDelegateForExtensionMethod("glFragmentLightModeliSGIX", typeof(Delegates.FragmentLightModeliSGIX));

            #endregion FragmentLightModeliSGIX

            #region FragmentLightModelivSGIX

            /// <summary>
            /// 
            /// </summary>
            public delegate void FragmentLightModelivSGIX(GLenum pname, IntPtr parameters);
            public static FragmentLightModelivSGIX glFragmentLightModelivSGIX = (FragmentLightModelivSGIX)GetDelegateForExtensionMethod("glFragmentLightModelivSGIX", typeof(Delegates.FragmentLightModelivSGIX));

            #endregion FragmentLightModelivSGIX

            #region FragmentMaterialfSGIX

            /// <summary>
            /// 
            /// </summary>
            public delegate void FragmentMaterialfSGIX(GLenum face, GLenum pname, GLfloat param);
            public static FragmentMaterialfSGIX glFragmentMaterialfSGIX = (FragmentMaterialfSGIX)GetDelegateForExtensionMethod("glFragmentMaterialfSGIX", typeof(Delegates.FragmentMaterialfSGIX));

            #endregion FragmentMaterialfSGIX

            #region FragmentMaterialfvSGIX

            /// <summary>
            /// 
            /// </summary>
            public delegate void FragmentMaterialfvSGIX(GLenum face, GLenum pname, IntPtr parameters);
            public static FragmentMaterialfvSGIX glFragmentMaterialfvSGIX = (FragmentMaterialfvSGIX)GetDelegateForExtensionMethod("glFragmentMaterialfvSGIX", typeof(Delegates.FragmentMaterialfvSGIX));

            #endregion FragmentMaterialfvSGIX

            #region FragmentMaterialiSGIX

            /// <summary>
            /// 
            /// </summary>
            public delegate void FragmentMaterialiSGIX(GLenum face, GLenum pname, GLint param);
            public static FragmentMaterialiSGIX glFragmentMaterialiSGIX = (FragmentMaterialiSGIX)GetDelegateForExtensionMethod("glFragmentMaterialiSGIX", typeof(Delegates.FragmentMaterialiSGIX));

            #endregion FragmentMaterialiSGIX

            #region FragmentMaterialivSGIX

            /// <summary>
            /// 
            /// </summary>
            public delegate void FragmentMaterialivSGIX(GLenum face, GLenum pname, IntPtr parameters);
            public static FragmentMaterialivSGIX glFragmentMaterialivSGIX = (FragmentMaterialivSGIX)GetDelegateForExtensionMethod("glFragmentMaterialivSGIX", typeof(Delegates.FragmentMaterialivSGIX));

            #endregion FragmentMaterialivSGIX

            #region GetFragmentLightfvSGIX

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetFragmentLightfvSGIX(GLenum light, GLenum pname, IntPtr parameters);
            public static GetFragmentLightfvSGIX glGetFragmentLightfvSGIX = (GetFragmentLightfvSGIX)GetDelegateForExtensionMethod("glGetFragmentLightfvSGIX", typeof(Delegates.GetFragmentLightfvSGIX));

            #endregion GetFragmentLightfvSGIX

            #region GetFragmentLightivSGIX

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetFragmentLightivSGIX(GLenum light, GLenum pname, IntPtr parameters);
            public static GetFragmentLightivSGIX glGetFragmentLightivSGIX = (GetFragmentLightivSGIX)GetDelegateForExtensionMethod("glGetFragmentLightivSGIX", typeof(Delegates.GetFragmentLightivSGIX));

            #endregion GetFragmentLightivSGIX

            #region GetFragmentMaterialfvSGIX

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetFragmentMaterialfvSGIX(GLenum face, GLenum pname, IntPtr parameters);
            public static GetFragmentMaterialfvSGIX glGetFragmentMaterialfvSGIX = (GetFragmentMaterialfvSGIX)GetDelegateForExtensionMethod("glGetFragmentMaterialfvSGIX", typeof(Delegates.GetFragmentMaterialfvSGIX));

            #endregion GetFragmentMaterialfvSGIX

            #region GetFragmentMaterialivSGIX

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetFragmentMaterialivSGIX(GLenum face, GLenum pname, IntPtr parameters);
            public static GetFragmentMaterialivSGIX glGetFragmentMaterialivSGIX = (GetFragmentMaterialivSGIX)GetDelegateForExtensionMethod("glGetFragmentMaterialivSGIX", typeof(Delegates.GetFragmentMaterialivSGIX));

            #endregion GetFragmentMaterialivSGIX

            #region LightEnviSGIX

            /// <summary>
            /// 
            /// </summary>
            public delegate void LightEnviSGIX(GLenum pname, GLint param);
            public static LightEnviSGIX glLightEnviSGIX = (LightEnviSGIX)GetDelegateForExtensionMethod("glLightEnviSGIX", typeof(Delegates.LightEnviSGIX));

            #endregion LightEnviSGIX

            #region DrawRangeElementsEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void DrawRangeElementsEXT(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, IntPtr indices);
            public static DrawRangeElementsEXT glDrawRangeElementsEXT = (DrawRangeElementsEXT)GetDelegateForExtensionMethod("glDrawRangeElementsEXT", typeof(Delegates.DrawRangeElementsEXT));

            #endregion DrawRangeElementsEXT

            #region ApplyTextureEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void ApplyTextureEXT(GLenum mode);
            public static ApplyTextureEXT glApplyTextureEXT = (ApplyTextureEXT)GetDelegateForExtensionMethod("glApplyTextureEXT", typeof(Delegates.ApplyTextureEXT));

            #endregion ApplyTextureEXT

            #region TextureLightEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void TextureLightEXT(GLenum pname);
            public static TextureLightEXT glTextureLightEXT = (TextureLightEXT)GetDelegateForExtensionMethod("glTextureLightEXT", typeof(Delegates.TextureLightEXT));

            #endregion TextureLightEXT

            #region TextureMaterialEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void TextureMaterialEXT(GLenum face, GLenum mode);
            public static TextureMaterialEXT glTextureMaterialEXT = (TextureMaterialEXT)GetDelegateForExtensionMethod("glTextureMaterialEXT", typeof(Delegates.TextureMaterialEXT));

            #endregion TextureMaterialEXT

            #region AsyncMarkerSGIX

            /// <summary>
            /// 
            /// </summary>
            public delegate void AsyncMarkerSGIX(GLuint marker);
            public static AsyncMarkerSGIX glAsyncMarkerSGIX = (AsyncMarkerSGIX)GetDelegateForExtensionMethod("glAsyncMarkerSGIX", typeof(Delegates.AsyncMarkerSGIX));

            #endregion AsyncMarkerSGIX

            #region FinishAsyncSGIX

            /// <summary>
            /// 
            /// </summary>
            public delegate GLint FinishAsyncSGIX(IntPtr markerp);
            public static FinishAsyncSGIX glFinishAsyncSGIX = (FinishAsyncSGIX)GetDelegateForExtensionMethod("glFinishAsyncSGIX", typeof(Delegates.FinishAsyncSGIX));

            #endregion FinishAsyncSGIX

            #region PollAsyncSGIX

            /// <summary>
            /// 
            /// </summary>
            public delegate GLint PollAsyncSGIX(IntPtr markerp);
            public static PollAsyncSGIX glPollAsyncSGIX = (PollAsyncSGIX)GetDelegateForExtensionMethod("glPollAsyncSGIX", typeof(Delegates.PollAsyncSGIX));

            #endregion PollAsyncSGIX

            #region GenAsyncMarkersSGIX

            /// <summary>
            /// 
            /// </summary>
            public delegate GLuint GenAsyncMarkersSGIX(GLsizei range);
            public static GenAsyncMarkersSGIX glGenAsyncMarkersSGIX = (GenAsyncMarkersSGIX)GetDelegateForExtensionMethod("glGenAsyncMarkersSGIX", typeof(Delegates.GenAsyncMarkersSGIX));

            #endregion GenAsyncMarkersSGIX

            #region DeleteAsyncMarkersSGIX

            /// <summary>
            /// 
            /// </summary>
            public delegate void DeleteAsyncMarkersSGIX(GLuint marker, GLsizei range);
            public static DeleteAsyncMarkersSGIX glDeleteAsyncMarkersSGIX = (DeleteAsyncMarkersSGIX)GetDelegateForExtensionMethod("glDeleteAsyncMarkersSGIX", typeof(Delegates.DeleteAsyncMarkersSGIX));

            #endregion DeleteAsyncMarkersSGIX

            #region IsAsyncMarkerSGIX

            /// <summary>
            /// 
            /// </summary>
            public delegate GLboolean IsAsyncMarkerSGIX(GLuint marker);
            public static IsAsyncMarkerSGIX glIsAsyncMarkerSGIX = (IsAsyncMarkerSGIX)GetDelegateForExtensionMethod("glIsAsyncMarkerSGIX", typeof(Delegates.IsAsyncMarkerSGIX));

            #endregion IsAsyncMarkerSGIX

            #region VertexPointervINTEL

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexPointervINTEL(GLint size, GLenum type, IntPtr pointer);
            public static VertexPointervINTEL glVertexPointervINTEL = (VertexPointervINTEL)GetDelegateForExtensionMethod("glVertexPointervINTEL", typeof(Delegates.VertexPointervINTEL));

            #endregion VertexPointervINTEL

            #region NormalPointervINTEL

            /// <summary>
            /// 
            /// </summary>
            public delegate void NormalPointervINTEL(GLenum type, IntPtr pointer);
            public static NormalPointervINTEL glNormalPointervINTEL = (NormalPointervINTEL)GetDelegateForExtensionMethod("glNormalPointervINTEL", typeof(Delegates.NormalPointervINTEL));

            #endregion NormalPointervINTEL

            #region ColorPointervINTEL

            /// <summary>
            /// 
            /// </summary>
            public delegate void ColorPointervINTEL(GLint size, GLenum type, IntPtr pointer);
            public static ColorPointervINTEL glColorPointervINTEL = (ColorPointervINTEL)GetDelegateForExtensionMethod("glColorPointervINTEL", typeof(Delegates.ColorPointervINTEL));

            #endregion ColorPointervINTEL

            #region TexCoordPointervINTEL

            /// <summary>
            /// 
            /// </summary>
            public delegate void TexCoordPointervINTEL(GLint size, GLenum type, IntPtr pointer);
            public static TexCoordPointervINTEL glTexCoordPointervINTEL = (TexCoordPointervINTEL)GetDelegateForExtensionMethod("glTexCoordPointervINTEL", typeof(Delegates.TexCoordPointervINTEL));

            #endregion TexCoordPointervINTEL

            #region PixelTransformParameteriEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void PixelTransformParameteriEXT(GLenum target, GLenum pname, GLint param);
            public static PixelTransformParameteriEXT glPixelTransformParameteriEXT = (PixelTransformParameteriEXT)GetDelegateForExtensionMethod("glPixelTransformParameteriEXT", typeof(Delegates.PixelTransformParameteriEXT));

            #endregion PixelTransformParameteriEXT

            #region PixelTransformParameterfEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void PixelTransformParameterfEXT(GLenum target, GLenum pname, GLfloat param);
            public static PixelTransformParameterfEXT glPixelTransformParameterfEXT = (PixelTransformParameterfEXT)GetDelegateForExtensionMethod("glPixelTransformParameterfEXT", typeof(Delegates.PixelTransformParameterfEXT));

            #endregion PixelTransformParameterfEXT

            #region PixelTransformParameterivEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void PixelTransformParameterivEXT(GLenum target, GLenum pname, IntPtr parameters);
            public static PixelTransformParameterivEXT glPixelTransformParameterivEXT = (PixelTransformParameterivEXT)GetDelegateForExtensionMethod("glPixelTransformParameterivEXT", typeof(Delegates.PixelTransformParameterivEXT));

            #endregion PixelTransformParameterivEXT

            #region PixelTransformParameterfvEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void PixelTransformParameterfvEXT(GLenum target, GLenum pname, IntPtr parameters);
            public static PixelTransformParameterfvEXT glPixelTransformParameterfvEXT = (PixelTransformParameterfvEXT)GetDelegateForExtensionMethod("glPixelTransformParameterfvEXT", typeof(Delegates.PixelTransformParameterfvEXT));

            #endregion PixelTransformParameterfvEXT

            #region SecondaryColor3bEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void SecondaryColor3bEXT(GLbyte red, GLbyte green, GLbyte blue);
            public static SecondaryColor3bEXT glSecondaryColor3bEXT = (SecondaryColor3bEXT)GetDelegateForExtensionMethod("glSecondaryColor3bEXT", typeof(Delegates.SecondaryColor3bEXT));

            #endregion SecondaryColor3bEXT

            #region SecondaryColor3bvEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void SecondaryColor3bvEXT(IntPtr v);
            public static SecondaryColor3bvEXT glSecondaryColor3bvEXT = (SecondaryColor3bvEXT)GetDelegateForExtensionMethod("glSecondaryColor3bvEXT", typeof(Delegates.SecondaryColor3bvEXT));

            #endregion SecondaryColor3bvEXT

            #region SecondaryColor3dEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void SecondaryColor3dEXT(GLdouble red, GLdouble green, GLdouble blue);
            public static SecondaryColor3dEXT glSecondaryColor3dEXT = (SecondaryColor3dEXT)GetDelegateForExtensionMethod("glSecondaryColor3dEXT", typeof(Delegates.SecondaryColor3dEXT));

            #endregion SecondaryColor3dEXT

            #region SecondaryColor3dvEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void SecondaryColor3dvEXT(IntPtr v);
            public static SecondaryColor3dvEXT glSecondaryColor3dvEXT = (SecondaryColor3dvEXT)GetDelegateForExtensionMethod("glSecondaryColor3dvEXT", typeof(Delegates.SecondaryColor3dvEXT));

            #endregion SecondaryColor3dvEXT

            #region SecondaryColor3fEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void SecondaryColor3fEXT(GLfloat red, GLfloat green, GLfloat blue);
            public static SecondaryColor3fEXT glSecondaryColor3fEXT = (SecondaryColor3fEXT)GetDelegateForExtensionMethod("glSecondaryColor3fEXT", typeof(Delegates.SecondaryColor3fEXT));

            #endregion SecondaryColor3fEXT

            #region SecondaryColor3fvEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void SecondaryColor3fvEXT(IntPtr v);
            public static SecondaryColor3fvEXT glSecondaryColor3fvEXT = (SecondaryColor3fvEXT)GetDelegateForExtensionMethod("glSecondaryColor3fvEXT", typeof(Delegates.SecondaryColor3fvEXT));

            #endregion SecondaryColor3fvEXT

            #region SecondaryColor3iEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void SecondaryColor3iEXT(GLint red, GLint green, GLint blue);
            public static SecondaryColor3iEXT glSecondaryColor3iEXT = (SecondaryColor3iEXT)GetDelegateForExtensionMethod("glSecondaryColor3iEXT", typeof(Delegates.SecondaryColor3iEXT));

            #endregion SecondaryColor3iEXT

            #region SecondaryColor3ivEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void SecondaryColor3ivEXT(IntPtr v);
            public static SecondaryColor3ivEXT glSecondaryColor3ivEXT = (SecondaryColor3ivEXT)GetDelegateForExtensionMethod("glSecondaryColor3ivEXT", typeof(Delegates.SecondaryColor3ivEXT));

            #endregion SecondaryColor3ivEXT

            #region SecondaryColor3sEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void SecondaryColor3sEXT(GLshort red, GLshort green, GLshort blue);
            public static SecondaryColor3sEXT glSecondaryColor3sEXT = (SecondaryColor3sEXT)GetDelegateForExtensionMethod("glSecondaryColor3sEXT", typeof(Delegates.SecondaryColor3sEXT));

            #endregion SecondaryColor3sEXT

            #region SecondaryColor3svEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void SecondaryColor3svEXT(IntPtr v);
            public static SecondaryColor3svEXT glSecondaryColor3svEXT = (SecondaryColor3svEXT)GetDelegateForExtensionMethod("glSecondaryColor3svEXT", typeof(Delegates.SecondaryColor3svEXT));

            #endregion SecondaryColor3svEXT

            #region SecondaryColor3ubEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void SecondaryColor3ubEXT(GLubyte red, GLubyte green, GLubyte blue);
            public static SecondaryColor3ubEXT glSecondaryColor3ubEXT = (SecondaryColor3ubEXT)GetDelegateForExtensionMethod("glSecondaryColor3ubEXT", typeof(Delegates.SecondaryColor3ubEXT));

            #endregion SecondaryColor3ubEXT

            #region SecondaryColor3ubvEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void SecondaryColor3ubvEXT(IntPtr v);
            public static SecondaryColor3ubvEXT glSecondaryColor3ubvEXT = (SecondaryColor3ubvEXT)GetDelegateForExtensionMethod("glSecondaryColor3ubvEXT", typeof(Delegates.SecondaryColor3ubvEXT));

            #endregion SecondaryColor3ubvEXT

            #region SecondaryColor3uiEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void SecondaryColor3uiEXT(GLuint red, GLuint green, GLuint blue);
            public static SecondaryColor3uiEXT glSecondaryColor3uiEXT = (SecondaryColor3uiEXT)GetDelegateForExtensionMethod("glSecondaryColor3uiEXT", typeof(Delegates.SecondaryColor3uiEXT));

            #endregion SecondaryColor3uiEXT

            #region SecondaryColor3uivEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void SecondaryColor3uivEXT(IntPtr v);
            public static SecondaryColor3uivEXT glSecondaryColor3uivEXT = (SecondaryColor3uivEXT)GetDelegateForExtensionMethod("glSecondaryColor3uivEXT", typeof(Delegates.SecondaryColor3uivEXT));

            #endregion SecondaryColor3uivEXT

            #region SecondaryColor3usEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void SecondaryColor3usEXT(GLushort red, GLushort green, GLushort blue);
            public static SecondaryColor3usEXT glSecondaryColor3usEXT = (SecondaryColor3usEXT)GetDelegateForExtensionMethod("glSecondaryColor3usEXT", typeof(Delegates.SecondaryColor3usEXT));

            #endregion SecondaryColor3usEXT

            #region SecondaryColor3usvEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void SecondaryColor3usvEXT(IntPtr v);
            public static SecondaryColor3usvEXT glSecondaryColor3usvEXT = (SecondaryColor3usvEXT)GetDelegateForExtensionMethod("glSecondaryColor3usvEXT", typeof(Delegates.SecondaryColor3usvEXT));

            #endregion SecondaryColor3usvEXT

            #region SecondaryColorPointerEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void SecondaryColorPointerEXT(GLint size, GLenum type, GLsizei stride, IntPtr pointer);
            public static SecondaryColorPointerEXT glSecondaryColorPointerEXT = (SecondaryColorPointerEXT)GetDelegateForExtensionMethod("glSecondaryColorPointerEXT", typeof(Delegates.SecondaryColorPointerEXT));

            #endregion SecondaryColorPointerEXT

            #region TextureNormalEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void TextureNormalEXT(GLenum mode);
            public static TextureNormalEXT glTextureNormalEXT = (TextureNormalEXT)GetDelegateForExtensionMethod("glTextureNormalEXT", typeof(Delegates.TextureNormalEXT));

            #endregion TextureNormalEXT

            #region MultiDrawArraysEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void MultiDrawArraysEXT(GLenum mode, IntPtr first, IntPtr count, GLsizei primcount);
            public static MultiDrawArraysEXT glMultiDrawArraysEXT = (MultiDrawArraysEXT)GetDelegateForExtensionMethod("glMultiDrawArraysEXT", typeof(Delegates.MultiDrawArraysEXT));

            #endregion MultiDrawArraysEXT

            #region MultiDrawElementsEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void MultiDrawElementsEXT(GLenum mode, IntPtr count, GLenum type, IntPtr indices, GLsizei primcount);
            public static MultiDrawElementsEXT glMultiDrawElementsEXT = (MultiDrawElementsEXT)GetDelegateForExtensionMethod("glMultiDrawElementsEXT", typeof(Delegates.MultiDrawElementsEXT));

            #endregion MultiDrawElementsEXT

            #region FogCoordfEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void FogCoordfEXT(GLfloat coord);
            public static FogCoordfEXT glFogCoordfEXT = (FogCoordfEXT)GetDelegateForExtensionMethod("glFogCoordfEXT", typeof(Delegates.FogCoordfEXT));

            #endregion FogCoordfEXT

            #region FogCoordfvEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void FogCoordfvEXT(IntPtr coord);
            public static FogCoordfvEXT glFogCoordfvEXT = (FogCoordfvEXT)GetDelegateForExtensionMethod("glFogCoordfvEXT", typeof(Delegates.FogCoordfvEXT));

            #endregion FogCoordfvEXT

            #region FogCoorddEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void FogCoorddEXT(GLdouble coord);
            public static FogCoorddEXT glFogCoorddEXT = (FogCoorddEXT)GetDelegateForExtensionMethod("glFogCoorddEXT", typeof(Delegates.FogCoorddEXT));

            #endregion FogCoorddEXT

            #region FogCoorddvEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void FogCoorddvEXT(IntPtr coord);
            public static FogCoorddvEXT glFogCoorddvEXT = (FogCoorddvEXT)GetDelegateForExtensionMethod("glFogCoorddvEXT", typeof(Delegates.FogCoorddvEXT));

            #endregion FogCoorddvEXT

            #region FogCoordPointerEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void FogCoordPointerEXT(GLenum type, GLsizei stride, IntPtr pointer);
            public static FogCoordPointerEXT glFogCoordPointerEXT = (FogCoordPointerEXT)GetDelegateForExtensionMethod("glFogCoordPointerEXT", typeof(Delegates.FogCoordPointerEXT));

            #endregion FogCoordPointerEXT

            #region Tangent3bEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void Tangent3bEXT(GLbyte tx, GLbyte ty, GLbyte tz);
            public static Tangent3bEXT glTangent3bEXT = (Tangent3bEXT)GetDelegateForExtensionMethod("glTangent3bEXT", typeof(Delegates.Tangent3bEXT));

            #endregion Tangent3bEXT

            #region Tangent3bvEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void Tangent3bvEXT(IntPtr v);
            public static Tangent3bvEXT glTangent3bvEXT = (Tangent3bvEXT)GetDelegateForExtensionMethod("glTangent3bvEXT", typeof(Delegates.Tangent3bvEXT));

            #endregion Tangent3bvEXT

            #region Tangent3dEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void Tangent3dEXT(GLdouble tx, GLdouble ty, GLdouble tz);
            public static Tangent3dEXT glTangent3dEXT = (Tangent3dEXT)GetDelegateForExtensionMethod("glTangent3dEXT", typeof(Delegates.Tangent3dEXT));

            #endregion Tangent3dEXT

            #region Tangent3dvEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void Tangent3dvEXT(IntPtr v);
            public static Tangent3dvEXT glTangent3dvEXT = (Tangent3dvEXT)GetDelegateForExtensionMethod("glTangent3dvEXT", typeof(Delegates.Tangent3dvEXT));

            #endregion Tangent3dvEXT

            #region Tangent3fEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void Tangent3fEXT(GLfloat tx, GLfloat ty, GLfloat tz);
            public static Tangent3fEXT glTangent3fEXT = (Tangent3fEXT)GetDelegateForExtensionMethod("glTangent3fEXT", typeof(Delegates.Tangent3fEXT));

            #endregion Tangent3fEXT

            #region Tangent3fvEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void Tangent3fvEXT(IntPtr v);
            public static Tangent3fvEXT glTangent3fvEXT = (Tangent3fvEXT)GetDelegateForExtensionMethod("glTangent3fvEXT", typeof(Delegates.Tangent3fvEXT));

            #endregion Tangent3fvEXT

            #region Tangent3iEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void Tangent3iEXT(GLint tx, GLint ty, GLint tz);
            public static Tangent3iEXT glTangent3iEXT = (Tangent3iEXT)GetDelegateForExtensionMethod("glTangent3iEXT", typeof(Delegates.Tangent3iEXT));

            #endregion Tangent3iEXT

            #region Tangent3ivEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void Tangent3ivEXT(IntPtr v);
            public static Tangent3ivEXT glTangent3ivEXT = (Tangent3ivEXT)GetDelegateForExtensionMethod("glTangent3ivEXT", typeof(Delegates.Tangent3ivEXT));

            #endregion Tangent3ivEXT

            #region Tangent3sEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void Tangent3sEXT(GLshort tx, GLshort ty, GLshort tz);
            public static Tangent3sEXT glTangent3sEXT = (Tangent3sEXT)GetDelegateForExtensionMethod("glTangent3sEXT", typeof(Delegates.Tangent3sEXT));

            #endregion Tangent3sEXT

            #region Tangent3svEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void Tangent3svEXT(IntPtr v);
            public static Tangent3svEXT glTangent3svEXT = (Tangent3svEXT)GetDelegateForExtensionMethod("glTangent3svEXT", typeof(Delegates.Tangent3svEXT));

            #endregion Tangent3svEXT

            #region Binormal3bEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void Binormal3bEXT(GLbyte bx, GLbyte by, GLbyte bz);
            public static Binormal3bEXT glBinormal3bEXT = (Binormal3bEXT)GetDelegateForExtensionMethod("glBinormal3bEXT", typeof(Delegates.Binormal3bEXT));

            #endregion Binormal3bEXT

            #region Binormal3bvEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void Binormal3bvEXT(IntPtr v);
            public static Binormal3bvEXT glBinormal3bvEXT = (Binormal3bvEXT)GetDelegateForExtensionMethod("glBinormal3bvEXT", typeof(Delegates.Binormal3bvEXT));

            #endregion Binormal3bvEXT

            #region Binormal3dEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void Binormal3dEXT(GLdouble bx, GLdouble by, GLdouble bz);
            public static Binormal3dEXT glBinormal3dEXT = (Binormal3dEXT)GetDelegateForExtensionMethod("glBinormal3dEXT", typeof(Delegates.Binormal3dEXT));

            #endregion Binormal3dEXT

            #region Binormal3dvEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void Binormal3dvEXT(IntPtr v);
            public static Binormal3dvEXT glBinormal3dvEXT = (Binormal3dvEXT)GetDelegateForExtensionMethod("glBinormal3dvEXT", typeof(Delegates.Binormal3dvEXT));

            #endregion Binormal3dvEXT

            #region Binormal3fEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void Binormal3fEXT(GLfloat bx, GLfloat by, GLfloat bz);
            public static Binormal3fEXT glBinormal3fEXT = (Binormal3fEXT)GetDelegateForExtensionMethod("glBinormal3fEXT", typeof(Delegates.Binormal3fEXT));

            #endregion Binormal3fEXT

            #region Binormal3fvEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void Binormal3fvEXT(IntPtr v);
            public static Binormal3fvEXT glBinormal3fvEXT = (Binormal3fvEXT)GetDelegateForExtensionMethod("glBinormal3fvEXT", typeof(Delegates.Binormal3fvEXT));

            #endregion Binormal3fvEXT

            #region Binormal3iEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void Binormal3iEXT(GLint bx, GLint by, GLint bz);
            public static Binormal3iEXT glBinormal3iEXT = (Binormal3iEXT)GetDelegateForExtensionMethod("glBinormal3iEXT", typeof(Delegates.Binormal3iEXT));

            #endregion Binormal3iEXT

            #region Binormal3ivEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void Binormal3ivEXT(IntPtr v);
            public static Binormal3ivEXT glBinormal3ivEXT = (Binormal3ivEXT)GetDelegateForExtensionMethod("glBinormal3ivEXT", typeof(Delegates.Binormal3ivEXT));

            #endregion Binormal3ivEXT

            #region Binormal3sEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void Binormal3sEXT(GLshort bx, GLshort by, GLshort bz);
            public static Binormal3sEXT glBinormal3sEXT = (Binormal3sEXT)GetDelegateForExtensionMethod("glBinormal3sEXT", typeof(Delegates.Binormal3sEXT));

            #endregion Binormal3sEXT

            #region Binormal3svEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void Binormal3svEXT(IntPtr v);
            public static Binormal3svEXT glBinormal3svEXT = (Binormal3svEXT)GetDelegateForExtensionMethod("glBinormal3svEXT", typeof(Delegates.Binormal3svEXT));

            #endregion Binormal3svEXT

            #region TangentPointerEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void TangentPointerEXT(GLenum type, GLsizei stride, IntPtr pointer);
            public static TangentPointerEXT glTangentPointerEXT = (TangentPointerEXT)GetDelegateForExtensionMethod("glTangentPointerEXT", typeof(Delegates.TangentPointerEXT));

            #endregion TangentPointerEXT

            #region BinormalPointerEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void BinormalPointerEXT(GLenum type, GLsizei stride, IntPtr pointer);
            public static BinormalPointerEXT glBinormalPointerEXT = (BinormalPointerEXT)GetDelegateForExtensionMethod("glBinormalPointerEXT", typeof(Delegates.BinormalPointerEXT));

            #endregion BinormalPointerEXT

            #region FinishTextureSUNX

            /// <summary>
            /// 
            /// </summary>
            public delegate void FinishTextureSUNX();
            public static FinishTextureSUNX glFinishTextureSUNX = (FinishTextureSUNX)GetDelegateForExtensionMethod("glFinishTextureSUNX", typeof(Delegates.FinishTextureSUNX));

            #endregion FinishTextureSUNX

            #region GlobalAlphaFactorbSUN

            /// <summary>
            /// 
            /// </summary>
            public delegate void GlobalAlphaFactorbSUN(GLbyte factor);
            public static GlobalAlphaFactorbSUN glGlobalAlphaFactorbSUN = (GlobalAlphaFactorbSUN)GetDelegateForExtensionMethod("glGlobalAlphaFactorbSUN", typeof(Delegates.GlobalAlphaFactorbSUN));

            #endregion GlobalAlphaFactorbSUN

            #region GlobalAlphaFactorsSUN

            /// <summary>
            /// 
            /// </summary>
            public delegate void GlobalAlphaFactorsSUN(GLshort factor);
            public static GlobalAlphaFactorsSUN glGlobalAlphaFactorsSUN = (GlobalAlphaFactorsSUN)GetDelegateForExtensionMethod("glGlobalAlphaFactorsSUN", typeof(Delegates.GlobalAlphaFactorsSUN));

            #endregion GlobalAlphaFactorsSUN

            #region GlobalAlphaFactoriSUN

            /// <summary>
            /// 
            /// </summary>
            public delegate void GlobalAlphaFactoriSUN(GLint factor);
            public static GlobalAlphaFactoriSUN glGlobalAlphaFactoriSUN = (GlobalAlphaFactoriSUN)GetDelegateForExtensionMethod("glGlobalAlphaFactoriSUN", typeof(Delegates.GlobalAlphaFactoriSUN));

            #endregion GlobalAlphaFactoriSUN

            #region GlobalAlphaFactorfSUN

            /// <summary>
            /// 
            /// </summary>
            public delegate void GlobalAlphaFactorfSUN(GLfloat factor);
            public static GlobalAlphaFactorfSUN glGlobalAlphaFactorfSUN = (GlobalAlphaFactorfSUN)GetDelegateForExtensionMethod("glGlobalAlphaFactorfSUN", typeof(Delegates.GlobalAlphaFactorfSUN));

            #endregion GlobalAlphaFactorfSUN

            #region GlobalAlphaFactordSUN

            /// <summary>
            /// 
            /// </summary>
            public delegate void GlobalAlphaFactordSUN(GLdouble factor);
            public static GlobalAlphaFactordSUN glGlobalAlphaFactordSUN = (GlobalAlphaFactordSUN)GetDelegateForExtensionMethod("glGlobalAlphaFactordSUN", typeof(Delegates.GlobalAlphaFactordSUN));

            #endregion GlobalAlphaFactordSUN

            #region GlobalAlphaFactorubSUN

            /// <summary>
            /// 
            /// </summary>
            public delegate void GlobalAlphaFactorubSUN(GLubyte factor);
            public static GlobalAlphaFactorubSUN glGlobalAlphaFactorubSUN = (GlobalAlphaFactorubSUN)GetDelegateForExtensionMethod("glGlobalAlphaFactorubSUN", typeof(Delegates.GlobalAlphaFactorubSUN));

            #endregion GlobalAlphaFactorubSUN

            #region GlobalAlphaFactorusSUN

            /// <summary>
            /// 
            /// </summary>
            public delegate void GlobalAlphaFactorusSUN(GLushort factor);
            public static GlobalAlphaFactorusSUN glGlobalAlphaFactorusSUN = (GlobalAlphaFactorusSUN)GetDelegateForExtensionMethod("glGlobalAlphaFactorusSUN", typeof(Delegates.GlobalAlphaFactorusSUN));

            #endregion GlobalAlphaFactorusSUN

            #region GlobalAlphaFactoruiSUN

            /// <summary>
            /// 
            /// </summary>
            public delegate void GlobalAlphaFactoruiSUN(GLuint factor);
            public static GlobalAlphaFactoruiSUN glGlobalAlphaFactoruiSUN = (GlobalAlphaFactoruiSUN)GetDelegateForExtensionMethod("glGlobalAlphaFactoruiSUN", typeof(Delegates.GlobalAlphaFactoruiSUN));

            #endregion GlobalAlphaFactoruiSUN

            #region ReplacementCodeuiSUN

            /// <summary>
            /// 
            /// </summary>
            public delegate void ReplacementCodeuiSUN(GLuint code);
            public static ReplacementCodeuiSUN glReplacementCodeuiSUN = (ReplacementCodeuiSUN)GetDelegateForExtensionMethod("glReplacementCodeuiSUN", typeof(Delegates.ReplacementCodeuiSUN));

            #endregion ReplacementCodeuiSUN

            #region ReplacementCodeusSUN

            /// <summary>
            /// 
            /// </summary>
            public delegate void ReplacementCodeusSUN(GLushort code);
            public static ReplacementCodeusSUN glReplacementCodeusSUN = (ReplacementCodeusSUN)GetDelegateForExtensionMethod("glReplacementCodeusSUN", typeof(Delegates.ReplacementCodeusSUN));

            #endregion ReplacementCodeusSUN

            #region ReplacementCodeubSUN

            /// <summary>
            /// 
            /// </summary>
            public delegate void ReplacementCodeubSUN(GLubyte code);
            public static ReplacementCodeubSUN glReplacementCodeubSUN = (ReplacementCodeubSUN)GetDelegateForExtensionMethod("glReplacementCodeubSUN", typeof(Delegates.ReplacementCodeubSUN));

            #endregion ReplacementCodeubSUN

            #region ReplacementCodeuivSUN

            /// <summary>
            /// 
            /// </summary>
            public delegate void ReplacementCodeuivSUN(IntPtr code);
            public static ReplacementCodeuivSUN glReplacementCodeuivSUN = (ReplacementCodeuivSUN)GetDelegateForExtensionMethod("glReplacementCodeuivSUN", typeof(Delegates.ReplacementCodeuivSUN));

            #endregion ReplacementCodeuivSUN

            #region ReplacementCodeusvSUN

            /// <summary>
            /// 
            /// </summary>
            public delegate void ReplacementCodeusvSUN(IntPtr code);
            public static ReplacementCodeusvSUN glReplacementCodeusvSUN = (ReplacementCodeusvSUN)GetDelegateForExtensionMethod("glReplacementCodeusvSUN", typeof(Delegates.ReplacementCodeusvSUN));

            #endregion ReplacementCodeusvSUN

            #region ReplacementCodeubvSUN

            /// <summary>
            /// 
            /// </summary>
            public delegate void ReplacementCodeubvSUN(IntPtr code);
            public static ReplacementCodeubvSUN glReplacementCodeubvSUN = (ReplacementCodeubvSUN)GetDelegateForExtensionMethod("glReplacementCodeubvSUN", typeof(Delegates.ReplacementCodeubvSUN));

            #endregion ReplacementCodeubvSUN

            #region ReplacementCodePointerSUN

            /// <summary>
            /// 
            /// </summary>
            public delegate void ReplacementCodePointerSUN(GLenum type, GLsizei stride, IntPtr pointer);
            public static ReplacementCodePointerSUN glReplacementCodePointerSUN = (ReplacementCodePointerSUN)GetDelegateForExtensionMethod("glReplacementCodePointerSUN", typeof(Delegates.ReplacementCodePointerSUN));

            #endregion ReplacementCodePointerSUN

            #region Color4ubVertex2fSUN

            /// <summary>
            /// 
            /// </summary>
            public delegate void Color4ubVertex2fSUN(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y);
            public static Color4ubVertex2fSUN glColor4ubVertex2fSUN = (Color4ubVertex2fSUN)GetDelegateForExtensionMethod("glColor4ubVertex2fSUN", typeof(Delegates.Color4ubVertex2fSUN));

            #endregion Color4ubVertex2fSUN

            #region Color4ubVertex2fvSUN

            /// <summary>
            /// 
            /// </summary>
            public delegate void Color4ubVertex2fvSUN(IntPtr c, IntPtr v);
            public static Color4ubVertex2fvSUN glColor4ubVertex2fvSUN = (Color4ubVertex2fvSUN)GetDelegateForExtensionMethod("glColor4ubVertex2fvSUN", typeof(Delegates.Color4ubVertex2fvSUN));

            #endregion Color4ubVertex2fvSUN

            #region Color4ubVertex3fSUN

            /// <summary>
            /// 
            /// </summary>
            public delegate void Color4ubVertex3fSUN(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
            public static Color4ubVertex3fSUN glColor4ubVertex3fSUN = (Color4ubVertex3fSUN)GetDelegateForExtensionMethod("glColor4ubVertex3fSUN", typeof(Delegates.Color4ubVertex3fSUN));

            #endregion Color4ubVertex3fSUN

            #region Color4ubVertex3fvSUN

            /// <summary>
            /// 
            /// </summary>
            public delegate void Color4ubVertex3fvSUN(IntPtr c, IntPtr v);
            public static Color4ubVertex3fvSUN glColor4ubVertex3fvSUN = (Color4ubVertex3fvSUN)GetDelegateForExtensionMethod("glColor4ubVertex3fvSUN", typeof(Delegates.Color4ubVertex3fvSUN));

            #endregion Color4ubVertex3fvSUN

            #region Color3fVertex3fSUN

            /// <summary>
            /// 
            /// </summary>
            public delegate void Color3fVertex3fSUN(GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
            public static Color3fVertex3fSUN glColor3fVertex3fSUN = (Color3fVertex3fSUN)GetDelegateForExtensionMethod("glColor3fVertex3fSUN", typeof(Delegates.Color3fVertex3fSUN));

            #endregion Color3fVertex3fSUN

            #region Color3fVertex3fvSUN

            /// <summary>
            /// 
            /// </summary>
            public delegate void Color3fVertex3fvSUN(IntPtr c, IntPtr v);
            public static Color3fVertex3fvSUN glColor3fVertex3fvSUN = (Color3fVertex3fvSUN)GetDelegateForExtensionMethod("glColor3fVertex3fvSUN", typeof(Delegates.Color3fVertex3fvSUN));

            #endregion Color3fVertex3fvSUN

            #region Normal3fVertex3fSUN

            /// <summary>
            /// 
            /// </summary>
            public delegate void Normal3fVertex3fSUN(GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
            public static Normal3fVertex3fSUN glNormal3fVertex3fSUN = (Normal3fVertex3fSUN)GetDelegateForExtensionMethod("glNormal3fVertex3fSUN", typeof(Delegates.Normal3fVertex3fSUN));

            #endregion Normal3fVertex3fSUN

            #region Normal3fVertex3fvSUN

            /// <summary>
            /// 
            /// </summary>
            public delegate void Normal3fVertex3fvSUN(IntPtr n, IntPtr v);
            public static Normal3fVertex3fvSUN glNormal3fVertex3fvSUN = (Normal3fVertex3fvSUN)GetDelegateForExtensionMethod("glNormal3fVertex3fvSUN", typeof(Delegates.Normal3fVertex3fvSUN));

            #endregion Normal3fVertex3fvSUN

            #region Color4fNormal3fVertex3fSUN

            /// <summary>
            /// 
            /// </summary>
            public delegate void Color4fNormal3fVertex3fSUN(GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
            public static Color4fNormal3fVertex3fSUN glColor4fNormal3fVertex3fSUN = (Color4fNormal3fVertex3fSUN)GetDelegateForExtensionMethod("glColor4fNormal3fVertex3fSUN", typeof(Delegates.Color4fNormal3fVertex3fSUN));

            #endregion Color4fNormal3fVertex3fSUN

            #region Color4fNormal3fVertex3fvSUN

            /// <summary>
            /// 
            /// </summary>
            public delegate void Color4fNormal3fVertex3fvSUN(IntPtr c, IntPtr n, IntPtr v);
            public static Color4fNormal3fVertex3fvSUN glColor4fNormal3fVertex3fvSUN = (Color4fNormal3fVertex3fvSUN)GetDelegateForExtensionMethod("glColor4fNormal3fVertex3fvSUN", typeof(Delegates.Color4fNormal3fVertex3fvSUN));

            #endregion Color4fNormal3fVertex3fvSUN

            #region TexCoord2fVertex3fSUN

            /// <summary>
            /// 
            /// </summary>
            public delegate void TexCoord2fVertex3fSUN(GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z);
            public static TexCoord2fVertex3fSUN glTexCoord2fVertex3fSUN = (TexCoord2fVertex3fSUN)GetDelegateForExtensionMethod("glTexCoord2fVertex3fSUN", typeof(Delegates.TexCoord2fVertex3fSUN));

            #endregion TexCoord2fVertex3fSUN

            #region TexCoord2fVertex3fvSUN

            /// <summary>
            /// 
            /// </summary>
            public delegate void TexCoord2fVertex3fvSUN(IntPtr tc, IntPtr v);
            public static TexCoord2fVertex3fvSUN glTexCoord2fVertex3fvSUN = (TexCoord2fVertex3fvSUN)GetDelegateForExtensionMethod("glTexCoord2fVertex3fvSUN", typeof(Delegates.TexCoord2fVertex3fvSUN));

            #endregion TexCoord2fVertex3fvSUN

            #region TexCoord4fVertex4fSUN

            /// <summary>
            /// 
            /// </summary>
            public delegate void TexCoord4fVertex4fSUN(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
            public static TexCoord4fVertex4fSUN glTexCoord4fVertex4fSUN = (TexCoord4fVertex4fSUN)GetDelegateForExtensionMethod("glTexCoord4fVertex4fSUN", typeof(Delegates.TexCoord4fVertex4fSUN));

            #endregion TexCoord4fVertex4fSUN

            #region TexCoord4fVertex4fvSUN

            /// <summary>
            /// 
            /// </summary>
            public delegate void TexCoord4fVertex4fvSUN(IntPtr tc, IntPtr v);
            public static TexCoord4fVertex4fvSUN glTexCoord4fVertex4fvSUN = (TexCoord4fVertex4fvSUN)GetDelegateForExtensionMethod("glTexCoord4fVertex4fvSUN", typeof(Delegates.TexCoord4fVertex4fvSUN));

            #endregion TexCoord4fVertex4fvSUN

            #region TexCoord2fColor4ubVertex3fSUN

            /// <summary>
            /// 
            /// </summary>
            public delegate void TexCoord2fColor4ubVertex3fSUN(GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
            public static TexCoord2fColor4ubVertex3fSUN glTexCoord2fColor4ubVertex3fSUN = (TexCoord2fColor4ubVertex3fSUN)GetDelegateForExtensionMethod("glTexCoord2fColor4ubVertex3fSUN", typeof(Delegates.TexCoord2fColor4ubVertex3fSUN));

            #endregion TexCoord2fColor4ubVertex3fSUN

            #region TexCoord2fColor4ubVertex3fvSUN

            /// <summary>
            /// 
            /// </summary>
            public delegate void TexCoord2fColor4ubVertex3fvSUN(IntPtr tc, IntPtr c, IntPtr v);
            public static TexCoord2fColor4ubVertex3fvSUN glTexCoord2fColor4ubVertex3fvSUN = (TexCoord2fColor4ubVertex3fvSUN)GetDelegateForExtensionMethod("glTexCoord2fColor4ubVertex3fvSUN", typeof(Delegates.TexCoord2fColor4ubVertex3fvSUN));

            #endregion TexCoord2fColor4ubVertex3fvSUN

            #region TexCoord2fColor3fVertex3fSUN

            /// <summary>
            /// 
            /// </summary>
            public delegate void TexCoord2fColor3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
            public static TexCoord2fColor3fVertex3fSUN glTexCoord2fColor3fVertex3fSUN = (TexCoord2fColor3fVertex3fSUN)GetDelegateForExtensionMethod("glTexCoord2fColor3fVertex3fSUN", typeof(Delegates.TexCoord2fColor3fVertex3fSUN));

            #endregion TexCoord2fColor3fVertex3fSUN

            #region TexCoord2fColor3fVertex3fvSUN

            /// <summary>
            /// 
            /// </summary>
            public delegate void TexCoord2fColor3fVertex3fvSUN(IntPtr tc, IntPtr c, IntPtr v);
            public static TexCoord2fColor3fVertex3fvSUN glTexCoord2fColor3fVertex3fvSUN = (TexCoord2fColor3fVertex3fvSUN)GetDelegateForExtensionMethod("glTexCoord2fColor3fVertex3fvSUN", typeof(Delegates.TexCoord2fColor3fVertex3fvSUN));

            #endregion TexCoord2fColor3fVertex3fvSUN

            #region TexCoord2fNormal3fVertex3fSUN

            /// <summary>
            /// 
            /// </summary>
            public delegate void TexCoord2fNormal3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
            public static TexCoord2fNormal3fVertex3fSUN glTexCoord2fNormal3fVertex3fSUN = (TexCoord2fNormal3fVertex3fSUN)GetDelegateForExtensionMethod("glTexCoord2fNormal3fVertex3fSUN", typeof(Delegates.TexCoord2fNormal3fVertex3fSUN));

            #endregion TexCoord2fNormal3fVertex3fSUN

            #region TexCoord2fNormal3fVertex3fvSUN

            /// <summary>
            /// 
            /// </summary>
            public delegate void TexCoord2fNormal3fVertex3fvSUN(IntPtr tc, IntPtr n, IntPtr v);
            public static TexCoord2fNormal3fVertex3fvSUN glTexCoord2fNormal3fVertex3fvSUN = (TexCoord2fNormal3fVertex3fvSUN)GetDelegateForExtensionMethod("glTexCoord2fNormal3fVertex3fvSUN", typeof(Delegates.TexCoord2fNormal3fVertex3fvSUN));

            #endregion TexCoord2fNormal3fVertex3fvSUN

            #region TexCoord2fColor4fNormal3fVertex3fSUN

            /// <summary>
            /// 
            /// </summary>
            public delegate void TexCoord2fColor4fNormal3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
            public static TexCoord2fColor4fNormal3fVertex3fSUN glTexCoord2fColor4fNormal3fVertex3fSUN = (TexCoord2fColor4fNormal3fVertex3fSUN)GetDelegateForExtensionMethod("glTexCoord2fColor4fNormal3fVertex3fSUN", typeof(Delegates.TexCoord2fColor4fNormal3fVertex3fSUN));

            #endregion TexCoord2fColor4fNormal3fVertex3fSUN

            #region TexCoord2fColor4fNormal3fVertex3fvSUN

            /// <summary>
            /// 
            /// </summary>
            public delegate void TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, IntPtr c, IntPtr n, IntPtr v);
            public static TexCoord2fColor4fNormal3fVertex3fvSUN glTexCoord2fColor4fNormal3fVertex3fvSUN = (TexCoord2fColor4fNormal3fVertex3fvSUN)GetDelegateForExtensionMethod("glTexCoord2fColor4fNormal3fVertex3fvSUN", typeof(Delegates.TexCoord2fColor4fNormal3fVertex3fvSUN));

            #endregion TexCoord2fColor4fNormal3fVertex3fvSUN

            #region TexCoord4fColor4fNormal3fVertex4fSUN

            /// <summary>
            /// 
            /// </summary>
            public delegate void TexCoord4fColor4fNormal3fVertex4fSUN(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
            public static TexCoord4fColor4fNormal3fVertex4fSUN glTexCoord4fColor4fNormal3fVertex4fSUN = (TexCoord4fColor4fNormal3fVertex4fSUN)GetDelegateForExtensionMethod("glTexCoord4fColor4fNormal3fVertex4fSUN", typeof(Delegates.TexCoord4fColor4fNormal3fVertex4fSUN));

            #endregion TexCoord4fColor4fNormal3fVertex4fSUN

            #region TexCoord4fColor4fNormal3fVertex4fvSUN

            /// <summary>
            /// 
            /// </summary>
            public delegate void TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, IntPtr c, IntPtr n, IntPtr v);
            public static TexCoord4fColor4fNormal3fVertex4fvSUN glTexCoord4fColor4fNormal3fVertex4fvSUN = (TexCoord4fColor4fNormal3fVertex4fvSUN)GetDelegateForExtensionMethod("glTexCoord4fColor4fNormal3fVertex4fvSUN", typeof(Delegates.TexCoord4fColor4fNormal3fVertex4fvSUN));

            #endregion TexCoord4fColor4fNormal3fVertex4fvSUN

            #region ReplacementCodeuiVertex3fSUN

            /// <summary>
            /// 
            /// </summary>
            public delegate void ReplacementCodeuiVertex3fSUN(GLuint rc, GLfloat x, GLfloat y, GLfloat z);
            public static ReplacementCodeuiVertex3fSUN glReplacementCodeuiVertex3fSUN = (ReplacementCodeuiVertex3fSUN)GetDelegateForExtensionMethod("glReplacementCodeuiVertex3fSUN", typeof(Delegates.ReplacementCodeuiVertex3fSUN));

            #endregion ReplacementCodeuiVertex3fSUN

            #region ReplacementCodeuiVertex3fvSUN

            /// <summary>
            /// 
            /// </summary>
            public delegate void ReplacementCodeuiVertex3fvSUN(IntPtr rc, IntPtr v);
            public static ReplacementCodeuiVertex3fvSUN glReplacementCodeuiVertex3fvSUN = (ReplacementCodeuiVertex3fvSUN)GetDelegateForExtensionMethod("glReplacementCodeuiVertex3fvSUN", typeof(Delegates.ReplacementCodeuiVertex3fvSUN));

            #endregion ReplacementCodeuiVertex3fvSUN

            #region ReplacementCodeuiColor4ubVertex3fSUN

            /// <summary>
            /// 
            /// </summary>
            public delegate void ReplacementCodeuiColor4ubVertex3fSUN(GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
            public static ReplacementCodeuiColor4ubVertex3fSUN glReplacementCodeuiColor4ubVertex3fSUN = (ReplacementCodeuiColor4ubVertex3fSUN)GetDelegateForExtensionMethod("glReplacementCodeuiColor4ubVertex3fSUN", typeof(Delegates.ReplacementCodeuiColor4ubVertex3fSUN));

            #endregion ReplacementCodeuiColor4ubVertex3fSUN

            #region ReplacementCodeuiColor4ubVertex3fvSUN

            /// <summary>
            /// 
            /// </summary>
            public delegate void ReplacementCodeuiColor4ubVertex3fvSUN(IntPtr rc, IntPtr c, IntPtr v);
            public static ReplacementCodeuiColor4ubVertex3fvSUN glReplacementCodeuiColor4ubVertex3fvSUN = (ReplacementCodeuiColor4ubVertex3fvSUN)GetDelegateForExtensionMethod("glReplacementCodeuiColor4ubVertex3fvSUN", typeof(Delegates.ReplacementCodeuiColor4ubVertex3fvSUN));

            #endregion ReplacementCodeuiColor4ubVertex3fvSUN

            #region ReplacementCodeuiColor3fVertex3fSUN

            /// <summary>
            /// 
            /// </summary>
            public delegate void ReplacementCodeuiColor3fVertex3fSUN(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
            public static ReplacementCodeuiColor3fVertex3fSUN glReplacementCodeuiColor3fVertex3fSUN = (ReplacementCodeuiColor3fVertex3fSUN)GetDelegateForExtensionMethod("glReplacementCodeuiColor3fVertex3fSUN", typeof(Delegates.ReplacementCodeuiColor3fVertex3fSUN));

            #endregion ReplacementCodeuiColor3fVertex3fSUN

            #region ReplacementCodeuiColor3fVertex3fvSUN

            /// <summary>
            /// 
            /// </summary>
            public delegate void ReplacementCodeuiColor3fVertex3fvSUN(IntPtr rc, IntPtr c, IntPtr v);
            public static ReplacementCodeuiColor3fVertex3fvSUN glReplacementCodeuiColor3fVertex3fvSUN = (ReplacementCodeuiColor3fVertex3fvSUN)GetDelegateForExtensionMethod("glReplacementCodeuiColor3fVertex3fvSUN", typeof(Delegates.ReplacementCodeuiColor3fVertex3fvSUN));

            #endregion ReplacementCodeuiColor3fVertex3fvSUN

            #region ReplacementCodeuiNormal3fVertex3fSUN

            /// <summary>
            /// 
            /// </summary>
            public delegate void ReplacementCodeuiNormal3fVertex3fSUN(GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
            public static ReplacementCodeuiNormal3fVertex3fSUN glReplacementCodeuiNormal3fVertex3fSUN = (ReplacementCodeuiNormal3fVertex3fSUN)GetDelegateForExtensionMethod("glReplacementCodeuiNormal3fVertex3fSUN", typeof(Delegates.ReplacementCodeuiNormal3fVertex3fSUN));

            #endregion ReplacementCodeuiNormal3fVertex3fSUN

            #region ReplacementCodeuiNormal3fVertex3fvSUN

            /// <summary>
            /// 
            /// </summary>
            public delegate void ReplacementCodeuiNormal3fVertex3fvSUN(IntPtr rc, IntPtr n, IntPtr v);
            public static ReplacementCodeuiNormal3fVertex3fvSUN glReplacementCodeuiNormal3fVertex3fvSUN = (ReplacementCodeuiNormal3fVertex3fvSUN)GetDelegateForExtensionMethod("glReplacementCodeuiNormal3fVertex3fvSUN", typeof(Delegates.ReplacementCodeuiNormal3fVertex3fvSUN));

            #endregion ReplacementCodeuiNormal3fVertex3fvSUN

            #region ReplacementCodeuiColor4fNormal3fVertex3fSUN

            /// <summary>
            /// 
            /// </summary>
            public delegate void ReplacementCodeuiColor4fNormal3fVertex3fSUN(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
            public static ReplacementCodeuiColor4fNormal3fVertex3fSUN glReplacementCodeuiColor4fNormal3fVertex3fSUN = (ReplacementCodeuiColor4fNormal3fVertex3fSUN)GetDelegateForExtensionMethod("glReplacementCodeuiColor4fNormal3fVertex3fSUN", typeof(Delegates.ReplacementCodeuiColor4fNormal3fVertex3fSUN));

            #endregion ReplacementCodeuiColor4fNormal3fVertex3fSUN

            #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN

            /// <summary>
            /// 
            /// </summary>
            public delegate void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr c, IntPtr n, IntPtr v);
            public static ReplacementCodeuiColor4fNormal3fVertex3fvSUN glReplacementCodeuiColor4fNormal3fVertex3fvSUN = (ReplacementCodeuiColor4fNormal3fVertex3fvSUN)GetDelegateForExtensionMethod("glReplacementCodeuiColor4fNormal3fVertex3fvSUN", typeof(Delegates.ReplacementCodeuiColor4fNormal3fVertex3fvSUN));

            #endregion ReplacementCodeuiColor4fNormal3fVertex3fvSUN

            #region ReplacementCodeuiTexCoord2fVertex3fSUN

            /// <summary>
            /// 
            /// </summary>
            public delegate void ReplacementCodeuiTexCoord2fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z);
            public static ReplacementCodeuiTexCoord2fVertex3fSUN glReplacementCodeuiTexCoord2fVertex3fSUN = (ReplacementCodeuiTexCoord2fVertex3fSUN)GetDelegateForExtensionMethod("glReplacementCodeuiTexCoord2fVertex3fSUN", typeof(Delegates.ReplacementCodeuiTexCoord2fVertex3fSUN));

            #endregion ReplacementCodeuiTexCoord2fVertex3fSUN

            #region ReplacementCodeuiTexCoord2fVertex3fvSUN

            /// <summary>
            /// 
            /// </summary>
            public delegate void ReplacementCodeuiTexCoord2fVertex3fvSUN(IntPtr rc, IntPtr tc, IntPtr v);
            public static ReplacementCodeuiTexCoord2fVertex3fvSUN glReplacementCodeuiTexCoord2fVertex3fvSUN = (ReplacementCodeuiTexCoord2fVertex3fvSUN)GetDelegateForExtensionMethod("glReplacementCodeuiTexCoord2fVertex3fvSUN", typeof(Delegates.ReplacementCodeuiTexCoord2fVertex3fvSUN));

            #endregion ReplacementCodeuiTexCoord2fVertex3fvSUN

            #region ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN

            /// <summary>
            /// 
            /// </summary>
            public delegate void ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
            public static ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN = (ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN)GetDelegateForExtensionMethod("glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN", typeof(Delegates.ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN));

            #endregion ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN

            #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN

            /// <summary>
            /// 
            /// </summary>
            public delegate void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, IntPtr n, IntPtr v);
            public static ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN = (ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN)GetDelegateForExtensionMethod("glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN", typeof(Delegates.ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN));

            #endregion ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN

            #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN

            /// <summary>
            /// 
            /// </summary>
            public delegate void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
            public static ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN = (ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN)GetDelegateForExtensionMethod("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN", typeof(Delegates.ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN));

            #endregion ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN

            #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN

            /// <summary>
            /// 
            /// </summary>
            public delegate void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, IntPtr c, IntPtr n, IntPtr v);
            public static ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN = (ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN)GetDelegateForExtensionMethod("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN", typeof(Delegates.ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN));

            #endregion ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN

            #region BlendFuncSeparateEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void BlendFuncSeparateEXT(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
            public static BlendFuncSeparateEXT glBlendFuncSeparateEXT = (BlendFuncSeparateEXT)GetDelegateForExtensionMethod("glBlendFuncSeparateEXT", typeof(Delegates.BlendFuncSeparateEXT));

            #endregion BlendFuncSeparateEXT

            #region BlendFuncSeparateINGR

            /// <summary>
            /// 
            /// </summary>
            public delegate void BlendFuncSeparateINGR(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
            public static BlendFuncSeparateINGR glBlendFuncSeparateINGR = (BlendFuncSeparateINGR)GetDelegateForExtensionMethod("glBlendFuncSeparateINGR", typeof(Delegates.BlendFuncSeparateINGR));

            #endregion BlendFuncSeparateINGR

            #region VertexWeightfEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexWeightfEXT(GLfloat weight);
            public static VertexWeightfEXT glVertexWeightfEXT = (VertexWeightfEXT)GetDelegateForExtensionMethod("glVertexWeightfEXT", typeof(Delegates.VertexWeightfEXT));

            #endregion VertexWeightfEXT

            #region VertexWeightfvEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexWeightfvEXT(IntPtr weight);
            public static VertexWeightfvEXT glVertexWeightfvEXT = (VertexWeightfvEXT)GetDelegateForExtensionMethod("glVertexWeightfvEXT", typeof(Delegates.VertexWeightfvEXT));

            #endregion VertexWeightfvEXT

            #region VertexWeightPointerEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexWeightPointerEXT(GLsizei size, GLenum type, GLsizei stride, IntPtr pointer);
            public static VertexWeightPointerEXT glVertexWeightPointerEXT = (VertexWeightPointerEXT)GetDelegateForExtensionMethod("glVertexWeightPointerEXT", typeof(Delegates.VertexWeightPointerEXT));

            #endregion VertexWeightPointerEXT

            #region FlushVertexArrayRangeNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void FlushVertexArrayRangeNV();
            public static FlushVertexArrayRangeNV glFlushVertexArrayRangeNV = (FlushVertexArrayRangeNV)GetDelegateForExtensionMethod("glFlushVertexArrayRangeNV", typeof(Delegates.FlushVertexArrayRangeNV));

            #endregion FlushVertexArrayRangeNV

            #region VertexArrayRangeNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexArrayRangeNV(GLsizei length, IntPtr pointer);
            public static VertexArrayRangeNV glVertexArrayRangeNV = (VertexArrayRangeNV)GetDelegateForExtensionMethod("glVertexArrayRangeNV", typeof(Delegates.VertexArrayRangeNV));

            #endregion VertexArrayRangeNV

            #region CombinerParameterfvNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void CombinerParameterfvNV(GLenum pname, IntPtr parameters);
            public static CombinerParameterfvNV glCombinerParameterfvNV = (CombinerParameterfvNV)GetDelegateForExtensionMethod("glCombinerParameterfvNV", typeof(Delegates.CombinerParameterfvNV));

            #endregion CombinerParameterfvNV

            #region CombinerParameterfNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void CombinerParameterfNV(GLenum pname, GLfloat param);
            public static CombinerParameterfNV glCombinerParameterfNV = (CombinerParameterfNV)GetDelegateForExtensionMethod("glCombinerParameterfNV", typeof(Delegates.CombinerParameterfNV));

            #endregion CombinerParameterfNV

            #region CombinerParameterivNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void CombinerParameterivNV(GLenum pname, IntPtr parameters);
            public static CombinerParameterivNV glCombinerParameterivNV = (CombinerParameterivNV)GetDelegateForExtensionMethod("glCombinerParameterivNV", typeof(Delegates.CombinerParameterivNV));

            #endregion CombinerParameterivNV

            #region CombinerParameteriNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void CombinerParameteriNV(GLenum pname, GLint param);
            public static CombinerParameteriNV glCombinerParameteriNV = (CombinerParameteriNV)GetDelegateForExtensionMethod("glCombinerParameteriNV", typeof(Delegates.CombinerParameteriNV));

            #endregion CombinerParameteriNV

            #region CombinerInputNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void CombinerInputNV(GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage);
            public static CombinerInputNV glCombinerInputNV = (CombinerInputNV)GetDelegateForExtensionMethod("glCombinerInputNV", typeof(Delegates.CombinerInputNV));

            #endregion CombinerInputNV

            #region CombinerOutputNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void CombinerOutputNV(GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum);
            public static CombinerOutputNV glCombinerOutputNV = (CombinerOutputNV)GetDelegateForExtensionMethod("glCombinerOutputNV", typeof(Delegates.CombinerOutputNV));

            #endregion CombinerOutputNV

            #region FinalCombinerInputNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void FinalCombinerInputNV(GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage);
            public static FinalCombinerInputNV glFinalCombinerInputNV = (FinalCombinerInputNV)GetDelegateForExtensionMethod("glFinalCombinerInputNV", typeof(Delegates.FinalCombinerInputNV));

            #endregion FinalCombinerInputNV

            #region GetCombinerInputParameterfvNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetCombinerInputParameterfvNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, IntPtr parameters);
            public static GetCombinerInputParameterfvNV glGetCombinerInputParameterfvNV = (GetCombinerInputParameterfvNV)GetDelegateForExtensionMethod("glGetCombinerInputParameterfvNV", typeof(Delegates.GetCombinerInputParameterfvNV));

            #endregion GetCombinerInputParameterfvNV

            #region GetCombinerInputParameterivNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetCombinerInputParameterivNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, IntPtr parameters);
            public static GetCombinerInputParameterivNV glGetCombinerInputParameterivNV = (GetCombinerInputParameterivNV)GetDelegateForExtensionMethod("glGetCombinerInputParameterivNV", typeof(Delegates.GetCombinerInputParameterivNV));

            #endregion GetCombinerInputParameterivNV

            #region GetCombinerOutputParameterfvNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetCombinerOutputParameterfvNV(GLenum stage, GLenum portion, GLenum pname, IntPtr parameters);
            public static GetCombinerOutputParameterfvNV glGetCombinerOutputParameterfvNV = (GetCombinerOutputParameterfvNV)GetDelegateForExtensionMethod("glGetCombinerOutputParameterfvNV", typeof(Delegates.GetCombinerOutputParameterfvNV));

            #endregion GetCombinerOutputParameterfvNV

            #region GetCombinerOutputParameterivNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetCombinerOutputParameterivNV(GLenum stage, GLenum portion, GLenum pname, IntPtr parameters);
            public static GetCombinerOutputParameterivNV glGetCombinerOutputParameterivNV = (GetCombinerOutputParameterivNV)GetDelegateForExtensionMethod("glGetCombinerOutputParameterivNV", typeof(Delegates.GetCombinerOutputParameterivNV));

            #endregion GetCombinerOutputParameterivNV

            #region GetFinalCombinerInputParameterfvNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetFinalCombinerInputParameterfvNV(GLenum variable, GLenum pname, IntPtr parameters);
            public static GetFinalCombinerInputParameterfvNV glGetFinalCombinerInputParameterfvNV = (GetFinalCombinerInputParameterfvNV)GetDelegateForExtensionMethod("glGetFinalCombinerInputParameterfvNV", typeof(Delegates.GetFinalCombinerInputParameterfvNV));

            #endregion GetFinalCombinerInputParameterfvNV

            #region GetFinalCombinerInputParameterivNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetFinalCombinerInputParameterivNV(GLenum variable, GLenum pname, IntPtr parameters);
            public static GetFinalCombinerInputParameterivNV glGetFinalCombinerInputParameterivNV = (GetFinalCombinerInputParameterivNV)GetDelegateForExtensionMethod("glGetFinalCombinerInputParameterivNV", typeof(Delegates.GetFinalCombinerInputParameterivNV));

            #endregion GetFinalCombinerInputParameterivNV

            #region ResizeBuffersMESA

            /// <summary>
            /// 
            /// </summary>
            public delegate void ResizeBuffersMESA();
            public static ResizeBuffersMESA glResizeBuffersMESA = (ResizeBuffersMESA)GetDelegateForExtensionMethod("glResizeBuffersMESA", typeof(Delegates.ResizeBuffersMESA));

            #endregion ResizeBuffersMESA

            #region WindowPos2dMESA

            /// <summary>
            /// 
            /// </summary>
            public delegate void WindowPos2dMESA(GLdouble x, GLdouble y);
            public static WindowPos2dMESA glWindowPos2dMESA = (WindowPos2dMESA)GetDelegateForExtensionMethod("glWindowPos2dMESA", typeof(Delegates.WindowPos2dMESA));

            #endregion WindowPos2dMESA

            #region WindowPos2dvMESA

            /// <summary>
            /// 
            /// </summary>
            public delegate void WindowPos2dvMESA(IntPtr v);
            public static WindowPos2dvMESA glWindowPos2dvMESA = (WindowPos2dvMESA)GetDelegateForExtensionMethod("glWindowPos2dvMESA", typeof(Delegates.WindowPos2dvMESA));

            #endregion WindowPos2dvMESA

            #region WindowPos2fMESA

            /// <summary>
            /// 
            /// </summary>
            public delegate void WindowPos2fMESA(GLfloat x, GLfloat y);
            public static WindowPos2fMESA glWindowPos2fMESA = (WindowPos2fMESA)GetDelegateForExtensionMethod("glWindowPos2fMESA", typeof(Delegates.WindowPos2fMESA));

            #endregion WindowPos2fMESA

            #region WindowPos2fvMESA

            /// <summary>
            /// 
            /// </summary>
            public delegate void WindowPos2fvMESA(IntPtr v);
            public static WindowPos2fvMESA glWindowPos2fvMESA = (WindowPos2fvMESA)GetDelegateForExtensionMethod("glWindowPos2fvMESA", typeof(Delegates.WindowPos2fvMESA));

            #endregion WindowPos2fvMESA

            #region WindowPos2iMESA

            /// <summary>
            /// 
            /// </summary>
            public delegate void WindowPos2iMESA(GLint x, GLint y);
            public static WindowPos2iMESA glWindowPos2iMESA = (WindowPos2iMESA)GetDelegateForExtensionMethod("glWindowPos2iMESA", typeof(Delegates.WindowPos2iMESA));

            #endregion WindowPos2iMESA

            #region WindowPos2ivMESA

            /// <summary>
            /// 
            /// </summary>
            public delegate void WindowPos2ivMESA(IntPtr v);
            public static WindowPos2ivMESA glWindowPos2ivMESA = (WindowPos2ivMESA)GetDelegateForExtensionMethod("glWindowPos2ivMESA", typeof(Delegates.WindowPos2ivMESA));

            #endregion WindowPos2ivMESA

            #region WindowPos2sMESA

            /// <summary>
            /// 
            /// </summary>
            public delegate void WindowPos2sMESA(GLshort x, GLshort y);
            public static WindowPos2sMESA glWindowPos2sMESA = (WindowPos2sMESA)GetDelegateForExtensionMethod("glWindowPos2sMESA", typeof(Delegates.WindowPos2sMESA));

            #endregion WindowPos2sMESA

            #region WindowPos2svMESA

            /// <summary>
            /// 
            /// </summary>
            public delegate void WindowPos2svMESA(IntPtr v);
            public static WindowPos2svMESA glWindowPos2svMESA = (WindowPos2svMESA)GetDelegateForExtensionMethod("glWindowPos2svMESA", typeof(Delegates.WindowPos2svMESA));

            #endregion WindowPos2svMESA

            #region WindowPos3dMESA

            /// <summary>
            /// 
            /// </summary>
            public delegate void WindowPos3dMESA(GLdouble x, GLdouble y, GLdouble z);
            public static WindowPos3dMESA glWindowPos3dMESA = (WindowPos3dMESA)GetDelegateForExtensionMethod("glWindowPos3dMESA", typeof(Delegates.WindowPos3dMESA));

            #endregion WindowPos3dMESA

            #region WindowPos3dvMESA

            /// <summary>
            /// 
            /// </summary>
            public delegate void WindowPos3dvMESA(IntPtr v);
            public static WindowPos3dvMESA glWindowPos3dvMESA = (WindowPos3dvMESA)GetDelegateForExtensionMethod("glWindowPos3dvMESA", typeof(Delegates.WindowPos3dvMESA));

            #endregion WindowPos3dvMESA

            #region WindowPos3fMESA

            /// <summary>
            /// 
            /// </summary>
            public delegate void WindowPos3fMESA(GLfloat x, GLfloat y, GLfloat z);
            public static WindowPos3fMESA glWindowPos3fMESA = (WindowPos3fMESA)GetDelegateForExtensionMethod("glWindowPos3fMESA", typeof(Delegates.WindowPos3fMESA));

            #endregion WindowPos3fMESA

            #region WindowPos3fvMESA

            /// <summary>
            /// 
            /// </summary>
            public delegate void WindowPos3fvMESA(IntPtr v);
            public static WindowPos3fvMESA glWindowPos3fvMESA = (WindowPos3fvMESA)GetDelegateForExtensionMethod("glWindowPos3fvMESA", typeof(Delegates.WindowPos3fvMESA));

            #endregion WindowPos3fvMESA

            #region WindowPos3iMESA

            /// <summary>
            /// 
            /// </summary>
            public delegate void WindowPos3iMESA(GLint x, GLint y, GLint z);
            public static WindowPos3iMESA glWindowPos3iMESA = (WindowPos3iMESA)GetDelegateForExtensionMethod("glWindowPos3iMESA", typeof(Delegates.WindowPos3iMESA));

            #endregion WindowPos3iMESA

            #region WindowPos3ivMESA

            /// <summary>
            /// 
            /// </summary>
            public delegate void WindowPos3ivMESA(IntPtr v);
            public static WindowPos3ivMESA glWindowPos3ivMESA = (WindowPos3ivMESA)GetDelegateForExtensionMethod("glWindowPos3ivMESA", typeof(Delegates.WindowPos3ivMESA));

            #endregion WindowPos3ivMESA

            #region WindowPos3sMESA

            /// <summary>
            /// 
            /// </summary>
            public delegate void WindowPos3sMESA(GLshort x, GLshort y, GLshort z);
            public static WindowPos3sMESA glWindowPos3sMESA = (WindowPos3sMESA)GetDelegateForExtensionMethod("glWindowPos3sMESA", typeof(Delegates.WindowPos3sMESA));

            #endregion WindowPos3sMESA

            #region WindowPos3svMESA

            /// <summary>
            /// 
            /// </summary>
            public delegate void WindowPos3svMESA(IntPtr v);
            public static WindowPos3svMESA glWindowPos3svMESA = (WindowPos3svMESA)GetDelegateForExtensionMethod("glWindowPos3svMESA", typeof(Delegates.WindowPos3svMESA));

            #endregion WindowPos3svMESA

            #region WindowPos4dMESA

            /// <summary>
            /// 
            /// </summary>
            public delegate void WindowPos4dMESA(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
            public static WindowPos4dMESA glWindowPos4dMESA = (WindowPos4dMESA)GetDelegateForExtensionMethod("glWindowPos4dMESA", typeof(Delegates.WindowPos4dMESA));

            #endregion WindowPos4dMESA

            #region WindowPos4dvMESA

            /// <summary>
            /// 
            /// </summary>
            public delegate void WindowPos4dvMESA(IntPtr v);
            public static WindowPos4dvMESA glWindowPos4dvMESA = (WindowPos4dvMESA)GetDelegateForExtensionMethod("glWindowPos4dvMESA", typeof(Delegates.WindowPos4dvMESA));

            #endregion WindowPos4dvMESA

            #region WindowPos4fMESA

            /// <summary>
            /// 
            /// </summary>
            public delegate void WindowPos4fMESA(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
            public static WindowPos4fMESA glWindowPos4fMESA = (WindowPos4fMESA)GetDelegateForExtensionMethod("glWindowPos4fMESA", typeof(Delegates.WindowPos4fMESA));

            #endregion WindowPos4fMESA

            #region WindowPos4fvMESA

            /// <summary>
            /// 
            /// </summary>
            public delegate void WindowPos4fvMESA(IntPtr v);
            public static WindowPos4fvMESA glWindowPos4fvMESA = (WindowPos4fvMESA)GetDelegateForExtensionMethod("glWindowPos4fvMESA", typeof(Delegates.WindowPos4fvMESA));

            #endregion WindowPos4fvMESA

            #region WindowPos4iMESA

            /// <summary>
            /// 
            /// </summary>
            public delegate void WindowPos4iMESA(GLint x, GLint y, GLint z, GLint w);
            public static WindowPos4iMESA glWindowPos4iMESA = (WindowPos4iMESA)GetDelegateForExtensionMethod("glWindowPos4iMESA", typeof(Delegates.WindowPos4iMESA));

            #endregion WindowPos4iMESA

            #region WindowPos4ivMESA

            /// <summary>
            /// 
            /// </summary>
            public delegate void WindowPos4ivMESA(IntPtr v);
            public static WindowPos4ivMESA glWindowPos4ivMESA = (WindowPos4ivMESA)GetDelegateForExtensionMethod("glWindowPos4ivMESA", typeof(Delegates.WindowPos4ivMESA));

            #endregion WindowPos4ivMESA

            #region WindowPos4sMESA

            /// <summary>
            /// 
            /// </summary>
            public delegate void WindowPos4sMESA(GLshort x, GLshort y, GLshort z, GLshort w);
            public static WindowPos4sMESA glWindowPos4sMESA = (WindowPos4sMESA)GetDelegateForExtensionMethod("glWindowPos4sMESA", typeof(Delegates.WindowPos4sMESA));

            #endregion WindowPos4sMESA

            #region WindowPos4svMESA

            /// <summary>
            /// 
            /// </summary>
            public delegate void WindowPos4svMESA(IntPtr v);
            public static WindowPos4svMESA glWindowPos4svMESA = (WindowPos4svMESA)GetDelegateForExtensionMethod("glWindowPos4svMESA", typeof(Delegates.WindowPos4svMESA));

            #endregion WindowPos4svMESA

            #region MultiModeDrawArraysIBM

            /// <summary>
            /// 
            /// </summary>
            public delegate void MultiModeDrawArraysIBM(IntPtr mode, IntPtr first, IntPtr count, GLsizei primcount, GLint modestride);
            public static MultiModeDrawArraysIBM glMultiModeDrawArraysIBM = (MultiModeDrawArraysIBM)GetDelegateForExtensionMethod("glMultiModeDrawArraysIBM", typeof(Delegates.MultiModeDrawArraysIBM));

            #endregion MultiModeDrawArraysIBM

            #region MultiModeDrawElementsIBM

            /// <summary>
            /// 
            /// </summary>
            public delegate void MultiModeDrawElementsIBM(IntPtr mode, IntPtr count, GLenum type, IntPtr indices, GLsizei primcount, GLint modestride);
            public static MultiModeDrawElementsIBM glMultiModeDrawElementsIBM = (MultiModeDrawElementsIBM)GetDelegateForExtensionMethod("glMultiModeDrawElementsIBM", typeof(Delegates.MultiModeDrawElementsIBM));

            #endregion MultiModeDrawElementsIBM

            #region ColorPointerListIBM

            /// <summary>
            /// 
            /// </summary>
            public delegate void ColorPointerListIBM(GLint size, GLenum type, GLint stride, IntPtr pointer, GLint ptrstride);
            public static ColorPointerListIBM glColorPointerListIBM = (ColorPointerListIBM)GetDelegateForExtensionMethod("glColorPointerListIBM", typeof(Delegates.ColorPointerListIBM));

            #endregion ColorPointerListIBM

            #region SecondaryColorPointerListIBM

            /// <summary>
            /// 
            /// </summary>
            public delegate void SecondaryColorPointerListIBM(GLint size, GLenum type, GLint stride, IntPtr pointer, GLint ptrstride);
            public static SecondaryColorPointerListIBM glSecondaryColorPointerListIBM = (SecondaryColorPointerListIBM)GetDelegateForExtensionMethod("glSecondaryColorPointerListIBM", typeof(Delegates.SecondaryColorPointerListIBM));

            #endregion SecondaryColorPointerListIBM

            #region EdgeFlagPointerListIBM

            /// <summary>
            /// 
            /// </summary>
            public delegate void EdgeFlagPointerListIBM(GLint stride, IntPtr pointer, GLint ptrstride);
            public static EdgeFlagPointerListIBM glEdgeFlagPointerListIBM = (EdgeFlagPointerListIBM)GetDelegateForExtensionMethod("glEdgeFlagPointerListIBM", typeof(Delegates.EdgeFlagPointerListIBM));

            #endregion EdgeFlagPointerListIBM

            #region FogCoordPointerListIBM

            /// <summary>
            /// 
            /// </summary>
            public delegate void FogCoordPointerListIBM(GLenum type, GLint stride, IntPtr pointer, GLint ptrstride);
            public static FogCoordPointerListIBM glFogCoordPointerListIBM = (FogCoordPointerListIBM)GetDelegateForExtensionMethod("glFogCoordPointerListIBM", typeof(Delegates.FogCoordPointerListIBM));

            #endregion FogCoordPointerListIBM

            #region IndexPointerListIBM

            /// <summary>
            /// 
            /// </summary>
            public delegate void IndexPointerListIBM(GLenum type, GLint stride, IntPtr pointer, GLint ptrstride);
            public static IndexPointerListIBM glIndexPointerListIBM = (IndexPointerListIBM)GetDelegateForExtensionMethod("glIndexPointerListIBM", typeof(Delegates.IndexPointerListIBM));

            #endregion IndexPointerListIBM

            #region NormalPointerListIBM

            /// <summary>
            /// 
            /// </summary>
            public delegate void NormalPointerListIBM(GLenum type, GLint stride, IntPtr pointer, GLint ptrstride);
            public static NormalPointerListIBM glNormalPointerListIBM = (NormalPointerListIBM)GetDelegateForExtensionMethod("glNormalPointerListIBM", typeof(Delegates.NormalPointerListIBM));

            #endregion NormalPointerListIBM

            #region TexCoordPointerListIBM

            /// <summary>
            /// 
            /// </summary>
            public delegate void TexCoordPointerListIBM(GLint size, GLenum type, GLint stride, IntPtr pointer, GLint ptrstride);
            public static TexCoordPointerListIBM glTexCoordPointerListIBM = (TexCoordPointerListIBM)GetDelegateForExtensionMethod("glTexCoordPointerListIBM", typeof(Delegates.TexCoordPointerListIBM));

            #endregion TexCoordPointerListIBM

            #region VertexPointerListIBM

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexPointerListIBM(GLint size, GLenum type, GLint stride, IntPtr pointer, GLint ptrstride);
            public static VertexPointerListIBM glVertexPointerListIBM = (VertexPointerListIBM)GetDelegateForExtensionMethod("glVertexPointerListIBM", typeof(Delegates.VertexPointerListIBM));

            #endregion VertexPointerListIBM

            #region TbufferMask3DFX

            /// <summary>
            /// 
            /// </summary>
            public delegate void TbufferMask3DFX(GLuint mask);
            public static TbufferMask3DFX glTbufferMask3DFX = (TbufferMask3DFX)GetDelegateForExtensionMethod("glTbufferMask3DFX", typeof(Delegates.TbufferMask3DFX));

            #endregion TbufferMask3DFX

            #region SampleMaskEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void SampleMaskEXT(GLclampf value, GLboolean invert);
            public static SampleMaskEXT glSampleMaskEXT = (SampleMaskEXT)GetDelegateForExtensionMethod("glSampleMaskEXT", typeof(Delegates.SampleMaskEXT));

            #endregion SampleMaskEXT

            #region SamplePatternEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void SamplePatternEXT(GLenum pattern);
            public static SamplePatternEXT glSamplePatternEXT = (SamplePatternEXT)GetDelegateForExtensionMethod("glSamplePatternEXT", typeof(Delegates.SamplePatternEXT));

            #endregion SamplePatternEXT

            #region TextureColorMaskSGIS

            /// <summary>
            /// 
            /// </summary>
            public delegate void TextureColorMaskSGIS(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
            public static TextureColorMaskSGIS glTextureColorMaskSGIS = (TextureColorMaskSGIS)GetDelegateForExtensionMethod("glTextureColorMaskSGIS", typeof(Delegates.TextureColorMaskSGIS));

            #endregion TextureColorMaskSGIS

            #region IglooInterfaceSGIX

            /// <summary>
            /// 
            /// </summary>
            public delegate void IglooInterfaceSGIX(GLenum pname, IntPtr parameters);
            public static IglooInterfaceSGIX glIglooInterfaceSGIX = (IglooInterfaceSGIX)GetDelegateForExtensionMethod("glIglooInterfaceSGIX", typeof(Delegates.IglooInterfaceSGIX));

            #endregion IglooInterfaceSGIX

            #region DeleteFencesNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void DeleteFencesNV(GLsizei n, IntPtr fences);
            public static DeleteFencesNV glDeleteFencesNV = (DeleteFencesNV)GetDelegateForExtensionMethod("glDeleteFencesNV", typeof(Delegates.DeleteFencesNV));

            #endregion DeleteFencesNV

            #region GenFencesNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void GenFencesNV(GLsizei n, IntPtr fences);
            public static GenFencesNV glGenFencesNV = (GenFencesNV)GetDelegateForExtensionMethod("glGenFencesNV", typeof(Delegates.GenFencesNV));

            #endregion GenFencesNV

            #region IsFenceNV

            /// <summary>
            /// 
            /// </summary>
            public delegate GLboolean IsFenceNV(GLuint fence);
            public static IsFenceNV glIsFenceNV = (IsFenceNV)GetDelegateForExtensionMethod("glIsFenceNV", typeof(Delegates.IsFenceNV));

            #endregion IsFenceNV

            #region TestFenceNV

            /// <summary>
            /// 
            /// </summary>
            public delegate GLboolean TestFenceNV(GLuint fence);
            public static TestFenceNV glTestFenceNV = (TestFenceNV)GetDelegateForExtensionMethod("glTestFenceNV", typeof(Delegates.TestFenceNV));

            #endregion TestFenceNV

            #region GetFenceivNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetFenceivNV(GLuint fence, GLenum pname, IntPtr parameters);
            public static GetFenceivNV glGetFenceivNV = (GetFenceivNV)GetDelegateForExtensionMethod("glGetFenceivNV", typeof(Delegates.GetFenceivNV));

            #endregion GetFenceivNV

            #region FinishFenceNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void FinishFenceNV(GLuint fence);
            public static FinishFenceNV glFinishFenceNV = (FinishFenceNV)GetDelegateForExtensionMethod("glFinishFenceNV", typeof(Delegates.FinishFenceNV));

            #endregion FinishFenceNV

            #region SetFenceNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void SetFenceNV(GLuint fence, GLenum condition);
            public static SetFenceNV glSetFenceNV = (SetFenceNV)GetDelegateForExtensionMethod("glSetFenceNV", typeof(Delegates.SetFenceNV));

            #endregion SetFenceNV

            #region MapControlPointsNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void MapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, IntPtr points);
            public static MapControlPointsNV glMapControlPointsNV = (MapControlPointsNV)GetDelegateForExtensionMethod("glMapControlPointsNV", typeof(Delegates.MapControlPointsNV));

            #endregion MapControlPointsNV

            #region MapParameterivNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void MapParameterivNV(GLenum target, GLenum pname, IntPtr parameters);
            public static MapParameterivNV glMapParameterivNV = (MapParameterivNV)GetDelegateForExtensionMethod("glMapParameterivNV", typeof(Delegates.MapParameterivNV));

            #endregion MapParameterivNV

            #region MapParameterfvNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void MapParameterfvNV(GLenum target, GLenum pname, IntPtr parameters);
            public static MapParameterfvNV glMapParameterfvNV = (MapParameterfvNV)GetDelegateForExtensionMethod("glMapParameterfvNV", typeof(Delegates.MapParameterfvNV));

            #endregion MapParameterfvNV

            #region GetMapControlPointsNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, IntPtr points);
            public static GetMapControlPointsNV glGetMapControlPointsNV = (GetMapControlPointsNV)GetDelegateForExtensionMethod("glGetMapControlPointsNV", typeof(Delegates.GetMapControlPointsNV));

            #endregion GetMapControlPointsNV

            #region GetMapParameterivNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetMapParameterivNV(GLenum target, GLenum pname, IntPtr parameters);
            public static GetMapParameterivNV glGetMapParameterivNV = (GetMapParameterivNV)GetDelegateForExtensionMethod("glGetMapParameterivNV", typeof(Delegates.GetMapParameterivNV));

            #endregion GetMapParameterivNV

            #region GetMapParameterfvNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetMapParameterfvNV(GLenum target, GLenum pname, IntPtr parameters);
            public static GetMapParameterfvNV glGetMapParameterfvNV = (GetMapParameterfvNV)GetDelegateForExtensionMethod("glGetMapParameterfvNV", typeof(Delegates.GetMapParameterfvNV));

            #endregion GetMapParameterfvNV

            #region GetMapAttribParameterivNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetMapAttribParameterivNV(GLenum target, GLuint index, GLenum pname, IntPtr parameters);
            public static GetMapAttribParameterivNV glGetMapAttribParameterivNV = (GetMapAttribParameterivNV)GetDelegateForExtensionMethod("glGetMapAttribParameterivNV", typeof(Delegates.GetMapAttribParameterivNV));

            #endregion GetMapAttribParameterivNV

            #region GetMapAttribParameterfvNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetMapAttribParameterfvNV(GLenum target, GLuint index, GLenum pname, IntPtr parameters);
            public static GetMapAttribParameterfvNV glGetMapAttribParameterfvNV = (GetMapAttribParameterfvNV)GetDelegateForExtensionMethod("glGetMapAttribParameterfvNV", typeof(Delegates.GetMapAttribParameterfvNV));

            #endregion GetMapAttribParameterfvNV

            #region EvalMapsNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void EvalMapsNV(GLenum target, GLenum mode);
            public static EvalMapsNV glEvalMapsNV = (EvalMapsNV)GetDelegateForExtensionMethod("glEvalMapsNV", typeof(Delegates.EvalMapsNV));

            #endregion EvalMapsNV

            #region CombinerStageParameterfvNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void CombinerStageParameterfvNV(GLenum stage, GLenum pname, IntPtr parameters);
            public static CombinerStageParameterfvNV glCombinerStageParameterfvNV = (CombinerStageParameterfvNV)GetDelegateForExtensionMethod("glCombinerStageParameterfvNV", typeof(Delegates.CombinerStageParameterfvNV));

            #endregion CombinerStageParameterfvNV

            #region GetCombinerStageParameterfvNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetCombinerStageParameterfvNV(GLenum stage, GLenum pname, IntPtr parameters);
            public static GetCombinerStageParameterfvNV glGetCombinerStageParameterfvNV = (GetCombinerStageParameterfvNV)GetDelegateForExtensionMethod("glGetCombinerStageParameterfvNV", typeof(Delegates.GetCombinerStageParameterfvNV));

            #endregion GetCombinerStageParameterfvNV

            #region AreProgramsResidentNV

            /// <summary>
            /// 
            /// </summary>
            public delegate GLboolean AreProgramsResidentNV(GLsizei n, IntPtr programs, IntPtr residences);
            public static AreProgramsResidentNV glAreProgramsResidentNV = (AreProgramsResidentNV)GetDelegateForExtensionMethod("glAreProgramsResidentNV", typeof(Delegates.AreProgramsResidentNV));

            #endregion AreProgramsResidentNV

            #region BindProgramNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void BindProgramNV(GLenum target, GLuint id);
            public static BindProgramNV glBindProgramNV = (BindProgramNV)GetDelegateForExtensionMethod("glBindProgramNV", typeof(Delegates.BindProgramNV));

            #endregion BindProgramNV

            #region DeleteProgramsNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void DeleteProgramsNV(GLsizei n, IntPtr programs);
            public static DeleteProgramsNV glDeleteProgramsNV = (DeleteProgramsNV)GetDelegateForExtensionMethod("glDeleteProgramsNV", typeof(Delegates.DeleteProgramsNV));

            #endregion DeleteProgramsNV

            #region ExecuteProgramNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void ExecuteProgramNV(GLenum target, GLuint id, IntPtr parameters);
            public static ExecuteProgramNV glExecuteProgramNV = (ExecuteProgramNV)GetDelegateForExtensionMethod("glExecuteProgramNV", typeof(Delegates.ExecuteProgramNV));

            #endregion ExecuteProgramNV

            #region GenProgramsNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void GenProgramsNV(GLsizei n, IntPtr programs);
            public static GenProgramsNV glGenProgramsNV = (GenProgramsNV)GetDelegateForExtensionMethod("glGenProgramsNV", typeof(Delegates.GenProgramsNV));

            #endregion GenProgramsNV

            #region GetProgramParameterdvNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetProgramParameterdvNV(GLenum target, GLuint index, GLenum pname, IntPtr parameters);
            public static GetProgramParameterdvNV glGetProgramParameterdvNV = (GetProgramParameterdvNV)GetDelegateForExtensionMethod("glGetProgramParameterdvNV", typeof(Delegates.GetProgramParameterdvNV));

            #endregion GetProgramParameterdvNV

            #region GetProgramParameterfvNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetProgramParameterfvNV(GLenum target, GLuint index, GLenum pname, IntPtr parameters);
            public static GetProgramParameterfvNV glGetProgramParameterfvNV = (GetProgramParameterfvNV)GetDelegateForExtensionMethod("glGetProgramParameterfvNV", typeof(Delegates.GetProgramParameterfvNV));

            #endregion GetProgramParameterfvNV

            #region GetProgramivNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetProgramivNV(GLuint id, GLenum pname, IntPtr parameters);
            public static GetProgramivNV glGetProgramivNV = (GetProgramivNV)GetDelegateForExtensionMethod("glGetProgramivNV", typeof(Delegates.GetProgramivNV));

            #endregion GetProgramivNV

            #region GetProgramStringNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetProgramStringNV(GLuint id, GLenum pname, IntPtr program);
            public static GetProgramStringNV glGetProgramStringNV = (GetProgramStringNV)GetDelegateForExtensionMethod("glGetProgramStringNV", typeof(Delegates.GetProgramStringNV));

            #endregion GetProgramStringNV

            #region GetTrackMatrixivNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetTrackMatrixivNV(GLenum target, GLuint address, GLenum pname, IntPtr parameters);
            public static GetTrackMatrixivNV glGetTrackMatrixivNV = (GetTrackMatrixivNV)GetDelegateForExtensionMethod("glGetTrackMatrixivNV", typeof(Delegates.GetTrackMatrixivNV));

            #endregion GetTrackMatrixivNV

            #region GetVertexAttribdvNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetVertexAttribdvNV(GLuint index, GLenum pname, IntPtr parameters);
            public static GetVertexAttribdvNV glGetVertexAttribdvNV = (GetVertexAttribdvNV)GetDelegateForExtensionMethod("glGetVertexAttribdvNV", typeof(Delegates.GetVertexAttribdvNV));

            #endregion GetVertexAttribdvNV

            #region GetVertexAttribfvNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetVertexAttribfvNV(GLuint index, GLenum pname, IntPtr parameters);
            public static GetVertexAttribfvNV glGetVertexAttribfvNV = (GetVertexAttribfvNV)GetDelegateForExtensionMethod("glGetVertexAttribfvNV", typeof(Delegates.GetVertexAttribfvNV));

            #endregion GetVertexAttribfvNV

            #region GetVertexAttribivNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetVertexAttribivNV(GLuint index, GLenum pname, IntPtr parameters);
            public static GetVertexAttribivNV glGetVertexAttribivNV = (GetVertexAttribivNV)GetDelegateForExtensionMethod("glGetVertexAttribivNV", typeof(Delegates.GetVertexAttribivNV));

            #endregion GetVertexAttribivNV

            #region GetVertexAttribPointervNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetVertexAttribPointervNV(GLuint index, GLenum pname, IntPtr pointer);
            public static GetVertexAttribPointervNV glGetVertexAttribPointervNV = (GetVertexAttribPointervNV)GetDelegateForExtensionMethod("glGetVertexAttribPointervNV", typeof(Delegates.GetVertexAttribPointervNV));

            #endregion GetVertexAttribPointervNV

            #region IsProgramNV

            /// <summary>
            /// 
            /// </summary>
            public delegate GLboolean IsProgramNV(GLuint id);
            public static IsProgramNV glIsProgramNV = (IsProgramNV)GetDelegateForExtensionMethod("glIsProgramNV", typeof(Delegates.IsProgramNV));

            #endregion IsProgramNV

            #region LoadProgramNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void LoadProgramNV(GLenum target, GLuint id, GLsizei len, IntPtr program);
            public static LoadProgramNV glLoadProgramNV = (LoadProgramNV)GetDelegateForExtensionMethod("glLoadProgramNV", typeof(Delegates.LoadProgramNV));

            #endregion LoadProgramNV

            #region ProgramParameter4dNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void ProgramParameter4dNV(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
            public static ProgramParameter4dNV glProgramParameter4dNV = (ProgramParameter4dNV)GetDelegateForExtensionMethod("glProgramParameter4dNV", typeof(Delegates.ProgramParameter4dNV));

            #endregion ProgramParameter4dNV

            #region ProgramParameter4dvNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void ProgramParameter4dvNV(GLenum target, GLuint index, IntPtr v);
            public static ProgramParameter4dvNV glProgramParameter4dvNV = (ProgramParameter4dvNV)GetDelegateForExtensionMethod("glProgramParameter4dvNV", typeof(Delegates.ProgramParameter4dvNV));

            #endregion ProgramParameter4dvNV

            #region ProgramParameter4fNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void ProgramParameter4fNV(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
            public static ProgramParameter4fNV glProgramParameter4fNV = (ProgramParameter4fNV)GetDelegateForExtensionMethod("glProgramParameter4fNV", typeof(Delegates.ProgramParameter4fNV));

            #endregion ProgramParameter4fNV

            #region ProgramParameter4fvNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void ProgramParameter4fvNV(GLenum target, GLuint index, IntPtr v);
            public static ProgramParameter4fvNV glProgramParameter4fvNV = (ProgramParameter4fvNV)GetDelegateForExtensionMethod("glProgramParameter4fvNV", typeof(Delegates.ProgramParameter4fvNV));

            #endregion ProgramParameter4fvNV

            #region ProgramParameters4dvNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void ProgramParameters4dvNV(GLenum target, GLuint index, GLuint count, IntPtr v);
            public static ProgramParameters4dvNV glProgramParameters4dvNV = (ProgramParameters4dvNV)GetDelegateForExtensionMethod("glProgramParameters4dvNV", typeof(Delegates.ProgramParameters4dvNV));

            #endregion ProgramParameters4dvNV

            #region ProgramParameters4fvNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void ProgramParameters4fvNV(GLenum target, GLuint index, GLuint count, IntPtr v);
            public static ProgramParameters4fvNV glProgramParameters4fvNV = (ProgramParameters4fvNV)GetDelegateForExtensionMethod("glProgramParameters4fvNV", typeof(Delegates.ProgramParameters4fvNV));

            #endregion ProgramParameters4fvNV

            #region RequestResidentProgramsNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void RequestResidentProgramsNV(GLsizei n, IntPtr programs);
            public static RequestResidentProgramsNV glRequestResidentProgramsNV = (RequestResidentProgramsNV)GetDelegateForExtensionMethod("glRequestResidentProgramsNV", typeof(Delegates.RequestResidentProgramsNV));

            #endregion RequestResidentProgramsNV

            #region TrackMatrixNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void TrackMatrixNV(GLenum target, GLuint address, GLenum matrix, GLenum transform);
            public static TrackMatrixNV glTrackMatrixNV = (TrackMatrixNV)GetDelegateForExtensionMethod("glTrackMatrixNV", typeof(Delegates.TrackMatrixNV));

            #endregion TrackMatrixNV

            #region VertexAttribPointerNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttribPointerNV(GLuint index, GLint fsize, GLenum type, GLsizei stride, IntPtr pointer);
            public static VertexAttribPointerNV glVertexAttribPointerNV = (VertexAttribPointerNV)GetDelegateForExtensionMethod("glVertexAttribPointerNV", typeof(Delegates.VertexAttribPointerNV));

            #endregion VertexAttribPointerNV

            #region VertexAttrib1dNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib1dNV(GLuint index, GLdouble x);
            public static VertexAttrib1dNV glVertexAttrib1dNV = (VertexAttrib1dNV)GetDelegateForExtensionMethod("glVertexAttrib1dNV", typeof(Delegates.VertexAttrib1dNV));

            #endregion VertexAttrib1dNV

            #region VertexAttrib1dvNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib1dvNV(GLuint index, IntPtr v);
            public static VertexAttrib1dvNV glVertexAttrib1dvNV = (VertexAttrib1dvNV)GetDelegateForExtensionMethod("glVertexAttrib1dvNV", typeof(Delegates.VertexAttrib1dvNV));

            #endregion VertexAttrib1dvNV

            #region VertexAttrib1fNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib1fNV(GLuint index, GLfloat x);
            public static VertexAttrib1fNV glVertexAttrib1fNV = (VertexAttrib1fNV)GetDelegateForExtensionMethod("glVertexAttrib1fNV", typeof(Delegates.VertexAttrib1fNV));

            #endregion VertexAttrib1fNV

            #region VertexAttrib1fvNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib1fvNV(GLuint index, IntPtr v);
            public static VertexAttrib1fvNV glVertexAttrib1fvNV = (VertexAttrib1fvNV)GetDelegateForExtensionMethod("glVertexAttrib1fvNV", typeof(Delegates.VertexAttrib1fvNV));

            #endregion VertexAttrib1fvNV

            #region VertexAttrib1sNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib1sNV(GLuint index, GLshort x);
            public static VertexAttrib1sNV glVertexAttrib1sNV = (VertexAttrib1sNV)GetDelegateForExtensionMethod("glVertexAttrib1sNV", typeof(Delegates.VertexAttrib1sNV));

            #endregion VertexAttrib1sNV

            #region VertexAttrib1svNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib1svNV(GLuint index, IntPtr v);
            public static VertexAttrib1svNV glVertexAttrib1svNV = (VertexAttrib1svNV)GetDelegateForExtensionMethod("glVertexAttrib1svNV", typeof(Delegates.VertexAttrib1svNV));

            #endregion VertexAttrib1svNV

            #region VertexAttrib2dNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib2dNV(GLuint index, GLdouble x, GLdouble y);
            public static VertexAttrib2dNV glVertexAttrib2dNV = (VertexAttrib2dNV)GetDelegateForExtensionMethod("glVertexAttrib2dNV", typeof(Delegates.VertexAttrib2dNV));

            #endregion VertexAttrib2dNV

            #region VertexAttrib2dvNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib2dvNV(GLuint index, IntPtr v);
            public static VertexAttrib2dvNV glVertexAttrib2dvNV = (VertexAttrib2dvNV)GetDelegateForExtensionMethod("glVertexAttrib2dvNV", typeof(Delegates.VertexAttrib2dvNV));

            #endregion VertexAttrib2dvNV

            #region VertexAttrib2fNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib2fNV(GLuint index, GLfloat x, GLfloat y);
            public static VertexAttrib2fNV glVertexAttrib2fNV = (VertexAttrib2fNV)GetDelegateForExtensionMethod("glVertexAttrib2fNV", typeof(Delegates.VertexAttrib2fNV));

            #endregion VertexAttrib2fNV

            #region VertexAttrib2fvNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib2fvNV(GLuint index, IntPtr v);
            public static VertexAttrib2fvNV glVertexAttrib2fvNV = (VertexAttrib2fvNV)GetDelegateForExtensionMethod("glVertexAttrib2fvNV", typeof(Delegates.VertexAttrib2fvNV));

            #endregion VertexAttrib2fvNV

            #region VertexAttrib2sNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib2sNV(GLuint index, GLshort x, GLshort y);
            public static VertexAttrib2sNV glVertexAttrib2sNV = (VertexAttrib2sNV)GetDelegateForExtensionMethod("glVertexAttrib2sNV", typeof(Delegates.VertexAttrib2sNV));

            #endregion VertexAttrib2sNV

            #region VertexAttrib2svNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib2svNV(GLuint index, IntPtr v);
            public static VertexAttrib2svNV glVertexAttrib2svNV = (VertexAttrib2svNV)GetDelegateForExtensionMethod("glVertexAttrib2svNV", typeof(Delegates.VertexAttrib2svNV));

            #endregion VertexAttrib2svNV

            #region VertexAttrib3dNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib3dNV(GLuint index, GLdouble x, GLdouble y, GLdouble z);
            public static VertexAttrib3dNV glVertexAttrib3dNV = (VertexAttrib3dNV)GetDelegateForExtensionMethod("glVertexAttrib3dNV", typeof(Delegates.VertexAttrib3dNV));

            #endregion VertexAttrib3dNV

            #region VertexAttrib3dvNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib3dvNV(GLuint index, IntPtr v);
            public static VertexAttrib3dvNV glVertexAttrib3dvNV = (VertexAttrib3dvNV)GetDelegateForExtensionMethod("glVertexAttrib3dvNV", typeof(Delegates.VertexAttrib3dvNV));

            #endregion VertexAttrib3dvNV

            #region VertexAttrib3fNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib3fNV(GLuint index, GLfloat x, GLfloat y, GLfloat z);
            public static VertexAttrib3fNV glVertexAttrib3fNV = (VertexAttrib3fNV)GetDelegateForExtensionMethod("glVertexAttrib3fNV", typeof(Delegates.VertexAttrib3fNV));

            #endregion VertexAttrib3fNV

            #region VertexAttrib3fvNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib3fvNV(GLuint index, IntPtr v);
            public static VertexAttrib3fvNV glVertexAttrib3fvNV = (VertexAttrib3fvNV)GetDelegateForExtensionMethod("glVertexAttrib3fvNV", typeof(Delegates.VertexAttrib3fvNV));

            #endregion VertexAttrib3fvNV

            #region VertexAttrib3sNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib3sNV(GLuint index, GLshort x, GLshort y, GLshort z);
            public static VertexAttrib3sNV glVertexAttrib3sNV = (VertexAttrib3sNV)GetDelegateForExtensionMethod("glVertexAttrib3sNV", typeof(Delegates.VertexAttrib3sNV));

            #endregion VertexAttrib3sNV

            #region VertexAttrib3svNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib3svNV(GLuint index, IntPtr v);
            public static VertexAttrib3svNV glVertexAttrib3svNV = (VertexAttrib3svNV)GetDelegateForExtensionMethod("glVertexAttrib3svNV", typeof(Delegates.VertexAttrib3svNV));

            #endregion VertexAttrib3svNV

            #region VertexAttrib4dNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib4dNV(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
            public static VertexAttrib4dNV glVertexAttrib4dNV = (VertexAttrib4dNV)GetDelegateForExtensionMethod("glVertexAttrib4dNV", typeof(Delegates.VertexAttrib4dNV));

            #endregion VertexAttrib4dNV

            #region VertexAttrib4dvNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib4dvNV(GLuint index, IntPtr v);
            public static VertexAttrib4dvNV glVertexAttrib4dvNV = (VertexAttrib4dvNV)GetDelegateForExtensionMethod("glVertexAttrib4dvNV", typeof(Delegates.VertexAttrib4dvNV));

            #endregion VertexAttrib4dvNV

            #region VertexAttrib4fNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib4fNV(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
            public static VertexAttrib4fNV glVertexAttrib4fNV = (VertexAttrib4fNV)GetDelegateForExtensionMethod("glVertexAttrib4fNV", typeof(Delegates.VertexAttrib4fNV));

            #endregion VertexAttrib4fNV

            #region VertexAttrib4fvNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib4fvNV(GLuint index, IntPtr v);
            public static VertexAttrib4fvNV glVertexAttrib4fvNV = (VertexAttrib4fvNV)GetDelegateForExtensionMethod("glVertexAttrib4fvNV", typeof(Delegates.VertexAttrib4fvNV));

            #endregion VertexAttrib4fvNV

            #region VertexAttrib4sNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib4sNV(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
            public static VertexAttrib4sNV glVertexAttrib4sNV = (VertexAttrib4sNV)GetDelegateForExtensionMethod("glVertexAttrib4sNV", typeof(Delegates.VertexAttrib4sNV));

            #endregion VertexAttrib4sNV

            #region VertexAttrib4svNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib4svNV(GLuint index, IntPtr v);
            public static VertexAttrib4svNV glVertexAttrib4svNV = (VertexAttrib4svNV)GetDelegateForExtensionMethod("glVertexAttrib4svNV", typeof(Delegates.VertexAttrib4svNV));

            #endregion VertexAttrib4svNV

            #region VertexAttrib4ubNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib4ubNV(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
            public static VertexAttrib4ubNV glVertexAttrib4ubNV = (VertexAttrib4ubNV)GetDelegateForExtensionMethod("glVertexAttrib4ubNV", typeof(Delegates.VertexAttrib4ubNV));

            #endregion VertexAttrib4ubNV

            #region VertexAttrib4ubvNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib4ubvNV(GLuint index, IntPtr v);
            public static VertexAttrib4ubvNV glVertexAttrib4ubvNV = (VertexAttrib4ubvNV)GetDelegateForExtensionMethod("glVertexAttrib4ubvNV", typeof(Delegates.VertexAttrib4ubvNV));

            #endregion VertexAttrib4ubvNV

            #region VertexAttribs1dvNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttribs1dvNV(GLuint index, GLsizei count, IntPtr v);
            public static VertexAttribs1dvNV glVertexAttribs1dvNV = (VertexAttribs1dvNV)GetDelegateForExtensionMethod("glVertexAttribs1dvNV", typeof(Delegates.VertexAttribs1dvNV));

            #endregion VertexAttribs1dvNV

            #region VertexAttribs1fvNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttribs1fvNV(GLuint index, GLsizei count, IntPtr v);
            public static VertexAttribs1fvNV glVertexAttribs1fvNV = (VertexAttribs1fvNV)GetDelegateForExtensionMethod("glVertexAttribs1fvNV", typeof(Delegates.VertexAttribs1fvNV));

            #endregion VertexAttribs1fvNV

            #region VertexAttribs1svNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttribs1svNV(GLuint index, GLsizei count, IntPtr v);
            public static VertexAttribs1svNV glVertexAttribs1svNV = (VertexAttribs1svNV)GetDelegateForExtensionMethod("glVertexAttribs1svNV", typeof(Delegates.VertexAttribs1svNV));

            #endregion VertexAttribs1svNV

            #region VertexAttribs2dvNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttribs2dvNV(GLuint index, GLsizei count, IntPtr v);
            public static VertexAttribs2dvNV glVertexAttribs2dvNV = (VertexAttribs2dvNV)GetDelegateForExtensionMethod("glVertexAttribs2dvNV", typeof(Delegates.VertexAttribs2dvNV));

            #endregion VertexAttribs2dvNV

            #region VertexAttribs2fvNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttribs2fvNV(GLuint index, GLsizei count, IntPtr v);
            public static VertexAttribs2fvNV glVertexAttribs2fvNV = (VertexAttribs2fvNV)GetDelegateForExtensionMethod("glVertexAttribs2fvNV", typeof(Delegates.VertexAttribs2fvNV));

            #endregion VertexAttribs2fvNV

            #region VertexAttribs2svNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttribs2svNV(GLuint index, GLsizei count, IntPtr v);
            public static VertexAttribs2svNV glVertexAttribs2svNV = (VertexAttribs2svNV)GetDelegateForExtensionMethod("glVertexAttribs2svNV", typeof(Delegates.VertexAttribs2svNV));

            #endregion VertexAttribs2svNV

            #region VertexAttribs3dvNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttribs3dvNV(GLuint index, GLsizei count, IntPtr v);
            public static VertexAttribs3dvNV glVertexAttribs3dvNV = (VertexAttribs3dvNV)GetDelegateForExtensionMethod("glVertexAttribs3dvNV", typeof(Delegates.VertexAttribs3dvNV));

            #endregion VertexAttribs3dvNV

            #region VertexAttribs3fvNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttribs3fvNV(GLuint index, GLsizei count, IntPtr v);
            public static VertexAttribs3fvNV glVertexAttribs3fvNV = (VertexAttribs3fvNV)GetDelegateForExtensionMethod("glVertexAttribs3fvNV", typeof(Delegates.VertexAttribs3fvNV));

            #endregion VertexAttribs3fvNV

            #region VertexAttribs3svNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttribs3svNV(GLuint index, GLsizei count, IntPtr v);
            public static VertexAttribs3svNV glVertexAttribs3svNV = (VertexAttribs3svNV)GetDelegateForExtensionMethod("glVertexAttribs3svNV", typeof(Delegates.VertexAttribs3svNV));

            #endregion VertexAttribs3svNV

            #region VertexAttribs4dvNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttribs4dvNV(GLuint index, GLsizei count, IntPtr v);
            public static VertexAttribs4dvNV glVertexAttribs4dvNV = (VertexAttribs4dvNV)GetDelegateForExtensionMethod("glVertexAttribs4dvNV", typeof(Delegates.VertexAttribs4dvNV));

            #endregion VertexAttribs4dvNV

            #region VertexAttribs4fvNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttribs4fvNV(GLuint index, GLsizei count, IntPtr v);
            public static VertexAttribs4fvNV glVertexAttribs4fvNV = (VertexAttribs4fvNV)GetDelegateForExtensionMethod("glVertexAttribs4fvNV", typeof(Delegates.VertexAttribs4fvNV));

            #endregion VertexAttribs4fvNV

            #region VertexAttribs4svNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttribs4svNV(GLuint index, GLsizei count, IntPtr v);
            public static VertexAttribs4svNV glVertexAttribs4svNV = (VertexAttribs4svNV)GetDelegateForExtensionMethod("glVertexAttribs4svNV", typeof(Delegates.VertexAttribs4svNV));

            #endregion VertexAttribs4svNV

            #region VertexAttribs4ubvNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttribs4ubvNV(GLuint index, GLsizei count, IntPtr v);
            public static VertexAttribs4ubvNV glVertexAttribs4ubvNV = (VertexAttribs4ubvNV)GetDelegateForExtensionMethod("glVertexAttribs4ubvNV", typeof(Delegates.VertexAttribs4ubvNV));

            #endregion VertexAttribs4ubvNV

            #region TexBumpParameterivATI

            /// <summary>
            /// 
            /// </summary>
            public delegate void TexBumpParameterivATI(GLenum pname, IntPtr param);
            public static TexBumpParameterivATI glTexBumpParameterivATI = (TexBumpParameterivATI)GetDelegateForExtensionMethod("glTexBumpParameterivATI", typeof(Delegates.TexBumpParameterivATI));

            #endregion TexBumpParameterivATI

            #region TexBumpParameterfvATI

            /// <summary>
            /// 
            /// </summary>
            public delegate void TexBumpParameterfvATI(GLenum pname, IntPtr param);
            public static TexBumpParameterfvATI glTexBumpParameterfvATI = (TexBumpParameterfvATI)GetDelegateForExtensionMethod("glTexBumpParameterfvATI", typeof(Delegates.TexBumpParameterfvATI));

            #endregion TexBumpParameterfvATI

            #region GetTexBumpParameterivATI

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetTexBumpParameterivATI(GLenum pname, IntPtr param);
            public static GetTexBumpParameterivATI glGetTexBumpParameterivATI = (GetTexBumpParameterivATI)GetDelegateForExtensionMethod("glGetTexBumpParameterivATI", typeof(Delegates.GetTexBumpParameterivATI));

            #endregion GetTexBumpParameterivATI

            #region GetTexBumpParameterfvATI

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetTexBumpParameterfvATI(GLenum pname, IntPtr param);
            public static GetTexBumpParameterfvATI glGetTexBumpParameterfvATI = (GetTexBumpParameterfvATI)GetDelegateForExtensionMethod("glGetTexBumpParameterfvATI", typeof(Delegates.GetTexBumpParameterfvATI));

            #endregion GetTexBumpParameterfvATI

            #region GenFragmentShadersATI

            /// <summary>
            /// 
            /// </summary>
            public delegate GLuint GenFragmentShadersATI(GLuint range);
            public static GenFragmentShadersATI glGenFragmentShadersATI = (GenFragmentShadersATI)GetDelegateForExtensionMethod("glGenFragmentShadersATI", typeof(Delegates.GenFragmentShadersATI));

            #endregion GenFragmentShadersATI

            #region BindFragmentShaderATI

            /// <summary>
            /// 
            /// </summary>
            public delegate void BindFragmentShaderATI(GLuint id);
            public static BindFragmentShaderATI glBindFragmentShaderATI = (BindFragmentShaderATI)GetDelegateForExtensionMethod("glBindFragmentShaderATI", typeof(Delegates.BindFragmentShaderATI));

            #endregion BindFragmentShaderATI

            #region DeleteFragmentShaderATI

            /// <summary>
            /// 
            /// </summary>
            public delegate void DeleteFragmentShaderATI(GLuint id);
            public static DeleteFragmentShaderATI glDeleteFragmentShaderATI = (DeleteFragmentShaderATI)GetDelegateForExtensionMethod("glDeleteFragmentShaderATI", typeof(Delegates.DeleteFragmentShaderATI));

            #endregion DeleteFragmentShaderATI

            #region BeginFragmentShaderATI

            /// <summary>
            /// 
            /// </summary>
            public delegate void BeginFragmentShaderATI();
            public static BeginFragmentShaderATI glBeginFragmentShaderATI = (BeginFragmentShaderATI)GetDelegateForExtensionMethod("glBeginFragmentShaderATI", typeof(Delegates.BeginFragmentShaderATI));

            #endregion BeginFragmentShaderATI

            #region EndFragmentShaderATI

            /// <summary>
            /// 
            /// </summary>
            public delegate void EndFragmentShaderATI();
            public static EndFragmentShaderATI glEndFragmentShaderATI = (EndFragmentShaderATI)GetDelegateForExtensionMethod("glEndFragmentShaderATI", typeof(Delegates.EndFragmentShaderATI));

            #endregion EndFragmentShaderATI

            #region PassTexCoordATI

            /// <summary>
            /// 
            /// </summary>
            public delegate void PassTexCoordATI(GLuint dst, GLuint coord, GLenum swizzle);
            public static PassTexCoordATI glPassTexCoordATI = (PassTexCoordATI)GetDelegateForExtensionMethod("glPassTexCoordATI", typeof(Delegates.PassTexCoordATI));

            #endregion PassTexCoordATI

            #region SampleMapATI

            /// <summary>
            /// 
            /// </summary>
            public delegate void SampleMapATI(GLuint dst, GLuint interp, GLenum swizzle);
            public static SampleMapATI glSampleMapATI = (SampleMapATI)GetDelegateForExtensionMethod("glSampleMapATI", typeof(Delegates.SampleMapATI));

            #endregion SampleMapATI

            #region ColorFragmentOp1ATI

            /// <summary>
            /// 
            /// </summary>
            public delegate void ColorFragmentOp1ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod);
            public static ColorFragmentOp1ATI glColorFragmentOp1ATI = (ColorFragmentOp1ATI)GetDelegateForExtensionMethod("glColorFragmentOp1ATI", typeof(Delegates.ColorFragmentOp1ATI));

            #endregion ColorFragmentOp1ATI

            #region ColorFragmentOp2ATI

            /// <summary>
            /// 
            /// </summary>
            public delegate void ColorFragmentOp2ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod);
            public static ColorFragmentOp2ATI glColorFragmentOp2ATI = (ColorFragmentOp2ATI)GetDelegateForExtensionMethod("glColorFragmentOp2ATI", typeof(Delegates.ColorFragmentOp2ATI));

            #endregion ColorFragmentOp2ATI

            #region ColorFragmentOp3ATI

            /// <summary>
            /// 
            /// </summary>
            public delegate void ColorFragmentOp3ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod);
            public static ColorFragmentOp3ATI glColorFragmentOp3ATI = (ColorFragmentOp3ATI)GetDelegateForExtensionMethod("glColorFragmentOp3ATI", typeof(Delegates.ColorFragmentOp3ATI));

            #endregion ColorFragmentOp3ATI

            #region AlphaFragmentOp1ATI

            /// <summary>
            /// 
            /// </summary>
            public delegate void AlphaFragmentOp1ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod);
            public static AlphaFragmentOp1ATI glAlphaFragmentOp1ATI = (AlphaFragmentOp1ATI)GetDelegateForExtensionMethod("glAlphaFragmentOp1ATI", typeof(Delegates.AlphaFragmentOp1ATI));

            #endregion AlphaFragmentOp1ATI

            #region AlphaFragmentOp2ATI

            /// <summary>
            /// 
            /// </summary>
            public delegate void AlphaFragmentOp2ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod);
            public static AlphaFragmentOp2ATI glAlphaFragmentOp2ATI = (AlphaFragmentOp2ATI)GetDelegateForExtensionMethod("glAlphaFragmentOp2ATI", typeof(Delegates.AlphaFragmentOp2ATI));

            #endregion AlphaFragmentOp2ATI

            #region AlphaFragmentOp3ATI

            /// <summary>
            /// 
            /// </summary>
            public delegate void AlphaFragmentOp3ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod);
            public static AlphaFragmentOp3ATI glAlphaFragmentOp3ATI = (AlphaFragmentOp3ATI)GetDelegateForExtensionMethod("glAlphaFragmentOp3ATI", typeof(Delegates.AlphaFragmentOp3ATI));

            #endregion AlphaFragmentOp3ATI

            #region SetFragmentShaderConstantATI

            /// <summary>
            /// 
            /// </summary>
            public delegate void SetFragmentShaderConstantATI(GLuint dst, IntPtr value);
            public static SetFragmentShaderConstantATI glSetFragmentShaderConstantATI = (SetFragmentShaderConstantATI)GetDelegateForExtensionMethod("glSetFragmentShaderConstantATI", typeof(Delegates.SetFragmentShaderConstantATI));

            #endregion SetFragmentShaderConstantATI

            #region PNTrianglesiATI

            /// <summary>
            /// 
            /// </summary>
            public delegate void PNTrianglesiATI(GLenum pname, GLint param);
            public static PNTrianglesiATI glPNTrianglesiATI = (PNTrianglesiATI)GetDelegateForExtensionMethod("glPNTrianglesiATI", typeof(Delegates.PNTrianglesiATI));

            #endregion PNTrianglesiATI

            #region PNTrianglesfATI

            /// <summary>
            /// 
            /// </summary>
            public delegate void PNTrianglesfATI(GLenum pname, GLfloat param);
            public static PNTrianglesfATI glPNTrianglesfATI = (PNTrianglesfATI)GetDelegateForExtensionMethod("glPNTrianglesfATI", typeof(Delegates.PNTrianglesfATI));

            #endregion PNTrianglesfATI

            #region NewObjectBufferATI

            /// <summary>
            /// 
            /// </summary>
            public delegate GLuint NewObjectBufferATI(GLsizei size, IntPtr pointer, GLenum usage);
            public static NewObjectBufferATI glNewObjectBufferATI = (NewObjectBufferATI)GetDelegateForExtensionMethod("glNewObjectBufferATI", typeof(Delegates.NewObjectBufferATI));

            #endregion NewObjectBufferATI

            #region IsObjectBufferATI

            /// <summary>
            /// 
            /// </summary>
            public delegate GLboolean IsObjectBufferATI(GLuint buffer);
            public static IsObjectBufferATI glIsObjectBufferATI = (IsObjectBufferATI)GetDelegateForExtensionMethod("glIsObjectBufferATI", typeof(Delegates.IsObjectBufferATI));

            #endregion IsObjectBufferATI

            #region UpdateObjectBufferATI

            /// <summary>
            /// 
            /// </summary>
            public delegate void UpdateObjectBufferATI(GLuint buffer, GLuint offset, GLsizei size, IntPtr pointer, GLenum preserve);
            public static UpdateObjectBufferATI glUpdateObjectBufferATI = (UpdateObjectBufferATI)GetDelegateForExtensionMethod("glUpdateObjectBufferATI", typeof(Delegates.UpdateObjectBufferATI));

            #endregion UpdateObjectBufferATI

            #region GetObjectBufferfvATI

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetObjectBufferfvATI(GLuint buffer, GLenum pname, IntPtr parameters);
            public static GetObjectBufferfvATI glGetObjectBufferfvATI = (GetObjectBufferfvATI)GetDelegateForExtensionMethod("glGetObjectBufferfvATI", typeof(Delegates.GetObjectBufferfvATI));

            #endregion GetObjectBufferfvATI

            #region GetObjectBufferivATI

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetObjectBufferivATI(GLuint buffer, GLenum pname, IntPtr parameters);
            public static GetObjectBufferivATI glGetObjectBufferivATI = (GetObjectBufferivATI)GetDelegateForExtensionMethod("glGetObjectBufferivATI", typeof(Delegates.GetObjectBufferivATI));

            #endregion GetObjectBufferivATI

            #region FreeObjectBufferATI

            /// <summary>
            /// 
            /// </summary>
            public delegate void FreeObjectBufferATI(GLuint buffer);
            public static FreeObjectBufferATI glFreeObjectBufferATI = (FreeObjectBufferATI)GetDelegateForExtensionMethod("glFreeObjectBufferATI", typeof(Delegates.FreeObjectBufferATI));

            #endregion FreeObjectBufferATI

            #region ArrayObjectATI

            /// <summary>
            /// 
            /// </summary>
            public delegate void ArrayObjectATI(GLenum array, GLint size, GLenum type, GLsizei stride, GLuint buffer, GLuint offset);
            public static ArrayObjectATI glArrayObjectATI = (ArrayObjectATI)GetDelegateForExtensionMethod("glArrayObjectATI", typeof(Delegates.ArrayObjectATI));

            #endregion ArrayObjectATI

            #region GetArrayObjectfvATI

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetArrayObjectfvATI(GLenum array, GLenum pname, IntPtr parameters);
            public static GetArrayObjectfvATI glGetArrayObjectfvATI = (GetArrayObjectfvATI)GetDelegateForExtensionMethod("glGetArrayObjectfvATI", typeof(Delegates.GetArrayObjectfvATI));

            #endregion GetArrayObjectfvATI

            #region GetArrayObjectivATI

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetArrayObjectivATI(GLenum array, GLenum pname, IntPtr parameters);
            public static GetArrayObjectivATI glGetArrayObjectivATI = (GetArrayObjectivATI)GetDelegateForExtensionMethod("glGetArrayObjectivATI", typeof(Delegates.GetArrayObjectivATI));

            #endregion GetArrayObjectivATI

            #region VariantArrayObjectATI

            /// <summary>
            /// 
            /// </summary>
            public delegate void VariantArrayObjectATI(GLuint id, GLenum type, GLsizei stride, GLuint buffer, GLuint offset);
            public static VariantArrayObjectATI glVariantArrayObjectATI = (VariantArrayObjectATI)GetDelegateForExtensionMethod("glVariantArrayObjectATI", typeof(Delegates.VariantArrayObjectATI));

            #endregion VariantArrayObjectATI

            #region GetVariantArrayObjectfvATI

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetVariantArrayObjectfvATI(GLuint id, GLenum pname, IntPtr parameters);
            public static GetVariantArrayObjectfvATI glGetVariantArrayObjectfvATI = (GetVariantArrayObjectfvATI)GetDelegateForExtensionMethod("glGetVariantArrayObjectfvATI", typeof(Delegates.GetVariantArrayObjectfvATI));

            #endregion GetVariantArrayObjectfvATI

            #region GetVariantArrayObjectivATI

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetVariantArrayObjectivATI(GLuint id, GLenum pname, IntPtr parameters);
            public static GetVariantArrayObjectivATI glGetVariantArrayObjectivATI = (GetVariantArrayObjectivATI)GetDelegateForExtensionMethod("glGetVariantArrayObjectivATI", typeof(Delegates.GetVariantArrayObjectivATI));

            #endregion GetVariantArrayObjectivATI

            #region BeginVertexShaderEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void BeginVertexShaderEXT();
            public static BeginVertexShaderEXT glBeginVertexShaderEXT = (BeginVertexShaderEXT)GetDelegateForExtensionMethod("glBeginVertexShaderEXT", typeof(Delegates.BeginVertexShaderEXT));

            #endregion BeginVertexShaderEXT

            #region EndVertexShaderEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void EndVertexShaderEXT();
            public static EndVertexShaderEXT glEndVertexShaderEXT = (EndVertexShaderEXT)GetDelegateForExtensionMethod("glEndVertexShaderEXT", typeof(Delegates.EndVertexShaderEXT));

            #endregion EndVertexShaderEXT

            #region BindVertexShaderEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void BindVertexShaderEXT(GLuint id);
            public static BindVertexShaderEXT glBindVertexShaderEXT = (BindVertexShaderEXT)GetDelegateForExtensionMethod("glBindVertexShaderEXT", typeof(Delegates.BindVertexShaderEXT));

            #endregion BindVertexShaderEXT

            #region GenVertexShadersEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate GLuint GenVertexShadersEXT(GLuint range);
            public static GenVertexShadersEXT glGenVertexShadersEXT = (GenVertexShadersEXT)GetDelegateForExtensionMethod("glGenVertexShadersEXT", typeof(Delegates.GenVertexShadersEXT));

            #endregion GenVertexShadersEXT

            #region DeleteVertexShaderEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void DeleteVertexShaderEXT(GLuint id);
            public static DeleteVertexShaderEXT glDeleteVertexShaderEXT = (DeleteVertexShaderEXT)GetDelegateForExtensionMethod("glDeleteVertexShaderEXT", typeof(Delegates.DeleteVertexShaderEXT));

            #endregion DeleteVertexShaderEXT

            #region ShaderOp1EXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void ShaderOp1EXT(GLenum op, GLuint res, GLuint arg1);
            public static ShaderOp1EXT glShaderOp1EXT = (ShaderOp1EXT)GetDelegateForExtensionMethod("glShaderOp1EXT", typeof(Delegates.ShaderOp1EXT));

            #endregion ShaderOp1EXT

            #region ShaderOp2EXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void ShaderOp2EXT(GLenum op, GLuint res, GLuint arg1, GLuint arg2);
            public static ShaderOp2EXT glShaderOp2EXT = (ShaderOp2EXT)GetDelegateForExtensionMethod("glShaderOp2EXT", typeof(Delegates.ShaderOp2EXT));

            #endregion ShaderOp2EXT

            #region ShaderOp3EXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void ShaderOp3EXT(GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3);
            public static ShaderOp3EXT glShaderOp3EXT = (ShaderOp3EXT)GetDelegateForExtensionMethod("glShaderOp3EXT", typeof(Delegates.ShaderOp3EXT));

            #endregion ShaderOp3EXT

            #region SwizzleEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void SwizzleEXT(GLuint res, GLuint @in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW);
            public static SwizzleEXT glSwizzleEXT = (SwizzleEXT)GetDelegateForExtensionMethod("glSwizzleEXT", typeof(Delegates.SwizzleEXT));

            #endregion SwizzleEXT

            #region WriteMaskEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void WriteMaskEXT(GLuint res, GLuint @in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW);
            public static WriteMaskEXT glWriteMaskEXT = (WriteMaskEXT)GetDelegateForExtensionMethod("glWriteMaskEXT", typeof(Delegates.WriteMaskEXT));

            #endregion WriteMaskEXT

            #region InsertComponentEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void InsertComponentEXT(GLuint res, GLuint src, GLuint num);
            public static InsertComponentEXT glInsertComponentEXT = (InsertComponentEXT)GetDelegateForExtensionMethod("glInsertComponentEXT", typeof(Delegates.InsertComponentEXT));

            #endregion InsertComponentEXT

            #region ExtractComponentEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void ExtractComponentEXT(GLuint res, GLuint src, GLuint num);
            public static ExtractComponentEXT glExtractComponentEXT = (ExtractComponentEXT)GetDelegateForExtensionMethod("glExtractComponentEXT", typeof(Delegates.ExtractComponentEXT));

            #endregion ExtractComponentEXT

            #region GenSymbolsEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate GLuint GenSymbolsEXT(GLenum datatype, GLenum storagetype, GLenum range, GLuint components);
            public static GenSymbolsEXT glGenSymbolsEXT = (GenSymbolsEXT)GetDelegateForExtensionMethod("glGenSymbolsEXT", typeof(Delegates.GenSymbolsEXT));

            #endregion GenSymbolsEXT

            #region SetInvariantEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void SetInvariantEXT(GLuint id, GLenum type, IntPtr addr);
            public static SetInvariantEXT glSetInvariantEXT = (SetInvariantEXT)GetDelegateForExtensionMethod("glSetInvariantEXT", typeof(Delegates.SetInvariantEXT));

            #endregion SetInvariantEXT

            #region SetLocalConstantEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void SetLocalConstantEXT(GLuint id, GLenum type, IntPtr addr);
            public static SetLocalConstantEXT glSetLocalConstantEXT = (SetLocalConstantEXT)GetDelegateForExtensionMethod("glSetLocalConstantEXT", typeof(Delegates.SetLocalConstantEXT));

            #endregion SetLocalConstantEXT

            #region VariantbvEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void VariantbvEXT(GLuint id, IntPtr addr);
            public static VariantbvEXT glVariantbvEXT = (VariantbvEXT)GetDelegateForExtensionMethod("glVariantbvEXT", typeof(Delegates.VariantbvEXT));

            #endregion VariantbvEXT

            #region VariantsvEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void VariantsvEXT(GLuint id, IntPtr addr);
            public static VariantsvEXT glVariantsvEXT = (VariantsvEXT)GetDelegateForExtensionMethod("glVariantsvEXT", typeof(Delegates.VariantsvEXT));

            #endregion VariantsvEXT

            #region VariantivEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void VariantivEXT(GLuint id, IntPtr addr);
            public static VariantivEXT glVariantivEXT = (VariantivEXT)GetDelegateForExtensionMethod("glVariantivEXT", typeof(Delegates.VariantivEXT));

            #endregion VariantivEXT

            #region VariantfvEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void VariantfvEXT(GLuint id, IntPtr addr);
            public static VariantfvEXT glVariantfvEXT = (VariantfvEXT)GetDelegateForExtensionMethod("glVariantfvEXT", typeof(Delegates.VariantfvEXT));

            #endregion VariantfvEXT

            #region VariantdvEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void VariantdvEXT(GLuint id, IntPtr addr);
            public static VariantdvEXT glVariantdvEXT = (VariantdvEXT)GetDelegateForExtensionMethod("glVariantdvEXT", typeof(Delegates.VariantdvEXT));

            #endregion VariantdvEXT

            #region VariantubvEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void VariantubvEXT(GLuint id, IntPtr addr);
            public static VariantubvEXT glVariantubvEXT = (VariantubvEXT)GetDelegateForExtensionMethod("glVariantubvEXT", typeof(Delegates.VariantubvEXT));

            #endregion VariantubvEXT

            #region VariantusvEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void VariantusvEXT(GLuint id, IntPtr addr);
            public static VariantusvEXT glVariantusvEXT = (VariantusvEXT)GetDelegateForExtensionMethod("glVariantusvEXT", typeof(Delegates.VariantusvEXT));

            #endregion VariantusvEXT

            #region VariantuivEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void VariantuivEXT(GLuint id, IntPtr addr);
            public static VariantuivEXT glVariantuivEXT = (VariantuivEXT)GetDelegateForExtensionMethod("glVariantuivEXT", typeof(Delegates.VariantuivEXT));

            #endregion VariantuivEXT

            #region VariantPointerEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void VariantPointerEXT(GLuint id, GLenum type, GLuint stride, IntPtr addr);
            public static VariantPointerEXT glVariantPointerEXT = (VariantPointerEXT)GetDelegateForExtensionMethod("glVariantPointerEXT", typeof(Delegates.VariantPointerEXT));

            #endregion VariantPointerEXT

            #region EnableVariantClientStateEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void EnableVariantClientStateEXT(GLuint id);
            public static EnableVariantClientStateEXT glEnableVariantClientStateEXT = (EnableVariantClientStateEXT)GetDelegateForExtensionMethod("glEnableVariantClientStateEXT", typeof(Delegates.EnableVariantClientStateEXT));

            #endregion EnableVariantClientStateEXT

            #region DisableVariantClientStateEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void DisableVariantClientStateEXT(GLuint id);
            public static DisableVariantClientStateEXT glDisableVariantClientStateEXT = (DisableVariantClientStateEXT)GetDelegateForExtensionMethod("glDisableVariantClientStateEXT", typeof(Delegates.DisableVariantClientStateEXT));

            #endregion DisableVariantClientStateEXT

            #region BindLightParameterEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate GLuint BindLightParameterEXT(GLenum light, GLenum value);
            public static BindLightParameterEXT glBindLightParameterEXT = (BindLightParameterEXT)GetDelegateForExtensionMethod("glBindLightParameterEXT", typeof(Delegates.BindLightParameterEXT));

            #endregion BindLightParameterEXT

            #region BindMaterialParameterEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate GLuint BindMaterialParameterEXT(GLenum face, GLenum value);
            public static BindMaterialParameterEXT glBindMaterialParameterEXT = (BindMaterialParameterEXT)GetDelegateForExtensionMethod("glBindMaterialParameterEXT", typeof(Delegates.BindMaterialParameterEXT));

            #endregion BindMaterialParameterEXT

            #region BindTexGenParameterEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate GLuint BindTexGenParameterEXT(GLenum unit, GLenum coord, GLenum value);
            public static BindTexGenParameterEXT glBindTexGenParameterEXT = (BindTexGenParameterEXT)GetDelegateForExtensionMethod("glBindTexGenParameterEXT", typeof(Delegates.BindTexGenParameterEXT));

            #endregion BindTexGenParameterEXT

            #region BindTextureUnitParameterEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate GLuint BindTextureUnitParameterEXT(GLenum unit, GLenum value);
            public static BindTextureUnitParameterEXT glBindTextureUnitParameterEXT = (BindTextureUnitParameterEXT)GetDelegateForExtensionMethod("glBindTextureUnitParameterEXT", typeof(Delegates.BindTextureUnitParameterEXT));

            #endregion BindTextureUnitParameterEXT

            #region BindParameterEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate GLuint BindParameterEXT(GLenum value);
            public static BindParameterEXT glBindParameterEXT = (BindParameterEXT)GetDelegateForExtensionMethod("glBindParameterEXT", typeof(Delegates.BindParameterEXT));

            #endregion BindParameterEXT

            #region IsVariantEnabledEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate GLboolean IsVariantEnabledEXT(GLuint id, GLenum cap);
            public static IsVariantEnabledEXT glIsVariantEnabledEXT = (IsVariantEnabledEXT)GetDelegateForExtensionMethod("glIsVariantEnabledEXT", typeof(Delegates.IsVariantEnabledEXT));

            #endregion IsVariantEnabledEXT

            #region GetVariantBooleanvEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetVariantBooleanvEXT(GLuint id, GLenum value, IntPtr data);
            public static GetVariantBooleanvEXT glGetVariantBooleanvEXT = (GetVariantBooleanvEXT)GetDelegateForExtensionMethod("glGetVariantBooleanvEXT", typeof(Delegates.GetVariantBooleanvEXT));

            #endregion GetVariantBooleanvEXT

            #region GetVariantIntegervEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetVariantIntegervEXT(GLuint id, GLenum value, IntPtr data);
            public static GetVariantIntegervEXT glGetVariantIntegervEXT = (GetVariantIntegervEXT)GetDelegateForExtensionMethod("glGetVariantIntegervEXT", typeof(Delegates.GetVariantIntegervEXT));

            #endregion GetVariantIntegervEXT

            #region GetVariantFloatvEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetVariantFloatvEXT(GLuint id, GLenum value, IntPtr data);
            public static GetVariantFloatvEXT glGetVariantFloatvEXT = (GetVariantFloatvEXT)GetDelegateForExtensionMethod("glGetVariantFloatvEXT", typeof(Delegates.GetVariantFloatvEXT));

            #endregion GetVariantFloatvEXT

            #region GetVariantPointervEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetVariantPointervEXT(GLuint id, GLenum value, IntPtr data);
            public static GetVariantPointervEXT glGetVariantPointervEXT = (GetVariantPointervEXT)GetDelegateForExtensionMethod("glGetVariantPointervEXT", typeof(Delegates.GetVariantPointervEXT));

            #endregion GetVariantPointervEXT

            #region GetInvariantBooleanvEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetInvariantBooleanvEXT(GLuint id, GLenum value, IntPtr data);
            public static GetInvariantBooleanvEXT glGetInvariantBooleanvEXT = (GetInvariantBooleanvEXT)GetDelegateForExtensionMethod("glGetInvariantBooleanvEXT", typeof(Delegates.GetInvariantBooleanvEXT));

            #endregion GetInvariantBooleanvEXT

            #region GetInvariantIntegervEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetInvariantIntegervEXT(GLuint id, GLenum value, IntPtr data);
            public static GetInvariantIntegervEXT glGetInvariantIntegervEXT = (GetInvariantIntegervEXT)GetDelegateForExtensionMethod("glGetInvariantIntegervEXT", typeof(Delegates.GetInvariantIntegervEXT));

            #endregion GetInvariantIntegervEXT

            #region GetInvariantFloatvEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetInvariantFloatvEXT(GLuint id, GLenum value, IntPtr data);
            public static GetInvariantFloatvEXT glGetInvariantFloatvEXT = (GetInvariantFloatvEXT)GetDelegateForExtensionMethod("glGetInvariantFloatvEXT", typeof(Delegates.GetInvariantFloatvEXT));

            #endregion GetInvariantFloatvEXT

            #region GetLocalConstantBooleanvEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetLocalConstantBooleanvEXT(GLuint id, GLenum value, IntPtr data);
            public static GetLocalConstantBooleanvEXT glGetLocalConstantBooleanvEXT = (GetLocalConstantBooleanvEXT)GetDelegateForExtensionMethod("glGetLocalConstantBooleanvEXT", typeof(Delegates.GetLocalConstantBooleanvEXT));

            #endregion GetLocalConstantBooleanvEXT

            #region GetLocalConstantIntegervEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetLocalConstantIntegervEXT(GLuint id, GLenum value, IntPtr data);
            public static GetLocalConstantIntegervEXT glGetLocalConstantIntegervEXT = (GetLocalConstantIntegervEXT)GetDelegateForExtensionMethod("glGetLocalConstantIntegervEXT", typeof(Delegates.GetLocalConstantIntegervEXT));

            #endregion GetLocalConstantIntegervEXT

            #region GetLocalConstantFloatvEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetLocalConstantFloatvEXT(GLuint id, GLenum value, IntPtr data);
            public static GetLocalConstantFloatvEXT glGetLocalConstantFloatvEXT = (GetLocalConstantFloatvEXT)GetDelegateForExtensionMethod("glGetLocalConstantFloatvEXT", typeof(Delegates.GetLocalConstantFloatvEXT));

            #endregion GetLocalConstantFloatvEXT

            #region VertexStream1sATI

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexStream1sATI(GLenum stream, GLshort x);
            public static VertexStream1sATI glVertexStream1sATI = (VertexStream1sATI)GetDelegateForExtensionMethod("glVertexStream1sATI", typeof(Delegates.VertexStream1sATI));

            #endregion VertexStream1sATI

            #region VertexStream1svATI

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexStream1svATI(GLenum stream, IntPtr coords);
            public static VertexStream1svATI glVertexStream1svATI = (VertexStream1svATI)GetDelegateForExtensionMethod("glVertexStream1svATI", typeof(Delegates.VertexStream1svATI));

            #endregion VertexStream1svATI

            #region VertexStream1iATI

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexStream1iATI(GLenum stream, GLint x);
            public static VertexStream1iATI glVertexStream1iATI = (VertexStream1iATI)GetDelegateForExtensionMethod("glVertexStream1iATI", typeof(Delegates.VertexStream1iATI));

            #endregion VertexStream1iATI

            #region VertexStream1ivATI

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexStream1ivATI(GLenum stream, IntPtr coords);
            public static VertexStream1ivATI glVertexStream1ivATI = (VertexStream1ivATI)GetDelegateForExtensionMethod("glVertexStream1ivATI", typeof(Delegates.VertexStream1ivATI));

            #endregion VertexStream1ivATI

            #region VertexStream1fATI

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexStream1fATI(GLenum stream, GLfloat x);
            public static VertexStream1fATI glVertexStream1fATI = (VertexStream1fATI)GetDelegateForExtensionMethod("glVertexStream1fATI", typeof(Delegates.VertexStream1fATI));

            #endregion VertexStream1fATI

            #region VertexStream1fvATI

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexStream1fvATI(GLenum stream, IntPtr coords);
            public static VertexStream1fvATI glVertexStream1fvATI = (VertexStream1fvATI)GetDelegateForExtensionMethod("glVertexStream1fvATI", typeof(Delegates.VertexStream1fvATI));

            #endregion VertexStream1fvATI

            #region VertexStream1dATI

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexStream1dATI(GLenum stream, GLdouble x);
            public static VertexStream1dATI glVertexStream1dATI = (VertexStream1dATI)GetDelegateForExtensionMethod("glVertexStream1dATI", typeof(Delegates.VertexStream1dATI));

            #endregion VertexStream1dATI

            #region VertexStream1dvATI

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexStream1dvATI(GLenum stream, IntPtr coords);
            public static VertexStream1dvATI glVertexStream1dvATI = (VertexStream1dvATI)GetDelegateForExtensionMethod("glVertexStream1dvATI", typeof(Delegates.VertexStream1dvATI));

            #endregion VertexStream1dvATI

            #region VertexStream2sATI

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexStream2sATI(GLenum stream, GLshort x, GLshort y);
            public static VertexStream2sATI glVertexStream2sATI = (VertexStream2sATI)GetDelegateForExtensionMethod("glVertexStream2sATI", typeof(Delegates.VertexStream2sATI));

            #endregion VertexStream2sATI

            #region VertexStream2svATI

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexStream2svATI(GLenum stream, IntPtr coords);
            public static VertexStream2svATI glVertexStream2svATI = (VertexStream2svATI)GetDelegateForExtensionMethod("glVertexStream2svATI", typeof(Delegates.VertexStream2svATI));

            #endregion VertexStream2svATI

            #region VertexStream2iATI

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexStream2iATI(GLenum stream, GLint x, GLint y);
            public static VertexStream2iATI glVertexStream2iATI = (VertexStream2iATI)GetDelegateForExtensionMethod("glVertexStream2iATI", typeof(Delegates.VertexStream2iATI));

            #endregion VertexStream2iATI

            #region VertexStream2ivATI

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexStream2ivATI(GLenum stream, IntPtr coords);
            public static VertexStream2ivATI glVertexStream2ivATI = (VertexStream2ivATI)GetDelegateForExtensionMethod("glVertexStream2ivATI", typeof(Delegates.VertexStream2ivATI));

            #endregion VertexStream2ivATI

            #region VertexStream2fATI

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexStream2fATI(GLenum stream, GLfloat x, GLfloat y);
            public static VertexStream2fATI glVertexStream2fATI = (VertexStream2fATI)GetDelegateForExtensionMethod("glVertexStream2fATI", typeof(Delegates.VertexStream2fATI));

            #endregion VertexStream2fATI

            #region VertexStream2fvATI

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexStream2fvATI(GLenum stream, IntPtr coords);
            public static VertexStream2fvATI glVertexStream2fvATI = (VertexStream2fvATI)GetDelegateForExtensionMethod("glVertexStream2fvATI", typeof(Delegates.VertexStream2fvATI));

            #endregion VertexStream2fvATI

            #region VertexStream2dATI

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexStream2dATI(GLenum stream, GLdouble x, GLdouble y);
            public static VertexStream2dATI glVertexStream2dATI = (VertexStream2dATI)GetDelegateForExtensionMethod("glVertexStream2dATI", typeof(Delegates.VertexStream2dATI));

            #endregion VertexStream2dATI

            #region VertexStream2dvATI

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexStream2dvATI(GLenum stream, IntPtr coords);
            public static VertexStream2dvATI glVertexStream2dvATI = (VertexStream2dvATI)GetDelegateForExtensionMethod("glVertexStream2dvATI", typeof(Delegates.VertexStream2dvATI));

            #endregion VertexStream2dvATI

            #region VertexStream3sATI

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexStream3sATI(GLenum stream, GLshort x, GLshort y, GLshort z);
            public static VertexStream3sATI glVertexStream3sATI = (VertexStream3sATI)GetDelegateForExtensionMethod("glVertexStream3sATI", typeof(Delegates.VertexStream3sATI));

            #endregion VertexStream3sATI

            #region VertexStream3svATI

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexStream3svATI(GLenum stream, IntPtr coords);
            public static VertexStream3svATI glVertexStream3svATI = (VertexStream3svATI)GetDelegateForExtensionMethod("glVertexStream3svATI", typeof(Delegates.VertexStream3svATI));

            #endregion VertexStream3svATI

            #region VertexStream3iATI

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexStream3iATI(GLenum stream, GLint x, GLint y, GLint z);
            public static VertexStream3iATI glVertexStream3iATI = (VertexStream3iATI)GetDelegateForExtensionMethod("glVertexStream3iATI", typeof(Delegates.VertexStream3iATI));

            #endregion VertexStream3iATI

            #region VertexStream3ivATI

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexStream3ivATI(GLenum stream, IntPtr coords);
            public static VertexStream3ivATI glVertexStream3ivATI = (VertexStream3ivATI)GetDelegateForExtensionMethod("glVertexStream3ivATI", typeof(Delegates.VertexStream3ivATI));

            #endregion VertexStream3ivATI

            #region VertexStream3fATI

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexStream3fATI(GLenum stream, GLfloat x, GLfloat y, GLfloat z);
            public static VertexStream3fATI glVertexStream3fATI = (VertexStream3fATI)GetDelegateForExtensionMethod("glVertexStream3fATI", typeof(Delegates.VertexStream3fATI));

            #endregion VertexStream3fATI

            #region VertexStream3fvATI

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexStream3fvATI(GLenum stream, IntPtr coords);
            public static VertexStream3fvATI glVertexStream3fvATI = (VertexStream3fvATI)GetDelegateForExtensionMethod("glVertexStream3fvATI", typeof(Delegates.VertexStream3fvATI));

            #endregion VertexStream3fvATI

            #region VertexStream3dATI

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexStream3dATI(GLenum stream, GLdouble x, GLdouble y, GLdouble z);
            public static VertexStream3dATI glVertexStream3dATI = (VertexStream3dATI)GetDelegateForExtensionMethod("glVertexStream3dATI", typeof(Delegates.VertexStream3dATI));

            #endregion VertexStream3dATI

            #region VertexStream3dvATI

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexStream3dvATI(GLenum stream, IntPtr coords);
            public static VertexStream3dvATI glVertexStream3dvATI = (VertexStream3dvATI)GetDelegateForExtensionMethod("glVertexStream3dvATI", typeof(Delegates.VertexStream3dvATI));

            #endregion VertexStream3dvATI

            #region VertexStream4sATI

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexStream4sATI(GLenum stream, GLshort x, GLshort y, GLshort z, GLshort w);
            public static VertexStream4sATI glVertexStream4sATI = (VertexStream4sATI)GetDelegateForExtensionMethod("glVertexStream4sATI", typeof(Delegates.VertexStream4sATI));

            #endregion VertexStream4sATI

            #region VertexStream4svATI

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexStream4svATI(GLenum stream, IntPtr coords);
            public static VertexStream4svATI glVertexStream4svATI = (VertexStream4svATI)GetDelegateForExtensionMethod("glVertexStream4svATI", typeof(Delegates.VertexStream4svATI));

            #endregion VertexStream4svATI

            #region VertexStream4iATI

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexStream4iATI(GLenum stream, GLint x, GLint y, GLint z, GLint w);
            public static VertexStream4iATI glVertexStream4iATI = (VertexStream4iATI)GetDelegateForExtensionMethod("glVertexStream4iATI", typeof(Delegates.VertexStream4iATI));

            #endregion VertexStream4iATI

            #region VertexStream4ivATI

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexStream4ivATI(GLenum stream, IntPtr coords);
            public static VertexStream4ivATI glVertexStream4ivATI = (VertexStream4ivATI)GetDelegateForExtensionMethod("glVertexStream4ivATI", typeof(Delegates.VertexStream4ivATI));

            #endregion VertexStream4ivATI

            #region VertexStream4fATI

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexStream4fATI(GLenum stream, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
            public static VertexStream4fATI glVertexStream4fATI = (VertexStream4fATI)GetDelegateForExtensionMethod("glVertexStream4fATI", typeof(Delegates.VertexStream4fATI));

            #endregion VertexStream4fATI

            #region VertexStream4fvATI

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexStream4fvATI(GLenum stream, IntPtr coords);
            public static VertexStream4fvATI glVertexStream4fvATI = (VertexStream4fvATI)GetDelegateForExtensionMethod("glVertexStream4fvATI", typeof(Delegates.VertexStream4fvATI));

            #endregion VertexStream4fvATI

            #region VertexStream4dATI

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexStream4dATI(GLenum stream, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
            public static VertexStream4dATI glVertexStream4dATI = (VertexStream4dATI)GetDelegateForExtensionMethod("glVertexStream4dATI", typeof(Delegates.VertexStream4dATI));

            #endregion VertexStream4dATI

            #region VertexStream4dvATI

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexStream4dvATI(GLenum stream, IntPtr coords);
            public static VertexStream4dvATI glVertexStream4dvATI = (VertexStream4dvATI)GetDelegateForExtensionMethod("glVertexStream4dvATI", typeof(Delegates.VertexStream4dvATI));

            #endregion VertexStream4dvATI

            #region NormalStream3bATI

            /// <summary>
            /// 
            /// </summary>
            public delegate void NormalStream3bATI(GLenum stream, GLbyte nx, GLbyte ny, GLbyte nz);
            public static NormalStream3bATI glNormalStream3bATI = (NormalStream3bATI)GetDelegateForExtensionMethod("glNormalStream3bATI", typeof(Delegates.NormalStream3bATI));

            #endregion NormalStream3bATI

            #region NormalStream3bvATI

            /// <summary>
            /// 
            /// </summary>
            public delegate void NormalStream3bvATI(GLenum stream, IntPtr coords);
            public static NormalStream3bvATI glNormalStream3bvATI = (NormalStream3bvATI)GetDelegateForExtensionMethod("glNormalStream3bvATI", typeof(Delegates.NormalStream3bvATI));

            #endregion NormalStream3bvATI

            #region NormalStream3sATI

            /// <summary>
            /// 
            /// </summary>
            public delegate void NormalStream3sATI(GLenum stream, GLshort nx, GLshort ny, GLshort nz);
            public static NormalStream3sATI glNormalStream3sATI = (NormalStream3sATI)GetDelegateForExtensionMethod("glNormalStream3sATI", typeof(Delegates.NormalStream3sATI));

            #endregion NormalStream3sATI

            #region NormalStream3svATI

            /// <summary>
            /// 
            /// </summary>
            public delegate void NormalStream3svATI(GLenum stream, IntPtr coords);
            public static NormalStream3svATI glNormalStream3svATI = (NormalStream3svATI)GetDelegateForExtensionMethod("glNormalStream3svATI", typeof(Delegates.NormalStream3svATI));

            #endregion NormalStream3svATI

            #region NormalStream3iATI

            /// <summary>
            /// 
            /// </summary>
            public delegate void NormalStream3iATI(GLenum stream, GLint nx, GLint ny, GLint nz);
            public static NormalStream3iATI glNormalStream3iATI = (NormalStream3iATI)GetDelegateForExtensionMethod("glNormalStream3iATI", typeof(Delegates.NormalStream3iATI));

            #endregion NormalStream3iATI

            #region NormalStream3ivATI

            /// <summary>
            /// 
            /// </summary>
            public delegate void NormalStream3ivATI(GLenum stream, IntPtr coords);
            public static NormalStream3ivATI glNormalStream3ivATI = (NormalStream3ivATI)GetDelegateForExtensionMethod("glNormalStream3ivATI", typeof(Delegates.NormalStream3ivATI));

            #endregion NormalStream3ivATI

            #region NormalStream3fATI

            /// <summary>
            /// 
            /// </summary>
            public delegate void NormalStream3fATI(GLenum stream, GLfloat nx, GLfloat ny, GLfloat nz);
            public static NormalStream3fATI glNormalStream3fATI = (NormalStream3fATI)GetDelegateForExtensionMethod("glNormalStream3fATI", typeof(Delegates.NormalStream3fATI));

            #endregion NormalStream3fATI

            #region NormalStream3fvATI

            /// <summary>
            /// 
            /// </summary>
            public delegate void NormalStream3fvATI(GLenum stream, IntPtr coords);
            public static NormalStream3fvATI glNormalStream3fvATI = (NormalStream3fvATI)GetDelegateForExtensionMethod("glNormalStream3fvATI", typeof(Delegates.NormalStream3fvATI));

            #endregion NormalStream3fvATI

            #region NormalStream3dATI

            /// <summary>
            /// 
            /// </summary>
            public delegate void NormalStream3dATI(GLenum stream, GLdouble nx, GLdouble ny, GLdouble nz);
            public static NormalStream3dATI glNormalStream3dATI = (NormalStream3dATI)GetDelegateForExtensionMethod("glNormalStream3dATI", typeof(Delegates.NormalStream3dATI));

            #endregion NormalStream3dATI

            #region NormalStream3dvATI

            /// <summary>
            /// 
            /// </summary>
            public delegate void NormalStream3dvATI(GLenum stream, IntPtr coords);
            public static NormalStream3dvATI glNormalStream3dvATI = (NormalStream3dvATI)GetDelegateForExtensionMethod("glNormalStream3dvATI", typeof(Delegates.NormalStream3dvATI));

            #endregion NormalStream3dvATI

            #region ClientActiveVertexStreamATI

            /// <summary>
            /// 
            /// </summary>
            public delegate void ClientActiveVertexStreamATI(GLenum stream);
            public static ClientActiveVertexStreamATI glClientActiveVertexStreamATI = (ClientActiveVertexStreamATI)GetDelegateForExtensionMethod("glClientActiveVertexStreamATI", typeof(Delegates.ClientActiveVertexStreamATI));

            #endregion ClientActiveVertexStreamATI

            #region VertexBlendEnviATI

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexBlendEnviATI(GLenum pname, GLint param);
            public static VertexBlendEnviATI glVertexBlendEnviATI = (VertexBlendEnviATI)GetDelegateForExtensionMethod("glVertexBlendEnviATI", typeof(Delegates.VertexBlendEnviATI));

            #endregion VertexBlendEnviATI

            #region VertexBlendEnvfATI

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexBlendEnvfATI(GLenum pname, GLfloat param);
            public static VertexBlendEnvfATI glVertexBlendEnvfATI = (VertexBlendEnvfATI)GetDelegateForExtensionMethod("glVertexBlendEnvfATI", typeof(Delegates.VertexBlendEnvfATI));

            #endregion VertexBlendEnvfATI

            #region ElementPointerATI

            /// <summary>
            /// 
            /// </summary>
            public delegate void ElementPointerATI(GLenum type, IntPtr pointer);
            public static ElementPointerATI glElementPointerATI = (ElementPointerATI)GetDelegateForExtensionMethod("glElementPointerATI", typeof(Delegates.ElementPointerATI));

            #endregion ElementPointerATI

            #region DrawElementArrayATI

            /// <summary>
            /// 
            /// </summary>
            public delegate void DrawElementArrayATI(GLenum mode, GLsizei count);
            public static DrawElementArrayATI glDrawElementArrayATI = (DrawElementArrayATI)GetDelegateForExtensionMethod("glDrawElementArrayATI", typeof(Delegates.DrawElementArrayATI));

            #endregion DrawElementArrayATI

            #region DrawRangeElementArrayATI

            /// <summary>
            /// 
            /// </summary>
            public delegate void DrawRangeElementArrayATI(GLenum mode, GLuint start, GLuint end, GLsizei count);
            public static DrawRangeElementArrayATI glDrawRangeElementArrayATI = (DrawRangeElementArrayATI)GetDelegateForExtensionMethod("glDrawRangeElementArrayATI", typeof(Delegates.DrawRangeElementArrayATI));

            #endregion DrawRangeElementArrayATI

            #region DrawMeshArraysSUN

            /// <summary>
            /// 
            /// </summary>
            public delegate void DrawMeshArraysSUN(GLenum mode, GLint first, GLsizei count, GLsizei width);
            public static DrawMeshArraysSUN glDrawMeshArraysSUN = (DrawMeshArraysSUN)GetDelegateForExtensionMethod("glDrawMeshArraysSUN", typeof(Delegates.DrawMeshArraysSUN));

            #endregion DrawMeshArraysSUN

            #region GenOcclusionQueriesNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void GenOcclusionQueriesNV(GLsizei n, IntPtr ids);
            public static GenOcclusionQueriesNV glGenOcclusionQueriesNV = (GenOcclusionQueriesNV)GetDelegateForExtensionMethod("glGenOcclusionQueriesNV", typeof(Delegates.GenOcclusionQueriesNV));

            #endregion GenOcclusionQueriesNV

            #region DeleteOcclusionQueriesNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void DeleteOcclusionQueriesNV(GLsizei n, IntPtr ids);
            public static DeleteOcclusionQueriesNV glDeleteOcclusionQueriesNV = (DeleteOcclusionQueriesNV)GetDelegateForExtensionMethod("glDeleteOcclusionQueriesNV", typeof(Delegates.DeleteOcclusionQueriesNV));

            #endregion DeleteOcclusionQueriesNV

            #region IsOcclusionQueryNV

            /// <summary>
            /// 
            /// </summary>
            public delegate GLboolean IsOcclusionQueryNV(GLuint id);
            public static IsOcclusionQueryNV glIsOcclusionQueryNV = (IsOcclusionQueryNV)GetDelegateForExtensionMethod("glIsOcclusionQueryNV", typeof(Delegates.IsOcclusionQueryNV));

            #endregion IsOcclusionQueryNV

            #region BeginOcclusionQueryNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void BeginOcclusionQueryNV(GLuint id);
            public static BeginOcclusionQueryNV glBeginOcclusionQueryNV = (BeginOcclusionQueryNV)GetDelegateForExtensionMethod("glBeginOcclusionQueryNV", typeof(Delegates.BeginOcclusionQueryNV));

            #endregion BeginOcclusionQueryNV

            #region EndOcclusionQueryNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void EndOcclusionQueryNV();
            public static EndOcclusionQueryNV glEndOcclusionQueryNV = (EndOcclusionQueryNV)GetDelegateForExtensionMethod("glEndOcclusionQueryNV", typeof(Delegates.EndOcclusionQueryNV));

            #endregion EndOcclusionQueryNV

            #region GetOcclusionQueryivNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetOcclusionQueryivNV(GLuint id, GLenum pname, IntPtr parameters);
            public static GetOcclusionQueryivNV glGetOcclusionQueryivNV = (GetOcclusionQueryivNV)GetDelegateForExtensionMethod("glGetOcclusionQueryivNV", typeof(Delegates.GetOcclusionQueryivNV));

            #endregion GetOcclusionQueryivNV

            #region GetOcclusionQueryuivNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetOcclusionQueryuivNV(GLuint id, GLenum pname, IntPtr parameters);
            public static GetOcclusionQueryuivNV glGetOcclusionQueryuivNV = (GetOcclusionQueryuivNV)GetDelegateForExtensionMethod("glGetOcclusionQueryuivNV", typeof(Delegates.GetOcclusionQueryuivNV));

            #endregion GetOcclusionQueryuivNV

            #region PointParameteriNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void PointParameteriNV(GLenum pname, GLint param);
            public static PointParameteriNV glPointParameteriNV = (PointParameteriNV)GetDelegateForExtensionMethod("glPointParameteriNV", typeof(Delegates.PointParameteriNV));

            #endregion PointParameteriNV

            #region PointParameterivNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void PointParameterivNV(GLenum pname, IntPtr parameters);
            public static PointParameterivNV glPointParameterivNV = (PointParameterivNV)GetDelegateForExtensionMethod("glPointParameterivNV", typeof(Delegates.PointParameterivNV));

            #endregion PointParameterivNV

            #region ActiveStencilFaceEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void ActiveStencilFaceEXT(GLenum face);
            public static ActiveStencilFaceEXT glActiveStencilFaceEXT = (ActiveStencilFaceEXT)GetDelegateForExtensionMethod("glActiveStencilFaceEXT", typeof(Delegates.ActiveStencilFaceEXT));

            #endregion ActiveStencilFaceEXT

            #region ElementPointerAPPLE

            /// <summary>
            /// 
            /// </summary>
            public delegate void ElementPointerAPPLE(GLenum type, IntPtr pointer);
            public static ElementPointerAPPLE glElementPointerAPPLE = (ElementPointerAPPLE)GetDelegateForExtensionMethod("glElementPointerAPPLE", typeof(Delegates.ElementPointerAPPLE));

            #endregion ElementPointerAPPLE

            #region DrawElementArrayAPPLE

            /// <summary>
            /// 
            /// </summary>
            public delegate void DrawElementArrayAPPLE(GLenum mode, GLint first, GLsizei count);
            public static DrawElementArrayAPPLE glDrawElementArrayAPPLE = (DrawElementArrayAPPLE)GetDelegateForExtensionMethod("glDrawElementArrayAPPLE", typeof(Delegates.DrawElementArrayAPPLE));

            #endregion DrawElementArrayAPPLE

            #region DrawRangeElementArrayAPPLE

            /// <summary>
            /// 
            /// </summary>
            public delegate void DrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count);
            public static DrawRangeElementArrayAPPLE glDrawRangeElementArrayAPPLE = (DrawRangeElementArrayAPPLE)GetDelegateForExtensionMethod("glDrawRangeElementArrayAPPLE", typeof(Delegates.DrawRangeElementArrayAPPLE));

            #endregion DrawRangeElementArrayAPPLE

            #region MultiDrawElementArrayAPPLE

            /// <summary>
            /// 
            /// </summary>
            public delegate void MultiDrawElementArrayAPPLE(GLenum mode, IntPtr first, IntPtr count, GLsizei primcount);
            public static MultiDrawElementArrayAPPLE glMultiDrawElementArrayAPPLE = (MultiDrawElementArrayAPPLE)GetDelegateForExtensionMethod("glMultiDrawElementArrayAPPLE", typeof(Delegates.MultiDrawElementArrayAPPLE));

            #endregion MultiDrawElementArrayAPPLE

            #region MultiDrawRangeElementArrayAPPLE

            /// <summary>
            /// 
            /// </summary>
            public delegate void MultiDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, IntPtr first, IntPtr count, GLsizei primcount);
            public static MultiDrawRangeElementArrayAPPLE glMultiDrawRangeElementArrayAPPLE = (MultiDrawRangeElementArrayAPPLE)GetDelegateForExtensionMethod("glMultiDrawRangeElementArrayAPPLE", typeof(Delegates.MultiDrawRangeElementArrayAPPLE));

            #endregion MultiDrawRangeElementArrayAPPLE

            #region GenFencesAPPLE

            /// <summary>
            /// 
            /// </summary>
            public delegate void GenFencesAPPLE(GLsizei n, IntPtr fences);
            public static GenFencesAPPLE glGenFencesAPPLE = (GenFencesAPPLE)GetDelegateForExtensionMethod("glGenFencesAPPLE", typeof(Delegates.GenFencesAPPLE));

            #endregion GenFencesAPPLE

            #region DeleteFencesAPPLE

            /// <summary>
            /// 
            /// </summary>
            public delegate void DeleteFencesAPPLE(GLsizei n, IntPtr fences);
            public static DeleteFencesAPPLE glDeleteFencesAPPLE = (DeleteFencesAPPLE)GetDelegateForExtensionMethod("glDeleteFencesAPPLE", typeof(Delegates.DeleteFencesAPPLE));

            #endregion DeleteFencesAPPLE

            #region SetFenceAPPLE

            /// <summary>
            /// 
            /// </summary>
            public delegate void SetFenceAPPLE(GLuint fence);
            public static SetFenceAPPLE glSetFenceAPPLE = (SetFenceAPPLE)GetDelegateForExtensionMethod("glSetFenceAPPLE", typeof(Delegates.SetFenceAPPLE));

            #endregion SetFenceAPPLE

            #region IsFenceAPPLE

            /// <summary>
            /// 
            /// </summary>
            public delegate GLboolean IsFenceAPPLE(GLuint fence);
            public static IsFenceAPPLE glIsFenceAPPLE = (IsFenceAPPLE)GetDelegateForExtensionMethod("glIsFenceAPPLE", typeof(Delegates.IsFenceAPPLE));

            #endregion IsFenceAPPLE

            #region TestFenceAPPLE

            /// <summary>
            /// 
            /// </summary>
            public delegate GLboolean TestFenceAPPLE(GLuint fence);
            public static TestFenceAPPLE glTestFenceAPPLE = (TestFenceAPPLE)GetDelegateForExtensionMethod("glTestFenceAPPLE", typeof(Delegates.TestFenceAPPLE));

            #endregion TestFenceAPPLE

            #region FinishFenceAPPLE

            /// <summary>
            /// 
            /// </summary>
            public delegate void FinishFenceAPPLE(GLuint fence);
            public static FinishFenceAPPLE glFinishFenceAPPLE = (FinishFenceAPPLE)GetDelegateForExtensionMethod("glFinishFenceAPPLE", typeof(Delegates.FinishFenceAPPLE));

            #endregion FinishFenceAPPLE

            #region TestObjectAPPLE

            /// <summary>
            /// 
            /// </summary>
            public delegate GLboolean TestObjectAPPLE(GLenum @object, GLuint name);
            public static TestObjectAPPLE glTestObjectAPPLE = (TestObjectAPPLE)GetDelegateForExtensionMethod("glTestObjectAPPLE", typeof(Delegates.TestObjectAPPLE));

            #endregion TestObjectAPPLE

            #region FinishObjectAPPLE

            /// <summary>
            /// 
            /// </summary>
            public delegate void FinishObjectAPPLE(GLenum @object, GLint name);
            public static FinishObjectAPPLE glFinishObjectAPPLE = (FinishObjectAPPLE)GetDelegateForExtensionMethod("glFinishObjectAPPLE", typeof(Delegates.FinishObjectAPPLE));

            #endregion FinishObjectAPPLE

            #region BindVertexArrayAPPLE

            /// <summary>
            /// 
            /// </summary>
            public delegate void BindVertexArrayAPPLE(GLuint array);
            public static BindVertexArrayAPPLE glBindVertexArrayAPPLE = (BindVertexArrayAPPLE)GetDelegateForExtensionMethod("glBindVertexArrayAPPLE", typeof(Delegates.BindVertexArrayAPPLE));

            #endregion BindVertexArrayAPPLE

            #region DeleteVertexArraysAPPLE

            /// <summary>
            /// 
            /// </summary>
            public delegate void DeleteVertexArraysAPPLE(GLsizei n, IntPtr arrays);
            public static DeleteVertexArraysAPPLE glDeleteVertexArraysAPPLE = (DeleteVertexArraysAPPLE)GetDelegateForExtensionMethod("glDeleteVertexArraysAPPLE", typeof(Delegates.DeleteVertexArraysAPPLE));

            #endregion DeleteVertexArraysAPPLE

            #region GenVertexArraysAPPLE

            /// <summary>
            /// 
            /// </summary>
            public delegate void GenVertexArraysAPPLE(GLsizei n, IntPtr arrays);
            public static GenVertexArraysAPPLE glGenVertexArraysAPPLE = (GenVertexArraysAPPLE)GetDelegateForExtensionMethod("glGenVertexArraysAPPLE", typeof(Delegates.GenVertexArraysAPPLE));

            #endregion GenVertexArraysAPPLE

            #region IsVertexArrayAPPLE

            /// <summary>
            /// 
            /// </summary>
            public delegate GLboolean IsVertexArrayAPPLE(GLuint array);
            public static IsVertexArrayAPPLE glIsVertexArrayAPPLE = (IsVertexArrayAPPLE)GetDelegateForExtensionMethod("glIsVertexArrayAPPLE", typeof(Delegates.IsVertexArrayAPPLE));

            #endregion IsVertexArrayAPPLE

            #region VertexArrayRangeAPPLE

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexArrayRangeAPPLE(GLsizei length, IntPtr pointer);
            public static VertexArrayRangeAPPLE glVertexArrayRangeAPPLE = (VertexArrayRangeAPPLE)GetDelegateForExtensionMethod("glVertexArrayRangeAPPLE", typeof(Delegates.VertexArrayRangeAPPLE));

            #endregion VertexArrayRangeAPPLE

            #region FlushVertexArrayRangeAPPLE

            /// <summary>
            /// 
            /// </summary>
            public delegate void FlushVertexArrayRangeAPPLE(GLsizei length, IntPtr pointer);
            public static FlushVertexArrayRangeAPPLE glFlushVertexArrayRangeAPPLE = (FlushVertexArrayRangeAPPLE)GetDelegateForExtensionMethod("glFlushVertexArrayRangeAPPLE", typeof(Delegates.FlushVertexArrayRangeAPPLE));

            #endregion FlushVertexArrayRangeAPPLE

            #region VertexArrayParameteriAPPLE

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexArrayParameteriAPPLE(GLenum pname, GLint param);
            public static VertexArrayParameteriAPPLE glVertexArrayParameteriAPPLE = (VertexArrayParameteriAPPLE)GetDelegateForExtensionMethod("glVertexArrayParameteriAPPLE", typeof(Delegates.VertexArrayParameteriAPPLE));

            #endregion VertexArrayParameteriAPPLE

            #region DrawBuffersATI

            /// <summary>
            /// 
            /// </summary>
            public delegate void DrawBuffersATI(GLsizei n, IntPtr bufs);
            public static DrawBuffersATI glDrawBuffersATI = (DrawBuffersATI)GetDelegateForExtensionMethod("glDrawBuffersATI", typeof(Delegates.DrawBuffersATI));

            #endregion DrawBuffersATI

            #region ProgramNamedParameter4fNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void ProgramNamedParameter4fNV(GLuint id, GLsizei len, IntPtr name, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
            public static ProgramNamedParameter4fNV glProgramNamedParameter4fNV = (ProgramNamedParameter4fNV)GetDelegateForExtensionMethod("glProgramNamedParameter4fNV", typeof(Delegates.ProgramNamedParameter4fNV));

            #endregion ProgramNamedParameter4fNV

            #region ProgramNamedParameter4dNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void ProgramNamedParameter4dNV(GLuint id, GLsizei len, IntPtr name, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
            public static ProgramNamedParameter4dNV glProgramNamedParameter4dNV = (ProgramNamedParameter4dNV)GetDelegateForExtensionMethod("glProgramNamedParameter4dNV", typeof(Delegates.ProgramNamedParameter4dNV));

            #endregion ProgramNamedParameter4dNV

            #region ProgramNamedParameter4fvNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void ProgramNamedParameter4fvNV(GLuint id, GLsizei len, IntPtr name, IntPtr v);
            public static ProgramNamedParameter4fvNV glProgramNamedParameter4fvNV = (ProgramNamedParameter4fvNV)GetDelegateForExtensionMethod("glProgramNamedParameter4fvNV", typeof(Delegates.ProgramNamedParameter4fvNV));

            #endregion ProgramNamedParameter4fvNV

            #region ProgramNamedParameter4dvNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void ProgramNamedParameter4dvNV(GLuint id, GLsizei len, IntPtr name, IntPtr v);
            public static ProgramNamedParameter4dvNV glProgramNamedParameter4dvNV = (ProgramNamedParameter4dvNV)GetDelegateForExtensionMethod("glProgramNamedParameter4dvNV", typeof(Delegates.ProgramNamedParameter4dvNV));

            #endregion ProgramNamedParameter4dvNV

            #region GetProgramNamedParameterfvNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetProgramNamedParameterfvNV(GLuint id, GLsizei len, IntPtr name, IntPtr parameters);
            public static GetProgramNamedParameterfvNV glGetProgramNamedParameterfvNV = (GetProgramNamedParameterfvNV)GetDelegateForExtensionMethod("glGetProgramNamedParameterfvNV", typeof(Delegates.GetProgramNamedParameterfvNV));

            #endregion GetProgramNamedParameterfvNV

            #region GetProgramNamedParameterdvNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetProgramNamedParameterdvNV(GLuint id, GLsizei len, IntPtr name, IntPtr parameters);
            public static GetProgramNamedParameterdvNV glGetProgramNamedParameterdvNV = (GetProgramNamedParameterdvNV)GetDelegateForExtensionMethod("glGetProgramNamedParameterdvNV", typeof(Delegates.GetProgramNamedParameterdvNV));

            #endregion GetProgramNamedParameterdvNV

            #region Vertex2hNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void Vertex2hNV(GLhalfNV x, GLhalfNV y);
            public static Vertex2hNV glVertex2hNV = (Vertex2hNV)GetDelegateForExtensionMethod("glVertex2hNV", typeof(Delegates.Vertex2hNV));

            #endregion Vertex2hNV

            #region Vertex2hvNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void Vertex2hvNV(IntPtr v);
            public static Vertex2hvNV glVertex2hvNV = (Vertex2hvNV)GetDelegateForExtensionMethod("glVertex2hvNV", typeof(Delegates.Vertex2hvNV));

            #endregion Vertex2hvNV

            #region Vertex3hNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void Vertex3hNV(GLhalfNV x, GLhalfNV y, GLhalfNV z);
            public static Vertex3hNV glVertex3hNV = (Vertex3hNV)GetDelegateForExtensionMethod("glVertex3hNV", typeof(Delegates.Vertex3hNV));

            #endregion Vertex3hNV

            #region Vertex3hvNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void Vertex3hvNV(IntPtr v);
            public static Vertex3hvNV glVertex3hvNV = (Vertex3hvNV)GetDelegateForExtensionMethod("glVertex3hvNV", typeof(Delegates.Vertex3hvNV));

            #endregion Vertex3hvNV

            #region Vertex4hNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void Vertex4hNV(GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w);
            public static Vertex4hNV glVertex4hNV = (Vertex4hNV)GetDelegateForExtensionMethod("glVertex4hNV", typeof(Delegates.Vertex4hNV));

            #endregion Vertex4hNV

            #region Vertex4hvNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void Vertex4hvNV(IntPtr v);
            public static Vertex4hvNV glVertex4hvNV = (Vertex4hvNV)GetDelegateForExtensionMethod("glVertex4hvNV", typeof(Delegates.Vertex4hvNV));

            #endregion Vertex4hvNV

            #region Normal3hNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void Normal3hNV(GLhalfNV nx, GLhalfNV ny, GLhalfNV nz);
            public static Normal3hNV glNormal3hNV = (Normal3hNV)GetDelegateForExtensionMethod("glNormal3hNV", typeof(Delegates.Normal3hNV));

            #endregion Normal3hNV

            #region Normal3hvNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void Normal3hvNV(IntPtr v);
            public static Normal3hvNV glNormal3hvNV = (Normal3hvNV)GetDelegateForExtensionMethod("glNormal3hvNV", typeof(Delegates.Normal3hvNV));

            #endregion Normal3hvNV

            #region Color3hNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void Color3hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue);
            public static Color3hNV glColor3hNV = (Color3hNV)GetDelegateForExtensionMethod("glColor3hNV", typeof(Delegates.Color3hNV));

            #endregion Color3hNV

            #region Color3hvNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void Color3hvNV(IntPtr v);
            public static Color3hvNV glColor3hvNV = (Color3hvNV)GetDelegateForExtensionMethod("glColor3hvNV", typeof(Delegates.Color3hvNV));

            #endregion Color3hvNV

            #region Color4hNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void Color4hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue, GLhalfNV alpha);
            public static Color4hNV glColor4hNV = (Color4hNV)GetDelegateForExtensionMethod("glColor4hNV", typeof(Delegates.Color4hNV));

            #endregion Color4hNV

            #region Color4hvNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void Color4hvNV(IntPtr v);
            public static Color4hvNV glColor4hvNV = (Color4hvNV)GetDelegateForExtensionMethod("glColor4hvNV", typeof(Delegates.Color4hvNV));

            #endregion Color4hvNV

            #region TexCoord1hNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void TexCoord1hNV(GLhalfNV s);
            public static TexCoord1hNV glTexCoord1hNV = (TexCoord1hNV)GetDelegateForExtensionMethod("glTexCoord1hNV", typeof(Delegates.TexCoord1hNV));

            #endregion TexCoord1hNV

            #region TexCoord1hvNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void TexCoord1hvNV(IntPtr v);
            public static TexCoord1hvNV glTexCoord1hvNV = (TexCoord1hvNV)GetDelegateForExtensionMethod("glTexCoord1hvNV", typeof(Delegates.TexCoord1hvNV));

            #endregion TexCoord1hvNV

            #region TexCoord2hNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void TexCoord2hNV(GLhalfNV s, GLhalfNV t);
            public static TexCoord2hNV glTexCoord2hNV = (TexCoord2hNV)GetDelegateForExtensionMethod("glTexCoord2hNV", typeof(Delegates.TexCoord2hNV));

            #endregion TexCoord2hNV

            #region TexCoord2hvNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void TexCoord2hvNV(IntPtr v);
            public static TexCoord2hvNV glTexCoord2hvNV = (TexCoord2hvNV)GetDelegateForExtensionMethod("glTexCoord2hvNV", typeof(Delegates.TexCoord2hvNV));

            #endregion TexCoord2hvNV

            #region TexCoord3hNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void TexCoord3hNV(GLhalfNV s, GLhalfNV t, GLhalfNV r);
            public static TexCoord3hNV glTexCoord3hNV = (TexCoord3hNV)GetDelegateForExtensionMethod("glTexCoord3hNV", typeof(Delegates.TexCoord3hNV));

            #endregion TexCoord3hNV

            #region TexCoord3hvNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void TexCoord3hvNV(IntPtr v);
            public static TexCoord3hvNV glTexCoord3hvNV = (TexCoord3hvNV)GetDelegateForExtensionMethod("glTexCoord3hvNV", typeof(Delegates.TexCoord3hvNV));

            #endregion TexCoord3hvNV

            #region TexCoord4hNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void TexCoord4hNV(GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q);
            public static TexCoord4hNV glTexCoord4hNV = (TexCoord4hNV)GetDelegateForExtensionMethod("glTexCoord4hNV", typeof(Delegates.TexCoord4hNV));

            #endregion TexCoord4hNV

            #region TexCoord4hvNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void TexCoord4hvNV(IntPtr v);
            public static TexCoord4hvNV glTexCoord4hvNV = (TexCoord4hvNV)GetDelegateForExtensionMethod("glTexCoord4hvNV", typeof(Delegates.TexCoord4hvNV));

            #endregion TexCoord4hvNV

            #region MultiTexCoord1hNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void MultiTexCoord1hNV(GLenum target, GLhalfNV s);
            public static MultiTexCoord1hNV glMultiTexCoord1hNV = (MultiTexCoord1hNV)GetDelegateForExtensionMethod("glMultiTexCoord1hNV", typeof(Delegates.MultiTexCoord1hNV));

            #endregion MultiTexCoord1hNV

            #region MultiTexCoord1hvNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void MultiTexCoord1hvNV(GLenum target, IntPtr v);
            public static MultiTexCoord1hvNV glMultiTexCoord1hvNV = (MultiTexCoord1hvNV)GetDelegateForExtensionMethod("glMultiTexCoord1hvNV", typeof(Delegates.MultiTexCoord1hvNV));

            #endregion MultiTexCoord1hvNV

            #region MultiTexCoord2hNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void MultiTexCoord2hNV(GLenum target, GLhalfNV s, GLhalfNV t);
            public static MultiTexCoord2hNV glMultiTexCoord2hNV = (MultiTexCoord2hNV)GetDelegateForExtensionMethod("glMultiTexCoord2hNV", typeof(Delegates.MultiTexCoord2hNV));

            #endregion MultiTexCoord2hNV

            #region MultiTexCoord2hvNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void MultiTexCoord2hvNV(GLenum target, IntPtr v);
            public static MultiTexCoord2hvNV glMultiTexCoord2hvNV = (MultiTexCoord2hvNV)GetDelegateForExtensionMethod("glMultiTexCoord2hvNV", typeof(Delegates.MultiTexCoord2hvNV));

            #endregion MultiTexCoord2hvNV

            #region MultiTexCoord3hNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void MultiTexCoord3hNV(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r);
            public static MultiTexCoord3hNV glMultiTexCoord3hNV = (MultiTexCoord3hNV)GetDelegateForExtensionMethod("glMultiTexCoord3hNV", typeof(Delegates.MultiTexCoord3hNV));

            #endregion MultiTexCoord3hNV

            #region MultiTexCoord3hvNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void MultiTexCoord3hvNV(GLenum target, IntPtr v);
            public static MultiTexCoord3hvNV glMultiTexCoord3hvNV = (MultiTexCoord3hvNV)GetDelegateForExtensionMethod("glMultiTexCoord3hvNV", typeof(Delegates.MultiTexCoord3hvNV));

            #endregion MultiTexCoord3hvNV

            #region MultiTexCoord4hNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void MultiTexCoord4hNV(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q);
            public static MultiTexCoord4hNV glMultiTexCoord4hNV = (MultiTexCoord4hNV)GetDelegateForExtensionMethod("glMultiTexCoord4hNV", typeof(Delegates.MultiTexCoord4hNV));

            #endregion MultiTexCoord4hNV

            #region MultiTexCoord4hvNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void MultiTexCoord4hvNV(GLenum target, IntPtr v);
            public static MultiTexCoord4hvNV glMultiTexCoord4hvNV = (MultiTexCoord4hvNV)GetDelegateForExtensionMethod("glMultiTexCoord4hvNV", typeof(Delegates.MultiTexCoord4hvNV));

            #endregion MultiTexCoord4hvNV

            #region FogCoordhNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void FogCoordhNV(GLhalfNV fog);
            public static FogCoordhNV glFogCoordhNV = (FogCoordhNV)GetDelegateForExtensionMethod("glFogCoordhNV", typeof(Delegates.FogCoordhNV));

            #endregion FogCoordhNV

            #region FogCoordhvNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void FogCoordhvNV(IntPtr fog);
            public static FogCoordhvNV glFogCoordhvNV = (FogCoordhvNV)GetDelegateForExtensionMethod("glFogCoordhvNV", typeof(Delegates.FogCoordhvNV));

            #endregion FogCoordhvNV

            #region SecondaryColor3hNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void SecondaryColor3hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue);
            public static SecondaryColor3hNV glSecondaryColor3hNV = (SecondaryColor3hNV)GetDelegateForExtensionMethod("glSecondaryColor3hNV", typeof(Delegates.SecondaryColor3hNV));

            #endregion SecondaryColor3hNV

            #region SecondaryColor3hvNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void SecondaryColor3hvNV(IntPtr v);
            public static SecondaryColor3hvNV glSecondaryColor3hvNV = (SecondaryColor3hvNV)GetDelegateForExtensionMethod("glSecondaryColor3hvNV", typeof(Delegates.SecondaryColor3hvNV));

            #endregion SecondaryColor3hvNV

            #region VertexWeighthNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexWeighthNV(GLhalfNV weight);
            public static VertexWeighthNV glVertexWeighthNV = (VertexWeighthNV)GetDelegateForExtensionMethod("glVertexWeighthNV", typeof(Delegates.VertexWeighthNV));

            #endregion VertexWeighthNV

            #region VertexWeighthvNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexWeighthvNV(IntPtr weight);
            public static VertexWeighthvNV glVertexWeighthvNV = (VertexWeighthvNV)GetDelegateForExtensionMethod("glVertexWeighthvNV", typeof(Delegates.VertexWeighthvNV));

            #endregion VertexWeighthvNV

            #region VertexAttrib1hNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib1hNV(GLuint index, GLhalfNV x);
            public static VertexAttrib1hNV glVertexAttrib1hNV = (VertexAttrib1hNV)GetDelegateForExtensionMethod("glVertexAttrib1hNV", typeof(Delegates.VertexAttrib1hNV));

            #endregion VertexAttrib1hNV

            #region VertexAttrib1hvNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib1hvNV(GLuint index, IntPtr v);
            public static VertexAttrib1hvNV glVertexAttrib1hvNV = (VertexAttrib1hvNV)GetDelegateForExtensionMethod("glVertexAttrib1hvNV", typeof(Delegates.VertexAttrib1hvNV));

            #endregion VertexAttrib1hvNV

            #region VertexAttrib2hNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib2hNV(GLuint index, GLhalfNV x, GLhalfNV y);
            public static VertexAttrib2hNV glVertexAttrib2hNV = (VertexAttrib2hNV)GetDelegateForExtensionMethod("glVertexAttrib2hNV", typeof(Delegates.VertexAttrib2hNV));

            #endregion VertexAttrib2hNV

            #region VertexAttrib2hvNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib2hvNV(GLuint index, IntPtr v);
            public static VertexAttrib2hvNV glVertexAttrib2hvNV = (VertexAttrib2hvNV)GetDelegateForExtensionMethod("glVertexAttrib2hvNV", typeof(Delegates.VertexAttrib2hvNV));

            #endregion VertexAttrib2hvNV

            #region VertexAttrib3hNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib3hNV(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z);
            public static VertexAttrib3hNV glVertexAttrib3hNV = (VertexAttrib3hNV)GetDelegateForExtensionMethod("glVertexAttrib3hNV", typeof(Delegates.VertexAttrib3hNV));

            #endregion VertexAttrib3hNV

            #region VertexAttrib3hvNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib3hvNV(GLuint index, IntPtr v);
            public static VertexAttrib3hvNV glVertexAttrib3hvNV = (VertexAttrib3hvNV)GetDelegateForExtensionMethod("glVertexAttrib3hvNV", typeof(Delegates.VertexAttrib3hvNV));

            #endregion VertexAttrib3hvNV

            #region VertexAttrib4hNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib4hNV(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w);
            public static VertexAttrib4hNV glVertexAttrib4hNV = (VertexAttrib4hNV)GetDelegateForExtensionMethod("glVertexAttrib4hNV", typeof(Delegates.VertexAttrib4hNV));

            #endregion VertexAttrib4hNV

            #region VertexAttrib4hvNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttrib4hvNV(GLuint index, IntPtr v);
            public static VertexAttrib4hvNV glVertexAttrib4hvNV = (VertexAttrib4hvNV)GetDelegateForExtensionMethod("glVertexAttrib4hvNV", typeof(Delegates.VertexAttrib4hvNV));

            #endregion VertexAttrib4hvNV

            #region VertexAttribs1hvNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttribs1hvNV(GLuint index, GLsizei n, IntPtr v);
            public static VertexAttribs1hvNV glVertexAttribs1hvNV = (VertexAttribs1hvNV)GetDelegateForExtensionMethod("glVertexAttribs1hvNV", typeof(Delegates.VertexAttribs1hvNV));

            #endregion VertexAttribs1hvNV

            #region VertexAttribs2hvNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttribs2hvNV(GLuint index, GLsizei n, IntPtr v);
            public static VertexAttribs2hvNV glVertexAttribs2hvNV = (VertexAttribs2hvNV)GetDelegateForExtensionMethod("glVertexAttribs2hvNV", typeof(Delegates.VertexAttribs2hvNV));

            #endregion VertexAttribs2hvNV

            #region VertexAttribs3hvNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttribs3hvNV(GLuint index, GLsizei n, IntPtr v);
            public static VertexAttribs3hvNV glVertexAttribs3hvNV = (VertexAttribs3hvNV)GetDelegateForExtensionMethod("glVertexAttribs3hvNV", typeof(Delegates.VertexAttribs3hvNV));

            #endregion VertexAttribs3hvNV

            #region VertexAttribs4hvNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttribs4hvNV(GLuint index, GLsizei n, IntPtr v);
            public static VertexAttribs4hvNV glVertexAttribs4hvNV = (VertexAttribs4hvNV)GetDelegateForExtensionMethod("glVertexAttribs4hvNV", typeof(Delegates.VertexAttribs4hvNV));

            #endregion VertexAttribs4hvNV

            #region PixelDataRangeNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void PixelDataRangeNV(GLenum target, GLsizei length, IntPtr pointer);
            public static PixelDataRangeNV glPixelDataRangeNV = (PixelDataRangeNV)GetDelegateForExtensionMethod("glPixelDataRangeNV", typeof(Delegates.PixelDataRangeNV));

            #endregion PixelDataRangeNV

            #region FlushPixelDataRangeNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void FlushPixelDataRangeNV(GLenum target);
            public static FlushPixelDataRangeNV glFlushPixelDataRangeNV = (FlushPixelDataRangeNV)GetDelegateForExtensionMethod("glFlushPixelDataRangeNV", typeof(Delegates.FlushPixelDataRangeNV));

            #endregion FlushPixelDataRangeNV

            #region PrimitiveRestartNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void PrimitiveRestartNV();
            public static PrimitiveRestartNV glPrimitiveRestartNV = (PrimitiveRestartNV)GetDelegateForExtensionMethod("glPrimitiveRestartNV", typeof(Delegates.PrimitiveRestartNV));

            #endregion PrimitiveRestartNV

            #region PrimitiveRestartIndexNV

            /// <summary>
            /// 
            /// </summary>
            public delegate void PrimitiveRestartIndexNV(GLuint index);
            public static PrimitiveRestartIndexNV glPrimitiveRestartIndexNV = (PrimitiveRestartIndexNV)GetDelegateForExtensionMethod("glPrimitiveRestartIndexNV", typeof(Delegates.PrimitiveRestartIndexNV));

            #endregion PrimitiveRestartIndexNV

            #region MapObjectBufferATI

            /// <summary>
            /// 
            /// </summary>
            public delegate IntPtr MapObjectBufferATI(GLuint buffer);
            public static MapObjectBufferATI glMapObjectBufferATI = (MapObjectBufferATI)GetDelegateForExtensionMethod("glMapObjectBufferATI", typeof(Delegates.MapObjectBufferATI));

            #endregion MapObjectBufferATI

            #region UnmapObjectBufferATI

            /// <summary>
            /// 
            /// </summary>
            public delegate void UnmapObjectBufferATI(GLuint buffer);
            public static UnmapObjectBufferATI glUnmapObjectBufferATI = (UnmapObjectBufferATI)GetDelegateForExtensionMethod("glUnmapObjectBufferATI", typeof(Delegates.UnmapObjectBufferATI));

            #endregion UnmapObjectBufferATI

            #region StencilOpSeparateATI

            /// <summary>
            /// 
            /// </summary>
            public delegate void StencilOpSeparateATI(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
            public static StencilOpSeparateATI glStencilOpSeparateATI = (StencilOpSeparateATI)GetDelegateForExtensionMethod("glStencilOpSeparateATI", typeof(Delegates.StencilOpSeparateATI));

            #endregion StencilOpSeparateATI

            #region StencilFuncSeparateATI

            /// <summary>
            /// 
            /// </summary>
            public delegate void StencilFuncSeparateATI(GLenum frontfunc, GLenum backfunc, GLint reference, GLuint mask);
            public static StencilFuncSeparateATI glStencilFuncSeparateATI = (StencilFuncSeparateATI)GetDelegateForExtensionMethod("glStencilFuncSeparateATI", typeof(Delegates.StencilFuncSeparateATI));

            #endregion StencilFuncSeparateATI

            #region VertexAttribArrayObjectATI

            /// <summary>
            /// 
            /// </summary>
            public delegate void VertexAttribArrayObjectATI(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset);
            public static VertexAttribArrayObjectATI glVertexAttribArrayObjectATI = (VertexAttribArrayObjectATI)GetDelegateForExtensionMethod("glVertexAttribArrayObjectATI", typeof(Delegates.VertexAttribArrayObjectATI));

            #endregion VertexAttribArrayObjectATI

            #region GetVertexAttribArrayObjectfvATI

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetVertexAttribArrayObjectfvATI(GLuint index, GLenum pname, IntPtr parameters);
            public static GetVertexAttribArrayObjectfvATI glGetVertexAttribArrayObjectfvATI = (GetVertexAttribArrayObjectfvATI)GetDelegateForExtensionMethod("glGetVertexAttribArrayObjectfvATI", typeof(Delegates.GetVertexAttribArrayObjectfvATI));

            #endregion GetVertexAttribArrayObjectfvATI

            #region GetVertexAttribArrayObjectivATI

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetVertexAttribArrayObjectivATI(GLuint index, GLenum pname, IntPtr parameters);
            public static GetVertexAttribArrayObjectivATI glGetVertexAttribArrayObjectivATI = (GetVertexAttribArrayObjectivATI)GetDelegateForExtensionMethod("glGetVertexAttribArrayObjectivATI", typeof(Delegates.GetVertexAttribArrayObjectivATI));

            #endregion GetVertexAttribArrayObjectivATI

            #region DepthBoundsEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void DepthBoundsEXT(GLclampd zmin, GLclampd zmax);
            public static DepthBoundsEXT glDepthBoundsEXT = (DepthBoundsEXT)GetDelegateForExtensionMethod("glDepthBoundsEXT", typeof(Delegates.DepthBoundsEXT));

            #endregion DepthBoundsEXT

            #region BlendEquationSeparateEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void BlendEquationSeparateEXT(GLenum modeRGB, GLenum modeAlpha);
            public static BlendEquationSeparateEXT glBlendEquationSeparateEXT = (BlendEquationSeparateEXT)GetDelegateForExtensionMethod("glBlendEquationSeparateEXT", typeof(Delegates.BlendEquationSeparateEXT));

            #endregion BlendEquationSeparateEXT

            #region IsRenderbufferEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate GLboolean IsRenderbufferEXT(GLuint renderbuffer);
            public static IsRenderbufferEXT glIsRenderbufferEXT = (IsRenderbufferEXT)GetDelegateForExtensionMethod("glIsRenderbufferEXT", typeof(Delegates.IsRenderbufferEXT));

            #endregion IsRenderbufferEXT

            #region BindRenderbufferEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void BindRenderbufferEXT(GLenum target, GLuint renderbuffer);
            public static BindRenderbufferEXT glBindRenderbufferEXT = (BindRenderbufferEXT)GetDelegateForExtensionMethod("glBindRenderbufferEXT", typeof(Delegates.BindRenderbufferEXT));

            #endregion BindRenderbufferEXT

            #region DeleteRenderbuffersEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void DeleteRenderbuffersEXT(GLsizei n, IntPtr renderbuffers);
            public static DeleteRenderbuffersEXT glDeleteRenderbuffersEXT = (DeleteRenderbuffersEXT)GetDelegateForExtensionMethod("glDeleteRenderbuffersEXT", typeof(Delegates.DeleteRenderbuffersEXT));

            #endregion DeleteRenderbuffersEXT

            #region GenRenderbuffersEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void GenRenderbuffersEXT(GLsizei n, IntPtr renderbuffers);
            public static GenRenderbuffersEXT glGenRenderbuffersEXT = (GenRenderbuffersEXT)GetDelegateForExtensionMethod("glGenRenderbuffersEXT", typeof(Delegates.GenRenderbuffersEXT));

            #endregion GenRenderbuffersEXT

            #region RenderbufferStorageEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void RenderbufferStorageEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
            public static RenderbufferStorageEXT glRenderbufferStorageEXT = (RenderbufferStorageEXT)GetDelegateForExtensionMethod("glRenderbufferStorageEXT", typeof(Delegates.RenderbufferStorageEXT));

            #endregion RenderbufferStorageEXT

            #region GetRenderbufferParameterivEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetRenderbufferParameterivEXT(GLenum target, GLenum pname, IntPtr parameters);
            public static GetRenderbufferParameterivEXT glGetRenderbufferParameterivEXT = (GetRenderbufferParameterivEXT)GetDelegateForExtensionMethod("glGetRenderbufferParameterivEXT", typeof(Delegates.GetRenderbufferParameterivEXT));

            #endregion GetRenderbufferParameterivEXT

            #region IsFramebufferEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate GLboolean IsFramebufferEXT(GLuint framebuffer);
            public static IsFramebufferEXT glIsFramebufferEXT = (IsFramebufferEXT)GetDelegateForExtensionMethod("glIsFramebufferEXT", typeof(Delegates.IsFramebufferEXT));

            #endregion IsFramebufferEXT

            #region BindFramebufferEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void BindFramebufferEXT(GLenum target, GLuint framebuffer);
            public static BindFramebufferEXT glBindFramebufferEXT = (BindFramebufferEXT)GetDelegateForExtensionMethod("glBindFramebufferEXT", typeof(Delegates.BindFramebufferEXT));

            #endregion BindFramebufferEXT

            #region DeleteFramebuffersEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void DeleteFramebuffersEXT(GLsizei n, IntPtr framebuffers);
            public static DeleteFramebuffersEXT glDeleteFramebuffersEXT = (DeleteFramebuffersEXT)GetDelegateForExtensionMethod("glDeleteFramebuffersEXT", typeof(Delegates.DeleteFramebuffersEXT));

            #endregion DeleteFramebuffersEXT

            #region GenFramebuffersEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void GenFramebuffersEXT(GLsizei n, IntPtr framebuffers);
            public static GenFramebuffersEXT glGenFramebuffersEXT = (GenFramebuffersEXT)GetDelegateForExtensionMethod("glGenFramebuffersEXT", typeof(Delegates.GenFramebuffersEXT));

            #endregion GenFramebuffersEXT

            #region CheckFramebufferStatusEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate GLenum CheckFramebufferStatusEXT(GLenum target);
            public static CheckFramebufferStatusEXT glCheckFramebufferStatusEXT = (CheckFramebufferStatusEXT)GetDelegateForExtensionMethod("glCheckFramebufferStatusEXT", typeof(Delegates.CheckFramebufferStatusEXT));

            #endregion CheckFramebufferStatusEXT

            #region FramebufferTexture1DEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void FramebufferTexture1DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
            public static FramebufferTexture1DEXT glFramebufferTexture1DEXT = (FramebufferTexture1DEXT)GetDelegateForExtensionMethod("glFramebufferTexture1DEXT", typeof(Delegates.FramebufferTexture1DEXT));

            #endregion FramebufferTexture1DEXT

            #region FramebufferTexture2DEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void FramebufferTexture2DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
            public static FramebufferTexture2DEXT glFramebufferTexture2DEXT = (FramebufferTexture2DEXT)GetDelegateForExtensionMethod("glFramebufferTexture2DEXT", typeof(Delegates.FramebufferTexture2DEXT));

            #endregion FramebufferTexture2DEXT

            #region FramebufferTexture3DEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void FramebufferTexture3DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
            public static FramebufferTexture3DEXT glFramebufferTexture3DEXT = (FramebufferTexture3DEXT)GetDelegateForExtensionMethod("glFramebufferTexture3DEXT", typeof(Delegates.FramebufferTexture3DEXT));

            #endregion FramebufferTexture3DEXT

            #region FramebufferRenderbufferEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void FramebufferRenderbufferEXT(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
            public static FramebufferRenderbufferEXT glFramebufferRenderbufferEXT = (FramebufferRenderbufferEXT)GetDelegateForExtensionMethod("glFramebufferRenderbufferEXT", typeof(Delegates.FramebufferRenderbufferEXT));

            #endregion FramebufferRenderbufferEXT

            #region GetFramebufferAttachmentParameterivEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetFramebufferAttachmentParameterivEXT(GLenum target, GLenum attachment, GLenum pname, IntPtr parameters);
            public static GetFramebufferAttachmentParameterivEXT glGetFramebufferAttachmentParameterivEXT = (GetFramebufferAttachmentParameterivEXT)GetDelegateForExtensionMethod("glGetFramebufferAttachmentParameterivEXT", typeof(Delegates.GetFramebufferAttachmentParameterivEXT));

            #endregion GetFramebufferAttachmentParameterivEXT

            #region GenerateMipmapEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void GenerateMipmapEXT(GLenum target);
            public static GenerateMipmapEXT glGenerateMipmapEXT = (GenerateMipmapEXT)GetDelegateForExtensionMethod("glGenerateMipmapEXT", typeof(Delegates.GenerateMipmapEXT));

            #endregion GenerateMipmapEXT

            #region StringMarkerGREMEDY

            /// <summary>
            /// 
            /// </summary>
            public delegate void StringMarkerGREMEDY(GLsizei len, IntPtr @string);
            public static StringMarkerGREMEDY glStringMarkerGREMEDY = (StringMarkerGREMEDY)GetDelegateForExtensionMethod("glStringMarkerGREMEDY", typeof(Delegates.StringMarkerGREMEDY));

            #endregion StringMarkerGREMEDY

            #region StencilClearTagEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void StencilClearTagEXT(GLsizei stencilTagBits, GLuint stencilClearTag);
            public static StencilClearTagEXT glStencilClearTagEXT = (StencilClearTagEXT)GetDelegateForExtensionMethod("glStencilClearTagEXT", typeof(Delegates.StencilClearTagEXT));

            #endregion StencilClearTagEXT

            #region BlitFramebufferEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void BlitFramebufferEXT(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
            public static BlitFramebufferEXT glBlitFramebufferEXT = (BlitFramebufferEXT)GetDelegateForExtensionMethod("glBlitFramebufferEXT", typeof(Delegates.BlitFramebufferEXT));

            #endregion BlitFramebufferEXT

            #region RenderbufferStorageMultisampleEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void RenderbufferStorageMultisampleEXT(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
            public static RenderbufferStorageMultisampleEXT glRenderbufferStorageMultisampleEXT = (RenderbufferStorageMultisampleEXT)GetDelegateForExtensionMethod("glRenderbufferStorageMultisampleEXT", typeof(Delegates.RenderbufferStorageMultisampleEXT));

            #endregion RenderbufferStorageMultisampleEXT

            #region GetQueryObjecti64vEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetQueryObjecti64vEXT(GLuint id, GLenum pname, IntPtr parameters);
            public static GetQueryObjecti64vEXT glGetQueryObjecti64vEXT = (GetQueryObjecti64vEXT)GetDelegateForExtensionMethod("glGetQueryObjecti64vEXT", typeof(Delegates.GetQueryObjecti64vEXT));

            #endregion GetQueryObjecti64vEXT

            #region GetQueryObjectui64vEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void GetQueryObjectui64vEXT(GLuint id, GLenum pname, IntPtr parameters);
            public static GetQueryObjectui64vEXT glGetQueryObjectui64vEXT = (GetQueryObjectui64vEXT)GetDelegateForExtensionMethod("glGetQueryObjectui64vEXT", typeof(Delegates.GetQueryObjectui64vEXT));

            #endregion GetQueryObjectui64vEXT

            #region ProgramEnvParameters4fvEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void ProgramEnvParameters4fvEXT(GLenum target, GLuint index, GLsizei count, IntPtr parameters);
            public static ProgramEnvParameters4fvEXT glProgramEnvParameters4fvEXT = (ProgramEnvParameters4fvEXT)GetDelegateForExtensionMethod("glProgramEnvParameters4fvEXT", typeof(Delegates.ProgramEnvParameters4fvEXT));

            #endregion ProgramEnvParameters4fvEXT

            #region ProgramLocalParameters4fvEXT

            /// <summary>
            /// 
            /// </summary>
            public delegate void ProgramLocalParameters4fvEXT(GLenum target, GLuint index, GLsizei count, IntPtr parameters);
            public static ProgramLocalParameters4fvEXT glProgramLocalParameters4fvEXT = (ProgramLocalParameters4fvEXT)GetDelegateForExtensionMethod("glProgramLocalParameters4fvEXT", typeof(Delegates.ProgramLocalParameters4fvEXT));

            #endregion ProgramLocalParameters4fvEXT

        }
        #endregion internal static class Delegates

        #region internal static class Imports

        /// <summary>
        /// Contains dll import signatures for OpenGL core (1.0 - 2.1) functions.
        /// </summary>
        internal static class Imports
        {
            static Imports() { }

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glNewList")]
            public static extern void NewList(GLuint list, GLenum mode);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glEndList")]
            public static extern void EndList();

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glCallList")]
            public static extern void CallList(GLuint list);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glCallLists")]
            public static extern void CallLists(GLsizei n, GLenum type, IntPtr lists);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glDeleteLists")]
            public static extern void DeleteLists(GLuint list, GLsizei range);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGenLists")]
            public static extern GLuint GenLists(GLsizei range);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glListBase")]
            public static extern void ListBase(GLuint @base);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glBegin")]
            public static extern void Begin(GLenum mode);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glBitmap")]
            public static extern void Bitmap(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, IntPtr bitmap);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glColor3b")]
            public static extern void Color3b(GLbyte red, GLbyte green, GLbyte blue);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glColor3bv")]
            public static extern void Color3bv(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glColor3d")]
            public static extern void Color3d(GLdouble red, GLdouble green, GLdouble blue);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glColor3dv")]
            public static extern void Color3dv(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glColor3f")]
            public static extern void Color3f(GLfloat red, GLfloat green, GLfloat blue);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glColor3fv")]
            public static extern void Color3fv(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glColor3i")]
            public static extern void Color3i(GLint red, GLint green, GLint blue);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glColor3iv")]
            public static extern void Color3iv(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glColor3s")]
            public static extern void Color3s(GLshort red, GLshort green, GLshort blue);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glColor3sv")]
            public static extern void Color3sv(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glColor3ub")]
            public static extern void Color3ub(GLubyte red, GLubyte green, GLubyte blue);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glColor3ubv")]
            public static extern void Color3ubv(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glColor3ui")]
            public static extern void Color3ui(GLuint red, GLuint green, GLuint blue);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glColor3uiv")]
            public static extern void Color3uiv(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glColor3us")]
            public static extern void Color3us(GLushort red, GLushort green, GLushort blue);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glColor3usv")]
            public static extern void Color3usv(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glColor4b")]
            public static extern void Color4b(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glColor4bv")]
            public static extern void Color4bv(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glColor4d")]
            public static extern void Color4d(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glColor4dv")]
            public static extern void Color4dv(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glColor4f")]
            public static extern void Color4f(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glColor4fv")]
            public static extern void Color4fv(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glColor4i")]
            public static extern void Color4i(GLint red, GLint green, GLint blue, GLint alpha);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glColor4iv")]
            public static extern void Color4iv(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glColor4s")]
            public static extern void Color4s(GLshort red, GLshort green, GLshort blue, GLshort alpha);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glColor4sv")]
            public static extern void Color4sv(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glColor4ub")]
            public static extern void Color4ub(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glColor4ubv")]
            public static extern void Color4ubv(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glColor4ui")]
            public static extern void Color4ui(GLuint red, GLuint green, GLuint blue, GLuint alpha);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glColor4uiv")]
            public static extern void Color4uiv(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glColor4us")]
            public static extern void Color4us(GLushort red, GLushort green, GLushort blue, GLushort alpha);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glColor4usv")]
            public static extern void Color4usv(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glEdgeFlag")]
            public static extern void EdgeFlag(GLboolean flag);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glEdgeFlagv")]
            public static extern void EdgeFlagv(IntPtr flag);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glEnd")]
            public static extern void End();

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glIndexd")]
            public static extern void Indexd(GLdouble c);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glIndexdv")]
            public static extern void Indexdv(IntPtr c);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glIndexf")]
            public static extern void Indexf(GLfloat c);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glIndexfv")]
            public static extern void Indexfv(IntPtr c);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glIndexi")]
            public static extern void Indexi(GLint c);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glIndexiv")]
            public static extern void Indexiv(IntPtr c);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glIndexs")]
            public static extern void Indexs(GLshort c);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glIndexsv")]
            public static extern void Indexsv(IntPtr c);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glNormal3b")]
            public static extern void Normal3b(GLbyte nx, GLbyte ny, GLbyte nz);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glNormal3bv")]
            public static extern void Normal3bv(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glNormal3d")]
            public static extern void Normal3d(GLdouble nx, GLdouble ny, GLdouble nz);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glNormal3dv")]
            public static extern void Normal3dv(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glNormal3f")]
            public static extern void Normal3f(GLfloat nx, GLfloat ny, GLfloat nz);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glNormal3fv")]
            public static extern void Normal3fv(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glNormal3i")]
            public static extern void Normal3i(GLint nx, GLint ny, GLint nz);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glNormal3iv")]
            public static extern void Normal3iv(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glNormal3s")]
            public static extern void Normal3s(GLshort nx, GLshort ny, GLshort nz);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glNormal3sv")]
            public static extern void Normal3sv(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glRasterPos2d")]
            public static extern void RasterPos2d(GLdouble x, GLdouble y);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glRasterPos2dv")]
            public static extern void RasterPos2dv(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glRasterPos2f")]
            public static extern void RasterPos2f(GLfloat x, GLfloat y);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glRasterPos2fv")]
            public static extern void RasterPos2fv(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glRasterPos2i")]
            public static extern void RasterPos2i(GLint x, GLint y);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glRasterPos2iv")]
            public static extern void RasterPos2iv(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glRasterPos2s")]
            public static extern void RasterPos2s(GLshort x, GLshort y);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glRasterPos2sv")]
            public static extern void RasterPos2sv(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glRasterPos3d")]
            public static extern void RasterPos3d(GLdouble x, GLdouble y, GLdouble z);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glRasterPos3dv")]
            public static extern void RasterPos3dv(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glRasterPos3f")]
            public static extern void RasterPos3f(GLfloat x, GLfloat y, GLfloat z);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glRasterPos3fv")]
            public static extern void RasterPos3fv(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glRasterPos3i")]
            public static extern void RasterPos3i(GLint x, GLint y, GLint z);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glRasterPos3iv")]
            public static extern void RasterPos3iv(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glRasterPos3s")]
            public static extern void RasterPos3s(GLshort x, GLshort y, GLshort z);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glRasterPos3sv")]
            public static extern void RasterPos3sv(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glRasterPos4d")]
            public static extern void RasterPos4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glRasterPos4dv")]
            public static extern void RasterPos4dv(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glRasterPos4f")]
            public static extern void RasterPos4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glRasterPos4fv")]
            public static extern void RasterPos4fv(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glRasterPos4i")]
            public static extern void RasterPos4i(GLint x, GLint y, GLint z, GLint w);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glRasterPos4iv")]
            public static extern void RasterPos4iv(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glRasterPos4s")]
            public static extern void RasterPos4s(GLshort x, GLshort y, GLshort z, GLshort w);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glRasterPos4sv")]
            public static extern void RasterPos4sv(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glRectd")]
            public static extern void Rectd(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glRectdv")]
            public static extern void Rectdv(IntPtr v1, IntPtr v2);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glRectf")]
            public static extern void Rectf(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glRectfv")]
            public static extern void Rectfv(IntPtr v1, IntPtr v2);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glRecti")]
            public static extern void Recti(GLint x1, GLint y1, GLint x2, GLint y2);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glRectiv")]
            public static extern void Rectiv(IntPtr v1, IntPtr v2);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glRects")]
            public static extern void Rects(GLshort x1, GLshort y1, GLshort x2, GLshort y2);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glRectsv")]
            public static extern void Rectsv(IntPtr v1, IntPtr v2);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord1d")]
            public static extern void TexCoord1d(GLdouble s);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord1dv")]
            public static extern void TexCoord1dv(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord1f")]
            public static extern void TexCoord1f(GLfloat s);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord1fv")]
            public static extern void TexCoord1fv(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord1i")]
            public static extern void TexCoord1i(GLint s);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord1iv")]
            public static extern void TexCoord1iv(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord1s")]
            public static extern void TexCoord1s(GLshort s);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord1sv")]
            public static extern void TexCoord1sv(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord2d")]
            public static extern void TexCoord2d(GLdouble s, GLdouble t);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord2dv")]
            public static extern void TexCoord2dv(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord2f")]
            public static extern void TexCoord2f(GLfloat s, GLfloat t);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord2fv")]
            public static extern void TexCoord2fv(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord2i")]
            public static extern void TexCoord2i(GLint s, GLint t);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord2iv")]
            public static extern void TexCoord2iv(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord2s")]
            public static extern void TexCoord2s(GLshort s, GLshort t);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord2sv")]
            public static extern void TexCoord2sv(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord3d")]
            public static extern void TexCoord3d(GLdouble s, GLdouble t, GLdouble r);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord3dv")]
            public static extern void TexCoord3dv(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord3f")]
            public static extern void TexCoord3f(GLfloat s, GLfloat t, GLfloat r);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord3fv")]
            public static extern void TexCoord3fv(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord3i")]
            public static extern void TexCoord3i(GLint s, GLint t, GLint r);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord3iv")]
            public static extern void TexCoord3iv(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord3s")]
            public static extern void TexCoord3s(GLshort s, GLshort t, GLshort r);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord3sv")]
            public static extern void TexCoord3sv(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord4d")]
            public static extern void TexCoord4d(GLdouble s, GLdouble t, GLdouble r, GLdouble q);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord4dv")]
            public static extern void TexCoord4dv(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord4f")]
            public static extern void TexCoord4f(GLfloat s, GLfloat t, GLfloat r, GLfloat q);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord4fv")]
            public static extern void TexCoord4fv(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord4i")]
            public static extern void TexCoord4i(GLint s, GLint t, GLint r, GLint q);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord4iv")]
            public static extern void TexCoord4iv(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord4s")]
            public static extern void TexCoord4s(GLshort s, GLshort t, GLshort r, GLshort q);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord4sv")]
            public static extern void TexCoord4sv(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertex2d")]
            public static extern void Vertex2d(GLdouble x, GLdouble y);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertex2dv")]
            public static extern void Vertex2dv(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertex2f")]
            public static extern void Vertex2f(GLfloat x, GLfloat y);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertex2fv")]
            public static extern void Vertex2fv(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertex2i")]
            public static extern void Vertex2i(GLint x, GLint y);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertex2iv")]
            public static extern void Vertex2iv(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertex2s")]
            public static extern void Vertex2s(GLshort x, GLshort y);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertex2sv")]
            public static extern void Vertex2sv(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertex3d")]
            public static extern void Vertex3d(GLdouble x, GLdouble y, GLdouble z);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertex3dv")]
            public static extern void Vertex3dv(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertex3f")]
            public static extern void Vertex3f(GLfloat x, GLfloat y, GLfloat z);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertex3fv")]
            public static extern void Vertex3fv(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertex3i")]
            public static extern void Vertex3i(GLint x, GLint y, GLint z);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertex3iv")]
            public static extern void Vertex3iv(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertex3s")]
            public static extern void Vertex3s(GLshort x, GLshort y, GLshort z);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertex3sv")]
            public static extern void Vertex3sv(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertex4d")]
            public static extern void Vertex4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertex4dv")]
            public static extern void Vertex4dv(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertex4f")]
            public static extern void Vertex4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertex4fv")]
            public static extern void Vertex4fv(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertex4i")]
            public static extern void Vertex4i(GLint x, GLint y, GLint z, GLint w);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertex4iv")]
            public static extern void Vertex4iv(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertex4s")]
            public static extern void Vertex4s(GLshort x, GLshort y, GLshort z, GLshort w);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertex4sv")]
            public static extern void Vertex4sv(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glClipPlane")]
            public static extern void ClipPlane(GLenum plane, IntPtr equation);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glColorMaterial")]
            public static extern void ColorMaterial(GLenum face, GLenum mode);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glCullFace")]
            public static extern void CullFace(GLenum mode);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glFogf")]
            public static extern void Fogf(GLenum pname, GLfloat param);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glFogfv")]
            public static extern void Fogfv(GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glFogi")]
            public static extern void Fogi(GLenum pname, GLint param);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glFogiv")]
            public static extern void Fogiv(GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glFrontFace")]
            public static extern void FrontFace(GLenum mode);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glHint")]
            public static extern void Hint(GLenum target, GLenum mode);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glLightf")]
            public static extern void Lightf(GLenum light, GLenum pname, GLfloat param);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glLightfv")]
            public static extern void Lightfv(GLenum light, GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glLighti")]
            public static extern void Lighti(GLenum light, GLenum pname, GLint param);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glLightiv")]
            public static extern void Lightiv(GLenum light, GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glLightModelf")]
            public static extern void LightModelf(GLenum pname, GLfloat param);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glLightModelfv")]
            public static extern void LightModelfv(GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glLightModeli")]
            public static extern void LightModeli(GLenum pname, GLint param);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glLightModeliv")]
            public static extern void LightModeliv(GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glLineStipple")]
            public static extern void LineStipple(GLint factor, GLushort pattern);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glLineWidth")]
            public static extern void LineWidth(GLfloat width);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMaterialf")]
            public static extern void Materialf(GLenum face, GLenum pname, GLfloat param);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMaterialfv")]
            public static extern void Materialfv(GLenum face, GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMateriali")]
            public static extern void Materiali(GLenum face, GLenum pname, GLint param);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMaterialiv")]
            public static extern void Materialiv(GLenum face, GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glPointSize")]
            public static extern void PointSize(GLfloat size);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glPolygonMode")]
            public static extern void PolygonMode(GLenum face, GLenum mode);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glPolygonStipple")]
            public static extern void PolygonStipple(IntPtr mask);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glScissor")]
            public static extern void Scissor(GLint x, GLint y, GLsizei width, GLsizei height);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glShadeModel")]
            public static extern void ShadeModel(GLenum mode);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexParameterf")]
            public static extern void TexParameterf(GLenum target, GLenum pname, GLfloat param);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexParameterfv")]
            public static extern void TexParameterfv(GLenum target, GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexParameteri")]
            public static extern void TexParameteri(GLenum target, GLenum pname, GLint param);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexParameteriv")]
            public static extern void TexParameteriv(GLenum target, GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexImage1D")]
            public static extern void TexImage1D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, IntPtr pixels);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexImage2D")]
            public static extern void TexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, IntPtr pixels);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexEnvf")]
            public static extern void TexEnvf(GLenum target, GLenum pname, GLfloat param);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexEnvfv")]
            public static extern void TexEnvfv(GLenum target, GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexEnvi")]
            public static extern void TexEnvi(GLenum target, GLenum pname, GLint param);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexEnviv")]
            public static extern void TexEnviv(GLenum target, GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexGend")]
            public static extern void TexGend(GLenum coord, GLenum pname, GLdouble param);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexGendv")]
            public static extern void TexGendv(GLenum coord, GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexGenf")]
            public static extern void TexGenf(GLenum coord, GLenum pname, GLfloat param);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexGenfv")]
            public static extern void TexGenfv(GLenum coord, GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexGeni")]
            public static extern void TexGeni(GLenum coord, GLenum pname, GLint param);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexGeniv")]
            public static extern void TexGeniv(GLenum coord, GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glFeedbackBuffer")]
            public static extern void FeedbackBuffer(GLsizei size, GLenum type, IntPtr buffer);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glSelectBuffer")]
            public static extern void SelectBuffer(GLsizei size, IntPtr buffer);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glRenderMode")]
            public static extern GLint RenderMode(GLenum mode);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glInitNames")]
            public static extern void InitNames();

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glLoadName")]
            public static extern void LoadName(GLuint name);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glPassThrough")]
            public static extern void PassThrough(GLfloat token);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glPopName")]
            public static extern void PopName();

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glPushName")]
            public static extern void PushName(GLuint name);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glDrawBuffer")]
            public static extern void DrawBuffer(GLenum mode);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glClear")]
            public static extern void Clear(GLbitfield mask);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glClearAccum")]
            public static extern void ClearAccum(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glClearIndex")]
            public static extern void ClearIndex(GLfloat c);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glClearColor")]
            public static extern void ClearColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glClearStencil")]
            public static extern void ClearStencil(GLint s);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glClearDepth")]
            public static extern void ClearDepth(GLclampd depth);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glStencilMask")]
            public static extern void StencilMask(GLuint mask);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glColorMask")]
            public static extern void ColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glDepthMask")]
            public static extern void DepthMask(GLboolean flag);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glIndexMask")]
            public static extern void IndexMask(GLuint mask);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glAccum")]
            public static extern void Accum(GLenum op, GLfloat value);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glDisable")]
            public static extern void Disable(GLenum cap);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glEnable")]
            public static extern void Enable(GLenum cap);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glFinish")]
            public static extern void Finish();

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glFlush")]
            public static extern void Flush();

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glPopAttrib")]
            public static extern void PopAttrib();

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glPushAttrib")]
            public static extern void PushAttrib(GLbitfield mask);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMap1d")]
            public static extern void Map1d(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, IntPtr points);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMap1f")]
            public static extern void Map1f(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, IntPtr points);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMap2d")]
            public static extern void Map2d(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, IntPtr points);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMap2f")]
            public static extern void Map2f(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, IntPtr points);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMapGrid1d")]
            public static extern void MapGrid1d(GLint un, GLdouble u1, GLdouble u2);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMapGrid1f")]
            public static extern void MapGrid1f(GLint un, GLfloat u1, GLfloat u2);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMapGrid2d")]
            public static extern void MapGrid2d(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMapGrid2f")]
            public static extern void MapGrid2f(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glEvalCoord1d")]
            public static extern void EvalCoord1d(GLdouble u);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glEvalCoord1dv")]
            public static extern void EvalCoord1dv(IntPtr u);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glEvalCoord1f")]
            public static extern void EvalCoord1f(GLfloat u);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glEvalCoord1fv")]
            public static extern void EvalCoord1fv(IntPtr u);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glEvalCoord2d")]
            public static extern void EvalCoord2d(GLdouble u, GLdouble v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glEvalCoord2dv")]
            public static extern void EvalCoord2dv(IntPtr u);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glEvalCoord2f")]
            public static extern void EvalCoord2f(GLfloat u, GLfloat v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glEvalCoord2fv")]
            public static extern void EvalCoord2fv(IntPtr u);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glEvalMesh1")]
            public static extern void EvalMesh1(GLenum mode, GLint i1, GLint i2);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glEvalPoint1")]
            public static extern void EvalPoint1(GLint i);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glEvalMesh2")]
            public static extern void EvalMesh2(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glEvalPoint2")]
            public static extern void EvalPoint2(GLint i, GLint j);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glAlphaFunc")]
            public static extern void AlphaFunc(GLenum func, GLclampf reference);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glBlendFunc")]
            public static extern void BlendFunc(GLenum sfactor, GLenum dfactor);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glLogicOp")]
            public static extern void LogicOp(GLenum opcode);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glStencilFunc")]
            public static extern void StencilFunc(GLenum func, GLint reference, GLuint mask);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glStencilOp")]
            public static extern void StencilOp(GLenum fail, GLenum zfail, GLenum zpass);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glDepthFunc")]
            public static extern void DepthFunc(GLenum func);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glPixelZoom")]
            public static extern void PixelZoom(GLfloat xfactor, GLfloat yfactor);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glPixelTransferf")]
            public static extern void PixelTransferf(GLenum pname, GLfloat param);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glPixelTransferi")]
            public static extern void PixelTransferi(GLenum pname, GLint param);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glPixelStoref")]
            public static extern void PixelStoref(GLenum pname, GLfloat param);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glPixelStorei")]
            public static extern void PixelStorei(GLenum pname, GLint param);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glPixelMapfv")]
            public static extern void PixelMapfv(GLenum map, GLint mapsize, IntPtr values);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glPixelMapuiv")]
            public static extern void PixelMapuiv(GLenum map, GLint mapsize, IntPtr values);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glPixelMapusv")]
            public static extern void PixelMapusv(GLenum map, GLint mapsize, IntPtr values);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glReadBuffer")]
            public static extern void ReadBuffer(GLenum mode);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glCopyPixels")]
            public static extern void CopyPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glReadPixels")]
            public static extern void ReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, IntPtr pixels);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glDrawPixels")]
            public static extern void DrawPixels(GLsizei width, GLsizei height, GLenum format, GLenum type, IntPtr pixels);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetBooleanv")]
            public static extern void GetBooleanv(GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetClipPlane")]
            public static extern void GetClipPlane(GLenum plane, IntPtr equation);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetDoublev")]
            public static extern void GetDoublev(GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetError")]
            public static extern GLenum GetError();

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetFloatv")]
            public static extern void GetFloatv(GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetIntegerv")]
            public static extern void GetIntegerv(GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetLightfv")]
            public static extern void GetLightfv(GLenum light, GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetLightiv")]
            public static extern void GetLightiv(GLenum light, GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetMapdv")]
            public static extern void GetMapdv(GLenum target, GLenum query, IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetMapfv")]
            public static extern void GetMapfv(GLenum target, GLenum query, IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetMapiv")]
            public static extern void GetMapiv(GLenum target, GLenum query, IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetMaterialfv")]
            public static extern void GetMaterialfv(GLenum face, GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetMaterialiv")]
            public static extern void GetMaterialiv(GLenum face, GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetPixelMapfv")]
            public static extern void GetPixelMapfv(GLenum map, IntPtr values);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetPixelMapuiv")]
            public static extern void GetPixelMapuiv(GLenum map, IntPtr values);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetPixelMapusv")]
            public static extern void GetPixelMapusv(GLenum map, IntPtr values);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetPolygonStipple")]
            public static extern void GetPolygonStipple(IntPtr mask);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetString")]
            public static extern IntPtr GetString(GLenum name);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetTexEnvfv")]
            public static extern void GetTexEnvfv(GLenum target, GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetTexEnviv")]
            public static extern void GetTexEnviv(GLenum target, GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetTexGendv")]
            public static extern void GetTexGendv(GLenum coord, GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetTexGenfv")]
            public static extern void GetTexGenfv(GLenum coord, GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetTexGeniv")]
            public static extern void GetTexGeniv(GLenum coord, GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetTexImage")]
            public static extern void GetTexImage(GLenum target, GLint level, GLenum format, GLenum type, IntPtr pixels);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetTexParameterfv")]
            public static extern void GetTexParameterfv(GLenum target, GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetTexParameteriv")]
            public static extern void GetTexParameteriv(GLenum target, GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetTexLevelParameterfv")]
            public static extern void GetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetTexLevelParameteriv")]
            public static extern void GetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glIsEnabled")]
            public static extern GLboolean IsEnabled(GLenum cap);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glIsList")]
            public static extern GLboolean IsList(GLuint list);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glDepthRange")]
            public static extern void DepthRange(GLclampd near, GLclampd far);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glFrustum")]
            public static extern void Frustum(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glLoadIdentity")]
            public static extern void LoadIdentity();

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glLoadMatrixf")]
            public static extern void LoadMatrixf(IntPtr m);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glLoadMatrixd")]
            public static extern void LoadMatrixd(IntPtr m);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMatrixMode")]
            public static extern void MatrixMode(GLenum mode);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMultMatrixf")]
            public static extern void MultMatrixf(IntPtr m);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMultMatrixd")]
            public static extern void MultMatrixd(IntPtr m);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glOrtho")]
            public static extern void Ortho(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glPopMatrix")]
            public static extern void PopMatrix();

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glPushMatrix")]
            public static extern void PushMatrix();

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glRotated")]
            public static extern void Rotated(GLdouble angle, GLdouble x, GLdouble y, GLdouble z);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glRotatef")]
            public static extern void Rotatef(GLfloat angle, GLfloat x, GLfloat y, GLfloat z);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glScaled")]
            public static extern void Scaled(GLdouble x, GLdouble y, GLdouble z);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glScalef")]
            public static extern void Scalef(GLfloat x, GLfloat y, GLfloat z);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTranslated")]
            public static extern void Translated(GLdouble x, GLdouble y, GLdouble z);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTranslatef")]
            public static extern void Translatef(GLfloat x, GLfloat y, GLfloat z);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glViewport")]
            public static extern void Viewport(GLint x, GLint y, GLsizei width, GLsizei height);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glArrayElement")]
            public static extern void ArrayElement(GLint i);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glColorPointer")]
            public static extern void ColorPointer(GLint size, GLenum type, GLsizei stride, IntPtr pointer);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glDisableClientState")]
            public static extern void DisableClientState(GLenum array);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glDrawArrays")]
            public static extern void DrawArrays(GLenum mode, GLint first, GLsizei count);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glDrawElements")]
            public static extern void DrawElements(GLenum mode, GLsizei count, GLenum type, IntPtr indices);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glEdgeFlagPointer")]
            public static extern void EdgeFlagPointer(GLsizei stride, IntPtr pointer);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glEnableClientState")]
            public static extern void EnableClientState(GLenum array);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetPointerv")]
            public static extern void GetPointerv(GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glIndexPointer")]
            public static extern void IndexPointer(GLenum type, GLsizei stride, IntPtr pointer);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glInterleavedArrays")]
            public static extern void InterleavedArrays(GLenum format, GLsizei stride, IntPtr pointer);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glNormalPointer")]
            public static extern void NormalPointer(GLenum type, GLsizei stride, IntPtr pointer);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexCoordPointer")]
            public static extern void TexCoordPointer(GLint size, GLenum type, GLsizei stride, IntPtr pointer);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertexPointer")]
            public static extern void VertexPointer(GLint size, GLenum type, GLsizei stride, IntPtr pointer);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glPolygonOffset")]
            public static extern void PolygonOffset(GLfloat factor, GLfloat units);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glCopyTexImage1D")]
            public static extern void CopyTexImage1D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glCopyTexImage2D")]
            public static extern void CopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glCopyTexSubImage1D")]
            public static extern void CopyTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glCopyTexSubImage2D")]
            public static extern void CopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexSubImage1D")]
            public static extern void TexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, IntPtr pixels);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexSubImage2D")]
            public static extern void TexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, IntPtr pixels);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glAreTexturesResident")]
            public static extern GLboolean AreTexturesResident(GLsizei n, IntPtr textures, IntPtr residences);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glBindTexture")]
            public static extern void BindTexture(GLenum target, GLuint texture);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glDeleteTextures")]
            public static extern void DeleteTextures(GLsizei n, IntPtr textures);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGenTextures")]
            public static extern void GenTextures(GLsizei n, IntPtr textures);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glIsTexture")]
            public static extern GLboolean IsTexture(GLuint texture);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glPrioritizeTextures")]
            public static extern void PrioritizeTextures(GLsizei n, IntPtr textures, IntPtr priorities);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glIndexub")]
            public static extern void Indexub(GLubyte c);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glIndexubv")]
            public static extern void Indexubv(IntPtr c);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glPopClientAttrib")]
            public static extern void PopClientAttrib();

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glPushClientAttrib")]
            public static extern void PushClientAttrib(GLbitfield mask);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glBlendColor")]
            public static extern void BlendColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glBlendEquation")]
            public static extern void BlendEquation(GLenum mode);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glDrawRangeElements")]
            public static extern void DrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, IntPtr indices);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glColorTable")]
            public static extern void ColorTable(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, IntPtr table);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glColorTableParameterfv")]
            public static extern void ColorTableParameterfv(GLenum target, GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glColorTableParameteriv")]
            public static extern void ColorTableParameteriv(GLenum target, GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glCopyColorTable")]
            public static extern void CopyColorTable(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetColorTable")]
            public static extern void GetColorTable(GLenum target, GLenum format, GLenum type, IntPtr table);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetColorTableParameterfv")]
            public static extern void GetColorTableParameterfv(GLenum target, GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetColorTableParameteriv")]
            public static extern void GetColorTableParameteriv(GLenum target, GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glColorSubTable")]
            public static extern void ColorSubTable(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, IntPtr data);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glCopyColorSubTable")]
            public static extern void CopyColorSubTable(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glConvolutionFilter1D")]
            public static extern void ConvolutionFilter1D(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, IntPtr image);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glConvolutionFilter2D")]
            public static extern void ConvolutionFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, IntPtr image);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glConvolutionParameterf")]
            public static extern void ConvolutionParameterf(GLenum target, GLenum pname, GLfloat parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glConvolutionParameterfv")]
            public static extern void ConvolutionParameterfv(GLenum target, GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glConvolutionParameteri")]
            public static extern void ConvolutionParameteri(GLenum target, GLenum pname, GLint parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glConvolutionParameteriv")]
            public static extern void ConvolutionParameteriv(GLenum target, GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glCopyConvolutionFilter1D")]
            public static extern void CopyConvolutionFilter1D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glCopyConvolutionFilter2D")]
            public static extern void CopyConvolutionFilter2D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetConvolutionFilter")]
            public static extern void GetConvolutionFilter(GLenum target, GLenum format, GLenum type, IntPtr image);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetConvolutionParameterfv")]
            public static extern void GetConvolutionParameterfv(GLenum target, GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetConvolutionParameteriv")]
            public static extern void GetConvolutionParameteriv(GLenum target, GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetSeparableFilter")]
            public static extern void GetSeparableFilter(GLenum target, GLenum format, GLenum type, IntPtr row, IntPtr column, IntPtr span);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glSeparableFilter2D")]
            public static extern void SeparableFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, IntPtr row, IntPtr column);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetHistogram")]
            public static extern void GetHistogram(GLenum target, GLboolean reset, GLenum format, GLenum type, IntPtr values);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetHistogramParameterfv")]
            public static extern void GetHistogramParameterfv(GLenum target, GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetHistogramParameteriv")]
            public static extern void GetHistogramParameteriv(GLenum target, GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetMinmax")]
            public static extern void GetMinmax(GLenum target, GLboolean reset, GLenum format, GLenum type, IntPtr values);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetMinmaxParameterfv")]
            public static extern void GetMinmaxParameterfv(GLenum target, GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetMinmaxParameteriv")]
            public static extern void GetMinmaxParameteriv(GLenum target, GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glHistogram")]
            public static extern void Histogram(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMinmax")]
            public static extern void Minmax(GLenum target, GLenum internalformat, GLboolean sink);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glResetHistogram")]
            public static extern void ResetHistogram(GLenum target);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glResetMinmax")]
            public static extern void ResetMinmax(GLenum target);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexImage3D")]
            public static extern void TexImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, IntPtr pixels);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glTexSubImage3D")]
            public static extern void TexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, IntPtr pixels);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glCopyTexSubImage3D")]
            public static extern void CopyTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glActiveTexture")]
            public static extern void ActiveTexture(GLenum texture);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glClientActiveTexture")]
            public static extern void ClientActiveTexture(GLenum texture);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord1d")]
            public static extern void MultiTexCoord1d(GLenum target, GLdouble s);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord1dv")]
            public static extern void MultiTexCoord1dv(GLenum target, IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord1f")]
            public static extern void MultiTexCoord1f(GLenum target, GLfloat s);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord1fv")]
            public static extern void MultiTexCoord1fv(GLenum target, IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord1i")]
            public static extern void MultiTexCoord1i(GLenum target, GLint s);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord1iv")]
            public static extern void MultiTexCoord1iv(GLenum target, IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord1s")]
            public static extern void MultiTexCoord1s(GLenum target, GLshort s);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord1sv")]
            public static extern void MultiTexCoord1sv(GLenum target, IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord2d")]
            public static extern void MultiTexCoord2d(GLenum target, GLdouble s, GLdouble t);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord2dv")]
            public static extern void MultiTexCoord2dv(GLenum target, IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord2f")]
            public static extern void MultiTexCoord2f(GLenum target, GLfloat s, GLfloat t);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord2fv")]
            public static extern void MultiTexCoord2fv(GLenum target, IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord2i")]
            public static extern void MultiTexCoord2i(GLenum target, GLint s, GLint t);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord2iv")]
            public static extern void MultiTexCoord2iv(GLenum target, IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord2s")]
            public static extern void MultiTexCoord2s(GLenum target, GLshort s, GLshort t);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord2sv")]
            public static extern void MultiTexCoord2sv(GLenum target, IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord3d")]
            public static extern void MultiTexCoord3d(GLenum target, GLdouble s, GLdouble t, GLdouble r);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord3dv")]
            public static extern void MultiTexCoord3dv(GLenum target, IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord3f")]
            public static extern void MultiTexCoord3f(GLenum target, GLfloat s, GLfloat t, GLfloat r);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord3fv")]
            public static extern void MultiTexCoord3fv(GLenum target, IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord3i")]
            public static extern void MultiTexCoord3i(GLenum target, GLint s, GLint t, GLint r);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord3iv")]
            public static extern void MultiTexCoord3iv(GLenum target, IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord3s")]
            public static extern void MultiTexCoord3s(GLenum target, GLshort s, GLshort t, GLshort r);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord3sv")]
            public static extern void MultiTexCoord3sv(GLenum target, IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord4d")]
            public static extern void MultiTexCoord4d(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord4dv")]
            public static extern void MultiTexCoord4dv(GLenum target, IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord4f")]
            public static extern void MultiTexCoord4f(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord4fv")]
            public static extern void MultiTexCoord4fv(GLenum target, IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord4i")]
            public static extern void MultiTexCoord4i(GLenum target, GLint s, GLint t, GLint r, GLint q);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord4iv")]
            public static extern void MultiTexCoord4iv(GLenum target, IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord4s")]
            public static extern void MultiTexCoord4s(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord4sv")]
            public static extern void MultiTexCoord4sv(GLenum target, IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glLoadTransposeMatrixf")]
            public static extern void LoadTransposeMatrixf(IntPtr m);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glLoadTransposeMatrixd")]
            public static extern void LoadTransposeMatrixd(IntPtr m);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMultTransposeMatrixf")]
            public static extern void MultTransposeMatrixf(IntPtr m);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMultTransposeMatrixd")]
            public static extern void MultTransposeMatrixd(IntPtr m);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glSampleCoverage")]
            public static extern void SampleCoverage(GLclampf value, GLboolean invert);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glCompressedTexImage3D")]
            public static extern void CompressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, IntPtr data);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glCompressedTexImage2D")]
            public static extern void CompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, IntPtr data);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glCompressedTexImage1D")]
            public static extern void CompressedTexImage1D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, IntPtr data);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glCompressedTexSubImage3D")]
            public static extern void CompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, IntPtr data);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glCompressedTexSubImage2D")]
            public static extern void CompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, IntPtr data);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glCompressedTexSubImage1D")]
            public static extern void CompressedTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, IntPtr data);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetCompressedTexImage")]
            public static extern void GetCompressedTexImage(GLenum target, GLint level, IntPtr img);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glBlendFuncSeparate")]
            public static extern void BlendFuncSeparate(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glFogCoordf")]
            public static extern void FogCoordf(GLfloat coord);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glFogCoordfv")]
            public static extern void FogCoordfv(IntPtr coord);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glFogCoordd")]
            public static extern void FogCoordd(GLdouble coord);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glFogCoorddv")]
            public static extern void FogCoorddv(IntPtr coord);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glFogCoordPointer")]
            public static extern void FogCoordPointer(GLenum type, GLsizei stride, IntPtr pointer);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMultiDrawArrays")]
            public static extern void MultiDrawArrays(GLenum mode, IntPtr first, IntPtr count, GLsizei primcount);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMultiDrawElements")]
            public static extern void MultiDrawElements(GLenum mode, IntPtr count, GLenum type, IntPtr indices, GLsizei primcount);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glPointParameterf")]
            public static extern void PointParameterf(GLenum pname, GLfloat param);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glPointParameterfv")]
            public static extern void PointParameterfv(GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glPointParameteri")]
            public static extern void PointParameteri(GLenum pname, GLint param);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glPointParameteriv")]
            public static extern void PointParameteriv(GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glSecondaryColor3b")]
            public static extern void SecondaryColor3b(GLbyte red, GLbyte green, GLbyte blue);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glSecondaryColor3bv")]
            public static extern void SecondaryColor3bv(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glSecondaryColor3d")]
            public static extern void SecondaryColor3d(GLdouble red, GLdouble green, GLdouble blue);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glSecondaryColor3dv")]
            public static extern void SecondaryColor3dv(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glSecondaryColor3f")]
            public static extern void SecondaryColor3f(GLfloat red, GLfloat green, GLfloat blue);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glSecondaryColor3fv")]
            public static extern void SecondaryColor3fv(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glSecondaryColor3i")]
            public static extern void SecondaryColor3i(GLint red, GLint green, GLint blue);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glSecondaryColor3iv")]
            public static extern void SecondaryColor3iv(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glSecondaryColor3s")]
            public static extern void SecondaryColor3s(GLshort red, GLshort green, GLshort blue);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glSecondaryColor3sv")]
            public static extern void SecondaryColor3sv(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glSecondaryColor3ub")]
            public static extern void SecondaryColor3ub(GLubyte red, GLubyte green, GLubyte blue);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glSecondaryColor3ubv")]
            public static extern void SecondaryColor3ubv(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glSecondaryColor3ui")]
            public static extern void SecondaryColor3ui(GLuint red, GLuint green, GLuint blue);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glSecondaryColor3uiv")]
            public static extern void SecondaryColor3uiv(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glSecondaryColor3us")]
            public static extern void SecondaryColor3us(GLushort red, GLushort green, GLushort blue);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glSecondaryColor3usv")]
            public static extern void SecondaryColor3usv(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glSecondaryColorPointer")]
            public static extern void SecondaryColorPointer(GLint size, GLenum type, GLsizei stride, IntPtr pointer);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glWindowPos2d")]
            public static extern void WindowPos2d(GLdouble x, GLdouble y);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glWindowPos2dv")]
            public static extern void WindowPos2dv(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glWindowPos2f")]
            public static extern void WindowPos2f(GLfloat x, GLfloat y);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glWindowPos2fv")]
            public static extern void WindowPos2fv(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glWindowPos2i")]
            public static extern void WindowPos2i(GLint x, GLint y);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glWindowPos2iv")]
            public static extern void WindowPos2iv(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glWindowPos2s")]
            public static extern void WindowPos2s(GLshort x, GLshort y);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glWindowPos2sv")]
            public static extern void WindowPos2sv(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glWindowPos3d")]
            public static extern void WindowPos3d(GLdouble x, GLdouble y, GLdouble z);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glWindowPos3dv")]
            public static extern void WindowPos3dv(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glWindowPos3f")]
            public static extern void WindowPos3f(GLfloat x, GLfloat y, GLfloat z);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glWindowPos3fv")]
            public static extern void WindowPos3fv(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glWindowPos3i")]
            public static extern void WindowPos3i(GLint x, GLint y, GLint z);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glWindowPos3iv")]
            public static extern void WindowPos3iv(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glWindowPos3s")]
            public static extern void WindowPos3s(GLshort x, GLshort y, GLshort z);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glWindowPos3sv")]
            public static extern void WindowPos3sv(IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGenQueries")]
            public static extern void GenQueries(GLsizei n, IntPtr ids);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glDeleteQueries")]
            public static extern void DeleteQueries(GLsizei n, IntPtr ids);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glIsQuery")]
            public static extern GLboolean IsQuery(GLuint id);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glBeginQuery")]
            public static extern void BeginQuery(GLenum target, GLuint id);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glEndQuery")]
            public static extern void EndQuery(GLenum target);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetQueryiv")]
            public static extern void GetQueryiv(GLenum target, GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetQueryObjectiv")]
            public static extern void GetQueryObjectiv(GLuint id, GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetQueryObjectuiv")]
            public static extern void GetQueryObjectuiv(GLuint id, GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glBindBuffer")]
            public static extern void BindBuffer(GLenum target, GLuint buffer);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glDeleteBuffers")]
            public static extern void DeleteBuffers(GLsizei n, IntPtr buffers);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGenBuffers")]
            public static extern void GenBuffers(GLsizei n, IntPtr buffers);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glIsBuffer")]
            public static extern GLboolean IsBuffer(GLuint buffer);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glBufferData")]
            public static extern void BufferData(GLenum target, GLsizeiptr size, IntPtr data, GLenum usage);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glBufferSubData")]
            public static extern void BufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, IntPtr data);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetBufferSubData")]
            public static extern void GetBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, IntPtr data);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glMapBuffer")]
            public static extern IntPtr MapBuffer(GLenum target, GLenum access);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glUnmapBuffer")]
            public static extern GLboolean UnmapBuffer(GLenum target);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetBufferParameteriv")]
            public static extern void GetBufferParameteriv(GLenum target, GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetBufferPointerv")]
            public static extern void GetBufferPointerv(GLenum target, GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glBlendEquationSeparate")]
            public static extern void BlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glDrawBuffers")]
            public static extern void DrawBuffers(GLsizei n, IntPtr bufs);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glStencilOpSeparate")]
            public static extern void StencilOpSeparate(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glStencilFuncSeparate")]
            public static extern void StencilFuncSeparate(GLenum frontfunc, GLenum backfunc, GLint reference, GLuint mask);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glStencilMaskSeparate")]
            public static extern void StencilMaskSeparate(GLenum face, GLuint mask);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glAttachShader")]
            public static extern void AttachShader(GLuint program, GLuint shader);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glBindAttribLocation")]
            public static extern void BindAttribLocation(GLuint program, GLuint index, string name);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glCompileShader")]
            public static extern void CompileShader(GLuint shader);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glCreateProgram")]
            public static extern GLuint CreateProgram();

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glCreateShader")]
            public static extern GLuint CreateShader(GLenum type);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glDeleteProgram")]
            public static extern void DeleteProgram(GLuint program);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glDeleteShader")]
            public static extern void DeleteShader(GLuint shader);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glDetachShader")]
            public static extern void DetachShader(GLuint program, GLuint shader);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glDisableVertexAttribArray")]
            public static extern void DisableVertexAttribArray(GLuint index);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glEnableVertexAttribArray")]
            public static extern void EnableVertexAttribArray(GLuint index);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetActiveAttrib")]
            public static extern void GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, IntPtr size, IntPtr type, StringBuilder name);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetActiveUniform")]
            public static extern void GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, IntPtr size, IntPtr type, StringBuilder name);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetAttachedShaders")]
            public static extern void GetAttachedShaders(GLuint program, GLsizei maxCount, IntPtr count, IntPtr obj);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetAttribLocation")]
            public static extern GLint GetAttribLocation(GLuint program, string name);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetProgramiv")]
            public static extern void GetProgramiv(GLuint program, GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetProgramInfoLog")]
            public static extern void GetProgramInfoLog(GLuint program, GLsizei bufSize, IntPtr length, StringBuilder infoLog);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetShaderiv")]
            public static extern void GetShaderiv(GLuint shader, GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetShaderInfoLog")]
            public static extern void GetShaderInfoLog(GLuint shader, GLsizei bufSize, IntPtr length, StringBuilder infoLog);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetShaderSource")]
            public static extern void GetShaderSource(GLuint shader, GLsizei bufSize, IntPtr length, StringBuilder source);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetUniformLocation")]
            public static extern GLint GetUniformLocation(GLuint program, string name);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetUniformfv")]
            public static extern void GetUniformfv(GLuint program, GLint location, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetUniformiv")]
            public static extern void GetUniformiv(GLuint program, GLint location, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetVertexAttribdv")]
            public static extern void GetVertexAttribdv(GLuint index, GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetVertexAttribfv")]
            public static extern void GetVertexAttribfv(GLuint index, GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetVertexAttribiv")]
            public static extern void GetVertexAttribiv(GLuint index, GLenum pname, IntPtr parameters);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glGetVertexAttribPointerv")]
            public static extern void GetVertexAttribPointerv(GLuint index, GLenum pname, IntPtr pointer);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glIsProgram")]
            public static extern GLboolean IsProgram(GLuint program);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glIsShader")]
            public static extern GLboolean IsShader(GLuint shader);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glLinkProgram")]
            public static extern void LinkProgram(GLuint program);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glShaderSource")]
            public static extern void ShaderSource(GLuint shader, GLsizei count, string[] @string, IntPtr length);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glUseProgram")]
            public static extern void UseProgram(GLuint program);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glUniform1f")]
            public static extern void Uniform1f(GLint location, GLfloat v0);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glUniform2f")]
            public static extern void Uniform2f(GLint location, GLfloat v0, GLfloat v1);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glUniform3f")]
            public static extern void Uniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glUniform4f")]
            public static extern void Uniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glUniform1i")]
            public static extern void Uniform1i(GLint location, GLint v0);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glUniform2i")]
            public static extern void Uniform2i(GLint location, GLint v0, GLint v1);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glUniform3i")]
            public static extern void Uniform3i(GLint location, GLint v0, GLint v1, GLint v2);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glUniform4i")]
            public static extern void Uniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glUniform1fv")]
            public static extern void Uniform1fv(GLint location, GLsizei count, IntPtr value);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glUniform2fv")]
            public static extern void Uniform2fv(GLint location, GLsizei count, IntPtr value);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glUniform3fv")]
            public static extern void Uniform3fv(GLint location, GLsizei count, IntPtr value);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glUniform4fv")]
            public static extern void Uniform4fv(GLint location, GLsizei count, IntPtr value);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glUniform1iv")]
            public static extern void Uniform1iv(GLint location, GLsizei count, IntPtr value);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glUniform2iv")]
            public static extern void Uniform2iv(GLint location, GLsizei count, IntPtr value);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glUniform3iv")]
            public static extern void Uniform3iv(GLint location, GLsizei count, IntPtr value);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glUniform4iv")]
            public static extern void Uniform4iv(GLint location, GLsizei count, IntPtr value);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glUniformMatrix2fv")]
            public static extern void UniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, IntPtr value);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glUniformMatrix3fv")]
            public static extern void UniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, IntPtr value);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glUniformMatrix4fv")]
            public static extern void UniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, IntPtr value);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glValidateProgram")]
            public static extern void ValidateProgram(GLuint program);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib1d")]
            public static extern void VertexAttrib1d(GLuint index, GLdouble x);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib1dv")]
            public static extern void VertexAttrib1dv(GLuint index, IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib1f")]
            public static extern void VertexAttrib1f(GLuint index, GLfloat x);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib1fv")]
            public static extern void VertexAttrib1fv(GLuint index, IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib1s")]
            public static extern void VertexAttrib1s(GLuint index, GLshort x);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib1sv")]
            public static extern void VertexAttrib1sv(GLuint index, IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib2d")]
            public static extern void VertexAttrib2d(GLuint index, GLdouble x, GLdouble y);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib2dv")]
            public static extern void VertexAttrib2dv(GLuint index, IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib2f")]
            public static extern void VertexAttrib2f(GLuint index, GLfloat x, GLfloat y);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib2fv")]
            public static extern void VertexAttrib2fv(GLuint index, IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib2s")]
            public static extern void VertexAttrib2s(GLuint index, GLshort x, GLshort y);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib2sv")]
            public static extern void VertexAttrib2sv(GLuint index, IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib3d")]
            public static extern void VertexAttrib3d(GLuint index, GLdouble x, GLdouble y, GLdouble z);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib3dv")]
            public static extern void VertexAttrib3dv(GLuint index, IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib3f")]
            public static extern void VertexAttrib3f(GLuint index, GLfloat x, GLfloat y, GLfloat z);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib3fv")]
            public static extern void VertexAttrib3fv(GLuint index, IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib3s")]
            public static extern void VertexAttrib3s(GLuint index, GLshort x, GLshort y, GLshort z);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib3sv")]
            public static extern void VertexAttrib3sv(GLuint index, IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib4Nbv")]
            public static extern void VertexAttrib4Nbv(GLuint index, IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib4Niv")]
            public static extern void VertexAttrib4Niv(GLuint index, IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib4Nsv")]
            public static extern void VertexAttrib4Nsv(GLuint index, IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib4Nub")]
            public static extern void VertexAttrib4Nub(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib4Nubv")]
            public static extern void VertexAttrib4Nubv(GLuint index, IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib4Nuiv")]
            public static extern void VertexAttrib4Nuiv(GLuint index, IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib4Nusv")]
            public static extern void VertexAttrib4Nusv(GLuint index, IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib4bv")]
            public static extern void VertexAttrib4bv(GLuint index, IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib4d")]
            public static extern void VertexAttrib4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib4dv")]
            public static extern void VertexAttrib4dv(GLuint index, IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib4f")]
            public static extern void VertexAttrib4f(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib4fv")]
            public static extern void VertexAttrib4fv(GLuint index, IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib4iv")]
            public static extern void VertexAttrib4iv(GLuint index, IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib4s")]
            public static extern void VertexAttrib4s(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib4sv")]
            public static extern void VertexAttrib4sv(GLuint index, IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib4ubv")]
            public static extern void VertexAttrib4ubv(GLuint index, IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib4uiv")]
            public static extern void VertexAttrib4uiv(GLuint index, IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib4usv")]
            public static extern void VertexAttrib4usv(GLuint index, IntPtr v);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttribPointer")]
            public static extern void VertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, IntPtr pointer);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glUniformMatrix2x3fv")]
            public static extern void UniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, IntPtr value);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glUniformMatrix3x2fv")]
            public static extern void UniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, IntPtr value);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glUniformMatrix2x4fv")]
            public static extern void UniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, IntPtr value);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glUniformMatrix4x2fv")]
            public static extern void UniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, IntPtr value);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glUniformMatrix3x4fv")]
            public static extern void UniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, IntPtr value);

            [DllImport(GL_NATIVE_LIBRARY, EntryPoint = "glUniformMatrix4x3fv")]
            public static extern void UniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, IntPtr value);

        }
        #endregion internal static class Imports

        #region Wrappers

        #region NewList(GLuint list, GLenum mode)

        /// <summary>
        /// 
        /// </summary>
        public static         void glNewList(GLuint list, GLenum mode)
        {
            Delegates.glNewList(list, mode);
        }

        #endregion

        #region EndList()

        /// <summary>
        /// 
        /// </summary>
        public static         void glEndList()
        {
            Delegates.glEndList();
        }

        #endregion

        #region CallList(GLuint list)

        /// <summary>
        /// 
        /// </summary>
        public static         void glCallList(GLuint list)
        {
            Delegates.glCallList(list);
        }

        #endregion

        #region CallLists(GLsizei n, GLenum type, IntPtr lists)

        /// <summary>
        /// 
        /// </summary>
        public static         void glCallLists(GLsizei n, GLenum type, IntPtr lists)
        {
            Delegates.glCallLists(n, type, lists);
        }

        #endregion

        #region CallLists(GLsizei n, GLenum type, object lists)

        /// <summary>
        /// 
        /// </summary>
        public static         void glCallLists(GLsizei n, GLenum type, object lists)
        {
            GCHandle h0 = GCHandle.Alloc(lists, GCHandleType.Pinned);
            try
            {
                Delegates.glCallLists(n, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region DeleteLists(GLuint list, GLsizei range)

        /// <summary>
        /// 
        /// </summary>
        public static         void glDeleteLists(GLuint list, GLsizei range)
        {
            Delegates.glDeleteLists(list, range);
        }

        #endregion

        #region GenLists(GLsizei range)

        /// <summary>
        /// 
        /// </summary>
        public static         GLuint glGenLists(GLsizei range)
        {
            return Delegates.glGenLists(range);
        }

        #endregion

        #region ListBase(GLuint @base)

        /// <summary>
        /// 
        /// </summary>
        public static         void glListBase(GLuint @base)
        {
            Delegates.glListBase(@base);
        }

        #endregion

        #region Begin(GLenum mode)

        /// <summary>
        /// 
        /// </summary>
        public static         void glBegin(GLenum mode)
        {
            Delegates.glBegin(mode);
        }

        #endregion

        #region Bitmap(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, IntPtr bitmap)

        /// <summary>
        /// 
        /// </summary>
        public static         void glBitmap(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, IntPtr bitmap)
        {
            Delegates.glBitmap(width, height, xorig, yorig, xmove, ymove, bitmap);
        }

        #endregion

        #region Bitmap(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, object bitmap)

        /// <summary>
        /// 
        /// </summary>
        public static         void glBitmap(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, object bitmap)
        {
            GCHandle h0 = GCHandle.Alloc(bitmap, GCHandleType.Pinned);
            try
            {
                Delegates.glBitmap(width, height, xorig, yorig, xmove, ymove, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Bitmap(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, GLubyte[] bitmap)

        /// <summary>
        /// 
        /// </summary>
        public static         void glBitmap(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, GLubyte[] bitmap)
        {
            GCHandle h0 = GCHandle.Alloc(bitmap, GCHandleType.Pinned);
            try
            {
                Delegates.glBitmap(width, height, xorig, yorig, xmove, ymove, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color3b(GLbyte red, GLbyte green, GLbyte blue)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor3b(GLbyte red, GLbyte green, GLbyte blue)
        {
            Delegates.glColor3b(red, green, blue);
        }

        #endregion

        #region Color3bv(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor3bv(IntPtr v)
        {
            Delegates.glColor3bv(v);
        }

        #endregion

        #region Color3bv(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor3bv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor3bv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color3bv(GLbyte[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor3bv(GLbyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor3bv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color3d(GLdouble red, GLdouble green, GLdouble blue)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor3d(GLdouble red, GLdouble green, GLdouble blue)
        {
            Delegates.glColor3d(red, green, blue);
        }

        #endregion

        #region Color3dv(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor3dv(IntPtr v)
        {
            Delegates.glColor3dv(v);
        }

        #endregion

        #region Color3dv(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor3dv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor3dv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color3dv(GLdouble[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor3dv(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor3dv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color3f(GLfloat red, GLfloat green, GLfloat blue)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor3f(GLfloat red, GLfloat green, GLfloat blue)
        {
            Delegates.glColor3f(red, green, blue);
        }

        #endregion

        #region Color3fv(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor3fv(IntPtr v)
        {
            Delegates.glColor3fv(v);
        }

        #endregion

        #region Color3fv(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor3fv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor3fv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color3fv(GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor3fv(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor3fv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color3i(GLint red, GLint green, GLint blue)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor3i(GLint red, GLint green, GLint blue)
        {
            Delegates.glColor3i(red, green, blue);
        }

        #endregion

        #region Color3iv(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor3iv(IntPtr v)
        {
            Delegates.glColor3iv(v);
        }

        #endregion

        #region Color3iv(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor3iv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor3iv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color3iv(GLint[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor3iv(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor3iv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color3s(GLshort red, GLshort green, GLshort blue)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor3s(GLshort red, GLshort green, GLshort blue)
        {
            Delegates.glColor3s(red, green, blue);
        }

        #endregion

        #region Color3sv(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor3sv(IntPtr v)
        {
            Delegates.glColor3sv(v);
        }

        #endregion

        #region Color3sv(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor3sv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor3sv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color3sv(GLshort[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor3sv(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor3sv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color3ub(GLubyte red, GLubyte green, GLubyte blue)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor3ub(GLubyte red, GLubyte green, GLubyte blue)
        {
            Delegates.glColor3ub(red, green, blue);
        }

        #endregion

        #region Color3ubv(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor3ubv(IntPtr v)
        {
            Delegates.glColor3ubv(v);
        }

        #endregion

        #region Color3ubv(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor3ubv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor3ubv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color3ubv(GLubyte[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor3ubv(GLubyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor3ubv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color3ui(GLuint red, GLuint green, GLuint blue)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor3ui(GLuint red, GLuint green, GLuint blue)
        {
            Delegates.glColor3ui(red, green, blue);
        }

        #endregion

        #region Color3uiv(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor3uiv(IntPtr v)
        {
            Delegates.glColor3uiv(v);
        }

        #endregion

        #region Color3uiv(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor3uiv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor3uiv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color3uiv(GLuint[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor3uiv(GLuint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor3uiv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color3us(GLushort red, GLushort green, GLushort blue)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor3us(GLushort red, GLushort green, GLushort blue)
        {
            Delegates.glColor3us(red, green, blue);
        }

        #endregion

        #region Color3usv(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor3usv(IntPtr v)
        {
            Delegates.glColor3usv(v);
        }

        #endregion

        #region Color3usv(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor3usv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor3usv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color3usv(GLushort[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor3usv(GLushort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor3usv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color4b(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor4b(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha)
        {
            Delegates.glColor4b(red, green, blue, alpha);
        }

        #endregion

        #region Color4bv(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor4bv(IntPtr v)
        {
            Delegates.glColor4bv(v);
        }

        #endregion

        #region Color4bv(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor4bv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4bv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color4bv(GLbyte[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor4bv(GLbyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4bv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color4d(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor4d(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha)
        {
            Delegates.glColor4d(red, green, blue, alpha);
        }

        #endregion

        #region Color4dv(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor4dv(IntPtr v)
        {
            Delegates.glColor4dv(v);
        }

        #endregion

        #region Color4dv(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor4dv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4dv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color4dv(GLdouble[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor4dv(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4dv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color4f(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor4f(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
        {
            Delegates.glColor4f(red, green, blue, alpha);
        }

        #endregion

        #region Color4fv(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor4fv(IntPtr v)
        {
            Delegates.glColor4fv(v);
        }

        #endregion

        #region Color4fv(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor4fv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4fv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color4fv(GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor4fv(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4fv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color4i(GLint red, GLint green, GLint blue, GLint alpha)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor4i(GLint red, GLint green, GLint blue, GLint alpha)
        {
            Delegates.glColor4i(red, green, blue, alpha);
        }

        #endregion

        #region Color4iv(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor4iv(IntPtr v)
        {
            Delegates.glColor4iv(v);
        }

        #endregion

        #region Color4iv(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor4iv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4iv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color4iv(GLint[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor4iv(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4iv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color4s(GLshort red, GLshort green, GLshort blue, GLshort alpha)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor4s(GLshort red, GLshort green, GLshort blue, GLshort alpha)
        {
            Delegates.glColor4s(red, green, blue, alpha);
        }

        #endregion

        #region Color4sv(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor4sv(IntPtr v)
        {
            Delegates.glColor4sv(v);
        }

        #endregion

        #region Color4sv(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor4sv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4sv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color4sv(GLshort[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor4sv(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4sv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color4ub(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor4ub(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha)
        {
            Delegates.glColor4ub(red, green, blue, alpha);
        }

        #endregion

        #region Color4ubv(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor4ubv(IntPtr v)
        {
            Delegates.glColor4ubv(v);
        }

        #endregion

        #region Color4ubv(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor4ubv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4ubv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color4ubv(GLubyte[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor4ubv(GLubyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4ubv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color4ui(GLuint red, GLuint green, GLuint blue, GLuint alpha)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor4ui(GLuint red, GLuint green, GLuint blue, GLuint alpha)
        {
            Delegates.glColor4ui(red, green, blue, alpha);
        }

        #endregion

        #region Color4uiv(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor4uiv(IntPtr v)
        {
            Delegates.glColor4uiv(v);
        }

        #endregion

        #region Color4uiv(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor4uiv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4uiv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color4uiv(GLuint[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor4uiv(GLuint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4uiv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color4us(GLushort red, GLushort green, GLushort blue, GLushort alpha)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor4us(GLushort red, GLushort green, GLushort blue, GLushort alpha)
        {
            Delegates.glColor4us(red, green, blue, alpha);
        }

        #endregion

        #region Color4usv(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor4usv(IntPtr v)
        {
            Delegates.glColor4usv(v);
        }

        #endregion

        #region Color4usv(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor4usv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4usv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color4usv(GLushort[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor4usv(GLushort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4usv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region EdgeFlag(GLboolean flag)

        /// <summary>
        /// 
        /// </summary>
        public static         void glEdgeFlag(GLboolean flag)
        {
            Delegates.glEdgeFlag(flag);
        }

        #endregion

        #region EdgeFlagv(IntPtr flag)

        /// <summary>
        /// 
        /// </summary>
        public static         void glEdgeFlagv(IntPtr flag)
        {
            Delegates.glEdgeFlagv(flag);
        }

        #endregion

        #region EdgeFlagv(object flag)

        /// <summary>
        /// 
        /// </summary>
        public static         void glEdgeFlagv(object flag)
        {
            GCHandle h0 = GCHandle.Alloc(flag, GCHandleType.Pinned);
            try
            {
                Delegates.glEdgeFlagv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region EdgeFlagv(GLboolean[] flag)

        /// <summary>
        /// 
        /// </summary>
        public static         void glEdgeFlagv(GLboolean[] flag)
        {
            GCHandle h0 = GCHandle.Alloc(flag, GCHandleType.Pinned);
            try
            {
                Delegates.glEdgeFlagv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region End()

        /// <summary>
        /// 
        /// </summary>
        public static         void glEnd()
        {
            Delegates.glEnd();
        }

        #endregion

        #region Indexd(GLdouble c)

        /// <summary>
        /// 
        /// </summary>
        public static         void glIndexd(GLdouble c)
        {
            Delegates.glIndexd(c);
        }

        #endregion

        #region Indexdv(IntPtr c)

        /// <summary>
        /// 
        /// </summary>
        public static         void glIndexdv(IntPtr c)
        {
            Delegates.glIndexdv(c);
        }

        #endregion

        #region Indexdv(object c)

        /// <summary>
        /// 
        /// </summary>
        public static         void glIndexdv(object c)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glIndexdv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Indexdv(GLdouble[] c)

        /// <summary>
        /// 
        /// </summary>
        public static         void glIndexdv(GLdouble[] c)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glIndexdv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Indexf(GLfloat c)

        /// <summary>
        /// 
        /// </summary>
        public static         void glIndexf(GLfloat c)
        {
            Delegates.glIndexf(c);
        }

        #endregion

        #region Indexfv(IntPtr c)

        /// <summary>
        /// 
        /// </summary>
        public static         void glIndexfv(IntPtr c)
        {
            Delegates.glIndexfv(c);
        }

        #endregion

        #region Indexfv(object c)

        /// <summary>
        /// 
        /// </summary>
        public static         void glIndexfv(object c)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glIndexfv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Indexfv(GLfloat[] c)

        /// <summary>
        /// 
        /// </summary>
        public static         void glIndexfv(GLfloat[] c)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glIndexfv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Indexi(GLint c)

        /// <summary>
        /// 
        /// </summary>
        public static         void glIndexi(GLint c)
        {
            Delegates.glIndexi(c);
        }

        #endregion

        #region Indexiv(IntPtr c)

        /// <summary>
        /// 
        /// </summary>
        public static         void glIndexiv(IntPtr c)
        {
            Delegates.glIndexiv(c);
        }

        #endregion

        #region Indexiv(object c)

        /// <summary>
        /// 
        /// </summary>
        public static         void glIndexiv(object c)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glIndexiv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Indexiv(GLint[] c)

        /// <summary>
        /// 
        /// </summary>
        public static         void glIndexiv(GLint[] c)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glIndexiv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Indexs(GLshort c)

        /// <summary>
        /// 
        /// </summary>
        public static         void glIndexs(GLshort c)
        {
            Delegates.glIndexs(c);
        }

        #endregion

        #region Indexsv(IntPtr c)

        /// <summary>
        /// 
        /// </summary>
        public static         void glIndexsv(IntPtr c)
        {
            Delegates.glIndexsv(c);
        }

        #endregion

        #region Indexsv(object c)

        /// <summary>
        /// 
        /// </summary>
        public static         void glIndexsv(object c)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glIndexsv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Indexsv(GLshort[] c)

        /// <summary>
        /// 
        /// </summary>
        public static         void glIndexsv(GLshort[] c)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glIndexsv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Normal3b(GLbyte nx, GLbyte ny, GLbyte nz)

        /// <summary>
        /// 
        /// </summary>
        public static         void glNormal3b(GLbyte nx, GLbyte ny, GLbyte nz)
        {
            Delegates.glNormal3b(nx, ny, nz);
        }

        #endregion

        #region Normal3bv(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glNormal3bv(IntPtr v)
        {
            Delegates.glNormal3bv(v);
        }

        #endregion

        #region Normal3bv(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glNormal3bv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glNormal3bv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Normal3bv(GLbyte[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glNormal3bv(GLbyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glNormal3bv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Normal3d(GLdouble nx, GLdouble ny, GLdouble nz)

        /// <summary>
        /// 
        /// </summary>
        public static         void glNormal3d(GLdouble nx, GLdouble ny, GLdouble nz)
        {
            Delegates.glNormal3d(nx, ny, nz);
        }

        #endregion

        #region Normal3dv(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glNormal3dv(IntPtr v)
        {
            Delegates.glNormal3dv(v);
        }

        #endregion

        #region Normal3dv(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glNormal3dv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glNormal3dv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Normal3dv(GLdouble[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glNormal3dv(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glNormal3dv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Normal3f(GLfloat nx, GLfloat ny, GLfloat nz)

        /// <summary>
        /// 
        /// </summary>
        public static         void glNormal3f(GLfloat nx, GLfloat ny, GLfloat nz)
        {
            Delegates.glNormal3f(nx, ny, nz);
        }

        #endregion

        #region Normal3fv(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glNormal3fv(IntPtr v)
        {
            Delegates.glNormal3fv(v);
        }

        #endregion

        #region Normal3fv(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glNormal3fv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glNormal3fv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Normal3fv(GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glNormal3fv(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glNormal3fv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Normal3i(GLint nx, GLint ny, GLint nz)

        /// <summary>
        /// 
        /// </summary>
        public static         void glNormal3i(GLint nx, GLint ny, GLint nz)
        {
            Delegates.glNormal3i(nx, ny, nz);
        }

        #endregion

        #region Normal3iv(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glNormal3iv(IntPtr v)
        {
            Delegates.glNormal3iv(v);
        }

        #endregion

        #region Normal3iv(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glNormal3iv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glNormal3iv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Normal3iv(GLint[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glNormal3iv(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glNormal3iv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Normal3s(GLshort nx, GLshort ny, GLshort nz)

        /// <summary>
        /// 
        /// </summary>
        public static         void glNormal3s(GLshort nx, GLshort ny, GLshort nz)
        {
            Delegates.glNormal3s(nx, ny, nz);
        }

        #endregion

        #region Normal3sv(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glNormal3sv(IntPtr v)
        {
            Delegates.glNormal3sv(v);
        }

        #endregion

        #region Normal3sv(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glNormal3sv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glNormal3sv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Normal3sv(GLshort[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glNormal3sv(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glNormal3sv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region RasterPos2d(GLdouble x, GLdouble y)

        /// <summary>
        /// 
        /// </summary>
        public static         void glRasterPos2d(GLdouble x, GLdouble y)
        {
            Delegates.glRasterPos2d(x, y);
        }

        #endregion

        #region RasterPos2dv(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glRasterPos2dv(IntPtr v)
        {
            Delegates.glRasterPos2dv(v);
        }

        #endregion

        #region RasterPos2dv(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glRasterPos2dv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glRasterPos2dv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region RasterPos2dv(GLdouble[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glRasterPos2dv(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glRasterPos2dv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region RasterPos2f(GLfloat x, GLfloat y)

        /// <summary>
        /// 
        /// </summary>
        public static         void glRasterPos2f(GLfloat x, GLfloat y)
        {
            Delegates.glRasterPos2f(x, y);
        }

        #endregion

        #region RasterPos2fv(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glRasterPos2fv(IntPtr v)
        {
            Delegates.glRasterPos2fv(v);
        }

        #endregion

        #region RasterPos2fv(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glRasterPos2fv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glRasterPos2fv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region RasterPos2fv(GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glRasterPos2fv(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glRasterPos2fv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region RasterPos2i(GLint x, GLint y)

        /// <summary>
        /// 
        /// </summary>
        public static         void glRasterPos2i(GLint x, GLint y)
        {
            Delegates.glRasterPos2i(x, y);
        }

        #endregion

        #region RasterPos2iv(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glRasterPos2iv(IntPtr v)
        {
            Delegates.glRasterPos2iv(v);
        }

        #endregion

        #region RasterPos2iv(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glRasterPos2iv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glRasterPos2iv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region RasterPos2iv(GLint[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glRasterPos2iv(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glRasterPos2iv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region RasterPos2s(GLshort x, GLshort y)

        /// <summary>
        /// 
        /// </summary>
        public static         void glRasterPos2s(GLshort x, GLshort y)
        {
            Delegates.glRasterPos2s(x, y);
        }

        #endregion

        #region RasterPos2sv(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glRasterPos2sv(IntPtr v)
        {
            Delegates.glRasterPos2sv(v);
        }

        #endregion

        #region RasterPos2sv(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glRasterPos2sv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glRasterPos2sv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region RasterPos2sv(GLshort[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glRasterPos2sv(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glRasterPos2sv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region RasterPos3d(GLdouble x, GLdouble y, GLdouble z)

        /// <summary>
        /// 
        /// </summary>
        public static         void glRasterPos3d(GLdouble x, GLdouble y, GLdouble z)
        {
            Delegates.glRasterPos3d(x, y, z);
        }

        #endregion

        #region RasterPos3dv(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glRasterPos3dv(IntPtr v)
        {
            Delegates.glRasterPos3dv(v);
        }

        #endregion

        #region RasterPos3dv(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glRasterPos3dv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glRasterPos3dv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region RasterPos3dv(GLdouble[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glRasterPos3dv(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glRasterPos3dv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region RasterPos3f(GLfloat x, GLfloat y, GLfloat z)

        /// <summary>
        /// 
        /// </summary>
        public static         void glRasterPos3f(GLfloat x, GLfloat y, GLfloat z)
        {
            Delegates.glRasterPos3f(x, y, z);
        }

        #endregion

        #region RasterPos3fv(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glRasterPos3fv(IntPtr v)
        {
            Delegates.glRasterPos3fv(v);
        }

        #endregion

        #region RasterPos3fv(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glRasterPos3fv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glRasterPos3fv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region RasterPos3fv(GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glRasterPos3fv(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glRasterPos3fv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region RasterPos3i(GLint x, GLint y, GLint z)

        /// <summary>
        /// 
        /// </summary>
        public static         void glRasterPos3i(GLint x, GLint y, GLint z)
        {
            Delegates.glRasterPos3i(x, y, z);
        }

        #endregion

        #region RasterPos3iv(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glRasterPos3iv(IntPtr v)
        {
            Delegates.glRasterPos3iv(v);
        }

        #endregion

        #region RasterPos3iv(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glRasterPos3iv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glRasterPos3iv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region RasterPos3iv(GLint[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glRasterPos3iv(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glRasterPos3iv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region RasterPos3s(GLshort x, GLshort y, GLshort z)

        /// <summary>
        /// 
        /// </summary>
        public static         void glRasterPos3s(GLshort x, GLshort y, GLshort z)
        {
            Delegates.glRasterPos3s(x, y, z);
        }

        #endregion

        #region RasterPos3sv(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glRasterPos3sv(IntPtr v)
        {
            Delegates.glRasterPos3sv(v);
        }

        #endregion

        #region RasterPos3sv(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glRasterPos3sv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glRasterPos3sv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region RasterPos3sv(GLshort[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glRasterPos3sv(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glRasterPos3sv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region RasterPos4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w)

        /// <summary>
        /// 
        /// </summary>
        public static         void glRasterPos4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w)
        {
            Delegates.glRasterPos4d(x, y, z, w);
        }

        #endregion

        #region RasterPos4dv(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glRasterPos4dv(IntPtr v)
        {
            Delegates.glRasterPos4dv(v);
        }

        #endregion

        #region RasterPos4dv(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glRasterPos4dv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glRasterPos4dv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region RasterPos4dv(GLdouble[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glRasterPos4dv(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glRasterPos4dv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region RasterPos4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w)

        /// <summary>
        /// 
        /// </summary>
        public static         void glRasterPos4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w)
        {
            Delegates.glRasterPos4f(x, y, z, w);
        }

        #endregion

        #region RasterPos4fv(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glRasterPos4fv(IntPtr v)
        {
            Delegates.glRasterPos4fv(v);
        }

        #endregion

        #region RasterPos4fv(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glRasterPos4fv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glRasterPos4fv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region RasterPos4fv(GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glRasterPos4fv(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glRasterPos4fv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region RasterPos4i(GLint x, GLint y, GLint z, GLint w)

        /// <summary>
        /// 
        /// </summary>
        public static         void glRasterPos4i(GLint x, GLint y, GLint z, GLint w)
        {
            Delegates.glRasterPos4i(x, y, z, w);
        }

        #endregion

        #region RasterPos4iv(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glRasterPos4iv(IntPtr v)
        {
            Delegates.glRasterPos4iv(v);
        }

        #endregion

        #region RasterPos4iv(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glRasterPos4iv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glRasterPos4iv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region RasterPos4iv(GLint[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glRasterPos4iv(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glRasterPos4iv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region RasterPos4s(GLshort x, GLshort y, GLshort z, GLshort w)

        /// <summary>
        /// 
        /// </summary>
        public static         void glRasterPos4s(GLshort x, GLshort y, GLshort z, GLshort w)
        {
            Delegates.glRasterPos4s(x, y, z, w);
        }

        #endregion

        #region RasterPos4sv(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glRasterPos4sv(IntPtr v)
        {
            Delegates.glRasterPos4sv(v);
        }

        #endregion

        #region RasterPos4sv(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glRasterPos4sv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glRasterPos4sv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region RasterPos4sv(GLshort[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glRasterPos4sv(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glRasterPos4sv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Rectd(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2)

        /// <summary>
        /// 
        /// </summary>
        public static         void glRectd(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2)
        {
            Delegates.glRectd(x1, y1, x2, y2);
        }

        #endregion

        #region Rectdv(IntPtr v1, IntPtr v2)

        /// <summary>
        /// 
        /// </summary>
        public static         void glRectdv(IntPtr v1, IntPtr v2)
        {
            Delegates.glRectdv(v1, v2);
        }

        #endregion

        #region Rectdv(IntPtr v1, object v2)

        /// <summary>
        /// 
        /// </summary>
        public static         void glRectdv(IntPtr v1, object v2)
        {
            GCHandle h0 = GCHandle.Alloc(v2, GCHandleType.Pinned);
            try
            {
                Delegates.glRectdv(v1, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Rectdv(IntPtr v1, GLdouble[] v2)

        /// <summary>
        /// 
        /// </summary>
        public static         void glRectdv(IntPtr v1, GLdouble[] v2)
        {
            GCHandle h0 = GCHandle.Alloc(v2, GCHandleType.Pinned);
            try
            {
                Delegates.glRectdv(v1, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Rectdv(object v1, IntPtr v2)

        /// <summary>
        /// 
        /// </summary>
        public static         void glRectdv(object v1, IntPtr v2)
        {
            GCHandle h0 = GCHandle.Alloc(v1, GCHandleType.Pinned);
            try
            {
                Delegates.glRectdv(h0.AddrOfPinnedObject(), v2);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Rectdv(object v1, object v2)

        /// <summary>
        /// 
        /// </summary>
        public static         void glRectdv(object v1, object v2)
        {
            GCHandle h0 = GCHandle.Alloc(v1, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v2, GCHandleType.Pinned);
            try
            {
                Delegates.glRectdv(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region Rectdv(object v1, GLdouble[] v2)

        /// <summary>
        /// 
        /// </summary>
        public static         void glRectdv(object v1, GLdouble[] v2)
        {
            GCHandle h0 = GCHandle.Alloc(v1, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v2, GCHandleType.Pinned);
            try
            {
                Delegates.glRectdv(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region Rectdv(GLdouble[] v1, IntPtr v2)

        /// <summary>
        /// 
        /// </summary>
        public static         void glRectdv(GLdouble[] v1, IntPtr v2)
        {
            GCHandle h0 = GCHandle.Alloc(v1, GCHandleType.Pinned);
            try
            {
                Delegates.glRectdv(h0.AddrOfPinnedObject(), v2);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Rectdv(GLdouble[] v1, object v2)

        /// <summary>
        /// 
        /// </summary>
        public static         void glRectdv(GLdouble[] v1, object v2)
        {
            GCHandle h0 = GCHandle.Alloc(v1, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v2, GCHandleType.Pinned);
            try
            {
                Delegates.glRectdv(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region Rectdv(GLdouble[] v1, GLdouble[] v2)

        /// <summary>
        /// 
        /// </summary>
        public static         void glRectdv(GLdouble[] v1, GLdouble[] v2)
        {
            GCHandle h0 = GCHandle.Alloc(v1, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v2, GCHandleType.Pinned);
            try
            {
                Delegates.glRectdv(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region Rectf(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2)

        /// <summary>
        /// 
        /// </summary>
        public static         void glRectf(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2)
        {
            Delegates.glRectf(x1, y1, x2, y2);
        }

        #endregion

        #region Rectfv(IntPtr v1, IntPtr v2)

        /// <summary>
        /// 
        /// </summary>
        public static         void glRectfv(IntPtr v1, IntPtr v2)
        {
            Delegates.glRectfv(v1, v2);
        }

        #endregion

        #region Rectfv(IntPtr v1, object v2)

        /// <summary>
        /// 
        /// </summary>
        public static         void glRectfv(IntPtr v1, object v2)
        {
            GCHandle h0 = GCHandle.Alloc(v2, GCHandleType.Pinned);
            try
            {
                Delegates.glRectfv(v1, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Rectfv(IntPtr v1, GLfloat[] v2)

        /// <summary>
        /// 
        /// </summary>
        public static         void glRectfv(IntPtr v1, GLfloat[] v2)
        {
            GCHandle h0 = GCHandle.Alloc(v2, GCHandleType.Pinned);
            try
            {
                Delegates.glRectfv(v1, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Rectfv(object v1, IntPtr v2)

        /// <summary>
        /// 
        /// </summary>
        public static         void glRectfv(object v1, IntPtr v2)
        {
            GCHandle h0 = GCHandle.Alloc(v1, GCHandleType.Pinned);
            try
            {
                Delegates.glRectfv(h0.AddrOfPinnedObject(), v2);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Rectfv(object v1, object v2)

        /// <summary>
        /// 
        /// </summary>
        public static         void glRectfv(object v1, object v2)
        {
            GCHandle h0 = GCHandle.Alloc(v1, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v2, GCHandleType.Pinned);
            try
            {
                Delegates.glRectfv(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region Rectfv(object v1, GLfloat[] v2)

        /// <summary>
        /// 
        /// </summary>
        public static         void glRectfv(object v1, GLfloat[] v2)
        {
            GCHandle h0 = GCHandle.Alloc(v1, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v2, GCHandleType.Pinned);
            try
            {
                Delegates.glRectfv(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region Rectfv(GLfloat[] v1, IntPtr v2)

        /// <summary>
        /// 
        /// </summary>
        public static         void glRectfv(GLfloat[] v1, IntPtr v2)
        {
            GCHandle h0 = GCHandle.Alloc(v1, GCHandleType.Pinned);
            try
            {
                Delegates.glRectfv(h0.AddrOfPinnedObject(), v2);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Rectfv(GLfloat[] v1, object v2)

        /// <summary>
        /// 
        /// </summary>
        public static         void glRectfv(GLfloat[] v1, object v2)
        {
            GCHandle h0 = GCHandle.Alloc(v1, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v2, GCHandleType.Pinned);
            try
            {
                Delegates.glRectfv(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region Rectfv(GLfloat[] v1, GLfloat[] v2)

        /// <summary>
        /// 
        /// </summary>
        public static         void glRectfv(GLfloat[] v1, GLfloat[] v2)
        {
            GCHandle h0 = GCHandle.Alloc(v1, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v2, GCHandleType.Pinned);
            try
            {
                Delegates.glRectfv(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region Recti(GLint x1, GLint y1, GLint x2, GLint y2)

        /// <summary>
        /// 
        /// </summary>
        public static         void glRecti(GLint x1, GLint y1, GLint x2, GLint y2)
        {
            Delegates.glRecti(x1, y1, x2, y2);
        }

        #endregion

        #region Rectiv(IntPtr v1, IntPtr v2)

        /// <summary>
        /// 
        /// </summary>
        public static         void glRectiv(IntPtr v1, IntPtr v2)
        {
            Delegates.glRectiv(v1, v2);
        }

        #endregion

        #region Rectiv(IntPtr v1, object v2)

        /// <summary>
        /// 
        /// </summary>
        public static         void glRectiv(IntPtr v1, object v2)
        {
            GCHandle h0 = GCHandle.Alloc(v2, GCHandleType.Pinned);
            try
            {
                Delegates.glRectiv(v1, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Rectiv(IntPtr v1, GLint[] v2)

        /// <summary>
        /// 
        /// </summary>
        public static         void glRectiv(IntPtr v1, GLint[] v2)
        {
            GCHandle h0 = GCHandle.Alloc(v2, GCHandleType.Pinned);
            try
            {
                Delegates.glRectiv(v1, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Rectiv(object v1, IntPtr v2)

        /// <summary>
        /// 
        /// </summary>
        public static         void glRectiv(object v1, IntPtr v2)
        {
            GCHandle h0 = GCHandle.Alloc(v1, GCHandleType.Pinned);
            try
            {
                Delegates.glRectiv(h0.AddrOfPinnedObject(), v2);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Rectiv(object v1, object v2)

        /// <summary>
        /// 
        /// </summary>
        public static         void glRectiv(object v1, object v2)
        {
            GCHandle h0 = GCHandle.Alloc(v1, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v2, GCHandleType.Pinned);
            try
            {
                Delegates.glRectiv(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region Rectiv(object v1, GLint[] v2)

        /// <summary>
        /// 
        /// </summary>
        public static         void glRectiv(object v1, GLint[] v2)
        {
            GCHandle h0 = GCHandle.Alloc(v1, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v2, GCHandleType.Pinned);
            try
            {
                Delegates.glRectiv(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region Rectiv(GLint[] v1, IntPtr v2)

        /// <summary>
        /// 
        /// </summary>
        public static         void glRectiv(GLint[] v1, IntPtr v2)
        {
            GCHandle h0 = GCHandle.Alloc(v1, GCHandleType.Pinned);
            try
            {
                Delegates.glRectiv(h0.AddrOfPinnedObject(), v2);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Rectiv(GLint[] v1, object v2)

        /// <summary>
        /// 
        /// </summary>
        public static         void glRectiv(GLint[] v1, object v2)
        {
            GCHandle h0 = GCHandle.Alloc(v1, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v2, GCHandleType.Pinned);
            try
            {
                Delegates.glRectiv(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region Rectiv(GLint[] v1, GLint[] v2)

        /// <summary>
        /// 
        /// </summary>
        public static         void glRectiv(GLint[] v1, GLint[] v2)
        {
            GCHandle h0 = GCHandle.Alloc(v1, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v2, GCHandleType.Pinned);
            try
            {
                Delegates.glRectiv(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region Rects(GLshort x1, GLshort y1, GLshort x2, GLshort y2)

        /// <summary>
        /// 
        /// </summary>
        public static         void glRects(GLshort x1, GLshort y1, GLshort x2, GLshort y2)
        {
            Delegates.glRects(x1, y1, x2, y2);
        }

        #endregion

        #region Rectsv(IntPtr v1, IntPtr v2)

        /// <summary>
        /// 
        /// </summary>
        public static         void glRectsv(IntPtr v1, IntPtr v2)
        {
            Delegates.glRectsv(v1, v2);
        }

        #endregion

        #region Rectsv(IntPtr v1, object v2)

        /// <summary>
        /// 
        /// </summary>
        public static         void glRectsv(IntPtr v1, object v2)
        {
            GCHandle h0 = GCHandle.Alloc(v2, GCHandleType.Pinned);
            try
            {
                Delegates.glRectsv(v1, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Rectsv(IntPtr v1, GLshort[] v2)

        /// <summary>
        /// 
        /// </summary>
        public static         void glRectsv(IntPtr v1, GLshort[] v2)
        {
            GCHandle h0 = GCHandle.Alloc(v2, GCHandleType.Pinned);
            try
            {
                Delegates.glRectsv(v1, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Rectsv(object v1, IntPtr v2)

        /// <summary>
        /// 
        /// </summary>
        public static         void glRectsv(object v1, IntPtr v2)
        {
            GCHandle h0 = GCHandle.Alloc(v1, GCHandleType.Pinned);
            try
            {
                Delegates.glRectsv(h0.AddrOfPinnedObject(), v2);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Rectsv(object v1, object v2)

        /// <summary>
        /// 
        /// </summary>
        public static         void glRectsv(object v1, object v2)
        {
            GCHandle h0 = GCHandle.Alloc(v1, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v2, GCHandleType.Pinned);
            try
            {
                Delegates.glRectsv(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region Rectsv(object v1, GLshort[] v2)

        /// <summary>
        /// 
        /// </summary>
        public static         void glRectsv(object v1, GLshort[] v2)
        {
            GCHandle h0 = GCHandle.Alloc(v1, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v2, GCHandleType.Pinned);
            try
            {
                Delegates.glRectsv(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region Rectsv(GLshort[] v1, IntPtr v2)

        /// <summary>
        /// 
        /// </summary>
        public static         void glRectsv(GLshort[] v1, IntPtr v2)
        {
            GCHandle h0 = GCHandle.Alloc(v1, GCHandleType.Pinned);
            try
            {
                Delegates.glRectsv(h0.AddrOfPinnedObject(), v2);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Rectsv(GLshort[] v1, object v2)

        /// <summary>
        /// 
        /// </summary>
        public static         void glRectsv(GLshort[] v1, object v2)
        {
            GCHandle h0 = GCHandle.Alloc(v1, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v2, GCHandleType.Pinned);
            try
            {
                Delegates.glRectsv(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region Rectsv(GLshort[] v1, GLshort[] v2)

        /// <summary>
        /// 
        /// </summary>
        public static         void glRectsv(GLshort[] v1, GLshort[] v2)
        {
            GCHandle h0 = GCHandle.Alloc(v1, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v2, GCHandleType.Pinned);
            try
            {
                Delegates.glRectsv(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord1d(GLdouble s)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord1d(GLdouble s)
        {
            Delegates.glTexCoord1d(s);
        }

        #endregion

        #region TexCoord1dv(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord1dv(IntPtr v)
        {
            Delegates.glTexCoord1dv(v);
        }

        #endregion

        #region TexCoord1dv(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord1dv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord1dv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord1dv(GLdouble[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord1dv(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord1dv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord1f(GLfloat s)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord1f(GLfloat s)
        {
            Delegates.glTexCoord1f(s);
        }

        #endregion

        #region TexCoord1fv(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord1fv(IntPtr v)
        {
            Delegates.glTexCoord1fv(v);
        }

        #endregion

        #region TexCoord1fv(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord1fv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord1fv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord1fv(GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord1fv(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord1fv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord1i(GLint s)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord1i(GLint s)
        {
            Delegates.glTexCoord1i(s);
        }

        #endregion

        #region TexCoord1iv(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord1iv(IntPtr v)
        {
            Delegates.glTexCoord1iv(v);
        }

        #endregion

        #region TexCoord1iv(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord1iv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord1iv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord1iv(GLint[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord1iv(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord1iv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord1s(GLshort s)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord1s(GLshort s)
        {
            Delegates.glTexCoord1s(s);
        }

        #endregion

        #region TexCoord1sv(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord1sv(IntPtr v)
        {
            Delegates.glTexCoord1sv(v);
        }

        #endregion

        #region TexCoord1sv(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord1sv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord1sv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord1sv(GLshort[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord1sv(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord1sv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2d(GLdouble s, GLdouble t)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2d(GLdouble s, GLdouble t)
        {
            Delegates.glTexCoord2d(s, t);
        }

        #endregion

        #region TexCoord2dv(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2dv(IntPtr v)
        {
            Delegates.glTexCoord2dv(v);
        }

        #endregion

        #region TexCoord2dv(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2dv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2dv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2dv(GLdouble[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2dv(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2dv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2f(GLfloat s, GLfloat t)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2f(GLfloat s, GLfloat t)
        {
            Delegates.glTexCoord2f(s, t);
        }

        #endregion

        #region TexCoord2fv(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fv(IntPtr v)
        {
            Delegates.glTexCoord2fv(v);
        }

        #endregion

        #region TexCoord2fv(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fv(GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fv(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2i(GLint s, GLint t)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2i(GLint s, GLint t)
        {
            Delegates.glTexCoord2i(s, t);
        }

        #endregion

        #region TexCoord2iv(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2iv(IntPtr v)
        {
            Delegates.glTexCoord2iv(v);
        }

        #endregion

        #region TexCoord2iv(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2iv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2iv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2iv(GLint[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2iv(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2iv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2s(GLshort s, GLshort t)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2s(GLshort s, GLshort t)
        {
            Delegates.glTexCoord2s(s, t);
        }

        #endregion

        #region TexCoord2sv(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2sv(IntPtr v)
        {
            Delegates.glTexCoord2sv(v);
        }

        #endregion

        #region TexCoord2sv(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2sv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2sv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2sv(GLshort[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2sv(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2sv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord3d(GLdouble s, GLdouble t, GLdouble r)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord3d(GLdouble s, GLdouble t, GLdouble r)
        {
            Delegates.glTexCoord3d(s, t, r);
        }

        #endregion

        #region TexCoord3dv(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord3dv(IntPtr v)
        {
            Delegates.glTexCoord3dv(v);
        }

        #endregion

        #region TexCoord3dv(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord3dv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord3dv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord3dv(GLdouble[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord3dv(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord3dv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord3f(GLfloat s, GLfloat t, GLfloat r)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord3f(GLfloat s, GLfloat t, GLfloat r)
        {
            Delegates.glTexCoord3f(s, t, r);
        }

        #endregion

        #region TexCoord3fv(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord3fv(IntPtr v)
        {
            Delegates.glTexCoord3fv(v);
        }

        #endregion

        #region TexCoord3fv(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord3fv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord3fv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord3fv(GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord3fv(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord3fv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord3i(GLint s, GLint t, GLint r)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord3i(GLint s, GLint t, GLint r)
        {
            Delegates.glTexCoord3i(s, t, r);
        }

        #endregion

        #region TexCoord3iv(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord3iv(IntPtr v)
        {
            Delegates.glTexCoord3iv(v);
        }

        #endregion

        #region TexCoord3iv(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord3iv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord3iv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord3iv(GLint[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord3iv(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord3iv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord3s(GLshort s, GLshort t, GLshort r)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord3s(GLshort s, GLshort t, GLshort r)
        {
            Delegates.glTexCoord3s(s, t, r);
        }

        #endregion

        #region TexCoord3sv(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord3sv(IntPtr v)
        {
            Delegates.glTexCoord3sv(v);
        }

        #endregion

        #region TexCoord3sv(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord3sv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord3sv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord3sv(GLshort[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord3sv(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord3sv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4d(GLdouble s, GLdouble t, GLdouble r, GLdouble q)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4d(GLdouble s, GLdouble t, GLdouble r, GLdouble q)
        {
            Delegates.glTexCoord4d(s, t, r, q);
        }

        #endregion

        #region TexCoord4dv(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4dv(IntPtr v)
        {
            Delegates.glTexCoord4dv(v);
        }

        #endregion

        #region TexCoord4dv(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4dv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4dv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4dv(GLdouble[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4dv(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4dv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4f(GLfloat s, GLfloat t, GLfloat r, GLfloat q)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4f(GLfloat s, GLfloat t, GLfloat r, GLfloat q)
        {
            Delegates.glTexCoord4f(s, t, r, q);
        }

        #endregion

        #region TexCoord4fv(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4fv(IntPtr v)
        {
            Delegates.glTexCoord4fv(v);
        }

        #endregion

        #region TexCoord4fv(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4fv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fv(GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4fv(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4i(GLint s, GLint t, GLint r, GLint q)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4i(GLint s, GLint t, GLint r, GLint q)
        {
            Delegates.glTexCoord4i(s, t, r, q);
        }

        #endregion

        #region TexCoord4iv(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4iv(IntPtr v)
        {
            Delegates.glTexCoord4iv(v);
        }

        #endregion

        #region TexCoord4iv(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4iv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4iv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4iv(GLint[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4iv(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4iv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4s(GLshort s, GLshort t, GLshort r, GLshort q)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4s(GLshort s, GLshort t, GLshort r, GLshort q)
        {
            Delegates.glTexCoord4s(s, t, r, q);
        }

        #endregion

        #region TexCoord4sv(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4sv(IntPtr v)
        {
            Delegates.glTexCoord4sv(v);
        }

        #endregion

        #region TexCoord4sv(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4sv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4sv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4sv(GLshort[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4sv(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4sv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Vertex2d(GLdouble x, GLdouble y)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertex2d(GLdouble x, GLdouble y)
        {
            Delegates.glVertex2d(x, y);
        }

        #endregion

        #region Vertex2dv(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertex2dv(IntPtr v)
        {
            Delegates.glVertex2dv(v);
        }

        #endregion

        #region Vertex2dv(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertex2dv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertex2dv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Vertex2dv(GLdouble[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertex2dv(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertex2dv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Vertex2f(GLfloat x, GLfloat y)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertex2f(GLfloat x, GLfloat y)
        {
            Delegates.glVertex2f(x, y);
        }

        #endregion

        #region Vertex2fv(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertex2fv(IntPtr v)
        {
            Delegates.glVertex2fv(v);
        }

        #endregion

        #region Vertex2fv(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertex2fv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertex2fv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Vertex2fv(GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertex2fv(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertex2fv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Vertex2i(GLint x, GLint y)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertex2i(GLint x, GLint y)
        {
            Delegates.glVertex2i(x, y);
        }

        #endregion

        #region Vertex2iv(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertex2iv(IntPtr v)
        {
            Delegates.glVertex2iv(v);
        }

        #endregion

        #region Vertex2iv(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertex2iv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertex2iv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Vertex2iv(GLint[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertex2iv(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertex2iv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Vertex2s(GLshort x, GLshort y)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertex2s(GLshort x, GLshort y)
        {
            Delegates.glVertex2s(x, y);
        }

        #endregion

        #region Vertex2sv(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertex2sv(IntPtr v)
        {
            Delegates.glVertex2sv(v);
        }

        #endregion

        #region Vertex2sv(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertex2sv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertex2sv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Vertex2sv(GLshort[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertex2sv(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertex2sv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Vertex3d(GLdouble x, GLdouble y, GLdouble z)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertex3d(GLdouble x, GLdouble y, GLdouble z)
        {
            Delegates.glVertex3d(x, y, z);
        }

        #endregion

        #region Vertex3dv(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertex3dv(IntPtr v)
        {
            Delegates.glVertex3dv(v);
        }

        #endregion

        #region Vertex3dv(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertex3dv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertex3dv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Vertex3dv(GLdouble[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertex3dv(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertex3dv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Vertex3f(GLfloat x, GLfloat y, GLfloat z)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertex3f(GLfloat x, GLfloat y, GLfloat z)
        {
            Delegates.glVertex3f(x, y, z);
        }

        #endregion

        #region Vertex3fv(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertex3fv(IntPtr v)
        {
            Delegates.glVertex3fv(v);
        }

        #endregion

        #region Vertex3fv(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertex3fv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertex3fv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Vertex3fv(GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertex3fv(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertex3fv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Vertex3i(GLint x, GLint y, GLint z)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertex3i(GLint x, GLint y, GLint z)
        {
            Delegates.glVertex3i(x, y, z);
        }

        #endregion

        #region Vertex3iv(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertex3iv(IntPtr v)
        {
            Delegates.glVertex3iv(v);
        }

        #endregion

        #region Vertex3iv(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertex3iv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertex3iv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Vertex3iv(GLint[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertex3iv(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertex3iv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Vertex3s(GLshort x, GLshort y, GLshort z)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertex3s(GLshort x, GLshort y, GLshort z)
        {
            Delegates.glVertex3s(x, y, z);
        }

        #endregion

        #region Vertex3sv(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertex3sv(IntPtr v)
        {
            Delegates.glVertex3sv(v);
        }

        #endregion

        #region Vertex3sv(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertex3sv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertex3sv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Vertex3sv(GLshort[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertex3sv(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertex3sv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Vertex4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertex4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w)
        {
            Delegates.glVertex4d(x, y, z, w);
        }

        #endregion

        #region Vertex4dv(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertex4dv(IntPtr v)
        {
            Delegates.glVertex4dv(v);
        }

        #endregion

        #region Vertex4dv(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertex4dv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertex4dv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Vertex4dv(GLdouble[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertex4dv(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertex4dv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Vertex4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertex4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w)
        {
            Delegates.glVertex4f(x, y, z, w);
        }

        #endregion

        #region Vertex4fv(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertex4fv(IntPtr v)
        {
            Delegates.glVertex4fv(v);
        }

        #endregion

        #region Vertex4fv(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertex4fv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertex4fv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Vertex4fv(GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertex4fv(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertex4fv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Vertex4i(GLint x, GLint y, GLint z, GLint w)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertex4i(GLint x, GLint y, GLint z, GLint w)
        {
            Delegates.glVertex4i(x, y, z, w);
        }

        #endregion

        #region Vertex4iv(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertex4iv(IntPtr v)
        {
            Delegates.glVertex4iv(v);
        }

        #endregion

        #region Vertex4iv(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertex4iv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertex4iv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Vertex4iv(GLint[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertex4iv(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertex4iv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Vertex4s(GLshort x, GLshort y, GLshort z, GLshort w)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertex4s(GLshort x, GLshort y, GLshort z, GLshort w)
        {
            Delegates.glVertex4s(x, y, z, w);
        }

        #endregion

        #region Vertex4sv(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertex4sv(IntPtr v)
        {
            Delegates.glVertex4sv(v);
        }

        #endregion

        #region Vertex4sv(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertex4sv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertex4sv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Vertex4sv(GLshort[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertex4sv(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertex4sv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ClipPlane(GLenum plane, IntPtr equation)

        /// <summary>
        /// 
        /// </summary>
        public static         void glClipPlane(GLenum plane, IntPtr equation)
        {
            Delegates.glClipPlane(plane, equation);
        }

        #endregion

        #region ClipPlane(GLenum plane, object equation)

        /// <summary>
        /// 
        /// </summary>
        public static         void glClipPlane(GLenum plane, object equation)
        {
            GCHandle h0 = GCHandle.Alloc(equation, GCHandleType.Pinned);
            try
            {
                Delegates.glClipPlane(plane, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ClipPlane(GLenum plane, GLdouble[] equation)

        /// <summary>
        /// 
        /// </summary>
        public static         void glClipPlane(GLenum plane, GLdouble[] equation)
        {
            GCHandle h0 = GCHandle.Alloc(equation, GCHandleType.Pinned);
            try
            {
                Delegates.glClipPlane(plane, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ColorMaterial(GLenum face, GLenum mode)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColorMaterial(GLenum face, GLenum mode)
        {
            Delegates.glColorMaterial(face, mode);
        }

        #endregion

        #region CullFace(GLenum mode)

        /// <summary>
        /// 
        /// </summary>
        public static         void glCullFace(GLenum mode)
        {
            Delegates.glCullFace(mode);
        }

        #endregion

        #region Fogf(GLenum pname, GLfloat param)

        /// <summary>
        /// 
        /// </summary>
        public static         void glFogf(GLenum pname, GLfloat param)
        {
            Delegates.glFogf(pname, param);
        }

        #endregion

        #region Fogfv(GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glFogfv(GLenum pname, IntPtr parameters)
        {
            Delegates.glFogfv(pname, parameters);
        }

        #endregion

        #region Fogfv(GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glFogfv(GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glFogfv(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Fogfv(GLenum pname, GLfloat[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glFogfv(GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glFogfv(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Fogi(GLenum pname, GLint param)

        /// <summary>
        /// 
        /// </summary>
        public static         void glFogi(GLenum pname, GLint param)
        {
            Delegates.glFogi(pname, param);
        }

        #endregion

        #region Fogiv(GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glFogiv(GLenum pname, IntPtr parameters)
        {
            Delegates.glFogiv(pname, parameters);
        }

        #endregion

        #region Fogiv(GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glFogiv(GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glFogiv(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Fogiv(GLenum pname, GLint[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glFogiv(GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glFogiv(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region FrontFace(GLenum mode)

        /// <summary>
        /// 
        /// </summary>
        public static         void glFrontFace(GLenum mode)
        {
            Delegates.glFrontFace(mode);
        }

        #endregion

        #region Hint(GLenum target, GLenum mode)

        /// <summary>
        /// 
        /// </summary>
        public static         void glHint(GLenum target, GLenum mode)
        {
            Delegates.glHint(target, mode);
        }

        #endregion

        #region Lightf(GLenum light, GLenum pname, GLfloat param)

        /// <summary>
        /// 
        /// </summary>
        public static         void glLightf(GLenum light, GLenum pname, GLfloat param)
        {
            Delegates.glLightf(light, pname, param);
        }

        #endregion

        #region Lightfv(GLenum light, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glLightfv(GLenum light, GLenum pname, IntPtr parameters)
        {
            Delegates.glLightfv(light, pname, parameters);
        }

        #endregion

        #region Lightfv(GLenum light, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glLightfv(GLenum light, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glLightfv(light, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Lightfv(GLenum light, GLenum pname, GLfloat[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glLightfv(GLenum light, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glLightfv(light, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Lighti(GLenum light, GLenum pname, GLint param)

        /// <summary>
        /// 
        /// </summary>
        public static         void glLighti(GLenum light, GLenum pname, GLint param)
        {
            Delegates.glLighti(light, pname, param);
        }

        #endregion

        #region Lightiv(GLenum light, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glLightiv(GLenum light, GLenum pname, IntPtr parameters)
        {
            Delegates.glLightiv(light, pname, parameters);
        }

        #endregion

        #region Lightiv(GLenum light, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glLightiv(GLenum light, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glLightiv(light, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Lightiv(GLenum light, GLenum pname, GLint[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glLightiv(GLenum light, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glLightiv(light, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region LightModelf(GLenum pname, GLfloat param)

        /// <summary>
        /// 
        /// </summary>
        public static         void glLightModelf(GLenum pname, GLfloat param)
        {
            Delegates.glLightModelf(pname, param);
        }

        #endregion

        #region LightModelfv(GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glLightModelfv(GLenum pname, IntPtr parameters)
        {
            Delegates.glLightModelfv(pname, parameters);
        }

        #endregion

        #region LightModelfv(GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glLightModelfv(GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glLightModelfv(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region LightModelfv(GLenum pname, GLfloat[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glLightModelfv(GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glLightModelfv(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region LightModeli(GLenum pname, GLint param)

        /// <summary>
        /// 
        /// </summary>
        public static         void glLightModeli(GLenum pname, GLint param)
        {
            Delegates.glLightModeli(pname, param);
        }

        #endregion

        #region LightModeliv(GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glLightModeliv(GLenum pname, IntPtr parameters)
        {
            Delegates.glLightModeliv(pname, parameters);
        }

        #endregion

        #region LightModeliv(GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glLightModeliv(GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glLightModeliv(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region LightModeliv(GLenum pname, GLint[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glLightModeliv(GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glLightModeliv(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region LineStipple(GLint factor, GLint pattern)

        /// <summary>
        /// 
        /// </summary>
        public static         void glLineStipple(GLint factor, GLint pattern)
        {
            Delegates. glLineStipple(factor, unchecked((GLushort)pattern));
        }

        #endregion

        #region LineWidth(GLfloat width)

        /// <summary>
        /// 
        /// </summary>
        public static         void glLineWidth(GLfloat width)
        {
            Delegates.glLineWidth(width);
        }

        #endregion

        #region Materialf(GLenum face, GLenum pname, GLfloat param)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMaterialf(GLenum face, GLenum pname, GLfloat param)
        {
            Delegates.glMaterialf(face, pname, param);
        }

        #endregion

        #region Materialfv(GLenum face, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMaterialfv(GLenum face, GLenum pname, IntPtr parameters)
        {
            Delegates.glMaterialfv(face, pname, parameters);
        }

        #endregion

        #region Materialfv(GLenum face, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMaterialfv(GLenum face, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glMaterialfv(face, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Materialfv(GLenum face, GLenum pname, GLfloat[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMaterialfv(GLenum face, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glMaterialfv(face, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Materiali(GLenum face, GLenum pname, GLint param)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMateriali(GLenum face, GLenum pname, GLint param)
        {
            Delegates.glMateriali(face, pname, param);
        }

        #endregion

        #region Materialiv(GLenum face, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMaterialiv(GLenum face, GLenum pname, IntPtr parameters)
        {
            Delegates.glMaterialiv(face, pname, parameters);
        }

        #endregion

        #region Materialiv(GLenum face, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMaterialiv(GLenum face, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glMaterialiv(face, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Materialiv(GLenum face, GLenum pname, GLint[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMaterialiv(GLenum face, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glMaterialiv(face, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region PointSize(GLfloat size)

        /// <summary>
        /// 
        /// </summary>
        public static         void glPointSize(GLfloat size)
        {
            Delegates.glPointSize(size);
        }

        #endregion

        #region PolygonMode(GLenum face, GLenum mode)

        /// <summary>
        /// 
        /// </summary>
        public static         void glPolygonMode(GLenum face, GLenum mode)
        {
            Delegates.glPolygonMode(face, mode);
        }

        #endregion

        #region PolygonStipple(IntPtr mask)

        /// <summary>
        /// 
        /// </summary>
        public static         void glPolygonStipple(IntPtr mask)
        {
            Delegates.glPolygonStipple(mask);
        }

        #endregion

        #region PolygonStipple(object mask)

        /// <summary>
        /// 
        /// </summary>
        public static         void glPolygonStipple(object mask)
        {
            GCHandle h0 = GCHandle.Alloc(mask, GCHandleType.Pinned);
            try
            {
                Delegates.glPolygonStipple(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region PolygonStipple(GLubyte[] mask)

        /// <summary>
        /// 
        /// </summary>
        public static         void glPolygonStipple(GLubyte[] mask)
        {
            GCHandle h0 = GCHandle.Alloc(mask, GCHandleType.Pinned);
            try
            {
                Delegates.glPolygonStipple(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Scissor(GLint x, GLint y, GLsizei width, GLsizei height)

        /// <summary>
        /// 
        /// </summary>
        public static         void glScissor(GLint x, GLint y, GLsizei width, GLsizei height)
        {
            Delegates.glScissor(x, y, width, height);
        }

        #endregion

        #region ShadeModel(GLenum mode)

        /// <summary>
        /// 
        /// </summary>
        public static         void glShadeModel(GLenum mode)
        {
            Delegates.glShadeModel(mode);
        }

        #endregion

        #region TexParameterf(GLenum target, GLenum pname, GLfloat param)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexParameterf(GLenum target, GLenum pname, GLfloat param)
        {
            Delegates.glTexParameterf(target, pname, param);
        }

        #endregion

        #region TexParameterfv(GLenum target, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexParameterfv(GLenum target, GLenum pname, IntPtr parameters)
        {
            Delegates.glTexParameterfv(target, pname, parameters);
        }

        #endregion

        #region TexParameterfv(GLenum target, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexParameterfv(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glTexParameterfv(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexParameterfv(GLenum target, GLenum pname, GLfloat[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexParameterfv(GLenum target, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glTexParameterfv(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexParameteri(GLenum target, GLenum pname, GLint param)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexParameteri(GLenum target, GLenum pname, GLint param)
        {
            Delegates.glTexParameteri(target, pname, param);
        }

        #endregion

        #region TexParameteriv(GLenum target, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexParameteriv(GLenum target, GLenum pname, IntPtr parameters)
        {
            Delegates.glTexParameteriv(target, pname, parameters);
        }

        #endregion

        #region TexParameteriv(GLenum target, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexParameteriv(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glTexParameteriv(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexParameteriv(GLenum target, GLenum pname, GLint[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexParameteriv(GLenum target, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glTexParameteriv(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexImage1D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, IntPtr pixels)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexImage1D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, IntPtr pixels)
        {
            Delegates.glTexImage1D(target, level, internalformat, width, border, format, type, pixels);
        }

        #endregion

        #region TexImage1D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, object pixels)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexImage1D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, object pixels)
        {
            GCHandle h0 = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glTexImage1D(target, level, internalformat, width, border, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, IntPtr pixels)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, IntPtr pixels)
        {
            Delegates.glTexImage2D(target, level, internalformat, width, height, border, format, type, pixels);
        }

        #endregion

        #region TexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, object pixels)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, object pixels)
        {
            GCHandle h0 = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glTexImage2D(target, level, internalformat, width, height, border, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexEnvf(GLenum target, GLenum pname, GLfloat param)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexEnvf(GLenum target, GLenum pname, GLfloat param)
        {
            Delegates.glTexEnvf(target, pname, param);
        }

        #endregion

        #region TexEnvfv(GLenum target, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexEnvfv(GLenum target, GLenum pname, IntPtr parameters)
        {
            Delegates.glTexEnvfv(target, pname, parameters);
        }

        #endregion

        #region TexEnvfv(GLenum target, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexEnvfv(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glTexEnvfv(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexEnvfv(GLenum target, GLenum pname, GLfloat[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexEnvfv(GLenum target, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glTexEnvfv(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexEnvi(GLenum target, GLenum pname, GLint param)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexEnvi(GLenum target, GLenum pname, GLint param)
        {
            Delegates.glTexEnvi(target, pname, param);
        }

        #endregion

        #region TexEnviv(GLenum target, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexEnviv(GLenum target, GLenum pname, IntPtr parameters)
        {
            Delegates.glTexEnviv(target, pname, parameters);
        }

        #endregion

        #region TexEnviv(GLenum target, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexEnviv(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glTexEnviv(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexEnviv(GLenum target, GLenum pname, GLint[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexEnviv(GLenum target, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glTexEnviv(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexGend(GLenum coord, GLenum pname, GLdouble param)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexGend(GLenum coord, GLenum pname, GLdouble param)
        {
            Delegates.glTexGend(coord, pname, param);
        }

        #endregion

        #region TexGendv(GLenum coord, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexGendv(GLenum coord, GLenum pname, IntPtr parameters)
        {
            Delegates.glTexGendv(coord, pname, parameters);
        }

        #endregion

        #region TexGendv(GLenum coord, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexGendv(GLenum coord, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glTexGendv(coord, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexGendv(GLenum coord, GLenum pname, GLdouble[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexGendv(GLenum coord, GLenum pname, GLdouble[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glTexGendv(coord, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexGenf(GLenum coord, GLenum pname, GLfloat param)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexGenf(GLenum coord, GLenum pname, GLfloat param)
        {
            Delegates.glTexGenf(coord, pname, param);
        }

        #endregion

        #region TexGenfv(GLenum coord, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexGenfv(GLenum coord, GLenum pname, IntPtr parameters)
        {
            Delegates.glTexGenfv(coord, pname, parameters);
        }

        #endregion

        #region TexGenfv(GLenum coord, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexGenfv(GLenum coord, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glTexGenfv(coord, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexGenfv(GLenum coord, GLenum pname, GLfloat[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexGenfv(GLenum coord, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glTexGenfv(coord, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexGeni(GLenum coord, GLenum pname, GLint param)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexGeni(GLenum coord, GLenum pname, GLint param)
        {
            Delegates.glTexGeni(coord, pname, param);
        }

        #endregion

        #region TexGeniv(GLenum coord, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexGeniv(GLenum coord, GLenum pname, IntPtr parameters)
        {
            Delegates.glTexGeniv(coord, pname, parameters);
        }

        #endregion

        #region TexGeniv(GLenum coord, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexGeniv(GLenum coord, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glTexGeniv(coord, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexGeniv(GLenum coord, GLenum pname, GLint[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexGeniv(GLenum coord, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glTexGeniv(coord, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region FeedbackBuffer(GLsizei size, GLenum type, IntPtr buffer)

        /// <summary>
        /// 
        /// </summary>
        public static         void glFeedbackBuffer(GLsizei size, GLenum type, IntPtr buffer)
        {
            Delegates.glFeedbackBuffer(size, type, buffer);
        }

        #endregion

        #region FeedbackBuffer(GLsizei size, GLenum type, object buffer)

        /// <summary>
        /// 
        /// </summary>
        public static         void glFeedbackBuffer(GLsizei size, GLenum type, object buffer)
        {
            GCHandle h0 = GCHandle.Alloc(buffer, GCHandleType.Pinned);
            try
            {
                Delegates.glFeedbackBuffer(size, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region FeedbackBuffer(GLsizei size, GLenum type, GLfloat[] buffer)

        /// <summary>
        /// 
        /// </summary>
        public static         void glFeedbackBuffer(GLsizei size, GLenum type, GLfloat[] buffer)
        {
            GCHandle h0 = GCHandle.Alloc(buffer, GCHandleType.Pinned);
            try
            {
                Delegates.glFeedbackBuffer(size, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SelectBuffer(GLsizei size, IntPtr buffer)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSelectBuffer(GLsizei size, IntPtr buffer)
        {
            Delegates.glSelectBuffer(size, buffer);
        }

        #endregion

        #region SelectBuffer(GLsizei size, object buffer)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSelectBuffer(GLsizei size, object buffer)
        {
            GCHandle h0 = GCHandle.Alloc(buffer, GCHandleType.Pinned);
            try
            {
                Delegates.glSelectBuffer(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SelectBuffer(GLsizei size, GLuint[] buffer)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSelectBuffer(GLsizei size, GLuint[] buffer)
        {
            GCHandle h0 = GCHandle.Alloc(buffer, GCHandleType.Pinned);
            try
            {
                Delegates.glSelectBuffer(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region RenderMode(GLenum mode)

        /// <summary>
        /// 
        /// </summary>
        public static         GLint glRenderMode(GLenum mode)
        {
            return Delegates.glRenderMode(mode);
        }

        #endregion

        #region InitNames()

        /// <summary>
        /// 
        /// </summary>
        public static         void glInitNames()
        {
            Delegates.glInitNames();
        }

        #endregion

        #region LoadName(GLuint name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glLoadName(GLuint name)
        {
            Delegates.glLoadName(name);
        }

        #endregion

        #region PassThrough(GLfloat token)

        /// <summary>
        /// 
        /// </summary>
        public static         void glPassThrough(GLfloat token)
        {
            Delegates.glPassThrough(token);
        }

        #endregion

        #region PopName()

        /// <summary>
        /// 
        /// </summary>
        public static         void glPopName()
        {
            Delegates.glPopName();
        }

        #endregion

        #region PushName(GLuint name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glPushName(GLuint name)
        {
            Delegates.glPushName(name);
        }

        #endregion

        #region DrawBuffer(GLenum mode)

        /// <summary>
        /// 
        /// </summary>
        public static         void glDrawBuffer(GLenum mode)
        {
            Delegates.glDrawBuffer(mode);
        }

        #endregion

        #region Clear(GLbitfield mask)

        /// <summary>
        /// 
        /// </summary>
        public static         void glClear(GLbitfield mask)
        {
            Delegates.glClear(mask);
        }

        #endregion

        #region ClearAccum(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)

        /// <summary>
        /// 
        /// </summary>
        public static         void glClearAccum(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
        {
            Delegates.glClearAccum(red, green, blue, alpha);
        }

        #endregion

        #region ClearIndex(GLfloat c)

        /// <summary>
        /// 
        /// </summary>
        public static         void glClearIndex(GLfloat c)
        {
            Delegates.glClearIndex(c);
        }

        #endregion

        #region ClearColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)

        /// <summary>
        /// 
        /// </summary>
        public static         void glClearColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
        {
            Delegates.glClearColor(red, green, blue, alpha);
        }

        #endregion

        #region ClearStencil(GLint s)

        /// <summary>
        /// 
        /// </summary>
        public static         void glClearStencil(GLint s)
        {
            Delegates.glClearStencil(s);
        }

        #endregion

        #region ClearDepth(GLclampd depth)

        /// <summary>
        /// 
        /// </summary>
        public static         void glClearDepth(GLclampd depth)
        {
            Delegates.glClearDepth(depth);
        }

        #endregion

        #region StencilMask(GLuint mask)

        /// <summary>
        /// 
        /// </summary>
        public static         void glStencilMask(GLuint mask)
        {
            Delegates.glStencilMask(mask);
        }

        #endregion

        #region ColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)
        {
            Delegates.glColorMask(red, green, blue, alpha);
        }

        #endregion

        #region DepthMask(GLboolean flag)

        /// <summary>
        /// 
        /// </summary>
        public static         void glDepthMask(GLboolean flag)
        {
            Delegates.glDepthMask(flag);
        }

        #endregion

        #region IndexMask(GLuint mask)

        /// <summary>
        /// 
        /// </summary>
        public static         void glIndexMask(GLuint mask)
        {
            Delegates.glIndexMask(mask);
        }

        #endregion

        #region Accum(GLenum op, GLfloat value)

        /// <summary>
        /// 
        /// </summary>
        public static         void glAccum(GLenum op, GLfloat value)
        {
            Delegates.glAccum(op, value);
        }

        #endregion

        #region Disable(GLenum cap)

        /// <summary>
        /// 
        /// </summary>
        public static         void glDisable(GLenum cap)
        {
            Delegates.glDisable(cap);
        }

        #endregion

        #region Enable(GLenum cap)

        /// <summary>
        /// 
        /// </summary>
        public static         void glEnable(GLenum cap)
        {
            Delegates.glEnable(cap);
        }

        #endregion

        #region Finish()

        /// <summary>
        /// 
        /// </summary>
        public static         void glFinish()
        {
            Delegates.glFinish();
        }

        #endregion

        #region Flush()

        /// <summary>
        /// 
        /// </summary>
        public static         void glFlush()
        {
            Delegates.glFlush();
        }

        #endregion

        #region PopAttrib()

        /// <summary>
        /// 
        /// </summary>
        public static         void glPopAttrib()
        {
            Delegates.glPopAttrib();
        }

        #endregion

        #region PushAttrib(GLbitfield mask)

        /// <summary>
        /// 
        /// </summary>
        public static         void glPushAttrib(GLbitfield mask)
        {
            Delegates.glPushAttrib(mask);
        }

        #endregion

        #region Map1d(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, IntPtr points)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMap1d(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, IntPtr points)
        {
            Delegates.glMap1d(target, u1, u2, stride, order, points);
        }

        #endregion

        #region Map1d(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, object points)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMap1d(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, object points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                Delegates.glMap1d(target, u1, u2, stride, order, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Map1d(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, GLdouble[] points)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMap1d(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, GLdouble[] points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                Delegates.glMap1d(target, u1, u2, stride, order, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Map1f(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, IntPtr points)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMap1f(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, IntPtr points)
        {
            Delegates.glMap1f(target, u1, u2, stride, order, points);
        }

        #endregion

        #region Map1f(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, object points)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMap1f(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, object points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                Delegates.glMap1f(target, u1, u2, stride, order, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Map1f(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, GLfloat[] points)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMap1f(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, GLfloat[] points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                Delegates.glMap1f(target, u1, u2, stride, order, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Map2d(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, IntPtr points)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMap2d(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, IntPtr points)
        {
            Delegates.glMap2d(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
        }

        #endregion

        #region Map2d(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, object points)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMap2d(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, object points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                Delegates.glMap2d(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Map2d(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble[] points)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMap2d(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble[] points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                Delegates.glMap2d(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Map2f(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, IntPtr points)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMap2f(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, IntPtr points)
        {
            Delegates.glMap2f(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
        }

        #endregion

        #region Map2f(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, object points)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMap2f(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, object points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                Delegates.glMap2f(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Map2f(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat[] points)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMap2f(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat[] points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                Delegates.glMap2f(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MapGrid1d(GLint un, GLdouble u1, GLdouble u2)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMapGrid1d(GLint un, GLdouble u1, GLdouble u2)
        {
            Delegates.glMapGrid1d(un, u1, u2);
        }

        #endregion

        #region MapGrid1f(GLint un, GLfloat u1, GLfloat u2)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMapGrid1f(GLint un, GLfloat u1, GLfloat u2)
        {
            Delegates.glMapGrid1f(un, u1, u2);
        }

        #endregion

        #region MapGrid2d(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMapGrid2d(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2)
        {
            Delegates.glMapGrid2d(un, u1, u2, vn, v1, v2);
        }

        #endregion

        #region MapGrid2f(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMapGrid2f(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2)
        {
            Delegates.glMapGrid2f(un, u1, u2, vn, v1, v2);
        }

        #endregion

        #region EvalCoord1d(GLdouble u)

        /// <summary>
        /// 
        /// </summary>
        public static         void glEvalCoord1d(GLdouble u)
        {
            Delegates.glEvalCoord1d(u);
        }

        #endregion

        #region EvalCoord1dv(IntPtr u)

        /// <summary>
        /// 
        /// </summary>
        public static         void glEvalCoord1dv(IntPtr u)
        {
            Delegates.glEvalCoord1dv(u);
        }

        #endregion

        #region EvalCoord1dv(object u)

        /// <summary>
        /// 
        /// </summary>
        public static         void glEvalCoord1dv(object u)
        {
            GCHandle h0 = GCHandle.Alloc(u, GCHandleType.Pinned);
            try
            {
                Delegates.glEvalCoord1dv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region EvalCoord1dv(GLdouble[] u)

        /// <summary>
        /// 
        /// </summary>
        public static         void glEvalCoord1dv(GLdouble[] u)
        {
            GCHandle h0 = GCHandle.Alloc(u, GCHandleType.Pinned);
            try
            {
                Delegates.glEvalCoord1dv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region EvalCoord1f(GLfloat u)

        /// <summary>
        /// 
        /// </summary>
        public static         void glEvalCoord1f(GLfloat u)
        {
            Delegates.glEvalCoord1f(u);
        }

        #endregion

        #region EvalCoord1fv(IntPtr u)

        /// <summary>
        /// 
        /// </summary>
        public static         void glEvalCoord1fv(IntPtr u)
        {
            Delegates.glEvalCoord1fv(u);
        }

        #endregion

        #region EvalCoord1fv(object u)

        /// <summary>
        /// 
        /// </summary>
        public static         void glEvalCoord1fv(object u)
        {
            GCHandle h0 = GCHandle.Alloc(u, GCHandleType.Pinned);
            try
            {
                Delegates.glEvalCoord1fv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region EvalCoord1fv(GLfloat[] u)

        /// <summary>
        /// 
        /// </summary>
        public static         void glEvalCoord1fv(GLfloat[] u)
        {
            GCHandle h0 = GCHandle.Alloc(u, GCHandleType.Pinned);
            try
            {
                Delegates.glEvalCoord1fv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region EvalCoord2d(GLdouble u, GLdouble v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glEvalCoord2d(GLdouble u, GLdouble v)
        {
            Delegates.glEvalCoord2d(u, v);
        }

        #endregion

        #region EvalCoord2dv(IntPtr u)

        /// <summary>
        /// 
        /// </summary>
        public static         void glEvalCoord2dv(IntPtr u)
        {
            Delegates.glEvalCoord2dv(u);
        }

        #endregion

        #region EvalCoord2dv(object u)

        /// <summary>
        /// 
        /// </summary>
        public static         void glEvalCoord2dv(object u)
        {
            GCHandle h0 = GCHandle.Alloc(u, GCHandleType.Pinned);
            try
            {
                Delegates.glEvalCoord2dv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region EvalCoord2dv(GLdouble[] u)

        /// <summary>
        /// 
        /// </summary>
        public static         void glEvalCoord2dv(GLdouble[] u)
        {
            GCHandle h0 = GCHandle.Alloc(u, GCHandleType.Pinned);
            try
            {
                Delegates.glEvalCoord2dv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region EvalCoord2f(GLfloat u, GLfloat v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glEvalCoord2f(GLfloat u, GLfloat v)
        {
            Delegates.glEvalCoord2f(u, v);
        }

        #endregion

        #region EvalCoord2fv(IntPtr u)

        /// <summary>
        /// 
        /// </summary>
        public static         void glEvalCoord2fv(IntPtr u)
        {
            Delegates.glEvalCoord2fv(u);
        }

        #endregion

        #region EvalCoord2fv(object u)

        /// <summary>
        /// 
        /// </summary>
        public static         void glEvalCoord2fv(object u)
        {
            GCHandle h0 = GCHandle.Alloc(u, GCHandleType.Pinned);
            try
            {
                Delegates.glEvalCoord2fv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region EvalCoord2fv(GLfloat[] u)

        /// <summary>
        /// 
        /// </summary>
        public static         void glEvalCoord2fv(GLfloat[] u)
        {
            GCHandle h0 = GCHandle.Alloc(u, GCHandleType.Pinned);
            try
            {
                Delegates.glEvalCoord2fv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region EvalMesh1(GLenum mode, GLint i1, GLint i2)

        /// <summary>
        /// 
        /// </summary>
        public static         void glEvalMesh1(GLenum mode, GLint i1, GLint i2)
        {
            Delegates.glEvalMesh1(mode, i1, i2);
        }

        #endregion

        #region EvalPoint1(GLint i)

        /// <summary>
        /// 
        /// </summary>
        public static         void glEvalPoint1(GLint i)
        {
            Delegates.glEvalPoint1(i);
        }

        #endregion

        #region EvalMesh2(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2)

        /// <summary>
        /// 
        /// </summary>
        public static         void glEvalMesh2(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2)
        {
            Delegates.glEvalMesh2(mode, i1, i2, j1, j2);
        }

        #endregion

        #region EvalPoint2(GLint i, GLint j)

        /// <summary>
        /// 
        /// </summary>
        public static         void glEvalPoint2(GLint i, GLint j)
        {
            Delegates.glEvalPoint2(i, j);
        }

        #endregion

        #region AlphaFunc(GLenum func, GLclampf reference)

        /// <summary>
        /// 
        /// </summary>
        public static         void glAlphaFunc(GLenum func, GLclampf reference)
        {
            Delegates.glAlphaFunc(func, reference);
        }

        #endregion

        #region BlendFunc(GLenum sfactor, GLenum dfactor)

        /// <summary>
        /// 
        /// </summary>
        public static         void glBlendFunc(GLenum sfactor, GLenum dfactor)
        {
            Delegates.glBlendFunc(sfactor, dfactor);
        }

        #endregion

        #region LogicOp(GLenum opcode)

        /// <summary>
        /// 
        /// </summary>
        public static         void glLogicOp(GLenum opcode)
        {
            Delegates.glLogicOp(opcode);
        }

        #endregion

        #region StencilFunc(GLenum func, GLint reference, GLuint mask)

        /// <summary>
        /// 
        /// </summary>
        public static         void glStencilFunc(GLenum func, GLint reference, GLuint mask)
        {
            Delegates.glStencilFunc(func, reference, mask);
        }

        #endregion

        #region StencilOp(GLenum fail, GLenum zfail, GLenum zpass)

        /// <summary>
        /// 
        /// </summary>
        public static         void glStencilOp(GLenum fail, GLenum zfail, GLenum zpass)
        {
            Delegates.glStencilOp(fail, zfail, zpass);
        }

        #endregion

        #region DepthFunc(GLenum func)

        /// <summary>
        /// 
        /// </summary>
        public static         void glDepthFunc(GLenum func)
        {
            Delegates.glDepthFunc(func);
        }

        #endregion

        #region PixelZoom(GLfloat xfactor, GLfloat yfactor)

        /// <summary>
        /// 
        /// </summary>
        public static         void glPixelZoom(GLfloat xfactor, GLfloat yfactor)
        {
            Delegates.glPixelZoom(xfactor, yfactor);
        }

        #endregion

        #region PixelTransferf(GLenum pname, GLfloat param)

        /// <summary>
        /// 
        /// </summary>
        public static         void glPixelTransferf(GLenum pname, GLfloat param)
        {
            Delegates.glPixelTransferf(pname, param);
        }

        #endregion

        #region PixelTransferi(GLenum pname, GLint param)

        /// <summary>
        /// 
        /// </summary>
        public static         void glPixelTransferi(GLenum pname, GLint param)
        {
            Delegates.glPixelTransferi(pname, param);
        }

        #endregion

        #region PixelStoref(GLenum pname, GLfloat param)

        /// <summary>
        /// 
        /// </summary>
        public static         void glPixelStoref(GLenum pname, GLfloat param)
        {
            Delegates.glPixelStoref(pname, param);
        }

        #endregion

        #region PixelStorei(GLenum pname, GLint param)

        /// <summary>
        /// 
        /// </summary>
        public static         void glPixelStorei(GLenum pname, GLint param)
        {
            Delegates.glPixelStorei(pname, param);
        }

        #endregion

        #region PixelMapfv(GLenum map, GLint mapsize, IntPtr values)

        /// <summary>
        /// 
        /// </summary>
        public static         void glPixelMapfv(GLenum map, GLint mapsize, IntPtr values)
        {
            Delegates.glPixelMapfv(map, mapsize, values);
        }

        #endregion

        #region PixelMapfv(GLenum map, GLint mapsize, object values)

        /// <summary>
        /// 
        /// </summary>
        public static         void glPixelMapfv(GLenum map, GLint mapsize, object values)
        {
            GCHandle h0 = GCHandle.Alloc(values, GCHandleType.Pinned);
            try
            {
                Delegates.glPixelMapfv(map, mapsize, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region PixelMapfv(GLenum map, GLint mapsize, GLfloat[] values)

        /// <summary>
        /// 
        /// </summary>
        public static         void glPixelMapfv(GLenum map, GLint mapsize, GLfloat[] values)
        {
            GCHandle h0 = GCHandle.Alloc(values, GCHandleType.Pinned);
            try
            {
                Delegates.glPixelMapfv(map, mapsize, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region PixelMapuiv(GLenum map, GLint mapsize, IntPtr values)

        /// <summary>
        /// 
        /// </summary>
        public static         void glPixelMapuiv(GLenum map, GLint mapsize, IntPtr values)
        {
            Delegates.glPixelMapuiv(map, mapsize, values);
        }

        #endregion

        #region PixelMapuiv(GLenum map, GLint mapsize, object values)

        /// <summary>
        /// 
        /// </summary>
        public static         void glPixelMapuiv(GLenum map, GLint mapsize, object values)
        {
            GCHandle h0 = GCHandle.Alloc(values, GCHandleType.Pinned);
            try
            {
                Delegates.glPixelMapuiv(map, mapsize, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region PixelMapuiv(GLenum map, GLint mapsize, GLuint[] values)

        /// <summary>
        /// 
        /// </summary>
        public static         void glPixelMapuiv(GLenum map, GLint mapsize, GLuint[] values)
        {
            GCHandle h0 = GCHandle.Alloc(values, GCHandleType.Pinned);
            try
            {
                Delegates.glPixelMapuiv(map, mapsize, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region PixelMapusv(GLenum map, GLint mapsize, IntPtr values)

        /// <summary>
        /// 
        /// </summary>
        public static         void glPixelMapusv(GLenum map, GLint mapsize, IntPtr values)
        {
            Delegates.glPixelMapusv(map, mapsize, values);
        }

        #endregion

        #region PixelMapusv(GLenum map, GLint mapsize, object values)

        /// <summary>
        /// 
        /// </summary>
        public static         void glPixelMapusv(GLenum map, GLint mapsize, object values)
        {
            GCHandle h0 = GCHandle.Alloc(values, GCHandleType.Pinned);
            try
            {
                Delegates.glPixelMapusv(map, mapsize, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region PixelMapusv(GLenum map, GLint mapsize, GLushort[] values)

        /// <summary>
        /// 
        /// </summary>
        public static         void glPixelMapusv(GLenum map, GLint mapsize, GLushort[] values)
        {
            GCHandle h0 = GCHandle.Alloc(values, GCHandleType.Pinned);
            try
            {
                Delegates.glPixelMapusv(map, mapsize, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReadBuffer(GLenum mode)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReadBuffer(GLenum mode)
        {
            Delegates.glReadBuffer(mode);
        }

        #endregion

        #region CopyPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type)

        /// <summary>
        /// 
        /// </summary>
        public static         void glCopyPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type)
        {
            Delegates.glCopyPixels(x, y, width, height, type);
        }

        #endregion

        #region ReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, IntPtr pixels)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, IntPtr pixels)
        {
            Delegates.glReadPixels(x, y, width, height, format, type, pixels);
        }

        #endregion

        #region ReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, object pixels)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, object pixels)
        {
            GCHandle h0 = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glReadPixels(x, y, width, height, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region DrawPixels(GLsizei width, GLsizei height, GLenum format, GLenum type, IntPtr pixels)

        /// <summary>
        /// 
        /// </summary>
        public static         void glDrawPixels(GLsizei width, GLsizei height, GLenum format, GLenum type, IntPtr pixels)
        {
            Delegates.glDrawPixels(width, height, format, type, pixels);
        }

        #endregion

        #region DrawPixels(GLsizei width, GLsizei height, GLenum format, GLenum type, object pixels)

        /// <summary>
        /// 
        /// </summary>
        public static         void glDrawPixels(GLsizei width, GLsizei height, GLenum format, GLenum type, object pixels)
        {
            GCHandle h0 = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glDrawPixels(width, height, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetBooleanv(GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetBooleanv(GLenum pname, IntPtr parameters)
        {
            Delegates.glGetBooleanv(pname, parameters);
        }

        #endregion

        #region GetBooleanv(GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetBooleanv(GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetBooleanv(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetBooleanv(GLenum pname, GLboolean[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetBooleanv(GLenum pname, GLboolean[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetBooleanv(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetClipPlane(GLenum plane, IntPtr equation)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetClipPlane(GLenum plane, IntPtr equation)
        {
            Delegates.glGetClipPlane(plane, equation);
        }

        #endregion

        #region GetClipPlane(GLenum plane, object equation)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetClipPlane(GLenum plane, object equation)
        {
            GCHandle h0 = GCHandle.Alloc(equation, GCHandleType.Pinned);
            try
            {
                Delegates.glGetClipPlane(plane, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetClipPlane(GLenum plane, GLdouble[] equation)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetClipPlane(GLenum plane, GLdouble[] equation)
        {
            GCHandle h0 = GCHandle.Alloc(equation, GCHandleType.Pinned);
            try
            {
                Delegates.glGetClipPlane(plane, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetDoublev(GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetDoublev(GLenum pname, IntPtr parameters)
        {
            Delegates.glGetDoublev(pname, parameters);
        }

        #endregion

        #region GetDoublev(GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetDoublev(GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetDoublev(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetDoublev(GLenum pname, GLdouble[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetDoublev(GLenum pname, GLdouble[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetDoublev(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetError()

        /// <summary>
        /// 
        /// </summary>
        public static         GLenum glGetError()
        {
            return Delegates.glGetError();
        }

        #endregion

        #region GetFloatv(GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetFloatv(GLenum pname, IntPtr parameters)
        {
            Delegates.glGetFloatv(pname, parameters);
        }

        #endregion

        #region GetFloatv(GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetFloatv(GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetFloatv(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetFloatv(GLenum pname, GLfloat[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetFloatv(GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetFloatv(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetIntegerv(GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetIntegerv(GLenum pname, IntPtr parameters)
        {
            Delegates.glGetIntegerv(pname, parameters);
        }

        #endregion

        #region GetIntegerv(GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetIntegerv(GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetIntegerv(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetIntegerv(GLenum pname, GLint[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetIntegerv(GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetIntegerv(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetLightfv(GLenum light, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetLightfv(GLenum light, GLenum pname, IntPtr parameters)
        {
            Delegates.glGetLightfv(light, pname, parameters);
        }

        #endregion

        #region GetLightfv(GLenum light, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetLightfv(GLenum light, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetLightfv(light, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetLightfv(GLenum light, GLenum pname, GLfloat[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetLightfv(GLenum light, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetLightfv(light, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetLightiv(GLenum light, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetLightiv(GLenum light, GLenum pname, IntPtr parameters)
        {
            Delegates.glGetLightiv(light, pname, parameters);
        }

        #endregion

        #region GetLightiv(GLenum light, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetLightiv(GLenum light, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetLightiv(light, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetLightiv(GLenum light, GLenum pname, GLint[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetLightiv(GLenum light, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetLightiv(light, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetMapdv(GLenum target, GLenum query, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetMapdv(GLenum target, GLenum query, IntPtr v)
        {
            Delegates.glGetMapdv(target, query, v);
        }

        #endregion

        #region GetMapdv(GLenum target, GLenum query, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetMapdv(GLenum target, GLenum query, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glGetMapdv(target, query, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetMapdv(GLenum target, GLenum query, GLdouble[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetMapdv(GLenum target, GLenum query, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glGetMapdv(target, query, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetMapfv(GLenum target, GLenum query, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetMapfv(GLenum target, GLenum query, IntPtr v)
        {
            Delegates.glGetMapfv(target, query, v);
        }

        #endregion

        #region GetMapfv(GLenum target, GLenum query, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetMapfv(GLenum target, GLenum query, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glGetMapfv(target, query, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetMapfv(GLenum target, GLenum query, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetMapfv(GLenum target, GLenum query, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glGetMapfv(target, query, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetMapiv(GLenum target, GLenum query, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetMapiv(GLenum target, GLenum query, IntPtr v)
        {
            Delegates.glGetMapiv(target, query, v);
        }

        #endregion

        #region GetMapiv(GLenum target, GLenum query, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetMapiv(GLenum target, GLenum query, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glGetMapiv(target, query, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetMapiv(GLenum target, GLenum query, GLint[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetMapiv(GLenum target, GLenum query, GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glGetMapiv(target, query, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetMaterialfv(GLenum face, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetMaterialfv(GLenum face, GLenum pname, IntPtr parameters)
        {
            Delegates.glGetMaterialfv(face, pname, parameters);
        }

        #endregion

        #region GetMaterialfv(GLenum face, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetMaterialfv(GLenum face, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetMaterialfv(face, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetMaterialfv(GLenum face, GLenum pname, GLfloat[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetMaterialfv(GLenum face, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetMaterialfv(face, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetMaterialiv(GLenum face, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetMaterialiv(GLenum face, GLenum pname, IntPtr parameters)
        {
            Delegates.glGetMaterialiv(face, pname, parameters);
        }

        #endregion

        #region GetMaterialiv(GLenum face, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetMaterialiv(GLenum face, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetMaterialiv(face, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetMaterialiv(GLenum face, GLenum pname, GLint[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetMaterialiv(GLenum face, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetMaterialiv(face, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetPixelMapfv(GLenum map, IntPtr values)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetPixelMapfv(GLenum map, IntPtr values)
        {
            Delegates.glGetPixelMapfv(map, values);
        }

        #endregion

        #region GetPixelMapfv(GLenum map, object values)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetPixelMapfv(GLenum map, object values)
        {
            GCHandle h0 = GCHandle.Alloc(values, GCHandleType.Pinned);
            try
            {
                Delegates.glGetPixelMapfv(map, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetPixelMapfv(GLenum map, GLfloat[] values)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetPixelMapfv(GLenum map, GLfloat[] values)
        {
            GCHandle h0 = GCHandle.Alloc(values, GCHandleType.Pinned);
            try
            {
                Delegates.glGetPixelMapfv(map, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetPixelMapuiv(GLenum map, IntPtr values)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetPixelMapuiv(GLenum map, IntPtr values)
        {
            Delegates.glGetPixelMapuiv(map, values);
        }

        #endregion

        #region GetPixelMapuiv(GLenum map, object values)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetPixelMapuiv(GLenum map, object values)
        {
            GCHandle h0 = GCHandle.Alloc(values, GCHandleType.Pinned);
            try
            {
                Delegates.glGetPixelMapuiv(map, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetPixelMapuiv(GLenum map, GLuint[] values)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetPixelMapuiv(GLenum map, GLuint[] values)
        {
            GCHandle h0 = GCHandle.Alloc(values, GCHandleType.Pinned);
            try
            {
                Delegates.glGetPixelMapuiv(map, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetPixelMapusv(GLenum map, IntPtr values)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetPixelMapusv(GLenum map, IntPtr values)
        {
            Delegates.glGetPixelMapusv(map, values);
        }

        #endregion

        #region GetPixelMapusv(GLenum map, object values)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetPixelMapusv(GLenum map, object values)
        {
            GCHandle h0 = GCHandle.Alloc(values, GCHandleType.Pinned);
            try
            {
                Delegates.glGetPixelMapusv(map, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetPixelMapusv(GLenum map, GLushort[] values)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetPixelMapusv(GLenum map, GLushort[] values)
        {
            GCHandle h0 = GCHandle.Alloc(values, GCHandleType.Pinned);
            try
            {
                Delegates.glGetPixelMapusv(map, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetPolygonStipple(IntPtr mask)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetPolygonStipple(IntPtr mask)
        {
            Delegates.glGetPolygonStipple(mask);
        }

        #endregion

        #region GetPolygonStipple(object mask)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetPolygonStipple(object mask)
        {
            GCHandle h0 = GCHandle.Alloc(mask, GCHandleType.Pinned);
            try
            {
                Delegates.glGetPolygonStipple(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetPolygonStipple(GLubyte[] mask)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetPolygonStipple(GLubyte[] mask)
        {
            GCHandle h0 = GCHandle.Alloc(mask, GCHandleType.Pinned);
            try
            {
                Delegates.glGetPolygonStipple(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetString(GLenum name)

        /// <summary>
        /// 
        /// </summary>
        public static         string glGetString(GLenum name)
        {
            return Marshal.PtrToStringAnsi(Delegates.glGetString(name));
        }

        #endregion

        #region GetTexEnvfv(GLenum target, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetTexEnvfv(GLenum target, GLenum pname, IntPtr parameters)
        {
            Delegates.glGetTexEnvfv(target, pname, parameters);
        }

        #endregion

        #region GetTexEnvfv(GLenum target, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetTexEnvfv(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetTexEnvfv(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetTexEnvfv(GLenum target, GLenum pname, GLfloat[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetTexEnvfv(GLenum target, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetTexEnvfv(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetTexEnviv(GLenum target, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetTexEnviv(GLenum target, GLenum pname, IntPtr parameters)
        {
            Delegates.glGetTexEnviv(target, pname, parameters);
        }

        #endregion

        #region GetTexEnviv(GLenum target, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetTexEnviv(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetTexEnviv(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetTexEnviv(GLenum target, GLenum pname, GLint[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetTexEnviv(GLenum target, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetTexEnviv(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetTexGendv(GLenum coord, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetTexGendv(GLenum coord, GLenum pname, IntPtr parameters)
        {
            Delegates.glGetTexGendv(coord, pname, parameters);
        }

        #endregion

        #region GetTexGendv(GLenum coord, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetTexGendv(GLenum coord, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetTexGendv(coord, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetTexGendv(GLenum coord, GLenum pname, GLdouble[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetTexGendv(GLenum coord, GLenum pname, GLdouble[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetTexGendv(coord, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetTexGenfv(GLenum coord, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetTexGenfv(GLenum coord, GLenum pname, IntPtr parameters)
        {
            Delegates.glGetTexGenfv(coord, pname, parameters);
        }

        #endregion

        #region GetTexGenfv(GLenum coord, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetTexGenfv(GLenum coord, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetTexGenfv(coord, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetTexGenfv(GLenum coord, GLenum pname, GLfloat[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetTexGenfv(GLenum coord, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetTexGenfv(coord, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetTexGeniv(GLenum coord, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetTexGeniv(GLenum coord, GLenum pname, IntPtr parameters)
        {
            Delegates.glGetTexGeniv(coord, pname, parameters);
        }

        #endregion

        #region GetTexGeniv(GLenum coord, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetTexGeniv(GLenum coord, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetTexGeniv(coord, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetTexGeniv(GLenum coord, GLenum pname, GLint[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetTexGeniv(GLenum coord, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetTexGeniv(coord, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetTexImage(GLenum target, GLint level, GLenum format, GLenum type, IntPtr pixels)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetTexImage(GLenum target, GLint level, GLenum format, GLenum type, IntPtr pixels)
        {
            Delegates.glGetTexImage(target, level, format, type, pixels);
        }

        #endregion

        #region GetTexImage(GLenum target, GLint level, GLenum format, GLenum type, object pixels)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetTexImage(GLenum target, GLint level, GLenum format, GLenum type, object pixels)
        {
            GCHandle h0 = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glGetTexImage(target, level, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetTexParameterfv(GLenum target, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetTexParameterfv(GLenum target, GLenum pname, IntPtr parameters)
        {
            Delegates.glGetTexParameterfv(target, pname, parameters);
        }

        #endregion

        #region GetTexParameterfv(GLenum target, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetTexParameterfv(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetTexParameterfv(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetTexParameterfv(GLenum target, GLenum pname, GLfloat[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetTexParameterfv(GLenum target, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetTexParameterfv(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetTexParameteriv(GLenum target, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetTexParameteriv(GLenum target, GLenum pname, IntPtr parameters)
        {
            Delegates.glGetTexParameteriv(target, pname, parameters);
        }

        #endregion

        #region GetTexParameteriv(GLenum target, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetTexParameteriv(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetTexParameteriv(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetTexParameteriv(GLenum target, GLenum pname, GLint[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetTexParameteriv(GLenum target, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetTexParameteriv(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, IntPtr parameters)
        {
            Delegates.glGetTexLevelParameterfv(target, level, pname, parameters);
        }

        #endregion

        #region GetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetTexLevelParameterfv(target, level, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, GLfloat[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetTexLevelParameterfv(target, level, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, IntPtr parameters)
        {
            Delegates.glGetTexLevelParameteriv(target, level, pname, parameters);
        }

        #endregion

        #region GetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetTexLevelParameteriv(target, level, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, GLint[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetTexLevelParameteriv(target, level, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region IsEnabled(GLenum cap)

        /// <summary>
        /// 
        /// </summary>
        public static         GLboolean glIsEnabled(GLenum cap)
        {
            return Delegates.glIsEnabled(cap);
        }

        #endregion

        #region IsList(GLuint list)

        /// <summary>
        /// 
        /// </summary>
        public static         GLboolean glIsList(GLuint list)
        {
            return Delegates.glIsList(list);
        }

        #endregion

        #region DepthRange(GLclampd near, GLclampd far)

        /// <summary>
        /// 
        /// </summary>
        public static         void glDepthRange(GLclampd near, GLclampd far)
        {
            Delegates.glDepthRange(near, far);
        }

        #endregion

        #region Frustum(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)

        /// <summary>
        /// 
        /// </summary>
        public static         void glFrustum(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
        {
            Delegates.glFrustum(left, right, bottom, top, zNear, zFar);
        }

        #endregion

        #region LoadIdentity()

        /// <summary>
        /// 
        /// </summary>
        public static         void glLoadIdentity()
        {
            Delegates.glLoadIdentity();
        }

        #endregion

        #region LoadMatrixf(IntPtr m)

        /// <summary>
        /// 
        /// </summary>
        public static         void glLoadMatrixf(IntPtr m)
        {
            Delegates.glLoadMatrixf(m);
        }

        #endregion

        #region LoadMatrixf(object m)

        /// <summary>
        /// 
        /// </summary>
        public static         void glLoadMatrixf(object m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                Delegates.glLoadMatrixf(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region LoadMatrixf(GLfloat[] m)

        /// <summary>
        /// 
        /// </summary>
        public static         void glLoadMatrixf(GLfloat[] m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                Delegates.glLoadMatrixf(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region LoadMatrixd(IntPtr m)

        /// <summary>
        /// 
        /// </summary>
        public static         void glLoadMatrixd(IntPtr m)
        {
            Delegates.glLoadMatrixd(m);
        }

        #endregion

        #region LoadMatrixd(object m)

        /// <summary>
        /// 
        /// </summary>
        public static         void glLoadMatrixd(object m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                Delegates.glLoadMatrixd(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region LoadMatrixd(GLdouble[] m)

        /// <summary>
        /// 
        /// </summary>
        public static         void glLoadMatrixd(GLdouble[] m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                Delegates.glLoadMatrixd(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MatrixMode(GLenum mode)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMatrixMode(GLenum mode)
        {
            Delegates.glMatrixMode(mode);
        }

        #endregion

        #region MultMatrixf(IntPtr m)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultMatrixf(IntPtr m)
        {
            Delegates.glMultMatrixf(m);
        }

        #endregion

        #region MultMatrixf(object m)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultMatrixf(object m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                Delegates.glMultMatrixf(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultMatrixf(GLfloat[] m)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultMatrixf(GLfloat[] m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                Delegates.glMultMatrixf(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultMatrixd(IntPtr m)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultMatrixd(IntPtr m)
        {
            Delegates.glMultMatrixd(m);
        }

        #endregion

        #region MultMatrixd(object m)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultMatrixd(object m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                Delegates.glMultMatrixd(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultMatrixd(GLdouble[] m)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultMatrixd(GLdouble[] m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                Delegates.glMultMatrixd(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Ortho(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)

        /// <summary>
        /// 
        /// </summary>
        public static         void glOrtho(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
        {
            Delegates.glOrtho(left, right, bottom, top, zNear, zFar);
        }

        #endregion

        #region PopMatrix()

        /// <summary>
        /// 
        /// </summary>
        public static         void glPopMatrix()
        {
            Delegates.glPopMatrix();
        }

        #endregion

        #region PushMatrix()

        /// <summary>
        /// 
        /// </summary>
        public static         void glPushMatrix()
        {
            Delegates.glPushMatrix();
        }

        #endregion

        #region Rotated(GLdouble angle, GLdouble x, GLdouble y, GLdouble z)

        /// <summary>
        /// 
        /// </summary>
        public static         void glRotated(GLdouble angle, GLdouble x, GLdouble y, GLdouble z)
        {
            Delegates.glRotated(angle, x, y, z);
        }

        #endregion

        #region Rotatef(GLfloat angle, GLfloat x, GLfloat y, GLfloat z)

        /// <summary>
        /// 
        /// </summary>
        public static         void glRotatef(GLfloat angle, GLfloat x, GLfloat y, GLfloat z)
        {
            Delegates.glRotatef(angle, x, y, z);
        }

        #endregion

        #region Scaled(GLdouble x, GLdouble y, GLdouble z)

        /// <summary>
        /// 
        /// </summary>
        public static         void glScaled(GLdouble x, GLdouble y, GLdouble z)
        {
            Delegates.glScaled(x, y, z);
        }

        #endregion

        #region Scalef(GLfloat x, GLfloat y, GLfloat z)

        /// <summary>
        /// 
        /// </summary>
        public static         void glScalef(GLfloat x, GLfloat y, GLfloat z)
        {
            Delegates.glScalef(x, y, z);
        }

        #endregion

        #region Translated(GLdouble x, GLdouble y, GLdouble z)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTranslated(GLdouble x, GLdouble y, GLdouble z)
        {
            Delegates.glTranslated(x, y, z);
        }

        #endregion

        #region Translatef(GLfloat x, GLfloat y, GLfloat z)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTranslatef(GLfloat x, GLfloat y, GLfloat z)
        {
            Delegates.glTranslatef(x, y, z);
        }

        #endregion

        #region Viewport(GLint x, GLint y, GLsizei width, GLsizei height)

        /// <summary>
        /// 
        /// </summary>
        public static         void glViewport(GLint x, GLint y, GLsizei width, GLsizei height)
        {
            Delegates.glViewport(x, y, width, height);
        }

        #endregion

        #region ArrayElement(GLint i)

        /// <summary>
        /// 
        /// </summary>
        public static         void glArrayElement(GLint i)
        {
            Delegates.glArrayElement(i);
        }

        #endregion

        #region ColorPointer(GLint size, GLenum type, GLsizei stride, IntPtr pointer)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColorPointer(GLint size, GLenum type, GLsizei stride, IntPtr pointer)
        {
            Delegates.glColorPointer(size, type, stride, pointer);
        }

        #endregion

        #region ColorPointer(GLint size, GLenum type, GLsizei stride, object pointer)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColorPointer(GLint size, GLenum type, GLsizei stride, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glColorPointer(size, type, stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region DisableClientState(GLenum array)

        /// <summary>
        /// 
        /// </summary>
        public static         void glDisableClientState(GLenum array)
        {
            Delegates.glDisableClientState(array);
        }

        #endregion

        #region DrawArrays(GLenum mode, GLint first, GLsizei count)

        /// <summary>
        /// 
        /// </summary>
        public static         void glDrawArrays(GLenum mode, GLint first, GLsizei count)
        {
            Delegates.glDrawArrays(mode, first, count);
        }

        #endregion

        #region DrawElements(GLenum mode, GLsizei count, GLenum type, IntPtr indices)

        /// <summary>
        /// 
        /// </summary>
        public static         void glDrawElements(GLenum mode, GLsizei count, GLenum type, IntPtr indices)
        {
            Delegates.glDrawElements(mode, count, type, indices);
        }

        #endregion

        #region DrawElements(GLenum mode, GLsizei count, GLenum type, object indices)

        /// <summary>
        /// 
        /// </summary>
        public static         void glDrawElements(GLenum mode, GLsizei count, GLenum type, object indices)
        {
            GCHandle h0 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glDrawElements(mode, count, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region EdgeFlagPointer(GLsizei stride, IntPtr pointer)

        /// <summary>
        /// 
        /// </summary>
        public static         void glEdgeFlagPointer(GLsizei stride, IntPtr pointer)
        {
            Delegates.glEdgeFlagPointer(stride, pointer);
        }

        #endregion

        #region EdgeFlagPointer(GLsizei stride, object pointer)

        /// <summary>
        /// 
        /// </summary>
        public static         void glEdgeFlagPointer(GLsizei stride, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glEdgeFlagPointer(stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region EnableClientState(GLenum array)

        /// <summary>
        /// 
        /// </summary>
        public static         void glEnableClientState(GLenum array)
        {
            Delegates.glEnableClientState(array);
        }

        #endregion

        #region GetPointerv(GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetPointerv(GLenum pname, IntPtr parameters)
        {
            Delegates.glGetPointerv(pname, parameters);
        }

        #endregion

        #region GetPointerv(GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetPointerv(GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetPointerv(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetPointerv(GLenum pname, IntPtr[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetPointerv(GLenum pname, IntPtr[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetPointerv(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region IndexPointer(GLenum type, GLsizei stride, IntPtr pointer)

        /// <summary>
        /// 
        /// </summary>
        public static         void glIndexPointer(GLenum type, GLsizei stride, IntPtr pointer)
        {
            Delegates.glIndexPointer(type, stride, pointer);
        }

        #endregion

        #region IndexPointer(GLenum type, GLsizei stride, object pointer)

        /// <summary>
        /// 
        /// </summary>
        public static         void glIndexPointer(GLenum type, GLsizei stride, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glIndexPointer(type, stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region InterleavedArrays(GLenum format, GLsizei stride, IntPtr pointer)

        /// <summary>
        /// 
        /// </summary>
        public static         void glInterleavedArrays(GLenum format, GLsizei stride, IntPtr pointer)
        {
            Delegates.glInterleavedArrays(format, stride, pointer);
        }

        #endregion

        #region InterleavedArrays(GLenum format, GLsizei stride, object pointer)

        /// <summary>
        /// 
        /// </summary>
        public static         void glInterleavedArrays(GLenum format, GLsizei stride, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glInterleavedArrays(format, stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region NormalPointer(GLenum type, GLsizei stride, IntPtr pointer)

        /// <summary>
        /// 
        /// </summary>
        public static         void glNormalPointer(GLenum type, GLsizei stride, IntPtr pointer)
        {
            Delegates.glNormalPointer(type, stride, pointer);
        }

        #endregion

        #region NormalPointer(GLenum type, GLsizei stride, object pointer)

        /// <summary>
        /// 
        /// </summary>
        public static         void glNormalPointer(GLenum type, GLsizei stride, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glNormalPointer(type, stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoordPointer(GLint size, GLenum type, GLsizei stride, IntPtr pointer)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoordPointer(GLint size, GLenum type, GLsizei stride, IntPtr pointer)
        {
            Delegates.glTexCoordPointer(size, type, stride, pointer);
        }

        #endregion

        #region TexCoordPointer(GLint size, GLenum type, GLsizei stride, object pointer)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoordPointer(GLint size, GLenum type, GLsizei stride, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoordPointer(size, type, stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexPointer(GLint size, GLenum type, GLsizei stride, IntPtr pointer)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexPointer(GLint size, GLenum type, GLsizei stride, IntPtr pointer)
        {
            Delegates.glVertexPointer(size, type, stride, pointer);
        }

        #endregion

        #region VertexPointer(GLint size, GLenum type, GLsizei stride, object pointer)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexPointer(GLint size, GLenum type, GLsizei stride, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexPointer(size, type, stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region PolygonOffset(GLfloat factor, GLfloat units)

        /// <summary>
        /// 
        /// </summary>
        public static         void glPolygonOffset(GLfloat factor, GLfloat units)
        {
            Delegates.glPolygonOffset(factor, units);
        }

        #endregion

        #region CopyTexImage1D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)

        /// <summary>
        /// 
        /// </summary>
        public static         void glCopyTexImage1D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)
        {
            Delegates.glCopyTexImage1D(target, level, internalformat, x, y, width, border);
        }

        #endregion

        #region CopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)

        /// <summary>
        /// 
        /// </summary>
        public static         void glCopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
        {
            Delegates.glCopyTexImage2D(target, level, internalformat, x, y, width, height, border);
        }

        #endregion

        #region CopyTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)

        /// <summary>
        /// 
        /// </summary>
        public static         void glCopyTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
        {
            Delegates.glCopyTexSubImage1D(target, level, xoffset, x, y, width);
        }

        #endregion

        #region CopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)

        /// <summary>
        /// 
        /// </summary>
        public static         void glCopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
        {
            Delegates.glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height);
        }

        #endregion

        #region TexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, IntPtr pixels)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, IntPtr pixels)
        {
            Delegates.glTexSubImage1D(target, level, xoffset, width, format, type, pixels);
        }

        #endregion

        #region TexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, object pixels)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, object pixels)
        {
            GCHandle h0 = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glTexSubImage1D(target, level, xoffset, width, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, IntPtr pixels)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, IntPtr pixels)
        {
            Delegates.glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels);
        }

        #endregion

        #region TexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, object pixels)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, object pixels)
        {
            GCHandle h0 = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region AreTexturesResident(GLsizei n, IntPtr textures, IntPtr residences)

        /// <summary>
        /// 
        /// </summary>
        public static         GLboolean glAreTexturesResident(GLsizei n, IntPtr textures, IntPtr residences)
        {
            return Delegates.glAreTexturesResident(n, textures, residences);
        }

        #endregion

        #region AreTexturesResident(GLsizei n, IntPtr textures, object residences)

        /// <summary>
        /// 
        /// </summary>
        public static         GLboolean glAreTexturesResident(GLsizei n, IntPtr textures, object residences)
        {
            GCHandle h0 = GCHandle.Alloc(residences, GCHandleType.Pinned);
            try
            {
                return Delegates.glAreTexturesResident(n, textures, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region AreTexturesResident(GLsizei n, IntPtr textures, GLboolean[] residences)

        /// <summary>
        /// 
        /// </summary>
        public static         GLboolean glAreTexturesResident(GLsizei n, IntPtr textures, GLboolean[] residences)
        {
            GCHandle h0 = GCHandle.Alloc(residences, GCHandleType.Pinned);
            try
            {
                return Delegates.glAreTexturesResident(n, textures, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region AreTexturesResident(GLsizei n, object textures, IntPtr residences)

        /// <summary>
        /// 
        /// </summary>
        public static         GLboolean glAreTexturesResident(GLsizei n, object textures, IntPtr residences)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            try
            {
                return Delegates.glAreTexturesResident(n, h0.AddrOfPinnedObject(), residences);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region AreTexturesResident(GLsizei n, object textures, object residences)

        /// <summary>
        /// 
        /// </summary>
        public static         GLboolean glAreTexturesResident(GLsizei n, object textures, object residences)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(residences, GCHandleType.Pinned);
            try
            {
                return Delegates.glAreTexturesResident(n, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region AreTexturesResident(GLsizei n, object textures, GLboolean[] residences)

        /// <summary>
        /// 
        /// </summary>
        public static         GLboolean glAreTexturesResident(GLsizei n, object textures, GLboolean[] residences)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(residences, GCHandleType.Pinned);
            try
            {
                return Delegates.glAreTexturesResident(n, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region AreTexturesResident(GLsizei n, GLuint[] textures, IntPtr residences)

        /// <summary>
        /// 
        /// </summary>
        public static         GLboolean glAreTexturesResident(GLsizei n, GLuint[] textures, IntPtr residences)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            try
            {
                return Delegates.glAreTexturesResident(n, h0.AddrOfPinnedObject(), residences);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region AreTexturesResident(GLsizei n, GLuint[] textures, object residences)

        /// <summary>
        /// 
        /// </summary>
        public static         GLboolean glAreTexturesResident(GLsizei n, GLuint[] textures, object residences)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(residences, GCHandleType.Pinned);
            try
            {
                return Delegates.glAreTexturesResident(n, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region AreTexturesResident(GLsizei n, GLuint[] textures, GLboolean[] residences)

        /// <summary>
        /// 
        /// </summary>
        public static         GLboolean glAreTexturesResident(GLsizei n, GLuint[] textures, GLboolean[] residences)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(residences, GCHandleType.Pinned);
            try
            {
                return Delegates.glAreTexturesResident(n, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region BindTexture(GLenum target, GLuint texture)

        /// <summary>
        /// 
        /// </summary>
        public static         void glBindTexture(GLenum target, GLuint texture)
        {
            Delegates.glBindTexture(target, texture);
        }

        #endregion

        #region DeleteTextures(GLsizei n, IntPtr textures)

        /// <summary>
        /// 
        /// </summary>
        public static         void glDeleteTextures(GLsizei n, IntPtr textures)
        {
            Delegates.glDeleteTextures(n, textures);
        }

        #endregion

        #region DeleteTextures(GLsizei n, object textures)

        /// <summary>
        /// 
        /// </summary>
        public static         void glDeleteTextures(GLsizei n, object textures)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            try
            {
                Delegates.glDeleteTextures(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region DeleteTextures(GLsizei n, GLuint[] textures)

        /// <summary>
        /// 
        /// </summary>
        public static         void glDeleteTextures(GLsizei n, GLuint[] textures)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            try
            {
                Delegates.glDeleteTextures(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GenTextures(GLsizei n, IntPtr textures)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGenTextures(GLsizei n, IntPtr textures)
        {
            Delegates.glGenTextures(n, textures);
        }

        #endregion

        #region GenTextures(GLsizei n, object textures)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGenTextures(GLsizei n, object textures)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            try
            {
                Delegates.glGenTextures(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GenTextures(GLsizei n, GLuint[] textures)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGenTextures(GLsizei n, GLuint[] textures)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            try
            {
                Delegates.glGenTextures(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region IsTexture(GLuint texture)

        /// <summary>
        /// 
        /// </summary>
        public static         GLboolean glIsTexture(GLuint texture)
        {
            return Delegates.glIsTexture(texture);
        }

        #endregion

        #region PrioritizeTextures(GLsizei n, IntPtr textures, IntPtr priorities)

        /// <summary>
        /// 
        /// </summary>
        public static         void glPrioritizeTextures(GLsizei n, IntPtr textures, IntPtr priorities)
        {
            Delegates.glPrioritizeTextures(n, textures, priorities);
        }

        #endregion

        #region PrioritizeTextures(GLsizei n, IntPtr textures, object priorities)

        /// <summary>
        /// 
        /// </summary>
        public static         void glPrioritizeTextures(GLsizei n, IntPtr textures, object priorities)
        {
            GCHandle h0 = GCHandle.Alloc(priorities, GCHandleType.Pinned);
            try
            {
                Delegates.glPrioritizeTextures(n, textures, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region PrioritizeTextures(GLsizei n, IntPtr textures, GLclampf[] priorities)

        /// <summary>
        /// 
        /// </summary>
        public static         void glPrioritizeTextures(GLsizei n, IntPtr textures, GLclampf[] priorities)
        {
            GCHandle h0 = GCHandle.Alloc(priorities, GCHandleType.Pinned);
            try
            {
                Delegates.glPrioritizeTextures(n, textures, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region PrioritizeTextures(GLsizei n, object textures, IntPtr priorities)

        /// <summary>
        /// 
        /// </summary>
        public static         void glPrioritizeTextures(GLsizei n, object textures, IntPtr priorities)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            try
            {
                Delegates.glPrioritizeTextures(n, h0.AddrOfPinnedObject(), priorities);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region PrioritizeTextures(GLsizei n, object textures, object priorities)

        /// <summary>
        /// 
        /// </summary>
        public static         void glPrioritizeTextures(GLsizei n, object textures, object priorities)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(priorities, GCHandleType.Pinned);
            try
            {
                Delegates.glPrioritizeTextures(n, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region PrioritizeTextures(GLsizei n, object textures, GLclampf[] priorities)

        /// <summary>
        /// 
        /// </summary>
        public static         void glPrioritizeTextures(GLsizei n, object textures, GLclampf[] priorities)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(priorities, GCHandleType.Pinned);
            try
            {
                Delegates.glPrioritizeTextures(n, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region PrioritizeTextures(GLsizei n, GLuint[] textures, IntPtr priorities)

        /// <summary>
        /// 
        /// </summary>
        public static         void glPrioritizeTextures(GLsizei n, GLuint[] textures, IntPtr priorities)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            try
            {
                Delegates.glPrioritizeTextures(n, h0.AddrOfPinnedObject(), priorities);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region PrioritizeTextures(GLsizei n, GLuint[] textures, object priorities)

        /// <summary>
        /// 
        /// </summary>
        public static         void glPrioritizeTextures(GLsizei n, GLuint[] textures, object priorities)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(priorities, GCHandleType.Pinned);
            try
            {
                Delegates.glPrioritizeTextures(n, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region PrioritizeTextures(GLsizei n, GLuint[] textures, GLclampf[] priorities)

        /// <summary>
        /// 
        /// </summary>
        public static         void glPrioritizeTextures(GLsizei n, GLuint[] textures, GLclampf[] priorities)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(priorities, GCHandleType.Pinned);
            try
            {
                Delegates.glPrioritizeTextures(n, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region Indexub(GLubyte c)

        /// <summary>
        /// 
        /// </summary>
        public static         void glIndexub(GLubyte c)
        {
            Delegates.glIndexub(c);
        }

        #endregion

        #region Indexubv(IntPtr c)

        /// <summary>
        /// 
        /// </summary>
        public static         void glIndexubv(IntPtr c)
        {
            Delegates.glIndexubv(c);
        }

        #endregion

        #region Indexubv(object c)

        /// <summary>
        /// 
        /// </summary>
        public static         void glIndexubv(object c)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glIndexubv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Indexubv(GLubyte[] c)

        /// <summary>
        /// 
        /// </summary>
        public static         void glIndexubv(GLubyte[] c)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glIndexubv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region PopClientAttrib()

        /// <summary>
        /// 
        /// </summary>
        public static         void glPopClientAttrib()
        {
            Delegates.glPopClientAttrib();
        }

        #endregion

        #region PushClientAttrib(GLbitfield mask)

        /// <summary>
        /// 
        /// </summary>
        public static         void glPushClientAttrib(GLbitfield mask)
        {
            Delegates.glPushClientAttrib(mask);
        }

        #endregion

        #region BlendColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)

        /// <summary>
        /// 
        /// </summary>
        public static         void glBlendColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
        {
            Delegates.glBlendColor(red, green, blue, alpha);
        }

        #endregion

        #region BlendEquation(GLenum mode)

        /// <summary>
        /// 
        /// </summary>
        public static         void glBlendEquation(GLenum mode)
        {
            Delegates.glBlendEquation(mode);
        }

        #endregion

        #region DrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, IntPtr indices)

        /// <summary>
        /// 
        /// </summary>
        public static         void glDrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, IntPtr indices)
        {
            Delegates.glDrawRangeElements(mode, start, end, count, type, indices);
        }

        #endregion

        #region DrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, object indices)

        /// <summary>
        /// 
        /// </summary>
        public static         void glDrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, object indices)
        {
            GCHandle h0 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glDrawRangeElements(mode, start, end, count, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ColorTable(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, IntPtr table)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColorTable(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, IntPtr table)
        {
            Delegates.glColorTable(target, internalformat, width, format, type, table);
        }

        #endregion

        #region ColorTable(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, object table)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColorTable(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, object table)
        {
            GCHandle h0 = GCHandle.Alloc(table, GCHandleType.Pinned);
            try
            {
                Delegates.glColorTable(target, internalformat, width, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ColorTableParameterfv(GLenum target, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColorTableParameterfv(GLenum target, GLenum pname, IntPtr parameters)
        {
            Delegates.glColorTableParameterfv(target, pname, parameters);
        }

        #endregion

        #region ColorTableParameterfv(GLenum target, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColorTableParameterfv(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glColorTableParameterfv(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ColorTableParameterfv(GLenum target, GLenum pname, GLfloat[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColorTableParameterfv(GLenum target, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glColorTableParameterfv(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ColorTableParameteriv(GLenum target, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColorTableParameteriv(GLenum target, GLenum pname, IntPtr parameters)
        {
            Delegates.glColorTableParameteriv(target, pname, parameters);
        }

        #endregion

        #region ColorTableParameteriv(GLenum target, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColorTableParameteriv(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glColorTableParameteriv(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ColorTableParameteriv(GLenum target, GLenum pname, GLint[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColorTableParameteriv(GLenum target, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glColorTableParameteriv(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region CopyColorTable(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)

        /// <summary>
        /// 
        /// </summary>
        public static         void glCopyColorTable(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)
        {
            Delegates.glCopyColorTable(target, internalformat, x, y, width);
        }

        #endregion

        #region GetColorTable(GLenum target, GLenum format, GLenum type, IntPtr table)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetColorTable(GLenum target, GLenum format, GLenum type, IntPtr table)
        {
            Delegates.glGetColorTable(target, format, type, table);
        }

        #endregion

        #region GetColorTable(GLenum target, GLenum format, GLenum type, object table)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetColorTable(GLenum target, GLenum format, GLenum type, object table)
        {
            GCHandle h0 = GCHandle.Alloc(table, GCHandleType.Pinned);
            try
            {
                Delegates.glGetColorTable(target, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetColorTableParameterfv(GLenum target, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetColorTableParameterfv(GLenum target, GLenum pname, IntPtr parameters)
        {
            Delegates.glGetColorTableParameterfv(target, pname, parameters);
        }

        #endregion

        #region GetColorTableParameterfv(GLenum target, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetColorTableParameterfv(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetColorTableParameterfv(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetColorTableParameterfv(GLenum target, GLenum pname, GLfloat[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetColorTableParameterfv(GLenum target, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetColorTableParameterfv(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetColorTableParameteriv(GLenum target, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetColorTableParameteriv(GLenum target, GLenum pname, IntPtr parameters)
        {
            Delegates.glGetColorTableParameteriv(target, pname, parameters);
        }

        #endregion

        #region GetColorTableParameteriv(GLenum target, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetColorTableParameteriv(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetColorTableParameteriv(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetColorTableParameteriv(GLenum target, GLenum pname, GLint[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetColorTableParameteriv(GLenum target, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetColorTableParameteriv(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ColorSubTable(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, IntPtr data)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColorSubTable(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, IntPtr data)
        {
            Delegates.glColorSubTable(target, start, count, format, type, data);
        }

        #endregion

        #region ColorSubTable(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, object data)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColorSubTable(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glColorSubTable(target, start, count, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region CopyColorSubTable(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width)

        /// <summary>
        /// 
        /// </summary>
        public static         void glCopyColorSubTable(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width)
        {
            Delegates.glCopyColorSubTable(target, start, x, y, width);
        }

        #endregion

        #region ConvolutionFilter1D(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, IntPtr image)

        /// <summary>
        /// 
        /// </summary>
        public static         void glConvolutionFilter1D(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, IntPtr image)
        {
            Delegates.glConvolutionFilter1D(target, internalformat, width, format, type, image);
        }

        #endregion

        #region ConvolutionFilter1D(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, object image)

        /// <summary>
        /// 
        /// </summary>
        public static         void glConvolutionFilter1D(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, object image)
        {
            GCHandle h0 = GCHandle.Alloc(image, GCHandleType.Pinned);
            try
            {
                Delegates.glConvolutionFilter1D(target, internalformat, width, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ConvolutionFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, IntPtr image)

        /// <summary>
        /// 
        /// </summary>
        public static         void glConvolutionFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, IntPtr image)
        {
            Delegates.glConvolutionFilter2D(target, internalformat, width, height, format, type, image);
        }

        #endregion

        #region ConvolutionFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, object image)

        /// <summary>
        /// 
        /// </summary>
        public static         void glConvolutionFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, object image)
        {
            GCHandle h0 = GCHandle.Alloc(image, GCHandleType.Pinned);
            try
            {
                Delegates.glConvolutionFilter2D(target, internalformat, width, height, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ConvolutionParameterf(GLenum target, GLenum pname, GLfloat parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glConvolutionParameterf(GLenum target, GLenum pname, GLfloat parameters)
        {
            Delegates.glConvolutionParameterf(target, pname, parameters);
        }

        #endregion

        #region ConvolutionParameterfv(GLenum target, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glConvolutionParameterfv(GLenum target, GLenum pname, IntPtr parameters)
        {
            Delegates.glConvolutionParameterfv(target, pname, parameters);
        }

        #endregion

        #region ConvolutionParameterfv(GLenum target, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glConvolutionParameterfv(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glConvolutionParameterfv(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ConvolutionParameterfv(GLenum target, GLenum pname, GLfloat[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glConvolutionParameterfv(GLenum target, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glConvolutionParameterfv(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ConvolutionParameteri(GLenum target, GLenum pname, GLint parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glConvolutionParameteri(GLenum target, GLenum pname, GLint parameters)
        {
            Delegates.glConvolutionParameteri(target, pname, parameters);
        }

        #endregion

        #region ConvolutionParameteriv(GLenum target, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glConvolutionParameteriv(GLenum target, GLenum pname, IntPtr parameters)
        {
            Delegates.glConvolutionParameteriv(target, pname, parameters);
        }

        #endregion

        #region ConvolutionParameteriv(GLenum target, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glConvolutionParameteriv(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glConvolutionParameteriv(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ConvolutionParameteriv(GLenum target, GLenum pname, GLint[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glConvolutionParameteriv(GLenum target, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glConvolutionParameteriv(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region CopyConvolutionFilter1D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)

        /// <summary>
        /// 
        /// </summary>
        public static         void glCopyConvolutionFilter1D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)
        {
            Delegates.glCopyConvolutionFilter1D(target, internalformat, x, y, width);
        }

        #endregion

        #region CopyConvolutionFilter2D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height)

        /// <summary>
        /// 
        /// </summary>
        public static         void glCopyConvolutionFilter2D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height)
        {
            Delegates.glCopyConvolutionFilter2D(target, internalformat, x, y, width, height);
        }

        #endregion

        #region GetConvolutionFilter(GLenum target, GLenum format, GLenum type, IntPtr image)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetConvolutionFilter(GLenum target, GLenum format, GLenum type, IntPtr image)
        {
            Delegates.glGetConvolutionFilter(target, format, type, image);
        }

        #endregion

        #region GetConvolutionFilter(GLenum target, GLenum format, GLenum type, object image)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetConvolutionFilter(GLenum target, GLenum format, GLenum type, object image)
        {
            GCHandle h0 = GCHandle.Alloc(image, GCHandleType.Pinned);
            try
            {
                Delegates.glGetConvolutionFilter(target, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetConvolutionParameterfv(GLenum target, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetConvolutionParameterfv(GLenum target, GLenum pname, IntPtr parameters)
        {
            Delegates.glGetConvolutionParameterfv(target, pname, parameters);
        }

        #endregion

        #region GetConvolutionParameterfv(GLenum target, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetConvolutionParameterfv(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetConvolutionParameterfv(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetConvolutionParameterfv(GLenum target, GLenum pname, GLfloat[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetConvolutionParameterfv(GLenum target, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetConvolutionParameterfv(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetConvolutionParameteriv(GLenum target, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetConvolutionParameteriv(GLenum target, GLenum pname, IntPtr parameters)
        {
            Delegates.glGetConvolutionParameteriv(target, pname, parameters);
        }

        #endregion

        #region GetConvolutionParameteriv(GLenum target, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetConvolutionParameteriv(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetConvolutionParameteriv(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetConvolutionParameteriv(GLenum target, GLenum pname, GLint[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetConvolutionParameteriv(GLenum target, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetConvolutionParameteriv(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetSeparableFilter(GLenum target, GLenum format, GLenum type, IntPtr row, IntPtr column, IntPtr span)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetSeparableFilter(GLenum target, GLenum format, GLenum type, IntPtr row, IntPtr column, IntPtr span)
        {
            Delegates.glGetSeparableFilter(target, format, type, row, column, span);
        }

        #endregion

        #region GetSeparableFilter(GLenum target, GLenum format, GLenum type, IntPtr row, IntPtr column, object span)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetSeparableFilter(GLenum target, GLenum format, GLenum type, IntPtr row, IntPtr column, object span)
        {
            GCHandle h0 = GCHandle.Alloc(span, GCHandleType.Pinned);
            try
            {
                Delegates.glGetSeparableFilter(target, format, type, row, column, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetSeparableFilter(GLenum target, GLenum format, GLenum type, IntPtr row, object column, IntPtr span)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetSeparableFilter(GLenum target, GLenum format, GLenum type, IntPtr row, object column, IntPtr span)
        {
            GCHandle h0 = GCHandle.Alloc(column, GCHandleType.Pinned);
            try
            {
                Delegates.glGetSeparableFilter(target, format, type, row, h0.AddrOfPinnedObject(), span);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetSeparableFilter(GLenum target, GLenum format, GLenum type, IntPtr row, object column, object span)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetSeparableFilter(GLenum target, GLenum format, GLenum type, IntPtr row, object column, object span)
        {
            GCHandle h0 = GCHandle.Alloc(column, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(span, GCHandleType.Pinned);
            try
            {
                Delegates.glGetSeparableFilter(target, format, type, row, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetSeparableFilter(GLenum target, GLenum format, GLenum type, object row, IntPtr column, IntPtr span)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetSeparableFilter(GLenum target, GLenum format, GLenum type, object row, IntPtr column, IntPtr span)
        {
            GCHandle h0 = GCHandle.Alloc(row, GCHandleType.Pinned);
            try
            {
                Delegates.glGetSeparableFilter(target, format, type, h0.AddrOfPinnedObject(), column, span);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetSeparableFilter(GLenum target, GLenum format, GLenum type, object row, IntPtr column, object span)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetSeparableFilter(GLenum target, GLenum format, GLenum type, object row, IntPtr column, object span)
        {
            GCHandle h0 = GCHandle.Alloc(row, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(span, GCHandleType.Pinned);
            try
            {
                Delegates.glGetSeparableFilter(target, format, type, h0.AddrOfPinnedObject(), column, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetSeparableFilter(GLenum target, GLenum format, GLenum type, object row, object column, IntPtr span)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetSeparableFilter(GLenum target, GLenum format, GLenum type, object row, object column, IntPtr span)
        {
            GCHandle h0 = GCHandle.Alloc(row, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(column, GCHandleType.Pinned);
            try
            {
                Delegates.glGetSeparableFilter(target, format, type, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), span);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetSeparableFilter(GLenum target, GLenum format, GLenum type, object row, object column, object span)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetSeparableFilter(GLenum target, GLenum format, GLenum type, object row, object column, object span)
        {
            GCHandle h0 = GCHandle.Alloc(row, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(column, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(span, GCHandleType.Pinned);
            try
            {
                Delegates.glGetSeparableFilter(target, format, type, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region SeparableFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, IntPtr row, IntPtr column)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSeparableFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, IntPtr row, IntPtr column)
        {
            Delegates.glSeparableFilter2D(target, internalformat, width, height, format, type, row, column);
        }

        #endregion

        #region SeparableFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, IntPtr row, object column)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSeparableFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, IntPtr row, object column)
        {
            GCHandle h0 = GCHandle.Alloc(column, GCHandleType.Pinned);
            try
            {
                Delegates.glSeparableFilter2D(target, internalformat, width, height, format, type, row, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SeparableFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, object row, IntPtr column)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSeparableFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, object row, IntPtr column)
        {
            GCHandle h0 = GCHandle.Alloc(row, GCHandleType.Pinned);
            try
            {
                Delegates.glSeparableFilter2D(target, internalformat, width, height, format, type, h0.AddrOfPinnedObject(), column);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SeparableFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, object row, object column)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSeparableFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, object row, object column)
        {
            GCHandle h0 = GCHandle.Alloc(row, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(column, GCHandleType.Pinned);
            try
            {
                Delegates.glSeparableFilter2D(target, internalformat, width, height, format, type, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetHistogram(GLenum target, GLboolean reset, GLenum format, GLenum type, IntPtr values)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetHistogram(GLenum target, GLboolean reset, GLenum format, GLenum type, IntPtr values)
        {
            Delegates.glGetHistogram(target, reset, format, type, values);
        }

        #endregion

        #region GetHistogram(GLenum target, GLboolean reset, GLenum format, GLenum type, object values)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetHistogram(GLenum target, GLboolean reset, GLenum format, GLenum type, object values)
        {
            GCHandle h0 = GCHandle.Alloc(values, GCHandleType.Pinned);
            try
            {
                Delegates.glGetHistogram(target, reset, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetHistogramParameterfv(GLenum target, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetHistogramParameterfv(GLenum target, GLenum pname, IntPtr parameters)
        {
            Delegates.glGetHistogramParameterfv(target, pname, parameters);
        }

        #endregion

        #region GetHistogramParameterfv(GLenum target, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetHistogramParameterfv(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetHistogramParameterfv(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetHistogramParameterfv(GLenum target, GLenum pname, GLfloat[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetHistogramParameterfv(GLenum target, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetHistogramParameterfv(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetHistogramParameteriv(GLenum target, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetHistogramParameteriv(GLenum target, GLenum pname, IntPtr parameters)
        {
            Delegates.glGetHistogramParameteriv(target, pname, parameters);
        }

        #endregion

        #region GetHistogramParameteriv(GLenum target, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetHistogramParameteriv(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetHistogramParameteriv(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetHistogramParameteriv(GLenum target, GLenum pname, GLint[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetHistogramParameteriv(GLenum target, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetHistogramParameteriv(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetMinmax(GLenum target, GLboolean reset, GLenum format, GLenum type, IntPtr values)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetMinmax(GLenum target, GLboolean reset, GLenum format, GLenum type, IntPtr values)
        {
            Delegates.glGetMinmax(target, reset, format, type, values);
        }

        #endregion

        #region GetMinmax(GLenum target, GLboolean reset, GLenum format, GLenum type, object values)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetMinmax(GLenum target, GLboolean reset, GLenum format, GLenum type, object values)
        {
            GCHandle h0 = GCHandle.Alloc(values, GCHandleType.Pinned);
            try
            {
                Delegates.glGetMinmax(target, reset, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetMinmaxParameterfv(GLenum target, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetMinmaxParameterfv(GLenum target, GLenum pname, IntPtr parameters)
        {
            Delegates.glGetMinmaxParameterfv(target, pname, parameters);
        }

        #endregion

        #region GetMinmaxParameterfv(GLenum target, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetMinmaxParameterfv(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetMinmaxParameterfv(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetMinmaxParameterfv(GLenum target, GLenum pname, GLfloat[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetMinmaxParameterfv(GLenum target, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetMinmaxParameterfv(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetMinmaxParameteriv(GLenum target, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetMinmaxParameteriv(GLenum target, GLenum pname, IntPtr parameters)
        {
            Delegates.glGetMinmaxParameteriv(target, pname, parameters);
        }

        #endregion

        #region GetMinmaxParameteriv(GLenum target, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetMinmaxParameteriv(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetMinmaxParameteriv(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetMinmaxParameteriv(GLenum target, GLenum pname, GLint[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetMinmaxParameteriv(GLenum target, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetMinmaxParameteriv(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Histogram(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink)

        /// <summary>
        /// 
        /// </summary>
        public static         void glHistogram(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink)
        {
            Delegates.glHistogram(target, width, internalformat, sink);
        }

        #endregion

        #region Minmax(GLenum target, GLenum internalformat, GLboolean sink)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMinmax(GLenum target, GLenum internalformat, GLboolean sink)
        {
            Delegates.glMinmax(target, internalformat, sink);
        }

        #endregion

        #region ResetHistogram(GLenum target)

        /// <summary>
        /// 
        /// </summary>
        public static         void glResetHistogram(GLenum target)
        {
            Delegates.glResetHistogram(target);
        }

        #endregion

        #region ResetMinmax(GLenum target)

        /// <summary>
        /// 
        /// </summary>
        public static         void glResetMinmax(GLenum target)
        {
            Delegates.glResetMinmax(target);
        }

        #endregion

        #region TexImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, IntPtr pixels)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, IntPtr pixels)
        {
            Delegates.glTexImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels);
        }

        #endregion

        #region TexImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, object pixels)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, object pixels)
        {
            GCHandle h0 = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glTexImage3D(target, level, internalformat, width, height, depth, border, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, IntPtr pixels)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, IntPtr pixels)
        {
            Delegates.glTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
        }

        #endregion

        #region TexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, object pixels)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, object pixels)
        {
            GCHandle h0 = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region CopyTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)

        /// <summary>
        /// 
        /// </summary>
        public static         void glCopyTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
        {
            Delegates.glCopyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height);
        }

        #endregion

        #region ActiveTexture(GLenum texture)

        /// <summary>
        /// 
        /// </summary>
        public static         void glActiveTexture(GLenum texture)
        {
            Delegates.glActiveTexture(texture);
        }

        #endregion

        #region ClientActiveTexture(GLenum texture)

        /// <summary>
        /// 
        /// </summary>
        public static         void glClientActiveTexture(GLenum texture)
        {
            Delegates.glClientActiveTexture(texture);
        }

        #endregion

        #region MultiTexCoord1d(GLenum target, GLdouble s)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord1d(GLenum target, GLdouble s)
        {
            Delegates.glMultiTexCoord1d(target, s);
        }

        #endregion

        #region MultiTexCoord1dv(GLenum target, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord1dv(GLenum target, IntPtr v)
        {
            Delegates.glMultiTexCoord1dv(target, v);
        }

        #endregion

        #region MultiTexCoord1dv(GLenum target, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord1dv(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord1dv(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord1dv(GLenum target, GLdouble[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord1dv(GLenum target, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord1dv(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord1f(GLenum target, GLfloat s)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord1f(GLenum target, GLfloat s)
        {
            Delegates.glMultiTexCoord1f(target, s);
        }

        #endregion

        #region MultiTexCoord1fv(GLenum target, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord1fv(GLenum target, IntPtr v)
        {
            Delegates.glMultiTexCoord1fv(target, v);
        }

        #endregion

        #region MultiTexCoord1fv(GLenum target, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord1fv(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord1fv(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord1fv(GLenum target, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord1fv(GLenum target, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord1fv(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord1i(GLenum target, GLint s)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord1i(GLenum target, GLint s)
        {
            Delegates.glMultiTexCoord1i(target, s);
        }

        #endregion

        #region MultiTexCoord1iv(GLenum target, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord1iv(GLenum target, IntPtr v)
        {
            Delegates.glMultiTexCoord1iv(target, v);
        }

        #endregion

        #region MultiTexCoord1iv(GLenum target, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord1iv(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord1iv(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord1iv(GLenum target, GLint[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord1iv(GLenum target, GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord1iv(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord1s(GLenum target, GLshort s)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord1s(GLenum target, GLshort s)
        {
            Delegates.glMultiTexCoord1s(target, s);
        }

        #endregion

        #region MultiTexCoord1sv(GLenum target, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord1sv(GLenum target, IntPtr v)
        {
            Delegates.glMultiTexCoord1sv(target, v);
        }

        #endregion

        #region MultiTexCoord1sv(GLenum target, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord1sv(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord1sv(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord1sv(GLenum target, GLshort[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord1sv(GLenum target, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord1sv(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord2d(GLenum target, GLdouble s, GLdouble t)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord2d(GLenum target, GLdouble s, GLdouble t)
        {
            Delegates.glMultiTexCoord2d(target, s, t);
        }

        #endregion

        #region MultiTexCoord2dv(GLenum target, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord2dv(GLenum target, IntPtr v)
        {
            Delegates.glMultiTexCoord2dv(target, v);
        }

        #endregion

        #region MultiTexCoord2dv(GLenum target, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord2dv(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord2dv(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord2dv(GLenum target, GLdouble[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord2dv(GLenum target, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord2dv(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord2f(GLenum target, GLfloat s, GLfloat t)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord2f(GLenum target, GLfloat s, GLfloat t)
        {
            Delegates.glMultiTexCoord2f(target, s, t);
        }

        #endregion

        #region MultiTexCoord2fv(GLenum target, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord2fv(GLenum target, IntPtr v)
        {
            Delegates.glMultiTexCoord2fv(target, v);
        }

        #endregion

        #region MultiTexCoord2fv(GLenum target, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord2fv(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord2fv(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord2fv(GLenum target, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord2fv(GLenum target, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord2fv(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord2i(GLenum target, GLint s, GLint t)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord2i(GLenum target, GLint s, GLint t)
        {
            Delegates.glMultiTexCoord2i(target, s, t);
        }

        #endregion

        #region MultiTexCoord2iv(GLenum target, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord2iv(GLenum target, IntPtr v)
        {
            Delegates.glMultiTexCoord2iv(target, v);
        }

        #endregion

        #region MultiTexCoord2iv(GLenum target, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord2iv(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord2iv(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord2iv(GLenum target, GLint[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord2iv(GLenum target, GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord2iv(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord2s(GLenum target, GLshort s, GLshort t)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord2s(GLenum target, GLshort s, GLshort t)
        {
            Delegates.glMultiTexCoord2s(target, s, t);
        }

        #endregion

        #region MultiTexCoord2sv(GLenum target, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord2sv(GLenum target, IntPtr v)
        {
            Delegates.glMultiTexCoord2sv(target, v);
        }

        #endregion

        #region MultiTexCoord2sv(GLenum target, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord2sv(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord2sv(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord2sv(GLenum target, GLshort[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord2sv(GLenum target, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord2sv(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord3d(GLenum target, GLdouble s, GLdouble t, GLdouble r)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord3d(GLenum target, GLdouble s, GLdouble t, GLdouble r)
        {
            Delegates.glMultiTexCoord3d(target, s, t, r);
        }

        #endregion

        #region MultiTexCoord3dv(GLenum target, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord3dv(GLenum target, IntPtr v)
        {
            Delegates.glMultiTexCoord3dv(target, v);
        }

        #endregion

        #region MultiTexCoord3dv(GLenum target, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord3dv(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord3dv(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord3dv(GLenum target, GLdouble[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord3dv(GLenum target, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord3dv(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord3f(GLenum target, GLfloat s, GLfloat t, GLfloat r)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord3f(GLenum target, GLfloat s, GLfloat t, GLfloat r)
        {
            Delegates.glMultiTexCoord3f(target, s, t, r);
        }

        #endregion

        #region MultiTexCoord3fv(GLenum target, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord3fv(GLenum target, IntPtr v)
        {
            Delegates.glMultiTexCoord3fv(target, v);
        }

        #endregion

        #region MultiTexCoord3fv(GLenum target, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord3fv(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord3fv(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord3fv(GLenum target, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord3fv(GLenum target, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord3fv(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord3i(GLenum target, GLint s, GLint t, GLint r)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord3i(GLenum target, GLint s, GLint t, GLint r)
        {
            Delegates.glMultiTexCoord3i(target, s, t, r);
        }

        #endregion

        #region MultiTexCoord3iv(GLenum target, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord3iv(GLenum target, IntPtr v)
        {
            Delegates.glMultiTexCoord3iv(target, v);
        }

        #endregion

        #region MultiTexCoord3iv(GLenum target, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord3iv(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord3iv(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord3iv(GLenum target, GLint[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord3iv(GLenum target, GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord3iv(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord3s(GLenum target, GLshort s, GLshort t, GLshort r)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord3s(GLenum target, GLshort s, GLshort t, GLshort r)
        {
            Delegates.glMultiTexCoord3s(target, s, t, r);
        }

        #endregion

        #region MultiTexCoord3sv(GLenum target, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord3sv(GLenum target, IntPtr v)
        {
            Delegates.glMultiTexCoord3sv(target, v);
        }

        #endregion

        #region MultiTexCoord3sv(GLenum target, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord3sv(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord3sv(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord3sv(GLenum target, GLshort[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord3sv(GLenum target, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord3sv(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord4d(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord4d(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q)
        {
            Delegates.glMultiTexCoord4d(target, s, t, r, q);
        }

        #endregion

        #region MultiTexCoord4dv(GLenum target, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord4dv(GLenum target, IntPtr v)
        {
            Delegates.glMultiTexCoord4dv(target, v);
        }

        #endregion

        #region MultiTexCoord4dv(GLenum target, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord4dv(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord4dv(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord4dv(GLenum target, GLdouble[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord4dv(GLenum target, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord4dv(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord4f(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord4f(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q)
        {
            Delegates.glMultiTexCoord4f(target, s, t, r, q);
        }

        #endregion

        #region MultiTexCoord4fv(GLenum target, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord4fv(GLenum target, IntPtr v)
        {
            Delegates.glMultiTexCoord4fv(target, v);
        }

        #endregion

        #region MultiTexCoord4fv(GLenum target, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord4fv(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord4fv(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord4fv(GLenum target, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord4fv(GLenum target, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord4fv(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord4i(GLenum target, GLint s, GLint t, GLint r, GLint q)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord4i(GLenum target, GLint s, GLint t, GLint r, GLint q)
        {
            Delegates.glMultiTexCoord4i(target, s, t, r, q);
        }

        #endregion

        #region MultiTexCoord4iv(GLenum target, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord4iv(GLenum target, IntPtr v)
        {
            Delegates.glMultiTexCoord4iv(target, v);
        }

        #endregion

        #region MultiTexCoord4iv(GLenum target, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord4iv(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord4iv(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord4iv(GLenum target, GLint[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord4iv(GLenum target, GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord4iv(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord4s(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord4s(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q)
        {
            Delegates.glMultiTexCoord4s(target, s, t, r, q);
        }

        #endregion

        #region MultiTexCoord4sv(GLenum target, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord4sv(GLenum target, IntPtr v)
        {
            Delegates.glMultiTexCoord4sv(target, v);
        }

        #endregion

        #region MultiTexCoord4sv(GLenum target, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord4sv(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord4sv(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord4sv(GLenum target, GLshort[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord4sv(GLenum target, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord4sv(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region LoadTransposeMatrixf(IntPtr m)

        /// <summary>
        /// 
        /// </summary>
        public static         void glLoadTransposeMatrixf(IntPtr m)
        {
            Delegates.glLoadTransposeMatrixf(m);
        }

        #endregion

        #region LoadTransposeMatrixf(object m)

        /// <summary>
        /// 
        /// </summary>
        public static         void glLoadTransposeMatrixf(object m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                Delegates.glLoadTransposeMatrixf(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region LoadTransposeMatrixf(GLfloat[] m)

        /// <summary>
        /// 
        /// </summary>
        public static         void glLoadTransposeMatrixf(GLfloat[] m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                Delegates.glLoadTransposeMatrixf(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region LoadTransposeMatrixd(IntPtr m)

        /// <summary>
        /// 
        /// </summary>
        public static         void glLoadTransposeMatrixd(IntPtr m)
        {
            Delegates.glLoadTransposeMatrixd(m);
        }

        #endregion

        #region LoadTransposeMatrixd(object m)

        /// <summary>
        /// 
        /// </summary>
        public static         void glLoadTransposeMatrixd(object m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                Delegates.glLoadTransposeMatrixd(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region LoadTransposeMatrixd(GLdouble[] m)

        /// <summary>
        /// 
        /// </summary>
        public static         void glLoadTransposeMatrixd(GLdouble[] m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                Delegates.glLoadTransposeMatrixd(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultTransposeMatrixf(IntPtr m)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultTransposeMatrixf(IntPtr m)
        {
            Delegates.glMultTransposeMatrixf(m);
        }

        #endregion

        #region MultTransposeMatrixf(object m)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultTransposeMatrixf(object m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                Delegates.glMultTransposeMatrixf(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultTransposeMatrixf(GLfloat[] m)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultTransposeMatrixf(GLfloat[] m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                Delegates.glMultTransposeMatrixf(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultTransposeMatrixd(IntPtr m)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultTransposeMatrixd(IntPtr m)
        {
            Delegates.glMultTransposeMatrixd(m);
        }

        #endregion

        #region MultTransposeMatrixd(object m)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultTransposeMatrixd(object m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                Delegates.glMultTransposeMatrixd(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultTransposeMatrixd(GLdouble[] m)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultTransposeMatrixd(GLdouble[] m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                Delegates.glMultTransposeMatrixd(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SampleCoverage(GLclampf value, GLboolean invert)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSampleCoverage(GLclampf value, GLboolean invert)
        {
            Delegates.glSampleCoverage(value, invert);
        }

        #endregion

        #region CompressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, IntPtr data)

        /// <summary>
        /// 
        /// </summary>
        public static         void glCompressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, IntPtr data)
        {
            Delegates.glCompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data);
        }

        #endregion

        #region CompressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, object data)

        /// <summary>
        /// 
        /// </summary>
        public static         void glCompressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glCompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region CompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, IntPtr data)

        /// <summary>
        /// 
        /// </summary>
        public static         void glCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, IntPtr data)
        {
            Delegates.glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data);
        }

        #endregion

        #region CompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, object data)

        /// <summary>
        /// 
        /// </summary>
        public static         void glCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region CompressedTexImage1D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, IntPtr data)

        /// <summary>
        /// 
        /// </summary>
        public static         void glCompressedTexImage1D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, IntPtr data)
        {
            Delegates.glCompressedTexImage1D(target, level, internalformat, width, border, imageSize, data);
        }

        #endregion

        #region CompressedTexImage1D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, object data)

        /// <summary>
        /// 
        /// </summary>
        public static         void glCompressedTexImage1D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glCompressedTexImage1D(target, level, internalformat, width, border, imageSize, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region CompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, IntPtr data)

        /// <summary>
        /// 
        /// </summary>
        public static         void glCompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, IntPtr data)
        {
            Delegates.glCompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
        }

        #endregion

        #region CompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, object data)

        /// <summary>
        /// 
        /// </summary>
        public static         void glCompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glCompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region CompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, IntPtr data)

        /// <summary>
        /// 
        /// </summary>
        public static         void glCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, IntPtr data)
        {
            Delegates.glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data);
        }

        #endregion

        #region CompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, object data)

        /// <summary>
        /// 
        /// </summary>
        public static         void glCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region CompressedTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, IntPtr data)

        /// <summary>
        /// 
        /// </summary>
        public static         void glCompressedTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, IntPtr data)
        {
            Delegates.glCompressedTexSubImage1D(target, level, xoffset, width, format, imageSize, data);
        }

        #endregion

        #region CompressedTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, object data)

        /// <summary>
        /// 
        /// </summary>
        public static         void glCompressedTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glCompressedTexSubImage1D(target, level, xoffset, width, format, imageSize, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetCompressedTexImage(GLenum target, GLint level, IntPtr img)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetCompressedTexImage(GLenum target, GLint level, IntPtr img)
        {
            Delegates.glGetCompressedTexImage(target, level, img);
        }

        #endregion

        #region GetCompressedTexImage(GLenum target, GLint level, object img)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetCompressedTexImage(GLenum target, GLint level, object img)
        {
            GCHandle h0 = GCHandle.Alloc(img, GCHandleType.Pinned);
            try
            {
                Delegates.glGetCompressedTexImage(target, level, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region BlendFuncSeparate(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)

        /// <summary>
        /// 
        /// </summary>
        public static         void glBlendFuncSeparate(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)
        {
            Delegates.glBlendFuncSeparate(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
        }

        #endregion

        #region FogCoordf(GLfloat coord)

        /// <summary>
        /// 
        /// </summary>
        public static         void glFogCoordf(GLfloat coord)
        {
            Delegates.glFogCoordf(coord);
        }

        #endregion

        #region FogCoordfv(IntPtr coord)

        /// <summary>
        /// 
        /// </summary>
        public static         void glFogCoordfv(IntPtr coord)
        {
            Delegates.glFogCoordfv(coord);
        }

        #endregion

        #region FogCoordfv(object coord)

        /// <summary>
        /// 
        /// </summary>
        public static         void glFogCoordfv(object coord)
        {
            GCHandle h0 = GCHandle.Alloc(coord, GCHandleType.Pinned);
            try
            {
                Delegates.glFogCoordfv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region FogCoordfv(GLfloat[] coord)

        /// <summary>
        /// 
        /// </summary>
        public static         void glFogCoordfv(GLfloat[] coord)
        {
            GCHandle h0 = GCHandle.Alloc(coord, GCHandleType.Pinned);
            try
            {
                Delegates.glFogCoordfv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region FogCoordd(GLdouble coord)

        /// <summary>
        /// 
        /// </summary>
        public static         void glFogCoordd(GLdouble coord)
        {
            Delegates.glFogCoordd(coord);
        }

        #endregion

        #region FogCoorddv(IntPtr coord)

        /// <summary>
        /// 
        /// </summary>
        public static         void glFogCoorddv(IntPtr coord)
        {
            Delegates.glFogCoorddv(coord);
        }

        #endregion

        #region FogCoorddv(object coord)

        /// <summary>
        /// 
        /// </summary>
        public static         void glFogCoorddv(object coord)
        {
            GCHandle h0 = GCHandle.Alloc(coord, GCHandleType.Pinned);
            try
            {
                Delegates.glFogCoorddv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region FogCoorddv(GLdouble[] coord)

        /// <summary>
        /// 
        /// </summary>
        public static         void glFogCoorddv(GLdouble[] coord)
        {
            GCHandle h0 = GCHandle.Alloc(coord, GCHandleType.Pinned);
            try
            {
                Delegates.glFogCoorddv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region FogCoordPointer(GLenum type, GLsizei stride, IntPtr pointer)

        /// <summary>
        /// 
        /// </summary>
        public static         void glFogCoordPointer(GLenum type, GLsizei stride, IntPtr pointer)
        {
            Delegates.glFogCoordPointer(type, stride, pointer);
        }

        #endregion

        #region FogCoordPointer(GLenum type, GLsizei stride, object pointer)

        /// <summary>
        /// 
        /// </summary>
        public static         void glFogCoordPointer(GLenum type, GLsizei stride, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glFogCoordPointer(type, stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiDrawArrays(GLenum mode, IntPtr first, IntPtr count, GLsizei primcount)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiDrawArrays(GLenum mode, IntPtr first, IntPtr count, GLsizei primcount)
        {
            Delegates.glMultiDrawArrays(mode, first, count, primcount);
        }

        #endregion

        #region MultiDrawArrays(GLenum mode, IntPtr first, object count, GLsizei primcount)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiDrawArrays(GLenum mode, IntPtr first, object count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawArrays(mode, first, h0.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiDrawArrays(GLenum mode, IntPtr first, GLsizei[] count, GLsizei primcount)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiDrawArrays(GLenum mode, IntPtr first, GLsizei[] count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawArrays(mode, first, h0.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiDrawArrays(GLenum mode, object first, IntPtr count, GLsizei primcount)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiDrawArrays(GLenum mode, object first, IntPtr count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawArrays(mode, h0.AddrOfPinnedObject(), count, primcount);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiDrawArrays(GLenum mode, object first, object count, GLsizei primcount)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiDrawArrays(GLenum mode, object first, object count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawArrays(mode, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region MultiDrawArrays(GLenum mode, object first, GLsizei[] count, GLsizei primcount)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiDrawArrays(GLenum mode, object first, GLsizei[] count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawArrays(mode, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region MultiDrawArrays(GLenum mode, GLint[] first, IntPtr count, GLsizei primcount)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiDrawArrays(GLenum mode, GLint[] first, IntPtr count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawArrays(mode, h0.AddrOfPinnedObject(), count, primcount);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiDrawArrays(GLenum mode, GLint[] first, object count, GLsizei primcount)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiDrawArrays(GLenum mode, GLint[] first, object count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawArrays(mode, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region MultiDrawArrays(GLenum mode, GLint[] first, GLsizei[] count, GLsizei primcount)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiDrawArrays(GLenum mode, GLint[] first, GLsizei[] count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawArrays(mode, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region MultiDrawElements(GLenum mode, IntPtr count, GLenum type, IntPtr indices, GLsizei primcount)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiDrawElements(GLenum mode, IntPtr count, GLenum type, IntPtr indices, GLsizei primcount)
        {
            Delegates.glMultiDrawElements(mode, count, type, indices, primcount);
        }

        #endregion

        #region MultiDrawElements(GLenum mode, IntPtr count, GLenum type, object indices, GLsizei primcount)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiDrawElements(GLenum mode, IntPtr count, GLenum type, object indices, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawElements(mode, count, type, h0.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiDrawElements(GLenum mode, IntPtr count, GLenum type, IntPtr[] indices, GLsizei primcount)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiDrawElements(GLenum mode, IntPtr count, GLenum type, IntPtr[] indices, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawElements(mode, count, type, h0.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiDrawElements(GLenum mode, object count, GLenum type, IntPtr indices, GLsizei primcount)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiDrawElements(GLenum mode, object count, GLenum type, IntPtr indices, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawElements(mode, h0.AddrOfPinnedObject(), type, indices, primcount);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiDrawElements(GLenum mode, object count, GLenum type, object indices, GLsizei primcount)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiDrawElements(GLenum mode, object count, GLenum type, object indices, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawElements(mode, h0.AddrOfPinnedObject(), type, h1.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region MultiDrawElements(GLenum mode, object count, GLenum type, IntPtr[] indices, GLsizei primcount)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiDrawElements(GLenum mode, object count, GLenum type, IntPtr[] indices, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawElements(mode, h0.AddrOfPinnedObject(), type, h1.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region MultiDrawElements(GLenum mode, GLsizei[] count, GLenum type, IntPtr indices, GLsizei primcount)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiDrawElements(GLenum mode, GLsizei[] count, GLenum type, IntPtr indices, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawElements(mode, h0.AddrOfPinnedObject(), type, indices, primcount);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiDrawElements(GLenum mode, GLsizei[] count, GLenum type, object indices, GLsizei primcount)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiDrawElements(GLenum mode, GLsizei[] count, GLenum type, object indices, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawElements(mode, h0.AddrOfPinnedObject(), type, h1.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region MultiDrawElements(GLenum mode, GLsizei[] count, GLenum type, IntPtr[] indices, GLsizei primcount)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiDrawElements(GLenum mode, GLsizei[] count, GLenum type, IntPtr[] indices, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawElements(mode, h0.AddrOfPinnedObject(), type, h1.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region PointParameterf(GLenum pname, GLfloat param)

        /// <summary>
        /// 
        /// </summary>
        public static         void glPointParameterf(GLenum pname, GLfloat param)
        {
            Delegates.glPointParameterf(pname, param);
        }

        #endregion

        #region PointParameterfv(GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glPointParameterfv(GLenum pname, IntPtr parameters)
        {
            Delegates.glPointParameterfv(pname, parameters);
        }

        #endregion

        #region PointParameterfv(GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glPointParameterfv(GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glPointParameterfv(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region PointParameterfv(GLenum pname, GLfloat[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glPointParameterfv(GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glPointParameterfv(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region PointParameteri(GLenum pname, GLint param)

        /// <summary>
        /// 
        /// </summary>
        public static         void glPointParameteri(GLenum pname, GLint param)
        {
            Delegates.glPointParameteri(pname, param);
        }

        #endregion

        #region PointParameteriv(GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glPointParameteriv(GLenum pname, IntPtr parameters)
        {
            Delegates.glPointParameteriv(pname, parameters);
        }

        #endregion

        #region PointParameteriv(GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glPointParameteriv(GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glPointParameteriv(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region PointParameteriv(GLenum pname, GLint[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glPointParameteriv(GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glPointParameteriv(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SecondaryColor3b(GLbyte red, GLbyte green, GLbyte blue)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSecondaryColor3b(GLbyte red, GLbyte green, GLbyte blue)
        {
            Delegates.glSecondaryColor3b(red, green, blue);
        }

        #endregion

        #region SecondaryColor3bv(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSecondaryColor3bv(IntPtr v)
        {
            Delegates.glSecondaryColor3bv(v);
        }

        #endregion

        #region SecondaryColor3bv(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSecondaryColor3bv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glSecondaryColor3bv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SecondaryColor3bv(GLbyte[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSecondaryColor3bv(GLbyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glSecondaryColor3bv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SecondaryColor3d(GLdouble red, GLdouble green, GLdouble blue)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSecondaryColor3d(GLdouble red, GLdouble green, GLdouble blue)
        {
            Delegates.glSecondaryColor3d(red, green, blue);
        }

        #endregion

        #region SecondaryColor3dv(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSecondaryColor3dv(IntPtr v)
        {
            Delegates.glSecondaryColor3dv(v);
        }

        #endregion

        #region SecondaryColor3dv(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSecondaryColor3dv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glSecondaryColor3dv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SecondaryColor3dv(GLdouble[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSecondaryColor3dv(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glSecondaryColor3dv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SecondaryColor3f(GLfloat red, GLfloat green, GLfloat blue)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSecondaryColor3f(GLfloat red, GLfloat green, GLfloat blue)
        {
            Delegates.glSecondaryColor3f(red, green, blue);
        }

        #endregion

        #region SecondaryColor3fv(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSecondaryColor3fv(IntPtr v)
        {
            Delegates.glSecondaryColor3fv(v);
        }

        #endregion

        #region SecondaryColor3fv(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSecondaryColor3fv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glSecondaryColor3fv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SecondaryColor3fv(GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSecondaryColor3fv(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glSecondaryColor3fv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SecondaryColor3i(GLint red, GLint green, GLint blue)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSecondaryColor3i(GLint red, GLint green, GLint blue)
        {
            Delegates.glSecondaryColor3i(red, green, blue);
        }

        #endregion

        #region SecondaryColor3iv(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSecondaryColor3iv(IntPtr v)
        {
            Delegates.glSecondaryColor3iv(v);
        }

        #endregion

        #region SecondaryColor3iv(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSecondaryColor3iv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glSecondaryColor3iv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SecondaryColor3iv(GLint[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSecondaryColor3iv(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glSecondaryColor3iv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SecondaryColor3s(GLshort red, GLshort green, GLshort blue)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSecondaryColor3s(GLshort red, GLshort green, GLshort blue)
        {
            Delegates.glSecondaryColor3s(red, green, blue);
        }

        #endregion

        #region SecondaryColor3sv(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSecondaryColor3sv(IntPtr v)
        {
            Delegates.glSecondaryColor3sv(v);
        }

        #endregion

        #region SecondaryColor3sv(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSecondaryColor3sv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glSecondaryColor3sv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SecondaryColor3sv(GLshort[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSecondaryColor3sv(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glSecondaryColor3sv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SecondaryColor3ub(GLubyte red, GLubyte green, GLubyte blue)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSecondaryColor3ub(GLubyte red, GLubyte green, GLubyte blue)
        {
            Delegates.glSecondaryColor3ub(red, green, blue);
        }

        #endregion

        #region SecondaryColor3ubv(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSecondaryColor3ubv(IntPtr v)
        {
            Delegates.glSecondaryColor3ubv(v);
        }

        #endregion

        #region SecondaryColor3ubv(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSecondaryColor3ubv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glSecondaryColor3ubv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SecondaryColor3ubv(GLubyte[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSecondaryColor3ubv(GLubyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glSecondaryColor3ubv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SecondaryColor3ui(GLuint red, GLuint green, GLuint blue)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSecondaryColor3ui(GLuint red, GLuint green, GLuint blue)
        {
            Delegates.glSecondaryColor3ui(red, green, blue);
        }

        #endregion

        #region SecondaryColor3uiv(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSecondaryColor3uiv(IntPtr v)
        {
            Delegates.glSecondaryColor3uiv(v);
        }

        #endregion

        #region SecondaryColor3uiv(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSecondaryColor3uiv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glSecondaryColor3uiv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SecondaryColor3uiv(GLuint[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSecondaryColor3uiv(GLuint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glSecondaryColor3uiv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SecondaryColor3us(GLushort red, GLushort green, GLushort blue)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSecondaryColor3us(GLushort red, GLushort green, GLushort blue)
        {
            Delegates.glSecondaryColor3us(red, green, blue);
        }

        #endregion

        #region SecondaryColor3usv(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSecondaryColor3usv(IntPtr v)
        {
            Delegates.glSecondaryColor3usv(v);
        }

        #endregion

        #region SecondaryColor3usv(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSecondaryColor3usv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glSecondaryColor3usv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SecondaryColor3usv(GLushort[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSecondaryColor3usv(GLushort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glSecondaryColor3usv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SecondaryColorPointer(GLint size, GLenum type, GLsizei stride, IntPtr pointer)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSecondaryColorPointer(GLint size, GLenum type, GLsizei stride, IntPtr pointer)
        {
            Delegates.glSecondaryColorPointer(size, type, stride, pointer);
        }

        #endregion

        #region SecondaryColorPointer(GLint size, GLenum type, GLsizei stride, object pointer)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSecondaryColorPointer(GLint size, GLenum type, GLsizei stride, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glSecondaryColorPointer(size, type, stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos2d(GLdouble x, GLdouble y)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos2d(GLdouble x, GLdouble y)
        {
            Delegates.glWindowPos2d(x, y);
        }

        #endregion

        #region WindowPos2dv(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos2dv(IntPtr v)
        {
            Delegates.glWindowPos2dv(v);
        }

        #endregion

        #region WindowPos2dv(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos2dv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos2dv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos2dv(GLdouble[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos2dv(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos2dv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos2f(GLfloat x, GLfloat y)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos2f(GLfloat x, GLfloat y)
        {
            Delegates.glWindowPos2f(x, y);
        }

        #endregion

        #region WindowPos2fv(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos2fv(IntPtr v)
        {
            Delegates.glWindowPos2fv(v);
        }

        #endregion

        #region WindowPos2fv(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos2fv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos2fv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos2fv(GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos2fv(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos2fv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos2i(GLint x, GLint y)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos2i(GLint x, GLint y)
        {
            Delegates.glWindowPos2i(x, y);
        }

        #endregion

        #region WindowPos2iv(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos2iv(IntPtr v)
        {
            Delegates.glWindowPos2iv(v);
        }

        #endregion

        #region WindowPos2iv(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos2iv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos2iv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos2iv(GLint[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos2iv(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos2iv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos2s(GLshort x, GLshort y)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos2s(GLshort x, GLshort y)
        {
            Delegates.glWindowPos2s(x, y);
        }

        #endregion

        #region WindowPos2sv(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos2sv(IntPtr v)
        {
            Delegates.glWindowPos2sv(v);
        }

        #endregion

        #region WindowPos2sv(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos2sv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos2sv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos2sv(GLshort[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos2sv(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos2sv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos3d(GLdouble x, GLdouble y, GLdouble z)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos3d(GLdouble x, GLdouble y, GLdouble z)
        {
            Delegates.glWindowPos3d(x, y, z);
        }

        #endregion

        #region WindowPos3dv(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos3dv(IntPtr v)
        {
            Delegates.glWindowPos3dv(v);
        }

        #endregion

        #region WindowPos3dv(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos3dv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos3dv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos3dv(GLdouble[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos3dv(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos3dv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos3f(GLfloat x, GLfloat y, GLfloat z)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos3f(GLfloat x, GLfloat y, GLfloat z)
        {
            Delegates.glWindowPos3f(x, y, z);
        }

        #endregion

        #region WindowPos3fv(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos3fv(IntPtr v)
        {
            Delegates.glWindowPos3fv(v);
        }

        #endregion

        #region WindowPos3fv(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos3fv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos3fv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos3fv(GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos3fv(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos3fv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos3i(GLint x, GLint y, GLint z)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos3i(GLint x, GLint y, GLint z)
        {
            Delegates.glWindowPos3i(x, y, z);
        }

        #endregion

        #region WindowPos3iv(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos3iv(IntPtr v)
        {
            Delegates.glWindowPos3iv(v);
        }

        #endregion

        #region WindowPos3iv(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos3iv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos3iv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos3iv(GLint[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos3iv(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos3iv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos3s(GLshort x, GLshort y, GLshort z)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos3s(GLshort x, GLshort y, GLshort z)
        {
            Delegates.glWindowPos3s(x, y, z);
        }

        #endregion

        #region WindowPos3sv(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos3sv(IntPtr v)
        {
            Delegates.glWindowPos3sv(v);
        }

        #endregion

        #region WindowPos3sv(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos3sv(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos3sv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos3sv(GLshort[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos3sv(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos3sv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GenQueries(GLsizei n, IntPtr ids)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGenQueries(GLsizei n, IntPtr ids)
        {
            Delegates.glGenQueries(n, ids);
        }

        #endregion

        #region GenQueries(GLsizei n, object ids)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGenQueries(GLsizei n, object ids)
        {
            GCHandle h0 = GCHandle.Alloc(ids, GCHandleType.Pinned);
            try
            {
                Delegates.glGenQueries(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GenQueries(GLsizei n, GLuint[] ids)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGenQueries(GLsizei n, GLuint[] ids)
        {
            GCHandle h0 = GCHandle.Alloc(ids, GCHandleType.Pinned);
            try
            {
                Delegates.glGenQueries(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region DeleteQueries(GLsizei n, IntPtr ids)

        /// <summary>
        /// 
        /// </summary>
        public static         void glDeleteQueries(GLsizei n, IntPtr ids)
        {
            Delegates.glDeleteQueries(n, ids);
        }

        #endregion

        #region DeleteQueries(GLsizei n, object ids)

        /// <summary>
        /// 
        /// </summary>
        public static         void glDeleteQueries(GLsizei n, object ids)
        {
            GCHandle h0 = GCHandle.Alloc(ids, GCHandleType.Pinned);
            try
            {
                Delegates.glDeleteQueries(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region DeleteQueries(GLsizei n, GLuint[] ids)

        /// <summary>
        /// 
        /// </summary>
        public static         void glDeleteQueries(GLsizei n, GLuint[] ids)
        {
            GCHandle h0 = GCHandle.Alloc(ids, GCHandleType.Pinned);
            try
            {
                Delegates.glDeleteQueries(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region IsQuery(GLuint id)

        /// <summary>
        /// 
        /// </summary>
        public static         GLboolean glIsQuery(GLuint id)
        {
            return Delegates.glIsQuery(id);
        }

        #endregion

        #region BeginQuery(GLenum target, GLuint id)

        /// <summary>
        /// 
        /// </summary>
        public static         void glBeginQuery(GLenum target, GLuint id)
        {
            Delegates.glBeginQuery(target, id);
        }

        #endregion

        #region EndQuery(GLenum target)

        /// <summary>
        /// 
        /// </summary>
        public static         void glEndQuery(GLenum target)
        {
            Delegates.glEndQuery(target);
        }

        #endregion

        #region GetQueryiv(GLenum target, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetQueryiv(GLenum target, GLenum pname, IntPtr parameters)
        {
            Delegates.glGetQueryiv(target, pname, parameters);
        }

        #endregion

        #region GetQueryiv(GLenum target, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetQueryiv(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetQueryiv(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetQueryiv(GLenum target, GLenum pname, GLint[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetQueryiv(GLenum target, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetQueryiv(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetQueryObjectiv(GLuint id, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetQueryObjectiv(GLuint id, GLenum pname, IntPtr parameters)
        {
            Delegates.glGetQueryObjectiv(id, pname, parameters);
        }

        #endregion

        #region GetQueryObjectiv(GLuint id, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetQueryObjectiv(GLuint id, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetQueryObjectiv(id, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetQueryObjectiv(GLuint id, GLenum pname, GLint[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetQueryObjectiv(GLuint id, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetQueryObjectiv(id, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetQueryObjectuiv(GLuint id, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetQueryObjectuiv(GLuint id, GLenum pname, IntPtr parameters)
        {
            Delegates.glGetQueryObjectuiv(id, pname, parameters);
        }

        #endregion

        #region GetQueryObjectuiv(GLuint id, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetQueryObjectuiv(GLuint id, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetQueryObjectuiv(id, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetQueryObjectuiv(GLuint id, GLenum pname, GLuint[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetQueryObjectuiv(GLuint id, GLenum pname, GLuint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetQueryObjectuiv(id, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region BindBuffer(GLenum target, GLuint buffer)

        /// <summary>
        /// 
        /// </summary>
        public static         void glBindBuffer(GLenum target, GLuint buffer)
        {
            Delegates.glBindBuffer(target, buffer);
        }

        #endregion

        #region DeleteBuffers(GLsizei n, IntPtr buffers)

        /// <summary>
        /// 
        /// </summary>
        public static         void glDeleteBuffers(GLsizei n, IntPtr buffers)
        {
            Delegates.glDeleteBuffers(n, buffers);
        }

        #endregion

        #region DeleteBuffers(GLsizei n, object buffers)

        /// <summary>
        /// 
        /// </summary>
        public static         void glDeleteBuffers(GLsizei n, object buffers)
        {
            GCHandle h0 = GCHandle.Alloc(buffers, GCHandleType.Pinned);
            try
            {
                Delegates.glDeleteBuffers(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region DeleteBuffers(GLsizei n, GLuint[] buffers)

        /// <summary>
        /// 
        /// </summary>
        public static         void glDeleteBuffers(GLsizei n, GLuint[] buffers)
        {
            GCHandle h0 = GCHandle.Alloc(buffers, GCHandleType.Pinned);
            try
            {
                Delegates.glDeleteBuffers(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GenBuffers(GLsizei n, IntPtr buffers)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGenBuffers(GLsizei n, IntPtr buffers)
        {
            Delegates.glGenBuffers(n, buffers);
        }

        #endregion

        #region GenBuffers(GLsizei n, object buffers)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGenBuffers(GLsizei n, object buffers)
        {
            GCHandle h0 = GCHandle.Alloc(buffers, GCHandleType.Pinned);
            try
            {
                Delegates.glGenBuffers(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GenBuffers(GLsizei n, GLuint[] buffers)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGenBuffers(GLsizei n, GLuint[] buffers)
        {
            GCHandle h0 = GCHandle.Alloc(buffers, GCHandleType.Pinned);
            try
            {
                Delegates.glGenBuffers(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region IsBuffer(GLuint buffer)

        /// <summary>
        /// 
        /// </summary>
        public static         GLboolean glIsBuffer(GLuint buffer)
        {
            return Delegates.glIsBuffer(buffer);
        }

        #endregion

        #region BufferData(GLenum target, GLsizeiptr size, IntPtr data, GLenum usage)

        /// <summary>
        /// 
        /// </summary>
        public static         void glBufferData(GLenum target, GLsizeiptr size, IntPtr data, GLenum usage)
        {
            Delegates.glBufferData(target, size, data, usage);
        }

        #endregion

        #region BufferData(GLenum target, GLsizeiptr size, object data, GLenum usage)

        /// <summary>
        /// 
        /// </summary>
        public static         void glBufferData(GLenum target, GLsizeiptr size, object data, GLenum usage)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glBufferData(target, size, h0.AddrOfPinnedObject(), usage);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region BufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, IntPtr data)

        /// <summary>
        /// 
        /// </summary>
        public static         void glBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, IntPtr data)
        {
            Delegates.glBufferSubData(target, offset, size, data);
        }

        #endregion

        #region BufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, object data)

        /// <summary>
        /// 
        /// </summary>
        public static         void glBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glBufferSubData(target, offset, size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, IntPtr data)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, IntPtr data)
        {
            Delegates.glGetBufferSubData(target, offset, size, data);
        }

        #endregion

        #region GetBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, object data)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glGetBufferSubData(target, offset, size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MapBuffer(GLenum target, GLenum access)

        /// <summary>
        /// 
        /// </summary>
        public static         IntPtr glMapBuffer(GLenum target, GLenum access)
        {
            return Delegates.glMapBuffer(target, access);
        }

        #endregion

        #region UnmapBuffer(GLenum target)

        /// <summary>
        /// 
        /// </summary>
        public static         GLboolean glUnmapBuffer(GLenum target)
        {
            return Delegates.glUnmapBuffer(target);
        }

        #endregion

        #region GetBufferParameteriv(GLenum target, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetBufferParameteriv(GLenum target, GLenum pname, IntPtr parameters)
        {
            Delegates.glGetBufferParameteriv(target, pname, parameters);
        }

        #endregion

        #region GetBufferParameteriv(GLenum target, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetBufferParameteriv(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetBufferParameteriv(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetBufferParameteriv(GLenum target, GLenum pname, GLint[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetBufferParameteriv(GLenum target, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetBufferParameteriv(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetBufferPointerv(GLenum target, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetBufferPointerv(GLenum target, GLenum pname, IntPtr parameters)
        {
            Delegates.glGetBufferPointerv(target, pname, parameters);
        }

        #endregion

        #region GetBufferPointerv(GLenum target, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetBufferPointerv(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetBufferPointerv(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetBufferPointerv(GLenum target, GLenum pname, IntPtr[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetBufferPointerv(GLenum target, GLenum pname, IntPtr[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetBufferPointerv(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region BlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha)

        /// <summary>
        /// 
        /// </summary>
        public static         void glBlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha)
        {
            Delegates.glBlendEquationSeparate(modeRGB, modeAlpha);
        }

        #endregion

        #region DrawBuffers(GLsizei n, IntPtr bufs)

        /// <summary>
        /// 
        /// </summary>
        public static         void glDrawBuffers(GLsizei n, IntPtr bufs)
        {
            Delegates.glDrawBuffers(n, bufs);
        }

        #endregion

        #region DrawBuffers(GLsizei n, object bufs)

        /// <summary>
        /// 
        /// </summary>
        public static         void glDrawBuffers(GLsizei n, object bufs)
        {
            GCHandle h0 = GCHandle.Alloc(bufs, GCHandleType.Pinned);
            try
            {
                Delegates.glDrawBuffers(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region DrawBuffers(GLsizei n, GLenum[] bufs)

        /// <summary>
        /// 
        /// </summary>
        public static         void glDrawBuffers(GLsizei n, GLenum[] bufs)
        {
            GCHandle h0 = GCHandle.Alloc(bufs, GCHandleType.Pinned);
            try
            {
                Delegates.glDrawBuffers(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region StencilOpSeparate(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass)

        /// <summary>
        /// 
        /// </summary>
        public static         void glStencilOpSeparate(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass)
        {
            Delegates.glStencilOpSeparate(face, sfail, dpfail, dppass);
        }

        #endregion

        #region StencilFuncSeparate(GLenum frontfunc, GLenum backfunc, GLint reference, GLuint mask)

        /// <summary>
        /// 
        /// </summary>
        public static         void glStencilFuncSeparate(GLenum frontfunc, GLenum backfunc, GLint reference, GLuint mask)
        {
            Delegates.glStencilFuncSeparate(frontfunc, backfunc, reference, mask);
        }

        #endregion

        #region StencilMaskSeparate(GLenum face, GLuint mask)

        /// <summary>
        /// 
        /// </summary>
        public static         void glStencilMaskSeparate(GLenum face, GLuint mask)
        {
            Delegates.glStencilMaskSeparate(face, mask);
        }

        #endregion

        #region AttachShader(GLuint program, GLuint shader)

        /// <summary>
        /// 
        /// </summary>
        public static         void glAttachShader(GLuint program, GLuint shader)
        {
            Delegates.glAttachShader(program, shader);
        }

        #endregion

        #region BindAttribLocation(GLuint program, GLuint index, string name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glBindAttribLocation(GLuint program, GLuint index, string name)
        {
            Delegates.glBindAttribLocation(program, index, name);
        }

        #endregion

        #region CompileShader(GLuint shader)

        /// <summary>
        /// 
        /// </summary>
        public static         void glCompileShader(GLuint shader)
        {
            Delegates.glCompileShader(shader);
        }

        #endregion

        #region CreateProgram()

        /// <summary>
        /// 
        /// </summary>
        public static         GLuint glCreateProgram()
        {
            return Delegates.glCreateProgram();
        }

        #endregion

        #region CreateShader(GLenum type)

        /// <summary>
        /// 
        /// </summary>
        public static         GLuint glCreateShader(GLenum type)
        {
            return Delegates.glCreateShader(type);
        }

        #endregion

        #region DeleteProgram(GLuint program)

        /// <summary>
        /// 
        /// </summary>
        public static         void glDeleteProgram(GLuint program)
        {
            Delegates.glDeleteProgram(program);
        }

        #endregion

        #region DeleteShader(GLuint shader)

        /// <summary>
        /// 
        /// </summary>
        public static         void glDeleteShader(GLuint shader)
        {
            Delegates.glDeleteShader(shader);
        }

        #endregion

        #region DetachShader(GLuint program, GLuint shader)

        /// <summary>
        /// 
        /// </summary>
        public static         void glDetachShader(GLuint program, GLuint shader)
        {
            Delegates.glDetachShader(program, shader);
        }

        #endregion

        #region DisableVertexAttribArray(GLuint index)

        /// <summary>
        /// 
        /// </summary>
        public static         void glDisableVertexAttribArray(GLuint index)
        {
            Delegates.glDisableVertexAttribArray(index);
        }

        #endregion

        #region EnableVertexAttribArray(GLuint index)

        /// <summary>
        /// 
        /// </summary>
        public static         void glEnableVertexAttribArray(GLuint index)
        {
            Delegates.glEnableVertexAttribArray(index);
        }

        #endregion

        #region GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, IntPtr size, IntPtr type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, IntPtr size, IntPtr type, StringBuilder name)
        {
            Delegates.glGetActiveAttrib(program, index, bufSize, length, size, type, name);
        }

        #endregion

        #region GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, IntPtr size, object type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, IntPtr size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttrib(program, index, bufSize, length, size, h0.AddrOfPinnedObject(), name);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, IntPtr size, GLenum[] type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, IntPtr size, GLenum[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttrib(program, index, bufSize, length, size, h0.AddrOfPinnedObject(), name);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, object size, IntPtr type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, object size, IntPtr type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(size, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttrib(program, index, bufSize, length, h0.AddrOfPinnedObject(), type, name);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, object size, object type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, object size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttrib(program, index, bufSize, length, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, object size, GLenum[] type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, object size, GLenum[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttrib(program, index, bufSize, length, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, GLint[] size, IntPtr type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, GLint[] size, IntPtr type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(size, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttrib(program, index, bufSize, length, h0.AddrOfPinnedObject(), type, name);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, GLint[] size, object type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, GLint[] size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttrib(program, index, bufSize, length, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, GLint[] size, GLenum[] type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, GLint[] size, GLenum[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttrib(program, index, bufSize, length, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, object length, IntPtr size, IntPtr type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, object length, IntPtr size, IntPtr type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttrib(program, index, bufSize, h0.AddrOfPinnedObject(), size, type, name);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, object length, IntPtr size, object type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, object length, IntPtr size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttrib(program, index, bufSize, h0.AddrOfPinnedObject(), size, h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, object length, IntPtr size, GLenum[] type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, object length, IntPtr size, GLenum[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttrib(program, index, bufSize, h0.AddrOfPinnedObject(), size, h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, object length, object size, IntPtr type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, object length, object size, IntPtr type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttrib(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), type, name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, object length, object size, object type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, object length, object size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttrib(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, object length, object size, GLenum[] type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, object length, object size, GLenum[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttrib(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, object length, GLint[] size, IntPtr type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, object length, GLint[] size, IntPtr type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttrib(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), type, name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, object length, GLint[] size, object type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, object length, GLint[] size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttrib(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, object length, GLint[] size, GLenum[] type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, object length, GLint[] size, GLenum[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttrib(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, IntPtr size, IntPtr type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, IntPtr size, IntPtr type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttrib(program, index, bufSize, h0.AddrOfPinnedObject(), size, type, name);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, IntPtr size, object type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, IntPtr size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttrib(program, index, bufSize, h0.AddrOfPinnedObject(), size, h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, IntPtr size, GLenum[] type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, IntPtr size, GLenum[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttrib(program, index, bufSize, h0.AddrOfPinnedObject(), size, h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, object size, IntPtr type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, object size, IntPtr type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttrib(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), type, name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, object size, object type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, object size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttrib(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, object size, GLenum[] type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, object size, GLenum[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttrib(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, GLint[] size, IntPtr type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, GLint[] size, IntPtr type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttrib(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), type, name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, GLint[] size, object type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, GLint[] size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttrib(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, GLint[] size, GLenum[] type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, GLint[] size, GLenum[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttrib(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, IntPtr size, IntPtr type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, IntPtr size, IntPtr type, StringBuilder name)
        {
            Delegates.glGetActiveUniform(program, index, bufSize, length, size, type, name);
        }

        #endregion

        #region GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, IntPtr size, object type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, IntPtr size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniform(program, index, bufSize, length, size, h0.AddrOfPinnedObject(), name);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, IntPtr size, GLenum[] type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, IntPtr size, GLenum[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniform(program, index, bufSize, length, size, h0.AddrOfPinnedObject(), name);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, object size, IntPtr type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, object size, IntPtr type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(size, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniform(program, index, bufSize, length, h0.AddrOfPinnedObject(), type, name);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, object size, object type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, object size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniform(program, index, bufSize, length, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, object size, GLenum[] type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, object size, GLenum[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniform(program, index, bufSize, length, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, GLint[] size, IntPtr type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, GLint[] size, IntPtr type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(size, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniform(program, index, bufSize, length, h0.AddrOfPinnedObject(), type, name);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, GLint[] size, object type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, GLint[] size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniform(program, index, bufSize, length, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, GLint[] size, GLenum[] type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, IntPtr length, GLint[] size, GLenum[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniform(program, index, bufSize, length, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, object length, IntPtr size, IntPtr type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, object length, IntPtr size, IntPtr type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniform(program, index, bufSize, h0.AddrOfPinnedObject(), size, type, name);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, object length, IntPtr size, object type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, object length, IntPtr size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniform(program, index, bufSize, h0.AddrOfPinnedObject(), size, h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, object length, IntPtr size, GLenum[] type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, object length, IntPtr size, GLenum[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniform(program, index, bufSize, h0.AddrOfPinnedObject(), size, h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, object length, object size, IntPtr type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, object length, object size, IntPtr type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniform(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), type, name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, object length, object size, object type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, object length, object size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniform(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, object length, object size, GLenum[] type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, object length, object size, GLenum[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniform(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, object length, GLint[] size, IntPtr type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, object length, GLint[] size, IntPtr type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniform(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), type, name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, object length, GLint[] size, object type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, object length, GLint[] size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniform(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, object length, GLint[] size, GLenum[] type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, object length, GLint[] size, GLenum[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniform(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, IntPtr size, IntPtr type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, IntPtr size, IntPtr type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniform(program, index, bufSize, h0.AddrOfPinnedObject(), size, type, name);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, IntPtr size, object type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, IntPtr size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniform(program, index, bufSize, h0.AddrOfPinnedObject(), size, h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, IntPtr size, GLenum[] type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, IntPtr size, GLenum[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniform(program, index, bufSize, h0.AddrOfPinnedObject(), size, h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, object size, IntPtr type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, object size, IntPtr type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniform(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), type, name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, object size, object type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, object size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniform(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, object size, GLenum[] type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, object size, GLenum[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniform(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, GLint[] size, IntPtr type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, GLint[] size, IntPtr type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniform(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), type, name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, GLint[] size, object type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, GLint[] size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniform(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, GLint[] size, GLenum[] type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, GLint[] size, GLenum[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniform(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetAttachedShaders(GLuint program, GLsizei maxCount, IntPtr count, IntPtr obj)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetAttachedShaders(GLuint program, GLsizei maxCount, IntPtr count, IntPtr obj)
        {
            Delegates.glGetAttachedShaders(program, maxCount, count, obj);
        }

        #endregion

        #region GetAttachedShaders(GLuint program, GLsizei maxCount, IntPtr count, object obj)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetAttachedShaders(GLuint program, GLsizei maxCount, IntPtr count, object obj)
        {
            GCHandle h0 = GCHandle.Alloc(obj, GCHandleType.Pinned);
            try
            {
                Delegates.glGetAttachedShaders(program, maxCount, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetAttachedShaders(GLuint program, GLsizei maxCount, IntPtr count, GLuint[] obj)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetAttachedShaders(GLuint program, GLsizei maxCount, IntPtr count, GLuint[] obj)
        {
            GCHandle h0 = GCHandle.Alloc(obj, GCHandleType.Pinned);
            try
            {
                Delegates.glGetAttachedShaders(program, maxCount, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetAttachedShaders(GLuint program, GLsizei maxCount, object count, IntPtr obj)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetAttachedShaders(GLuint program, GLsizei maxCount, object count, IntPtr obj)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glGetAttachedShaders(program, maxCount, h0.AddrOfPinnedObject(), obj);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetAttachedShaders(GLuint program, GLsizei maxCount, object count, object obj)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetAttachedShaders(GLuint program, GLsizei maxCount, object count, object obj)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(obj, GCHandleType.Pinned);
            try
            {
                Delegates.glGetAttachedShaders(program, maxCount, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetAttachedShaders(GLuint program, GLsizei maxCount, object count, GLuint[] obj)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetAttachedShaders(GLuint program, GLsizei maxCount, object count, GLuint[] obj)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(obj, GCHandleType.Pinned);
            try
            {
                Delegates.glGetAttachedShaders(program, maxCount, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei[] count, IntPtr obj)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei[] count, IntPtr obj)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glGetAttachedShaders(program, maxCount, h0.AddrOfPinnedObject(), obj);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei[] count, object obj)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei[] count, object obj)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(obj, GCHandleType.Pinned);
            try
            {
                Delegates.glGetAttachedShaders(program, maxCount, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei[] count, GLuint[] obj)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei[] count, GLuint[] obj)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(obj, GCHandleType.Pinned);
            try
            {
                Delegates.glGetAttachedShaders(program, maxCount, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetAttribLocation(GLuint program, string name)

        /// <summary>
        /// 
        /// </summary>
        public static         GLint glGetAttribLocation(GLuint program, string name)
        {
            return Delegates.glGetAttribLocation(program, name);
        }

        #endregion

        #region GetProgramiv(GLuint program, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetProgramiv(GLuint program, GLenum pname, IntPtr parameters)
        {
            Delegates.glGetProgramiv(program, pname, parameters);
        }

        #endregion

        #region GetProgramiv(GLuint program, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetProgramiv(GLuint program, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramiv(program, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetProgramiv(GLuint program, GLenum pname, GLint[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetProgramiv(GLuint program, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramiv(program, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetProgramInfoLog(GLuint program, GLsizei bufSize, IntPtr length, StringBuilder infoLog)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetProgramInfoLog(GLuint program, GLsizei bufSize, IntPtr length, StringBuilder infoLog)
        {
            Delegates.glGetProgramInfoLog(program, bufSize, length, infoLog);
        }

        #endregion

        #region GetProgramInfoLog(GLuint program, GLsizei bufSize, object length, StringBuilder infoLog)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetProgramInfoLog(GLuint program, GLsizei bufSize, object length, StringBuilder infoLog)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramInfoLog(program, bufSize, h0.AddrOfPinnedObject(), infoLog);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetProgramInfoLog(GLuint program, GLsizei bufSize, GLsizei[] length, StringBuilder infoLog)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetProgramInfoLog(GLuint program, GLsizei bufSize, GLsizei[] length, StringBuilder infoLog)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramInfoLog(program, bufSize, h0.AddrOfPinnedObject(), infoLog);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetShaderiv(GLuint shader, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetShaderiv(GLuint shader, GLenum pname, IntPtr parameters)
        {
            Delegates.glGetShaderiv(shader, pname, parameters);
        }

        #endregion

        #region GetShaderiv(GLuint shader, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetShaderiv(GLuint shader, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetShaderiv(shader, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetShaderiv(GLuint shader, GLenum pname, GLint[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetShaderiv(GLuint shader, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetShaderiv(shader, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetShaderInfoLog(GLuint shader, GLsizei bufSize, IntPtr length, StringBuilder infoLog)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetShaderInfoLog(GLuint shader, GLsizei bufSize, IntPtr length, StringBuilder infoLog)
        {
            Delegates.glGetShaderInfoLog(shader, bufSize, length, infoLog);
        }

        #endregion

        #region GetShaderInfoLog(GLuint shader, GLsizei bufSize, object length, StringBuilder infoLog)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetShaderInfoLog(GLuint shader, GLsizei bufSize, object length, StringBuilder infoLog)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            try
            {
                Delegates.glGetShaderInfoLog(shader, bufSize, h0.AddrOfPinnedObject(), infoLog);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetShaderInfoLog(GLuint shader, GLsizei bufSize, GLsizei[] length, StringBuilder infoLog)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetShaderInfoLog(GLuint shader, GLsizei bufSize, GLsizei[] length, StringBuilder infoLog)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            try
            {
                Delegates.glGetShaderInfoLog(shader, bufSize, h0.AddrOfPinnedObject(), infoLog);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetShaderSource(GLuint shader, GLsizei bufSize, IntPtr length, StringBuilder source)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetShaderSource(GLuint shader, GLsizei bufSize, IntPtr length, StringBuilder source)
        {
            Delegates.glGetShaderSource(shader, bufSize, length, source);
        }

        #endregion

        #region GetShaderSource(GLuint shader, GLsizei bufSize, object length, StringBuilder source)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetShaderSource(GLuint shader, GLsizei bufSize, object length, StringBuilder source)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            try
            {
                Delegates.glGetShaderSource(shader, bufSize, h0.AddrOfPinnedObject(), source);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetShaderSource(GLuint shader, GLsizei bufSize, GLsizei[] length, StringBuilder source)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetShaderSource(GLuint shader, GLsizei bufSize, GLsizei[] length, StringBuilder source)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            try
            {
                Delegates.glGetShaderSource(shader, bufSize, h0.AddrOfPinnedObject(), source);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetUniformLocation(GLuint program, string name)

        /// <summary>
        /// 
        /// </summary>
        public static         GLint glGetUniformLocation(GLuint program, string name)
        {
            return Delegates.glGetUniformLocation(program, name);
        }

        #endregion

        #region GetUniformfv(GLuint program, GLint location, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetUniformfv(GLuint program, GLint location, IntPtr parameters)
        {
            Delegates.glGetUniformfv(program, location, parameters);
        }

        #endregion

        #region GetUniformfv(GLuint program, GLint location, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetUniformfv(GLuint program, GLint location, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetUniformfv(program, location, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetUniformfv(GLuint program, GLint location, GLfloat[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetUniformfv(GLuint program, GLint location, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetUniformfv(program, location, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetUniformiv(GLuint program, GLint location, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetUniformiv(GLuint program, GLint location, IntPtr parameters)
        {
            Delegates.glGetUniformiv(program, location, parameters);
        }

        #endregion

        #region GetUniformiv(GLuint program, GLint location, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetUniformiv(GLuint program, GLint location, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetUniformiv(program, location, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetUniformiv(GLuint program, GLint location, GLint[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetUniformiv(GLuint program, GLint location, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetUniformiv(program, location, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetVertexAttribdv(GLuint index, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetVertexAttribdv(GLuint index, GLenum pname, IntPtr parameters)
        {
            Delegates.glGetVertexAttribdv(index, pname, parameters);
        }

        #endregion

        #region GetVertexAttribdv(GLuint index, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetVertexAttribdv(GLuint index, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVertexAttribdv(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetVertexAttribdv(GLuint index, GLenum pname, GLdouble[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetVertexAttribdv(GLuint index, GLenum pname, GLdouble[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVertexAttribdv(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetVertexAttribfv(GLuint index, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetVertexAttribfv(GLuint index, GLenum pname, IntPtr parameters)
        {
            Delegates.glGetVertexAttribfv(index, pname, parameters);
        }

        #endregion

        #region GetVertexAttribfv(GLuint index, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetVertexAttribfv(GLuint index, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVertexAttribfv(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetVertexAttribfv(GLuint index, GLenum pname, GLfloat[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetVertexAttribfv(GLuint index, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVertexAttribfv(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetVertexAttribiv(GLuint index, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetVertexAttribiv(GLuint index, GLenum pname, IntPtr parameters)
        {
            Delegates.glGetVertexAttribiv(index, pname, parameters);
        }

        #endregion

        #region GetVertexAttribiv(GLuint index, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetVertexAttribiv(GLuint index, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVertexAttribiv(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetVertexAttribiv(GLuint index, GLenum pname, GLint[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetVertexAttribiv(GLuint index, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVertexAttribiv(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetVertexAttribPointerv(GLuint index, GLenum pname, IntPtr pointer)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetVertexAttribPointerv(GLuint index, GLenum pname, IntPtr pointer)
        {
            Delegates.glGetVertexAttribPointerv(index, pname, pointer);
        }

        #endregion

        #region GetVertexAttribPointerv(GLuint index, GLenum pname, object pointer)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetVertexAttribPointerv(GLuint index, GLenum pname, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVertexAttribPointerv(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetVertexAttribPointerv(GLuint index, GLenum pname, IntPtr[] pointer)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetVertexAttribPointerv(GLuint index, GLenum pname, IntPtr[] pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVertexAttribPointerv(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region IsProgram(GLuint program)

        /// <summary>
        /// 
        /// </summary>
        public static         GLboolean glIsProgram(GLuint program)
        {
            return Delegates.glIsProgram(program);
        }

        #endregion

        #region IsShader(GLuint shader)

        /// <summary>
        /// 
        /// </summary>
        public static         GLboolean glIsShader(GLuint shader)
        {
            return Delegates.glIsShader(shader);
        }

        #endregion

        #region LinkProgram(GLuint program)

        /// <summary>
        /// 
        /// </summary>
        public static         void glLinkProgram(GLuint program)
        {
            Delegates.glLinkProgram(program);
        }

        #endregion

        #region ShaderSource(GLuint shader, GLsizei count, string[] @string, IntPtr length)

        /// <summary>
        /// 
        /// </summary>
        public static         void glShaderSource(GLuint shader, GLsizei count, string[] @string, IntPtr length)
        {
            Delegates.glShaderSource(shader, count, @string, length);
        }

        #endregion

        #region ShaderSource(GLuint shader, GLsizei count, string[] @string, object length)

        /// <summary>
        /// 
        /// </summary>
        public static         void glShaderSource(GLuint shader, GLsizei count, string[] @string, object length)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            try
            {
                Delegates.glShaderSource(shader, count, @string, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ShaderSource(GLuint shader, GLsizei count, string[] @string, GLint[] length)

        /// <summary>
        /// 
        /// </summary>
        public static         void glShaderSource(GLuint shader, GLsizei count, string[] @string, GLint[] length)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            try
            {
                Delegates.glShaderSource(shader, count, @string, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region UseProgram(GLuint program)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUseProgram(GLuint program)
        {
            Delegates.glUseProgram(program);
        }

        #endregion

        #region Uniform1f(GLint location, GLfloat v0)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUniform1f(GLint location, GLfloat v0)
        {
            Delegates.glUniform1f(location, v0);
        }

        #endregion

        #region Uniform2f(GLint location, GLfloat v0, GLfloat v1)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUniform2f(GLint location, GLfloat v0, GLfloat v1)
        {
            Delegates.glUniform2f(location, v0, v1);
        }

        #endregion

        #region Uniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
        {
            Delegates.glUniform3f(location, v0, v1, v2);
        }

        #endregion

        #region Uniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
        {
            Delegates.glUniform4f(location, v0, v1, v2, v3);
        }

        #endregion

        #region Uniform1i(GLint location, GLint v0)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUniform1i(GLint location, GLint v0)
        {
            Delegates.glUniform1i(location, v0);
        }

        #endregion

        #region Uniform2i(GLint location, GLint v0, GLint v1)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUniform2i(GLint location, GLint v0, GLint v1)
        {
            Delegates.glUniform2i(location, v0, v1);
        }

        #endregion

        #region Uniform3i(GLint location, GLint v0, GLint v1, GLint v2)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUniform3i(GLint location, GLint v0, GLint v1, GLint v2)
        {
            Delegates.glUniform3i(location, v0, v1, v2);
        }

        #endregion

        #region Uniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
        {
            Delegates.glUniform4i(location, v0, v1, v2, v3);
        }

        #endregion

        #region Uniform1fv(GLint location, GLsizei count, IntPtr value)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUniform1fv(GLint location, GLsizei count, IntPtr value)
        {
            Delegates.glUniform1fv(location, count, value);
        }

        #endregion

        #region Uniform1fv(GLint location, GLsizei count, object value)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUniform1fv(GLint location, GLsizei count, object value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniform1fv(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Uniform1fv(GLint location, GLsizei count, GLfloat[] value)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUniform1fv(GLint location, GLsizei count, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniform1fv(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Uniform2fv(GLint location, GLsizei count, IntPtr value)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUniform2fv(GLint location, GLsizei count, IntPtr value)
        {
            Delegates.glUniform2fv(location, count, value);
        }

        #endregion

        #region Uniform2fv(GLint location, GLsizei count, object value)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUniform2fv(GLint location, GLsizei count, object value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniform2fv(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Uniform2fv(GLint location, GLsizei count, GLfloat[] value)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUniform2fv(GLint location, GLsizei count, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniform2fv(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Uniform3fv(GLint location, GLsizei count, IntPtr value)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUniform3fv(GLint location, GLsizei count, IntPtr value)
        {
            Delegates.glUniform3fv(location, count, value);
        }

        #endregion

        #region Uniform3fv(GLint location, GLsizei count, object value)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUniform3fv(GLint location, GLsizei count, object value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniform3fv(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Uniform3fv(GLint location, GLsizei count, GLfloat[] value)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUniform3fv(GLint location, GLsizei count, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniform3fv(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Uniform4fv(GLint location, GLsizei count, IntPtr value)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUniform4fv(GLint location, GLsizei count, IntPtr value)
        {
            Delegates.glUniform4fv(location, count, value);
        }

        #endregion

        #region Uniform4fv(GLint location, GLsizei count, object value)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUniform4fv(GLint location, GLsizei count, object value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniform4fv(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Uniform4fv(GLint location, GLsizei count, GLfloat[] value)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUniform4fv(GLint location, GLsizei count, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniform4fv(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Uniform1iv(GLint location, GLsizei count, IntPtr value)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUniform1iv(GLint location, GLsizei count, IntPtr value)
        {
            Delegates.glUniform1iv(location, count, value);
        }

        #endregion

        #region Uniform1iv(GLint location, GLsizei count, object value)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUniform1iv(GLint location, GLsizei count, object value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniform1iv(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Uniform1iv(GLint location, GLsizei count, GLint[] value)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUniform1iv(GLint location, GLsizei count, GLint[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniform1iv(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Uniform2iv(GLint location, GLsizei count, IntPtr value)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUniform2iv(GLint location, GLsizei count, IntPtr value)
        {
            Delegates.glUniform2iv(location, count, value);
        }

        #endregion

        #region Uniform2iv(GLint location, GLsizei count, object value)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUniform2iv(GLint location, GLsizei count, object value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniform2iv(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Uniform2iv(GLint location, GLsizei count, GLint[] value)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUniform2iv(GLint location, GLsizei count, GLint[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniform2iv(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Uniform3iv(GLint location, GLsizei count, IntPtr value)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUniform3iv(GLint location, GLsizei count, IntPtr value)
        {
            Delegates.glUniform3iv(location, count, value);
        }

        #endregion

        #region Uniform3iv(GLint location, GLsizei count, object value)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUniform3iv(GLint location, GLsizei count, object value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniform3iv(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Uniform3iv(GLint location, GLsizei count, GLint[] value)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUniform3iv(GLint location, GLsizei count, GLint[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniform3iv(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Uniform4iv(GLint location, GLsizei count, IntPtr value)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUniform4iv(GLint location, GLsizei count, IntPtr value)
        {
            Delegates.glUniform4iv(location, count, value);
        }

        #endregion

        #region Uniform4iv(GLint location, GLsizei count, object value)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUniform4iv(GLint location, GLsizei count, object value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniform4iv(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Uniform4iv(GLint location, GLsizei count, GLint[] value)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUniform4iv(GLint location, GLsizei count, GLint[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniform4iv(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region UniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, IntPtr value)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, IntPtr value)
        {
            Delegates.glUniformMatrix2fv(location, count, transpose, value);
        }

        #endregion

        #region UniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, object value)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, object value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniformMatrix2fv(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region UniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, GLfloat[] value)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniformMatrix2fv(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region UniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, IntPtr value)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, IntPtr value)
        {
            Delegates.glUniformMatrix3fv(location, count, transpose, value);
        }

        #endregion

        #region UniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, object value)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, object value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniformMatrix3fv(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region UniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, GLfloat[] value)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniformMatrix3fv(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region UniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, IntPtr value)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, IntPtr value)
        {
            Delegates.glUniformMatrix4fv(location, count, transpose, value);
        }

        #endregion

        #region UniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, object value)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, object value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniformMatrix4fv(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region UniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, GLfloat[] value)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniformMatrix4fv(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ValidateProgram(GLuint program)

        /// <summary>
        /// 
        /// </summary>
        public static         void glValidateProgram(GLuint program)
        {
            Delegates.glValidateProgram(program);
        }

        #endregion

        #region VertexAttrib1d(GLuint index, GLdouble x)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib1d(GLuint index, GLdouble x)
        {
            Delegates.glVertexAttrib1d(index, x);
        }

        #endregion

        #region VertexAttrib1dv(GLuint index, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib1dv(GLuint index, IntPtr v)
        {
            Delegates.glVertexAttrib1dv(index, v);
        }

        #endregion

        #region VertexAttrib1dv(GLuint index, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib1dv(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib1dv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib1dv(GLuint index, GLdouble[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib1dv(GLuint index, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib1dv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib1f(GLuint index, GLfloat x)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib1f(GLuint index, GLfloat x)
        {
            Delegates.glVertexAttrib1f(index, x);
        }

        #endregion

        #region VertexAttrib1fv(GLuint index, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib1fv(GLuint index, IntPtr v)
        {
            Delegates.glVertexAttrib1fv(index, v);
        }

        #endregion

        #region VertexAttrib1fv(GLuint index, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib1fv(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib1fv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib1fv(GLuint index, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib1fv(GLuint index, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib1fv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib1s(GLuint index, GLshort x)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib1s(GLuint index, GLshort x)
        {
            Delegates.glVertexAttrib1s(index, x);
        }

        #endregion

        #region VertexAttrib1sv(GLuint index, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib1sv(GLuint index, IntPtr v)
        {
            Delegates.glVertexAttrib1sv(index, v);
        }

        #endregion

        #region VertexAttrib1sv(GLuint index, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib1sv(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib1sv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib1sv(GLuint index, GLshort[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib1sv(GLuint index, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib1sv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib2d(GLuint index, GLdouble x, GLdouble y)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib2d(GLuint index, GLdouble x, GLdouble y)
        {
            Delegates.glVertexAttrib2d(index, x, y);
        }

        #endregion

        #region VertexAttrib2dv(GLuint index, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib2dv(GLuint index, IntPtr v)
        {
            Delegates.glVertexAttrib2dv(index, v);
        }

        #endregion

        #region VertexAttrib2dv(GLuint index, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib2dv(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib2dv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib2dv(GLuint index, GLdouble[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib2dv(GLuint index, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib2dv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib2f(GLuint index, GLfloat x, GLfloat y)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib2f(GLuint index, GLfloat x, GLfloat y)
        {
            Delegates.glVertexAttrib2f(index, x, y);
        }

        #endregion

        #region VertexAttrib2fv(GLuint index, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib2fv(GLuint index, IntPtr v)
        {
            Delegates.glVertexAttrib2fv(index, v);
        }

        #endregion

        #region VertexAttrib2fv(GLuint index, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib2fv(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib2fv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib2fv(GLuint index, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib2fv(GLuint index, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib2fv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib2s(GLuint index, GLshort x, GLshort y)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib2s(GLuint index, GLshort x, GLshort y)
        {
            Delegates.glVertexAttrib2s(index, x, y);
        }

        #endregion

        #region VertexAttrib2sv(GLuint index, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib2sv(GLuint index, IntPtr v)
        {
            Delegates.glVertexAttrib2sv(index, v);
        }

        #endregion

        #region VertexAttrib2sv(GLuint index, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib2sv(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib2sv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib2sv(GLuint index, GLshort[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib2sv(GLuint index, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib2sv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib3d(GLuint index, GLdouble x, GLdouble y, GLdouble z)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib3d(GLuint index, GLdouble x, GLdouble y, GLdouble z)
        {
            Delegates.glVertexAttrib3d(index, x, y, z);
        }

        #endregion

        #region VertexAttrib3dv(GLuint index, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib3dv(GLuint index, IntPtr v)
        {
            Delegates.glVertexAttrib3dv(index, v);
        }

        #endregion

        #region VertexAttrib3dv(GLuint index, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib3dv(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib3dv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib3dv(GLuint index, GLdouble[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib3dv(GLuint index, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib3dv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib3f(GLuint index, GLfloat x, GLfloat y, GLfloat z)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib3f(GLuint index, GLfloat x, GLfloat y, GLfloat z)
        {
            Delegates.glVertexAttrib3f(index, x, y, z);
        }

        #endregion

        #region VertexAttrib3fv(GLuint index, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib3fv(GLuint index, IntPtr v)
        {
            Delegates.glVertexAttrib3fv(index, v);
        }

        #endregion

        #region VertexAttrib3fv(GLuint index, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib3fv(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib3fv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib3fv(GLuint index, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib3fv(GLuint index, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib3fv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib3s(GLuint index, GLshort x, GLshort y, GLshort z)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib3s(GLuint index, GLshort x, GLshort y, GLshort z)
        {
            Delegates.glVertexAttrib3s(index, x, y, z);
        }

        #endregion

        #region VertexAttrib3sv(GLuint index, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib3sv(GLuint index, IntPtr v)
        {
            Delegates.glVertexAttrib3sv(index, v);
        }

        #endregion

        #region VertexAttrib3sv(GLuint index, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib3sv(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib3sv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib3sv(GLuint index, GLshort[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib3sv(GLuint index, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib3sv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4Nbv(GLuint index, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4Nbv(GLuint index, IntPtr v)
        {
            Delegates.glVertexAttrib4Nbv(index, v);
        }

        #endregion

        #region VertexAttrib4Nbv(GLuint index, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4Nbv(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4Nbv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4Nbv(GLuint index, GLbyte[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4Nbv(GLuint index, GLbyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4Nbv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4Niv(GLuint index, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4Niv(GLuint index, IntPtr v)
        {
            Delegates.glVertexAttrib4Niv(index, v);
        }

        #endregion

        #region VertexAttrib4Niv(GLuint index, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4Niv(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4Niv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4Niv(GLuint index, GLint[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4Niv(GLuint index, GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4Niv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4Nsv(GLuint index, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4Nsv(GLuint index, IntPtr v)
        {
            Delegates.glVertexAttrib4Nsv(index, v);
        }

        #endregion

        #region VertexAttrib4Nsv(GLuint index, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4Nsv(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4Nsv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4Nsv(GLuint index, GLshort[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4Nsv(GLuint index, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4Nsv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4Nub(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4Nub(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)
        {
            Delegates.glVertexAttrib4Nub(index, x, y, z, w);
        }

        #endregion

        #region VertexAttrib4Nubv(GLuint index, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4Nubv(GLuint index, IntPtr v)
        {
            Delegates.glVertexAttrib4Nubv(index, v);
        }

        #endregion

        #region VertexAttrib4Nubv(GLuint index, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4Nubv(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4Nubv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4Nubv(GLuint index, GLubyte[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4Nubv(GLuint index, GLubyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4Nubv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4Nuiv(GLuint index, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4Nuiv(GLuint index, IntPtr v)
        {
            Delegates.glVertexAttrib4Nuiv(index, v);
        }

        #endregion

        #region VertexAttrib4Nuiv(GLuint index, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4Nuiv(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4Nuiv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4Nuiv(GLuint index, GLuint[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4Nuiv(GLuint index, GLuint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4Nuiv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4Nusv(GLuint index, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4Nusv(GLuint index, IntPtr v)
        {
            Delegates.glVertexAttrib4Nusv(index, v);
        }

        #endregion

        #region VertexAttrib4Nusv(GLuint index, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4Nusv(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4Nusv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4Nusv(GLuint index, GLushort[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4Nusv(GLuint index, GLushort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4Nusv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4bv(GLuint index, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4bv(GLuint index, IntPtr v)
        {
            Delegates.glVertexAttrib4bv(index, v);
        }

        #endregion

        #region VertexAttrib4bv(GLuint index, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4bv(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4bv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4bv(GLuint index, GLbyte[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4bv(GLuint index, GLbyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4bv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
        {
            Delegates.glVertexAttrib4d(index, x, y, z, w);
        }

        #endregion

        #region VertexAttrib4dv(GLuint index, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4dv(GLuint index, IntPtr v)
        {
            Delegates.glVertexAttrib4dv(index, v);
        }

        #endregion

        #region VertexAttrib4dv(GLuint index, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4dv(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4dv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4dv(GLuint index, GLdouble[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4dv(GLuint index, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4dv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4f(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4f(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
        {
            Delegates.glVertexAttrib4f(index, x, y, z, w);
        }

        #endregion

        #region VertexAttrib4fv(GLuint index, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4fv(GLuint index, IntPtr v)
        {
            Delegates.glVertexAttrib4fv(index, v);
        }

        #endregion

        #region VertexAttrib4fv(GLuint index, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4fv(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4fv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4fv(GLuint index, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4fv(GLuint index, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4fv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4iv(GLuint index, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4iv(GLuint index, IntPtr v)
        {
            Delegates.glVertexAttrib4iv(index, v);
        }

        #endregion

        #region VertexAttrib4iv(GLuint index, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4iv(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4iv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4iv(GLuint index, GLint[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4iv(GLuint index, GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4iv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4s(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4s(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)
        {
            Delegates.glVertexAttrib4s(index, x, y, z, w);
        }

        #endregion

        #region VertexAttrib4sv(GLuint index, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4sv(GLuint index, IntPtr v)
        {
            Delegates.glVertexAttrib4sv(index, v);
        }

        #endregion

        #region VertexAttrib4sv(GLuint index, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4sv(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4sv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4sv(GLuint index, GLshort[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4sv(GLuint index, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4sv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4ubv(GLuint index, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4ubv(GLuint index, IntPtr v)
        {
            Delegates.glVertexAttrib4ubv(index, v);
        }

        #endregion

        #region VertexAttrib4ubv(GLuint index, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4ubv(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4ubv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4ubv(GLuint index, GLubyte[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4ubv(GLuint index, GLubyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4ubv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4uiv(GLuint index, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4uiv(GLuint index, IntPtr v)
        {
            Delegates.glVertexAttrib4uiv(index, v);
        }

        #endregion

        #region VertexAttrib4uiv(GLuint index, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4uiv(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4uiv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4uiv(GLuint index, GLuint[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4uiv(GLuint index, GLuint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4uiv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4usv(GLuint index, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4usv(GLuint index, IntPtr v)
        {
            Delegates.glVertexAttrib4usv(index, v);
        }

        #endregion

        #region VertexAttrib4usv(GLuint index, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4usv(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4usv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4usv(GLuint index, GLushort[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4usv(GLuint index, GLushort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4usv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, IntPtr pointer)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, IntPtr pointer)
        {
            Delegates.glVertexAttribPointer(index, size, type, normalized, stride, pointer);
        }

        #endregion

        #region VertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, object pointer)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribPointer(index, size, type, normalized, stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region UniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, IntPtr value)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, IntPtr value)
        {
            Delegates.glUniformMatrix2x3fv(location, count, transpose, value);
        }

        #endregion

        #region UniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, object value)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, object value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniformMatrix2x3fv(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region UniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, GLfloat[] value)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniformMatrix2x3fv(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region UniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, IntPtr value)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, IntPtr value)
        {
            Delegates.glUniformMatrix3x2fv(location, count, transpose, value);
        }

        #endregion

        #region UniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, object value)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, object value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniformMatrix3x2fv(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region UniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, GLfloat[] value)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniformMatrix3x2fv(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region UniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, IntPtr value)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, IntPtr value)
        {
            Delegates.glUniformMatrix2x4fv(location, count, transpose, value);
        }

        #endregion

        #region UniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, object value)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, object value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniformMatrix2x4fv(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region UniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, GLfloat[] value)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniformMatrix2x4fv(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region UniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, IntPtr value)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, IntPtr value)
        {
            Delegates.glUniformMatrix4x2fv(location, count, transpose, value);
        }

        #endregion

        #region UniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, object value)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, object value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniformMatrix4x2fv(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region UniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, GLfloat[] value)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniformMatrix4x2fv(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region UniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, IntPtr value)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, IntPtr value)
        {
            Delegates.glUniformMatrix3x4fv(location, count, transpose, value);
        }

        #endregion

        #region UniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, object value)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, object value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniformMatrix3x4fv(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region UniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, GLfloat[] value)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniformMatrix3x4fv(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region UniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, IntPtr value)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, IntPtr value)
        {
            Delegates.glUniformMatrix4x3fv(location, count, transpose, value);
        }

        #endregion

        #region UniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, object value)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, object value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniformMatrix4x3fv(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region UniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, GLfloat[] value)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniformMatrix4x3fv(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ActiveTextureARB(GLenum texture)

        /// <summary>
        /// 
        /// </summary>
        public static         void glActiveTextureARB(GLenum texture)
        {
            Delegates.glActiveTextureARB(texture);
        }

        #endregion

        #region ClientActiveTextureARB(GLenum texture)

        /// <summary>
        /// 
        /// </summary>
        public static         void glClientActiveTextureARB(GLenum texture)
        {
            Delegates.glClientActiveTextureARB(texture);
        }

        #endregion

        #region MultiTexCoord1dARB(GLenum target, GLdouble s)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord1dARB(GLenum target, GLdouble s)
        {
            Delegates.glMultiTexCoord1dARB(target, s);
        }

        #endregion

        #region MultiTexCoord1dvARB(GLenum target, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord1dvARB(GLenum target, IntPtr v)
        {
            Delegates.glMultiTexCoord1dvARB(target, v);
        }

        #endregion

        #region MultiTexCoord1dvARB(GLenum target, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord1dvARB(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord1dvARB(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord1dvARB(GLenum target, GLdouble[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord1dvARB(GLenum target, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord1dvARB(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord1fARB(GLenum target, GLfloat s)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord1fARB(GLenum target, GLfloat s)
        {
            Delegates.glMultiTexCoord1fARB(target, s);
        }

        #endregion

        #region MultiTexCoord1fvARB(GLenum target, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord1fvARB(GLenum target, IntPtr v)
        {
            Delegates.glMultiTexCoord1fvARB(target, v);
        }

        #endregion

        #region MultiTexCoord1fvARB(GLenum target, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord1fvARB(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord1fvARB(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord1fvARB(GLenum target, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord1fvARB(GLenum target, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord1fvARB(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord1iARB(GLenum target, GLint s)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord1iARB(GLenum target, GLint s)
        {
            Delegates.glMultiTexCoord1iARB(target, s);
        }

        #endregion

        #region MultiTexCoord1ivARB(GLenum target, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord1ivARB(GLenum target, IntPtr v)
        {
            Delegates.glMultiTexCoord1ivARB(target, v);
        }

        #endregion

        #region MultiTexCoord1ivARB(GLenum target, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord1ivARB(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord1ivARB(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord1ivARB(GLenum target, GLint[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord1ivARB(GLenum target, GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord1ivARB(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord1sARB(GLenum target, GLshort s)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord1sARB(GLenum target, GLshort s)
        {
            Delegates.glMultiTexCoord1sARB(target, s);
        }

        #endregion

        #region MultiTexCoord1svARB(GLenum target, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord1svARB(GLenum target, IntPtr v)
        {
            Delegates.glMultiTexCoord1svARB(target, v);
        }

        #endregion

        #region MultiTexCoord1svARB(GLenum target, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord1svARB(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord1svARB(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord1svARB(GLenum target, GLshort[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord1svARB(GLenum target, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord1svARB(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord2dARB(GLenum target, GLdouble s, GLdouble t)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord2dARB(GLenum target, GLdouble s, GLdouble t)
        {
            Delegates.glMultiTexCoord2dARB(target, s, t);
        }

        #endregion

        #region MultiTexCoord2dvARB(GLenum target, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord2dvARB(GLenum target, IntPtr v)
        {
            Delegates.glMultiTexCoord2dvARB(target, v);
        }

        #endregion

        #region MultiTexCoord2dvARB(GLenum target, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord2dvARB(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord2dvARB(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord2dvARB(GLenum target, GLdouble[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord2dvARB(GLenum target, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord2dvARB(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord2fARB(GLenum target, GLfloat s, GLfloat t)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord2fARB(GLenum target, GLfloat s, GLfloat t)
        {
            Delegates.glMultiTexCoord2fARB(target, s, t);
        }

        #endregion

        #region MultiTexCoord2fvARB(GLenum target, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord2fvARB(GLenum target, IntPtr v)
        {
            Delegates.glMultiTexCoord2fvARB(target, v);
        }

        #endregion

        #region MultiTexCoord2fvARB(GLenum target, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord2fvARB(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord2fvARB(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord2fvARB(GLenum target, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord2fvARB(GLenum target, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord2fvARB(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord2iARB(GLenum target, GLint s, GLint t)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord2iARB(GLenum target, GLint s, GLint t)
        {
            Delegates.glMultiTexCoord2iARB(target, s, t);
        }

        #endregion

        #region MultiTexCoord2ivARB(GLenum target, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord2ivARB(GLenum target, IntPtr v)
        {
            Delegates.glMultiTexCoord2ivARB(target, v);
        }

        #endregion

        #region MultiTexCoord2ivARB(GLenum target, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord2ivARB(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord2ivARB(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord2ivARB(GLenum target, GLint[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord2ivARB(GLenum target, GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord2ivARB(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord2sARB(GLenum target, GLshort s, GLshort t)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord2sARB(GLenum target, GLshort s, GLshort t)
        {
            Delegates.glMultiTexCoord2sARB(target, s, t);
        }

        #endregion

        #region MultiTexCoord2svARB(GLenum target, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord2svARB(GLenum target, IntPtr v)
        {
            Delegates.glMultiTexCoord2svARB(target, v);
        }

        #endregion

        #region MultiTexCoord2svARB(GLenum target, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord2svARB(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord2svARB(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord2svARB(GLenum target, GLshort[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord2svARB(GLenum target, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord2svARB(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord3dARB(GLenum target, GLdouble s, GLdouble t, GLdouble r)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord3dARB(GLenum target, GLdouble s, GLdouble t, GLdouble r)
        {
            Delegates.glMultiTexCoord3dARB(target, s, t, r);
        }

        #endregion

        #region MultiTexCoord3dvARB(GLenum target, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord3dvARB(GLenum target, IntPtr v)
        {
            Delegates.glMultiTexCoord3dvARB(target, v);
        }

        #endregion

        #region MultiTexCoord3dvARB(GLenum target, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord3dvARB(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord3dvARB(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord3dvARB(GLenum target, GLdouble[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord3dvARB(GLenum target, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord3dvARB(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord3fARB(GLenum target, GLfloat s, GLfloat t, GLfloat r)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord3fARB(GLenum target, GLfloat s, GLfloat t, GLfloat r)
        {
            Delegates.glMultiTexCoord3fARB(target, s, t, r);
        }

        #endregion

        #region MultiTexCoord3fvARB(GLenum target, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord3fvARB(GLenum target, IntPtr v)
        {
            Delegates.glMultiTexCoord3fvARB(target, v);
        }

        #endregion

        #region MultiTexCoord3fvARB(GLenum target, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord3fvARB(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord3fvARB(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord3fvARB(GLenum target, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord3fvARB(GLenum target, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord3fvARB(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord3iARB(GLenum target, GLint s, GLint t, GLint r)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord3iARB(GLenum target, GLint s, GLint t, GLint r)
        {
            Delegates.glMultiTexCoord3iARB(target, s, t, r);
        }

        #endregion

        #region MultiTexCoord3ivARB(GLenum target, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord3ivARB(GLenum target, IntPtr v)
        {
            Delegates.glMultiTexCoord3ivARB(target, v);
        }

        #endregion

        #region MultiTexCoord3ivARB(GLenum target, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord3ivARB(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord3ivARB(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord3ivARB(GLenum target, GLint[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord3ivARB(GLenum target, GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord3ivARB(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord3sARB(GLenum target, GLshort s, GLshort t, GLshort r)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord3sARB(GLenum target, GLshort s, GLshort t, GLshort r)
        {
            Delegates.glMultiTexCoord3sARB(target, s, t, r);
        }

        #endregion

        #region MultiTexCoord3svARB(GLenum target, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord3svARB(GLenum target, IntPtr v)
        {
            Delegates.glMultiTexCoord3svARB(target, v);
        }

        #endregion

        #region MultiTexCoord3svARB(GLenum target, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord3svARB(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord3svARB(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord3svARB(GLenum target, GLshort[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord3svARB(GLenum target, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord3svARB(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord4dARB(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord4dARB(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q)
        {
            Delegates.glMultiTexCoord4dARB(target, s, t, r, q);
        }

        #endregion

        #region MultiTexCoord4dvARB(GLenum target, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord4dvARB(GLenum target, IntPtr v)
        {
            Delegates.glMultiTexCoord4dvARB(target, v);
        }

        #endregion

        #region MultiTexCoord4dvARB(GLenum target, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord4dvARB(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord4dvARB(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord4dvARB(GLenum target, GLdouble[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord4dvARB(GLenum target, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord4dvARB(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord4fARB(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord4fARB(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q)
        {
            Delegates.glMultiTexCoord4fARB(target, s, t, r, q);
        }

        #endregion

        #region MultiTexCoord4fvARB(GLenum target, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord4fvARB(GLenum target, IntPtr v)
        {
            Delegates.glMultiTexCoord4fvARB(target, v);
        }

        #endregion

        #region MultiTexCoord4fvARB(GLenum target, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord4fvARB(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord4fvARB(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord4fvARB(GLenum target, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord4fvARB(GLenum target, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord4fvARB(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord4iARB(GLenum target, GLint s, GLint t, GLint r, GLint q)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord4iARB(GLenum target, GLint s, GLint t, GLint r, GLint q)
        {
            Delegates.glMultiTexCoord4iARB(target, s, t, r, q);
        }

        #endregion

        #region MultiTexCoord4ivARB(GLenum target, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord4ivARB(GLenum target, IntPtr v)
        {
            Delegates.glMultiTexCoord4ivARB(target, v);
        }

        #endregion

        #region MultiTexCoord4ivARB(GLenum target, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord4ivARB(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord4ivARB(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord4ivARB(GLenum target, GLint[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord4ivARB(GLenum target, GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord4ivARB(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord4sARB(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord4sARB(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q)
        {
            Delegates.glMultiTexCoord4sARB(target, s, t, r, q);
        }

        #endregion

        #region MultiTexCoord4svARB(GLenum target, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord4svARB(GLenum target, IntPtr v)
        {
            Delegates.glMultiTexCoord4svARB(target, v);
        }

        #endregion

        #region MultiTexCoord4svARB(GLenum target, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord4svARB(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord4svARB(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord4svARB(GLenum target, GLshort[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord4svARB(GLenum target, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord4svARB(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region LoadTransposeMatrixfARB(IntPtr m)

        /// <summary>
        /// 
        /// </summary>
        public static         void glLoadTransposeMatrixfARB(IntPtr m)
        {
            Delegates.glLoadTransposeMatrixfARB(m);
        }

        #endregion

        #region LoadTransposeMatrixfARB(object m)

        /// <summary>
        /// 
        /// </summary>
        public static         void glLoadTransposeMatrixfARB(object m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                Delegates.glLoadTransposeMatrixfARB(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region LoadTransposeMatrixfARB(GLfloat[] m)

        /// <summary>
        /// 
        /// </summary>
        public static         void glLoadTransposeMatrixfARB(GLfloat[] m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                Delegates.glLoadTransposeMatrixfARB(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region LoadTransposeMatrixdARB(IntPtr m)

        /// <summary>
        /// 
        /// </summary>
        public static         void glLoadTransposeMatrixdARB(IntPtr m)
        {
            Delegates.glLoadTransposeMatrixdARB(m);
        }

        #endregion

        #region LoadTransposeMatrixdARB(object m)

        /// <summary>
        /// 
        /// </summary>
        public static         void glLoadTransposeMatrixdARB(object m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                Delegates.glLoadTransposeMatrixdARB(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region LoadTransposeMatrixdARB(GLdouble[] m)

        /// <summary>
        /// 
        /// </summary>
        public static         void glLoadTransposeMatrixdARB(GLdouble[] m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                Delegates.glLoadTransposeMatrixdARB(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultTransposeMatrixfARB(IntPtr m)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultTransposeMatrixfARB(IntPtr m)
        {
            Delegates.glMultTransposeMatrixfARB(m);
        }

        #endregion

        #region MultTransposeMatrixfARB(object m)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultTransposeMatrixfARB(object m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                Delegates.glMultTransposeMatrixfARB(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultTransposeMatrixfARB(GLfloat[] m)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultTransposeMatrixfARB(GLfloat[] m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                Delegates.glMultTransposeMatrixfARB(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultTransposeMatrixdARB(IntPtr m)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultTransposeMatrixdARB(IntPtr m)
        {
            Delegates.glMultTransposeMatrixdARB(m);
        }

        #endregion

        #region MultTransposeMatrixdARB(object m)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultTransposeMatrixdARB(object m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                Delegates.glMultTransposeMatrixdARB(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultTransposeMatrixdARB(GLdouble[] m)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultTransposeMatrixdARB(GLdouble[] m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                Delegates.glMultTransposeMatrixdARB(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SampleCoverageARB(GLclampf value, GLboolean invert)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSampleCoverageARB(GLclampf value, GLboolean invert)
        {
            Delegates.glSampleCoverageARB(value, invert);
        }

        #endregion

        #region CompressedTexImage3DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, IntPtr data)

        /// <summary>
        /// 
        /// </summary>
        public static         void glCompressedTexImage3DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, IntPtr data)
        {
            Delegates.glCompressedTexImage3DARB(target, level, internalformat, width, height, depth, border, imageSize, data);
        }

        #endregion

        #region CompressedTexImage3DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, object data)

        /// <summary>
        /// 
        /// </summary>
        public static         void glCompressedTexImage3DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glCompressedTexImage3DARB(target, level, internalformat, width, height, depth, border, imageSize, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region CompressedTexImage2DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, IntPtr data)

        /// <summary>
        /// 
        /// </summary>
        public static         void glCompressedTexImage2DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, IntPtr data)
        {
            Delegates.glCompressedTexImage2DARB(target, level, internalformat, width, height, border, imageSize, data);
        }

        #endregion

        #region CompressedTexImage2DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, object data)

        /// <summary>
        /// 
        /// </summary>
        public static         void glCompressedTexImage2DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glCompressedTexImage2DARB(target, level, internalformat, width, height, border, imageSize, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region CompressedTexImage1DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, IntPtr data)

        /// <summary>
        /// 
        /// </summary>
        public static         void glCompressedTexImage1DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, IntPtr data)
        {
            Delegates.glCompressedTexImage1DARB(target, level, internalformat, width, border, imageSize, data);
        }

        #endregion

        #region CompressedTexImage1DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, object data)

        /// <summary>
        /// 
        /// </summary>
        public static         void glCompressedTexImage1DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glCompressedTexImage1DARB(target, level, internalformat, width, border, imageSize, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region CompressedTexSubImage3DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, IntPtr data)

        /// <summary>
        /// 
        /// </summary>
        public static         void glCompressedTexSubImage3DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, IntPtr data)
        {
            Delegates.glCompressedTexSubImage3DARB(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
        }

        #endregion

        #region CompressedTexSubImage3DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, object data)

        /// <summary>
        /// 
        /// </summary>
        public static         void glCompressedTexSubImage3DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glCompressedTexSubImage3DARB(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region CompressedTexSubImage2DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, IntPtr data)

        /// <summary>
        /// 
        /// </summary>
        public static         void glCompressedTexSubImage2DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, IntPtr data)
        {
            Delegates.glCompressedTexSubImage2DARB(target, level, xoffset, yoffset, width, height, format, imageSize, data);
        }

        #endregion

        #region CompressedTexSubImage2DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, object data)

        /// <summary>
        /// 
        /// </summary>
        public static         void glCompressedTexSubImage2DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glCompressedTexSubImage2DARB(target, level, xoffset, yoffset, width, height, format, imageSize, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region CompressedTexSubImage1DARB(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, IntPtr data)

        /// <summary>
        /// 
        /// </summary>
        public static         void glCompressedTexSubImage1DARB(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, IntPtr data)
        {
            Delegates.glCompressedTexSubImage1DARB(target, level, xoffset, width, format, imageSize, data);
        }

        #endregion

        #region CompressedTexSubImage1DARB(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, object data)

        /// <summary>
        /// 
        /// </summary>
        public static         void glCompressedTexSubImage1DARB(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glCompressedTexSubImage1DARB(target, level, xoffset, width, format, imageSize, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetCompressedTexImageARB(GLenum target, GLint level, IntPtr img)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetCompressedTexImageARB(GLenum target, GLint level, IntPtr img)
        {
            Delegates.glGetCompressedTexImageARB(target, level, img);
        }

        #endregion

        #region GetCompressedTexImageARB(GLenum target, GLint level, object img)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetCompressedTexImageARB(GLenum target, GLint level, object img)
        {
            GCHandle h0 = GCHandle.Alloc(img, GCHandleType.Pinned);
            try
            {
                Delegates.glGetCompressedTexImageARB(target, level, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region PointParameterfARB(GLenum pname, GLfloat param)

        /// <summary>
        /// 
        /// </summary>
        public static         void glPointParameterfARB(GLenum pname, GLfloat param)
        {
            Delegates.glPointParameterfARB(pname, param);
        }

        #endregion

        #region PointParameterfvARB(GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glPointParameterfvARB(GLenum pname, IntPtr parameters)
        {
            Delegates.glPointParameterfvARB(pname, parameters);
        }

        #endregion

        #region PointParameterfvARB(GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glPointParameterfvARB(GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glPointParameterfvARB(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region PointParameterfvARB(GLenum pname, GLfloat[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glPointParameterfvARB(GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glPointParameterfvARB(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WeightbvARB(GLint size, IntPtr weights)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWeightbvARB(GLint size, IntPtr weights)
        {
            Delegates.glWeightbvARB(size, weights);
        }

        #endregion

        #region WeightbvARB(GLint size, object weights)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWeightbvARB(GLint size, object weights)
        {
            GCHandle h0 = GCHandle.Alloc(weights, GCHandleType.Pinned);
            try
            {
                Delegates.glWeightbvARB(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WeightbvARB(GLint size, GLbyte[] weights)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWeightbvARB(GLint size, GLbyte[] weights)
        {
            GCHandle h0 = GCHandle.Alloc(weights, GCHandleType.Pinned);
            try
            {
                Delegates.glWeightbvARB(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WeightsvARB(GLint size, IntPtr weights)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWeightsvARB(GLint size, IntPtr weights)
        {
            Delegates.glWeightsvARB(size, weights);
        }

        #endregion

        #region WeightsvARB(GLint size, object weights)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWeightsvARB(GLint size, object weights)
        {
            GCHandle h0 = GCHandle.Alloc(weights, GCHandleType.Pinned);
            try
            {
                Delegates.glWeightsvARB(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WeightsvARB(GLint size, GLshort[] weights)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWeightsvARB(GLint size, GLshort[] weights)
        {
            GCHandle h0 = GCHandle.Alloc(weights, GCHandleType.Pinned);
            try
            {
                Delegates.glWeightsvARB(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WeightivARB(GLint size, IntPtr weights)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWeightivARB(GLint size, IntPtr weights)
        {
            Delegates.glWeightivARB(size, weights);
        }

        #endregion

        #region WeightivARB(GLint size, object weights)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWeightivARB(GLint size, object weights)
        {
            GCHandle h0 = GCHandle.Alloc(weights, GCHandleType.Pinned);
            try
            {
                Delegates.glWeightivARB(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WeightivARB(GLint size, GLint[] weights)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWeightivARB(GLint size, GLint[] weights)
        {
            GCHandle h0 = GCHandle.Alloc(weights, GCHandleType.Pinned);
            try
            {
                Delegates.glWeightivARB(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WeightfvARB(GLint size, IntPtr weights)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWeightfvARB(GLint size, IntPtr weights)
        {
            Delegates.glWeightfvARB(size, weights);
        }

        #endregion

        #region WeightfvARB(GLint size, object weights)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWeightfvARB(GLint size, object weights)
        {
            GCHandle h0 = GCHandle.Alloc(weights, GCHandleType.Pinned);
            try
            {
                Delegates.glWeightfvARB(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WeightfvARB(GLint size, GLfloat[] weights)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWeightfvARB(GLint size, GLfloat[] weights)
        {
            GCHandle h0 = GCHandle.Alloc(weights, GCHandleType.Pinned);
            try
            {
                Delegates.glWeightfvARB(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WeightdvARB(GLint size, IntPtr weights)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWeightdvARB(GLint size, IntPtr weights)
        {
            Delegates.glWeightdvARB(size, weights);
        }

        #endregion

        #region WeightdvARB(GLint size, object weights)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWeightdvARB(GLint size, object weights)
        {
            GCHandle h0 = GCHandle.Alloc(weights, GCHandleType.Pinned);
            try
            {
                Delegates.glWeightdvARB(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WeightdvARB(GLint size, GLdouble[] weights)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWeightdvARB(GLint size, GLdouble[] weights)
        {
            GCHandle h0 = GCHandle.Alloc(weights, GCHandleType.Pinned);
            try
            {
                Delegates.glWeightdvARB(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WeightubvARB(GLint size, IntPtr weights)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWeightubvARB(GLint size, IntPtr weights)
        {
            Delegates.glWeightubvARB(size, weights);
        }

        #endregion

        #region WeightubvARB(GLint size, object weights)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWeightubvARB(GLint size, object weights)
        {
            GCHandle h0 = GCHandle.Alloc(weights, GCHandleType.Pinned);
            try
            {
                Delegates.glWeightubvARB(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WeightubvARB(GLint size, GLubyte[] weights)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWeightubvARB(GLint size, GLubyte[] weights)
        {
            GCHandle h0 = GCHandle.Alloc(weights, GCHandleType.Pinned);
            try
            {
                Delegates.glWeightubvARB(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WeightusvARB(GLint size, IntPtr weights)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWeightusvARB(GLint size, IntPtr weights)
        {
            Delegates.glWeightusvARB(size, weights);
        }

        #endregion

        #region WeightusvARB(GLint size, object weights)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWeightusvARB(GLint size, object weights)
        {
            GCHandle h0 = GCHandle.Alloc(weights, GCHandleType.Pinned);
            try
            {
                Delegates.glWeightusvARB(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WeightusvARB(GLint size, GLushort[] weights)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWeightusvARB(GLint size, GLushort[] weights)
        {
            GCHandle h0 = GCHandle.Alloc(weights, GCHandleType.Pinned);
            try
            {
                Delegates.glWeightusvARB(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WeightuivARB(GLint size, IntPtr weights)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWeightuivARB(GLint size, IntPtr weights)
        {
            Delegates.glWeightuivARB(size, weights);
        }

        #endregion

        #region WeightuivARB(GLint size, object weights)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWeightuivARB(GLint size, object weights)
        {
            GCHandle h0 = GCHandle.Alloc(weights, GCHandleType.Pinned);
            try
            {
                Delegates.glWeightuivARB(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WeightuivARB(GLint size, GLuint[] weights)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWeightuivARB(GLint size, GLuint[] weights)
        {
            GCHandle h0 = GCHandle.Alloc(weights, GCHandleType.Pinned);
            try
            {
                Delegates.glWeightuivARB(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WeightPointerARB(GLint size, GLenum type, GLsizei stride, IntPtr pointer)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWeightPointerARB(GLint size, GLenum type, GLsizei stride, IntPtr pointer)
        {
            Delegates.glWeightPointerARB(size, type, stride, pointer);
        }

        #endregion

        #region WeightPointerARB(GLint size, GLenum type, GLsizei stride, object pointer)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWeightPointerARB(GLint size, GLenum type, GLsizei stride, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glWeightPointerARB(size, type, stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexBlendARB(GLint count)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexBlendARB(GLint count)
        {
            Delegates.glVertexBlendARB(count);
        }

        #endregion

        #region CurrentPaletteMatrixARB(GLint index)

        /// <summary>
        /// 
        /// </summary>
        public static         void glCurrentPaletteMatrixARB(GLint index)
        {
            Delegates.glCurrentPaletteMatrixARB(index);
        }

        #endregion

        #region MatrixIndexubvARB(GLint size, IntPtr indices)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMatrixIndexubvARB(GLint size, IntPtr indices)
        {
            Delegates.glMatrixIndexubvARB(size, indices);
        }

        #endregion

        #region MatrixIndexubvARB(GLint size, object indices)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMatrixIndexubvARB(GLint size, object indices)
        {
            GCHandle h0 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glMatrixIndexubvARB(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MatrixIndexubvARB(GLint size, GLubyte[] indices)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMatrixIndexubvARB(GLint size, GLubyte[] indices)
        {
            GCHandle h0 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glMatrixIndexubvARB(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MatrixIndexusvARB(GLint size, IntPtr indices)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMatrixIndexusvARB(GLint size, IntPtr indices)
        {
            Delegates.glMatrixIndexusvARB(size, indices);
        }

        #endregion

        #region MatrixIndexusvARB(GLint size, object indices)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMatrixIndexusvARB(GLint size, object indices)
        {
            GCHandle h0 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glMatrixIndexusvARB(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MatrixIndexusvARB(GLint size, GLushort[] indices)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMatrixIndexusvARB(GLint size, GLushort[] indices)
        {
            GCHandle h0 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glMatrixIndexusvARB(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MatrixIndexuivARB(GLint size, IntPtr indices)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMatrixIndexuivARB(GLint size, IntPtr indices)
        {
            Delegates.glMatrixIndexuivARB(size, indices);
        }

        #endregion

        #region MatrixIndexuivARB(GLint size, object indices)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMatrixIndexuivARB(GLint size, object indices)
        {
            GCHandle h0 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glMatrixIndexuivARB(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MatrixIndexuivARB(GLint size, GLuint[] indices)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMatrixIndexuivARB(GLint size, GLuint[] indices)
        {
            GCHandle h0 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glMatrixIndexuivARB(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MatrixIndexPointerARB(GLint size, GLenum type, GLsizei stride, IntPtr pointer)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMatrixIndexPointerARB(GLint size, GLenum type, GLsizei stride, IntPtr pointer)
        {
            Delegates.glMatrixIndexPointerARB(size, type, stride, pointer);
        }

        #endregion

        #region MatrixIndexPointerARB(GLint size, GLenum type, GLsizei stride, object pointer)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMatrixIndexPointerARB(GLint size, GLenum type, GLsizei stride, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glMatrixIndexPointerARB(size, type, stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos2dARB(GLdouble x, GLdouble y)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos2dARB(GLdouble x, GLdouble y)
        {
            Delegates.glWindowPos2dARB(x, y);
        }

        #endregion

        #region WindowPos2dvARB(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos2dvARB(IntPtr v)
        {
            Delegates.glWindowPos2dvARB(v);
        }

        #endregion

        #region WindowPos2dvARB(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos2dvARB(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos2dvARB(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos2dvARB(GLdouble[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos2dvARB(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos2dvARB(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos2fARB(GLfloat x, GLfloat y)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos2fARB(GLfloat x, GLfloat y)
        {
            Delegates.glWindowPos2fARB(x, y);
        }

        #endregion

        #region WindowPos2fvARB(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos2fvARB(IntPtr v)
        {
            Delegates.glWindowPos2fvARB(v);
        }

        #endregion

        #region WindowPos2fvARB(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos2fvARB(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos2fvARB(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos2fvARB(GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos2fvARB(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos2fvARB(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos2iARB(GLint x, GLint y)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos2iARB(GLint x, GLint y)
        {
            Delegates.glWindowPos2iARB(x, y);
        }

        #endregion

        #region WindowPos2ivARB(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos2ivARB(IntPtr v)
        {
            Delegates.glWindowPos2ivARB(v);
        }

        #endregion

        #region WindowPos2ivARB(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos2ivARB(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos2ivARB(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos2ivARB(GLint[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos2ivARB(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos2ivARB(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos2sARB(GLshort x, GLshort y)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos2sARB(GLshort x, GLshort y)
        {
            Delegates.glWindowPos2sARB(x, y);
        }

        #endregion

        #region WindowPos2svARB(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos2svARB(IntPtr v)
        {
            Delegates.glWindowPos2svARB(v);
        }

        #endregion

        #region WindowPos2svARB(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos2svARB(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos2svARB(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos2svARB(GLshort[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos2svARB(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos2svARB(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos3dARB(GLdouble x, GLdouble y, GLdouble z)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos3dARB(GLdouble x, GLdouble y, GLdouble z)
        {
            Delegates.glWindowPos3dARB(x, y, z);
        }

        #endregion

        #region WindowPos3dvARB(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos3dvARB(IntPtr v)
        {
            Delegates.glWindowPos3dvARB(v);
        }

        #endregion

        #region WindowPos3dvARB(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos3dvARB(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos3dvARB(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos3dvARB(GLdouble[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos3dvARB(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos3dvARB(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos3fARB(GLfloat x, GLfloat y, GLfloat z)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos3fARB(GLfloat x, GLfloat y, GLfloat z)
        {
            Delegates.glWindowPos3fARB(x, y, z);
        }

        #endregion

        #region WindowPos3fvARB(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos3fvARB(IntPtr v)
        {
            Delegates.glWindowPos3fvARB(v);
        }

        #endregion

        #region WindowPos3fvARB(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos3fvARB(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos3fvARB(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos3fvARB(GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos3fvARB(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos3fvARB(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos3iARB(GLint x, GLint y, GLint z)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos3iARB(GLint x, GLint y, GLint z)
        {
            Delegates.glWindowPos3iARB(x, y, z);
        }

        #endregion

        #region WindowPos3ivARB(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos3ivARB(IntPtr v)
        {
            Delegates.glWindowPos3ivARB(v);
        }

        #endregion

        #region WindowPos3ivARB(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos3ivARB(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos3ivARB(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos3ivARB(GLint[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos3ivARB(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos3ivARB(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos3sARB(GLshort x, GLshort y, GLshort z)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos3sARB(GLshort x, GLshort y, GLshort z)
        {
            Delegates.glWindowPos3sARB(x, y, z);
        }

        #endregion

        #region WindowPos3svARB(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos3svARB(IntPtr v)
        {
            Delegates.glWindowPos3svARB(v);
        }

        #endregion

        #region WindowPos3svARB(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos3svARB(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos3svARB(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos3svARB(GLshort[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos3svARB(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos3svARB(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib1dARB(GLuint index, GLdouble x)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib1dARB(GLuint index, GLdouble x)
        {
            Delegates.glVertexAttrib1dARB(index, x);
        }

        #endregion

        #region VertexAttrib1dvARB(GLuint index, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib1dvARB(GLuint index, IntPtr v)
        {
            Delegates.glVertexAttrib1dvARB(index, v);
        }

        #endregion

        #region VertexAttrib1dvARB(GLuint index, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib1dvARB(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib1dvARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib1dvARB(GLuint index, GLdouble[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib1dvARB(GLuint index, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib1dvARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib1fARB(GLuint index, GLfloat x)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib1fARB(GLuint index, GLfloat x)
        {
            Delegates.glVertexAttrib1fARB(index, x);
        }

        #endregion

        #region VertexAttrib1fvARB(GLuint index, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib1fvARB(GLuint index, IntPtr v)
        {
            Delegates.glVertexAttrib1fvARB(index, v);
        }

        #endregion

        #region VertexAttrib1fvARB(GLuint index, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib1fvARB(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib1fvARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib1fvARB(GLuint index, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib1fvARB(GLuint index, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib1fvARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib1sARB(GLuint index, GLshort x)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib1sARB(GLuint index, GLshort x)
        {
            Delegates.glVertexAttrib1sARB(index, x);
        }

        #endregion

        #region VertexAttrib1svARB(GLuint index, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib1svARB(GLuint index, IntPtr v)
        {
            Delegates.glVertexAttrib1svARB(index, v);
        }

        #endregion

        #region VertexAttrib1svARB(GLuint index, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib1svARB(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib1svARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib1svARB(GLuint index, GLshort[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib1svARB(GLuint index, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib1svARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib2dARB(GLuint index, GLdouble x, GLdouble y)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib2dARB(GLuint index, GLdouble x, GLdouble y)
        {
            Delegates.glVertexAttrib2dARB(index, x, y);
        }

        #endregion

        #region VertexAttrib2dvARB(GLuint index, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib2dvARB(GLuint index, IntPtr v)
        {
            Delegates.glVertexAttrib2dvARB(index, v);
        }

        #endregion

        #region VertexAttrib2dvARB(GLuint index, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib2dvARB(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib2dvARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib2dvARB(GLuint index, GLdouble[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib2dvARB(GLuint index, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib2dvARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib2fARB(GLuint index, GLfloat x, GLfloat y)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib2fARB(GLuint index, GLfloat x, GLfloat y)
        {
            Delegates.glVertexAttrib2fARB(index, x, y);
        }

        #endregion

        #region VertexAttrib2fvARB(GLuint index, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib2fvARB(GLuint index, IntPtr v)
        {
            Delegates.glVertexAttrib2fvARB(index, v);
        }

        #endregion

        #region VertexAttrib2fvARB(GLuint index, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib2fvARB(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib2fvARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib2fvARB(GLuint index, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib2fvARB(GLuint index, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib2fvARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib2sARB(GLuint index, GLshort x, GLshort y)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib2sARB(GLuint index, GLshort x, GLshort y)
        {
            Delegates.glVertexAttrib2sARB(index, x, y);
        }

        #endregion

        #region VertexAttrib2svARB(GLuint index, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib2svARB(GLuint index, IntPtr v)
        {
            Delegates.glVertexAttrib2svARB(index, v);
        }

        #endregion

        #region VertexAttrib2svARB(GLuint index, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib2svARB(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib2svARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib2svARB(GLuint index, GLshort[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib2svARB(GLuint index, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib2svARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib3dARB(GLuint index, GLdouble x, GLdouble y, GLdouble z)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib3dARB(GLuint index, GLdouble x, GLdouble y, GLdouble z)
        {
            Delegates.glVertexAttrib3dARB(index, x, y, z);
        }

        #endregion

        #region VertexAttrib3dvARB(GLuint index, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib3dvARB(GLuint index, IntPtr v)
        {
            Delegates.glVertexAttrib3dvARB(index, v);
        }

        #endregion

        #region VertexAttrib3dvARB(GLuint index, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib3dvARB(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib3dvARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib3dvARB(GLuint index, GLdouble[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib3dvARB(GLuint index, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib3dvARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib3fARB(GLuint index, GLfloat x, GLfloat y, GLfloat z)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib3fARB(GLuint index, GLfloat x, GLfloat y, GLfloat z)
        {
            Delegates.glVertexAttrib3fARB(index, x, y, z);
        }

        #endregion

        #region VertexAttrib3fvARB(GLuint index, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib3fvARB(GLuint index, IntPtr v)
        {
            Delegates.glVertexAttrib3fvARB(index, v);
        }

        #endregion

        #region VertexAttrib3fvARB(GLuint index, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib3fvARB(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib3fvARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib3fvARB(GLuint index, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib3fvARB(GLuint index, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib3fvARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib3sARB(GLuint index, GLshort x, GLshort y, GLshort z)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib3sARB(GLuint index, GLshort x, GLshort y, GLshort z)
        {
            Delegates.glVertexAttrib3sARB(index, x, y, z);
        }

        #endregion

        #region VertexAttrib3svARB(GLuint index, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib3svARB(GLuint index, IntPtr v)
        {
            Delegates.glVertexAttrib3svARB(index, v);
        }

        #endregion

        #region VertexAttrib3svARB(GLuint index, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib3svARB(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib3svARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib3svARB(GLuint index, GLshort[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib3svARB(GLuint index, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib3svARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4NbvARB(GLuint index, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4NbvARB(GLuint index, IntPtr v)
        {
            Delegates.glVertexAttrib4NbvARB(index, v);
        }

        #endregion

        #region VertexAttrib4NbvARB(GLuint index, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4NbvARB(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4NbvARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4NbvARB(GLuint index, GLbyte[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4NbvARB(GLuint index, GLbyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4NbvARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4NivARB(GLuint index, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4NivARB(GLuint index, IntPtr v)
        {
            Delegates.glVertexAttrib4NivARB(index, v);
        }

        #endregion

        #region VertexAttrib4NivARB(GLuint index, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4NivARB(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4NivARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4NivARB(GLuint index, GLint[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4NivARB(GLuint index, GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4NivARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4NsvARB(GLuint index, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4NsvARB(GLuint index, IntPtr v)
        {
            Delegates.glVertexAttrib4NsvARB(index, v);
        }

        #endregion

        #region VertexAttrib4NsvARB(GLuint index, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4NsvARB(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4NsvARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4NsvARB(GLuint index, GLshort[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4NsvARB(GLuint index, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4NsvARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4NubARB(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4NubARB(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)
        {
            Delegates.glVertexAttrib4NubARB(index, x, y, z, w);
        }

        #endregion

        #region VertexAttrib4NubvARB(GLuint index, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4NubvARB(GLuint index, IntPtr v)
        {
            Delegates.glVertexAttrib4NubvARB(index, v);
        }

        #endregion

        #region VertexAttrib4NubvARB(GLuint index, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4NubvARB(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4NubvARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4NubvARB(GLuint index, GLubyte[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4NubvARB(GLuint index, GLubyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4NubvARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4NuivARB(GLuint index, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4NuivARB(GLuint index, IntPtr v)
        {
            Delegates.glVertexAttrib4NuivARB(index, v);
        }

        #endregion

        #region VertexAttrib4NuivARB(GLuint index, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4NuivARB(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4NuivARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4NuivARB(GLuint index, GLuint[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4NuivARB(GLuint index, GLuint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4NuivARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4NusvARB(GLuint index, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4NusvARB(GLuint index, IntPtr v)
        {
            Delegates.glVertexAttrib4NusvARB(index, v);
        }

        #endregion

        #region VertexAttrib4NusvARB(GLuint index, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4NusvARB(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4NusvARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4NusvARB(GLuint index, GLushort[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4NusvARB(GLuint index, GLushort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4NusvARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4bvARB(GLuint index, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4bvARB(GLuint index, IntPtr v)
        {
            Delegates.glVertexAttrib4bvARB(index, v);
        }

        #endregion

        #region VertexAttrib4bvARB(GLuint index, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4bvARB(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4bvARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4bvARB(GLuint index, GLbyte[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4bvARB(GLuint index, GLbyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4bvARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4dARB(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4dARB(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
        {
            Delegates.glVertexAttrib4dARB(index, x, y, z, w);
        }

        #endregion

        #region VertexAttrib4dvARB(GLuint index, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4dvARB(GLuint index, IntPtr v)
        {
            Delegates.glVertexAttrib4dvARB(index, v);
        }

        #endregion

        #region VertexAttrib4dvARB(GLuint index, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4dvARB(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4dvARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4dvARB(GLuint index, GLdouble[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4dvARB(GLuint index, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4dvARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4fARB(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4fARB(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
        {
            Delegates.glVertexAttrib4fARB(index, x, y, z, w);
        }

        #endregion

        #region VertexAttrib4fvARB(GLuint index, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4fvARB(GLuint index, IntPtr v)
        {
            Delegates.glVertexAttrib4fvARB(index, v);
        }

        #endregion

        #region VertexAttrib4fvARB(GLuint index, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4fvARB(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4fvARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4fvARB(GLuint index, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4fvARB(GLuint index, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4fvARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4ivARB(GLuint index, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4ivARB(GLuint index, IntPtr v)
        {
            Delegates.glVertexAttrib4ivARB(index, v);
        }

        #endregion

        #region VertexAttrib4ivARB(GLuint index, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4ivARB(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4ivARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4ivARB(GLuint index, GLint[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4ivARB(GLuint index, GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4ivARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4sARB(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4sARB(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)
        {
            Delegates.glVertexAttrib4sARB(index, x, y, z, w);
        }

        #endregion

        #region VertexAttrib4svARB(GLuint index, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4svARB(GLuint index, IntPtr v)
        {
            Delegates.glVertexAttrib4svARB(index, v);
        }

        #endregion

        #region VertexAttrib4svARB(GLuint index, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4svARB(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4svARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4svARB(GLuint index, GLshort[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4svARB(GLuint index, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4svARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4ubvARB(GLuint index, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4ubvARB(GLuint index, IntPtr v)
        {
            Delegates.glVertexAttrib4ubvARB(index, v);
        }

        #endregion

        #region VertexAttrib4ubvARB(GLuint index, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4ubvARB(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4ubvARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4ubvARB(GLuint index, GLubyte[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4ubvARB(GLuint index, GLubyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4ubvARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4uivARB(GLuint index, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4uivARB(GLuint index, IntPtr v)
        {
            Delegates.glVertexAttrib4uivARB(index, v);
        }

        #endregion

        #region VertexAttrib4uivARB(GLuint index, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4uivARB(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4uivARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4uivARB(GLuint index, GLuint[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4uivARB(GLuint index, GLuint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4uivARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4usvARB(GLuint index, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4usvARB(GLuint index, IntPtr v)
        {
            Delegates.glVertexAttrib4usvARB(index, v);
        }

        #endregion

        #region VertexAttrib4usvARB(GLuint index, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4usvARB(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4usvARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4usvARB(GLuint index, GLushort[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4usvARB(GLuint index, GLushort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4usvARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttribPointerARB(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, IntPtr pointer)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttribPointerARB(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, IntPtr pointer)
        {
            Delegates.glVertexAttribPointerARB(index, size, type, normalized, stride, pointer);
        }

        #endregion

        #region VertexAttribPointerARB(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, object pointer)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttribPointerARB(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribPointerARB(index, size, type, normalized, stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region EnableVertexAttribArrayARB(GLuint index)

        /// <summary>
        /// 
        /// </summary>
        public static         void glEnableVertexAttribArrayARB(GLuint index)
        {
            Delegates.glEnableVertexAttribArrayARB(index);
        }

        #endregion

        #region DisableVertexAttribArrayARB(GLuint index)

        /// <summary>
        /// 
        /// </summary>
        public static         void glDisableVertexAttribArrayARB(GLuint index)
        {
            Delegates.glDisableVertexAttribArrayARB(index);
        }

        #endregion

        #region ProgramStringARB(GLenum target, GLenum format, GLsizei len, IntPtr @string)

        /// <summary>
        /// 
        /// </summary>
        public static         void glProgramStringARB(GLenum target, GLenum format, GLsizei len, IntPtr @string)
        {
            Delegates.glProgramStringARB(target, format, len, @string);
        }

        #endregion

        #region ProgramStringARB(GLenum target, GLenum format, GLsizei len, object @string)

        /// <summary>
        /// 
        /// </summary>
        public static         void glProgramStringARB(GLenum target, GLenum format, GLsizei len, object @string)
        {
            GCHandle h0 = GCHandle.Alloc(@string, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramStringARB(target, format, len, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region BindProgramARB(GLenum target, GLuint program)

        /// <summary>
        /// 
        /// </summary>
        public static         void glBindProgramARB(GLenum target, GLuint program)
        {
            Delegates.glBindProgramARB(target, program);
        }

        #endregion

        #region DeleteProgramsARB(GLsizei n, IntPtr programs)

        /// <summary>
        /// 
        /// </summary>
        public static         void glDeleteProgramsARB(GLsizei n, IntPtr programs)
        {
            Delegates.glDeleteProgramsARB(n, programs);
        }

        #endregion

        #region DeleteProgramsARB(GLsizei n, object programs)

        /// <summary>
        /// 
        /// </summary>
        public static         void glDeleteProgramsARB(GLsizei n, object programs)
        {
            GCHandle h0 = GCHandle.Alloc(programs, GCHandleType.Pinned);
            try
            {
                Delegates.glDeleteProgramsARB(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region DeleteProgramsARB(GLsizei n, GLuint[] programs)

        /// <summary>
        /// 
        /// </summary>
        public static         void glDeleteProgramsARB(GLsizei n, GLuint[] programs)
        {
            GCHandle h0 = GCHandle.Alloc(programs, GCHandleType.Pinned);
            try
            {
                Delegates.glDeleteProgramsARB(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GenProgramsARB(GLsizei n, IntPtr programs)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGenProgramsARB(GLsizei n, IntPtr programs)
        {
            Delegates.glGenProgramsARB(n, programs);
        }

        #endregion

        #region GenProgramsARB(GLsizei n, object programs)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGenProgramsARB(GLsizei n, object programs)
        {
            GCHandle h0 = GCHandle.Alloc(programs, GCHandleType.Pinned);
            try
            {
                Delegates.glGenProgramsARB(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GenProgramsARB(GLsizei n, GLuint[] programs)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGenProgramsARB(GLsizei n, GLuint[] programs)
        {
            GCHandle h0 = GCHandle.Alloc(programs, GCHandleType.Pinned);
            try
            {
                Delegates.glGenProgramsARB(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ProgramEnvParameter4dARB(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)

        /// <summary>
        /// 
        /// </summary>
        public static         void glProgramEnvParameter4dARB(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
        {
            Delegates.glProgramEnvParameter4dARB(target, index, x, y, z, w);
        }

        #endregion

        #region ProgramEnvParameter4dvARB(GLenum target, GLuint index, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glProgramEnvParameter4dvARB(GLenum target, GLuint index, IntPtr parameters)
        {
            Delegates.glProgramEnvParameter4dvARB(target, index, parameters);
        }

        #endregion

        #region ProgramEnvParameter4dvARB(GLenum target, GLuint index, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glProgramEnvParameter4dvARB(GLenum target, GLuint index, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramEnvParameter4dvARB(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ProgramEnvParameter4dvARB(GLenum target, GLuint index, GLdouble[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glProgramEnvParameter4dvARB(GLenum target, GLuint index, GLdouble[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramEnvParameter4dvARB(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ProgramEnvParameter4fARB(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)

        /// <summary>
        /// 
        /// </summary>
        public static         void glProgramEnvParameter4fARB(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
        {
            Delegates.glProgramEnvParameter4fARB(target, index, x, y, z, w);
        }

        #endregion

        #region ProgramEnvParameter4fvARB(GLenum target, GLuint index, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glProgramEnvParameter4fvARB(GLenum target, GLuint index, IntPtr parameters)
        {
            Delegates.glProgramEnvParameter4fvARB(target, index, parameters);
        }

        #endregion

        #region ProgramEnvParameter4fvARB(GLenum target, GLuint index, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glProgramEnvParameter4fvARB(GLenum target, GLuint index, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramEnvParameter4fvARB(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ProgramEnvParameter4fvARB(GLenum target, GLuint index, GLfloat[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glProgramEnvParameter4fvARB(GLenum target, GLuint index, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramEnvParameter4fvARB(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ProgramLocalParameter4dARB(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)

        /// <summary>
        /// 
        /// </summary>
        public static         void glProgramLocalParameter4dARB(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
        {
            Delegates.glProgramLocalParameter4dARB(target, index, x, y, z, w);
        }

        #endregion

        #region ProgramLocalParameter4dvARB(GLenum target, GLuint index, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glProgramLocalParameter4dvARB(GLenum target, GLuint index, IntPtr parameters)
        {
            Delegates.glProgramLocalParameter4dvARB(target, index, parameters);
        }

        #endregion

        #region ProgramLocalParameter4dvARB(GLenum target, GLuint index, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glProgramLocalParameter4dvARB(GLenum target, GLuint index, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramLocalParameter4dvARB(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ProgramLocalParameter4dvARB(GLenum target, GLuint index, GLdouble[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glProgramLocalParameter4dvARB(GLenum target, GLuint index, GLdouble[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramLocalParameter4dvARB(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ProgramLocalParameter4fARB(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)

        /// <summary>
        /// 
        /// </summary>
        public static         void glProgramLocalParameter4fARB(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
        {
            Delegates.glProgramLocalParameter4fARB(target, index, x, y, z, w);
        }

        #endregion

        #region ProgramLocalParameter4fvARB(GLenum target, GLuint index, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glProgramLocalParameter4fvARB(GLenum target, GLuint index, IntPtr parameters)
        {
            Delegates.glProgramLocalParameter4fvARB(target, index, parameters);
        }

        #endregion

        #region ProgramLocalParameter4fvARB(GLenum target, GLuint index, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glProgramLocalParameter4fvARB(GLenum target, GLuint index, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramLocalParameter4fvARB(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ProgramLocalParameter4fvARB(GLenum target, GLuint index, GLfloat[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glProgramLocalParameter4fvARB(GLenum target, GLuint index, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramLocalParameter4fvARB(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetProgramEnvParameterdvARB(GLenum target, GLuint index, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetProgramEnvParameterdvARB(GLenum target, GLuint index, IntPtr parameters)
        {
            Delegates.glGetProgramEnvParameterdvARB(target, index, parameters);
        }

        #endregion

        #region GetProgramEnvParameterdvARB(GLenum target, GLuint index, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetProgramEnvParameterdvARB(GLenum target, GLuint index, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramEnvParameterdvARB(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetProgramEnvParameterdvARB(GLenum target, GLuint index, GLdouble[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetProgramEnvParameterdvARB(GLenum target, GLuint index, GLdouble[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramEnvParameterdvARB(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetProgramEnvParameterfvARB(GLenum target, GLuint index, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetProgramEnvParameterfvARB(GLenum target, GLuint index, IntPtr parameters)
        {
            Delegates.glGetProgramEnvParameterfvARB(target, index, parameters);
        }

        #endregion

        #region GetProgramEnvParameterfvARB(GLenum target, GLuint index, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetProgramEnvParameterfvARB(GLenum target, GLuint index, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramEnvParameterfvARB(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetProgramEnvParameterfvARB(GLenum target, GLuint index, GLfloat[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetProgramEnvParameterfvARB(GLenum target, GLuint index, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramEnvParameterfvARB(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetProgramLocalParameterdvARB(GLenum target, GLuint index, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetProgramLocalParameterdvARB(GLenum target, GLuint index, IntPtr parameters)
        {
            Delegates.glGetProgramLocalParameterdvARB(target, index, parameters);
        }

        #endregion

        #region GetProgramLocalParameterdvARB(GLenum target, GLuint index, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetProgramLocalParameterdvARB(GLenum target, GLuint index, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramLocalParameterdvARB(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetProgramLocalParameterdvARB(GLenum target, GLuint index, GLdouble[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetProgramLocalParameterdvARB(GLenum target, GLuint index, GLdouble[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramLocalParameterdvARB(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetProgramLocalParameterfvARB(GLenum target, GLuint index, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetProgramLocalParameterfvARB(GLenum target, GLuint index, IntPtr parameters)
        {
            Delegates.glGetProgramLocalParameterfvARB(target, index, parameters);
        }

        #endregion

        #region GetProgramLocalParameterfvARB(GLenum target, GLuint index, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetProgramLocalParameterfvARB(GLenum target, GLuint index, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramLocalParameterfvARB(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetProgramLocalParameterfvARB(GLenum target, GLuint index, GLfloat[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetProgramLocalParameterfvARB(GLenum target, GLuint index, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramLocalParameterfvARB(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetProgramivARB(GLenum target, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetProgramivARB(GLenum target, GLenum pname, IntPtr parameters)
        {
            Delegates.glGetProgramivARB(target, pname, parameters);
        }

        #endregion

        #region GetProgramivARB(GLenum target, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetProgramivARB(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramivARB(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetProgramivARB(GLenum target, GLenum pname, GLint[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetProgramivARB(GLenum target, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramivARB(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetProgramStringARB(GLenum target, GLenum pname, IntPtr @string)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetProgramStringARB(GLenum target, GLenum pname, IntPtr @string)
        {
            Delegates.glGetProgramStringARB(target, pname, @string);
        }

        #endregion

        #region GetProgramStringARB(GLenum target, GLenum pname, object @string)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetProgramStringARB(GLenum target, GLenum pname, object @string)
        {
            GCHandle h0 = GCHandle.Alloc(@string, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramStringARB(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetVertexAttribdvARB(GLuint index, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetVertexAttribdvARB(GLuint index, GLenum pname, IntPtr parameters)
        {
            Delegates.glGetVertexAttribdvARB(index, pname, parameters);
        }

        #endregion

        #region GetVertexAttribdvARB(GLuint index, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetVertexAttribdvARB(GLuint index, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVertexAttribdvARB(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetVertexAttribdvARB(GLuint index, GLenum pname, GLdouble[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetVertexAttribdvARB(GLuint index, GLenum pname, GLdouble[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVertexAttribdvARB(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetVertexAttribfvARB(GLuint index, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetVertexAttribfvARB(GLuint index, GLenum pname, IntPtr parameters)
        {
            Delegates.glGetVertexAttribfvARB(index, pname, parameters);
        }

        #endregion

        #region GetVertexAttribfvARB(GLuint index, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetVertexAttribfvARB(GLuint index, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVertexAttribfvARB(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetVertexAttribfvARB(GLuint index, GLenum pname, GLfloat[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetVertexAttribfvARB(GLuint index, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVertexAttribfvARB(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetVertexAttribivARB(GLuint index, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetVertexAttribivARB(GLuint index, GLenum pname, IntPtr parameters)
        {
            Delegates.glGetVertexAttribivARB(index, pname, parameters);
        }

        #endregion

        #region GetVertexAttribivARB(GLuint index, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetVertexAttribivARB(GLuint index, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVertexAttribivARB(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetVertexAttribivARB(GLuint index, GLenum pname, GLint[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetVertexAttribivARB(GLuint index, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVertexAttribivARB(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetVertexAttribPointervARB(GLuint index, GLenum pname, IntPtr pointer)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetVertexAttribPointervARB(GLuint index, GLenum pname, IntPtr pointer)
        {
            Delegates.glGetVertexAttribPointervARB(index, pname, pointer);
        }

        #endregion

        #region GetVertexAttribPointervARB(GLuint index, GLenum pname, object pointer)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetVertexAttribPointervARB(GLuint index, GLenum pname, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVertexAttribPointervARB(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetVertexAttribPointervARB(GLuint index, GLenum pname, IntPtr[] pointer)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetVertexAttribPointervARB(GLuint index, GLenum pname, IntPtr[] pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVertexAttribPointervARB(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region IsProgramARB(GLuint program)

        /// <summary>
        /// 
        /// </summary>
        public static         GLboolean glIsProgramARB(GLuint program)
        {
            return Delegates.glIsProgramARB(program);
        }

        #endregion

        #region BindBufferARB(GLenum target, GLuint buffer)

        /// <summary>
        /// 
        /// </summary>
        public static         void glBindBufferARB(GLenum target, GLuint buffer)
        {
            Delegates.glBindBufferARB(target, buffer);
        }

        #endregion

        #region DeleteBuffersARB(GLsizei n, IntPtr buffers)

        /// <summary>
        /// 
        /// </summary>
        public static         void glDeleteBuffersARB(GLsizei n, IntPtr buffers)
        {
            Delegates.glDeleteBuffersARB(n, buffers);
        }

        #endregion

        #region DeleteBuffersARB(GLsizei n, object buffers)

        /// <summary>
        /// 
        /// </summary>
        public static         void glDeleteBuffersARB(GLsizei n, object buffers)
        {
            GCHandle h0 = GCHandle.Alloc(buffers, GCHandleType.Pinned);
            try
            {
                Delegates.glDeleteBuffersARB(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region DeleteBuffersARB(GLsizei n, GLuint[] buffers)

        /// <summary>
        /// 
        /// </summary>
        public static         void glDeleteBuffersARB(GLsizei n, GLuint[] buffers)
        {
            GCHandle h0 = GCHandle.Alloc(buffers, GCHandleType.Pinned);
            try
            {
                Delegates.glDeleteBuffersARB(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GenBuffersARB(GLsizei n, IntPtr buffers)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGenBuffersARB(GLsizei n, IntPtr buffers)
        {
            Delegates.glGenBuffersARB(n, buffers);
        }

        #endregion

        #region GenBuffersARB(GLsizei n, object buffers)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGenBuffersARB(GLsizei n, object buffers)
        {
            GCHandle h0 = GCHandle.Alloc(buffers, GCHandleType.Pinned);
            try
            {
                Delegates.glGenBuffersARB(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GenBuffersARB(GLsizei n, GLuint[] buffers)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGenBuffersARB(GLsizei n, GLuint[] buffers)
        {
            GCHandle h0 = GCHandle.Alloc(buffers, GCHandleType.Pinned);
            try
            {
                Delegates.glGenBuffersARB(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region IsBufferARB(GLuint buffer)

        /// <summary>
        /// 
        /// </summary>
        public static         GLboolean glIsBufferARB(GLuint buffer)
        {
            return Delegates.glIsBufferARB(buffer);
        }

        #endregion

        #region BufferDataARB(GLenum target, GLsizeiptrARB size, IntPtr data, GLenum usage)

        /// <summary>
        /// 
        /// </summary>
        public static         void glBufferDataARB(GLenum target, GLsizeiptrARB size, IntPtr data, GLenum usage)
        {
            Delegates.glBufferDataARB(target, size, data, usage);
        }

        #endregion

        #region BufferDataARB(GLenum target, GLsizeiptrARB size, object data, GLenum usage)

        /// <summary>
        /// 
        /// </summary>
        public static         void glBufferDataARB(GLenum target, GLsizeiptrARB size, object data, GLenum usage)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glBufferDataARB(target, size, h0.AddrOfPinnedObject(), usage);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region BufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, IntPtr data)

        /// <summary>
        /// 
        /// </summary>
        public static         void glBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, IntPtr data)
        {
            Delegates.glBufferSubDataARB(target, offset, size, data);
        }

        #endregion

        #region BufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, object data)

        /// <summary>
        /// 
        /// </summary>
        public static         void glBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glBufferSubDataARB(target, offset, size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, IntPtr data)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, IntPtr data)
        {
            Delegates.glGetBufferSubDataARB(target, offset, size, data);
        }

        #endregion

        #region GetBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, object data)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glGetBufferSubDataARB(target, offset, size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MapBufferARB(GLenum target, GLenum access)

        /// <summary>
        /// 
        /// </summary>
        public static         IntPtr glMapBufferARB(GLenum target, GLenum access)
        {
            return Delegates.glMapBufferARB(target, access);
        }

        #endregion

        #region UnmapBufferARB(GLenum target)

        /// <summary>
        /// 
        /// </summary>
        public static         GLboolean glUnmapBufferARB(GLenum target)
        {
            return Delegates.glUnmapBufferARB(target);
        }

        #endregion

        #region GetBufferParameterivARB(GLenum target, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetBufferParameterivARB(GLenum target, GLenum pname, IntPtr parameters)
        {
            Delegates.glGetBufferParameterivARB(target, pname, parameters);
        }

        #endregion

        #region GetBufferParameterivARB(GLenum target, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetBufferParameterivARB(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetBufferParameterivARB(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetBufferParameterivARB(GLenum target, GLenum pname, GLint[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetBufferParameterivARB(GLenum target, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetBufferParameterivARB(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetBufferPointervARB(GLenum target, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetBufferPointervARB(GLenum target, GLenum pname, IntPtr parameters)
        {
            Delegates.glGetBufferPointervARB(target, pname, parameters);
        }

        #endregion

        #region GetBufferPointervARB(GLenum target, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetBufferPointervARB(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetBufferPointervARB(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetBufferPointervARB(GLenum target, GLenum pname, IntPtr[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetBufferPointervARB(GLenum target, GLenum pname, IntPtr[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetBufferPointervARB(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GenQueriesARB(GLsizei n, IntPtr ids)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGenQueriesARB(GLsizei n, IntPtr ids)
        {
            Delegates.glGenQueriesARB(n, ids);
        }

        #endregion

        #region GenQueriesARB(GLsizei n, object ids)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGenQueriesARB(GLsizei n, object ids)
        {
            GCHandle h0 = GCHandle.Alloc(ids, GCHandleType.Pinned);
            try
            {
                Delegates.glGenQueriesARB(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GenQueriesARB(GLsizei n, GLuint[] ids)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGenQueriesARB(GLsizei n, GLuint[] ids)
        {
            GCHandle h0 = GCHandle.Alloc(ids, GCHandleType.Pinned);
            try
            {
                Delegates.glGenQueriesARB(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region DeleteQueriesARB(GLsizei n, IntPtr ids)

        /// <summary>
        /// 
        /// </summary>
        public static         void glDeleteQueriesARB(GLsizei n, IntPtr ids)
        {
            Delegates.glDeleteQueriesARB(n, ids);
        }

        #endregion

        #region DeleteQueriesARB(GLsizei n, object ids)

        /// <summary>
        /// 
        /// </summary>
        public static         void glDeleteQueriesARB(GLsizei n, object ids)
        {
            GCHandle h0 = GCHandle.Alloc(ids, GCHandleType.Pinned);
            try
            {
                Delegates.glDeleteQueriesARB(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region DeleteQueriesARB(GLsizei n, GLuint[] ids)

        /// <summary>
        /// 
        /// </summary>
        public static         void glDeleteQueriesARB(GLsizei n, GLuint[] ids)
        {
            GCHandle h0 = GCHandle.Alloc(ids, GCHandleType.Pinned);
            try
            {
                Delegates.glDeleteQueriesARB(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region IsQueryARB(GLuint id)

        /// <summary>
        /// 
        /// </summary>
        public static         GLboolean glIsQueryARB(GLuint id)
        {
            return Delegates.glIsQueryARB(id);
        }

        #endregion

        #region BeginQueryARB(GLenum target, GLuint id)

        /// <summary>
        /// 
        /// </summary>
        public static         void glBeginQueryARB(GLenum target, GLuint id)
        {
            Delegates.glBeginQueryARB(target, id);
        }

        #endregion

        #region EndQueryARB(GLenum target)

        /// <summary>
        /// 
        /// </summary>
        public static         void glEndQueryARB(GLenum target)
        {
            Delegates.glEndQueryARB(target);
        }

        #endregion

        #region GetQueryivARB(GLenum target, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetQueryivARB(GLenum target, GLenum pname, IntPtr parameters)
        {
            Delegates.glGetQueryivARB(target, pname, parameters);
        }

        #endregion

        #region GetQueryivARB(GLenum target, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetQueryivARB(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetQueryivARB(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetQueryivARB(GLenum target, GLenum pname, GLint[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetQueryivARB(GLenum target, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetQueryivARB(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetQueryObjectivARB(GLuint id, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetQueryObjectivARB(GLuint id, GLenum pname, IntPtr parameters)
        {
            Delegates.glGetQueryObjectivARB(id, pname, parameters);
        }

        #endregion

        #region GetQueryObjectivARB(GLuint id, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetQueryObjectivARB(GLuint id, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetQueryObjectivARB(id, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetQueryObjectivARB(GLuint id, GLenum pname, GLint[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetQueryObjectivARB(GLuint id, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetQueryObjectivARB(id, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetQueryObjectuivARB(GLuint id, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetQueryObjectuivARB(GLuint id, GLenum pname, IntPtr parameters)
        {
            Delegates.glGetQueryObjectuivARB(id, pname, parameters);
        }

        #endregion

        #region GetQueryObjectuivARB(GLuint id, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetQueryObjectuivARB(GLuint id, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetQueryObjectuivARB(id, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetQueryObjectuivARB(GLuint id, GLenum pname, GLuint[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetQueryObjectuivARB(GLuint id, GLenum pname, GLuint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetQueryObjectuivARB(id, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region DeleteObjectARB(GLhandleARB obj)

        /// <summary>
        /// 
        /// </summary>
        public static         void glDeleteObjectARB(GLhandleARB obj)
        {
            Delegates.glDeleteObjectARB(obj);
        }

        #endregion

        #region GetHandleARB(GLenum pname)

        /// <summary>
        /// 
        /// </summary>
        public static         GLhandleARB glGetHandleARB(GLenum pname)
        {
            return Delegates.glGetHandleARB(pname);
        }

        #endregion

        #region DetachObjectARB(GLhandleARB containerObj, GLhandleARB attachedObj)

        /// <summary>
        /// 
        /// </summary>
        public static         void glDetachObjectARB(GLhandleARB containerObj, GLhandleARB attachedObj)
        {
            Delegates.glDetachObjectARB(containerObj, attachedObj);
        }

        #endregion

        #region CreateShaderObjectARB(GLenum shaderType)

        /// <summary>
        /// 
        /// </summary>
        public static         GLhandleARB glCreateShaderObjectARB(GLenum shaderType)
        {
            return Delegates.glCreateShaderObjectARB(shaderType);
        }

        #endregion

        #region ShaderSourceARB(GLhandleARB shaderObj, GLsizei count, string[] @string, IntPtr length)

        /// <summary>
        /// 
        /// </summary>
        public static         void glShaderSourceARB(GLhandleARB shaderObj, GLsizei count, string[] @string, IntPtr length)
        {
            Delegates.glShaderSourceARB(shaderObj, count, @string, length);
        }

        #endregion

        #region ShaderSourceARB(GLhandleARB shaderObj, GLsizei count, string[] @string, object length)

        /// <summary>
        /// 
        /// </summary>
        public static         void glShaderSourceARB(GLhandleARB shaderObj, GLsizei count, string[] @string, object length)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            try
            {
                Delegates.glShaderSourceARB(shaderObj, count, @string, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ShaderSourceARB(GLhandleARB shaderObj, GLsizei count, string[] @string, GLint[] length)

        /// <summary>
        /// 
        /// </summary>
        public static         void glShaderSourceARB(GLhandleARB shaderObj, GLsizei count, string[] @string, GLint[] length)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            try
            {
                Delegates.glShaderSourceARB(shaderObj, count, @string, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region CompileShaderARB(GLhandleARB shaderObj)

        /// <summary>
        /// 
        /// </summary>
        public static         void glCompileShaderARB(GLhandleARB shaderObj)
        {
            Delegates.glCompileShaderARB(shaderObj);
        }

        #endregion

        #region CreateProgramObjectARB()

        /// <summary>
        /// 
        /// </summary>
        public static         GLhandleARB glCreateProgramObjectARB()
        {
            return Delegates.glCreateProgramObjectARB();
        }

        #endregion

        #region AttachObjectARB(GLhandleARB containerObj, GLhandleARB obj)

        /// <summary>
        /// 
        /// </summary>
        public static         void glAttachObjectARB(GLhandleARB containerObj, GLhandleARB obj)
        {
            Delegates.glAttachObjectARB(containerObj, obj);
        }

        #endregion

        #region LinkProgramARB(GLhandleARB programObj)

        /// <summary>
        /// 
        /// </summary>
        public static         void glLinkProgramARB(GLhandleARB programObj)
        {
            Delegates.glLinkProgramARB(programObj);
        }

        #endregion

        #region UseProgramObjectARB(GLhandleARB programObj)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUseProgramObjectARB(GLhandleARB programObj)
        {
            Delegates.glUseProgramObjectARB(programObj);
        }

        #endregion

        #region ValidateProgramARB(GLhandleARB programObj)

        /// <summary>
        /// 
        /// </summary>
        public static         void glValidateProgramARB(GLhandleARB programObj)
        {
            Delegates.glValidateProgramARB(programObj);
        }

        #endregion

        #region Uniform1fARB(GLint location, GLfloat v0)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUniform1fARB(GLint location, GLfloat v0)
        {
            Delegates.glUniform1fARB(location, v0);
        }

        #endregion

        #region Uniform2fARB(GLint location, GLfloat v0, GLfloat v1)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUniform2fARB(GLint location, GLfloat v0, GLfloat v1)
        {
            Delegates.glUniform2fARB(location, v0, v1);
        }

        #endregion

        #region Uniform3fARB(GLint location, GLfloat v0, GLfloat v1, GLfloat v2)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUniform3fARB(GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
        {
            Delegates.glUniform3fARB(location, v0, v1, v2);
        }

        #endregion

        #region Uniform4fARB(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUniform4fARB(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
        {
            Delegates.glUniform4fARB(location, v0, v1, v2, v3);
        }

        #endregion

        #region Uniform1iARB(GLint location, GLint v0)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUniform1iARB(GLint location, GLint v0)
        {
            Delegates.glUniform1iARB(location, v0);
        }

        #endregion

        #region Uniform2iARB(GLint location, GLint v0, GLint v1)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUniform2iARB(GLint location, GLint v0, GLint v1)
        {
            Delegates.glUniform2iARB(location, v0, v1);
        }

        #endregion

        #region Uniform3iARB(GLint location, GLint v0, GLint v1, GLint v2)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUniform3iARB(GLint location, GLint v0, GLint v1, GLint v2)
        {
            Delegates.glUniform3iARB(location, v0, v1, v2);
        }

        #endregion

        #region Uniform4iARB(GLint location, GLint v0, GLint v1, GLint v2, GLint v3)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUniform4iARB(GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
        {
            Delegates.glUniform4iARB(location, v0, v1, v2, v3);
        }

        #endregion

        #region Uniform1fvARB(GLint location, GLsizei count, IntPtr value)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUniform1fvARB(GLint location, GLsizei count, IntPtr value)
        {
            Delegates.glUniform1fvARB(location, count, value);
        }

        #endregion

        #region Uniform1fvARB(GLint location, GLsizei count, object value)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUniform1fvARB(GLint location, GLsizei count, object value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniform1fvARB(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Uniform1fvARB(GLint location, GLsizei count, GLfloat[] value)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUniform1fvARB(GLint location, GLsizei count, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniform1fvARB(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Uniform2fvARB(GLint location, GLsizei count, IntPtr value)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUniform2fvARB(GLint location, GLsizei count, IntPtr value)
        {
            Delegates.glUniform2fvARB(location, count, value);
        }

        #endregion

        #region Uniform2fvARB(GLint location, GLsizei count, object value)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUniform2fvARB(GLint location, GLsizei count, object value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniform2fvARB(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Uniform2fvARB(GLint location, GLsizei count, GLfloat[] value)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUniform2fvARB(GLint location, GLsizei count, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniform2fvARB(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Uniform3fvARB(GLint location, GLsizei count, IntPtr value)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUniform3fvARB(GLint location, GLsizei count, IntPtr value)
        {
            Delegates.glUniform3fvARB(location, count, value);
        }

        #endregion

        #region Uniform3fvARB(GLint location, GLsizei count, object value)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUniform3fvARB(GLint location, GLsizei count, object value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniform3fvARB(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Uniform3fvARB(GLint location, GLsizei count, GLfloat[] value)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUniform3fvARB(GLint location, GLsizei count, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniform3fvARB(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Uniform4fvARB(GLint location, GLsizei count, IntPtr value)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUniform4fvARB(GLint location, GLsizei count, IntPtr value)
        {
            Delegates.glUniform4fvARB(location, count, value);
        }

        #endregion

        #region Uniform4fvARB(GLint location, GLsizei count, object value)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUniform4fvARB(GLint location, GLsizei count, object value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniform4fvARB(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Uniform4fvARB(GLint location, GLsizei count, GLfloat[] value)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUniform4fvARB(GLint location, GLsizei count, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniform4fvARB(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Uniform1ivARB(GLint location, GLsizei count, IntPtr value)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUniform1ivARB(GLint location, GLsizei count, IntPtr value)
        {
            Delegates.glUniform1ivARB(location, count, value);
        }

        #endregion

        #region Uniform1ivARB(GLint location, GLsizei count, object value)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUniform1ivARB(GLint location, GLsizei count, object value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniform1ivARB(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Uniform1ivARB(GLint location, GLsizei count, GLint[] value)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUniform1ivARB(GLint location, GLsizei count, GLint[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniform1ivARB(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Uniform2ivARB(GLint location, GLsizei count, IntPtr value)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUniform2ivARB(GLint location, GLsizei count, IntPtr value)
        {
            Delegates.glUniform2ivARB(location, count, value);
        }

        #endregion

        #region Uniform2ivARB(GLint location, GLsizei count, object value)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUniform2ivARB(GLint location, GLsizei count, object value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniform2ivARB(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Uniform2ivARB(GLint location, GLsizei count, GLint[] value)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUniform2ivARB(GLint location, GLsizei count, GLint[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniform2ivARB(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Uniform3ivARB(GLint location, GLsizei count, IntPtr value)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUniform3ivARB(GLint location, GLsizei count, IntPtr value)
        {
            Delegates.glUniform3ivARB(location, count, value);
        }

        #endregion

        #region Uniform3ivARB(GLint location, GLsizei count, object value)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUniform3ivARB(GLint location, GLsizei count, object value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniform3ivARB(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Uniform3ivARB(GLint location, GLsizei count, GLint[] value)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUniform3ivARB(GLint location, GLsizei count, GLint[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniform3ivARB(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Uniform4ivARB(GLint location, GLsizei count, IntPtr value)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUniform4ivARB(GLint location, GLsizei count, IntPtr value)
        {
            Delegates.glUniform4ivARB(location, count, value);
        }

        #endregion

        #region Uniform4ivARB(GLint location, GLsizei count, object value)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUniform4ivARB(GLint location, GLsizei count, object value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniform4ivARB(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Uniform4ivARB(GLint location, GLsizei count, GLint[] value)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUniform4ivARB(GLint location, GLsizei count, GLint[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniform4ivARB(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region UniformMatrix2fvARB(GLint location, GLsizei count, GLboolean transpose, IntPtr value)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUniformMatrix2fvARB(GLint location, GLsizei count, GLboolean transpose, IntPtr value)
        {
            Delegates.glUniformMatrix2fvARB(location, count, transpose, value);
        }

        #endregion

        #region UniformMatrix2fvARB(GLint location, GLsizei count, GLboolean transpose, object value)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUniformMatrix2fvARB(GLint location, GLsizei count, GLboolean transpose, object value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniformMatrix2fvARB(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region UniformMatrix2fvARB(GLint location, GLsizei count, GLboolean transpose, GLfloat[] value)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUniformMatrix2fvARB(GLint location, GLsizei count, GLboolean transpose, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniformMatrix2fvARB(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region UniformMatrix3fvARB(GLint location, GLsizei count, GLboolean transpose, IntPtr value)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUniformMatrix3fvARB(GLint location, GLsizei count, GLboolean transpose, IntPtr value)
        {
            Delegates.glUniformMatrix3fvARB(location, count, transpose, value);
        }

        #endregion

        #region UniformMatrix3fvARB(GLint location, GLsizei count, GLboolean transpose, object value)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUniformMatrix3fvARB(GLint location, GLsizei count, GLboolean transpose, object value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniformMatrix3fvARB(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region UniformMatrix3fvARB(GLint location, GLsizei count, GLboolean transpose, GLfloat[] value)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUniformMatrix3fvARB(GLint location, GLsizei count, GLboolean transpose, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniformMatrix3fvARB(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region UniformMatrix4fvARB(GLint location, GLsizei count, GLboolean transpose, IntPtr value)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUniformMatrix4fvARB(GLint location, GLsizei count, GLboolean transpose, IntPtr value)
        {
            Delegates.glUniformMatrix4fvARB(location, count, transpose, value);
        }

        #endregion

        #region UniformMatrix4fvARB(GLint location, GLsizei count, GLboolean transpose, object value)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUniformMatrix4fvARB(GLint location, GLsizei count, GLboolean transpose, object value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniformMatrix4fvARB(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region UniformMatrix4fvARB(GLint location, GLsizei count, GLboolean transpose, GLfloat[] value)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUniformMatrix4fvARB(GLint location, GLsizei count, GLboolean transpose, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniformMatrix4fvARB(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetObjectParameterfvARB(GLhandleARB obj, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetObjectParameterfvARB(GLhandleARB obj, GLenum pname, IntPtr parameters)
        {
            Delegates.glGetObjectParameterfvARB(obj, pname, parameters);
        }

        #endregion

        #region GetObjectParameterfvARB(GLhandleARB obj, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetObjectParameterfvARB(GLhandleARB obj, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetObjectParameterfvARB(obj, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetObjectParameterfvARB(GLhandleARB obj, GLenum pname, GLfloat[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetObjectParameterfvARB(GLhandleARB obj, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetObjectParameterfvARB(obj, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetObjectParameterivARB(GLhandleARB obj, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetObjectParameterivARB(GLhandleARB obj, GLenum pname, IntPtr parameters)
        {
            Delegates.glGetObjectParameterivARB(obj, pname, parameters);
        }

        #endregion

        #region GetObjectParameterivARB(GLhandleARB obj, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetObjectParameterivARB(GLhandleARB obj, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetObjectParameterivARB(obj, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetObjectParameterivARB(GLhandleARB obj, GLenum pname, GLint[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetObjectParameterivARB(GLhandleARB obj, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetObjectParameterivARB(obj, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetInfoLogARB(GLhandleARB obj, GLsizei maxLength, IntPtr length, StringBuilder infoLog)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetInfoLogARB(GLhandleARB obj, GLsizei maxLength, IntPtr length, StringBuilder infoLog)
        {
            Delegates.glGetInfoLogARB(obj, maxLength, length, infoLog);
        }

        #endregion

        #region GetInfoLogARB(GLhandleARB obj, GLsizei maxLength, object length, StringBuilder infoLog)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetInfoLogARB(GLhandleARB obj, GLsizei maxLength, object length, StringBuilder infoLog)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            try
            {
                Delegates.glGetInfoLogARB(obj, maxLength, h0.AddrOfPinnedObject(), infoLog);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetInfoLogARB(GLhandleARB obj, GLsizei maxLength, GLsizei[] length, StringBuilder infoLog)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetInfoLogARB(GLhandleARB obj, GLsizei maxLength, GLsizei[] length, StringBuilder infoLog)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            try
            {
                Delegates.glGetInfoLogARB(obj, maxLength, h0.AddrOfPinnedObject(), infoLog);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, IntPtr count, IntPtr obj)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, IntPtr count, IntPtr obj)
        {
            Delegates.glGetAttachedObjectsARB(containerObj, maxCount, count, obj);
        }

        #endregion

        #region GetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, IntPtr count, object obj)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, IntPtr count, object obj)
        {
            GCHandle h0 = GCHandle.Alloc(obj, GCHandleType.Pinned);
            try
            {
                Delegates.glGetAttachedObjectsARB(containerObj, maxCount, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, IntPtr count, GLhandleARB[] obj)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, IntPtr count, GLhandleARB[] obj)
        {
            GCHandle h0 = GCHandle.Alloc(obj, GCHandleType.Pinned);
            try
            {
                Delegates.glGetAttachedObjectsARB(containerObj, maxCount, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, object count, IntPtr obj)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, object count, IntPtr obj)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glGetAttachedObjectsARB(containerObj, maxCount, h0.AddrOfPinnedObject(), obj);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, object count, object obj)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, object count, object obj)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(obj, GCHandleType.Pinned);
            try
            {
                Delegates.glGetAttachedObjectsARB(containerObj, maxCount, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, object count, GLhandleARB[] obj)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, object count, GLhandleARB[] obj)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(obj, GCHandleType.Pinned);
            try
            {
                Delegates.glGetAttachedObjectsARB(containerObj, maxCount, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, GLsizei[] count, IntPtr obj)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, GLsizei[] count, IntPtr obj)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glGetAttachedObjectsARB(containerObj, maxCount, h0.AddrOfPinnedObject(), obj);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, GLsizei[] count, object obj)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, GLsizei[] count, object obj)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(obj, GCHandleType.Pinned);
            try
            {
                Delegates.glGetAttachedObjectsARB(containerObj, maxCount, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, GLsizei[] count, GLhandleARB[] obj)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, GLsizei[] count, GLhandleARB[] obj)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(obj, GCHandleType.Pinned);
            try
            {
                Delegates.glGetAttachedObjectsARB(containerObj, maxCount, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetUniformLocationARB(GLhandleARB programObj, string name)

        /// <summary>
        /// 
        /// </summary>
        public static         GLint glGetUniformLocationARB(GLhandleARB programObj, string name)
        {
            return Delegates.glGetUniformLocationARB(programObj, name);
        }

        #endregion

        #region GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, IntPtr size, IntPtr type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, IntPtr size, IntPtr type, StringBuilder name)
        {
            Delegates.glGetActiveUniformARB(programObj, index, maxLength, length, size, type, name);
        }

        #endregion

        #region GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, IntPtr size, object type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, IntPtr size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniformARB(programObj, index, maxLength, length, size, h0.AddrOfPinnedObject(), name);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, IntPtr size, GLenum[] type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, IntPtr size, GLenum[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniformARB(programObj, index, maxLength, length, size, h0.AddrOfPinnedObject(), name);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, object size, IntPtr type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, object size, IntPtr type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(size, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniformARB(programObj, index, maxLength, length, h0.AddrOfPinnedObject(), type, name);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, object size, object type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, object size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniformARB(programObj, index, maxLength, length, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, object size, GLenum[] type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, object size, GLenum[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniformARB(programObj, index, maxLength, length, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, GLint[] size, IntPtr type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, GLint[] size, IntPtr type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(size, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniformARB(programObj, index, maxLength, length, h0.AddrOfPinnedObject(), type, name);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, GLint[] size, object type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, GLint[] size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniformARB(programObj, index, maxLength, length, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, GLint[] size, GLenum[] type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, GLint[] size, GLenum[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniformARB(programObj, index, maxLength, length, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, IntPtr size, IntPtr type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, IntPtr size, IntPtr type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniformARB(programObj, index, maxLength, h0.AddrOfPinnedObject(), size, type, name);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, IntPtr size, object type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, IntPtr size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniformARB(programObj, index, maxLength, h0.AddrOfPinnedObject(), size, h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, IntPtr size, GLenum[] type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, IntPtr size, GLenum[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniformARB(programObj, index, maxLength, h0.AddrOfPinnedObject(), size, h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, object size, IntPtr type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, object size, IntPtr type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniformARB(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), type, name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, object size, object type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, object size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniformARB(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, object size, GLenum[] type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, object size, GLenum[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniformARB(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, GLint[] size, IntPtr type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, GLint[] size, IntPtr type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniformARB(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), type, name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, GLint[] size, object type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, GLint[] size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniformARB(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, GLint[] size, GLenum[] type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, GLint[] size, GLenum[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniformARB(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, IntPtr size, IntPtr type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, IntPtr size, IntPtr type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniformARB(programObj, index, maxLength, h0.AddrOfPinnedObject(), size, type, name);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, IntPtr size, object type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, IntPtr size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniformARB(programObj, index, maxLength, h0.AddrOfPinnedObject(), size, h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, IntPtr size, GLenum[] type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, IntPtr size, GLenum[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniformARB(programObj, index, maxLength, h0.AddrOfPinnedObject(), size, h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, object size, IntPtr type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, object size, IntPtr type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniformARB(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), type, name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, object size, object type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, object size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniformARB(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, object size, GLenum[] type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, object size, GLenum[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniformARB(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, GLint[] size, IntPtr type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, GLint[] size, IntPtr type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniformARB(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), type, name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, GLint[] size, object type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, GLint[] size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniformARB(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, GLint[] size, GLenum[] type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, GLint[] size, GLenum[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniformARB(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetUniformfvARB(GLhandleARB programObj, GLint location, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetUniformfvARB(GLhandleARB programObj, GLint location, IntPtr parameters)
        {
            Delegates.glGetUniformfvARB(programObj, location, parameters);
        }

        #endregion

        #region GetUniformfvARB(GLhandleARB programObj, GLint location, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetUniformfvARB(GLhandleARB programObj, GLint location, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetUniformfvARB(programObj, location, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetUniformfvARB(GLhandleARB programObj, GLint location, GLfloat[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetUniformfvARB(GLhandleARB programObj, GLint location, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetUniformfvARB(programObj, location, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetUniformivARB(GLhandleARB programObj, GLint location, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetUniformivARB(GLhandleARB programObj, GLint location, IntPtr parameters)
        {
            Delegates.glGetUniformivARB(programObj, location, parameters);
        }

        #endregion

        #region GetUniformivARB(GLhandleARB programObj, GLint location, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetUniformivARB(GLhandleARB programObj, GLint location, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetUniformivARB(programObj, location, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetUniformivARB(GLhandleARB programObj, GLint location, GLint[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetUniformivARB(GLhandleARB programObj, GLint location, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetUniformivARB(programObj, location, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetShaderSourceARB(GLhandleARB obj, GLsizei maxLength, IntPtr length, StringBuilder source)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetShaderSourceARB(GLhandleARB obj, GLsizei maxLength, IntPtr length, StringBuilder source)
        {
            Delegates.glGetShaderSourceARB(obj, maxLength, length, source);
        }

        #endregion

        #region GetShaderSourceARB(GLhandleARB obj, GLsizei maxLength, object length, StringBuilder source)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetShaderSourceARB(GLhandleARB obj, GLsizei maxLength, object length, StringBuilder source)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            try
            {
                Delegates.glGetShaderSourceARB(obj, maxLength, h0.AddrOfPinnedObject(), source);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetShaderSourceARB(GLhandleARB obj, GLsizei maxLength, GLsizei[] length, StringBuilder source)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetShaderSourceARB(GLhandleARB obj, GLsizei maxLength, GLsizei[] length, StringBuilder source)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            try
            {
                Delegates.glGetShaderSourceARB(obj, maxLength, h0.AddrOfPinnedObject(), source);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region BindAttribLocationARB(GLhandleARB programObj, GLuint index, string name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glBindAttribLocationARB(GLhandleARB programObj, GLuint index, string name)
        {
            Delegates.glBindAttribLocationARB(programObj, index, name);
        }

        #endregion

        #region GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, IntPtr size, IntPtr type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, IntPtr size, IntPtr type, StringBuilder name)
        {
            Delegates.glGetActiveAttribARB(programObj, index, maxLength, length, size, type, name);
        }

        #endregion

        #region GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, IntPtr size, object type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, IntPtr size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttribARB(programObj, index, maxLength, length, size, h0.AddrOfPinnedObject(), name);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, IntPtr size, GLenum[] type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, IntPtr size, GLenum[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttribARB(programObj, index, maxLength, length, size, h0.AddrOfPinnedObject(), name);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, object size, IntPtr type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, object size, IntPtr type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(size, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttribARB(programObj, index, maxLength, length, h0.AddrOfPinnedObject(), type, name);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, object size, object type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, object size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttribARB(programObj, index, maxLength, length, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, object size, GLenum[] type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, object size, GLenum[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttribARB(programObj, index, maxLength, length, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, GLint[] size, IntPtr type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, GLint[] size, IntPtr type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(size, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttribARB(programObj, index, maxLength, length, h0.AddrOfPinnedObject(), type, name);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, GLint[] size, object type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, GLint[] size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttribARB(programObj, index, maxLength, length, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, GLint[] size, GLenum[] type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, IntPtr length, GLint[] size, GLenum[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttribARB(programObj, index, maxLength, length, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, IntPtr size, IntPtr type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, IntPtr size, IntPtr type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttribARB(programObj, index, maxLength, h0.AddrOfPinnedObject(), size, type, name);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, IntPtr size, object type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, IntPtr size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttribARB(programObj, index, maxLength, h0.AddrOfPinnedObject(), size, h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, IntPtr size, GLenum[] type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, IntPtr size, GLenum[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttribARB(programObj, index, maxLength, h0.AddrOfPinnedObject(), size, h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, object size, IntPtr type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, object size, IntPtr type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttribARB(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), type, name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, object size, object type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, object size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttribARB(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, object size, GLenum[] type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, object size, GLenum[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttribARB(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, GLint[] size, IntPtr type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, GLint[] size, IntPtr type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttribARB(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), type, name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, GLint[] size, object type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, GLint[] size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttribARB(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, GLint[] size, GLenum[] type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, object length, GLint[] size, GLenum[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttribARB(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, IntPtr size, IntPtr type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, IntPtr size, IntPtr type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttribARB(programObj, index, maxLength, h0.AddrOfPinnedObject(), size, type, name);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, IntPtr size, object type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, IntPtr size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttribARB(programObj, index, maxLength, h0.AddrOfPinnedObject(), size, h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, IntPtr size, GLenum[] type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, IntPtr size, GLenum[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttribARB(programObj, index, maxLength, h0.AddrOfPinnedObject(), size, h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, object size, IntPtr type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, object size, IntPtr type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttribARB(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), type, name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, object size, object type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, object size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttribARB(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, object size, GLenum[] type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, object size, GLenum[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttribARB(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, GLint[] size, IntPtr type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, GLint[] size, IntPtr type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttribARB(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), type, name);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, GLint[] size, object type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, GLint[] size, object type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttribARB(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, GLint[] size, GLenum[] type, StringBuilder name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, GLint[] size, GLenum[] type, StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttribARB(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetAttribLocationARB(GLhandleARB programObj, string name)

        /// <summary>
        /// 
        /// </summary>
        public static         GLint glGetAttribLocationARB(GLhandleARB programObj, string name)
        {
            return Delegates.glGetAttribLocationARB(programObj, name);
        }

        #endregion

        #region DrawBuffersARB(GLsizei n, IntPtr bufs)

        /// <summary>
        /// 
        /// </summary>
        public static         void glDrawBuffersARB(GLsizei n, IntPtr bufs)
        {
            Delegates.glDrawBuffersARB(n, bufs);
        }

        #endregion

        #region DrawBuffersARB(GLsizei n, object bufs)

        /// <summary>
        /// 
        /// </summary>
        public static         void glDrawBuffersARB(GLsizei n, object bufs)
        {
            GCHandle h0 = GCHandle.Alloc(bufs, GCHandleType.Pinned);
            try
            {
                Delegates.glDrawBuffersARB(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region DrawBuffersARB(GLsizei n, GLenum[] bufs)

        /// <summary>
        /// 
        /// </summary>
        public static         void glDrawBuffersARB(GLsizei n, GLenum[] bufs)
        {
            GCHandle h0 = GCHandle.Alloc(bufs, GCHandleType.Pinned);
            try
            {
                Delegates.glDrawBuffersARB(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ClampColorARB(GLenum target, GLenum clamp)

        /// <summary>
        /// 
        /// </summary>
        public static         void glClampColorARB(GLenum target, GLenum clamp)
        {
            Delegates.glClampColorARB(target, clamp);
        }

        #endregion

        #region BlendColorEXT(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)

        /// <summary>
        /// 
        /// </summary>
        public static         void glBlendColorEXT(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
        {
            Delegates.glBlendColorEXT(red, green, blue, alpha);
        }

        #endregion

        #region PolygonOffsetEXT(GLfloat factor, GLfloat bias)

        /// <summary>
        /// 
        /// </summary>
        public static         void glPolygonOffsetEXT(GLfloat factor, GLfloat bias)
        {
            Delegates.glPolygonOffsetEXT(factor, bias);
        }

        #endregion

        #region TexImage3DEXT(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, IntPtr pixels)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexImage3DEXT(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, IntPtr pixels)
        {
            Delegates.glTexImage3DEXT(target, level, internalformat, width, height, depth, border, format, type, pixels);
        }

        #endregion

        #region TexImage3DEXT(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, object pixels)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexImage3DEXT(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, object pixels)
        {
            GCHandle h0 = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glTexImage3DEXT(target, level, internalformat, width, height, depth, border, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexSubImage3DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, IntPtr pixels)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexSubImage3DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, IntPtr pixels)
        {
            Delegates.glTexSubImage3DEXT(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
        }

        #endregion

        #region TexSubImage3DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, object pixels)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexSubImage3DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, object pixels)
        {
            GCHandle h0 = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glTexSubImage3DEXT(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetTexFilterFuncSGIS(GLenum target, GLenum filter, IntPtr weights)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetTexFilterFuncSGIS(GLenum target, GLenum filter, IntPtr weights)
        {
            Delegates.glGetTexFilterFuncSGIS(target, filter, weights);
        }

        #endregion

        #region GetTexFilterFuncSGIS(GLenum target, GLenum filter, object weights)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetTexFilterFuncSGIS(GLenum target, GLenum filter, object weights)
        {
            GCHandle h0 = GCHandle.Alloc(weights, GCHandleType.Pinned);
            try
            {
                Delegates.glGetTexFilterFuncSGIS(target, filter, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetTexFilterFuncSGIS(GLenum target, GLenum filter, GLfloat[] weights)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetTexFilterFuncSGIS(GLenum target, GLenum filter, GLfloat[] weights)
        {
            GCHandle h0 = GCHandle.Alloc(weights, GCHandleType.Pinned);
            try
            {
                Delegates.glGetTexFilterFuncSGIS(target, filter, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexFilterFuncSGIS(GLenum target, GLenum filter, GLsizei n, IntPtr weights)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexFilterFuncSGIS(GLenum target, GLenum filter, GLsizei n, IntPtr weights)
        {
            Delegates.glTexFilterFuncSGIS(target, filter, n, weights);
        }

        #endregion

        #region TexFilterFuncSGIS(GLenum target, GLenum filter, GLsizei n, object weights)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexFilterFuncSGIS(GLenum target, GLenum filter, GLsizei n, object weights)
        {
            GCHandle h0 = GCHandle.Alloc(weights, GCHandleType.Pinned);
            try
            {
                Delegates.glTexFilterFuncSGIS(target, filter, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexFilterFuncSGIS(GLenum target, GLenum filter, GLsizei n, GLfloat[] weights)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexFilterFuncSGIS(GLenum target, GLenum filter, GLsizei n, GLfloat[] weights)
        {
            GCHandle h0 = GCHandle.Alloc(weights, GCHandleType.Pinned);
            try
            {
                Delegates.glTexFilterFuncSGIS(target, filter, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexSubImage1DEXT(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, IntPtr pixels)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexSubImage1DEXT(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, IntPtr pixels)
        {
            Delegates.glTexSubImage1DEXT(target, level, xoffset, width, format, type, pixels);
        }

        #endregion

        #region TexSubImage1DEXT(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, object pixels)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexSubImage1DEXT(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, object pixels)
        {
            GCHandle h0 = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glTexSubImage1DEXT(target, level, xoffset, width, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexSubImage2DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, IntPtr pixels)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexSubImage2DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, IntPtr pixels)
        {
            Delegates.glTexSubImage2DEXT(target, level, xoffset, yoffset, width, height, format, type, pixels);
        }

        #endregion

        #region TexSubImage2DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, object pixels)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexSubImage2DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, object pixels)
        {
            GCHandle h0 = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glTexSubImage2DEXT(target, level, xoffset, yoffset, width, height, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region CopyTexImage1DEXT(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)

        /// <summary>
        /// 
        /// </summary>
        public static         void glCopyTexImage1DEXT(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)
        {
            Delegates.glCopyTexImage1DEXT(target, level, internalformat, x, y, width, border);
        }

        #endregion

        #region CopyTexImage2DEXT(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)

        /// <summary>
        /// 
        /// </summary>
        public static         void glCopyTexImage2DEXT(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
        {
            Delegates.glCopyTexImage2DEXT(target, level, internalformat, x, y, width, height, border);
        }

        #endregion

        #region CopyTexSubImage1DEXT(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)

        /// <summary>
        /// 
        /// </summary>
        public static         void glCopyTexSubImage1DEXT(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
        {
            Delegates.glCopyTexSubImage1DEXT(target, level, xoffset, x, y, width);
        }

        #endregion

        #region CopyTexSubImage2DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)

        /// <summary>
        /// 
        /// </summary>
        public static         void glCopyTexSubImage2DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
        {
            Delegates.glCopyTexSubImage2DEXT(target, level, xoffset, yoffset, x, y, width, height);
        }

        #endregion

        #region CopyTexSubImage3DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)

        /// <summary>
        /// 
        /// </summary>
        public static         void glCopyTexSubImage3DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
        {
            Delegates.glCopyTexSubImage3DEXT(target, level, xoffset, yoffset, zoffset, x, y, width, height);
        }

        #endregion

        #region GetHistogramEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, IntPtr values)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetHistogramEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, IntPtr values)
        {
            Delegates.glGetHistogramEXT(target, reset, format, type, values);
        }

        #endregion

        #region GetHistogramEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, object values)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetHistogramEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, object values)
        {
            GCHandle h0 = GCHandle.Alloc(values, GCHandleType.Pinned);
            try
            {
                Delegates.glGetHistogramEXT(target, reset, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetHistogramParameterfvEXT(GLenum target, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetHistogramParameterfvEXT(GLenum target, GLenum pname, IntPtr parameters)
        {
            Delegates.glGetHistogramParameterfvEXT(target, pname, parameters);
        }

        #endregion

        #region GetHistogramParameterfvEXT(GLenum target, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetHistogramParameterfvEXT(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetHistogramParameterfvEXT(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetHistogramParameterfvEXT(GLenum target, GLenum pname, GLfloat[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetHistogramParameterfvEXT(GLenum target, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetHistogramParameterfvEXT(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetHistogramParameterivEXT(GLenum target, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetHistogramParameterivEXT(GLenum target, GLenum pname, IntPtr parameters)
        {
            Delegates.glGetHistogramParameterivEXT(target, pname, parameters);
        }

        #endregion

        #region GetHistogramParameterivEXT(GLenum target, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetHistogramParameterivEXT(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetHistogramParameterivEXT(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetHistogramParameterivEXT(GLenum target, GLenum pname, GLint[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetHistogramParameterivEXT(GLenum target, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetHistogramParameterivEXT(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetMinmaxEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, IntPtr values)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetMinmaxEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, IntPtr values)
        {
            Delegates.glGetMinmaxEXT(target, reset, format, type, values);
        }

        #endregion

        #region GetMinmaxEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, object values)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetMinmaxEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, object values)
        {
            GCHandle h0 = GCHandle.Alloc(values, GCHandleType.Pinned);
            try
            {
                Delegates.glGetMinmaxEXT(target, reset, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetMinmaxParameterfvEXT(GLenum target, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetMinmaxParameterfvEXT(GLenum target, GLenum pname, IntPtr parameters)
        {
            Delegates.glGetMinmaxParameterfvEXT(target, pname, parameters);
        }

        #endregion

        #region GetMinmaxParameterfvEXT(GLenum target, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetMinmaxParameterfvEXT(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetMinmaxParameterfvEXT(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetMinmaxParameterfvEXT(GLenum target, GLenum pname, GLfloat[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetMinmaxParameterfvEXT(GLenum target, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetMinmaxParameterfvEXT(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetMinmaxParameterivEXT(GLenum target, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetMinmaxParameterivEXT(GLenum target, GLenum pname, IntPtr parameters)
        {
            Delegates.glGetMinmaxParameterivEXT(target, pname, parameters);
        }

        #endregion

        #region GetMinmaxParameterivEXT(GLenum target, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetMinmaxParameterivEXT(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetMinmaxParameterivEXT(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetMinmaxParameterivEXT(GLenum target, GLenum pname, GLint[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetMinmaxParameterivEXT(GLenum target, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetMinmaxParameterivEXT(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region HistogramEXT(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink)

        /// <summary>
        /// 
        /// </summary>
        public static         void glHistogramEXT(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink)
        {
            Delegates.glHistogramEXT(target, width, internalformat, sink);
        }

        #endregion

        #region MinmaxEXT(GLenum target, GLenum internalformat, GLboolean sink)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMinmaxEXT(GLenum target, GLenum internalformat, GLboolean sink)
        {
            Delegates.glMinmaxEXT(target, internalformat, sink);
        }

        #endregion

        #region ResetHistogramEXT(GLenum target)

        /// <summary>
        /// 
        /// </summary>
        public static         void glResetHistogramEXT(GLenum target)
        {
            Delegates.glResetHistogramEXT(target);
        }

        #endregion

        #region ResetMinmaxEXT(GLenum target)

        /// <summary>
        /// 
        /// </summary>
        public static         void glResetMinmaxEXT(GLenum target)
        {
            Delegates.glResetMinmaxEXT(target);
        }

        #endregion

        #region ConvolutionFilter1DEXT(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, IntPtr image)

        /// <summary>
        /// 
        /// </summary>
        public static         void glConvolutionFilter1DEXT(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, IntPtr image)
        {
            Delegates.glConvolutionFilter1DEXT(target, internalformat, width, format, type, image);
        }

        #endregion

        #region ConvolutionFilter1DEXT(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, object image)

        /// <summary>
        /// 
        /// </summary>
        public static         void glConvolutionFilter1DEXT(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, object image)
        {
            GCHandle h0 = GCHandle.Alloc(image, GCHandleType.Pinned);
            try
            {
                Delegates.glConvolutionFilter1DEXT(target, internalformat, width, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ConvolutionFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, IntPtr image)

        /// <summary>
        /// 
        /// </summary>
        public static         void glConvolutionFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, IntPtr image)
        {
            Delegates.glConvolutionFilter2DEXT(target, internalformat, width, height, format, type, image);
        }

        #endregion

        #region ConvolutionFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, object image)

        /// <summary>
        /// 
        /// </summary>
        public static         void glConvolutionFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, object image)
        {
            GCHandle h0 = GCHandle.Alloc(image, GCHandleType.Pinned);
            try
            {
                Delegates.glConvolutionFilter2DEXT(target, internalformat, width, height, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ConvolutionParameterfEXT(GLenum target, GLenum pname, GLfloat parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glConvolutionParameterfEXT(GLenum target, GLenum pname, GLfloat parameters)
        {
            Delegates.glConvolutionParameterfEXT(target, pname, parameters);
        }

        #endregion

        #region ConvolutionParameterfvEXT(GLenum target, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glConvolutionParameterfvEXT(GLenum target, GLenum pname, IntPtr parameters)
        {
            Delegates.glConvolutionParameterfvEXT(target, pname, parameters);
        }

        #endregion

        #region ConvolutionParameterfvEXT(GLenum target, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glConvolutionParameterfvEXT(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glConvolutionParameterfvEXT(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ConvolutionParameterfvEXT(GLenum target, GLenum pname, GLfloat[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glConvolutionParameterfvEXT(GLenum target, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glConvolutionParameterfvEXT(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ConvolutionParameteriEXT(GLenum target, GLenum pname, GLint parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glConvolutionParameteriEXT(GLenum target, GLenum pname, GLint parameters)
        {
            Delegates.glConvolutionParameteriEXT(target, pname, parameters);
        }

        #endregion

        #region ConvolutionParameterivEXT(GLenum target, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glConvolutionParameterivEXT(GLenum target, GLenum pname, IntPtr parameters)
        {
            Delegates.glConvolutionParameterivEXT(target, pname, parameters);
        }

        #endregion

        #region ConvolutionParameterivEXT(GLenum target, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glConvolutionParameterivEXT(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glConvolutionParameterivEXT(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ConvolutionParameterivEXT(GLenum target, GLenum pname, GLint[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glConvolutionParameterivEXT(GLenum target, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glConvolutionParameterivEXT(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region CopyConvolutionFilter1DEXT(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)

        /// <summary>
        /// 
        /// </summary>
        public static         void glCopyConvolutionFilter1DEXT(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)
        {
            Delegates.glCopyConvolutionFilter1DEXT(target, internalformat, x, y, width);
        }

        #endregion

        #region CopyConvolutionFilter2DEXT(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height)

        /// <summary>
        /// 
        /// </summary>
        public static         void glCopyConvolutionFilter2DEXT(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height)
        {
            Delegates.glCopyConvolutionFilter2DEXT(target, internalformat, x, y, width, height);
        }

        #endregion

        #region GetConvolutionFilterEXT(GLenum target, GLenum format, GLenum type, IntPtr image)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetConvolutionFilterEXT(GLenum target, GLenum format, GLenum type, IntPtr image)
        {
            Delegates.glGetConvolutionFilterEXT(target, format, type, image);
        }

        #endregion

        #region GetConvolutionFilterEXT(GLenum target, GLenum format, GLenum type, object image)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetConvolutionFilterEXT(GLenum target, GLenum format, GLenum type, object image)
        {
            GCHandle h0 = GCHandle.Alloc(image, GCHandleType.Pinned);
            try
            {
                Delegates.glGetConvolutionFilterEXT(target, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetConvolutionParameterfvEXT(GLenum target, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetConvolutionParameterfvEXT(GLenum target, GLenum pname, IntPtr parameters)
        {
            Delegates.glGetConvolutionParameterfvEXT(target, pname, parameters);
        }

        #endregion

        #region GetConvolutionParameterfvEXT(GLenum target, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetConvolutionParameterfvEXT(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetConvolutionParameterfvEXT(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetConvolutionParameterfvEXT(GLenum target, GLenum pname, GLfloat[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetConvolutionParameterfvEXT(GLenum target, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetConvolutionParameterfvEXT(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetConvolutionParameterivEXT(GLenum target, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetConvolutionParameterivEXT(GLenum target, GLenum pname, IntPtr parameters)
        {
            Delegates.glGetConvolutionParameterivEXT(target, pname, parameters);
        }

        #endregion

        #region GetConvolutionParameterivEXT(GLenum target, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetConvolutionParameterivEXT(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetConvolutionParameterivEXT(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetConvolutionParameterivEXT(GLenum target, GLenum pname, GLint[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetConvolutionParameterivEXT(GLenum target, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetConvolutionParameterivEXT(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetSeparableFilterEXT(GLenum target, GLenum format, GLenum type, IntPtr row, IntPtr column, IntPtr span)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetSeparableFilterEXT(GLenum target, GLenum format, GLenum type, IntPtr row, IntPtr column, IntPtr span)
        {
            Delegates.glGetSeparableFilterEXT(target, format, type, row, column, span);
        }

        #endregion

        #region GetSeparableFilterEXT(GLenum target, GLenum format, GLenum type, IntPtr row, IntPtr column, object span)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetSeparableFilterEXT(GLenum target, GLenum format, GLenum type, IntPtr row, IntPtr column, object span)
        {
            GCHandle h0 = GCHandle.Alloc(span, GCHandleType.Pinned);
            try
            {
                Delegates.glGetSeparableFilterEXT(target, format, type, row, column, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetSeparableFilterEXT(GLenum target, GLenum format, GLenum type, IntPtr row, object column, IntPtr span)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetSeparableFilterEXT(GLenum target, GLenum format, GLenum type, IntPtr row, object column, IntPtr span)
        {
            GCHandle h0 = GCHandle.Alloc(column, GCHandleType.Pinned);
            try
            {
                Delegates.glGetSeparableFilterEXT(target, format, type, row, h0.AddrOfPinnedObject(), span);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetSeparableFilterEXT(GLenum target, GLenum format, GLenum type, IntPtr row, object column, object span)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetSeparableFilterEXT(GLenum target, GLenum format, GLenum type, IntPtr row, object column, object span)
        {
            GCHandle h0 = GCHandle.Alloc(column, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(span, GCHandleType.Pinned);
            try
            {
                Delegates.glGetSeparableFilterEXT(target, format, type, row, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetSeparableFilterEXT(GLenum target, GLenum format, GLenum type, object row, IntPtr column, IntPtr span)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetSeparableFilterEXT(GLenum target, GLenum format, GLenum type, object row, IntPtr column, IntPtr span)
        {
            GCHandle h0 = GCHandle.Alloc(row, GCHandleType.Pinned);
            try
            {
                Delegates.glGetSeparableFilterEXT(target, format, type, h0.AddrOfPinnedObject(), column, span);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetSeparableFilterEXT(GLenum target, GLenum format, GLenum type, object row, IntPtr column, object span)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetSeparableFilterEXT(GLenum target, GLenum format, GLenum type, object row, IntPtr column, object span)
        {
            GCHandle h0 = GCHandle.Alloc(row, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(span, GCHandleType.Pinned);
            try
            {
                Delegates.glGetSeparableFilterEXT(target, format, type, h0.AddrOfPinnedObject(), column, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetSeparableFilterEXT(GLenum target, GLenum format, GLenum type, object row, object column, IntPtr span)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetSeparableFilterEXT(GLenum target, GLenum format, GLenum type, object row, object column, IntPtr span)
        {
            GCHandle h0 = GCHandle.Alloc(row, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(column, GCHandleType.Pinned);
            try
            {
                Delegates.glGetSeparableFilterEXT(target, format, type, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), span);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetSeparableFilterEXT(GLenum target, GLenum format, GLenum type, object row, object column, object span)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetSeparableFilterEXT(GLenum target, GLenum format, GLenum type, object row, object column, object span)
        {
            GCHandle h0 = GCHandle.Alloc(row, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(column, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(span, GCHandleType.Pinned);
            try
            {
                Delegates.glGetSeparableFilterEXT(target, format, type, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region SeparableFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, IntPtr row, IntPtr column)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSeparableFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, IntPtr row, IntPtr column)
        {
            Delegates.glSeparableFilter2DEXT(target, internalformat, width, height, format, type, row, column);
        }

        #endregion

        #region SeparableFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, IntPtr row, object column)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSeparableFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, IntPtr row, object column)
        {
            GCHandle h0 = GCHandle.Alloc(column, GCHandleType.Pinned);
            try
            {
                Delegates.glSeparableFilter2DEXT(target, internalformat, width, height, format, type, row, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SeparableFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, object row, IntPtr column)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSeparableFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, object row, IntPtr column)
        {
            GCHandle h0 = GCHandle.Alloc(row, GCHandleType.Pinned);
            try
            {
                Delegates.glSeparableFilter2DEXT(target, internalformat, width, height, format, type, h0.AddrOfPinnedObject(), column);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SeparableFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, object row, object column)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSeparableFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, object row, object column)
        {
            GCHandle h0 = GCHandle.Alloc(row, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(column, GCHandleType.Pinned);
            try
            {
                Delegates.glSeparableFilter2DEXT(target, internalformat, width, height, format, type, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ColorTableSGI(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, IntPtr table)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColorTableSGI(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, IntPtr table)
        {
            Delegates.glColorTableSGI(target, internalformat, width, format, type, table);
        }

        #endregion

        #region ColorTableSGI(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, object table)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColorTableSGI(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, object table)
        {
            GCHandle h0 = GCHandle.Alloc(table, GCHandleType.Pinned);
            try
            {
                Delegates.glColorTableSGI(target, internalformat, width, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ColorTableParameterfvSGI(GLenum target, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColorTableParameterfvSGI(GLenum target, GLenum pname, IntPtr parameters)
        {
            Delegates.glColorTableParameterfvSGI(target, pname, parameters);
        }

        #endregion

        #region ColorTableParameterfvSGI(GLenum target, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColorTableParameterfvSGI(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glColorTableParameterfvSGI(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ColorTableParameterfvSGI(GLenum target, GLenum pname, GLfloat[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColorTableParameterfvSGI(GLenum target, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glColorTableParameterfvSGI(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ColorTableParameterivSGI(GLenum target, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColorTableParameterivSGI(GLenum target, GLenum pname, IntPtr parameters)
        {
            Delegates.glColorTableParameterivSGI(target, pname, parameters);
        }

        #endregion

        #region ColorTableParameterivSGI(GLenum target, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColorTableParameterivSGI(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glColorTableParameterivSGI(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ColorTableParameterivSGI(GLenum target, GLenum pname, GLint[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColorTableParameterivSGI(GLenum target, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glColorTableParameterivSGI(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region CopyColorTableSGI(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)

        /// <summary>
        /// 
        /// </summary>
        public static         void glCopyColorTableSGI(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)
        {
            Delegates.glCopyColorTableSGI(target, internalformat, x, y, width);
        }

        #endregion

        #region GetColorTableSGI(GLenum target, GLenum format, GLenum type, IntPtr table)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetColorTableSGI(GLenum target, GLenum format, GLenum type, IntPtr table)
        {
            Delegates.glGetColorTableSGI(target, format, type, table);
        }

        #endregion

        #region GetColorTableSGI(GLenum target, GLenum format, GLenum type, object table)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetColorTableSGI(GLenum target, GLenum format, GLenum type, object table)
        {
            GCHandle h0 = GCHandle.Alloc(table, GCHandleType.Pinned);
            try
            {
                Delegates.glGetColorTableSGI(target, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetColorTableParameterfvSGI(GLenum target, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetColorTableParameterfvSGI(GLenum target, GLenum pname, IntPtr parameters)
        {
            Delegates.glGetColorTableParameterfvSGI(target, pname, parameters);
        }

        #endregion

        #region GetColorTableParameterfvSGI(GLenum target, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetColorTableParameterfvSGI(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetColorTableParameterfvSGI(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetColorTableParameterfvSGI(GLenum target, GLenum pname, GLfloat[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetColorTableParameterfvSGI(GLenum target, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetColorTableParameterfvSGI(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetColorTableParameterivSGI(GLenum target, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetColorTableParameterivSGI(GLenum target, GLenum pname, IntPtr parameters)
        {
            Delegates.glGetColorTableParameterivSGI(target, pname, parameters);
        }

        #endregion

        #region GetColorTableParameterivSGI(GLenum target, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetColorTableParameterivSGI(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetColorTableParameterivSGI(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetColorTableParameterivSGI(GLenum target, GLenum pname, GLint[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetColorTableParameterivSGI(GLenum target, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetColorTableParameterivSGI(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region PixelTexGenSGIX(GLenum mode)

        /// <summary>
        /// 
        /// </summary>
        public static         void glPixelTexGenSGIX(GLenum mode)
        {
            Delegates.glPixelTexGenSGIX(mode);
        }

        #endregion

        #region PixelTexGenParameteriSGIS(GLenum pname, GLint param)

        /// <summary>
        /// 
        /// </summary>
        public static         void glPixelTexGenParameteriSGIS(GLenum pname, GLint param)
        {
            Delegates.glPixelTexGenParameteriSGIS(pname, param);
        }

        #endregion

        #region PixelTexGenParameterivSGIS(GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glPixelTexGenParameterivSGIS(GLenum pname, IntPtr parameters)
        {
            Delegates.glPixelTexGenParameterivSGIS(pname, parameters);
        }

        #endregion

        #region PixelTexGenParameterivSGIS(GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glPixelTexGenParameterivSGIS(GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glPixelTexGenParameterivSGIS(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region PixelTexGenParameterivSGIS(GLenum pname, GLint[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glPixelTexGenParameterivSGIS(GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glPixelTexGenParameterivSGIS(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region PixelTexGenParameterfSGIS(GLenum pname, GLfloat param)

        /// <summary>
        /// 
        /// </summary>
        public static         void glPixelTexGenParameterfSGIS(GLenum pname, GLfloat param)
        {
            Delegates.glPixelTexGenParameterfSGIS(pname, param);
        }

        #endregion

        #region PixelTexGenParameterfvSGIS(GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glPixelTexGenParameterfvSGIS(GLenum pname, IntPtr parameters)
        {
            Delegates.glPixelTexGenParameterfvSGIS(pname, parameters);
        }

        #endregion

        #region PixelTexGenParameterfvSGIS(GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glPixelTexGenParameterfvSGIS(GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glPixelTexGenParameterfvSGIS(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region PixelTexGenParameterfvSGIS(GLenum pname, GLfloat[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glPixelTexGenParameterfvSGIS(GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glPixelTexGenParameterfvSGIS(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetPixelTexGenParameterivSGIS(GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetPixelTexGenParameterivSGIS(GLenum pname, IntPtr parameters)
        {
            Delegates.glGetPixelTexGenParameterivSGIS(pname, parameters);
        }

        #endregion

        #region GetPixelTexGenParameterivSGIS(GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetPixelTexGenParameterivSGIS(GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetPixelTexGenParameterivSGIS(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetPixelTexGenParameterivSGIS(GLenum pname, GLint[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetPixelTexGenParameterivSGIS(GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetPixelTexGenParameterivSGIS(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetPixelTexGenParameterfvSGIS(GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetPixelTexGenParameterfvSGIS(GLenum pname, IntPtr parameters)
        {
            Delegates.glGetPixelTexGenParameterfvSGIS(pname, parameters);
        }

        #endregion

        #region GetPixelTexGenParameterfvSGIS(GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetPixelTexGenParameterfvSGIS(GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetPixelTexGenParameterfvSGIS(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetPixelTexGenParameterfvSGIS(GLenum pname, GLfloat[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetPixelTexGenParameterfvSGIS(GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetPixelTexGenParameterfvSGIS(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexImage4DSGIS(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GLenum format, GLenum type, IntPtr pixels)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexImage4DSGIS(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GLenum format, GLenum type, IntPtr pixels)
        {
            Delegates.glTexImage4DSGIS(target, level, internalformat, width, height, depth, size4d, border, format, type, pixels);
        }

        #endregion

        #region TexImage4DSGIS(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GLenum format, GLenum type, object pixels)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexImage4DSGIS(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GLenum format, GLenum type, object pixels)
        {
            GCHandle h0 = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glTexImage4DSGIS(target, level, internalformat, width, height, depth, size4d, border, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexSubImage4DSGIS(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLenum format, GLenum type, IntPtr pixels)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexSubImage4DSGIS(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLenum format, GLenum type, IntPtr pixels)
        {
            Delegates.glTexSubImage4DSGIS(target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, type, pixels);
        }

        #endregion

        #region TexSubImage4DSGIS(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLenum format, GLenum type, object pixels)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexSubImage4DSGIS(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLenum format, GLenum type, object pixels)
        {
            GCHandle h0 = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glTexSubImage4DSGIS(target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region AreTexturesResidentEXT(GLsizei n, IntPtr textures, IntPtr residences)

        /// <summary>
        /// 
        /// </summary>
        public static         GLboolean glAreTexturesResidentEXT(GLsizei n, IntPtr textures, IntPtr residences)
        {
            return Delegates.glAreTexturesResidentEXT(n, textures, residences);
        }

        #endregion

        #region AreTexturesResidentEXT(GLsizei n, IntPtr textures, object residences)

        /// <summary>
        /// 
        /// </summary>
        public static         GLboolean glAreTexturesResidentEXT(GLsizei n, IntPtr textures, object residences)
        {
            GCHandle h0 = GCHandle.Alloc(residences, GCHandleType.Pinned);
            try
            {
                return Delegates.glAreTexturesResidentEXT(n, textures, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region AreTexturesResidentEXT(GLsizei n, IntPtr textures, GLboolean[] residences)

        /// <summary>
        /// 
        /// </summary>
        public static         GLboolean glAreTexturesResidentEXT(GLsizei n, IntPtr textures, GLboolean[] residences)
        {
            GCHandle h0 = GCHandle.Alloc(residences, GCHandleType.Pinned);
            try
            {
                return Delegates.glAreTexturesResidentEXT(n, textures, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region AreTexturesResidentEXT(GLsizei n, object textures, IntPtr residences)

        /// <summary>
        /// 
        /// </summary>
        public static         GLboolean glAreTexturesResidentEXT(GLsizei n, object textures, IntPtr residences)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            try
            {
                return Delegates.glAreTexturesResidentEXT(n, h0.AddrOfPinnedObject(), residences);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region AreTexturesResidentEXT(GLsizei n, object textures, object residences)

        /// <summary>
        /// 
        /// </summary>
        public static         GLboolean glAreTexturesResidentEXT(GLsizei n, object textures, object residences)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(residences, GCHandleType.Pinned);
            try
            {
                return Delegates.glAreTexturesResidentEXT(n, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region AreTexturesResidentEXT(GLsizei n, object textures, GLboolean[] residences)

        /// <summary>
        /// 
        /// </summary>
        public static         GLboolean glAreTexturesResidentEXT(GLsizei n, object textures, GLboolean[] residences)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(residences, GCHandleType.Pinned);
            try
            {
                return Delegates.glAreTexturesResidentEXT(n, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region AreTexturesResidentEXT(GLsizei n, GLuint[] textures, IntPtr residences)

        /// <summary>
        /// 
        /// </summary>
        public static         GLboolean glAreTexturesResidentEXT(GLsizei n, GLuint[] textures, IntPtr residences)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            try
            {
                return Delegates.glAreTexturesResidentEXT(n, h0.AddrOfPinnedObject(), residences);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region AreTexturesResidentEXT(GLsizei n, GLuint[] textures, object residences)

        /// <summary>
        /// 
        /// </summary>
        public static         GLboolean glAreTexturesResidentEXT(GLsizei n, GLuint[] textures, object residences)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(residences, GCHandleType.Pinned);
            try
            {
                return Delegates.glAreTexturesResidentEXT(n, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region AreTexturesResidentEXT(GLsizei n, GLuint[] textures, GLboolean[] residences)

        /// <summary>
        /// 
        /// </summary>
        public static         GLboolean glAreTexturesResidentEXT(GLsizei n, GLuint[] textures, GLboolean[] residences)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(residences, GCHandleType.Pinned);
            try
            {
                return Delegates.glAreTexturesResidentEXT(n, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region BindTextureEXT(GLenum target, GLuint texture)

        /// <summary>
        /// 
        /// </summary>
        public static         void glBindTextureEXT(GLenum target, GLuint texture)
        {
            Delegates.glBindTextureEXT(target, texture);
        }

        #endregion

        #region DeleteTexturesEXT(GLsizei n, IntPtr textures)

        /// <summary>
        /// 
        /// </summary>
        public static         void glDeleteTexturesEXT(GLsizei n, IntPtr textures)
        {
            Delegates.glDeleteTexturesEXT(n, textures);
        }

        #endregion

        #region DeleteTexturesEXT(GLsizei n, object textures)

        /// <summary>
        /// 
        /// </summary>
        public static         void glDeleteTexturesEXT(GLsizei n, object textures)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            try
            {
                Delegates.glDeleteTexturesEXT(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region DeleteTexturesEXT(GLsizei n, GLuint[] textures)

        /// <summary>
        /// 
        /// </summary>
        public static         void glDeleteTexturesEXT(GLsizei n, GLuint[] textures)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            try
            {
                Delegates.glDeleteTexturesEXT(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GenTexturesEXT(GLsizei n, IntPtr textures)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGenTexturesEXT(GLsizei n, IntPtr textures)
        {
            Delegates.glGenTexturesEXT(n, textures);
        }

        #endregion

        #region GenTexturesEXT(GLsizei n, object textures)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGenTexturesEXT(GLsizei n, object textures)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            try
            {
                Delegates.glGenTexturesEXT(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GenTexturesEXT(GLsizei n, GLuint[] textures)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGenTexturesEXT(GLsizei n, GLuint[] textures)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            try
            {
                Delegates.glGenTexturesEXT(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region IsTextureEXT(GLuint texture)

        /// <summary>
        /// 
        /// </summary>
        public static         GLboolean glIsTextureEXT(GLuint texture)
        {
            return Delegates.glIsTextureEXT(texture);
        }

        #endregion

        #region PrioritizeTexturesEXT(GLsizei n, IntPtr textures, IntPtr priorities)

        /// <summary>
        /// 
        /// </summary>
        public static         void glPrioritizeTexturesEXT(GLsizei n, IntPtr textures, IntPtr priorities)
        {
            Delegates.glPrioritizeTexturesEXT(n, textures, priorities);
        }

        #endregion

        #region PrioritizeTexturesEXT(GLsizei n, IntPtr textures, object priorities)

        /// <summary>
        /// 
        /// </summary>
        public static         void glPrioritizeTexturesEXT(GLsizei n, IntPtr textures, object priorities)
        {
            GCHandle h0 = GCHandle.Alloc(priorities, GCHandleType.Pinned);
            try
            {
                Delegates.glPrioritizeTexturesEXT(n, textures, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region PrioritizeTexturesEXT(GLsizei n, IntPtr textures, GLclampf[] priorities)

        /// <summary>
        /// 
        /// </summary>
        public static         void glPrioritizeTexturesEXT(GLsizei n, IntPtr textures, GLclampf[] priorities)
        {
            GCHandle h0 = GCHandle.Alloc(priorities, GCHandleType.Pinned);
            try
            {
                Delegates.glPrioritizeTexturesEXT(n, textures, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region PrioritizeTexturesEXT(GLsizei n, object textures, IntPtr priorities)

        /// <summary>
        /// 
        /// </summary>
        public static         void glPrioritizeTexturesEXT(GLsizei n, object textures, IntPtr priorities)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            try
            {
                Delegates.glPrioritizeTexturesEXT(n, h0.AddrOfPinnedObject(), priorities);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region PrioritizeTexturesEXT(GLsizei n, object textures, object priorities)

        /// <summary>
        /// 
        /// </summary>
        public static         void glPrioritizeTexturesEXT(GLsizei n, object textures, object priorities)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(priorities, GCHandleType.Pinned);
            try
            {
                Delegates.glPrioritizeTexturesEXT(n, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region PrioritizeTexturesEXT(GLsizei n, object textures, GLclampf[] priorities)

        /// <summary>
        /// 
        /// </summary>
        public static         void glPrioritizeTexturesEXT(GLsizei n, object textures, GLclampf[] priorities)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(priorities, GCHandleType.Pinned);
            try
            {
                Delegates.glPrioritizeTexturesEXT(n, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region PrioritizeTexturesEXT(GLsizei n, GLuint[] textures, IntPtr priorities)

        /// <summary>
        /// 
        /// </summary>
        public static         void glPrioritizeTexturesEXT(GLsizei n, GLuint[] textures, IntPtr priorities)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            try
            {
                Delegates.glPrioritizeTexturesEXT(n, h0.AddrOfPinnedObject(), priorities);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region PrioritizeTexturesEXT(GLsizei n, GLuint[] textures, object priorities)

        /// <summary>
        /// 
        /// </summary>
        public static         void glPrioritizeTexturesEXT(GLsizei n, GLuint[] textures, object priorities)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(priorities, GCHandleType.Pinned);
            try
            {
                Delegates.glPrioritizeTexturesEXT(n, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region PrioritizeTexturesEXT(GLsizei n, GLuint[] textures, GLclampf[] priorities)

        /// <summary>
        /// 
        /// </summary>
        public static         void glPrioritizeTexturesEXT(GLsizei n, GLuint[] textures, GLclampf[] priorities)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(priorities, GCHandleType.Pinned);
            try
            {
                Delegates.glPrioritizeTexturesEXT(n, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region DetailTexFuncSGIS(GLenum target, GLsizei n, IntPtr points)

        /// <summary>
        /// 
        /// </summary>
        public static         void glDetailTexFuncSGIS(GLenum target, GLsizei n, IntPtr points)
        {
            Delegates.glDetailTexFuncSGIS(target, n, points);
        }

        #endregion

        #region DetailTexFuncSGIS(GLenum target, GLsizei n, object points)

        /// <summary>
        /// 
        /// </summary>
        public static         void glDetailTexFuncSGIS(GLenum target, GLsizei n, object points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                Delegates.glDetailTexFuncSGIS(target, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region DetailTexFuncSGIS(GLenum target, GLsizei n, GLfloat[] points)

        /// <summary>
        /// 
        /// </summary>
        public static         void glDetailTexFuncSGIS(GLenum target, GLsizei n, GLfloat[] points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                Delegates.glDetailTexFuncSGIS(target, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetDetailTexFuncSGIS(GLenum target, IntPtr points)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetDetailTexFuncSGIS(GLenum target, IntPtr points)
        {
            Delegates.glGetDetailTexFuncSGIS(target, points);
        }

        #endregion

        #region GetDetailTexFuncSGIS(GLenum target, object points)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetDetailTexFuncSGIS(GLenum target, object points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                Delegates.glGetDetailTexFuncSGIS(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetDetailTexFuncSGIS(GLenum target, GLfloat[] points)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetDetailTexFuncSGIS(GLenum target, GLfloat[] points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                Delegates.glGetDetailTexFuncSGIS(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SharpenTexFuncSGIS(GLenum target, GLsizei n, IntPtr points)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSharpenTexFuncSGIS(GLenum target, GLsizei n, IntPtr points)
        {
            Delegates.glSharpenTexFuncSGIS(target, n, points);
        }

        #endregion

        #region SharpenTexFuncSGIS(GLenum target, GLsizei n, object points)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSharpenTexFuncSGIS(GLenum target, GLsizei n, object points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                Delegates.glSharpenTexFuncSGIS(target, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SharpenTexFuncSGIS(GLenum target, GLsizei n, GLfloat[] points)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSharpenTexFuncSGIS(GLenum target, GLsizei n, GLfloat[] points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                Delegates.glSharpenTexFuncSGIS(target, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetSharpenTexFuncSGIS(GLenum target, IntPtr points)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetSharpenTexFuncSGIS(GLenum target, IntPtr points)
        {
            Delegates.glGetSharpenTexFuncSGIS(target, points);
        }

        #endregion

        #region GetSharpenTexFuncSGIS(GLenum target, object points)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetSharpenTexFuncSGIS(GLenum target, object points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                Delegates.glGetSharpenTexFuncSGIS(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetSharpenTexFuncSGIS(GLenum target, GLfloat[] points)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetSharpenTexFuncSGIS(GLenum target, GLfloat[] points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                Delegates.glGetSharpenTexFuncSGIS(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SampleMaskSGIS(GLclampf value, GLboolean invert)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSampleMaskSGIS(GLclampf value, GLboolean invert)
        {
            Delegates.glSampleMaskSGIS(value, invert);
        }

        #endregion

        #region SamplePatternSGIS(GLenum pattern)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSamplePatternSGIS(GLenum pattern)
        {
            Delegates.glSamplePatternSGIS(pattern);
        }

        #endregion

        #region ArrayElementEXT(GLint i)

        /// <summary>
        /// 
        /// </summary>
        public static         void glArrayElementEXT(GLint i)
        {
            Delegates.glArrayElementEXT(i);
        }

        #endregion

        #region ColorPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, IntPtr pointer)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColorPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, IntPtr pointer)
        {
            Delegates.glColorPointerEXT(size, type, stride, count, pointer);
        }

        #endregion

        #region ColorPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, object pointer)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColorPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glColorPointerEXT(size, type, stride, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region DrawArraysEXT(GLenum mode, GLint first, GLsizei count)

        /// <summary>
        /// 
        /// </summary>
        public static         void glDrawArraysEXT(GLenum mode, GLint first, GLsizei count)
        {
            Delegates.glDrawArraysEXT(mode, first, count);
        }

        #endregion

        #region EdgeFlagPointerEXT(GLsizei stride, GLsizei count, IntPtr pointer)

        /// <summary>
        /// 
        /// </summary>
        public static         void glEdgeFlagPointerEXT(GLsizei stride, GLsizei count, IntPtr pointer)
        {
            Delegates.glEdgeFlagPointerEXT(stride, count, pointer);
        }

        #endregion

        #region EdgeFlagPointerEXT(GLsizei stride, GLsizei count, object pointer)

        /// <summary>
        /// 
        /// </summary>
        public static         void glEdgeFlagPointerEXT(GLsizei stride, GLsizei count, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glEdgeFlagPointerEXT(stride, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region EdgeFlagPointerEXT(GLsizei stride, GLsizei count, GLboolean[] pointer)

        /// <summary>
        /// 
        /// </summary>
        public static         void glEdgeFlagPointerEXT(GLsizei stride, GLsizei count, GLboolean[] pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glEdgeFlagPointerEXT(stride, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetPointervEXT(GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetPointervEXT(GLenum pname, IntPtr parameters)
        {
            Delegates.glGetPointervEXT(pname, parameters);
        }

        #endregion

        #region GetPointervEXT(GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetPointervEXT(GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetPointervEXT(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetPointervEXT(GLenum pname, IntPtr[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetPointervEXT(GLenum pname, IntPtr[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetPointervEXT(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region IndexPointerEXT(GLenum type, GLsizei stride, GLsizei count, IntPtr pointer)

        /// <summary>
        /// 
        /// </summary>
        public static         void glIndexPointerEXT(GLenum type, GLsizei stride, GLsizei count, IntPtr pointer)
        {
            Delegates.glIndexPointerEXT(type, stride, count, pointer);
        }

        #endregion

        #region IndexPointerEXT(GLenum type, GLsizei stride, GLsizei count, object pointer)

        /// <summary>
        /// 
        /// </summary>
        public static         void glIndexPointerEXT(GLenum type, GLsizei stride, GLsizei count, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glIndexPointerEXT(type, stride, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region NormalPointerEXT(GLenum type, GLsizei stride, GLsizei count, IntPtr pointer)

        /// <summary>
        /// 
        /// </summary>
        public static         void glNormalPointerEXT(GLenum type, GLsizei stride, GLsizei count, IntPtr pointer)
        {
            Delegates.glNormalPointerEXT(type, stride, count, pointer);
        }

        #endregion

        #region NormalPointerEXT(GLenum type, GLsizei stride, GLsizei count, object pointer)

        /// <summary>
        /// 
        /// </summary>
        public static         void glNormalPointerEXT(GLenum type, GLsizei stride, GLsizei count, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glNormalPointerEXT(type, stride, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoordPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, IntPtr pointer)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoordPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, IntPtr pointer)
        {
            Delegates.glTexCoordPointerEXT(size, type, stride, count, pointer);
        }

        #endregion

        #region TexCoordPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, object pointer)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoordPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoordPointerEXT(size, type, stride, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, IntPtr pointer)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, IntPtr pointer)
        {
            Delegates.glVertexPointerEXT(size, type, stride, count, pointer);
        }

        #endregion

        #region VertexPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, object pointer)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexPointerEXT(size, type, stride, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region BlendEquationEXT(GLenum mode)

        /// <summary>
        /// 
        /// </summary>
        public static         void glBlendEquationEXT(GLenum mode)
        {
            Delegates.glBlendEquationEXT(mode);
        }

        #endregion

        #region SpriteParameterfSGIX(GLenum pname, GLfloat param)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSpriteParameterfSGIX(GLenum pname, GLfloat param)
        {
            Delegates.glSpriteParameterfSGIX(pname, param);
        }

        #endregion

        #region SpriteParameterfvSGIX(GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSpriteParameterfvSGIX(GLenum pname, IntPtr parameters)
        {
            Delegates.glSpriteParameterfvSGIX(pname, parameters);
        }

        #endregion

        #region SpriteParameterfvSGIX(GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSpriteParameterfvSGIX(GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glSpriteParameterfvSGIX(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SpriteParameterfvSGIX(GLenum pname, GLfloat[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSpriteParameterfvSGIX(GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glSpriteParameterfvSGIX(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SpriteParameteriSGIX(GLenum pname, GLint param)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSpriteParameteriSGIX(GLenum pname, GLint param)
        {
            Delegates.glSpriteParameteriSGIX(pname, param);
        }

        #endregion

        #region SpriteParameterivSGIX(GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSpriteParameterivSGIX(GLenum pname, IntPtr parameters)
        {
            Delegates.glSpriteParameterivSGIX(pname, parameters);
        }

        #endregion

        #region SpriteParameterivSGIX(GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSpriteParameterivSGIX(GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glSpriteParameterivSGIX(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SpriteParameterivSGIX(GLenum pname, GLint[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSpriteParameterivSGIX(GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glSpriteParameterivSGIX(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region PointParameterfEXT(GLenum pname, GLfloat param)

        /// <summary>
        /// 
        /// </summary>
        public static         void glPointParameterfEXT(GLenum pname, GLfloat param)
        {
            Delegates.glPointParameterfEXT(pname, param);
        }

        #endregion

        #region PointParameterfvEXT(GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glPointParameterfvEXT(GLenum pname, IntPtr parameters)
        {
            Delegates.glPointParameterfvEXT(pname, parameters);
        }

        #endregion

        #region PointParameterfvEXT(GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glPointParameterfvEXT(GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glPointParameterfvEXT(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region PointParameterfvEXT(GLenum pname, GLfloat[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glPointParameterfvEXT(GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glPointParameterfvEXT(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region PointParameterfSGIS(GLenum pname, GLfloat param)

        /// <summary>
        /// 
        /// </summary>
        public static         void glPointParameterfSGIS(GLenum pname, GLfloat param)
        {
            Delegates.glPointParameterfSGIS(pname, param);
        }

        #endregion

        #region PointParameterfvSGIS(GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glPointParameterfvSGIS(GLenum pname, IntPtr parameters)
        {
            Delegates.glPointParameterfvSGIS(pname, parameters);
        }

        #endregion

        #region PointParameterfvSGIS(GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glPointParameterfvSGIS(GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glPointParameterfvSGIS(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region PointParameterfvSGIS(GLenum pname, GLfloat[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glPointParameterfvSGIS(GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glPointParameterfvSGIS(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetInstrumentsSGIX()

        /// <summary>
        /// 
        /// </summary>
        public static         GLint glGetInstrumentsSGIX()
        {
            return Delegates.glGetInstrumentsSGIX();
        }

        #endregion

        #region InstrumentsBufferSGIX(GLsizei size, IntPtr buffer)

        /// <summary>
        /// 
        /// </summary>
        public static         void glInstrumentsBufferSGIX(GLsizei size, IntPtr buffer)
        {
            Delegates.glInstrumentsBufferSGIX(size, buffer);
        }

        #endregion

        #region InstrumentsBufferSGIX(GLsizei size, object buffer)

        /// <summary>
        /// 
        /// </summary>
        public static         void glInstrumentsBufferSGIX(GLsizei size, object buffer)
        {
            GCHandle h0 = GCHandle.Alloc(buffer, GCHandleType.Pinned);
            try
            {
                Delegates.glInstrumentsBufferSGIX(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region InstrumentsBufferSGIX(GLsizei size, GLint[] buffer)

        /// <summary>
        /// 
        /// </summary>
        public static         void glInstrumentsBufferSGIX(GLsizei size, GLint[] buffer)
        {
            GCHandle h0 = GCHandle.Alloc(buffer, GCHandleType.Pinned);
            try
            {
                Delegates.glInstrumentsBufferSGIX(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region PollInstrumentsSGIX(IntPtr marker_p)

        /// <summary>
        /// 
        /// </summary>
        public static         GLint glPollInstrumentsSGIX(IntPtr marker_p)
        {
            return Delegates.glPollInstrumentsSGIX(marker_p);
        }

        #endregion

        #region PollInstrumentsSGIX(object marker_p)

        /// <summary>
        /// 
        /// </summary>
        public static         GLint glPollInstrumentsSGIX(object marker_p)
        {
            GCHandle h0 = GCHandle.Alloc(marker_p, GCHandleType.Pinned);
            try
            {
                return Delegates.glPollInstrumentsSGIX(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region PollInstrumentsSGIX(GLint[] marker_p)

        /// <summary>
        /// 
        /// </summary>
        public static         GLint glPollInstrumentsSGIX(GLint[] marker_p)
        {
            GCHandle h0 = GCHandle.Alloc(marker_p, GCHandleType.Pinned);
            try
            {
                return Delegates.glPollInstrumentsSGIX(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReadInstrumentsSGIX(GLint marker)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReadInstrumentsSGIX(GLint marker)
        {
            Delegates.glReadInstrumentsSGIX(marker);
        }

        #endregion

        #region StartInstrumentsSGIX()

        /// <summary>
        /// 
        /// </summary>
        public static         void glStartInstrumentsSGIX()
        {
            Delegates.glStartInstrumentsSGIX();
        }

        #endregion

        #region StopInstrumentsSGIX(GLint marker)

        /// <summary>
        /// 
        /// </summary>
        public static         void glStopInstrumentsSGIX(GLint marker)
        {
            Delegates.glStopInstrumentsSGIX(marker);
        }

        #endregion

        #region FrameZoomSGIX(GLint factor)

        /// <summary>
        /// 
        /// </summary>
        public static         void glFrameZoomSGIX(GLint factor)
        {
            Delegates.glFrameZoomSGIX(factor);
        }

        #endregion

        #region TagSampleBufferSGIX()

        /// <summary>
        /// 
        /// </summary>
        public static         void glTagSampleBufferSGIX()
        {
            Delegates.glTagSampleBufferSGIX();
        }

        #endregion

        #region DeformationMap3dSGIX(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, IntPtr points)

        /// <summary>
        /// 
        /// </summary>
        public static         void glDeformationMap3dSGIX(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, IntPtr points)
        {
            Delegates.glDeformationMap3dSGIX(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points);
        }

        #endregion

        #region DeformationMap3dSGIX(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, object points)

        /// <summary>
        /// 
        /// </summary>
        public static         void glDeformationMap3dSGIX(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, object points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                Delegates.glDeformationMap3dSGIX(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region DeformationMap3dSGIX(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, GLdouble[] points)

        /// <summary>
        /// 
        /// </summary>
        public static         void glDeformationMap3dSGIX(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, GLdouble[] points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                Delegates.glDeformationMap3dSGIX(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region DeformationMap3fSGIX(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, IntPtr points)

        /// <summary>
        /// 
        /// </summary>
        public static         void glDeformationMap3fSGIX(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, IntPtr points)
        {
            Delegates.glDeformationMap3fSGIX(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points);
        }

        #endregion

        #region DeformationMap3fSGIX(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, object points)

        /// <summary>
        /// 
        /// </summary>
        public static         void glDeformationMap3fSGIX(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, object points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                Delegates.glDeformationMap3fSGIX(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region DeformationMap3fSGIX(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, GLfloat[] points)

        /// <summary>
        /// 
        /// </summary>
        public static         void glDeformationMap3fSGIX(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, GLfloat[] points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                Delegates.glDeformationMap3fSGIX(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region DeformSGIX(GLbitfield mask)

        /// <summary>
        /// 
        /// </summary>
        public static         void glDeformSGIX(GLbitfield mask)
        {
            Delegates.glDeformSGIX(mask);
        }

        #endregion

        #region LoadIdentityDeformationMapSGIX(GLbitfield mask)

        /// <summary>
        /// 
        /// </summary>
        public static         void glLoadIdentityDeformationMapSGIX(GLbitfield mask)
        {
            Delegates.glLoadIdentityDeformationMapSGIX(mask);
        }

        #endregion

        #region ReferencePlaneSGIX(IntPtr equation)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReferencePlaneSGIX(IntPtr equation)
        {
            Delegates.glReferencePlaneSGIX(equation);
        }

        #endregion

        #region ReferencePlaneSGIX(object equation)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReferencePlaneSGIX(object equation)
        {
            GCHandle h0 = GCHandle.Alloc(equation, GCHandleType.Pinned);
            try
            {
                Delegates.glReferencePlaneSGIX(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReferencePlaneSGIX(GLdouble[] equation)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReferencePlaneSGIX(GLdouble[] equation)
        {
            GCHandle h0 = GCHandle.Alloc(equation, GCHandleType.Pinned);
            try
            {
                Delegates.glReferencePlaneSGIX(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region FlushRasterSGIX()

        /// <summary>
        /// 
        /// </summary>
        public static         void glFlushRasterSGIX()
        {
            Delegates.glFlushRasterSGIX();
        }

        #endregion

        #region FogFuncSGIS(GLsizei n, IntPtr points)

        /// <summary>
        /// 
        /// </summary>
        public static         void glFogFuncSGIS(GLsizei n, IntPtr points)
        {
            Delegates.glFogFuncSGIS(n, points);
        }

        #endregion

        #region FogFuncSGIS(GLsizei n, object points)

        /// <summary>
        /// 
        /// </summary>
        public static         void glFogFuncSGIS(GLsizei n, object points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                Delegates.glFogFuncSGIS(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region FogFuncSGIS(GLsizei n, GLfloat[] points)

        /// <summary>
        /// 
        /// </summary>
        public static         void glFogFuncSGIS(GLsizei n, GLfloat[] points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                Delegates.glFogFuncSGIS(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetFogFuncSGIS(IntPtr points)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetFogFuncSGIS(IntPtr points)
        {
            Delegates.glGetFogFuncSGIS(points);
        }

        #endregion

        #region GetFogFuncSGIS(object points)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetFogFuncSGIS(object points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                Delegates.glGetFogFuncSGIS(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetFogFuncSGIS(GLfloat[] points)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetFogFuncSGIS(GLfloat[] points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                Delegates.glGetFogFuncSGIS(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ImageTransformParameteriHP(GLenum target, GLenum pname, GLint param)

        /// <summary>
        /// 
        /// </summary>
        public static         void glImageTransformParameteriHP(GLenum target, GLenum pname, GLint param)
        {
            Delegates.glImageTransformParameteriHP(target, pname, param);
        }

        #endregion

        #region ImageTransformParameterfHP(GLenum target, GLenum pname, GLfloat param)

        /// <summary>
        /// 
        /// </summary>
        public static         void glImageTransformParameterfHP(GLenum target, GLenum pname, GLfloat param)
        {
            Delegates.glImageTransformParameterfHP(target, pname, param);
        }

        #endregion

        #region ImageTransformParameterivHP(GLenum target, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glImageTransformParameterivHP(GLenum target, GLenum pname, IntPtr parameters)
        {
            Delegates.glImageTransformParameterivHP(target, pname, parameters);
        }

        #endregion

        #region ImageTransformParameterivHP(GLenum target, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glImageTransformParameterivHP(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glImageTransformParameterivHP(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ImageTransformParameterivHP(GLenum target, GLenum pname, GLint[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glImageTransformParameterivHP(GLenum target, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glImageTransformParameterivHP(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ImageTransformParameterfvHP(GLenum target, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glImageTransformParameterfvHP(GLenum target, GLenum pname, IntPtr parameters)
        {
            Delegates.glImageTransformParameterfvHP(target, pname, parameters);
        }

        #endregion

        #region ImageTransformParameterfvHP(GLenum target, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glImageTransformParameterfvHP(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glImageTransformParameterfvHP(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ImageTransformParameterfvHP(GLenum target, GLenum pname, GLfloat[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glImageTransformParameterfvHP(GLenum target, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glImageTransformParameterfvHP(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetImageTransformParameterivHP(GLenum target, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetImageTransformParameterivHP(GLenum target, GLenum pname, IntPtr parameters)
        {
            Delegates.glGetImageTransformParameterivHP(target, pname, parameters);
        }

        #endregion

        #region GetImageTransformParameterivHP(GLenum target, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetImageTransformParameterivHP(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetImageTransformParameterivHP(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetImageTransformParameterivHP(GLenum target, GLenum pname, GLint[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetImageTransformParameterivHP(GLenum target, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetImageTransformParameterivHP(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetImageTransformParameterfvHP(GLenum target, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetImageTransformParameterfvHP(GLenum target, GLenum pname, IntPtr parameters)
        {
            Delegates.glGetImageTransformParameterfvHP(target, pname, parameters);
        }

        #endregion

        #region GetImageTransformParameterfvHP(GLenum target, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetImageTransformParameterfvHP(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetImageTransformParameterfvHP(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetImageTransformParameterfvHP(GLenum target, GLenum pname, GLfloat[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetImageTransformParameterfvHP(GLenum target, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetImageTransformParameterfvHP(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ColorSubTableEXT(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, IntPtr data)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColorSubTableEXT(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, IntPtr data)
        {
            Delegates.glColorSubTableEXT(target, start, count, format, type, data);
        }

        #endregion

        #region ColorSubTableEXT(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, object data)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColorSubTableEXT(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glColorSubTableEXT(target, start, count, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region CopyColorSubTableEXT(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width)

        /// <summary>
        /// 
        /// </summary>
        public static         void glCopyColorSubTableEXT(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width)
        {
            Delegates.glCopyColorSubTableEXT(target, start, x, y, width);
        }

        #endregion

        #region HintPGI(GLenum target, GLint mode)

        /// <summary>
        /// 
        /// </summary>
        public static         void glHintPGI(GLenum target, GLint mode)
        {
            Delegates.glHintPGI(target, mode);
        }

        #endregion

        #region ColorTableEXT(GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, IntPtr table)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColorTableEXT(GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, IntPtr table)
        {
            Delegates.glColorTableEXT(target, internalFormat, width, format, type, table);
        }

        #endregion

        #region ColorTableEXT(GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, object table)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColorTableEXT(GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, object table)
        {
            GCHandle h0 = GCHandle.Alloc(table, GCHandleType.Pinned);
            try
            {
                Delegates.glColorTableEXT(target, internalFormat, width, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetColorTableEXT(GLenum target, GLenum format, GLenum type, IntPtr data)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetColorTableEXT(GLenum target, GLenum format, GLenum type, IntPtr data)
        {
            Delegates.glGetColorTableEXT(target, format, type, data);
        }

        #endregion

        #region GetColorTableEXT(GLenum target, GLenum format, GLenum type, object data)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetColorTableEXT(GLenum target, GLenum format, GLenum type, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glGetColorTableEXT(target, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetColorTableParameterivEXT(GLenum target, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetColorTableParameterivEXT(GLenum target, GLenum pname, IntPtr parameters)
        {
            Delegates.glGetColorTableParameterivEXT(target, pname, parameters);
        }

        #endregion

        #region GetColorTableParameterivEXT(GLenum target, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetColorTableParameterivEXT(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetColorTableParameterivEXT(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetColorTableParameterivEXT(GLenum target, GLenum pname, GLint[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetColorTableParameterivEXT(GLenum target, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetColorTableParameterivEXT(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetColorTableParameterfvEXT(GLenum target, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetColorTableParameterfvEXT(GLenum target, GLenum pname, IntPtr parameters)
        {
            Delegates.glGetColorTableParameterfvEXT(target, pname, parameters);
        }

        #endregion

        #region GetColorTableParameterfvEXT(GLenum target, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetColorTableParameterfvEXT(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetColorTableParameterfvEXT(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetColorTableParameterfvEXT(GLenum target, GLenum pname, GLfloat[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetColorTableParameterfvEXT(GLenum target, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetColorTableParameterfvEXT(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetListParameterfvSGIX(GLuint list, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetListParameterfvSGIX(GLuint list, GLenum pname, IntPtr parameters)
        {
            Delegates.glGetListParameterfvSGIX(list, pname, parameters);
        }

        #endregion

        #region GetListParameterfvSGIX(GLuint list, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetListParameterfvSGIX(GLuint list, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetListParameterfvSGIX(list, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetListParameterfvSGIX(GLuint list, GLenum pname, GLfloat[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetListParameterfvSGIX(GLuint list, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetListParameterfvSGIX(list, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetListParameterivSGIX(GLuint list, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetListParameterivSGIX(GLuint list, GLenum pname, IntPtr parameters)
        {
            Delegates.glGetListParameterivSGIX(list, pname, parameters);
        }

        #endregion

        #region GetListParameterivSGIX(GLuint list, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetListParameterivSGIX(GLuint list, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetListParameterivSGIX(list, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetListParameterivSGIX(GLuint list, GLenum pname, GLint[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetListParameterivSGIX(GLuint list, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetListParameterivSGIX(list, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ListParameterfSGIX(GLuint list, GLenum pname, GLfloat param)

        /// <summary>
        /// 
        /// </summary>
        public static         void glListParameterfSGIX(GLuint list, GLenum pname, GLfloat param)
        {
            Delegates.glListParameterfSGIX(list, pname, param);
        }

        #endregion

        #region ListParameterfvSGIX(GLuint list, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glListParameterfvSGIX(GLuint list, GLenum pname, IntPtr parameters)
        {
            Delegates.glListParameterfvSGIX(list, pname, parameters);
        }

        #endregion

        #region ListParameterfvSGIX(GLuint list, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glListParameterfvSGIX(GLuint list, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glListParameterfvSGIX(list, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ListParameterfvSGIX(GLuint list, GLenum pname, GLfloat[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glListParameterfvSGIX(GLuint list, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glListParameterfvSGIX(list, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ListParameteriSGIX(GLuint list, GLenum pname, GLint param)

        /// <summary>
        /// 
        /// </summary>
        public static         void glListParameteriSGIX(GLuint list, GLenum pname, GLint param)
        {
            Delegates.glListParameteriSGIX(list, pname, param);
        }

        #endregion

        #region ListParameterivSGIX(GLuint list, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glListParameterivSGIX(GLuint list, GLenum pname, IntPtr parameters)
        {
            Delegates.glListParameterivSGIX(list, pname, parameters);
        }

        #endregion

        #region ListParameterivSGIX(GLuint list, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glListParameterivSGIX(GLuint list, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glListParameterivSGIX(list, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ListParameterivSGIX(GLuint list, GLenum pname, GLint[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glListParameterivSGIX(GLuint list, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glListParameterivSGIX(list, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region IndexMaterialEXT(GLenum face, GLenum mode)

        /// <summary>
        /// 
        /// </summary>
        public static         void glIndexMaterialEXT(GLenum face, GLenum mode)
        {
            Delegates.glIndexMaterialEXT(face, mode);
        }

        #endregion

        #region IndexFuncEXT(GLenum func, GLclampf reference)

        /// <summary>
        /// 
        /// </summary>
        public static         void glIndexFuncEXT(GLenum func, GLclampf reference)
        {
            Delegates.glIndexFuncEXT(func, reference);
        }

        #endregion

        #region LockArraysEXT(GLint first, GLsizei count)

        /// <summary>
        /// 
        /// </summary>
        public static         void glLockArraysEXT(GLint first, GLsizei count)
        {
            Delegates.glLockArraysEXT(first, count);
        }

        #endregion

        #region UnlockArraysEXT()

        /// <summary>
        /// 
        /// </summary>
        public static         void glUnlockArraysEXT()
        {
            Delegates.glUnlockArraysEXT();
        }

        #endregion

        #region CullParameterdvEXT(GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glCullParameterdvEXT(GLenum pname, IntPtr parameters)
        {
            Delegates.glCullParameterdvEXT(pname, parameters);
        }

        #endregion

        #region CullParameterdvEXT(GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glCullParameterdvEXT(GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glCullParameterdvEXT(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region CullParameterdvEXT(GLenum pname, GLdouble[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glCullParameterdvEXT(GLenum pname, GLdouble[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glCullParameterdvEXT(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region CullParameterfvEXT(GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glCullParameterfvEXT(GLenum pname, IntPtr parameters)
        {
            Delegates.glCullParameterfvEXT(pname, parameters);
        }

        #endregion

        #region CullParameterfvEXT(GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glCullParameterfvEXT(GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glCullParameterfvEXT(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region CullParameterfvEXT(GLenum pname, GLfloat[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glCullParameterfvEXT(GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glCullParameterfvEXT(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region FragmentColorMaterialSGIX(GLenum face, GLenum mode)

        /// <summary>
        /// 
        /// </summary>
        public static         void glFragmentColorMaterialSGIX(GLenum face, GLenum mode)
        {
            Delegates.glFragmentColorMaterialSGIX(face, mode);
        }

        #endregion

        #region FragmentLightfSGIX(GLenum light, GLenum pname, GLfloat param)

        /// <summary>
        /// 
        /// </summary>
        public static         void glFragmentLightfSGIX(GLenum light, GLenum pname, GLfloat param)
        {
            Delegates.glFragmentLightfSGIX(light, pname, param);
        }

        #endregion

        #region FragmentLightfvSGIX(GLenum light, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glFragmentLightfvSGIX(GLenum light, GLenum pname, IntPtr parameters)
        {
            Delegates.glFragmentLightfvSGIX(light, pname, parameters);
        }

        #endregion

        #region FragmentLightfvSGIX(GLenum light, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glFragmentLightfvSGIX(GLenum light, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glFragmentLightfvSGIX(light, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region FragmentLightfvSGIX(GLenum light, GLenum pname, GLfloat[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glFragmentLightfvSGIX(GLenum light, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glFragmentLightfvSGIX(light, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region FragmentLightiSGIX(GLenum light, GLenum pname, GLint param)

        /// <summary>
        /// 
        /// </summary>
        public static         void glFragmentLightiSGIX(GLenum light, GLenum pname, GLint param)
        {
            Delegates.glFragmentLightiSGIX(light, pname, param);
        }

        #endregion

        #region FragmentLightivSGIX(GLenum light, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glFragmentLightivSGIX(GLenum light, GLenum pname, IntPtr parameters)
        {
            Delegates.glFragmentLightivSGIX(light, pname, parameters);
        }

        #endregion

        #region FragmentLightivSGIX(GLenum light, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glFragmentLightivSGIX(GLenum light, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glFragmentLightivSGIX(light, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region FragmentLightivSGIX(GLenum light, GLenum pname, GLint[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glFragmentLightivSGIX(GLenum light, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glFragmentLightivSGIX(light, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region FragmentLightModelfSGIX(GLenum pname, GLfloat param)

        /// <summary>
        /// 
        /// </summary>
        public static         void glFragmentLightModelfSGIX(GLenum pname, GLfloat param)
        {
            Delegates.glFragmentLightModelfSGIX(pname, param);
        }

        #endregion

        #region FragmentLightModelfvSGIX(GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glFragmentLightModelfvSGIX(GLenum pname, IntPtr parameters)
        {
            Delegates.glFragmentLightModelfvSGIX(pname, parameters);
        }

        #endregion

        #region FragmentLightModelfvSGIX(GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glFragmentLightModelfvSGIX(GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glFragmentLightModelfvSGIX(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region FragmentLightModelfvSGIX(GLenum pname, GLfloat[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glFragmentLightModelfvSGIX(GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glFragmentLightModelfvSGIX(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region FragmentLightModeliSGIX(GLenum pname, GLint param)

        /// <summary>
        /// 
        /// </summary>
        public static         void glFragmentLightModeliSGIX(GLenum pname, GLint param)
        {
            Delegates.glFragmentLightModeliSGIX(pname, param);
        }

        #endregion

        #region FragmentLightModelivSGIX(GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glFragmentLightModelivSGIX(GLenum pname, IntPtr parameters)
        {
            Delegates.glFragmentLightModelivSGIX(pname, parameters);
        }

        #endregion

        #region FragmentLightModelivSGIX(GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glFragmentLightModelivSGIX(GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glFragmentLightModelivSGIX(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region FragmentLightModelivSGIX(GLenum pname, GLint[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glFragmentLightModelivSGIX(GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glFragmentLightModelivSGIX(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region FragmentMaterialfSGIX(GLenum face, GLenum pname, GLfloat param)

        /// <summary>
        /// 
        /// </summary>
        public static         void glFragmentMaterialfSGIX(GLenum face, GLenum pname, GLfloat param)
        {
            Delegates.glFragmentMaterialfSGIX(face, pname, param);
        }

        #endregion

        #region FragmentMaterialfvSGIX(GLenum face, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glFragmentMaterialfvSGIX(GLenum face, GLenum pname, IntPtr parameters)
        {
            Delegates.glFragmentMaterialfvSGIX(face, pname, parameters);
        }

        #endregion

        #region FragmentMaterialfvSGIX(GLenum face, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glFragmentMaterialfvSGIX(GLenum face, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glFragmentMaterialfvSGIX(face, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region FragmentMaterialfvSGIX(GLenum face, GLenum pname, GLfloat[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glFragmentMaterialfvSGIX(GLenum face, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glFragmentMaterialfvSGIX(face, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region FragmentMaterialiSGIX(GLenum face, GLenum pname, GLint param)

        /// <summary>
        /// 
        /// </summary>
        public static         void glFragmentMaterialiSGIX(GLenum face, GLenum pname, GLint param)
        {
            Delegates.glFragmentMaterialiSGIX(face, pname, param);
        }

        #endregion

        #region FragmentMaterialivSGIX(GLenum face, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glFragmentMaterialivSGIX(GLenum face, GLenum pname, IntPtr parameters)
        {
            Delegates.glFragmentMaterialivSGIX(face, pname, parameters);
        }

        #endregion

        #region FragmentMaterialivSGIX(GLenum face, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glFragmentMaterialivSGIX(GLenum face, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glFragmentMaterialivSGIX(face, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region FragmentMaterialivSGIX(GLenum face, GLenum pname, GLint[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glFragmentMaterialivSGIX(GLenum face, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glFragmentMaterialivSGIX(face, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetFragmentLightfvSGIX(GLenum light, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetFragmentLightfvSGIX(GLenum light, GLenum pname, IntPtr parameters)
        {
            Delegates.glGetFragmentLightfvSGIX(light, pname, parameters);
        }

        #endregion

        #region GetFragmentLightfvSGIX(GLenum light, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetFragmentLightfvSGIX(GLenum light, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetFragmentLightfvSGIX(light, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetFragmentLightfvSGIX(GLenum light, GLenum pname, GLfloat[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetFragmentLightfvSGIX(GLenum light, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetFragmentLightfvSGIX(light, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetFragmentLightivSGIX(GLenum light, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetFragmentLightivSGIX(GLenum light, GLenum pname, IntPtr parameters)
        {
            Delegates.glGetFragmentLightivSGIX(light, pname, parameters);
        }

        #endregion

        #region GetFragmentLightivSGIX(GLenum light, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetFragmentLightivSGIX(GLenum light, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetFragmentLightivSGIX(light, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetFragmentLightivSGIX(GLenum light, GLenum pname, GLint[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetFragmentLightivSGIX(GLenum light, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetFragmentLightivSGIX(light, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetFragmentMaterialfvSGIX(GLenum face, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetFragmentMaterialfvSGIX(GLenum face, GLenum pname, IntPtr parameters)
        {
            Delegates.glGetFragmentMaterialfvSGIX(face, pname, parameters);
        }

        #endregion

        #region GetFragmentMaterialfvSGIX(GLenum face, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetFragmentMaterialfvSGIX(GLenum face, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetFragmentMaterialfvSGIX(face, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetFragmentMaterialfvSGIX(GLenum face, GLenum pname, GLfloat[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetFragmentMaterialfvSGIX(GLenum face, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetFragmentMaterialfvSGIX(face, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetFragmentMaterialivSGIX(GLenum face, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetFragmentMaterialivSGIX(GLenum face, GLenum pname, IntPtr parameters)
        {
            Delegates.glGetFragmentMaterialivSGIX(face, pname, parameters);
        }

        #endregion

        #region GetFragmentMaterialivSGIX(GLenum face, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetFragmentMaterialivSGIX(GLenum face, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetFragmentMaterialivSGIX(face, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetFragmentMaterialivSGIX(GLenum face, GLenum pname, GLint[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetFragmentMaterialivSGIX(GLenum face, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetFragmentMaterialivSGIX(face, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region LightEnviSGIX(GLenum pname, GLint param)

        /// <summary>
        /// 
        /// </summary>
        public static         void glLightEnviSGIX(GLenum pname, GLint param)
        {
            Delegates.glLightEnviSGIX(pname, param);
        }

        #endregion

        #region DrawRangeElementsEXT(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, IntPtr indices)

        /// <summary>
        /// 
        /// </summary>
        public static         void glDrawRangeElementsEXT(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, IntPtr indices)
        {
            Delegates.glDrawRangeElementsEXT(mode, start, end, count, type, indices);
        }

        #endregion

        #region DrawRangeElementsEXT(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, object indices)

        /// <summary>
        /// 
        /// </summary>
        public static         void glDrawRangeElementsEXT(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, object indices)
        {
            GCHandle h0 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glDrawRangeElementsEXT(mode, start, end, count, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ApplyTextureEXT(GLenum mode)

        /// <summary>
        /// 
        /// </summary>
        public static         void glApplyTextureEXT(GLenum mode)
        {
            Delegates.glApplyTextureEXT(mode);
        }

        #endregion

        #region TextureLightEXT(GLenum pname)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTextureLightEXT(GLenum pname)
        {
            Delegates.glTextureLightEXT(pname);
        }

        #endregion

        #region TextureMaterialEXT(GLenum face, GLenum mode)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTextureMaterialEXT(GLenum face, GLenum mode)
        {
            Delegates.glTextureMaterialEXT(face, mode);
        }

        #endregion

        #region AsyncMarkerSGIX(GLuint marker)

        /// <summary>
        /// 
        /// </summary>
        public static         void glAsyncMarkerSGIX(GLuint marker)
        {
            Delegates.glAsyncMarkerSGIX(marker);
        }

        #endregion

        #region FinishAsyncSGIX(IntPtr markerp)

        /// <summary>
        /// 
        /// </summary>
        public static         GLint glFinishAsyncSGIX(IntPtr markerp)
        {
            return Delegates.glFinishAsyncSGIX(markerp);
        }

        #endregion

        #region FinishAsyncSGIX(object markerp)

        /// <summary>
        /// 
        /// </summary>
        public static         GLint glFinishAsyncSGIX(object markerp)
        {
            GCHandle h0 = GCHandle.Alloc(markerp, GCHandleType.Pinned);
            try
            {
                return Delegates.glFinishAsyncSGIX(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region FinishAsyncSGIX(GLuint[] markerp)

        /// <summary>
        /// 
        /// </summary>
        public static         GLint glFinishAsyncSGIX(GLuint[] markerp)
        {
            GCHandle h0 = GCHandle.Alloc(markerp, GCHandleType.Pinned);
            try
            {
                return Delegates.glFinishAsyncSGIX(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region PollAsyncSGIX(IntPtr markerp)

        /// <summary>
        /// 
        /// </summary>
        public static         GLint glPollAsyncSGIX(IntPtr markerp)
        {
            return Delegates.glPollAsyncSGIX(markerp);
        }

        #endregion

        #region PollAsyncSGIX(object markerp)

        /// <summary>
        /// 
        /// </summary>
        public static         GLint glPollAsyncSGIX(object markerp)
        {
            GCHandle h0 = GCHandle.Alloc(markerp, GCHandleType.Pinned);
            try
            {
                return Delegates.glPollAsyncSGIX(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region PollAsyncSGIX(GLuint[] markerp)

        /// <summary>
        /// 
        /// </summary>
        public static         GLint glPollAsyncSGIX(GLuint[] markerp)
        {
            GCHandle h0 = GCHandle.Alloc(markerp, GCHandleType.Pinned);
            try
            {
                return Delegates.glPollAsyncSGIX(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GenAsyncMarkersSGIX(GLsizei range)

        /// <summary>
        /// 
        /// </summary>
        public static         GLuint glGenAsyncMarkersSGIX(GLsizei range)
        {
            return Delegates.glGenAsyncMarkersSGIX(range);
        }

        #endregion

        #region DeleteAsyncMarkersSGIX(GLuint marker, GLsizei range)

        /// <summary>
        /// 
        /// </summary>
        public static         void glDeleteAsyncMarkersSGIX(GLuint marker, GLsizei range)
        {
            Delegates.glDeleteAsyncMarkersSGIX(marker, range);
        }

        #endregion

        #region IsAsyncMarkerSGIX(GLuint marker)

        /// <summary>
        /// 
        /// </summary>
        public static         GLboolean glIsAsyncMarkerSGIX(GLuint marker)
        {
            return Delegates.glIsAsyncMarkerSGIX(marker);
        }

        #endregion

        #region VertexPointervINTEL(GLint size, GLenum type, IntPtr pointer)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexPointervINTEL(GLint size, GLenum type, IntPtr pointer)
        {
            Delegates.glVertexPointervINTEL(size, type, pointer);
        }

        #endregion

        #region VertexPointervINTEL(GLint size, GLenum type, object pointer)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexPointervINTEL(GLint size, GLenum type, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexPointervINTEL(size, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexPointervINTEL(GLint size, GLenum type, IntPtr[] pointer)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexPointervINTEL(GLint size, GLenum type, IntPtr[] pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexPointervINTEL(size, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region NormalPointervINTEL(GLenum type, IntPtr pointer)

        /// <summary>
        /// 
        /// </summary>
        public static         void glNormalPointervINTEL(GLenum type, IntPtr pointer)
        {
            Delegates.glNormalPointervINTEL(type, pointer);
        }

        #endregion

        #region NormalPointervINTEL(GLenum type, object pointer)

        /// <summary>
        /// 
        /// </summary>
        public static         void glNormalPointervINTEL(GLenum type, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glNormalPointervINTEL(type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region NormalPointervINTEL(GLenum type, IntPtr[] pointer)

        /// <summary>
        /// 
        /// </summary>
        public static         void glNormalPointervINTEL(GLenum type, IntPtr[] pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glNormalPointervINTEL(type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ColorPointervINTEL(GLint size, GLenum type, IntPtr pointer)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColorPointervINTEL(GLint size, GLenum type, IntPtr pointer)
        {
            Delegates.glColorPointervINTEL(size, type, pointer);
        }

        #endregion

        #region ColorPointervINTEL(GLint size, GLenum type, object pointer)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColorPointervINTEL(GLint size, GLenum type, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glColorPointervINTEL(size, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ColorPointervINTEL(GLint size, GLenum type, IntPtr[] pointer)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColorPointervINTEL(GLint size, GLenum type, IntPtr[] pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glColorPointervINTEL(size, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoordPointervINTEL(GLint size, GLenum type, IntPtr pointer)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoordPointervINTEL(GLint size, GLenum type, IntPtr pointer)
        {
            Delegates.glTexCoordPointervINTEL(size, type, pointer);
        }

        #endregion

        #region TexCoordPointervINTEL(GLint size, GLenum type, object pointer)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoordPointervINTEL(GLint size, GLenum type, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoordPointervINTEL(size, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoordPointervINTEL(GLint size, GLenum type, IntPtr[] pointer)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoordPointervINTEL(GLint size, GLenum type, IntPtr[] pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoordPointervINTEL(size, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region PixelTransformParameteriEXT(GLenum target, GLenum pname, GLint param)

        /// <summary>
        /// 
        /// </summary>
        public static         void glPixelTransformParameteriEXT(GLenum target, GLenum pname, GLint param)
        {
            Delegates.glPixelTransformParameteriEXT(target, pname, param);
        }

        #endregion

        #region PixelTransformParameterfEXT(GLenum target, GLenum pname, GLfloat param)

        /// <summary>
        /// 
        /// </summary>
        public static         void glPixelTransformParameterfEXT(GLenum target, GLenum pname, GLfloat param)
        {
            Delegates.glPixelTransformParameterfEXT(target, pname, param);
        }

        #endregion

        #region PixelTransformParameterivEXT(GLenum target, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glPixelTransformParameterivEXT(GLenum target, GLenum pname, IntPtr parameters)
        {
            Delegates.glPixelTransformParameterivEXT(target, pname, parameters);
        }

        #endregion

        #region PixelTransformParameterivEXT(GLenum target, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glPixelTransformParameterivEXT(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glPixelTransformParameterivEXT(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region PixelTransformParameterivEXT(GLenum target, GLenum pname, GLint[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glPixelTransformParameterivEXT(GLenum target, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glPixelTransformParameterivEXT(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region PixelTransformParameterfvEXT(GLenum target, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glPixelTransformParameterfvEXT(GLenum target, GLenum pname, IntPtr parameters)
        {
            Delegates.glPixelTransformParameterfvEXT(target, pname, parameters);
        }

        #endregion

        #region PixelTransformParameterfvEXT(GLenum target, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glPixelTransformParameterfvEXT(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glPixelTransformParameterfvEXT(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region PixelTransformParameterfvEXT(GLenum target, GLenum pname, GLfloat[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glPixelTransformParameterfvEXT(GLenum target, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glPixelTransformParameterfvEXT(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SecondaryColor3bEXT(GLbyte red, GLbyte green, GLbyte blue)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSecondaryColor3bEXT(GLbyte red, GLbyte green, GLbyte blue)
        {
            Delegates.glSecondaryColor3bEXT(red, green, blue);
        }

        #endregion

        #region SecondaryColor3bvEXT(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSecondaryColor3bvEXT(IntPtr v)
        {
            Delegates.glSecondaryColor3bvEXT(v);
        }

        #endregion

        #region SecondaryColor3bvEXT(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSecondaryColor3bvEXT(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glSecondaryColor3bvEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SecondaryColor3bvEXT(GLbyte[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSecondaryColor3bvEXT(GLbyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glSecondaryColor3bvEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SecondaryColor3dEXT(GLdouble red, GLdouble green, GLdouble blue)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSecondaryColor3dEXT(GLdouble red, GLdouble green, GLdouble blue)
        {
            Delegates.glSecondaryColor3dEXT(red, green, blue);
        }

        #endregion

        #region SecondaryColor3dvEXT(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSecondaryColor3dvEXT(IntPtr v)
        {
            Delegates.glSecondaryColor3dvEXT(v);
        }

        #endregion

        #region SecondaryColor3dvEXT(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSecondaryColor3dvEXT(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glSecondaryColor3dvEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SecondaryColor3dvEXT(GLdouble[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSecondaryColor3dvEXT(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glSecondaryColor3dvEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SecondaryColor3fEXT(GLfloat red, GLfloat green, GLfloat blue)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSecondaryColor3fEXT(GLfloat red, GLfloat green, GLfloat blue)
        {
            Delegates.glSecondaryColor3fEXT(red, green, blue);
        }

        #endregion

        #region SecondaryColor3fvEXT(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSecondaryColor3fvEXT(IntPtr v)
        {
            Delegates.glSecondaryColor3fvEXT(v);
        }

        #endregion

        #region SecondaryColor3fvEXT(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSecondaryColor3fvEXT(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glSecondaryColor3fvEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SecondaryColor3fvEXT(GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSecondaryColor3fvEXT(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glSecondaryColor3fvEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SecondaryColor3iEXT(GLint red, GLint green, GLint blue)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSecondaryColor3iEXT(GLint red, GLint green, GLint blue)
        {
            Delegates.glSecondaryColor3iEXT(red, green, blue);
        }

        #endregion

        #region SecondaryColor3ivEXT(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSecondaryColor3ivEXT(IntPtr v)
        {
            Delegates.glSecondaryColor3ivEXT(v);
        }

        #endregion

        #region SecondaryColor3ivEXT(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSecondaryColor3ivEXT(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glSecondaryColor3ivEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SecondaryColor3ivEXT(GLint[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSecondaryColor3ivEXT(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glSecondaryColor3ivEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SecondaryColor3sEXT(GLshort red, GLshort green, GLshort blue)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSecondaryColor3sEXT(GLshort red, GLshort green, GLshort blue)
        {
            Delegates.glSecondaryColor3sEXT(red, green, blue);
        }

        #endregion

        #region SecondaryColor3svEXT(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSecondaryColor3svEXT(IntPtr v)
        {
            Delegates.glSecondaryColor3svEXT(v);
        }

        #endregion

        #region SecondaryColor3svEXT(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSecondaryColor3svEXT(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glSecondaryColor3svEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SecondaryColor3svEXT(GLshort[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSecondaryColor3svEXT(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glSecondaryColor3svEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SecondaryColor3ubEXT(GLubyte red, GLubyte green, GLubyte blue)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSecondaryColor3ubEXT(GLubyte red, GLubyte green, GLubyte blue)
        {
            Delegates.glSecondaryColor3ubEXT(red, green, blue);
        }

        #endregion

        #region SecondaryColor3ubvEXT(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSecondaryColor3ubvEXT(IntPtr v)
        {
            Delegates.glSecondaryColor3ubvEXT(v);
        }

        #endregion

        #region SecondaryColor3ubvEXT(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSecondaryColor3ubvEXT(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glSecondaryColor3ubvEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SecondaryColor3ubvEXT(GLubyte[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSecondaryColor3ubvEXT(GLubyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glSecondaryColor3ubvEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SecondaryColor3uiEXT(GLuint red, GLuint green, GLuint blue)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSecondaryColor3uiEXT(GLuint red, GLuint green, GLuint blue)
        {
            Delegates.glSecondaryColor3uiEXT(red, green, blue);
        }

        #endregion

        #region SecondaryColor3uivEXT(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSecondaryColor3uivEXT(IntPtr v)
        {
            Delegates.glSecondaryColor3uivEXT(v);
        }

        #endregion

        #region SecondaryColor3uivEXT(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSecondaryColor3uivEXT(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glSecondaryColor3uivEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SecondaryColor3uivEXT(GLuint[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSecondaryColor3uivEXT(GLuint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glSecondaryColor3uivEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SecondaryColor3usEXT(GLushort red, GLushort green, GLushort blue)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSecondaryColor3usEXT(GLushort red, GLushort green, GLushort blue)
        {
            Delegates.glSecondaryColor3usEXT(red, green, blue);
        }

        #endregion

        #region SecondaryColor3usvEXT(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSecondaryColor3usvEXT(IntPtr v)
        {
            Delegates.glSecondaryColor3usvEXT(v);
        }

        #endregion

        #region SecondaryColor3usvEXT(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSecondaryColor3usvEXT(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glSecondaryColor3usvEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SecondaryColor3usvEXT(GLushort[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSecondaryColor3usvEXT(GLushort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glSecondaryColor3usvEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SecondaryColorPointerEXT(GLint size, GLenum type, GLsizei stride, IntPtr pointer)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSecondaryColorPointerEXT(GLint size, GLenum type, GLsizei stride, IntPtr pointer)
        {
            Delegates.glSecondaryColorPointerEXT(size, type, stride, pointer);
        }

        #endregion

        #region SecondaryColorPointerEXT(GLint size, GLenum type, GLsizei stride, object pointer)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSecondaryColorPointerEXT(GLint size, GLenum type, GLsizei stride, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glSecondaryColorPointerEXT(size, type, stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TextureNormalEXT(GLenum mode)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTextureNormalEXT(GLenum mode)
        {
            Delegates.glTextureNormalEXT(mode);
        }

        #endregion

        #region MultiDrawArraysEXT(GLenum mode, IntPtr first, IntPtr count, GLsizei primcount)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiDrawArraysEXT(GLenum mode, IntPtr first, IntPtr count, GLsizei primcount)
        {
            Delegates.glMultiDrawArraysEXT(mode, first, count, primcount);
        }

        #endregion

        #region MultiDrawArraysEXT(GLenum mode, IntPtr first, object count, GLsizei primcount)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiDrawArraysEXT(GLenum mode, IntPtr first, object count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawArraysEXT(mode, first, h0.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiDrawArraysEXT(GLenum mode, IntPtr first, GLsizei[] count, GLsizei primcount)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiDrawArraysEXT(GLenum mode, IntPtr first, GLsizei[] count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawArraysEXT(mode, first, h0.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiDrawArraysEXT(GLenum mode, object first, IntPtr count, GLsizei primcount)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiDrawArraysEXT(GLenum mode, object first, IntPtr count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawArraysEXT(mode, h0.AddrOfPinnedObject(), count, primcount);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiDrawArraysEXT(GLenum mode, object first, object count, GLsizei primcount)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiDrawArraysEXT(GLenum mode, object first, object count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawArraysEXT(mode, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region MultiDrawArraysEXT(GLenum mode, object first, GLsizei[] count, GLsizei primcount)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiDrawArraysEXT(GLenum mode, object first, GLsizei[] count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawArraysEXT(mode, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region MultiDrawArraysEXT(GLenum mode, GLint[] first, IntPtr count, GLsizei primcount)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiDrawArraysEXT(GLenum mode, GLint[] first, IntPtr count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawArraysEXT(mode, h0.AddrOfPinnedObject(), count, primcount);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiDrawArraysEXT(GLenum mode, GLint[] first, object count, GLsizei primcount)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiDrawArraysEXT(GLenum mode, GLint[] first, object count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawArraysEXT(mode, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region MultiDrawArraysEXT(GLenum mode, GLint[] first, GLsizei[] count, GLsizei primcount)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiDrawArraysEXT(GLenum mode, GLint[] first, GLsizei[] count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawArraysEXT(mode, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region MultiDrawElementsEXT(GLenum mode, IntPtr count, GLenum type, IntPtr indices, GLsizei primcount)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiDrawElementsEXT(GLenum mode, IntPtr count, GLenum type, IntPtr indices, GLsizei primcount)
        {
            Delegates.glMultiDrawElementsEXT(mode, count, type, indices, primcount);
        }

        #endregion

        #region MultiDrawElementsEXT(GLenum mode, IntPtr count, GLenum type, object indices, GLsizei primcount)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiDrawElementsEXT(GLenum mode, IntPtr count, GLenum type, object indices, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawElementsEXT(mode, count, type, h0.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiDrawElementsEXT(GLenum mode, IntPtr count, GLenum type, IntPtr[] indices, GLsizei primcount)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiDrawElementsEXT(GLenum mode, IntPtr count, GLenum type, IntPtr[] indices, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawElementsEXT(mode, count, type, h0.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiDrawElementsEXT(GLenum mode, object count, GLenum type, IntPtr indices, GLsizei primcount)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiDrawElementsEXT(GLenum mode, object count, GLenum type, IntPtr indices, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawElementsEXT(mode, h0.AddrOfPinnedObject(), type, indices, primcount);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiDrawElementsEXT(GLenum mode, object count, GLenum type, object indices, GLsizei primcount)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiDrawElementsEXT(GLenum mode, object count, GLenum type, object indices, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawElementsEXT(mode, h0.AddrOfPinnedObject(), type, h1.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region MultiDrawElementsEXT(GLenum mode, object count, GLenum type, IntPtr[] indices, GLsizei primcount)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiDrawElementsEXT(GLenum mode, object count, GLenum type, IntPtr[] indices, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawElementsEXT(mode, h0.AddrOfPinnedObject(), type, h1.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region MultiDrawElementsEXT(GLenum mode, GLsizei[] count, GLenum type, IntPtr indices, GLsizei primcount)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiDrawElementsEXT(GLenum mode, GLsizei[] count, GLenum type, IntPtr indices, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawElementsEXT(mode, h0.AddrOfPinnedObject(), type, indices, primcount);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiDrawElementsEXT(GLenum mode, GLsizei[] count, GLenum type, object indices, GLsizei primcount)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiDrawElementsEXT(GLenum mode, GLsizei[] count, GLenum type, object indices, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawElementsEXT(mode, h0.AddrOfPinnedObject(), type, h1.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region MultiDrawElementsEXT(GLenum mode, GLsizei[] count, GLenum type, IntPtr[] indices, GLsizei primcount)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiDrawElementsEXT(GLenum mode, GLsizei[] count, GLenum type, IntPtr[] indices, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawElementsEXT(mode, h0.AddrOfPinnedObject(), type, h1.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region FogCoordfEXT(GLfloat coord)

        /// <summary>
        /// 
        /// </summary>
        public static         void glFogCoordfEXT(GLfloat coord)
        {
            Delegates.glFogCoordfEXT(coord);
        }

        #endregion

        #region FogCoordfvEXT(IntPtr coord)

        /// <summary>
        /// 
        /// </summary>
        public static         void glFogCoordfvEXT(IntPtr coord)
        {
            Delegates.glFogCoordfvEXT(coord);
        }

        #endregion

        #region FogCoordfvEXT(object coord)

        /// <summary>
        /// 
        /// </summary>
        public static         void glFogCoordfvEXT(object coord)
        {
            GCHandle h0 = GCHandle.Alloc(coord, GCHandleType.Pinned);
            try
            {
                Delegates.glFogCoordfvEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region FogCoordfvEXT(GLfloat[] coord)

        /// <summary>
        /// 
        /// </summary>
        public static         void glFogCoordfvEXT(GLfloat[] coord)
        {
            GCHandle h0 = GCHandle.Alloc(coord, GCHandleType.Pinned);
            try
            {
                Delegates.glFogCoordfvEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region FogCoorddEXT(GLdouble coord)

        /// <summary>
        /// 
        /// </summary>
        public static         void glFogCoorddEXT(GLdouble coord)
        {
            Delegates.glFogCoorddEXT(coord);
        }

        #endregion

        #region FogCoorddvEXT(IntPtr coord)

        /// <summary>
        /// 
        /// </summary>
        public static         void glFogCoorddvEXT(IntPtr coord)
        {
            Delegates.glFogCoorddvEXT(coord);
        }

        #endregion

        #region FogCoorddvEXT(object coord)

        /// <summary>
        /// 
        /// </summary>
        public static         void glFogCoorddvEXT(object coord)
        {
            GCHandle h0 = GCHandle.Alloc(coord, GCHandleType.Pinned);
            try
            {
                Delegates.glFogCoorddvEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region FogCoorddvEXT(GLdouble[] coord)

        /// <summary>
        /// 
        /// </summary>
        public static         void glFogCoorddvEXT(GLdouble[] coord)
        {
            GCHandle h0 = GCHandle.Alloc(coord, GCHandleType.Pinned);
            try
            {
                Delegates.glFogCoorddvEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region FogCoordPointerEXT(GLenum type, GLsizei stride, IntPtr pointer)

        /// <summary>
        /// 
        /// </summary>
        public static         void glFogCoordPointerEXT(GLenum type, GLsizei stride, IntPtr pointer)
        {
            Delegates.glFogCoordPointerEXT(type, stride, pointer);
        }

        #endregion

        #region FogCoordPointerEXT(GLenum type, GLsizei stride, object pointer)

        /// <summary>
        /// 
        /// </summary>
        public static         void glFogCoordPointerEXT(GLenum type, GLsizei stride, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glFogCoordPointerEXT(type, stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Tangent3bEXT(GLbyte tx, GLbyte ty, GLbyte tz)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTangent3bEXT(GLbyte tx, GLbyte ty, GLbyte tz)
        {
            Delegates.glTangent3bEXT(tx, ty, tz);
        }

        #endregion

        #region Tangent3bvEXT(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTangent3bvEXT(IntPtr v)
        {
            Delegates.glTangent3bvEXT(v);
        }

        #endregion

        #region Tangent3bvEXT(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTangent3bvEXT(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTangent3bvEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Tangent3bvEXT(GLbyte[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTangent3bvEXT(GLbyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTangent3bvEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Tangent3dEXT(GLdouble tx, GLdouble ty, GLdouble tz)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTangent3dEXT(GLdouble tx, GLdouble ty, GLdouble tz)
        {
            Delegates.glTangent3dEXT(tx, ty, tz);
        }

        #endregion

        #region Tangent3dvEXT(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTangent3dvEXT(IntPtr v)
        {
            Delegates.glTangent3dvEXT(v);
        }

        #endregion

        #region Tangent3dvEXT(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTangent3dvEXT(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTangent3dvEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Tangent3dvEXT(GLdouble[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTangent3dvEXT(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTangent3dvEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Tangent3fEXT(GLfloat tx, GLfloat ty, GLfloat tz)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTangent3fEXT(GLfloat tx, GLfloat ty, GLfloat tz)
        {
            Delegates.glTangent3fEXT(tx, ty, tz);
        }

        #endregion

        #region Tangent3fvEXT(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTangent3fvEXT(IntPtr v)
        {
            Delegates.glTangent3fvEXT(v);
        }

        #endregion

        #region Tangent3fvEXT(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTangent3fvEXT(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTangent3fvEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Tangent3fvEXT(GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTangent3fvEXT(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTangent3fvEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Tangent3iEXT(GLint tx, GLint ty, GLint tz)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTangent3iEXT(GLint tx, GLint ty, GLint tz)
        {
            Delegates.glTangent3iEXT(tx, ty, tz);
        }

        #endregion

        #region Tangent3ivEXT(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTangent3ivEXT(IntPtr v)
        {
            Delegates.glTangent3ivEXT(v);
        }

        #endregion

        #region Tangent3ivEXT(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTangent3ivEXT(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTangent3ivEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Tangent3ivEXT(GLint[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTangent3ivEXT(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTangent3ivEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Tangent3sEXT(GLshort tx, GLshort ty, GLshort tz)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTangent3sEXT(GLshort tx, GLshort ty, GLshort tz)
        {
            Delegates.glTangent3sEXT(tx, ty, tz);
        }

        #endregion

        #region Tangent3svEXT(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTangent3svEXT(IntPtr v)
        {
            Delegates.glTangent3svEXT(v);
        }

        #endregion

        #region Tangent3svEXT(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTangent3svEXT(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTangent3svEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Tangent3svEXT(GLshort[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTangent3svEXT(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTangent3svEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Binormal3bEXT(GLbyte bx, GLbyte by, GLbyte bz)

        /// <summary>
        /// 
        /// </summary>
        public static         void glBinormal3bEXT(GLbyte bx, GLbyte by, GLbyte bz)
        {
            Delegates.glBinormal3bEXT(bx, by, bz);
        }

        #endregion

        #region Binormal3bvEXT(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glBinormal3bvEXT(IntPtr v)
        {
            Delegates.glBinormal3bvEXT(v);
        }

        #endregion

        #region Binormal3bvEXT(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glBinormal3bvEXT(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glBinormal3bvEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Binormal3bvEXT(GLbyte[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glBinormal3bvEXT(GLbyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glBinormal3bvEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Binormal3dEXT(GLdouble bx, GLdouble by, GLdouble bz)

        /// <summary>
        /// 
        /// </summary>
        public static         void glBinormal3dEXT(GLdouble bx, GLdouble by, GLdouble bz)
        {
            Delegates.glBinormal3dEXT(bx, by, bz);
        }

        #endregion

        #region Binormal3dvEXT(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glBinormal3dvEXT(IntPtr v)
        {
            Delegates.glBinormal3dvEXT(v);
        }

        #endregion

        #region Binormal3dvEXT(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glBinormal3dvEXT(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glBinormal3dvEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Binormal3dvEXT(GLdouble[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glBinormal3dvEXT(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glBinormal3dvEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Binormal3fEXT(GLfloat bx, GLfloat by, GLfloat bz)

        /// <summary>
        /// 
        /// </summary>
        public static         void glBinormal3fEXT(GLfloat bx, GLfloat by, GLfloat bz)
        {
            Delegates.glBinormal3fEXT(bx, by, bz);
        }

        #endregion

        #region Binormal3fvEXT(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glBinormal3fvEXT(IntPtr v)
        {
            Delegates.glBinormal3fvEXT(v);
        }

        #endregion

        #region Binormal3fvEXT(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glBinormal3fvEXT(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glBinormal3fvEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Binormal3fvEXT(GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glBinormal3fvEXT(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glBinormal3fvEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Binormal3iEXT(GLint bx, GLint by, GLint bz)

        /// <summary>
        /// 
        /// </summary>
        public static         void glBinormal3iEXT(GLint bx, GLint by, GLint bz)
        {
            Delegates.glBinormal3iEXT(bx, by, bz);
        }

        #endregion

        #region Binormal3ivEXT(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glBinormal3ivEXT(IntPtr v)
        {
            Delegates.glBinormal3ivEXT(v);
        }

        #endregion

        #region Binormal3ivEXT(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glBinormal3ivEXT(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glBinormal3ivEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Binormal3ivEXT(GLint[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glBinormal3ivEXT(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glBinormal3ivEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Binormal3sEXT(GLshort bx, GLshort by, GLshort bz)

        /// <summary>
        /// 
        /// </summary>
        public static         void glBinormal3sEXT(GLshort bx, GLshort by, GLshort bz)
        {
            Delegates.glBinormal3sEXT(bx, by, bz);
        }

        #endregion

        #region Binormal3svEXT(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glBinormal3svEXT(IntPtr v)
        {
            Delegates.glBinormal3svEXT(v);
        }

        #endregion

        #region Binormal3svEXT(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glBinormal3svEXT(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glBinormal3svEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Binormal3svEXT(GLshort[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glBinormal3svEXT(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glBinormal3svEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TangentPointerEXT(GLenum type, GLsizei stride, IntPtr pointer)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTangentPointerEXT(GLenum type, GLsizei stride, IntPtr pointer)
        {
            Delegates.glTangentPointerEXT(type, stride, pointer);
        }

        #endregion

        #region TangentPointerEXT(GLenum type, GLsizei stride, object pointer)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTangentPointerEXT(GLenum type, GLsizei stride, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glTangentPointerEXT(type, stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region BinormalPointerEXT(GLenum type, GLsizei stride, IntPtr pointer)

        /// <summary>
        /// 
        /// </summary>
        public static         void glBinormalPointerEXT(GLenum type, GLsizei stride, IntPtr pointer)
        {
            Delegates.glBinormalPointerEXT(type, stride, pointer);
        }

        #endregion

        #region BinormalPointerEXT(GLenum type, GLsizei stride, object pointer)

        /// <summary>
        /// 
        /// </summary>
        public static         void glBinormalPointerEXT(GLenum type, GLsizei stride, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glBinormalPointerEXT(type, stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region FinishTextureSUNX()

        /// <summary>
        /// 
        /// </summary>
        public static         void glFinishTextureSUNX()
        {
            Delegates.glFinishTextureSUNX();
        }

        #endregion

        #region GlobalAlphaFactorbSUN(GLbyte factor)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGlobalAlphaFactorbSUN(GLbyte factor)
        {
            Delegates.glGlobalAlphaFactorbSUN(factor);
        }

        #endregion

        #region GlobalAlphaFactorsSUN(GLshort factor)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGlobalAlphaFactorsSUN(GLshort factor)
        {
            Delegates.glGlobalAlphaFactorsSUN(factor);
        }

        #endregion

        #region GlobalAlphaFactoriSUN(GLint factor)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGlobalAlphaFactoriSUN(GLint factor)
        {
            Delegates.glGlobalAlphaFactoriSUN(factor);
        }

        #endregion

        #region GlobalAlphaFactorfSUN(GLfloat factor)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGlobalAlphaFactorfSUN(GLfloat factor)
        {
            Delegates.glGlobalAlphaFactorfSUN(factor);
        }

        #endregion

        #region GlobalAlphaFactordSUN(GLdouble factor)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGlobalAlphaFactordSUN(GLdouble factor)
        {
            Delegates.glGlobalAlphaFactordSUN(factor);
        }

        #endregion

        #region GlobalAlphaFactorubSUN(GLubyte factor)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGlobalAlphaFactorubSUN(GLubyte factor)
        {
            Delegates.glGlobalAlphaFactorubSUN(factor);
        }

        #endregion

        #region GlobalAlphaFactorusSUN(GLushort factor)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGlobalAlphaFactorusSUN(GLushort factor)
        {
            Delegates.glGlobalAlphaFactorusSUN(factor);
        }

        #endregion

        #region GlobalAlphaFactoruiSUN(GLuint factor)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGlobalAlphaFactoruiSUN(GLuint factor)
        {
            Delegates.glGlobalAlphaFactoruiSUN(factor);
        }

        #endregion

        #region ReplacementCodeuiSUN(GLuint code)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiSUN(GLuint code)
        {
            Delegates.glReplacementCodeuiSUN(code);
        }

        #endregion

        #region ReplacementCodeusSUN(GLushort code)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeusSUN(GLushort code)
        {
            Delegates.glReplacementCodeusSUN(code);
        }

        #endregion

        #region ReplacementCodeubSUN(GLubyte code)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeubSUN(GLubyte code)
        {
            Delegates.glReplacementCodeubSUN(code);
        }

        #endregion

        #region ReplacementCodeuivSUN(IntPtr code)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuivSUN(IntPtr code)
        {
            Delegates.glReplacementCodeuivSUN(code);
        }

        #endregion

        #region ReplacementCodeuivSUN(object code)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuivSUN(object code)
        {
            GCHandle h0 = GCHandle.Alloc(code, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuivSUN(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuivSUN(GLuint[] code)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuivSUN(GLuint[] code)
        {
            GCHandle h0 = GCHandle.Alloc(code, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuivSUN(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeusvSUN(IntPtr code)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeusvSUN(IntPtr code)
        {
            Delegates.glReplacementCodeusvSUN(code);
        }

        #endregion

        #region ReplacementCodeusvSUN(object code)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeusvSUN(object code)
        {
            GCHandle h0 = GCHandle.Alloc(code, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeusvSUN(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeusvSUN(GLushort[] code)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeusvSUN(GLushort[] code)
        {
            GCHandle h0 = GCHandle.Alloc(code, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeusvSUN(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeubvSUN(IntPtr code)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeubvSUN(IntPtr code)
        {
            Delegates.glReplacementCodeubvSUN(code);
        }

        #endregion

        #region ReplacementCodeubvSUN(object code)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeubvSUN(object code)
        {
            GCHandle h0 = GCHandle.Alloc(code, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeubvSUN(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeubvSUN(GLubyte[] code)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeubvSUN(GLubyte[] code)
        {
            GCHandle h0 = GCHandle.Alloc(code, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeubvSUN(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodePointerSUN(GLenum type, GLsizei stride, IntPtr pointer)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodePointerSUN(GLenum type, GLsizei stride, IntPtr pointer)
        {
            Delegates.glReplacementCodePointerSUN(type, stride, pointer);
        }

        #endregion

        #region ReplacementCodePointerSUN(GLenum type, GLsizei stride, object pointer)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodePointerSUN(GLenum type, GLsizei stride, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodePointerSUN(type, stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodePointerSUN(GLenum type, GLsizei stride, IntPtr[] pointer)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodePointerSUN(GLenum type, GLsizei stride, IntPtr[] pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodePointerSUN(type, stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color4ubVertex2fSUN(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor4ubVertex2fSUN(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y)
        {
            Delegates.glColor4ubVertex2fSUN(r, g, b, a, x, y);
        }

        #endregion

        #region Color4ubVertex2fvSUN(IntPtr c, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor4ubVertex2fvSUN(IntPtr c, IntPtr v)
        {
            Delegates.glColor4ubVertex2fvSUN(c, v);
        }

        #endregion

        #region Color4ubVertex2fvSUN(IntPtr c, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor4ubVertex2fvSUN(IntPtr c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4ubVertex2fvSUN(c, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color4ubVertex2fvSUN(IntPtr c, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor4ubVertex2fvSUN(IntPtr c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4ubVertex2fvSUN(c, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color4ubVertex2fvSUN(object c, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor4ubVertex2fvSUN(object c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4ubVertex2fvSUN(h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color4ubVertex2fvSUN(object c, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor4ubVertex2fvSUN(object c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4ubVertex2fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region Color4ubVertex2fvSUN(object c, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor4ubVertex2fvSUN(object c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4ubVertex2fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region Color4ubVertex2fvSUN(GLubyte[] c, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor4ubVertex2fvSUN(GLubyte[] c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4ubVertex2fvSUN(h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color4ubVertex2fvSUN(GLubyte[] c, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor4ubVertex2fvSUN(GLubyte[] c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4ubVertex2fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region Color4ubVertex2fvSUN(GLubyte[] c, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor4ubVertex2fvSUN(GLubyte[] c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4ubVertex2fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region Color4ubVertex3fSUN(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor4ubVertex3fSUN(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z)
        {
            Delegates.glColor4ubVertex3fSUN(r, g, b, a, x, y, z);
        }

        #endregion

        #region Color4ubVertex3fvSUN(IntPtr c, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor4ubVertex3fvSUN(IntPtr c, IntPtr v)
        {
            Delegates.glColor4ubVertex3fvSUN(c, v);
        }

        #endregion

        #region Color4ubVertex3fvSUN(IntPtr c, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor4ubVertex3fvSUN(IntPtr c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4ubVertex3fvSUN(c, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color4ubVertex3fvSUN(IntPtr c, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor4ubVertex3fvSUN(IntPtr c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4ubVertex3fvSUN(c, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color4ubVertex3fvSUN(object c, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor4ubVertex3fvSUN(object c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4ubVertex3fvSUN(h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color4ubVertex3fvSUN(object c, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor4ubVertex3fvSUN(object c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4ubVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region Color4ubVertex3fvSUN(object c, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor4ubVertex3fvSUN(object c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4ubVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region Color4ubVertex3fvSUN(GLubyte[] c, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor4ubVertex3fvSUN(GLubyte[] c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4ubVertex3fvSUN(h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color4ubVertex3fvSUN(GLubyte[] c, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor4ubVertex3fvSUN(GLubyte[] c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4ubVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region Color4ubVertex3fvSUN(GLubyte[] c, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor4ubVertex3fvSUN(GLubyte[] c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4ubVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region Color3fVertex3fSUN(GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor3fVertex3fSUN(GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z)
        {
            Delegates.glColor3fVertex3fSUN(r, g, b, x, y, z);
        }

        #endregion

        #region Color3fVertex3fvSUN(IntPtr c, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor3fVertex3fvSUN(IntPtr c, IntPtr v)
        {
            Delegates.glColor3fVertex3fvSUN(c, v);
        }

        #endregion

        #region Color3fVertex3fvSUN(IntPtr c, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor3fVertex3fvSUN(IntPtr c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor3fVertex3fvSUN(c, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color3fVertex3fvSUN(IntPtr c, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor3fVertex3fvSUN(IntPtr c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor3fVertex3fvSUN(c, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color3fVertex3fvSUN(object c, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor3fVertex3fvSUN(object c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glColor3fVertex3fvSUN(h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color3fVertex3fvSUN(object c, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor3fVertex3fvSUN(object c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region Color3fVertex3fvSUN(object c, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor3fVertex3fvSUN(object c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region Color3fVertex3fvSUN(GLfloat[] c, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor3fVertex3fvSUN(GLfloat[] c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glColor3fVertex3fvSUN(h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color3fVertex3fvSUN(GLfloat[] c, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor3fVertex3fvSUN(GLfloat[] c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region Color3fVertex3fvSUN(GLfloat[] c, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor3fVertex3fvSUN(GLfloat[] c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region Normal3fVertex3fSUN(GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)

        /// <summary>
        /// 
        /// </summary>
        public static         void glNormal3fVertex3fSUN(GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
        {
            Delegates.glNormal3fVertex3fSUN(nx, ny, nz, x, y, z);
        }

        #endregion

        #region Normal3fVertex3fvSUN(IntPtr n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glNormal3fVertex3fvSUN(IntPtr n, IntPtr v)
        {
            Delegates.glNormal3fVertex3fvSUN(n, v);
        }

        #endregion

        #region Normal3fVertex3fvSUN(IntPtr n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glNormal3fVertex3fvSUN(IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glNormal3fVertex3fvSUN(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Normal3fVertex3fvSUN(IntPtr n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glNormal3fVertex3fvSUN(IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glNormal3fVertex3fvSUN(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Normal3fVertex3fvSUN(object n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glNormal3fVertex3fvSUN(object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Normal3fVertex3fvSUN(object n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glNormal3fVertex3fvSUN(object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region Normal3fVertex3fvSUN(object n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glNormal3fVertex3fvSUN(object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region Normal3fVertex3fvSUN(GLfloat[] n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glNormal3fVertex3fvSUN(GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Normal3fVertex3fvSUN(GLfloat[] n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glNormal3fVertex3fvSUN(GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region Normal3fVertex3fvSUN(GLfloat[] n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glNormal3fVertex3fvSUN(GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region Color4fNormal3fVertex3fSUN(GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor4fNormal3fVertex3fSUN(GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
        {
            Delegates.glColor4fNormal3fVertex3fSUN(r, g, b, a, nx, ny, nz, x, y, z);
        }

        #endregion

        #region Color4fNormal3fVertex3fvSUN(IntPtr c, IntPtr n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor4fNormal3fVertex3fvSUN(IntPtr c, IntPtr n, IntPtr v)
        {
            Delegates.glColor4fNormal3fVertex3fvSUN(c, n, v);
        }

        #endregion

        #region Color4fNormal3fVertex3fvSUN(IntPtr c, IntPtr n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor4fNormal3fVertex3fvSUN(IntPtr c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4fNormal3fVertex3fvSUN(c, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color4fNormal3fVertex3fvSUN(IntPtr c, IntPtr n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor4fNormal3fVertex3fvSUN(IntPtr c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4fNormal3fVertex3fvSUN(c, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color4fNormal3fVertex3fvSUN(IntPtr c, object n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor4fNormal3fVertex3fvSUN(IntPtr c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4fNormal3fVertex3fvSUN(c, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color4fNormal3fVertex3fvSUN(IntPtr c, object n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor4fNormal3fVertex3fvSUN(IntPtr c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4fNormal3fVertex3fvSUN(c, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region Color4fNormal3fVertex3fvSUN(IntPtr c, object n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor4fNormal3fVertex3fvSUN(IntPtr c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4fNormal3fVertex3fvSUN(c, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region Color4fNormal3fVertex3fvSUN(IntPtr c, GLfloat[] n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor4fNormal3fVertex3fvSUN(IntPtr c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4fNormal3fVertex3fvSUN(c, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color4fNormal3fVertex3fvSUN(IntPtr c, GLfloat[] n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor4fNormal3fVertex3fvSUN(IntPtr c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4fNormal3fVertex3fvSUN(c, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region Color4fNormal3fVertex3fvSUN(IntPtr c, GLfloat[] n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor4fNormal3fVertex3fvSUN(IntPtr c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4fNormal3fVertex3fvSUN(c, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region Color4fNormal3fVertex3fvSUN(object c, IntPtr n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor4fNormal3fVertex3fvSUN(object c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color4fNormal3fVertex3fvSUN(object c, IntPtr n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor4fNormal3fVertex3fvSUN(object c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region Color4fNormal3fVertex3fvSUN(object c, IntPtr n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor4fNormal3fVertex3fvSUN(object c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region Color4fNormal3fVertex3fvSUN(object c, object n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor4fNormal3fVertex3fvSUN(object c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region Color4fNormal3fVertex3fvSUN(object c, object n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor4fNormal3fVertex3fvSUN(object c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region Color4fNormal3fVertex3fvSUN(object c, object n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor4fNormal3fVertex3fvSUN(object c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region Color4fNormal3fVertex3fvSUN(object c, GLfloat[] n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor4fNormal3fVertex3fvSUN(object c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region Color4fNormal3fVertex3fvSUN(object c, GLfloat[] n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor4fNormal3fVertex3fvSUN(object c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region Color4fNormal3fVertex3fvSUN(object c, GLfloat[] n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor4fNormal3fVertex3fvSUN(object c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region Color4fNormal3fVertex3fvSUN(GLfloat[] c, IntPtr n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor4fNormal3fVertex3fvSUN(GLfloat[] c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color4fNormal3fVertex3fvSUN(GLfloat[] c, IntPtr n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor4fNormal3fVertex3fvSUN(GLfloat[] c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region Color4fNormal3fVertex3fvSUN(GLfloat[] c, IntPtr n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor4fNormal3fVertex3fvSUN(GLfloat[] c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region Color4fNormal3fVertex3fvSUN(GLfloat[] c, object n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor4fNormal3fVertex3fvSUN(GLfloat[] c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region Color4fNormal3fVertex3fvSUN(GLfloat[] c, object n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor4fNormal3fVertex3fvSUN(GLfloat[] c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region Color4fNormal3fVertex3fvSUN(GLfloat[] c, object n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor4fNormal3fVertex3fvSUN(GLfloat[] c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region Color4fNormal3fVertex3fvSUN(GLfloat[] c, GLfloat[] n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor4fNormal3fVertex3fvSUN(GLfloat[] c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region Color4fNormal3fVertex3fvSUN(GLfloat[] c, GLfloat[] n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor4fNormal3fVertex3fvSUN(GLfloat[] c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region Color4fNormal3fVertex3fvSUN(GLfloat[] c, GLfloat[] n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor4fNormal3fVertex3fvSUN(GLfloat[] c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fVertex3fSUN(GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fVertex3fSUN(GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z)
        {
            Delegates.glTexCoord2fVertex3fSUN(s, t, x, y, z);
        }

        #endregion

        #region TexCoord2fVertex3fvSUN(IntPtr tc, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fVertex3fvSUN(IntPtr tc, IntPtr v)
        {
            Delegates.glTexCoord2fVertex3fvSUN(tc, v);
        }

        #endregion

        #region TexCoord2fVertex3fvSUN(IntPtr tc, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fVertex3fvSUN(IntPtr tc, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fVertex3fvSUN(tc, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fVertex3fvSUN(IntPtr tc, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fVertex3fvSUN(IntPtr tc, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fVertex3fvSUN(tc, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fVertex3fvSUN(object tc, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fVertex3fvSUN(object tc, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fVertex3fvSUN(h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fVertex3fvSUN(object tc, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fVertex3fvSUN(object tc, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fVertex3fvSUN(object tc, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fVertex3fvSUN(object tc, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fVertex3fvSUN(GLfloat[] tc, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fVertex3fvSUN(GLfloat[] tc, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fVertex3fvSUN(h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fVertex3fvSUN(GLfloat[] tc, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fVertex3fvSUN(GLfloat[] tc, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fVertex3fvSUN(GLfloat[] tc, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fVertex3fvSUN(GLfloat[] tc, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fVertex4fSUN(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4fVertex4fSUN(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
        {
            Delegates.glTexCoord4fVertex4fSUN(s, t, p, q, x, y, z, w);
        }

        #endregion

        #region TexCoord4fVertex4fvSUN(IntPtr tc, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4fVertex4fvSUN(IntPtr tc, IntPtr v)
        {
            Delegates.glTexCoord4fVertex4fvSUN(tc, v);
        }

        #endregion

        #region TexCoord4fVertex4fvSUN(IntPtr tc, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4fVertex4fvSUN(IntPtr tc, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fVertex4fvSUN(tc, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fVertex4fvSUN(IntPtr tc, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4fVertex4fvSUN(IntPtr tc, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fVertex4fvSUN(tc, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fVertex4fvSUN(object tc, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4fVertex4fvSUN(object tc, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fVertex4fvSUN(h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fVertex4fvSUN(object tc, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4fVertex4fvSUN(object tc, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fVertex4fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fVertex4fvSUN(object tc, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4fVertex4fvSUN(object tc, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fVertex4fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fVertex4fvSUN(GLfloat[] tc, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4fVertex4fvSUN(GLfloat[] tc, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fVertex4fvSUN(h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fVertex4fvSUN(GLfloat[] tc, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4fVertex4fvSUN(GLfloat[] tc, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fVertex4fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fVertex4fvSUN(GLfloat[] tc, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4fVertex4fvSUN(GLfloat[] tc, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fVertex4fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4ubVertex3fSUN(GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4ubVertex3fSUN(GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z)
        {
            Delegates.glTexCoord2fColor4ubVertex3fSUN(s, t, r, g, b, a, x, y, z);
        }

        #endregion

        #region TexCoord2fColor4ubVertex3fvSUN(IntPtr tc, IntPtr c, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4ubVertex3fvSUN(IntPtr tc, IntPtr c, IntPtr v)
        {
            Delegates.glTexCoord2fColor4ubVertex3fvSUN(tc, c, v);
        }

        #endregion

        #region TexCoord2fColor4ubVertex3fvSUN(IntPtr tc, IntPtr c, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4ubVertex3fvSUN(IntPtr tc, IntPtr c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4ubVertex3fvSUN(tc, c, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4ubVertex3fvSUN(IntPtr tc, IntPtr c, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4ubVertex3fvSUN(IntPtr tc, IntPtr c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4ubVertex3fvSUN(tc, c, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4ubVertex3fvSUN(IntPtr tc, object c, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4ubVertex3fvSUN(IntPtr tc, object c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4ubVertex3fvSUN(tc, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4ubVertex3fvSUN(IntPtr tc, object c, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4ubVertex3fvSUN(IntPtr tc, object c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4ubVertex3fvSUN(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4ubVertex3fvSUN(IntPtr tc, object c, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4ubVertex3fvSUN(IntPtr tc, object c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4ubVertex3fvSUN(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4ubVertex3fvSUN(IntPtr tc, GLubyte[] c, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4ubVertex3fvSUN(IntPtr tc, GLubyte[] c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4ubVertex3fvSUN(tc, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4ubVertex3fvSUN(IntPtr tc, GLubyte[] c, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4ubVertex3fvSUN(IntPtr tc, GLubyte[] c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4ubVertex3fvSUN(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4ubVertex3fvSUN(IntPtr tc, GLubyte[] c, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4ubVertex3fvSUN(IntPtr tc, GLubyte[] c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4ubVertex3fvSUN(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4ubVertex3fvSUN(object tc, IntPtr c, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4ubVertex3fvSUN(object tc, IntPtr c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4ubVertex3fvSUN(h0.AddrOfPinnedObject(), c, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4ubVertex3fvSUN(object tc, IntPtr c, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4ubVertex3fvSUN(object tc, IntPtr c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4ubVertex3fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4ubVertex3fvSUN(object tc, IntPtr c, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4ubVertex3fvSUN(object tc, IntPtr c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4ubVertex3fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4ubVertex3fvSUN(object tc, object c, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4ubVertex3fvSUN(object tc, object c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4ubVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4ubVertex3fvSUN(object tc, object c, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4ubVertex3fvSUN(object tc, object c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4ubVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4ubVertex3fvSUN(object tc, object c, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4ubVertex3fvSUN(object tc, object c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4ubVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4ubVertex3fvSUN(object tc, GLubyte[] c, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4ubVertex3fvSUN(object tc, GLubyte[] c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4ubVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4ubVertex3fvSUN(object tc, GLubyte[] c, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4ubVertex3fvSUN(object tc, GLubyte[] c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4ubVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4ubVertex3fvSUN(object tc, GLubyte[] c, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4ubVertex3fvSUN(object tc, GLubyte[] c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4ubVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4ubVertex3fvSUN(GLfloat[] tc, IntPtr c, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4ubVertex3fvSUN(GLfloat[] tc, IntPtr c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4ubVertex3fvSUN(h0.AddrOfPinnedObject(), c, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4ubVertex3fvSUN(GLfloat[] tc, IntPtr c, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4ubVertex3fvSUN(GLfloat[] tc, IntPtr c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4ubVertex3fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4ubVertex3fvSUN(GLfloat[] tc, IntPtr c, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4ubVertex3fvSUN(GLfloat[] tc, IntPtr c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4ubVertex3fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4ubVertex3fvSUN(GLfloat[] tc, object c, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4ubVertex3fvSUN(GLfloat[] tc, object c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4ubVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4ubVertex3fvSUN(GLfloat[] tc, object c, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4ubVertex3fvSUN(GLfloat[] tc, object c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4ubVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4ubVertex3fvSUN(GLfloat[] tc, object c, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4ubVertex3fvSUN(GLfloat[] tc, object c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4ubVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4ubVertex3fvSUN(GLfloat[] tc, GLubyte[] c, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4ubVertex3fvSUN(GLfloat[] tc, GLubyte[] c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4ubVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4ubVertex3fvSUN(GLfloat[] tc, GLubyte[] c, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4ubVertex3fvSUN(GLfloat[] tc, GLubyte[] c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4ubVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4ubVertex3fvSUN(GLfloat[] tc, GLubyte[] c, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4ubVertex3fvSUN(GLfloat[] tc, GLubyte[] c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4ubVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z)
        {
            Delegates.glTexCoord2fColor3fVertex3fSUN(s, t, r, g, b, x, y, z);
        }

        #endregion

        #region TexCoord2fColor3fVertex3fvSUN(IntPtr tc, IntPtr c, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor3fVertex3fvSUN(IntPtr tc, IntPtr c, IntPtr v)
        {
            Delegates.glTexCoord2fColor3fVertex3fvSUN(tc, c, v);
        }

        #endregion

        #region TexCoord2fColor3fVertex3fvSUN(IntPtr tc, IntPtr c, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor3fVertex3fvSUN(IntPtr tc, IntPtr c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor3fVertex3fvSUN(tc, c, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor3fVertex3fvSUN(IntPtr tc, IntPtr c, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor3fVertex3fvSUN(IntPtr tc, IntPtr c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor3fVertex3fvSUN(tc, c, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor3fVertex3fvSUN(IntPtr tc, object c, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor3fVertex3fvSUN(IntPtr tc, object c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor3fVertex3fvSUN(tc, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor3fVertex3fvSUN(IntPtr tc, object c, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor3fVertex3fvSUN(IntPtr tc, object c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor3fVertex3fvSUN(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor3fVertex3fvSUN(IntPtr tc, object c, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor3fVertex3fvSUN(IntPtr tc, object c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor3fVertex3fvSUN(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor3fVertex3fvSUN(IntPtr tc, GLfloat[] c, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor3fVertex3fvSUN(IntPtr tc, GLfloat[] c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor3fVertex3fvSUN(tc, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor3fVertex3fvSUN(IntPtr tc, GLfloat[] c, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor3fVertex3fvSUN(IntPtr tc, GLfloat[] c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor3fVertex3fvSUN(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor3fVertex3fvSUN(IntPtr tc, GLfloat[] c, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor3fVertex3fvSUN(IntPtr tc, GLfloat[] c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor3fVertex3fvSUN(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor3fVertex3fvSUN(object tc, IntPtr c, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor3fVertex3fvSUN(object tc, IntPtr c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor3fVertex3fvSUN(object tc, IntPtr c, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor3fVertex3fvSUN(object tc, IntPtr c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor3fVertex3fvSUN(object tc, IntPtr c, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor3fVertex3fvSUN(object tc, IntPtr c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor3fVertex3fvSUN(object tc, object c, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor3fVertex3fvSUN(object tc, object c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor3fVertex3fvSUN(object tc, object c, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor3fVertex3fvSUN(object tc, object c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor3fVertex3fvSUN(object tc, object c, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor3fVertex3fvSUN(object tc, object c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor3fVertex3fvSUN(object tc, GLfloat[] c, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor3fVertex3fvSUN(object tc, GLfloat[] c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor3fVertex3fvSUN(object tc, GLfloat[] c, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor3fVertex3fvSUN(object tc, GLfloat[] c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor3fVertex3fvSUN(object tc, GLfloat[] c, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor3fVertex3fvSUN(object tc, GLfloat[] c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor3fVertex3fvSUN(GLfloat[] tc, IntPtr c, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor3fVertex3fvSUN(GLfloat[] tc, IntPtr c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor3fVertex3fvSUN(GLfloat[] tc, IntPtr c, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor3fVertex3fvSUN(GLfloat[] tc, IntPtr c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor3fVertex3fvSUN(GLfloat[] tc, IntPtr c, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor3fVertex3fvSUN(GLfloat[] tc, IntPtr c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor3fVertex3fvSUN(GLfloat[] tc, object c, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor3fVertex3fvSUN(GLfloat[] tc, object c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor3fVertex3fvSUN(GLfloat[] tc, object c, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor3fVertex3fvSUN(GLfloat[] tc, object c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor3fVertex3fvSUN(GLfloat[] tc, object c, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor3fVertex3fvSUN(GLfloat[] tc, object c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor3fVertex3fvSUN(GLfloat[] tc, GLfloat[] c, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor3fVertex3fvSUN(GLfloat[] tc, GLfloat[] c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor3fVertex3fvSUN(GLfloat[] tc, GLfloat[] c, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor3fVertex3fvSUN(GLfloat[] tc, GLfloat[] c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor3fVertex3fvSUN(GLfloat[] tc, GLfloat[] c, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor3fVertex3fvSUN(GLfloat[] tc, GLfloat[] c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fNormal3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fNormal3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
        {
            Delegates.glTexCoord2fNormal3fVertex3fSUN(s, t, nx, ny, nz, x, y, z);
        }

        #endregion

        #region TexCoord2fNormal3fVertex3fvSUN(IntPtr tc, IntPtr n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fNormal3fVertex3fvSUN(IntPtr tc, IntPtr n, IntPtr v)
        {
            Delegates.glTexCoord2fNormal3fVertex3fvSUN(tc, n, v);
        }

        #endregion

        #region TexCoord2fNormal3fVertex3fvSUN(IntPtr tc, IntPtr n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fNormal3fVertex3fvSUN(IntPtr tc, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fNormal3fVertex3fvSUN(tc, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fNormal3fVertex3fvSUN(IntPtr tc, IntPtr n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fNormal3fVertex3fvSUN(IntPtr tc, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fNormal3fVertex3fvSUN(tc, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fNormal3fVertex3fvSUN(IntPtr tc, object n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fNormal3fVertex3fvSUN(IntPtr tc, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fNormal3fVertex3fvSUN(tc, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fNormal3fVertex3fvSUN(IntPtr tc, object n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fNormal3fVertex3fvSUN(IntPtr tc, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fNormal3fVertex3fvSUN(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fNormal3fVertex3fvSUN(IntPtr tc, object n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fNormal3fVertex3fvSUN(IntPtr tc, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fNormal3fVertex3fvSUN(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fNormal3fVertex3fvSUN(IntPtr tc, GLfloat[] n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fNormal3fVertex3fvSUN(IntPtr tc, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fNormal3fVertex3fvSUN(tc, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fNormal3fVertex3fvSUN(IntPtr tc, GLfloat[] n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fNormal3fVertex3fvSUN(IntPtr tc, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fNormal3fVertex3fvSUN(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fNormal3fVertex3fvSUN(IntPtr tc, GLfloat[] n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fNormal3fVertex3fvSUN(IntPtr tc, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fNormal3fVertex3fvSUN(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fNormal3fVertex3fvSUN(object tc, IntPtr n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fNormal3fVertex3fvSUN(object tc, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fNormal3fVertex3fvSUN(object tc, IntPtr n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fNormal3fVertex3fvSUN(object tc, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fNormal3fVertex3fvSUN(object tc, IntPtr n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fNormal3fVertex3fvSUN(object tc, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fNormal3fVertex3fvSUN(object tc, object n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fNormal3fVertex3fvSUN(object tc, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fNormal3fVertex3fvSUN(object tc, object n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fNormal3fVertex3fvSUN(object tc, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fNormal3fVertex3fvSUN(object tc, object n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fNormal3fVertex3fvSUN(object tc, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fNormal3fVertex3fvSUN(object tc, GLfloat[] n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fNormal3fVertex3fvSUN(object tc, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fNormal3fVertex3fvSUN(object tc, GLfloat[] n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fNormal3fVertex3fvSUN(object tc, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fNormal3fVertex3fvSUN(object tc, GLfloat[] n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fNormal3fVertex3fvSUN(object tc, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fNormal3fVertex3fvSUN(GLfloat[] tc, IntPtr n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fNormal3fVertex3fvSUN(GLfloat[] tc, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fNormal3fVertex3fvSUN(GLfloat[] tc, IntPtr n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fNormal3fVertex3fvSUN(GLfloat[] tc, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fNormal3fVertex3fvSUN(GLfloat[] tc, IntPtr n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fNormal3fVertex3fvSUN(GLfloat[] tc, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fNormal3fVertex3fvSUN(GLfloat[] tc, object n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fNormal3fVertex3fvSUN(GLfloat[] tc, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fNormal3fVertex3fvSUN(GLfloat[] tc, object n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fNormal3fVertex3fvSUN(GLfloat[] tc, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fNormal3fVertex3fvSUN(GLfloat[] tc, object n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fNormal3fVertex3fvSUN(GLfloat[] tc, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat[] n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat[] n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat[] n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4fNormal3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
        {
            Delegates.glTexCoord2fColor4fNormal3fVertex3fSUN(s, t, r, g, b, a, nx, ny, nz, x, y, z);
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, IntPtr c, IntPtr n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, IntPtr c, IntPtr n, IntPtr v)
        {
            Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, c, n, v);
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, IntPtr c, IntPtr n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, IntPtr c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, c, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, IntPtr c, IntPtr n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, IntPtr c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, c, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, IntPtr c, object n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, IntPtr c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, c, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, IntPtr c, object n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, IntPtr c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, c, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, IntPtr c, object n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, IntPtr c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, c, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, IntPtr c, GLfloat[] n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, IntPtr c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, c, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, IntPtr c, GLfloat[] n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, IntPtr c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, c, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, IntPtr c, GLfloat[] n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, IntPtr c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, c, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, object c, IntPtr n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, object c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, h0.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, object c, IntPtr n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, object c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, object c, IntPtr n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, object c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, object c, object n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, object c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, object c, object n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, object c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, object c, object n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, object c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, object c, GLfloat[] n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, object c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, object c, GLfloat[] n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, object c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, object c, GLfloat[] n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, object c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, GLfloat[] c, IntPtr n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, GLfloat[] c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, h0.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, GLfloat[] c, IntPtr n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, GLfloat[] c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, GLfloat[] c, IntPtr n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, GLfloat[] c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, GLfloat[] c, object n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, GLfloat[] c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, GLfloat[] c, object n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, GLfloat[] c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, GLfloat[] c, object n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, GLfloat[] c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, GLfloat[] c, GLfloat[] n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, GLfloat[] c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, GLfloat[] c, GLfloat[] n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, GLfloat[] c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(object tc, IntPtr c, IntPtr n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4fNormal3fVertex3fvSUN(object tc, IntPtr c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, n, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(object tc, IntPtr c, IntPtr n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4fNormal3fVertex3fvSUN(object tc, IntPtr c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(object tc, IntPtr c, IntPtr n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4fNormal3fVertex3fvSUN(object tc, IntPtr c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(object tc, IntPtr c, object n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4fNormal3fVertex3fvSUN(object tc, IntPtr c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(object tc, IntPtr c, object n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4fNormal3fVertex3fvSUN(object tc, IntPtr c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(object tc, IntPtr c, object n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4fNormal3fVertex3fvSUN(object tc, IntPtr c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(object tc, IntPtr c, GLfloat[] n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4fNormal3fVertex3fvSUN(object tc, IntPtr c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(object tc, IntPtr c, GLfloat[] n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4fNormal3fVertex3fvSUN(object tc, IntPtr c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(object tc, IntPtr c, GLfloat[] n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4fNormal3fVertex3fvSUN(object tc, IntPtr c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(object tc, object c, IntPtr n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4fNormal3fVertex3fvSUN(object tc, object c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(object tc, object c, IntPtr n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4fNormal3fVertex3fvSUN(object tc, object c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(object tc, object c, IntPtr n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4fNormal3fVertex3fvSUN(object tc, object c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(object tc, object c, object n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4fNormal3fVertex3fvSUN(object tc, object c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(object tc, object c, object n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4fNormal3fVertex3fvSUN(object tc, object c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(object tc, object c, object n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4fNormal3fVertex3fvSUN(object tc, object c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(object tc, object c, GLfloat[] n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4fNormal3fVertex3fvSUN(object tc, object c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(object tc, object c, GLfloat[] n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4fNormal3fVertex3fvSUN(object tc, object c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(object tc, object c, GLfloat[] n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4fNormal3fVertex3fvSUN(object tc, object c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(object tc, GLfloat[] c, IntPtr n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4fNormal3fVertex3fvSUN(object tc, GLfloat[] c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(object tc, GLfloat[] c, IntPtr n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4fNormal3fVertex3fvSUN(object tc, GLfloat[] c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(object tc, GLfloat[] c, IntPtr n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4fNormal3fVertex3fvSUN(object tc, GLfloat[] c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(object tc, GLfloat[] c, object n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4fNormal3fVertex3fvSUN(object tc, GLfloat[] c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(object tc, GLfloat[] c, object n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4fNormal3fVertex3fvSUN(object tc, GLfloat[] c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(object tc, GLfloat[] c, object n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4fNormal3fVertex3fvSUN(object tc, GLfloat[] c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(object tc, GLfloat[] c, GLfloat[] n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4fNormal3fVertex3fvSUN(object tc, GLfloat[] c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(object tc, GLfloat[] c, GLfloat[] n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4fNormal3fVertex3fvSUN(object tc, GLfloat[] c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(object tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4fNormal3fVertex3fvSUN(object tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, IntPtr c, IntPtr n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, IntPtr c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, n, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, IntPtr c, IntPtr n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, IntPtr c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, IntPtr c, IntPtr n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, IntPtr c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, IntPtr c, object n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, IntPtr c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, IntPtr c, object n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, IntPtr c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, IntPtr c, object n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, IntPtr c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, IntPtr c, GLfloat[] n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, IntPtr c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, IntPtr c, GLfloat[] n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, IntPtr c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, IntPtr c, GLfloat[] n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, IntPtr c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, object c, IntPtr n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, object c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, object c, IntPtr n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, object c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, object c, IntPtr n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, object c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, object c, object n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, object c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, object c, object n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, object c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, object c, object n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, object c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, object c, GLfloat[] n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, object c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, object c, GLfloat[] n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, object c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, object c, GLfloat[] n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, object c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat[] c, IntPtr n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat[] c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat[] c, IntPtr n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat[] c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat[] c, IntPtr n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat[] c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat[] c, object n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat[] c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat[] c, object n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat[] c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat[] c, object n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat[] c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat[] c, GLfloat[] n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat[] c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat[] c, GLfloat[] n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat[] c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fSUN(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4fColor4fNormal3fVertex4fSUN(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
        {
            Delegates.glTexCoord4fColor4fNormal3fVertex4fSUN(s, t, p, q, r, g, b, a, nx, ny, nz, x, y, z, w);
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, IntPtr c, IntPtr n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, IntPtr c, IntPtr n, IntPtr v)
        {
            Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, c, n, v);
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, IntPtr c, IntPtr n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, IntPtr c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, c, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, IntPtr c, IntPtr n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, IntPtr c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, c, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, IntPtr c, object n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, IntPtr c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, c, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, IntPtr c, object n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, IntPtr c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, c, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, IntPtr c, object n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, IntPtr c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, c, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, IntPtr c, GLfloat[] n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, IntPtr c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, c, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, IntPtr c, GLfloat[] n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, IntPtr c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, c, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, IntPtr c, GLfloat[] n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, IntPtr c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, c, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, object c, IntPtr n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, object c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, h0.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, object c, IntPtr n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, object c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, object c, IntPtr n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, object c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, object c, object n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, object c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, object c, object n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, object c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, object c, object n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, object c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, object c, GLfloat[] n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, object c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, object c, GLfloat[] n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, object c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, object c, GLfloat[] n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, object c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, GLfloat[] c, IntPtr n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, GLfloat[] c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, h0.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, GLfloat[] c, IntPtr n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, GLfloat[] c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, GLfloat[] c, IntPtr n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, GLfloat[] c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, GLfloat[] c, object n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, GLfloat[] c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, GLfloat[] c, object n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, GLfloat[] c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, GLfloat[] c, object n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, GLfloat[] c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, GLfloat[] c, GLfloat[] n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, GLfloat[] c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, GLfloat[] c, GLfloat[] n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, GLfloat[] c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4fColor4fNormal3fVertex4fvSUN(IntPtr tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(object tc, IntPtr c, IntPtr n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4fColor4fNormal3fVertex4fvSUN(object tc, IntPtr c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), c, n, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(object tc, IntPtr c, IntPtr n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4fColor4fNormal3fVertex4fvSUN(object tc, IntPtr c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), c, n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(object tc, IntPtr c, IntPtr n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4fColor4fNormal3fVertex4fvSUN(object tc, IntPtr c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), c, n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(object tc, IntPtr c, object n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4fColor4fNormal3fVertex4fvSUN(object tc, IntPtr c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(object tc, IntPtr c, object n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4fColor4fNormal3fVertex4fvSUN(object tc, IntPtr c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(object tc, IntPtr c, object n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4fColor4fNormal3fVertex4fvSUN(object tc, IntPtr c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(object tc, IntPtr c, GLfloat[] n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4fColor4fNormal3fVertex4fvSUN(object tc, IntPtr c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(object tc, IntPtr c, GLfloat[] n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4fColor4fNormal3fVertex4fvSUN(object tc, IntPtr c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(object tc, IntPtr c, GLfloat[] n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4fColor4fNormal3fVertex4fvSUN(object tc, IntPtr c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(object tc, object c, IntPtr n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4fColor4fNormal3fVertex4fvSUN(object tc, object c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(object tc, object c, IntPtr n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4fColor4fNormal3fVertex4fvSUN(object tc, object c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(object tc, object c, IntPtr n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4fColor4fNormal3fVertex4fvSUN(object tc, object c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(object tc, object c, object n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4fColor4fNormal3fVertex4fvSUN(object tc, object c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(object tc, object c, object n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4fColor4fNormal3fVertex4fvSUN(object tc, object c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(object tc, object c, object n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4fColor4fNormal3fVertex4fvSUN(object tc, object c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(object tc, object c, GLfloat[] n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4fColor4fNormal3fVertex4fvSUN(object tc, object c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(object tc, object c, GLfloat[] n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4fColor4fNormal3fVertex4fvSUN(object tc, object c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(object tc, object c, GLfloat[] n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4fColor4fNormal3fVertex4fvSUN(object tc, object c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(object tc, GLfloat[] c, IntPtr n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4fColor4fNormal3fVertex4fvSUN(object tc, GLfloat[] c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(object tc, GLfloat[] c, IntPtr n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4fColor4fNormal3fVertex4fvSUN(object tc, GLfloat[] c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(object tc, GLfloat[] c, IntPtr n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4fColor4fNormal3fVertex4fvSUN(object tc, GLfloat[] c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(object tc, GLfloat[] c, object n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4fColor4fNormal3fVertex4fvSUN(object tc, GLfloat[] c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(object tc, GLfloat[] c, object n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4fColor4fNormal3fVertex4fvSUN(object tc, GLfloat[] c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(object tc, GLfloat[] c, object n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4fColor4fNormal3fVertex4fvSUN(object tc, GLfloat[] c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(object tc, GLfloat[] c, GLfloat[] n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4fColor4fNormal3fVertex4fvSUN(object tc, GLfloat[] c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(object tc, GLfloat[] c, GLfloat[] n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4fColor4fNormal3fVertex4fvSUN(object tc, GLfloat[] c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(object tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4fColor4fNormal3fVertex4fvSUN(object tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, IntPtr c, IntPtr n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, IntPtr c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), c, n, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, IntPtr c, IntPtr n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, IntPtr c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), c, n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, IntPtr c, IntPtr n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, IntPtr c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), c, n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, IntPtr c, object n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, IntPtr c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, IntPtr c, object n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, IntPtr c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, IntPtr c, object n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, IntPtr c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, IntPtr c, GLfloat[] n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, IntPtr c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, IntPtr c, GLfloat[] n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, IntPtr c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, IntPtr c, GLfloat[] n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, IntPtr c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, object c, IntPtr n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, object c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, object c, IntPtr n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, object c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, object c, IntPtr n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, object c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, object c, object n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, object c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, object c, object n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, object c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, object c, object n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, object c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, object c, GLfloat[] n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, object c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, object c, GLfloat[] n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, object c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, object c, GLfloat[] n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, object c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, GLfloat[] c, IntPtr n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, GLfloat[] c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, GLfloat[] c, IntPtr n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, GLfloat[] c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, GLfloat[] c, IntPtr n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, GLfloat[] c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, GLfloat[] c, object n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, GLfloat[] c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, GLfloat[] c, object n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, GLfloat[] c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, GLfloat[] c, object n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, GLfloat[] c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, GLfloat[] c, GLfloat[] n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, GLfloat[] c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, GLfloat[] c, GLfloat[] n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, GLfloat[] c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiVertex3fSUN(GLuint rc, GLfloat x, GLfloat y, GLfloat z)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiVertex3fSUN(GLuint rc, GLfloat x, GLfloat y, GLfloat z)
        {
            Delegates.glReplacementCodeuiVertex3fSUN(rc, x, y, z);
        }

        #endregion

        #region ReplacementCodeuiVertex3fvSUN(IntPtr rc, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiVertex3fvSUN(IntPtr rc, IntPtr v)
        {
            Delegates.glReplacementCodeuiVertex3fvSUN(rc, v);
        }

        #endregion

        #region ReplacementCodeuiVertex3fvSUN(IntPtr rc, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiVertex3fvSUN(IntPtr rc, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiVertex3fvSUN(rc, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiVertex3fvSUN(IntPtr rc, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiVertex3fvSUN(IntPtr rc, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiVertex3fvSUN(rc, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiVertex3fvSUN(object rc, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiVertex3fvSUN(object rc, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiVertex3fvSUN(h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiVertex3fvSUN(object rc, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiVertex3fvSUN(object rc, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiVertex3fvSUN(object rc, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiVertex3fvSUN(object rc, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiVertex3fvSUN(GLuint[] rc, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiVertex3fvSUN(GLuint[] rc, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiVertex3fvSUN(h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiVertex3fvSUN(GLuint[] rc, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiVertex3fvSUN(GLuint[] rc, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiVertex3fvSUN(GLuint[] rc, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiVertex3fvSUN(GLuint[] rc, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4ubVertex3fSUN(GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4ubVertex3fSUN(GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z)
        {
            Delegates.glReplacementCodeuiColor4ubVertex3fSUN(rc, r, g, b, a, x, y, z);
        }

        #endregion

        #region ReplacementCodeuiColor4ubVertex3fvSUN(IntPtr rc, IntPtr c, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4ubVertex3fvSUN(IntPtr rc, IntPtr c, IntPtr v)
        {
            Delegates.glReplacementCodeuiColor4ubVertex3fvSUN(rc, c, v);
        }

        #endregion

        #region ReplacementCodeuiColor4ubVertex3fvSUN(IntPtr rc, IntPtr c, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4ubVertex3fvSUN(IntPtr rc, IntPtr c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4ubVertex3fvSUN(rc, c, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4ubVertex3fvSUN(IntPtr rc, IntPtr c, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4ubVertex3fvSUN(IntPtr rc, IntPtr c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4ubVertex3fvSUN(rc, c, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4ubVertex3fvSUN(IntPtr rc, object c, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4ubVertex3fvSUN(IntPtr rc, object c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4ubVertex3fvSUN(rc, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4ubVertex3fvSUN(IntPtr rc, object c, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4ubVertex3fvSUN(IntPtr rc, object c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4ubVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4ubVertex3fvSUN(IntPtr rc, object c, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4ubVertex3fvSUN(IntPtr rc, object c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4ubVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4ubVertex3fvSUN(IntPtr rc, GLubyte[] c, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4ubVertex3fvSUN(IntPtr rc, GLubyte[] c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4ubVertex3fvSUN(rc, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4ubVertex3fvSUN(IntPtr rc, GLubyte[] c, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4ubVertex3fvSUN(IntPtr rc, GLubyte[] c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4ubVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4ubVertex3fvSUN(IntPtr rc, GLubyte[] c, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4ubVertex3fvSUN(IntPtr rc, GLubyte[] c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4ubVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4ubVertex3fvSUN(object rc, IntPtr c, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4ubVertex3fvSUN(object rc, IntPtr c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4ubVertex3fvSUN(h0.AddrOfPinnedObject(), c, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4ubVertex3fvSUN(object rc, IntPtr c, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4ubVertex3fvSUN(object rc, IntPtr c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4ubVertex3fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4ubVertex3fvSUN(object rc, IntPtr c, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4ubVertex3fvSUN(object rc, IntPtr c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4ubVertex3fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4ubVertex3fvSUN(object rc, object c, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4ubVertex3fvSUN(object rc, object c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4ubVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4ubVertex3fvSUN(object rc, object c, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4ubVertex3fvSUN(object rc, object c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4ubVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4ubVertex3fvSUN(object rc, object c, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4ubVertex3fvSUN(object rc, object c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4ubVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4ubVertex3fvSUN(object rc, GLubyte[] c, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4ubVertex3fvSUN(object rc, GLubyte[] c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4ubVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4ubVertex3fvSUN(object rc, GLubyte[] c, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4ubVertex3fvSUN(object rc, GLubyte[] c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4ubVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4ubVertex3fvSUN(object rc, GLubyte[] c, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4ubVertex3fvSUN(object rc, GLubyte[] c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4ubVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4ubVertex3fvSUN(GLuint[] rc, IntPtr c, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4ubVertex3fvSUN(GLuint[] rc, IntPtr c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4ubVertex3fvSUN(h0.AddrOfPinnedObject(), c, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4ubVertex3fvSUN(GLuint[] rc, IntPtr c, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4ubVertex3fvSUN(GLuint[] rc, IntPtr c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4ubVertex3fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4ubVertex3fvSUN(GLuint[] rc, IntPtr c, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4ubVertex3fvSUN(GLuint[] rc, IntPtr c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4ubVertex3fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4ubVertex3fvSUN(GLuint[] rc, object c, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4ubVertex3fvSUN(GLuint[] rc, object c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4ubVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4ubVertex3fvSUN(GLuint[] rc, object c, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4ubVertex3fvSUN(GLuint[] rc, object c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4ubVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4ubVertex3fvSUN(GLuint[] rc, object c, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4ubVertex3fvSUN(GLuint[] rc, object c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4ubVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4ubVertex3fvSUN(GLuint[] rc, GLubyte[] c, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4ubVertex3fvSUN(GLuint[] rc, GLubyte[] c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4ubVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4ubVertex3fvSUN(GLuint[] rc, GLubyte[] c, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4ubVertex3fvSUN(GLuint[] rc, GLubyte[] c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4ubVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4ubVertex3fvSUN(GLuint[] rc, GLubyte[] c, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4ubVertex3fvSUN(GLuint[] rc, GLubyte[] c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4ubVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor3fVertex3fSUN(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor3fVertex3fSUN(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z)
        {
            Delegates.glReplacementCodeuiColor3fVertex3fSUN(rc, r, g, b, x, y, z);
        }

        #endregion

        #region ReplacementCodeuiColor3fVertex3fvSUN(IntPtr rc, IntPtr c, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor3fVertex3fvSUN(IntPtr rc, IntPtr c, IntPtr v)
        {
            Delegates.glReplacementCodeuiColor3fVertex3fvSUN(rc, c, v);
        }

        #endregion

        #region ReplacementCodeuiColor3fVertex3fvSUN(IntPtr rc, IntPtr c, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor3fVertex3fvSUN(IntPtr rc, IntPtr c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor3fVertex3fvSUN(rc, c, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor3fVertex3fvSUN(IntPtr rc, IntPtr c, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor3fVertex3fvSUN(IntPtr rc, IntPtr c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor3fVertex3fvSUN(rc, c, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor3fVertex3fvSUN(IntPtr rc, object c, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor3fVertex3fvSUN(IntPtr rc, object c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor3fVertex3fvSUN(IntPtr rc, object c, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor3fVertex3fvSUN(IntPtr rc, object c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor3fVertex3fvSUN(IntPtr rc, object c, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor3fVertex3fvSUN(IntPtr rc, object c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor3fVertex3fvSUN(IntPtr rc, GLfloat[] c, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor3fVertex3fvSUN(IntPtr rc, GLfloat[] c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor3fVertex3fvSUN(IntPtr rc, GLfloat[] c, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor3fVertex3fvSUN(IntPtr rc, GLfloat[] c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor3fVertex3fvSUN(IntPtr rc, GLfloat[] c, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor3fVertex3fvSUN(IntPtr rc, GLfloat[] c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor3fVertex3fvSUN(object rc, IntPtr c, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor3fVertex3fvSUN(object rc, IntPtr c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor3fVertex3fvSUN(object rc, IntPtr c, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor3fVertex3fvSUN(object rc, IntPtr c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor3fVertex3fvSUN(object rc, IntPtr c, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor3fVertex3fvSUN(object rc, IntPtr c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor3fVertex3fvSUN(object rc, object c, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor3fVertex3fvSUN(object rc, object c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor3fVertex3fvSUN(object rc, object c, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor3fVertex3fvSUN(object rc, object c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor3fVertex3fvSUN(object rc, object c, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor3fVertex3fvSUN(object rc, object c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor3fVertex3fvSUN(object rc, GLfloat[] c, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor3fVertex3fvSUN(object rc, GLfloat[] c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor3fVertex3fvSUN(object rc, GLfloat[] c, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor3fVertex3fvSUN(object rc, GLfloat[] c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor3fVertex3fvSUN(object rc, GLfloat[] c, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor3fVertex3fvSUN(object rc, GLfloat[] c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor3fVertex3fvSUN(GLuint[] rc, IntPtr c, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor3fVertex3fvSUN(GLuint[] rc, IntPtr c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor3fVertex3fvSUN(GLuint[] rc, IntPtr c, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor3fVertex3fvSUN(GLuint[] rc, IntPtr c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor3fVertex3fvSUN(GLuint[] rc, IntPtr c, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor3fVertex3fvSUN(GLuint[] rc, IntPtr c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor3fVertex3fvSUN(GLuint[] rc, object c, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor3fVertex3fvSUN(GLuint[] rc, object c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor3fVertex3fvSUN(GLuint[] rc, object c, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor3fVertex3fvSUN(GLuint[] rc, object c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor3fVertex3fvSUN(GLuint[] rc, object c, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor3fVertex3fvSUN(GLuint[] rc, object c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor3fVertex3fvSUN(GLuint[] rc, GLfloat[] c, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor3fVertex3fvSUN(GLuint[] rc, GLfloat[] c, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor3fVertex3fvSUN(GLuint[] rc, GLfloat[] c, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor3fVertex3fvSUN(GLuint[] rc, GLfloat[] c, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor3fVertex3fvSUN(GLuint[] rc, GLfloat[] c, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor3fVertex3fvSUN(GLuint[] rc, GLfloat[] c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiNormal3fVertex3fSUN(GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiNormal3fVertex3fSUN(GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
        {
            Delegates.glReplacementCodeuiNormal3fVertex3fSUN(rc, nx, ny, nz, x, y, z);
        }

        #endregion

        #region ReplacementCodeuiNormal3fVertex3fvSUN(IntPtr rc, IntPtr n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiNormal3fVertex3fvSUN(IntPtr rc, IntPtr n, IntPtr v)
        {
            Delegates.glReplacementCodeuiNormal3fVertex3fvSUN(rc, n, v);
        }

        #endregion

        #region ReplacementCodeuiNormal3fVertex3fvSUN(IntPtr rc, IntPtr n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiNormal3fVertex3fvSUN(IntPtr rc, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiNormal3fVertex3fvSUN(rc, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiNormal3fVertex3fvSUN(IntPtr rc, IntPtr n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiNormal3fVertex3fvSUN(IntPtr rc, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiNormal3fVertex3fvSUN(rc, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiNormal3fVertex3fvSUN(IntPtr rc, object n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiNormal3fVertex3fvSUN(IntPtr rc, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiNormal3fVertex3fvSUN(IntPtr rc, object n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiNormal3fVertex3fvSUN(IntPtr rc, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiNormal3fVertex3fvSUN(IntPtr rc, object n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiNormal3fVertex3fvSUN(IntPtr rc, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiNormal3fVertex3fvSUN(object rc, IntPtr n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiNormal3fVertex3fvSUN(object rc, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiNormal3fVertex3fvSUN(object rc, IntPtr n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiNormal3fVertex3fvSUN(object rc, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiNormal3fVertex3fvSUN(object rc, IntPtr n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiNormal3fVertex3fvSUN(object rc, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiNormal3fVertex3fvSUN(object rc, object n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiNormal3fVertex3fvSUN(object rc, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiNormal3fVertex3fvSUN(object rc, object n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiNormal3fVertex3fvSUN(object rc, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiNormal3fVertex3fvSUN(object rc, object n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiNormal3fVertex3fvSUN(object rc, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiNormal3fVertex3fvSUN(object rc, GLfloat[] n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiNormal3fVertex3fvSUN(object rc, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiNormal3fVertex3fvSUN(object rc, GLfloat[] n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiNormal3fVertex3fvSUN(object rc, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiNormal3fVertex3fvSUN(object rc, GLfloat[] n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiNormal3fVertex3fvSUN(object rc, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiNormal3fVertex3fvSUN(GLuint[] rc, IntPtr n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiNormal3fVertex3fvSUN(GLuint[] rc, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiNormal3fVertex3fvSUN(GLuint[] rc, IntPtr n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiNormal3fVertex3fvSUN(GLuint[] rc, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiNormal3fVertex3fvSUN(GLuint[] rc, IntPtr n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiNormal3fVertex3fvSUN(GLuint[] rc, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiNormal3fVertex3fvSUN(GLuint[] rc, object n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiNormal3fVertex3fvSUN(GLuint[] rc, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiNormal3fVertex3fvSUN(GLuint[] rc, object n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiNormal3fVertex3fvSUN(GLuint[] rc, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiNormal3fVertex3fvSUN(GLuint[] rc, object n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiNormal3fVertex3fvSUN(GLuint[] rc, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fSUN(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4fNormal3fVertex3fSUN(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
        {
            Delegates.glReplacementCodeuiColor4fNormal3fVertex3fSUN(rc, r, g, b, a, nx, ny, nz, x, y, z);
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr c, IntPtr n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr c, IntPtr n, IntPtr v)
        {
            Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, c, n, v);
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr c, IntPtr n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, c, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr c, IntPtr n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, c, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr c, object n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, c, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr c, object n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, c, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr c, object n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, c, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr c, GLfloat[] n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, c, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr c, GLfloat[] n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, c, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr c, GLfloat[] n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, c, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, object c, IntPtr n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, object c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, object c, IntPtr n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, object c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, object c, IntPtr n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, object c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, object c, object n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, object c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, object c, object n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, object c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, object c, object n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, object c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, object c, GLfloat[] n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, object c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, object c, GLfloat[] n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, object c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, object c, GLfloat[] n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, object c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] c, IntPtr n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] c, IntPtr n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] c, IntPtr n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] c, object n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] c, object n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] c, object n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] c, GLfloat[] n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] c, GLfloat[] n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] c, GLfloat[] n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, IntPtr c, IntPtr n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, IntPtr c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, n, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, IntPtr c, IntPtr n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, IntPtr c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, IntPtr c, IntPtr n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, IntPtr c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, IntPtr c, object n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, IntPtr c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, IntPtr c, object n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, IntPtr c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, IntPtr c, object n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, IntPtr c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, IntPtr c, GLfloat[] n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, IntPtr c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, IntPtr c, GLfloat[] n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, IntPtr c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, IntPtr c, GLfloat[] n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, IntPtr c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, object c, IntPtr n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, object c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, object c, IntPtr n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, object c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, object c, IntPtr n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, object c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, object c, object n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, object c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, object c, object n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, object c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, object c, object n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, object c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, object c, GLfloat[] n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, object c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, object c, GLfloat[] n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, object c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, object c, GLfloat[] n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, object c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] c, IntPtr n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] c, IntPtr n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] c, IntPtr n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] c, object n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] c, object n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] c, object n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] c, GLfloat[] n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] c, GLfloat[] n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] c, GLfloat[] n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr c, IntPtr n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, n, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr c, IntPtr n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr c, IntPtr n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr c, object n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr c, object n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr c, object n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr c, GLfloat[] n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr c, GLfloat[] n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr c, GLfloat[] n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, object c, IntPtr n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, object c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, object c, IntPtr n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, object c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, object c, IntPtr n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, object c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, object c, object n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, object c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, object c, object n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, object c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, object c, object n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, object c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, object c, GLfloat[] n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, object c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, object c, GLfloat[] n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, object c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, object c, GLfloat[] n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, object c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] c, IntPtr n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] c, IntPtr n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] c, IntPtr n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] c, object n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] c, object n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] c, object n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] c, GLfloat[] n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] c, GLfloat[] n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] c, GLfloat[] n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z)
        {
            Delegates.glReplacementCodeuiTexCoord2fVertex3fSUN(rc, s, t, x, y, z);
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fVertex3fvSUN(IntPtr rc, IntPtr tc, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fVertex3fvSUN(IntPtr rc, IntPtr tc, IntPtr v)
        {
            Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN(rc, tc, v);
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fVertex3fvSUN(IntPtr rc, IntPtr tc, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fVertex3fvSUN(IntPtr rc, IntPtr tc, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN(rc, tc, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fVertex3fvSUN(IntPtr rc, IntPtr tc, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fVertex3fvSUN(IntPtr rc, IntPtr tc, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN(rc, tc, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fVertex3fvSUN(IntPtr rc, object tc, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fVertex3fvSUN(IntPtr rc, object tc, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fVertex3fvSUN(IntPtr rc, object tc, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fVertex3fvSUN(IntPtr rc, object tc, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fVertex3fvSUN(IntPtr rc, object tc, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fVertex3fvSUN(IntPtr rc, object tc, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fVertex3fvSUN(IntPtr rc, GLfloat[] tc, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fVertex3fvSUN(IntPtr rc, GLfloat[] tc, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fVertex3fvSUN(IntPtr rc, GLfloat[] tc, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fVertex3fvSUN(IntPtr rc, GLfloat[] tc, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fVertex3fvSUN(IntPtr rc, GLfloat[] tc, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fVertex3fvSUN(IntPtr rc, GLfloat[] tc, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fVertex3fvSUN(object rc, IntPtr tc, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fVertex3fvSUN(object rc, IntPtr tc, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fVertex3fvSUN(object rc, IntPtr tc, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fVertex3fvSUN(object rc, IntPtr tc, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fVertex3fvSUN(object rc, IntPtr tc, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fVertex3fvSUN(object rc, IntPtr tc, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fVertex3fvSUN(object rc, object tc, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fVertex3fvSUN(object rc, object tc, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fVertex3fvSUN(object rc, object tc, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fVertex3fvSUN(object rc, object tc, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fVertex3fvSUN(object rc, object tc, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fVertex3fvSUN(object rc, object tc, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fVertex3fvSUN(object rc, GLfloat[] tc, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fVertex3fvSUN(object rc, GLfloat[] tc, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fVertex3fvSUN(object rc, GLfloat[] tc, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fVertex3fvSUN(object rc, GLfloat[] tc, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fVertex3fvSUN(object rc, GLfloat[] tc, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fVertex3fvSUN(object rc, GLfloat[] tc, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fVertex3fvSUN(GLuint[] rc, IntPtr tc, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fVertex3fvSUN(GLuint[] rc, IntPtr tc, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fVertex3fvSUN(GLuint[] rc, IntPtr tc, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fVertex3fvSUN(GLuint[] rc, IntPtr tc, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fVertex3fvSUN(GLuint[] rc, IntPtr tc, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fVertex3fvSUN(GLuint[] rc, IntPtr tc, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fVertex3fvSUN(GLuint[] rc, object tc, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fVertex3fvSUN(GLuint[] rc, object tc, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fVertex3fvSUN(GLuint[] rc, object tc, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fVertex3fvSUN(GLuint[] rc, object tc, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fVertex3fvSUN(GLuint[] rc, object tc, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fVertex3fvSUN(GLuint[] rc, object tc, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
        {
            Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(rc, s, t, nx, ny, nz, x, y, z);
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, IntPtr n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, IntPtr n, IntPtr v)
        {
            Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, tc, n, v);
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, IntPtr n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, tc, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, IntPtr n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, tc, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, object n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, tc, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, object n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, object n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, GLfloat[] n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, tc, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, GLfloat[] n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, GLfloat[] n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, object tc, IntPtr n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, object tc, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, object tc, IntPtr n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, object tc, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, object tc, IntPtr n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, object tc, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, object tc, object n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, object tc, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, object tc, object n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, object tc, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, object tc, object n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, object tc, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, object tc, GLfloat[] n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, object tc, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, object tc, GLfloat[] n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, object tc, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, object tc, GLfloat[] n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, object tc, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, IntPtr n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, IntPtr n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, IntPtr n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, object n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, object n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, object n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, GLfloat[] n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, GLfloat[] n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, GLfloat[] n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, IntPtr tc, IntPtr n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, IntPtr tc, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, n, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, IntPtr tc, IntPtr n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, IntPtr tc, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, IntPtr tc, IntPtr n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, IntPtr tc, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, IntPtr tc, object n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, IntPtr tc, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, IntPtr tc, object n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, IntPtr tc, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, IntPtr tc, object n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, IntPtr tc, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, IntPtr tc, GLfloat[] n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, IntPtr tc, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, IntPtr tc, GLfloat[] n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, IntPtr tc, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, IntPtr tc, GLfloat[] n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, IntPtr tc, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, object tc, IntPtr n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, object tc, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, object tc, IntPtr n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, object tc, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, object tc, IntPtr n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, object tc, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, object tc, object n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, object tc, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, object tc, object n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, object tc, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, object tc, object n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, object tc, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, object tc, GLfloat[] n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, object tc, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, object tc, GLfloat[] n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, object tc, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, object tc, GLfloat[] n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, object tc, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, IntPtr n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, IntPtr n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, IntPtr n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, object n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, object n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, object n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, GLfloat[] n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, GLfloat[] n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, GLfloat[] n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, IntPtr n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, n, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, IntPtr n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, IntPtr n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, object n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, object n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, object n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, GLfloat[] n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, GLfloat[] n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, GLfloat[] n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, object tc, IntPtr n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, object tc, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, object tc, IntPtr n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, object tc, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, object tc, IntPtr n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, object tc, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, object tc, object n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, object tc, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, object tc, object n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, object tc, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, object tc, object n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, object tc, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, object tc, GLfloat[] n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, object tc, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, object tc, GLfloat[] n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, object tc, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, object tc, GLfloat[] n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, object tc, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, IntPtr n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, IntPtr n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, IntPtr n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, object n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, object n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, object n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
        {
            Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(rc, s, t, r, g, b, a, nx, ny, nz, x, y, z);
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, IntPtr c, IntPtr n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, IntPtr c, IntPtr n, IntPtr v)
        {
            Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, c, n, v);
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, IntPtr c, IntPtr n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, IntPtr c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, c, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, IntPtr c, IntPtr n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, IntPtr c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, c, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, IntPtr c, object n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, IntPtr c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, c, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, IntPtr c, object n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, IntPtr c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, c, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, IntPtr c, object n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, IntPtr c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, c, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, IntPtr c, GLfloat[] n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, IntPtr c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, c, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, IntPtr c, GLfloat[] n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, IntPtr c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, c, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, IntPtr c, GLfloat[] n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, IntPtr c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, c, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, object c, IntPtr n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, object c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, h0.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, object c, IntPtr n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, object c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, object c, IntPtr n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, object c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, object c, object n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, object c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, object c, object n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, object c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, object c, object n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, object c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, object c, GLfloat[] n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, object c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, object c, GLfloat[] n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, object c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, object c, GLfloat[] n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, object c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, GLfloat[] c, IntPtr n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, GLfloat[] c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, h0.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, GLfloat[] c, IntPtr n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, GLfloat[] c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, GLfloat[] c, IntPtr n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, GLfloat[] c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, GLfloat[] c, object n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, GLfloat[] c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, GLfloat[] c, object n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, GLfloat[] c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, GLfloat[] c, object n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, GLfloat[] c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, GLfloat[] c, GLfloat[] n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, GLfloat[] c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, GLfloat[] c, GLfloat[] n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, GLfloat[] c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, IntPtr tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, IntPtr c, IntPtr n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, IntPtr c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), c, n, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, IntPtr c, IntPtr n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, IntPtr c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), c, n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, IntPtr c, IntPtr n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, IntPtr c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), c, n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, IntPtr c, object n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, IntPtr c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, IntPtr c, object n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, IntPtr c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, IntPtr c, object n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, IntPtr c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, IntPtr c, GLfloat[] n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, IntPtr c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, IntPtr c, GLfloat[] n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, IntPtr c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, IntPtr c, GLfloat[] n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, IntPtr c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, object c, IntPtr n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, object c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, object c, IntPtr n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, object c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, object c, IntPtr n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, object c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, object c, object n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, object c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, object c, object n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, object c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, object c, object n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, object c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, object c, GLfloat[] n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, object c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, object c, GLfloat[] n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, object c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, object c, GLfloat[] n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, object c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, GLfloat[] c, IntPtr n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, GLfloat[] c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, GLfloat[] c, IntPtr n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, GLfloat[] c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, GLfloat[] c, IntPtr n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, GLfloat[] c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, GLfloat[] c, object n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, GLfloat[] c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, GLfloat[] c, object n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, GLfloat[] c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, GLfloat[] c, object n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, GLfloat[] c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, GLfloat[] c, GLfloat[] n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, GLfloat[] c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, GLfloat[] c, GLfloat[] n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, GLfloat[] c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, object tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, IntPtr c, IntPtr n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, IntPtr c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), c, n, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, IntPtr c, IntPtr n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, IntPtr c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), c, n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, IntPtr c, IntPtr n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, IntPtr c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), c, n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, IntPtr c, object n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, IntPtr c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, IntPtr c, object n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, IntPtr c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, IntPtr c, object n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, IntPtr c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, IntPtr c, GLfloat[] n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, IntPtr c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, IntPtr c, GLfloat[] n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, IntPtr c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, IntPtr c, GLfloat[] n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, IntPtr c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, object c, IntPtr n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, object c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, object c, IntPtr n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, object c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, object c, IntPtr n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, object c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, object c, object n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, object c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, object c, object n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, object c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, object c, object n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, object c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, object c, GLfloat[] n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, object c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, object c, GLfloat[] n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, object c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, object c, GLfloat[] n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, object c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, GLfloat[] c, IntPtr n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, GLfloat[] c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, GLfloat[] c, IntPtr n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, GLfloat[] c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, GLfloat[] c, IntPtr n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, GLfloat[] c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, GLfloat[] c, object n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, GLfloat[] c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, GLfloat[] c, object n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, GLfloat[] c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, GLfloat[] c, object n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, GLfloat[] c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, GLfloat[] c, GLfloat[] n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, GLfloat[] c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, GLfloat[] c, GLfloat[] n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, GLfloat[] c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(IntPtr rc, GLfloat[] tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, IntPtr c, IntPtr n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, IntPtr c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, c, n, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, IntPtr c, IntPtr n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, IntPtr c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, c, n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, IntPtr c, IntPtr n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, IntPtr c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, c, n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, IntPtr c, object n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, IntPtr c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, c, h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, IntPtr c, object n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, IntPtr c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, IntPtr c, object n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, IntPtr c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, IntPtr c, GLfloat[] n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, IntPtr c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, c, h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, IntPtr c, GLfloat[] n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, IntPtr c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, IntPtr c, GLfloat[] n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, IntPtr c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, object c, IntPtr n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, object c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, object c, IntPtr n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, object c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, object c, IntPtr n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, object c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, object c, object n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, object c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, object c, object n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, object c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, object c, object n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, object c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, object c, GLfloat[] n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, object c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, object c, GLfloat[] n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, object c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, object c, GLfloat[] n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, object c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, GLfloat[] c, IntPtr n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, GLfloat[] c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, GLfloat[] c, IntPtr n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, GLfloat[] c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, GLfloat[] c, IntPtr n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, GLfloat[] c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, GLfloat[] c, object n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, GLfloat[] c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, GLfloat[] c, object n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, GLfloat[] c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, GLfloat[] c, object n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, GLfloat[] c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, GLfloat[] c, GLfloat[] n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, GLfloat[] c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, GLfloat[] c, GLfloat[] n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, GLfloat[] c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, IntPtr tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, IntPtr c, IntPtr n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, IntPtr c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, n, v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, IntPtr c, IntPtr n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, IntPtr c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, IntPtr c, IntPtr n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, IntPtr c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, IntPtr c, object n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, IntPtr c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, IntPtr c, object n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, IntPtr c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, IntPtr c, object n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, IntPtr c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, IntPtr c, GLfloat[] n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, IntPtr c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, IntPtr c, GLfloat[] n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, IntPtr c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, IntPtr c, GLfloat[] n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, IntPtr c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, object c, IntPtr n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, object c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, object c, IntPtr n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, object c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), n, h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, object c, IntPtr n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, object c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), n, h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, object c, object n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, object c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), v);
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, object c, object n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, object c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h4.Free();
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, object c, object n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, object c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h4.Free();
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, object c, GLfloat[] n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, object c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), v);
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, object c, GLfloat[] n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, object c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h4.Free();
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, object c, GLfloat[] n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, object c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h4.Free();
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, GLfloat[] c, IntPtr n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, GLfloat[] c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, GLfloat[] c, IntPtr n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, GLfloat[] c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), n, h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, GLfloat[] c, IntPtr n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, GLfloat[] c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), n, h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, GLfloat[] c, object n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, GLfloat[] c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), v);
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, GLfloat[] c, object n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, GLfloat[] c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h4.Free();
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, GLfloat[] c, object n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, GLfloat[] c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h4.Free();
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, GLfloat[] c, GLfloat[] n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, GLfloat[] c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), v);
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, GLfloat[] c, GLfloat[] n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, GLfloat[] c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h4.Free();
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, object tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h4.Free();
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, IntPtr c, IntPtr n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, IntPtr c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, n, v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, IntPtr c, IntPtr n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, IntPtr c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, IntPtr c, IntPtr n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, IntPtr c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, IntPtr c, object n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, IntPtr c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, IntPtr c, object n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, IntPtr c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, IntPtr c, object n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, IntPtr c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, IntPtr c, GLfloat[] n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, IntPtr c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, IntPtr c, GLfloat[] n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, IntPtr c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, IntPtr c, GLfloat[] n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, IntPtr c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, object c, IntPtr n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, object c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, object c, IntPtr n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, object c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), n, h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, object c, IntPtr n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, object c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), n, h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, object c, object n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, object c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), v);
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, object c, object n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, object c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h4.Free();
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, object c, object n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, object c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h4.Free();
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, object c, GLfloat[] n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, object c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), v);
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, object c, GLfloat[] n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, object c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h4.Free();
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, object c, GLfloat[] n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, object c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h4.Free();
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, GLfloat[] c, IntPtr n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, GLfloat[] c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, GLfloat[] c, IntPtr n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, GLfloat[] c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), n, h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, GLfloat[] c, IntPtr n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, GLfloat[] c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), n, h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, GLfloat[] c, object n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, GLfloat[] c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), v);
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, GLfloat[] c, object n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, GLfloat[] c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h4.Free();
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, GLfloat[] c, object n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, GLfloat[] c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h4.Free();
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, GLfloat[] c, GLfloat[] n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, GLfloat[] c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), v);
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, GLfloat[] c, GLfloat[] n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, GLfloat[] c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h4.Free();
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(object rc, GLfloat[] tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h4.Free();
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, IntPtr c, IntPtr n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, IntPtr c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, c, n, v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, IntPtr c, IntPtr n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, IntPtr c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, c, n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, IntPtr c, IntPtr n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, IntPtr c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, c, n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, IntPtr c, object n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, IntPtr c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, c, h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, IntPtr c, object n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, IntPtr c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, IntPtr c, object n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, IntPtr c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, IntPtr c, GLfloat[] n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, IntPtr c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, c, h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, IntPtr c, GLfloat[] n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, IntPtr c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, IntPtr c, GLfloat[] n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, IntPtr c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, object c, IntPtr n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, object c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, object c, IntPtr n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, object c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, object c, IntPtr n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, object c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, object c, object n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, object c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, object c, object n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, object c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, object c, object n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, object c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, object c, GLfloat[] n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, object c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, object c, GLfloat[] n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, object c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, object c, GLfloat[] n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, object c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, GLfloat[] c, IntPtr n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, GLfloat[] c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, GLfloat[] c, IntPtr n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, GLfloat[] c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, GLfloat[] c, IntPtr n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, GLfloat[] c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, GLfloat[] c, object n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, GLfloat[] c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, GLfloat[] c, object n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, GLfloat[] c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, GLfloat[] c, object n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, GLfloat[] c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, GLfloat[] c, GLfloat[] n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, GLfloat[] c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, GLfloat[] c, GLfloat[] n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, GLfloat[] c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, IntPtr tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, IntPtr c, IntPtr n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, IntPtr c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, n, v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, IntPtr c, IntPtr n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, IntPtr c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, IntPtr c, IntPtr n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, IntPtr c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, IntPtr c, object n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, IntPtr c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, IntPtr c, object n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, IntPtr c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, IntPtr c, object n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, IntPtr c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, IntPtr c, GLfloat[] n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, IntPtr c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, IntPtr c, GLfloat[] n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, IntPtr c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, IntPtr c, GLfloat[] n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, IntPtr c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, object c, IntPtr n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, object c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, object c, IntPtr n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, object c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), n, h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, object c, IntPtr n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, object c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), n, h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, object c, object n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, object c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), v);
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, object c, object n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, object c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h4.Free();
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, object c, object n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, object c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h4.Free();
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, object c, GLfloat[] n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, object c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), v);
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, object c, GLfloat[] n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, object c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h4.Free();
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, object c, GLfloat[] n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, object c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h4.Free();
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, GLfloat[] c, IntPtr n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, GLfloat[] c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, GLfloat[] c, IntPtr n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, GLfloat[] c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), n, h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, GLfloat[] c, IntPtr n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, GLfloat[] c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), n, h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, GLfloat[] c, object n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, GLfloat[] c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), v);
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, GLfloat[] c, object n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, GLfloat[] c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h4.Free();
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, GLfloat[] c, object n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, GLfloat[] c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h4.Free();
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, GLfloat[] c, GLfloat[] n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, GLfloat[] c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), v);
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, GLfloat[] c, GLfloat[] n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, GLfloat[] c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h4.Free();
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, object tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h4.Free();
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, IntPtr c, IntPtr n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, IntPtr c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, n, v);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, IntPtr c, IntPtr n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, IntPtr c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, IntPtr c, IntPtr n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, IntPtr c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, IntPtr c, object n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, IntPtr c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, IntPtr c, object n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, IntPtr c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, IntPtr c, object n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, IntPtr c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, IntPtr c, GLfloat[] n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, IntPtr c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, IntPtr c, GLfloat[] n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, IntPtr c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, IntPtr c, GLfloat[] n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, IntPtr c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, object c, IntPtr n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, object c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, object c, IntPtr n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, object c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), n, h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, object c, IntPtr n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, object c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), n, h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, object c, object n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, object c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), v);
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, object c, object n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, object c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h4.Free();
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, object c, object n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, object c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h4.Free();
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, object c, GLfloat[] n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, object c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), v);
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, object c, GLfloat[] n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, object c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h4.Free();
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, object c, GLfloat[] n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, object c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h4.Free();
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] c, IntPtr n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] c, IntPtr n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] c, IntPtr n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] c, IntPtr n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), n, h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] c, IntPtr n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] c, IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), n, h3.AddrOfPinnedObject());
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] c, object n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] c, object n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), v);
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] c, object n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] c, object n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h4.Free();
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] c, object n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] c, object n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h4.Free();
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] c, GLfloat[] n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] c, GLfloat[] n, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), v);
            }
            finally
            {
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] c, GLfloat[] n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] c, GLfloat[] n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h4.Free();
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h4.Free();
                h3.Free();
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region BlendFuncSeparateEXT(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)

        /// <summary>
        /// 
        /// </summary>
        public static         void glBlendFuncSeparateEXT(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)
        {
            Delegates.glBlendFuncSeparateEXT(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
        }

        #endregion

        #region BlendFuncSeparateINGR(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)

        /// <summary>
        /// 
        /// </summary>
        public static         void glBlendFuncSeparateINGR(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)
        {
            Delegates.glBlendFuncSeparateINGR(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
        }

        #endregion

        #region VertexWeightfEXT(GLfloat weight)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexWeightfEXT(GLfloat weight)
        {
            Delegates.glVertexWeightfEXT(weight);
        }

        #endregion

        #region VertexWeightfvEXT(IntPtr weight)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexWeightfvEXT(IntPtr weight)
        {
            Delegates.glVertexWeightfvEXT(weight);
        }

        #endregion

        #region VertexWeightfvEXT(object weight)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexWeightfvEXT(object weight)
        {
            GCHandle h0 = GCHandle.Alloc(weight, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexWeightfvEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexWeightfvEXT(GLfloat[] weight)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexWeightfvEXT(GLfloat[] weight)
        {
            GCHandle h0 = GCHandle.Alloc(weight, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexWeightfvEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexWeightPointerEXT(GLsizei size, GLenum type, GLsizei stride, IntPtr pointer)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexWeightPointerEXT(GLsizei size, GLenum type, GLsizei stride, IntPtr pointer)
        {
            Delegates.glVertexWeightPointerEXT(size, type, stride, pointer);
        }

        #endregion

        #region VertexWeightPointerEXT(GLsizei size, GLenum type, GLsizei stride, object pointer)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexWeightPointerEXT(GLsizei size, GLenum type, GLsizei stride, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexWeightPointerEXT(size, type, stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region FlushVertexArrayRangeNV()

        /// <summary>
        /// 
        /// </summary>
        public static         void glFlushVertexArrayRangeNV()
        {
            Delegates.glFlushVertexArrayRangeNV();
        }

        #endregion

        #region VertexArrayRangeNV(GLsizei length, IntPtr pointer)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexArrayRangeNV(GLsizei length, IntPtr pointer)
        {
            Delegates.glVertexArrayRangeNV(length, pointer);
        }

        #endregion

        #region VertexArrayRangeNV(GLsizei length, object pointer)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexArrayRangeNV(GLsizei length, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexArrayRangeNV(length, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region CombinerParameterfvNV(GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glCombinerParameterfvNV(GLenum pname, IntPtr parameters)
        {
            Delegates.glCombinerParameterfvNV(pname, parameters);
        }

        #endregion

        #region CombinerParameterfvNV(GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glCombinerParameterfvNV(GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glCombinerParameterfvNV(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region CombinerParameterfvNV(GLenum pname, GLfloat[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glCombinerParameterfvNV(GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glCombinerParameterfvNV(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region CombinerParameterfNV(GLenum pname, GLfloat param)

        /// <summary>
        /// 
        /// </summary>
        public static         void glCombinerParameterfNV(GLenum pname, GLfloat param)
        {
            Delegates.glCombinerParameterfNV(pname, param);
        }

        #endregion

        #region CombinerParameterivNV(GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glCombinerParameterivNV(GLenum pname, IntPtr parameters)
        {
            Delegates.glCombinerParameterivNV(pname, parameters);
        }

        #endregion

        #region CombinerParameterivNV(GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glCombinerParameterivNV(GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glCombinerParameterivNV(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region CombinerParameterivNV(GLenum pname, GLint[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glCombinerParameterivNV(GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glCombinerParameterivNV(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region CombinerParameteriNV(GLenum pname, GLint param)

        /// <summary>
        /// 
        /// </summary>
        public static         void glCombinerParameteriNV(GLenum pname, GLint param)
        {
            Delegates.glCombinerParameteriNV(pname, param);
        }

        #endregion

        #region CombinerInputNV(GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage)

        /// <summary>
        /// 
        /// </summary>
        public static         void glCombinerInputNV(GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage)
        {
            Delegates.glCombinerInputNV(stage, portion, variable, input, mapping, componentUsage);
        }

        #endregion

        #region CombinerOutputNV(GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum)

        /// <summary>
        /// 
        /// </summary>
        public static         void glCombinerOutputNV(GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum)
        {
            Delegates.glCombinerOutputNV(stage, portion, abOutput, cdOutput, sumOutput, scale, bias, abDotProduct, cdDotProduct, muxSum);
        }

        #endregion

        #region FinalCombinerInputNV(GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage)

        /// <summary>
        /// 
        /// </summary>
        public static         void glFinalCombinerInputNV(GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage)
        {
            Delegates.glFinalCombinerInputNV(variable, input, mapping, componentUsage);
        }

        #endregion

        #region GetCombinerInputParameterfvNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetCombinerInputParameterfvNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, IntPtr parameters)
        {
            Delegates.glGetCombinerInputParameterfvNV(stage, portion, variable, pname, parameters);
        }

        #endregion

        #region GetCombinerInputParameterfvNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetCombinerInputParameterfvNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetCombinerInputParameterfvNV(stage, portion, variable, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetCombinerInputParameterfvNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetCombinerInputParameterfvNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetCombinerInputParameterfvNV(stage, portion, variable, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetCombinerInputParameterivNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetCombinerInputParameterivNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, IntPtr parameters)
        {
            Delegates.glGetCombinerInputParameterivNV(stage, portion, variable, pname, parameters);
        }

        #endregion

        #region GetCombinerInputParameterivNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetCombinerInputParameterivNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetCombinerInputParameterivNV(stage, portion, variable, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetCombinerInputParameterivNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetCombinerInputParameterivNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetCombinerInputParameterivNV(stage, portion, variable, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetCombinerOutputParameterfvNV(GLenum stage, GLenum portion, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetCombinerOutputParameterfvNV(GLenum stage, GLenum portion, GLenum pname, IntPtr parameters)
        {
            Delegates.glGetCombinerOutputParameterfvNV(stage, portion, pname, parameters);
        }

        #endregion

        #region GetCombinerOutputParameterfvNV(GLenum stage, GLenum portion, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetCombinerOutputParameterfvNV(GLenum stage, GLenum portion, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetCombinerOutputParameterfvNV(stage, portion, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetCombinerOutputParameterfvNV(GLenum stage, GLenum portion, GLenum pname, GLfloat[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetCombinerOutputParameterfvNV(GLenum stage, GLenum portion, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetCombinerOutputParameterfvNV(stage, portion, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetCombinerOutputParameterivNV(GLenum stage, GLenum portion, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetCombinerOutputParameterivNV(GLenum stage, GLenum portion, GLenum pname, IntPtr parameters)
        {
            Delegates.glGetCombinerOutputParameterivNV(stage, portion, pname, parameters);
        }

        #endregion

        #region GetCombinerOutputParameterivNV(GLenum stage, GLenum portion, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetCombinerOutputParameterivNV(GLenum stage, GLenum portion, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetCombinerOutputParameterivNV(stage, portion, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetCombinerOutputParameterivNV(GLenum stage, GLenum portion, GLenum pname, GLint[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetCombinerOutputParameterivNV(GLenum stage, GLenum portion, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetCombinerOutputParameterivNV(stage, portion, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetFinalCombinerInputParameterfvNV(GLenum variable, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetFinalCombinerInputParameterfvNV(GLenum variable, GLenum pname, IntPtr parameters)
        {
            Delegates.glGetFinalCombinerInputParameterfvNV(variable, pname, parameters);
        }

        #endregion

        #region GetFinalCombinerInputParameterfvNV(GLenum variable, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetFinalCombinerInputParameterfvNV(GLenum variable, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetFinalCombinerInputParameterfvNV(variable, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetFinalCombinerInputParameterfvNV(GLenum variable, GLenum pname, GLfloat[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetFinalCombinerInputParameterfvNV(GLenum variable, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetFinalCombinerInputParameterfvNV(variable, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetFinalCombinerInputParameterivNV(GLenum variable, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetFinalCombinerInputParameterivNV(GLenum variable, GLenum pname, IntPtr parameters)
        {
            Delegates.glGetFinalCombinerInputParameterivNV(variable, pname, parameters);
        }

        #endregion

        #region GetFinalCombinerInputParameterivNV(GLenum variable, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetFinalCombinerInputParameterivNV(GLenum variable, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetFinalCombinerInputParameterivNV(variable, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetFinalCombinerInputParameterivNV(GLenum variable, GLenum pname, GLint[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetFinalCombinerInputParameterivNV(GLenum variable, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetFinalCombinerInputParameterivNV(variable, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ResizeBuffersMESA()

        /// <summary>
        /// 
        /// </summary>
        public static         void glResizeBuffersMESA()
        {
            Delegates.glResizeBuffersMESA();
        }

        #endregion

        #region WindowPos2dMESA(GLdouble x, GLdouble y)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos2dMESA(GLdouble x, GLdouble y)
        {
            Delegates.glWindowPos2dMESA(x, y);
        }

        #endregion

        #region WindowPos2dvMESA(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos2dvMESA(IntPtr v)
        {
            Delegates.glWindowPos2dvMESA(v);
        }

        #endregion

        #region WindowPos2dvMESA(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos2dvMESA(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos2dvMESA(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos2dvMESA(GLdouble[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos2dvMESA(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos2dvMESA(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos2fMESA(GLfloat x, GLfloat y)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos2fMESA(GLfloat x, GLfloat y)
        {
            Delegates.glWindowPos2fMESA(x, y);
        }

        #endregion

        #region WindowPos2fvMESA(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos2fvMESA(IntPtr v)
        {
            Delegates.glWindowPos2fvMESA(v);
        }

        #endregion

        #region WindowPos2fvMESA(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos2fvMESA(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos2fvMESA(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos2fvMESA(GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos2fvMESA(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos2fvMESA(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos2iMESA(GLint x, GLint y)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos2iMESA(GLint x, GLint y)
        {
            Delegates.glWindowPos2iMESA(x, y);
        }

        #endregion

        #region WindowPos2ivMESA(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos2ivMESA(IntPtr v)
        {
            Delegates.glWindowPos2ivMESA(v);
        }

        #endregion

        #region WindowPos2ivMESA(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos2ivMESA(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos2ivMESA(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos2ivMESA(GLint[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos2ivMESA(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos2ivMESA(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos2sMESA(GLshort x, GLshort y)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos2sMESA(GLshort x, GLshort y)
        {
            Delegates.glWindowPos2sMESA(x, y);
        }

        #endregion

        #region WindowPos2svMESA(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos2svMESA(IntPtr v)
        {
            Delegates.glWindowPos2svMESA(v);
        }

        #endregion

        #region WindowPos2svMESA(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos2svMESA(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos2svMESA(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos2svMESA(GLshort[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos2svMESA(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos2svMESA(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos3dMESA(GLdouble x, GLdouble y, GLdouble z)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos3dMESA(GLdouble x, GLdouble y, GLdouble z)
        {
            Delegates.glWindowPos3dMESA(x, y, z);
        }

        #endregion

        #region WindowPos3dvMESA(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos3dvMESA(IntPtr v)
        {
            Delegates.glWindowPos3dvMESA(v);
        }

        #endregion

        #region WindowPos3dvMESA(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos3dvMESA(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos3dvMESA(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos3dvMESA(GLdouble[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos3dvMESA(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos3dvMESA(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos3fMESA(GLfloat x, GLfloat y, GLfloat z)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos3fMESA(GLfloat x, GLfloat y, GLfloat z)
        {
            Delegates.glWindowPos3fMESA(x, y, z);
        }

        #endregion

        #region WindowPos3fvMESA(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos3fvMESA(IntPtr v)
        {
            Delegates.glWindowPos3fvMESA(v);
        }

        #endregion

        #region WindowPos3fvMESA(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos3fvMESA(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos3fvMESA(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos3fvMESA(GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos3fvMESA(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos3fvMESA(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos3iMESA(GLint x, GLint y, GLint z)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos3iMESA(GLint x, GLint y, GLint z)
        {
            Delegates.glWindowPos3iMESA(x, y, z);
        }

        #endregion

        #region WindowPos3ivMESA(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos3ivMESA(IntPtr v)
        {
            Delegates.glWindowPos3ivMESA(v);
        }

        #endregion

        #region WindowPos3ivMESA(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos3ivMESA(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos3ivMESA(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos3ivMESA(GLint[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos3ivMESA(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos3ivMESA(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos3sMESA(GLshort x, GLshort y, GLshort z)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos3sMESA(GLshort x, GLshort y, GLshort z)
        {
            Delegates.glWindowPos3sMESA(x, y, z);
        }

        #endregion

        #region WindowPos3svMESA(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos3svMESA(IntPtr v)
        {
            Delegates.glWindowPos3svMESA(v);
        }

        #endregion

        #region WindowPos3svMESA(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos3svMESA(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos3svMESA(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos3svMESA(GLshort[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos3svMESA(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos3svMESA(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos4dMESA(GLdouble x, GLdouble y, GLdouble z, GLdouble w)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos4dMESA(GLdouble x, GLdouble y, GLdouble z, GLdouble w)
        {
            Delegates.glWindowPos4dMESA(x, y, z, w);
        }

        #endregion

        #region WindowPos4dvMESA(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos4dvMESA(IntPtr v)
        {
            Delegates.glWindowPos4dvMESA(v);
        }

        #endregion

        #region WindowPos4dvMESA(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos4dvMESA(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos4dvMESA(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos4dvMESA(GLdouble[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos4dvMESA(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos4dvMESA(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos4fMESA(GLfloat x, GLfloat y, GLfloat z, GLfloat w)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos4fMESA(GLfloat x, GLfloat y, GLfloat z, GLfloat w)
        {
            Delegates.glWindowPos4fMESA(x, y, z, w);
        }

        #endregion

        #region WindowPos4fvMESA(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos4fvMESA(IntPtr v)
        {
            Delegates.glWindowPos4fvMESA(v);
        }

        #endregion

        #region WindowPos4fvMESA(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos4fvMESA(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos4fvMESA(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos4fvMESA(GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos4fvMESA(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos4fvMESA(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos4iMESA(GLint x, GLint y, GLint z, GLint w)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos4iMESA(GLint x, GLint y, GLint z, GLint w)
        {
            Delegates.glWindowPos4iMESA(x, y, z, w);
        }

        #endregion

        #region WindowPos4ivMESA(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos4ivMESA(IntPtr v)
        {
            Delegates.glWindowPos4ivMESA(v);
        }

        #endregion

        #region WindowPos4ivMESA(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos4ivMESA(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos4ivMESA(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos4ivMESA(GLint[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos4ivMESA(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos4ivMESA(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos4sMESA(GLshort x, GLshort y, GLshort z, GLshort w)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos4sMESA(GLshort x, GLshort y, GLshort z, GLshort w)
        {
            Delegates.glWindowPos4sMESA(x, y, z, w);
        }

        #endregion

        #region WindowPos4svMESA(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos4svMESA(IntPtr v)
        {
            Delegates.glWindowPos4svMESA(v);
        }

        #endregion

        #region WindowPos4svMESA(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos4svMESA(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos4svMESA(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region WindowPos4svMESA(GLshort[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWindowPos4svMESA(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos4svMESA(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiModeDrawArraysIBM(IntPtr mode, IntPtr first, IntPtr count, GLsizei primcount, GLint modestride)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiModeDrawArraysIBM(IntPtr mode, IntPtr first, IntPtr count, GLsizei primcount, GLint modestride)
        {
            Delegates.glMultiModeDrawArraysIBM(mode, first, count, primcount, modestride);
        }

        #endregion

        #region MultiModeDrawArraysIBM(IntPtr mode, IntPtr first, object count, GLsizei primcount, GLint modestride)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiModeDrawArraysIBM(IntPtr mode, IntPtr first, object count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiModeDrawArraysIBM(mode, first, h0.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiModeDrawArraysIBM(IntPtr mode, IntPtr first, GLsizei[] count, GLsizei primcount, GLint modestride)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiModeDrawArraysIBM(IntPtr mode, IntPtr first, GLsizei[] count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiModeDrawArraysIBM(mode, first, h0.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiModeDrawArraysIBM(IntPtr mode, object first, IntPtr count, GLsizei primcount, GLint modestride)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiModeDrawArraysIBM(IntPtr mode, object first, IntPtr count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiModeDrawArraysIBM(mode, h0.AddrOfPinnedObject(), count, primcount, modestride);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiModeDrawArraysIBM(IntPtr mode, object first, object count, GLsizei primcount, GLint modestride)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiModeDrawArraysIBM(IntPtr mode, object first, object count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiModeDrawArraysIBM(mode, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region MultiModeDrawArraysIBM(IntPtr mode, object first, GLsizei[] count, GLsizei primcount, GLint modestride)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiModeDrawArraysIBM(IntPtr mode, object first, GLsizei[] count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiModeDrawArraysIBM(mode, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region MultiModeDrawArraysIBM(IntPtr mode, GLint[] first, IntPtr count, GLsizei primcount, GLint modestride)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiModeDrawArraysIBM(IntPtr mode, GLint[] first, IntPtr count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiModeDrawArraysIBM(mode, h0.AddrOfPinnedObject(), count, primcount, modestride);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiModeDrawArraysIBM(IntPtr mode, GLint[] first, object count, GLsizei primcount, GLint modestride)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiModeDrawArraysIBM(IntPtr mode, GLint[] first, object count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiModeDrawArraysIBM(mode, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region MultiModeDrawArraysIBM(IntPtr mode, GLint[] first, GLsizei[] count, GLsizei primcount, GLint modestride)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiModeDrawArraysIBM(IntPtr mode, GLint[] first, GLsizei[] count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiModeDrawArraysIBM(mode, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region MultiModeDrawArraysIBM(object mode, IntPtr first, IntPtr count, GLsizei primcount, GLint modestride)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiModeDrawArraysIBM(object mode, IntPtr first, IntPtr count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiModeDrawArraysIBM(h0.AddrOfPinnedObject(), first, count, primcount, modestride);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiModeDrawArraysIBM(object mode, IntPtr first, object count, GLsizei primcount, GLint modestride)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiModeDrawArraysIBM(object mode, IntPtr first, object count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiModeDrawArraysIBM(h0.AddrOfPinnedObject(), first, h1.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region MultiModeDrawArraysIBM(object mode, IntPtr first, GLsizei[] count, GLsizei primcount, GLint modestride)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiModeDrawArraysIBM(object mode, IntPtr first, GLsizei[] count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiModeDrawArraysIBM(h0.AddrOfPinnedObject(), first, h1.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region MultiModeDrawArraysIBM(object mode, object first, IntPtr count, GLsizei primcount, GLint modestride)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiModeDrawArraysIBM(object mode, object first, IntPtr count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(first, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiModeDrawArraysIBM(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), count, primcount, modestride);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region MultiModeDrawArraysIBM(object mode, object first, object count, GLsizei primcount, GLint modestride)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiModeDrawArraysIBM(object mode, object first, object count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiModeDrawArraysIBM(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region MultiModeDrawArraysIBM(object mode, object first, GLsizei[] count, GLsizei primcount, GLint modestride)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiModeDrawArraysIBM(object mode, object first, GLsizei[] count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiModeDrawArraysIBM(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region MultiModeDrawArraysIBM(object mode, GLint[] first, IntPtr count, GLsizei primcount, GLint modestride)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiModeDrawArraysIBM(object mode, GLint[] first, IntPtr count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(first, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiModeDrawArraysIBM(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), count, primcount, modestride);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region MultiModeDrawArraysIBM(object mode, GLint[] first, object count, GLsizei primcount, GLint modestride)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiModeDrawArraysIBM(object mode, GLint[] first, object count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiModeDrawArraysIBM(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region MultiModeDrawArraysIBM(object mode, GLint[] first, GLsizei[] count, GLsizei primcount, GLint modestride)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiModeDrawArraysIBM(object mode, GLint[] first, GLsizei[] count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiModeDrawArraysIBM(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region MultiModeDrawArraysIBM(GLenum[] mode, IntPtr first, IntPtr count, GLsizei primcount, GLint modestride)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiModeDrawArraysIBM(GLenum[] mode, IntPtr first, IntPtr count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiModeDrawArraysIBM(h0.AddrOfPinnedObject(), first, count, primcount, modestride);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiModeDrawArraysIBM(GLenum[] mode, IntPtr first, object count, GLsizei primcount, GLint modestride)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiModeDrawArraysIBM(GLenum[] mode, IntPtr first, object count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiModeDrawArraysIBM(h0.AddrOfPinnedObject(), first, h1.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region MultiModeDrawArraysIBM(GLenum[] mode, IntPtr first, GLsizei[] count, GLsizei primcount, GLint modestride)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiModeDrawArraysIBM(GLenum[] mode, IntPtr first, GLsizei[] count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiModeDrawArraysIBM(h0.AddrOfPinnedObject(), first, h1.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region MultiModeDrawArraysIBM(GLenum[] mode, object first, IntPtr count, GLsizei primcount, GLint modestride)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiModeDrawArraysIBM(GLenum[] mode, object first, IntPtr count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(first, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiModeDrawArraysIBM(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), count, primcount, modestride);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region MultiModeDrawArraysIBM(GLenum[] mode, object first, object count, GLsizei primcount, GLint modestride)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiModeDrawArraysIBM(GLenum[] mode, object first, object count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiModeDrawArraysIBM(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region MultiModeDrawArraysIBM(GLenum[] mode, object first, GLsizei[] count, GLsizei primcount, GLint modestride)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiModeDrawArraysIBM(GLenum[] mode, object first, GLsizei[] count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiModeDrawArraysIBM(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region MultiModeDrawArraysIBM(GLenum[] mode, GLint[] first, IntPtr count, GLsizei primcount, GLint modestride)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiModeDrawArraysIBM(GLenum[] mode, GLint[] first, IntPtr count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(first, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiModeDrawArraysIBM(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), count, primcount, modestride);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region MultiModeDrawArraysIBM(GLenum[] mode, GLint[] first, object count, GLsizei primcount, GLint modestride)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiModeDrawArraysIBM(GLenum[] mode, GLint[] first, object count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiModeDrawArraysIBM(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region MultiModeDrawArraysIBM(GLenum[] mode, GLint[] first, GLsizei[] count, GLsizei primcount, GLint modestride)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiModeDrawArraysIBM(GLenum[] mode, GLint[] first, GLsizei[] count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiModeDrawArraysIBM(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region MultiModeDrawElementsIBM(IntPtr mode, IntPtr count, GLenum type, IntPtr indices, GLsizei primcount, GLint modestride)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiModeDrawElementsIBM(IntPtr mode, IntPtr count, GLenum type, IntPtr indices, GLsizei primcount, GLint modestride)
        {
            Delegates.glMultiModeDrawElementsIBM(mode, count, type, indices, primcount, modestride);
        }

        #endregion

        #region MultiModeDrawElementsIBM(IntPtr mode, IntPtr count, GLenum type, object indices, GLsizei primcount, GLint modestride)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiModeDrawElementsIBM(IntPtr mode, IntPtr count, GLenum type, object indices, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiModeDrawElementsIBM(mode, count, type, h0.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiModeDrawElementsIBM(IntPtr mode, object count, GLenum type, IntPtr indices, GLsizei primcount, GLint modestride)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiModeDrawElementsIBM(IntPtr mode, object count, GLenum type, IntPtr indices, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiModeDrawElementsIBM(mode, h0.AddrOfPinnedObject(), type, indices, primcount, modestride);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiModeDrawElementsIBM(IntPtr mode, object count, GLenum type, object indices, GLsizei primcount, GLint modestride)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiModeDrawElementsIBM(IntPtr mode, object count, GLenum type, object indices, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiModeDrawElementsIBM(mode, h0.AddrOfPinnedObject(), type, h1.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region MultiModeDrawElementsIBM(IntPtr mode, GLsizei[] count, GLenum type, IntPtr indices, GLsizei primcount, GLint modestride)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiModeDrawElementsIBM(IntPtr mode, GLsizei[] count, GLenum type, IntPtr indices, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiModeDrawElementsIBM(mode, h0.AddrOfPinnedObject(), type, indices, primcount, modestride);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiModeDrawElementsIBM(IntPtr mode, GLsizei[] count, GLenum type, object indices, GLsizei primcount, GLint modestride)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiModeDrawElementsIBM(IntPtr mode, GLsizei[] count, GLenum type, object indices, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiModeDrawElementsIBM(mode, h0.AddrOfPinnedObject(), type, h1.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region MultiModeDrawElementsIBM(object mode, IntPtr count, GLenum type, IntPtr indices, GLsizei primcount, GLint modestride)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiModeDrawElementsIBM(object mode, IntPtr count, GLenum type, IntPtr indices, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiModeDrawElementsIBM(h0.AddrOfPinnedObject(), count, type, indices, primcount, modestride);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiModeDrawElementsIBM(object mode, IntPtr count, GLenum type, object indices, GLsizei primcount, GLint modestride)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiModeDrawElementsIBM(object mode, IntPtr count, GLenum type, object indices, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiModeDrawElementsIBM(h0.AddrOfPinnedObject(), count, type, h1.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region MultiModeDrawElementsIBM(object mode, object count, GLenum type, IntPtr indices, GLsizei primcount, GLint modestride)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiModeDrawElementsIBM(object mode, object count, GLenum type, IntPtr indices, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiModeDrawElementsIBM(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), type, indices, primcount, modestride);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region MultiModeDrawElementsIBM(object mode, object count, GLenum type, object indices, GLsizei primcount, GLint modestride)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiModeDrawElementsIBM(object mode, object count, GLenum type, object indices, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiModeDrawElementsIBM(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), type, h2.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region MultiModeDrawElementsIBM(object mode, GLsizei[] count, GLenum type, IntPtr indices, GLsizei primcount, GLint modestride)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiModeDrawElementsIBM(object mode, GLsizei[] count, GLenum type, IntPtr indices, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiModeDrawElementsIBM(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), type, indices, primcount, modestride);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region MultiModeDrawElementsIBM(object mode, GLsizei[] count, GLenum type, object indices, GLsizei primcount, GLint modestride)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiModeDrawElementsIBM(object mode, GLsizei[] count, GLenum type, object indices, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiModeDrawElementsIBM(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), type, h2.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region MultiModeDrawElementsIBM(GLenum[] mode, IntPtr count, GLenum type, IntPtr indices, GLsizei primcount, GLint modestride)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiModeDrawElementsIBM(GLenum[] mode, IntPtr count, GLenum type, IntPtr indices, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiModeDrawElementsIBM(h0.AddrOfPinnedObject(), count, type, indices, primcount, modestride);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiModeDrawElementsIBM(GLenum[] mode, IntPtr count, GLenum type, object indices, GLsizei primcount, GLint modestride)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiModeDrawElementsIBM(GLenum[] mode, IntPtr count, GLenum type, object indices, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiModeDrawElementsIBM(h0.AddrOfPinnedObject(), count, type, h1.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region MultiModeDrawElementsIBM(GLenum[] mode, object count, GLenum type, IntPtr indices, GLsizei primcount, GLint modestride)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiModeDrawElementsIBM(GLenum[] mode, object count, GLenum type, IntPtr indices, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiModeDrawElementsIBM(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), type, indices, primcount, modestride);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region MultiModeDrawElementsIBM(GLenum[] mode, object count, GLenum type, object indices, GLsizei primcount, GLint modestride)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiModeDrawElementsIBM(GLenum[] mode, object count, GLenum type, object indices, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiModeDrawElementsIBM(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), type, h2.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region MultiModeDrawElementsIBM(GLenum[] mode, GLsizei[] count, GLenum type, IntPtr indices, GLsizei primcount, GLint modestride)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiModeDrawElementsIBM(GLenum[] mode, GLsizei[] count, GLenum type, IntPtr indices, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiModeDrawElementsIBM(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), type, indices, primcount, modestride);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region MultiModeDrawElementsIBM(GLenum[] mode, GLsizei[] count, GLenum type, object indices, GLsizei primcount, GLint modestride)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiModeDrawElementsIBM(GLenum[] mode, GLsizei[] count, GLenum type, object indices, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiModeDrawElementsIBM(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), type, h2.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h2.Free();
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ColorPointerListIBM(GLint size, GLenum type, GLint stride, IntPtr pointer, GLint ptrstride)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColorPointerListIBM(GLint size, GLenum type, GLint stride, IntPtr pointer, GLint ptrstride)
        {
            Delegates.glColorPointerListIBM(size, type, stride, pointer, ptrstride);
        }

        #endregion

        #region ColorPointerListIBM(GLint size, GLenum type, GLint stride, object pointer, GLint ptrstride)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColorPointerListIBM(GLint size, GLenum type, GLint stride, object pointer, GLint ptrstride)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glColorPointerListIBM(size, type, stride, h0.AddrOfPinnedObject(), ptrstride);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ColorPointerListIBM(GLint size, GLenum type, GLint stride, IntPtr[] pointer, GLint ptrstride)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColorPointerListIBM(GLint size, GLenum type, GLint stride, IntPtr[] pointer, GLint ptrstride)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glColorPointerListIBM(size, type, stride, h0.AddrOfPinnedObject(), ptrstride);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SecondaryColorPointerListIBM(GLint size, GLenum type, GLint stride, IntPtr pointer, GLint ptrstride)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSecondaryColorPointerListIBM(GLint size, GLenum type, GLint stride, IntPtr pointer, GLint ptrstride)
        {
            Delegates.glSecondaryColorPointerListIBM(size, type, stride, pointer, ptrstride);
        }

        #endregion

        #region SecondaryColorPointerListIBM(GLint size, GLenum type, GLint stride, object pointer, GLint ptrstride)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSecondaryColorPointerListIBM(GLint size, GLenum type, GLint stride, object pointer, GLint ptrstride)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glSecondaryColorPointerListIBM(size, type, stride, h0.AddrOfPinnedObject(), ptrstride);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SecondaryColorPointerListIBM(GLint size, GLenum type, GLint stride, IntPtr[] pointer, GLint ptrstride)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSecondaryColorPointerListIBM(GLint size, GLenum type, GLint stride, IntPtr[] pointer, GLint ptrstride)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glSecondaryColorPointerListIBM(size, type, stride, h0.AddrOfPinnedObject(), ptrstride);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region EdgeFlagPointerListIBM(GLint stride, IntPtr pointer, GLint ptrstride)

        /// <summary>
        /// 
        /// </summary>
        public static         void glEdgeFlagPointerListIBM(GLint stride, IntPtr pointer, GLint ptrstride)
        {
            Delegates.glEdgeFlagPointerListIBM(stride, pointer, ptrstride);
        }

        #endregion

        #region EdgeFlagPointerListIBM(GLint stride, object pointer, GLint ptrstride)

        /// <summary>
        /// 
        /// </summary>
        public static         void glEdgeFlagPointerListIBM(GLint stride, object pointer, GLint ptrstride)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glEdgeFlagPointerListIBM(stride, h0.AddrOfPinnedObject(), ptrstride);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region EdgeFlagPointerListIBM(GLint stride, GLboolean[] pointer, GLint ptrstride)

        /// <summary>
        /// 
        /// </summary>
        public static         void glEdgeFlagPointerListIBM(GLint stride, GLboolean[] pointer, GLint ptrstride)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glEdgeFlagPointerListIBM(stride, h0.AddrOfPinnedObject(), ptrstride);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region FogCoordPointerListIBM(GLenum type, GLint stride, IntPtr pointer, GLint ptrstride)

        /// <summary>
        /// 
        /// </summary>
        public static         void glFogCoordPointerListIBM(GLenum type, GLint stride, IntPtr pointer, GLint ptrstride)
        {
            Delegates.glFogCoordPointerListIBM(type, stride, pointer, ptrstride);
        }

        #endregion

        #region FogCoordPointerListIBM(GLenum type, GLint stride, object pointer, GLint ptrstride)

        /// <summary>
        /// 
        /// </summary>
        public static         void glFogCoordPointerListIBM(GLenum type, GLint stride, object pointer, GLint ptrstride)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glFogCoordPointerListIBM(type, stride, h0.AddrOfPinnedObject(), ptrstride);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region FogCoordPointerListIBM(GLenum type, GLint stride, IntPtr[] pointer, GLint ptrstride)

        /// <summary>
        /// 
        /// </summary>
        public static         void glFogCoordPointerListIBM(GLenum type, GLint stride, IntPtr[] pointer, GLint ptrstride)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glFogCoordPointerListIBM(type, stride, h0.AddrOfPinnedObject(), ptrstride);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region IndexPointerListIBM(GLenum type, GLint stride, IntPtr pointer, GLint ptrstride)

        /// <summary>
        /// 
        /// </summary>
        public static         void glIndexPointerListIBM(GLenum type, GLint stride, IntPtr pointer, GLint ptrstride)
        {
            Delegates.glIndexPointerListIBM(type, stride, pointer, ptrstride);
        }

        #endregion

        #region IndexPointerListIBM(GLenum type, GLint stride, object pointer, GLint ptrstride)

        /// <summary>
        /// 
        /// </summary>
        public static         void glIndexPointerListIBM(GLenum type, GLint stride, object pointer, GLint ptrstride)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glIndexPointerListIBM(type, stride, h0.AddrOfPinnedObject(), ptrstride);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region IndexPointerListIBM(GLenum type, GLint stride, IntPtr[] pointer, GLint ptrstride)

        /// <summary>
        /// 
        /// </summary>
        public static         void glIndexPointerListIBM(GLenum type, GLint stride, IntPtr[] pointer, GLint ptrstride)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glIndexPointerListIBM(type, stride, h0.AddrOfPinnedObject(), ptrstride);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region NormalPointerListIBM(GLenum type, GLint stride, IntPtr pointer, GLint ptrstride)

        /// <summary>
        /// 
        /// </summary>
        public static         void glNormalPointerListIBM(GLenum type, GLint stride, IntPtr pointer, GLint ptrstride)
        {
            Delegates.glNormalPointerListIBM(type, stride, pointer, ptrstride);
        }

        #endregion

        #region NormalPointerListIBM(GLenum type, GLint stride, object pointer, GLint ptrstride)

        /// <summary>
        /// 
        /// </summary>
        public static         void glNormalPointerListIBM(GLenum type, GLint stride, object pointer, GLint ptrstride)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glNormalPointerListIBM(type, stride, h0.AddrOfPinnedObject(), ptrstride);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region NormalPointerListIBM(GLenum type, GLint stride, IntPtr[] pointer, GLint ptrstride)

        /// <summary>
        /// 
        /// </summary>
        public static         void glNormalPointerListIBM(GLenum type, GLint stride, IntPtr[] pointer, GLint ptrstride)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glNormalPointerListIBM(type, stride, h0.AddrOfPinnedObject(), ptrstride);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoordPointerListIBM(GLint size, GLenum type, GLint stride, IntPtr pointer, GLint ptrstride)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoordPointerListIBM(GLint size, GLenum type, GLint stride, IntPtr pointer, GLint ptrstride)
        {
            Delegates.glTexCoordPointerListIBM(size, type, stride, pointer, ptrstride);
        }

        #endregion

        #region TexCoordPointerListIBM(GLint size, GLenum type, GLint stride, object pointer, GLint ptrstride)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoordPointerListIBM(GLint size, GLenum type, GLint stride, object pointer, GLint ptrstride)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoordPointerListIBM(size, type, stride, h0.AddrOfPinnedObject(), ptrstride);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoordPointerListIBM(GLint size, GLenum type, GLint stride, IntPtr[] pointer, GLint ptrstride)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoordPointerListIBM(GLint size, GLenum type, GLint stride, IntPtr[] pointer, GLint ptrstride)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoordPointerListIBM(size, type, stride, h0.AddrOfPinnedObject(), ptrstride);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexPointerListIBM(GLint size, GLenum type, GLint stride, IntPtr pointer, GLint ptrstride)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexPointerListIBM(GLint size, GLenum type, GLint stride, IntPtr pointer, GLint ptrstride)
        {
            Delegates.glVertexPointerListIBM(size, type, stride, pointer, ptrstride);
        }

        #endregion

        #region VertexPointerListIBM(GLint size, GLenum type, GLint stride, object pointer, GLint ptrstride)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexPointerListIBM(GLint size, GLenum type, GLint stride, object pointer, GLint ptrstride)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexPointerListIBM(size, type, stride, h0.AddrOfPinnedObject(), ptrstride);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexPointerListIBM(GLint size, GLenum type, GLint stride, IntPtr[] pointer, GLint ptrstride)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexPointerListIBM(GLint size, GLenum type, GLint stride, IntPtr[] pointer, GLint ptrstride)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexPointerListIBM(size, type, stride, h0.AddrOfPinnedObject(), ptrstride);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TbufferMask3DFX(GLuint mask)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTbufferMask3DFX(GLuint mask)
        {
            Delegates.glTbufferMask3DFX(mask);
        }

        #endregion

        #region SampleMaskEXT(GLclampf value, GLboolean invert)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSampleMaskEXT(GLclampf value, GLboolean invert)
        {
            Delegates.glSampleMaskEXT(value, invert);
        }

        #endregion

        #region SamplePatternEXT(GLenum pattern)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSamplePatternEXT(GLenum pattern)
        {
            Delegates.glSamplePatternEXT(pattern);
        }

        #endregion

        #region TextureColorMaskSGIS(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTextureColorMaskSGIS(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)
        {
            Delegates.glTextureColorMaskSGIS(red, green, blue, alpha);
        }

        #endregion

        #region IglooInterfaceSGIX(GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glIglooInterfaceSGIX(GLenum pname, IntPtr parameters)
        {
            Delegates.glIglooInterfaceSGIX(pname, parameters);
        }

        #endregion

        #region IglooInterfaceSGIX(GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glIglooInterfaceSGIX(GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glIglooInterfaceSGIX(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region DeleteFencesNV(GLsizei n, IntPtr fences)

        /// <summary>
        /// 
        /// </summary>
        public static         void glDeleteFencesNV(GLsizei n, IntPtr fences)
        {
            Delegates.glDeleteFencesNV(n, fences);
        }

        #endregion

        #region DeleteFencesNV(GLsizei n, object fences)

        /// <summary>
        /// 
        /// </summary>
        public static         void glDeleteFencesNV(GLsizei n, object fences)
        {
            GCHandle h0 = GCHandle.Alloc(fences, GCHandleType.Pinned);
            try
            {
                Delegates.glDeleteFencesNV(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region DeleteFencesNV(GLsizei n, GLuint[] fences)

        /// <summary>
        /// 
        /// </summary>
        public static         void glDeleteFencesNV(GLsizei n, GLuint[] fences)
        {
            GCHandle h0 = GCHandle.Alloc(fences, GCHandleType.Pinned);
            try
            {
                Delegates.glDeleteFencesNV(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GenFencesNV(GLsizei n, IntPtr fences)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGenFencesNV(GLsizei n, IntPtr fences)
        {
            Delegates.glGenFencesNV(n, fences);
        }

        #endregion

        #region GenFencesNV(GLsizei n, object fences)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGenFencesNV(GLsizei n, object fences)
        {
            GCHandle h0 = GCHandle.Alloc(fences, GCHandleType.Pinned);
            try
            {
                Delegates.glGenFencesNV(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GenFencesNV(GLsizei n, GLuint[] fences)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGenFencesNV(GLsizei n, GLuint[] fences)
        {
            GCHandle h0 = GCHandle.Alloc(fences, GCHandleType.Pinned);
            try
            {
                Delegates.glGenFencesNV(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region IsFenceNV(GLuint fence)

        /// <summary>
        /// 
        /// </summary>
        public static         GLboolean glIsFenceNV(GLuint fence)
        {
            return Delegates.glIsFenceNV(fence);
        }

        #endregion

        #region TestFenceNV(GLuint fence)

        /// <summary>
        /// 
        /// </summary>
        public static         GLboolean glTestFenceNV(GLuint fence)
        {
            return Delegates.glTestFenceNV(fence);
        }

        #endregion

        #region GetFenceivNV(GLuint fence, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetFenceivNV(GLuint fence, GLenum pname, IntPtr parameters)
        {
            Delegates.glGetFenceivNV(fence, pname, parameters);
        }

        #endregion

        #region GetFenceivNV(GLuint fence, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetFenceivNV(GLuint fence, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetFenceivNV(fence, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetFenceivNV(GLuint fence, GLenum pname, GLint[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetFenceivNV(GLuint fence, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetFenceivNV(fence, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region FinishFenceNV(GLuint fence)

        /// <summary>
        /// 
        /// </summary>
        public static         void glFinishFenceNV(GLuint fence)
        {
            Delegates.glFinishFenceNV(fence);
        }

        #endregion

        #region SetFenceNV(GLuint fence, GLenum condition)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSetFenceNV(GLuint fence, GLenum condition)
        {
            Delegates.glSetFenceNV(fence, condition);
        }

        #endregion

        #region MapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, IntPtr points)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, IntPtr points)
        {
            Delegates.glMapControlPointsNV(target, index, type, ustride, vstride, uorder, vorder, packed, points);
        }

        #endregion

        #region MapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, object points)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, object points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                Delegates.glMapControlPointsNV(target, index, type, ustride, vstride, uorder, vorder, packed, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MapParameterivNV(GLenum target, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMapParameterivNV(GLenum target, GLenum pname, IntPtr parameters)
        {
            Delegates.glMapParameterivNV(target, pname, parameters);
        }

        #endregion

        #region MapParameterivNV(GLenum target, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMapParameterivNV(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glMapParameterivNV(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MapParameterivNV(GLenum target, GLenum pname, GLint[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMapParameterivNV(GLenum target, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glMapParameterivNV(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MapParameterfvNV(GLenum target, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMapParameterfvNV(GLenum target, GLenum pname, IntPtr parameters)
        {
            Delegates.glMapParameterfvNV(target, pname, parameters);
        }

        #endregion

        #region MapParameterfvNV(GLenum target, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMapParameterfvNV(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glMapParameterfvNV(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MapParameterfvNV(GLenum target, GLenum pname, GLfloat[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMapParameterfvNV(GLenum target, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glMapParameterfvNV(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, IntPtr points)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, IntPtr points)
        {
            Delegates.glGetMapControlPointsNV(target, index, type, ustride, vstride, packed, points);
        }

        #endregion

        #region GetMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, object points)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, object points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                Delegates.glGetMapControlPointsNV(target, index, type, ustride, vstride, packed, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetMapParameterivNV(GLenum target, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetMapParameterivNV(GLenum target, GLenum pname, IntPtr parameters)
        {
            Delegates.glGetMapParameterivNV(target, pname, parameters);
        }

        #endregion

        #region GetMapParameterivNV(GLenum target, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetMapParameterivNV(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetMapParameterivNV(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetMapParameterivNV(GLenum target, GLenum pname, GLint[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetMapParameterivNV(GLenum target, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetMapParameterivNV(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetMapParameterfvNV(GLenum target, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetMapParameterfvNV(GLenum target, GLenum pname, IntPtr parameters)
        {
            Delegates.glGetMapParameterfvNV(target, pname, parameters);
        }

        #endregion

        #region GetMapParameterfvNV(GLenum target, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetMapParameterfvNV(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetMapParameterfvNV(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetMapParameterfvNV(GLenum target, GLenum pname, GLfloat[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetMapParameterfvNV(GLenum target, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetMapParameterfvNV(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetMapAttribParameterivNV(GLenum target, GLuint index, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetMapAttribParameterivNV(GLenum target, GLuint index, GLenum pname, IntPtr parameters)
        {
            Delegates.glGetMapAttribParameterivNV(target, index, pname, parameters);
        }

        #endregion

        #region GetMapAttribParameterivNV(GLenum target, GLuint index, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetMapAttribParameterivNV(GLenum target, GLuint index, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetMapAttribParameterivNV(target, index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetMapAttribParameterivNV(GLenum target, GLuint index, GLenum pname, GLint[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetMapAttribParameterivNV(GLenum target, GLuint index, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetMapAttribParameterivNV(target, index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetMapAttribParameterfvNV(GLenum target, GLuint index, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetMapAttribParameterfvNV(GLenum target, GLuint index, GLenum pname, IntPtr parameters)
        {
            Delegates.glGetMapAttribParameterfvNV(target, index, pname, parameters);
        }

        #endregion

        #region GetMapAttribParameterfvNV(GLenum target, GLuint index, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetMapAttribParameterfvNV(GLenum target, GLuint index, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetMapAttribParameterfvNV(target, index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetMapAttribParameterfvNV(GLenum target, GLuint index, GLenum pname, GLfloat[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetMapAttribParameterfvNV(GLenum target, GLuint index, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetMapAttribParameterfvNV(target, index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region EvalMapsNV(GLenum target, GLenum mode)

        /// <summary>
        /// 
        /// </summary>
        public static         void glEvalMapsNV(GLenum target, GLenum mode)
        {
            Delegates.glEvalMapsNV(target, mode);
        }

        #endregion

        #region CombinerStageParameterfvNV(GLenum stage, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glCombinerStageParameterfvNV(GLenum stage, GLenum pname, IntPtr parameters)
        {
            Delegates.glCombinerStageParameterfvNV(stage, pname, parameters);
        }

        #endregion

        #region CombinerStageParameterfvNV(GLenum stage, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glCombinerStageParameterfvNV(GLenum stage, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glCombinerStageParameterfvNV(stage, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region CombinerStageParameterfvNV(GLenum stage, GLenum pname, GLfloat[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glCombinerStageParameterfvNV(GLenum stage, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glCombinerStageParameterfvNV(stage, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetCombinerStageParameterfvNV(GLenum stage, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetCombinerStageParameterfvNV(GLenum stage, GLenum pname, IntPtr parameters)
        {
            Delegates.glGetCombinerStageParameterfvNV(stage, pname, parameters);
        }

        #endregion

        #region GetCombinerStageParameterfvNV(GLenum stage, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetCombinerStageParameterfvNV(GLenum stage, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetCombinerStageParameterfvNV(stage, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetCombinerStageParameterfvNV(GLenum stage, GLenum pname, GLfloat[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetCombinerStageParameterfvNV(GLenum stage, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetCombinerStageParameterfvNV(stage, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region AreProgramsResidentNV(GLsizei n, IntPtr programs, IntPtr residences)

        /// <summary>
        /// 
        /// </summary>
        public static         GLboolean glAreProgramsResidentNV(GLsizei n, IntPtr programs, IntPtr residences)
        {
            return Delegates.glAreProgramsResidentNV(n, programs, residences);
        }

        #endregion

        #region AreProgramsResidentNV(GLsizei n, IntPtr programs, object residences)

        /// <summary>
        /// 
        /// </summary>
        public static         GLboolean glAreProgramsResidentNV(GLsizei n, IntPtr programs, object residences)
        {
            GCHandle h0 = GCHandle.Alloc(residences, GCHandleType.Pinned);
            try
            {
                return Delegates.glAreProgramsResidentNV(n, programs, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region AreProgramsResidentNV(GLsizei n, IntPtr programs, GLboolean[] residences)

        /// <summary>
        /// 
        /// </summary>
        public static         GLboolean glAreProgramsResidentNV(GLsizei n, IntPtr programs, GLboolean[] residences)
        {
            GCHandle h0 = GCHandle.Alloc(residences, GCHandleType.Pinned);
            try
            {
                return Delegates.glAreProgramsResidentNV(n, programs, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region AreProgramsResidentNV(GLsizei n, object programs, IntPtr residences)

        /// <summary>
        /// 
        /// </summary>
        public static         GLboolean glAreProgramsResidentNV(GLsizei n, object programs, IntPtr residences)
        {
            GCHandle h0 = GCHandle.Alloc(programs, GCHandleType.Pinned);
            try
            {
                return Delegates.glAreProgramsResidentNV(n, h0.AddrOfPinnedObject(), residences);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region AreProgramsResidentNV(GLsizei n, object programs, object residences)

        /// <summary>
        /// 
        /// </summary>
        public static         GLboolean glAreProgramsResidentNV(GLsizei n, object programs, object residences)
        {
            GCHandle h0 = GCHandle.Alloc(programs, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(residences, GCHandleType.Pinned);
            try
            {
                return Delegates.glAreProgramsResidentNV(n, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region AreProgramsResidentNV(GLsizei n, object programs, GLboolean[] residences)

        /// <summary>
        /// 
        /// </summary>
        public static         GLboolean glAreProgramsResidentNV(GLsizei n, object programs, GLboolean[] residences)
        {
            GCHandle h0 = GCHandle.Alloc(programs, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(residences, GCHandleType.Pinned);
            try
            {
                return Delegates.glAreProgramsResidentNV(n, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region AreProgramsResidentNV(GLsizei n, GLuint[] programs, IntPtr residences)

        /// <summary>
        /// 
        /// </summary>
        public static         GLboolean glAreProgramsResidentNV(GLsizei n, GLuint[] programs, IntPtr residences)
        {
            GCHandle h0 = GCHandle.Alloc(programs, GCHandleType.Pinned);
            try
            {
                return Delegates.glAreProgramsResidentNV(n, h0.AddrOfPinnedObject(), residences);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region AreProgramsResidentNV(GLsizei n, GLuint[] programs, object residences)

        /// <summary>
        /// 
        /// </summary>
        public static         GLboolean glAreProgramsResidentNV(GLsizei n, GLuint[] programs, object residences)
        {
            GCHandle h0 = GCHandle.Alloc(programs, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(residences, GCHandleType.Pinned);
            try
            {
                return Delegates.glAreProgramsResidentNV(n, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region AreProgramsResidentNV(GLsizei n, GLuint[] programs, GLboolean[] residences)

        /// <summary>
        /// 
        /// </summary>
        public static         GLboolean glAreProgramsResidentNV(GLsizei n, GLuint[] programs, GLboolean[] residences)
        {
            GCHandle h0 = GCHandle.Alloc(programs, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(residences, GCHandleType.Pinned);
            try
            {
                return Delegates.glAreProgramsResidentNV(n, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region BindProgramNV(GLenum target, GLuint id)

        /// <summary>
        /// 
        /// </summary>
        public static         void glBindProgramNV(GLenum target, GLuint id)
        {
            Delegates.glBindProgramNV(target, id);
        }

        #endregion

        #region DeleteProgramsNV(GLsizei n, IntPtr programs)

        /// <summary>
        /// 
        /// </summary>
        public static         void glDeleteProgramsNV(GLsizei n, IntPtr programs)
        {
            Delegates.glDeleteProgramsNV(n, programs);
        }

        #endregion

        #region DeleteProgramsNV(GLsizei n, object programs)

        /// <summary>
        /// 
        /// </summary>
        public static         void glDeleteProgramsNV(GLsizei n, object programs)
        {
            GCHandle h0 = GCHandle.Alloc(programs, GCHandleType.Pinned);
            try
            {
                Delegates.glDeleteProgramsNV(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region DeleteProgramsNV(GLsizei n, GLuint[] programs)

        /// <summary>
        /// 
        /// </summary>
        public static         void glDeleteProgramsNV(GLsizei n, GLuint[] programs)
        {
            GCHandle h0 = GCHandle.Alloc(programs, GCHandleType.Pinned);
            try
            {
                Delegates.glDeleteProgramsNV(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ExecuteProgramNV(GLenum target, GLuint id, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glExecuteProgramNV(GLenum target, GLuint id, IntPtr parameters)
        {
            Delegates.glExecuteProgramNV(target, id, parameters);
        }

        #endregion

        #region ExecuteProgramNV(GLenum target, GLuint id, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glExecuteProgramNV(GLenum target, GLuint id, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glExecuteProgramNV(target, id, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ExecuteProgramNV(GLenum target, GLuint id, GLfloat[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glExecuteProgramNV(GLenum target, GLuint id, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glExecuteProgramNV(target, id, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GenProgramsNV(GLsizei n, IntPtr programs)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGenProgramsNV(GLsizei n, IntPtr programs)
        {
            Delegates.glGenProgramsNV(n, programs);
        }

        #endregion

        #region GenProgramsNV(GLsizei n, object programs)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGenProgramsNV(GLsizei n, object programs)
        {
            GCHandle h0 = GCHandle.Alloc(programs, GCHandleType.Pinned);
            try
            {
                Delegates.glGenProgramsNV(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GenProgramsNV(GLsizei n, GLuint[] programs)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGenProgramsNV(GLsizei n, GLuint[] programs)
        {
            GCHandle h0 = GCHandle.Alloc(programs, GCHandleType.Pinned);
            try
            {
                Delegates.glGenProgramsNV(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetProgramParameterdvNV(GLenum target, GLuint index, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetProgramParameterdvNV(GLenum target, GLuint index, GLenum pname, IntPtr parameters)
        {
            Delegates.glGetProgramParameterdvNV(target, index, pname, parameters);
        }

        #endregion

        #region GetProgramParameterdvNV(GLenum target, GLuint index, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetProgramParameterdvNV(GLenum target, GLuint index, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramParameterdvNV(target, index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetProgramParameterdvNV(GLenum target, GLuint index, GLenum pname, GLdouble[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetProgramParameterdvNV(GLenum target, GLuint index, GLenum pname, GLdouble[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramParameterdvNV(target, index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetProgramParameterfvNV(GLenum target, GLuint index, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetProgramParameterfvNV(GLenum target, GLuint index, GLenum pname, IntPtr parameters)
        {
            Delegates.glGetProgramParameterfvNV(target, index, pname, parameters);
        }

        #endregion

        #region GetProgramParameterfvNV(GLenum target, GLuint index, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetProgramParameterfvNV(GLenum target, GLuint index, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramParameterfvNV(target, index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetProgramParameterfvNV(GLenum target, GLuint index, GLenum pname, GLfloat[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetProgramParameterfvNV(GLenum target, GLuint index, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramParameterfvNV(target, index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetProgramivNV(GLuint id, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetProgramivNV(GLuint id, GLenum pname, IntPtr parameters)
        {
            Delegates.glGetProgramivNV(id, pname, parameters);
        }

        #endregion

        #region GetProgramivNV(GLuint id, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetProgramivNV(GLuint id, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramivNV(id, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetProgramivNV(GLuint id, GLenum pname, GLint[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetProgramivNV(GLuint id, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramivNV(id, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetProgramStringNV(GLuint id, GLenum pname, IntPtr program)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetProgramStringNV(GLuint id, GLenum pname, IntPtr program)
        {
            Delegates.glGetProgramStringNV(id, pname, program);
        }

        #endregion

        #region GetProgramStringNV(GLuint id, GLenum pname, object program)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetProgramStringNV(GLuint id, GLenum pname, object program)
        {
            GCHandle h0 = GCHandle.Alloc(program, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramStringNV(id, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetProgramStringNV(GLuint id, GLenum pname, GLubyte[] program)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetProgramStringNV(GLuint id, GLenum pname, GLubyte[] program)
        {
            GCHandle h0 = GCHandle.Alloc(program, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramStringNV(id, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetTrackMatrixivNV(GLenum target, GLuint address, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetTrackMatrixivNV(GLenum target, GLuint address, GLenum pname, IntPtr parameters)
        {
            Delegates.glGetTrackMatrixivNV(target, address, pname, parameters);
        }

        #endregion

        #region GetTrackMatrixivNV(GLenum target, GLuint address, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetTrackMatrixivNV(GLenum target, GLuint address, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetTrackMatrixivNV(target, address, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetTrackMatrixivNV(GLenum target, GLuint address, GLenum pname, GLint[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetTrackMatrixivNV(GLenum target, GLuint address, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetTrackMatrixivNV(target, address, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetVertexAttribdvNV(GLuint index, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetVertexAttribdvNV(GLuint index, GLenum pname, IntPtr parameters)
        {
            Delegates.glGetVertexAttribdvNV(index, pname, parameters);
        }

        #endregion

        #region GetVertexAttribdvNV(GLuint index, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetVertexAttribdvNV(GLuint index, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVertexAttribdvNV(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetVertexAttribdvNV(GLuint index, GLenum pname, GLdouble[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetVertexAttribdvNV(GLuint index, GLenum pname, GLdouble[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVertexAttribdvNV(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetVertexAttribfvNV(GLuint index, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetVertexAttribfvNV(GLuint index, GLenum pname, IntPtr parameters)
        {
            Delegates.glGetVertexAttribfvNV(index, pname, parameters);
        }

        #endregion

        #region GetVertexAttribfvNV(GLuint index, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetVertexAttribfvNV(GLuint index, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVertexAttribfvNV(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetVertexAttribfvNV(GLuint index, GLenum pname, GLfloat[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetVertexAttribfvNV(GLuint index, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVertexAttribfvNV(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetVertexAttribivNV(GLuint index, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetVertexAttribivNV(GLuint index, GLenum pname, IntPtr parameters)
        {
            Delegates.glGetVertexAttribivNV(index, pname, parameters);
        }

        #endregion

        #region GetVertexAttribivNV(GLuint index, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetVertexAttribivNV(GLuint index, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVertexAttribivNV(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetVertexAttribivNV(GLuint index, GLenum pname, GLint[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetVertexAttribivNV(GLuint index, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVertexAttribivNV(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetVertexAttribPointervNV(GLuint index, GLenum pname, IntPtr pointer)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetVertexAttribPointervNV(GLuint index, GLenum pname, IntPtr pointer)
        {
            Delegates.glGetVertexAttribPointervNV(index, pname, pointer);
        }

        #endregion

        #region GetVertexAttribPointervNV(GLuint index, GLenum pname, object pointer)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetVertexAttribPointervNV(GLuint index, GLenum pname, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVertexAttribPointervNV(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetVertexAttribPointervNV(GLuint index, GLenum pname, IntPtr[] pointer)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetVertexAttribPointervNV(GLuint index, GLenum pname, IntPtr[] pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVertexAttribPointervNV(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region IsProgramNV(GLuint id)

        /// <summary>
        /// 
        /// </summary>
        public static         GLboolean glIsProgramNV(GLuint id)
        {
            return Delegates.glIsProgramNV(id);
        }

        #endregion

        #region LoadProgramNV(GLenum target, GLuint id, GLsizei len, IntPtr program)

        /// <summary>
        /// 
        /// </summary>
        public static         void glLoadProgramNV(GLenum target, GLuint id, GLsizei len, IntPtr program)
        {
            Delegates.glLoadProgramNV(target, id, len, program);
        }

        #endregion

        #region LoadProgramNV(GLenum target, GLuint id, GLsizei len, object program)

        /// <summary>
        /// 
        /// </summary>
        public static         void glLoadProgramNV(GLenum target, GLuint id, GLsizei len, object program)
        {
            GCHandle h0 = GCHandle.Alloc(program, GCHandleType.Pinned);
            try
            {
                Delegates.glLoadProgramNV(target, id, len, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region LoadProgramNV(GLenum target, GLuint id, GLsizei len, GLubyte[] program)

        /// <summary>
        /// 
        /// </summary>
        public static         void glLoadProgramNV(GLenum target, GLuint id, GLsizei len, GLubyte[] program)
        {
            GCHandle h0 = GCHandle.Alloc(program, GCHandleType.Pinned);
            try
            {
                Delegates.glLoadProgramNV(target, id, len, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ProgramParameter4dNV(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)

        /// <summary>
        /// 
        /// </summary>
        public static         void glProgramParameter4dNV(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
        {
            Delegates.glProgramParameter4dNV(target, index, x, y, z, w);
        }

        #endregion

        #region ProgramParameter4dvNV(GLenum target, GLuint index, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glProgramParameter4dvNV(GLenum target, GLuint index, IntPtr v)
        {
            Delegates.glProgramParameter4dvNV(target, index, v);
        }

        #endregion

        #region ProgramParameter4dvNV(GLenum target, GLuint index, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glProgramParameter4dvNV(GLenum target, GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramParameter4dvNV(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ProgramParameter4dvNV(GLenum target, GLuint index, GLdouble[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glProgramParameter4dvNV(GLenum target, GLuint index, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramParameter4dvNV(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ProgramParameter4fNV(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)

        /// <summary>
        /// 
        /// </summary>
        public static         void glProgramParameter4fNV(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
        {
            Delegates.glProgramParameter4fNV(target, index, x, y, z, w);
        }

        #endregion

        #region ProgramParameter4fvNV(GLenum target, GLuint index, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glProgramParameter4fvNV(GLenum target, GLuint index, IntPtr v)
        {
            Delegates.glProgramParameter4fvNV(target, index, v);
        }

        #endregion

        #region ProgramParameter4fvNV(GLenum target, GLuint index, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glProgramParameter4fvNV(GLenum target, GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramParameter4fvNV(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ProgramParameter4fvNV(GLenum target, GLuint index, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glProgramParameter4fvNV(GLenum target, GLuint index, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramParameter4fvNV(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ProgramParameters4dvNV(GLenum target, GLuint index, GLuint count, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glProgramParameters4dvNV(GLenum target, GLuint index, GLuint count, IntPtr v)
        {
            Delegates.glProgramParameters4dvNV(target, index, count, v);
        }

        #endregion

        #region ProgramParameters4dvNV(GLenum target, GLuint index, GLuint count, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glProgramParameters4dvNV(GLenum target, GLuint index, GLuint count, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramParameters4dvNV(target, index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ProgramParameters4dvNV(GLenum target, GLuint index, GLuint count, GLdouble[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glProgramParameters4dvNV(GLenum target, GLuint index, GLuint count, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramParameters4dvNV(target, index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ProgramParameters4fvNV(GLenum target, GLuint index, GLuint count, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glProgramParameters4fvNV(GLenum target, GLuint index, GLuint count, IntPtr v)
        {
            Delegates.glProgramParameters4fvNV(target, index, count, v);
        }

        #endregion

        #region ProgramParameters4fvNV(GLenum target, GLuint index, GLuint count, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glProgramParameters4fvNV(GLenum target, GLuint index, GLuint count, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramParameters4fvNV(target, index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ProgramParameters4fvNV(GLenum target, GLuint index, GLuint count, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glProgramParameters4fvNV(GLenum target, GLuint index, GLuint count, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramParameters4fvNV(target, index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region RequestResidentProgramsNV(GLsizei n, IntPtr programs)

        /// <summary>
        /// 
        /// </summary>
        public static         void glRequestResidentProgramsNV(GLsizei n, IntPtr programs)
        {
            Delegates.glRequestResidentProgramsNV(n, programs);
        }

        #endregion

        #region RequestResidentProgramsNV(GLsizei n, object programs)

        /// <summary>
        /// 
        /// </summary>
        public static         void glRequestResidentProgramsNV(GLsizei n, object programs)
        {
            GCHandle h0 = GCHandle.Alloc(programs, GCHandleType.Pinned);
            try
            {
                Delegates.glRequestResidentProgramsNV(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region RequestResidentProgramsNV(GLsizei n, GLuint[] programs)

        /// <summary>
        /// 
        /// </summary>
        public static         void glRequestResidentProgramsNV(GLsizei n, GLuint[] programs)
        {
            GCHandle h0 = GCHandle.Alloc(programs, GCHandleType.Pinned);
            try
            {
                Delegates.glRequestResidentProgramsNV(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TrackMatrixNV(GLenum target, GLuint address, GLenum matrix, GLenum transform)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTrackMatrixNV(GLenum target, GLuint address, GLenum matrix, GLenum transform)
        {
            Delegates.glTrackMatrixNV(target, address, matrix, transform);
        }

        #endregion

        #region VertexAttribPointerNV(GLuint index, GLint fsize, GLenum type, GLsizei stride, IntPtr pointer)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttribPointerNV(GLuint index, GLint fsize, GLenum type, GLsizei stride, IntPtr pointer)
        {
            Delegates.glVertexAttribPointerNV(index, fsize, type, stride, pointer);
        }

        #endregion

        #region VertexAttribPointerNV(GLuint index, GLint fsize, GLenum type, GLsizei stride, object pointer)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttribPointerNV(GLuint index, GLint fsize, GLenum type, GLsizei stride, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribPointerNV(index, fsize, type, stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib1dNV(GLuint index, GLdouble x)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib1dNV(GLuint index, GLdouble x)
        {
            Delegates.glVertexAttrib1dNV(index, x);
        }

        #endregion

        #region VertexAttrib1dvNV(GLuint index, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib1dvNV(GLuint index, IntPtr v)
        {
            Delegates.glVertexAttrib1dvNV(index, v);
        }

        #endregion

        #region VertexAttrib1dvNV(GLuint index, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib1dvNV(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib1dvNV(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib1dvNV(GLuint index, GLdouble[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib1dvNV(GLuint index, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib1dvNV(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib1fNV(GLuint index, GLfloat x)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib1fNV(GLuint index, GLfloat x)
        {
            Delegates.glVertexAttrib1fNV(index, x);
        }

        #endregion

        #region VertexAttrib1fvNV(GLuint index, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib1fvNV(GLuint index, IntPtr v)
        {
            Delegates.glVertexAttrib1fvNV(index, v);
        }

        #endregion

        #region VertexAttrib1fvNV(GLuint index, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib1fvNV(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib1fvNV(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib1fvNV(GLuint index, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib1fvNV(GLuint index, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib1fvNV(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib1sNV(GLuint index, GLshort x)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib1sNV(GLuint index, GLshort x)
        {
            Delegates.glVertexAttrib1sNV(index, x);
        }

        #endregion

        #region VertexAttrib1svNV(GLuint index, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib1svNV(GLuint index, IntPtr v)
        {
            Delegates.glVertexAttrib1svNV(index, v);
        }

        #endregion

        #region VertexAttrib1svNV(GLuint index, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib1svNV(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib1svNV(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib1svNV(GLuint index, GLshort[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib1svNV(GLuint index, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib1svNV(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib2dNV(GLuint index, GLdouble x, GLdouble y)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib2dNV(GLuint index, GLdouble x, GLdouble y)
        {
            Delegates.glVertexAttrib2dNV(index, x, y);
        }

        #endregion

        #region VertexAttrib2dvNV(GLuint index, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib2dvNV(GLuint index, IntPtr v)
        {
            Delegates.glVertexAttrib2dvNV(index, v);
        }

        #endregion

        #region VertexAttrib2dvNV(GLuint index, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib2dvNV(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib2dvNV(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib2dvNV(GLuint index, GLdouble[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib2dvNV(GLuint index, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib2dvNV(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib2fNV(GLuint index, GLfloat x, GLfloat y)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib2fNV(GLuint index, GLfloat x, GLfloat y)
        {
            Delegates.glVertexAttrib2fNV(index, x, y);
        }

        #endregion

        #region VertexAttrib2fvNV(GLuint index, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib2fvNV(GLuint index, IntPtr v)
        {
            Delegates.glVertexAttrib2fvNV(index, v);
        }

        #endregion

        #region VertexAttrib2fvNV(GLuint index, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib2fvNV(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib2fvNV(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib2fvNV(GLuint index, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib2fvNV(GLuint index, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib2fvNV(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib2sNV(GLuint index, GLshort x, GLshort y)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib2sNV(GLuint index, GLshort x, GLshort y)
        {
            Delegates.glVertexAttrib2sNV(index, x, y);
        }

        #endregion

        #region VertexAttrib2svNV(GLuint index, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib2svNV(GLuint index, IntPtr v)
        {
            Delegates.glVertexAttrib2svNV(index, v);
        }

        #endregion

        #region VertexAttrib2svNV(GLuint index, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib2svNV(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib2svNV(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib2svNV(GLuint index, GLshort[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib2svNV(GLuint index, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib2svNV(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib3dNV(GLuint index, GLdouble x, GLdouble y, GLdouble z)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib3dNV(GLuint index, GLdouble x, GLdouble y, GLdouble z)
        {
            Delegates.glVertexAttrib3dNV(index, x, y, z);
        }

        #endregion

        #region VertexAttrib3dvNV(GLuint index, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib3dvNV(GLuint index, IntPtr v)
        {
            Delegates.glVertexAttrib3dvNV(index, v);
        }

        #endregion

        #region VertexAttrib3dvNV(GLuint index, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib3dvNV(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib3dvNV(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib3dvNV(GLuint index, GLdouble[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib3dvNV(GLuint index, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib3dvNV(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib3fNV(GLuint index, GLfloat x, GLfloat y, GLfloat z)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib3fNV(GLuint index, GLfloat x, GLfloat y, GLfloat z)
        {
            Delegates.glVertexAttrib3fNV(index, x, y, z);
        }

        #endregion

        #region VertexAttrib3fvNV(GLuint index, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib3fvNV(GLuint index, IntPtr v)
        {
            Delegates.glVertexAttrib3fvNV(index, v);
        }

        #endregion

        #region VertexAttrib3fvNV(GLuint index, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib3fvNV(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib3fvNV(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib3fvNV(GLuint index, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib3fvNV(GLuint index, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib3fvNV(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib3sNV(GLuint index, GLshort x, GLshort y, GLshort z)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib3sNV(GLuint index, GLshort x, GLshort y, GLshort z)
        {
            Delegates.glVertexAttrib3sNV(index, x, y, z);
        }

        #endregion

        #region VertexAttrib3svNV(GLuint index, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib3svNV(GLuint index, IntPtr v)
        {
            Delegates.glVertexAttrib3svNV(index, v);
        }

        #endregion

        #region VertexAttrib3svNV(GLuint index, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib3svNV(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib3svNV(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib3svNV(GLuint index, GLshort[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib3svNV(GLuint index, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib3svNV(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4dNV(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4dNV(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
        {
            Delegates.glVertexAttrib4dNV(index, x, y, z, w);
        }

        #endregion

        #region VertexAttrib4dvNV(GLuint index, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4dvNV(GLuint index, IntPtr v)
        {
            Delegates.glVertexAttrib4dvNV(index, v);
        }

        #endregion

        #region VertexAttrib4dvNV(GLuint index, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4dvNV(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4dvNV(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4dvNV(GLuint index, GLdouble[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4dvNV(GLuint index, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4dvNV(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4fNV(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4fNV(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
        {
            Delegates.glVertexAttrib4fNV(index, x, y, z, w);
        }

        #endregion

        #region VertexAttrib4fvNV(GLuint index, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4fvNV(GLuint index, IntPtr v)
        {
            Delegates.glVertexAttrib4fvNV(index, v);
        }

        #endregion

        #region VertexAttrib4fvNV(GLuint index, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4fvNV(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4fvNV(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4fvNV(GLuint index, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4fvNV(GLuint index, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4fvNV(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4sNV(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4sNV(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)
        {
            Delegates.glVertexAttrib4sNV(index, x, y, z, w);
        }

        #endregion

        #region VertexAttrib4svNV(GLuint index, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4svNV(GLuint index, IntPtr v)
        {
            Delegates.glVertexAttrib4svNV(index, v);
        }

        #endregion

        #region VertexAttrib4svNV(GLuint index, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4svNV(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4svNV(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4svNV(GLuint index, GLshort[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4svNV(GLuint index, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4svNV(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4ubNV(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4ubNV(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)
        {
            Delegates.glVertexAttrib4ubNV(index, x, y, z, w);
        }

        #endregion

        #region VertexAttrib4ubvNV(GLuint index, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4ubvNV(GLuint index, IntPtr v)
        {
            Delegates.glVertexAttrib4ubvNV(index, v);
        }

        #endregion

        #region VertexAttrib4ubvNV(GLuint index, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4ubvNV(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4ubvNV(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4ubvNV(GLuint index, GLubyte[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4ubvNV(GLuint index, GLubyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4ubvNV(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttribs1dvNV(GLuint index, GLsizei count, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttribs1dvNV(GLuint index, GLsizei count, IntPtr v)
        {
            Delegates.glVertexAttribs1dvNV(index, count, v);
        }

        #endregion

        #region VertexAttribs1dvNV(GLuint index, GLsizei count, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttribs1dvNV(GLuint index, GLsizei count, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribs1dvNV(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttribs1dvNV(GLuint index, GLsizei count, GLdouble[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttribs1dvNV(GLuint index, GLsizei count, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribs1dvNV(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttribs1fvNV(GLuint index, GLsizei count, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttribs1fvNV(GLuint index, GLsizei count, IntPtr v)
        {
            Delegates.glVertexAttribs1fvNV(index, count, v);
        }

        #endregion

        #region VertexAttribs1fvNV(GLuint index, GLsizei count, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttribs1fvNV(GLuint index, GLsizei count, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribs1fvNV(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttribs1fvNV(GLuint index, GLsizei count, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttribs1fvNV(GLuint index, GLsizei count, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribs1fvNV(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttribs1svNV(GLuint index, GLsizei count, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttribs1svNV(GLuint index, GLsizei count, IntPtr v)
        {
            Delegates.glVertexAttribs1svNV(index, count, v);
        }

        #endregion

        #region VertexAttribs1svNV(GLuint index, GLsizei count, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttribs1svNV(GLuint index, GLsizei count, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribs1svNV(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttribs1svNV(GLuint index, GLsizei count, GLshort[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttribs1svNV(GLuint index, GLsizei count, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribs1svNV(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttribs2dvNV(GLuint index, GLsizei count, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttribs2dvNV(GLuint index, GLsizei count, IntPtr v)
        {
            Delegates.glVertexAttribs2dvNV(index, count, v);
        }

        #endregion

        #region VertexAttribs2dvNV(GLuint index, GLsizei count, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttribs2dvNV(GLuint index, GLsizei count, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribs2dvNV(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttribs2dvNV(GLuint index, GLsizei count, GLdouble[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttribs2dvNV(GLuint index, GLsizei count, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribs2dvNV(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttribs2fvNV(GLuint index, GLsizei count, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttribs2fvNV(GLuint index, GLsizei count, IntPtr v)
        {
            Delegates.glVertexAttribs2fvNV(index, count, v);
        }

        #endregion

        #region VertexAttribs2fvNV(GLuint index, GLsizei count, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttribs2fvNV(GLuint index, GLsizei count, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribs2fvNV(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttribs2fvNV(GLuint index, GLsizei count, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttribs2fvNV(GLuint index, GLsizei count, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribs2fvNV(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttribs2svNV(GLuint index, GLsizei count, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttribs2svNV(GLuint index, GLsizei count, IntPtr v)
        {
            Delegates.glVertexAttribs2svNV(index, count, v);
        }

        #endregion

        #region VertexAttribs2svNV(GLuint index, GLsizei count, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttribs2svNV(GLuint index, GLsizei count, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribs2svNV(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttribs2svNV(GLuint index, GLsizei count, GLshort[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttribs2svNV(GLuint index, GLsizei count, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribs2svNV(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttribs3dvNV(GLuint index, GLsizei count, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttribs3dvNV(GLuint index, GLsizei count, IntPtr v)
        {
            Delegates.glVertexAttribs3dvNV(index, count, v);
        }

        #endregion

        #region VertexAttribs3dvNV(GLuint index, GLsizei count, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttribs3dvNV(GLuint index, GLsizei count, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribs3dvNV(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttribs3dvNV(GLuint index, GLsizei count, GLdouble[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttribs3dvNV(GLuint index, GLsizei count, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribs3dvNV(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttribs3fvNV(GLuint index, GLsizei count, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttribs3fvNV(GLuint index, GLsizei count, IntPtr v)
        {
            Delegates.glVertexAttribs3fvNV(index, count, v);
        }

        #endregion

        #region VertexAttribs3fvNV(GLuint index, GLsizei count, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttribs3fvNV(GLuint index, GLsizei count, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribs3fvNV(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttribs3fvNV(GLuint index, GLsizei count, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttribs3fvNV(GLuint index, GLsizei count, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribs3fvNV(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttribs3svNV(GLuint index, GLsizei count, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttribs3svNV(GLuint index, GLsizei count, IntPtr v)
        {
            Delegates.glVertexAttribs3svNV(index, count, v);
        }

        #endregion

        #region VertexAttribs3svNV(GLuint index, GLsizei count, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttribs3svNV(GLuint index, GLsizei count, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribs3svNV(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttribs3svNV(GLuint index, GLsizei count, GLshort[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttribs3svNV(GLuint index, GLsizei count, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribs3svNV(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttribs4dvNV(GLuint index, GLsizei count, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttribs4dvNV(GLuint index, GLsizei count, IntPtr v)
        {
            Delegates.glVertexAttribs4dvNV(index, count, v);
        }

        #endregion

        #region VertexAttribs4dvNV(GLuint index, GLsizei count, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttribs4dvNV(GLuint index, GLsizei count, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribs4dvNV(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttribs4dvNV(GLuint index, GLsizei count, GLdouble[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttribs4dvNV(GLuint index, GLsizei count, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribs4dvNV(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttribs4fvNV(GLuint index, GLsizei count, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttribs4fvNV(GLuint index, GLsizei count, IntPtr v)
        {
            Delegates.glVertexAttribs4fvNV(index, count, v);
        }

        #endregion

        #region VertexAttribs4fvNV(GLuint index, GLsizei count, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttribs4fvNV(GLuint index, GLsizei count, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribs4fvNV(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttribs4fvNV(GLuint index, GLsizei count, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttribs4fvNV(GLuint index, GLsizei count, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribs4fvNV(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttribs4svNV(GLuint index, GLsizei count, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttribs4svNV(GLuint index, GLsizei count, IntPtr v)
        {
            Delegates.glVertexAttribs4svNV(index, count, v);
        }

        #endregion

        #region VertexAttribs4svNV(GLuint index, GLsizei count, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttribs4svNV(GLuint index, GLsizei count, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribs4svNV(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttribs4svNV(GLuint index, GLsizei count, GLshort[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttribs4svNV(GLuint index, GLsizei count, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribs4svNV(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttribs4ubvNV(GLuint index, GLsizei count, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttribs4ubvNV(GLuint index, GLsizei count, IntPtr v)
        {
            Delegates.glVertexAttribs4ubvNV(index, count, v);
        }

        #endregion

        #region VertexAttribs4ubvNV(GLuint index, GLsizei count, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttribs4ubvNV(GLuint index, GLsizei count, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribs4ubvNV(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttribs4ubvNV(GLuint index, GLsizei count, GLubyte[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttribs4ubvNV(GLuint index, GLsizei count, GLubyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribs4ubvNV(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexBumpParameterivATI(GLenum pname, IntPtr param)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexBumpParameterivATI(GLenum pname, IntPtr param)
        {
            Delegates.glTexBumpParameterivATI(pname, param);
        }

        #endregion

        #region TexBumpParameterivATI(GLenum pname, object param)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexBumpParameterivATI(GLenum pname, object param)
        {
            GCHandle h0 = GCHandle.Alloc(param, GCHandleType.Pinned);
            try
            {
                Delegates.glTexBumpParameterivATI(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexBumpParameterivATI(GLenum pname, GLint[] param)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexBumpParameterivATI(GLenum pname, GLint[] param)
        {
            GCHandle h0 = GCHandle.Alloc(param, GCHandleType.Pinned);
            try
            {
                Delegates.glTexBumpParameterivATI(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexBumpParameterfvATI(GLenum pname, IntPtr param)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexBumpParameterfvATI(GLenum pname, IntPtr param)
        {
            Delegates.glTexBumpParameterfvATI(pname, param);
        }

        #endregion

        #region TexBumpParameterfvATI(GLenum pname, object param)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexBumpParameterfvATI(GLenum pname, object param)
        {
            GCHandle h0 = GCHandle.Alloc(param, GCHandleType.Pinned);
            try
            {
                Delegates.glTexBumpParameterfvATI(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexBumpParameterfvATI(GLenum pname, GLfloat[] param)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexBumpParameterfvATI(GLenum pname, GLfloat[] param)
        {
            GCHandle h0 = GCHandle.Alloc(param, GCHandleType.Pinned);
            try
            {
                Delegates.glTexBumpParameterfvATI(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetTexBumpParameterivATI(GLenum pname, IntPtr param)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetTexBumpParameterivATI(GLenum pname, IntPtr param)
        {
            Delegates.glGetTexBumpParameterivATI(pname, param);
        }

        #endregion

        #region GetTexBumpParameterivATI(GLenum pname, object param)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetTexBumpParameterivATI(GLenum pname, object param)
        {
            GCHandle h0 = GCHandle.Alloc(param, GCHandleType.Pinned);
            try
            {
                Delegates.glGetTexBumpParameterivATI(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetTexBumpParameterivATI(GLenum pname, GLint[] param)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetTexBumpParameterivATI(GLenum pname, GLint[] param)
        {
            GCHandle h0 = GCHandle.Alloc(param, GCHandleType.Pinned);
            try
            {
                Delegates.glGetTexBumpParameterivATI(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetTexBumpParameterfvATI(GLenum pname, IntPtr param)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetTexBumpParameterfvATI(GLenum pname, IntPtr param)
        {
            Delegates.glGetTexBumpParameterfvATI(pname, param);
        }

        #endregion

        #region GetTexBumpParameterfvATI(GLenum pname, object param)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetTexBumpParameterfvATI(GLenum pname, object param)
        {
            GCHandle h0 = GCHandle.Alloc(param, GCHandleType.Pinned);
            try
            {
                Delegates.glGetTexBumpParameterfvATI(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetTexBumpParameterfvATI(GLenum pname, GLfloat[] param)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetTexBumpParameterfvATI(GLenum pname, GLfloat[] param)
        {
            GCHandle h0 = GCHandle.Alloc(param, GCHandleType.Pinned);
            try
            {
                Delegates.glGetTexBumpParameterfvATI(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GenFragmentShadersATI(GLuint range)

        /// <summary>
        /// 
        /// </summary>
        public static         GLuint glGenFragmentShadersATI(GLuint range)
        {
            return Delegates.glGenFragmentShadersATI(range);
        }

        #endregion

        #region BindFragmentShaderATI(GLuint id)

        /// <summary>
        /// 
        /// </summary>
        public static         void glBindFragmentShaderATI(GLuint id)
        {
            Delegates.glBindFragmentShaderATI(id);
        }

        #endregion

        #region DeleteFragmentShaderATI(GLuint id)

        /// <summary>
        /// 
        /// </summary>
        public static         void glDeleteFragmentShaderATI(GLuint id)
        {
            Delegates.glDeleteFragmentShaderATI(id);
        }

        #endregion

        #region BeginFragmentShaderATI()

        /// <summary>
        /// 
        /// </summary>
        public static         void glBeginFragmentShaderATI()
        {
            Delegates.glBeginFragmentShaderATI();
        }

        #endregion

        #region EndFragmentShaderATI()

        /// <summary>
        /// 
        /// </summary>
        public static         void glEndFragmentShaderATI()
        {
            Delegates.glEndFragmentShaderATI();
        }

        #endregion

        #region PassTexCoordATI(GLuint dst, GLuint coord, GLenum swizzle)

        /// <summary>
        /// 
        /// </summary>
        public static         void glPassTexCoordATI(GLuint dst, GLuint coord, GLenum swizzle)
        {
            Delegates.glPassTexCoordATI(dst, coord, swizzle);
        }

        #endregion

        #region SampleMapATI(GLuint dst, GLuint interp, GLenum swizzle)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSampleMapATI(GLuint dst, GLuint interp, GLenum swizzle)
        {
            Delegates.glSampleMapATI(dst, interp, swizzle);
        }

        #endregion

        #region ColorFragmentOp1ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColorFragmentOp1ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod)
        {
            Delegates.glColorFragmentOp1ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod);
        }

        #endregion

        #region ColorFragmentOp2ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColorFragmentOp2ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod)
        {
            Delegates.glColorFragmentOp2ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod);
        }

        #endregion

        #region ColorFragmentOp3ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColorFragmentOp3ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod)
        {
            Delegates.glColorFragmentOp3ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod);
        }

        #endregion

        #region AlphaFragmentOp1ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod)

        /// <summary>
        /// 
        /// </summary>
        public static         void glAlphaFragmentOp1ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod)
        {
            Delegates.glAlphaFragmentOp1ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod);
        }

        #endregion

        #region AlphaFragmentOp2ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod)

        /// <summary>
        /// 
        /// </summary>
        public static         void glAlphaFragmentOp2ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod)
        {
            Delegates.glAlphaFragmentOp2ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod);
        }

        #endregion

        #region AlphaFragmentOp3ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod)

        /// <summary>
        /// 
        /// </summary>
        public static         void glAlphaFragmentOp3ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod)
        {
            Delegates.glAlphaFragmentOp3ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod);
        }

        #endregion

        #region SetFragmentShaderConstantATI(GLuint dst, IntPtr value)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSetFragmentShaderConstantATI(GLuint dst, IntPtr value)
        {
            Delegates.glSetFragmentShaderConstantATI(dst, value);
        }

        #endregion

        #region SetFragmentShaderConstantATI(GLuint dst, object value)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSetFragmentShaderConstantATI(GLuint dst, object value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glSetFragmentShaderConstantATI(dst, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SetFragmentShaderConstantATI(GLuint dst, GLfloat[] value)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSetFragmentShaderConstantATI(GLuint dst, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glSetFragmentShaderConstantATI(dst, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region PNTrianglesiATI(GLenum pname, GLint param)

        /// <summary>
        /// 
        /// </summary>
        public static         void glPNTrianglesiATI(GLenum pname, GLint param)
        {
            Delegates.glPNTrianglesiATI(pname, param);
        }

        #endregion

        #region PNTrianglesfATI(GLenum pname, GLfloat param)

        /// <summary>
        /// 
        /// </summary>
        public static         void glPNTrianglesfATI(GLenum pname, GLfloat param)
        {
            Delegates.glPNTrianglesfATI(pname, param);
        }

        #endregion

        #region NewObjectBufferATI(GLsizei size, IntPtr pointer, GLenum usage)

        /// <summary>
        /// 
        /// </summary>
        public static         GLuint glNewObjectBufferATI(GLsizei size, IntPtr pointer, GLenum usage)
        {
            return Delegates.glNewObjectBufferATI(size, pointer, usage);
        }

        #endregion

        #region NewObjectBufferATI(GLsizei size, object pointer, GLenum usage)

        /// <summary>
        /// 
        /// </summary>
        public static         GLuint glNewObjectBufferATI(GLsizei size, object pointer, GLenum usage)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                return Delegates.glNewObjectBufferATI(size, h0.AddrOfPinnedObject(), usage);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region IsObjectBufferATI(GLuint buffer)

        /// <summary>
        /// 
        /// </summary>
        public static         GLboolean glIsObjectBufferATI(GLuint buffer)
        {
            return Delegates.glIsObjectBufferATI(buffer);
        }

        #endregion

        #region UpdateObjectBufferATI(GLuint buffer, GLuint offset, GLsizei size, IntPtr pointer, GLenum preserve)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUpdateObjectBufferATI(GLuint buffer, GLuint offset, GLsizei size, IntPtr pointer, GLenum preserve)
        {
            Delegates.glUpdateObjectBufferATI(buffer, offset, size, pointer, preserve);
        }

        #endregion

        #region UpdateObjectBufferATI(GLuint buffer, GLuint offset, GLsizei size, object pointer, GLenum preserve)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUpdateObjectBufferATI(GLuint buffer, GLuint offset, GLsizei size, object pointer, GLenum preserve)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glUpdateObjectBufferATI(buffer, offset, size, h0.AddrOfPinnedObject(), preserve);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetObjectBufferfvATI(GLuint buffer, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetObjectBufferfvATI(GLuint buffer, GLenum pname, IntPtr parameters)
        {
            Delegates.glGetObjectBufferfvATI(buffer, pname, parameters);
        }

        #endregion

        #region GetObjectBufferfvATI(GLuint buffer, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetObjectBufferfvATI(GLuint buffer, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetObjectBufferfvATI(buffer, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetObjectBufferfvATI(GLuint buffer, GLenum pname, GLfloat[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetObjectBufferfvATI(GLuint buffer, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetObjectBufferfvATI(buffer, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetObjectBufferivATI(GLuint buffer, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetObjectBufferivATI(GLuint buffer, GLenum pname, IntPtr parameters)
        {
            Delegates.glGetObjectBufferivATI(buffer, pname, parameters);
        }

        #endregion

        #region GetObjectBufferivATI(GLuint buffer, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetObjectBufferivATI(GLuint buffer, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetObjectBufferivATI(buffer, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetObjectBufferivATI(GLuint buffer, GLenum pname, GLint[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetObjectBufferivATI(GLuint buffer, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetObjectBufferivATI(buffer, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region FreeObjectBufferATI(GLuint buffer)

        /// <summary>
        /// 
        /// </summary>
        public static         void glFreeObjectBufferATI(GLuint buffer)
        {
            Delegates.glFreeObjectBufferATI(buffer);
        }

        #endregion

        #region ArrayObjectATI(GLenum array, GLint size, GLenum type, GLsizei stride, GLuint buffer, GLuint offset)

        /// <summary>
        /// 
        /// </summary>
        public static         void glArrayObjectATI(GLenum array, GLint size, GLenum type, GLsizei stride, GLuint buffer, GLuint offset)
        {
            Delegates.glArrayObjectATI(array, size, type, stride, buffer, offset);
        }

        #endregion

        #region GetArrayObjectfvATI(GLenum array, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetArrayObjectfvATI(GLenum array, GLenum pname, IntPtr parameters)
        {
            Delegates.glGetArrayObjectfvATI(array, pname, parameters);
        }

        #endregion

        #region GetArrayObjectfvATI(GLenum array, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetArrayObjectfvATI(GLenum array, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetArrayObjectfvATI(array, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetArrayObjectfvATI(GLenum array, GLenum pname, GLfloat[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetArrayObjectfvATI(GLenum array, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetArrayObjectfvATI(array, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetArrayObjectivATI(GLenum array, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetArrayObjectivATI(GLenum array, GLenum pname, IntPtr parameters)
        {
            Delegates.glGetArrayObjectivATI(array, pname, parameters);
        }

        #endregion

        #region GetArrayObjectivATI(GLenum array, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetArrayObjectivATI(GLenum array, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetArrayObjectivATI(array, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetArrayObjectivATI(GLenum array, GLenum pname, GLint[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetArrayObjectivATI(GLenum array, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetArrayObjectivATI(array, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VariantArrayObjectATI(GLuint id, GLenum type, GLsizei stride, GLuint buffer, GLuint offset)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVariantArrayObjectATI(GLuint id, GLenum type, GLsizei stride, GLuint buffer, GLuint offset)
        {
            Delegates.glVariantArrayObjectATI(id, type, stride, buffer, offset);
        }

        #endregion

        #region GetVariantArrayObjectfvATI(GLuint id, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetVariantArrayObjectfvATI(GLuint id, GLenum pname, IntPtr parameters)
        {
            Delegates.glGetVariantArrayObjectfvATI(id, pname, parameters);
        }

        #endregion

        #region GetVariantArrayObjectfvATI(GLuint id, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetVariantArrayObjectfvATI(GLuint id, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVariantArrayObjectfvATI(id, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetVariantArrayObjectfvATI(GLuint id, GLenum pname, GLfloat[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetVariantArrayObjectfvATI(GLuint id, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVariantArrayObjectfvATI(id, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetVariantArrayObjectivATI(GLuint id, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetVariantArrayObjectivATI(GLuint id, GLenum pname, IntPtr parameters)
        {
            Delegates.glGetVariantArrayObjectivATI(id, pname, parameters);
        }

        #endregion

        #region GetVariantArrayObjectivATI(GLuint id, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetVariantArrayObjectivATI(GLuint id, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVariantArrayObjectivATI(id, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetVariantArrayObjectivATI(GLuint id, GLenum pname, GLint[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetVariantArrayObjectivATI(GLuint id, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVariantArrayObjectivATI(id, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region BeginVertexShaderEXT()

        /// <summary>
        /// 
        /// </summary>
        public static         void glBeginVertexShaderEXT()
        {
            Delegates.glBeginVertexShaderEXT();
        }

        #endregion

        #region EndVertexShaderEXT()

        /// <summary>
        /// 
        /// </summary>
        public static         void glEndVertexShaderEXT()
        {
            Delegates.glEndVertexShaderEXT();
        }

        #endregion

        #region BindVertexShaderEXT(GLuint id)

        /// <summary>
        /// 
        /// </summary>
        public static         void glBindVertexShaderEXT(GLuint id)
        {
            Delegates.glBindVertexShaderEXT(id);
        }

        #endregion

        #region GenVertexShadersEXT(GLuint range)

        /// <summary>
        /// 
        /// </summary>
        public static         GLuint glGenVertexShadersEXT(GLuint range)
        {
            return Delegates.glGenVertexShadersEXT(range);
        }

        #endregion

        #region DeleteVertexShaderEXT(GLuint id)

        /// <summary>
        /// 
        /// </summary>
        public static         void glDeleteVertexShaderEXT(GLuint id)
        {
            Delegates.glDeleteVertexShaderEXT(id);
        }

        #endregion

        #region ShaderOp1EXT(GLenum op, GLuint res, GLuint arg1)

        /// <summary>
        /// 
        /// </summary>
        public static         void glShaderOp1EXT(GLenum op, GLuint res, GLuint arg1)
        {
            Delegates.glShaderOp1EXT(op, res, arg1);
        }

        #endregion

        #region ShaderOp2EXT(GLenum op, GLuint res, GLuint arg1, GLuint arg2)

        /// <summary>
        /// 
        /// </summary>
        public static         void glShaderOp2EXT(GLenum op, GLuint res, GLuint arg1, GLuint arg2)
        {
            Delegates.glShaderOp2EXT(op, res, arg1, arg2);
        }

        #endregion

        #region ShaderOp3EXT(GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3)

        /// <summary>
        /// 
        /// </summary>
        public static         void glShaderOp3EXT(GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3)
        {
            Delegates.glShaderOp3EXT(op, res, arg1, arg2, arg3);
        }

        #endregion

        #region SwizzleEXT(GLuint res, GLuint @in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSwizzleEXT(GLuint res, GLuint @in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW)
        {
            Delegates.glSwizzleEXT(res, @in, outX, outY, outZ, outW);
        }

        #endregion

        #region WriteMaskEXT(GLuint res, GLuint @in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW)

        /// <summary>
        /// 
        /// </summary>
        public static         void glWriteMaskEXT(GLuint res, GLuint @in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW)
        {
            Delegates.glWriteMaskEXT(res, @in, outX, outY, outZ, outW);
        }

        #endregion

        #region InsertComponentEXT(GLuint res, GLuint src, GLuint num)

        /// <summary>
        /// 
        /// </summary>
        public static         void glInsertComponentEXT(GLuint res, GLuint src, GLuint num)
        {
            Delegates.glInsertComponentEXT(res, src, num);
        }

        #endregion

        #region ExtractComponentEXT(GLuint res, GLuint src, GLuint num)

        /// <summary>
        /// 
        /// </summary>
        public static         void glExtractComponentEXT(GLuint res, GLuint src, GLuint num)
        {
            Delegates.glExtractComponentEXT(res, src, num);
        }

        #endregion

        #region GenSymbolsEXT(GLenum datatype, GLenum storagetype, GLenum range, GLuint components)

        /// <summary>
        /// 
        /// </summary>
        public static         GLuint glGenSymbolsEXT(GLenum datatype, GLenum storagetype, GLenum range, GLuint components)
        {
            return Delegates.glGenSymbolsEXT(datatype, storagetype, range, components);
        }

        #endregion

        #region SetInvariantEXT(GLuint id, GLenum type, IntPtr addr)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSetInvariantEXT(GLuint id, GLenum type, IntPtr addr)
        {
            Delegates.glSetInvariantEXT(id, type, addr);
        }

        #endregion

        #region SetInvariantEXT(GLuint id, GLenum type, object addr)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSetInvariantEXT(GLuint id, GLenum type, object addr)
        {
            GCHandle h0 = GCHandle.Alloc(addr, GCHandleType.Pinned);
            try
            {
                Delegates.glSetInvariantEXT(id, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SetLocalConstantEXT(GLuint id, GLenum type, IntPtr addr)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSetLocalConstantEXT(GLuint id, GLenum type, IntPtr addr)
        {
            Delegates.glSetLocalConstantEXT(id, type, addr);
        }

        #endregion

        #region SetLocalConstantEXT(GLuint id, GLenum type, object addr)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSetLocalConstantEXT(GLuint id, GLenum type, object addr)
        {
            GCHandle h0 = GCHandle.Alloc(addr, GCHandleType.Pinned);
            try
            {
                Delegates.glSetLocalConstantEXT(id, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VariantbvEXT(GLuint id, IntPtr addr)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVariantbvEXT(GLuint id, IntPtr addr)
        {
            Delegates.glVariantbvEXT(id, addr);
        }

        #endregion

        #region VariantbvEXT(GLuint id, object addr)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVariantbvEXT(GLuint id, object addr)
        {
            GCHandle h0 = GCHandle.Alloc(addr, GCHandleType.Pinned);
            try
            {
                Delegates.glVariantbvEXT(id, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VariantbvEXT(GLuint id, GLbyte[] addr)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVariantbvEXT(GLuint id, GLbyte[] addr)
        {
            GCHandle h0 = GCHandle.Alloc(addr, GCHandleType.Pinned);
            try
            {
                Delegates.glVariantbvEXT(id, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VariantsvEXT(GLuint id, IntPtr addr)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVariantsvEXT(GLuint id, IntPtr addr)
        {
            Delegates.glVariantsvEXT(id, addr);
        }

        #endregion

        #region VariantsvEXT(GLuint id, object addr)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVariantsvEXT(GLuint id, object addr)
        {
            GCHandle h0 = GCHandle.Alloc(addr, GCHandleType.Pinned);
            try
            {
                Delegates.glVariantsvEXT(id, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VariantsvEXT(GLuint id, GLshort[] addr)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVariantsvEXT(GLuint id, GLshort[] addr)
        {
            GCHandle h0 = GCHandle.Alloc(addr, GCHandleType.Pinned);
            try
            {
                Delegates.glVariantsvEXT(id, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VariantivEXT(GLuint id, IntPtr addr)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVariantivEXT(GLuint id, IntPtr addr)
        {
            Delegates.glVariantivEXT(id, addr);
        }

        #endregion

        #region VariantivEXT(GLuint id, object addr)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVariantivEXT(GLuint id, object addr)
        {
            GCHandle h0 = GCHandle.Alloc(addr, GCHandleType.Pinned);
            try
            {
                Delegates.glVariantivEXT(id, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VariantivEXT(GLuint id, GLint[] addr)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVariantivEXT(GLuint id, GLint[] addr)
        {
            GCHandle h0 = GCHandle.Alloc(addr, GCHandleType.Pinned);
            try
            {
                Delegates.glVariantivEXT(id, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VariantfvEXT(GLuint id, IntPtr addr)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVariantfvEXT(GLuint id, IntPtr addr)
        {
            Delegates.glVariantfvEXT(id, addr);
        }

        #endregion

        #region VariantfvEXT(GLuint id, object addr)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVariantfvEXT(GLuint id, object addr)
        {
            GCHandle h0 = GCHandle.Alloc(addr, GCHandleType.Pinned);
            try
            {
                Delegates.glVariantfvEXT(id, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VariantfvEXT(GLuint id, GLfloat[] addr)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVariantfvEXT(GLuint id, GLfloat[] addr)
        {
            GCHandle h0 = GCHandle.Alloc(addr, GCHandleType.Pinned);
            try
            {
                Delegates.glVariantfvEXT(id, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VariantdvEXT(GLuint id, IntPtr addr)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVariantdvEXT(GLuint id, IntPtr addr)
        {
            Delegates.glVariantdvEXT(id, addr);
        }

        #endregion

        #region VariantdvEXT(GLuint id, object addr)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVariantdvEXT(GLuint id, object addr)
        {
            GCHandle h0 = GCHandle.Alloc(addr, GCHandleType.Pinned);
            try
            {
                Delegates.glVariantdvEXT(id, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VariantdvEXT(GLuint id, GLdouble[] addr)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVariantdvEXT(GLuint id, GLdouble[] addr)
        {
            GCHandle h0 = GCHandle.Alloc(addr, GCHandleType.Pinned);
            try
            {
                Delegates.glVariantdvEXT(id, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VariantubvEXT(GLuint id, IntPtr addr)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVariantubvEXT(GLuint id, IntPtr addr)
        {
            Delegates.glVariantubvEXT(id, addr);
        }

        #endregion

        #region VariantubvEXT(GLuint id, object addr)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVariantubvEXT(GLuint id, object addr)
        {
            GCHandle h0 = GCHandle.Alloc(addr, GCHandleType.Pinned);
            try
            {
                Delegates.glVariantubvEXT(id, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VariantubvEXT(GLuint id, GLubyte[] addr)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVariantubvEXT(GLuint id, GLubyte[] addr)
        {
            GCHandle h0 = GCHandle.Alloc(addr, GCHandleType.Pinned);
            try
            {
                Delegates.glVariantubvEXT(id, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VariantusvEXT(GLuint id, IntPtr addr)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVariantusvEXT(GLuint id, IntPtr addr)
        {
            Delegates.glVariantusvEXT(id, addr);
        }

        #endregion

        #region VariantusvEXT(GLuint id, object addr)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVariantusvEXT(GLuint id, object addr)
        {
            GCHandle h0 = GCHandle.Alloc(addr, GCHandleType.Pinned);
            try
            {
                Delegates.glVariantusvEXT(id, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VariantusvEXT(GLuint id, GLushort[] addr)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVariantusvEXT(GLuint id, GLushort[] addr)
        {
            GCHandle h0 = GCHandle.Alloc(addr, GCHandleType.Pinned);
            try
            {
                Delegates.glVariantusvEXT(id, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VariantuivEXT(GLuint id, IntPtr addr)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVariantuivEXT(GLuint id, IntPtr addr)
        {
            Delegates.glVariantuivEXT(id, addr);
        }

        #endregion

        #region VariantuivEXT(GLuint id, object addr)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVariantuivEXT(GLuint id, object addr)
        {
            GCHandle h0 = GCHandle.Alloc(addr, GCHandleType.Pinned);
            try
            {
                Delegates.glVariantuivEXT(id, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VariantuivEXT(GLuint id, GLuint[] addr)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVariantuivEXT(GLuint id, GLuint[] addr)
        {
            GCHandle h0 = GCHandle.Alloc(addr, GCHandleType.Pinned);
            try
            {
                Delegates.glVariantuivEXT(id, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VariantPointerEXT(GLuint id, GLenum type, GLuint stride, IntPtr addr)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVariantPointerEXT(GLuint id, GLenum type, GLuint stride, IntPtr addr)
        {
            Delegates.glVariantPointerEXT(id, type, stride, addr);
        }

        #endregion

        #region VariantPointerEXT(GLuint id, GLenum type, GLuint stride, object addr)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVariantPointerEXT(GLuint id, GLenum type, GLuint stride, object addr)
        {
            GCHandle h0 = GCHandle.Alloc(addr, GCHandleType.Pinned);
            try
            {
                Delegates.glVariantPointerEXT(id, type, stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region EnableVariantClientStateEXT(GLuint id)

        /// <summary>
        /// 
        /// </summary>
        public static         void glEnableVariantClientStateEXT(GLuint id)
        {
            Delegates.glEnableVariantClientStateEXT(id);
        }

        #endregion

        #region DisableVariantClientStateEXT(GLuint id)

        /// <summary>
        /// 
        /// </summary>
        public static         void glDisableVariantClientStateEXT(GLuint id)
        {
            Delegates.glDisableVariantClientStateEXT(id);
        }

        #endregion

        #region BindLightParameterEXT(GLenum light, GLenum value)

        /// <summary>
        /// 
        /// </summary>
        public static         GLuint glBindLightParameterEXT(GLenum light, GLenum value)
        {
            return Delegates.glBindLightParameterEXT(light, value);
        }

        #endregion

        #region BindMaterialParameterEXT(GLenum face, GLenum value)

        /// <summary>
        /// 
        /// </summary>
        public static         GLuint glBindMaterialParameterEXT(GLenum face, GLenum value)
        {
            return Delegates.glBindMaterialParameterEXT(face, value);
        }

        #endregion

        #region BindTexGenParameterEXT(GLenum unit, GLenum coord, GLenum value)

        /// <summary>
        /// 
        /// </summary>
        public static         GLuint glBindTexGenParameterEXT(GLenum unit, GLenum coord, GLenum value)
        {
            return Delegates.glBindTexGenParameterEXT(unit, coord, value);
        }

        #endregion

        #region BindTextureUnitParameterEXT(GLenum unit, GLenum value)

        /// <summary>
        /// 
        /// </summary>
        public static         GLuint glBindTextureUnitParameterEXT(GLenum unit, GLenum value)
        {
            return Delegates.glBindTextureUnitParameterEXT(unit, value);
        }

        #endregion

        #region BindParameterEXT(GLenum value)

        /// <summary>
        /// 
        /// </summary>
        public static         GLuint glBindParameterEXT(GLenum value)
        {
            return Delegates.glBindParameterEXT(value);
        }

        #endregion

        #region IsVariantEnabledEXT(GLuint id, GLenum cap)

        /// <summary>
        /// 
        /// </summary>
        public static         GLboolean glIsVariantEnabledEXT(GLuint id, GLenum cap)
        {
            return Delegates.glIsVariantEnabledEXT(id, cap);
        }

        #endregion

        #region GetVariantBooleanvEXT(GLuint id, GLenum value, IntPtr data)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetVariantBooleanvEXT(GLuint id, GLenum value, IntPtr data)
        {
            Delegates.glGetVariantBooleanvEXT(id, value, data);
        }

        #endregion

        #region GetVariantBooleanvEXT(GLuint id, GLenum value, object data)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetVariantBooleanvEXT(GLuint id, GLenum value, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVariantBooleanvEXT(id, value, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetVariantBooleanvEXT(GLuint id, GLenum value, GLboolean[] data)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetVariantBooleanvEXT(GLuint id, GLenum value, GLboolean[] data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVariantBooleanvEXT(id, value, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetVariantIntegervEXT(GLuint id, GLenum value, IntPtr data)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetVariantIntegervEXT(GLuint id, GLenum value, IntPtr data)
        {
            Delegates.glGetVariantIntegervEXT(id, value, data);
        }

        #endregion

        #region GetVariantIntegervEXT(GLuint id, GLenum value, object data)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetVariantIntegervEXT(GLuint id, GLenum value, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVariantIntegervEXT(id, value, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetVariantIntegervEXT(GLuint id, GLenum value, GLint[] data)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetVariantIntegervEXT(GLuint id, GLenum value, GLint[] data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVariantIntegervEXT(id, value, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetVariantFloatvEXT(GLuint id, GLenum value, IntPtr data)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetVariantFloatvEXT(GLuint id, GLenum value, IntPtr data)
        {
            Delegates.glGetVariantFloatvEXT(id, value, data);
        }

        #endregion

        #region GetVariantFloatvEXT(GLuint id, GLenum value, object data)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetVariantFloatvEXT(GLuint id, GLenum value, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVariantFloatvEXT(id, value, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetVariantFloatvEXT(GLuint id, GLenum value, GLfloat[] data)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetVariantFloatvEXT(GLuint id, GLenum value, GLfloat[] data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVariantFloatvEXT(id, value, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetVariantPointervEXT(GLuint id, GLenum value, IntPtr data)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetVariantPointervEXT(GLuint id, GLenum value, IntPtr data)
        {
            Delegates.glGetVariantPointervEXT(id, value, data);
        }

        #endregion

        #region GetVariantPointervEXT(GLuint id, GLenum value, object data)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetVariantPointervEXT(GLuint id, GLenum value, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVariantPointervEXT(id, value, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetVariantPointervEXT(GLuint id, GLenum value, IntPtr[] data)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetVariantPointervEXT(GLuint id, GLenum value, IntPtr[] data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVariantPointervEXT(id, value, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetInvariantBooleanvEXT(GLuint id, GLenum value, IntPtr data)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetInvariantBooleanvEXT(GLuint id, GLenum value, IntPtr data)
        {
            Delegates.glGetInvariantBooleanvEXT(id, value, data);
        }

        #endregion

        #region GetInvariantBooleanvEXT(GLuint id, GLenum value, object data)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetInvariantBooleanvEXT(GLuint id, GLenum value, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glGetInvariantBooleanvEXT(id, value, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetInvariantBooleanvEXT(GLuint id, GLenum value, GLboolean[] data)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetInvariantBooleanvEXT(GLuint id, GLenum value, GLboolean[] data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glGetInvariantBooleanvEXT(id, value, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetInvariantIntegervEXT(GLuint id, GLenum value, IntPtr data)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetInvariantIntegervEXT(GLuint id, GLenum value, IntPtr data)
        {
            Delegates.glGetInvariantIntegervEXT(id, value, data);
        }

        #endregion

        #region GetInvariantIntegervEXT(GLuint id, GLenum value, object data)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetInvariantIntegervEXT(GLuint id, GLenum value, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glGetInvariantIntegervEXT(id, value, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetInvariantIntegervEXT(GLuint id, GLenum value, GLint[] data)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetInvariantIntegervEXT(GLuint id, GLenum value, GLint[] data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glGetInvariantIntegervEXT(id, value, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetInvariantFloatvEXT(GLuint id, GLenum value, IntPtr data)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetInvariantFloatvEXT(GLuint id, GLenum value, IntPtr data)
        {
            Delegates.glGetInvariantFloatvEXT(id, value, data);
        }

        #endregion

        #region GetInvariantFloatvEXT(GLuint id, GLenum value, object data)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetInvariantFloatvEXT(GLuint id, GLenum value, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glGetInvariantFloatvEXT(id, value, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetInvariantFloatvEXT(GLuint id, GLenum value, GLfloat[] data)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetInvariantFloatvEXT(GLuint id, GLenum value, GLfloat[] data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glGetInvariantFloatvEXT(id, value, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetLocalConstantBooleanvEXT(GLuint id, GLenum value, IntPtr data)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetLocalConstantBooleanvEXT(GLuint id, GLenum value, IntPtr data)
        {
            Delegates.glGetLocalConstantBooleanvEXT(id, value, data);
        }

        #endregion

        #region GetLocalConstantBooleanvEXT(GLuint id, GLenum value, object data)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetLocalConstantBooleanvEXT(GLuint id, GLenum value, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glGetLocalConstantBooleanvEXT(id, value, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetLocalConstantBooleanvEXT(GLuint id, GLenum value, GLboolean[] data)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetLocalConstantBooleanvEXT(GLuint id, GLenum value, GLboolean[] data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glGetLocalConstantBooleanvEXT(id, value, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetLocalConstantIntegervEXT(GLuint id, GLenum value, IntPtr data)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetLocalConstantIntegervEXT(GLuint id, GLenum value, IntPtr data)
        {
            Delegates.glGetLocalConstantIntegervEXT(id, value, data);
        }

        #endregion

        #region GetLocalConstantIntegervEXT(GLuint id, GLenum value, object data)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetLocalConstantIntegervEXT(GLuint id, GLenum value, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glGetLocalConstantIntegervEXT(id, value, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetLocalConstantIntegervEXT(GLuint id, GLenum value, GLint[] data)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetLocalConstantIntegervEXT(GLuint id, GLenum value, GLint[] data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glGetLocalConstantIntegervEXT(id, value, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetLocalConstantFloatvEXT(GLuint id, GLenum value, IntPtr data)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetLocalConstantFloatvEXT(GLuint id, GLenum value, IntPtr data)
        {
            Delegates.glGetLocalConstantFloatvEXT(id, value, data);
        }

        #endregion

        #region GetLocalConstantFloatvEXT(GLuint id, GLenum value, object data)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetLocalConstantFloatvEXT(GLuint id, GLenum value, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glGetLocalConstantFloatvEXT(id, value, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetLocalConstantFloatvEXT(GLuint id, GLenum value, GLfloat[] data)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetLocalConstantFloatvEXT(GLuint id, GLenum value, GLfloat[] data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glGetLocalConstantFloatvEXT(id, value, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexStream1sATI(GLenum stream, GLshort x)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexStream1sATI(GLenum stream, GLshort x)
        {
            Delegates.glVertexStream1sATI(stream, x);
        }

        #endregion

        #region VertexStream1svATI(GLenum stream, IntPtr coords)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexStream1svATI(GLenum stream, IntPtr coords)
        {
            Delegates.glVertexStream1svATI(stream, coords);
        }

        #endregion

        #region VertexStream1svATI(GLenum stream, object coords)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexStream1svATI(GLenum stream, object coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexStream1svATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexStream1svATI(GLenum stream, GLshort[] coords)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexStream1svATI(GLenum stream, GLshort[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexStream1svATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexStream1iATI(GLenum stream, GLint x)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexStream1iATI(GLenum stream, GLint x)
        {
            Delegates.glVertexStream1iATI(stream, x);
        }

        #endregion

        #region VertexStream1ivATI(GLenum stream, IntPtr coords)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexStream1ivATI(GLenum stream, IntPtr coords)
        {
            Delegates.glVertexStream1ivATI(stream, coords);
        }

        #endregion

        #region VertexStream1ivATI(GLenum stream, object coords)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexStream1ivATI(GLenum stream, object coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexStream1ivATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexStream1ivATI(GLenum stream, GLint[] coords)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexStream1ivATI(GLenum stream, GLint[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexStream1ivATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexStream1fATI(GLenum stream, GLfloat x)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexStream1fATI(GLenum stream, GLfloat x)
        {
            Delegates.glVertexStream1fATI(stream, x);
        }

        #endregion

        #region VertexStream1fvATI(GLenum stream, IntPtr coords)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexStream1fvATI(GLenum stream, IntPtr coords)
        {
            Delegates.glVertexStream1fvATI(stream, coords);
        }

        #endregion

        #region VertexStream1fvATI(GLenum stream, object coords)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexStream1fvATI(GLenum stream, object coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexStream1fvATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexStream1fvATI(GLenum stream, GLfloat[] coords)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexStream1fvATI(GLenum stream, GLfloat[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexStream1fvATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexStream1dATI(GLenum stream, GLdouble x)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexStream1dATI(GLenum stream, GLdouble x)
        {
            Delegates.glVertexStream1dATI(stream, x);
        }

        #endregion

        #region VertexStream1dvATI(GLenum stream, IntPtr coords)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexStream1dvATI(GLenum stream, IntPtr coords)
        {
            Delegates.glVertexStream1dvATI(stream, coords);
        }

        #endregion

        #region VertexStream1dvATI(GLenum stream, object coords)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexStream1dvATI(GLenum stream, object coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexStream1dvATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexStream1dvATI(GLenum stream, GLdouble[] coords)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexStream1dvATI(GLenum stream, GLdouble[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexStream1dvATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexStream2sATI(GLenum stream, GLshort x, GLshort y)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexStream2sATI(GLenum stream, GLshort x, GLshort y)
        {
            Delegates.glVertexStream2sATI(stream, x, y);
        }

        #endregion

        #region VertexStream2svATI(GLenum stream, IntPtr coords)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexStream2svATI(GLenum stream, IntPtr coords)
        {
            Delegates.glVertexStream2svATI(stream, coords);
        }

        #endregion

        #region VertexStream2svATI(GLenum stream, object coords)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexStream2svATI(GLenum stream, object coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexStream2svATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexStream2svATI(GLenum stream, GLshort[] coords)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexStream2svATI(GLenum stream, GLshort[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexStream2svATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexStream2iATI(GLenum stream, GLint x, GLint y)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexStream2iATI(GLenum stream, GLint x, GLint y)
        {
            Delegates.glVertexStream2iATI(stream, x, y);
        }

        #endregion

        #region VertexStream2ivATI(GLenum stream, IntPtr coords)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexStream2ivATI(GLenum stream, IntPtr coords)
        {
            Delegates.glVertexStream2ivATI(stream, coords);
        }

        #endregion

        #region VertexStream2ivATI(GLenum stream, object coords)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexStream2ivATI(GLenum stream, object coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexStream2ivATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexStream2ivATI(GLenum stream, GLint[] coords)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexStream2ivATI(GLenum stream, GLint[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexStream2ivATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexStream2fATI(GLenum stream, GLfloat x, GLfloat y)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexStream2fATI(GLenum stream, GLfloat x, GLfloat y)
        {
            Delegates.glVertexStream2fATI(stream, x, y);
        }

        #endregion

        #region VertexStream2fvATI(GLenum stream, IntPtr coords)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexStream2fvATI(GLenum stream, IntPtr coords)
        {
            Delegates.glVertexStream2fvATI(stream, coords);
        }

        #endregion

        #region VertexStream2fvATI(GLenum stream, object coords)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexStream2fvATI(GLenum stream, object coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexStream2fvATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexStream2fvATI(GLenum stream, GLfloat[] coords)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexStream2fvATI(GLenum stream, GLfloat[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexStream2fvATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexStream2dATI(GLenum stream, GLdouble x, GLdouble y)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexStream2dATI(GLenum stream, GLdouble x, GLdouble y)
        {
            Delegates.glVertexStream2dATI(stream, x, y);
        }

        #endregion

        #region VertexStream2dvATI(GLenum stream, IntPtr coords)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexStream2dvATI(GLenum stream, IntPtr coords)
        {
            Delegates.glVertexStream2dvATI(stream, coords);
        }

        #endregion

        #region VertexStream2dvATI(GLenum stream, object coords)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexStream2dvATI(GLenum stream, object coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexStream2dvATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexStream2dvATI(GLenum stream, GLdouble[] coords)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexStream2dvATI(GLenum stream, GLdouble[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexStream2dvATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexStream3sATI(GLenum stream, GLshort x, GLshort y, GLshort z)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexStream3sATI(GLenum stream, GLshort x, GLshort y, GLshort z)
        {
            Delegates.glVertexStream3sATI(stream, x, y, z);
        }

        #endregion

        #region VertexStream3svATI(GLenum stream, IntPtr coords)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexStream3svATI(GLenum stream, IntPtr coords)
        {
            Delegates.glVertexStream3svATI(stream, coords);
        }

        #endregion

        #region VertexStream3svATI(GLenum stream, object coords)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexStream3svATI(GLenum stream, object coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexStream3svATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexStream3svATI(GLenum stream, GLshort[] coords)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexStream3svATI(GLenum stream, GLshort[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexStream3svATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexStream3iATI(GLenum stream, GLint x, GLint y, GLint z)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexStream3iATI(GLenum stream, GLint x, GLint y, GLint z)
        {
            Delegates.glVertexStream3iATI(stream, x, y, z);
        }

        #endregion

        #region VertexStream3ivATI(GLenum stream, IntPtr coords)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexStream3ivATI(GLenum stream, IntPtr coords)
        {
            Delegates.glVertexStream3ivATI(stream, coords);
        }

        #endregion

        #region VertexStream3ivATI(GLenum stream, object coords)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexStream3ivATI(GLenum stream, object coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexStream3ivATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexStream3ivATI(GLenum stream, GLint[] coords)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexStream3ivATI(GLenum stream, GLint[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexStream3ivATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexStream3fATI(GLenum stream, GLfloat x, GLfloat y, GLfloat z)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexStream3fATI(GLenum stream, GLfloat x, GLfloat y, GLfloat z)
        {
            Delegates.glVertexStream3fATI(stream, x, y, z);
        }

        #endregion

        #region VertexStream3fvATI(GLenum stream, IntPtr coords)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexStream3fvATI(GLenum stream, IntPtr coords)
        {
            Delegates.glVertexStream3fvATI(stream, coords);
        }

        #endregion

        #region VertexStream3fvATI(GLenum stream, object coords)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexStream3fvATI(GLenum stream, object coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexStream3fvATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexStream3fvATI(GLenum stream, GLfloat[] coords)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexStream3fvATI(GLenum stream, GLfloat[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexStream3fvATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexStream3dATI(GLenum stream, GLdouble x, GLdouble y, GLdouble z)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexStream3dATI(GLenum stream, GLdouble x, GLdouble y, GLdouble z)
        {
            Delegates.glVertexStream3dATI(stream, x, y, z);
        }

        #endregion

        #region VertexStream3dvATI(GLenum stream, IntPtr coords)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexStream3dvATI(GLenum stream, IntPtr coords)
        {
            Delegates.glVertexStream3dvATI(stream, coords);
        }

        #endregion

        #region VertexStream3dvATI(GLenum stream, object coords)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexStream3dvATI(GLenum stream, object coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexStream3dvATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexStream3dvATI(GLenum stream, GLdouble[] coords)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexStream3dvATI(GLenum stream, GLdouble[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexStream3dvATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexStream4sATI(GLenum stream, GLshort x, GLshort y, GLshort z, GLshort w)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexStream4sATI(GLenum stream, GLshort x, GLshort y, GLshort z, GLshort w)
        {
            Delegates.glVertexStream4sATI(stream, x, y, z, w);
        }

        #endregion

        #region VertexStream4svATI(GLenum stream, IntPtr coords)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexStream4svATI(GLenum stream, IntPtr coords)
        {
            Delegates.glVertexStream4svATI(stream, coords);
        }

        #endregion

        #region VertexStream4svATI(GLenum stream, object coords)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexStream4svATI(GLenum stream, object coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexStream4svATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexStream4svATI(GLenum stream, GLshort[] coords)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexStream4svATI(GLenum stream, GLshort[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexStream4svATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexStream4iATI(GLenum stream, GLint x, GLint y, GLint z, GLint w)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexStream4iATI(GLenum stream, GLint x, GLint y, GLint z, GLint w)
        {
            Delegates.glVertexStream4iATI(stream, x, y, z, w);
        }

        #endregion

        #region VertexStream4ivATI(GLenum stream, IntPtr coords)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexStream4ivATI(GLenum stream, IntPtr coords)
        {
            Delegates.glVertexStream4ivATI(stream, coords);
        }

        #endregion

        #region VertexStream4ivATI(GLenum stream, object coords)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexStream4ivATI(GLenum stream, object coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexStream4ivATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexStream4ivATI(GLenum stream, GLint[] coords)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexStream4ivATI(GLenum stream, GLint[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexStream4ivATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexStream4fATI(GLenum stream, GLfloat x, GLfloat y, GLfloat z, GLfloat w)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexStream4fATI(GLenum stream, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
        {
            Delegates.glVertexStream4fATI(stream, x, y, z, w);
        }

        #endregion

        #region VertexStream4fvATI(GLenum stream, IntPtr coords)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexStream4fvATI(GLenum stream, IntPtr coords)
        {
            Delegates.glVertexStream4fvATI(stream, coords);
        }

        #endregion

        #region VertexStream4fvATI(GLenum stream, object coords)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexStream4fvATI(GLenum stream, object coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexStream4fvATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexStream4fvATI(GLenum stream, GLfloat[] coords)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexStream4fvATI(GLenum stream, GLfloat[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexStream4fvATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexStream4dATI(GLenum stream, GLdouble x, GLdouble y, GLdouble z, GLdouble w)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexStream4dATI(GLenum stream, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
        {
            Delegates.glVertexStream4dATI(stream, x, y, z, w);
        }

        #endregion

        #region VertexStream4dvATI(GLenum stream, IntPtr coords)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexStream4dvATI(GLenum stream, IntPtr coords)
        {
            Delegates.glVertexStream4dvATI(stream, coords);
        }

        #endregion

        #region VertexStream4dvATI(GLenum stream, object coords)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexStream4dvATI(GLenum stream, object coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexStream4dvATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexStream4dvATI(GLenum stream, GLdouble[] coords)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexStream4dvATI(GLenum stream, GLdouble[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexStream4dvATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region NormalStream3bATI(GLenum stream, GLbyte nx, GLbyte ny, GLbyte nz)

        /// <summary>
        /// 
        /// </summary>
        public static         void glNormalStream3bATI(GLenum stream, GLbyte nx, GLbyte ny, GLbyte nz)
        {
            Delegates.glNormalStream3bATI(stream, nx, ny, nz);
        }

        #endregion

        #region NormalStream3bvATI(GLenum stream, IntPtr coords)

        /// <summary>
        /// 
        /// </summary>
        public static         void glNormalStream3bvATI(GLenum stream, IntPtr coords)
        {
            Delegates.glNormalStream3bvATI(stream, coords);
        }

        #endregion

        #region NormalStream3bvATI(GLenum stream, object coords)

        /// <summary>
        /// 
        /// </summary>
        public static         void glNormalStream3bvATI(GLenum stream, object coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glNormalStream3bvATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region NormalStream3bvATI(GLenum stream, GLbyte[] coords)

        /// <summary>
        /// 
        /// </summary>
        public static         void glNormalStream3bvATI(GLenum stream, GLbyte[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glNormalStream3bvATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region NormalStream3sATI(GLenum stream, GLshort nx, GLshort ny, GLshort nz)

        /// <summary>
        /// 
        /// </summary>
        public static         void glNormalStream3sATI(GLenum stream, GLshort nx, GLshort ny, GLshort nz)
        {
            Delegates.glNormalStream3sATI(stream, nx, ny, nz);
        }

        #endregion

        #region NormalStream3svATI(GLenum stream, IntPtr coords)

        /// <summary>
        /// 
        /// </summary>
        public static         void glNormalStream3svATI(GLenum stream, IntPtr coords)
        {
            Delegates.glNormalStream3svATI(stream, coords);
        }

        #endregion

        #region NormalStream3svATI(GLenum stream, object coords)

        /// <summary>
        /// 
        /// </summary>
        public static         void glNormalStream3svATI(GLenum stream, object coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glNormalStream3svATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region NormalStream3svATI(GLenum stream, GLshort[] coords)

        /// <summary>
        /// 
        /// </summary>
        public static         void glNormalStream3svATI(GLenum stream, GLshort[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glNormalStream3svATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region NormalStream3iATI(GLenum stream, GLint nx, GLint ny, GLint nz)

        /// <summary>
        /// 
        /// </summary>
        public static         void glNormalStream3iATI(GLenum stream, GLint nx, GLint ny, GLint nz)
        {
            Delegates.glNormalStream3iATI(stream, nx, ny, nz);
        }

        #endregion

        #region NormalStream3ivATI(GLenum stream, IntPtr coords)

        /// <summary>
        /// 
        /// </summary>
        public static         void glNormalStream3ivATI(GLenum stream, IntPtr coords)
        {
            Delegates.glNormalStream3ivATI(stream, coords);
        }

        #endregion

        #region NormalStream3ivATI(GLenum stream, object coords)

        /// <summary>
        /// 
        /// </summary>
        public static         void glNormalStream3ivATI(GLenum stream, object coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glNormalStream3ivATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region NormalStream3ivATI(GLenum stream, GLint[] coords)

        /// <summary>
        /// 
        /// </summary>
        public static         void glNormalStream3ivATI(GLenum stream, GLint[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glNormalStream3ivATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region NormalStream3fATI(GLenum stream, GLfloat nx, GLfloat ny, GLfloat nz)

        /// <summary>
        /// 
        /// </summary>
        public static         void glNormalStream3fATI(GLenum stream, GLfloat nx, GLfloat ny, GLfloat nz)
        {
            Delegates.glNormalStream3fATI(stream, nx, ny, nz);
        }

        #endregion

        #region NormalStream3fvATI(GLenum stream, IntPtr coords)

        /// <summary>
        /// 
        /// </summary>
        public static         void glNormalStream3fvATI(GLenum stream, IntPtr coords)
        {
            Delegates.glNormalStream3fvATI(stream, coords);
        }

        #endregion

        #region NormalStream3fvATI(GLenum stream, object coords)

        /// <summary>
        /// 
        /// </summary>
        public static         void glNormalStream3fvATI(GLenum stream, object coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glNormalStream3fvATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region NormalStream3fvATI(GLenum stream, GLfloat[] coords)

        /// <summary>
        /// 
        /// </summary>
        public static         void glNormalStream3fvATI(GLenum stream, GLfloat[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glNormalStream3fvATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region NormalStream3dATI(GLenum stream, GLdouble nx, GLdouble ny, GLdouble nz)

        /// <summary>
        /// 
        /// </summary>
        public static         void glNormalStream3dATI(GLenum stream, GLdouble nx, GLdouble ny, GLdouble nz)
        {
            Delegates.glNormalStream3dATI(stream, nx, ny, nz);
        }

        #endregion

        #region NormalStream3dvATI(GLenum stream, IntPtr coords)

        /// <summary>
        /// 
        /// </summary>
        public static         void glNormalStream3dvATI(GLenum stream, IntPtr coords)
        {
            Delegates.glNormalStream3dvATI(stream, coords);
        }

        #endregion

        #region NormalStream3dvATI(GLenum stream, object coords)

        /// <summary>
        /// 
        /// </summary>
        public static         void glNormalStream3dvATI(GLenum stream, object coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glNormalStream3dvATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region NormalStream3dvATI(GLenum stream, GLdouble[] coords)

        /// <summary>
        /// 
        /// </summary>
        public static         void glNormalStream3dvATI(GLenum stream, GLdouble[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glNormalStream3dvATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ClientActiveVertexStreamATI(GLenum stream)

        /// <summary>
        /// 
        /// </summary>
        public static         void glClientActiveVertexStreamATI(GLenum stream)
        {
            Delegates.glClientActiveVertexStreamATI(stream);
        }

        #endregion

        #region VertexBlendEnviATI(GLenum pname, GLint param)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexBlendEnviATI(GLenum pname, GLint param)
        {
            Delegates.glVertexBlendEnviATI(pname, param);
        }

        #endregion

        #region VertexBlendEnvfATI(GLenum pname, GLfloat param)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexBlendEnvfATI(GLenum pname, GLfloat param)
        {
            Delegates.glVertexBlendEnvfATI(pname, param);
        }

        #endregion

        #region ElementPointerATI(GLenum type, IntPtr pointer)

        /// <summary>
        /// 
        /// </summary>
        public static         void glElementPointerATI(GLenum type, IntPtr pointer)
        {
            Delegates.glElementPointerATI(type, pointer);
        }

        #endregion

        #region ElementPointerATI(GLenum type, object pointer)

        /// <summary>
        /// 
        /// </summary>
        public static         void glElementPointerATI(GLenum type, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glElementPointerATI(type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region DrawElementArrayATI(GLenum mode, GLsizei count)

        /// <summary>
        /// 
        /// </summary>
        public static         void glDrawElementArrayATI(GLenum mode, GLsizei count)
        {
            Delegates.glDrawElementArrayATI(mode, count);
        }

        #endregion

        #region DrawRangeElementArrayATI(GLenum mode, GLuint start, GLuint end, GLsizei count)

        /// <summary>
        /// 
        /// </summary>
        public static         void glDrawRangeElementArrayATI(GLenum mode, GLuint start, GLuint end, GLsizei count)
        {
            Delegates.glDrawRangeElementArrayATI(mode, start, end, count);
        }

        #endregion

        #region DrawMeshArraysSUN(GLenum mode, GLint first, GLsizei count, GLsizei width)

        /// <summary>
        /// 
        /// </summary>
        public static         void glDrawMeshArraysSUN(GLenum mode, GLint first, GLsizei count, GLsizei width)
        {
            Delegates.glDrawMeshArraysSUN(mode, first, count, width);
        }

        #endregion

        #region GenOcclusionQueriesNV(GLsizei n, IntPtr ids)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGenOcclusionQueriesNV(GLsizei n, IntPtr ids)
        {
            Delegates.glGenOcclusionQueriesNV(n, ids);
        }

        #endregion

        #region GenOcclusionQueriesNV(GLsizei n, object ids)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGenOcclusionQueriesNV(GLsizei n, object ids)
        {
            GCHandle h0 = GCHandle.Alloc(ids, GCHandleType.Pinned);
            try
            {
                Delegates.glGenOcclusionQueriesNV(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GenOcclusionQueriesNV(GLsizei n, GLuint[] ids)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGenOcclusionQueriesNV(GLsizei n, GLuint[] ids)
        {
            GCHandle h0 = GCHandle.Alloc(ids, GCHandleType.Pinned);
            try
            {
                Delegates.glGenOcclusionQueriesNV(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region DeleteOcclusionQueriesNV(GLsizei n, IntPtr ids)

        /// <summary>
        /// 
        /// </summary>
        public static         void glDeleteOcclusionQueriesNV(GLsizei n, IntPtr ids)
        {
            Delegates.glDeleteOcclusionQueriesNV(n, ids);
        }

        #endregion

        #region DeleteOcclusionQueriesNV(GLsizei n, object ids)

        /// <summary>
        /// 
        /// </summary>
        public static         void glDeleteOcclusionQueriesNV(GLsizei n, object ids)
        {
            GCHandle h0 = GCHandle.Alloc(ids, GCHandleType.Pinned);
            try
            {
                Delegates.glDeleteOcclusionQueriesNV(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region DeleteOcclusionQueriesNV(GLsizei n, GLuint[] ids)

        /// <summary>
        /// 
        /// </summary>
        public static         void glDeleteOcclusionQueriesNV(GLsizei n, GLuint[] ids)
        {
            GCHandle h0 = GCHandle.Alloc(ids, GCHandleType.Pinned);
            try
            {
                Delegates.glDeleteOcclusionQueriesNV(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region IsOcclusionQueryNV(GLuint id)

        /// <summary>
        /// 
        /// </summary>
        public static         GLboolean glIsOcclusionQueryNV(GLuint id)
        {
            return Delegates.glIsOcclusionQueryNV(id);
        }

        #endregion

        #region BeginOcclusionQueryNV(GLuint id)

        /// <summary>
        /// 
        /// </summary>
        public static         void glBeginOcclusionQueryNV(GLuint id)
        {
            Delegates.glBeginOcclusionQueryNV(id);
        }

        #endregion

        #region EndOcclusionQueryNV()

        /// <summary>
        /// 
        /// </summary>
        public static         void glEndOcclusionQueryNV()
        {
            Delegates.glEndOcclusionQueryNV();
        }

        #endregion

        #region GetOcclusionQueryivNV(GLuint id, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetOcclusionQueryivNV(GLuint id, GLenum pname, IntPtr parameters)
        {
            Delegates.glGetOcclusionQueryivNV(id, pname, parameters);
        }

        #endregion

        #region GetOcclusionQueryivNV(GLuint id, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetOcclusionQueryivNV(GLuint id, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetOcclusionQueryivNV(id, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetOcclusionQueryivNV(GLuint id, GLenum pname, GLint[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetOcclusionQueryivNV(GLuint id, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetOcclusionQueryivNV(id, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetOcclusionQueryuivNV(GLuint id, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetOcclusionQueryuivNV(GLuint id, GLenum pname, IntPtr parameters)
        {
            Delegates.glGetOcclusionQueryuivNV(id, pname, parameters);
        }

        #endregion

        #region GetOcclusionQueryuivNV(GLuint id, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetOcclusionQueryuivNV(GLuint id, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetOcclusionQueryuivNV(id, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetOcclusionQueryuivNV(GLuint id, GLenum pname, GLuint[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetOcclusionQueryuivNV(GLuint id, GLenum pname, GLuint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetOcclusionQueryuivNV(id, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region PointParameteriNV(GLenum pname, GLint param)

        /// <summary>
        /// 
        /// </summary>
        public static         void glPointParameteriNV(GLenum pname, GLint param)
        {
            Delegates.glPointParameteriNV(pname, param);
        }

        #endregion

        #region PointParameterivNV(GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glPointParameterivNV(GLenum pname, IntPtr parameters)
        {
            Delegates.glPointParameterivNV(pname, parameters);
        }

        #endregion

        #region PointParameterivNV(GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glPointParameterivNV(GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glPointParameterivNV(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region PointParameterivNV(GLenum pname, GLint[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glPointParameterivNV(GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glPointParameterivNV(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ActiveStencilFaceEXT(GLenum face)

        /// <summary>
        /// 
        /// </summary>
        public static         void glActiveStencilFaceEXT(GLenum face)
        {
            Delegates.glActiveStencilFaceEXT(face);
        }

        #endregion

        #region ElementPointerAPPLE(GLenum type, IntPtr pointer)

        /// <summary>
        /// 
        /// </summary>
        public static         void glElementPointerAPPLE(GLenum type, IntPtr pointer)
        {
            Delegates.glElementPointerAPPLE(type, pointer);
        }

        #endregion

        #region ElementPointerAPPLE(GLenum type, object pointer)

        /// <summary>
        /// 
        /// </summary>
        public static         void glElementPointerAPPLE(GLenum type, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glElementPointerAPPLE(type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region DrawElementArrayAPPLE(GLenum mode, GLint first, GLsizei count)

        /// <summary>
        /// 
        /// </summary>
        public static         void glDrawElementArrayAPPLE(GLenum mode, GLint first, GLsizei count)
        {
            Delegates.glDrawElementArrayAPPLE(mode, first, count);
        }

        #endregion

        #region DrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count)

        /// <summary>
        /// 
        /// </summary>
        public static         void glDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count)
        {
            Delegates.glDrawRangeElementArrayAPPLE(mode, start, end, first, count);
        }

        #endregion

        #region MultiDrawElementArrayAPPLE(GLenum mode, IntPtr first, IntPtr count, GLsizei primcount)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiDrawElementArrayAPPLE(GLenum mode, IntPtr first, IntPtr count, GLsizei primcount)
        {
            Delegates.glMultiDrawElementArrayAPPLE(mode, first, count, primcount);
        }

        #endregion

        #region MultiDrawElementArrayAPPLE(GLenum mode, IntPtr first, object count, GLsizei primcount)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiDrawElementArrayAPPLE(GLenum mode, IntPtr first, object count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawElementArrayAPPLE(mode, first, h0.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiDrawElementArrayAPPLE(GLenum mode, IntPtr first, GLsizei[] count, GLsizei primcount)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiDrawElementArrayAPPLE(GLenum mode, IntPtr first, GLsizei[] count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawElementArrayAPPLE(mode, first, h0.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiDrawElementArrayAPPLE(GLenum mode, object first, IntPtr count, GLsizei primcount)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiDrawElementArrayAPPLE(GLenum mode, object first, IntPtr count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawElementArrayAPPLE(mode, h0.AddrOfPinnedObject(), count, primcount);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiDrawElementArrayAPPLE(GLenum mode, object first, object count, GLsizei primcount)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiDrawElementArrayAPPLE(GLenum mode, object first, object count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawElementArrayAPPLE(mode, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region MultiDrawElementArrayAPPLE(GLenum mode, object first, GLsizei[] count, GLsizei primcount)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiDrawElementArrayAPPLE(GLenum mode, object first, GLsizei[] count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawElementArrayAPPLE(mode, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region MultiDrawElementArrayAPPLE(GLenum mode, GLint[] first, IntPtr count, GLsizei primcount)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiDrawElementArrayAPPLE(GLenum mode, GLint[] first, IntPtr count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawElementArrayAPPLE(mode, h0.AddrOfPinnedObject(), count, primcount);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiDrawElementArrayAPPLE(GLenum mode, GLint[] first, object count, GLsizei primcount)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiDrawElementArrayAPPLE(GLenum mode, GLint[] first, object count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawElementArrayAPPLE(mode, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region MultiDrawElementArrayAPPLE(GLenum mode, GLint[] first, GLsizei[] count, GLsizei primcount)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiDrawElementArrayAPPLE(GLenum mode, GLint[] first, GLsizei[] count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawElementArrayAPPLE(mode, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region MultiDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, IntPtr first, IntPtr count, GLsizei primcount)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, IntPtr first, IntPtr count, GLsizei primcount)
        {
            Delegates.glMultiDrawRangeElementArrayAPPLE(mode, start, end, first, count, primcount);
        }

        #endregion

        #region MultiDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, IntPtr first, object count, GLsizei primcount)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, IntPtr first, object count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawRangeElementArrayAPPLE(mode, start, end, first, h0.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, IntPtr first, GLsizei[] count, GLsizei primcount)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, IntPtr first, GLsizei[] count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawRangeElementArrayAPPLE(mode, start, end, first, h0.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, object first, IntPtr count, GLsizei primcount)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, object first, IntPtr count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawRangeElementArrayAPPLE(mode, start, end, h0.AddrOfPinnedObject(), count, primcount);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, object first, object count, GLsizei primcount)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, object first, object count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawRangeElementArrayAPPLE(mode, start, end, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region MultiDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, object first, GLsizei[] count, GLsizei primcount)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, object first, GLsizei[] count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawRangeElementArrayAPPLE(mode, start, end, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region MultiDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, GLint[] first, IntPtr count, GLsizei primcount)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, GLint[] first, IntPtr count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawRangeElementArrayAPPLE(mode, start, end, h0.AddrOfPinnedObject(), count, primcount);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, GLint[] first, object count, GLsizei primcount)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, GLint[] first, object count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawRangeElementArrayAPPLE(mode, start, end, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region MultiDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, GLint[] first, GLsizei[] count, GLsizei primcount)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, GLint[] first, GLsizei[] count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawRangeElementArrayAPPLE(mode, start, end, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GenFencesAPPLE(GLsizei n, IntPtr fences)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGenFencesAPPLE(GLsizei n, IntPtr fences)
        {
            Delegates.glGenFencesAPPLE(n, fences);
        }

        #endregion

        #region GenFencesAPPLE(GLsizei n, object fences)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGenFencesAPPLE(GLsizei n, object fences)
        {
            GCHandle h0 = GCHandle.Alloc(fences, GCHandleType.Pinned);
            try
            {
                Delegates.glGenFencesAPPLE(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GenFencesAPPLE(GLsizei n, GLuint[] fences)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGenFencesAPPLE(GLsizei n, GLuint[] fences)
        {
            GCHandle h0 = GCHandle.Alloc(fences, GCHandleType.Pinned);
            try
            {
                Delegates.glGenFencesAPPLE(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region DeleteFencesAPPLE(GLsizei n, IntPtr fences)

        /// <summary>
        /// 
        /// </summary>
        public static         void glDeleteFencesAPPLE(GLsizei n, IntPtr fences)
        {
            Delegates.glDeleteFencesAPPLE(n, fences);
        }

        #endregion

        #region DeleteFencesAPPLE(GLsizei n, object fences)

        /// <summary>
        /// 
        /// </summary>
        public static         void glDeleteFencesAPPLE(GLsizei n, object fences)
        {
            GCHandle h0 = GCHandle.Alloc(fences, GCHandleType.Pinned);
            try
            {
                Delegates.glDeleteFencesAPPLE(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region DeleteFencesAPPLE(GLsizei n, GLuint[] fences)

        /// <summary>
        /// 
        /// </summary>
        public static         void glDeleteFencesAPPLE(GLsizei n, GLuint[] fences)
        {
            GCHandle h0 = GCHandle.Alloc(fences, GCHandleType.Pinned);
            try
            {
                Delegates.glDeleteFencesAPPLE(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SetFenceAPPLE(GLuint fence)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSetFenceAPPLE(GLuint fence)
        {
            Delegates.glSetFenceAPPLE(fence);
        }

        #endregion

        #region IsFenceAPPLE(GLuint fence)

        /// <summary>
        /// 
        /// </summary>
        public static         GLboolean glIsFenceAPPLE(GLuint fence)
        {
            return Delegates.glIsFenceAPPLE(fence);
        }

        #endregion

        #region TestFenceAPPLE(GLuint fence)

        /// <summary>
        /// 
        /// </summary>
        public static         GLboolean glTestFenceAPPLE(GLuint fence)
        {
            return Delegates.glTestFenceAPPLE(fence);
        }

        #endregion

        #region FinishFenceAPPLE(GLuint fence)

        /// <summary>
        /// 
        /// </summary>
        public static         void glFinishFenceAPPLE(GLuint fence)
        {
            Delegates.glFinishFenceAPPLE(fence);
        }

        #endregion

        #region TestObjectAPPLE(GLenum @object, GLuint name)

        /// <summary>
        /// 
        /// </summary>
        public static         GLboolean glTestObjectAPPLE(GLenum @object, GLuint name)
        {
            return Delegates.glTestObjectAPPLE(@object, name);
        }

        #endregion

        #region FinishObjectAPPLE(GLenum @object, GLint name)

        /// <summary>
        /// 
        /// </summary>
        public static         void glFinishObjectAPPLE(GLenum @object, GLint name)
        {
            Delegates.glFinishObjectAPPLE(@object, name);
        }

        #endregion

        #region BindVertexArrayAPPLE(GLuint array)

        /// <summary>
        /// 
        /// </summary>
        public static         void glBindVertexArrayAPPLE(GLuint array)
        {
            Delegates.glBindVertexArrayAPPLE(array);
        }

        #endregion

        #region DeleteVertexArraysAPPLE(GLsizei n, IntPtr arrays)

        /// <summary>
        /// 
        /// </summary>
        public static         void glDeleteVertexArraysAPPLE(GLsizei n, IntPtr arrays)
        {
            Delegates.glDeleteVertexArraysAPPLE(n, arrays);
        }

        #endregion

        #region DeleteVertexArraysAPPLE(GLsizei n, object arrays)

        /// <summary>
        /// 
        /// </summary>
        public static         void glDeleteVertexArraysAPPLE(GLsizei n, object arrays)
        {
            GCHandle h0 = GCHandle.Alloc(arrays, GCHandleType.Pinned);
            try
            {
                Delegates.glDeleteVertexArraysAPPLE(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region DeleteVertexArraysAPPLE(GLsizei n, GLuint[] arrays)

        /// <summary>
        /// 
        /// </summary>
        public static         void glDeleteVertexArraysAPPLE(GLsizei n, GLuint[] arrays)
        {
            GCHandle h0 = GCHandle.Alloc(arrays, GCHandleType.Pinned);
            try
            {
                Delegates.glDeleteVertexArraysAPPLE(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GenVertexArraysAPPLE(GLsizei n, IntPtr arrays)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGenVertexArraysAPPLE(GLsizei n, IntPtr arrays)
        {
            Delegates.glGenVertexArraysAPPLE(n, arrays);
        }

        #endregion

        #region GenVertexArraysAPPLE(GLsizei n, object arrays)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGenVertexArraysAPPLE(GLsizei n, object arrays)
        {
            GCHandle h0 = GCHandle.Alloc(arrays, GCHandleType.Pinned);
            try
            {
                Delegates.glGenVertexArraysAPPLE(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GenVertexArraysAPPLE(GLsizei n, GLuint[] arrays)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGenVertexArraysAPPLE(GLsizei n, GLuint[] arrays)
        {
            GCHandle h0 = GCHandle.Alloc(arrays, GCHandleType.Pinned);
            try
            {
                Delegates.glGenVertexArraysAPPLE(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region IsVertexArrayAPPLE(GLuint array)

        /// <summary>
        /// 
        /// </summary>
        public static         GLboolean glIsVertexArrayAPPLE(GLuint array)
        {
            return Delegates.glIsVertexArrayAPPLE(array);
        }

        #endregion

        #region VertexArrayRangeAPPLE(GLsizei length, IntPtr pointer)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexArrayRangeAPPLE(GLsizei length, IntPtr pointer)
        {
            Delegates.glVertexArrayRangeAPPLE(length, pointer);
        }

        #endregion

        #region VertexArrayRangeAPPLE(GLsizei length, object pointer)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexArrayRangeAPPLE(GLsizei length, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexArrayRangeAPPLE(length, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region FlushVertexArrayRangeAPPLE(GLsizei length, IntPtr pointer)

        /// <summary>
        /// 
        /// </summary>
        public static         void glFlushVertexArrayRangeAPPLE(GLsizei length, IntPtr pointer)
        {
            Delegates.glFlushVertexArrayRangeAPPLE(length, pointer);
        }

        #endregion

        #region FlushVertexArrayRangeAPPLE(GLsizei length, object pointer)

        /// <summary>
        /// 
        /// </summary>
        public static         void glFlushVertexArrayRangeAPPLE(GLsizei length, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glFlushVertexArrayRangeAPPLE(length, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexArrayParameteriAPPLE(GLenum pname, GLint param)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexArrayParameteriAPPLE(GLenum pname, GLint param)
        {
            Delegates.glVertexArrayParameteriAPPLE(pname, param);
        }

        #endregion

        #region DrawBuffersATI(GLsizei n, IntPtr bufs)

        /// <summary>
        /// 
        /// </summary>
        public static         void glDrawBuffersATI(GLsizei n, IntPtr bufs)
        {
            Delegates.glDrawBuffersATI(n, bufs);
        }

        #endregion

        #region DrawBuffersATI(GLsizei n, object bufs)

        /// <summary>
        /// 
        /// </summary>
        public static         void glDrawBuffersATI(GLsizei n, object bufs)
        {
            GCHandle h0 = GCHandle.Alloc(bufs, GCHandleType.Pinned);
            try
            {
                Delegates.glDrawBuffersATI(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region DrawBuffersATI(GLsizei n, GLenum[] bufs)

        /// <summary>
        /// 
        /// </summary>
        public static         void glDrawBuffersATI(GLsizei n, GLenum[] bufs)
        {
            GCHandle h0 = GCHandle.Alloc(bufs, GCHandleType.Pinned);
            try
            {
                Delegates.glDrawBuffersATI(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ProgramNamedParameter4fNV(GLuint id, GLsizei len, IntPtr name, GLfloat x, GLfloat y, GLfloat z, GLfloat w)

        /// <summary>
        /// 
        /// </summary>
        public static         void glProgramNamedParameter4fNV(GLuint id, GLsizei len, IntPtr name, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
        {
            Delegates.glProgramNamedParameter4fNV(id, len, name, x, y, z, w);
        }

        #endregion

        #region ProgramNamedParameter4fNV(GLuint id, GLsizei len, object name, GLfloat x, GLfloat y, GLfloat z, GLfloat w)

        /// <summary>
        /// 
        /// </summary>
        public static         void glProgramNamedParameter4fNV(GLuint id, GLsizei len, object name, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramNamedParameter4fNV(id, len, h0.AddrOfPinnedObject(), x, y, z, w);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ProgramNamedParameter4fNV(GLuint id, GLsizei len, GLubyte[] name, GLfloat x, GLfloat y, GLfloat z, GLfloat w)

        /// <summary>
        /// 
        /// </summary>
        public static         void glProgramNamedParameter4fNV(GLuint id, GLsizei len, GLubyte[] name, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramNamedParameter4fNV(id, len, h0.AddrOfPinnedObject(), x, y, z, w);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ProgramNamedParameter4dNV(GLuint id, GLsizei len, IntPtr name, GLdouble x, GLdouble y, GLdouble z, GLdouble w)

        /// <summary>
        /// 
        /// </summary>
        public static         void glProgramNamedParameter4dNV(GLuint id, GLsizei len, IntPtr name, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
        {
            Delegates.glProgramNamedParameter4dNV(id, len, name, x, y, z, w);
        }

        #endregion

        #region ProgramNamedParameter4dNV(GLuint id, GLsizei len, object name, GLdouble x, GLdouble y, GLdouble z, GLdouble w)

        /// <summary>
        /// 
        /// </summary>
        public static         void glProgramNamedParameter4dNV(GLuint id, GLsizei len, object name, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramNamedParameter4dNV(id, len, h0.AddrOfPinnedObject(), x, y, z, w);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ProgramNamedParameter4dNV(GLuint id, GLsizei len, GLubyte[] name, GLdouble x, GLdouble y, GLdouble z, GLdouble w)

        /// <summary>
        /// 
        /// </summary>
        public static         void glProgramNamedParameter4dNV(GLuint id, GLsizei len, GLubyte[] name, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramNamedParameter4dNV(id, len, h0.AddrOfPinnedObject(), x, y, z, w);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ProgramNamedParameter4fvNV(GLuint id, GLsizei len, IntPtr name, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glProgramNamedParameter4fvNV(GLuint id, GLsizei len, IntPtr name, IntPtr v)
        {
            Delegates.glProgramNamedParameter4fvNV(id, len, name, v);
        }

        #endregion

        #region ProgramNamedParameter4fvNV(GLuint id, GLsizei len, IntPtr name, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glProgramNamedParameter4fvNV(GLuint id, GLsizei len, IntPtr name, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramNamedParameter4fvNV(id, len, name, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ProgramNamedParameter4fvNV(GLuint id, GLsizei len, IntPtr name, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glProgramNamedParameter4fvNV(GLuint id, GLsizei len, IntPtr name, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramNamedParameter4fvNV(id, len, name, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ProgramNamedParameter4fvNV(GLuint id, GLsizei len, object name, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glProgramNamedParameter4fvNV(GLuint id, GLsizei len, object name, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramNamedParameter4fvNV(id, len, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ProgramNamedParameter4fvNV(GLuint id, GLsizei len, object name, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glProgramNamedParameter4fvNV(GLuint id, GLsizei len, object name, object v)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramNamedParameter4fvNV(id, len, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ProgramNamedParameter4fvNV(GLuint id, GLsizei len, object name, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glProgramNamedParameter4fvNV(GLuint id, GLsizei len, object name, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramNamedParameter4fvNV(id, len, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ProgramNamedParameter4fvNV(GLuint id, GLsizei len, GLubyte[] name, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glProgramNamedParameter4fvNV(GLuint id, GLsizei len, GLubyte[] name, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramNamedParameter4fvNV(id, len, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ProgramNamedParameter4fvNV(GLuint id, GLsizei len, GLubyte[] name, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glProgramNamedParameter4fvNV(GLuint id, GLsizei len, GLubyte[] name, object v)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramNamedParameter4fvNV(id, len, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ProgramNamedParameter4fvNV(GLuint id, GLsizei len, GLubyte[] name, GLfloat[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glProgramNamedParameter4fvNV(GLuint id, GLsizei len, GLubyte[] name, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramNamedParameter4fvNV(id, len, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ProgramNamedParameter4dvNV(GLuint id, GLsizei len, IntPtr name, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glProgramNamedParameter4dvNV(GLuint id, GLsizei len, IntPtr name, IntPtr v)
        {
            Delegates.glProgramNamedParameter4dvNV(id, len, name, v);
        }

        #endregion

        #region ProgramNamedParameter4dvNV(GLuint id, GLsizei len, IntPtr name, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glProgramNamedParameter4dvNV(GLuint id, GLsizei len, IntPtr name, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramNamedParameter4dvNV(id, len, name, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ProgramNamedParameter4dvNV(GLuint id, GLsizei len, IntPtr name, GLdouble[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glProgramNamedParameter4dvNV(GLuint id, GLsizei len, IntPtr name, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramNamedParameter4dvNV(id, len, name, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ProgramNamedParameter4dvNV(GLuint id, GLsizei len, object name, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glProgramNamedParameter4dvNV(GLuint id, GLsizei len, object name, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramNamedParameter4dvNV(id, len, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ProgramNamedParameter4dvNV(GLuint id, GLsizei len, object name, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glProgramNamedParameter4dvNV(GLuint id, GLsizei len, object name, object v)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramNamedParameter4dvNV(id, len, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ProgramNamedParameter4dvNV(GLuint id, GLsizei len, object name, GLdouble[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glProgramNamedParameter4dvNV(GLuint id, GLsizei len, object name, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramNamedParameter4dvNV(id, len, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ProgramNamedParameter4dvNV(GLuint id, GLsizei len, GLubyte[] name, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glProgramNamedParameter4dvNV(GLuint id, GLsizei len, GLubyte[] name, IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramNamedParameter4dvNV(id, len, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ProgramNamedParameter4dvNV(GLuint id, GLsizei len, GLubyte[] name, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glProgramNamedParameter4dvNV(GLuint id, GLsizei len, GLubyte[] name, object v)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramNamedParameter4dvNV(id, len, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region ProgramNamedParameter4dvNV(GLuint id, GLsizei len, GLubyte[] name, GLdouble[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glProgramNamedParameter4dvNV(GLuint id, GLsizei len, GLubyte[] name, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramNamedParameter4dvNV(id, len, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetProgramNamedParameterfvNV(GLuint id, GLsizei len, IntPtr name, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetProgramNamedParameterfvNV(GLuint id, GLsizei len, IntPtr name, IntPtr parameters)
        {
            Delegates.glGetProgramNamedParameterfvNV(id, len, name, parameters);
        }

        #endregion

        #region GetProgramNamedParameterfvNV(GLuint id, GLsizei len, IntPtr name, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetProgramNamedParameterfvNV(GLuint id, GLsizei len, IntPtr name, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramNamedParameterfvNV(id, len, name, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetProgramNamedParameterfvNV(GLuint id, GLsizei len, IntPtr name, GLfloat[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetProgramNamedParameterfvNV(GLuint id, GLsizei len, IntPtr name, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramNamedParameterfvNV(id, len, name, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetProgramNamedParameterfvNV(GLuint id, GLsizei len, object name, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetProgramNamedParameterfvNV(GLuint id, GLsizei len, object name, IntPtr parameters)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramNamedParameterfvNV(id, len, h0.AddrOfPinnedObject(), parameters);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetProgramNamedParameterfvNV(GLuint id, GLsizei len, object name, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetProgramNamedParameterfvNV(GLuint id, GLsizei len, object name, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramNamedParameterfvNV(id, len, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetProgramNamedParameterfvNV(GLuint id, GLsizei len, object name, GLfloat[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetProgramNamedParameterfvNV(GLuint id, GLsizei len, object name, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramNamedParameterfvNV(id, len, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetProgramNamedParameterfvNV(GLuint id, GLsizei len, GLubyte[] name, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetProgramNamedParameterfvNV(GLuint id, GLsizei len, GLubyte[] name, IntPtr parameters)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramNamedParameterfvNV(id, len, h0.AddrOfPinnedObject(), parameters);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetProgramNamedParameterfvNV(GLuint id, GLsizei len, GLubyte[] name, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetProgramNamedParameterfvNV(GLuint id, GLsizei len, GLubyte[] name, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramNamedParameterfvNV(id, len, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetProgramNamedParameterfvNV(GLuint id, GLsizei len, GLubyte[] name, GLfloat[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetProgramNamedParameterfvNV(GLuint id, GLsizei len, GLubyte[] name, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramNamedParameterfvNV(id, len, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetProgramNamedParameterdvNV(GLuint id, GLsizei len, IntPtr name, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetProgramNamedParameterdvNV(GLuint id, GLsizei len, IntPtr name, IntPtr parameters)
        {
            Delegates.glGetProgramNamedParameterdvNV(id, len, name, parameters);
        }

        #endregion

        #region GetProgramNamedParameterdvNV(GLuint id, GLsizei len, IntPtr name, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetProgramNamedParameterdvNV(GLuint id, GLsizei len, IntPtr name, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramNamedParameterdvNV(id, len, name, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetProgramNamedParameterdvNV(GLuint id, GLsizei len, IntPtr name, GLdouble[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetProgramNamedParameterdvNV(GLuint id, GLsizei len, IntPtr name, GLdouble[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramNamedParameterdvNV(id, len, name, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetProgramNamedParameterdvNV(GLuint id, GLsizei len, object name, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetProgramNamedParameterdvNV(GLuint id, GLsizei len, object name, IntPtr parameters)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramNamedParameterdvNV(id, len, h0.AddrOfPinnedObject(), parameters);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetProgramNamedParameterdvNV(GLuint id, GLsizei len, object name, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetProgramNamedParameterdvNV(GLuint id, GLsizei len, object name, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramNamedParameterdvNV(id, len, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetProgramNamedParameterdvNV(GLuint id, GLsizei len, object name, GLdouble[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetProgramNamedParameterdvNV(GLuint id, GLsizei len, object name, GLdouble[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramNamedParameterdvNV(id, len, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetProgramNamedParameterdvNV(GLuint id, GLsizei len, GLubyte[] name, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetProgramNamedParameterdvNV(GLuint id, GLsizei len, GLubyte[] name, IntPtr parameters)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramNamedParameterdvNV(id, len, h0.AddrOfPinnedObject(), parameters);
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetProgramNamedParameterdvNV(GLuint id, GLsizei len, GLubyte[] name, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetProgramNamedParameterdvNV(GLuint id, GLsizei len, GLubyte[] name, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramNamedParameterdvNV(id, len, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region GetProgramNamedParameterdvNV(GLuint id, GLsizei len, GLubyte[] name, GLdouble[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetProgramNamedParameterdvNV(GLuint id, GLsizei len, GLubyte[] name, GLdouble[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramNamedParameterdvNV(id, len, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h1.Free();
                h0.Free();
            }
        }

        #endregion

        #region Vertex2hNV(GLhalfNV x, GLhalfNV y)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertex2hNV(GLhalfNV x, GLhalfNV y)
        {
            Delegates.glVertex2hNV(x, y);
        }

        #endregion

        #region Vertex2hvNV(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertex2hvNV(IntPtr v)
        {
            Delegates.glVertex2hvNV(v);
        }

        #endregion

        #region Vertex2hvNV(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertex2hvNV(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertex2hvNV(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Vertex2hvNV(GLhalfNV[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertex2hvNV(GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertex2hvNV(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Vertex3hNV(GLhalfNV x, GLhalfNV y, GLhalfNV z)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertex3hNV(GLhalfNV x, GLhalfNV y, GLhalfNV z)
        {
            Delegates.glVertex3hNV(x, y, z);
        }

        #endregion

        #region Vertex3hvNV(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertex3hvNV(IntPtr v)
        {
            Delegates.glVertex3hvNV(v);
        }

        #endregion

        #region Vertex3hvNV(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertex3hvNV(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertex3hvNV(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Vertex3hvNV(GLhalfNV[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertex3hvNV(GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertex3hvNV(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Vertex4hNV(GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertex4hNV(GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w)
        {
            Delegates.glVertex4hNV(x, y, z, w);
        }

        #endregion

        #region Vertex4hvNV(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertex4hvNV(IntPtr v)
        {
            Delegates.glVertex4hvNV(v);
        }

        #endregion

        #region Vertex4hvNV(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertex4hvNV(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertex4hvNV(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Vertex4hvNV(GLhalfNV[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertex4hvNV(GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertex4hvNV(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Normal3hNV(GLhalfNV nx, GLhalfNV ny, GLhalfNV nz)

        /// <summary>
        /// 
        /// </summary>
        public static         void glNormal3hNV(GLhalfNV nx, GLhalfNV ny, GLhalfNV nz)
        {
            Delegates.glNormal3hNV(nx, ny, nz);
        }

        #endregion

        #region Normal3hvNV(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glNormal3hvNV(IntPtr v)
        {
            Delegates.glNormal3hvNV(v);
        }

        #endregion

        #region Normal3hvNV(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glNormal3hvNV(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glNormal3hvNV(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Normal3hvNV(GLhalfNV[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glNormal3hvNV(GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glNormal3hvNV(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color3hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor3hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue)
        {
            Delegates.glColor3hNV(red, green, blue);
        }

        #endregion

        #region Color3hvNV(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor3hvNV(IntPtr v)
        {
            Delegates.glColor3hvNV(v);
        }

        #endregion

        #region Color3hvNV(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor3hvNV(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor3hvNV(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color3hvNV(GLhalfNV[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor3hvNV(GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor3hvNV(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color4hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue, GLhalfNV alpha)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor4hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue, GLhalfNV alpha)
        {
            Delegates.glColor4hNV(red, green, blue, alpha);
        }

        #endregion

        #region Color4hvNV(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor4hvNV(IntPtr v)
        {
            Delegates.glColor4hvNV(v);
        }

        #endregion

        #region Color4hvNV(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor4hvNV(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4hvNV(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region Color4hvNV(GLhalfNV[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glColor4hvNV(GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4hvNV(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord1hNV(GLhalfNV s)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord1hNV(GLhalfNV s)
        {
            Delegates.glTexCoord1hNV(s);
        }

        #endregion

        #region TexCoord1hvNV(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord1hvNV(IntPtr v)
        {
            Delegates.glTexCoord1hvNV(v);
        }

        #endregion

        #region TexCoord1hvNV(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord1hvNV(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord1hvNV(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord1hvNV(GLhalfNV[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord1hvNV(GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord1hvNV(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2hNV(GLhalfNV s, GLhalfNV t)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2hNV(GLhalfNV s, GLhalfNV t)
        {
            Delegates.glTexCoord2hNV(s, t);
        }

        #endregion

        #region TexCoord2hvNV(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2hvNV(IntPtr v)
        {
            Delegates.glTexCoord2hvNV(v);
        }

        #endregion

        #region TexCoord2hvNV(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2hvNV(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2hvNV(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord2hvNV(GLhalfNV[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord2hvNV(GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2hvNV(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord3hNV(GLhalfNV s, GLhalfNV t, GLhalfNV r)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord3hNV(GLhalfNV s, GLhalfNV t, GLhalfNV r)
        {
            Delegates.glTexCoord3hNV(s, t, r);
        }

        #endregion

        #region TexCoord3hvNV(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord3hvNV(IntPtr v)
        {
            Delegates.glTexCoord3hvNV(v);
        }

        #endregion

        #region TexCoord3hvNV(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord3hvNV(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord3hvNV(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord3hvNV(GLhalfNV[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord3hvNV(GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord3hvNV(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4hNV(GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4hNV(GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q)
        {
            Delegates.glTexCoord4hNV(s, t, r, q);
        }

        #endregion

        #region TexCoord4hvNV(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4hvNV(IntPtr v)
        {
            Delegates.glTexCoord4hvNV(v);
        }

        #endregion

        #region TexCoord4hvNV(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4hvNV(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4hvNV(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region TexCoord4hvNV(GLhalfNV[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glTexCoord4hvNV(GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4hvNV(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord1hNV(GLenum target, GLhalfNV s)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord1hNV(GLenum target, GLhalfNV s)
        {
            Delegates.glMultiTexCoord1hNV(target, s);
        }

        #endregion

        #region MultiTexCoord1hvNV(GLenum target, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord1hvNV(GLenum target, IntPtr v)
        {
            Delegates.glMultiTexCoord1hvNV(target, v);
        }

        #endregion

        #region MultiTexCoord1hvNV(GLenum target, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord1hvNV(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord1hvNV(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord1hvNV(GLenum target, GLhalfNV[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord1hvNV(GLenum target, GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord1hvNV(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord2hNV(GLenum target, GLhalfNV s, GLhalfNV t)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord2hNV(GLenum target, GLhalfNV s, GLhalfNV t)
        {
            Delegates.glMultiTexCoord2hNV(target, s, t);
        }

        #endregion

        #region MultiTexCoord2hvNV(GLenum target, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord2hvNV(GLenum target, IntPtr v)
        {
            Delegates.glMultiTexCoord2hvNV(target, v);
        }

        #endregion

        #region MultiTexCoord2hvNV(GLenum target, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord2hvNV(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord2hvNV(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord2hvNV(GLenum target, GLhalfNV[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord2hvNV(GLenum target, GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord2hvNV(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord3hNV(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord3hNV(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r)
        {
            Delegates.glMultiTexCoord3hNV(target, s, t, r);
        }

        #endregion

        #region MultiTexCoord3hvNV(GLenum target, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord3hvNV(GLenum target, IntPtr v)
        {
            Delegates.glMultiTexCoord3hvNV(target, v);
        }

        #endregion

        #region MultiTexCoord3hvNV(GLenum target, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord3hvNV(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord3hvNV(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord3hvNV(GLenum target, GLhalfNV[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord3hvNV(GLenum target, GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord3hvNV(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord4hNV(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord4hNV(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q)
        {
            Delegates.glMultiTexCoord4hNV(target, s, t, r, q);
        }

        #endregion

        #region MultiTexCoord4hvNV(GLenum target, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord4hvNV(GLenum target, IntPtr v)
        {
            Delegates.glMultiTexCoord4hvNV(target, v);
        }

        #endregion

        #region MultiTexCoord4hvNV(GLenum target, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord4hvNV(GLenum target, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord4hvNV(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region MultiTexCoord4hvNV(GLenum target, GLhalfNV[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glMultiTexCoord4hvNV(GLenum target, GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord4hvNV(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region FogCoordhNV(GLhalfNV fog)

        /// <summary>
        /// 
        /// </summary>
        public static         void glFogCoordhNV(GLhalfNV fog)
        {
            Delegates.glFogCoordhNV(fog);
        }

        #endregion

        #region FogCoordhvNV(IntPtr fog)

        /// <summary>
        /// 
        /// </summary>
        public static         void glFogCoordhvNV(IntPtr fog)
        {
            Delegates.glFogCoordhvNV(fog);
        }

        #endregion

        #region FogCoordhvNV(object fog)

        /// <summary>
        /// 
        /// </summary>
        public static         void glFogCoordhvNV(object fog)
        {
            GCHandle h0 = GCHandle.Alloc(fog, GCHandleType.Pinned);
            try
            {
                Delegates.glFogCoordhvNV(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region FogCoordhvNV(GLhalfNV[] fog)

        /// <summary>
        /// 
        /// </summary>
        public static         void glFogCoordhvNV(GLhalfNV[] fog)
        {
            GCHandle h0 = GCHandle.Alloc(fog, GCHandleType.Pinned);
            try
            {
                Delegates.glFogCoordhvNV(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SecondaryColor3hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSecondaryColor3hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue)
        {
            Delegates.glSecondaryColor3hNV(red, green, blue);
        }

        #endregion

        #region SecondaryColor3hvNV(IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSecondaryColor3hvNV(IntPtr v)
        {
            Delegates.glSecondaryColor3hvNV(v);
        }

        #endregion

        #region SecondaryColor3hvNV(object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSecondaryColor3hvNV(object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glSecondaryColor3hvNV(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region SecondaryColor3hvNV(GLhalfNV[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glSecondaryColor3hvNV(GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glSecondaryColor3hvNV(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexWeighthNV(GLhalfNV weight)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexWeighthNV(GLhalfNV weight)
        {
            Delegates.glVertexWeighthNV(weight);
        }

        #endregion

        #region VertexWeighthvNV(IntPtr weight)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexWeighthvNV(IntPtr weight)
        {
            Delegates.glVertexWeighthvNV(weight);
        }

        #endregion

        #region VertexWeighthvNV(object weight)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexWeighthvNV(object weight)
        {
            GCHandle h0 = GCHandle.Alloc(weight, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexWeighthvNV(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexWeighthvNV(GLhalfNV[] weight)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexWeighthvNV(GLhalfNV[] weight)
        {
            GCHandle h0 = GCHandle.Alloc(weight, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexWeighthvNV(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib1hNV(GLuint index, GLhalfNV x)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib1hNV(GLuint index, GLhalfNV x)
        {
            Delegates.glVertexAttrib1hNV(index, x);
        }

        #endregion

        #region VertexAttrib1hvNV(GLuint index, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib1hvNV(GLuint index, IntPtr v)
        {
            Delegates.glVertexAttrib1hvNV(index, v);
        }

        #endregion

        #region VertexAttrib1hvNV(GLuint index, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib1hvNV(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib1hvNV(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib1hvNV(GLuint index, GLhalfNV[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib1hvNV(GLuint index, GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib1hvNV(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib2hNV(GLuint index, GLhalfNV x, GLhalfNV y)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib2hNV(GLuint index, GLhalfNV x, GLhalfNV y)
        {
            Delegates.glVertexAttrib2hNV(index, x, y);
        }

        #endregion

        #region VertexAttrib2hvNV(GLuint index, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib2hvNV(GLuint index, IntPtr v)
        {
            Delegates.glVertexAttrib2hvNV(index, v);
        }

        #endregion

        #region VertexAttrib2hvNV(GLuint index, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib2hvNV(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib2hvNV(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib2hvNV(GLuint index, GLhalfNV[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib2hvNV(GLuint index, GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib2hvNV(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib3hNV(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib3hNV(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z)
        {
            Delegates.glVertexAttrib3hNV(index, x, y, z);
        }

        #endregion

        #region VertexAttrib3hvNV(GLuint index, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib3hvNV(GLuint index, IntPtr v)
        {
            Delegates.glVertexAttrib3hvNV(index, v);
        }

        #endregion

        #region VertexAttrib3hvNV(GLuint index, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib3hvNV(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib3hvNV(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib3hvNV(GLuint index, GLhalfNV[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib3hvNV(GLuint index, GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib3hvNV(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4hNV(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4hNV(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w)
        {
            Delegates.glVertexAttrib4hNV(index, x, y, z, w);
        }

        #endregion

        #region VertexAttrib4hvNV(GLuint index, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4hvNV(GLuint index, IntPtr v)
        {
            Delegates.glVertexAttrib4hvNV(index, v);
        }

        #endregion

        #region VertexAttrib4hvNV(GLuint index, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4hvNV(GLuint index, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4hvNV(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttrib4hvNV(GLuint index, GLhalfNV[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttrib4hvNV(GLuint index, GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4hvNV(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttribs1hvNV(GLuint index, GLsizei n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttribs1hvNV(GLuint index, GLsizei n, IntPtr v)
        {
            Delegates.glVertexAttribs1hvNV(index, n, v);
        }

        #endregion

        #region VertexAttribs1hvNV(GLuint index, GLsizei n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttribs1hvNV(GLuint index, GLsizei n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribs1hvNV(index, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttribs1hvNV(GLuint index, GLsizei n, GLhalfNV[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttribs1hvNV(GLuint index, GLsizei n, GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribs1hvNV(index, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttribs2hvNV(GLuint index, GLsizei n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttribs2hvNV(GLuint index, GLsizei n, IntPtr v)
        {
            Delegates.glVertexAttribs2hvNV(index, n, v);
        }

        #endregion

        #region VertexAttribs2hvNV(GLuint index, GLsizei n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttribs2hvNV(GLuint index, GLsizei n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribs2hvNV(index, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttribs2hvNV(GLuint index, GLsizei n, GLhalfNV[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttribs2hvNV(GLuint index, GLsizei n, GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribs2hvNV(index, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttribs3hvNV(GLuint index, GLsizei n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttribs3hvNV(GLuint index, GLsizei n, IntPtr v)
        {
            Delegates.glVertexAttribs3hvNV(index, n, v);
        }

        #endregion

        #region VertexAttribs3hvNV(GLuint index, GLsizei n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttribs3hvNV(GLuint index, GLsizei n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribs3hvNV(index, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttribs3hvNV(GLuint index, GLsizei n, GLhalfNV[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttribs3hvNV(GLuint index, GLsizei n, GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribs3hvNV(index, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttribs4hvNV(GLuint index, GLsizei n, IntPtr v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttribs4hvNV(GLuint index, GLsizei n, IntPtr v)
        {
            Delegates.glVertexAttribs4hvNV(index, n, v);
        }

        #endregion

        #region VertexAttribs4hvNV(GLuint index, GLsizei n, object v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttribs4hvNV(GLuint index, GLsizei n, object v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribs4hvNV(index, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region VertexAttribs4hvNV(GLuint index, GLsizei n, GLhalfNV[] v)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttribs4hvNV(GLuint index, GLsizei n, GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribs4hvNV(index, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region PixelDataRangeNV(GLenum target, GLsizei length, IntPtr pointer)

        /// <summary>
        /// 
        /// </summary>
        public static         void glPixelDataRangeNV(GLenum target, GLsizei length, IntPtr pointer)
        {
            Delegates.glPixelDataRangeNV(target, length, pointer);
        }

        #endregion

        #region PixelDataRangeNV(GLenum target, GLsizei length, object pointer)

        /// <summary>
        /// 
        /// </summary>
        public static         void glPixelDataRangeNV(GLenum target, GLsizei length, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glPixelDataRangeNV(target, length, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region FlushPixelDataRangeNV(GLenum target)

        /// <summary>
        /// 
        /// </summary>
        public static         void glFlushPixelDataRangeNV(GLenum target)
        {
            Delegates.glFlushPixelDataRangeNV(target);
        }

        #endregion

        #region PrimitiveRestartNV()

        /// <summary>
        /// 
        /// </summary>
        public static         void glPrimitiveRestartNV()
        {
            Delegates.glPrimitiveRestartNV();
        }

        #endregion

        #region PrimitiveRestartIndexNV(GLuint index)

        /// <summary>
        /// 
        /// </summary>
        public static         void glPrimitiveRestartIndexNV(GLuint index)
        {
            Delegates.glPrimitiveRestartIndexNV(index);
        }

        #endregion

        #region MapObjectBufferATI(GLuint buffer)

        /// <summary>
        /// 
        /// </summary>
        public static         IntPtr glMapObjectBufferATI(GLuint buffer)
        {
            return Delegates.glMapObjectBufferATI(buffer);
        }

        #endregion

        #region UnmapObjectBufferATI(GLuint buffer)

        /// <summary>
        /// 
        /// </summary>
        public static         void glUnmapObjectBufferATI(GLuint buffer)
        {
            Delegates.glUnmapObjectBufferATI(buffer);
        }

        #endregion

        #region StencilOpSeparateATI(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass)

        /// <summary>
        /// 
        /// </summary>
        public static         void glStencilOpSeparateATI(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass)
        {
            Delegates.glStencilOpSeparateATI(face, sfail, dpfail, dppass);
        }

        #endregion

        #region StencilFuncSeparateATI(GLenum frontfunc, GLenum backfunc, GLint reference, GLuint mask)

        /// <summary>
        /// 
        /// </summary>
        public static         void glStencilFuncSeparateATI(GLenum frontfunc, GLenum backfunc, GLint reference, GLuint mask)
        {
            Delegates.glStencilFuncSeparateATI(frontfunc, backfunc, reference, mask);
        }

        #endregion

        #region VertexAttribArrayObjectATI(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset)

        /// <summary>
        /// 
        /// </summary>
        public static         void glVertexAttribArrayObjectATI(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset)
        {
            Delegates.glVertexAttribArrayObjectATI(index, size, type, normalized, stride, buffer, offset);
        }

        #endregion

        #region GetVertexAttribArrayObjectfvATI(GLuint index, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetVertexAttribArrayObjectfvATI(GLuint index, GLenum pname, IntPtr parameters)
        {
            Delegates.glGetVertexAttribArrayObjectfvATI(index, pname, parameters);
        }

        #endregion

        #region GetVertexAttribArrayObjectfvATI(GLuint index, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetVertexAttribArrayObjectfvATI(GLuint index, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVertexAttribArrayObjectfvATI(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetVertexAttribArrayObjectfvATI(GLuint index, GLenum pname, GLfloat[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetVertexAttribArrayObjectfvATI(GLuint index, GLenum pname, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVertexAttribArrayObjectfvATI(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetVertexAttribArrayObjectivATI(GLuint index, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetVertexAttribArrayObjectivATI(GLuint index, GLenum pname, IntPtr parameters)
        {
            Delegates.glGetVertexAttribArrayObjectivATI(index, pname, parameters);
        }

        #endregion

        #region GetVertexAttribArrayObjectivATI(GLuint index, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetVertexAttribArrayObjectivATI(GLuint index, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVertexAttribArrayObjectivATI(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetVertexAttribArrayObjectivATI(GLuint index, GLenum pname, GLint[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetVertexAttribArrayObjectivATI(GLuint index, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVertexAttribArrayObjectivATI(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region DepthBoundsEXT(GLclampd zmin, GLclampd zmax)

        /// <summary>
        /// 
        /// </summary>
        public static         void glDepthBoundsEXT(GLclampd zmin, GLclampd zmax)
        {
            Delegates.glDepthBoundsEXT(zmin, zmax);
        }

        #endregion

        #region BlendEquationSeparateEXT(GLenum modeRGB, GLenum modeAlpha)

        /// <summary>
        /// 
        /// </summary>
        public static         void glBlendEquationSeparateEXT(GLenum modeRGB, GLenum modeAlpha)
        {
            Delegates.glBlendEquationSeparateEXT(modeRGB, modeAlpha);
        }

        #endregion

        #region IsRenderbufferEXT(GLuint renderbuffer)

        /// <summary>
        /// 
        /// </summary>
        public static         GLboolean glIsRenderbufferEXT(GLuint renderbuffer)
        {
            return Delegates.glIsRenderbufferEXT(renderbuffer);
        }

        #endregion

        #region BindRenderbufferEXT(GLenum target, GLuint renderbuffer)

        /// <summary>
        /// 
        /// </summary>
        public static         void glBindRenderbufferEXT(GLenum target, GLuint renderbuffer)
        {
            Delegates.glBindRenderbufferEXT(target, renderbuffer);
        }

        #endregion

        #region DeleteRenderbuffersEXT(GLsizei n, IntPtr renderbuffers)

        /// <summary>
        /// 
        /// </summary>
        public static         void glDeleteRenderbuffersEXT(GLsizei n, IntPtr renderbuffers)
        {
            Delegates.glDeleteRenderbuffersEXT(n, renderbuffers);
        }

        #endregion

        #region DeleteRenderbuffersEXT(GLsizei n, object renderbuffers)

        /// <summary>
        /// 
        /// </summary>
        public static         void glDeleteRenderbuffersEXT(GLsizei n, object renderbuffers)
        {
            GCHandle h0 = GCHandle.Alloc(renderbuffers, GCHandleType.Pinned);
            try
            {
                Delegates.glDeleteRenderbuffersEXT(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region DeleteRenderbuffersEXT(GLsizei n, GLuint[] renderbuffers)

        /// <summary>
        /// 
        /// </summary>
        public static         void glDeleteRenderbuffersEXT(GLsizei n, GLuint[] renderbuffers)
        {
            GCHandle h0 = GCHandle.Alloc(renderbuffers, GCHandleType.Pinned);
            try
            {
                Delegates.glDeleteRenderbuffersEXT(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GenRenderbuffersEXT(GLsizei n, IntPtr renderbuffers)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGenRenderbuffersEXT(GLsizei n, IntPtr renderbuffers)
        {
            Delegates.glGenRenderbuffersEXT(n, renderbuffers);
        }

        #endregion

        #region GenRenderbuffersEXT(GLsizei n, object renderbuffers)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGenRenderbuffersEXT(GLsizei n, object renderbuffers)
        {
            GCHandle h0 = GCHandle.Alloc(renderbuffers, GCHandleType.Pinned);
            try
            {
                Delegates.glGenRenderbuffersEXT(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GenRenderbuffersEXT(GLsizei n, GLuint[] renderbuffers)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGenRenderbuffersEXT(GLsizei n, GLuint[] renderbuffers)
        {
            GCHandle h0 = GCHandle.Alloc(renderbuffers, GCHandleType.Pinned);
            try
            {
                Delegates.glGenRenderbuffersEXT(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region RenderbufferStorageEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height)

        /// <summary>
        /// 
        /// </summary>
        public static         void glRenderbufferStorageEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height)
        {
            Delegates.glRenderbufferStorageEXT(target, internalformat, width, height);
        }

        #endregion

        #region GetRenderbufferParameterivEXT(GLenum target, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetRenderbufferParameterivEXT(GLenum target, GLenum pname, IntPtr parameters)
        {
            Delegates.glGetRenderbufferParameterivEXT(target, pname, parameters);
        }

        #endregion

        #region GetRenderbufferParameterivEXT(GLenum target, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetRenderbufferParameterivEXT(GLenum target, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetRenderbufferParameterivEXT(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetRenderbufferParameterivEXT(GLenum target, GLenum pname, GLint[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetRenderbufferParameterivEXT(GLenum target, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetRenderbufferParameterivEXT(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region IsFramebufferEXT(GLuint framebuffer)

        /// <summary>
        /// 
        /// </summary>
        public static         GLboolean glIsFramebufferEXT(GLuint framebuffer)
        {
            return Delegates.glIsFramebufferEXT(framebuffer);
        }

        #endregion

        #region BindFramebufferEXT(GLenum target, GLuint framebuffer)

        /// <summary>
        /// 
        /// </summary>
        public static         void glBindFramebufferEXT(GLenum target, GLuint framebuffer)
        {
            Delegates.glBindFramebufferEXT(target, framebuffer);
        }

        #endregion

        #region DeleteFramebuffersEXT(GLsizei n, IntPtr framebuffers)

        /// <summary>
        /// 
        /// </summary>
        public static         void glDeleteFramebuffersEXT(GLsizei n, IntPtr framebuffers)
        {
            Delegates.glDeleteFramebuffersEXT(n, framebuffers);
        }

        #endregion

        #region DeleteFramebuffersEXT(GLsizei n, object framebuffers)

        /// <summary>
        /// 
        /// </summary>
        public static         void glDeleteFramebuffersEXT(GLsizei n, object framebuffers)
        {
            GCHandle h0 = GCHandle.Alloc(framebuffers, GCHandleType.Pinned);
            try
            {
                Delegates.glDeleteFramebuffersEXT(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region DeleteFramebuffersEXT(GLsizei n, GLuint[] framebuffers)

        /// <summary>
        /// 
        /// </summary>
        public static         void glDeleteFramebuffersEXT(GLsizei n, GLuint[] framebuffers)
        {
            GCHandle h0 = GCHandle.Alloc(framebuffers, GCHandleType.Pinned);
            try
            {
                Delegates.glDeleteFramebuffersEXT(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GenFramebuffersEXT(GLsizei n, IntPtr framebuffers)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGenFramebuffersEXT(GLsizei n, IntPtr framebuffers)
        {
            Delegates.glGenFramebuffersEXT(n, framebuffers);
        }

        #endregion

        #region GenFramebuffersEXT(GLsizei n, object framebuffers)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGenFramebuffersEXT(GLsizei n, object framebuffers)
        {
            GCHandle h0 = GCHandle.Alloc(framebuffers, GCHandleType.Pinned);
            try
            {
                Delegates.glGenFramebuffersEXT(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GenFramebuffersEXT(GLsizei n, GLuint[] framebuffers)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGenFramebuffersEXT(GLsizei n, GLuint[] framebuffers)
        {
            GCHandle h0 = GCHandle.Alloc(framebuffers, GCHandleType.Pinned);
            try
            {
                Delegates.glGenFramebuffersEXT(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region CheckFramebufferStatusEXT(GLenum target)

        /// <summary>
        /// 
        /// </summary>
        public static         GLenum glCheckFramebufferStatusEXT(GLenum target)
        {
            return Delegates.glCheckFramebufferStatusEXT(target);
        }

        #endregion

        #region FramebufferTexture1DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)

        /// <summary>
        /// 
        /// </summary>
        public static         void glFramebufferTexture1DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
        {
            Delegates.glFramebufferTexture1DEXT(target, attachment, textarget, texture, level);
        }

        #endregion

        #region FramebufferTexture2DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)

        /// <summary>
        /// 
        /// </summary>
        public static         void glFramebufferTexture2DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
        {
            Delegates.glFramebufferTexture2DEXT(target, attachment, textarget, texture, level);
        }

        #endregion

        #region FramebufferTexture3DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)

        /// <summary>
        /// 
        /// </summary>
        public static         void glFramebufferTexture3DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)
        {
            Delegates.glFramebufferTexture3DEXT(target, attachment, textarget, texture, level, zoffset);
        }

        #endregion

        #region FramebufferRenderbufferEXT(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)

        /// <summary>
        /// 
        /// </summary>
        public static         void glFramebufferRenderbufferEXT(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
        {
            Delegates.glFramebufferRenderbufferEXT(target, attachment, renderbuffertarget, renderbuffer);
        }

        #endregion

        #region GetFramebufferAttachmentParameterivEXT(GLenum target, GLenum attachment, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetFramebufferAttachmentParameterivEXT(GLenum target, GLenum attachment, GLenum pname, IntPtr parameters)
        {
            Delegates.glGetFramebufferAttachmentParameterivEXT(target, attachment, pname, parameters);
        }

        #endregion

        #region GetFramebufferAttachmentParameterivEXT(GLenum target, GLenum attachment, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetFramebufferAttachmentParameterivEXT(GLenum target, GLenum attachment, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetFramebufferAttachmentParameterivEXT(target, attachment, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetFramebufferAttachmentParameterivEXT(GLenum target, GLenum attachment, GLenum pname, GLint[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetFramebufferAttachmentParameterivEXT(GLenum target, GLenum attachment, GLenum pname, GLint[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetFramebufferAttachmentParameterivEXT(target, attachment, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GenerateMipmapEXT(GLenum target)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGenerateMipmapEXT(GLenum target)
        {
            Delegates.glGenerateMipmapEXT(target);
        }

        #endregion

        #region StringMarkerGREMEDY(GLsizei len, IntPtr @string)

        /// <summary>
        /// 
        /// </summary>
        public static         void glStringMarkerGREMEDY(GLsizei len, IntPtr @string)
        {
            Delegates.glStringMarkerGREMEDY(len, @string);
        }

        #endregion

        #region StringMarkerGREMEDY(GLsizei len, object @string)

        /// <summary>
        /// 
        /// </summary>
        public static         void glStringMarkerGREMEDY(GLsizei len, object @string)
        {
            GCHandle h0 = GCHandle.Alloc(@string, GCHandleType.Pinned);
            try
            {
                Delegates.glStringMarkerGREMEDY(len, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region StencilClearTagEXT(GLsizei stencilTagBits, GLuint stencilClearTag)

        /// <summary>
        /// 
        /// </summary>
        public static         void glStencilClearTagEXT(GLsizei stencilTagBits, GLuint stencilClearTag)
        {
            Delegates.glStencilClearTagEXT(stencilTagBits, stencilClearTag);
        }

        #endregion

        #region BlitFramebufferEXT(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)

        /// <summary>
        /// 
        /// </summary>
        public static         void glBlitFramebufferEXT(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
        {
            Delegates.glBlitFramebufferEXT(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
        }

        #endregion

        #region RenderbufferStorageMultisampleEXT(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)

        /// <summary>
        /// 
        /// </summary>
        public static         void glRenderbufferStorageMultisampleEXT(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
        {
            Delegates.glRenderbufferStorageMultisampleEXT(target, samples, internalformat, width, height);
        }

        #endregion

        #region GetQueryObjecti64vEXT(GLuint id, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetQueryObjecti64vEXT(GLuint id, GLenum pname, IntPtr parameters)
        {
            Delegates.glGetQueryObjecti64vEXT(id, pname, parameters);
        }

        #endregion

        #region GetQueryObjecti64vEXT(GLuint id, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetQueryObjecti64vEXT(GLuint id, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetQueryObjecti64vEXT(id, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetQueryObjecti64vEXT(GLuint id, GLenum pname, GLint64[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetQueryObjecti64vEXT(GLuint id, GLenum pname, GLint64[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetQueryObjecti64vEXT(id, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetQueryObjectui64vEXT(GLuint id, GLenum pname, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetQueryObjectui64vEXT(GLuint id, GLenum pname, IntPtr parameters)
        {
            Delegates.glGetQueryObjectui64vEXT(id, pname, parameters);
        }

        #endregion

        #region GetQueryObjectui64vEXT(GLuint id, GLenum pname, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetQueryObjectui64vEXT(GLuint id, GLenum pname, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetQueryObjectui64vEXT(id, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region GetQueryObjectui64vEXT(GLuint id, GLenum pname, GLuint64[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glGetQueryObjectui64vEXT(GLuint id, GLenum pname, GLuint64[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glGetQueryObjectui64vEXT(id, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ProgramEnvParameters4fvEXT(GLenum target, GLuint index, GLsizei count, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glProgramEnvParameters4fvEXT(GLenum target, GLuint index, GLsizei count, IntPtr parameters)
        {
            Delegates.glProgramEnvParameters4fvEXT(target, index, count, parameters);
        }

        #endregion

        #region ProgramEnvParameters4fvEXT(GLenum target, GLuint index, GLsizei count, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glProgramEnvParameters4fvEXT(GLenum target, GLuint index, GLsizei count, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramEnvParameters4fvEXT(target, index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ProgramEnvParameters4fvEXT(GLenum target, GLuint index, GLsizei count, GLfloat[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glProgramEnvParameters4fvEXT(GLenum target, GLuint index, GLsizei count, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramEnvParameters4fvEXT(target, index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ProgramLocalParameters4fvEXT(GLenum target, GLuint index, GLsizei count, IntPtr parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glProgramLocalParameters4fvEXT(GLenum target, GLuint index, GLsizei count, IntPtr parameters)
        {
            Delegates.glProgramLocalParameters4fvEXT(target, index, count, parameters);
        }

        #endregion

        #region ProgramLocalParameters4fvEXT(GLenum target, GLuint index, GLsizei count, object parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glProgramLocalParameters4fvEXT(GLenum target, GLuint index, GLsizei count, object parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramLocalParameters4fvEXT(target, index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #region ProgramLocalParameters4fvEXT(GLenum target, GLuint index, GLsizei count, GLfloat[] parameters)

        /// <summary>
        /// 
        /// </summary>
        public static         void glProgramLocalParameters4fvEXT(GLenum target, GLuint index, GLsizei count, GLfloat[] parameters)
        {
            GCHandle h0 = GCHandle.Alloc(parameters, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramLocalParameters4fvEXT(target, index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }

        #endregion

        #endregion Wrappers

        #region static Constructor

        /// <summary>
        /// Loads statically exported core OpenGL functions that do cannot be dynamically loaded.
        /// </summary>
        /// <remarks>
        /// Statically exported functions are assumed not to be dynamically exported, something
        /// that holds true for Mesa3D, but may or may not hold true for other driver providers.
        /// </remarks>
        static Gl()
        {
            if (Delegates.glNewList == null)
            {
                Gl.Delegates.glNewList = new Gl.Delegates.NewList(Gl.Imports.NewList);
            }
            if (Delegates.glEndList == null)
            {
                Gl.Delegates.glEndList = new Gl.Delegates.EndList(Gl.Imports.EndList);
            }
            if (Delegates.glCallList == null)
            {
                Gl.Delegates.glCallList = new Gl.Delegates.CallList(Gl.Imports.CallList);
            }
            if (Delegates.glCallLists == null)
            {
                Gl.Delegates.glCallLists = new Gl.Delegates.CallLists(Gl.Imports.CallLists);
            }
            if (Delegates.glDeleteLists == null)
            {
                Gl.Delegates.glDeleteLists = new Gl.Delegates.DeleteLists(Gl.Imports.DeleteLists);
            }
            if (Delegates.glGenLists == null)
            {
                Gl.Delegates.glGenLists = new Gl.Delegates.GenLists(Gl.Imports.GenLists);
            }
            if (Delegates.glListBase == null)
            {
                Gl.Delegates.glListBase = new Gl.Delegates.ListBase(Gl.Imports.ListBase);
            }
            if (Delegates.glBegin == null)
            {
                Gl.Delegates.glBegin = new Gl.Delegates.Begin(Gl.Imports.Begin);
            }
            if (Delegates.glBitmap == null)
            {
                Gl.Delegates.glBitmap = new Gl.Delegates.Bitmap(Gl.Imports.Bitmap);
            }
            if (Delegates.glColor3b == null)
            {
                Gl.Delegates.glColor3b = new Gl.Delegates.Color3b(Gl.Imports.Color3b);
            }
            if (Delegates.glColor3bv == null)
            {
                Gl.Delegates.glColor3bv = new Gl.Delegates.Color3bv(Gl.Imports.Color3bv);
            }
            if (Delegates.glColor3d == null)
            {
                Gl.Delegates.glColor3d = new Gl.Delegates.Color3d(Gl.Imports.Color3d);
            }
            if (Delegates.glColor3dv == null)
            {
                Gl.Delegates.glColor3dv = new Gl.Delegates.Color3dv(Gl.Imports.Color3dv);
            }
            if (Delegates.glColor3f == null)
            {
                Gl.Delegates.glColor3f = new Gl.Delegates.Color3f(Gl.Imports.Color3f);
            }
            if (Delegates.glColor3fv == null)
            {
                Gl.Delegates.glColor3fv = new Gl.Delegates.Color3fv(Gl.Imports.Color3fv);
            }
            if (Delegates.glColor3i == null)
            {
                Gl.Delegates.glColor3i = new Gl.Delegates.Color3i(Gl.Imports.Color3i);
            }
            if (Delegates.glColor3iv == null)
            {
                Gl.Delegates.glColor3iv = new Gl.Delegates.Color3iv(Gl.Imports.Color3iv);
            }
            if (Delegates.glColor3s == null)
            {
                Gl.Delegates.glColor3s = new Gl.Delegates.Color3s(Gl.Imports.Color3s);
            }
            if (Delegates.glColor3sv == null)
            {
                Gl.Delegates.glColor3sv = new Gl.Delegates.Color3sv(Gl.Imports.Color3sv);
            }
            if (Delegates.glColor3ub == null)
            {
                Gl.Delegates.glColor3ub = new Gl.Delegates.Color3ub(Gl.Imports.Color3ub);
            }
            if (Delegates.glColor3ubv == null)
            {
                Gl.Delegates.glColor3ubv = new Gl.Delegates.Color3ubv(Gl.Imports.Color3ubv);
            }
            if (Delegates.glColor3ui == null)
            {
                Gl.Delegates.glColor3ui = new Gl.Delegates.Color3ui(Gl.Imports.Color3ui);
            }
            if (Delegates.glColor3uiv == null)
            {
                Gl.Delegates.glColor3uiv = new Gl.Delegates.Color3uiv(Gl.Imports.Color3uiv);
            }
            if (Delegates.glColor3us == null)
            {
                Gl.Delegates.glColor3us = new Gl.Delegates.Color3us(Gl.Imports.Color3us);
            }
            if (Delegates.glColor3usv == null)
            {
                Gl.Delegates.glColor3usv = new Gl.Delegates.Color3usv(Gl.Imports.Color3usv);
            }
            if (Delegates.glColor4b == null)
            {
                Gl.Delegates.glColor4b = new Gl.Delegates.Color4b(Gl.Imports.Color4b);
            }
            if (Delegates.glColor4bv == null)
            {
                Gl.Delegates.glColor4bv = new Gl.Delegates.Color4bv(Gl.Imports.Color4bv);
            }
            if (Delegates.glColor4d == null)
            {
                Gl.Delegates.glColor4d = new Gl.Delegates.Color4d(Gl.Imports.Color4d);
            }
            if (Delegates.glColor4dv == null)
            {
                Gl.Delegates.glColor4dv = new Gl.Delegates.Color4dv(Gl.Imports.Color4dv);
            }
            if (Delegates.glColor4f == null)
            {
                Gl.Delegates.glColor4f = new Gl.Delegates.Color4f(Gl.Imports.Color4f);
            }
            if (Delegates.glColor4fv == null)
            {
                Gl.Delegates.glColor4fv = new Gl.Delegates.Color4fv(Gl.Imports.Color4fv);
            }
            if (Delegates.glColor4i == null)
            {
                Gl.Delegates.glColor4i = new Gl.Delegates.Color4i(Gl.Imports.Color4i);
            }
            if (Delegates.glColor4iv == null)
            {
                Gl.Delegates.glColor4iv = new Gl.Delegates.Color4iv(Gl.Imports.Color4iv);
            }
            if (Delegates.glColor4s == null)
            {
                Gl.Delegates.glColor4s = new Gl.Delegates.Color4s(Gl.Imports.Color4s);
            }
            if (Delegates.glColor4sv == null)
            {
                Gl.Delegates.glColor4sv = new Gl.Delegates.Color4sv(Gl.Imports.Color4sv);
            }
            if (Delegates.glColor4ub == null)
            {
                Gl.Delegates.glColor4ub = new Gl.Delegates.Color4ub(Gl.Imports.Color4ub);
            }
            if (Delegates.glColor4ubv == null)
            {
                Gl.Delegates.glColor4ubv = new Gl.Delegates.Color4ubv(Gl.Imports.Color4ubv);
            }
            if (Delegates.glColor4ui == null)
            {
                Gl.Delegates.glColor4ui = new Gl.Delegates.Color4ui(Gl.Imports.Color4ui);
            }
            if (Delegates.glColor4uiv == null)
            {
                Gl.Delegates.glColor4uiv = new Gl.Delegates.Color4uiv(Gl.Imports.Color4uiv);
            }
            if (Delegates.glColor4us == null)
            {
                Gl.Delegates.glColor4us = new Gl.Delegates.Color4us(Gl.Imports.Color4us);
            }
            if (Delegates.glColor4usv == null)
            {
                Gl.Delegates.glColor4usv = new Gl.Delegates.Color4usv(Gl.Imports.Color4usv);
            }
            if (Delegates.glEdgeFlag == null)
            {
                Gl.Delegates.glEdgeFlag = new Gl.Delegates.EdgeFlag(Gl.Imports.EdgeFlag);
            }
            if (Delegates.glEdgeFlagv == null)
            {
                Gl.Delegates.glEdgeFlagv = new Gl.Delegates.EdgeFlagv(Gl.Imports.EdgeFlagv);
            }
            if (Delegates.glEnd == null)
            {
                Gl.Delegates.glEnd = new Gl.Delegates.End(Gl.Imports.End);
            }
            if (Delegates.glIndexd == null)
            {
                Gl.Delegates.glIndexd = new Gl.Delegates.Indexd(Gl.Imports.Indexd);
            }
            if (Delegates.glIndexdv == null)
            {
                Gl.Delegates.glIndexdv = new Gl.Delegates.Indexdv(Gl.Imports.Indexdv);
            }
            if (Delegates.glIndexf == null)
            {
                Gl.Delegates.glIndexf = new Gl.Delegates.Indexf(Gl.Imports.Indexf);
            }
            if (Delegates.glIndexfv == null)
            {
                Gl.Delegates.glIndexfv = new Gl.Delegates.Indexfv(Gl.Imports.Indexfv);
            }
            if (Delegates.glIndexi == null)
            {
                Gl.Delegates.glIndexi = new Gl.Delegates.Indexi(Gl.Imports.Indexi);
            }
            if (Delegates.glIndexiv == null)
            {
                Gl.Delegates.glIndexiv = new Gl.Delegates.Indexiv(Gl.Imports.Indexiv);
            }
            if (Delegates.glIndexs == null)
            {
                Gl.Delegates.glIndexs = new Gl.Delegates.Indexs(Gl.Imports.Indexs);
            }
            if (Delegates.glIndexsv == null)
            {
                Gl.Delegates.glIndexsv = new Gl.Delegates.Indexsv(Gl.Imports.Indexsv);
            }
            if (Delegates.glNormal3b == null)
            {
                Gl.Delegates.glNormal3b = new Gl.Delegates.Normal3b(Gl.Imports.Normal3b);
            }
            if (Delegates.glNormal3bv == null)
            {
                Gl.Delegates.glNormal3bv = new Gl.Delegates.Normal3bv(Gl.Imports.Normal3bv);
            }
            if (Delegates.glNormal3d == null)
            {
                Gl.Delegates.glNormal3d = new Gl.Delegates.Normal3d(Gl.Imports.Normal3d);
            }
            if (Delegates.glNormal3dv == null)
            {
                Gl.Delegates.glNormal3dv = new Gl.Delegates.Normal3dv(Gl.Imports.Normal3dv);
            }
            if (Delegates.glNormal3f == null)
            {
                Gl.Delegates.glNormal3f = new Gl.Delegates.Normal3f(Gl.Imports.Normal3f);
            }
            if (Delegates.glNormal3fv == null)
            {
                Gl.Delegates.glNormal3fv = new Gl.Delegates.Normal3fv(Gl.Imports.Normal3fv);
            }
            if (Delegates.glNormal3i == null)
            {
                Gl.Delegates.glNormal3i = new Gl.Delegates.Normal3i(Gl.Imports.Normal3i);
            }
            if (Delegates.glNormal3iv == null)
            {
                Gl.Delegates.glNormal3iv = new Gl.Delegates.Normal3iv(Gl.Imports.Normal3iv);
            }
            if (Delegates.glNormal3s == null)
            {
                Gl.Delegates.glNormal3s = new Gl.Delegates.Normal3s(Gl.Imports.Normal3s);
            }
            if (Delegates.glNormal3sv == null)
            {
                Gl.Delegates.glNormal3sv = new Gl.Delegates.Normal3sv(Gl.Imports.Normal3sv);
            }
            if (Delegates.glRasterPos2d == null)
            {
                Gl.Delegates.glRasterPos2d = new Gl.Delegates.RasterPos2d(Gl.Imports.RasterPos2d);
            }
            if (Delegates.glRasterPos2dv == null)
            {
                Gl.Delegates.glRasterPos2dv = new Gl.Delegates.RasterPos2dv(Gl.Imports.RasterPos2dv);
            }
            if (Delegates.glRasterPos2f == null)
            {
                Gl.Delegates.glRasterPos2f = new Gl.Delegates.RasterPos2f(Gl.Imports.RasterPos2f);
            }
            if (Delegates.glRasterPos2fv == null)
            {
                Gl.Delegates.glRasterPos2fv = new Gl.Delegates.RasterPos2fv(Gl.Imports.RasterPos2fv);
            }
            if (Delegates.glRasterPos2i == null)
            {
                Gl.Delegates.glRasterPos2i = new Gl.Delegates.RasterPos2i(Gl.Imports.RasterPos2i);
            }
            if (Delegates.glRasterPos2iv == null)
            {
                Gl.Delegates.glRasterPos2iv = new Gl.Delegates.RasterPos2iv(Gl.Imports.RasterPos2iv);
            }
            if (Delegates.glRasterPos2s == null)
            {
                Gl.Delegates.glRasterPos2s = new Gl.Delegates.RasterPos2s(Gl.Imports.RasterPos2s);
            }
            if (Delegates.glRasterPos2sv == null)
            {
                Gl.Delegates.glRasterPos2sv = new Gl.Delegates.RasterPos2sv(Gl.Imports.RasterPos2sv);
            }
            if (Delegates.glRasterPos3d == null)
            {
                Gl.Delegates.glRasterPos3d = new Gl.Delegates.RasterPos3d(Gl.Imports.RasterPos3d);
            }
            if (Delegates.glRasterPos3dv == null)
            {
                Gl.Delegates.glRasterPos3dv = new Gl.Delegates.RasterPos3dv(Gl.Imports.RasterPos3dv);
            }
            if (Delegates.glRasterPos3f == null)
            {
                Gl.Delegates.glRasterPos3f = new Gl.Delegates.RasterPos3f(Gl.Imports.RasterPos3f);
            }
            if (Delegates.glRasterPos3fv == null)
            {
                Gl.Delegates.glRasterPos3fv = new Gl.Delegates.RasterPos3fv(Gl.Imports.RasterPos3fv);
            }
            if (Delegates.glRasterPos3i == null)
            {
                Gl.Delegates.glRasterPos3i = new Gl.Delegates.RasterPos3i(Gl.Imports.RasterPos3i);
            }
            if (Delegates.glRasterPos3iv == null)
            {
                Gl.Delegates.glRasterPos3iv = new Gl.Delegates.RasterPos3iv(Gl.Imports.RasterPos3iv);
            }
            if (Delegates.glRasterPos3s == null)
            {
                Gl.Delegates.glRasterPos3s = new Gl.Delegates.RasterPos3s(Gl.Imports.RasterPos3s);
            }
            if (Delegates.glRasterPos3sv == null)
            {
                Gl.Delegates.glRasterPos3sv = new Gl.Delegates.RasterPos3sv(Gl.Imports.RasterPos3sv);
            }
            if (Delegates.glRasterPos4d == null)
            {
                Gl.Delegates.glRasterPos4d = new Gl.Delegates.RasterPos4d(Gl.Imports.RasterPos4d);
            }
            if (Delegates.glRasterPos4dv == null)
            {
                Gl.Delegates.glRasterPos4dv = new Gl.Delegates.RasterPos4dv(Gl.Imports.RasterPos4dv);
            }
            if (Delegates.glRasterPos4f == null)
            {
                Gl.Delegates.glRasterPos4f = new Gl.Delegates.RasterPos4f(Gl.Imports.RasterPos4f);
            }
            if (Delegates.glRasterPos4fv == null)
            {
                Gl.Delegates.glRasterPos4fv = new Gl.Delegates.RasterPos4fv(Gl.Imports.RasterPos4fv);
            }
            if (Delegates.glRasterPos4i == null)
            {
                Gl.Delegates.glRasterPos4i = new Gl.Delegates.RasterPos4i(Gl.Imports.RasterPos4i);
            }
            if (Delegates.glRasterPos4iv == null)
            {
                Gl.Delegates.glRasterPos4iv = new Gl.Delegates.RasterPos4iv(Gl.Imports.RasterPos4iv);
            }
            if (Delegates.glRasterPos4s == null)
            {
                Gl.Delegates.glRasterPos4s = new Gl.Delegates.RasterPos4s(Gl.Imports.RasterPos4s);
            }
            if (Delegates.glRasterPos4sv == null)
            {
                Gl.Delegates.glRasterPos4sv = new Gl.Delegates.RasterPos4sv(Gl.Imports.RasterPos4sv);
            }
            if (Delegates.glRectd == null)
            {
                Gl.Delegates.glRectd = new Gl.Delegates.Rectd(Gl.Imports.Rectd);
            }
            if (Delegates.glRectdv == null)
            {
                Gl.Delegates.glRectdv = new Gl.Delegates.Rectdv(Gl.Imports.Rectdv);
            }
            if (Delegates.glRectf == null)
            {
                Gl.Delegates.glRectf = new Gl.Delegates.Rectf(Gl.Imports.Rectf);
            }
            if (Delegates.glRectfv == null)
            {
                Gl.Delegates.glRectfv = new Gl.Delegates.Rectfv(Gl.Imports.Rectfv);
            }
            if (Delegates.glRecti == null)
            {
                Gl.Delegates.glRecti = new Gl.Delegates.Recti(Gl.Imports.Recti);
            }
            if (Delegates.glRectiv == null)
            {
                Gl.Delegates.glRectiv = new Gl.Delegates.Rectiv(Gl.Imports.Rectiv);
            }
            if (Delegates.glRects == null)
            {
                Gl.Delegates.glRects = new Gl.Delegates.Rects(Gl.Imports.Rects);
            }
            if (Delegates.glRectsv == null)
            {
                Gl.Delegates.glRectsv = new Gl.Delegates.Rectsv(Gl.Imports.Rectsv);
            }
            if (Delegates.glTexCoord1d == null)
            {
                Gl.Delegates.glTexCoord1d = new Gl.Delegates.TexCoord1d(Gl.Imports.TexCoord1d);
            }
            if (Delegates.glTexCoord1dv == null)
            {
                Gl.Delegates.glTexCoord1dv = new Gl.Delegates.TexCoord1dv(Gl.Imports.TexCoord1dv);
            }
            if (Delegates.glTexCoord1f == null)
            {
                Gl.Delegates.glTexCoord1f = new Gl.Delegates.TexCoord1f(Gl.Imports.TexCoord1f);
            }
            if (Delegates.glTexCoord1fv == null)
            {
                Gl.Delegates.glTexCoord1fv = new Gl.Delegates.TexCoord1fv(Gl.Imports.TexCoord1fv);
            }
            if (Delegates.glTexCoord1i == null)
            {
                Gl.Delegates.glTexCoord1i = new Gl.Delegates.TexCoord1i(Gl.Imports.TexCoord1i);
            }
            if (Delegates.glTexCoord1iv == null)
            {
                Gl.Delegates.glTexCoord1iv = new Gl.Delegates.TexCoord1iv(Gl.Imports.TexCoord1iv);
            }
            if (Delegates.glTexCoord1s == null)
            {
                Gl.Delegates.glTexCoord1s = new Gl.Delegates.TexCoord1s(Gl.Imports.TexCoord1s);
            }
            if (Delegates.glTexCoord1sv == null)
            {
                Gl.Delegates.glTexCoord1sv = new Gl.Delegates.TexCoord1sv(Gl.Imports.TexCoord1sv);
            }
            if (Delegates.glTexCoord2d == null)
            {
                Gl.Delegates.glTexCoord2d = new Gl.Delegates.TexCoord2d(Gl.Imports.TexCoord2d);
            }
            if (Delegates.glTexCoord2dv == null)
            {
                Gl.Delegates.glTexCoord2dv = new Gl.Delegates.TexCoord2dv(Gl.Imports.TexCoord2dv);
            }
            if (Delegates.glTexCoord2f == null)
            {
                Gl.Delegates.glTexCoord2f = new Gl.Delegates.TexCoord2f(Gl.Imports.TexCoord2f);
            }
            if (Delegates.glTexCoord2fv == null)
            {
                Gl.Delegates.glTexCoord2fv = new Gl.Delegates.TexCoord2fv(Gl.Imports.TexCoord2fv);
            }
            if (Delegates.glTexCoord2i == null)
            {
                Gl.Delegates.glTexCoord2i = new Gl.Delegates.TexCoord2i(Gl.Imports.TexCoord2i);
            }
            if (Delegates.glTexCoord2iv == null)
            {
                Gl.Delegates.glTexCoord2iv = new Gl.Delegates.TexCoord2iv(Gl.Imports.TexCoord2iv);
            }
            if (Delegates.glTexCoord2s == null)
            {
                Gl.Delegates.glTexCoord2s = new Gl.Delegates.TexCoord2s(Gl.Imports.TexCoord2s);
            }
            if (Delegates.glTexCoord2sv == null)
            {
                Gl.Delegates.glTexCoord2sv = new Gl.Delegates.TexCoord2sv(Gl.Imports.TexCoord2sv);
            }
            if (Delegates.glTexCoord3d == null)
            {
                Gl.Delegates.glTexCoord3d = new Gl.Delegates.TexCoord3d(Gl.Imports.TexCoord3d);
            }
            if (Delegates.glTexCoord3dv == null)
            {
                Gl.Delegates.glTexCoord3dv = new Gl.Delegates.TexCoord3dv(Gl.Imports.TexCoord3dv);
            }
            if (Delegates.glTexCoord3f == null)
            {
                Gl.Delegates.glTexCoord3f = new Gl.Delegates.TexCoord3f(Gl.Imports.TexCoord3f);
            }
            if (Delegates.glTexCoord3fv == null)
            {
                Gl.Delegates.glTexCoord3fv = new Gl.Delegates.TexCoord3fv(Gl.Imports.TexCoord3fv);
            }
            if (Delegates.glTexCoord3i == null)
            {
                Gl.Delegates.glTexCoord3i = new Gl.Delegates.TexCoord3i(Gl.Imports.TexCoord3i);
            }
            if (Delegates.glTexCoord3iv == null)
            {
                Gl.Delegates.glTexCoord3iv = new Gl.Delegates.TexCoord3iv(Gl.Imports.TexCoord3iv);
            }
            if (Delegates.glTexCoord3s == null)
            {
                Gl.Delegates.glTexCoord3s = new Gl.Delegates.TexCoord3s(Gl.Imports.TexCoord3s);
            }
            if (Delegates.glTexCoord3sv == null)
            {
                Gl.Delegates.glTexCoord3sv = new Gl.Delegates.TexCoord3sv(Gl.Imports.TexCoord3sv);
            }
            if (Delegates.glTexCoord4d == null)
            {
                Gl.Delegates.glTexCoord4d = new Gl.Delegates.TexCoord4d(Gl.Imports.TexCoord4d);
            }
            if (Delegates.glTexCoord4dv == null)
            {
                Gl.Delegates.glTexCoord4dv = new Gl.Delegates.TexCoord4dv(Gl.Imports.TexCoord4dv);
            }
            if (Delegates.glTexCoord4f == null)
            {
                Gl.Delegates.glTexCoord4f = new Gl.Delegates.TexCoord4f(Gl.Imports.TexCoord4f);
            }
            if (Delegates.glTexCoord4fv == null)
            {
                Gl.Delegates.glTexCoord4fv = new Gl.Delegates.TexCoord4fv(Gl.Imports.TexCoord4fv);
            }
            if (Delegates.glTexCoord4i == null)
            {
                Gl.Delegates.glTexCoord4i = new Gl.Delegates.TexCoord4i(Gl.Imports.TexCoord4i);
            }
            if (Delegates.glTexCoord4iv == null)
            {
                Gl.Delegates.glTexCoord4iv = new Gl.Delegates.TexCoord4iv(Gl.Imports.TexCoord4iv);
            }
            if (Delegates.glTexCoord4s == null)
            {
                Gl.Delegates.glTexCoord4s = new Gl.Delegates.TexCoord4s(Gl.Imports.TexCoord4s);
            }
            if (Delegates.glTexCoord4sv == null)
            {
                Gl.Delegates.glTexCoord4sv = new Gl.Delegates.TexCoord4sv(Gl.Imports.TexCoord4sv);
            }
            if (Delegates.glVertex2d == null)
            {
                Gl.Delegates.glVertex2d = new Gl.Delegates.Vertex2d(Gl.Imports.Vertex2d);
            }
            if (Delegates.glVertex2dv == null)
            {
                Gl.Delegates.glVertex2dv = new Gl.Delegates.Vertex2dv(Gl.Imports.Vertex2dv);
            }
            if (Delegates.glVertex2f == null)
            {
                Gl.Delegates.glVertex2f = new Gl.Delegates.Vertex2f(Gl.Imports.Vertex2f);
            }
            if (Delegates.glVertex2fv == null)
            {
                Gl.Delegates.glVertex2fv = new Gl.Delegates.Vertex2fv(Gl.Imports.Vertex2fv);
            }
            if (Delegates.glVertex2i == null)
            {
                Gl.Delegates.glVertex2i = new Gl.Delegates.Vertex2i(Gl.Imports.Vertex2i);
            }
            if (Delegates.glVertex2iv == null)
            {
                Gl.Delegates.glVertex2iv = new Gl.Delegates.Vertex2iv(Gl.Imports.Vertex2iv);
            }
            if (Delegates.glVertex2s == null)
            {
                Gl.Delegates.glVertex2s = new Gl.Delegates.Vertex2s(Gl.Imports.Vertex2s);
            }
            if (Delegates.glVertex2sv == null)
            {
                Gl.Delegates.glVertex2sv = new Gl.Delegates.Vertex2sv(Gl.Imports.Vertex2sv);
            }
            if (Delegates.glVertex3d == null)
            {
                Gl.Delegates.glVertex3d = new Gl.Delegates.Vertex3d(Gl.Imports.Vertex3d);
            }
            if (Delegates.glVertex3dv == null)
            {
                Gl.Delegates.glVertex3dv = new Gl.Delegates.Vertex3dv(Gl.Imports.Vertex3dv);
            }
            if (Delegates.glVertex3f == null)
            {
                Gl.Delegates.glVertex3f = new Gl.Delegates.Vertex3f(Gl.Imports.Vertex3f);
            }
            if (Delegates.glVertex3fv == null)
            {
                Gl.Delegates.glVertex3fv = new Gl.Delegates.Vertex3fv(Gl.Imports.Vertex3fv);
            }
            if (Delegates.glVertex3i == null)
            {
                Gl.Delegates.glVertex3i = new Gl.Delegates.Vertex3i(Gl.Imports.Vertex3i);
            }
            if (Delegates.glVertex3iv == null)
            {
                Gl.Delegates.glVertex3iv = new Gl.Delegates.Vertex3iv(Gl.Imports.Vertex3iv);
            }
            if (Delegates.glVertex3s == null)
            {
                Gl.Delegates.glVertex3s = new Gl.Delegates.Vertex3s(Gl.Imports.Vertex3s);
            }
            if (Delegates.glVertex3sv == null)
            {
                Gl.Delegates.glVertex3sv = new Gl.Delegates.Vertex3sv(Gl.Imports.Vertex3sv);
            }
            if (Delegates.glVertex4d == null)
            {
                Gl.Delegates.glVertex4d = new Gl.Delegates.Vertex4d(Gl.Imports.Vertex4d);
            }
            if (Delegates.glVertex4dv == null)
            {
                Gl.Delegates.glVertex4dv = new Gl.Delegates.Vertex4dv(Gl.Imports.Vertex4dv);
            }
            if (Delegates.glVertex4f == null)
            {
                Gl.Delegates.glVertex4f = new Gl.Delegates.Vertex4f(Gl.Imports.Vertex4f);
            }
            if (Delegates.glVertex4fv == null)
            {
                Gl.Delegates.glVertex4fv = new Gl.Delegates.Vertex4fv(Gl.Imports.Vertex4fv);
            }
            if (Delegates.glVertex4i == null)
            {
                Gl.Delegates.glVertex4i = new Gl.Delegates.Vertex4i(Gl.Imports.Vertex4i);
            }
            if (Delegates.glVertex4iv == null)
            {
                Gl.Delegates.glVertex4iv = new Gl.Delegates.Vertex4iv(Gl.Imports.Vertex4iv);
            }
            if (Delegates.glVertex4s == null)
            {
                Gl.Delegates.glVertex4s = new Gl.Delegates.Vertex4s(Gl.Imports.Vertex4s);
            }
            if (Delegates.glVertex4sv == null)
            {
                Gl.Delegates.glVertex4sv = new Gl.Delegates.Vertex4sv(Gl.Imports.Vertex4sv);
            }
            if (Delegates.glClipPlane == null)
            {
                Gl.Delegates.glClipPlane = new Gl.Delegates.ClipPlane(Gl.Imports.ClipPlane);
            }
            if (Delegates.glColorMaterial == null)
            {
                Gl.Delegates.glColorMaterial = new Gl.Delegates.ColorMaterial(Gl.Imports.ColorMaterial);
            }
            if (Delegates.glCullFace == null)
            {
                Gl.Delegates.glCullFace = new Gl.Delegates.CullFace(Gl.Imports.CullFace);
            }
            if (Delegates.glFogf == null)
            {
                Gl.Delegates.glFogf = new Gl.Delegates.Fogf(Gl.Imports.Fogf);
            }
            if (Delegates.glFogfv == null)
            {
                Gl.Delegates.glFogfv = new Gl.Delegates.Fogfv(Gl.Imports.Fogfv);
            }
            if (Delegates.glFogi == null)
            {
                Gl.Delegates.glFogi = new Gl.Delegates.Fogi(Gl.Imports.Fogi);
            }
            if (Delegates.glFogiv == null)
            {
                Gl.Delegates.glFogiv = new Gl.Delegates.Fogiv(Gl.Imports.Fogiv);
            }
            if (Delegates.glFrontFace == null)
            {
                Gl.Delegates.glFrontFace = new Gl.Delegates.FrontFace(Gl.Imports.FrontFace);
            }
            if (Delegates.glHint == null)
            {
                Gl.Delegates.glHint = new Gl.Delegates.Hint(Gl.Imports.Hint);
            }
            if (Delegates.glLightf == null)
            {
                Gl.Delegates.glLightf = new Gl.Delegates.Lightf(Gl.Imports.Lightf);
            }
            if (Delegates.glLightfv == null)
            {
                Gl.Delegates.glLightfv = new Gl.Delegates.Lightfv(Gl.Imports.Lightfv);
            }
            if (Delegates.glLighti == null)
            {
                Gl.Delegates.glLighti = new Gl.Delegates.Lighti(Gl.Imports.Lighti);
            }
            if (Delegates.glLightiv == null)
            {
                Gl.Delegates.glLightiv = new Gl.Delegates.Lightiv(Gl.Imports.Lightiv);
            }
            if (Delegates.glLightModelf == null)
            {
                Gl.Delegates.glLightModelf = new Gl.Delegates.LightModelf(Gl.Imports.LightModelf);
            }
            if (Delegates.glLightModelfv == null)
            {
                Gl.Delegates.glLightModelfv = new Gl.Delegates.LightModelfv(Gl.Imports.LightModelfv);
            }
            if (Delegates.glLightModeli == null)
            {
                Gl.Delegates.glLightModeli = new Gl.Delegates.LightModeli(Gl.Imports.LightModeli);
            }
            if (Delegates.glLightModeliv == null)
            {
                Gl.Delegates.glLightModeliv = new Gl.Delegates.LightModeliv(Gl.Imports.LightModeliv);
            }
            if (Delegates.glLineStipple == null)
            {
                Gl.Delegates.glLineStipple = new Gl.Delegates.LineStipple(Gl.Imports.LineStipple);
            }
            if (Delegates.glLineWidth == null)
            {
                Gl.Delegates.glLineWidth = new Gl.Delegates.LineWidth(Gl.Imports.LineWidth);
            }
            if (Delegates.glMaterialf == null)
            {
                Gl.Delegates.glMaterialf = new Gl.Delegates.Materialf(Gl.Imports.Materialf);
            }
            if (Delegates.glMaterialfv == null)
            {
                Gl.Delegates.glMaterialfv = new Gl.Delegates.Materialfv(Gl.Imports.Materialfv);
            }
            if (Delegates.glMateriali == null)
            {
                Gl.Delegates.glMateriali = new Gl.Delegates.Materiali(Gl.Imports.Materiali);
            }
            if (Delegates.glMaterialiv == null)
            {
                Gl.Delegates.glMaterialiv = new Gl.Delegates.Materialiv(Gl.Imports.Materialiv);
            }
            if (Delegates.glPointSize == null)
            {
                Gl.Delegates.glPointSize = new Gl.Delegates.PointSize(Gl.Imports.PointSize);
            }
            if (Delegates.glPolygonMode == null)
            {
                Gl.Delegates.glPolygonMode = new Gl.Delegates.PolygonMode(Gl.Imports.PolygonMode);
            }
            if (Delegates.glPolygonStipple == null)
            {
                Gl.Delegates.glPolygonStipple = new Gl.Delegates.PolygonStipple(Gl.Imports.PolygonStipple);
            }
            if (Delegates.glScissor == null)
            {
                Gl.Delegates.glScissor = new Gl.Delegates.Scissor(Gl.Imports.Scissor);
            }
            if (Delegates.glShadeModel == null)
            {
                Gl.Delegates.glShadeModel = new Gl.Delegates.ShadeModel(Gl.Imports.ShadeModel);
            }
            if (Delegates.glTexParameterf == null)
            {
                Gl.Delegates.glTexParameterf = new Gl.Delegates.TexParameterf(Gl.Imports.TexParameterf);
            }
            if (Delegates.glTexParameterfv == null)
            {
                Gl.Delegates.glTexParameterfv = new Gl.Delegates.TexParameterfv(Gl.Imports.TexParameterfv);
            }
            if (Delegates.glTexParameteri == null)
            {
                Gl.Delegates.glTexParameteri = new Gl.Delegates.TexParameteri(Gl.Imports.TexParameteri);
            }
            if (Delegates.glTexParameteriv == null)
            {
                Gl.Delegates.glTexParameteriv = new Gl.Delegates.TexParameteriv(Gl.Imports.TexParameteriv);
            }
            if (Delegates.glTexImage1D == null)
            {
                Gl.Delegates.glTexImage1D = new Gl.Delegates.TexImage1D(Gl.Imports.TexImage1D);
            }
            if (Delegates.glTexImage2D == null)
            {
                Gl.Delegates.glTexImage2D = new Gl.Delegates.TexImage2D(Gl.Imports.TexImage2D);
            }
            if (Delegates.glTexEnvf == null)
            {
                Gl.Delegates.glTexEnvf = new Gl.Delegates.TexEnvf(Gl.Imports.TexEnvf);
            }
            if (Delegates.glTexEnvfv == null)
            {
                Gl.Delegates.glTexEnvfv = new Gl.Delegates.TexEnvfv(Gl.Imports.TexEnvfv);
            }
            if (Delegates.glTexEnvi == null)
            {
                Gl.Delegates.glTexEnvi = new Gl.Delegates.TexEnvi(Gl.Imports.TexEnvi);
            }
            if (Delegates.glTexEnviv == null)
            {
                Gl.Delegates.glTexEnviv = new Gl.Delegates.TexEnviv(Gl.Imports.TexEnviv);
            }
            if (Delegates.glTexGend == null)
            {
                Gl.Delegates.glTexGend = new Gl.Delegates.TexGend(Gl.Imports.TexGend);
            }
            if (Delegates.glTexGendv == null)
            {
                Gl.Delegates.glTexGendv = new Gl.Delegates.TexGendv(Gl.Imports.TexGendv);
            }
            if (Delegates.glTexGenf == null)
            {
                Gl.Delegates.glTexGenf = new Gl.Delegates.TexGenf(Gl.Imports.TexGenf);
            }
            if (Delegates.glTexGenfv == null)
            {
                Gl.Delegates.glTexGenfv = new Gl.Delegates.TexGenfv(Gl.Imports.TexGenfv);
            }
            if (Delegates.glTexGeni == null)
            {
                Gl.Delegates.glTexGeni = new Gl.Delegates.TexGeni(Gl.Imports.TexGeni);
            }
            if (Delegates.glTexGeniv == null)
            {
                Gl.Delegates.glTexGeniv = new Gl.Delegates.TexGeniv(Gl.Imports.TexGeniv);
            }
            if (Delegates.glFeedbackBuffer == null)
            {
                Gl.Delegates.glFeedbackBuffer = new Gl.Delegates.FeedbackBuffer(Gl.Imports.FeedbackBuffer);
            }
            if (Delegates.glSelectBuffer == null)
            {
                Gl.Delegates.glSelectBuffer = new Gl.Delegates.SelectBuffer(Gl.Imports.SelectBuffer);
            }
            if (Delegates.glRenderMode == null)
            {
                Gl.Delegates.glRenderMode = new Gl.Delegates.RenderMode(Gl.Imports.RenderMode);
            }
            if (Delegates.glInitNames == null)
            {
                Gl.Delegates.glInitNames = new Gl.Delegates.InitNames(Gl.Imports.InitNames);
            }
            if (Delegates.glLoadName == null)
            {
                Gl.Delegates.glLoadName = new Gl.Delegates.LoadName(Gl.Imports.LoadName);
            }
            if (Delegates.glPassThrough == null)
            {
                Gl.Delegates.glPassThrough = new Gl.Delegates.PassThrough(Gl.Imports.PassThrough);
            }
            if (Delegates.glPopName == null)
            {
                Gl.Delegates.glPopName = new Gl.Delegates.PopName(Gl.Imports.PopName);
            }
            if (Delegates.glPushName == null)
            {
                Gl.Delegates.glPushName = new Gl.Delegates.PushName(Gl.Imports.PushName);
            }
            if (Delegates.glDrawBuffer == null)
            {
                Gl.Delegates.glDrawBuffer = new Gl.Delegates.DrawBuffer(Gl.Imports.DrawBuffer);
            }
            if (Delegates.glClear == null)
            {
                Gl.Delegates.glClear = new Gl.Delegates.Clear(Gl.Imports.Clear);
            }
            if (Delegates.glClearAccum == null)
            {
                Gl.Delegates.glClearAccum = new Gl.Delegates.ClearAccum(Gl.Imports.ClearAccum);
            }
            if (Delegates.glClearIndex == null)
            {
                Gl.Delegates.glClearIndex = new Gl.Delegates.ClearIndex(Gl.Imports.ClearIndex);
            }
            if (Delegates.glClearColor == null)
            {
                Gl.Delegates.glClearColor = new Gl.Delegates.ClearColor(Gl.Imports.ClearColor);
            }
            if (Delegates.glClearStencil == null)
            {
                Gl.Delegates.glClearStencil = new Gl.Delegates.ClearStencil(Gl.Imports.ClearStencil);
            }
            if (Delegates.glClearDepth == null)
            {
                Gl.Delegates.glClearDepth = new Gl.Delegates.ClearDepth(Gl.Imports.ClearDepth);
            }
            if (Delegates.glStencilMask == null)
            {
                Gl.Delegates.glStencilMask = new Gl.Delegates.StencilMask(Gl.Imports.StencilMask);
            }
            if (Delegates.glColorMask == null)
            {
                Gl.Delegates.glColorMask = new Gl.Delegates.ColorMask(Gl.Imports.ColorMask);
            }
            if (Delegates.glDepthMask == null)
            {
                Gl.Delegates.glDepthMask = new Gl.Delegates.DepthMask(Gl.Imports.DepthMask);
            }
            if (Delegates.glIndexMask == null)
            {
                Gl.Delegates.glIndexMask = new Gl.Delegates.IndexMask(Gl.Imports.IndexMask);
            }
            if (Delegates.glAccum == null)
            {
                Gl.Delegates.glAccum = new Gl.Delegates.Accum(Gl.Imports.Accum);
            }
            if (Delegates.glDisable == null)
            {
                Gl.Delegates.glDisable = new Gl.Delegates.Disable(Gl.Imports.Disable);
            }
            if (Delegates.glEnable == null)
            {
                Gl.Delegates.glEnable = new Gl.Delegates.Enable(Gl.Imports.Enable);
            }
            if (Delegates.glFinish == null)
            {
                Gl.Delegates.glFinish = new Gl.Delegates.Finish(Gl.Imports.Finish);
            }
            if (Delegates.glFlush == null)
            {
                Gl.Delegates.glFlush = new Gl.Delegates.Flush(Gl.Imports.Flush);
            }
            if (Delegates.glPopAttrib == null)
            {
                Gl.Delegates.glPopAttrib = new Gl.Delegates.PopAttrib(Gl.Imports.PopAttrib);
            }
            if (Delegates.glPushAttrib == null)
            {
                Gl.Delegates.glPushAttrib = new Gl.Delegates.PushAttrib(Gl.Imports.PushAttrib);
            }
            if (Delegates.glMap1d == null)
            {
                Gl.Delegates.glMap1d = new Gl.Delegates.Map1d(Gl.Imports.Map1d);
            }
            if (Delegates.glMap1f == null)
            {
                Gl.Delegates.glMap1f = new Gl.Delegates.Map1f(Gl.Imports.Map1f);
            }
            if (Delegates.glMap2d == null)
            {
                Gl.Delegates.glMap2d = new Gl.Delegates.Map2d(Gl.Imports.Map2d);
            }
            if (Delegates.glMap2f == null)
            {
                Gl.Delegates.glMap2f = new Gl.Delegates.Map2f(Gl.Imports.Map2f);
            }
            if (Delegates.glMapGrid1d == null)
            {
                Gl.Delegates.glMapGrid1d = new Gl.Delegates.MapGrid1d(Gl.Imports.MapGrid1d);
            }
            if (Delegates.glMapGrid1f == null)
            {
                Gl.Delegates.glMapGrid1f = new Gl.Delegates.MapGrid1f(Gl.Imports.MapGrid1f);
            }
            if (Delegates.glMapGrid2d == null)
            {
                Gl.Delegates.glMapGrid2d = new Gl.Delegates.MapGrid2d(Gl.Imports.MapGrid2d);
            }
            if (Delegates.glMapGrid2f == null)
            {
                Gl.Delegates.glMapGrid2f = new Gl.Delegates.MapGrid2f(Gl.Imports.MapGrid2f);
            }
            if (Delegates.glEvalCoord1d == null)
            {
                Gl.Delegates.glEvalCoord1d = new Gl.Delegates.EvalCoord1d(Gl.Imports.EvalCoord1d);
            }
            if (Delegates.glEvalCoord1dv == null)
            {
                Gl.Delegates.glEvalCoord1dv = new Gl.Delegates.EvalCoord1dv(Gl.Imports.EvalCoord1dv);
            }
            if (Delegates.glEvalCoord1f == null)
            {
                Gl.Delegates.glEvalCoord1f = new Gl.Delegates.EvalCoord1f(Gl.Imports.EvalCoord1f);
            }
            if (Delegates.glEvalCoord1fv == null)
            {
                Gl.Delegates.glEvalCoord1fv = new Gl.Delegates.EvalCoord1fv(Gl.Imports.EvalCoord1fv);
            }
            if (Delegates.glEvalCoord2d == null)
            {
                Gl.Delegates.glEvalCoord2d = new Gl.Delegates.EvalCoord2d(Gl.Imports.EvalCoord2d);
            }
            if (Delegates.glEvalCoord2dv == null)
            {
                Gl.Delegates.glEvalCoord2dv = new Gl.Delegates.EvalCoord2dv(Gl.Imports.EvalCoord2dv);
            }
            if (Delegates.glEvalCoord2f == null)
            {
                Gl.Delegates.glEvalCoord2f = new Gl.Delegates.EvalCoord2f(Gl.Imports.EvalCoord2f);
            }
            if (Delegates.glEvalCoord2fv == null)
            {
                Gl.Delegates.glEvalCoord2fv = new Gl.Delegates.EvalCoord2fv(Gl.Imports.EvalCoord2fv);
            }
            if (Delegates.glEvalMesh1 == null)
            {
                Gl.Delegates.glEvalMesh1 = new Gl.Delegates.EvalMesh1(Gl.Imports.EvalMesh1);
            }
            if (Delegates.glEvalPoint1 == null)
            {
                Gl.Delegates.glEvalPoint1 = new Gl.Delegates.EvalPoint1(Gl.Imports.EvalPoint1);
            }
            if (Delegates.glEvalMesh2 == null)
            {
                Gl.Delegates.glEvalMesh2 = new Gl.Delegates.EvalMesh2(Gl.Imports.EvalMesh2);
            }
            if (Delegates.glEvalPoint2 == null)
            {
                Gl.Delegates.glEvalPoint2 = new Gl.Delegates.EvalPoint2(Gl.Imports.EvalPoint2);
            }
            if (Delegates.glAlphaFunc == null)
            {
                Gl.Delegates.glAlphaFunc = new Gl.Delegates.AlphaFunc(Gl.Imports.AlphaFunc);
            }
            if (Delegates.glBlendFunc == null)
            {
                Gl.Delegates.glBlendFunc = new Gl.Delegates.BlendFunc(Gl.Imports.BlendFunc);
            }
            if (Delegates.glLogicOp == null)
            {
                Gl.Delegates.glLogicOp = new Gl.Delegates.LogicOp(Gl.Imports.LogicOp);
            }
            if (Delegates.glStencilFunc == null)
            {
                Gl.Delegates.glStencilFunc = new Gl.Delegates.StencilFunc(Gl.Imports.StencilFunc);
            }
            if (Delegates.glStencilOp == null)
            {
                Gl.Delegates.glStencilOp = new Gl.Delegates.StencilOp(Gl.Imports.StencilOp);
            }
            if (Delegates.glDepthFunc == null)
            {
                Gl.Delegates.glDepthFunc = new Gl.Delegates.DepthFunc(Gl.Imports.DepthFunc);
            }
            if (Delegates.glPixelZoom == null)
            {
                Gl.Delegates.glPixelZoom = new Gl.Delegates.PixelZoom(Gl.Imports.PixelZoom);
            }
            if (Delegates.glPixelTransferf == null)
            {
                Gl.Delegates.glPixelTransferf = new Gl.Delegates.PixelTransferf(Gl.Imports.PixelTransferf);
            }
            if (Delegates.glPixelTransferi == null)
            {
                Gl.Delegates.glPixelTransferi = new Gl.Delegates.PixelTransferi(Gl.Imports.PixelTransferi);
            }
            if (Delegates.glPixelStoref == null)
            {
                Gl.Delegates.glPixelStoref = new Gl.Delegates.PixelStoref(Gl.Imports.PixelStoref);
            }
            if (Delegates.glPixelStorei == null)
            {
                Gl.Delegates.glPixelStorei = new Gl.Delegates.PixelStorei(Gl.Imports.PixelStorei);
            }
            if (Delegates.glPixelMapfv == null)
            {
                Gl.Delegates.glPixelMapfv = new Gl.Delegates.PixelMapfv(Gl.Imports.PixelMapfv);
            }
            if (Delegates.glPixelMapuiv == null)
            {
                Gl.Delegates.glPixelMapuiv = new Gl.Delegates.PixelMapuiv(Gl.Imports.PixelMapuiv);
            }
            if (Delegates.glPixelMapusv == null)
            {
                Gl.Delegates.glPixelMapusv = new Gl.Delegates.PixelMapusv(Gl.Imports.PixelMapusv);
            }
            if (Delegates.glReadBuffer == null)
            {
                Gl.Delegates.glReadBuffer = new Gl.Delegates.ReadBuffer(Gl.Imports.ReadBuffer);
            }
            if (Delegates.glCopyPixels == null)
            {
                Gl.Delegates.glCopyPixels = new Gl.Delegates.CopyPixels(Gl.Imports.CopyPixels);
            }
            if (Delegates.glReadPixels == null)
            {
                Gl.Delegates.glReadPixels = new Gl.Delegates.ReadPixels(Gl.Imports.ReadPixels);
            }
            if (Delegates.glDrawPixels == null)
            {
                Gl.Delegates.glDrawPixels = new Gl.Delegates.DrawPixels(Gl.Imports.DrawPixels);
            }
            if (Delegates.glGetBooleanv == null)
            {
                Gl.Delegates.glGetBooleanv = new Gl.Delegates.GetBooleanv(Gl.Imports.GetBooleanv);
            }
            if (Delegates.glGetClipPlane == null)
            {
                Gl.Delegates.glGetClipPlane = new Gl.Delegates.GetClipPlane(Gl.Imports.GetClipPlane);
            }
            if (Delegates.glGetDoublev == null)
            {
                Gl.Delegates.glGetDoublev = new Gl.Delegates.GetDoublev(Gl.Imports.GetDoublev);
            }
            if (Delegates.glGetError == null)
            {
                Gl.Delegates.glGetError = new Gl.Delegates.GetError(Gl.Imports.GetError);
            }
            if (Delegates.glGetFloatv == null)
            {
                Gl.Delegates.glGetFloatv = new Gl.Delegates.GetFloatv(Gl.Imports.GetFloatv);
            }
            if (Delegates.glGetIntegerv == null)
            {
                Gl.Delegates.glGetIntegerv = new Gl.Delegates.GetIntegerv(Gl.Imports.GetIntegerv);
            }
            if (Delegates.glGetLightfv == null)
            {
                Gl.Delegates.glGetLightfv = new Gl.Delegates.GetLightfv(Gl.Imports.GetLightfv);
            }
            if (Delegates.glGetLightiv == null)
            {
                Gl.Delegates.glGetLightiv = new Gl.Delegates.GetLightiv(Gl.Imports.GetLightiv);
            }
            if (Delegates.glGetMapdv == null)
            {
                Gl.Delegates.glGetMapdv = new Gl.Delegates.GetMapdv(Gl.Imports.GetMapdv);
            }
            if (Delegates.glGetMapfv == null)
            {
                Gl.Delegates.glGetMapfv = new Gl.Delegates.GetMapfv(Gl.Imports.GetMapfv);
            }
            if (Delegates.glGetMapiv == null)
            {
                Gl.Delegates.glGetMapiv = new Gl.Delegates.GetMapiv(Gl.Imports.GetMapiv);
            }
            if (Delegates.glGetMaterialfv == null)
            {
                Gl.Delegates.glGetMaterialfv = new Gl.Delegates.GetMaterialfv(Gl.Imports.GetMaterialfv);
            }
            if (Delegates.glGetMaterialiv == null)
            {
                Gl.Delegates.glGetMaterialiv = new Gl.Delegates.GetMaterialiv(Gl.Imports.GetMaterialiv);
            }
            if (Delegates.glGetPixelMapfv == null)
            {
                Gl.Delegates.glGetPixelMapfv = new Gl.Delegates.GetPixelMapfv(Gl.Imports.GetPixelMapfv);
            }
            if (Delegates.glGetPixelMapuiv == null)
            {
                Gl.Delegates.glGetPixelMapuiv = new Gl.Delegates.GetPixelMapuiv(Gl.Imports.GetPixelMapuiv);
            }
            if (Delegates.glGetPixelMapusv == null)
            {
                Gl.Delegates.glGetPixelMapusv = new Gl.Delegates.GetPixelMapusv(Gl.Imports.GetPixelMapusv);
            }
            if (Delegates.glGetPolygonStipple == null)
            {
                Gl.Delegates.glGetPolygonStipple = new Gl.Delegates.GetPolygonStipple(Gl.Imports.GetPolygonStipple);
            }
            if (Delegates.glGetString == null)
            {
                Gl.Delegates.glGetString = new Gl.Delegates.GetString(Gl.Imports.GetString);
            }
            if (Delegates.glGetTexEnvfv == null)
            {
                Gl.Delegates.glGetTexEnvfv = new Gl.Delegates.GetTexEnvfv(Gl.Imports.GetTexEnvfv);
            }
            if (Delegates.glGetTexEnviv == null)
            {
                Gl.Delegates.glGetTexEnviv = new Gl.Delegates.GetTexEnviv(Gl.Imports.GetTexEnviv);
            }
            if (Delegates.glGetTexGendv == null)
            {
                Gl.Delegates.glGetTexGendv = new Gl.Delegates.GetTexGendv(Gl.Imports.GetTexGendv);
            }
            if (Delegates.glGetTexGenfv == null)
            {
                Gl.Delegates.glGetTexGenfv = new Gl.Delegates.GetTexGenfv(Gl.Imports.GetTexGenfv);
            }
            if (Delegates.glGetTexGeniv == null)
            {
                Gl.Delegates.glGetTexGeniv = new Gl.Delegates.GetTexGeniv(Gl.Imports.GetTexGeniv);
            }
            if (Delegates.glGetTexImage == null)
            {
                Gl.Delegates.glGetTexImage = new Gl.Delegates.GetTexImage(Gl.Imports.GetTexImage);
            }
            if (Delegates.glGetTexParameterfv == null)
            {
                Gl.Delegates.glGetTexParameterfv = new Gl.Delegates.GetTexParameterfv(Gl.Imports.GetTexParameterfv);
            }
            if (Delegates.glGetTexParameteriv == null)
            {
                Gl.Delegates.glGetTexParameteriv = new Gl.Delegates.GetTexParameteriv(Gl.Imports.GetTexParameteriv);
            }
            if (Delegates.glGetTexLevelParameterfv == null)
            {
                Gl.Delegates.glGetTexLevelParameterfv = new Gl.Delegates.GetTexLevelParameterfv(Gl.Imports.GetTexLevelParameterfv);
            }
            if (Delegates.glGetTexLevelParameteriv == null)
            {
                Gl.Delegates.glGetTexLevelParameteriv = new Gl.Delegates.GetTexLevelParameteriv(Gl.Imports.GetTexLevelParameteriv);
            }
            if (Delegates.glIsEnabled == null)
            {
                Gl.Delegates.glIsEnabled = new Gl.Delegates.IsEnabled(Gl.Imports.IsEnabled);
            }
            if (Delegates.glIsList == null)
            {
                Gl.Delegates.glIsList = new Gl.Delegates.IsList(Gl.Imports.IsList);
            }
            if (Delegates.glDepthRange == null)
            {
                Gl.Delegates.glDepthRange = new Gl.Delegates.DepthRange(Gl.Imports.DepthRange);
            }
            if (Delegates.glFrustum == null)
            {
                Gl.Delegates.glFrustum = new Gl.Delegates.Frustum(Gl.Imports.Frustum);
            }
            if (Delegates.glLoadIdentity == null)
            {
                Gl.Delegates.glLoadIdentity = new Gl.Delegates.LoadIdentity(Gl.Imports.LoadIdentity);
            }
            if (Delegates.glLoadMatrixf == null)
            {
                Gl.Delegates.glLoadMatrixf = new Gl.Delegates.LoadMatrixf(Gl.Imports.LoadMatrixf);
            }
            if (Delegates.glLoadMatrixd == null)
            {
                Gl.Delegates.glLoadMatrixd = new Gl.Delegates.LoadMatrixd(Gl.Imports.LoadMatrixd);
            }
            if (Delegates.glMatrixMode == null)
            {
                Gl.Delegates.glMatrixMode = new Gl.Delegates.MatrixMode(Gl.Imports.MatrixMode);
            }
            if (Delegates.glMultMatrixf == null)
            {
                Gl.Delegates.glMultMatrixf = new Gl.Delegates.MultMatrixf(Gl.Imports.MultMatrixf);
            }
            if (Delegates.glMultMatrixd == null)
            {
                Gl.Delegates.glMultMatrixd = new Gl.Delegates.MultMatrixd(Gl.Imports.MultMatrixd);
            }
            if (Delegates.glOrtho == null)
            {
                Gl.Delegates.glOrtho = new Gl.Delegates.Ortho(Gl.Imports.Ortho);
            }
            if (Delegates.glPopMatrix == null)
            {
                Gl.Delegates.glPopMatrix = new Gl.Delegates.PopMatrix(Gl.Imports.PopMatrix);
            }
            if (Delegates.glPushMatrix == null)
            {
                Gl.Delegates.glPushMatrix = new Gl.Delegates.PushMatrix(Gl.Imports.PushMatrix);
            }
            if (Delegates.glRotated == null)
            {
                Gl.Delegates.glRotated = new Gl.Delegates.Rotated(Gl.Imports.Rotated);
            }
            if (Delegates.glRotatef == null)
            {
                Gl.Delegates.glRotatef = new Gl.Delegates.Rotatef(Gl.Imports.Rotatef);
            }
            if (Delegates.glScaled == null)
            {
                Gl.Delegates.glScaled = new Gl.Delegates.Scaled(Gl.Imports.Scaled);
            }
            if (Delegates.glScalef == null)
            {
                Gl.Delegates.glScalef = new Gl.Delegates.Scalef(Gl.Imports.Scalef);
            }
            if (Delegates.glTranslated == null)
            {
                Gl.Delegates.glTranslated = new Gl.Delegates.Translated(Gl.Imports.Translated);
            }
            if (Delegates.glTranslatef == null)
            {
                Gl.Delegates.glTranslatef = new Gl.Delegates.Translatef(Gl.Imports.Translatef);
            }
            if (Delegates.glViewport == null)
            {
                Gl.Delegates.glViewport = new Gl.Delegates.Viewport(Gl.Imports.Viewport);
            }
            if (Delegates.glArrayElement == null)
            {
                Gl.Delegates.glArrayElement = new Gl.Delegates.ArrayElement(Gl.Imports.ArrayElement);
            }
            if (Delegates.glColorPointer == null)
            {
                Gl.Delegates.glColorPointer = new Gl.Delegates.ColorPointer(Gl.Imports.ColorPointer);
            }
            if (Delegates.glDisableClientState == null)
            {
                Gl.Delegates.glDisableClientState = new Gl.Delegates.DisableClientState(Gl.Imports.DisableClientState);
            }
            if (Delegates.glDrawArrays == null)
            {
                Gl.Delegates.glDrawArrays = new Gl.Delegates.DrawArrays(Gl.Imports.DrawArrays);
            }
            if (Delegates.glDrawElements == null)
            {
                Gl.Delegates.glDrawElements = new Gl.Delegates.DrawElements(Gl.Imports.DrawElements);
            }
            if (Delegates.glEdgeFlagPointer == null)
            {
                Gl.Delegates.glEdgeFlagPointer = new Gl.Delegates.EdgeFlagPointer(Gl.Imports.EdgeFlagPointer);
            }
            if (Delegates.glEnableClientState == null)
            {
                Gl.Delegates.glEnableClientState = new Gl.Delegates.EnableClientState(Gl.Imports.EnableClientState);
            }
            if (Delegates.glGetPointerv == null)
            {
                Gl.Delegates.glGetPointerv = new Gl.Delegates.GetPointerv(Gl.Imports.GetPointerv);
            }
            if (Delegates.glIndexPointer == null)
            {
                Gl.Delegates.glIndexPointer = new Gl.Delegates.IndexPointer(Gl.Imports.IndexPointer);
            }
            if (Delegates.glInterleavedArrays == null)
            {
                Gl.Delegates.glInterleavedArrays = new Gl.Delegates.InterleavedArrays(Gl.Imports.InterleavedArrays);
            }
            if (Delegates.glNormalPointer == null)
            {
                Gl.Delegates.glNormalPointer = new Gl.Delegates.NormalPointer(Gl.Imports.NormalPointer);
            }
            if (Delegates.glTexCoordPointer == null)
            {
                Gl.Delegates.glTexCoordPointer = new Gl.Delegates.TexCoordPointer(Gl.Imports.TexCoordPointer);
            }
            if (Delegates.glVertexPointer == null)
            {
                Gl.Delegates.glVertexPointer = new Gl.Delegates.VertexPointer(Gl.Imports.VertexPointer);
            }
            if (Delegates.glPolygonOffset == null)
            {
                Gl.Delegates.glPolygonOffset = new Gl.Delegates.PolygonOffset(Gl.Imports.PolygonOffset);
            }
            if (Delegates.glCopyTexImage1D == null)
            {
                Gl.Delegates.glCopyTexImage1D = new Gl.Delegates.CopyTexImage1D(Gl.Imports.CopyTexImage1D);
            }
            if (Delegates.glCopyTexImage2D == null)
            {
                Gl.Delegates.glCopyTexImage2D = new Gl.Delegates.CopyTexImage2D(Gl.Imports.CopyTexImage2D);
            }
            if (Delegates.glCopyTexSubImage1D == null)
            {
                Gl.Delegates.glCopyTexSubImage1D = new Gl.Delegates.CopyTexSubImage1D(Gl.Imports.CopyTexSubImage1D);
            }
            if (Delegates.glCopyTexSubImage2D == null)
            {
                Gl.Delegates.glCopyTexSubImage2D = new Gl.Delegates.CopyTexSubImage2D(Gl.Imports.CopyTexSubImage2D);
            }
            if (Delegates.glTexSubImage1D == null)
            {
                Gl.Delegates.glTexSubImage1D = new Gl.Delegates.TexSubImage1D(Gl.Imports.TexSubImage1D);
            }
            if (Delegates.glTexSubImage2D == null)
            {
                Gl.Delegates.glTexSubImage2D = new Gl.Delegates.TexSubImage2D(Gl.Imports.TexSubImage2D);
            }
            if (Delegates.glAreTexturesResident == null)
            {
                Gl.Delegates.glAreTexturesResident = new Gl.Delegates.AreTexturesResident(Gl.Imports.AreTexturesResident);
            }
            if (Delegates.glBindTexture == null)
            {
                Gl.Delegates.glBindTexture = new Gl.Delegates.BindTexture(Gl.Imports.BindTexture);
            }
            if (Delegates.glDeleteTextures == null)
            {
                Gl.Delegates.glDeleteTextures = new Gl.Delegates.DeleteTextures(Gl.Imports.DeleteTextures);
            }
            if (Delegates.glGenTextures == null)
            {
                Gl.Delegates.glGenTextures = new Gl.Delegates.GenTextures(Gl.Imports.GenTextures);
            }
            if (Delegates.glIsTexture == null)
            {
                Gl.Delegates.glIsTexture = new Gl.Delegates.IsTexture(Gl.Imports.IsTexture);
            }
            if (Delegates.glPrioritizeTextures == null)
            {
                Gl.Delegates.glPrioritizeTextures = new Gl.Delegates.PrioritizeTextures(Gl.Imports.PrioritizeTextures);
            }
            if (Delegates.glIndexub == null)
            {
                Gl.Delegates.glIndexub = new Gl.Delegates.Indexub(Gl.Imports.Indexub);
            }
            if (Delegates.glIndexubv == null)
            {
                Gl.Delegates.glIndexubv = new Gl.Delegates.Indexubv(Gl.Imports.Indexubv);
            }
            if (Delegates.glPopClientAttrib == null)
            {
                Gl.Delegates.glPopClientAttrib = new Gl.Delegates.PopClientAttrib(Gl.Imports.PopClientAttrib);
            }
            if (Delegates.glPushClientAttrib == null)
            {
                Gl.Delegates.glPushClientAttrib = new Gl.Delegates.PushClientAttrib(Gl.Imports.PushClientAttrib);
            }
            if (Delegates.glBlendColor == null)
            {
                Gl.Delegates.glBlendColor = new Gl.Delegates.BlendColor(Gl.Imports.BlendColor);
            }
            if (Delegates.glBlendEquation == null)
            {
                Gl.Delegates.glBlendEquation = new Gl.Delegates.BlendEquation(Gl.Imports.BlendEquation);
            }
            if (Delegates.glDrawRangeElements == null)
            {
                Gl.Delegates.glDrawRangeElements = new Gl.Delegates.DrawRangeElements(Gl.Imports.DrawRangeElements);
            }
            if (Delegates.glColorTable == null)
            {
                Gl.Delegates.glColorTable = new Gl.Delegates.ColorTable(Gl.Imports.ColorTable);
            }
            if (Delegates.glColorTableParameterfv == null)
            {
                Gl.Delegates.glColorTableParameterfv = new Gl.Delegates.ColorTableParameterfv(Gl.Imports.ColorTableParameterfv);
            }
            if (Delegates.glColorTableParameteriv == null)
            {
                Gl.Delegates.glColorTableParameteriv = new Gl.Delegates.ColorTableParameteriv(Gl.Imports.ColorTableParameteriv);
            }
            if (Delegates.glCopyColorTable == null)
            {
                Gl.Delegates.glCopyColorTable = new Gl.Delegates.CopyColorTable(Gl.Imports.CopyColorTable);
            }
            if (Delegates.glGetColorTable == null)
            {
                Gl.Delegates.glGetColorTable = new Gl.Delegates.GetColorTable(Gl.Imports.GetColorTable);
            }
            if (Delegates.glGetColorTableParameterfv == null)
            {
                Gl.Delegates.glGetColorTableParameterfv = new Gl.Delegates.GetColorTableParameterfv(Gl.Imports.GetColorTableParameterfv);
            }
            if (Delegates.glGetColorTableParameteriv == null)
            {
                Gl.Delegates.glGetColorTableParameteriv = new Gl.Delegates.GetColorTableParameteriv(Gl.Imports.GetColorTableParameteriv);
            }
            if (Delegates.glColorSubTable == null)
            {
                Gl.Delegates.glColorSubTable = new Gl.Delegates.ColorSubTable(Gl.Imports.ColorSubTable);
            }
            if (Delegates.glCopyColorSubTable == null)
            {
                Gl.Delegates.glCopyColorSubTable = new Gl.Delegates.CopyColorSubTable(Gl.Imports.CopyColorSubTable);
            }
            if (Delegates.glConvolutionFilter1D == null)
            {
                Gl.Delegates.glConvolutionFilter1D = new Gl.Delegates.ConvolutionFilter1D(Gl.Imports.ConvolutionFilter1D);
            }
            if (Delegates.glConvolutionFilter2D == null)
            {
                Gl.Delegates.glConvolutionFilter2D = new Gl.Delegates.ConvolutionFilter2D(Gl.Imports.ConvolutionFilter2D);
            }
            if (Delegates.glConvolutionParameterf == null)
            {
                Gl.Delegates.glConvolutionParameterf = new Gl.Delegates.ConvolutionParameterf(Gl.Imports.ConvolutionParameterf);
            }
            if (Delegates.glConvolutionParameterfv == null)
            {
                Gl.Delegates.glConvolutionParameterfv = new Gl.Delegates.ConvolutionParameterfv(Gl.Imports.ConvolutionParameterfv);
            }
            if (Delegates.glConvolutionParameteri == null)
            {
                Gl.Delegates.glConvolutionParameteri = new Gl.Delegates.ConvolutionParameteri(Gl.Imports.ConvolutionParameteri);
            }
            if (Delegates.glConvolutionParameteriv == null)
            {
                Gl.Delegates.glConvolutionParameteriv = new Gl.Delegates.ConvolutionParameteriv(Gl.Imports.ConvolutionParameteriv);
            }
            if (Delegates.glCopyConvolutionFilter1D == null)
            {
                Gl.Delegates.glCopyConvolutionFilter1D = new Gl.Delegates.CopyConvolutionFilter1D(Gl.Imports.CopyConvolutionFilter1D);
            }
            if (Delegates.glCopyConvolutionFilter2D == null)
            {
                Gl.Delegates.glCopyConvolutionFilter2D = new Gl.Delegates.CopyConvolutionFilter2D(Gl.Imports.CopyConvolutionFilter2D);
            }
            if (Delegates.glGetConvolutionFilter == null)
            {
                Gl.Delegates.glGetConvolutionFilter = new Gl.Delegates.GetConvolutionFilter(Gl.Imports.GetConvolutionFilter);
            }
            if (Delegates.glGetConvolutionParameterfv == null)
            {
                Gl.Delegates.glGetConvolutionParameterfv = new Gl.Delegates.GetConvolutionParameterfv(Gl.Imports.GetConvolutionParameterfv);
            }
            if (Delegates.glGetConvolutionParameteriv == null)
            {
                Gl.Delegates.glGetConvolutionParameteriv = new Gl.Delegates.GetConvolutionParameteriv(Gl.Imports.GetConvolutionParameteriv);
            }
            if (Delegates.glGetSeparableFilter == null)
            {
                Gl.Delegates.glGetSeparableFilter = new Gl.Delegates.GetSeparableFilter(Gl.Imports.GetSeparableFilter);
            }
            if (Delegates.glSeparableFilter2D == null)
            {
                Gl.Delegates.glSeparableFilter2D = new Gl.Delegates.SeparableFilter2D(Gl.Imports.SeparableFilter2D);
            }
            if (Delegates.glGetHistogram == null)
            {
                Gl.Delegates.glGetHistogram = new Gl.Delegates.GetHistogram(Gl.Imports.GetHistogram);
            }
            if (Delegates.glGetHistogramParameterfv == null)
            {
                Gl.Delegates.glGetHistogramParameterfv = new Gl.Delegates.GetHistogramParameterfv(Gl.Imports.GetHistogramParameterfv);
            }
            if (Delegates.glGetHistogramParameteriv == null)
            {
                Gl.Delegates.glGetHistogramParameteriv = new Gl.Delegates.GetHistogramParameteriv(Gl.Imports.GetHistogramParameteriv);
            }
            if (Delegates.glGetMinmax == null)
            {
                Gl.Delegates.glGetMinmax = new Gl.Delegates.GetMinmax(Gl.Imports.GetMinmax);
            }
            if (Delegates.glGetMinmaxParameterfv == null)
            {
                Gl.Delegates.glGetMinmaxParameterfv = new Gl.Delegates.GetMinmaxParameterfv(Gl.Imports.GetMinmaxParameterfv);
            }
            if (Delegates.glGetMinmaxParameteriv == null)
            {
                Gl.Delegates.glGetMinmaxParameteriv = new Gl.Delegates.GetMinmaxParameteriv(Gl.Imports.GetMinmaxParameteriv);
            }
            if (Delegates.glHistogram == null)
            {
                Gl.Delegates.glHistogram = new Gl.Delegates.Histogram(Gl.Imports.Histogram);
            }
            if (Delegates.glMinmax == null)
            {
                Gl.Delegates.glMinmax = new Gl.Delegates.Minmax(Gl.Imports.Minmax);
            }
            if (Delegates.glResetHistogram == null)
            {
                Gl.Delegates.glResetHistogram = new Gl.Delegates.ResetHistogram(Gl.Imports.ResetHistogram);
            }
            if (Delegates.glResetMinmax == null)
            {
                Gl.Delegates.glResetMinmax = new Gl.Delegates.ResetMinmax(Gl.Imports.ResetMinmax);
            }
            if (Delegates.glTexImage3D == null)
            {
                Gl.Delegates.glTexImage3D = new Gl.Delegates.TexImage3D(Gl.Imports.TexImage3D);
            }
            if (Delegates.glTexSubImage3D == null)
            {
                Gl.Delegates.glTexSubImage3D = new Gl.Delegates.TexSubImage3D(Gl.Imports.TexSubImage3D);
            }
            if (Delegates.glCopyTexSubImage3D == null)
            {
                Gl.Delegates.glCopyTexSubImage3D = new Gl.Delegates.CopyTexSubImage3D(Gl.Imports.CopyTexSubImage3D);
            }
            if (Delegates.glActiveTexture == null)
            {
                Gl.Delegates.glActiveTexture = new Gl.Delegates.ActiveTexture(Gl.Imports.ActiveTexture);
            }
            if (Delegates.glClientActiveTexture == null)
            {
                Gl.Delegates.glClientActiveTexture = new Gl.Delegates.ClientActiveTexture(Gl.Imports.ClientActiveTexture);
            }
            if (Delegates.glMultiTexCoord1d == null)
            {
                Gl.Delegates.glMultiTexCoord1d = new Gl.Delegates.MultiTexCoord1d(Gl.Imports.MultiTexCoord1d);
            }
            if (Delegates.glMultiTexCoord1dv == null)
            {
                Gl.Delegates.glMultiTexCoord1dv = new Gl.Delegates.MultiTexCoord1dv(Gl.Imports.MultiTexCoord1dv);
            }
            if (Delegates.glMultiTexCoord1f == null)
            {
                Gl.Delegates.glMultiTexCoord1f = new Gl.Delegates.MultiTexCoord1f(Gl.Imports.MultiTexCoord1f);
            }
            if (Delegates.glMultiTexCoord1fv == null)
            {
                Gl.Delegates.glMultiTexCoord1fv = new Gl.Delegates.MultiTexCoord1fv(Gl.Imports.MultiTexCoord1fv);
            }
            if (Delegates.glMultiTexCoord1i == null)
            {
                Gl.Delegates.glMultiTexCoord1i = new Gl.Delegates.MultiTexCoord1i(Gl.Imports.MultiTexCoord1i);
            }
            if (Delegates.glMultiTexCoord1iv == null)
            {
                Gl.Delegates.glMultiTexCoord1iv = new Gl.Delegates.MultiTexCoord1iv(Gl.Imports.MultiTexCoord1iv);
            }
            if (Delegates.glMultiTexCoord1s == null)
            {
                Gl.Delegates.glMultiTexCoord1s = new Gl.Delegates.MultiTexCoord1s(Gl.Imports.MultiTexCoord1s);
            }
            if (Delegates.glMultiTexCoord1sv == null)
            {
                Gl.Delegates.glMultiTexCoord1sv = new Gl.Delegates.MultiTexCoord1sv(Gl.Imports.MultiTexCoord1sv);
            }
            if (Delegates.glMultiTexCoord2d == null)
            {
                Gl.Delegates.glMultiTexCoord2d = new Gl.Delegates.MultiTexCoord2d(Gl.Imports.MultiTexCoord2d);
            }
            if (Delegates.glMultiTexCoord2dv == null)
            {
                Gl.Delegates.glMultiTexCoord2dv = new Gl.Delegates.MultiTexCoord2dv(Gl.Imports.MultiTexCoord2dv);
            }
            if (Delegates.glMultiTexCoord2f == null)
            {
                Gl.Delegates.glMultiTexCoord2f = new Gl.Delegates.MultiTexCoord2f(Gl.Imports.MultiTexCoord2f);
            }
            if (Delegates.glMultiTexCoord2fv == null)
            {
                Gl.Delegates.glMultiTexCoord2fv = new Gl.Delegates.MultiTexCoord2fv(Gl.Imports.MultiTexCoord2fv);
            }
            if (Delegates.glMultiTexCoord2i == null)
            {
                Gl.Delegates.glMultiTexCoord2i = new Gl.Delegates.MultiTexCoord2i(Gl.Imports.MultiTexCoord2i);
            }
            if (Delegates.glMultiTexCoord2iv == null)
            {
                Gl.Delegates.glMultiTexCoord2iv = new Gl.Delegates.MultiTexCoord2iv(Gl.Imports.MultiTexCoord2iv);
            }
            if (Delegates.glMultiTexCoord2s == null)
            {
                Gl.Delegates.glMultiTexCoord2s = new Gl.Delegates.MultiTexCoord2s(Gl.Imports.MultiTexCoord2s);
            }
            if (Delegates.glMultiTexCoord2sv == null)
            {
                Gl.Delegates.glMultiTexCoord2sv = new Gl.Delegates.MultiTexCoord2sv(Gl.Imports.MultiTexCoord2sv);
            }
            if (Delegates.glMultiTexCoord3d == null)
            {
                Gl.Delegates.glMultiTexCoord3d = new Gl.Delegates.MultiTexCoord3d(Gl.Imports.MultiTexCoord3d);
            }
            if (Delegates.glMultiTexCoord3dv == null)
            {
                Gl.Delegates.glMultiTexCoord3dv = new Gl.Delegates.MultiTexCoord3dv(Gl.Imports.MultiTexCoord3dv);
            }
            if (Delegates.glMultiTexCoord3f == null)
            {
                Gl.Delegates.glMultiTexCoord3f = new Gl.Delegates.MultiTexCoord3f(Gl.Imports.MultiTexCoord3f);
            }
            if (Delegates.glMultiTexCoord3fv == null)
            {
                Gl.Delegates.glMultiTexCoord3fv = new Gl.Delegates.MultiTexCoord3fv(Gl.Imports.MultiTexCoord3fv);
            }
            if (Delegates.glMultiTexCoord3i == null)
            {
                Gl.Delegates.glMultiTexCoord3i = new Gl.Delegates.MultiTexCoord3i(Gl.Imports.MultiTexCoord3i);
            }
            if (Delegates.glMultiTexCoord3iv == null)
            {
                Gl.Delegates.glMultiTexCoord3iv = new Gl.Delegates.MultiTexCoord3iv(Gl.Imports.MultiTexCoord3iv);
            }
            if (Delegates.glMultiTexCoord3s == null)
            {
                Gl.Delegates.glMultiTexCoord3s = new Gl.Delegates.MultiTexCoord3s(Gl.Imports.MultiTexCoord3s);
            }
            if (Delegates.glMultiTexCoord3sv == null)
            {
                Gl.Delegates.glMultiTexCoord3sv = new Gl.Delegates.MultiTexCoord3sv(Gl.Imports.MultiTexCoord3sv);
            }
            if (Delegates.glMultiTexCoord4d == null)
            {
                Gl.Delegates.glMultiTexCoord4d = new Gl.Delegates.MultiTexCoord4d(Gl.Imports.MultiTexCoord4d);
            }
            if (Delegates.glMultiTexCoord4dv == null)
            {
                Gl.Delegates.glMultiTexCoord4dv = new Gl.Delegates.MultiTexCoord4dv(Gl.Imports.MultiTexCoord4dv);
            }
            if (Delegates.glMultiTexCoord4f == null)
            {
                Gl.Delegates.glMultiTexCoord4f = new Gl.Delegates.MultiTexCoord4f(Gl.Imports.MultiTexCoord4f);
            }
            if (Delegates.glMultiTexCoord4fv == null)
            {
                Gl.Delegates.glMultiTexCoord4fv = new Gl.Delegates.MultiTexCoord4fv(Gl.Imports.MultiTexCoord4fv);
            }
            if (Delegates.glMultiTexCoord4i == null)
            {
                Gl.Delegates.glMultiTexCoord4i = new Gl.Delegates.MultiTexCoord4i(Gl.Imports.MultiTexCoord4i);
            }
            if (Delegates.glMultiTexCoord4iv == null)
            {
                Gl.Delegates.glMultiTexCoord4iv = new Gl.Delegates.MultiTexCoord4iv(Gl.Imports.MultiTexCoord4iv);
            }
            if (Delegates.glMultiTexCoord4s == null)
            {
                Gl.Delegates.glMultiTexCoord4s = new Gl.Delegates.MultiTexCoord4s(Gl.Imports.MultiTexCoord4s);
            }
            if (Delegates.glMultiTexCoord4sv == null)
            {
                Gl.Delegates.glMultiTexCoord4sv = new Gl.Delegates.MultiTexCoord4sv(Gl.Imports.MultiTexCoord4sv);
            }
            if (Delegates.glLoadTransposeMatrixf == null)
            {
                Gl.Delegates.glLoadTransposeMatrixf = new Gl.Delegates.LoadTransposeMatrixf(Gl.Imports.LoadTransposeMatrixf);
            }
            if (Delegates.glLoadTransposeMatrixd == null)
            {
                Gl.Delegates.glLoadTransposeMatrixd = new Gl.Delegates.LoadTransposeMatrixd(Gl.Imports.LoadTransposeMatrixd);
            }
            if (Delegates.glMultTransposeMatrixf == null)
            {
                Gl.Delegates.glMultTransposeMatrixf = new Gl.Delegates.MultTransposeMatrixf(Gl.Imports.MultTransposeMatrixf);
            }
            if (Delegates.glMultTransposeMatrixd == null)
            {
                Gl.Delegates.glMultTransposeMatrixd = new Gl.Delegates.MultTransposeMatrixd(Gl.Imports.MultTransposeMatrixd);
            }
            if (Delegates.glSampleCoverage == null)
            {
                Gl.Delegates.glSampleCoverage = new Gl.Delegates.SampleCoverage(Gl.Imports.SampleCoverage);
            }
            if (Delegates.glCompressedTexImage3D == null)
            {
                Gl.Delegates.glCompressedTexImage3D = new Gl.Delegates.CompressedTexImage3D(Gl.Imports.CompressedTexImage3D);
            }
            if (Delegates.glCompressedTexImage2D == null)
            {
                Gl.Delegates.glCompressedTexImage2D = new Gl.Delegates.CompressedTexImage2D(Gl.Imports.CompressedTexImage2D);
            }
            if (Delegates.glCompressedTexImage1D == null)
            {
                Gl.Delegates.glCompressedTexImage1D = new Gl.Delegates.CompressedTexImage1D(Gl.Imports.CompressedTexImage1D);
            }
            if (Delegates.glCompressedTexSubImage3D == null)
            {
                Gl.Delegates.glCompressedTexSubImage3D = new Gl.Delegates.CompressedTexSubImage3D(Gl.Imports.CompressedTexSubImage3D);
            }
            if (Delegates.glCompressedTexSubImage2D == null)
            {
                Gl.Delegates.glCompressedTexSubImage2D = new Gl.Delegates.CompressedTexSubImage2D(Gl.Imports.CompressedTexSubImage2D);
            }
            if (Delegates.glCompressedTexSubImage1D == null)
            {
                Gl.Delegates.glCompressedTexSubImage1D = new Gl.Delegates.CompressedTexSubImage1D(Gl.Imports.CompressedTexSubImage1D);
            }
            if (Delegates.glGetCompressedTexImage == null)
            {
                Gl.Delegates.glGetCompressedTexImage = new Gl.Delegates.GetCompressedTexImage(Gl.Imports.GetCompressedTexImage);
            }
            if (Delegates.glBlendFuncSeparate == null)
            {
                Gl.Delegates.glBlendFuncSeparate = new Gl.Delegates.BlendFuncSeparate(Gl.Imports.BlendFuncSeparate);
            }
            if (Delegates.glFogCoordf == null)
            {
                Gl.Delegates.glFogCoordf = new Gl.Delegates.FogCoordf(Gl.Imports.FogCoordf);
            }
            if (Delegates.glFogCoordfv == null)
            {
                Gl.Delegates.glFogCoordfv = new Gl.Delegates.FogCoordfv(Gl.Imports.FogCoordfv);
            }
            if (Delegates.glFogCoordd == null)
            {
                Gl.Delegates.glFogCoordd = new Gl.Delegates.FogCoordd(Gl.Imports.FogCoordd);
            }
            if (Delegates.glFogCoorddv == null)
            {
                Gl.Delegates.glFogCoorddv = new Gl.Delegates.FogCoorddv(Gl.Imports.FogCoorddv);
            }
            if (Delegates.glFogCoordPointer == null)
            {
                Gl.Delegates.glFogCoordPointer = new Gl.Delegates.FogCoordPointer(Gl.Imports.FogCoordPointer);
            }
            if (Delegates.glMultiDrawArrays == null)
            {
                Gl.Delegates.glMultiDrawArrays = new Gl.Delegates.MultiDrawArrays(Gl.Imports.MultiDrawArrays);
            }
            if (Delegates.glMultiDrawElements == null)
            {
                Gl.Delegates.glMultiDrawElements = new Gl.Delegates.MultiDrawElements(Gl.Imports.MultiDrawElements);
            }
            if (Delegates.glPointParameterf == null)
            {
                Gl.Delegates.glPointParameterf = new Gl.Delegates.PointParameterf(Gl.Imports.PointParameterf);
            }
            if (Delegates.glPointParameterfv == null)
            {
                Gl.Delegates.glPointParameterfv = new Gl.Delegates.PointParameterfv(Gl.Imports.PointParameterfv);
            }
            if (Delegates.glPointParameteri == null)
            {
                Gl.Delegates.glPointParameteri = new Gl.Delegates.PointParameteri(Gl.Imports.PointParameteri);
            }
            if (Delegates.glPointParameteriv == null)
            {
                Gl.Delegates.glPointParameteriv = new Gl.Delegates.PointParameteriv(Gl.Imports.PointParameteriv);
            }
            if (Delegates.glSecondaryColor3b == null)
            {
                Gl.Delegates.glSecondaryColor3b = new Gl.Delegates.SecondaryColor3b(Gl.Imports.SecondaryColor3b);
            }
            if (Delegates.glSecondaryColor3bv == null)
            {
                Gl.Delegates.glSecondaryColor3bv = new Gl.Delegates.SecondaryColor3bv(Gl.Imports.SecondaryColor3bv);
            }
            if (Delegates.glSecondaryColor3d == null)
            {
                Gl.Delegates.glSecondaryColor3d = new Gl.Delegates.SecondaryColor3d(Gl.Imports.SecondaryColor3d);
            }
            if (Delegates.glSecondaryColor3dv == null)
            {
                Gl.Delegates.glSecondaryColor3dv = new Gl.Delegates.SecondaryColor3dv(Gl.Imports.SecondaryColor3dv);
            }
            if (Delegates.glSecondaryColor3f == null)
            {
                Gl.Delegates.glSecondaryColor3f = new Gl.Delegates.SecondaryColor3f(Gl.Imports.SecondaryColor3f);
            }
            if (Delegates.glSecondaryColor3fv == null)
            {
                Gl.Delegates.glSecondaryColor3fv = new Gl.Delegates.SecondaryColor3fv(Gl.Imports.SecondaryColor3fv);
            }
            if (Delegates.glSecondaryColor3i == null)
            {
                Gl.Delegates.glSecondaryColor3i = new Gl.Delegates.SecondaryColor3i(Gl.Imports.SecondaryColor3i);
            }
            if (Delegates.glSecondaryColor3iv == null)
            {
                Gl.Delegates.glSecondaryColor3iv = new Gl.Delegates.SecondaryColor3iv(Gl.Imports.SecondaryColor3iv);
            }
            if (Delegates.glSecondaryColor3s == null)
            {
                Gl.Delegates.glSecondaryColor3s = new Gl.Delegates.SecondaryColor3s(Gl.Imports.SecondaryColor3s);
            }
            if (Delegates.glSecondaryColor3sv == null)
            {
                Gl.Delegates.glSecondaryColor3sv = new Gl.Delegates.SecondaryColor3sv(Gl.Imports.SecondaryColor3sv);
            }
            if (Delegates.glSecondaryColor3ub == null)
            {
                Gl.Delegates.glSecondaryColor3ub = new Gl.Delegates.SecondaryColor3ub(Gl.Imports.SecondaryColor3ub);
            }
            if (Delegates.glSecondaryColor3ubv == null)
            {
                Gl.Delegates.glSecondaryColor3ubv = new Gl.Delegates.SecondaryColor3ubv(Gl.Imports.SecondaryColor3ubv);
            }
            if (Delegates.glSecondaryColor3ui == null)
            {
                Gl.Delegates.glSecondaryColor3ui = new Gl.Delegates.SecondaryColor3ui(Gl.Imports.SecondaryColor3ui);
            }
            if (Delegates.glSecondaryColor3uiv == null)
            {
                Gl.Delegates.glSecondaryColor3uiv = new Gl.Delegates.SecondaryColor3uiv(Gl.Imports.SecondaryColor3uiv);
            }
            if (Delegates.glSecondaryColor3us == null)
            {
                Gl.Delegates.glSecondaryColor3us = new Gl.Delegates.SecondaryColor3us(Gl.Imports.SecondaryColor3us);
            }
            if (Delegates.glSecondaryColor3usv == null)
            {
                Gl.Delegates.glSecondaryColor3usv = new Gl.Delegates.SecondaryColor3usv(Gl.Imports.SecondaryColor3usv);
            }
            if (Delegates.glSecondaryColorPointer == null)
            {
                Gl.Delegates.glSecondaryColorPointer = new Gl.Delegates.SecondaryColorPointer(Gl.Imports.SecondaryColorPointer);
            }
            if (Delegates.glWindowPos2d == null)
            {
                Gl.Delegates.glWindowPos2d = new Gl.Delegates.WindowPos2d(Gl.Imports.WindowPos2d);
            }
            if (Delegates.glWindowPos2dv == null)
            {
                Gl.Delegates.glWindowPos2dv = new Gl.Delegates.WindowPos2dv(Gl.Imports.WindowPos2dv);
            }
            if (Delegates.glWindowPos2f == null)
            {
                Gl.Delegates.glWindowPos2f = new Gl.Delegates.WindowPos2f(Gl.Imports.WindowPos2f);
            }
            if (Delegates.glWindowPos2fv == null)
            {
                Gl.Delegates.glWindowPos2fv = new Gl.Delegates.WindowPos2fv(Gl.Imports.WindowPos2fv);
            }
            if (Delegates.glWindowPos2i == null)
            {
                Gl.Delegates.glWindowPos2i = new Gl.Delegates.WindowPos2i(Gl.Imports.WindowPos2i);
            }
            if (Delegates.glWindowPos2iv == null)
            {
                Gl.Delegates.glWindowPos2iv = new Gl.Delegates.WindowPos2iv(Gl.Imports.WindowPos2iv);
            }
            if (Delegates.glWindowPos2s == null)
            {
                Gl.Delegates.glWindowPos2s = new Gl.Delegates.WindowPos2s(Gl.Imports.WindowPos2s);
            }
            if (Delegates.glWindowPos2sv == null)
            {
                Gl.Delegates.glWindowPos2sv = new Gl.Delegates.WindowPos2sv(Gl.Imports.WindowPos2sv);
            }
            if (Delegates.glWindowPos3d == null)
            {
                Gl.Delegates.glWindowPos3d = new Gl.Delegates.WindowPos3d(Gl.Imports.WindowPos3d);
            }
            if (Delegates.glWindowPos3dv == null)
            {
                Gl.Delegates.glWindowPos3dv = new Gl.Delegates.WindowPos3dv(Gl.Imports.WindowPos3dv);
            }
            if (Delegates.glWindowPos3f == null)
            {
                Gl.Delegates.glWindowPos3f = new Gl.Delegates.WindowPos3f(Gl.Imports.WindowPos3f);
            }
            if (Delegates.glWindowPos3fv == null)
            {
                Gl.Delegates.glWindowPos3fv = new Gl.Delegates.WindowPos3fv(Gl.Imports.WindowPos3fv);
            }
            if (Delegates.glWindowPos3i == null)
            {
                Gl.Delegates.glWindowPos3i = new Gl.Delegates.WindowPos3i(Gl.Imports.WindowPos3i);
            }
            if (Delegates.glWindowPos3iv == null)
            {
                Gl.Delegates.glWindowPos3iv = new Gl.Delegates.WindowPos3iv(Gl.Imports.WindowPos3iv);
            }
            if (Delegates.glWindowPos3s == null)
            {
                Gl.Delegates.glWindowPos3s = new Gl.Delegates.WindowPos3s(Gl.Imports.WindowPos3s);
            }
            if (Delegates.glWindowPos3sv == null)
            {
                Gl.Delegates.glWindowPos3sv = new Gl.Delegates.WindowPos3sv(Gl.Imports.WindowPos3sv);
            }
            if (Delegates.glGenQueries == null)
            {
                Gl.Delegates.glGenQueries = new Gl.Delegates.GenQueries(Gl.Imports.GenQueries);
            }
            if (Delegates.glDeleteQueries == null)
            {
                Gl.Delegates.glDeleteQueries = new Gl.Delegates.DeleteQueries(Gl.Imports.DeleteQueries);
            }
            if (Delegates.glIsQuery == null)
            {
                Gl.Delegates.glIsQuery = new Gl.Delegates.IsQuery(Gl.Imports.IsQuery);
            }
            if (Delegates.glBeginQuery == null)
            {
                Gl.Delegates.glBeginQuery = new Gl.Delegates.BeginQuery(Gl.Imports.BeginQuery);
            }
            if (Delegates.glEndQuery == null)
            {
                Gl.Delegates.glEndQuery = new Gl.Delegates.EndQuery(Gl.Imports.EndQuery);
            }
            if (Delegates.glGetQueryiv == null)
            {
                Gl.Delegates.glGetQueryiv = new Gl.Delegates.GetQueryiv(Gl.Imports.GetQueryiv);
            }
            if (Delegates.glGetQueryObjectiv == null)
            {
                Gl.Delegates.glGetQueryObjectiv = new Gl.Delegates.GetQueryObjectiv(Gl.Imports.GetQueryObjectiv);
            }
            if (Delegates.glGetQueryObjectuiv == null)
            {
                Gl.Delegates.glGetQueryObjectuiv = new Gl.Delegates.GetQueryObjectuiv(Gl.Imports.GetQueryObjectuiv);
            }
            if (Delegates.glBindBuffer == null)
            {
                Gl.Delegates.glBindBuffer = new Gl.Delegates.BindBuffer(Gl.Imports.BindBuffer);
            }
            if (Delegates.glDeleteBuffers == null)
            {
                Gl.Delegates.glDeleteBuffers = new Gl.Delegates.DeleteBuffers(Gl.Imports.DeleteBuffers);
            }
            if (Delegates.glGenBuffers == null)
            {
                Gl.Delegates.glGenBuffers = new Gl.Delegates.GenBuffers(Gl.Imports.GenBuffers);
            }
            if (Delegates.glIsBuffer == null)
            {
                Gl.Delegates.glIsBuffer = new Gl.Delegates.IsBuffer(Gl.Imports.IsBuffer);
            }
            if (Delegates.glBufferData == null)
            {
                Gl.Delegates.glBufferData = new Gl.Delegates.BufferData(Gl.Imports.BufferData);
            }
            if (Delegates.glBufferSubData == null)
            {
                Gl.Delegates.glBufferSubData = new Gl.Delegates.BufferSubData(Gl.Imports.BufferSubData);
            }
            if (Delegates.glGetBufferSubData == null)
            {
                Gl.Delegates.glGetBufferSubData = new Gl.Delegates.GetBufferSubData(Gl.Imports.GetBufferSubData);
            }
            if (Delegates.glMapBuffer == null)
            {
                Gl.Delegates.glMapBuffer = new Gl.Delegates.MapBuffer(Gl.Imports.MapBuffer);
            }
            if (Delegates.glUnmapBuffer == null)
            {
                Gl.Delegates.glUnmapBuffer = new Gl.Delegates.UnmapBuffer(Gl.Imports.UnmapBuffer);
            }
            if (Delegates.glGetBufferParameteriv == null)
            {
                Gl.Delegates.glGetBufferParameteriv = new Gl.Delegates.GetBufferParameteriv(Gl.Imports.GetBufferParameteriv);
            }
            if (Delegates.glGetBufferPointerv == null)
            {
                Gl.Delegates.glGetBufferPointerv = new Gl.Delegates.GetBufferPointerv(Gl.Imports.GetBufferPointerv);
            }
            if (Delegates.glBlendEquationSeparate == null)
            {
                Gl.Delegates.glBlendEquationSeparate = new Gl.Delegates.BlendEquationSeparate(Gl.Imports.BlendEquationSeparate);
            }
            if (Delegates.glDrawBuffers == null)
            {
                Gl.Delegates.glDrawBuffers = new Gl.Delegates.DrawBuffers(Gl.Imports.DrawBuffers);
            }
            if (Delegates.glStencilOpSeparate == null)
            {
                Gl.Delegates.glStencilOpSeparate = new Gl.Delegates.StencilOpSeparate(Gl.Imports.StencilOpSeparate);
            }
            if (Delegates.glStencilFuncSeparate == null)
            {
                Gl.Delegates.glStencilFuncSeparate = new Gl.Delegates.StencilFuncSeparate(Gl.Imports.StencilFuncSeparate);
            }
            if (Delegates.glStencilMaskSeparate == null)
            {
                Gl.Delegates.glStencilMaskSeparate = new Gl.Delegates.StencilMaskSeparate(Gl.Imports.StencilMaskSeparate);
            }
            if (Delegates.glAttachShader == null)
            {
                Gl.Delegates.glAttachShader = new Gl.Delegates.AttachShader(Gl.Imports.AttachShader);
            }
            if (Delegates.glBindAttribLocation == null)
            {
                Gl.Delegates.glBindAttribLocation = new Gl.Delegates.BindAttribLocation(Gl.Imports.BindAttribLocation);
            }
            if (Delegates.glCompileShader == null)
            {
                Gl.Delegates.glCompileShader = new Gl.Delegates.CompileShader(Gl.Imports.CompileShader);
            }
            if (Delegates.glCreateProgram == null)
            {
                Gl.Delegates.glCreateProgram = new Gl.Delegates.CreateProgram(Gl.Imports.CreateProgram);
            }
            if (Delegates.glCreateShader == null)
            {
                Gl.Delegates.glCreateShader = new Gl.Delegates.CreateShader(Gl.Imports.CreateShader);
            }
            if (Delegates.glDeleteProgram == null)
            {
                Gl.Delegates.glDeleteProgram = new Gl.Delegates.DeleteProgram(Gl.Imports.DeleteProgram);
            }
            if (Delegates.glDeleteShader == null)
            {
                Gl.Delegates.glDeleteShader = new Gl.Delegates.DeleteShader(Gl.Imports.DeleteShader);
            }
            if (Delegates.glDetachShader == null)
            {
                Gl.Delegates.glDetachShader = new Gl.Delegates.DetachShader(Gl.Imports.DetachShader);
            }
            if (Delegates.glDisableVertexAttribArray == null)
            {
                Gl.Delegates.glDisableVertexAttribArray = new Gl.Delegates.DisableVertexAttribArray(Gl.Imports.DisableVertexAttribArray);
            }
            if (Delegates.glEnableVertexAttribArray == null)
            {
                Gl.Delegates.glEnableVertexAttribArray = new Gl.Delegates.EnableVertexAttribArray(Gl.Imports.EnableVertexAttribArray);
            }
            if (Delegates.glGetActiveAttrib == null)
            {
                Gl.Delegates.glGetActiveAttrib = new Gl.Delegates.GetActiveAttrib(Gl.Imports.GetActiveAttrib);
            }
            if (Delegates.glGetActiveUniform == null)
            {
                Gl.Delegates.glGetActiveUniform = new Gl.Delegates.GetActiveUniform(Gl.Imports.GetActiveUniform);
            }
            if (Delegates.glGetAttachedShaders == null)
            {
                Gl.Delegates.glGetAttachedShaders = new Gl.Delegates.GetAttachedShaders(Gl.Imports.GetAttachedShaders);
            }
            if (Delegates.glGetAttribLocation == null)
            {
                Gl.Delegates.glGetAttribLocation = new Gl.Delegates.GetAttribLocation(Gl.Imports.GetAttribLocation);
            }
            if (Delegates.glGetProgramiv == null)
            {
                Gl.Delegates.glGetProgramiv = new Gl.Delegates.GetProgramiv(Gl.Imports.GetProgramiv);
            }
            if (Delegates.glGetProgramInfoLog == null)
            {
                Gl.Delegates.glGetProgramInfoLog = new Gl.Delegates.GetProgramInfoLog(Gl.Imports.GetProgramInfoLog);
            }
            if (Delegates.glGetShaderiv == null)
            {
                Gl.Delegates.glGetShaderiv = new Gl.Delegates.GetShaderiv(Gl.Imports.GetShaderiv);
            }
            if (Delegates.glGetShaderInfoLog == null)
            {
                Gl.Delegates.glGetShaderInfoLog = new Gl.Delegates.GetShaderInfoLog(Gl.Imports.GetShaderInfoLog);
            }
            if (Delegates.glGetShaderSource == null)
            {
                Gl.Delegates.glGetShaderSource = new Gl.Delegates.GetShaderSource(Gl.Imports.GetShaderSource);
            }
            if (Delegates.glGetUniformLocation == null)
            {
                Gl.Delegates.glGetUniformLocation = new Gl.Delegates.GetUniformLocation(Gl.Imports.GetUniformLocation);
            }
            if (Delegates.glGetUniformfv == null)
            {
                Gl.Delegates.glGetUniformfv = new Gl.Delegates.GetUniformfv(Gl.Imports.GetUniformfv);
            }
            if (Delegates.glGetUniformiv == null)
            {
                Gl.Delegates.glGetUniformiv = new Gl.Delegates.GetUniformiv(Gl.Imports.GetUniformiv);
            }
            if (Delegates.glGetVertexAttribdv == null)
            {
                Gl.Delegates.glGetVertexAttribdv = new Gl.Delegates.GetVertexAttribdv(Gl.Imports.GetVertexAttribdv);
            }
            if (Delegates.glGetVertexAttribfv == null)
            {
                Gl.Delegates.glGetVertexAttribfv = new Gl.Delegates.GetVertexAttribfv(Gl.Imports.GetVertexAttribfv);
            }
            if (Delegates.glGetVertexAttribiv == null)
            {
                Gl.Delegates.glGetVertexAttribiv = new Gl.Delegates.GetVertexAttribiv(Gl.Imports.GetVertexAttribiv);
            }
            if (Delegates.glGetVertexAttribPointerv == null)
            {
                Gl.Delegates.glGetVertexAttribPointerv = new Gl.Delegates.GetVertexAttribPointerv(Gl.Imports.GetVertexAttribPointerv);
            }
            if (Delegates.glIsProgram == null)
            {
                Gl.Delegates.glIsProgram = new Gl.Delegates.IsProgram(Gl.Imports.IsProgram);
            }
            if (Delegates.glIsShader == null)
            {
                Gl.Delegates.glIsShader = new Gl.Delegates.IsShader(Gl.Imports.IsShader);
            }
            if (Delegates.glLinkProgram == null)
            {
                Gl.Delegates.glLinkProgram = new Gl.Delegates.LinkProgram(Gl.Imports.LinkProgram);
            }
            if (Delegates.glShaderSource == null)
            {
                Gl.Delegates.glShaderSource = new Gl.Delegates.ShaderSource(Gl.Imports.ShaderSource);
            }
            if (Delegates.glUseProgram == null)
            {
                Gl.Delegates.glUseProgram = new Gl.Delegates.UseProgram(Gl.Imports.UseProgram);
            }
            if (Delegates.glUniform1f == null)
            {
                Gl.Delegates.glUniform1f = new Gl.Delegates.Uniform1f(Gl.Imports.Uniform1f);
            }
            if (Delegates.glUniform2f == null)
            {
                Gl.Delegates.glUniform2f = new Gl.Delegates.Uniform2f(Gl.Imports.Uniform2f);
            }
            if (Delegates.glUniform3f == null)
            {
                Gl.Delegates.glUniform3f = new Gl.Delegates.Uniform3f(Gl.Imports.Uniform3f);
            }
            if (Delegates.glUniform4f == null)
            {
                Gl.Delegates.glUniform4f = new Gl.Delegates.Uniform4f(Gl.Imports.Uniform4f);
            }
            if (Delegates.glUniform1i == null)
            {
                Gl.Delegates.glUniform1i = new Gl.Delegates.Uniform1i(Gl.Imports.Uniform1i);
            }
            if (Delegates.glUniform2i == null)
            {
                Gl.Delegates.glUniform2i = new Gl.Delegates.Uniform2i(Gl.Imports.Uniform2i);
            }
            if (Delegates.glUniform3i == null)
            {
                Gl.Delegates.glUniform3i = new Gl.Delegates.Uniform3i(Gl.Imports.Uniform3i);
            }
            if (Delegates.glUniform4i == null)
            {
                Gl.Delegates.glUniform4i = new Gl.Delegates.Uniform4i(Gl.Imports.Uniform4i);
            }
            if (Delegates.glUniform1fv == null)
            {
                Gl.Delegates.glUniform1fv = new Gl.Delegates.Uniform1fv(Gl.Imports.Uniform1fv);
            }
            if (Delegates.glUniform2fv == null)
            {
                Gl.Delegates.glUniform2fv = new Gl.Delegates.Uniform2fv(Gl.Imports.Uniform2fv);
            }
            if (Delegates.glUniform3fv == null)
            {
                Gl.Delegates.glUniform3fv = new Gl.Delegates.Uniform3fv(Gl.Imports.Uniform3fv);
            }
            if (Delegates.glUniform4fv == null)
            {
                Gl.Delegates.glUniform4fv = new Gl.Delegates.Uniform4fv(Gl.Imports.Uniform4fv);
            }
            if (Delegates.glUniform1iv == null)
            {
                Gl.Delegates.glUniform1iv = new Gl.Delegates.Uniform1iv(Gl.Imports.Uniform1iv);
            }
            if (Delegates.glUniform2iv == null)
            {
                Gl.Delegates.glUniform2iv = new Gl.Delegates.Uniform2iv(Gl.Imports.Uniform2iv);
            }
            if (Delegates.glUniform3iv == null)
            {
                Gl.Delegates.glUniform3iv = new Gl.Delegates.Uniform3iv(Gl.Imports.Uniform3iv);
            }
            if (Delegates.glUniform4iv == null)
            {
                Gl.Delegates.glUniform4iv = new Gl.Delegates.Uniform4iv(Gl.Imports.Uniform4iv);
            }
            if (Delegates.glUniformMatrix2fv == null)
            {
                Gl.Delegates.glUniformMatrix2fv = new Gl.Delegates.UniformMatrix2fv(Gl.Imports.UniformMatrix2fv);
            }
            if (Delegates.glUniformMatrix3fv == null)
            {
                Gl.Delegates.glUniformMatrix3fv = new Gl.Delegates.UniformMatrix3fv(Gl.Imports.UniformMatrix3fv);
            }
            if (Delegates.glUniformMatrix4fv == null)
            {
                Gl.Delegates.glUniformMatrix4fv = new Gl.Delegates.UniformMatrix4fv(Gl.Imports.UniformMatrix4fv);
            }
            if (Delegates.glValidateProgram == null)
            {
                Gl.Delegates.glValidateProgram = new Gl.Delegates.ValidateProgram(Gl.Imports.ValidateProgram);
            }
            if (Delegates.glVertexAttrib1d == null)
            {
                Gl.Delegates.glVertexAttrib1d = new Gl.Delegates.VertexAttrib1d(Gl.Imports.VertexAttrib1d);
            }
            if (Delegates.glVertexAttrib1dv == null)
            {
                Gl.Delegates.glVertexAttrib1dv = new Gl.Delegates.VertexAttrib1dv(Gl.Imports.VertexAttrib1dv);
            }
            if (Delegates.glVertexAttrib1f == null)
            {
                Gl.Delegates.glVertexAttrib1f = new Gl.Delegates.VertexAttrib1f(Gl.Imports.VertexAttrib1f);
            }
            if (Delegates.glVertexAttrib1fv == null)
            {
                Gl.Delegates.glVertexAttrib1fv = new Gl.Delegates.VertexAttrib1fv(Gl.Imports.VertexAttrib1fv);
            }
            if (Delegates.glVertexAttrib1s == null)
            {
                Gl.Delegates.glVertexAttrib1s = new Gl.Delegates.VertexAttrib1s(Gl.Imports.VertexAttrib1s);
            }
            if (Delegates.glVertexAttrib1sv == null)
            {
                Gl.Delegates.glVertexAttrib1sv = new Gl.Delegates.VertexAttrib1sv(Gl.Imports.VertexAttrib1sv);
            }
            if (Delegates.glVertexAttrib2d == null)
            {
                Gl.Delegates.glVertexAttrib2d = new Gl.Delegates.VertexAttrib2d(Gl.Imports.VertexAttrib2d);
            }
            if (Delegates.glVertexAttrib2dv == null)
            {
                Gl.Delegates.glVertexAttrib2dv = new Gl.Delegates.VertexAttrib2dv(Gl.Imports.VertexAttrib2dv);
            }
            if (Delegates.glVertexAttrib2f == null)
            {
                Gl.Delegates.glVertexAttrib2f = new Gl.Delegates.VertexAttrib2f(Gl.Imports.VertexAttrib2f);
            }
            if (Delegates.glVertexAttrib2fv == null)
            {
                Gl.Delegates.glVertexAttrib2fv = new Gl.Delegates.VertexAttrib2fv(Gl.Imports.VertexAttrib2fv);
            }
            if (Delegates.glVertexAttrib2s == null)
            {
                Gl.Delegates.glVertexAttrib2s = new Gl.Delegates.VertexAttrib2s(Gl.Imports.VertexAttrib2s);
            }
            if (Delegates.glVertexAttrib2sv == null)
            {
                Gl.Delegates.glVertexAttrib2sv = new Gl.Delegates.VertexAttrib2sv(Gl.Imports.VertexAttrib2sv);
            }
            if (Delegates.glVertexAttrib3d == null)
            {
                Gl.Delegates.glVertexAttrib3d = new Gl.Delegates.VertexAttrib3d(Gl.Imports.VertexAttrib3d);
            }
            if (Delegates.glVertexAttrib3dv == null)
            {
                Gl.Delegates.glVertexAttrib3dv = new Gl.Delegates.VertexAttrib3dv(Gl.Imports.VertexAttrib3dv);
            }
            if (Delegates.glVertexAttrib3f == null)
            {
                Gl.Delegates.glVertexAttrib3f = new Gl.Delegates.VertexAttrib3f(Gl.Imports.VertexAttrib3f);
            }
            if (Delegates.glVertexAttrib3fv == null)
            {
                Gl.Delegates.glVertexAttrib3fv = new Gl.Delegates.VertexAttrib3fv(Gl.Imports.VertexAttrib3fv);
            }
            if (Delegates.glVertexAttrib3s == null)
            {
                Gl.Delegates.glVertexAttrib3s = new Gl.Delegates.VertexAttrib3s(Gl.Imports.VertexAttrib3s);
            }
            if (Delegates.glVertexAttrib3sv == null)
            {
                Gl.Delegates.glVertexAttrib3sv = new Gl.Delegates.VertexAttrib3sv(Gl.Imports.VertexAttrib3sv);
            }
            if (Delegates.glVertexAttrib4Nbv == null)
            {
                Gl.Delegates.glVertexAttrib4Nbv = new Gl.Delegates.VertexAttrib4Nbv(Gl.Imports.VertexAttrib4Nbv);
            }
            if (Delegates.glVertexAttrib4Niv == null)
            {
                Gl.Delegates.glVertexAttrib4Niv = new Gl.Delegates.VertexAttrib4Niv(Gl.Imports.VertexAttrib4Niv);
            }
            if (Delegates.glVertexAttrib4Nsv == null)
            {
                Gl.Delegates.glVertexAttrib4Nsv = new Gl.Delegates.VertexAttrib4Nsv(Gl.Imports.VertexAttrib4Nsv);
            }
            if (Delegates.glVertexAttrib4Nub == null)
            {
                Gl.Delegates.glVertexAttrib4Nub = new Gl.Delegates.VertexAttrib4Nub(Gl.Imports.VertexAttrib4Nub);
            }
            if (Delegates.glVertexAttrib4Nubv == null)
            {
                Gl.Delegates.glVertexAttrib4Nubv = new Gl.Delegates.VertexAttrib4Nubv(Gl.Imports.VertexAttrib4Nubv);
            }
            if (Delegates.glVertexAttrib4Nuiv == null)
            {
                Gl.Delegates.glVertexAttrib4Nuiv = new Gl.Delegates.VertexAttrib4Nuiv(Gl.Imports.VertexAttrib4Nuiv);
            }
            if (Delegates.glVertexAttrib4Nusv == null)
            {
                Gl.Delegates.glVertexAttrib4Nusv = new Gl.Delegates.VertexAttrib4Nusv(Gl.Imports.VertexAttrib4Nusv);
            }
            if (Delegates.glVertexAttrib4bv == null)
            {
                Gl.Delegates.glVertexAttrib4bv = new Gl.Delegates.VertexAttrib4bv(Gl.Imports.VertexAttrib4bv);
            }
            if (Delegates.glVertexAttrib4d == null)
            {
                Gl.Delegates.glVertexAttrib4d = new Gl.Delegates.VertexAttrib4d(Gl.Imports.VertexAttrib4d);
            }
            if (Delegates.glVertexAttrib4dv == null)
            {
                Gl.Delegates.glVertexAttrib4dv = new Gl.Delegates.VertexAttrib4dv(Gl.Imports.VertexAttrib4dv);
            }
            if (Delegates.glVertexAttrib4f == null)
            {
                Gl.Delegates.glVertexAttrib4f = new Gl.Delegates.VertexAttrib4f(Gl.Imports.VertexAttrib4f);
            }
            if (Delegates.glVertexAttrib4fv == null)
            {
                Gl.Delegates.glVertexAttrib4fv = new Gl.Delegates.VertexAttrib4fv(Gl.Imports.VertexAttrib4fv);
            }
            if (Delegates.glVertexAttrib4iv == null)
            {
                Gl.Delegates.glVertexAttrib4iv = new Gl.Delegates.VertexAttrib4iv(Gl.Imports.VertexAttrib4iv);
            }
            if (Delegates.glVertexAttrib4s == null)
            {
                Gl.Delegates.glVertexAttrib4s = new Gl.Delegates.VertexAttrib4s(Gl.Imports.VertexAttrib4s);
            }
            if (Delegates.glVertexAttrib4sv == null)
            {
                Gl.Delegates.glVertexAttrib4sv = new Gl.Delegates.VertexAttrib4sv(Gl.Imports.VertexAttrib4sv);
            }
            if (Delegates.glVertexAttrib4ubv == null)
            {
                Gl.Delegates.glVertexAttrib4ubv = new Gl.Delegates.VertexAttrib4ubv(Gl.Imports.VertexAttrib4ubv);
            }
            if (Delegates.glVertexAttrib4uiv == null)
            {
                Gl.Delegates.glVertexAttrib4uiv = new Gl.Delegates.VertexAttrib4uiv(Gl.Imports.VertexAttrib4uiv);
            }
            if (Delegates.glVertexAttrib4usv == null)
            {
                Gl.Delegates.glVertexAttrib4usv = new Gl.Delegates.VertexAttrib4usv(Gl.Imports.VertexAttrib4usv);
            }
            if (Delegates.glVertexAttribPointer == null)
            {
                Gl.Delegates.glVertexAttribPointer = new Gl.Delegates.VertexAttribPointer(Gl.Imports.VertexAttribPointer);
            }
            if (Delegates.glUniformMatrix2x3fv == null)
            {
                Gl.Delegates.glUniformMatrix2x3fv = new Gl.Delegates.UniformMatrix2x3fv(Gl.Imports.UniformMatrix2x3fv);
            }
            if (Delegates.glUniformMatrix3x2fv == null)
            {
                Gl.Delegates.glUniformMatrix3x2fv = new Gl.Delegates.UniformMatrix3x2fv(Gl.Imports.UniformMatrix3x2fv);
            }
            if (Delegates.glUniformMatrix2x4fv == null)
            {
                Gl.Delegates.glUniformMatrix2x4fv = new Gl.Delegates.UniformMatrix2x4fv(Gl.Imports.UniformMatrix2x4fv);
            }
            if (Delegates.glUniformMatrix4x2fv == null)
            {
                Gl.Delegates.glUniformMatrix4x2fv = new Gl.Delegates.UniformMatrix4x2fv(Gl.Imports.UniformMatrix4x2fv);
            }
            if (Delegates.glUniformMatrix3x4fv == null)
            {
                Gl.Delegates.glUniformMatrix3x4fv = new Gl.Delegates.UniformMatrix3x4fv(Gl.Imports.UniformMatrix3x4fv);
            }
            if (Delegates.glUniformMatrix4x3fv == null)
            {
                Gl.Delegates.glUniformMatrix4x3fv = new Gl.Delegates.UniformMatrix4x3fv(Gl.Imports.UniformMatrix4x3fv);
            }
        }

        #endregion static Constructor
    }
}
