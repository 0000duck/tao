Tao.OpenGl 1.5.0.0
http://www.taoframework.com
Copyright ©2003-2004 Randy Ridge, All rights reserved.
Copyright (C) 2004 Vladimir Vukicevic, All rights reserved.

Tao.OpenGl is an OpenGL binding for .NET, implementing GL 1.5 and GLU 1.3.

=== OpenGl DLL and compilation portability ===

Due to some issues with the binding generation that I've yet to work
out, the extension entry points in a Tao.OpenGl.dll built for WIN32 is
not portable to Linux/Mono.  To make matters worse, a clean
Tao.OpenGl.dll build can't happen on Linux/Mono, because of the lack
of ILMerge.exe on Linux.  It's acceptable to build a Tao.OpenGl.dll on
windows that's built for Mono and then copy that and use it on Mono.

Hopefully this issue will be resolved soon.

=== Extensions and Tao ===

[To be written.  Comments/problems to vladimir@pobox.com .]

In a nutshell, you'll need to fetch the static GlExtensionLoader instance:

   GlExtensionLoader gex = GlExtensionLoader.GetInstance();

then, to check for support without loading:

   bool vboSupported = gex.IsExtensionSupported("GL_ARB_vertex_buffer_object");

or to check and load:

   bool vboSupported = gex.LoadExtension ("GL_ARB_vertex_buffer_object");

then, just use

   Tao.OpenGl.Gl.glGenBuffersARB(1, out buf);
   Tao.OpenGl.Gl.glBindBufferARB(target, buf);
   etc.

Multiple context is supported; you have to create a new ContextGl class:

   Tao.OpenGl.ContextGl cgl = new Tao.OpenGl.ContextGl();

then pass this as the first argument to IsExtensionSupported/LoadExtension:

   gex.LoadExtension (cgl, "GL_ARB_vertex_buffer_object");

And then call

   cgl.glGenBuffersARB(1, out buf);
   etc.

It's the application's responsibility to make the appropriate context
current before calling GlCore or Gl methods on a ContextGl instance.
   

Change Log:

1.x.0.0 - August 23, 2004:
    Rewrote OpenGl layer to generate code directly from ARB
    spec files; also implemented new extension loading/access mechanism.

1.5.0.0 - April 20, 2004:
    Initial release.  Special thanks to Manfred Doetter for his work
    implementing almost all of the extensions.
