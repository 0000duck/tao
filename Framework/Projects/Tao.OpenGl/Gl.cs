#region License
/*
MIT License
Copyright ©2003-2004 Randy Ridge
http://www.randyridge.com/Tao/Default.aspx
All rights reserved.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/
#endregion License

using System;
using System.Runtime.InteropServices;
using System.Security;

namespace Tao.OpenGl {
    #region Class Documentation
    /// <summary>
    ///     OpenGL binding for .NET, implementing GL 1.5.
    /// </summary>
    /// <remarks>
    ///     Binds functions and definitions in opengl32.dll or libGL.so.
    /// </remarks>
    #endregion Class Documentation
    public sealed class Gl {
        // --- Fields ---
        #region Private Constants
        #region string GL_NATIVE_LIBRARY
        /// <summary>
        ///     Specifies GL's native library archive.
        /// </summary>
        /// <remarks>
        ///     Specifies opengl32.dll for Windows and libGL.so for LINUX.
        /// </remarks>
        #if WIN32
        private const string GL_NATIVE_LIBRARY = "opengl32.dll";
        #elif LINUX
        private const string GL_NATIVE_LIBRARY = "libGL.so";
        #endif
        #endregion string GL_NATIVE_LIBRARY

        #region CallingConvention CALLING_CONVENTION
        /// <summary>
        ///     Specifies the calling convention.
        /// </summary>
        /// <remarks>
        ///     Specifies <see cref="CallingConvention.StdCall" /> for Windows and
        ///     <see cref="CallingConvention.Cdecl" /> for LINUX.
        /// </remarks>
        #if WIN32
        private const CallingConvention CALLING_CONVENTION = CallingConvention.StdCall;
        #elif LINUX
        private const CallingConvention CALLING_CONVENTION = CallingConvention.Cdecl;
        #endif
        #endregion CallingConvention CALLING_CONVENTION
        #endregion Private Constants

        #region Public OpenGL 1.0 Constants
        // Version
        #region GL_VERSION_1_0
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VERSION_1_0 1
        public const bool GL_VERSION_1_0 = true;
        #endregion GL_VERSION_1_0

        // AttribMask
        #region GL_CURRENT_BIT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_CURRENT_BIT 0x00000001
        public const int GL_CURRENT_BIT = 0x00000001;
        #endregion GL_CURRENT_BIT

        #region GL_POINT_BIT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_POINT_BIT 0x00000002
        public const int GL_POINT_BIT = 0x00000002;
        #endregion GL_POINT_BIT

        #region GL_LINE_BIT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_LINE_BIT 0x00000004
        public const int GL_LINE_BIT = 0x00000004;
        #endregion GL_LINE_BIT

        #region GL_POLYGON_BIT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_POLYGON_BIT 0x00000008
        public const int GL_POLYGON_BIT = 0x00000008;
        #endregion GL_POLYGON_BIT

        #region GL_POLYGON_STIPPLE_BIT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_POLYGON_STIPPLE_BIT 0x00000010
        public const int GL_POLYGON_STIPPLE_BIT = 0x00000010;
        #endregion GL_POLYGON_STIPPLE_BIT

        #region GL_PIXEL_MODE_BIT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PIXEL_MODE_BIT 0x00000020
        public const int GL_PIXEL_MODE_BIT = 0x00000020;
        #endregion GL_PIXEL_MODE_BIT

        #region GL_LIGHTING_BIT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_LIGHTING_BIT 0x00000040
        public const int GL_LIGHTING_BIT = 0x00000040;
        #endregion GL_LIGHTING_BIT

        #region GL_FOG_BIT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_FOG_BIT 0x00000080
        public const int GL_FOG_BIT = 0x00000080;
        #endregion GL_FOG_BIT

        #region GL_DEPTH_BUFFER_BIT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DEPTH_BUFFER_BIT 0x00000100
        public const int GL_DEPTH_BUFFER_BIT = 0x00000100;
        #endregion GL_DEPTH_BUFFER_BIT

        #region GL_ACCUM_BUFFER_BIT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_ACCUM_BUFFER_BIT 0x00000200
        public const int GL_ACCUM_BUFFER_BIT = 0x00000200;
        #endregion GL_ACCUM_BUFFER_BIT

        #region GL_STENCIL_BUFFER_BIT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_STENCIL_BUFFER_BIT 0x00000400
        public const int GL_STENCIL_BUFFER_BIT = 0x00000400;
        #endregion GL_STENCIL_BUFFER_BIT

        #region GL_VIEWPORT_BIT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VIEWPORT_BIT 0x00000800
        public const int GL_VIEWPORT_BIT = 0x00000800;
        #endregion GL_VIEWPORT_BIT

        #region GL_TRANSFORM_BIT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TRANSFORM_BIT 0x00001000
        public const int GL_TRANSFORM_BIT = 0x00001000;
        #endregion GL_TRANSFORM_BIT

        #region GL_ENABLE_BIT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_ENABLE_BIT 0x00002000
        public const int GL_ENABLE_BIT = 0x00002000;
        #endregion GL_ENABLE_BIT

        #region GL_COLOR_BUFFER_BIT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COLOR_BUFFER_BIT 0x00004000
        public const int GL_COLOR_BUFFER_BIT = 0x00004000;
        #endregion GL_COLOR_BUFFER_BIT

        #region GL_HINT_BIT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_HINT_BIT 0x00008000
        public const int GL_HINT_BIT = 0x00008000;
        #endregion GL_HINT_BIT

        #region GL_EVAL_BIT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_EVAL_BIT 0x00010000
        public const int GL_EVAL_BIT = 0x00010000;
        #endregion GL_EVAL_BIT

        #region GL_LIST_BIT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_LIST_BIT 0x00020000
        public const int GL_LIST_BIT = 0x00020000;
        #endregion GL_LIST_BIT

        #region GL_TEXTURE_BIT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_BIT 0x00040000
        public const int GL_TEXTURE_BIT = 0x00040000;
        #endregion GL_TEXTURE_BIT

        #region GL_SCISSOR_BIT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SCISSOR_BIT 0x00080000
        public const int GL_SCISSOR_BIT = 0x00080000;
        #endregion GL_SCISSOR_BIT

        #region GL_ALL_ATTRIB_BITS
        /// <summary>
        /// 
        /// </summary>
        // #define GL_ALL_ATTRIB_BITS 0xFFFFFFFF (NVIDIA)
        // #define GL_ALL_ATTRIB_BITS 0x000fffff (MICROSOFT)
        public const int GL_ALL_ATTRIB_BITS = unchecked((int) 0xFFFFFFFF);
        #endregion GL_ALL_ATTRIB_BITS

        // Bool
        #region GL_FALSE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_FALSE 0
        public const int GL_FALSE = 0;
        #endregion GL_FALSE

        #region GL_TRUE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TRUE 1
        public const int GL_TRUE = 1;
        #endregion GL_TRUE

        // BeginMode
        #region GL_POINTS
        /// <summary>
        /// 
        /// </summary>
        // #define GL_POINTS 0x0000
        public const int GL_POINTS = 0x0000;
        #endregion GL_POINTS

        #region GL_LINES
        /// <summary>
        /// 
        /// </summary>
        // #define GL_LINES 0x0001
        public const int GL_LINES = 0x0001;
        #endregion GL_LINES

        #region GL_LINE_LOOP
        /// <summary>
        /// 
        /// </summary>
        // #define GL_LINE_LOOP 0x0002
        public const int GL_LINE_LOOP = 0x0002;
        #endregion GL_LINE_LOOP

        #region GL_LINE_STRIP
        /// <summary>
        /// 
        /// </summary>
        // #define GL_LINE_STRIP 0x0003
        public const int GL_LINE_STRIP = 0x0003;
        #endregion GL_LINE_STRIP

        #region GL_TRIANGLES
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TRIANGLES 0x0004
        public const int GL_TRIANGLES = 0x0004;
        #endregion GL_TRIANGLES

        #region GL_TRIANGLE_STRIP
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TRIANGLE_STRIP 0x0005
        public const int GL_TRIANGLE_STRIP = 0x0005;
        #endregion GL_TRIANGLE_STRIP

        #region GL_TRIANGLE_FAN
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TRIANGLE_FAN 0x0006
        public const int GL_TRIANGLE_FAN = 0x0006;
        #endregion GL_TRIANGLE_FAN

        #region GL_QUADS
        /// <summary>
        /// 
        /// </summary>
        // #define GL_QUADS 0x0007
        public const int GL_QUADS = 0x0007;
        #endregion GL_QUADS

        #region GL_QUAD_STRIP
        /// <summary>
        /// 
        /// </summary>
        // #define GL_QUAD_STRIP 0x0008
        public const int GL_QUAD_STRIP = 0x0008;
        #endregion GL_QUAD_STRIP

        #region GL_POLYGON
        /// <summary>
        /// 
        /// </summary>
        // #define GL_POLYGON 0x0009
        public const int GL_POLYGON = 0x0009;
        #endregion GL_POLYGON

        // AccumOp
        #region GL_ACCUM
        /// <summary>
        /// 
        /// </summary>
        // #define GL_ACCUM 0x0100
        public const int GL_ACCUM = 0x0100;
        #endregion GL_ACCUM

        #region GL_LOAD
        /// <summary>
        /// 
        /// </summary>
        // #define GL_LOAD 0x0101
        public const int GL_LOAD = 0x0101;
        #endregion GL_LOAD

        #region GL_RETURN
        /// <summary>
        /// 
        /// </summary>
        // #define GL_RETURN 0x0102
        public const int GL_RETURN = 0x0102;
        #endregion GL_RETURN

        #region GL_MULT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MULT 0x0103
        public const int GL_MULT = 0x0103;
        #endregion GL_MULT

        #region GL_ADD
        /// <summary>
        /// 
        /// </summary>
        // #define GL_ADD 0x0104
        public const int GL_ADD = 0x0104;
        #endregion GL_ADD

        // AlphaFunction
        #region GL_NEVER
        /// <summary>
        /// 
        /// </summary>
        // #define GL_NEVER 0x0200
        public const int GL_NEVER = 0x0200;
        #endregion GL_NEVER

        #region GL_LESS
        /// <summary>
        /// 
        /// </summary>
        // #define GL_LESS 0x0201
        public const int GL_LESS = 0x0201;
        #endregion GL_LESS

        #region GL_EQUAL
        /// <summary>
        /// 
        /// </summary>
        // #define GL_EQUAL 0x0202
        public const int GL_EQUAL = 0x0202;
        #endregion GL_EQUAL

        #region GL_LEQUAL
        /// <summary>
        /// 
        /// </summary>
        // #define GL_LEQUAL 0x0203
        public const int GL_LEQUAL = 0x0203;
        #endregion GL_LEQUAL

        #region GL_GREATER
        /// <summary>
        /// 
        /// </summary>
        // #define GL_GREATER 0x0204
        public const int GL_GREATER = 0x0204;
        #endregion GL_GREATER

        #region GL_NOTEQUAL
        /// <summary>
        /// 
        /// </summary>
        // #define GL_NOTEQUAL 0x0205
        public const int GL_NOTEQUAL = 0x0205;
        #endregion GL_NOTEQUAL

        #region GL_GEQUAL
        /// <summary>
        /// 
        /// </summary>
        // #define GL_GEQUAL 0x0206
        public const int GL_GEQUAL = 0x0206;
        #endregion GL_GEQUAL

        #region GL_ALWAYS
        /// <summary>
        /// 
        /// </summary>
        // #define GL_ALWAYS 0x0207
        public const int GL_ALWAYS = 0x0207;
        #endregion GL_ALWAYS

        // BlendingFactorDest
        #region GL_ZERO
        /// <summary>
        /// 
        /// </summary>
        // #define GL_ZERO 0
        public const int GL_ZERO = 0;
        #endregion GL_ZERO

        #region GL_ONE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_ONE 1
        public const int GL_ONE = 1;
        #endregion GL_ONE

        #region GL_SRC_COLOR
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SRC_COLOR 0x0300
        public const int GL_SRC_COLOR = 0x0300;
        #endregion GL_SRC_COLOR

        #region GL_ONE_MINUS_SRC_COLOR
        /// <summary>
        /// 
        /// </summary>
        // #define GL_ONE_MINUS_SRC_COLOR 0x0301
        public const int GL_ONE_MINUS_SRC_COLOR = 0x0301;
        #endregion GL_ONE_MINUS_SRC_COLOR

        #region GL_SRC_ALPHA
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SRC_ALPHA 0x0302
        public const int GL_SRC_ALPHA = 0x0302;
        #endregion GL_SRC_ALPHA

        #region GL_ONE_MINUS_SRC_ALPHA
        /// <summary>
        /// 
        /// </summary>
        // #define GL_ONE_MINUS_SRC_ALPHA 0x0303
        public const int GL_ONE_MINUS_SRC_ALPHA = 0x0303;
        #endregion GL_ONE_MINUS_SRC_ALPHA

        #region GL_DST_ALPHA
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DST_ALPHA 0x0304
        public const int GL_DST_ALPHA = 0x0304;
        #endregion GL_DST_ALPHA

        #region GL_ONE_MINUS_DST_ALPHA
        /// <summary>
        /// 
        /// </summary>
        // #define GL_ONE_MINUS_DST_ALPHA 0x0305
        public const int GL_ONE_MINUS_DST_ALPHA = 0x0305;
        #endregion GL_ONE_MINUS_DST_ALPHA

        // BlendingFactorSrc
        #region GL_DST_COLOR
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DST_COLOR 0x0306
        public const int GL_DST_COLOR = 0x0306;
        #endregion GL_DST_COLOR

        #region GL_ONE_MINUS_DST_COLOR
        /// <summary>
        /// 
        /// </summary>
        // #define GL_ONE_MINUS_DST_COLOR 0x0307
        public const int GL_ONE_MINUS_DST_COLOR = 0x0307;
        #endregion GL_ONE_MINUS_DST_COLOR

        #region GL_SRC_ALPHA_SATURATE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SRC_ALPHA_SATURATE 0x0308
        public const int GL_SRC_ALPHA_SATURATE = 0x0308;
        #endregion GL_SRC_ALPHA_SATURATE

        // DrawBufferMode
        #region GL_NONE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_NONE 0
        public const int GL_NONE = 0;
        #endregion GL_NONE

        #region GL_FRONT_LEFT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_FRONT_LEFT 0x0400
        public const int GL_FRONT_LEFT = 0x0400;
        #endregion GL_FRONT_LEFT

        #region GL_FRONT_RIGHT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_FRONT_RIGHT 0x0401
        public const int GL_FRONT_RIGHT = 0x0401;
        #endregion GL_FRONT_RIGHT

        #region GL_BACK_LEFT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_BACK_LEFT 0x0402
        public const int GL_BACK_LEFT = 0x0402;
        #endregion GL_BACK_LEFT

        #region GL_BACK_RIGHT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_BACK_RIGHT 0x0403
        public const int GL_BACK_RIGHT = 0x0403;
        #endregion GL_BACK_RIGHT

        #region GL_FRONT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_FRONT 0x0404
        public const int GL_FRONT = 0x0404;
        #endregion GL_FRONT

        #region GL_BACK
        /// <summary>
        /// 
        /// </summary>
        // #define GL_BACK 0x0405
        public const int GL_BACK = 0x0405;
        #endregion GL_BACK

        #region GL_LEFT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_LEFT 0x0406
        public const int GL_LEFT = 0x0406;
        #endregion GL_LEFT

        #region GL_RIGHT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_RIGHT 0x0407
        public const int GL_RIGHT = 0x0407;
        #endregion GL_RIGHT

        #region GL_FRONT_AND_BACK
        /// <summary>
        /// 
        /// </summary>
        // #define GL_FRONT_AND_BACK 0x0408
        public const int GL_FRONT_AND_BACK = 0x0408;
        #endregion GL_FRONT_AND_BACK

        #region GL_AUX0
        /// <summary>
        /// 
        /// </summary>
        // #define GL_AUX0 0x0409
        public const int GL_AUX0 = 0x0409;
        #endregion GL_AUX0

        #region GL_AUX1
        /// <summary>
        /// 
        /// </summary>
        // #define GL_AUX1 0x040A
        public const int GL_AUX1 = 0x040A;
        #endregion GL_AUX1

        #region GL_AUX2
        /// <summary>
        /// 
        /// </summary>
        // #define GL_AUX2 0x040B
        public const int GL_AUX2 = 0x040B;
        #endregion GL_AUX2

        #region GL_AUX3
        /// <summary>
        /// 
        /// </summary>
        // #define GL_AUX3 0x040C
        public const int GL_AUX3 = 0x040C;
        #endregion GL_AUX3

        // ErrorCode
        /// <summary>
        /// 
        /// </summary>
        #region GL_NO_ERROR
        // #define GL_NO_ERROR 0
        public const int GL_NO_ERROR = 0;
        #endregion GL_NO_ERROR

        #region GL_INVALID_ENUM
        /// <summary>
        /// 
        /// </summary>
        // #define GL_INVALID_ENUM 0x0500
        public const int GL_INVALID_ENUM = 0x0500;
        #endregion GL_INVALID_ENUM

        #region GL_INVALID_VALUE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_INVALID_VALUE 0x0501
        public const int GL_INVALID_VALUE = 0x0501;
        #endregion GL_INVALID_VALUE

        #region GL_INVALID_OPERATION
        /// <summary>
        /// 
        /// </summary>
        // #define GL_INVALID_OPERATION 0x0502
        public const int GL_INVALID_OPERATION = 0x0502;
        #endregion GL_INVALID_OPERATION

        #region GL_STACK_OVERFLOW
        /// <summary>
        /// 
        /// </summary>
        // #define GL_STACK_OVERFLOW 0x0503
        public const int GL_STACK_OVERFLOW = 0x0503;
        #endregion GL_STACK_OVERFLOW

        #region GL_STACK_UNDERFLOW
        /// <summary>
        /// 
        /// </summary>
        // #define GL_STACK_UNDERFLOW 0x0504
        public const int GL_STACK_UNDERFLOW = 0x0504;
        #endregion GL_STACK_UNDERFLOW

        #region GL_OUT_OF_MEMORY
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OUT_OF_MEMORY 0x0505
        public const int GL_OUT_OF_MEMORY = 0x0505;
        #endregion GL_OUT_OF_MEMORY

        #region GL_TABLE_TOO_LARGE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TABLE_TOO_LARGE 0x8031
        public const int GL_TABLE_TOO_LARGE = 0x8031;
        #endregion GL_TABLE_TOO_LARGE

        // FeedbackType
        #region GL_2D
        /// <summary>
        /// 
        /// </summary>
        // #define GL_2D 0x0600
        public const int GL_2D = 0x0600;
        #endregion GL_2D

        #region GL_3D
        /// <summary>
        /// 
        /// </summary>
        // #define GL_3D 0x0601
        public const int GL_3D = 0x0601;
        #endregion GL_3D

        #region GL_3D_COLOR
        /// <summary>
        /// 
        /// </summary>
        // #define GL_3D_COLOR 0x0602
        public const int GL_3D_COLOR = 0x0602;
        #endregion GL_3D_COLOR

        #region GL_3D_COLOR_TEXTURE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_3D_COLOR_TEXTURE 0x0603
        public const int GL_3D_COLOR_TEXTURE = 0x0603;
        #endregion GL_3D_COLOR_TEXTURE

        #region GL_4D_COLOR_TEXTURE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_4D_COLOR_TEXTURE 0x0604
        public const int GL_4D_COLOR_TEXTURE = 0x0604;
        #endregion GL_4D_COLOR_TEXTURE

        // FeedBackToken
        #region GL_PASS_THROUGH_TOKEN
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PASS_THROUGH_TOKEN 0x0700
        public const int GL_PASS_THROUGH_TOKEN = 0x0700;
        #endregion GL_PASS_THROUGH_TOKEN

        #region GL_POINT_TOKEN
        /// <summary>
        /// 
        /// </summary>
        // #define GL_POINT_TOKEN 0x0701
        public const int GL_POINT_TOKEN = 0x0701;
        #endregion GL_POINT_TOKEN

        #region GL_LINE_TOKEN
        /// <summary>
        /// 
        /// </summary>
        // #define GL_LINE_TOKEN 0x0702
        public const int GL_LINE_TOKEN = 0x0702;
        #endregion GL_LINE_TOKEN

        #region GL_POLYGON_TOKEN
        /// <summary>
        /// 
        /// </summary>
        // #define GL_POLYGON_TOKEN 0x0703
        public const int GL_POLYGON_TOKEN = 0x0703;
        #endregion GL_POLYGON_TOKEN

        #region GL_BITMAP_TOKEN
        /// <summary>
        /// 
        /// </summary>
        // #define GL_BITMAP_TOKEN 0x0704
        public const int GL_BITMAP_TOKEN = 0x0704;
        #endregion GL_BITMAP_TOKEN

        #region GL_DRAW_PIXEL_TOKEN
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DRAW_PIXEL_TOKEN 0x0705
        public const int GL_DRAW_PIXEL_TOKEN = 0x0705;
        #endregion GL_DRAW_PIXEL_TOKEN

        #region GL_COPY_PIXEL_TOKEN
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COPY_PIXEL_TOKEN 0x0706
        public const int GL_COPY_PIXEL_TOKEN = 0x0706;
        #endregion GL_COPY_PIXEL_TOKEN

        #region GL_LINE_RESET_TOKEN
        // #define GL_LINE_RESET_TOKEN 0x0707
        /// <summary>
        /// 
        /// </summary>
        public const int GL_LINE_RESET_TOKEN = 0x0707;
        #endregion GL_LINE_RESET_TOKEN

        // FogMode
        #region GL_EXP
        // #define GL_EXP 0x0800
        /// <summary>
        /// 
        /// </summary>
        public const int GL_EXP = 0x0800;
        #endregion GL_EXP

        #region GL_EXP2
        // #define GL_EXP2 0x0801
        /// <summary>
        /// 
        /// </summary>
        public const int GL_EXP2 = 0x0801;
        #endregion GL_EXP2

        // FrontFaceDirection
        #region GL_CW
        // #define GL_CW 0x0900
        /// <summary>
        /// 
        /// </summary>
        public const int GL_CW = 0x0900;
        #endregion GL_CW

        #region GL_CCW
        // #define GL_CCW 0x0901
        /// <summary>
        /// 
        /// </summary>
        public const int GL_CCW = 0x0901;
        #endregion GL_CCW

        // GetMapQuery
        #region GL_COEFF
        // #define GL_COEFF 0x0A00
        /// <summary>
        /// 
        /// </summary>
        public const int GL_COEFF = 0x0A00;
        #endregion GL_COEFF

        #region GL_ORDER
        // #define GL_ORDER 0x0A01
        /// <summary>
        /// 
        /// </summary>
        public const int GL_ORDER = 0x0A01;
        #endregion GL_ORDER

        #region GL_DOMAIN
        // #define GL_DOMAIN 0x0A02
        /// <summary>
        /// 
        /// </summary>
        public const int GL_DOMAIN = 0x0A02;
        #endregion GL_DOMAIN

        // GetPixelMap
        #region GL_PIXEL_MAP_I_TO_I
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PIXEL_MAP_I_TO_I 0x0C70
        public const int GL_PIXEL_MAP_I_TO_I = 0x0C70;
        #endregion GL_PIXEL_MAP_I_TO_I

        #region GL_PIXEL_MAP_S_TO_S
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PIXEL_MAP_S_TO_S 0x0C71
        public const int GL_PIXEL_MAP_S_TO_S = 0x0C71;
        #endregion GL_PIXEL_MAP_S_TO_S

        #region GL_PIXEL_MAP_I_TO_R
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PIXEL_MAP_I_TO_R 0x0C72
        public const int GL_PIXEL_MAP_I_TO_R = 0x0C72;
        #endregion GL_PIXEL_MAP_I_TO_R

        #region GL_PIXEL_MAP_I_TO_G
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PIXEL_MAP_I_TO_G 0x0C73
        public const int GL_PIXEL_MAP_I_TO_G = 0x0C73;
        #endregion GL_PIXEL_MAP_I_TO_G

        #region GL_PIXEL_MAP_I_TO_B
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PIXEL_MAP_I_TO_B 0x0C74
        public const int GL_PIXEL_MAP_I_TO_B = 0x0C74;
        #endregion GL_PIXEL_MAP_I_TO_B

        #region GL_PIXEL_MAP_I_TO_A
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PIXEL_MAP_I_TO_A 0x0C75
        public const int GL_PIXEL_MAP_I_TO_A = 0x0C75;
        #endregion GL_PIXEL_MAP_I_TO_A

        #region GL_PIXEL_MAP_R_TO_R
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PIXEL_MAP_R_TO_R 0x0C76
        public const int GL_PIXEL_MAP_R_TO_R = 0x0C76;
        #endregion GL_PIXEL_MAP_R_TO_R

        #region GL_PIXEL_MAP_G_TO_G
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PIXEL_MAP_G_TO_G 0x0C77
        public const int GL_PIXEL_MAP_G_TO_G = 0x0C77;
        #endregion GL_PIXEL_MAP_G_TO_G

        #region GL_PIXEL_MAP_B_TO_B
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PIXEL_MAP_B_TO_B 0x0C78
        public const int GL_PIXEL_MAP_B_TO_B = 0x0C78;
        #endregion GL_PIXEL_MAP_B_TO_B

        #region GL_PIXEL_MAP_A_TO_A
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PIXEL_MAP_A_TO_A 0x0C79
        public const int GL_PIXEL_MAP_A_TO_A = 0x0C79;
        #endregion GL_PIXEL_MAP_A_TO_A

        // GetPointervPName
        #region GL_VERTEX_ARRAY_POINTER
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VERTEX_ARRAY_POINTER 0x808E
        public const int GL_VERTEX_ARRAY_POINTER = 0x808E;
        #endregion GL_VERTEX_ARRAY_POINTER

        #region GL_NORMAL_ARRAY_POINTER
        /// <summary>
        /// 
        /// </summary>
        // #define GL_NORMAL_ARRAY_POINTER 0x808F
        public const int GL_NORMAL_ARRAY_POINTER = 0x808F;
        #endregion GL_NORMAL_ARRAY_POINTER

        #region GL_COLOR_ARRAY_POINTER
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COLOR_ARRAY_POINTER 0x8090
        public const int GL_COLOR_ARRAY_POINTER = 0x8090;
        #endregion GL_COLOR_ARRAY_POINTER

        #region GL_INDEX_ARRAY_POINTER
        /// <summary>
        /// 
        /// </summary>
        // #define GL_INDEX_ARRAY_POINTER 0x8091
        public const int GL_INDEX_ARRAY_POINTER = 0x8091;
        #endregion GL_INDEX_ARRAY_POINTER

        #region GL_TEXTURE_COORD_ARRAY_POINTER
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_COORD_ARRAY_POINTER 0x8092
        public const int GL_TEXTURE_COORD_ARRAY_POINTER = 0x8092;
        #endregion GL_TEXTURE_COORD_ARRAY_POINTER

        #region GL_EDGE_FLAG_ARRAY_POINTER
        /// <summary>
        /// 
        /// </summary>
        // #define GL_EDGE_FLAG_ARRAY_POINTER 0x8093
        public const int GL_EDGE_FLAG_ARRAY_POINTER = 0x8093;
        #endregion GL_EDGE_FLAG_ARRAY_POINTER

        // GetPName
        #region GL_CURRENT_COLOR
        /// <summary>
        /// 
        /// </summary>
        // #define GL_CURRENT_COLOR 0x0B00
        public const int GL_CURRENT_COLOR = 0x0B00;
        #endregion GL_CURRENT_COLOR

        #region GL_CURRENT_INDEX
        /// <summary>
        /// 
        /// </summary>
        // #define GL_CURRENT_INDEX 0x0B01
        public const int GL_CURRENT_INDEX = 0x0B01;
        #endregion GL_CURRENT_INDEX

        #region GL_CURRENT_NORMAL
        /// <summary>
        /// 
        /// </summary>
        // #define GL_CURRENT_NORMAL 0x0B02
        public const int GL_CURRENT_NORMAL = 0x0B02;
        #endregion GL_CURRENT_NORMAL

        #region GL_CURRENT_TEXTURE_COORDS
        /// <summary>
        /// 
        /// </summary>
        // #define GL_CURRENT_TEXTURE_COORDS 0x0B03
        public const int GL_CURRENT_TEXTURE_COORDS = 0x0B03;
        #endregion GL_CURRENT_TEXTURE_COORDS

        #region GL_CURRENT_RASTER_COLOR
        /// <summary>
        /// 
        /// </summary>
        // #define GL_CURRENT_RASTER_COLOR 0x0B04
        public const int GL_CURRENT_RASTER_COLOR = 0x0B04;
        #endregion GL_CURRENT_RASTER_COLOR

        #region GL_CURRENT_RASTER_INDEX
        /// <summary>
        /// 
        /// </summary>
        // #define GL_CURRENT_RASTER_INDEX 0x0B05
        public const int GL_CURRENT_RASTER_INDEX = 0x0B05;
        #endregion GL_CURRENT_RASTER_INDEX

        #region GL_CURRENT_RASTER_TEXTURE_COORDS
        /// <summary>
        /// 
        /// </summary>
        // #define GL_CURRENT_RASTER_TEXTURE_COORDS 0x0B06
        public const int GL_CURRENT_RASTER_TEXTURE_COORDS = 0x0B06;
        #endregion GL_CURRENT_RASTER_TEXTURE_COORDS

        #region GL_CURRENT_RASTER_POSITION
        /// <summary>
        /// 
        /// </summary>
        // #define GL_CURRENT_RASTER_POSITION 0x0B07
        public const int GL_CURRENT_RASTER_POSITION = 0x0B07;
        #endregion GL_CURRENT_RASTER_POSITION

        #region GL_CURRENT_RASTER_POSITION_VALID
        /// <summary>
        /// 
        /// </summary>
        // #define GL_CURRENT_RASTER_POSITION_VALID 0x0B08
        public const int GL_CURRENT_RASTER_POSITION_VALID = 0x0B08;
        #endregion GL_CURRENT_RASTER_POSITION_VALID

        #region GL_CURRENT_RASTER_DISTANCE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_CURRENT_RASTER_DISTANCE 0x0B09
        public const int GL_CURRENT_RASTER_DISTANCE = 0x0B09;
        #endregion GL_CURRENT_RASTER_DISTANCE

        #region GL_POINT_SMOOTH
        /// <summary>
        /// 
        /// </summary>
        // #define GL_POINT_SMOOTH 0x0B10
        public const int GL_POINT_SMOOTH = 0x0B10;
        #endregion GL_POINT_SMOOTH

        #region GL_POINT_SIZE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_POINT_SIZE 0x0B11
        public const int GL_POINT_SIZE = 0x0B11;
        #endregion GL_POINT_SIZE

        #region GL_POINT_SIZE_RANGE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_POINT_SIZE_RANGE GL_SMOOTH_POINT_SIZE_RANGE
        public const int GL_POINT_SIZE_RANGE = GL_SMOOTH_POINT_SIZE_RANGE;
        #endregion GL_POINT_SIZE_RANGE

        #region GL_POINT_SIZE_GRANULARITY
        /// <summary>
        /// 
        /// </summary>
        // #define GL_POINT_SIZE_GRANULARITY GL_SMOOTH_POINT_SIZE_GRANULARITY
        public const int GL_POINT_SIZE_GRANULARITY = GL_SMOOTH_POINT_SIZE_GRANULARITY;
        #endregion GL_POINT_SIZE_GRANULARITY

        #region GL_LINE_SMOOTH
        /// <summary>
        /// 
        /// </summary>
        // #define GL_LINE_SMOOTH 0x0B20
        public const int GL_LINE_SMOOTH = 0x0B20;
        #endregion GL_LINE_SMOOTH

        #region GL_LINE_WIDTH
        /// <summary>
        /// 
        /// </summary>
        // #define GL_LINE_WIDTH 0x0B21
        public const int GL_LINE_WIDTH = 0x0B21;
        #endregion GL_LINE_WIDTH

        #region GL_LINE_WIDTH_RANGE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_LINE_WIDTH_RANGE GL_SMOOTH_LINE_WIDTH_RANGE
        public const int GL_LINE_WIDTH_RANGE = GL_SMOOTH_LINE_WIDTH_RANGE;
        #endregion GL_LINE_WIDTH_RANGE

        #region GL_LINE_WIDTH_GRANULARITY
        /// <summary>
        /// 
        /// </summary>
        // #define GL_LINE_WIDTH_GRANULARITY GL_SMOOTH_LINE_WIDTH_GRANULARITY
        public const int GL_LINE_WIDTH_GRANULARITY = GL_SMOOTH_LINE_WIDTH_GRANULARITY;
        #endregion GL_LINE_WIDTH_GRANULARITY

        #region GL_LINE_STIPPLE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_LINE_STIPPLE 0x0B24
        public const int GL_LINE_STIPPLE = 0x0B24;
        #endregion GL_LINE_STIPPLE

        #region GL_LINE_STIPPLE_PATTERN
        /// <summary>
        /// 
        /// </summary>
        // #define GL_LINE_STIPPLE_PATTERN 0x0B25
        public const int GL_LINE_STIPPLE_PATTERN = 0x0B25;
        #endregion GL_LINE_STIPPLE_PATTERN

        #region GL_LINE_STIPPLE_REPEAT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_LINE_STIPPLE_REPEAT 0x0B26
        public const int GL_LINE_STIPPLE_REPEAT = 0x0B26;
        #endregion GL_LINE_STIPPLE_REPEAT

        #region GL_LIST_MODE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_LIST_MODE 0x0B30
        public const int GL_LIST_MODE = 0x0B30;
        #endregion GL_LIST_MODE

        #region GL_MAX_LIST_NESTING
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAX_LIST_NESTING 0x0B31
        public const int GL_MAX_LIST_NESTING = 0x0B31;
        #endregion GL_MAX_LIST_NESTING

        #region GL_LIST_BASE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_LIST_BASE 0x0B32
        public const int GL_LIST_BASE = 0x0B32;
        #endregion GL_LIST_BASE

        #region GL_LIST_INDEX
        /// <summary>
        /// 
        /// </summary>
        // #define GL_LIST_INDEX 0x0B33
        public const int GL_LIST_INDEX = 0x0B33;
        #endregion GL_LIST_INDEX

        #region GL_POLYGON_MODE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_POLYGON_MODE 0x0B40
        public const int GL_POLYGON_MODE = 0x0B40;
        #endregion GL_POLYGON_MODE

        #region GL_POLYGON_SMOOTH
        /// <summary>
        /// 
        /// </summary>
        // #define GL_POLYGON_SMOOTH 0x0B41
        public const int GL_POLYGON_SMOOTH = 0x0B41;
        #endregion GL_POLYGON_SMOOTH

        #region GL_POLYGON_STIPPLE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_POLYGON_STIPPLE 0x0B42
        public const int GL_POLYGON_STIPPLE = 0x0B42;
        #endregion GL_POLYGON_STIPPLE

        #region GL_EDGE_FLAG
        /// <summary>
        /// 
        /// </summary>
        // #define GL_EDGE_FLAG 0x0B43
        public const int GL_EDGE_FLAG = 0x0B43;
        #endregion GL_EDGE_FLAG

        #region GL_CULL_FACE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_CULL_FACE 0x0B44
        public const int GL_CULL_FACE = 0x0B44;
        #endregion GL_CULL_FACE

        #region GL_CULL_FACE_MODE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_CULL_FACE_MODE 0x0B45
        public const int GL_CULL_FACE_MODE = 0x0B45;
        #endregion GL_CULL_FACE_MODE

        #region GL_FRONT_FACE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_FRONT_FACE 0x0B46
        public const int GL_FRONT_FACE = 0x0B46;
        #endregion GL_FRONT_FACE

        #region GL_LIGHTING
        /// <summary>
        /// 
        /// </summary>
        // #define GL_LIGHTING 0x0B50
        public const int GL_LIGHTING = 0x0B50;
        #endregion GL_LIGHTING

        #region GL_LIGHT_MODEL_LOCAL_VIEWER
        /// <summary>
        /// 
        /// </summary>
        // #define GL_LIGHT_MODEL_LOCAL_VIEWER 0x0B51
        public const int GL_LIGHT_MODEL_LOCAL_VIEWER = 0x0B51;
        #endregion GL_LIGHT_MODEL_LOCAL_VIEWER

        #region GL_LIGHT_MODEL_TWO_SIDE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_LIGHT_MODEL_TWO_SIDE 0x0B52
        public const int GL_LIGHT_MODEL_TWO_SIDE = 0x0B52;
        #endregion GL_LIGHT_MODEL_TWO_SIDE

        #region GL_LIGHT_MODEL_AMBIENT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_LIGHT_MODEL_AMBIENT 0x0B53
        public const int GL_LIGHT_MODEL_AMBIENT = 0x0B53;
        #endregion GL_LIGHT_MODEL_AMBIENT

        #region GL_SHADE_MODEL
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SHADE_MODEL 0x0B54
        public const int GL_SHADE_MODEL = 0x0B54;
        #endregion GL_SHADE_MODEL

        #region GL_COLOR_MATERIAL_FACE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COLOR_MATERIAL_FACE 0x0B55
        public const int GL_COLOR_MATERIAL_FACE = 0x0B55;
        #endregion GL_COLOR_MATERIAL_FACE

        #region GL_COLOR_MATERIAL_PARAMETER
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COLOR_MATERIAL_PARAMETER 0x0B56
        public const int GL_COLOR_MATERIAL_PARAMETER = 0x0B56;
        #endregion GL_COLOR_MATERIAL_PARAMETER

        #region GL_COLOR_MATERIAL
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COLOR_MATERIAL 0x0B57
        public const int GL_COLOR_MATERIAL = 0x0B57;
        #endregion GL_COLOR_MATERIAL

        #region GL_FOG
        /// <summary>
        /// 
        /// </summary>
        // #define GL_FOG 0x0B60
        public const int GL_FOG = 0x0B60;
        #endregion GL_FOG

        #region GL_FOG_INDEX
        /// <summary>
        /// 
        /// </summary>
        // #define GL_FOG_INDEX 0x0B61
        public const int GL_FOG_INDEX = 0x0B61;
        #endregion GL_FOG_INDEX

        #region GL_FOG_DENSITY
        /// <summary>
        /// 
        /// </summary>
        // #define GL_FOG_DENSITY 0x0B62
        public const int GL_FOG_DENSITY = 0x0B62;
        #endregion GL_FOG_DENSITY

        #region GL_FOG_START
        /// <summary>
        /// 
        /// </summary>
        // #define GL_FOG_START 0x0B63
        public const int GL_FOG_START = 0x0B63;
        #endregion GL_FOG_START

        #region GL_FOG_END
        /// <summary>
        /// 
        /// </summary>
        // #define GL_FOG_END 0x0B64
        public const int GL_FOG_END = 0x0B64;
        #endregion GL_FOG_END

        #region GL_FOG_MODE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_FOG_MODE 0x0B65
        public const int GL_FOG_MODE = 0x0B65;
        #endregion GL_FOG_MODE

        #region GL_FOG_COLOR
        /// <summary>
        /// 
        /// </summary>
        // #define GL_FOG_COLOR 0x0B66
        public const int GL_FOG_COLOR = 0x0B66;
        #endregion GL_FOG_COLOR

        #region GL_DEPTH_RANGE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DEPTH_RANGE 0x0B70
        public const int GL_DEPTH_RANGE = 0x0B70;
        #endregion GL_DEPTH_RANGE

        #region GL_DEPTH_TEST
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DEPTH_TEST 0x0B71
        public const int GL_DEPTH_TEST = 0x0B71;
        #endregion GL_DEPTH_TEST

        #region GL_DEPTH_WRITEMASK
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DEPTH_WRITEMASK 0x0B72
        public const int GL_DEPTH_WRITEMASK = 0x0B72;
        #endregion GL_DEPTH_WRITEMASK

        #region GL_DEPTH_CLEAR_VALUE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DEPTH_CLEAR_VALUE 0x0B73
        public const int GL_DEPTH_CLEAR_VALUE = 0x0B73;
        #endregion GL_DEPTH_CLEAR_VALUE

        #region GL_DEPTH_FUNC
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DEPTH_FUNC 0x0B74
        public const int GL_DEPTH_FUNC = 0x0B74;
        #endregion GL_DEPTH_FUNC

        #region GL_ACCUM_CLEAR_VALUE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_ACCUM_CLEAR_VALUE 0x0B80
        public const int GL_ACCUM_CLEAR_VALUE = 0x0B80;
        #endregion GL_ACCUM_CLEAR_VALUE

        #region GL_STENCIL_TEST
        /// <summary>
        /// 
        /// </summary>
        // #define GL_STENCIL_TEST 0x0B90
        public const int GL_STENCIL_TEST = 0x0B90;
        #endregion GL_STENCIL_TEST

        #region GL_STENCIL_CLEAR_VALUE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_STENCIL_CLEAR_VALUE 0x0B91
        public const int GL_STENCIL_CLEAR_VALUE = 0x0B91;
        #endregion GL_STENCIL_CLEAR_VALUE

        #region GL_STENCIL_FUNC
        /// <summary>
        /// 
        /// </summary>
        // #define GL_STENCIL_FUNC 0x0B92
        public const int GL_STENCIL_FUNC = 0x0B92;
        #endregion GL_STENCIL_FUNC

        #region GL_STENCIL_VALUE_MASK
        /// <summary>
        /// 
        /// </summary>
        // #define GL_STENCIL_VALUE_MASK 0x0B93
        public const int GL_STENCIL_VALUE_MASK = 0x0B93;
        #endregion GL_STENCIL_VALUE_MASK

        #region GL_STENCIL_FAIL
        /// <summary>
        /// 
        /// </summary>
        // #define GL_STENCIL_FAIL 0x0B94
        public const int GL_STENCIL_FAIL = 0x0B94;
        #endregion GL_STENCIL_FAIL

        #region GL_STENCIL_PASS_DEPTH_FAIL
        /// <summary>
        /// 
        /// </summary>
        // #define GL_STENCIL_PASS_DEPTH_FAIL 0x0B95
        public const int GL_STENCIL_PASS_DEPTH_FAIL = 0x0B95;
        #endregion GL_STENCIL_PASS_DEPTH_FAIL

        #region GL_STENCIL_PASS_DEPTH_PASS
        /// <summary>
        /// 
        /// </summary>
        // #define GL_STENCIL_PASS_DEPTH_PASS 0x0B96
        public const int GL_STENCIL_PASS_DEPTH_PASS = 0x0B96;
        #endregion GL_STENCIL_PASS_DEPTH_PASS

        #region GL_STENCIL_REF
        /// <summary>
        /// 
        /// </summary>
        // #define GL_STENCIL_REF 0x0B97
        public const int GL_STENCIL_REF = 0x0B97;
        #endregion GL_STENCIL_REF

        #region GL_STENCIL_WRITEMASK
        /// <summary>
        /// 
        /// </summary>
        // #define GL_STENCIL_WRITEMASK 0x0B98
        public const int GL_STENCIL_WRITEMASK = 0x0B98;
        #endregion GL_STENCIL_WRITEMASK

        #region GL_MATRIX_MODE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MATRIX_MODE 0x0BA0
        public const int GL_MATRIX_MODE = 0x0BA0;
        #endregion GL_MATRIX_MODE

        #region GL_NORMALIZE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_NORMALIZE 0x0BA1
        public const int GL_NORMALIZE = 0x0BA1;
        #endregion GL_NORMALIZE

        #region GL_VIEWPORT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VIEWPORT 0x0BA2
        public const int GL_VIEWPORT = 0x0BA2;
        #endregion GL_VIEWPORT

        #region GL_MODELVIEW_STACK_DEPTH
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MODELVIEW_STACK_DEPTH 0x0BA3
        public const int GL_MODELVIEW_STACK_DEPTH = 0x0BA3;
        #endregion GL_MODELVIEW_STACK_DEPTH

        #region GL_PROJECTION_STACK_DEPTH
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PROJECTION_STACK_DEPTH 0x0BA4
        public const int GL_PROJECTION_STACK_DEPTH = 0x0BA4;
        #endregion GL_PROJECTION_STACK_DEPTH

        #region GL_TEXTURE_STACK_DEPTH
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_STACK_DEPTH 0x0BA5
        public const int GL_TEXTURE_STACK_DEPTH = 0x0BA5;
        #endregion GL_TEXTURE_STACK_DEPTH

        #region GL_MODELVIEW_MATRIX
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MODELVIEW_MATRIX 0x0BA6
        public const int GL_MODELVIEW_MATRIX = 0x0BA6;
        #endregion GL_MODELVIEW_MATRIX

        #region GL_PROJECTION_MATRIX
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PROJECTION_MATRIX 0x0BA7
        public const int GL_PROJECTION_MATRIX = 0x0BA7;
        #endregion GL_PROJECTION_MATRIX

        #region GL_TEXTURE_MATRIX
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_MATRIX 0x0BA8
        public const int GL_TEXTURE_MATRIX = 0x0BA8;
        #endregion GL_TEXTURE_MATRIX

        #region GL_ATTRIB_STACK_DEPTH
        /// <summary>
        /// 
        /// </summary>
        // #define GL_ATTRIB_STACK_DEPTH 0x0BB0
        public const int GL_ATTRIB_STACK_DEPTH = 0x0BB0;
        #endregion GL_ATTRIB_STACK_DEPTH

        #region GL_CLIENT_ATTRIB_STACK_DEPTH
        /// <summary>
        /// 
        /// </summary>
        // #define GL_CLIENT_ATTRIB_STACK_DEPTH 0x0BB1
        public const int GL_CLIENT_ATTRIB_STACK_DEPTH = 0x0BB1;
        #endregion GL_CLIENT_ATTRIB_STACK_DEPTH

        #region GL_ALPHA_TEST
        /// <summary>
        /// 
        /// </summary>
        // #define GL_ALPHA_TEST 0x0BC0
        public const int GL_ALPHA_TEST = 0x0BC0;
        #endregion GL_ALPHA_TEST

        #region GL_ALPHA_TEST_FUNC
        /// <summary>
        /// 
        /// </summary>
        // #define GL_ALPHA_TEST_FUNC 0x0BC1
        public const int GL_ALPHA_TEST_FUNC = 0x0BC1;
        #endregion GL_ALPHA_TEST_FUNC

        #region GL_ALPHA_TEST_REF
        /// <summary>
        /// 
        /// </summary>
        // #define GL_ALPHA_TEST_REF 0x0BC2
        public const int GL_ALPHA_TEST_REF = 0x0BC2;
        #endregion GL_ALPHA_TEST_REF

        #region GL_DITHER
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DITHER 0x0BD0
        public const int GL_DITHER = 0x0BD0;
        #endregion GL_DITHER

        #region GL_BLEND_DST
        /// <summary>
        /// 
        /// </summary>
        // #define GL_BLEND_DST 0x0BE0
        public const int GL_BLEND_DST = 0x0BE0;
        #endregion GL_BLEND_DST

        #region GL_BLEND_SRC
        /// <summary>
        /// 
        /// </summary>
        // #define GL_BLEND_SRC 0x0BE1
        public const int GL_BLEND_SRC = 0x0BE1;
        #endregion GL_BLEND_SRC

        #region GL_BLEND
        /// <summary>
        /// 
        /// </summary>
        // #define GL_BLEND 0x0BE2
        public const int GL_BLEND = 0x0BE2;
        #endregion GL_BLEND

        #region GL_LOGIC_OP_MODE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_LOGIC_OP_MODE 0x0BF0
        public const int GL_LOGIC_OP_MODE = 0x0BF0;
        #endregion GL_LOGIC_OP_MODE

        #region GL_INDEX_LOGIC_OP
        /// <summary>
        /// 
        /// </summary>
        // #define GL_INDEX_LOGIC_OP 0x0BF1
        public const int GL_INDEX_LOGIC_OP = 0x0BF1;
        #endregion GL_INDEX_LOGIC_OP

        #region GL_LOGIC_OP
        /// <summary>
        /// 
        /// </summary>
        // #define GL_LOGIC_OP GL_INDEX_LOGIC_OP
        public const int GL_LOGIC_OP = GL_INDEX_LOGIC_OP;
        #endregion GL_LOGIC_OP

        #region GL_COLOR_LOGIC_OP
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COLOR_LOGIC_OP 0x0BF2
        public const int GL_COLOR_LOGIC_OP = 0x0BF2;
        #endregion GL_COLOR_LOGIC_OP

        #region GL_AUX_BUFFERS
        /// <summary>
        /// 
        /// </summary>
        // #define GL_AUX_BUFFERS 0x0C00
        public const int GL_AUX_BUFFERS = 0x0C00;
        #endregion GL_AUX_BUFFERS

        #region GL_DRAW_BUFFER
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DRAW_BUFFER 0x0C01
        public const int GL_DRAW_BUFFER = 0x0C01;
        #endregion GL_DRAW_BUFFER

        #region GL_READ_BUFFER
        /// <summary>
        /// 
        /// </summary>
        // #define GL_READ_BUFFER 0x0C02
        public const int GL_READ_BUFFER = 0x0C02;
        #endregion GL_READ_BUFFER

        #region GL_SCISSOR_BOX
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SCISSOR_BOX 0x0C10
        public const int GL_SCISSOR_BOX = 0x0C10;
        #endregion GL_SCISSOR_BOX

        #region GL_SCISSOR_TEST
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SCISSOR_TEST 0x0C11
        public const int GL_SCISSOR_TEST = 0x0C11;
        #endregion GL_SCISSOR_TEST

        #region GL_INDEX_CLEAR_VALUE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_INDEX_CLEAR_VALUE 0x0C20
        public const int GL_INDEX_CLEAR_VALUE = 0x0C20;
        #endregion GL_INDEX_CLEAR_VALUE

        #region GL_INDEX_WRITEMASK
        /// <summary>
        /// 
        /// </summary>
        // #define GL_INDEX_WRITEMASK 0x0C21
        public const int GL_INDEX_WRITEMASK = 0x0C21;
        #endregion GL_INDEX_WRITEMASK

        #region GL_COLOR_CLEAR_VALUE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COLOR_CLEAR_VALUE 0x0C22
        public const int GL_COLOR_CLEAR_VALUE = 0x0C22;
        #endregion GL_COLOR_CLEAR_VALUE

        #region GL_COLOR_WRITEMASK
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COLOR_WRITEMASK 0x0C23
        public const int GL_COLOR_WRITEMASK = 0x0C23;
        #endregion GL_COLOR_WRITEMASK

        #region GL_INDEX_MODE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_INDEX_MODE 0x0C30
        public const int GL_INDEX_MODE = 0x0C30;
        #endregion GL_INDEX_MODE

        #region GL_RGBA_MODE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_RGBA_MODE 0x0C31
        public const int GL_RGBA_MODE = 0x0C31;
        #endregion GL_RGBA_MODE

        #region GL_DOUBLEBUFFER
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DOUBLEBUFFER 0x0C32
        public const int GL_DOUBLEBUFFER = 0x0C32;
        #endregion GL_DOUBLEBUFFER

        #region GL_STEREO
        /// <summary>
        /// 
        /// </summary>
        // #define GL_STEREO 0x0C33
        public const int GL_STEREO = 0x0C33;
        #endregion GL_STEREO

        #region GL_RENDER_MODE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_RENDER_MODE 0x0C40
        public const int GL_RENDER_MODE = 0x0C40;
        #endregion GL_RENDER_MODE

        #region GL_PERSPECTIVE_CORRECTION_HINT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PERSPECTIVE_CORRECTION_HINT 0x0C50
        public const int GL_PERSPECTIVE_CORRECTION_HINT = 0x0C50;
        #endregion GL_PERSPECTIVE_CORRECTION_HINT

        #region GL_POINT_SMOOTH_HINT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_POINT_SMOOTH_HINT 0x0C51
        public const int GL_POINT_SMOOTH_HINT = 0x0C51;
        #endregion GL_POINT_SMOOTH_HINT

        #region GL_LINE_SMOOTH_HINT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_LINE_SMOOTH_HINT 0x0C52
        public const int GL_LINE_SMOOTH_HINT = 0x0C52;
        #endregion GL_LINE_SMOOTH_HINT

        #region GL_POLYGON_SMOOTH_HINT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_POLYGON_SMOOTH_HINT 0x0C53
        public const int GL_POLYGON_SMOOTH_HINT = 0x0C53;
        #endregion GL_POLYGON_SMOOTH_HINT

        #region GL_FOG_HINT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_FOG_HINT 0x0C54
        public const int GL_FOG_HINT = 0x0C54;
        #endregion GL_FOG_HINT

        #region GL_TEXTURE_GEN_S
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_GEN_S 0x0C60
        public const int GL_TEXTURE_GEN_S = 0x0C60;
        #endregion GL_TEXTURE_GEN_S

        #region GL_TEXTURE_GEN_T
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_GEN_T 0x0C61
        public const int GL_TEXTURE_GEN_T = 0x0C61;
        #endregion GL_TEXTURE_GEN_T

        #region GL_TEXTURE_GEN_R
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_GEN_R 0x0C62
        public const int GL_TEXTURE_GEN_R = 0x0C62;
        #endregion GL_TEXTURE_GEN_R

        #region GL_TEXTURE_GEN_Q
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_GEN_Q 0x0C63
        public const int GL_TEXTURE_GEN_Q = 0x0C63;
        #endregion GL_TEXTURE_GEN_Q

        #region GL_PIXEL_MAP_I_TO_I_SIZE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PIXEL_MAP_I_TO_I_SIZE 0x0CB0
        public const int GL_PIXEL_MAP_I_TO_I_SIZE = 0x0CB0;
        #endregion GL_PIXEL_MAP_I_TO_I_SIZE

        #region GL_PIXEL_MAP_S_TO_S_SIZE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PIXEL_MAP_S_TO_S_SIZE 0x0CB1
        public const int GL_PIXEL_MAP_S_TO_S_SIZE = 0x0CB1;
        #endregion GL_PIXEL_MAP_S_TO_S_SIZE

        #region GL_PIXEL_MAP_I_TO_R_SIZE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PIXEL_MAP_I_TO_R_SIZE 0x0CB2
        public const int GL_PIXEL_MAP_I_TO_R_SIZE = 0x0CB2;
        #endregion GL_PIXEL_MAP_I_TO_R_SIZE

        #region GL_PIXEL_MAP_I_TO_G_SIZE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PIXEL_MAP_I_TO_G_SIZE 0x0CB3
        public const int GL_PIXEL_MAP_I_TO_G_SIZE = 0x0CB3;
        #endregion GL_PIXEL_MAP_I_TO_G_SIZE

        #region GL_PIXEL_MAP_I_TO_B_SIZE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PIXEL_MAP_I_TO_B_SIZE 0x0CB4
        public const int GL_PIXEL_MAP_I_TO_B_SIZE = 0x0CB4;
        #endregion GL_PIXEL_MAP_I_TO_B_SIZE

        #region GL_PIXEL_MAP_I_TO_A_SIZE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PIXEL_MAP_I_TO_A_SIZE 0x0CB5
        public const int GL_PIXEL_MAP_I_TO_A_SIZE = 0x0CB5;
        #endregion GL_PIXEL_MAP_I_TO_A_SIZE

        #region GL_PIXEL_MAP_R_TO_R_SIZE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PIXEL_MAP_R_TO_R_SIZE 0x0CB6
        public const int GL_PIXEL_MAP_R_TO_R_SIZE = 0x0CB6;
        #endregion GL_PIXEL_MAP_R_TO_R_SIZE

        #region GL_PIXEL_MAP_G_TO_G_SIZE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PIXEL_MAP_G_TO_G_SIZE 0x0CB7
        public const int GL_PIXEL_MAP_G_TO_G_SIZE = 0x0CB7;
        #endregion GL_PIXEL_MAP_G_TO_G_SIZE

        #region GL_PIXEL_MAP_B_TO_B_SIZE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PIXEL_MAP_B_TO_B_SIZE 0x0CB8
        public const int GL_PIXEL_MAP_B_TO_B_SIZE = 0x0CB8;
        #endregion GL_PIXEL_MAP_B_TO_B_SIZE

        #region GL_PIXEL_MAP_A_TO_A_SIZE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PIXEL_MAP_A_TO_A_SIZE 0x0CB9
        public const int GL_PIXEL_MAP_A_TO_A_SIZE = 0x0CB9;
        #endregion GL_PIXEL_MAP_A_TO_A_SIZE

        #region GL_UNPACK_SWAP_BYTES
        /// <summary>
        /// 
        /// </summary>
        // #define GL_UNPACK_SWAP_BYTES 0x0CF0
        public const int GL_UNPACK_SWAP_BYTES = 0x0CF0;
        #endregion GL_UNPACK_SWAP_BYTES

        #region GL_UNPACK_LSB_FIRST
        /// <summary>
        /// 
        /// </summary>
        // #define GL_UNPACK_LSB_FIRST 0x0CF1
        public const int GL_UNPACK_LSB_FIRST = 0x0CF1;
        #endregion GL_UNPACK_LSB_FIRST

        #region GL_UNPACK_ROW_LENGTH
        /// <summary>
        /// 
        /// </summary>
        // #define GL_UNPACK_ROW_LENGTH 0x0CF2
        public const int GL_UNPACK_ROW_LENGTH = 0x0CF2;
        #endregion GL_UNPACK_ROW_LENGTH

        #region GL_UNPACK_SKIP_ROWS
        /// <summary>
        /// 
        /// </summary>
        // #define GL_UNPACK_SKIP_ROWS 0x0CF3
        public const int GL_UNPACK_SKIP_ROWS = 0x0CF3;
        #endregion GL_UNPACK_SKIP_ROWS

        #region GL_UNPACK_SKIP_PIXELS
        /// <summary>
        /// 
        /// </summary>
        // #define GL_UNPACK_SKIP_PIXELS 0x0CF4
        public const int GL_UNPACK_SKIP_PIXELS = 0x0CF4;
        #endregion GL_UNPACK_SKIP_PIXELS

        #region GL_UNPACK_ALIGNMENT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_UNPACK_ALIGNMENT 0x0CF5
        public const int GL_UNPACK_ALIGNMENT = 0x0CF5;
        #endregion GL_UNPACK_ALIGNMENT

        #region GL_PACK_SWAP_BYTES
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PACK_SWAP_BYTES 0x0D00
        public const int GL_PACK_SWAP_BYTES = 0x0D00;
        #endregion GL_PACK_SWAP_BYTES

        #region GL_PACK_LSB_FIRST
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PACK_LSB_FIRST 0x0D01
        public const int GL_PACK_LSB_FIRST = 0x0D01;
        #endregion GL_PACK_LSB_FIRST

        #region GL_PACK_ROW_LENGTH
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PACK_ROW_LENGTH 0x0D02
        public const int GL_PACK_ROW_LENGTH = 0x0D02;
        #endregion GL_PACK_ROW_LENGTH

        #region GL_PACK_SKIP_ROWS
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PACK_SKIP_ROWS 0x0D03
        public const int GL_PACK_SKIP_ROWS = 0x0D03;
        #endregion GL_PACK_SKIP_ROWS

        #region GL_PACK_SKIP_PIXELS
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PACK_SKIP_PIXELS 0x0D04
        public const int GL_PACK_SKIP_PIXELS = 0x0D04;
        #endregion GL_PACK_SKIP_PIXELS

        #region GL_PACK_ALIGNMENT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PACK_ALIGNMENT 0x0D05
        public const int GL_PACK_ALIGNMENT = 0x0D05;
        #endregion GL_PACK_ALIGNMENT

        #region GL_MAP_COLOR
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAP_COLOR 0x0D10
        public const int GL_MAP_COLOR = 0x0D10;
        #endregion GL_MAP_COLOR

        #region GL_MAP_STENCIL
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAP_STENCIL 0x0D11
        public const int GL_MAP_STENCIL = 0x0D11;
        #endregion GL_MAP_STENCIL

        #region GL_INDEX_SHIFT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_INDEX_SHIFT 0x0D12
        public const int GL_INDEX_SHIFT = 0x0D12;
        #endregion GL_INDEX_SHIFT

        #region GL_INDEX_OFFSET
        /// <summary>
        /// 
        /// </summary>
        // #define GL_INDEX_OFFSET 0x0D13
        public const int GL_INDEX_OFFSET = 0x0D13;
        #endregion GL_INDEX_OFFSET

        #region GL_RED_SCALE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_RED_SCALE 0x0D14
        public const int GL_RED_SCALE = 0x0D14;
        #endregion GL_RED_SCALE

        #region GL_RED_BIAS
        /// <summary>
        /// 
        /// </summary>
        // #define GL_RED_BIAS 0x0D15
        public const int GL_RED_BIAS = 0x0D15;
        #endregion GL_RED_BIAS

        #region GL_ZOOM_X
        /// <summary>
        /// 
        /// </summary>
        // #define GL_ZOOM_X 0x0D16
        public const int GL_ZOOM_X = 0x0D16;
        #endregion GL_ZOOM_X

        #region GL_ZOOM_Y
        /// <summary>
        /// 
        /// </summary>
        // #define GL_ZOOM_Y 0x0D17
        public const int GL_ZOOM_Y = 0x0D17;
        #endregion GL_ZOOM_Y

        #region GL_GREEN_SCALE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_GREEN_SCALE 0x0D18
        public const int GL_GREEN_SCALE = 0x0D18;
        #endregion GL_GREEN_SCALE

        #region GL_GREEN_BIAS
        /// <summary>
        /// 
        /// </summary>
        // #define GL_GREEN_BIAS 0x0D19
        public const int GL_GREEN_BIAS = 0x0D19;
        #endregion GL_GREEN_BIAS

        #region GL_BLUE_SCALE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_BLUE_SCALE 0x0D1A
        public const int GL_BLUE_SCALE = 0x0D1A;
        #endregion GL_BLUE_SCALE

        #region GL_BLUE_BIAS
        /// <summary>
        /// 
        /// </summary>
        // #define GL_BLUE_BIAS 0x0D1B
        public const int GL_BLUE_BIAS = 0x0D1B;
        #endregion GL_BLUE_BIAS

        #region GL_ALPHA_SCALE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_ALPHA_SCALE 0x0D1C
        public const int GL_ALPHA_SCALE = 0x0D1C;
        #endregion GL_ALPHA_SCALE

        #region GL_ALPHA_BIAS
        /// <summary>
        /// 
        /// </summary>
        // #define GL_ALPHA_BIAS 0x0D1D
        public const int GL_ALPHA_BIAS = 0x0D1D;
        #endregion GL_ALPHA_BIAS

        #region GL_DEPTH_SCALE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DEPTH_SCALE 0x0D1E
        public const int GL_DEPTH_SCALE = 0x0D1E;
        #endregion GL_DEPTH_SCALE

        #region GL_DEPTH_BIAS
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DEPTH_BIAS 0x0D1F
        public const int GL_DEPTH_BIAS = 0x0D1F;
        #endregion GL_DEPTH_BIAS

        #region GL_MAX_EVAL_ORDER
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAX_EVAL_ORDER 0x0D30
        public const int GL_MAX_EVAL_ORDER = 0x0D30;
        #endregion GL_MAX_EVAL_ORDER

        #region GL_MAX_LIGHTS
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAX_LIGHTS 0x0D31
        public const int GL_MAX_LIGHTS = 0x0D31;
        #endregion GL_MAX_LIGHTS

        #region GL_MAX_CLIP_PLANES
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAX_CLIP_PLANES 0x0D32
        public const int GL_MAX_CLIP_PLANES = 0x0D32;
        #endregion GL_MAX_CLIP_PLANES

        #region GL_MAX_TEXTURE_SIZE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAX_TEXTURE_SIZE 0x0D33
        public const int GL_MAX_TEXTURE_SIZE = 0x0D33;
        #endregion GL_MAX_TEXTURE_SIZE

        #region GL_MAX_PIXEL_MAP_TABLE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAX_PIXEL_MAP_TABLE 0x0D34
        public const int GL_MAX_PIXEL_MAP_TABLE = 0x0D34;
        #endregion GL_MAX_PIXEL_MAP_TABLE

        #region GL_MAX_ATTRIB_STACK_DEPTH
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAX_ATTRIB_STACK_DEPTH 0x0D35
        public const int GL_MAX_ATTRIB_STACK_DEPTH = 0x0D35;
        #endregion GL_MAX_ATTRIB_STACK_DEPTH

        #region GL_MAX_MODELVIEW_STACK_DEPTH
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAX_MODELVIEW_STACK_DEPTH 0x0D36
        public const int GL_MAX_MODELVIEW_STACK_DEPTH = 0x0D36;
        #endregion GL_MAX_MODELVIEW_STACK_DEPTH

        #region GL_MAX_NAME_STACK_DEPTH
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAX_NAME_STACK_DEPTH 0x0D37
        public const int GL_MAX_NAME_STACK_DEPTH = 0x0D37;
        #endregion GL_MAX_NAME_STACK_DEPTH

        #region GL_MAX_PROJECTION_STACK_DEPTH
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAX_PROJECTION_STACK_DEPTH 0x0D38
        public const int GL_MAX_PROJECTION_STACK_DEPTH = 0x0D38;
        #endregion GL_MAX_PROJECTION_STACK_DEPTH

        #region GL_MAX_TEXTURE_STACK_DEPTH
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAX_TEXTURE_STACK_DEPTH 0x0D39
        public const int GL_MAX_TEXTURE_STACK_DEPTH = 0x0D39;
        #endregion GL_MAX_TEXTURE_STACK_DEPTH

        #region GL_MAX_VIEWPORT_DIMS
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAX_VIEWPORT_DIMS 0x0D3A
        public const int GL_MAX_VIEWPORT_DIMS = 0x0D3A;
        #endregion GL_MAX_VIEWPORT_DIMS

        #region GL_MAX_CLIENT_ATTRIB_STACK_DEPTH
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAX_CLIENT_ATTRIB_STACK_DEPTH 0x0D3B
        public const int GL_MAX_CLIENT_ATTRIB_STACK_DEPTH = 0x0D3B;
        #endregion GL_MAX_CLIENT_ATTRIB_STACK_DEPTH

        #region GL_SUBPIXEL_BITS
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SUBPIXEL_BITS 0x0D50
        public const int GL_SUBPIXEL_BITS = 0x0D50;
        #endregion GL_SUBPIXEL_BITS

        #region GL_INDEX_BITS
        /// <summary>
        /// 
        /// </summary>
        // #define GL_INDEX_BITS 0x0D51
        public const int GL_INDEX_BITS = 0x0D51;
        #endregion GL_INDEX_BITS

        #region GL_RED_BITS
        /// <summary>
        /// 
        /// </summary>
        // #define GL_RED_BITS 0x0D52
        public const int GL_RED_BITS = 0x0D52;
        #endregion GL_RED_BITS

        #region GL_GREEN_BITS
        /// <summary>
        /// 
        /// </summary>
        // #define GL_GREEN_BITS 0x0D53
        public const int GL_GREEN_BITS = 0x0D53;
        #endregion GL_GREEN_BITS

        #region GL_BLUE_BITS
        /// <summary>
        /// 
        /// </summary>
        // #define GL_BLUE_BITS 0x0D54
        public const int GL_BLUE_BITS = 0x0D54;
        #endregion GL_BLUE_BITS

        #region GL_ALPHA_BITS
        /// <summary>
        /// 
        /// </summary>
        // #define GL_ALPHA_BITS 0x0D55
        public const int GL_ALPHA_BITS = 0x0D55;
        #endregion GL_ALPHA_BITS

        #region GL_DEPTH_BITS
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DEPTH_BITS 0x0D56
        public const int GL_DEPTH_BITS = 0x0D56;
        #endregion GL_DEPTH_BITS

        #region GL_STENCIL_BITS
        /// <summary>
        /// 
        /// </summary>
        // #define GL_STENCIL_BITS 0x0D57
        public const int GL_STENCIL_BITS = 0x0D57;
        #endregion GL_STENCIL_BITS

        #region GL_ACCUM_RED_BITS
        /// <summary>
        /// 
        /// </summary>
        // #define GL_ACCUM_RED_BITS 0x0D58
        public const int GL_ACCUM_RED_BITS = 0x0D58;
        #endregion GL_ACCUM_RED_BITS

        #region GL_ACCUM_GREEN_BITS
        /// <summary>
        /// 
        /// </summary>
        // #define GL_ACCUM_GREEN_BITS 0x0D59
        public const int GL_ACCUM_GREEN_BITS = 0x0D59;
        #endregion GL_ACCUM_GREEN_BITS

        #region GL_ACCUM_BLUE_BITS
        /// <summary>
        /// 
        /// </summary>
        // #define GL_ACCUM_BLUE_BITS 0x0D5A
        public const int GL_ACCUM_BLUE_BITS = 0x0D5A;
        #endregion GL_ACCUM_BLUE_BITS

        #region GL_ACCUM_ALPHA_BITS
        /// <summary>
        /// 
        /// </summary>
        // #define GL_ACCUM_ALPHA_BITS 0x0D5B
        public const int GL_ACCUM_ALPHA_BITS = 0x0D5B;
        #endregion GL_ACCUM_ALPHA_BITS

        #region GL_NAME_STACK_DEPTH
        /// <summary>
        /// 
        /// </summary>
        // #define GL_NAME_STACK_DEPTH 0x0D70
        public const int GL_NAME_STACK_DEPTH = 0x0D70;
        #endregion GL_NAME_STACK_DEPTH

        #region GL_AUTO_NORMAL
        /// <summary>
        /// 
        /// </summary>
        // #define GL_AUTO_NORMAL 0x0D80
        public const int GL_AUTO_NORMAL = 0x0D80;
        #endregion GL_AUTO_NORMAL

        #region GL_MAP1_COLOR_4
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAP1_COLOR_4 0x0D90
        public const int GL_MAP1_COLOR_4 = 0x0D90;
        #endregion GL_MAP1_COLOR_4

        #region GL_MAP1_INDEX
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAP1_INDEX 0x0D91
        public const int GL_MAP1_INDEX = 0x0D91;
        #endregion GL_MAP1_INDEX

        #region GL_MAP1_NORMAL
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAP1_NORMAL 0x0D92
        public const int GL_MAP1_NORMAL = 0x0D92;
        #endregion GL_MAP1_NORMAL

        #region GL_MAP1_TEXTURE_COORD_1
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAP1_TEXTURE_COORD_1 0x0D93
        public const int GL_MAP1_TEXTURE_COORD_1 = 0x0D93;
        #endregion GL_MAP1_TEXTURE_COORD_1

        #region GL_MAP1_TEXTURE_COORD_2
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAP1_TEXTURE_COORD_2 0x0D94
        public const int GL_MAP1_TEXTURE_COORD_2 = 0x0D94;
        #endregion GL_MAP1_TEXTURE_COORD_2

        #region GL_MAP1_TEXTURE_COORD_3
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAP1_TEXTURE_COORD_3 0x0D95
        public const int GL_MAP1_TEXTURE_COORD_3 = 0x0D95;
        #endregion GL_MAP1_TEXTURE_COORD_3

        #region GL_MAP1_TEXTURE_COORD_4
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAP1_TEXTURE_COORD_4 0x0D96
        public const int GL_MAP1_TEXTURE_COORD_4 = 0x0D96;
        #endregion GL_MAP1_TEXTURE_COORD_4

        #region GL_MAP1_VERTEX_3
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAP1_VERTEX_3 0x0D97
        public const int GL_MAP1_VERTEX_3 = 0x0D97;
        #endregion GL_MAP1_VERTEX_3

        #region GL_MAP1_VERTEX_4
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAP1_VERTEX_4 0x0D98
        public const int GL_MAP1_VERTEX_4 = 0x0D98;
        #endregion GL_MAP1_VERTEX_4

        #region GL_MAP2_COLOR_4
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAP2_COLOR_4 0x0DB0
        public const int GL_MAP2_COLOR_4 = 0x0DB0;
        #endregion GL_MAP2_COLOR_4

        #region GL_MAP2_INDEX
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAP2_INDEX 0x0DB1
        public const int GL_MAP2_INDEX = 0x0DB1;
        #endregion GL_MAP2_INDEX

        #region GL_MAP2_NORMAL
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAP2_NORMAL 0x0DB2
        public const int GL_MAP2_NORMAL = 0x0DB2;
        #endregion GL_MAP2_NORMAL

        #region GL_MAP2_TEXTURE_COORD_1
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAP2_TEXTURE_COORD_1 0x0DB3
        public const int GL_MAP2_TEXTURE_COORD_1 = 0x0DB3;
        #endregion GL_MAP2_TEXTURE_COORD_1

        #region GL_MAP2_TEXTURE_COORD_2
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAP2_TEXTURE_COORD_2 0x0DB4
        public const int GL_MAP2_TEXTURE_COORD_2 = 0x0DB4;
        #endregion GL_MAP2_TEXTURE_COORD_2

        #region GL_MAP2_TEXTURE_COORD_3
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAP2_TEXTURE_COORD_3 0x0DB5
        public const int GL_MAP2_TEXTURE_COORD_3 = 0x0DB5;
        #endregion GL_MAP2_TEXTURE_COORD_3

        #region GL_MAP2_TEXTURE_COORD_4
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAP2_TEXTURE_COORD_4 0x0DB6
        public const int GL_MAP2_TEXTURE_COORD_4 = 0x0DB6;
        #endregion GL_MAP2_TEXTURE_COORD_4

        #region GL_MAP2_VERTEX_3
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAP2_VERTEX_3 0x0DB7
        public const int GL_MAP2_VERTEX_3 = 0x0DB7;
        #endregion GL_MAP2_VERTEX_3

        #region GL_MAP2_VERTEX_4
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAP2_VERTEX_4 0x0DB8
        public const int GL_MAP2_VERTEX_4 = 0x0DB8;
        #endregion GL_MAP2_VERTEX_4

        #region GL_MAP1_GRID_DOMAIN
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAP1_GRID_DOMAIN 0x0DD0
        public const int GL_MAP1_GRID_DOMAIN = 0x0DD0;
        #endregion GL_MAP1_GRID_DOMAIN

        #region GL_MAP1_GRID_SEGMENTS
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAP1_GRID_SEGMENTS 0x0DD1
        public const int GL_MAP1_GRID_SEGMENTS = 0x0DD1;
        #endregion GL_MAP1_GRID_SEGMENTS

        #region GL_MAP2_GRID_DOMAIN
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAP2_GRID_DOMAIN 0x0DD2
        public const int GL_MAP2_GRID_DOMAIN = 0x0DD2;
        #endregion GL_MAP2_GRID_DOMAIN

        #region GL_MAP2_GRID_SEGMENTS
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAP2_GRID_SEGMENTS 0x0DD3
        public const int GL_MAP2_GRID_SEGMENTS = 0x0DD3;
        #endregion GL_MAP2_GRID_SEGMENTS

        #region GL_TEXTURE_1D
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_1D 0x0DE0
        public const int GL_TEXTURE_1D = 0x0DE0;
        #endregion GL_TEXTURE_1D

        #region GL_TEXTURE_2D
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_2D 0x0DE1
        public const int GL_TEXTURE_2D = 0x0DE1;
        #endregion GL_TEXTURE_2D

        #region GL_FEEDBACK_BUFFER_POINTER
        /// <summary>
        /// 
        /// </summary>
        // #define GL_FEEDBACK_BUFFER_POINTER 0x0DF0
        public const int GL_FEEDBACK_BUFFER_POINTER = 0x0DF0;
        #endregion GL_FEEDBACK_BUFFER_POINTER

        #region GL_FEEDBACK_BUFFER_SIZE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_FEEDBACK_BUFFER_SIZE 0x0DF1
        public const int GL_FEEDBACK_BUFFER_SIZE = 0x0DF1;
        #endregion GL_FEEDBACK_BUFFER_SIZE

        #region GL_FEEDBACK_BUFFER_TYPE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_FEEDBACK_BUFFER_TYPE 0x0DF2
        public const int GL_FEEDBACK_BUFFER_TYPE = 0x0DF2;
        #endregion GL_FEEDBACK_BUFFER_TYPE

        #region GL_SELECTION_BUFFER_POINTER
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SELECTION_BUFFER_POINTER 0x0DF3
        public const int GL_SELECTION_BUFFER_POINTER = 0x0DF3;
        #endregion GL_SELECTION_BUFFER_POINTER

        #region GL_SELECTION_BUFFER_SIZE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SELECTION_BUFFER_SIZE 0x0DF4
        public const int GL_SELECTION_BUFFER_SIZE = 0x0DF4;
        #endregion GL_SELECTION_BUFFER_SIZE

        #region GL_POLYGON_OFFSET_UNITS
        /// <summary>
        /// 
        /// </summary>
        // #define GL_POLYGON_OFFSET_UNITS 0x2A00
        public const int GL_POLYGON_OFFSET_UNITS = 0x2A00;
        #endregion GL_POLYGON_OFFSET_UNITS

        #region GL_POLYGON_OFFSET_POINT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_POLYGON_OFFSET_POINT 0x2A01
        public const int GL_POLYGON_OFFSET_POINT = 0x2A01;
        #endregion GL_POLYGON_OFFSET_POINT

        #region GL_POLYGON_OFFSET_LINE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_POLYGON_OFFSET_LINE 0x2A02
        public const int GL_POLYGON_OFFSET_LINE = 0x2A02;
        #endregion GL_POLYGON_OFFSET_LINE

        #region GL_POLYGON_OFFSET_FILL
        /// <summary>
        /// 
        /// </summary>
        // #define GL_POLYGON_OFFSET_FILL 0x8037
        public const int GL_POLYGON_OFFSET_FILL = 0x8037;
        #endregion GL_POLYGON_OFFSET_FILL

        #region GL_POLYGON_OFFSET_FACTOR
        /// <summary>
        /// 
        /// </summary>
        // #define GL_POLYGON_OFFSET_FACTOR 0x8038
        public const int GL_POLYGON_OFFSET_FACTOR = 0x8038;
        #endregion GL_POLYGON_OFFSET_FACTOR

        #region GL_VERTEX_ARRAY
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VERTEX_ARRAY 0x8074
        public const int GL_VERTEX_ARRAY = 0x8074;
        #endregion GL_VERTEX_ARRAY

        #region GL_NORMAL_ARRAY
        /// <summary>
        /// 
        /// </summary>
        // #define GL_NORMAL_ARRAY 0x8075
        public const int GL_NORMAL_ARRAY = 0x8075;
        #endregion GL_NORMAL_ARRAY

        #region GL_COLOR_ARRAY
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COLOR_ARRAY 0x8076
        public const int GL_COLOR_ARRAY = 0x8076;
        #endregion GL_COLOR_ARRAY

        #region GL_INDEX_ARRAY
        /// <summary>
        /// 
        /// </summary>
        // #define GL_INDEX_ARRAY 0x8077
        public const int GL_INDEX_ARRAY = 0x8077;
        #endregion GL_INDEX_ARRAY

        #region GL_TEXTURE_COORD_ARRAY
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_COORD_ARRAY 0x8078
        public const int GL_TEXTURE_COORD_ARRAY = 0x8078;
        #endregion GL_TEXTURE_COORD_ARRAY

        #region GL_EDGE_FLAG_ARRAY
        /// <summary>
        /// 
        /// </summary>
        // #define GL_EDGE_FLAG_ARRAY 0x8079
        public const int GL_EDGE_FLAG_ARRAY = 0x8079;
        #endregion GL_EDGE_FLAG_ARRAY

        #region GL_VERTEX_ARRAY_SIZE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VERTEX_ARRAY_SIZE 0x807A
        public const int GL_VERTEX_ARRAY_SIZE = 0x807A;
        #endregion GL_VERTEX_ARRAY_SIZE

        #region GL_VERTEX_ARRAY_TYPE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VERTEX_ARRAY_TYPE 0x807B
        public const int GL_VERTEX_ARRAY_TYPE = 0x807B;
        #endregion GL_VERTEX_ARRAY_TYPE

        #region GL_VERTEX_ARRAY_STRIDE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VERTEX_ARRAY_STRIDE 0x807C
        public const int GL_VERTEX_ARRAY_STRIDE = 0x807C;
        #endregion GL_VERTEX_ARRAY_STRIDE

        #region GL_NORMAL_ARRAY_TYPE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_NORMAL_ARRAY_TYPE 0x807E
        public const int GL_NORMAL_ARRAY_TYPE = 0x807E;
        #endregion GL_NORMAL_ARRAY_TYPE

        #region GL_NORMAL_ARRAY_STRIDE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_NORMAL_ARRAY_STRIDE 0x807F
        public const int GL_NORMAL_ARRAY_STRIDE = 0x807F;
        #endregion GL_NORMAL_ARRAY_STRIDE

        #region GL_COLOR_ARRAY_SIZE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COLOR_ARRAY_SIZE 0x8081
        public const int GL_COLOR_ARRAY_SIZE = 0x8081;
        #endregion GL_COLOR_ARRAY_SIZE

        #region GL_COLOR_ARRAY_TYPE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COLOR_ARRAY_TYPE 0x8082
        public const int GL_COLOR_ARRAY_TYPE = 0x8082;
        #endregion GL_COLOR_ARRAY_TYPE

        #region GL_COLOR_ARRAY_STRIDE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COLOR_ARRAY_STRIDE 0x8083
        public const int GL_COLOR_ARRAY_STRIDE = 0x8083;
        #endregion GL_COLOR_ARRAY_STRIDE

        #region GL_INDEX_ARRAY_TYPE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_INDEX_ARRAY_TYPE 0x8085
        public const int GL_INDEX_ARRAY_TYPE = 0x8085;
        #endregion GL_INDEX_ARRAY_TYPE

        #region GL_INDEX_ARRAY_STRIDE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_INDEX_ARRAY_STRIDE 0x8086
        public const int GL_INDEX_ARRAY_STRIDE = 0x8086;
        #endregion GL_INDEX_ARRAY_STRIDE

        #region GL_TEXTURE_COORD_ARRAY_SIZE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_COORD_ARRAY_SIZE 0x8088
        public const int GL_TEXTURE_COORD_ARRAY_SIZE = 0x8088;
        #endregion GL_TEXTURE_COORD_ARRAY_SIZE

        #region GL_TEXTURE_COORD_ARRAY_TYPE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_COORD_ARRAY_TYPE 0x8089
        public const int GL_TEXTURE_COORD_ARRAY_TYPE = 0x8089;
        #endregion GL_TEXTURE_COORD_ARRAY_TYPE

        #region GL_TEXTURE_COORD_ARRAY_STRIDE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_COORD_ARRAY_STRIDE 0x808A
        public const int GL_TEXTURE_COORD_ARRAY_STRIDE = 0x808A;
        #endregion GL_TEXTURE_COORD_ARRAY_STRIDE

        #region GL_EDGE_FLAG_ARRAY_STRIDE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_EDGE_FLAG_ARRAY_STRIDE 0x808C
        public const int GL_EDGE_FLAG_ARRAY_STRIDE = 0x808C;
        #endregion GL_EDGE_FLAG_ARRAY_STRIDE

        #region GL_TEXTURE_WIDTH
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_WIDTH 0x1000
        public const int GL_TEXTURE_WIDTH = 0x1000;
        #endregion GL_TEXTURE_WIDTH

        #region GL_TEXTURE_HEIGHT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_HEIGHT 0x1001
        public const int GL_TEXTURE_HEIGHT = 0x1001;
        #endregion GL_TEXTURE_HEIGHT

        #region GL_TEXTURE_COMPONENTS
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_COMPONENTS GL_TEXTURE_INTERNAL_FORMAT
        public const int GL_TEXTURE_COMPONENTS = GL_TEXTURE_INTERNAL_FORMAT;
        #endregion GL_TEXTURE_COMPONENTS

        #region GL_TEXTURE_BORDER_COLOR
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_BORDER_COLOR 0x1004
        public const int GL_TEXTURE_BORDER_COLOR = 0x1004;
        #endregion GL_TEXTURE_BORDER_COLOR

        #region GL_TEXTURE_BORDER
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_BORDER 0x1005
        public const int GL_TEXTURE_BORDER = 0x1005;
        #endregion GL_TEXTURE_BORDER

        #region GL_TEXTURE_RED_SIZE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_RED_SIZE 0x805C
        public const int GL_TEXTURE_RED_SIZE = 0x805C;
        #endregion GL_TEXTURE_RED_SIZE

        #region GL_TEXTURE_GREEN_SIZE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_GREEN_SIZE 0x805D
        public const int GL_TEXTURE_GREEN_SIZE = 0x805D;
        #endregion GL_TEXTURE_GREEN_SIZE

        #region GL_TEXTURE_BLUE_SIZE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_BLUE_SIZE 0x805E
        public const int GL_TEXTURE_BLUE_SIZE = 0x805E;
        #endregion GL_TEXTURE_BLUE_SIZE

        #region GL_TEXTURE_ALPHA_SIZE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_ALPHA_SIZE 0x805F
        public const int GL_TEXTURE_ALPHA_SIZE = 0x805F;
        #endregion GL_TEXTURE_ALPHA_SIZE

        #region GL_TEXTURE_LUMINANCE_SIZE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_LUMINANCE_SIZE 0x8060
        public const int GL_TEXTURE_LUMINANCE_SIZE = 0x8060;
        #endregion GL_TEXTURE_LUMINANCE_SIZE

        #region GL_TEXTURE_INTENSITY_SIZE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_INTENSITY_SIZE 0x8061
        public const int GL_TEXTURE_INTENSITY_SIZE = 0x8061;
        #endregion GL_TEXTURE_INTENSITY_SIZE

        // HintMode
        #region GL_DONT_CARE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DONT_CARE 0x1100
        public const int GL_DONT_CARE = 0x1100;
        #endregion GL_DONT_CARE

        #region GL_FASTEST
        /// <summary>
        /// 
        /// </summary>
        // #define GL_FASTEST 0x1101
        public const int GL_FASTEST = 0x1101;
        #endregion GL_FASTEST

        #region GL_NICEST
        /// <summary>
        /// 
        /// </summary>
        // #define GL_NICEST 0x1102
        public const int GL_NICEST = 0x1102;
        #endregion GL_NICEST

        // LightParameter
        #region GL_AMBIENT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_AMBIENT 0x1200
        public const int GL_AMBIENT = 0x1200;
        #endregion GL_AMBIENT

        #region GL_DIFFUSE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DIFFUSE 0x1201
        public const int GL_DIFFUSE = 0x1201;
        #endregion GL_DIFFUSE

        #region GL_SPECULAR
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SPECULAR 0x1202
        public const int GL_SPECULAR = 0x1202;
        #endregion GL_SPECULAR

        #region GL_POSITION
        /// <summary>
        /// 
        /// </summary>
        // #define GL_POSITION 0x1203
        public const int GL_POSITION = 0x1203;
        #endregion GL_POSITION

        #region GL_SPOT_DIRECTION
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SPOT_DIRECTION 0x1204
        public const int GL_SPOT_DIRECTION = 0x1204;
        #endregion GL_SPOT_DIRECTION

        #region GL_SPOT_EXPONENT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SPOT_EXPONENT 0x1205
        public const int GL_SPOT_EXPONENT = 0x1205;
        #endregion GL_SPOT_EXPONENT

        #region GL_SPOT_CUTOFF
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SPOT_CUTOFF 0x1206
        public const int GL_SPOT_CUTOFF = 0x1206;
        #endregion GL_SPOT_CUTOFF

        #region GL_CONSTANT_ATTENUATION
        /// <summary>
        /// 
        /// </summary>
        // #define GL_CONSTANT_ATTENUATION 0x1207
        public const int GL_CONSTANT_ATTENUATION = 0x1207;
        #endregion GL_CONSTANT_ATTENUATION

        #region GL_LINEAR_ATTENUATION
        /// <summary>
        /// 
        /// </summary>
        // #define GL_LINEAR_ATTENUATION 0x1208
        public const int GL_LINEAR_ATTENUATION = 0x1208;
        #endregion GL_LINEAR_ATTENUATION

        #region GL_QUADRATIC_ATTENUATION
        /// <summary>
        /// 
        /// </summary>
        // #define GL_QUADRATIC_ATTENUATION 0x1209
        public const int GL_QUADRATIC_ATTENUATION = 0x1209;
        #endregion GL_QUADRATIC_ATTENUATION

        // ListMode
        #region GL_COMPILE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COMPILE 0x1300
        public const int GL_COMPILE = 0x1300;
        #endregion GL_COMPILE

        #region GL_COMPILE_AND_EXECUTE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COMPILE_AND_EXECUTE 0x1301
        public const int GL_COMPILE_AND_EXECUTE = 0x1301;
        #endregion GL_COMPILE_AND_EXECUTE

        // DataType
        #region GL_BYTE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_BYTE 0x1400
        public const int GL_BYTE = 0x1400;
        #endregion GL_BYTE

        #region GL_UNSIGNED_BYTE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_UNSIGNED_BYTE 0x1401
        public const int GL_UNSIGNED_BYTE = 0x1401;
        #endregion GL_UNSIGNED_BYTE

        #region GL_SHORT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SHORT 0x1402
        public const int GL_SHORT = 0x1402;
        #endregion GL_SHORT

        #region GL_UNSIGNED_SHORT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_UNSIGNED_SHORT 0x1403
        public const int GL_UNSIGNED_SHORT = 0x1403;
        #endregion GL_UNSIGNED_SHORT

        #region GL_INT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_INT 0x1404
        public const int GL_INT = 0x1404;
        #endregion GL_INT

        #region GL_UNSIGNED_INT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_UNSIGNED_INT 0x1405
        public const int GL_UNSIGNED_INT = 0x1405;
        #endregion GL_UNSIGNED_INT

        #region GL_FLOAT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_FLOAT 0x1406
        public const int GL_FLOAT = 0x1406;
        #endregion GL_FLOAT

        #region GL_2_BYTES
        /// <summary>
        /// 
        /// </summary>
        // #define GL_2_BYTES 0x1407
        public const int GL_2_BYTES = 0x1407;
        #endregion GL_2_BYTES

        #region GL_3_BYTES
        /// <summary>
        /// 
        /// </summary>
        // #define GL_3_BYTES 0x1408
        public const int GL_3_BYTES = 0x1408;
        #endregion GL_3_BYTES

        #region GL_4_BYTES
        /// <summary>
        /// 
        /// </summary>
        // #define GL_4_BYTES 0x1409
        public const int GL_4_BYTES = 0x1409;
        #endregion GL_4_BYTES

        #region GL_DOUBLE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DOUBLE 0x140A
        public const int GL_DOUBLE = 0x140A;
        #endregion GL_DOUBLE

        #region GL_DOUBLE_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DOUBLE_EXT 0x140A
        public const int GL_DOUBLE_EXT = 0x140A;
        #endregion GL_DOUBLE_EXT

        // LogicOp
        #region GL_CLEAR
        /// <summary>
        /// 
        /// </summary>
        // #define GL_CLEAR 0x1500
        public const int GL_CLEAR = 0x1500;
        #endregion GL_CLEAR

        #region GL_AND
        /// <summary>
        /// 
        /// </summary>
        // #define GL_AND 0x1501
        public const int GL_AND = 0x1501;
        #endregion GL_AND

        #region GL_AND_REVERSE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_AND_REVERSE 0x1502
        public const int GL_AND_REVERSE = 0x1502;
        #endregion GL_AND_REVERSE

        #region GL_COPY
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COPY 0x1503
        public const int GL_COPY = 0x1503;
        #endregion GL_COPY

        #region GL_AND_INVERTED
        /// <summary>
        /// 
        /// </summary>
        // #define GL_AND_INVERTED 0x1504
        public const int GL_AND_INVERTED = 0x1504;
        #endregion GL_AND_INVERTED

        #region GL_NOOP
        /// <summary>
        /// 
        /// </summary>
        // #define GL_NOOP 0x1505
        public const int GL_NOOP = 0x1505;
        #endregion GL_NOOP

        #region GL_XOR
        /// <summary>
        /// 
        /// </summary>
        // #define GL_XOR 0x1506
        public const int GL_XOR = 0x1506;
        #endregion GL_XOR

        #region GL_OR
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OR 0x1507
        public const int GL_OR = 0x1507;
        #endregion GL_OR

        #region GL_NOR
        /// <summary>
        /// 
        /// </summary>
        // #define GL_NOR 0x1508
        public const int GL_NOR = 0x1508;
        #endregion GL_NOR

        #region GL_EQUIV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_EQUIV 0x1509
        public const int GL_EQUIV = 0x1509;
        #endregion GL_EQUIV

        #region GL_INVERT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_INVERT 0x150A
        public const int GL_INVERT = 0x150A;
        #endregion GL_INVERT

        #region GL_OR_REVERSE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OR_REVERSE 0x150B
        public const int GL_OR_REVERSE = 0x150B;
        #endregion GL_OR_REVERSE

        #region GL_COPY_INVERTED
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COPY_INVERTED 0x150C
        public const int GL_COPY_INVERTED = 0x150C;
        #endregion GL_COPY_INVERTED

        #region GL_OR_INVERTED
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OR_INVERTED 0x150D
        public const int GL_OR_INVERTED = 0x150D;
        #endregion GL_OR_INVERTED

        #region GL_NAND
        /// <summary>
        /// 
        /// </summary>
        // #define GL_NAND 0x150E
        public const int GL_NAND = 0x150E;
        #endregion GL_NAND

        #region GL_SET
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SET 0x150F
        public const int GL_SET = 0x150F;
        #endregion GL_SET

        // MaterialParameter
        #region GL_EMISSION
        /// <summary>
        /// 
        /// </summary>
        // #define GL_EMISSION 0x1600
        public const int GL_EMISSION = 0x1600;
        #endregion GL_EMISSION

        #region GL_SHININESS
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SHININESS 0x1601
        public const int GL_SHININESS = 0x1601;
        #endregion GL_SHININESS

        #region GL_AMBIENT_AND_DIFFUSE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_AMBIENT_AND_DIFFUSE 0x1602
        public const int GL_AMBIENT_AND_DIFFUSE = 0x1602;
        #endregion GL_AMBIENT_AND_DIFFUSE

        #region GL_COLOR_INDEXES
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COLOR_INDEXES 0x1603
        public const int GL_COLOR_INDEXES = 0x1603;
        #endregion GL_COLOR_INDEXES

        // MatrixMode
        #region GL_MODELVIEW
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MODELVIEW 0x1700
        public const int GL_MODELVIEW = 0x1700;
        #endregion GL_MODELVIEW

        #region GL_PROJECTION
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PROJECTION 0x1701
        public const int GL_PROJECTION = 0x1701;
        #endregion GL_PROJECTION

        #region GL_TEXTURE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE 0x1702
        public const int GL_TEXTURE = 0x1702;
        #endregion GL_TEXTURE

        // PixelCopyType
        #region GL_COLOR
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COLOR 0x1800
        public const int GL_COLOR = 0x1800;
        #endregion GL_COLOR

        #region GL_DEPTH
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DEPTH 0x1801
        public const int GL_DEPTH = 0x1801;
        #endregion GL_DEPTH

        #region GL_STENCIL
        /// <summary>
        /// 
        /// </summary>
        // #define GL_STENCIL 0x1802
        public const int GL_STENCIL = 0x1802;
        #endregion GL_STENCIL

        // PixelFormat
        #region GL_COLOR_INDEX
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COLOR_INDEX 0x1900
        public const int GL_COLOR_INDEX = 0x1900;
        #endregion GL_COLOR_INDEX

        #region GL_STENCIL_INDEX
        /// <summary>
        /// 
        /// </summary>
        // #define GL_STENCIL_INDEX 0x1901
        public const int GL_STENCIL_INDEX = 0x1901;
        #endregion GL_STENCIL_INDEX

        #region GL_DEPTH_COMPONENT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DEPTH_COMPONENT 0x1902
        public const int GL_DEPTH_COMPONENT = 0x1902;
        #endregion GL_DEPTH_COMPONENT

        #region GL_RED
        /// <summary>
        /// 
        /// </summary>
        // #define GL_RED 0x1903
        public const int GL_RED = 0x1903;
        #endregion GL_RED

        #region GL_GREEN
        /// <summary>
        /// 
        /// </summary>
        // #define GL_GREEN 0x1904
        public const int GL_GREEN = 0x1904;
        #endregion GL_GREEN

        #region GL_BLUE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_BLUE 0x1905
        public const int GL_BLUE = 0x1905;
        #endregion GL_BLUE

        #region GL_ALPHA
        /// <summary>
        /// 
        /// </summary>
        // #define GL_ALPHA 0x1906
        public const int GL_ALPHA = 0x1906;
        #endregion GL_ALPHA

        #region GL_RGB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_RGB 0x1907
        public const int GL_RGB = 0x1907;
        #endregion GL_RGB

        #region GL_RGBA
        /// <summary>
        /// 
        /// </summary>
        // #define GL_RGBA 0x1908
        public const int GL_RGBA = 0x1908;
        #endregion GL_RGBA

        #region GL_LUMINANCE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_LUMINANCE 0x1909
        public const int GL_LUMINANCE = 0x1909;
        #endregion GL_LUMINANCE

        #region GL_LUMINANCE_ALPHA
        /// <summary>
        /// 
        /// </summary>
        // #define GL_LUMINANCE_ALPHA 0x190A
        public const int GL_LUMINANCE_ALPHA = 0x190A;
        #endregion GL_LUMINANCE_ALPHA

        // PixelType
        #region GL_BITMAP
        /// <summary>
        /// 
        /// </summary>
        // #define GL_BITMAP 0x1A00
        public const int GL_BITMAP = 0x1A00;
        #endregion GL_BITMAP

        // PolygonMode
        #region GL_POINT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_POINT 0x1B00
        public const int GL_POINT = 0x1B00;
        #endregion GL_POINT

        #region GL_LINE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_LINE 0x1B01
        public const int GL_LINE = 0x1B01;
        #endregion GL_LINE

        #region GL_FILL
        /// <summary>
        /// 
        /// </summary>
        // #define GL_FILL 0x1B02
        public const int GL_FILL = 0x1B02;
        #endregion GL_FILL

        // RenderingMode
        #region GL_RENDER
        /// <summary>
        /// 
        /// </summary>
        // #define GL_RENDER 0x1C00
        public const int GL_RENDER = 0x1C00;
        #endregion GL_RENDER

        #region GL_FEEDBACK
        /// <summary>
        /// 
        /// </summary>
        // #define GL_FEEDBACK 0x1C01
        public const int GL_FEEDBACK = 0x1C01;
        #endregion GL_FEEDBACK

        #region GL_SELECT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SELECT 0x1C02
        public const int GL_SELECT = 0x1C02;
        #endregion GL_SELECT

        // ShadingModel
        #region GL_FLAT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_FLAT 0x1D00
        public const int GL_FLAT = 0x1D00;
        #endregion GL_FLAT

        #region GL_SMOOTH
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SMOOTH 0x1D01
        public const int GL_SMOOTH = 0x1D01;
        #endregion GL_SMOOTH

        // StencilOp
        #region GL_KEEP
        /// <summary>
        /// 
        /// </summary>
        // #define GL_KEEP 0x1E00
        public const int GL_KEEP = 0x1E00;
        #endregion GL_KEEP

        #region GL_REPLACE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_REPLACE 0x1E01
        public const int GL_REPLACE = 0x1E01;
        #endregion GL_REPLACE

        #region GL_INCR
        /// <summary>
        /// 
        /// </summary>
        // #define GL_INCR 0x1E02
        public const int GL_INCR = 0x1E02;
        #endregion GL_INCR

        #region GL_DECR
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DECR 0x1E03
        public const int GL_DECR = 0x1E03;
        #endregion GL_DECR

        // StringName
        #region GL_VENDOR
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VENDOR 0x1F00
        public const int GL_VENDOR = 0x1F00;
        #endregion GL_VENDOR

        #region GL_RENDERER
        /// <summary>
        /// 
        /// </summary>
        // #define GL_RENDERER 0x1F01
        public const int GL_RENDERER = 0x1F01;
        #endregion GL_RENDERER

        #region GL_VERSION
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VERSION 0x1F02
        public const int GL_VERSION = 0x1F02;
        #endregion GL_VERSION

        #region GL_EXTENSIONS
        /// <summary>
        /// 
        /// </summary>
        // #define GL_EXTENSIONS 0x1F03
        public const int GL_EXTENSIONS = 0x1F03;
        #endregion GL_EXTENSIONS

        // TextureCoordName
        #region GL_S
        /// <summary>
        /// 
        /// </summary>
        // #define GL_S 0x2000
        public const int GL_S = 0x2000;
        #endregion GL_S

        #region GL_T
        /// <summary>
        /// 
        /// </summary>
        // #define GL_T 0x2001
        public const int GL_T = 0x2001;
        #endregion GL_T

        #region GL_R
        /// <summary>
        /// 
        /// </summary>
        // #define GL_R 0x2002
        public const int GL_R = 0x2002;
        #endregion GL_R

        #region GL_Q
        /// <summary>
        /// 
        /// </summary>
        // #define GL_Q 0x2003
        public const int GL_Q = 0x2003;
        #endregion GL_Q

        // TextureEnvMode
        #region GL_MODULATE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MODULATE 0x2100
        public const int GL_MODULATE = 0x2100;
        #endregion GL_MODULATE

        #region GL_DECAL
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DECAL 0x2101
        public const int GL_DECAL = 0x2101;
        #endregion GL_DECAL

        // TextureEnvParameter
        #region GL_TEXTURE_ENV_MODE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_ENV_MODE 0x2200
        public const int GL_TEXTURE_ENV_MODE = 0x2200;
        #endregion GL_TEXTURE_ENV_MODE

        #region GL_TEXTURE_ENV_COLOR
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_ENV_COLOR 0x2201
        public const int GL_TEXTURE_ENV_COLOR = 0x2201;
        #endregion GL_TEXTURE_ENV_COLOR

        // TextureEnvTarget
        #region GL_TEXTURE_ENV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_ENV 0x2300
        public const int GL_TEXTURE_ENV = 0x2300;
        #endregion GL_TEXTURE_ENV

        // TextureGenMode
        #region GL_EYE_LINEAR
        /// <summary>
        /// 
        /// </summary>
        // #define GL_EYE_LINEAR 0x2400
        public const int GL_EYE_LINEAR = 0x2400;
        #endregion GL_EYE_LINEAR

        #region GL_OBJECT_LINEAR
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OBJECT_LINEAR 0x2401
        public const int GL_OBJECT_LINEAR = 0x2401;
        #endregion GL_OBJECT_LINEAR

        #region GL_SPHERE_MAP
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SPHERE_MAP 0x2402
        public const int GL_SPHERE_MAP = 0x2402;
        #endregion GL_SPHERE_MAP

        // TextureGenParameter
        #region GL_TEXTURE_GEN_MODE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_GEN_MODE 0x2500
        public const int GL_TEXTURE_GEN_MODE = 0x2500;
        #endregion GL_TEXTURE_GEN_MODE

        #region GL_OBJECT_PLANE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OBJECT_PLANE 0x2501
        public const int GL_OBJECT_PLANE = 0x2501;
        #endregion GL_OBJECT_PLANE

        #region GL_EYE_PLANE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_EYE_PLANE 0x2502
        public const int GL_EYE_PLANE = 0x2502;
        #endregion GL_EYE_PLANE

        // TextureMagFilter
        #region GL_NEAREST
        /// <summary>
        /// 
        /// </summary>
        // #define GL_NEAREST 0x2600
        public const int GL_NEAREST = 0x2600;
        #endregion GL_NEAREST

        #region GL_LINEAR
        /// <summary>
        /// 
        /// </summary>
        // #define GL_LINEAR 0x2601
        public const int GL_LINEAR = 0x2601;
        #endregion GL_LINEAR

        // TextureMinFilter
        #region GL_NEAREST_MIPMAP_NEAREST
        /// <summary>
        /// 
        /// </summary>
        // #define GL_NEAREST_MIPMAP_NEAREST 0x2700
        public const int GL_NEAREST_MIPMAP_NEAREST = 0x2700;
        #endregion GL_NEAREST_MIPMAP_NEAREST

        #region GL_LINEAR_MIPMAP_NEAREST
        /// <summary>
        /// 
        /// </summary>
        // #define GL_LINEAR_MIPMAP_NEAREST 0x2701
        public const int GL_LINEAR_MIPMAP_NEAREST = 0x2701;
        #endregion GL_LINEAR_MIPMAP_NEAREST

        #region GL_NEAREST_MIPMAP_LINEAR
        /// <summary>
        /// 
        /// </summary>
        // #define GL_NEAREST_MIPMAP_LINEAR 0x2702
        public const int GL_NEAREST_MIPMAP_LINEAR = 0x2702;
        #endregion GL_NEAREST_MIPMAP_LINEAR

        #region GL_LINEAR_MIPMAP_LINEAR
        /// <summary>
        /// 
        /// </summary>
        // #define GL_LINEAR_MIPMAP_LINEAR 0x2703
        public const int GL_LINEAR_MIPMAP_LINEAR = 0x2703;
        #endregion GL_LINEAR_MIPMAP_LINEAR

        // TextureParameterName
        #region GL_TEXTURE_MAG_FILTER
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_MAG_FILTER 0x2800
        public const int GL_TEXTURE_MAG_FILTER = 0x2800;
        #endregion GL_TEXTURE_MAG_FILTER

        #region GL_TEXTURE_MIN_FILTER
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_MIN_FILTER 0x2801
        public const int GL_TEXTURE_MIN_FILTER = 0x2801;
        #endregion GL_TEXTURE_MIN_FILTER

        #region GL_TEXTURE_WRAP_S
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_WRAP_S 0x2802
        public const int GL_TEXTURE_WRAP_S = 0x2802;
        #endregion GL_TEXTURE_WRAP_S

        #region GL_TEXTURE_WRAP_T
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_WRAP_T 0x2803
        public const int GL_TEXTURE_WRAP_T = 0x2803;
        #endregion GL_TEXTURE_WRAP_T

        // TextureWrapMode
        #region GL_CLAMP
        /// <summary>
        /// 
        /// </summary>
        // #define GL_CLAMP 0x2900
        public const int GL_CLAMP = 0x2900;
        #endregion GL_CLAMP

        #region GL_REPEAT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_REPEAT 0x2901
        public const int GL_REPEAT = 0x2901;
        #endregion GL_REPEAT

        // InterleavedArrayFormat
        #region GL_V2F
        /// <summary>
        /// 
        /// </summary>
        // #define GL_V2F 0x2A20
        public const int GL_V2F = 0x2A20;
        #endregion GL_V2F

        #region GL_V3F
        /// <summary>
        /// 
        /// </summary>
        // #define GL_V3F 0x2A21
        public const int GL_V3F = 0x2A21;
        #endregion GL_V3F

        #region GL_C4UB_V2F
        /// <summary>
        /// 
        /// </summary>
        // #define GL_C4UB_V2F 0x2A22
        public const int GL_C4UB_V2F = 0x2A22;
        #endregion GL_C4UB_V2F

        #region GL_C4UB_V3F
        /// <summary>
        /// 
        /// </summary>
        // #define GL_C4UB_V3F 0x2A23
        public const int GL_C4UB_V3F = 0x2A23;
        #endregion GL_C4UB_V3F

        #region GL_C3F_V3F
        /// <summary>
        /// 
        /// </summary>
        // #define GL_C3F_V3F 0x2A24
        public const int GL_C3F_V3F = 0x2A24;
        #endregion GL_C3F_V3F

        #region GL_N3F_V3F
        /// <summary>
        /// 
        /// </summary>
        // #define GL_N3F_V3F 0x2A25
        public const int GL_N3F_V3F = 0x2A25;
        #endregion GL_N3F_V3F

        #region GL_C4F_N3F_V3F
        /// <summary>
        /// 
        /// </summary>
        // #define GL_C4F_N3F_V3F 0x2A26
        public const int GL_C4F_N3F_V3F = 0x2A26;
        #endregion GL_C4F_N3F_V3F

        #region GL_T2F_V3F
        /// <summary>
        /// 
        /// </summary>
        // #define GL_T2F_V3F 0x2A27
        public const int GL_T2F_V3F = 0x2A27;
        #endregion GL_T2F_V3F

        #region GL_T4F_V4F
        /// <summary>
        /// 
        /// </summary>
        // #define GL_T4F_V4F 0x2A28
        public const int GL_T4F_V4F = 0x2A28;
        #endregion GL_T4F_V4F

        #region GL_T2F_C4UB_V3F
        /// <summary>
        /// 
        /// </summary>
        // #define GL_T2F_C4UB_V3F 0x2A29
        public const int GL_T2F_C4UB_V3F = 0x2A29;
        #endregion GL_T2F_C4UB_V3F

        #region GL_T2F_C3F_V3F
        /// <summary>
        /// 
        /// </summary>
        // #define GL_T2F_C3F_V3F 0x2A2A
        public const int GL_T2F_C3F_V3F = 0x2A2A;
        #endregion GL_T2F_C3F_V3F

        #region GL_T2F_N3F_V3F
        /// <summary>
        /// 
        /// </summary>
        // #define GL_T2F_N3F_V3F 0x2A2B
        public const int GL_T2F_N3F_V3F = 0x2A2B;
        #endregion GL_T2F_N3F_V3F

        #region GL_T2F_C4F_N3F_V3F
        /// <summary>
        /// 
        /// </summary>
        // #define GL_T2F_C4F_N3F_V3F 0x2A2C
        public const int GL_T2F_C4F_N3F_V3F = 0x2A2C;
        #endregion GL_T2F_C4F_N3F_V3F

        #region GL_T4F_C4F_N3F_V4F
        /// <summary>
        /// 
        /// </summary>
        // #define GL_T4F_C4F_N3F_V4F 0x2A2D
        public const int GL_T4F_C4F_N3F_V4F = 0x2A2D;
        #endregion GL_T4F_C4F_N3F_V4F

        // ClipPlaneName
        #region GL_CLIP_PLANE0
        /// <summary>
        /// 
        /// </summary>
        // #define GL_CLIP_PLANE0 0x3000
        public const int GL_CLIP_PLANE0 = 0x3000;
        #endregion GL_CLIP_PLANE0

        #region GL_CLIP_PLANE1
        /// <summary>
        /// 
        /// </summary>
        // #define GL_CLIP_PLANE1 0x3001
        public const int GL_CLIP_PLANE1 = 0x3001;
        #endregion GL_CLIP_PLANE1

        #region GL_CLIP_PLANE2
        /// <summary>
        /// 
        /// </summary>
        // #define GL_CLIP_PLANE2 0x3002
        public const int GL_CLIP_PLANE2 = 0x3002;
        #endregion GL_CLIP_PLANE2

        #region GL_CLIP_PLANE3
        /// <summary>
        /// 
        /// </summary>
        // #define GL_CLIP_PLANE3 0x3003
        public const int GL_CLIP_PLANE3 = 0x3003;
        #endregion GL_CLIP_PLANE3

        #region GL_CLIP_PLANE4
        /// <summary>
        /// 
        /// </summary>
        // #define GL_CLIP_PLANE4 0x3004
        public const int GL_CLIP_PLANE4 = 0x3004;
        #endregion GL_CLIP_PLANE4

        #region GL_CLIP_PLANE5
        /// <summary>
        /// 
        /// </summary>
        // #define GL_CLIP_PLANE5 0x3005
        public const int GL_CLIP_PLANE5 = 0x3005;
        #endregion GL_CLIP_PLANE5

        // LightName
        #region GL_LIGHT0
        /// <summary>
        /// 
        /// </summary>
        // #define GL_LIGHT0 0x4000
        public const int GL_LIGHT0 = 0x4000;
        #endregion GL_LIGHT0

        #region GL_LIGHT1
        /// <summary>
        /// 
        /// </summary>
        // #define GL_LIGHT1 0x4001
        public const int GL_LIGHT1 = 0x4001;
        #endregion GL_LIGHT1

        #region GL_LIGHT2
        /// <summary>
        /// 
        /// </summary>
        // #define GL_LIGHT2 0x4002
        public const int GL_LIGHT2 = 0x4002;
        #endregion GL_LIGHT2

        #region GL_LIGHT3
        /// <summary>
        /// 
        /// </summary>
        // #define GL_LIGHT3 0x4003
        public const int GL_LIGHT3 = 0x4003;
        #endregion GL_LIGHT3

        #region GL_LIGHT4
        /// <summary>
        /// 
        /// </summary>
        // #define GL_LIGHT4 0x4004
        public const int GL_LIGHT4 = 0x4004;
        #endregion GL_LIGHT4

        #region GL_LIGHT5
        /// <summary>
        /// 
        /// </summary>
        // #define GL_LIGHT5 0x4005
        public const int GL_LIGHT5 = 0x4005;
        #endregion GL_LIGHT5

        #region GL_LIGHT6
        /// <summary>
        /// 
        /// </summary>
        // #define GL_LIGHT6 0x4006
        public const int GL_LIGHT6 = 0x4006;
        #endregion GL_LIGHT6

        #region GL_LIGHT7
        /// <summary>
        /// 
        /// </summary>
        // #define GL_LIGHT7 0x4007
        public const int GL_LIGHT7 = 0x4007;
        #endregion GL_LIGHT7
        #endregion Public OpenGL 1.0 Constants

        #region Public OpenGL 1.1 Constants
        #region GL_VERSION_1_1
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VERSION_1_1 1
        public const bool GL_VERSION_1_1 = true;
        #endregion GL_VERSION_1_1

        #region GL_TEXTURE_INTERNAL_FORMAT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_INTERNAL_FORMAT 0x1003
        public const int GL_TEXTURE_INTERNAL_FORMAT = 0x1003;
        #endregion GL_TEXTURE_INTERNAL_FORMAT

        #region GL_R3_G3_B2
        /// <summary>
        /// 
        /// </summary>
        // #define GL_R3_G3_B2 0x2A10
        public const int GL_R3_G3_B2 = 0x2A10;
        #endregion GL_R3_G3_B2

        #region GL_ALPHA4
        /// <summary>
        /// 
        /// </summary>
        // #define GL_ALPHA4 0x803B
        public const int GL_ALPHA4 = 0x803B;
        #endregion GL_ALPHA4

        #region GL_ALPHA8
        /// <summary>
        /// 
        /// </summary>
        // #define GL_ALPHA8 0x803C
        public const int GL_ALPHA8 = 0x803C;
        #endregion GL_ALPHA8

        #region GL_ALPHA12
        /// <summary>
        /// 
        /// </summary>
        // #define GL_ALPHA12 0x803D
        public const int GL_ALPHA12 = 0x803D;
        #endregion GL_ALPHA12

        #region GL_ALPHA16
        /// <summary>
        /// 
        /// </summary>
        // #define GL_ALPHA16 0x803E
        public const int GL_ALPHA16 = 0x803E;
        #endregion GL_ALPHA16

        #region GL_LUMINANCE4
        /// <summary>
        /// 
        /// </summary>
        // #define GL_LUMINANCE4 0x803F
        public const int GL_LUMINANCE4 = 0x803F;
        #endregion GL_LUMINANCE4

        #region GL_LUMINANCE8
        /// <summary>
        /// 
        /// </summary>
        // #define GL_LUMINANCE8 0x8040
        public const int GL_LUMINANCE8 = 0x8040;
        #endregion GL_LUMINANCE8

        #region GL_LUMINANCE12
        /// <summary>
        /// 
        /// </summary>
        // #define GL_LUMINANCE12 0x8041
        public const int GL_LUMINANCE12 = 0x8041;
        #endregion GL_LUMINANCE12

        #region GL_LUMINANCE16
        /// <summary>
        /// 
        /// </summary>
        // #define GL_LUMINANCE16 0x8042
        public const int GL_LUMINANCE16 = 0x8042;
        #endregion GL_LUMINANCE16

        #region GL_LUMINANCE4_ALPHA4
        /// <summary>
        /// 
        /// </summary>
        // #define GL_LUMINANCE4_ALPHA4 0x8043
        public const int GL_LUMINANCE4_ALPHA4 = 0x8043;
        #endregion GL_LUMINANCE4_ALPHA4

        #region GL_LUMINANCE6_ALPHA2
        /// <summary>
        /// 
        /// </summary>
        // #define GL_LUMINANCE6_ALPHA2 0x8044
        public const int GL_LUMINANCE6_ALPHA2 = 0x8044;
        #endregion GL_LUMINANCE6_ALPHA2

        #region GL_LUMINANCE8_ALPHA8
        /// <summary>
        /// 
        /// </summary>
        // #define GL_LUMINANCE8_ALPHA8 0x8045
        public const int GL_LUMINANCE8_ALPHA8 = 0x8045;
        #endregion GL_LUMINANCE8_ALPHA8

        #region GL_LUMINANCE12_ALPHA4
        /// <summary>
        /// 
        /// </summary>
        // #define GL_LUMINANCE12_ALPHA4 0x8046
        public const int GL_LUMINANCE12_ALPHA4 = 0x8046;
        #endregion GL_LUMINANCE12_ALPHA4

        #region GL_LUMINANCE12_ALPHA12
        /// <summary>
        /// 
        /// </summary>
        // #define GL_LUMINANCE12_ALPHA12 0x8047
        public const int GL_LUMINANCE12_ALPHA12 = 0x8047;
        #endregion GL_LUMINANCE12_ALPHA12

        #region GL_LUMINANCE16_ALPHA16
        /// <summary>
        /// 
        /// </summary>
        // #define GL_LUMINANCE16_ALPHA16 0x8048
        public const int GL_LUMINANCE16_ALPHA16 = 0x8048;
        #endregion GL_LUMINANCE16_ALPHA16

        #region GL_INTENSITY
        /// <summary>
        /// 
        /// </summary>
        // #define GL_INTENSITY 0x8049
        public const int GL_INTENSITY = 0x8049;
        #endregion GL_INTENSITY

        #region GL_INTENSITY4
        /// <summary>
        /// 
        /// </summary>
        // #define GL_INTENSITY4 0x804A
        public const int GL_INTENSITY4 = 0x804A;
        #endregion GL_INTENSITY4

        #region GL_INTENSITY8
        /// <summary>
        /// 
        /// </summary>
        // #define GL_INTENSITY8 0x804B
        public const int GL_INTENSITY8 = 0x804B;
        #endregion GL_INTENSITY8

        #region GL_INTENSITY12
        /// <summary>
        /// 
        /// </summary>
        // #define GL_INTENSITY12 0x804C
        public const int GL_INTENSITY12 = 0x804C;
        #endregion GL_INTENSITY12

        #region GL_INTENSITY16
        /// <summary>
        /// 
        /// </summary>
        // #define GL_INTENSITY16 0x804D
        public const int GL_INTENSITY16 = 0x804D;
        #endregion GL_INTENSITY16

        #region GL_RGB4
        /// <summary>
        /// 
        /// </summary>
        // #define GL_RGB4 0x804F
        public const int GL_RGB4 = 0x804F;
        #endregion GL_RGB4

        #region GL_RGB5
        /// <summary>
        /// 
        /// </summary>
        // #define GL_RGB5 0x8050
        public const int GL_RGB5 = 0x8050;
        #endregion GL_RGB5

        #region GL_RGB8
        /// <summary>
        /// 
        /// </summary>
        // #define GL_RGB8 0x8051
        public const int GL_RGB8 = 0x8051;
        #endregion GL_RGB8

        #region GL_RGB10
        /// <summary>
        /// 
        /// </summary>
        // #define GL_RGB10 0x8052
        public const int GL_RGB10 = 0x8052;
        #endregion GL_RGB10

        #region GL_RGB12
        /// <summary>
        /// 
        /// </summary>
        // #define GL_RGB12 0x8053
        public const int GL_RGB12 = 0x8053;
        #endregion GL_RGB12

        #region GL_RGB16
        /// <summary>
        /// 
        /// </summary>
        // #define GL_RGB16 0x8054
        public const int GL_RGB16 = 0x8054;
        #endregion GL_RGB16

        #region GL_RGBA2
        /// <summary>
        /// 
        /// </summary>
        // #define GL_RGBA2 0x8055
        public const int GL_RGBA2 = 0x8055;
        #endregion GL_RGBA2

        #region GL_RGBA4
        /// <summary>
        /// 
        /// </summary>
        // #define GL_RGBA4 0x8056
        public const int GL_RGBA4 = 0x8056;
        #endregion GL_RGBA4

        #region GL_RGB5_A1
        /// <summary>
        /// 
        /// </summary>
        // #define GL_RGB5_A1 0x8057
        public const int GL_RGB5_A1 = 0x8057;
        #endregion GL_RGB5_A1

        #region GL_RGBA8
        /// <summary>
        /// 
        /// </summary>
        // #define GL_RGBA8 0x8058
        public const int GL_RGBA8 = 0x8058;
        #endregion GL_RGBA8

        #region GL_RGB10_A2
        /// <summary>
        /// 
        /// </summary>
        // #define GL_RGB10_A2 0x8059
        public const int GL_RGB10_A2 = 0x8059;
        #endregion GL_RGB10_A2

        #region GL_RGBA12
        /// <summary>
        /// 
        /// </summary>
        // #define GL_RGBA12 0x805A
        public const int GL_RGBA12 = 0x805A;
        #endregion GL_RGBA12

        #region GL_RGBA16
        /// <summary>
        /// 
        /// </summary>
        // #define GL_RGBA16 0x805B
        public const int GL_RGBA16 = 0x805B;
        #endregion GL_RGBA16

        #region GL_PROXY_TEXTURE_1D
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PROXY_TEXTURE_1D 0x8063
        public const int GL_PROXY_TEXTURE_1D = 0x8063;
        #endregion GL_PROXY_TEXTURE_1D

        #region GL_PROXY_TEXTURE_2D
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PROXY_TEXTURE_2D 0x8064
        public const int GL_PROXY_TEXTURE_2D = 0x8064;
        #endregion GL_PROXY_TEXTURE_2D

        #region GL_TEXTURE_PRIORITY
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_PRIORITY 0x8066
        public const int GL_TEXTURE_PRIORITY = 0x8066;
        #endregion GL_TEXTURE_PRIORITY

        #region GL_TEXTURE_RESIDENT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_RESIDENT 0x8067
        public const int GL_TEXTURE_RESIDENT = 0x8067;
        #endregion GL_TEXTURE_RESIDENT

        #region GL_TEXTURE_BINDING_1D
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_BINDING_1D 0x8068
        public const int GL_TEXTURE_BINDING_1D = 0x8068;
        #endregion GL_TEXTURE_BINDING_1D

        #region GL_TEXTURE_BINDING_2D
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_BINDING_2D 0x8069
        public const int GL_TEXTURE_BINDING_2D = 0x8069;
        #endregion GL_TEXTURE_BINDING_2D

        #region GL_CLIENT_PIXEL_STORE_BIT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_CLIENT_PIXEL_STORE_BIT 0x00000001
        public const int GL_CLIENT_PIXEL_STORE_BIT = 0x00000001;
        #endregion GL_CLIENT_PIXEL_STORE_BIT

        #region GL_CLIENT_VERTEX_ARRAY_BIT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_CLIENT_VERTEX_ARRAY_BIT 0x00000002
        public const int GL_CLIENT_VERTEX_ARRAY_BIT = 0x00000002;
        #endregion GL_CLIENT_VERTEX_ARRAY_BIT

        #region GL_ALL_CLIENT_ATTRIB_BITS
        /// <summary>
        /// 
        /// </summary>
        // #define GL_ALL_CLIENT_ATTRIB_BITS 0xFFFFFFFF
        public const int GL_ALL_CLIENT_ATTRIB_BITS = unchecked((int) 0xffffffff);
        #endregion GL_ALL_CLIENT_ATTRIB_BITS

        #region GL_CLIENT_ALL_ATTRIB_BITS
        /// <summary>
        /// 
        /// </summary>
        // #define GL_CLIENT_ALL_ATTRIB_BITS 0xFFFFFFFF
        public const int GL_CLIENT_ALL_ATTRIB_BITS = unchecked((int) 0xffffffff);
        #endregion GL_CLIENT_ALL_ATTRIB_BITS
        #endregion Public OpenGL 1.1 Constants

        #region Public OpenGL 1.2 Constants
        #region GL_VERSION_1_2
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VERSION_1_2 1
        public const bool GL_VERSION_1_2 = true;
        #endregion GL_VERSION_1_2

        #region GL_PACK_SKIP_IMAGES
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PACK_SKIP_IMAGES 0x806B
        public const int GL_PACK_SKIP_IMAGES = 0x806B;
        #endregion GL_PACK_SKIP_IMAGES

        #region GL_PACK_IMAGE_HEIGHT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PACK_IMAGE_HEIGHT 0x806C
        public const int GL_PACK_IMAGE_HEIGHT = 0x806C;
        #endregion GL_PACK_IMAGE_HEIGHT

        #region GL_UNPACK_SKIP_IMAGES
        /// <summary>
        /// 
        /// </summary>
        // #define GL_UNPACK_SKIP_IMAGES 0x806D
        public const int GL_UNPACK_SKIP_IMAGES = 0x806D;
        #endregion GL_UNPACK_SKIP_IMAGES

        #region GL_UNPACK_IMAGE_HEIGHT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_UNPACK_IMAGE_HEIGHT 0x806E
        public const int GL_UNPACK_IMAGE_HEIGHT = 0x806E;
        #endregion GL_UNPACK_IMAGE_HEIGHT

        #region GL_TEXTURE_3D
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_3D 0x806F
        public const int GL_TEXTURE_3D = 0x806F;
        #endregion GL_TEXTURE_3D

        #region GL_PROXY_TEXTURE_3D
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PROXY_TEXTURE_3D 0x8070
        public const int GL_PROXY_TEXTURE_3D = 0x8070;
        #endregion GL_PROXY_TEXTURE_3D

        #region GL_TEXTURE_DEPTH
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_DEPTH 0x8071
        public const int GL_TEXTURE_DEPTH = 0x8071;
        #endregion GL_TEXTURE_DEPTH

        #region GL_TEXTURE_WRAP_R
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_WRAP_R 0x8072
        public const int GL_TEXTURE_WRAP_R = 0x8072;
        #endregion GL_TEXTURE_WRAP_R

        #region GL_MAX_3D_TEXTURE_SIZE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAX_3D_TEXTURE_SIZE 0x8073
        public const int GL_MAX_3D_TEXTURE_SIZE = 0x8073;
        #endregion GL_MAX_3D_TEXTURE_SIZE

        #region GL_BGR
        /// <summary>
        /// 
        /// </summary>
        // #define GL_BGR 0x80E0
        public const int GL_BGR = 0x80E0;
        #endregion GL_BGR

        #region GL_BGRA
        /// <summary>
        /// 
        /// </summary>
        // #define GL_BGRA 0x80E1
        public const int GL_BGRA = 0x80E1;
        #endregion GL_BGRA

        #region GL_UNSIGNED_BYTE_3_3_2
        /// <summary>
        /// 
        /// </summary>
        // #define GL_UNSIGNED_BYTE_3_3_2 0x8032
        public const int GL_UNSIGNED_BYTE_3_3_2 = 0x8032;
        #endregion GL_UNSIGNED_BYTE_3_3_2

        #region GL_UNSIGNED_BYTE_2_3_3_REV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_UNSIGNED_BYTE_2_3_3_REV 0x8362
        public const int GL_UNSIGNED_BYTE_2_3_3_REV = 0x8362;
        #endregion GL_UNSIGNED_BYTE_2_3_3_REV

        #region GL_UNSIGNED_SHORT_5_6_5
        /// <summary>
        /// 
        /// </summary>
        // #define GL_UNSIGNED_SHORT_5_6_5 0x8363
        public const int GL_UNSIGNED_SHORT_5_6_5 = 0x8363;
        #endregion GL_UNSIGNED_SHORT_5_6_5

        #region GL_UNSIGNED_SHORT_5_6_5_REV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_UNSIGNED_SHORT_5_6_5_REV 0x8364
        public const int GL_UNSIGNED_SHORT_5_6_5_REV = 0x8364;
        #endregion GL_UNSIGNED_SHORT_5_6_5_REV

        #region GL_UNSIGNED_SHORT_4_4_4_4
        /// <summary>
        /// 
        /// </summary>
        // #define GL_UNSIGNED_SHORT_4_4_4_4 0x8033
        public const int GL_UNSIGNED_SHORT_4_4_4_4 = 0x8033;
        #endregion GL_UNSIGNED_SHORT_4_4_4_4

        #region GL_UNSIGNED_SHORT_4_4_4_4_REV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_UNSIGNED_SHORT_4_4_4_4_REV 0x8365
        public const int GL_UNSIGNED_SHORT_4_4_4_4_REV = 0x8365;
        #endregion GL_UNSIGNED_SHORT_4_4_4_4_REV

        #region GL_UNSIGNED_SHORT_5_5_5_1
        /// <summary>
        /// 
        /// </summary>
        // #define GL_UNSIGNED_SHORT_5_5_5_1 0x8034
        public const int GL_UNSIGNED_SHORT_5_5_5_1 = 0x8034;
        #endregion GL_UNSIGNED_SHORT_5_5_5_1

        #region GL_UNSIGNED_SHORT_1_5_5_5_REV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_UNSIGNED_SHORT_1_5_5_5_REV 0x8366
        public const int GL_UNSIGNED_SHORT_1_5_5_5_REV = 0x8366;
        #endregion GL_UNSIGNED_SHORT_1_5_5_5_REV

        #region GL_UNSIGNED_INT_8_8_8_8
        /// <summary>
        /// 
        /// </summary>
        // #define GL_UNSIGNED_INT_8_8_8_8 0x8035
        public const int GL_UNSIGNED_INT_8_8_8_8 = 0x8035;
        #endregion GL_UNSIGNED_INT_8_8_8_8

        #region GL_UNSIGNED_INT_8_8_8_8_REV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_UNSIGNED_INT_8_8_8_8_REV 0x8367
        public const int GL_UNSIGNED_INT_8_8_8_8_REV = 0x8367;
        #endregion GL_UNSIGNED_INT_8_8_8_8_REV

        #region GL_UNSIGNED_INT_10_10_10_2
        /// <summary>
        /// 
        /// </summary>
        // #define GL_UNSIGNED_INT_10_10_10_2 0x8036
        public const int GL_UNSIGNED_INT_10_10_10_2 = 0x8036;
        #endregion GL_UNSIGNED_INT_10_10_10_2

        #region GL_UNSIGNED_INT_2_10_10_10_REV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_UNSIGNED_INT_2_10_10_10_REV 0x8368
        public const int GL_UNSIGNED_INT_2_10_10_10_REV = 0x8368;
        #endregion GL_UNSIGNED_INT_2_10_10_10_REV

        #region GL_RESCALE_NORMAL
        /// <summary>
        /// 
        /// </summary>
        // #define GL_RESCALE_NORMAL 0x803A
        public const int GL_RESCALE_NORMAL = 0x803A;
        #endregion GL_RESCALE_NORMAL

        #region GL_LIGHT_MODEL_COLOR_CONTROL
        /// <summary>
        /// 
        /// </summary>
        // #define GL_LIGHT_MODEL_COLOR_CONTROL 0x81F8
        public const int GL_LIGHT_MODEL_COLOR_CONTROL = 0x81F8;
        #endregion GL_LIGHT_MODEL_COLOR_CONTROL

        #region GL_SINGLE_COLOR
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SINGLE_COLOR 0x81F9
        public const int GL_SINGLE_COLOR = 0x81F9;
        #endregion GL_SINGLE_COLOR

        #region GL_SEPARATE_SPECULAR_COLOR
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SEPARATE_SPECULAR_COLOR 0x81FA
        public const int GL_SEPARATE_SPECULAR_COLOR = 0x81FA;
        #endregion GL_SEPARATE_SPECULAR_COLOR

        #region GL_CLAMP_TO_EDGE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_CLAMP_TO_EDGE 0x812F
        public const int GL_CLAMP_TO_EDGE = 0x812F;
        #endregion GL_CLAMP_TO_EDGE

        #region GL_TEXTURE_MIN_LOD
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_MIN_LOD 0x813A
        public const int GL_TEXTURE_MIN_LOD = 0x813A;
        #endregion GL_TEXTURE_MIN_LOD

        #region GL_TEXTURE_MAX_LOD
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_MAX_LOD 0x813B
        public const int GL_TEXTURE_MAX_LOD = 0x813B;
        #endregion GL_TEXTURE_MAX_LOD

        #region GL_TEXTURE_BASE_LEVEL
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_BASE_LEVEL 0x813C
        public const int GL_TEXTURE_BASE_LEVEL = 0x813C;
        #endregion GL_TEXTURE_BASE_LEVEL

        #region GL_TEXTURE_MAX_LEVEL
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_MAX_LEVEL 0x813D
        public const int GL_TEXTURE_MAX_LEVEL = 0x813D;
        #endregion GL_TEXTURE_MAX_LEVEL

        #region GL_MAX_ELEMENTS_VERTICES
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAX_ELEMENTS_VERTICES 0x80E8
        public const int GL_MAX_ELEMENTS_VERTICES = 0x80E8;
        #endregion GL_MAX_ELEMENTS_VERTICES

        #region GL_MAX_ELEMENTS_INDICES
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAX_ELEMENTS_INDICES 0x80E9
        public const int GL_MAX_ELEMENTS_INDICES = 0x80E9;
        #endregion GL_MAX_ELEMENTS_INDICES

        #region GL_ALIASED_POINT_SIZE_RANGE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_ALIASED_POINT_SIZE_RANGE 0x846D
        public const int GL_ALIASED_POINT_SIZE_RANGE = 0x846D;
        #endregion GL_ALIASED_POINT_SIZE_RANGE

        #region GL_ALIASED_LINE_WIDTH_RANGE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_ALIASED_LINE_WIDTH_RANGE 0x846E
        public const int GL_ALIASED_LINE_WIDTH_RANGE = 0x846E;
        #endregion GL_ALIASED_LINE_WIDTH_RANGE

        #region GL_SMOOTH_POINT_SIZE_RANGE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SMOOTH_POINT_SIZE_RANGE 0x0B12
        public const int GL_SMOOTH_POINT_SIZE_RANGE = 0x0B12;
        #endregion GL_SMOOTH_POINT_SIZE_RANGE

        #region GL_SMOOTH_POINT_SIZE_GRANULARITY
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SMOOTH_POINT_SIZE_GRANULARITY 0x0B13
        public const int GL_SMOOTH_POINT_SIZE_GRANULARITY = 0x0B13;
        #endregion GL_SMOOTH_POINT_SIZE_GRANULARITY

        #region GL_SMOOTH_LINE_WIDTH_RANGE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SMOOTH_LINE_WIDTH_RANGE 0x0B22
        public const int GL_SMOOTH_LINE_WIDTH_RANGE = 0x0B22;
        #endregion GL_SMOOTH_LINE_WIDTH_RANGE

        #region GL_SMOOTH_LINE_WIDTH_GRANULARITY
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SMOOTH_LINE_WIDTH_GRANULARITY 0x0B23
        public const int GL_SMOOTH_LINE_WIDTH_GRANULARITY = 0x0B23;
        #endregion GL_SMOOTH_LINE_WIDTH_GRANULARITY

        #region GL_TEXTURE_BINDING_3D
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_BINDING_3D 0x806A
        public const int GL_TEXTURE_BINDING_3D = 0x806A;
        #endregion GL_TEXTURE_BINDING_3D
        #endregion Public OpenGL 1.2 Constants

        #region Public OpenGL 1.2 ??? Constants
        #region GL_COLOR_TABLE
        /// <summary>
        /// 
        /// </summary>
        public const int GL_COLOR_TABLE = 0x80D0;
        #endregion GL_COLOR_TABLE

        #region GL_POST_CONVOLUTION_COLOR_TABLE
        /// <summary>
        /// 
        /// </summary>
        public const int GL_POST_CONVOLUTION_COLOR_TABLE = 0x80D1;
        #endregion GL_POST_CONVOLUTION_COLOR_TABLE

        #region GL_POST_COLOR_MATRIX_COLOR_TABLE
        /// <summary>
        /// 
        /// </summary>
        public const int GL_POST_COLOR_MATRIX_COLOR_TABLE = 0x80D2;
        #endregion GL_POST_COLOR_MATRIX_COLOR_TABLE

        #region GL_PROXY_COLOR_TABLE
        /// <summary>
        /// 
        /// </summary>
        public const int GL_PROXY_COLOR_TABLE = 0x80D3;
        #endregion GL_PROXY_COLOR_TABLE

        #region GL_PROXY_POST_CONVOLUTION_COLOR_TABLE
        /// <summary>
        /// 
        /// </summary>
        public const int GL_PROXY_POST_CONVOLUTION_COLOR_TABLE = 0x80D4;
        #endregion GL_PROXY_POST_CONVOLUTION_COLOR_TABLE

        #region GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE
        /// <summary>
        /// 
        /// </summary>
        public const int GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE = 0x80D5;
        #endregion GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE

        #region GL_COLOR_TABLE_SCALE
        /// <summary>
        /// 
        /// </summary>
        public const int GL_COLOR_TABLE_SCALE = 0x80D6;
        #endregion GL_COLOR_TABLE_SCALE

        #region GL_COLOR_TABLE_BIAS
        /// <summary>
        /// 
        /// </summary>
        public const int GL_COLOR_TABLE_BIAS = 0x80D7;
        #endregion GL_COLOR_TABLE_BIAS

        #region GL_COLOR_TABLE_FORMAT
        /// <summary>
        /// 
        /// </summary>
        public const int GL_COLOR_TABLE_FORMAT = 0x80D8;
        #endregion GL_COLOR_TABLE_FORMAT

        #region GL_COLOR_TABLE_WIDTH
        /// <summary>
        /// 
        /// </summary>
        public const int GL_COLOR_TABLE_WIDTH = 0x80D9;
        #endregion GL_COLOR_TABLE_WIDTH

        #region GL_COLOR_TABLE_RED_SIZE
        /// <summary>
        /// 
        /// </summary>
        public const int GL_COLOR_TABLE_RED_SIZE = 0x80DA;
        #endregion GL_COLOR_TABLE_RED_SIZE

        #region GL_COLOR_TABLE_GREEN_SIZE
        /// <summary>
        /// 
        /// </summary>
        public const int GL_COLOR_TABLE_GREEN_SIZE = 0x80DB;
        #endregion GL_COLOR_TABLE_GREEN_SIZE

        #region GL_COLOR_TABLE_BLUE_SIZE
        /// <summary>
        /// 
        /// </summary>
        public const int GL_COLOR_TABLE_BLUE_SIZE = 0x80DC;
        #endregion GL_COLOR_TABLE_BLUE_SIZE

        #region GL_COLOR_TABLE_ALPHA_SIZE
        /// <summary>
        /// 
        /// </summary>
        public const int GL_COLOR_TABLE_ALPHA_SIZE = 0x80DD;
        #endregion GL_COLOR_TABLE_ALPHA_SIZE

        #region GL_COLOR_TABLE_LUMINANCE_SIZE
        /// <summary>
        /// 
        /// </summary>
        public const int GL_COLOR_TABLE_LUMINANCE_SIZE = 0x80DE;
        #endregion GL_COLOR_TABLE_LUMINANCE_SIZE

        #region GL_COLOR_TABLE_INTENSITY_SIZE
        /// <summary>
        /// 
        /// </summary>
        public const int GL_COLOR_TABLE_INTENSITY_SIZE = 0x80DF;
        #endregion GL_COLOR_TABLE_INTENSITY_SIZE

        #region GL_CONVOLUTION_1D
        /// <summary>
        /// 
        /// </summary>
        public const int GL_CONVOLUTION_1D = 0x8010;
        #endregion GL_CONVOLUTION_1D

        #region GL_CONVOLUTION_2D
        /// <summary>
        /// 
        /// </summary>
        public const int GL_CONVOLUTION_2D = 0x8011;
        #endregion GL_CONVOLUTION_2D

        #region GL_SEPARABLE_2D
        /// <summary>
        /// 
        /// </summary>
        public const int GL_SEPARABLE_2D = 0x8012;
        #endregion GL_SEPARABLE_2D

        #region GL_CONVOLUTION_BORDER_MODE
        /// <summary>
        /// 
        /// </summary>
        public const int GL_CONVOLUTION_BORDER_MODE = 0x8013;
        #endregion GL_CONVOLUTION_BORDER_MODE

        #region GL_CONVOLUTION_FILTER_SCALE
        /// <summary>
        /// 
        /// </summary>
        public const int GL_CONVOLUTION_FILTER_SCALE = 0x8014;
        #endregion GL_CONVOLUTION_FILTER_SCALE

        #region GL_CONVOLUTION_FILTER_BIAS
        /// <summary>
        /// 
        /// </summary>
        public const int GL_CONVOLUTION_FILTER_BIAS = 0x8015;
        #endregion GL_CONVOLUTION_FILTER_BIAS

        #region GL_REDUCE
        /// <summary>
        /// 
        /// </summary>
        public const int GL_REDUCE = 0x8016;
        #endregion GL_REDUCE

        #region GL_CONVOLUTION_FORMAT
        /// <summary>
        /// 
        /// </summary>
        public const int GL_CONVOLUTION_FORMAT = 0x8017;
        #endregion GL_CONVOLUTION_FORMAT

        #region GL_CONVOLUTION_WIDTH
        /// <summary>
        /// 
        /// </summary>
        public const int GL_CONVOLUTION_WIDTH = 0x8018;
        #endregion GL_CONVOLUTION_WIDTH

        #region GL_CONVOLUTION_HEIGHT
        /// <summary>
        /// 
        /// </summary>
        public const int GL_CONVOLUTION_HEIGHT = 0x8019;
        #endregion GL_CONVOLUTION_HEIGHT

        #region GL_MAX_CONVOLUTION_WIDTH
        /// <summary>
        /// 
        /// </summary>
        public const int GL_MAX_CONVOLUTION_WIDTH = 0x801A;
        #endregion GL_MAX_CONVOLUTION_WIDTH

        #region GL_MAX_CONVOLUTION_HEIGHT
        /// <summary>
        /// 
        /// </summary>
        public const int GL_MAX_CONVOLUTION_HEIGHT = 0x801B;
        #endregion GL_MAX_CONVOLUTION_HEIGHT

        #region GL_POST_CONVOLUTION_RED_SCALE
        /// <summary>
        /// 
        /// </summary>
        public const int GL_POST_CONVOLUTION_RED_SCALE = 0x801C;
        #endregion GL_POST_CONVOLUTION_RED_SCALE

        #region GL_POST_CONVOLUTION_GREEN_SCALE
        /// <summary>
        /// 
        /// </summary>
        public const int GL_POST_CONVOLUTION_GREEN_SCALE = 0x801D;
        #endregion GL_POST_CONVOLUTION_GREEN_SCALE

        #region GL_POST_CONVOLUTION_BLUE_SCALE
        /// <summary>
        /// 
        /// </summary>
        public const int GL_POST_CONVOLUTION_BLUE_SCALE = 0x801E;
        #endregion GL_POST_CONVOLUTION_BLUE_SCALE

        #region GL_POST_CONVOLUTION_ALPHA_SCALE
        /// <summary>
        /// 
        /// </summary>
        public const int GL_POST_CONVOLUTION_ALPHA_SCALE = 0x801F;
        #endregion GL_POST_CONVOLUTION_ALPHA_SCALE

        #region GL_POST_CONVOLUTION_RED_BIAS
        /// <summary>
        /// 
        /// </summary>
        public const int GL_POST_CONVOLUTION_RED_BIAS = 0x8020;
        #endregion GL_POST_CONVOLUTION_RED_BIAS

        #region GL_POST_CONVOLUTION_GREEN_BIAS
        /// <summary>
        /// 
        /// </summary>
        public const int GL_POST_CONVOLUTION_GREEN_BIAS = 0x8021;
        #endregion GL_POST_CONVOLUTION_GREEN_BIAS

        #region GL_POST_CONVOLUTION_BLUE_BIAS
        /// <summary>
        /// 
        /// </summary>
        public const int GL_POST_CONVOLUTION_BLUE_BIAS = 0x8022;
        #endregion GL_POST_CONVOLUTION_BLUE_BIAS

        #region GL_POST_CONVOLUTION_ALPHA_BIAS
        /// <summary>
        /// 
        /// </summary>
        public const int GL_POST_CONVOLUTION_ALPHA_BIAS = 0x8023;
        #endregion GL_POST_CONVOLUTION_ALPHA_BIAS

        #region GL_CONSTANT_BORDER
        /// <summary>
        /// 
        /// </summary>
        public const int GL_CONSTANT_BORDER = 0x8151;
        #endregion GL_CONSTANT_BORDER

        #region GL_REPLICATE_BORDER
        /// <summary>
        /// 
        /// </summary>
        public const int GL_REPLICATE_BORDER = 0x8153;
        #endregion GL_REPLICATE_BORDER

        #region GL_CONVOLUTION_BORDER_COLOR
        /// <summary>
        /// 
        /// </summary>
        public const int GL_CONVOLUTION_BORDER_COLOR = 0x8154;
        #endregion GL_CONVOLUTION_BORDER_COLOR

        #region GL_COLOR_MATRIX
        /// <summary>
        /// 
        /// </summary>
        public const int GL_COLOR_MATRIX = 0x80B1;
        #endregion GL_COLOR_MATRIX

        #region GL_COLOR_MATRIX_STACK_DEPTH
        /// <summary>
        /// 
        /// </summary>
        public const int GL_COLOR_MATRIX_STACK_DEPTH = 0x80B2;
        #endregion GL_COLOR_MATRIX_STACK_DEPTH

        #region GL_MAX_COLOR_MATRIX_STACK_DEPTH
        /// <summary>
        /// 
        /// </summary>
        public const int GL_MAX_COLOR_MATRIX_STACK_DEPTH = 0x80B3;
        #endregion GL_MAX_COLOR_MATRIX_STACK_DEPTH

        #region GL_POST_COLOR_MATRIX_RED_SCALE
        /// <summary>
        /// 
        /// </summary>
        public const int GL_POST_COLOR_MATRIX_RED_SCALE = 0x80B4;
        #endregion GL_POST_COLOR_MATRIX_RED_SCALE

        #region GL_POST_COLOR_MATRIX_GREEN_SCALE
        /// <summary>
        /// 
        /// </summary>
        public const int GL_POST_COLOR_MATRIX_GREEN_SCALE = 0x80B5;
        #endregion GL_POST_COLOR_MATRIX_GREEN_SCALE

        #region GL_POST_COLOR_MATRIX_BLUE_SCALE
        /// <summary>
        /// 
        /// </summary>
        public const int GL_POST_COLOR_MATRIX_BLUE_SCALE = 0x80B6;
        #endregion GL_POST_COLOR_MATRIX_BLUE_SCALE

        #region GL_POST_COLOR_MATRIX_ALPHA_SCALE
        /// <summary>
        /// 
        /// </summary>
        public const int GL_POST_COLOR_MATRIX_ALPHA_SCALE = 0x80B7;
        #endregion GL_POST_COLOR_MATRIX_ALPHA_SCALE

        #region GL_POST_COLOR_MATRIX_RED_BIAS
        /// <summary>
        /// 
        /// </summary>
        public const int GL_POST_COLOR_MATRIX_RED_BIAS = 0x80B8;
        #endregion GL_POST_COLOR_MATRIX_RED_BIAS

        #region GL_POST_COLOR_MATRIX_GREEN_BIAS
        /// <summary>
        /// 
        /// </summary>
        public const int GL_POST_COLOR_MATRIX_GREEN_BIAS = 0x80B9;
        #endregion GL_POST_COLOR_MATRIX_GREEN_BIAS

        #region GL_POST_COLOR_MATRIX_BLUE_BIAS
        /// <summary>
        /// 
        /// </summary>
        public const int GL_POST_COLOR_MATRIX_BLUE_BIAS = 0x80BA;
        #endregion GL_POST_COLOR_MATRIX_BLUE_BIAS

        #region GL_POST_COLOR_MATRIX_ALPHA_BIAS
        /// <summary>
        /// 
        /// </summary>
        public const int GL_POST_COLOR_MATRIX_ALPHA_BIAS = 0x80BB;
        #endregion GL_POST_COLOR_MATRIX_ALPHA_BIAS

        #region GL_HISTOGRAM
        /// <summary>
        /// 
        /// </summary>
        public const int GL_HISTOGRAM = 0x8024;
        #endregion GL_HISTOGRAM

        #region GL_PROXY_HISTOGRAM
        /// <summary>
        /// 
        /// </summary>
        public const int GL_PROXY_HISTOGRAM = 0x8025;
        #endregion GL_PROXY_HISTOGRAM

        #region GL_HISTOGRAM_WIDTH
        /// <summary>
        /// 
        /// </summary>
        public const int GL_HISTOGRAM_WIDTH = 0x8026;
        #endregion GL_HISTOGRAM_WIDTH

        #region GL_HISTOGRAM_FORMAT
        /// <summary>
        /// 
        /// </summary>
        public const int GL_HISTOGRAM_FORMAT = 0x8027;
        #endregion GL_HISTOGRAM_FORMAT

        #region GL_HISTOGRAM_RED_SIZE
        /// <summary>
        /// 
        /// </summary>
        public const int GL_HISTOGRAM_RED_SIZE = 0x8028;
        #endregion GL_HISTOGRAM_RED_SIZE

        #region GL_HISTOGRAM_GREEN_SIZE
        /// <summary>
        /// 
        /// </summary>
        public const int GL_HISTOGRAM_GREEN_SIZE = 0x8029;
        #endregion GL_HISTOGRAM_GREEN_SIZE

        #region GL_HISTOGRAM_BLUE_SIZE
        /// <summary>
        /// 
        /// </summary>
        public const int GL_HISTOGRAM_BLUE_SIZE = 0x802A;
        #endregion GL_HISTOGRAM_BLUE_SIZE

        #region GL_HISTOGRAM_ALPHA_SIZE
        /// <summary>
        /// 
        /// </summary>
        public const int GL_HISTOGRAM_ALPHA_SIZE = 0x802B;
        #endregion GL_HISTOGRAM_ALPHA_SIZE

        #region GL_HISTOGRAM_LUMINANCE_SIZE
        /// <summary>
        /// 
        /// </summary>
        public const int GL_HISTOGRAM_LUMINANCE_SIZE = 0x802C;
        #endregion GL_HISTOGRAM_LUMINANCE_SIZE

        #region GL_HISTOGRAM_SINK
        /// <summary>
        /// 
        /// </summary>
        public const int GL_HISTOGRAM_SINK = 0x802D;
        #endregion GL_HISTOGRAM_SINK

        #region GL_MINMAX
        /// <summary>
        /// 
        /// </summary>
        public const int GL_MINMAX = 0x802E;
        #endregion GL_MINMAX

        #region GL_MINMAX_FORMAT
        /// <summary>
        /// 
        /// </summary>
        public const int GL_MINMAX_FORMAT = 0x802F;
        #endregion GL_MINMAX_FORMAT

        #region GL_MINMAX_SINK
        /// <summary>
        /// 
        /// </summary>
        public const int GL_MINMAX_SINK = 0x8030;
        #endregion GL_MINMAX_SINK

        #region GL_BLEND_EQUATION
        /// <summary>
        /// 
        /// </summary>
        public const int GL_BLEND_EQUATION = 0x8009;
        #endregion GL_BLEND_EQUATION

        #region GL_MIN
        /// <summary>
        /// 
        /// </summary>
        public const int GL_MIN = 0x8007;
        #endregion GL_MIN

        #region GL_MAX
        /// <summary>
        /// 
        /// </summary>
        public const int GL_MAX = 0x8008;
        #endregion GL_MAX

        #region GL_FUNC_ADD
        /// <summary>
        /// 
        /// </summary>
        public const int GL_FUNC_ADD = 0x8006;
        #endregion GL_FUNC_ADD

        #region GL_FUNC_SUBTRACT
        /// <summary>
        /// 
        /// </summary>
        public const int GL_FUNC_SUBTRACT = 0x800A;
        #endregion GL_FUNC_SUBTRACT

        #region GL_FUNC_REVERSE_SUBTRACT
        /// <summary>
        /// 
        /// </summary>
        public const int GL_FUNC_REVERSE_SUBTRACT = 0x800B;
        #endregion GL_FUNC_REVERSE_SUBTRACT

        #region GL_BLEND_COLOR
        /// <summary>
        /// 
        /// </summary>
        public const int GL_BLEND_COLOR = 0x8005;
        #endregion GL_BLEND_COLOR

        #region GL_CONSTANT_COLOR
        /// <summary>
        /// 
        /// </summary>
        public const int GL_CONSTANT_COLOR = 0x8001;
        #endregion GL_CONSTANT_COLOR

        #region GL_ONE_MINUS_CONSTANT_COLOR
        /// <summary>
        /// 
        /// </summary>
        public const int GL_ONE_MINUS_CONSTANT_COLOR = 0x8002;
        #endregion GL_ONE_MINUS_CONSTANT_COLOR

        #region GL_CONSTANT_ALPHA
        /// <summary>
        /// 
        /// </summary>
        public const int GL_CONSTANT_ALPHA = 0x8003;
        #endregion GL_CONSTANT_ALPHA

        #region GL_ONE_MINUS_CONSTANT_ALPHA
        /// <summary>
        /// 
        /// </summary>
        public const int GL_ONE_MINUS_CONSTANT_ALPHA = 0x8004;
        #endregion GL_ONE_MINUS_CONSTANT_ALPHA
        #endregion Public OpenGL 1.2 ??? Constants

        #region Public OpenGL 1.3 Constants
        #region GL_VERSION_1_3
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VERSION_1_3 1
        public const bool GL_VERSION_1_3 = true;
        #endregion GL_VERSION_1_3

        #region GL_ACTIVE_TEXTURE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_ACTIVE_TEXTURE 0x84E0
        public const int GL_ACTIVE_TEXTURE = 0x84E0;
        #endregion GL_ACTIVE_TEXTURE

        #region GL_CLIENT_ACTIVE_TEXTURE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_CLIENT_ACTIVE_TEXTURE 0x84E1
        public const int GL_CLIENT_ACTIVE_TEXTURE = 0x84E1;
        #endregion GL_CLIENT_ACTIVE_TEXTURE

        #region GL_MAX_TEXTURE_UNITS
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAX_TEXTURE_UNITS 0x84E2
        public const int GL_MAX_TEXTURE_UNITS = 0x84E2;
        #endregion GL_MAX_TEXTURE_UNITS

        #region GL_TEXTURE0
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE0 0x84C0
        public const int GL_TEXTURE0 = 0x84C0;
        #endregion GL_TEXTURE0

        #region GL_TEXTURE1
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE1 0x84C1
        public const int GL_TEXTURE1 = 0x84C1;
        #endregion GL_TEXTURE1

        #region GL_TEXTURE2
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE2 0x84C2
        public const int GL_TEXTURE2 = 0x84C2;
        #endregion GL_TEXTURE2

        #region GL_TEXTURE3
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE3 0x84C3
        public const int GL_TEXTURE3 = 0x84C3;
        #endregion GL_TEXTURE3

        #region GL_TEXTURE4
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE4 0x84C4
        public const int GL_TEXTURE4 = 0x84C4;
        #endregion GL_TEXTURE4

        #region GL_TEXTURE5
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE5 0x84C5
        public const int GL_TEXTURE5 = 0x84C5;
        #endregion GL_TEXTURE5

        #region GL_TEXTURE6
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE6 0x84C6
        public const int GL_TEXTURE6 = 0x84C6;
        #endregion GL_TEXTURE6

        #region GL_TEXTURE7
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE7 0x84C7
        public const int GL_TEXTURE7 = 0x84C7;
        #endregion GL_TEXTURE7

        #region GL_TEXTURE8
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE8 0x84C8
        public const int GL_TEXTURE8 = 0x84C8;
        #endregion GL_TEXTURE8

        #region GL_TEXTURE9
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE9 0x84C9
        public const int GL_TEXTURE9 = 0x84C9;
        #endregion GL_TEXTURE9

        #region GL_TEXTURE10
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE10 0x84CA
        public const int GL_TEXTURE10 = 0x84CA;
        #endregion GL_TEXTURE10

        #region GL_TEXTURE11
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE11 0x84CB
        public const int GL_TEXTURE11 = 0x84CB;
        #endregion GL_TEXTURE11

        #region GL_TEXTURE12
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE12 0x84CC
        public const int GL_TEXTURE12 = 0x84CC;
        #endregion GL_TEXTURE12

        #region GL_TEXTURE13
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE13 0x84CD
        public const int GL_TEXTURE13 = 0x84CD;
        #endregion GL_TEXTURE13

        #region GL_TEXTURE14
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE14 0x84CE
        public const int GL_TEXTURE14 = 0x84CE;
        #endregion GL_TEXTURE14

        #region GL_TEXTURE15
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE15 0x84CF
        public const int GL_TEXTURE15 = 0x84CF;
        #endregion GL_TEXTURE15

        #region GL_TEXTURE16
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE16 0x84D0
        public const int GL_TEXTURE16 = 0x84D0;
        #endregion GL_TEXTURE16

        #region GL_TEXTURE17
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE17 0x84D1
        public const int GL_TEXTURE17 = 0x84D1;
        #endregion GL_TEXTURE17

        #region GL_TEXTURE18
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE18 0x84D2
        public const int GL_TEXTURE18 = 0x84D2;
        #endregion GL_TEXTURE18

        #region GL_TEXTURE19
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE19 0x84D3
        public const int GL_TEXTURE19 = 0x84D3;
        #endregion GL_TEXTURE19

        #region GL_TEXTURE20
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE20 0x84D4
        public const int GL_TEXTURE20 = 0x84D4;
        #endregion GL_TEXTURE20

        #region GL_TEXTURE21
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE21 0x84D5
        public const int GL_TEXTURE21 = 0x84D5;
        #endregion GL_TEXTURE21

        #region GL_TEXTURE22
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE22 0x84D6
        public const int GL_TEXTURE22 = 0x84D6;
        #endregion GL_TEXTURE22

        #region GL_TEXTURE23
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE23 0x84D7
        public const int GL_TEXTURE23 = 0x84D7;
        #endregion GL_TEXTURE23

        #region GL_TEXTURE24
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE24 0x84D8
        public const int GL_TEXTURE24 = 0x84D8;
        #endregion GL_TEXTURE24

        #region GL_TEXTURE25
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE25 0x84D9
        public const int GL_TEXTURE25 = 0x84D9;
        #endregion GL_TEXTURE25

        #region GL_TEXTURE26
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE26 0x84DA
        public const int GL_TEXTURE26 = 0x84DA;
        #endregion GL_TEXTURE26

        #region GL_TEXTURE27
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE27 0x84DB
        public const int GL_TEXTURE27 = 0x84DB;
        #endregion GL_TEXTURE27

        #region GL_TEXTURE28
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE28 0x84DC
        public const int GL_TEXTURE28 = 0x84DC;
        #endregion GL_TEXTURE28

        #region GL_TEXTURE29
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE29 0x84DD
        public const int GL_TEXTURE29 = 0x84DD;
        #endregion GL_TEXTURE29

        #region GL_TEXTURE30
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE30 0x84DE
        public const int GL_TEXTURE30 = 0x84DE;
        #endregion GL_TEXTURE30

        #region GL_TEXTURE31
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE31 0x84DF
        public const int GL_TEXTURE31 = 0x84DF;
        #endregion GL_TEXTURE31

        #region GL_NORMAL_MAP
        /// <summary>
        /// 
        /// </summary>
        // #define GL_NORMAL_MAP 0x8511
        public const int GL_NORMAL_MAP = 0x8511;
        #endregion GL_NORMAL_MAP

        #region GL_REFLECTION_MAP
        /// <summary>
        /// 
        /// </summary>
        // #define GL_REFLECTION_MAP 0x8512
        public const int GL_REFLECTION_MAP = 0x8512;
        #endregion GL_REFLECTION_MAP

        #region GL_TEXTURE_CUBE_MAP
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_CUBE_MAP 0x8513
        public const int GL_TEXTURE_CUBE_MAP = 0x8513;
        #endregion GL_TEXTURE_CUBE_MAP

        #region GL_TEXTURE_BINDING_CUBE_MAP
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_BINDING_CUBE_MAP 0x8514
        public const int GL_TEXTURE_BINDING_CUBE_MAP = 0x8514;
        #endregion GL_TEXTURE_BINDING_CUBE_MAP

        #region GL_TEXTURE_CUBE_MAP_POSITIVE_X
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_CUBE_MAP_POSITIVE_X 0x8515
        public const int GL_TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515;
        #endregion GL_TEXTURE_CUBE_MAP_POSITIVE_X

        #region GL_TEXTURE_CUBE_MAP_NEGATIVE_X
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_CUBE_MAP_NEGATIVE_X 0x8516
        public const int GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516;
        #endregion GL_TEXTURE_CUBE_MAP_NEGATIVE_X

        #region GL_TEXTURE_CUBE_MAP_POSITIVE_Y
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_CUBE_MAP_POSITIVE_Y 0x8517
        public const int GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517;
        #endregion GL_TEXTURE_CUBE_MAP_POSITIVE_Y

        #region GL_TEXTURE_CUBE_MAP_NEGATIVE_Y
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y 0x8518
        public const int GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518;
        #endregion GL_TEXTURE_CUBE_MAP_NEGATIVE_Y

        #region GL_TEXTURE_CUBE_MAP_POSITIVE_Z
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_CUBE_MAP_POSITIVE_Z 0x8519
        public const int GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519;
        #endregion GL_TEXTURE_CUBE_MAP_POSITIVE_Z

        #region GL_TEXTURE_CUBE_MAP_NEGATIVE_Z
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z 0x851A
        public const int GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851A;
        #endregion GL_TEXTURE_CUBE_MAP_NEGATIVE_Z

        #region GL_PROXY_TEXTURE_CUBE_MAP
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PROXY_TEXTURE_CUBE_MAP 0x851B
        public const int GL_PROXY_TEXTURE_CUBE_MAP = 0x851B;
        #endregion GL_PROXY_TEXTURE_CUBE_MAP

        #region GL_MAX_CUBE_MAP_TEXTURE_SIZE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAX_CUBE_MAP_TEXTURE_SIZE 0x851C
        public const int GL_MAX_CUBE_MAP_TEXTURE_SIZE = 0x851C;
        #endregion GL_MAX_CUBE_MAP_TEXTURE_SIZE

        #region GL_COMBINE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COMBINE 0x8570
        public const int GL_COMBINE = 0x8570;
        #endregion GL_COMBINE

        #region GL_COMBINE_RGB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COMBINE_RGB 0x8571
        public const int GL_COMBINE_RGB = 0x8571;
        #endregion GL_COMBINE_RGB

        #region GL_COMBINE_ALPHA
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COMBINE_ALPHA 0x8572
        public const int GL_COMBINE_ALPHA = 0x8572;
        #endregion GL_COMBINE_ALPHA

        #region GL_RGB_SCALE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_RGB_SCALE 0x8573
        public const int GL_RGB_SCALE = 0x8573;
        #endregion GL_RGB_SCALE

        #region GL_ADD_SIGNED
        /// <summary>
        /// 
        /// </summary>
        // #define GL_ADD_SIGNED 0x8574
        public const int GL_ADD_SIGNED = 0x8574;
        #endregion GL_ADD_SIGNED

        #region GL_INTERPOLATE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_INTERPOLATE 0x8575
        public const int GL_INTERPOLATE = 0x8575;
        #endregion GL_INTERPOLATE

        #region GL_CONSTANT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_CONSTANT 0x8576
        public const int GL_CONSTANT = 0x8576;
        #endregion GL_CONSTANT

        #region GL_PRIMARY_COLOR
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PRIMARY_COLOR 0x8577
        public const int GL_PRIMARY_COLOR = 0x8577;
        #endregion GL_PRIMARY_COLOR

        #region GL_PREVIOUS
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PREVIOUS 0x8578
        public const int GL_PREVIOUS = 0x8578;
        #endregion GL_PREVIOUS

        #region GL_SOURCE0_RGB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SOURCE0_RGB 0x8580
        public const int GL_SOURCE0_RGB = 0x8580;
        #endregion GL_SOURCE0_RGB

        #region GL_SOURCE1_RGB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SOURCE1_RGB 0x8581
        public const int GL_SOURCE1_RGB = 0x8581;
        #endregion GL_SOURCE1_RGB

        #region GL_SOURCE2_RGB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SOURCE2_RGB 0x8582
        public const int GL_SOURCE2_RGB = 0x8582;
        #endregion GL_SOURCE2_RGB

        #region GL_SOURCE0_ALPHA
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SOURCE0_ALPHA 0x8588
        public const int GL_SOURCE0_ALPHA = 0x8588;
        #endregion GL_SOURCE0_ALPHA

        #region GL_SOURCE1_ALPHA
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SOURCE1_ALPHA 0x8589
        public const int GL_SOURCE1_ALPHA = 0x8589;
        #endregion GL_SOURCE1_ALPHA

        #region GL_SOURCE2_ALPHA
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SOURCE2_ALPHA 0x858A
        public const int GL_SOURCE2_ALPHA = 0x858A;
        #endregion GL_SOURCE2_ALPHA

        #region GL_OPERAND0_RGB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OPERAND0_RGB 0x8590
        public const int GL_OPERAND0_RGB = 0x8590;
        #endregion GL_OPERAND0_RGB

        #region GL_OPERAND1_RGB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OPERAND1_RGB 0x8591
        public const int GL_OPERAND1_RGB = 0x8591;
        #endregion GL_OPERAND1_RGB

        #region GL_OPERAND2_RGB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OPERAND2_RGB 0x8592
        public const int GL_OPERAND2_RGB = 0x8592;
        #endregion GL_OPERAND2_RGB

        #region GL_OPERAND0_ALPHA
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OPERAND0_ALPHA 0x8598
        public const int GL_OPERAND0_ALPHA = 0x8598;
        #endregion GL_OPERAND0_ALPHA

        #region GL_OPERAND1_ALPHA
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OPERAND1_ALPHA 0x8599
        public const int GL_OPERAND1_ALPHA = 0x8599;
        #endregion GL_OPERAND1_ALPHA

        #region GL_OPERAND2_ALPHA
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OPERAND2_ALPHA 0x859A
        public const int GL_OPERAND2_ALPHA = 0x859A;
        #endregion GL_OPERAND2_ALPHA

        #region GL_SUBTRACT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SUBTRACT 0x84E7
        public const int GL_SUBTRACT = 0x84E7;
        #endregion GL_SUBTRACT

        #region GL_TRANSPOSE_MODELVIEW_MATRIX
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TRANSPOSE_MODELVIEW_MATRIX 0x84E3
        public const int GL_TRANSPOSE_MODELVIEW_MATRIX = 0x84E3;
        #endregion GL_TRANSPOSE_MODELVIEW_MATRIX

        #region GL_TRANSPOSE_PROJECTION_MATRIX
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TRANSPOSE_PROJECTION_MATRIX 0x84E4
        public const int GL_TRANSPOSE_PROJECTION_MATRIX = 0x84E4;
        #endregion GL_TRANSPOSE_PROJECTION_MATRIX

        #region GL_TRANSPOSE_TEXTURE_MATRIX
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TRANSPOSE_TEXTURE_MATRIX 0x84E5
        public const int GL_TRANSPOSE_TEXTURE_MATRIX = 0x84E5;
        #endregion GL_TRANSPOSE_TEXTURE_MATRIX

        #region GL_TRANSPOSE_COLOR_MATRIX
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TRANSPOSE_COLOR_MATRIX 0x84E6
        public const int GL_TRANSPOSE_COLOR_MATRIX = 0x84E6;
        #endregion GL_TRANSPOSE_COLOR_MATRIX

        #region GL_COMPRESSED_ALPHA
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COMPRESSED_ALPHA 0x84E9
        public const int GL_COMPRESSED_ALPHA = 0x84E9;
        #endregion GL_COMPRESSED_ALPHA

        #region GL_COMPRESSED_LUMINANCE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COMPRESSED_LUMINANCE 0x84EA
        public const int GL_COMPRESSED_LUMINANCE = 0x84EA;
        #endregion GL_COMPRESSED_LUMINANCE

        #region GL_COMPRESSED_LUMINANCE_ALPHA
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COMPRESSED_LUMINANCE_ALPHA 0x84EB
        public const int GL_COMPRESSED_LUMINANCE_ALPHA = 0x84EB;
        #endregion GL_COMPRESSED_LUMINANCE_ALPHA

        #region GL_COMPRESSED_INTENSITY
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COMPRESSED_INTENSITY 0x84EC
        public const int GL_COMPRESSED_INTENSITY = 0x84EC;
        #endregion GL_COMPRESSED_INTENSITY

        #region GL_COMPRESSED_RGB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COMPRESSED_RGB 0x84ED
        public const int GL_COMPRESSED_RGB = 0x84ED;
        #endregion GL_COMPRESSED_RGB

        #region GL_COMPRESSED_RGBA
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COMPRESSED_RGBA 0x84EE
        public const int GL_COMPRESSED_RGBA = 0x84EE;
        #endregion GL_COMPRESSED_RGBA

        #region GL_TEXTURE_COMPRESSION_HINT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_COMPRESSION_HINT 0x84EF
        public const int GL_TEXTURE_COMPRESSION_HINT = 0x84EF;
        #endregion GL_TEXTURE_COMPRESSION_HINT

        #region GL_TEXTURE_COMPRESSED_IMAGE_SIZE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_COMPRESSED_IMAGE_SIZE 0x86A0
        public const int GL_TEXTURE_COMPRESSED_IMAGE_SIZE = 0x86A0;
        #endregion GL_TEXTURE_COMPRESSED_IMAGE_SIZE

        #region GL_TEXTURE_COMPRESSED
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_COMPRESSED 0x86A1
        public const int GL_TEXTURE_COMPRESSED = 0x86A1;
        #endregion GL_TEXTURE_COMPRESSED

        #region GL_NUM_COMPRESSED_TEXTURE_FORMATS
        /// <summary>
        /// 
        /// </summary>
        // #define GL_NUM_COMPRESSED_TEXTURE_FORMATS 0x86A2
        public const int GL_NUM_COMPRESSED_TEXTURE_FORMATS = 0x86A2;
        #endregion GL_NUM_COMPRESSED_TEXTURE_FORMATS

        #region GL_COMPRESSED_TEXTURE_FORMATS
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COMPRESSED_TEXTURE_FORMATS 0x86A3
        public const int GL_COMPRESSED_TEXTURE_FORMATS = 0x86A3;
        #endregion GL_COMPRESSED_TEXTURE_FORMATS

        #region GL_DOT3_RGB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DOT3_RGB 0x86AE
        public const int GL_DOT3_RGB = 0x86AE;
        #endregion GL_DOT3_RGB

        #region GL_DOT3_RGBA
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DOT3_RGBA 0x86AF
        public const int GL_DOT3_RGBA = 0x86AF;
        #endregion GL_DOT3_RGBA

        #region GL_CLAMP_TO_BORDER
        /// <summary>
        /// 
        /// </summary>
        // #define GL_CLAMP_TO_BORDER 0x812D
        public const int GL_CLAMP_TO_BORDER = 0x812D;
        #endregion GL_CLAMP_TO_BORDER

        #region GL_MULTISAMPLE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MULTISAMPLE 0x809D
        public const int GL_MULTISAMPLE = 0x809D;
        #endregion GL_MULTISAMPLE

        #region GL_SAMPLE_ALPHA_TO_COVERAGE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SAMPLE_ALPHA_TO_COVERAGE 0x809E
        public const int GL_SAMPLE_ALPHA_TO_COVERAGE = 0x809E;
        #endregion GL_SAMPLE_ALPHA_TO_COVERAGE

        #region GL_SAMPLE_ALPHA_TO_ONE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SAMPLE_ALPHA_TO_ONE 0x809F
        public const int GL_SAMPLE_ALPHA_TO_ONE = 0x809F;
        #endregion GL_SAMPLE_ALPHA_TO_ONE

        #region GL_SAMPLE_COVERAGE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SAMPLE_COVERAGE 0x80A0
        public const int GL_SAMPLE_COVERAGE = 0x80A0;
        #endregion GL_SAMPLE_COVERAGE

        #region GL_SAMPLE_BUFFERS
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SAMPLE_BUFFERS 0x80A8
        public const int GL_SAMPLE_BUFFERS = 0x80A8;
        #endregion GL_SAMPLE_BUFFERS

        #region GL_SAMPLES
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SAMPLES 0x80A9
        public const int GL_SAMPLES = 0x80A9;
        #endregion GL_SAMPLES

        #region GL_SAMPLE_COVERAGE_VALUE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SAMPLE_COVERAGE_VALUE 0x80AA
        public const int GL_SAMPLE_COVERAGE_VALUE = 0x80AA;
        #endregion GL_SAMPLE_COVERAGE_VALUE

        #region GL_SAMPLE_COVERAGE_INVERT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SAMPLE_COVERAGE_INVERT 0x80AB
        public const int GL_SAMPLE_COVERAGE_INVERT = 0x80AB;
        #endregion GL_SAMPLE_COVERAGE_INVERT

        #region GL_MULTISAMPLE_BIT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MULTISAMPLE_BIT 0x20000000
        public const int GL_MULTISAMPLE_BIT = 0x20000000;
        #endregion GL_MULTISAMPLE_BIT
        #endregion Public OpenGL 1.3 Constants

        #region Public OpenGL 1.4 Constants
        #region GL_VERSION_1_4
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VERSION_1_4 1
        public const bool GL_VERSION_1_4 = true;
        #endregion GL_VERSION_1_4

        #region GL_POINT_SIZE_MIN
        /// <summary>
        /// 
        /// </summary>
        // #define GL_POINT_SIZE_MIN 0x8126
        public const int GL_POINT_SIZE_MIN = 0x8126;
        #endregion GL_POINT_SIZE_MIN

        #region GL_POINT_SIZE_MAX
        /// <summary>
        /// 
        /// </summary>
        // #define GL_POINT_SIZE_MAX 0x8127
        public const int GL_POINT_SIZE_MAX = 0x8127;
        #endregion GL_POINT_SIZE_MAX

        #region GL_POINT_FADE_THRESHOLD_SIZE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_POINT_FADE_THRESHOLD_SIZE 0x8128
        public const int GL_POINT_FADE_THRESHOLD_SIZE = 0x8128;
        #endregion GL_POINT_FADE_THRESHOLD_SIZE

        #region GL_POINT_DISTANCE_ATTENUATION
        /// <summary>
        /// 
        /// </summary>
        // #define GL_POINT_DISTANCE_ATTENUATION 0x8129
        public const int GL_POINT_DISTANCE_ATTENUATION = 0x8129;
        #endregion GL_POINT_DISTANCE_ATTENUATION

        #region GL_FOG_COORDINATE_SOURCE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_FOG_COORDINATE_SOURCE 0x8450
        public const int GL_FOG_COORDINATE_SOURCE = 0x8450;
        #endregion GL_FOG_COORDINATE_SOURCE

        #region GL_FOG_COORDINATE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_FOG_COORDINATE 0x8451
        public const int GL_FOG_COORDINATE = 0x8451;
        #endregion GL_FOG_COORDINATE

        #region GL_FRAGMENT_DEPTH
        /// <summary>
        /// 
        /// </summary>
        // #define GL_FRAGMENT_DEPTH 0x8452
        public const int GL_FRAGMENT_DEPTH = 0x8452;
        #endregion GL_FRAGMENT_DEPTH

        #region GL_CURRENT_FOG_COORDINATE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_CURRENT_FOG_COORDINATE 0x8453
        public const int GL_CURRENT_FOG_COORDINATE = 0x8453;
        #endregion GL_CURRENT_FOG_COORDINATE

        #region GL_FOG_COORDINATE_ARRAY_TYPE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_FOG_COORDINATE_ARRAY_TYPE 0x8454
        public const int GL_FOG_COORDINATE_ARRAY_TYPE = 0x8454;
        #endregion GL_FOG_COORDINATE_ARRAY_TYPE

        #region GL_FOG_COORDINATE_ARRAY_STRIDE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_FOG_COORDINATE_ARRAY_STRIDE 0x8455
        public const int GL_FOG_COORDINATE_ARRAY_STRIDE = 0x8455;
        #endregion GL_FOG_COORDINATE_ARRAY_STRIDE

        #region GL_FOG_COORDINATE_ARRAY_POINTER
        /// <summary>
        /// 
        /// </summary>
        // #define GL_FOG_COORDINATE_ARRAY_POINTER 0x8456
        public const int GL_FOG_COORDINATE_ARRAY_POINTER = 0x8456;
        #endregion GL_FOG_COORDINATE_ARRAY_POINTER

        #region GL_FOG_COORDINATE_ARRAY
        /// <summary>
        /// 
        /// </summary>
        // #define GL_FOG_COORDINATE_ARRAY 0x8457
        public const int GL_FOG_COORDINATE_ARRAY = 0x8457;
        #endregion GL_FOG_COORDINATE_ARRAY

        #region GL_COLOR_SUM
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COLOR_SUM 0x8458
        public const int GL_COLOR_SUM = 0x8458;
        #endregion GL_COLOR_SUM

        #region GL_CURRENT_SECONDARY_COLOR
        /// <summary>
        /// 
        /// </summary>
        // #define GL_CURRENT_SECONDARY_COLOR 0x8459
        public const int GL_CURRENT_SECONDARY_COLOR = 0x8459;
        #endregion GL_CURRENT_SECONDARY_COLOR

        #region GL_SECONDARY_COLOR_ARRAY_SIZE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SECONDARY_COLOR_ARRAY_SIZE 0x845A
        public const int GL_SECONDARY_COLOR_ARRAY_SIZE = 0x845A;
        #endregion GL_SECONDARY_COLOR_ARRAY_SIZE

        #region GL_SECONDARY_COLOR_ARRAY_TYPE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SECONDARY_COLOR_ARRAY_TYPE 0x845B
        public const int GL_SECONDARY_COLOR_ARRAY_TYPE = 0x845B;
        #endregion GL_SECONDARY_COLOR_ARRAY_TYPE

        #region GL_SECONDARY_COLOR_ARRAY_STRIDE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SECONDARY_COLOR_ARRAY_STRIDE 0x845C
        public const int GL_SECONDARY_COLOR_ARRAY_STRIDE = 0x845C;
        #endregion GL_SECONDARY_COLOR_ARRAY_STRIDE

        #region GL_SECONDARY_COLOR_ARRAY_POINTER
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SECONDARY_COLOR_ARRAY_POINTER 0x845D
        public const int GL_SECONDARY_COLOR_ARRAY_POINTER = 0x845D;
        #endregion GL_SECONDARY_COLOR_ARRAY_POINTER

        #region GL_SECONDARY_COLOR_ARRAY
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SECONDARY_COLOR_ARRAY 0x845E
        public const int GL_SECONDARY_COLOR_ARRAY = 0x845E;
        #endregion GL_SECONDARY_COLOR_ARRAY

        #region GL_INCR_WRAP
        /// <summary>
        /// 
        /// </summary>
        // #define GL_INCR_WRAP 0x8507
        public const int GL_INCR_WRAP = 0x8507;
        #endregion GL_INCR_WRAP

        #region GL_DECR_WRAP
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DECR_WRAP 0x8508
        public const int GL_DECR_WRAP = 0x8508;
        #endregion GL_DECR_WRAP

        #region GL_MAX_TEXTURE_LOD_BIAS
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAX_TEXTURE_LOD_BIAS 0x84FD
        public const int GL_MAX_TEXTURE_LOD_BIAS = 0x84FD;
        #endregion GL_MAX_TEXTURE_LOD_BIAS

        #region GL_TEXTURE_FILTER_CONTROL
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_FILTER_CONTROL 0x8500
        public const int GL_TEXTURE_FILTER_CONTROL = 0x8500;
        #endregion GL_TEXTURE_FILTER_CONTROL

        #region GL_TEXTURE_LOD_BIAS
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_LOD_BIAS 0x8501
        public const int GL_TEXTURE_LOD_BIAS = 0x8501;
        #endregion GL_TEXTURE_LOD_BIAS

        #region GL_GENERATE_MIPMAP
        /// <summary>
        /// 
        /// </summary>
        // #define GL_GENERATE_MIPMAP 0x8191
        public const int GL_GENERATE_MIPMAP = 0x8191;
        #endregion GL_GENERATE_MIPMAP

        #region GL_GENERATE_MIPMAP_HINT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_GENERATE_MIPMAP_HINT 0x8192
        public const int GL_GENERATE_MIPMAP_HINT = 0x8192;
        #endregion GL_GENERATE_MIPMAP_HINT

        #region GL_BLEND_DST_RGB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_BLEND_DST_RGB 0x80C8
        public const int GL_BLEND_DST_RGB = 0x80C8;
        #endregion GL_BLEND_DST_RGB

        #region GL_BLEND_SRC_RGB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_BLEND_SRC_RGB 0x80C9
        public const int GL_BLEND_SRC_RGB = 0x80C9;
        #endregion GL_BLEND_SRC_RGB

        #region GL_BLEND_DST_ALPHA
        /// <summary>
        /// 
        /// </summary>
        // #define GL_BLEND_DST_ALPHA 0x80CA
        public const int GL_BLEND_DST_ALPHA = 0x80CA;
        #endregion GL_BLEND_DST_ALPHA

        #region GL_BLEND_SRC_ALPHA
        /// <summary>
        /// 
        /// </summary>
        // #define GL_BLEND_SRC_ALPHA 0x80CB
        public const int GL_BLEND_SRC_ALPHA = 0x80CB;
        #endregion GL_BLEND_SRC_ALPHA

        #region GL_MIRRORED_REPEAT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MIRRORED_REPEAT 0x8370
        public const int GL_MIRRORED_REPEAT = 0x8370;
        #endregion GL_MIRRORED_REPEAT

        #region GL_DEPTH_COMPONENT16
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DEPTH_COMPONENT16 0x81A5
        public const int GL_DEPTH_COMPONENT16 = 0x81A5;
        #endregion GL_DEPTH_COMPONENT16

        #region GL_DEPTH_COMPONENT24
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DEPTH_COMPONENT24 0x81A6
        public const int GL_DEPTH_COMPONENT24 = 0x81A6;
        #endregion GL_DEPTH_COMPONENT24

        #region GL_DEPTH_COMPONENT32
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DEPTH_COMPONENT32 0x81A7
        public const int GL_DEPTH_COMPONENT32 = 0x81A7;
        #endregion GL_DEPTH_COMPONENT32

        #region GL_TEXTURE_DEPTH_SIZE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_DEPTH_SIZE 0x884A
        public const int GL_TEXTURE_DEPTH_SIZE = 0x884A;
        #endregion GL_TEXTURE_DEPTH_SIZE

        #region GL_DEPTH_TEXTURE_MODE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DEPTH_TEXTURE_MODE 0x884B
        public const int GL_DEPTH_TEXTURE_MODE = 0x884B;
        #endregion GL_DEPTH_TEXTURE_MODE

        #region GL_TEXTURE_COMPARE_MODE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_COMPARE_MODE 0x884C
        public const int GL_TEXTURE_COMPARE_MODE = 0x884C;
        #endregion GL_TEXTURE_COMPARE_MODE

        #region GL_TEXTURE_COMPARE_FUNC
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_COMPARE_FUNC 0x884D
        public const int GL_TEXTURE_COMPARE_FUNC = 0x884D;
        #endregion GL_TEXTURE_COMPARE_FUNC

        #region GL_COMPARE_R_TO_TEXTURE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COMPARE_R_TO_TEXTURE 0x884E
        public const int GL_COMPARE_R_TO_TEXTURE = 0x884E;
        #endregion GL_COMPARE_R_TO_TEXTURE
        #endregion Public OpenGL 1.4 Constants

        #region Public OpenGL 2.0 Constants
        #region GL_VERSION_2_0
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VERSION_2_0 1
        public const bool GL_VERSION_2_0 = true;
        #endregion GL_VERSION_2_0

        #region GL2_GLEXT_VERSION
        /// <summary>
        /// 
        /// </summary>
        // #define GL2_GLEXT_VERSION 1
        public const bool GL2_GLEXT_VERSION = true;
        #endregion GL2_GLEXT_VERSION

        #region GL_GL2_geometry_shader
        /// <summary>
        /// 
        /// </summary>
        // #define GL_GL2_geometry_shader 1
        public const bool GL_GL2_geometry_shader = true;
        #endregion GL_GL2_geometry_shader

        #region GL_VERTEX_SHADER_GL2
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VERTEX_SHADER_GL2 0x07010
        public const int GL_VERTEX_SHADER_GL2 = 0x07010;
        #endregion GL_VERTEX_SHADER_GL2

        #region GL_FRAGMENT_SHADER_GL2
        /// <summary>
        /// 
        /// </summary>
        // #define GL_FRAGMENT_SHADER_GL2 0x07011
        public const int GL_FRAGMENT_SHADER_GL2 = 0x07011;
        #endregion GL_FRAGMENT_SHADER_GL2
        #endregion Public OpenGL 2.0 Constants

        // --- Constructors & Destructors ---
        #region Gl()
        /// <summary>
        ///     Prevents instantiation.
        /// </summary>
        private Gl() {
        }
        #endregion Gl()

        // --- Public Externs ---
        #region OpenGL 1.0 Methods
        #region glAccum(int operation, float operationValue)
        /// <summary>
        ///     Operates on the accumulation buffer.
        /// </summary>
        // GLAPI void GLAPIENTRY glAccum(GLenum op, GLfloat value);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glAccum(int operation, float operationValue);
        #endregion glAccumglAccum(int operation, float operationValue)

        #region glAlphaFunc(int comparisonFunction, float referenceValue)
        /// <summary>
        ///     Specifies the alpha test function.
        /// </summary>
        // GLAPI void GLAPIENTRY glAlphaFunc(GLenum func, GLclampf ref);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glAlphaFunc(int comparisonFunction, float referenceValue);
        #endregion glAlphaFunc(int comparisonFunction, float referenceValue)

        #region glBegin(int primitiveType)
        /// <summary>
        ///     Delimits the vertices of a primitive or a group of like primitives.
        /// </summary>
        // GLAPI void GLAPIENTRY glBegin(GLenum mode);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glBegin(int primitiveType);
        #endregion glBegin(int primitiveType)

        #region glBitmap(int width, int height, float xOrigin, float yOrigin, float xOffset, float yOffset, [In] byte[] bitmap)
        /// <summary>
        ///     Draws a bitmap.
        /// </summary>
        // GLAPI void GLAPIENTRY glBitmap(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *bitmap);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glBitmap(int width, int height, float xOrigin, float yOrigin, float xOffset, float yOffset, [In] byte[] bitmap);
        #endregion glBitmap(int width, int height, float xOrigin, float yOrigin, float xOffset, float yOffset, [In] byte[] bitmap)

        #region glBitmap(int width, int height, float xOrigin, float yOrigin, float xOffset, float yOffset, [In] IntPtr bitmap)
        /// <summary>
        ///     Draws a bitmap.
        /// </summary>
        // GLAPI void GLAPIENTRY glBitmap(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *bitmap);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glBitmap(int width, int height, float xOrigin, float yOrigin, float xOffset, float yOffset, [In] IntPtr bitmap);
        #endregion glBitmap(int width, int height, float xOrigin, float yOrigin, float xOffset, float yOffset, [In] IntPtr bitmap)

        #region glBitmap(int width, int height, float xOrigin, float yOrigin, float xOffset, float yOffset, [In] byte *bitmap)
        /// <summary>
        ///     Draws a bitmap.
        /// </summary>
        // GLAPI void GLAPIENTRY glBitmap(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *bitmap);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glBitmap(int width, int height, float xOrigin, float yOrigin, float xOffset, float yOffset, [In] byte *bitmap);
        #endregion glBitmap(int width, int height, float xOrigin, float yOrigin, float xOffset, float yOffset, [In] byte *bitmap)

        #region glBlendFunc(int sourceFactor, int destinationFactor)
        /// <summary>
        ///     Specifies pixel arithmetic.
        /// </summary>
        // GLAPI void GLAPIENTRY glBlendFunc(GLenum sfactor, GLenum dfactor);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glBlendFunc(int sourceFactor, int destinationFactor);
        #endregion glBlendFunc(int sourceFactor, int destinationFactor)

        #region glCallList(int displayList)
        /// <summary>
        ///     Executes a display list.
        /// </summary>
        // GLAPI void GLAPIENTRY glCallList(GLuint list);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glCallList(int displayList);
        #endregion glCallList(int displayList)

        #region glCallLists(int number, int valueType, [In] byte[] displayLists)
        /// <summary>
        ///     Executes a list of display lists.
        /// </summary>
        // GLAPI void GLAPIENTRY glCallLists(GLsizei n, GLenum type, const GLvoid *lists);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glCallLists(int number, int valueType, [In] byte[] displayLists);
        #endregion glCallLists(int number, int valueType, [In] byte[] displayLists)

        #region glCallLists(int number, int valueType, [In] double[] displayLists)
        /// <summary>
        ///     Executes a list of display lists.
        /// </summary>
        // GLAPI void GLAPIENTRY glCallLists(GLsizei n, GLenum type, const GLvoid *lists);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glCallLists(int number, int valueType, [In] double[] displayLists);
        #endregion glCallLists(int number, int valueType, [In] double[] displayLists)

        #region glCallLists(int number, int valueType, [In] short[] displayLists)
        /// <summary>
        ///     Executes a list of display lists.
        /// </summary>
        // GLAPI void GLAPIENTRY glCallLists(GLsizei n, GLenum type, const GLvoid *lists);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glCallLists(int number, int valueType, [In] short[] displayLists);
        #endregion glCallLists(int number, int valueType, [In] short[] displayLists)

        #region glCallLists(int number, int valueType, [In] int[] displayLists)
        /// <summary>
        ///     Executes a list of display lists.
        /// </summary>
        // GLAPI void GLAPIENTRY glCallLists(GLsizei n, GLenum type, const GLvoid *lists);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glCallLists(int number, int valueType, [In] int[] displayLists);
        #endregion glCallLists(int number, int valueType, [In] int[] displayLists)

        #region glCallLists(int number, int valueType, [In] float[] displayLists)
        /// <summary>
        ///     Executes a list of display lists.
        /// </summary>
        // GLAPI void GLAPIENTRY glCallLists(GLsizei n, GLenum type, const GLvoid *lists);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glCallLists(int number, int valueType, [In] float[] displayLists);
        #endregion glCallLists(int number, int valueType, [In] float[] displayLists)

        #region glCallLists(int number, int valueType, [In] ushort[] displayLists)
        /// <summary>
        ///     Executes a list of display lists.
        /// </summary>
        // GLAPI void GLAPIENTRY glCallLists(GLsizei n, GLenum type, const GLvoid *lists);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glCallLists(int number, int valueType, [In] ushort[] displayLists);
        #endregion glCallLists(int number, int valueType, [In] ushort[] displayLists)

        #region glCallLists(int number, int valueType, [In] uint[] displayLists)
        /// <summary>
        ///     Executes a list of display lists.
        /// </summary>
        // GLAPI void GLAPIENTRY glCallLists(GLsizei n, GLenum type, const GLvoid *lists);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glCallLists(int number, int valueType, [In] uint[] displayLists);
        #endregion glCallLists(int number, int valueType, [In] uint[] displayLists)

        #region glCallLists(int number, int valueType, string displayLists)
        /// <summary>
        ///     Executes a list of display lists.
        /// </summary>
        // GLAPI void GLAPIENTRY glCallLists(GLsizei n, GLenum type, const GLvoid *lists);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glCallLists(int number, int valueType, string displayLists);
        #endregion glCallLists(int number, int valueType, string displayLists)

        #region glCallLists(int number, int valueType, [In] IntPtr displayLists)
        /// <summary>
        ///     Executes a list of display lists.
        /// </summary>
        // GLAPI void GLAPIENTRY glCallLists(GLsizei n, GLenum type, const GLvoid *lists);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glCallLists(int number, int valueType, [In] IntPtr displayLists);
        #endregion glCallLists(int number, int valueType, [In] IntPtr displayLists)

        #region glCallLists(int number, int valueType, [In] void *lists)
        /// <summary>
        ///     Executes a list of display lists.
        /// </summary>
        // GLAPI void GLAPIENTRY glCallLists(GLsizei n, GLenum type, const GLvoid *lists);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glCallLists(int number, int valueType, [In] void *lists);
        #endregion glCallLists(int number, int valueType, [In] void *lists)

        #region glClear(int bufferMasks)
        /// <summary>
        ///     Clears buffers to preset values.
        /// </summary>
        // GLAPI void GLAPIENTRY glClear(GLbitfield mask);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glClear(int bufferMasks);
        #endregion glClear(int bufferMasks)

        #region glClearAccum(float red, float green, float blue, float alpha)
        /// <summary>
        ///     Specifies clear values for the accumulation buffer.
        /// </summary>
        // GLAPI void GLAPIENTRY glClearAccum(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glClearAccum(float red, float green, float blue, float alpha);
        #endregion glClearAccum(float red, float green, float blue, float alpha)

        #region glClearColor(float red, float green, float blue, float alpha)
        /// <summary>
        ///     Specifies clear values for the color buffers.
        /// </summary>
        // GLAPI void GLAPIENTRY glClearColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glClearColor(float red, float green, float blue, float alpha);
        #endregion glClearColor(float red, float green, float blue, float alpha)

        #region glClearDepth(double depth)
        /// <summary>
        ///     Specifies the clear value for the depth buffer.
        /// </summary>
        // GLAPI void GLAPIENTRY glClearDepth(GLclampd depth);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glClearDepth(double depth);
        #endregion glClearDepth(double depth)

        #region glClearIndex(float color)
        /// <summary>
        ///     The <b>glClearIndex</b> specifies the clear value for the color index buffers.
        /// </summary>
        // GLAPI void GLAPIENTRY glClearIndex(GLfloat c);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glClearIndex(float color);
        #endregion glClearIndex(float color)

        #region glClearStencil(int stencilValue)
        /// <summary>
        ///     Specifies the clear value for the stencil buffer.
        /// </summary>
        // GLAPI void GLAPIENTRY glClearStencil(GLint s);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glClearStencil(int stencilValue);
        #endregion glClearStencil(int stencilValue)

        #region glClipPlane(int plane, [In] double[] equation)
        /// <summary>
        ///     Specifies a plane against which all geometry is clipped.
        /// </summary>
        // GLAPI void GLAPIENTRY glClipPlane(GLenum plane, const GLdouble *equation);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glClipPlane(int plane, [In] double[] equation);
        #endregion glClipPlane(int plane, [In] double[] equation)

        #region glClipPlane(int plane, [In] IntPtr equation)
        /// <summary>
        ///     Specifies a plane against which all geometry is clipped.
        /// </summary>
        // GLAPI void GLAPIENTRY glClipPlane(GLenum plane, const GLdouble *equation);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glClipPlane(int plane, [In] IntPtr equation);
        #endregion glClipPlane(int plane, [In] IntPtr equation)

        #region glClipPlane(int plane, [In] double *equation)
        /// <summary>
        ///     Specifies a plane against which all geometry is clipped.
        /// </summary>
        // GLAPI void GLAPIENTRY glClipPlane(GLenum plane, const GLdouble *equation);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glClipPlane(int plane, [In] double *equation);
        #endregion glClipPlane(int plane, [In] double *equation)

        #region glColor3b(byte red, byte green, byte blue)
        /// <summary>
        ///     Sets the current color.
        /// </summary>
        // GLAPI void GLAPIENTRY glColor3b(GLbyte red, GLbyte green, GLbyte blue);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glColor3b(byte red, byte green, byte blue);
        #endregion glColor3b(byte red, byte green, byte blue)

        #region glColor3bv([In] byte[] colors)
        /// <summary>
        ///     Sets the current color.
        /// </summary>
        // GLAPI void GLAPIENTRY glColor3bv(const GLbyte *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glColor3bv([In] byte[] colors);
        #endregion glColor3bv([In] byte[] colors)

        #region glColor3bv([In] IntPtr colors)
        /// <summary>
        ///     Sets the current color.
        /// </summary>
        // GLAPI void GLAPIENTRY glColor3bv(const GLbyte *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glColor3bv([In] IntPtr colors);
        #endregion glColor3bv([In] IntPtr colors)

        #region glColor3bv([In] byte *colors)
        /// <summary>
        ///     Sets the current color.
        /// </summary>
        // GLAPI void GLAPIENTRY glColor3bv(const GLbyte *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glColor3bv([In] byte *colors);
        #endregion glColor3bv([In] byte *colors)

        #region glColor3d(double red, double green, double blue)
        /// <summary>
        ///     Sets the current color.
        /// </summary>
        // GLAPI void GLAPIENTRY glColor3d(GLdouble red, GLdouble green, GLdouble blue);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glColor3d(double red, double green, double blue);
        #endregion glColor3d(double red, double green, double blue)

        #region glColor3dv([In] double[] colors)
        /// <summary>
        ///     Sets the current color.
        /// </summary>
        // GLAPI void GLAPIENTRY glColor3dv(const GLdouble *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glColor3dv([In] double[] colors);
        #endregion glColor3dv([In] double[] colors)

        #region glColor3dv([In] IntPtr colors)
        /// <summary>
        ///     Sets the current color.
        /// </summary>
        // GLAPI void GLAPIENTRY glColor3dv(const GLdouble *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glColor3dv([In] IntPtr colors);
        #endregion glColor3dv([In] IntPtr colors)

        #region glColor3dv([In] double *colors)
        /// <summary>
        ///     Sets the current color.
        /// </summary>
        // GLAPI void GLAPIENTRY glColor3dv(const GLdouble *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glColor3dv([In] double *colors);
        #endregion glColor3dv([In] double *colors)

        #region glColor3f(float red, float green, float blue)
        /// <summary>
        ///     Sets the current color.
        /// </summary>
        // GLAPI void GLAPIENTRY glColor3f(GLfloat red, GLfloat green, GLfloat blue);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glColor3f(float red, float green, float blue);
        #endregion glColor3f(float red, float green, float blue)

        #region glColor3fv([In] float[] colors)
        /// <summary>
        ///     Sets the current color.
        /// </summary>
        // GLAPI void GLAPIENTRY glColor3fv(const GLfloat *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glColor3fv([In] float[] colors);
        #endregion glColor3fv([In] float[] colors)

        #region glColor3fv([In] IntPtr colors)
        /// <summary>
        ///     Sets the current color.
        /// </summary>
        // GLAPI void GLAPIENTRY glColor3fv(const GLfloat *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glColor3fv([In] IntPtr colors);
        #endregion glColor3fv([In] IntPtr colors)

        #region glColor3fv([In] float *colors)
        /// <summary>
        ///     Sets the current color.
        /// </summary>
        // GLAPI void GLAPIENTRY glColor3fv(const GLfloat *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glColor3fv([In] float *colors);
        #endregion glColor3fv([In] float *colors)

        #region glColor3i(int red, int green, int blue)
        /// <summary>
        ///     Sets the current color.
        /// </summary>
        // GLAPI void GLAPIENTRY glColor3i(GLint red, GLint green, GLint blue);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glColor3i(int red, int green, int blue);
        #endregion glColor3i(int red, int green, int blue)

        #region glColor3iv([In] int[] colors)
        /// <summary>
        ///     Sets the current color.
        /// </summary>
        // GLAPI void GLAPIENTRY glColor3iv(const GLint *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glColor3iv([In] int[] colors);
        #endregion glColor3iv([In] int[] colors)

        #region glColor3iv([In] IntPtr colors)
        /// <summary>
        ///     Sets the current color.
        /// </summary>
        // GLAPI void GLAPIENTRY glColor3iv(const GLint *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glColor3iv([In] IntPtr colors);
        #endregion glColor3iv([In] IntPtr colors)

        #region glColor3iv([In] int *colors)
        /// <summary>
        ///     Sets the current color.
        /// </summary>
        // GLAPI void GLAPIENTRY glColor3iv(const GLint *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glColor3iv([In] int *colors);
        #endregion glColor3iv([In] int *colors)

        #region glColor3s(short red, short green, short blue)
        /// <summary>
        ///     Sets the current color.
        /// </summary>
        // GLAPI void GLAPIENTRY glColor3s(GLshort red, GLshort green, GLshort blue);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glColor3s(short red, short green, short blue);
        #endregion glColor3s(short red, short green, short blue)

        #region glColor3sv([In] short[] colors)
        /// <summary>
        ///     Sets the current color.
        /// </summary>
        // GLAPI void GLAPIENTRY glColor3sv(const GLshort *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glColor3sv([In] short[] colors);
        #endregion glColor3sv([In] short[] colors)

        #region glColor3sv([In] IntPtr colors)
        /// <summary>
        ///     Sets the current color.
        /// </summary>
        // GLAPI void GLAPIENTRY glColor3sv(const GLshort *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glColor3sv([In] IntPtr colors);
        #endregion glColor3sv([In] IntPtr colors)

        #region glColor3sv([In] short *colors)
        /// <summary>
        ///     Sets the current color.
        /// </summary>
        // GLAPI void GLAPIENTRY glColor3sv(const GLshort *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glColor3sv([In] short *colors);
        #endregion glColor3sv([In] short *colors)

        #region glColor3ub(byte red, byte green, byte blue)
        /// <summary>
        ///     Sets the current color.
        /// </summary>
        // GLAPI void GLAPIENTRY glColor3ub(GLubyte red, GLubyte green, GLubyte blue);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glColor3ub(byte red, byte green, byte blue);
        #endregion glColor3ub(byte red, byte green, byte blue)

        #region glColor3ubv([In] byte[] colors)
        /// <summary>
        ///     Sets the current color.
        /// </summary>
        // GLAPI void GLAPIENTRY glColor3ubv(const GLubyte *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glColor3ubv([In] byte[] colors);
        #endregion glColor3ubv([In] byte[] colors)

        #region glColor3ubv([In] IntPtr colors)
        /// <summary>
        ///     Sets the current color.
        /// </summary>
        // GLAPI void GLAPIENTRY glColor3ubv(const GLubyte *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glColor3ubv([In] IntPtr colors);
        #endregion glColor3ubv([In] IntPtr colors)

        #region glColor3ubv([In] byte *colors)
        /// <summary>
        ///     Sets the current color.
        /// </summary>
        // GLAPI void GLAPIENTRY glColor3ubv(const GLubyte *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glColor3ubv([In] byte *colors);
        #endregion glColor3ubv([In] byte *colors)

        #region glColor3ui(int red, int green, int blue)
        /// <summary>
        ///     Sets the current color.
        /// </summary>
        // GLAPI void GLAPIENTRY glColor3ui(GLuint red, GLuint green, GLuint blue);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glColor3ui(int red, int green, int blue);
        #endregion glColor3ui(int red, int green, int blue)

        #region glColor3ui(uint red, uint green, uint blue)
        /// <summary>
        ///     Sets the current color.
        /// </summary>
        // GLAPI void GLAPIENTRY glColor3ui(GLuint red, GLuint green, GLuint blue);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glColor3ui(uint red, uint green, uint blue);
        #endregion glColor3ui(uint red, uint green, uint blue)

        #region glColor3uiv([In] int[] colors)
        /// <summary>
        ///     Sets the current color.
        /// </summary>
        // GLAPI void GLAPIENTRY glColor3uiv(const GLuint *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glColor3uiv([In] int[] colors);
        #endregion glColor3uiv([In] int[] colors)

        #region glColor3uiv([In] uint[] colors)
        /// <summary>
        ///     Sets the current color.
        /// </summary>
        // GLAPI void GLAPIENTRY glColor3uiv(const GLuint *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glColor3uiv([In] uint[] colors);
        #endregion glColor3uiv([In] uint[] colors)

        #region glColor3uiv([In] IntPtr colors)
        /// <summary>
        ///     Sets the current color.
        /// </summary>
        // GLAPI void GLAPIENTRY glColor3uiv(const GLuint *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glColor3uiv([In] IntPtr colors);
        #endregion glColor3uiv([In] IntPtr colors)

        #region glColor3uiv([In] int *colors)
        /// <summary>
        ///     Sets the current color.
        /// </summary>
        // GLAPI void GLAPIENTRY glColor3uiv(const GLuint *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glColor3uiv([In] int *colors);
        #endregion glColor3uiv([In] int *colors)

        #region glColor3uiv([In] uint *colors)
        /// <summary>
        ///     Sets the current color.
        /// </summary>
        // GLAPI void GLAPIENTRY glColor3uiv(const GLuint *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glColor3uiv([In] uint *colors);
        #endregion glColor3uiv([In] uint *colors)

        #region glColor3us(short red, short green, short blue)
        /// <summary>
        ///     Sets the current color.
        /// </summary>
        // GLAPI void GLAPIENTRY glColor3us(GLushort red, GLushort green, GLushort blue);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glColor3us(short red, short green, short blue);
        #endregion glColor3us(short red, short green, short blue)

        #region glColor3us(ushort red, ushort green, ushort blue)
        /// <summary>
        ///     Sets the current color.
        /// </summary>
        // GLAPI void GLAPIENTRY glColor3us(GLushort red, GLushort green, GLushort blue);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glColor3us(ushort red, ushort green, ushort blue);
        #endregion glColor3us(ushort red, ushort green, ushort blue)

        #region glColor3usv([In] short[] colors)
        /// <summary>
        ///     Sets the current color.
        /// </summary>
        // GLAPI void GLAPIENTRY glColor3usv(const GLushort *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glColor3usv([In] short[] colors);
        #endregion glColor3usv([In] short[] colors)

        #region glColor3usv([In] ushort[] colors)
        /// <summary>
        ///     Sets the current color.
        /// </summary>
        // GLAPI void GLAPIENTRY glColor3usv(const GLushort *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glColor3usv([In] ushort[] colors);
        #endregion glColor3usv([In] ushort[] colors)

        #region glColor3usv([In] IntPtr colors)
        /// <summary>
        ///     Sets the current color.
        /// </summary>
        // GLAPI void GLAPIENTRY glColor3usv(const GLushort *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glColor3usv([In] IntPtr colors);
        #endregion glColor3usv([In] IntPtr colors)

        #region glColor3usv([In] short *colors)
        /// <summary>
        ///     Sets the current color.
        /// </summary>
        // GLAPI void GLAPIENTRY glColor3usv(const GLushort *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glColor3usv([In] short *colors);
        #endregion glColor3usv([In] short *colors)

        #region glColor3usv([In] ushort *colors)
        /// <summary>
        ///     Sets the current color.
        /// </summary>
        // GLAPI void GLAPIENTRY glColor3usv(const GLushort *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glColor3usv([In] ushort *colors);
        #endregion glColor3usv([In] ushort *colors)

        #region glColor4b(byte red, byte green, byte blue, byte alpha)
        /// <summary>
        ///     Sets the current color.
        /// </summary>
        // GLAPI void GLAPIENTRY glColor4b(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glColor4b(byte red, byte green, byte blue, byte alpha);
        #endregion glColor4b(byte red, byte green, byte blue, byte alpha)

        #region glColor4bv([In] byte[] colors)
        /// <summary>
        ///     Sets the current color.
        /// </summary>
        // GLAPI void GLAPIENTRY glColor4bv(const GLbyte *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glColor4bv([In] byte[] colors);
        #endregion glColor4bv([In] byte[] colors)

        #region glColor4bv([In] IntPtr colors)
        /// <summary>
        ///     Sets the current color.
        /// </summary>
        // GLAPI void GLAPIENTRY glColor4bv(const GLbyte *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glColor4bv([In] IntPtr colors);
        #endregion glColor4bv([In] IntPtr colors)

        #region glColor4bv([In] byte *colors)
        /// <summary>
        ///     Sets the current color.
        /// </summary>
        // GLAPI void GLAPIENTRY glColor4bv(const GLbyte *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glColor4bv([In] byte *colors);
        #endregion glColor4bv([In] byte *colors)

        #region glColor4d(double red, double green, double blue, double alpha)
        /// <summary>
        ///     Sets the current color.
        /// </summary>
        // GLAPI void GLAPIENTRY glColor4d(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glColor4d(double red, double green, double blue, double alpha);
        #endregion glColor4d(double red, double green, double blue, double alpha)

        #region glColor4dv([In] double[] colors)
        /// <summary>
        ///     Sets the current color.
        /// </summary>
        // GLAPI void GLAPIENTRY glColor4dv(const GLdouble *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glColor4dv([In] double[] colors);
        #endregion glColor4dv([In] double[] colors)

        #region glColor4dv([In] IntPtr colors)
        /// <summary>
        ///     Sets the current color.
        /// </summary>
        // GLAPI void GLAPIENTRY glColor4dv(const GLdouble *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glColor4dv([In] IntPtr colors);
        #endregion glColor4dv([In] IntPtr colors)

        #region glColor4dv([In] double *colors)
        /// <summary>
        ///     Sets the current color.
        /// </summary>
        // GLAPI void GLAPIENTRY glColor4dv(const GLdouble *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glColor4dv([In] double *colors);
        #endregion glColor4dv([In] double *colors)

        #region glColor4f(float red, float green, float blue, float alpha)
        /// <summary>
        ///     Sets the current color.
        /// </summary>
        // GLAPI void GLAPIENTRY glColor4f(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glColor4f(float red, float green, float blue, float alpha);
        #endregion glColor4f(float red, float green, float blue, float alpha)

        #region glColor4fv([In] float[] colors)
        /// <summary>
        ///     Sets the current color.
        /// </summary>
        // GLAPI void GLAPIENTRY glColor4fv(const GLfloat *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glColor4fv([In] float[] colors);
        #endregion glColor4fv([In] float[] colors)

        #region glColor4fv([In] IntPtr colors)
        /// <summary>
        ///     Sets the current color.
        /// </summary>
        // GLAPI void GLAPIENTRY glColor4fv(const GLfloat *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glColor4fv([In] IntPtr colors);
        #endregion glColor4fv([In] IntPtr colors)

        #region glColor4fv([In] float *colors)
        /// <summary>
        ///     Sets the current color.
        /// </summary>
        // GLAPI void GLAPIENTRY glColor4fv(const GLfloat *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glColor4fv([In] float *colors);
        #endregion glColor4fv([In] float *colors)

        #region glColor4i(int red, int green, int blue, int alpha)
        /// <summary>
        ///     Sets the current color.
        /// </summary>
        // GLAPI void GLAPIENTRY glColor4i(GLint red, GLint green, GLint blue, GLint alpha);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glColor4i(int red, int green, int blue, int alpha);
        #endregion glColor4i(int red, int green, int blue, int alpha)

        #region glColor4iv([In] int[] colors)
        /// <summary>
        ///     Sets the current color.
        /// </summary>
        // GLAPI void GLAPIENTRY glColor4iv(const GLint *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glColor4iv([In] int[] colors);
        #endregion glColor4iv([In] int[] colors)

        #region glColor4iv([In] IntPtr colors)
        /// <summary>
        ///     Sets the current color.
        /// </summary>
        // GLAPI void GLAPIENTRY glColor4iv(const GLint *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glColor4iv([In] IntPtr colors);
        #endregion glColor4iv([In] IntPtr colors)

        #region glColor4iv([In] int *colors)
        /// <summary>
        ///     Sets the current color.
        /// </summary>
        // GLAPI void GLAPIENTRY glColor4iv(const GLint *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glColor4iv([In] int *colors);
        #endregion glColor4iv([In] int *colors)

        #region glColor4s(short red, short green, short blue, short alpha)
        /// <summary>
        ///     Sets the current color.
        /// </summary>
        // GLAPI void GLAPIENTRY glColor4s(GLshort red, GLshort green, GLshort blue, GLshort alpha);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glColor4s(short red, short green, short blue, short alpha);
        #endregion glColor4s(short red, short green, short blue, short alpha)

        #region glColor4sv([In] short[] colors)
        /// <summary>
        ///     Sets the current color.
        /// </summary>
        // GLAPI void GLAPIENTRY glColor4sv(const GLshort *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glColor4sv([In] short[] colors);
        #endregion glColor4sv([In] short[] colors)

        #region glColor4sv([In] IntPtr colors)
        /// <summary>
        ///     Sets the current color.
        /// </summary>
        // GLAPI void GLAPIENTRY glColor4sv(const GLshort *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glColor4sv([In] IntPtr colors);
        #endregion glColor4sv([In] IntPtr colors)

        #region glColor4sv([In] short *colors)
        /// <summary>
        ///     Sets the current color.
        /// </summary>
        // GLAPI void GLAPIENTRY glColor4sv(const GLshort *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glColor4sv([In] short *colors);
        #endregion glColor4sv([In] short *colors)

        #region glColor4ub(byte red, byte green, byte blue, byte alpha)
        /// <summary>
        ///     Sets the current color.
        /// </summary>
        // GLAPI void GLAPIENTRY glColor4ub(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glColor4ub(byte red, byte green, byte blue, byte alpha);
        #endregion glColor4ub(byte red, byte green, byte blue, byte alpha)

        #region glColor4ubv([In] byte[] colors)
        /// <summary>
        ///     Sets the current color.
        /// </summary>
        // GLAPI void GLAPIENTRY glColor4ubv(const GLubyte *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glColor4ubv([In] byte[] colors);
        #endregion glColor4ubv([In] byte[] colors)

        #region glColor4ubv([In] IntPtr colors)
        /// <summary>
        ///     Sets the current color.
        /// </summary>
        // GLAPI void GLAPIENTRY glColor4ubv(const GLubyte *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glColor4ubv([In] IntPtr colors);
        #endregion glColor4ubv([In] IntPtr colors)

        #region glColor4ubv([In] byte *colors)
        /// <summary>
        ///     Sets the current color.
        /// </summary>
        // GLAPI void GLAPIENTRY glColor4ubv(const GLubyte *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glColor4ubv([In] byte *colors);
        #endregion glColor4ubv([In] byte *colors)

        #region glColor4ui(int red, int green, int blue, int alpha)
        /// <summary>
        ///     Sets the current color.
        /// </summary>
        // GLAPI void GLAPIENTRY glColor4ui(GLuint red, GLuint green, GLuint blue, GLuint alpha);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glColor4ui(int red, int green, int blue, int alpha);
        #endregion glColor4ui(int red, int green, int blue, int alpha)

        #region glColor4ui(uint red, uint green, uint blue, uint alpha)
        /// <summary>
        ///     Sets the current color.
        /// </summary>
        // GLAPI void GLAPIENTRY glColor4ui(GLuint red, GLuint green, GLuint blue, GLuint alpha);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glColor4ui(uint red, uint green, uint blue, uint alpha);
        #endregion glColor4ui(uint red, uint green, uint blue, uint alpha)

        #region glColor4uiv([In] int[] colors)
        /// <summary>
        ///     Sets the current color.
        /// </summary>
        // GLAPI void GLAPIENTRY glColor4uiv(const GLuint *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glColor4uiv([In] int[] colors);
        #endregion glColor4uiv([In] int[] colors)

        #region glColor4uiv([In] uint[] colors)
        /// <summary>
        ///     Sets the current color.
        /// </summary>
        // GLAPI void GLAPIENTRY glColor4uiv(const GLuint *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glColor4uiv([In] uint[] colors);
        #endregion glColor4uiv([In] uint[] colors)

        #region glColor4uiv([In] IntPtr colors)
        /// <summary>
        ///     Sets the current color.
        /// </summary>
        // GLAPI void GLAPIENTRY glColor4uiv(const GLuint *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glColor4uiv([In] IntPtr colors);
        #endregion glColor4uiv([In] IntPtr colors)

        #region glColor4uiv([In] int *colors)
        /// <summary>
        ///     Sets the current color.
        /// </summary>
        // GLAPI void GLAPIENTRY glColor4uiv(const GLuint *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glColor4uiv([In] int *colors);
        #endregion glColor4uiv([In] int *colors)

        #region glColor4uiv([In] uint *colors)
        /// <summary>
        ///     Sets the current color.
        /// </summary>
        // GLAPI void GLAPIENTRY glColor4uiv(const GLuint *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glColor4uiv([In] uint *colors);
        #endregion glColor4uiv([In] uint *colors)

        #region glColor4us(short red, short green, short blue, short alpha)
        /// <summary>
        ///     Sets the current color.
        /// </summary>
        // GLAPI void GLAPIENTRY glColor4us(GLushort red, GLushort green, GLushort blue, GLushort alpha);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glColor4us(short red, short green, short blue, short alpha);
        #endregion glColor4us(short red, short green, short blue, short alpha)

        #region glColor4us(ushort red, ushort green, ushort blue, ushort alpha)
        /// <summary>
        ///     Sets the current color.
        /// </summary>
        // GLAPI void GLAPIENTRY glColor4us(GLushort red, GLushort green, GLushort blue, GLushort alpha);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glColor4us(ushort red, ushort green, ushort blue, ushort alpha);
        #endregion glColor4us(ushort red, ushort green, ushort blue, ushort alpha)

        #region glColor4usv([In] short[] colors)
        /// <summary>
        ///     Sets the current color.
        /// </summary>
        // GLAPI void GLAPIENTRY glColor4usv(const GLushort *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glColor4usv([In] short[] colors);
        #endregion glColor4usv([In] short[] colors)

        #region glColor4usv([In] ushort[] colors)
        /// <summary>
        ///     Sets the current color.
        /// </summary>
        // GLAPI void GLAPIENTRY glColor4usv(const GLushort *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glColor4usv([In] ushort[] colors);
        #endregion glColor4usv([In] ushort[] colors)

        #region glColor4usv([In] IntPtr colors)
        /// <summary>
        ///     Sets the current color.
        /// </summary>
        // GLAPI void GLAPIENTRY glColor4usv(const GLushort *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glColor4usv([In] IntPtr colors);
        #endregion glColor4usv([In] IntPtr colors)

        #region glColor4usv([In] short *colors)
        /// <summary>
        ///     Sets the current color.
        /// </summary>
        // GLAPI void GLAPIENTRY glColor4usv(const GLushort *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glColor4usv([In] short *colors);
        #endregion glColor4usv([In] short *colors)

        #region glColor4usv([In] ushort *colors)
        /// <summary>
        ///     Sets the current color.
        /// </summary>
        // GLAPI void GLAPIENTRY glColor4usv(const GLushort *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glColor4usv([In] ushort *colors);
        #endregion glColor4usv([In] ushort *colors)

        #region glColorMask(int red, int green, int blue, int alpha)
        /// <summary>
        ///     Enables and disables writing of frame buffer color components.
        /// </summary>
        // GLAPI void GLAPIENTRY glColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glColorMask(int red, int green, int blue, int alpha);
        #endregion glColorMask(int red, int green, int blue, int alpha)

        #region glColorMaterial(int face, int mode)
        /// <summary>
        ///     Causes a material color to track the current color.
        /// </summary>
        // GLAPI void GLAPIENTRY glColorMaterial(GLenum face, GLenum mode);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glColorMaterial(int face, int mode);
        #endregion glColorMaterial(int face, int mode)

        #region glCopyPixels(int x, int y, int width, int height, int type)
        /// <summary>
        ///     Copies pixels in the frame buffer.
        /// </summary>
        // GLAPI void GLAPIENTRY glCopyPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glCopyPixels(int x, int y, int width, int height, int type);
        #endregion glCopyPixels(int x, int y, int width, int height, int type)

        #region glCullFace(int face)
        /// <summary>
        ///     Specifies whether front or back facing facets can be culled.
        /// </summary>
        // GLAPI void GLAPIENTRY glCullFace(GLenum mode);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glCullFace(int face);
        #endregion glCullFace(int face)

        #region glDeleteLists(int firstDisplayList, int numberToDelete)
        /// <summary>
        ///     Deletes a contiguous group of display lists.
        /// </summary>
        // GLAPI void GLAPIENTRY glDeleteLists(GLuint list, GLsizei range);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glDeleteLists(int firstDisplayList, int numberToDelete);
        #endregion glDeleteLists(int firstDisplayList, int numberToDelete)

        #region glDepthFunc(int function)
        /// <summary>
        ///     Specifies the value used for depth buffer comparisons.
        /// </summary>
        // GLAPI void GLAPIENTRY glDepthFunc(GLenum func);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glDepthFunc(int function);
        #endregion glDepthFunc(int function)

        #region glDepthMask(int isEnabledForWriting)
        /// <summary>
        ///     Enables or disables writing into the depth buffer.
        /// </summary>
        // GLAPI void GLAPIENTRY glDepthMask(GLboolean flag);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glDepthMask(int isEnabledForWriting);
        #endregion glDepthMask(int isEnabledForWriting)

        #region glDepthRange(double nearClippingPlane, double farClippingPlane)
        /// <summary>
        ///     Specifies mapping of depth values from normalized device coordinates to window
        ///     coordinates.
        /// </summary>
        // GLAPI void GLAPIENTRY glDepthRange(GLclampd near_val, GLclampd far_val);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glDepthRange(double nearClippingPlane, double farClippingPlane);
        #endregion glDepthRange(double nearClippingPlane, double farClippingPlane)

        #region glDisable(int capability)
        /// <summary>
        ///     Disables server-side GL capabilities.
        /// </summary>
        // GLAPI void GLAPIENTRY glDisable(GLenum cap);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glDisable(int capability);
        #endregion glDisable(int capability)

        #region glDrawBuffer(int colorBuffers)
        /// <summary>
        ///     Specifies which color buffers are to be drawn into.
        /// </summary>
        // GLAPI void GLAPIENTRY glDrawBuffer(GLenum mode);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawBuffer(int colorBuffers);
        #endregion glDrawBuffer(int colorBuffers)

        #region glDrawPixels(int width, int height, int format, int dataType, [In] byte[] pixels)
        /// <summary>
        ///     Writes a block of pixels to the frame buffer.
        /// </summary>
        // GLAPI void GLAPIENTRY glDrawPixels(GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawPixels(int width, int height, int format, int dataType, [In] byte[] pixels);
        #endregion glDrawPixels(int width, int height, int format, int dataType, [In] byte[] pixels)

        #region glDrawPixels(int width, int height, int format, int dataType, [In] byte[ , ] pixels)
        /// <summary>
        ///     Writes a block of pixels to the frame buffer.
        /// </summary>
        // GLAPI void GLAPIENTRY glDrawPixels(GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawPixels(int width, int height, int format, int dataType, [In] byte[ , ] pixels);
        #endregion glDrawPixels(int width, int height, int format, int dataType, [In] byte[ , ] pixels)

        #region glDrawPixels(int width, int height, int format, int dataType, [In] byte[ , , ] pixels)
        /// <summary>
        ///     Writes a block of pixels to the frame buffer.
        /// </summary>
        // GLAPI void GLAPIENTRY glDrawPixels(GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawPixels(int width, int height, int format, int dataType, [In] byte[ , , ] pixels);
        #endregion glDrawPixels(int width, int height, int format, int dataType, [In] byte[ , , ] pixels)

        #region glDrawPixels(int width, int height, int format, int dataType, [In] double[] pixels)
        /// <summary>
        ///     Writes a block of pixels to the frame buffer.
        /// </summary>
        // GLAPI void GLAPIENTRY glDrawPixels(GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawPixels(int width, int height, int format, int dataType, [In] double[] pixels);
        #endregion glDrawPixels(int width, int height, int format, int dataType, [In] double[] pixels)

        #region glDrawPixels(int width, int height, int format, int dataType, [In] double[ , ] pixels)
        /// <summary>
        ///     Writes a block of pixels to the frame buffer.
        /// </summary>
        // GLAPI void GLAPIENTRY glDrawPixels(GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawPixels(int width, int height, int format, int dataType, [In] double[ , ] pixels);
        #endregion glDrawPixels(int width, int height, int format, int dataType, [In] double[ , ] pixels)

        #region glDrawPixels(int width, int height, int format, int dataType, [In] double[ , , ] pixels)
        /// <summary>
        ///     Writes a block of pixels to the frame buffer.
        /// </summary>
        // GLAPI void GLAPIENTRY glDrawPixels(GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawPixels(int width, int height, int format, int dataType, [In] double[ , , ] pixels);
        #endregion glDrawPixels(int width, int height, int format, int dataType, [In] double[ , , ] pixels)

        #region glDrawPixels(int width, int height, int format, int dataType, [In] short[] pixels)
        /// <summary>
        ///     Writes a block of pixels to the frame buffer.
        /// </summary>
        // GLAPI void GLAPIENTRY glDrawPixels(GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawPixels(int width, int height, int format, int dataType, [In] short[] pixels);
        #endregion glDrawPixels(int width, int height, int format, int dataType, [In] short[] pixels)

        #region glDrawPixels(int width, int height, int format, int dataType, [In] short[ , ] pixels)
        /// <summary>
        ///     Writes a block of pixels to the frame buffer.
        /// </summary>
        // GLAPI void GLAPIENTRY glDrawPixels(GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawPixels(int width, int height, int format, int dataType, [In] short[ , ] pixels);
        #endregion glDrawPixels(int width, int height, int format, int dataType, [In] short[ , ] pixels)

        #region glDrawPixels(int width, int height, int format, int dataType, [In] short[ , , ] pixels)
        /// <summary>
        ///     Writes a block of pixels to the frame buffer.
        /// </summary>
        // GLAPI void GLAPIENTRY glDrawPixels(GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawPixels(int width, int height, int format, int dataType, [In] short[ , , ] pixels);
        #endregion glDrawPixels(int width, int height, int format, int dataType, [In] short[ , , ] pixels)

        #region glDrawPixels(int width, int height, int format, int dataType, [In] int[] pixels)
        /// <summary>
        ///     Writes a block of pixels to the frame buffer.
        /// </summary>
        // GLAPI void GLAPIENTRY glDrawPixels(GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawPixels(int width, int height, int format, int dataType, [In] int[] pixels);
        #endregion glDrawPixels(int width, int height, int format, int dataType, [In] int[] pixels)

        #region glDrawPixels(int width, int height, int format, int dataType, [In] int[ , ] pixels)
        /// <summary>
        ///     Writes a block of pixels to the frame buffer.
        /// </summary>
        // GLAPI void GLAPIENTRY glDrawPixels(GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawPixels(int width, int height, int format, int dataType, [In] int[ , ] pixels);
        #endregion glDrawPixels(int width, int height, int format, int dataType, [In] int[ , ] pixels)

        #region glDrawPixels(int width, int height, int format, int dataType, [In] int[ , , ] pixels)
        /// <summary>
        ///     Writes a block of pixels to the frame buffer.
        /// </summary>
        // GLAPI void GLAPIENTRY glDrawPixels(GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawPixels(int width, int height, int format, int dataType, [In] int[ , , ] pixels);
        #endregion glDrawPixels(int width, int height, int format, int dataType, [In] int[ , , ] pixels)

        #region glDrawPixels(int width, int height, int format, int dataType, [In] float[] pixels)
        /// <summary>
        ///     Writes a block of pixels to the frame buffer.
        /// </summary>
        // GLAPI void GLAPIENTRY glDrawPixels(GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawPixels(int width, int height, int format, int dataType, [In] float[] pixels);
        #endregion glDrawPixels(int width, int height, int format, int dataType, [In] float[] pixels)

        #region glDrawPixels(int width, int height, int format, int dataType, [In] float[ , ] pixels)
        /// <summary>
        ///     Writes a block of pixels to the frame buffer.
        /// </summary>
        // GLAPI void GLAPIENTRY glDrawPixels(GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawPixels(int width, int height, int format, int dataType, [In] float[ , ] pixels);
        #endregion glDrawPixels(int width, int height, int format, int dataType, [In] float[ , ] pixels)

        #region glDrawPixels(int width, int height, int format, int dataType, [In] float[ , , ] pixels)
        /// <summary>
        ///     Writes a block of pixels to the frame buffer.
        /// </summary>
        // GLAPI void GLAPIENTRY glDrawPixels(GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawPixels(int width, int height, int format, int dataType, [In] float[ , , ] pixels);
        #endregion glDrawPixels(int width, int height, int format, int dataType, [In] float[ , , ] pixels)

        #region glDrawPixels(int width, int height, int format, int dataType, [In] ushort[] pixels)
        /// <summary>
        ///     Writes a block of pixels to the frame buffer.
        /// </summary>
        // GLAPI void GLAPIENTRY glDrawPixels(GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawPixels(int width, int height, int format, int dataType, [In] ushort[] pixels);
        #endregion glDrawPixels(int width, int height, int format, int dataType, [In] ushort[] pixels)

        #region glDrawPixels(int width, int height, int format, int dataType, [In] ushort[ , ] pixels)
        /// <summary>
        ///     Writes a block of pixels to the frame buffer.
        /// </summary>
        // GLAPI void GLAPIENTRY glDrawPixels(GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawPixels(int width, int height, int format, int dataType, [In] ushort[ , ] pixels);
        #endregion glDrawPixels(int width, int height, int format, int dataType, [In] ushort[ , ] pixels)

        #region glDrawPixels(int width, int height, int format, int dataType, [In] ushort[ , , ] pixels)
        /// <summary>
        ///     Writes a block of pixels to the frame buffer.
        /// </summary>
        // GLAPI void GLAPIENTRY glDrawPixels(GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawPixels(int width, int height, int format, int dataType, [In] ushort[ , , ] pixels);
        #endregion glDrawPixels(int width, int height, int format, int dataType, [In] ushort[ , , ] pixels)

        #region glDrawPixels(int width, int height, int format, int dataType, [In] uint[] pixels)
        /// <summary>
        ///     Writes a block of pixels to the frame buffer.
        /// </summary>
        // GLAPI void GLAPIENTRY glDrawPixels(GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawPixels(int width, int height, int format, int dataType, [In] uint[] pixels);
        #endregion glDrawPixels(int width, int height, int format, int dataType, [In] uint[] pixels)

        #region glDrawPixels(int width, int height, int format, int dataType, [In] uint[ , ] pixels)
        /// <summary>
        ///     Writes a block of pixels to the frame buffer.
        /// </summary>
        // GLAPI void GLAPIENTRY glDrawPixels(GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawPixels(int width, int height, int format, int dataType, [In] uint[ , ] pixels);
        #endregion glDrawPixels(int width, int height, int format, int dataType, [In] uint[ , ] pixels)

        #region glDrawPixels(int width, int height, int format, int dataType, [In] uint[ , , ] pixels)
        /// <summary>
        ///     Writes a block of pixels to the frame buffer.
        /// </summary>
        // GLAPI void GLAPIENTRY glDrawPixels(GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawPixels(int width, int height, int format, int dataType, [In] uint[ , , ] pixels);
        #endregion glDrawPixels(int width, int height, int format, int dataType, [In] uint[ , , ] pixels)

        #region glDrawPixels(int width, int height, int format, int dataType, [In] IntPtr pixels)
        /// <summary>
        ///     Writes a block of pixels to the frame buffer.
        /// </summary>
        // GLAPI void GLAPIENTRY glDrawPixels(GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawPixels(int width, int height, int format, int dataType, [In] IntPtr pixels);
        #endregion glDrawPixels(int width, int height, int format, int dataType, [In] IntPtr pixels)

        #region glDrawPixels(int width, int height, int format, int dataType, [In] void *pixels)
        /// <summary>
        ///     Writes a block of pixels to the frame buffer.
        /// </summary>
        // GLAPI void GLAPIENTRY glDrawPixels(GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glDrawPixels(int width, int height, int format, int dataType, [In] void *pixels);
        #endregion glDrawPixels(int width, int height, int format, int dataType, [In] void *pixels)

        #region glEdgeFlag(int flag)
        /// <summary>
        ///     Flags edges as either boundary or nonboundary.
        /// </summary>
        // GLAPI void GLAPIENTRY glEdgeFlag(GLboolean flag);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glEdgeFlag(int flag);
        #endregion glEdgeFlag(int flag)

        #region glEdgeFlagv([In] int[] flags)
        /// <summary>
        ///     Flags edges as either boundary or nonboundary.
        /// </summary>
        // GLAPI void GLAPIENTRY glEdgeFlagv(const GLboolean *flag);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glEdgeFlagv([In] int[] flags);
        #endregion glEdgeFlagv([In] int[] flags)

        #region glEdgeFlagv([In] IntPtr flags)
        /// <summary>
        ///     Flags edges as either boundary or nonboundary.
        /// </summary>
        // GLAPI void GLAPIENTRY glEdgeFlagv(const GLboolean *flag);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glEdgeFlagv([In] IntPtr flags);
        #endregion glEdgeFlagv([In] IntPtr flags)

        #region glEdgeFlagv([In] int *flags)
        /// <summary>
        ///     Flags edges as either boundary or nonboundary.
        /// </summary>
        // GLAPI void GLAPIENTRY glEdgeFlagv(const GLboolean *flag);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glEdgeFlagv([In] int *flags);
        #endregion glEdgeFlagv([In] int *flags)

        #region glEnable(int capability)
        /// <summary>
        ///     Enables server-side GL capabilities.
        /// </summary>
        // GLAPI void GLAPIENTRY glEnable(GLenum cap);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glEnable(int capability);
        #endregion glEnable(int capability)

        #region glEnd()
        /// <summary>
        ///     Delimits the vertices of a primitive or a group of like primitives.
        /// </summary>
        // GLAPI void GLAPIENTRY glEnd(void);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glEnd();
        #endregion glEnd()

        #region glEndList()
        /// <summary>
        ///     Creates or replaces a display list.
        /// </summary>
        // GLAPI void GLAPIENTRY glEndList(void);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glEndList();
        #endregion glEndList()

        #region glFinish()
        /// <summary>
        ///     Blocks until all GL execution is complete.
        /// </summary>
        // GLAPI void GLAPIENTRY glFinish(void);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glFinish();
        #endregion glFinish()

        #region glFlush()
        /// <summary>
        ///     Forces execution of GL commands in finite time.
        /// </summary>
        // GLAPI void GLAPIENTRY glFlush(void);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glFlush();
        #endregion glFlush()

        #region glFrontFace(int orientation)
        /// <summary>
        ///     Defines front and back facing polygons.
        /// </summary>
        // GLAPI void GLAPIENTRY glFrontFace(GLenum mode);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glFrontFace(int orientation);
        #endregion glFrontFace(int orientation)

        #region glFrustum(double left, double right, double bottom, double top, double zNear, double zFar)
        /// <summary>
        ///     Multiplies the current matrix by a perspective matrix.
        /// </summary>
        // GLAPI void GLAPIENTRY glFrustum(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble near_val, GLdouble far_val);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glFrustum(double left, double right, double bottom, double top, double zNear, double zFar);
        #endregion glFrustum(double left, double right, double bottom, double top, double zNear, double zFar)

        #region int glGenLists(int number)
        /// <summary>
        ///     Generates a contiguous set of empty display lists.
        /// </summary>
        // GLAPI GLuint GLAPIENTRY glGenLists(GLsizei range);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern int glGenLists(int number);
        #endregion int glGenLists(int number)

        #region glGetBooleanv(int parameter, [Out] int[] buffer)
        /// <summary>
        ///     Returns the value or values of a selected parameter.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetBooleanv(GLenum pname, GLboolean *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glGetBooleanv(int parameter, [Out] int[] buffer);
        #endregion glGetBooleanv(int parameter, [Out] int[] buffer)

        #region glGetBooleanv(int parameter, out int buffer)
        /// <summary>
        ///     Returns the value or values of a selected parameter.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetBooleanv(GLenum pname, GLboolean *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glGetBooleanv(int parameter, out int buffer);
        #endregion glGetBooleanv(int parameter, out int buffer)

        #region glGetBooleanv(int parameter, [Out] IntPtr buffer)
        /// <summary>
        ///     Returns the value or values of a selected parameter.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetBooleanv(GLenum pname, GLboolean *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glGetBooleanv(int parameter, [Out] IntPtr buffer);
        #endregion glGetBooleanv(int parameter, [Out] IntPtr buffer)

        #region glGetBooleanv(int parameter, [Out] int *buffer)
        /// <summary>
        ///     Returns the value or values of a selected parameter.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetBooleanv(GLenum pname, GLboolean *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glGetBooleanv(int parameter, [Out] int *buffer);
        #endregion glGetBooleanv(int parameter, [Out] int *buffer)

        #region glGetClipPlane(int plane, [Out] double[] equation)
        /// <summary>
        ///     Returns the coefficients of the specified clipping plane.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetClipPlane(GLenum plane, GLdouble *equation);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glGetClipPlane(int plane, [Out] double[] equation);
        #endregion glGetClipPlane(int plane, [Out] double[] equation)

        #region glGetClipPlane(int plane, [Out] IntPtr equation)
        /// <summary>
        ///     Returns the coefficients of the specified clipping plane.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetClipPlane(GLenum plane, GLdouble *equation);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glGetClipPlane(int plane, [Out] IntPtr equation);
        #endregion glGetClipPlane(int plane, [Out] IntPtr equation)

        #region glGetClipPlane(int plane, [Out] double *equation)
        /// <summary>
        ///     Returns the coefficients of the specified clipping plane.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetClipPlane(GLenum plane, GLdouble *equation);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glGetClipPlane(int plane, [Out] double *equation);
        #endregion glGetClipPlane(int plane, [Out] double *equation)

        #region glGetDoublev(int parameter, [Out] double[] buffer)
        /// <summary>
        ///     Returns the value or values of a selected parameter.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetDoublev(GLenum pname, GLdouble *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glGetDoublev(int parameter, [Out] double[] buffer);
        #endregion glGetDoublev(int parameter, [Out] double[] buffer)

        #region glGetDoublev(int parameter, out double buffer)
        /// <summary>
        ///     Returns the value or values of a selected parameter.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetDoublev(GLenum pname, GLdouble *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glGetDoublev(int parameter, out double buffer);
        #endregion glGetDoublev(int parameter, out double buffer)

        #region glGetDoublev(int parameter, [Out] IntPtr buffer)
        /// <summary>
        ///     Returns the value or values of a selected parameter.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetDoublev(GLenum pname, GLdouble *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glGetDoublev(int parameter, [Out] IntPtr buffer);
        #endregion glGetDoublev(int parameter, [Out] IntPtr buffer)

        #region glGetDoublev(int parameter, [Out] double *buffer)
        /// <summary>
        ///     Returns the value or values of a selected parameter.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetDoublev(GLenum pname, GLdouble *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glGetDoublev(int parameter, [Out] double *buffer);
        #endregion glGetDoublev(int parameter, [Out] double *buffer)

        #region int glGetError()
        /// <summary>
        ///     Returns error information.
        /// </summary>
        // GLAPI GLenum GLAPIENTRY glGetError(void);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern int glGetError();
        #endregion int glGetError()

        #region glGetFloatv(int parameter, [Out] float[] buffer)
        /// <summary>
        ///     Returns the value or values of a selected parameter.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetFloatv(GLenum pname, GLfloat *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glGetFloatv(int parameter, [Out] float[] buffer);
        #endregion glGetFloatv(int parameter, [Out] float[] buffer)

        #region glGetFloatv(int parameter, out float buffer)
        /// <summary>
        ///     Returns the value or values of a selected parameter.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetFloatv(GLenum pname, GLfloat *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glGetFloatv(int parameter, out float buffer);
        #endregion glGetFloatv(int parameter, out float buffer)

        #region glGetFloatv(int parameter, [Out] IntPtr buffer)
        /// <summary>
        ///     Returns the value or values of a selected parameter.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetFloatv(GLenum pname, GLfloat *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glGetFloatv(int parameter, [Out] IntPtr buffer);
        #endregion glGetFloatv(int parameter, [Out] IntPtr buffer)

        #region glGetFloatv(int parameter, [Out] float *buffer)
        /// <summary>
        ///     Returns the value or values of a selected parameter.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetFloatv(GLenum pname, GLfloat *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glGetFloatv(int parameter, [Out] float *buffer);
        #endregion glGetFloatv(int parameter, [Out] float *buffer)

        #region glGetIntegerv(int parameter, [Out] int[] buffer)
        /// <summary>
        ///     The <b>glGetIntegerv</b> methor returns the value or values of a selected
        ///     parameter.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetIntegerv(GLenum pname, GLint *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glGetIntegerv(int parameter, [Out] int[] buffer);
        #endregion glGetIntegerv(int parameter, [Out] int[] buffer)

        #region glGetIntegerv(int parameter, out int buffer)
        /// <summary>
        ///     The <b>glGetIntegerv</b> methor returns the value or values of a selected
        ///     parameter.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetIntegerv(GLenum pname, GLint *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glGetIntegerv(int parameter, out int buffer);
        #endregion glGetIntegerv(int parameter, out int buffer)

        #region glGetIntegerv(int parameter, [Out] IntPtr buffer)
        /// <summary>
        ///     The <b>glGetIntegerv</b> methor returns the value or values of a selected
        ///     parameter.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetIntegerv(GLenum pname, GLint *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glGetIntegerv(int parameter, [Out] IntPtr buffer);
        #endregion glGetIntegerv(int parameter, [Out] IntPtr buffer)

        #region glGetIntegerv(int parameter, [Out] int *buffer)
        /// <summary>
        ///     The <b>glGetIntegerv</b> methor returns the value or values of a selected
        ///     parameter.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetIntegerv(GLenum pname, GLint *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glGetIntegerv(int parameter, [Out] int *buffer);
        #endregion glGetIntegerv(int parameter, [Out] int *buffer)

        #region glGetLightfv(int light, int parameter, [Out] float[] buffer)
        /// <summary>
        ///     Returns light source parameter values.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetLightfv(GLenum light, GLenum pname, GLfloat *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glGetLightfv(int light, int parameter, [Out] float[] buffer);
        #endregion glGetLightfv(int light, int parameter, [Out] float[] buffer)

        #region glGetLightfv(int light, int parameter, out float buffer)
        /// <summary>
        ///     Returns light source parameter values.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetLightfv(GLenum light, GLenum pname, GLfloat *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glGetLightfv(int light, int parameter, out float buffer);
        #endregion glGetLightfv(int light, int parameter, out float buffer)

        #region glGetLightfv(int light, int parameter, [Out] IntPtr buffer)
        /// <summary>
        ///     Returns light source parameter values.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetLightfv(GLenum light, GLenum pname, GLfloat *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glGetLightfv(int light, int parameter, [Out] IntPtr buffer);
        #endregion glGetLightfv(int light, int parameter, [Out] IntPtr buffer)

        #region glGetLightfv(int light, int parameter, [Out] float *buffer)
        /// <summary>
        ///     Returns light source parameter values.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetLightfv(GLenum light, GLenum pname, GLfloat *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glGetLightfv(int light, int parameter, [Out] float *buffer);
        #endregion glGetLightfv(int light, int parameter, [Out] float *buffer)

        #region glGetLightiv(int light, int parameter, [Out] int[] buffer)
        /// <summary>
        ///     Returns light source parameter values.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetLightiv(GLenum light, GLenum pname, GLint *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glGetLightiv(int light, int parameter, [Out] int[] buffer);
        #endregion glGetLightiv(int light, int parameter, [Out] int[] buffer)

        #region glGetLightiv(int light, int parameter, out int buffer)
        /// <summary>
        ///     Returns light source parameter values.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetLightiv(GLenum light, GLenum pname, GLint *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glGetLightiv(int light, int parameter, out int buffer);
        #endregion glGetLightiv(int light, int parameter, out int buffer)

        #region glGetLightiv(int light, int parameter, [Out] IntPtr buffer)
        /// <summary>
        ///     Returns light source parameter values.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetLightiv(GLenum light, GLenum pname, GLint *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glGetLightiv(int light, int parameter, [Out] IntPtr buffer);
        #endregion glGetLightiv(int light, int parameter, [Out] IntPtr buffer)

        #region glGetLightiv(int light, int parameter, [Out] int *buffer)
        /// <summary>
        ///     Returns light source parameter values.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetLightiv(GLenum light, GLenum pname, GLint *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glGetLightiv(int light, int parameter, [Out] int *buffer);
        #endregion glGetLightiv(int light, int parameter, [Out] int *buffer)

        #region glGetMapdv(int target, int query, [Out] double[] buffer)
        /// <summary>
        ///     Returns evaluator parameters.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetMapdv(GLenum target, GLenum query, GLdouble *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glGetMapdv(int target, int query, [Out] double[] buffer);
        #endregion glGetMapdv(int target, int query, [Out] double[] buffer)

        #region glGetMapdv(int target, int query, out double buffer)
        /// <summary>
        ///     Returns evaluator parameters.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetMapdv(GLenum target, GLenum query, GLdouble *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glGetMapdv(int target, int query, out double buffer);
        #endregion glGetMapdv(int target, int query, out double buffer)

        #region glGetMapdv(int target, int query, [Out] IntPtr buffer)
        /// <summary>
        ///     Returns evaluator parameters.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetMapdv(GLenum target, GLenum query, GLdouble *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glGetMapdv(int target, int query, [Out] IntPtr buffer);
        #endregion glGetMapdv(int target, int query, [Out] IntPtr buffer)

        #region glGetMapdv(int target, int query, [Out] double *buffer)
        /// <summary>
        ///     Returns evaluator parameters.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetMapdv(GLenum target, GLenum query, GLdouble *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glGetMapdv(int target, int query, [Out] double *buffer);
        #endregion glGetMapdv(int target, int query, [Out] double *buffer)

        #region glGetMapfv(int target, int query, [Out] float[] buffer)
        /// <summary>
        ///     Returns evaluator parameters.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetMapfv(GLenum target, GLenum query, GLfloat *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glGetMapfv(int target, int query, [Out] float[] buffer);
        #endregion glGetMapfv(int target, int query, [Out] float[] buffer)

        #region glGetMapfv(int target, int query, out float buffer)
        /// <summary>
        ///     Returns evaluator parameters.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetMapfv(GLenum target, GLenum query, GLfloat *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glGetMapfv(int target, int query, out float buffer);
        #endregion glGetMapfv(int target, int query, out float buffer)

        #region glGetMapfv(int target, int query, [Out] IntPtr buffer)
        /// <summary>
        ///     Returns evaluator parameters.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetMapfv(GLenum target, GLenum query, GLfloat *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glGetMapfv(int target, int query, [Out] IntPtr buffer);
        #endregion glGetMapfv(int target, int query, [Out] IntPtr buffer)

        #region glGetMapfv(int target, int query, [Out] float *buffer)
        /// <summary>
        ///     Returns evaluator parameters.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetMapfv(GLenum target, GLenum query, GLfloat *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glGetMapfv(int target, int query, [Out] float *buffer);
        #endregion glGetMapfv(int target, int query, [Out] float *buffer)

        #region glGetMapiv(int target, int query, [Out] int[] buffer)
        /// <summary>
        ///     Returns evaluator parameters.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetMapiv(GLenum target, GLenum query, GLint *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glGetMapiv(int target, int query, [Out] int[] buffer);
        #endregion glGetMapiv(int target, int query, [Out] int[] buffer)

        #region glGetMapiv(int target, int query, out int buffer)
        /// <summary>
        ///     Returns evaluator parameters.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetMapiv(GLenum target, GLenum query, GLint *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glGetMapiv(int target, int query, out int buffer);
        #endregion glGetMapiv(int target, int query, out int buffer)

        #region glGetMapiv(int target, int query, [Out] IntPtr buffer)
        /// <summary>
        ///     Returns evaluator parameters.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetMapiv(GLenum target, GLenum query, GLint *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glGetMapiv(int target, int query, [Out] IntPtr buffer);
        #endregion glGetMapiv(int target, int query, [Out] IntPtr buffer)

        #region glGetMapiv(int target, int query, [Out] int *buffer)
        /// <summary>
        ///     Returns evaluator parameters.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetMapiv(GLenum target, GLenum query, GLint *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glGetMapiv(int target, int query, [Out] int *buffer);
        #endregion glGetMapiv(int target, int query, [Out] int *buffer)

        #region glGetMaterialfv(int face, int parameter, [Out] float[] buffer)
        /// <summary>
        ///     Returns material parameters.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetMaterialfv(GLenum face, GLenum pname, GLfloat *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glGetMaterialfv(int face, int parameter, [Out] float[] buffer);
        #endregion glGetMaterialfv(int face, int parameter, [Out] float[] buffer)

        #region glGetMaterialfv(int face, int parameter, out float buffer)
        /// <summary>
        ///     Returns material parameters.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetMaterialfv(GLenum face, GLenum pname, GLfloat *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glGetMaterialfv(int face, int parameter, out float buffer);
        #endregion glGetMaterialfv(int face, int parameter, out float buffer)

        #region glGetMaterialfv(int face, int parameter, [Out] IntPtr buffer)
        /// <summary>
        ///     Returns material parameters.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetMaterialfv(GLenum face, GLenum pname, GLfloat *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glGetMaterialfv(int face, int parameter, [Out] IntPtr buffer);
        #endregion glGetMaterialfv(int face, int parameter, [Out] IntPtr buffer)

        #region glGetMaterialfv(int face, int parameter, [Out] float *buffer)
        /// <summary>
        ///     Returns material parameters.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetMaterialfv(GLenum face, GLenum pname, GLfloat *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glGetMaterialfv(int face, int parameter, [Out] float *buffer);
        #endregion glGetMaterialfv(int face, int parameter, [Out] float *buffer)

        #region glGetMaterialiv(int face, int parameter, [Out] int[] buffer)
        /// <summary>
        ///     Returns material parameters.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetMaterialiv(GLenum face, GLenum pname, GLint *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glGetMaterialiv(int face, int parameter, [Out] int[] buffer);
        #endregion glGetMaterialiv(int face, int parameter, [Out] int[] buffer)

        #region glGetMaterialiv(int face, int parameter, out int buffer)
        /// <summary>
        ///     Returns material parameters.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetMaterialiv(GLenum face, GLenum pname, GLint *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glGetMaterialiv(int face, int parameter, out int buffer);
        #endregion glGetMaterialiv(int face, int parameter, out int buffer)

        #region glGetMaterialiv(int face, int parameter, [Out] IntPtr buffer)
        /// <summary>
        ///     Returns material parameters.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetMaterialiv(GLenum face, GLenum pname, GLint *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glGetMaterialiv(int face, int parameter, [Out] IntPtr buffer);
        #endregion glGetMaterialiv(int face, int parameter, [Out] IntPtr buffer)

        #region glGetMaterialiv(int face, int parameter, [Out] int *buffer)
        /// <summary>
        ///     Returns material parameters.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetMaterialiv(GLenum face, GLenum pname, GLint *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glGetMaterialiv(int face, int parameter, [Out] int *buffer);
        #endregion glGetMaterialiv(int face, int parameter, [Out] int *buffer)

        #region glGetPixelMapfv(int pixelMap, [Out] float[] buffer)
        /// <summary>
        ///     Returns the specified pixel map.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetPixelMapfv(GLenum map, GLfloat *values);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glGetPixelMapfv(int pixelMap, [Out] float[] buffer);
        #endregion glGetPixelMapfv(int pixelMap, [Out] float[] buffer)

        #region glGetPixelMapfv(int pixelMap, out float buffer)
        /// <summary>
        ///     Returns the specified pixel map.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetPixelMapfv(GLenum map, GLfloat *values);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glGetPixelMapfv(int pixelMap, out float buffer);
        #endregion glGetPixelMapfv(int pixelMap, out float buffer)

        #region glGetPixelMapfv(int pixelMap, [Out] IntPtr buffer)
        /// <summary>
        ///     Returns the specified pixel map.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetPixelMapfv(GLenum map, GLfloat *values);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glGetPixelMapfv(int pixelMap, [Out] IntPtr buffer);
        #endregion glGetPixelMapfv(int pixelMap, [Out] IntPtr buffer)

        #region glGetPixelMapfv(int pixelMap, [Out] float *buffer)
        /// <summary>
        ///     Returns the specified pixel map.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetPixelMapfv(GLenum map, GLfloat *values);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glGetPixelMapfv(int pixelMap, [Out] float *buffer);
        #endregion glGetPixelMapfv(int pixelMap, [Out] float *buffer)

        #region glGetPixelMapuiv(int pixelMap, [Out] int[] buffer)
        /// <summary>
        ///     Returns the specified pixel map.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetPixelMapuiv(GLenum map, GLuint *values);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glGetPixelMapuiv(int pixelMap, [Out] int[] buffer);
        #endregion glGetPixelMapuiv(int pixelMap, [Out] int[] buffer)

        #region glGetPixelMapuiv(int pixelMap, out int buffer)
        /// <summary>
        ///     Returns the specified pixel map.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetPixelMapuiv(GLenum map, GLuint *values);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glGetPixelMapuiv(int pixelMap, out int buffer);
        #endregion glGetPixelMapuiv(int pixelMap, out int buffer)

        #region glGetPixelMapuiv(int pixelMap, [Out] uint[] buffer)
        /// <summary>
        ///     Returns the specified pixel map.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetPixelMapuiv(GLenum map, GLuint *values);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glGetPixelMapuiv(int pixelMap, [Out] uint[] buffer);
        #endregion glGetPixelMapuiv(int pixelMap, [Out] uint[] buffer)

        #region glGetPixelMapuiv(int pixelMap, out uint buffer)
        /// <summary>
        ///     Returns the specified pixel map.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetPixelMapuiv(GLenum map, GLuint *values);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glGetPixelMapuiv(int pixelMap, out uint buffer);
        #endregion glGetPixelMapuiv(int pixelMap, out uint buffer)

        #region glGetPixelMapuiv(int pixelMap, [Out] IntPtr buffer)
        /// <summary>
        ///     Returns the specified pixel map.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetPixelMapuiv(GLenum map, GLuint *values);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glGetPixelMapuiv(int pixelMap, [Out] IntPtr buffer);
        #endregion glGetPixelMapuiv(int pixelMap, [Out] IntPtr buffer)

        #region glGetPixelMapuiv(int pixelMap, [Out] int *buffer)
        /// <summary>
        ///     Returns the specified pixel map.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetPixelMapuiv(GLenum map, GLuint *values);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glGetPixelMapuiv(int pixelMap, [Out] int *buffer);
        #endregion glGetPixelMapuiv(int pixelMap, [Out] int *buffer)

        #region glGetPixelMapuiv(int pixelMap, [Out] uint *buffer)
        /// <summary>
        ///     Returns the specified pixel map.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetPixelMapuiv(GLenum map, GLuint *values);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glGetPixelMapuiv(int pixelMap, [Out] uint *buffer);
        #endregion glGetPixelMapuiv(int pixelMap, [Out] uint *buffer)

        #region glGetPixelMapusv(int pixelMap, [Out] short[] buffer)
        /// <summary>
        ///     Returns the specified pixel map.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetPixelMapusv(GLenum map, GLushort *values);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glGetPixelMapusv(int pixelMap, [Out] short[] buffer);
        #endregion glGetPixelMapusv(int pixelMap, [Out] short[] buffer)

        #region glGetPixelMapusv(int pixelMap, out short buffer)
        /// <summary>
        ///     Returns the specified pixel map.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetPixelMapusv(GLenum map, GLushort *values);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glGetPixelMapusv(int pixelMap, out short buffer);
        #endregion glGetPixelMapusv(int pixelMap, out short buffer)

        #region glGetPixelMapusv(int pixelMap, [Out] ushort[] buffer)
        /// <summary>
        ///     Returns the specified pixel map.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetPixelMapusv(GLenum map, GLushort *values);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glGetPixelMapusv(int pixelMap, [Out] ushort[] buffer);
        #endregion glGetPixelMapusv(int pixelMap, [Out] ushort[] buffer)

        #region glGetPixelMapusv(int pixelMap, out ushort buffer)
        /// <summary>
        ///     Returns the specified pixel map.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetPixelMapusv(GLenum map, GLushort *values);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glGetPixelMapusv(int pixelMap, out ushort buffer);
        #endregion glGetPixelMapusv(int pixelMap, out ushort buffer)

        #region glGetPixelMapusv(int pixelMap, [Out] IntPtr buffer)
        /// <summary>
        ///     Returns the specified pixel map.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetPixelMapusv(GLenum map, GLushort *values);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glGetPixelMapusv(int pixelMap, [Out] IntPtr buffer);
        #endregion glGetPixelMapusv(int pixelMap, [Out] IntPtr buffer)

        #region glGetPixelMapusv(int pixelMap, [Out] short *buffer)
        /// <summary>
        ///     Returns the specified pixel map.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetPixelMapusv(GLenum map, GLushort *values);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glGetPixelMapusv(int pixelMap, [Out] short *buffer);
        #endregion glGetPixelMapusv(int pixelMap, [Out] short *buffer)

        #region glGetPixelMapusv(int pixelMap, [Out] ushort *buffer)
        /// <summary>
        ///     Returns the specified pixel map.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetPixelMapusv(GLenum map, GLushort *values);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glGetPixelMapusv(int pixelMap, [Out] ushort *buffer);
        #endregion glGetPixelMapusv(int pixelMap, [Out] ushort *buffer)

        #region glGetPolygonStipple([Out] byte[] stipplePattern)
        /// <summary>
        ///     Returns the polygon stipple pattern.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetPolygonStipple(GLubyte *mask);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glGetPolygonStipple([Out] byte[] stipplePattern);
        #endregion glGetPolygonStipple([Out] byte[] stipplePattern)

        #region glGetPolygonStipple(out byte stipplePattern)
        /// <summary>
        ///     Returns the polygon stipple pattern.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetPolygonStipple(GLubyte *mask);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glGetPolygonStipple(out byte stipplePattern);
        #endregion glGetPolygonStipple(out byte stipplePattern)

        #region glGetPolygonStipple([Out] IntPtr stipplePattern)
        /// <summary>
        ///     Returns the polygon stipple pattern.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetPolygonStipple(GLubyte *mask);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glGetPolygonStipple([Out] IntPtr stipplePattern);
        #endregion glGetPolygonStipple([Out] IntPtr stipplePattern)

        #region glGetPolygonStipple([Out] byte *stipplePattern)
        /// <summary>
        ///     Returns the polygon stipple pattern.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetPolygonStipple(GLubyte *mask);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glGetPolygonStipple([Out] byte *stipplePattern);
        #endregion glGetPolygonStipple([Out] byte *stipplePattern)

        #region IntPtr glGetStringInternal(int name)
        /// <summary>
        ///     Returns a string describing the current GL connection.
        /// </summary>
        // GLAPI const GLubyte* GLAPIENTRY glGetString(GLenum name);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, EntryPoint="glGetString"), SuppressUnmanagedCodeSecurity]
        private static extern IntPtr glGetStringInternal(int name);
        #endregion IntPtr glGetStringInternal(int name)

        #region string glGetString(int name)
        /// <summary>
        ///     Returns a string describing the current GL connection.
        /// </summary>
        // GLAPI const GLubyte* GLAPIENTRY glGetString(GLenum name);
        public static string glGetString(int name) {
            return Marshal.PtrToStringAnsi(glGetStringInternal(name));
        }
        #endregion string glGetString(int name)

        #region glGetTexEnvfv(int textureEnvironment, int parameter, [Out] float[] buffer)
        /// <summary>
        ///     Returns texture environment parameters.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetTexEnvfv(GLenum target, GLenum pname, GLfloat *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glGetTexEnvfv(int textureEnvironment, int parameter, [Out] float[] buffer);
        #endregion glGetTexEnvfv(int textureEnvironment, int parameter, [Out] float[] buffer)

        #region glGetTexEnvfv(int textureEnvironment, int parameter, out float buffer)
        /// <summary>
        ///     Returns texture environment parameters.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetTexEnvfv(GLenum target, GLenum pname, GLfloat *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glGetTexEnvfv(int textureEnvironment, int parameter, out float buffer);
        #endregion glGetTexEnvfv(int textureEnvironment, int parameter, out float buffer)

        #region glGetTexEnvfv(int textureEnvironment, int parameter, [Out] IntPtr buffer)
        /// <summary>
        ///     Returns texture environment parameters.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetTexEnvfv(GLenum target, GLenum pname, GLfloat *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glGetTexEnvfv(int textureEnvironment, int parameter, [Out] IntPtr buffer);
        #endregion glGetTexEnvfv(int textureEnvironment, int parameter, [Out] IntPtr buffer)

        #region glGetTexEnvfv(int textureEnvironment, int parameter, [Out] float *buffer)
        /// <summary>
        ///     Returns texture environment parameters.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetTexEnvfv(GLenum target, GLenum pname, GLfloat *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glGetTexEnvfv(int textureEnvironment, int parameter, [Out] float *buffer);
        #endregion glGetTexEnvfv(int textureEnvironment, int parameter, [Out] float *buffer)

        #region glGetTexEnviv(int textureEnvironment, int parameter, [Out] int[] buffer)
        /// <summary>
        ///     Returns texture environment parameters.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetTexEnviv(GLenum target, GLenum pname, GLint *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glGetTexEnviv(int textureEnvironment, int parameter, [Out] int[] buffer);
        #endregion glGetTexEnviv(int textureEnvironment, int parameter, [Out] int[] buffer)

        #region glGetTexEnviv(int textureEnvironment, int parameter, out int buffer)
        /// <summary>
        ///     Returns texture environment parameters.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetTexEnviv(GLenum target, GLenum pname, GLint *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glGetTexEnviv(int textureEnvironment, int parameter, out int buffer);
        #endregion glGetTexEnviv(int textureEnvironment, int parameter, out int buffer)

        #region glGetTexEnviv(int textureEnvironment, int parameter, [Out] IntPtr buffer)
        /// <summary>
        ///     Returns texture environment parameters.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetTexEnviv(GLenum target, GLenum pname, GLint *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glGetTexEnviv(int textureEnvironment, int parameter, [Out] IntPtr buffer);
        #endregion glGetTexEnviv(int textureEnvironment, int parameter, [Out] IntPtr buffer)

        #region glGetTexEnviv(int textureEnvironment, int parameter, [Out] int *buffer)
        /// <summary>
        ///     Returns texture environment parameters.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetTexEnviv(GLenum target, GLenum pname, GLint *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glGetTexEnviv(int textureEnvironment, int parameter, [Out] int *buffer);
        #endregion glGetTexEnviv(int textureEnvironment, int parameter, [Out] int *buffer)

        #region glGetTexGendv(int textureCoordinate, int parameter, [Out] double[] buffer)
        /// <summary>
        ///     Returns texture coordinate generation parameters.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetTexGendv(GLenum coord, GLenum pname, GLdouble *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glGetTexGendv(int textureCoordinate, int parameter, [Out] double[] buffer);
        #endregion glGetTexGendv(int textureCoordinate, int parameter, [Out] double[] buffer)

        #region glGetTexGendv(int textureCoordinate, int parameter, out double buffer)
        /// <summary>
        ///     Returns texture coordinate generation parameters.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetTexGendv(GLenum coord, GLenum pname, GLdouble *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glGetTexGendv(int textureCoordinate, int parameter, out double buffer);
        #endregion glGetTexGendv(int textureCoordinate, int parameter, out double buffer)

        #region glGetTexGendv(int textureCoordinate, int parameter, [Out] IntPtr buffer)
        /// <summary>
        ///     Returns texture coordinate generation parameters.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetTexGendv(GLenum coord, GLenum pname, GLdouble *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glGetTexGendv(int textureCoordinate, int parameter, [Out] IntPtr buffer);
        #endregion glGetTexGendv(int textureCoordinate, int parameter, [Out] IntPtr buffer)

        #region glGetTexGendv(int textureCoordinate, int parameter, [Out] double *buffer)
        /// <summary>
        ///     Returns texture coordinate generation parameters.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetTexGendv(GLenum coord, GLenum pname, GLdouble *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glGetTexGendv(int textureCoordinate, int parameter, [Out] double *buffer);
        #endregion glGetTexGendv(int textureCoordinate, int parameter, [Out] double *buffer)

        #region glGetTexGenfv(int textureCoordinate, int parameter, [Out] float[] buffer)
        /// <summary>
        ///     Returns texture coordinate generation parameters.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetTexGenfv(GLenum coord, GLenum pname, GLfloat *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glGetTexGenfv(int textureCoordinate, int parameter, [Out] float[] buffer);
        #endregion glGetTexGenfv(int textureCoordinate, int parameter, [Out] float[] buffer)

        #region glGetTexGenfv(int textureCoordinate, int parameter, out float buffer)
        /// <summary>
        ///     Returns texture coordinate generation parameters.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetTexGenfv(GLenum coord, GLenum pname, GLfloat *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glGetTexGenfv(int textureCoordinate, int parameter, out float buffer);
        #endregion glGetTexGenfv(int textureCoordinate, int parameter, out float buffer)

        #region glGetTexGenfv(int textureCoordinate, int parameter, [Out] IntPtr buffer)
        /// <summary>
        ///     Returns texture coordinate generation parameters.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetTexGenfv(GLenum coord, GLenum pname, GLfloat *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glGetTexGenfv(int textureCoordinate, int parameter, [Out] IntPtr buffer);
        #endregion glGetTexGenfv(int textureCoordinate, int parameter, [Out] IntPtr buffer)

        #region glGetTexGenfv(int textureCoordinate, int parameter, [Out] float *buffer)
        /// <summary>
        ///     Returns texture coordinate generation parameters.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetTexGenfv(GLenum coord, GLenum pname, GLfloat *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glGetTexGenfv(int textureCoordinate, int parameter, [Out] float *buffer);
        #endregion glGetTexGenfv(int textureCoordinate, int parameter, [Out] float *buffer)

        #region glGetTexGeniv(int textureCoordinate, int parameter, [Out] int[] buffer)
        /// <summary>
        ///     Returns texture coordinate generation parameters.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetTexGeniv(GLenum coord, GLenum pname, GLint *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glGetTexGeniv(int textureCoordinate, int parameter, [Out] int[] buffer);
        #endregion glGetTexGeniv(int textureCoordinate, int parameter, [Out] int[] buffer)

        #region glGetTexGeniv(int textureCoordinate, int parameter, out int buffer)
        /// <summary>
        ///     Returns texture coordinate generation parameters.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetTexGeniv(GLenum coord, GLenum pname, GLint *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glGetTexGeniv(int textureCoordinate, int parameter, out int buffer);
        #endregion glGetTexGeniv(int textureCoordinate, int parameter, out int buffer)

        #region glGetTexGeniv(int textureCoordinate, int parameter, [Out] IntPtr buffer)
        /// <summary>
        ///     Returns texture coordinate generation parameters.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetTexGeniv(GLenum coord, GLenum pname, GLint *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glGetTexGeniv(int textureCoordinate, int parameter, [Out] IntPtr buffer);
        #endregion glGetTexGeniv(int textureCoordinate, int parameter, [Out] IntPtr buffer)

        #region glGetTexGeniv(int textureCoordinate, int parameter, [Out] int *buffer)
        /// <summary>
        ///     Returns texture coordinate generation parameters.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetTexGeniv(GLenum coord, GLenum pname, GLint *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glGetTexGeniv(int textureCoordinate, int parameter, [Out] int *buffer);
        #endregion glGetTexGeniv(int textureCoordinate, int parameter, [Out] int *buffer)

        #region glGetTexImage(int texture, int levelOfDetail, int pixelFormat, int pixelType, [Out] byte[] pixels)
        /// <summary>
        ///     Returns a texture image.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glGetTexImage(int texture, int levelOfDetail, int pixelFormat, int pixelType, [Out] byte[] pixels);
        #endregion glGetTexImage(int texture, int levelOfDetail, int pixelFormat, int pixelType, [Out] byte[] pixels)

        #region glGetTexImage(int texture, int levelOfDetail, int pixelFormat, int pixelType, [Out] byte[ , ] pixels)
        /// <summary>
        ///     Returns a texture image.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glGetTexImage(int texture, int levelOfDetail, int pixelFormat, int pixelType, [Out] byte[ , ] pixels);
        #endregion glGetTexImage(int texture, int levelOfDetail, int pixelFormat, int pixelType, [Out] byte[ , ] pixels)

        #region glGetTexImage(int texture, int levelOfDetail, int pixelFormat, int pixelType, [Out] byte[ , , ] pixels)
        /// <summary>
        ///     Returns a texture image.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glGetTexImage(int texture, int levelOfDetail, int pixelFormat, int pixelType, [Out] byte[ , , ] pixels);
        #endregion glGetTexImage(int texture, int levelOfDetail, int pixelFormat, int pixelType, [Out] byte[ , , ] pixels)

        #region glGetTexImage(int texture, int levelOfDetail, int pixelFormat, int pixelType, [Out] double[] pixels)
        /// <summary>
        ///     Returns a texture image.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glGetTexImage(int texture, int levelOfDetail, int pixelFormat, int pixelType, [Out] double[] pixels);
        #endregion glGetTexImage(int texture, int levelOfDetail, int pixelFormat, int pixelType, [Out] double[] pixels)

        #region glGetTexImage(int texture, int levelOfDetail, int pixelFormat, int pixelType, [Out] double[ , ] pixels)
        /// <summary>
        ///     Returns a texture image.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glGetTexImage(int texture, int levelOfDetail, int pixelFormat, int pixelType, [Out] double[ , ] pixels);
        #endregion glGetTexImage(int texture, int levelOfDetail, int pixelFormat, int pixelType, [Out] double[ , ] pixels)

        #region glGetTexImage(int texture, int levelOfDetail, int pixelFormat, int pixelType, [Out] double[ , , ] pixels)
        /// <summary>
        ///     Returns a texture image.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glGetTexImage(int texture, int levelOfDetail, int pixelFormat, int pixelType, [Out] double[ , , ] pixels);
        #endregion glGetTexImage(int texture, int levelOfDetail, int pixelFormat, int pixelType, [Out] double[ , , ] pixels)

        #region glGetTexImage(int texture, int levelOfDetail, int pixelFormat, int pixelType, [Out] short[] pixels)
        /// <summary>
        ///     Returns a texture image.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glGetTexImage(int texture, int levelOfDetail, int pixelFormat, int pixelType, [Out] short[] pixels);
        #endregion glGetTexImage(int texture, int levelOfDetail, int pixelFormat, int pixelType, [Out] short[] pixels)

        #region glGetTexImage(int texture, int levelOfDetail, int pixelFormat, int pixelType, [Out] short[ , ] pixels)
        /// <summary>
        ///     Returns a texture image.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glGetTexImage(int texture, int levelOfDetail, int pixelFormat, int pixelType, [Out] short[ , ] pixels);
        #endregion glGetTexImage(int texture, int levelOfDetail, int pixelFormat, int pixelType, [Out] short[ , ] pixels)

        #region glGetTexImage(int texture, int levelOfDetail, int pixelFormat, int pixelType, [Out] short[ , , ] pixels)
        /// <summary>
        ///     Returns a texture image.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glGetTexImage(int texture, int levelOfDetail, int pixelFormat, int pixelType, [Out] short[ , , ] pixels);
        #endregion glGetTexImage(int texture, int levelOfDetail, int pixelFormat, int pixelType, [Out] short[ , , ] pixels)

        #region glGetTexImage(int texture, int levelOfDetail, int pixelFormat, int pixelType, [Out] int[] pixels)
        /// <summary>
        ///     Returns a texture image.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glGetTexImage(int texture, int levelOfDetail, int pixelFormat, int pixelType, [Out] int[] pixels);
        #endregion glGetTexImage(int texture, int levelOfDetail, int pixelFormat, int pixelType, [Out] int[] pixels)

        #region glGetTexImage(int texture, int levelOfDetail, int pixelFormat, int pixelType, [Out] int[ , ] pixels)
        /// <summary>
        ///     Returns a texture image.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glGetTexImage(int texture, int levelOfDetail, int pixelFormat, int pixelType, [Out] int[ , ] pixels);
        #endregion glGetTexImage(int texture, int levelOfDetail, int pixelFormat, int pixelType, [Out] int[ , ] pixels)

        #region glGetTexImage(int texture, int levelOfDetail, int pixelFormat, int pixelType, [Out] int[ , , ] pixels)
        /// <summary>
        ///     Returns a texture image.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glGetTexImage(int texture, int levelOfDetail, int pixelFormat, int pixelType, [Out] int[ , , ] pixels);
        #endregion glGetTexImage(int texture, int levelOfDetail, int pixelFormat, int pixelType, [Out] int[ , , ] pixels)

        #region glGetTexImage(int texture, int levelOfDetail, int pixelFormat, int pixelType, [Out] float[] pixels)
        /// <summary>
        ///     Returns a texture image.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glGetTexImage(int texture, int levelOfDetail, int pixelFormat, int pixelType, [Out] float[] pixels);
        #endregion glGetTexImage(int texture, int levelOfDetail, int pixelFormat, int pixelType, [Out] float[] pixels)

        #region glGetTexImage(int texture, int levelOfDetail, int pixelFormat, int pixelType, [Out] float[ , ] pixels)
        /// <summary>
        ///     Returns a texture image.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glGetTexImage(int texture, int levelOfDetail, int pixelFormat, int pixelType, [Out] float[ , ] pixels);
        #endregion glGetTexImage(int texture, int levelOfDetail, int pixelFormat, int pixelType, [Out] float[ , ] pixels)

        #region glGetTexImage(int texture, int levelOfDetail, int pixelFormat, int pixelType, [Out] float[ , , ] pixels)
        /// <summary>
        ///     Returns a texture image.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glGetTexImage(int texture, int levelOfDetail, int pixelFormat, int pixelType, [Out] float[ , , ] pixels);
        #endregion glGetTexImage(int texture, int levelOfDetail, int pixelFormat, int pixelType, [Out] float[ , , ] pixels)

        #region glGetTexImage(int texture, int levelOfDetail, int pixelFormat, int pixelType, [Out] ushort[] pixels)
        /// <summary>
        ///     Returns a texture image.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glGetTexImage(int texture, int levelOfDetail, int pixelFormat, int pixelType, [Out] ushort[] pixels);
        #endregion glGetTexImage(int texture, int levelOfDetail, int pixelFormat, int pixelType, [Out] ushort[] pixels)

        #region glGetTexImage(int texture, int levelOfDetail, int pixelFormat, int pixelType, [Out] ushort[ , ] pixels)
        /// <summary>
        ///     Returns a texture image.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glGetTexImage(int texture, int levelOfDetail, int pixelFormat, int pixelType, [Out] ushort[ , ] pixels);
        #endregion glGetTexImage(int texture, int levelOfDetail, int pixelFormat, int pixelType, [Out] ushort[ , ] pixels)

        #region glGetTexImage(int texture, int levelOfDetail, int pixelFormat, int pixelType, [Out] ushort[ , , ] pixels)
        /// <summary>
        ///     Returns a texture image.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glGetTexImage(int texture, int levelOfDetail, int pixelFormat, int pixelType, [Out] ushort[ , , ] pixels);
        #endregion glGetTexImage(int texture, int levelOfDetail, int pixelFormat, int pixelType, [Out] ushort[ , , ] pixels)

        #region glGetTexImage(int texture, int levelOfDetail, int pixelFormat, int pixelType, [Out] uint[] pixels)
        /// <summary>
        ///     Returns a texture image.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glGetTexImage(int texture, int levelOfDetail, int pixelFormat, int pixelType, [Out] uint[] pixels);
        #endregion glGetTexImage(int texture, int levelOfDetail, int pixelFormat, int pixelType, [Out] uint[] pixels)

        #region glGetTexImage(int texture, int levelOfDetail, int pixelFormat, int pixelType, [Out] uint[ , ] pixels)
        /// <summary>
        ///     Returns a texture image.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glGetTexImage(int texture, int levelOfDetail, int pixelFormat, int pixelType, [Out] uint[ , ] pixels);
        #endregion glGetTexImage(int texture, int levelOfDetail, int pixelFormat, int pixelType, [Out] uint[ , ] pixels)

        #region glGetTexImage(int texture, int levelOfDetail, int pixelFormat, int pixelType, [Out] uint[ , , ] pixels)
        /// <summary>
        ///     Returns a texture image.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glGetTexImage(int texture, int levelOfDetail, int pixelFormat, int pixelType, [Out] uint[ , , ] pixels);
        #endregion glGetTexImage(int texture, int levelOfDetail, int pixelFormat, int pixelType, [Out] uint[ , , ] pixels)

        #region glGetTexImage(int texture, int levelOfDetail, int pixelFormat, int pixelType, [Out] IntPtr pixels)
        /// <summary>
        ///     Returns a texture image.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glGetTexImage(int texture, int levelOfDetail, int pixelFormat, int pixelType, [Out] IntPtr pixels);
        #endregion glGetTexImage(int texture, int levelOfDetail, int pixelFormat, int pixelType, [Out] IntPtr pixels)

        #region glGetTexImage(int texture, int levelOfDetail, int pixelFormat, int pixelType, [Out] void *pixels)
        /// <summary>
        ///     Returns a texture image.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glGetTexImage(int texture, int levelOfDetail, int pixelFormat, int pixelType, [Out] void *pixels);
        #endregion glGetTexImage(int texture, int levelOfDetail, int pixelFormat, int pixelType, [Out] void *pixels)

        #region glGetTexLevelParameterfv(int texture, int levelOfDetail, int parameter, [Out] float[] buffer)
        /// <summary>
        ///     Returns texture parameter values for a specific level of detail.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, GLfloat *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glGetTexLevelParameterfv(int texture, int levelOfDetail, int parameter, [Out] float[] buffer);
        #endregion glGetTexLevelParameterfv(int texture, int levelOfDetail, int parameter, [Out] float[] buffer)

        #region glGetTexLevelParameterfv(int texture, int levelOfDetail, int parameter, out float buffer)
        /// <summary>
        ///     Returns texture parameter values for a specific level of detail.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, GLfloat *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glGetTexLevelParameterfv(int texture, int levelOfDetail, int parameter, out float buffer);
        #endregion glGetTexLevelParameterfv(int texture, int levelOfDetail, int parameter, out float buffer)

        #region glGetTexLevelParameterfv(int texture, int levelOfDetail, int parameter, [Out] IntPtr buffer)
        /// <summary>
        ///     Returns texture parameter values for a specific level of detail.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, GLfloat *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glGetTexLevelParameterfv(int texture, int levelOfDetail, int parameter, [Out] IntPtr buffer);
        #endregion glGetTexLevelParameterfv(int texture, int levelOfDetail, int parameter, [Out] IntPtr buffer)

        #region glGetTexLevelParameterfv(int texture, int levelOfDetail, int parameter, [Out] float *buffer)
        /// <summary>
        ///     Returns texture parameter values for a specific level of detail.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, GLfloat *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glGetTexLevelParameterfv(int texture, int levelOfDetail, int parameter, [Out] float *buffer);
        #endregion glGetTexLevelParameterfv(int texture, int levelOfDetail, int parameter, [Out] float *buffer)

        #region glGetTexLevelParameteriv(int texture, int levelOfDetail, int parameter, [Out] int[] buffer)
        /// <summary>
        ///     Returns texture parameter values for a specific level of detail.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, GLint *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glGetTexLevelParameteriv(int texture, int levelOfDetail, int parameter, [Out] int[] buffer);
        #endregion glGetTexLevelParameteriv(int texture, int levelOfDetail, int parameter, [Out] int[] buffer)

        #region glGetTexLevelParameteriv(int texture, int levelOfDetail, int parameter, out int buffer)
        /// <summary>
        ///     Returns texture parameter values for a specific level of detail.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, GLint *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glGetTexLevelParameteriv(int texture, int levelOfDetail, int parameter, out int buffer);
        #endregion glGetTexLevelParameteriv(int texture, int levelOfDetail, int parameter, out int buffer)

        #region glGetTexLevelParameteriv(int texture, int levelOfDetail, int parameter, [Out] IntPtr buffer)
        /// <summary>
        ///     Returns texture parameter values for a specific level of detail.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, GLint *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glGetTexLevelParameteriv(int texture, int levelOfDetail, int parameter, [Out] IntPtr buffer);
        #endregion glGetTexLevelParameteriv(int texture, int levelOfDetail, int parameter, [Out] IntPtr buffer)

        #region glGetTexLevelParameteriv(int texture, int levelOfDetail, int parameter, [Out] int *buffer)
        /// <summary>
        ///     Returns texture parameter values for a specific level of detail.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, GLint *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glGetTexLevelParameteriv(int texture, int levelOfDetail, int parameter, [Out] int *buffer);
        #endregion glGetTexLevelParameteriv(int texture, int levelOfDetail, int parameter, [Out] int *buffer)

        #region glGetTexParameterfv(int texture, int parameter, [Out] float[] buffer)
        /// <summary>
        ///     Returns texture parameter values.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetTexParameterfv(GLenum target, GLenum pname, GLfloat *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glGetTexParameterfv(int texture, int parameter, [Out] float[] buffer);
        #endregion glGetTexParameterfv(int texture, int parameter, [Out] float[] buffer)

        #region glGetTexParameterfv(int texture, int parameter, out float buffer)
        /// <summary>
        ///     Returns texture parameter values.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetTexParameterfv(GLenum target, GLenum pname, GLfloat *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glGetTexParameterfv(int texture, int parameter, out float buffer);
        #endregion glGetTexParameterfv(int texture, int parameter, out float buffer)

        #region glGetTexParameterfv(int texture, int parameter, [Out] IntPtr buffer)
        /// <summary>
        ///     Returns texture parameter values.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetTexParameterfv(GLenum target, GLenum pname, GLfloat *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glGetTexParameterfv(int texture, int parameter, [Out] IntPtr buffer);
        #endregion glGetTexParameterfv(int texture, int parameter, [Out] IntPtr buffer)

        #region glGetTexParameterfv(int texture, int parameter, [Out] float *buffer)
        /// <summary>
        ///     Returns texture parameter values.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetTexParameterfv(GLenum target, GLenum pname, GLfloat *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glGetTexParameterfv(int texture, int parameter, [Out] float *buffer);
        #endregion glGetTexParameterfv(int texture, int parameter, [Out] float *buffer)

        #region glGetTexParameteriv(int texture, int parameter, [Out] int[] buffer)
        /// <summary>
        ///     Returns texture parameter values.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetTexParameteriv(GLenum target, GLenum pname, GLint *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glGetTexParameteriv(int texture, int parameter, [Out] int[] buffer);
        #endregion glGetTexParameteriv(int texture, int parameter, [Out] int[] buffer)

        #region glGetTexParameteriv(int texture, int parameter, out int buffer)
        /// <summary>
        ///     Returns texture parameter values.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetTexParameteriv(GLenum target, GLenum pname, GLint *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glGetTexParameteriv(int texture, int parameter, out int buffer);
        #endregion glGetTexParameteriv(int texture, int parameter, out int buffer)

        #region glGetTexParameteriv(int texture, int parameter, [Out] IntPtr buffer)
        /// <summary>
        ///     Returns texture parameter values.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetTexParameteriv(GLenum target, GLenum pname, GLint *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glGetTexParameteriv(int texture, int parameter, [Out] IntPtr buffer);
        #endregion glGetTexParameteriv(int texture, int parameter, [Out] IntPtr buffer)

        #region glGetTexParameteriv(int texture, int parameter, [Out] int *buffer)
        /// <summary>
        ///     Returns texture parameter values.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetTexParameteriv(GLenum target, GLenum pname, GLint *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glGetTexParameteriv(int texture, int parameter, [Out] int *buffer);
        #endregion glGetTexParameteriv(int texture, int parameter, [Out] int *buffer)

        #region glHint(int target, int mode)
        /// <summary>
        ///     Rpecifies implementation-specific hints.
        /// </summary>
        // GLAPI void GLAPIENTRY glHint(GLenum target, GLenum mode);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glHint(int target, int mode);
        #endregion glHint(int target, int mode)

        #region glIndexMask(int bitmask)
        /// <summary>
        ///     Controls the writing of individual bits in the color index buffers.
        /// </summary>
        // GLAPI void GLAPIENTRY glIndexMask(GLuint mask);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glIndexMask(int bitmask);
        #endregion glIndexMask(int bitmask)

        #region glIndexd(double colorIndex)
        /// <summary>
        ///     Sets the current color index.
        /// </summary>
        // GLAPI void GLAPIENTRY glIndexd(GLdouble c);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glIndexd(double colorIndex);
        #endregion glIndexd(double colorIndex)

        #region glIndexdv([In] double[] colorIndex)
        /// <summary>
        ///     Sets the current color index.
        /// </summary>
        // GLAPI void GLAPIENTRY glIndexdv(const GLdouble *c);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glIndexdv([In] double[] colorIndex);
        #endregion glIndexdv([In] double[] colorIndex)

        #region glIndexdv([In] IntPtr colorIndex)
        /// <summary>
        ///     Sets the current color index.
        /// </summary>
        // GLAPI void GLAPIENTRY glIndexdv(const GLdouble *c);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glIndexdv([In] IntPtr colorIndex);
        #endregion glIndexdv([In] IntPtr colorIndex)

        #region glIndexdv([In] double *colorIndex)
        /// <summary>
        ///     Sets the current color index.
        /// </summary>
        // GLAPI void GLAPIENTRY glIndexdv(const GLdouble *c);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glIndexdv([In] double *colorIndex);
        #endregion glIndexdv([In] double *colorIndex)

        #region glIndexf(float colorIndex)
        /// <summary>
        ///     Sets the current color index.
        /// </summary>
        // GLAPI void GLAPIENTRY glIndexf(GLfloat c);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glIndexf(float colorIndex);
        #endregion glIndexf(float colorIndex)

        #region glIndexfv([In] float[] colorIndex)
        /// <summary>
        ///     Sets the current color index.
        /// </summary>
        // GLAPI void GLAPIENTRY glIndexfv(const GLfloat *c);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glIndexfv([In] float[] colorIndex);
        #endregion glIndexfv([In] float[] colorIndex)

        #region glIndexfv([In] IntPtr colorIndex)
        /// <summary>
        ///     Sets the current color index.
        /// </summary>
        // GLAPI void GLAPIENTRY glIndexfv(const GLfloat *c);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glIndexfv([In] IntPtr colorIndex);
        #endregion glIndexfv([In] IntPtr colorIndex)

        #region glIndexfv([In] float *colorIndex)
        /// <summary>
        ///     Sets the current color index.
        /// </summary>
        // GLAPI void GLAPIENTRY glIndexfv(const GLfloat *c);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glIndexfv([In] float *colorIndex);
        #endregion glIndexfv([In] float *colorIndex)

        #region glIndexi(int colorIndex)
        /// <summary>
        ///     Sets the current color index.
        /// </summary>
        // GLAPI void GLAPIENTRY glIndexi(GLint c);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glIndexi(int colorIndex);
        #endregion glIndexi(int colorIndex)

        #region glIndexiv([In] int[] colorIndex)
        /// <summary>
        ///     Sets the current color index.
        /// </summary>
        // GLAPI void GLAPIENTRY glIndexiv(const GLint *c);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glIndexiv([In] int[] colorIndex);
        #endregion glIndexiv([In] int[] colorIndex)

        #region glIndexiv([In] IntPtr colorIndex)
        /// <summary>
        ///     Sets the current color index.
        /// </summary>
        // GLAPI void GLAPIENTRY glIndexiv(const GLint *c);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glIndexiv([In] IntPtr colorIndex);
        #endregion glIndexiv([In] IntPtr colorIndex)

        #region glIndexiv([In] int *colorIndex)
        /// <summary>
        ///     Sets the current color index.
        /// </summary>
        // GLAPI void GLAPIENTRY glIndexiv(const GLint *c);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glIndexiv([In] int *colorIndex);
        #endregion glIndexiv([In] int *colorIndex)

        #region glIndexs(short colorIndex)
        /// <summary>
        ///     Sets the current color index.
        /// </summary>
        // GLAPI void GLAPIENTRY glIndexs(GLshort c);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glIndexs(short colorIndex);
        #endregion glIndexs(short colorIndex)

        #region glIndexsv([In] short[] colorIndex)
        /// <summary>
        ///     Sets the current color index.
        /// </summary>
        // GLAPI void GLAPIENTRY glIndexsv(const GLshort *c);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glIndexsv([In] short[] colorIndex);
        #endregion glIndexsv([In] short[] colorIndex)

        #region glIndexsv([In] IntPtr colorIndex)
        /// <summary>
        ///     Sets the current color index.
        /// </summary>
        // GLAPI void GLAPIENTRY glIndexsv(const GLshort *c);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glIndexsv([In] IntPtr colorIndex);
        #endregion glIndexsv([In] IntPtr colorIndex)

        #region glIndexsv([In] short *colorIndex)
        /// <summary>
        ///     Ssets the current color index.
        /// </summary>
        // GLAPI void GLAPIENTRY glIndexsv(const GLshort *c);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glIndexsv([In] short *colorIndex);
        #endregion glIndexsv([In] short *colorIndex)

        #region int glIsEnabled(int capability)
        /// <summary>
        ///     Tests whether a capability is enabled.
        /// </summary>
        // GLAPI GLboolean GLAPIENTRY glIsEnabled(GLenum cap);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern int glIsEnabled(int capability);
        #endregion int glIsEnabled(int capability)

        #region int glIsList(int displayList)
        /// <summary>
        ///     Determines if a name corresponds to a display list.
        /// </summary>
        // GLAPI GLboolean GLAPIENTRY glIsList(GLuint list);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern int glIsList(int displayList);
        #endregion int glIsList(int displayList)

        #region int glIsTexture(int texture)
        /// <summary>
        ///     Determines if a name corresponds to a texture.
        /// </summary>
        // GLAPI GLboolean GLAPIENTRY glIsTexture(GLuint texture);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern int glIsTexture(int texture);
        #endregion int glIsTexture(int texture)

        #region glLightModelf(int lightingModel, float lightingValue)
        /// <summary>
        ///     Sets the lighting model parameters.
        /// </summary>
        // GLAPI void GLAPIENTRY glLightModelf(GLenum pname, GLfloat param);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glLightModelf(int lightingModel, float lightingValue);
        #endregion glLightModelf(int lightingModel, float lightingValue)

        #region glLightModelfv(int lightingModel, [In] float[] lightingValues)
        /// <summary>
        ///     Sets the lighting model parameters.
        /// </summary>
        // GLAPI void GLAPIENTRY glLightModelfv(GLenum pname, const GLfloat *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glLightModelfv(int lightingModel, [In] float[] lightingValues);
        #endregion glLightModelfv(int lightingModel, [In] float[] lightingValues)

        #region glLightModelfv(int lightingModel, [In] IntPtr lightingValues)
        /// <summary>
        ///     Sets the lighting model parameters.
        /// </summary>
        // GLAPI void GLAPIENTRY glLightModelfv(GLenum pname, const GLfloat *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glLightModelfv(int lightingModel, [In] IntPtr lightingValues);
        #endregion glLightModelfv(int lightingModel, [In] IntPtr lightingValues)

        #region glLightModelfv(int lightingModel, [In] float *lightingValues)
        /// <summary>
        ///     Sets the lighting model parameters.
        /// </summary>
        // GLAPI void GLAPIENTRY glLightModelfv(GLenum pname, const GLfloat *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glLightModelfv(int lightingModel, [In] float *lightingValues);
        #endregion glLightModelfv(int lightingModel, [In] float *lightingValues)

        #region glLightModeli(int lightingModel, int lightingValue)
        /// <summary>
        ///     Sets the lighting model parameters.
        /// </summary>
        // GLAPI void GLAPIENTRY glLightModeli(GLenum pname, GLint param);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glLightModeli(int lightingModel, int lightingValue);
        #endregion glLightModeli(int lightingModel, int lightingValue)

        #region glLightModeliv(int lightingModel, [In] int[] lightingValue)
        /// <summary>
        ///     Sets the lighting model parameters.
        /// </summary>
        // GLAPI void GLAPIENTRY glLightModeliv(GLenum pname, const GLint *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glLightModeliv(int lightingModel, [In] int[] lightingValue);
        #endregion glLightModeliv(int lightingModel, [In] int[] lightingValue)

        #region glLightModeliv(int lightingModel, [In] IntPtr lightingValue)
        /// <summary>
        ///     Sets the lighting model parameters.
        /// </summary>
        // GLAPI void GLAPIENTRY glLightModeliv(GLenum pname, const GLint *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glLightModeliv(int lightingModel, [In] IntPtr lightingValue);
        #endregion glLightModeliv(int lightingModel, [In] IntPtr lightingValue)

        #region glLightModeliv(int lightingModel, [In] int *lightingValue)
        /// <summary>
        ///     Sets the lighting model parameters.
        /// </summary>
        // GLAPI void GLAPIENTRY glLightModeliv(GLenum pname, const GLint *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glLightModeliv(int lightingModel, [In] int *lightingValue);
        #endregion glLightModeliv(int lightingModel, [In] int *lightingValue)

        #region glLightf(int light, int lightSource, float lightSourceValue)
        /// <summary>
        ///     Sets light source parameters.
        /// </summary>
        // GLAPI void GLAPIENTRY glLightf(GLenum light, GLenum pname, GLfloat param);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glLightf(int light, int lightSource, float lightSourceValue);
        #endregion glLightf(int light, int lightSource, float lightSourceValue)

        #region glLightfv(int light, int lightSource, [In] float[] lightSourceValue)
        /// <summary>
        /// Set light source parameters
        /// </summary>
        // GLAPI void GLAPIENTRY glLightfv(GLenum light, GLenum pname, const GLfloat *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glLightfv(int light, int lightSource, [In] float[] lightSourceValue);
        #endregion glLightfv(int light, int lightSource, [In] float[] lightSourceValue)

        #region glLightfv(int light, int lightSource, [In] IntPtr lightSourceValue)
        /// <summary>
        /// Set light source parameters
        /// </summary>
        // GLAPI void GLAPIENTRY glLightfv(GLenum light, GLenum pname, const GLfloat *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glLightfv(int light, int lightSource, [In] IntPtr lightSourceValue);
        #endregion glLightfv(int light, int lightSource, [In] IntPtr lightSourceValue)

        #region glLightfv(int light, int lightSource, [In] float *lightSourceValue)
        /// <summary>
        /// Set light source parameters
        /// </summary>
        // GLAPI void GLAPIENTRY glLightfv(GLenum light, GLenum pname, const GLfloat *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glLightfv(int light, int lightSource, [In] float *lightSourceValue);
        #endregion glLightfv(int light, int lightSource, [In] float *lightSourceValue)

        #region glLighti(int light, int lightSource, int lightSourceValue)
        /// <summary>
        ///     Sets light source parameters.
        /// </summary>
        // GLAPI void GLAPIENTRY glLighti(GLenum light, GLenum pname, GLint param);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glLighti(int light, int lightSource, int lightSourceValue);
        #endregion glLighti(int light, int lightSource, int lightSourceValue)

        #region glLightiv(int light, int lightSource, [In] int[] lightSourceValue)
        /// <summary>
        ///     Sets light source parameters.
        /// </summary>
        // GLAPI void GLAPIENTRY glLightiv(GLenum light, GLenum pname, const GLint *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glLightiv(int light, int lightSource, [In] int[] lightSourceValue);
        #endregion glLightiv(int light, int lightSource, [In] int[] lightSourceValue)

        #region glLightiv(int light, int lightSource, [In] IntPtr lightSourceValue)
        /// <summary>
        ///     Sets light source parameters.
        /// </summary>
        // GLAPI void GLAPIENTRY glLightiv(GLenum light, GLenum pname, const GLint *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glLightiv(int light, int lightSource, [In] IntPtr lightSourceValue);
        #endregion glLightiv(int light, int lightSource, [In] IntPtr lightSourceValue)

        #region glLightiv(int light, int lightSource, [In] int *lightSourceValue)
        /// <summary>
        ///     Sets light source parameters.
        /// </summary>
        // GLAPI void GLAPIENTRY glLightiv(GLenum light, GLenum pname, const GLint *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glLightiv(int light, int lightSource, [In] int *lightSourceValue);
        #endregion glLightiv(int light, int lightSource, [In] int *lightSourceValue)

        #region glLineStipple(int multiplier, short pattern)
        /// <summary>
        ///     Specifies the line stipple pattern.
        /// </summary>
        // GLAPI void GLAPIENTRY glLineStipple(GLint factor, GLushort pattern);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glLineStipple(int multiplier, short pattern);
        #endregion glLineStipple(int multiplier, short pattern)

        #region glLineStipple(int multiplier, ushort pattern)
        /// <summary>
        ///     Specifies the line stipple pattern.
        /// </summary>
        // GLAPI void GLAPIENTRY glLineStipple(GLint factor, GLushort pattern);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glLineStipple(int multiplier, ushort pattern);
        #endregion glLineStipple(int multiplier, ushort pattern)

        #region glLineWidth(float width)
        /// <summary>
        ///     Specifies the width of rasterized lines.
        /// </summary>
        // GLAPI void GLAPIENTRY glLineWidth(GLfloat width);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glLineWidth(float width);
        #endregion glLineWidth(float width)

        #region glListBase(int offset)
        /// <summary>
        ///     Sets the display list base for <see cref="glCallLists" />.
        /// </summary>
        // GLAPI void GLAPIENTRY glListBase(GLuint base);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glListBase(int offset);
        #endregion glListBase(int offset)

        #region glLoadIdentity()
        /// <summary>
        ///     Replaces the current matrix with the identity matrix.
        /// </summary>
        // GLAPI void GLAPIENTRY glLoadIdentity(void);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glLoadIdentity();
        #endregion glLoadIdentity()

        #region glLoadMatrixd([In] double[] matrix)
        /// <summary>
        ///     Replaces the current matrix with the specified matrix.
        /// </summary>
        // GLAPI void GLAPIENTRY glLoadMatrixd(const GLdouble *m);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glLoadMatrixd([In] double[] matrix);
        #endregion glLoadMatrixd([In] double[] matrix)

        #region glLoadMatrixd([In] IntPtr matrix)
        /// <summary>
        ///     Replaces the current matrix with the specified matrix.
        /// </summary>
        // GLAPI void GLAPIENTRY glLoadMatrixd(const GLdouble *m);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glLoadMatrixd([In] IntPtr matrix);
        #endregion glLoadMatrixd([In] IntPtr matrix)

        #region glLoadMatrixd([In] double *matrix)
        /// <summary>
        ///     Replaces the current matrix with the specified matrix.
        /// </summary>
        // GLAPI void GLAPIENTRY glLoadMatrixd(const GLdouble *m);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glLoadMatrixd([In] double *matrix);
        #endregion glLoadMatrixd([In] double *matrix)

        #region glLoadMatrixf([In] float[] matrix)
        /// <summary>
        ///     Replaces the current matrix with the specified matrix.
        /// </summary>
        // GLAPI void GLAPIENTRY glLoadMatrixf(const GLfloat *m);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glLoadMatrixf([In] float[] matrix);
        #endregion glLoadMatrixf([In] float[] matrix)

        #region glLoadMatrixf([In] IntPtr matrix)
        /// <summary>
        ///     Replaces the current matrix with the specified matrix.
        /// </summary>
        // GLAPI void GLAPIENTRY glLoadMatrixf(const GLfloat *m);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glLoadMatrixf([In] IntPtr matrix);
        #endregion glLoadMatrixf([In] IntPtr matrix)

        #region glLoadMatrixf([In] float *matrix)
        /// <summary>
        ///     Replaces the current matrix with the specified matrix.
        /// </summary>
        // GLAPI void GLAPIENTRY glLoadMatrixf(const GLfloat *m);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glLoadMatrixf([In] float *matrix);
        #endregion glLoadMatrixf([In] float *matrix)

        #region glLogicOp(int opCode)
        /// <summary>
        ///     Specifies a logical pixel operation for color index rendering.
        /// </summary>
        // GLAPI void GLAPIENTRY glLogicOp(GLenum opcode);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glLogicOp(int opCode);
        #endregion glLogicOp(int opCode)

        #region glMaterialf(int face, int parameter, float parameterValue)
        /// <summary>
        ///     Specifies material parameters for the lighting model.
        /// </summary>
        // GLAPI void GLAPIENTRY glMaterialf(GLenum face, GLenum pname, GLfloat param);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glMaterialf(int face, int parameter, float parameterValue);
        #endregion glMaterialf(int face, int parameter, float parameterValue)

        #region glMaterialfv(int face, int parameter, [In] float[] parameterValues)
        /// <summary>
        ///     Specifies material parameters for the lighting model.
        /// </summary>
        // GLAPI void GLAPIENTRY glMaterialfv(GLenum face, GLenum pname, const GLfloat *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glMaterialfv(int face, int parameter, [In] float[] parameterValues);
        #endregion glMaterialfv(int face, int parameter, [In] float[] parameterValues)

        #region glMaterialfv(int face, int parameter, [In] IntPtr parameterValues)
        /// <summary>
        ///     Specifies material parameters for the lighting model.
        /// </summary>
        // GLAPI void GLAPIENTRY glMaterialfv(GLenum face, GLenum pname, const GLfloat *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glMaterialfv(int face, int parameter, [In] IntPtr parameterValues);
        #endregion glMaterialfv(int face, int parameter, [In] IntPtr parameterValues)

        #region glMaterialfv(int face, int parameter, [In] float *parameterValues)
        /// <summary>
        ///     Specifies material parameters for the lighting model.
        /// </summary>
        // GLAPI void GLAPIENTRY glMaterialfv(GLenum face, GLenum pname, const GLfloat *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glMaterialfv(int face, int parameter, [In] float *parameterValues);
        #endregion glMaterialfv(int face, int parameter, [In] float *parameterValues)

        #region glMateriali(int face, int parameter, int parameterValue)
        /// <summary>
        ///     Specifies material parameters for the lighting model.
        /// </summary>
        // GLAPI void GLAPIENTRY glMateriali(GLenum face, GLenum pname, GLint param);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glMateriali(int face, int parameter, int parameterValue);
        #endregion glMateriali(int face, int parameter, int parameterValue)

        #region glMaterialiv(int face, int parameter, [In] int[] parameterValues)
        /// <summary>
        ///     Specifies material parameters for the lighting model.
        /// </summary>
        // GLAPI void GLAPIENTRY glMaterialiv(GLenum face, GLenum pname, const GLint *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glMaterialiv(int face, int parameter, [In] int[] parameterValues);
        #endregion glMaterialiv(int face, int parameter, [In] int[] parameterValues)

        #region glMaterialiv(int face, int parameter, [In] IntPtr parameterValues)
        /// <summary>
        ///     Specifies material parameters for the lighting model.
        /// </summary>
        // GLAPI void GLAPIENTRY glMaterialiv(GLenum face, GLenum pname, const GLint *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glMaterialiv(int face, int parameter, [In] IntPtr parameterValues);
        #endregion glMaterialiv(int face, int parameter, [In] IntPtr parameterValues)

        #region glMaterialiv(int face, int parameter, [In] int *parameterValues)
        /// <summary>
        ///     Specifies material parameters for the lighting model.
        /// </summary>
        // GLAPI void GLAPIENTRY glMaterialiv(GLenum face, GLenum pname, const GLint *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glMaterialiv(int face, int parameter, [In] int *parameterValues);
        #endregion glMaterialiv(int face, int parameter, [In] int *parameterValues)

        #region glMatrixMode(int mode)
        /// <summary>
        ///     Specifies which matrix is the current matrix.
        /// </summary>
        // GLAPI void GLAPIENTRY glMatrixMode(GLenum mode);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glMatrixMode(int mode);
        #endregion glMatrixMode(int mode)

        #region glMultMatrixd([In] double[] matrix)
        /// <summary>
        ///     Multiplies the current matrix with the specified matrix.
        /// </summary>
        // GLAPI void GLAPIENTRY glMultMatrixd(const GLdouble *m);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glMultMatrixd([In] double[] matrix);
        #endregion glMultMatrixd([In] double[] matrix)

        #region glMultMatrixd([In] IntPtr matrix)
        /// <summary>
        ///     Multiplies the current matrix with the specified matrix.
        /// </summary>
        // GLAPI void GLAPIENTRY glMultMatrixd(const GLdouble *m);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glMultMatrixd([In] IntPtr matrix);
        #endregion glMultMatrixd([In] IntPtr matrix)

        #region glMultMatrixd([In] double *matrix)
        /// <summary>
        ///     Multiplies the current matrix with the specified matrix.
        /// </summary>
        // GLAPI void GLAPIENTRY glMultMatrixd(const GLdouble *m);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glMultMatrixd([In] double *matrix);
        #endregion glMultMatrixd([In] double *matrix)

        #region glMultMatrixf([In] float[] matrix)
        /// <summary>
        ///     Multiplies the current matrix with the specified matrix.
        /// </summary>
        // GLAPI void GLAPIENTRY glMultMatrixf(const GLfloat *m);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glMultMatrixf([In] float[] matrix);
        #endregion glMultMatrixf([In] float[] matrix)

        #region glMultMatrixf([In] IntPtr matrix)
        /// <summary>
        ///     Multiplies the current matrix with the specified matrix.
        /// </summary>
        // GLAPI void GLAPIENTRY glMultMatrixf(const GLfloat *m);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glMultMatrixf([In] IntPtr matrix);
        #endregion glMultMatrixf([In] IntPtr matrix)

        #region glMultMatrixf([In] float *matrix)
        /// <summary>
        ///     Multiplies the current matrix with the specified matrix.
        /// </summary>
        // GLAPI void GLAPIENTRY glMultMatrixf(const GLfloat *m);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glMultMatrixf([In] float *matrix);
        #endregion glMultMatrixf([In] float *matrix)

        #region glNewList(int displayList, int compilationMode)
        /// <summary>
        ///     Creates or replaces a display list.
        /// </summary>
        // GLAPI void GLAPIENTRY glNewList(GLuint list, GLenum mode);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glNewList(int displayList, int compilationMode);
        #endregion glNewList(int displayList, int compilationMode)

        #region glNormal3b(byte normalX, byte normalY, byte normalZ)
        /// <summary>
        ///     Sets the current normal vector.
        /// </summary>
        // GLAPI void GLAPIENTRY glNormal3b(GLbyte nx, GLbyte ny, GLbyte nz);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glNormal3b(byte normalX, byte normalY, byte normalZ);
        #endregion glNormal3b(byte normalX, byte normalY, byte normalZ)

        #region glNormal3bv([In] byte[] normalsPointer)
        /// <summary>
        ///     Sets the current normal vector.
        /// </summary>
        // GLAPI void GLAPIENTRY glNormal3bv(const GLbyte *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glNormal3bv([In] byte[] normalsPointer);
        #endregion glNormal3bv([In] byte[] normalsPointer)

        #region glNormal3bv([In] IntPtr normalsPointer)
        /// <summary>
        ///     Sets the current normal vector.
        /// </summary>
        // GLAPI void GLAPIENTRY glNormal3bv(const GLbyte *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glNormal3bv([In] IntPtr normalsPointer);
        #endregion glNormal3bv([In] IntPtr normalsPointer)

        #region glNormal3bv([In] byte *normalsPointer)
        /// <summary>
        ///     Sets the current normal vector.
        /// </summary>
        // GLAPI void GLAPIENTRY glNormal3bv(const GLbyte *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glNormal3bv([In] byte *normalsPointer);
        #endregion glNormal3bv([In] byte *normalsPointer)

        #region glNormal3d(double normalX, double normalY, double normalZ)
        /// <summary>
        ///     Sets the current normal vector.
        /// </summary>
        // GLAPI void GLAPIENTRY glNormal3d(GLdouble nx, GLdouble ny, GLdouble nz);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glNormal3d(double normalX, double normalY, double normalZ);
        #endregion glNormal3d(double normalX, double normalY, double normalZ)

        #region glNormal3dv([In] double[] normalsPointer)
        /// <summary>
        ///     Sets the current normal vector.
        /// </summary>
        // GLAPI void GLAPIENTRY glNormal3dv(const GLdouble *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glNormal3dv([In] double[] normalsPointer);
        #endregion glNormal3dv([In] double[] normalsPointer)

        #region glNormal3dv([In] IntPtr normalsPointer)
        /// <summary>
        ///     Sets the current normal vector.
        /// </summary>
        // GLAPI void GLAPIENTRY glNormal3dv(const GLdouble *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glNormal3dv([In] IntPtr normalsPointer);
        #endregion glNormal3dv([In] IntPtr normalsPointer)

        #region glNormal3dv([In] double *normalsPointer)
        /// <summary>
        ///     Sets the current normal vector.
        /// </summary>
        // GLAPI void GLAPIENTRY glNormal3dv(const GLdouble *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glNormal3dv([In] double *normalsPointer);
        #endregion glNormal3dv([In] double *normalsPointer)

        #region glNormal3f(float normalX, float normalY, float normalZ)
        /// <summary>
        ///     Sets the current normal vector.
        /// </summary>
        // GLAPI void GLAPIENTRY glNormal3f(GLfloat nx, GLfloat ny, GLfloat nz);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glNormal3f(float normalX, float normalY, float normalZ);
        #endregion glNormal3f(float normalX, float normalY, float normalZ)

        #region glNormal3fv([In] float[] normalsPointer)
        /// <summary>
        ///     Sets the current normal vector.
        /// </summary>
        // GLAPI void GLAPIENTRY glNormal3fv(const GLfloat *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glNormal3fv([In] float[] normalsPointer);
        #endregion glNormal3fv([In] float[] normalsPointer)

        #region glNormal3fv([In] IntPtr normalsPointer)
        /// <summary>
        ///     Sets the current normal vector.
        /// </summary>
        // GLAPI void GLAPIENTRY glNormal3fv(const GLfloat *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glNormal3fv([In] IntPtr normalsPointer);
        #endregion glNormal3fv([In] IntPtr normalsPointer)

        #region glNormal3fv([In] float *normalsPointer)
        /// <summary>
        ///     Sets the current normal vector.
        /// </summary>
        // GLAPI void GLAPIENTRY glNormal3fv(const GLfloat *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glNormal3fv([In] float *normalsPointer);
        #endregion glNormal3fv([In] float *normalsPointer)

        #region glNormal3i(int normalX, int normalY, int normalZ)
        /// <summary>
        ///     Sets the current normal vector.
        /// </summary>
        // GLAPI void GLAPIENTRY glNormal3i(GLint nx, GLint ny, GLint nz);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glNormal3i(int normalX, int normalY, int normalZ);
        #endregion glNormal3i(int normalX, int normalY, int normalZ)

        #region glNormal3iv([In] int[] normalsPointer)
        /// <summary>
        ///     Sets the current normal vector.
        /// </summary>
        // GLAPI void GLAPIENTRY glNormal3iv(const GLint *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glNormal3iv([In] int[] normalsPointer);
        #endregion glNormal3iv([In] int[] normalsPointer)

        #region glNormal3iv([In] IntPtr normalsPointer)
        /// <summary>
        ///     Sets the current normal vector.
        /// </summary>
        // GLAPI void GLAPIENTRY glNormal3iv(const GLint *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glNormal3iv([In] IntPtr normalsPointer);
        #endregion glNormal3iv([In] IntPtr normalsPointer)

        #region glNormal3iv([In] int *normalsPointer)
        /// <summary>
        ///     Sets the current normal vector.
        /// </summary>
        // GLAPI void GLAPIENTRY glNormal3iv(const GLint *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glNormal3iv([In] int *normalsPointer);
        #endregion glNormal3iv([In] int *normalsPointer)

        #region glNormal3s(short normalX, short normalY, short normalZ)
        /// <summary>
        ///     Sets the current normal vector.
        /// </summary>
        // GLAPI void GLAPIENTRY glNormal3s(GLshort nx, GLshort ny, GLshort nz);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glNormal3s(short normalX, short normalY, short normalZ);
        #endregion glNormal3s(short normalX, short normalY, short normalZ)

        #region glNormal3sv([In] short[] normalsPointer)
        /// <summary>
        ///     Sets the current normal vector.
        /// </summary>
        // GLAPI void GLAPIENTRY glNormal3sv(const GLshort *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glNormal3sv([In] short[] normalsPointer);
        #endregion glNormal3sv([In] short[] normalsPointer)

        #region glNormal3sv([In] IntPtr normalsPointer)
        /// <summary>
        ///     Sets the current normal vector.
        /// </summary>
        // GLAPI void GLAPIENTRY glNormal3sv(const GLshort *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glNormal3sv([In] IntPtr normalsPointer);
        #endregion glNormal3sv([In] IntPtr normalsPointer)

        #region glNormal3sv([In] short *normalsPointer)
        /// <summary>
        ///     Sets the current normal vector.
        /// </summary>
        // GLAPI void GLAPIENTRY glNormal3sv(const GLshort *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glNormal3sv([In] short *normalsPointer);
        #endregion glNormal3sv([In] short *normalsPointer)

        #region glOrtho(double left, double right, double bottom, double top, double zNear, double zFar)
        /// <summary>
        ///     Multiplies the current matrix with an orthographic matrix.
        /// </summary>
        // GLAPI void GLAPIENTRY glOrtho(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble near_val, GLdouble far_val);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glOrtho(double left, double right, double bottom, double top, double zNear, double zFar);
        #endregion glOrtho(double left, double right, double bottom, double top, double zNear, double zFar)

        #region glPixelMapfv(int map, int mapSize, [In] float[] values)
        /// <summary>
        ///     Sets up pixel transfer maps.
        /// </summary>
        // GLAPI void GLAPIENTRY glPixelMapfv(GLenum map, GLint mapsize, const GLfloat *values);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glPixelMapfv(int map, int mapSize, [In] float[] values);
        #endregion glPixelMapfv(int map, int mapSize, [In] float[] values)

        #region glPixelMapfv(int map, int mapSize, [In] IntPtr values)
        /// <summary>
        ///     Sets up pixel transfer maps.
        /// </summary>
        // GLAPI void GLAPIENTRY glPixelMapfv(GLenum map, GLint mapsize, const GLfloat *values);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glPixelMapfv(int map, int mapSize, [In] IntPtr values);
        #endregion glPixelMapfv(int map, int mapSize, [In] IntPtr values)

        #region glPixelMapfv(int map, int mapSize, [In] float *values)
        /// <summary>
        ///     Sets up pixel transfer maps.
        /// </summary>
        // GLAPI void GLAPIENTRY glPixelMapfv(GLenum map, GLint mapsize, const GLfloat *values);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glPixelMapfv(int map, int mapSize, [In] float *values);
        #endregion glPixelMapfv(int map, int mapSize, [In] float *values)

        #region glPixelMapuiv(int map, int mapSize, [In] int[] values)
        /// <summary>
        ///     Sets up pixel transfer maps.
        /// </summary>
        // GLAPI void GLAPIENTRY glPixelMapuiv(GLenum map, GLint mapsize, const GLuint *values);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glPixelMapuiv(int map, int mapSize, [In] int[] values);
        #endregion glPixelMapuiv(int map, int mapSize, [In] int[] values)

        #region glPixelMapuiv(int map, int mapSize, [In] uint[] values)
        /// <summary>
        ///     Sets up pixel transfer maps.
        /// </summary>
        // GLAPI void GLAPIENTRY glPixelMapuiv(GLenum map, GLint mapsize, const GLuint *values);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glPixelMapuiv(int map, int mapSize, [In] uint[] values);
        #endregion glPixelMapuiv(int map, int mapSize, [In] uint[] values)

        #region glPixelMapuiv(int map, int mapSize, [In] IntPtr values)
        /// <summary>
        ///     Sets up pixel transfer maps.
        /// </summary>
        // GLAPI void GLAPIENTRY glPixelMapuiv(GLenum map, GLint mapsize, const GLuint *values);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glPixelMapuiv(int map, int mapSize, [In] IntPtr values);
        #endregion glPixelMapuiv(int map, int mapSize, [In] IntPtr values)

        #region glPixelMapuiv(int map, int mapSize, [In] int *values)
        /// <summary>
        ///     Sets up pixel transfer maps.
        /// </summary>
        // GLAPI void GLAPIENTRY glPixelMapuiv(GLenum map, GLint mapsize, const GLuint *values);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glPixelMapuiv(int map, int mapSize, [In] int *values);
        #endregion glPixelMapuiv(int map, int mapSize, [In] int *values)

        #region glPixelMapuiv(int map, int mapSize, [In] uint *values)
        /// <summary>
        ///     Sets up pixel transfer maps.
        /// </summary>
        // GLAPI void GLAPIENTRY glPixelMapuiv(GLenum map, GLint mapsize, const GLuint *values);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glPixelMapuiv(int map, int mapSize, [In] uint *values);
        #endregion glPixelMapuiv(int map, int mapSize, [In] uint *values)

        #region glPixelMapusv(int map, int mapSize, [In] short[] values)
        /// <summary>
        ///     Sets up pixel transfer maps.
        /// </summary>
        // GLAPI void GLAPIENTRY glPixelMapusv(GLenum map, GLint mapsize, const GLushort *values);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glPixelMapusv(int map, int mapSize, [In] short[] values);
        #endregion glPixelMapusv(int map, int mapSize, [In] short[] values)

        #region glPixelMapusv(int map, int mapSize, [In] ushort[] values)
        /// <summary>
        ///     Sets up pixel transfer maps.
        /// </summary>
        // GLAPI void GLAPIENTRY glPixelMapusv(GLenum map, GLint mapsize, const GLushort *values);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glPixelMapusv(int map, int mapSize, [In] ushort[] values);
        #endregion glPixelMapusv(int map, int mapSize, [In] ushort[] values)

        #region glPixelMapusv(int map, int mapSize, [In] IntPtr values)
        /// <summary>
        ///     Sets up pixel transfer maps.
        /// </summary>
        // GLAPI void GLAPIENTRY glPixelMapusv(GLenum map, GLint mapsize, const GLushort *values);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glPixelMapusv(int map, int mapSize, [In] IntPtr values);
        #endregion glPixelMapusv(int map, int mapSize, [In] IntPtr values)

        #region glPixelMapusv(int map, int mapSize, [In] short *values)
        /// <summary>
        ///     Sets up pixel transfer maps.
        /// </summary>
        // GLAPI void GLAPIENTRY glPixelMapusv(GLenum map, GLint mapsize, const GLushort *values);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glPixelMapusv(int map, int mapSize, [In] short *values);
        #endregion glPixelMapusv(int map, int mapSize, [In] short *values)

        #region glPixelMapusv(int map, int mapSize, [In] ushort *values)
        /// <summary>
        ///     Sets up pixel transfer maps.
        /// </summary>
        // GLAPI void GLAPIENTRY glPixelMapusv(GLenum map, GLint mapsize, const GLushort *values);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glPixelMapusv(int map, int mapSize, [In] ushort *values);
        #endregion glPixelMapusv(int map, int mapSize, [In] ushort *values)

        #region glPixelStoref(int parameter, float parameterValue)
        /// <summary>
        ///     Sets pixel storage modes.
        /// </summary>
        // GLAPI void GLAPIENTRY glPixelStoref(GLenum pname, GLfloat param);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glPixelStoref(int parameter, float parameterValue);
        #endregion glPixelStoref(int parameter, float parameterValue)

        #region glPixelStorei(int parameter, int parameterValue)
        /// <summary>
        ///     Sets pixel storage modes.
        /// </summary>
        // GLAPI void GLAPIENTRY glPixelStorei(GLenum pname, GLint param);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glPixelStorei(int parameter, int parameterValue);
        #endregion glPixelStorei(int parameter, int parameterValue)

        #region glPixelTransferf(int parameter, float parameterValue)
        /// <summary>
        ///     Sets pixel transfer modes.
        /// </summary>
        // GLAPI void GLAPIENTRY glPixelTransferf(GLenum pname, GLfloat param);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glPixelTransferf(int parameter, float parameterValue);
        #endregion glPixelTransferf(int parameter, float parameterValue)

        #region glPixelTransferi(int parameter, int parameterValue)
        /// <summary>
        ///     Sets pixel transfer modes.
        /// </summary>
        // GLAPI void GLAPIENTRY glPixelTransferi(GLenum pname, GLint param);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glPixelTransferi(int parameter, int parameterValue);
        #endregion glPixelTransferi(int parameter, int parameterValue)

        #region glPixelZoom(float xZoomFactor, float yZoomFactor)
        /// <summary>
        ///     Specifies the pixel zoom factors.
        /// </summary>
        // GLAPI void GLAPIENTRY glPixelZoom(GLfloat xfactor, GLfloat yfactor);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glPixelZoom(float xZoomFactor, float yZoomFactor);
        #endregion glPixelZoom(float xZoomFactor, float yZoomFactor)

        #region glPointSize(float diameter)
        /// <summary>
        ///     Specifies the diameter of rasterized points.
        /// </summary>
        // GLAPI void GLAPIENTRY glPointSize(GLfloat size);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glPointSize(float diameter);
        #endregion glPointSize(float diameter)

        #region glPolygonMode(int face, int mode)
        /// <summary>
        ///     Selects a polygon rasterization mode.
        /// </summary>
        // GLAPI void GLAPIENTRY glPolygonMode(GLenum face, GLenum mode);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glPolygonMode(int face, int mode);
        #endregion glPolygonMode(int face, int mode)

        #region glPolygonOffset(float scaleFactor, float units)
        /// <summary>
        ///     Sets the scale and units used to calculate
        ///     depth values.
        /// </summary>
        // GLAPI void GLAPIENTRY glPolygonOffset(GLfloat factor, GLfloat units);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glPolygonOffset(float scaleFactor, float units);
        #endregion glPolygonOffset(float scaleFactor, float units)

        #region glPolygonStipple([In] byte[] mask)
        /// <summary>
        ///     Sets the polygon stippling pattern.
        /// </summary>
        // GLAPI void GLAPIENTRY glPolygonStipple(const GLubyte *mask);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glPolygonStipple([In] byte[] mask);
        #endregion glPolygonStipple([In] byte[] mask)

        #region glPolygonStipple([In] IntPtr mask)
        /// <summary>
        ///     Sets the polygon stippling pattern.
        /// </summary>
        // GLAPI void GLAPIENTRY glPolygonStipple(const GLubyte *mask);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glPolygonStipple([In] IntPtr mask);
        #endregion glPolygonStipple([In] IntPtr mask)

        #region glPolygonStipple([In] byte *mask)
        /// <summary>
        ///     Sets the polygon stippling pattern.
        /// </summary>
        // GLAPI void GLAPIENTRY glPolygonStipple(const GLubyte *mask);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glPolygonStipple([In] byte *mask);
        #endregion glPolygonStipple([In] byte *mask)

        #region glPopAttrib()
        /// <summary>
        ///     Pops the server attribute stack.
        /// </summary>
        // GLAPI void GLAPIENTRY glPopAttrib(void);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glPopAttrib();
        #endregion glPopAttrib()

        #region glPopMatrix()
        /// <summary>
        ///     Pops the current matrix stack.
        /// </summary>
        // GLAPI void GLAPIENTRY glPopMatrix(void);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glPopMatrix();
        #endregion glPopMatrix()

        #region glPushAttrib(int mask)
        /// <summary>
        ///     Pushes the server attribute stack.
        /// </summary>
        // GLAPI void GLAPIENTRY glPushAttrib(GLbitfield mask);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glPushAttrib(int mask);
        #endregion glPushAttrib(int mask)

        #region glPushMatrix()
        /// <summary>
        ///     Pushes the current matrix stack.
        /// </summary>
        // GLAPI void GLAPIENTRY glPushMatrix(void);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glPushMatrix();
        #endregion glPushMatrix()

        #region glRasterPos2d(double x, double y)
        /// <summary>
        ///     Specifies the raster position for pixel operations.
        /// </summary>
        // GLAPI void GLAPIENTRY glRasterPos2d(GLdouble x, GLdouble y);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glRasterPos2d(double x, double y);
        #endregion glRasterPos2d(double x, double y)

        #region glRasterPos2dv([In] double[] coordinates)
        /// <summary>
        ///     Specifies the raster position for pixel operations.
        /// </summary>
        // GLAPI void GLAPIENTRY glRasterPos2dv(const GLdouble *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glRasterPos2dv([In] double[] coordinates);
        #endregion glRasterPos2dv([In] double[] coordinates)

        #region glRasterPos2dv([In] IntPtr coordinates)
        /// <summary>
        ///     Specifies the raster position for pixel operations.
        /// </summary>
        // GLAPI void GLAPIENTRY glRasterPos2dv(const GLdouble *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glRasterPos2dv([In] IntPtr coordinates);
        #endregion glRasterPos2dv([In] IntPtr coordinates)

        #region glRasterPos2dv([In] double *coordinates)
        /// <summary>
        ///     Specifies the raster position for pixel operations.
        /// </summary>
        // GLAPI void GLAPIENTRY glRasterPos2dv(const GLdouble *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glRasterPos2dv([In] double *coordinates);
        #endregion glRasterPos2dv([In] double *coordinates)

        #region glRasterPos2f(float x, float y)
        /// <summary>
        ///     Specifies the raster position for pixel operations.
        /// </summary>
        // GLAPI void GLAPIENTRY glRasterPos2f(GLfloat x, GLfloat y);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glRasterPos2f(float x, float y);
        #endregion glRasterPos2f(float x, float y)

        #region glRasterPos2fv([In] float[] coordinates)
        /// <summary>
        ///     Specifies the raster position for pixel operations.
        /// </summary>
        // GLAPI void GLAPIENTRY glRasterPos2fv(const GLfloat *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glRasterPos2fv([In] float[] coordinates);
        #endregion glRasterPos2fv([In] float[] coordinates)

        #region glRasterPos2fv([In] IntPtr coordinates)
        /// <summary>
        ///     Specifies the raster position for pixel operations.
        /// </summary>
        // GLAPI void GLAPIENTRY glRasterPos2fv(const GLfloat *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glRasterPos2fv([In] IntPtr coordinates);
        #endregion glRasterPos2fv([In] IntPtr coordinates)

        #region glRasterPos2fv([In] float *coordinates)
        /// <summary>
        ///     Specifies the raster position for pixel operations.
        /// </summary>
        // GLAPI void GLAPIENTRY glRasterPos2fv(const GLfloat *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glRasterPos2fv([In] float *coordinates);
        #endregion glRasterPos2fv([In] float *coordinates)

        #region glRasterPos2i(int x, int y)
        /// <summary>
        ///     Specifies the raster position for pixel operations.
        /// </summary>
        // GLAPI void GLAPIENTRY glRasterPos2i(GLint x, GLint y);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glRasterPos2i(int x, int y);
        #endregion glRasterPos2i(int x, int y)

        #region glRasterPos2iv([In] int[] coordinates)
        /// <summary>
        ///     Specifies the raster position for pixel operations.
        /// </summary>
        // GLAPI void GLAPIENTRY glRasterPos2iv(const GLint *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glRasterPos2iv([In] int[] coordinates);
        #endregion glRasterPos2iv([In] int[] coordinates)

        #region glRasterPos2iv([In] IntPtr coordinates)
        /// <summary>
        ///     Specifies the raster position for pixel operations.
        /// </summary>
        // GLAPI void GLAPIENTRY glRasterPos2iv(const GLint *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glRasterPos2iv([In] IntPtr coordinates);
        #endregion glRasterPos2iv([In] IntPtr coordinates)

        #region glRasterPos2iv([In] int *coordinates)
        /// <summary>
        ///     Specifies the raster position for pixel operations.
        /// </summary>
        // GLAPI void GLAPIENTRY glRasterPos2iv(const GLint *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glRasterPos2iv([In] int *coordinates);
        #endregion glRasterPos2iv([In] int *coordinates)

        #region glRasterPos2s(short x, short y)
        /// <summary>
        ///     Specifies the raster position for pixel operations.
        /// </summary>
        // GLAPI void GLAPIENTRY glRasterPos2s(GLshort x, GLshort y);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glRasterPos2s(short x, short y);
        #endregion glRasterPos2s(short x, short y)

        #region glRasterPos2sv([In] short[] coordinates)
        /// <summary>
        ///     Specifies the raster position for pixel operations.
        /// </summary>
        // GLAPI void GLAPIENTRY glRasterPos2sv(const GLshort *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glRasterPos2sv([In] short[] coordinates);
        #endregion glRasterPos2sv([In] short[] coordinates)

        #region glRasterPos2sv([In] IntPtr coordinates)
        /// <summary>
        ///     Specifies the raster position for pixel operations.
        /// </summary>
        // GLAPI void GLAPIENTRY glRasterPos2sv(const GLshort *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glRasterPos2sv([In] IntPtr coordinates);
        #endregion glRasterPos2sv([In] IntPtr coordinates)

        #region glRasterPos2sv([In] short *coordinates)
        /// <summary>
        ///     Specifies the raster position for pixel operations.
        /// </summary>
        // GLAPI void GLAPIENTRY glRasterPos2sv(const GLshort *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glRasterPos2sv([In] short *coordinates);
        #endregion glRasterPos2sv([In] short *coordinates)

        #region glRasterPos3d(double x, double y, double z)
        /// <summary>
        ///     Specifies the raster position for pixel operations.
        /// </summary>
        // GLAPI void GLAPIENTRY glRasterPos3d(GLdouble x, GLdouble y, GLdouble z);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glRasterPos3d(double x, double y, double z);
        #endregion glRasterPos3d(double x, double y, double z)

        #region glRasterPos3dv([In] double[] coordinates)
        /// <summary>
        ///     Specifies the raster position for pixel operations.
        /// </summary>
        // GLAPI void GLAPIENTRY glRasterPos3dv(const GLdouble *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glRasterPos3dv([In] double[] coordinates);
        #endregion glRasterPos3dv([In] double[] coordinates)

        #region glRasterPos3dv([In] IntPtr coordinates)
        /// <summary>
        ///     Specifies the raster position for pixel operations.
        /// </summary>
        // GLAPI void GLAPIENTRY glRasterPos3dv(const GLdouble *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glRasterPos3dv([In] IntPtr coordinates);
        #endregion glRasterPos3dv([In] IntPtr coordinates)

        #region glRasterPos3dv([In] double *coordinates)
        /// <summary>
        ///     Specifies the raster position for pixel operations.
        /// </summary>
        // GLAPI void GLAPIENTRY glRasterPos3dv(const GLdouble *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glRasterPos3dv([In] double *coordinates);
        #endregion glRasterPos3dv([In] double *coordinates)

        #region glRasterPos3f(float x, float y, float z)
        /// <summary>
        ///     Specifies the raster position for pixel operations.
        /// </summary>
        // GLAPI void GLAPIENTRY glRasterPos3f(GLfloat x, GLfloat y, GLfloat z);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glRasterPos3f(float x, float y, float z);
        #endregion glRasterPos3f(float x, float y, float z)

        #region glRasterPos3fv([In] float[] coordinates)
        /// <summary>
        ///     Specifies the raster position for pixel operations.
        /// </summary>
        // GLAPI void GLAPIENTRY glRasterPos3fv(const GLfloat *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glRasterPos3fv([In] float[] coordinates);
        #endregion glRasterPos3fv([In] float[] coordinates)

        #region glRasterPos3fv([In] IntPtr coordinates)
        /// <summary>
        ///     Specifies the raster position for pixel operations.
        /// </summary>
        // GLAPI void GLAPIENTRY glRasterPos3fv(const GLfloat *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glRasterPos3fv([In] IntPtr coordinates);
        #endregion glRasterPos3fv([In] IntPtr coordinates)

        #region glRasterPos3fv([In] float *coordinates)
        /// <summary>
        ///     Specifies the raster position for pixel operations.
        /// </summary>
        // GLAPI void GLAPIENTRY glRasterPos3fv(const GLfloat *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glRasterPos3fv([In] float *coordinates);
        #endregion glRasterPos3fv([In] float *coordinates)

        #region glRasterPos3i(int x, int y, int z)
        /// <summary>
        ///     Specifies the raster position for pixel operations.
        /// </summary>
        // GLAPI void GLAPIENTRY glRasterPos3i(GLint x, GLint y, GLint z);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glRasterPos3i(int x, int y, int z);
        #endregion glRasterPos3i(int x, int y, int z)

        #region glRasterPos3iv([In] int[] coordinates)
        /// <summary>
        ///     Specifies the raster position for pixel operations.
        /// </summary>
        // GLAPI void GLAPIENTRY glRasterPos3iv(const GLint *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glRasterPos3iv([In] int[] coordinates);
        #endregion glRasterPos3iv([In] int[] coordinates)

        #region glRasterPos3iv([In] IntPtr coordinates)
        /// <summary>
        ///     Specifies the raster position for pixel operations.
        /// </summary>
        // GLAPI void GLAPIENTRY glRasterPos3iv(const GLint *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glRasterPos3iv([In] IntPtr coordinates);
        #endregion glRasterPos3iv([In] IntPtr coordinates)

        #region glRasterPos3iv([In] int *coordinates)
        /// <summary>
        ///     Specifies the raster position for pixel operations.
        /// </summary>
        // GLAPI void GLAPIENTRY glRasterPos3iv(const GLint *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glRasterPos3iv([In] int *coordinates);
        #endregion glRasterPos3iv([In] int *coordinates)

        #region glRasterPos3s(short x, short y, short z)
        /// <summary>
        ///     Specifies the raster position for pixel operations.
        /// </summary>
        // GLAPI void GLAPIENTRY glRasterPos3s(GLshort x, GLshort y, GLshort z);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glRasterPos3s(short x, short y, short z);
        #endregion glRasterPos3s(short x, short y, short z)

        #region glRasterPos3sv([In] short[] coordinates)
        /// <summary>
        ///     Specifies the raster position for pixel operations.
        /// </summary>
        // GLAPI void GLAPIENTRY glRasterPos3sv(const GLshort *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glRasterPos3sv([In] short[] coordinates);
        #endregion glRasterPos3sv([In] short[] coordinates)

        #region glRasterPos3sv([In] IntPtr coordinates)
        /// <summary>
        ///     Specifies the raster position for pixel operations.
        /// </summary>
        // GLAPI void GLAPIENTRY glRasterPos3sv(const GLshort *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glRasterPos3sv([In] IntPtr coordinates);
        #endregion glRasterPos3sv([In] IntPtr coordinates)

        #region glRasterPos3sv([In] short *coordinates)
        /// <summary>
        ///     Specifies the raster position for pixel operations.
        /// </summary>
        // GLAPI void GLAPIENTRY glRasterPos3sv(const GLshort *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glRasterPos3sv([In] short *coordinates);
        #endregion glRasterPos3sv([In] short *coordinates)

        #region glRasterPos4d(double x, double y, double z, double w)
        /// <summary>
        ///     Specifies the raster position for pixel operations.
        /// </summary>
        // GLAPI void GLAPIENTRY glRasterPos4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glRasterPos4d(double x, double y, double z, double w);
        #endregion glRasterPos4d(double x, double y, double z, double w)

        #region glRasterPos4dv([In] double[] coordinates)
        /// <summary>
        ///     Specifies the raster position for pixel operations.
        /// </summary>
        // GLAPI void GLAPIENTRY glRasterPos4dv(const GLdouble *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glRasterPos4dv([In] double[] coordinates);
        #endregion glRasterPos4dv([In] double[] coordinates)

        #region glRasterPos4dv([In] IntPtr coordinates)
        /// <summary>
        ///     Specifies the raster position for pixel operations.
        /// </summary>
        // GLAPI void GLAPIENTRY glRasterPos4dv(const GLdouble *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glRasterPos4dv([In] IntPtr coordinates);
        #endregion glRasterPos4dv([In] IntPtr coordinates)

        #region glRasterPos4dv([In] double *coordinates)
        /// <summary>
        ///     Specifies the raster position for pixel operations.
        /// </summary>
        // GLAPI void GLAPIENTRY glRasterPos4dv(const GLdouble *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glRasterPos4dv([In] double *coordinates);
        #endregion glRasterPos4dv([In] double *coordinates)

        #region glRasterPos4f(float x, float y, float z, float w)
        /// <summary>
        ///     Specifies the raster position for pixel operations.
        /// </summary>
        // GLAPI void GLAPIENTRY glRasterPos4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glRasterPos4f(float x, float y, float z, float w);
        #endregion glRasterPos4f(float x, float y, float z, float w)

        #region glRasterPos4fv([In] float[] coordinates)
        /// <summary>
        ///     Specifies the raster position for pixel operations.
        /// </summary>
        // GLAPI void GLAPIENTRY glRasterPos4fv(const GLfloat *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glRasterPos4fv([In] float[] coordinates);
        #endregion glRasterPos4fv([In] float[] coordinates)

        #region glRasterPos4fv([In] IntPtr coordinates)
        /// <summary>
        ///     Specifies the raster position for pixel operations.
        /// </summary>
        // GLAPI void GLAPIENTRY glRasterPos4fv(const GLfloat *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glRasterPos4fv([In] IntPtr coordinates);
        #endregion glRasterPos4fv([In] IntPtr coordinates)

        #region glRasterPos4fv([In] float *coordinates)
        /// <summary>
        ///     Specifies the raster position for pixel operations.
        /// </summary>
        // GLAPI void GLAPIENTRY glRasterPos4fv(const GLfloat *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glRasterPos4fv([In] float *coordinates);
        #endregion glRasterPos4fv([In] float *coordinates)

        #region glRasterPos4i(int x, int y, int z, int w)
        /// <summary>
        ///     Specifies the raster position for pixel operations.
        /// </summary>
        // GLAPI void GLAPIENTRY glRasterPos4i(GLint x, GLint y, GLint z, GLint w);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glRasterPos4i(int x, int y, int z, int w);
        #endregion glRasterPos4i(int x, int y, int z, int w)

        #region glRasterPos4iv([In] int[] coordinates)
        /// <summary>
        ///     Specifies the raster position for pixel operations.
        /// </summary>
        // GLAPI void GLAPIENTRY glRasterPos4iv(const GLint *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glRasterPos4iv([In] int[] coordinates);
        #endregion glRasterPos4iv([In] int[] coordinates)

        #region glRasterPos4iv([In] IntPtr coordinates)
        /// <summary>
        ///     Specifies the raster position for pixel operations.
        /// </summary>
        // GLAPI void GLAPIENTRY glRasterPos4iv(const GLint *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glRasterPos4iv([In] IntPtr coordinates);
        #endregion glRasterPos4iv([In] IntPtr coordinates)

        #region glRasterPos4iv([In] int *coordinates)
        /// <summary>
        ///     Specifies the raster position for pixel operations.
        /// </summary>
        // GLAPI void GLAPIENTRY glRasterPos4iv(const GLint *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glRasterPos4iv([In] int *coordinates);
        #endregion glRasterPos4iv([In] int *coordinates)

        #region glRasterPos4s(short x, short y, short z, short w)
        /// <summary>
        ///     Specifies the raster position for pixel operations.
        /// </summary>
        // GLAPI void GLAPIENTRY glRasterPos4s(GLshort x, GLshort y, GLshort z, GLshort w);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glRasterPos4s(short x, short y, short z, short w);
        #endregion glRasterPos4s(short x, short y, short z, short w)

        #region glRasterPos4sv([In] short[] coordinates)
        /// <summary>
        ///     Specifies the raster position for pixel operations.
        /// </summary>
        // GLAPI void GLAPIENTRY glRasterPos4sv(const GLshort *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glRasterPos4sv([In] short[] coordinates);
        #endregion glRasterPos4sv([In] short[] coordinates)

        #region glRasterPos4sv([In] IntPtr coordinates)
        /// <summary>
        ///     Specifies the raster position for pixel operations.
        /// </summary>
        // GLAPI void GLAPIENTRY glRasterPos4sv(const GLshort *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glRasterPos4sv([In] IntPtr coordinates);
        #endregion glRasterPos4sv([In] IntPtr coordinates)

        #region glRasterPos4sv([In] short *coordinates)
        /// <summary>
        ///     Specifies the raster position for pixel operations.
        /// </summary>
        // GLAPI void GLAPIENTRY glRasterPos4sv(const GLshort *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glRasterPos4sv([In] short *coordinates);
        #endregion glRasterPos4sv([In] short *coordinates)

        #region glReadBuffer(int colorBuffer)
        /// <summary>
        ///     Selects a color buffer source for pixels.
        /// </summary>
        // GLAPI void GLAPIENTRY glReadBuffer(GLenum mode);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glReadBuffer(int colorBuffer);
        #endregion glReadBuffer(int colorBuffer)

        #region glReadPixels(int x, int y, int width, int height, int format, int dataType, [Out] byte[] pixels)
        /// <summary>
        ///     Reads a block of pixels from the frame buffer.
        /// </summary>
        // GLAPI void GLAPIENTRY glReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glReadPixels(int x, int y, int width, int height, int format, int dataType, [Out] byte[] pixels);
        #endregion glReadPixels(int x, int y, int width, int height, int format, int dataType, [Out] byte[] pixels)

        #region glReadPixels(int x, int y, int width, int height, int format, int dataType, [Out] double[] pixels)
        /// <summary>
        ///     Reads a block of pixels from the frame buffer.
        /// </summary>
        // GLAPI void GLAPIENTRY glReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glReadPixels(int x, int y, int width, int height, int format, int dataType, [Out] double[] pixels);
        #endregion glReadPixels(int x, int y, int width, int height, int format, int dataType, [Out] double[] pixels)

        #region glReadPixels(int x, int y, int width, int height, int format, int dataType, [Out] short[] pixels)
        /// <summary>
        ///     Reads a block of pixels from the frame buffer.
        /// </summary>
        // GLAPI void GLAPIENTRY glReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glReadPixels(int x, int y, int width, int height, int format, int dataType, [Out] short[] pixels);
        #endregion glReadPixels(int x, int y, int width, int height, int format, int dataType, [Out] short[] pixels)

        #region glReadPixels(int x, int y, int width, int height, int format, int dataType, [Out] int[] pixels)
        /// <summary>
        ///     Reads a block of pixels from the frame buffer.
        /// </summary>
        // GLAPI void GLAPIENTRY glReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glReadPixels(int x, int y, int width, int height, int format, int dataType, [Out] int[] pixels);
        #endregion glReadPixels(int x, int y, int width, int height, int format, int dataType, [Out] int[] pixels)

        #region glReadPixels(int x, int y, int width, int height, int format, int dataType, [Out] float[] pixels)
        /// <summary>
        ///     Reads a block of pixels from the frame buffer.
        /// </summary>
        // GLAPI void GLAPIENTRY glReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glReadPixels(int x, int y, int width, int height, int format, int dataType, [Out] float[] pixels);
        #endregion glReadPixels(int x, int y, int width, int height, int format, int dataType, [Out] float[] pixels)

        #region glReadPixels(int x, int y, int width, int height, int format, int dataType, [Out] ushort[] pixels)
        /// <summary>
        ///     Reads a block of pixels from the frame buffer.
        /// </summary>
        // GLAPI void GLAPIENTRY glReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glReadPixels(int x, int y, int width, int height, int format, int dataType, [Out] ushort[] pixels);
        #endregion glReadPixels(int x, int y, int width, int height, int format, int dataType, [Out] ushort[] pixels)

        #region glReadPixels(int x, int y, int width, int height, int format, int dataType, [Out] uint[] pixels)
        /// <summary>
        ///     Reads a block of pixels from the frame buffer.
        /// </summary>
        // GLAPI void GLAPIENTRY glReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glReadPixels(int x, int y, int width, int height, int format, int dataType, [Out] uint[] pixels);
        #endregion glReadPixels(int x, int y, int width, int height, int format, int dataType, [Out] uint[] pixels)

        #region glReadPixels(int x, int y, int width, int height, int format, int dataType, [Out] IntPtr pixels)
        /// <summary>
        ///     Reads a block of pixels from the frame buffer.
        /// </summary>
        // GLAPI void GLAPIENTRY glReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glReadPixels(int x, int y, int width, int height, int format, int dataType, [Out] IntPtr pixels);
        #endregion glReadPixels(int x, int y, int width, int height, int format, int dataType, [Out] IntPtr pixels)

        #region glReadPixels(int x, int y, int width, int height, int format, int dataType, [Out] void *pixels)
        /// <summary>
        ///     Reads a block of pixels from the frame buffer.
        /// </summary>
        // GLAPI void GLAPIENTRY glReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glReadPixels(int x, int y, int width, int height, int format, int dataType, [Out] void *pixels);
        #endregion glReadPixels(int x, int y, int width, int height, int format, int dataType, [Out] void *pixels)

        #region glRectd(double x1, double y1, double x2, double y2)
        /// <summary>
        ///     Draws a rectangle.
        /// </summary>
        // GLAPI void GLAPIENTRY glRectd(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glRectd(double x1, double y1, double x2, double y2);
        #endregion glRectd(double x1, double y1, double x2, double y2)

        #region glRectdv([In] double[] v1, [In] double[] v2)
        /// <summary>
        ///     Draws a rectangle.
        /// </summary>
        // GLAPI void GLAPIENTRY glRectdv(const GLdouble *v1, const GLdouble *v2);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glRectdv([In] double[] v1, [In] double[] v2);
        #endregion glRectdv([In] double[] v1, [In] double[] v2)

        #region glRectdv([In] IntPtr v1, [In] double[] v2)
        /// <summary>
        ///     Draws a rectangle.
        /// </summary>
        // GLAPI void GLAPIENTRY glRectdv(const GLdouble *v1, const GLdouble *v2);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glRectdv([In] IntPtr v1, [In] double[] v2);
        #endregion glRectdv([In] IntPtr v1, [In] double[] v2)

        #region glRectdv([In] double *v1, [In] double[] v2)
        /// <summary>
        ///     Draws a rectangle.
        /// </summary>
        // GLAPI void GLAPIENTRY glRectdv(const GLdouble *v1, const GLdouble *v2);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glRectdv([In] double *v1, [In] double[] v2);
        #endregion glRectdv([In] double *v1, [In] double[] v2)

        #region glRectdv([In] double[] v1, [In] IntPtr v2)
        /// <summary>
        ///     Draws a rectangle.
        /// </summary>
        // GLAPI void GLAPIENTRY glRectdv(const GLdouble *v1, const GLdouble *v2);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glRectdv([In] double[] v1, [In] IntPtr v2);
        #endregion glRectdv([In] double[] v1, [In] IntPtr v2)

        #region glRectdv([In] double[] v1, [In] double *v2)
        /// <summary>
        ///     Draws a rectangle.
        /// </summary>
        // GLAPI void GLAPIENTRY glRectdv(const GLdouble *v1, const GLdouble *v2);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glRectdv([In] double[] v1, [In] double *v2);
        #endregion glRectdv([In] double[] v1, [In] double *v2)

        #region glRectdv([In] IntPtr v1, [In] IntPtr v2)
        /// <summary>
        ///     Draws a rectangle.
        /// </summary>
        // GLAPI void GLAPIENTRY glRectdv(const GLdouble *v1, const GLdouble *v2);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glRectdv([In] IntPtr v1, [In] IntPtr v2);
        #endregion glRectdv([In] IntPtr v1, [In] IntPtr v2)

        #region glRectdv([In] double *v1, [In] double *v2)
        /// <summary>
        ///     Draws a rectangle.
        /// </summary>
        // GLAPI void GLAPIENTRY glRectdv(const GLdouble *v1, const GLdouble *v2);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glRectdv([In] double *v1, [In] double *v2);
        #endregion glRectdv([In] double *v1, [In] double *v2)

        #region glRectf(float x1, float y1, float x2, float y2)
        /// <summary>
        ///     Draws a rectangle.
        /// </summary>
        // GLAPI void GLAPIENTRY glRectf(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glRectf(float x1, float y1, float x2, float y2);
        #endregion glRectf(float x1, float y1, float x2, float y2)

        #region glRectfv([In] float[] v1, [In] float[] v2)
        /// <summary>
        ///     Draws a rectangle.
        /// </summary>
        // GLAPI void GLAPIENTRY glRectfv(const GLfloat *v1, const GLfloat *v2);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glRectfv([In] float[] v1, [In] float[] v2);
        #endregion glRectfv([In] float[] v1, [In] float[] v2)

        #region glRectfv([In] IntPtr v1, [In] float[] v2)
        /// <summary>
        ///     Draws a rectangle.
        /// </summary>
        // GLAPI void GLAPIENTRY glRectfv(const GLfloat *v1, const GLfloat *v2);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glRectfv([In] IntPtr v1, [In] float[] v2);
        #endregion glRectfv([In] IntPtr v1, [In] float[] v2)

        #region glRectfv([In] float *v1, [In] float[] v2)
        /// <summary>
        ///     Draws a rectangle.
        /// </summary>
        // GLAPI void GLAPIENTRY glRectfv(const GLfloat *v1, const GLfloat *v2);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glRectfv([In] float *v1, [In] float[] v2);
        #endregion glRectfv([In] float *v1, [In] float[] v2)

        #region glRectfv([In] float[] v1, [In] IntPtr v2)
        /// <summary>
        ///     Draws a rectangle.
        /// </summary>
        // GLAPI void GLAPIENTRY glRectfv(const GLfloat *v1, const GLfloat *v2);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glRectfv([In] float[] v1, [In] IntPtr v2);
        #endregion glRectfv([In] float[] v1, [In] IntPtr v2)

        #region glRectfv([In] float[] v1, [In] float *v2)
        /// <summary>
        ///     Draws a rectangle.
        /// </summary>
        // GLAPI void GLAPIENTRY glRectfv(const GLfloat *v1, const GLfloat *v2);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glRectfv([In] float[] v1, [In] float *v2);
        #endregion glRectfv([In] float[] v1, [In] float *v2)

        #region glRectfv([In] IntPtr v1, [In] IntPtr v2)
        /// <summary>
        ///     Draws a rectangle.
        /// </summary>
        // GLAPI void GLAPIENTRY glRectfv(const GLfloat *v1, const GLfloat *v2);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glRectfv([In] IntPtr v1, [In] IntPtr v2);
        #endregion glRectfv([In] IntPtr v1, [In] IntPtr v2)

        #region glRectfv([In] float *v1, [In] float *v2)
        /// <summary>
        ///     Draws a rectangle.
        /// </summary>
        // GLAPI void GLAPIENTRY glRectfv(const GLfloat *v1, const GLfloat *v2);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glRectfv([In] float *v1, [In] float *v2);
        #endregion glRectfv([In] float *v1, [In] float *v2)

        #region glRecti(int x1, int y1, int x2, int y2)
        /// <summary>
        ///     Draws a rectangle.
        /// </summary>
        // GLAPI void GLAPIENTRY glRecti(GLint x1, GLint y1, GLint x2, GLint y2);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glRecti(int x1, int y1, int x2, int y2);
        #endregion glRecti(int x1, int y1, int x2, int y2)

        #region glRectiv([In] int[] v1, [In] int[] v2)
        /// <summary>
        ///     Draws a rectangle.
        /// </summary>
        // GLAPI void GLAPIENTRY glRectiv(const GLint *v1, const GLint *v2);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glRectiv([In] int[] v1, [In] int[] v2);
        #endregion glRectiv([In] int[] v1, [In] int[] v2)

        #region glRectiv([In] IntPtr v1, [In] int[] v2)
        /// <summary>
        ///     Draws a rectangle.
        /// </summary>
        // GLAPI void GLAPIENTRY glRectiv(const GLint *v1, const GLint *v2);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glRectiv([In] IntPtr v1, [In] int[] v2);
        #endregion glRectiv([In] IntPtr v1, [In] int[] v2)

        #region glRectiv([In] int *v1, [In] int[] v2)
        /// <summary>
        ///     Draws a rectangle.
        /// </summary>
        // GLAPI void GLAPIENTRY glRectiv(const GLint *v1, const GLint *v2);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glRectiv([In] int *v1, [In] int[] v2);
        #endregion glRectiv([In] int *v1, [In] int[] v2)

        #region glRectiv([In] int[] v1, [In] IntPtr v2)
        /// <summary>
        ///     Draws a rectangle.
        /// </summary>
        // GLAPI void GLAPIENTRY glRectiv(const GLint *v1, const GLint *v2);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glRectiv([In] int[] v1, [In] IntPtr v2);
        #endregion glRectiv([In] int[] v1, [In] IntPtr v2)

        #region glRectiv([In] int[] v1, [In] int *v2)
        /// <summary>
        ///     Draws a rectangle.
        /// </summary>
        // GLAPI void GLAPIENTRY glRectiv(const GLint *v1, const GLint *v2);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glRectiv([In] int[] v1, [In] int *v2);
        #endregion glRectiv([In] int[] v1, [In] int *v2)

        #region glRectiv([In] IntPtr v1, [In] IntPtr v2)
        /// <summary>
        ///     Draws a rectangle.
        /// </summary>
        // GLAPI void GLAPIENTRY glRectiv(const GLint *v1, const GLint *v2);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glRectiv([In] IntPtr v1, [In] IntPtr v2);
        #endregion glRectiv([In] IntPtr v1, [In] IntPtr v2)

        #region glRectiv([In] int *v1, [In] int *v2)
        /// <summary>
        ///     Draws a rectangle.
        /// </summary>
        // GLAPI void GLAPIENTRY glRectiv(const GLint *v1, const GLint *v2);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glRectiv([In] int *v1, [In] int *v2);
        #endregion glRectiv([In] int *v1, [In] int *v2)

        #region glRects(short x1, short y1, short x2, short y2)
        /// <summary>
        ///     Draws a rectangle.
        /// </summary>
        // GLAPI void GLAPIENTRY glRects(GLshort x1, GLshort y1, GLshort x2, GLshort y2);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glRects(short x1, short y1, short x2, short y2);
        #endregion glRects(short x1, short y1, short x2, short y2)

        #region glRectsv([In] short[] v1, [In] short[] v2)
        /// <summary>
        ///     Draws a rectangle.
        /// </summary>
        // GLAPI void GLAPIENTRY glRectsv(const GLshort *v1, const GLshort *v2);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glRectsv([In] short[] v1, [In] short[] v2);
        #endregion glRectsv([In] short[] v1, [In] short[] v2)

        #region glRectsv([In] IntPtr v1, [In] short[] v2)
        /// <summary>
        ///     Draws a rectangle.
        /// </summary>
        // GLAPI void GLAPIENTRY glRectsv(const GLshort *v1, const GLshort *v2);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glRectsv([In] IntPtr v1, [In] short[] v2);
        #endregion glRectsv([In] IntPtr v1, [In] short[] v2)

        #region glRectsv([In] short *v1, [In] short[] v2)
        /// <summary>
        ///     Draws a rectangle.
        /// </summary>
        // GLAPI void GLAPIENTRY glRectsv(const GLshort *v1, const GLshort *v2);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glRectsv([In] short *v1, [In] short[] v2);
        #endregion glRectsv([In] short *v1, [In] short[] v2)

        #region glRectsv([In] short[] v1, [In] IntPtr v2)
        /// <summary>
        ///     Draws a rectangle.
        /// </summary>
        // GLAPI void GLAPIENTRY glRectsv(const GLshort *v1, const GLshort *v2);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glRectsv([In] short[] v1, [In] IntPtr v2);
        #endregion glRectsv([In] short[] v1, [In] IntPtr v2)

        #region glRectsv([In] short[] v1, [In] short *v2)
        /// <summary>
        ///     Draws a rectangle.
        /// </summary>
        // GLAPI void GLAPIENTRY glRectsv(const GLshort *v1, const GLshort *v2);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glRectsv([In] short[] v1, [In] short *v2);
        #endregion glRectsv([In] short[] v1, [In] short *v2)

        #region glRectsv([In] IntPtr v1, [In] IntPtr v2)
        /// <summary>
        ///     Draws a rectangle.
        /// </summary>
        // GLAPI void GLAPIENTRY glRectsv(const GLshort *v1, const GLshort *v2);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glRectsv([In] IntPtr v1, [In] IntPtr v2);
        #endregion glRectsv([In] IntPtr v1, [In] IntPtr v2)

        #region glRectsv([In] short *v1, [In] short *v2)
        /// <summary>
        ///     Draws a rectangle.
        /// </summary>
        // GLAPI void GLAPIENTRY glRectsv(const GLshort *v1, const GLshort *v2);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glRectsv([In] short *v1, [In] short *v2);
        #endregion glRectsv([In] short *v1, [In] short *v2)

        #region int glRenderMode(int mode)
        /// <summary>
        ///     Sets rasterization mode.
        /// </summary>
        // GLAPI GLint GLAPIENTRY glRenderMode(GLenum mode);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern int glRenderMode(int mode);
        #endregion int glRenderMode(int mode)

        #region glRotated(double angle, double x, double y, double z)
        /// <summary>
        ///     Multiplies the current matrix by a rotation matrix.
        /// </summary>
        // GLAPI void GLAPIENTRY glRotated(GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glRotated(double angle, double x, double y, double z);
        #endregion glRotated(double angle, double x, double y, double z)

        #region glRotatef(float angle, float x, float y, float z)
        /// <summary>
        ///     Multiplies the current matrix by a rotation matrix.
        /// </summary>
        // GLAPI void GLAPIENTRY glRotatef(GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glRotatef(float angle, float x, float y, float z);
        #endregion glRotatef(float angle, float x, float y, float z)

        #region glScaled(double x, double y, double z)
        /// <summary>
        ///     Multiplies the current matrix by a general scaling matrix.
        /// </summary>
        // GLAPI void GLAPIENTRY glScaled(GLdouble x, GLdouble y, GLdouble z);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glScaled(double x, double y, double z);
        #endregion glScaled(double x, double y, double z)

        #region glScalef(float x, float y, float z)
        /// <summary>
        ///     Multiplies the current matrix by a general scaling matrix.
        /// </summary>
        // GLAPI void GLAPIENTRY glScalef(GLfloat x, GLfloat y, GLfloat z);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glScalef(float x, float y, float z);
        #endregion glScalef(float x, float y, float z)

        #region glScissor(int x, int y, int width, int height)
        /// <summary>
        ///     Defines the scissor box.
        /// </summary>
        // GLAPI void GLAPIENTRY glScissor(GLint x, GLint y, GLsizei width, GLsizei height);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glScissor(int x, int y, int width, int height);
        #endregion glScissor(int x, int y, int width, int height)

        #region glShadeModel(int shadingMode)
        /// <summary>
        ///     Selects flat or smooth shading.
        /// </summary>
        // GLAPI void GLAPIENTRY glShadeModel(GLenum mode);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glShadeModel(int shadingMode);
        #endregion glShadeModel(int shadingMode)

        #region glStencilFunc(int testFunction, int referenceValue, int mask)
        /// <summary>
        ///     Sets the function and reference value for stencil testing.
        /// </summary>
        // GLAPI void GLAPIENTRY glStencilFunc(GLenum func, GLint ref, GLuint mask);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glStencilFunc(int testFunction, int referenceValue, int mask);
        #endregion glStencilFunc(int testFunction, int referenceValue, int mask)

        #region glStencilMask(int mask)
        /// <summary>
        ///     The <b>glStencilMask</b> controls the writing of individual bits in the stencil
        ///     planes.
        /// </summary>
        // GLAPI void GLAPIENTRY glStencilMask(GLuint mask);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glStencilMask(int mask);
        #endregion glStencilMask(int mask)

        #region glStencilOp(int stencilFailAction, int depthFailAction, int stencilAndDepthPass)
        /// <summary>
        ///     Sets stencil test actions.
        /// </summary>
        // GLAPI void GLAPIENTRY glStencilOp(GLenum fail, GLenum zfail, GLenum zpass);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glStencilOp(int stencilFailAction, int depthFailAction, int stencilAndDepthPass);
        #endregion glStencilOp(int stencilFailAction, int depthFailAction, int stencilAndDepthPass)

        #region glTexCoord1d(double s)
        /// <summary>
        ///     Sets the current texture coordinates.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexCoord1d(GLdouble s);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoord1d(double s);
        #endregion glTexCoord1d(double s)

        #region glTexCoord1dv([In] double[] coordinates)
        /// <summary>
        ///     Sets the current texture coordinates.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexCoord1dv(const GLdouble *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoord1dv([In] double[] coordinates);
        #endregion glTexCoord1dv([In] double[] coordinates)

        #region glTexCoord1dv([In] IntPtr coordinates)
        /// <summary>
        ///     Sets the current texture coordinates.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexCoord1dv(const GLdouble *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoord1dv([In] IntPtr coordinates);
        #endregion glTexCoord1dv([In] IntPtr coordinates)

        #region glTexCoord1dv([In] double *coordinates)
        /// <summary>
        ///     Sets the current texture coordinates.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexCoord1dv(const GLdouble *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glTexCoord1dv([In] double *coordinates);
        #endregion glTexCoord1dv([In] double *coordinates)

        #region glTexCoord1f(float s)
        /// <summary>
        ///     Sets the current texture coordinates.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexCoord1f(GLfloat s);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoord1f(float s);
        #endregion glTexCoord1f(float s)

        #region glTexCoord1fv([In] float[] coordinates)
        /// <summary>
        ///     Sets the current texture coordinates.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexCoord1fv(const GLfloat *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoord1fv([In] float[] coordinates);
        #endregion glTexCoord1fv([In] float[] coordinates)

        #region glTexCoord1fv([In] IntPtr coordinates)
        /// <summary>
        ///     Sets the current texture coordinates.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexCoord1fv(const GLfloat *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoord1fv([In] IntPtr coordinates);
        #endregion glTexCoord1fv([In] IntPtr coordinates)

        #region glTexCoord1fv([In] float *coordinates)
        /// <summary>
        ///     Sets the current texture coordinates.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexCoord1fv(const GLfloat *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glTexCoord1fv([In] float *coordinates);
        #endregion glTexCoord1fv([In] float *coordinates)

        #region glTexCoord1i(int s)
        /// <summary>
        ///     Sets the current texture coordinates.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexCoord1i(GLint s);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoord1i(int s);
        #endregion glTexCoord1i(int s)

        #region glTexCoord1iv([In] int[] coordinates)
        /// <summary>
        ///     Sets the current texture coordinates.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexCoord1iv(const GLint *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoord1iv([In] int[] coordinates);
        #endregion glTexCoord1iv([In] int[] coordinates)

        #region glTexCoord1iv([In] IntPtr coordinates)
        /// <summary>
        ///     Sets the current texture coordinates.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexCoord1iv(const GLint *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoord1iv([In] IntPtr coordinates);
        #endregion glTexCoord1iv([In] IntPtr coordinates)

        #region glTexCoord1iv([In] int *coordinates)
        /// <summary>
        ///     Sets the current texture coordinates.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexCoord1iv(const GLint *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glTexCoord1iv([In] int *coordinates);
        #endregion glTexCoord1iv([In] int *coordinates)

        #region glTexCoord1s(short s)
        /// <summary>
        ///     Sets the current texture coordinates.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexCoord1s(GLshort s);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoord1s(short s);
        #endregion glTexCoord1s(short s)

        #region glTexCoord1sv([In] short[] coordinates)
        /// <summary>
        ///     Sets the current texture coordinates.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexCoord1sv(const GLshort *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoord1sv([In] short[] coordinates);
        #endregion glTexCoord1sv([In] short[] coordinates)

        #region glTexCoord1sv([In] IntPtr coordinates)
        /// <summary>
        ///     Sets the current texture coordinates.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexCoord1sv(const GLshort *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoord1sv([In] IntPtr coordinates);
        #endregion glTexCoord1sv([In] IntPtr coordinates)

        #region glTexCoord1sv([In] short *coordinates)
        /// <summary>
        ///     Sets the current texture coordinates.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexCoord1sv(const GLshort *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glTexCoord1sv([In] short *coordinates);
        #endregion glTexCoord1sv([In] short *coordinates)

        #region glTexCoord2d(double s, double t)
        /// <summary>
        ///     Sets the current texture coordinates.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexCoord2d(GLdouble s, GLdouble t);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoord2d(double s, double t);
        #endregion glTexCoord2d(double s, double t)

        #region glTexCoord2dv([In] double[] coordinates)
        /// <summary>
        ///     Sets the current texture coordinates.
        /// </summary>
        //GLAPI void GLAPIENTRY glTexCoord2dv(const GLdouble *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoord2dv([In] double[] coordinates);
        #endregion glTexCoord2dv([In] double[] coordinates)

        #region glTexCoord2dv([In] IntPtr coordinates)
        /// <summary>
        ///     Sets the current texture coordinates.
        /// </summary>
        //GLAPI void GLAPIENTRY glTexCoord2dv(const GLdouble *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoord2dv([In] IntPtr coordinates);
        #endregion glTexCoord2dv([In] IntPtr coordinates)

        #region glTexCoord2dv([In] double *coordinates)
        /// <summary>
        ///     Sets the current texture coordinates.
        /// </summary>
        //GLAPI void GLAPIENTRY glTexCoord2dv(const GLdouble *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glTexCoord2dv([In] double *coordinates);
        #endregion glTexCoord2dv([In] double *coordinates)

        #region glTexCoord2f(float s, float t)
        /// <summary>
        ///     Sets the current texture coordinates.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexCoord2f(GLfloat s, GLfloat t);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoord2f(float s, float t);
        #endregion glTexCoord2f(float s, float t)

        #region glTexCoord2fv([In] float[] coordinates)
        /// <summary>
        ///     Sets the current texture coordinates.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexCoord2fv(const GLfloat *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoord2fv([In] float[] coordinates);
        #endregion glTexCoord2fv([In] float[] coordinates)

        #region glTexCoord2fv([In] IntPtr coordinates)
        /// <summary>
        ///     Sets the current texture coordinates.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexCoord2fv(const GLfloat *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoord2fv([In] IntPtr coordinates);
        #endregion glTexCoord2fv([In] IntPtr coordinates)

        #region glTexCoord2fv([In] float *coordinates)
        /// <summary>
        ///     Sets the current texture coordinates.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexCoord2fv(const GLfloat *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glTexCoord2fv([In] float *coordinates);
        #endregion glTexCoord2fv([In] float *coordinates)

        #region glTexCoord2i(int s, int t)
        /// <summary>
        ///     Sets the current texture coordinates.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexCoord2i(GLint s, GLint t);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoord2i(int s, int t);
        #endregion glTexCoord2i(int s, int t)

        #region glTexCoord2iv([In] int[] coordinates)
        /// <summary>
        ///     Sets the current texture coordinates.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexCoord2iv(const GLint *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoord2iv([In] int[] coordinates);
        #endregion glTexCoord2iv([In] int[] coordinates)

        #region glTexCoord2iv([In] IntPtr coordinates)
        /// <summary>
        ///     Sets the current texture coordinates.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexCoord2iv(const GLint *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoord2iv([In] IntPtr coordinates);
        #endregion glTexCoord2iv([In] IntPtr coordinates)

        #region glTexCoord2iv([In] int *coordinates)
        /// <summary>
        ///     Sets the current texture coordinates.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexCoord2iv(const GLint *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glTexCoord2iv([In] int *coordinates);
        #endregion glTexCoord2iv([In] int *coordinates)

        #region glTexCoord2s(short s, short t)
        /// <summary>
        ///     Sets the current texture coordinates.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexCoord2s(GLshort s, GLshort t);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoord2s(short s, short t);
        #endregion glTexCoord2s(short s, short t)

        #region glTexCoord2sv([In] short[] coordinates)
        /// <summary>
        ///     Sets the current texture coordinates.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexCoord2sv(const GLshort *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoord2sv([In] short[] coordinates);
        #endregion glTexCoord2sv([In] short[] coordinates)

        #region glTexCoord2sv([In] IntPtr coordinates)
        /// <summary>
        ///     Sets the current texture coordinates.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexCoord2sv(const GLshort *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoord2sv([In] IntPtr coordinates);
        #endregion glTexCoord2sv([In] IntPtr coordinates)

        #region glTexCoord2sv([In] short *coordinates)
        /// <summary>
        ///     Sets the current texture coordinates.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexCoord2sv(const GLshort *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glTexCoord2sv([In] short *coordinates);
        #endregion glTexCoord2sv([In] short *coordinates)

        #region glTexCoord3d(double s, double t, double r)
        /// <summary>
        ///     Sets the current texture coordinates.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexCoord3d(GLdouble s, GLdouble t, GLdouble r);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoord3d(double s, double t, double r);
        #endregion glTexCoord3d(double s, double t, double r)

        #region glTexCoord3dv([In] double[] coordinates)
        /// <summary>
        ///     Sets the current texture coordinates.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexCoord3dv(const GLdouble *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoord3dv([In] double[] coordinates);
        #endregion glTexCoord3dv([In] double[] coordinates)

        #region glTexCoord3dv([In] IntPtr coordinates)
        /// <summary>
        ///     Sets the current texture coordinates.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexCoord3dv(const GLdouble *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoord3dv([In] IntPtr coordinates);
        #endregion glTexCoord3dv([In] IntPtr coordinates)

        #region glTexCoord3dv([In] double *coordinates)
        /// <summary>
        ///     Sets the current texture coordinates.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexCoord3dv(const GLdouble *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glTexCoord3dv([In] double *coordinates);
        #endregion glTexCoord3dv([In] double *coordinates)

        #region glTexCoord3f(float s, float t, float r)
        /// <summary>
        ///     Sets the current texture coordinates.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexCoord3f(GLfloat s, GLfloat t, GLfloat r);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoord3f(float s, float t, float r);
        #endregion glTexCoord3f(float s, float t, float r)

        #region glTexCoord3fv([In] float[] coordinates)
        /// <summary>
        ///     Sets the current texture coordinates.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexCoord3fv(const GLfloat *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoord3fv([In] float[] coordinates);
        #endregion glTexCoord3fv([In] float[] coordinates)

        #region glTexCoord3fv([In] IntPtr coordinates)
        /// <summary>
        ///     Sets the current texture coordinates.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexCoord3fv(const GLfloat *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoord3fv([In] IntPtr coordinates);
        #endregion glTexCoord3fv([In] IntPtr coordinates)

        #region glTexCoord3fv([In] float *coordinates)
        /// <summary>
        ///     Sets the current texture coordinates.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexCoord3fv(const GLfloat *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glTexCoord3fv([In] float *coordinates);
        #endregion glTexCoord3fv([In] float *coordinates)

        #region glTexCoord3i(int s, int t, int r)
        /// <summary>
        ///     Sets the current texture coordinates.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexCoord3i(GLint s, GLint t, GLint r);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoord3i(int s, int t, int r);
        #endregion glTexCoord3i(int s, int t, int r)

        #region glTexCoord3iv([In] int[] coordinates)
        /// <summary>
        ///     Sets the current texture coordinates.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexCoord3iv(const GLint *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoord3iv([In] int[] coordinates);
        #endregion glTexCoord3iv([In] int[] coordinates)

        #region glTexCoord3iv([In] IntPtr coordinates)
        /// <summary>
        ///     Sets the current texture coordinates.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexCoord3iv(const GLint *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoord3iv([In] IntPtr coordinates);
        #endregion glTexCoord3iv([In] IntPtr coordinates)

        #region glTexCoord3iv([In] int *coordinates)
        /// <summary>
        ///     Sets the current texture coordinates.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexCoord3iv(const GLint *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glTexCoord3iv([In] int *coordinates);
        #endregion glTexCoord3iv([In] int *coordinates)

        #region glTexCoord3s(short s, short t, short r)
        /// <summary>
        ///     Sets the current texture coordinates.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexCoord3s(GLshort s, GLshort t, GLshort r);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoord3s(short s, short t, short r);
        #endregion glTexCoord3s(short s, short t, short r)

        #region glTexCoord3sv([In] short[] coordinates)
        /// <summary>
        ///     Sets the current texture coordinates.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexCoord3sv(const GLshort *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoord3sv([In] short[] coordinates);
        #endregion glTexCoord3sv([In] short[] coordinates)

        #region glTexCoord3sv([In] IntPtr coordinates)
        /// <summary>
        ///     Sets the current texture coordinates.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexCoord3sv(const GLshort *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoord3sv([In] IntPtr coordinates);
        #endregion glTexCoord3sv([In] IntPtr coordinates)

        #region glTexCoord3sv([In] short *coordinates)
        /// <summary>
        ///     Sets the current texture coordinates.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexCoord3sv(const GLshort *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glTexCoord3sv([In] short *coordinates);
        #endregion glTexCoord3sv([In] short *coordinates)

        #region glTexCoord4d(double s, double t, double r, double q)
        /// <summary>
        ///     Sets the current texture coordinates.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexCoord4d(GLdouble s, GLdouble t, GLdouble r, GLdouble q);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoord4d(double s, double t, double r, double q);
        #endregion glTexCoord4d(double s, double t, double r, double q)

        #region glTexCoord4dv([In] double[] coordinates)
        /// <summary>
        ///     Sets the current texture coordinates.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexCoord4dv(const GLdouble *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoord4dv([In] double[] coordinates);
        #endregion glTexCoord4dv([In] double[] coordinates)

        #region glTexCoord4dv([In] IntPtr coordinates)
        /// <summary>
        ///     Sets the current texture coordinates.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexCoord4dv(const GLdouble *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoord4dv([In] IntPtr coordinates);
        #endregion glTexCoord4dv([In] IntPtr coordinates)

        #region glTexCoord4dv([In] double *coordinates)
        /// <summary>
        ///     Sets the current texture coordinates.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexCoord4dv(const GLdouble *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glTexCoord4dv([In] double *coordinates);
        #endregion glTexCoord4dv([In] double *coordinates)

        #region glTexCoord4f(float s, float t, float r, float q)
        /// <summary>
        ///     Sets the current texture coordinates.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexCoord4f(GLfloat s, GLfloat t, GLfloat r, GLfloat q);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoord4f(float s, float t, float r, float q);
        #endregion glTexCoord4f(float s, float t, float r, float q)

        #region glTexCoord4fv([In] float[] coordinates)
        /// <summary>
        ///     Sets the current texture coordinates.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexCoord4fv(const GLfloat *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoord4fv([In] float[] coordinates);
        #endregion glTexCoord4fv([In] float[] coordinates)

        #region glTexCoord4fv([In] IntPtr coordinates)
        /// <summary>
        ///     Sets the current texture coordinates.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexCoord4fv(const GLfloat *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoord4fv([In] IntPtr coordinates);
        #endregion glTexCoord4fv([In] IntPtr coordinates)

        #region glTexCoord4fv([In] float *coordinates)
        /// <summary>
        ///     Sets the current texture coordinates.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexCoord4fv(const GLfloat *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glTexCoord4fv([In] float *coordinates);
        #endregion glTexCoord4fv([In] float *coordinates)

        #region glTexCoord4i(int s, int t, int r, int q)
        /// <summary>
        ///     Sets the current texture coordinates.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexCoord4i(GLint s, GLint t, GLint r, GLint q);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoord4i(int s, int t, int r, int q);
        #endregion glTexCoord4i(int s, int t, int r, int q)

        #region glTexCoord4iv([In] int[] coordinates)
        /// <summary>
        ///     Sets the current texture coordinates.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexCoord4iv(const GLint *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoord4iv([In] int[] coordinates);
        #endregion glTexCoord4iv([In] int[] coordinates)

        #region glTexCoord4iv([In] IntPtr coordinates)
        /// <summary>
        ///     Sets the current texture coordinates.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexCoord4iv(const GLint *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoord4iv([In] IntPtr coordinates);
        #endregion glTexCoord4iv([In] IntPtr coordinates)

        #region glTexCoord4iv([In] int *coordinates)
        /// <summary>
        ///     Sets the current texture coordinates.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexCoord4iv(const GLint *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glTexCoord4iv([In] int *coordinates);
        #endregion glTexCoord4iv([In] int *coordinates)

        #region glTexCoord4s(short s, short t, short r, short q)
        /// <summary>
        ///     Sets the current texture coordinates.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexCoord4s(GLshort s, GLshort t, GLshort r, GLshort q);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoord4s(short s, short t, short r, short q);
        #endregion glTexCoord4s(short s, short t, short r, short q)

        #region glTexCoord4sv([In] short[] coordinates)
        /// <summary>
        ///     Sets the current texture coordinates.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexCoord4sv(const GLshort *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoord4sv([In] short[] coordinates);
        #endregion glTexCoord4sv([In] short[] coordinates)

        #region glTexCoord4sv([In] IntPtr coordinates)
        /// <summary>
        ///     Sets the current texture coordinates.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexCoord4sv(const GLshort *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoord4sv([In] IntPtr coordinates);
        #endregion glTexCoord4sv([In] IntPtr coordinates)

        #region glTexCoord4sv([In] short *coordinates)
        /// <summary>
        ///     Sets the current texture coordinates.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexCoord4sv(const GLshort *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glTexCoord4sv([In] short *coordinates);
        #endregion glTexCoord4sv([In] short *coordinates)

        #region glTexEnvf(int textureEnvironment, int parameter, float parameterValue)
        /// <summary>
        ///     Sets texture environment parameters.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexEnvf(GLenum target, GLenum pname, GLfloat param);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glTexEnvf(int textureEnvironment, int parameter, float parameterValue);
        #endregion glTexEnvf(int textureEnvironment, int parameter, float parameterValue)

        #region glTexEnvfv(int textureEnvironment, int parameter, [In] float[] parameterValues)
        /// <summary>
        ///     Sets texture environment parameters.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexEnvfv(GLenum target, GLenum pname, const GLfloat *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glTexEnvfv(int textureEnvironment, int parameter, [In] float[] parameterValues);
        #endregion glTexEnvfv(int textureEnvironment, int parameter, [In] float[] parameterValues)

        #region glTexEnvfv(int textureEnvironment, int parameter, [In] IntPtr parameterValues)
        /// <summary>
        ///     Sets texture environment parameters.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexEnvfv(GLenum target, GLenum pname, const GLfloat *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glTexEnvfv(int textureEnvironment, int parameter, [In] IntPtr parameterValues);
        #endregion glTexEnvfv(int textureEnvironment, int parameter, [In] IntPtr parameterValues)

        #region glTexEnvfv(int textureEnvironment, int parameter, [In] float *parameterValues)
        /// <summary>
        ///     Sets texture environment parameters.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexEnvfv(GLenum target, GLenum pname, const GLfloat *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glTexEnvfv(int textureEnvironment, int parameter, [In] float *parameterValues);
        #endregion glTexEnvfv(int textureEnvironment, int parameter, [In] float *parameterValues)

        #region glTexEnvi(int textureEnvironment, int parameter, int parameterValue)
        /// <summary>
        ///     Sets texture environment parameters.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexEnvi(GLenum target, GLenum pname, GLint param);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glTexEnvi(int textureEnvironment, int parameter, int parameterValue);
        #endregion glTexEnvi(int textureEnvironment, int parameter, int parameterValue)

        #region glTexEnviv(int textureEnvironment, int parameter, [In] int[] parameterValues)
        /// <summary>
        ///     Sets texture environment parameters.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexEnviv(GLenum target, GLenum pname, const GLint *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glTexEnviv(int textureEnvironment, int parameter, [In] int[] parameterValues);
        #endregion glTexEnviv(int textureEnvironment, int parameter, [In] int[] parameterValues)

        #region glTexEnviv(int textureEnvironment, int parameter, [In] IntPtr parameterValues)
        /// <summary>
        ///     Sets texture environment parameters.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexEnviv(GLenum target, GLenum pname, const GLint *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glTexEnviv(int textureEnvironment, int parameter, [In] IntPtr parameterValues);
        #endregion glTexEnviv(int textureEnvironment, int parameter, [In] IntPtr parameterValues)

        #region glTexEnviv(int textureEnvironment, int parameter, [In] int *parameterValues)
        /// <summary>
        ///     Sets texture environment parameters.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexEnviv(GLenum target, GLenum pname, const GLint *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glTexEnviv(int textureEnvironment, int parameter, [In] int *parameterValues);
        #endregion glTexEnviv(int textureEnvironment, int parameter, [In] int *parameterValues)

        #region glTexGend(int textureCoordinate, int parameter, double parameterValue)
        /// <summary>
        ///     Controls the generation of texture coordinates.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexGend(GLenum coord, GLenum pname, GLdouble param);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glTexGend(int textureCoordinate, int parameter, double parameterValue);
        #endregion glTexGend(int textureCoordinate, int parameter, double parameterValue)

        #region glTexGendv(int textureCoordinate, int parameter, [In] double[] parameterValues)
        /// <summary>
        ///     Controls the generation of texture coordinates.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexGendv(GLenum coord, GLenum pname, const GLdouble *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glTexGendv(int textureCoordinate, int parameter, [In] double[] parameterValues);
        #endregion glTexGendv(int textureCoordinate, int parameter, [In] double[] parameterValues)

        #region glTexGendv(int textureCoordinate, int parameter, [In] IntPtr parameterValues)
        /// <summary>
        ///     Controls the generation of texture coordinates.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexGendv(GLenum coord, GLenum pname, const GLdouble *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glTexGendv(int textureCoordinate, int parameter, [In] IntPtr parameterValues);
        #endregion glTexGendv(int textureCoordinate, int parameter, [In] IntPtr parameterValues)

        #region glTexGendv(int textureCoordinate, int parameter, [In] double *parameterValues)
        /// <summary>
        ///     Controls the generation of texture coordinates.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexGendv(GLenum coord, GLenum pname, const GLdouble *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glTexGendv(int textureCoordinate, int parameter, [In] double *parameterValues);
        #endregion glTexGendv(int textureCoordinate, int parameter, [In] double *parameterValues)

        #region glTexGenf(int textureCoordinate, int parameter, float parameterValue)
        /// <summary>
        ///     Controls the generation of texture coordinates.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexGenf(GLenum coord, GLenum pname, GLfloat param);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glTexGenf(int textureCoordinate, int parameter, float parameterValue);
        #endregion glTexGenf(int textureCoordinate, int parameter, float parameterValue)

        #region glTexGenfv(int textureCoordinate, int parameter, [In] float[] parameterValues)
        /// <summary>
        ///     Controls the generation of texture coordinates.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexGenfv(GLenum coord, GLenum pname, const GLfloat *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glTexGenfv(int textureCoordinate, int parameter, [In] float[] parameterValues);
        #endregion glTexGenfv(int textureCoordinate, int parameter, [In] float[] parameterValues)

        #region glTexGenfv(int textureCoordinate, int parameter, [In] IntPtr parameterValues)
        /// <summary>
        ///     Controls the generation of texture coordinates.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexGenfv(GLenum coord, GLenum pname, const GLfloat *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glTexGenfv(int textureCoordinate, int parameter, [In] IntPtr parameterValues);
        #endregion glTexGenfv(int textureCoordinate, int parameter, [In] IntPtr parameterValues)

        #region glTexGenfv(int textureCoordinate, int parameter, [In] float *parameterValues)
        /// <summary>
        ///     Controls the generation of texture coordinates.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexGenfv(GLenum coord, GLenum pname, const GLfloat *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glTexGenfv(int textureCoordinate, int parameter, [In] float *parameterValues);
        #endregion glTexGenfv(int textureCoordinate, int parameter, [In] float *parameterValues)

        #region glTexGeni(int textureCoordinate, int parameter, int parameterValue)
        /// <summary>
        ///     Controls the generation of texture coordinates.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexGeni(GLenum coord, GLenum pname, GLint param);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glTexGeni(int textureCoordinate, int parameter, int parameterValue);
        #endregion glTexGeni(int textureCoordinate, int parameter, int parameterValue)

        #region glTexGeniv(int textureCoordinate, int parameter, [In] int[] parameterValues)
        /// <summary>
        ///     Controls the generation of texture coordinates.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexGeniv(GLenum coord, GLenum pname, const GLint *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glTexGeniv(int textureCoordinate, int parameter, [In] int[] parameterValues);
        #endregion glTexGeniv(int textureCoordinate, int parameter, [In] int[] parameterValues)

        #region glTexGeniv(int textureCoordinate, int parameter, [In] IntPtr parameterValues)
        /// <summary>
        ///     Controls the generation of texture coordinates.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexGeniv(GLenum coord, GLenum pname, const GLint *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glTexGeniv(int textureCoordinate, int parameter, [In] IntPtr parameterValues);
        #endregion glTexGeniv(int textureCoordinate, int parameter, [In] IntPtr parameterValues)

        #region glTexGeniv(int textureCoordinate, int parameter, [In] int *parameterValues)
        /// <summary>
        ///     Controls the generation of texture coordinates.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexGeniv(GLenum coord, GLenum pname, const GLint *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glTexGeniv(int textureCoordinate, int parameter, [In] int *parameterValues);
        #endregion glTexGeniv(int textureCoordinate, int parameter, [In] int *parameterValues)

        #region glTexImage1D(int textureTarget, int levelOfDetail, int colorComponents, int width, int borderWidth, int pixelFormat, int dataType, [In] byte[] pixels)
        /// <summary>
        ///     Specifies a one-dimensional texture image.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexImage1D(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage1D(int textureTarget, int levelOfDetail, int colorComponents, int width, int borderWidth, int pixelFormat, int dataType, [In] byte[] pixels);
        #endregion glTexImage1D(int textureTarget, int levelOfDetail, int colorComponents, int width, int borderWidth, int pixelFormat, int dataType, [In] byte[] pixels)

        #region glTexImage1D(int textureTarget, int levelOfDetail, int colorComponents, int width, int borderWidth, int pixelFormat, int dataType, [In] byte[ , ] pixels)
        /// <summary>
        ///     Specifies a one-dimensional texture image.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexImage1D(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage1D(int textureTarget, int levelOfDetail, int colorComponents, int width, int borderWidth, int pixelFormat, int dataType, [In] byte[ , ] pixels);
        #endregion glTexImage1D(int textureTarget, int levelOfDetail, int colorComponents, int width, int borderWidth, int pixelFormat, int dataType, [In] byte[ , ] pixels)

        #region glTexImage1D(int textureTarget, int levelOfDetail, int colorComponents, int width, int borderWidth, int pixelFormat, int dataType, [In] byte[ , , ] pixels)
        /// <summary>
        ///     Specifies a one-dimensional texture image.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexImage1D(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage1D(int textureTarget, int levelOfDetail, int colorComponents, int width, int borderWidth, int pixelFormat, int dataType, [In] byte[ , , ] pixels);
        #endregion glTexImage1D(int textureTarget, int levelOfDetail, int colorComponents, int width, int borderWidth, int pixelFormat, int dataType, [In] byte[ , , ] pixels)

        #region glTexImage1D(int textureTarget, int levelOfDetail, int colorComponents, int width, int borderWidth, int pixelFormat, int dataType, [In] double[] pixels)
        /// <summary>
        ///     Specifies a one-dimensional texture image.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexImage1D(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage1D(int textureTarget, int levelOfDetail, int colorComponents, int width, int borderWidth, int pixelFormat, int dataType, [In] double[] pixels);
        #endregion glTexImage1D(int textureTarget, int levelOfDetail, int colorComponents, int width, int borderWidth, int pixelFormat, int dataType, [In] double[] pixels)

        #region glTexImage1D(int textureTarget, int levelOfDetail, int colorComponents, int width, int borderWidth, int pixelFormat, int dataType, [In] double[ , ] pixels)
        /// <summary>
        ///     Specifies a one-dimensional texture image.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexImage1D(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage1D(int textureTarget, int levelOfDetail, int colorComponents, int width, int borderWidth, int pixelFormat, int dataType, [In] double[ , ] pixels);
        #endregion glTexImage1D(int textureTarget, int levelOfDetail, int colorComponents, int width, int borderWidth, int pixelFormat, int dataType, [In] double[ , ] pixels)

        #region glTexImage1D(int textureTarget, int levelOfDetail, int colorComponents, int width, int borderWidth, int pixelFormat, int dataType, [In] double[ , , ] pixels)
        /// <summary>
        ///     Specifies a one-dimensional texture image.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexImage1D(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage1D(int textureTarget, int levelOfDetail, int colorComponents, int width, int borderWidth, int pixelFormat, int dataType, [In] double[ , , ] pixels);
        #endregion glTexImage1D(int textureTarget, int levelOfDetail, int colorComponents, int width, int borderWidth, int pixelFormat, int dataType, [In] double[ , , ] pixels)

        #region glTexImage1D(int textureTarget, int levelOfDetail, int colorComponents, int width, int borderWidth, int pixelFormat, int dataType, [In] short[] pixels)
        /// <summary>
        ///     Specifies a one-dimensional texture image.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexImage1D(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage1D(int textureTarget, int levelOfDetail, int colorComponents, int width, int borderWidth, int pixelFormat, int dataType, [In] short[] pixels);
        #endregion glTexImage1D(int textureTarget, int levelOfDetail, int colorComponents, int width, int borderWidth, int pixelFormat, int dataType, [In] short[] pixels)

        #region glTexImage1D(int textureTarget, int levelOfDetail, int colorComponents, int width, int borderWidth, int pixelFormat, int dataType, [In] short[ , ] pixels)
        /// <summary>
        ///     Specifies a one-dimensional texture image.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexImage1D(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage1D(int textureTarget, int levelOfDetail, int colorComponents, int width, int borderWidth, int pixelFormat, int dataType, [In] short[ , ] pixels);
        #endregion glTexImage1D(int textureTarget, int levelOfDetail, int colorComponents, int width, int borderWidth, int pixelFormat, int dataType, [In] short[ , ] pixels)

        #region glTexImage1D(int textureTarget, int levelOfDetail, int colorComponents, int width, int borderWidth, int pixelFormat, int dataType, [In] short[ , , ] pixels)
        /// <summary>
        ///     Specifies a one-dimensional texture image.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexImage1D(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage1D(int textureTarget, int levelOfDetail, int colorComponents, int width, int borderWidth, int pixelFormat, int dataType, [In] short[ , , ] pixels);
        #endregion glTexImage1D(int textureTarget, int levelOfDetail, int colorComponents, int width, int borderWidth, int pixelFormat, int dataType, [In] short[ , , ] pixels)

        #region glTexImage1D(int textureTarget, int levelOfDetail, int colorComponents, int width, int borderWidth, int pixelFormat, int dataType, [In] int[] pixels)
        /// <summary>
        ///     Specifies a one-dimensional texture image.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexImage1D(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage1D(int textureTarget, int levelOfDetail, int colorComponents, int width, int borderWidth, int pixelFormat, int dataType, [In] int[] pixels);
        #endregion glTexImage1D(int textureTarget, int levelOfDetail, int colorComponents, int width, int borderWidth, int pixelFormat, int dataType, [In] int[] pixels)

        #region glTexImage1D(int textureTarget, int levelOfDetail, int colorComponents, int width, int borderWidth, int pixelFormat, int dataType, [In] int[ , ] pixels)
        /// <summary>
        ///     Specifies a one-dimensional texture image.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexImage1D(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage1D(int textureTarget, int levelOfDetail, int colorComponents, int width, int borderWidth, int pixelFormat, int dataType, [In] int[ , ] pixels);
        #endregion glTexImage1D(int textureTarget, int levelOfDetail, int colorComponents, int width, int borderWidth, int pixelFormat, int dataType, [In] int[ , ] pixels)

        #region glTexImage1D(int textureTarget, int levelOfDetail, int colorComponents, int width, int borderWidth, int pixelFormat, int dataType, [In] int[ , , ] pixels)
        /// <summary>
        ///     Specifies a one-dimensional texture image.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexImage1D(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage1D(int textureTarget, int levelOfDetail, int colorComponents, int width, int borderWidth, int pixelFormat, int dataType, [In] int[ , , ] pixels);
        #endregion glTexImage1D(int textureTarget, int levelOfDetail, int colorComponents, int width, int borderWidth, int pixelFormat, int dataType, [In] int[ , , ] pixels)

        #region glTexImage1D(int textureTarget, int levelOfDetail, int colorComponents, int width, int borderWidth, int pixelFormat, int dataType, [In] float[] pixels)
        /// <summary>
        ///     Specifies a one-dimensional texture image.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexImage1D(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage1D(int textureTarget, int levelOfDetail, int colorComponents, int width, int borderWidth, int pixelFormat, int dataType, [In] float[] pixels);
        #endregion glTexImage1D(int textureTarget, int levelOfDetail, int colorComponents, int width, int borderWidth, int pixelFormat, int dataType, [In] float[] pixels)

        #region glTexImage1D(int textureTarget, int levelOfDetail, int colorComponents, int width, int borderWidth, int pixelFormat, int dataType, [In] float[ , ] pixels)
        /// <summary>
        ///     Specifies a one-dimensional texture image.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexImage1D(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage1D(int textureTarget, int levelOfDetail, int colorComponents, int width, int borderWidth, int pixelFormat, int dataType, [In] float[ , ] pixels);
        #endregion glTexImage1D(int textureTarget, int levelOfDetail, int colorComponents, int width, int borderWidth, int pixelFormat, int dataType, [In] float[ , ] pixels)

        #region glTexImage1D(int textureTarget, int levelOfDetail, int colorComponents, int width, int borderWidth, int pixelFormat, int dataType, [In] float[ , , ] pixels)
        /// <summary>
        ///     Specifies a one-dimensional texture image.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexImage1D(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage1D(int textureTarget, int levelOfDetail, int colorComponents, int width, int borderWidth, int pixelFormat, int dataType, [In] float[ , , ] pixels);
        #endregion glTexImage1D(int textureTarget, int levelOfDetail, int colorComponents, int width, int borderWidth, int pixelFormat, int dataType, [In] float[ , , ] pixels)

        #region glTexImage1D(int textureTarget, int levelOfDetail, int colorComponents, int width, int borderWidth, int pixelFormat, int dataType, [In] ushort[] pixels)
        /// <summary>
        ///     Specifies a one-dimensional texture image.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexImage1D(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage1D(int textureTarget, int levelOfDetail, int colorComponents, int width, int borderWidth, int pixelFormat, int dataType, [In] ushort[] pixels);
        #endregion glTexImage1D(int textureTarget, int levelOfDetail, int colorComponents, int width, int borderWidth, int pixelFormat, int dataType, [In] ushort[] pixels)

        #region glTexImage1D(int textureTarget, int levelOfDetail, int colorComponents, int width, int borderWidth, int pixelFormat, int dataType, [In] ushort[ , ] pixels)
        /// <summary>
        ///     Specifies a one-dimensional texture image.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexImage1D(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage1D(int textureTarget, int levelOfDetail, int colorComponents, int width, int borderWidth, int pixelFormat, int dataType, [In] ushort[ , ] pixels);
        #endregion glTexImage1D(int textureTarget, int levelOfDetail, int colorComponents, int width, int borderWidth, int pixelFormat, int dataType, [In] ushort[ , ] pixels)

        #region glTexImage1D(int textureTarget, int levelOfDetail, int colorComponents, int width, int borderWidth, int pixelFormat, int dataType, [In] ushort[ , , ] pixels)
        /// <summary>
        ///     Specifies a one-dimensional texture image.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexImage1D(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage1D(int textureTarget, int levelOfDetail, int colorComponents, int width, int borderWidth, int pixelFormat, int dataType, [In] ushort[ , , ] pixels);
        #endregion glTexImage1D(int textureTarget, int levelOfDetail, int colorComponents, int width, int borderWidth, int pixelFormat, int dataType, [In] ushort[ , , ] pixels)

        #region glTexImage1D(int textureTarget, int levelOfDetail, int colorComponents, int width, int borderWidth, int pixelFormat, int dataType, [In] uint[] pixels)
        /// <summary>
        ///     Specifies a one-dimensional texture image.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexImage1D(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage1D(int textureTarget, int levelOfDetail, int colorComponents, int width, int borderWidth, int pixelFormat, int dataType, [In] uint[] pixels);
        #endregion glTexImage1D(int textureTarget, int levelOfDetail, int colorComponents, int width, int borderWidth, int pixelFormat, int dataType, [In] uint[] pixels)

        #region glTexImage1D(int textureTarget, int levelOfDetail, int colorComponents, int width, int borderWidth, int pixelFormat, int dataType, [In] uint[ , ] pixels)
        /// <summary>
        ///     Specifies a one-dimensional texture image.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexImage1D(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage1D(int textureTarget, int levelOfDetail, int colorComponents, int width, int borderWidth, int pixelFormat, int dataType, [In] uint[ , ] pixels);
        #endregion glTexImage1D(int textureTarget, int levelOfDetail, int colorComponents, int width, int borderWidth, int pixelFormat, int dataType, [In] uint[ , ] pixels)

        #region glTexImage1D(int textureTarget, int levelOfDetail, int colorComponents, int width, int borderWidth, int pixelFormat, int dataType, [In] uint[ , , ] pixels)
        /// <summary>
        ///     Specifies a one-dimensional texture image.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexImage1D(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage1D(int textureTarget, int levelOfDetail, int colorComponents, int width, int borderWidth, int pixelFormat, int dataType, [In] uint[ , , ] pixels);
        #endregion glTexImage1D(int textureTarget, int levelOfDetail, int colorComponents, int width, int borderWidth, int pixelFormat, int dataType, [In] uint[ , , ] pixels)

        #region glTexImage1D(int textureTarget, int levelOfDetail, int colorComponents, int width, int borderWidth, int pixelFormat, int dataType, [In] IntPtr pixels)
        /// <summary>
        ///     Specifies a one-dimensional texture image.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexImage1D(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage1D(int textureTarget, int levelOfDetail, int colorComponents, int width, int borderWidth, int pixelFormat, int dataType, [In] IntPtr pixels);
        #endregion glTexImage1D(int textureTarget, int levelOfDetail, int colorComponents, int width, int borderWidth, int pixelFormat, int dataType, [In] IntPtr pixels)

        #region glTexImage1D(int textureTarget, int levelOfDetail, int colorComponents, int width, int borderWidth, int pixelFormat, int dataType, [In] void *pixels)
        /// <summary>
        ///     Specifies a one-dimensional texture image.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexImage1D(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glTexImage1D(int textureTarget, int levelOfDetail, int colorComponents, int width, int borderWidth, int pixelFormat, int dataType, [In] void *pixels);
        #endregion glTexImage1D(int textureTarget, int levelOfDetail, int colorComponents, int width, int borderWidth, int pixelFormat, int dataType, [In] void *pixels)

        #region glTexImage2D(int textureTarget, int levelOfDetail, int colorComponents, int width, int height, int borderWidth, int pixelFormat, int dataType, [In] byte[] pixels)
        /// <summary>
        ///     The <b>glTexImage2D</b> mehtod specifies a two-dimensional texture image.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexImage2D(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage2D(int textureTarget, int levelOfDetail, int colorComponents, int width, int height, int borderWidth, int pixelFormat, int dataType, [In] byte[] pixels);
        #endregion glTexImage2D(int textureTarget, int levelOfDetail, int colorComponents, int width, int height, int borderWidth, int pixelFormat, int dataType, [In] byte[] pixels)

        #region glTexImage2D(int textureTarget, int levelOfDetail, int colorComponents, int width, int height, int borderWidth, int pixelFormat, int dataType, [In] byte[ , ] pixels)
        /// <summary>
        ///     The <b>glTexImage2D</b> mehtod specifies a two-dimensional texture image.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexImage2D(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage2D(int textureTarget, int levelOfDetail, int colorComponents, int width, int height, int borderWidth, int pixelFormat, int dataType, [In] byte[ , ] pixels);
        #endregion glTexImage2D(int textureTarget, int levelOfDetail, int colorComponents, int width, int height, int borderWidth, int pixelFormat, int dataType, [In] byte[ , ] pixels)

        #region glTexImage2D(int textureTarget, int levelOfDetail, int colorComponents, int width, int height, int borderWidth, int pixelFormat, int dataType, [In] byte[ , , ] pixels)
        /// <summary>
        ///     The <b>glTexImage2D</b> mehtod specifies a two-dimensional texture image.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexImage2D(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage2D(int textureTarget, int levelOfDetail, int colorComponents, int width, int height, int borderWidth, int pixelFormat, int dataType, [In] byte[ , , ] pixels);
        #endregion glTexImage2D(int textureTarget, int levelOfDetail, int colorComponents, int width, int height, int borderWidth, int pixelFormat, int dataType, [In] byte[ , , ] pixels)

        #region glTexImage2D(int textureTarget, int levelOfDetail, int colorComponents, int width, int height, int borderWidth, int pixelFormat, int dataType, [In] double[] pixels)
        /// <summary>
        ///     The <b>glTexImage2D</b> mehtod specifies a two-dimensional texture image.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexImage2D(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage2D(int textureTarget, int levelOfDetail, int colorComponents, int width, int height, int borderWidth, int pixelFormat, int dataType, [In] double[] pixels);
        #endregion glTexImage2D(int textureTarget, int levelOfDetail, int colorComponents, int width, int height, int borderWidth, int pixelFormat, int dataType, [In] double[] pixels)

        #region glTexImage2D(int textureTarget, int levelOfDetail, int colorComponents, int width, int height, int borderWidth, int pixelFormat, int dataType, [In] double[ , ] pixels)
        /// <summary>
        ///     The <b>glTexImage2D</b> mehtod specifies a two-dimensional texture image.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexImage2D(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage2D(int textureTarget, int levelOfDetail, int colorComponents, int width, int height, int borderWidth, int pixelFormat, int dataType, [In] double[ , ] pixels);
        #endregion glTexImage2D(int textureTarget, int levelOfDetail, int colorComponents, int width, int height, int borderWidth, int pixelFormat, int dataType, [In] double[ , ] pixels)

        #region glTexImage2D(int textureTarget, int levelOfDetail, int colorComponents, int width, int height, int borderWidth, int pixelFormat, int dataType, [In] double[ , , ] pixels)
        /// <summary>
        ///     The <b>glTexImage2D</b> mehtod specifies a two-dimensional texture image.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexImage2D(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage2D(int textureTarget, int levelOfDetail, int colorComponents, int width, int height, int borderWidth, int pixelFormat, int dataType, [In] double[ , , ] pixels);
        #endregion glTexImage2D(int textureTarget, int levelOfDetail, int colorComponents, int width, int height, int borderWidth, int pixelFormat, int dataType, [In] double[ , , ] pixels)

        #region glTexImage2D(int textureTarget, int levelOfDetail, int colorComponents, int width, int height, int borderWidth, int pixelFormat, int dataType, [In] short[] pixels)
        /// <summary>
        ///     The <b>glTexImage2D</b> mehtod specifies a two-dimensional texture image.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexImage2D(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage2D(int textureTarget, int levelOfDetail, int colorComponents, int width, int height, int borderWidth, int pixelFormat, int dataType, [In] short[] pixels);
        #endregion glTexImage2D(int textureTarget, int levelOfDetail, int colorComponents, int width, int height, int borderWidth, int pixelFormat, int dataType, [In] short[] pixels)

        #region glTexImage2D(int textureTarget, int levelOfDetail, int colorComponents, int width, int height, int borderWidth, int pixelFormat, int dataType, [In] short[ , ] pixels)
        /// <summary>
        ///     The <b>glTexImage2D</b> mehtod specifies a two-dimensional texture image.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexImage2D(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage2D(int textureTarget, int levelOfDetail, int colorComponents, int width, int height, int borderWidth, int pixelFormat, int dataType, [In] short[ , ] pixels);
        #endregion glTexImage2D(int textureTarget, int levelOfDetail, int colorComponents, int width, int height, int borderWidth, int pixelFormat, int dataType, [In] short[ , ] pixels)

        #region glTexImage2D(int textureTarget, int levelOfDetail, int colorComponents, int width, int height, int borderWidth, int pixelFormat, int dataType, [In] short[ , , ] pixels)
        /// <summary>
        ///     The <b>glTexImage2D</b> mehtod specifies a two-dimensional texture image.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexImage2D(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage2D(int textureTarget, int levelOfDetail, int colorComponents, int width, int height, int borderWidth, int pixelFormat, int dataType, [In] short[ , , ] pixels);
        #endregion glTexImage2D(int textureTarget, int levelOfDetail, int colorComponents, int width, int height, int borderWidth, int pixelFormat, int dataType, [In] short[ , , ] pixels)

        #region glTexImage2D(int textureTarget, int levelOfDetail, int colorComponents, int width, int height, int borderWidth, int pixelFormat, int dataType, [In] int[] pixels)
        /// <summary>
        ///     The <b>glTexImage2D</b> mehtod specifies a two-dimensional texture image.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexImage2D(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage2D(int textureTarget, int levelOfDetail, int colorComponents, int width, int height, int borderWidth, int pixelFormat, int dataType, [In] int[] pixels);
        #endregion glTexImage2D(int textureTarget, int levelOfDetail, int colorComponents, int width, int height, int borderWidth, int pixelFormat, int dataType, [In] int[] pixels)

        #region glTexImage2D(int textureTarget, int levelOfDetail, int colorComponents, int width, int height, int borderWidth, int pixelFormat, int dataType, [In] int[ , ] pixels)
        /// <summary>
        ///     The <b>glTexImage2D</b> mehtod specifies a two-dimensional texture image.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexImage2D(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage2D(int textureTarget, int levelOfDetail, int colorComponents, int width, int height, int borderWidth, int pixelFormat, int dataType, [In] int[ , ] pixels);
        #endregion glTexImage2D(int textureTarget, int levelOfDetail, int colorComponents, int width, int height, int borderWidth, int pixelFormat, int dataType, [In] int[ , ] pixels)

        #region glTexImage2D(int textureTarget, int levelOfDetail, int colorComponents, int width, int height, int borderWidth, int pixelFormat, int dataType, [In] int[ , , ] pixels)
        /// <summary>
        ///     The <b>glTexImage2D</b> mehtod specifies a two-dimensional texture image.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexImage2D(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage2D(int textureTarget, int levelOfDetail, int colorComponents, int width, int height, int borderWidth, int pixelFormat, int dataType, [In] int[ , , ] pixels);
        #endregion glTexImage2D(int textureTarget, int levelOfDetail, int colorComponents, int width, int height, int borderWidth, int pixelFormat, int dataType, [In] int[ , , ] pixels)

        #region glTexImage2D(int textureTarget, int levelOfDetail, int colorComponents, int width, int height, int borderWidth, int pixelFormat, int dataType, [In] float[] pixels)
        /// <summary>
        ///     The <b>glTexImage2D</b> mehtod specifies a two-dimensional texture image.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexImage2D(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage2D(int textureTarget, int levelOfDetail, int colorComponents, int width, int height, int borderWidth, int pixelFormat, int dataType, [In] float[] pixels);
        #endregion glTexImage2D(int textureTarget, int levelOfDetail, int colorComponents, int width, int height, int borderWidth, int pixelFormat, int dataType, [In] float[] pixels)

        #region glTexImage2D(int textureTarget, int levelOfDetail, int colorComponents, int width, int height, int borderWidth, int pixelFormat, int dataType, [In] float[ , ] pixels)
        /// <summary>
        ///     The <b>glTexImage2D</b> mehtod specifies a two-dimensional texture image.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexImage2D(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage2D(int textureTarget, int levelOfDetail, int colorComponents, int width, int height, int borderWidth, int pixelFormat, int dataType, [In] float[ , ] pixels);
        #endregion glTexImage2D(int textureTarget, int levelOfDetail, int colorComponents, int width, int height, int borderWidth, int pixelFormat, int dataType, [In] float[ , ] pixels)

        #region glTexImage2D(int textureTarget, int levelOfDetail, int colorComponents, int width, int height, int borderWidth, int pixelFormat, int dataType, [In] float[ , , ] pixels)
        /// <summary>
        ///     The <b>glTexImage2D</b> mehtod specifies a two-dimensional texture image.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexImage2D(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage2D(int textureTarget, int levelOfDetail, int colorComponents, int width, int height, int borderWidth, int pixelFormat, int dataType, [In] float[ , , ] pixels);
        #endregion glTexImage2D(int textureTarget, int levelOfDetail, int colorComponents, int width, int height, int borderWidth, int pixelFormat, int dataType, [In] float[ , , ] pixels)

        #region glTexImage2D(int textureTarget, int levelOfDetail, int colorComponents, int width, int height, int borderWidth, int pixelFormat, int dataType, [In] ushort[] pixels)
        /// <summary>
        ///     The <b>glTexImage2D</b> mehtod specifies a two-dimensional texture image.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexImage2D(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage2D(int textureTarget, int levelOfDetail, int colorComponents, int width, int height, int borderWidth, int pixelFormat, int dataType, [In] ushort[] pixels);
        #endregion glTexImage2D(int textureTarget, int levelOfDetail, int colorComponents, int width, int height, int borderWidth, int pixelFormat, int dataType, [In] ushort[] pixels)

        #region glTexImage2D(int textureTarget, int levelOfDetail, int colorComponents, int width, int height, int borderWidth, int pixelFormat, int dataType, [In] ushort[ , ] pixels)
        /// <summary>
        ///     The <b>glTexImage2D</b> mehtod specifies a two-dimensional texture image.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexImage2D(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage2D(int textureTarget, int levelOfDetail, int colorComponents, int width, int height, int borderWidth, int pixelFormat, int dataType, [In] ushort[ , ] pixels);
        #endregion glTexImage2D(int textureTarget, int levelOfDetail, int colorComponents, int width, int height, int borderWidth, int pixelFormat, int dataType, [In] ushort[ , ] pixels)

        #region glTexImage2D(int textureTarget, int levelOfDetail, int colorComponents, int width, int height, int borderWidth, int pixelFormat, int dataType, [In] ushort[ , , ] pixels)
        /// <summary>
        ///     The <b>glTexImage2D</b> mehtod specifies a two-dimensional texture image.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexImage2D(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage2D(int textureTarget, int levelOfDetail, int colorComponents, int width, int height, int borderWidth, int pixelFormat, int dataType, [In] ushort[ , , ] pixels);
        #endregion glTexImage2D(int textureTarget, int levelOfDetail, int colorComponents, int width, int height, int borderWidth, int pixelFormat, int dataType, [In] ushort[ , , ] pixels)

        #region glTexImage2D(int textureTarget, int levelOfDetail, int colorComponents, int width, int height, int borderWidth, int pixelFormat, int dataType, [In] uint[] pixels)
        /// <summary>
        ///     The <b>glTexImage2D</b> mehtod specifies a two-dimensional texture image.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexImage2D(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage2D(int textureTarget, int levelOfDetail, int colorComponents, int width, int height, int borderWidth, int pixelFormat, int dataType, [In] uint[] pixels);
        #endregion glTexImage2D(int textureTarget, int levelOfDetail, int colorComponents, int width, int height, int borderWidth, int pixelFormat, int dataType, [In] uint[] pixels)

        #region glTexImage2D(int textureTarget, int levelOfDetail, int colorComponents, int width, int height, int borderWidth, int pixelFormat, int dataType, [In] uint[ , ] pixels)
        /// <summary>
        ///     The <b>glTexImage2D</b> mehtod specifies a two-dimensional texture image.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexImage2D(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage2D(int textureTarget, int levelOfDetail, int colorComponents, int width, int height, int borderWidth, int pixelFormat, int dataType, [In] uint[ , ] pixels);
        #endregion glTexImage2D(int textureTarget, int levelOfDetail, int colorComponents, int width, int height, int borderWidth, int pixelFormat, int dataType, [In] uint[ , ] pixels)

        #region glTexImage2D(int textureTarget, int levelOfDetail, int colorComponents, int width, int height, int borderWidth, int pixelFormat, int dataType, [In] uint[ , , ] pixels)
        /// <summary>
        ///     The <b>glTexImage2D</b> mehtod specifies a two-dimensional texture image.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexImage2D(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage2D(int textureTarget, int levelOfDetail, int colorComponents, int width, int height, int borderWidth, int pixelFormat, int dataType, [In] uint[ , , ] pixels);
        #endregion glTexImage2D(int textureTarget, int levelOfDetail, int colorComponents, int width, int height, int borderWidth, int pixelFormat, int dataType, [In] uint[ , , ] pixels)

        #region glTexImage2D(int textureTarget, int levelOfDetail, int colorComponents, int width, int height, int borderWidth, int pixelFormat, int dataType, [In] IntPtr pixels)
        /// <summary>
        ///     The <b>glTexImage2D</b> mehtod specifies a two-dimensional texture image.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexImage2D(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage2D(int textureTarget, int levelOfDetail, int colorComponents, int width, int height, int borderWidth, int pixelFormat, int dataType, [In] IntPtr pixels);
        #endregion glTexImage2D(int textureTarget, int levelOfDetail, int colorComponents, int width, int height, int borderWidth, int pixelFormat, int dataType, [In] IntPtr pixels)

        #region glTexImage2D(int textureTarget, int levelOfDetail, int colorComponents, int width, int height, int borderWidth, int pixelFormat, int dataType, [In] void *pixels)
        /// <summary>
        ///     The <b>glTexImage2D</b> mehtod specifies a two-dimensional texture image.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexImage2D(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glTexImage2D(int textureTarget, int levelOfDetail, int colorComponents, int width, int height, int borderWidth, int pixelFormat, int dataType, [In] void *pixels);
        #endregion glTexImage2D(int textureTarget, int levelOfDetail, int colorComponents, int width, int height, int borderWidth, int pixelFormat, int dataType, [In] void *pixels)

        #region glTexParameterf(int textureTarget, int parameter, float parameterValue)
        /// <summary>
        ///     Sets texture parameters.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexParameterf(GLenum target, GLenum pname, GLfloat param);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glTexParameterf(int textureTarget, int parameter, float parameterValue);
        #endregion glTexParameterf(int textureTarget, int parameter, float parameterValue)

        #region glTexParameterfv(int textureTarget, int parameter, [In] float[] parameterValues)
        /// <summary>
        ///     Sets texture parameters.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexParameterfv(GLenum target, GLenum pname, const GLfloat *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glTexParameterfv(int textureTarget, int parameter, [In] float[] parameterValues);
        #endregion glTexParameterfv(int textureTarget, int parameter, [In] float[] parameterValues)

        #region glTexParameterfv(int textureTarget, int parameter, [In] IntPtr parameterValues)
        /// <summary>
        ///     Sets texture parameters.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexParameterfv(GLenum target, GLenum pname, const GLfloat *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glTexParameterfv(int textureTarget, int parameter, [In] IntPtr parameterValues);
        #endregion glTexParameterfv(int textureTarget, int parameter, [In] IntPtr parameterValues)

        #region glTexParameterfv(int textureTarget, int parameter, [In] float *parameterValues)
        /// <summary>
        ///     Sets texture parameters.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexParameterfv(GLenum target, GLenum pname, const GLfloat *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glTexParameterfv(int textureTarget, int parameter, [In] float *parameterValues);
        #endregion glTexParameterfv(int textureTarget, int parameter, [In] float *parameterValues)

        #region glTexParameteri(int textureTarget, int parameter, int parameterValue)
        /// <summary>
        ///     Sets texture parameters.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexParameteri(GLenum target, GLenum pname, GLint param);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glTexParameteri(int textureTarget, int parameter, int parameterValue);
        #endregion glTexParameteri(int textureTarget, int parameter, int parameterValue)

        #region glTexParameteriv(int textureTarget, int parameter, [In] int[] parameterValues)
        /// <summary>
        ///     Sets texture parameters.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexParameteriv(GLenum target, GLenum pname, const GLint *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glTexParameteriv(int textureTarget, int parameter, [In] int[] parameterValues);
        #endregion glTexParameteriv(int textureTarget, int parameter, [In] int[] parameterValues)

        #region glTexParameteriv(int textureTarget, int parameter, [In] IntPtr parameterValues)
        /// <summary>
        ///     Sets texture parameters.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexParameteriv(GLenum target, GLenum pname, const GLint *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glTexParameteriv(int textureTarget, int parameter, [In] IntPtr parameterValues);
        #endregion glTexParameteriv(int textureTarget, int parameter, [In] IntPtr parameterValues)

        #region glTexParameteriv(int textureTarget, int parameter, [In] int *parameterValues)
        /// <summary>
        ///     Sets texture parameters.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexParameteriv(GLenum target, GLenum pname, const GLint *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glTexParameteriv(int textureTarget, int parameter, [In] int *parameterValues);
        #endregion glTexParameteriv(int textureTarget, int parameter, [In] int *parameterValues)

        #region glTranslated(double x, double y, double z)
        /// <summary>
        ///     Multiplies the current matrix by a translation matrix.
        /// </summary>
        // GLAPI void GLAPIENTRY glTranslated(GLdouble x, GLdouble y, GLdouble z);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glTranslated(double x, double y, double z);
        #endregion glTranslated(double x, double y, double z)

        #region glTranslatef(float x, float y, float z)
        /// <summary>
        ///     Multiplies the current matrix by a translation matrix.
        /// </summary>
        // GLAPI void GLAPIENTRY glTranslatef(GLfloat x, GLfloat y, GLfloat z);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glTranslatef(float x, float y, float z);
        #endregion glTranslatef(float x, float y, float z)

        #region glVertex2d(double x, double y)
        /// <summary>
        ///     Specifies a vertex.
        /// </summary>
        // GLAPI void GLAPIENTRY glVertex2d(GLdouble x, GLdouble y);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glVertex2d(double x, double y);
        #endregion glVertex2d(double x, double y)

        #region glVertex2dv([In] double[] coordinates)
        /// <summary>
        ///     Specifies a vertex.
        /// </summary>
        // GLAPI void GLAPIENTRY glVertex2dv(const GLdouble *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glVertex2dv([In] double[] coordinates);
        #endregion glVertex2dv([In] double[] coordinates)

        #region glVertex2dv([In] IntPtr coordinates)
        /// <summary>
        ///     Specifies a vertex.
        /// </summary>
        // GLAPI void GLAPIENTRY glVertex2dv(const GLdouble *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glVertex2dv([In] IntPtr coordinates);
        #endregion glVertex2dv([In] IntPtr coordinates)

        #region glVertex2dv([In] double *coordinates)
        /// <summary>
        ///     Specifies a vertex.
        /// </summary>
        // GLAPI void GLAPIENTRY glVertex2dv(const GLdouble *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glVertex2dv([In] double *coordinates);
        #endregion glVertex2dv([In] double *coordinates)

        #region glVertex2f(float x, float y)
        /// <summary>
        ///     Specifies a vertex.
        /// </summary>
        // GLAPI void GLAPIENTRY glVertex2f(GLfloat x, GLfloat y);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glVertex2f(float x, float y);
        #endregion glVertex2f(float x, float y)

        #region glVertex2fv([In] float[] coordinates)
        /// <summary>
        ///     Specifies a vertex.
        /// </summary>
        // GLAPI void GLAPIENTRY glVertex2fv(const GLfloat *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glVertex2fv([In] float[] coordinates);
        #endregion glVertex2fv([In] float[] coordinates)

        #region glVertex2fv([In] IntPtr coordinates)
        /// <summary>
        ///     Specifies a vertex.
        /// </summary>
        // GLAPI void GLAPIENTRY glVertex2fv(const GLfloat *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glVertex2fv([In] IntPtr coordinates);
        #endregion glVertex2fv([In] IntPtr coordinates)

        #region glVertex2fv([In] float *coordinates)
        /// <summary>
        ///     Specifies a vertex.
        /// </summary>
        // GLAPI void GLAPIENTRY glVertex2fv(const GLfloat *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glVertex2fv([In] float *coordinates);
        #endregion glVertex2fv([In] float *coordinates)

        #region glVertex2i(int x, int y)
        /// <summary>
        ///     Specifies a vertex.
        /// </summary>
        // GLAPI void GLAPIENTRY glVertex2i(GLint x, GLint y);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glVertex2i(int x, int y);
        #endregion glVertex2i(int x, int y)

        #region glVertex2iv([In] int[] coordinates)
        /// <summary>
        ///     Specifies a vertex.
        /// </summary>
        // GLAPI void GLAPIENTRY glVertex2iv(const GLint *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glVertex2iv([In] int[] coordinates);
        #endregion glVertex2iv([In] int[] coordinates)

        #region glVertex2iv([In] IntPtr coordinates)
        /// <summary>
        ///     Specifies a vertex.
        /// </summary>
        // GLAPI void GLAPIENTRY glVertex2iv(const GLint *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glVertex2iv([In] IntPtr coordinates);
        #endregion glVertex2iv([In] IntPtr coordinates)

        #region glVertex2iv([In] int *coordinates)
        /// <summary>
        ///     Specifies a vertex.
        /// </summary>
        // GLAPI void GLAPIENTRY glVertex2iv(const GLint *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glVertex2iv([In] int *coordinates);
        #endregion glVertex2iv([In] int *coordinates)

        #region glVertex2s(short x, short y)
        /// <summary>
        ///     Specifies a vertex.
        /// </summary>
        // GLAPI void GLAPIENTRY glVertex2s(GLshort x, GLshort y);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glVertex2s(short x, short y);
        #endregion glVertex2s(short x, short y)

        #region glVertex2sv([In] short[] coordinates)
        /// <summary>
        ///     Specifies a vertex.
        /// </summary>
        // GLAPI void GLAPIENTRY glVertex2sv(const GLshort *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glVertex2sv([In] short[] coordinates);
        #endregion glVertex2sv([In] short[] coordinates)

        #region glVertex2sv([In] IntPtr coordinates)
        /// <summary>
        ///     Specifies a vertex.
        /// </summary>
        // GLAPI void GLAPIENTRY glVertex2sv(const GLshort *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glVertex2sv([In] IntPtr coordinates);
        #endregion glVertex2sv([In] IntPtr coordinates)

        #region glVertex2sv([In] short *coordinates)
        /// <summary>
        ///     Specifies a vertex.
        /// </summary>
        // GLAPI void GLAPIENTRY glVertex2sv(const GLshort *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glVertex2sv([In] short *coordinates);
        #endregion glVertex2sv([In] short *coordinates)

        #region glVertex3d(double x, double y, double z)
        /// <summary>
        ///     Specifies a vertex.
        /// </summary>
        // GLAPI void GLAPIENTRY glVertex3d(GLdouble x, GLdouble y, GLdouble z);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glVertex3d(double x, double y, double z);
        #endregion glVertex3d(double x, double y, double z)

        #region glVertex3dv([In] double[] coordinates)
        /// <summary>
        ///     Specifies a vertex.
        /// </summary>
        // GLAPI void GLAPIENTRY glVertex3dv(const GLdouble *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glVertex3dv([In] double[] coordinates);
        #endregion glVertex3dv([In] double[] coordinates)

        #region glVertex3dv([In] IntPtr coordinates)
        /// <summary>
        ///     Specifies a vertex.
        /// </summary>
        // GLAPI void GLAPIENTRY glVertex3dv(const GLdouble *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glVertex3dv([In] IntPtr coordinates);
        #endregion glVertex3dv([In] IntPtr coordinates)

        #region glVertex3dv([In] double *coordinates)
        /// <summary>
        ///     Specifies a vertex.
        /// </summary>
        // GLAPI void GLAPIENTRY glVertex3dv(const GLdouble *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glVertex3dv([In] double *coordinates);
        #endregion glVertex3dv([In] double *coordinates)

        #region glVertex3f(float x, float y, float z)
        /// <summary>
        ///     Specifies a vertex.
        /// </summary>
        // GLAPI void GLAPIENTRY glVertex3f(GLfloat x, GLfloat y, GLfloat z);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glVertex3f(float x, float y, float z);
        #endregion glVertex3f(float x, float y, float z)

        #region glVertex3fv([In] float[] coordinates)
        /// <summary>
        ///     Specifies a vertex.
        /// </summary>
        // GLAPI void GLAPIENTRY glVertex3fv(const GLfloat *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glVertex3fv([In] float[] coordinates);
        #endregion glVertex3fv([In] float[] coordinates)

        #region glVertex3fv([In] IntPtr coordinates)
        /// <summary>
        ///     Specifies a vertex.
        /// </summary>
        // GLAPI void GLAPIENTRY glVertex3fv(const GLfloat *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glVertex3fv([In] IntPtr coordinates);
        #endregion glVertex3fv([In] IntPtr coordinates)

        #region glVertex3fv([In] float *coordinates)
        /// <summary>
        ///     Specifies a vertex.
        /// </summary>
        // GLAPI void GLAPIENTRY glVertex3fv(const GLfloat *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glVertex3fv([In] float *coordinates);
        #endregion glVertex3fv([In] float *coordinates)

        #region glVertex3i(int x, int y, int z)
        /// <summary>
        ///     Specifies a vertex.
        /// </summary>
        // GLAPI void GLAPIENTRY glVertex3i(GLint x, GLint y, GLint z);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glVertex3i(int x, int y, int z);
        #endregion glVertex3i(int x, int y, int z)

        #region glVertex3iv([In] int[] coordinates)
        /// <summary>
        ///     Specifies a vertex.
        /// </summary>
        // GLAPI void GLAPIENTRY glVertex3iv(const GLint *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glVertex3iv([In] int[] coordinates);
        #endregion glVertex3iv([In] int[] coordinates)

        #region glVertex3iv([In] IntPtr coordinates)
        /// <summary>
        ///     Specifies a vertex.
        /// </summary>
        // GLAPI void GLAPIENTRY glVertex3iv(const GLint *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glVertex3iv([In] IntPtr coordinates);
        #endregion glVertex3iv([In] IntPtr coordinates)

        #region glVertex3iv([In] int *coordinates)
        /// <summary>
        ///     Specifies a vertex.
        /// </summary>
        // GLAPI void GLAPIENTRY glVertex3iv(const GLint *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glVertex3iv([In] int *coordinates);
        #endregion glVertex3iv([In] int *coordinates)

        #region glVertex3s(short x, short y, short z)
        /// <summary>
        ///     Specifies a vertex.
        /// </summary>
        // GLAPI void GLAPIENTRY glVertex3s(GLshort x, GLshort y, GLshort z);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glVertex3s(short x, short y, short z);
        #endregion glVertex3s(short x, short y, short z)

        #region glVertex3sv([In] short[] coordinates)
        /// <summary>
        ///     Specifies a vertex.
        /// </summary>
        // GLAPI void GLAPIENTRY glVertex3sv(const GLshort *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glVertex3sv([In] short[] coordinates);
        #endregion glVertex3sv([In] short[] coordinates)

        #region glVertex3sv([In] IntPtr coordinates)
        /// <summary>
        ///     Specifies a vertex.
        /// </summary>
        // GLAPI void GLAPIENTRY glVertex3sv(const GLshort *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glVertex3sv([In] IntPtr coordinates);
        #endregion glVertex3sv([In] IntPtr coordinates)

        #region glVertex3sv([In] short *coordinates)
        /// <summary>
        ///     Specifies a vertex.
        /// </summary>
        // GLAPI void GLAPIENTRY glVertex3sv(const GLshort *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glVertex3sv([In] short *coordinates);
        #endregion glVertex3sv([In] short *coordinates)

        #region glVertex4d(double x, double y, double z, double w)
        /// <summary>
        ///     Specifies a vertex.
        /// </summary>
        // GLAPI void GLAPIENTRY glVertex4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glVertex4d(double x, double y, double z, double w);
        #endregion glVertex4d(double x, double y, double z, double w)

        #region glVertex4dv([In] double[] coordinates)
        /// <summary>
        ///     Specifies a vertex.
        /// </summary>
        // GLAPI void GLAPIENTRY glVertex4dv(const GLdouble *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glVertex4dv([In] double[] coordinates);
        #endregion glVertex4dv([In] double[] coordinates)

        #region glVertex4dv([In] IntPtr coordinates)
        /// <summary>
        ///     Specifies a vertex.
        /// </summary>
        // GLAPI void GLAPIENTRY glVertex4dv(const GLdouble *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glVertex4dv([In] IntPtr coordinates);
        #endregion glVertex4dv([In] IntPtr coordinates)

        #region glVertex4dv([In] double *coordinates)
        /// <summary>
        ///     Specifies a vertex.
        /// </summary>
        // GLAPI void GLAPIENTRY glVertex4dv(const GLdouble *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glVertex4dv([In] double *coordinates);
        #endregion glVertex4dv([In] double *coordinates)

        #region glVertex4f(float x, float y, float z, float w)
        /// <summary>
        ///     Specifies a vertex.
        /// </summary>
        // GLAPI void GLAPIENTRY glVertex4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glVertex4f(float x, float y, float z, float w);
        #endregion glVertex4f(float x, float y, float z, float w)

        #region glVertex4fv([In] float[] coordinates)
        /// <summary>
        ///     Specifies a vertex.
        /// </summary>
        // GLAPI void GLAPIENTRY glVertex4fv(const GLfloat *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glVertex4fv([In] float[] coordinates);
        #endregion glVertex4fv([In] float[] coordinates)

        #region glVertex4fv([In] IntPtr coordinates)
        /// <summary>
        ///     Specifies a vertex.
        /// </summary>
        // GLAPI void GLAPIENTRY glVertex4fv(const GLfloat *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glVertex4fv([In] IntPtr coordinates);
        #endregion glVertex4fv([In] IntPtr coordinates)

        #region glVertex4fv([In] float *coordinates)
        /// <summary>
        ///     Specifies a vertex.
        /// </summary>
        // GLAPI void GLAPIENTRY glVertex4fv(const GLfloat *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glVertex4fv([In] float *coordinates);
        #endregion glVertex4fv([In] float *coordinates)

        #region glVertex4i(int x, int y, int z, int w)
        /// <summary>
        ///     Specifies a vertex.
        /// </summary>
        // GLAPI void GLAPIENTRY glVertex4i(GLint x, GLint y, GLint z, GLint w);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glVertex4i(int x, int y, int z, int w);
        #endregion glVertex4i(int x, int y, int z, int w)

        #region glVertex4iv([In] int[] coordinates)
        /// <summary>
        ///     Specifies a vertex.
        /// </summary>
        // GLAPI void GLAPIENTRY glVertex4iv(const GLint *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glVertex4iv([In] int[] coordinates);
        #endregion glVertex4iv([In] int[] coordinates)

        #region glVertex4iv([In] IntPtr coordinates)
        /// <summary>
        ///     Specifies a vertex.
        /// </summary>
        // GLAPI void GLAPIENTRY glVertex4iv(const GLint *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glVertex4iv([In] IntPtr coordinates);
        #endregion glVertex4iv([In] IntPtr coordinates)

        #region glVertex4iv([In] int *coordinates)
        /// <summary>
        ///     Specifies a vertex.
        /// </summary>
        // GLAPI void GLAPIENTRY glVertex4iv(const GLint *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glVertex4iv([In] int *coordinates);
        #endregion glVertex4iv([In] int *coordinates)

        #region glVertex4s(short x, short y, short z, short w)
        /// <summary>
        ///     Specifies a vertex.
        /// </summary>
        // GLAPI void GLAPIENTRY glVertex4s(GLshort x, GLshort y, GLshort z, GLshort w);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glVertex4s(short x, short y, short z, short w);
        #endregion glVertex4s(short x, short y, short z, short w)

        #region glVertex4sv([In] short[] coordinates)
        /// <summary>
        ///     Specifies a vertex.
        /// </summary>
        // GLAPI void GLAPIENTRY glVertex4sv(const GLshort *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glVertex4sv([In] short[] coordinates);
        #endregion glVertex4sv([In] short[] coordinates)

        #region glVertex4sv([In] IntPtr coordinates)
        /// <summary>
        ///     Specifies a vertex.
        /// </summary>
        // GLAPI void GLAPIENTRY glVertex4sv(const GLshort *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glVertex4sv([In] IntPtr coordinates);
        #endregion glVertex4sv([In] IntPtr coordinates)

        #region glVertex4sv([In] short *coordinates)
        /// <summary>
        ///     Specifies a vertex.
        /// </summary>
        // GLAPI void GLAPIENTRY glVertex4sv(const GLshort *v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glVertex4sv([In] short *coordinates);
        #endregion glVertex4sv([In] short *coordinates)

        #region glViewport(int x, int y, int width, int height)
        /// <summary>
        ///     Sets the viewport.
        /// </summary>
        // GLAPI void GLAPIENTRY glViewport(GLint x, GLint y, GLsizei width, GLsizei height);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glViewport(int x, int y, int width, int height);
        #endregion glViewport(int x, int y, int width, int height)
        #endregion OpenGL 1.0 Methods

        #region OpenGL 1.1 Methods
        #region int glAreTexturesResident(int number, [In] int[] textures, [In] int[] residenceStatuses)
        /// <summary>
        ///     Determines if textures are loaded in texture memory.
        /// </summary>
        // WINGDIAPI GLboolean APIENTRY glAreTexturesResident (GLsizei n, const GLuint *textures, GLboolean *residences);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern int glAreTexturesResident(int number, [In] int[] textures, [In] int[] residenceStatuses);
        #endregion int glAreTexturesResident(int number, [In] int[] textures, [In] int[] residenceStatuses)

        #region int glAreTexturesResident(int number, [In] ref int textures, out int residenceStatus)
        /// <summary>
        ///     Determines if textures are loaded in texture memory.
        /// </summary>
        // WINGDIAPI GLboolean APIENTRY glAreTexturesResident (GLsizei n, const GLuint *textures, GLboolean *residences);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern int glAreTexturesResident(int number, [In] ref int textures, out int residenceStatus);
        #endregion int glAreTexturesResident(int number, [In] ref int texture, out int residenceStatus)

        #region int glAreTexturesResident(int number, [In] IntPtr textures, [In] IntPtr residenceStatuses)
        /// <summary>
        ///     Determines if textures are loaded in texture memory.
        /// </summary>
        // WINGDIAPI GLboolean APIENTRY glAreTexturesResident (GLsizei n, const GLuint *textures, GLboolean *residences);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern int glAreTexturesResident(int number, [In] IntPtr textures, [In] IntPtr residenceStatuses);
        #endregion int glAreTexturesResident(int number, [In] IntPtr textures, [In] IntPtr residenceStatuses)

        #region int glAreTexturesResident(int number, [In] int *textures, [In] int *residenceStatuses)
        /// <summary>
        ///     Determines if textures are loaded in texture memory.
        /// </summary>
        // WINGDIAPI GLboolean APIENTRY glAreTexturesResident (GLsizei n, const GLuint *textures, GLboolean *residences);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern int glAreTexturesResident(int number, [In] int *textures, [In] int *residenceStatuses);
        #endregion int glAreTexturesResident(int number, [In] int *textures, [In] int *residenceStatuses)

        #region glArrayElement(int index)
        /// <summary>
        ///     Renders a vertex using the specified vertex array element.
        /// </summary>
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glArrayElement(int index);
        #endregion glArrayElement(int index)

        #region glBindTexture(int target, int texture)
        /// <summary>
        ///     Binds a named texture to a texturing target.
        /// </summary>
        // GLAPI void GLAPIENTRY glBindTexture(GLenum target, GLuint texture);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glBindTexture(int target, int texture);
        #endregion glBindTexture(int target, int texture)

        #region glColorPointer(int size, int type, int stride, [In] byte[] pointer)
        /// <summary>
        ///     Defines an array of colors.
        /// </summary>
        // GLAPI void GLAPIENTRY glColorPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *ptr);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glColorPointer(int size, int type, int stride, [In] byte[] pointer);
        #endregion glColorPointer(int size, int type, int stride, [In] byte[] pointer)

        #region glColorPointer(int size, int type, int stride, [In] byte[ , ] pointer)
        /// <summary>
        ///     Defines an array of colors.
        /// </summary>
        // GLAPI void GLAPIENTRY glColorPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *ptr);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glColorPointer(int size, int type, int stride, [In] byte[ , ] pointer);
        #endregion glColorPointer(int size, int type, int stride, [In] byte[ , ] pointer)

        #region glColorPointer(int size, int type, int stride, [In] byte[ , , ] pointer)
        /// <summary>
        ///     Defines an array of colors.
        /// </summary>
        // GLAPI void GLAPIENTRY glColorPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *ptr);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glColorPointer(int size, int type, int stride, [In] byte[ , , ] pointer);
        #endregion glColorPointer(int size, int type, int stride, [In] byte[ , , ] pointer)

        #region glColorPointer(int size, int type, int stride, [In] double[] pointer)
        /// <summary>
        ///     Defines an array of colors.
        /// </summary>
        // GLAPI void GLAPIENTRY glColorPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *ptr);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glColorPointer(int size, int type, int stride, [In] double[] pointer);
        #endregion glColorPointer(int size, int type, int stride, [In] double[] pointer)

        #region glColorPointer(int size, int type, int stride, [In] double[ , ] pointer)
        /// <summary>
        ///     Defines an array of colors.
        /// </summary>
        // GLAPI void GLAPIENTRY glColorPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *ptr);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glColorPointer(int size, int type, int stride, [In] double[ , ] pointer);
        #endregion glColorPointer(int size, int type, int stride, [In] double[ , ] pointer)

        #region glColorPointer(int size, int type, int stride, [In] double[ , , ] pointer)
        /// <summary>
        ///     Defines an array of colors.
        /// </summary>
        // GLAPI void GLAPIENTRY glColorPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *ptr);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glColorPointer(int size, int type, int stride, [In] double[ , , ] pointer);
        #endregion glColorPointer(int size, int type, int stride, [In] double[ , , ] pointer)

        #region glColorPointer(int size, int type, int stride, [In] short[] pointer)
        /// <summary>
        ///     Defines an array of colors.
        /// </summary>
        // GLAPI void GLAPIENTRY glColorPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *ptr);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glColorPointer(int size, int type, int stride, [In] short[] pointer);
        #endregion glColorPointer(int size, int type, int stride, [In] short[] pointer)

        #region glColorPointer(int size, int type, int stride, [In] short[ , ] pointer)
        /// <summary>
        ///     Defines an array of colors.
        /// </summary>
        // GLAPI void GLAPIENTRY glColorPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *ptr);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glColorPointer(int size, int type, int stride, [In] short[ , ] pointer);
        #endregion glColorPointer(int size, int type, int stride, [In] short[ , ] pointer)

        #region glColorPointer(int size, int type, int stride, [In] short[ , , ] pointer)
        /// <summary>
        ///     Defines an array of colors.
        /// </summary>
        // GLAPI void GLAPIENTRY glColorPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *ptr);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glColorPointer(int size, int type, int stride, [In] short[ , , ] pointer);
        #endregion glColorPointer(int size, int type, int stride, [In] short[ , , ] pointer)

        #region glColorPointer(int size, int type, int stride, [In] int[] pointer)
        /// <summary>
        ///     Defines an array of colors.
        /// </summary>
        // GLAPI void GLAPIENTRY glColorPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *ptr);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glColorPointer(int size, int type, int stride, [In] int[] pointer);
        #endregion glColorPointer(int size, int type, int stride, [In] int[] pointer)

        #region glColorPointer(int size, int type, int stride, [In] int[ , ] pointer)
        /// <summary>
        ///     Defines an array of colors.
        /// </summary>
        // GLAPI void GLAPIENTRY glColorPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *ptr);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glColorPointer(int size, int type, int stride, [In] int[ , ] pointer);
        #endregion glColorPointer(int size, int type, int stride, [In] int[ , ] pointer)

        #region glColorPointer(int size, int type, int stride, [In] int[ , , ] pointer)
        /// <summary>
        ///     Defines an array of colors.
        /// </summary>
        // GLAPI void GLAPIENTRY glColorPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *ptr);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glColorPointer(int size, int type, int stride, [In] int[ , , ] pointer);
        #endregion glColorPointer(int size, int type, int stride, [In] int[ , , ] pointer)

        #region glColorPointer(int size, int type, int stride, [In] float[] pointer)
        /// <summary>
        ///     Defines an array of colors.
        /// </summary>
        // GLAPI void GLAPIENTRY glColorPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *ptr);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glColorPointer(int size, int type, int stride, [In] float[] pointer);
        #endregion glColorPointer(int size, int type, int stride, [In] float[] pointer)

        #region glColorPointer(int size, int type, int stride, [In] float[ , ] pointer)
        /// <summary>
        ///     Defines an array of colors.
        /// </summary>
        // GLAPI void GLAPIENTRY glColorPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *ptr);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glColorPointer(int size, int type, int stride, [In] float[ , ] pointer);
        #endregion glColorPointer(int size, int type, int stride, [In] float[ , ] pointer)

        #region glColorPointer(int size, int type, int stride, [In] float[ , , ] pointer)
        /// <summary>
        ///     Defines an array of colors.
        /// </summary>
        // GLAPI void GLAPIENTRY glColorPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *ptr);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glColorPointer(int size, int type, int stride, [In] float[ , , ] pointer);
        #endregion glColorPointer(int size, int type, int stride, [In] float[ , , ] pointer)

        #region glColorPointer(int size, int type, int stride, [In] ushort[] pointer)
        /// <summary>
        ///     Defines an array of colors.
        /// </summary>
        // GLAPI void GLAPIENTRY glColorPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *ptr);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glColorPointer(int size, int type, int stride, [In] ushort[] pointer);
        #endregion glColorPointer(int size, int type, int stride, [In] ushort[] pointer)

        #region glColorPointer(int size, int type, int stride, [In] ushort[ , ] pointer)
        /// <summary>
        ///     Defines an array of colors.
        /// </summary>
        // GLAPI void GLAPIENTRY glColorPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *ptr);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glColorPointer(int size, int type, int stride, [In] ushort[ , ] pointer);
        #endregion glColorPointer(int size, int type, int stride, [In] ushort[ , ] pointer)

        #region glColorPointer(int size, int type, int stride, [In] ushort[ , , ] pointer)
        /// <summary>
        ///     Defines an array of colors.
        /// </summary>
        // GLAPI void GLAPIENTRY glColorPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *ptr);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glColorPointer(int size, int type, int stride, [In] ushort[ , , ] pointer);
        #endregion glColorPointer(int size, int type, int stride, [In] ushort[ , , ] pointer)

        #region glColorPointer(int size, int type, int stride, [In] uint[] pointer)
        /// <summary>
        ///     Defines an array of colors.
        /// </summary>
        // GLAPI void GLAPIENTRY glColorPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *ptr);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glColorPointer(int size, int type, int stride, [In] uint[] pointer);
        #endregion glColorPointer(int size, int type, int stride, [In] uint[] pointer)

        #region glColorPointer(int size, int type, int stride, [In] uint[ , ] pointer)
        /// <summary>
        ///     Defines an array of colors.
        /// </summary>
        // GLAPI void GLAPIENTRY glColorPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *ptr);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glColorPointer(int size, int type, int stride, [In] uint[ , ] pointer);
        #endregion glColorPointer(int size, int type, int stride, [In] uint[ , ] pointer)

        #region glColorPointer(int size, int type, int stride, [In] uint[ , , ] pointer)
        /// <summary>
        ///     Defines an array of colors.
        /// </summary>
        // GLAPI void GLAPIENTRY glColorPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *ptr);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glColorPointer(int size, int type, int stride, [In] uint[ , , ] pointer);
        #endregion glColorPointer(int size, int type, int stride, [In] uint[ , , ] pointer)

        #region glColorPointer(int size, int type, int stride, [In] IntPtr pointer)
        /// <summary>
        ///     Defines an array of colors.
        /// </summary>
        // GLAPI void GLAPIENTRY glColorPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *ptr);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glColorPointer(int size, int type, int stride, [In] IntPtr pointer);
        #endregion glColorPointer(int size, int type, int stride, [In] IntPtr pointer)

        #region glColorPointer(int size, int type, int stride, [In] void *pointer)
        /// <summary>
        ///     Defines an array of colors.
        /// </summary>
        // GLAPI void GLAPIENTRY glColorPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *ptr);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glColorPointer(int size, int type, int stride, [In] void *pointer);
        #endregion glColorPointer(int size, int type, int stride, [In] void *pointer)

        #region glCopyTexImage1D(int target, int level, int internalFormat, int x, int y, int width, int border)
        /// <summary>
        ///     Copies pixels into a 1D texture image.
        /// </summary>
        // GLAPI void GLAPIENTRY glCopyTexImage1D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glCopyTexImage1D(int target, int level, int internalFormat, int x, int y, int width, int border);
        #endregion glCopyTexImage1D(int target, int level, int internalFormat, int x, int y, int width, int border)

        #region glCopyTexImage2D(int target, int level, int internalFormat, int x, int y, int width, int height, int border)
        /// <summary>
        ///     Copies pixels into a 2D texture image.
        /// </summary>
        // GLAPI void GLAPIENTRY glCopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glCopyTexImage2D(int target, int level, int internalFormat, int x, int y, int width, int height, int border);
        #endregion glCopyTexImage2D(int target, int level, int internalFormat, int x, int y, int width, int height, int border)

        #region glCopyTexSubImage1D(int target, int level, int xOffset, int x, int y, int width)
        /// <summary>
        ///     Copies a one-dimensional texture subimage.
        /// </summary>
        // GLAPI void GLAPIENTRY glCopyTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glCopyTexSubImage1D(int target, int level, int xOffset, int x, int y, int width);
        #endregion glCopyTexSubImage1D(int target, int level, int xOffset, int x, int y, int width)

        #region glCopyTexSubImage2D(int target, int level, int xOffset, int yOffset, int x, int y, int width, int height)
        /// <summary>
        ///     Copies a two-dimensional texture subimage.
        /// </summary>
        // GLAPI void GLAPIENTRY glCopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glCopyTexSubImage2D(int target, int level, int xOffset, int yOffset, int x, int y, int width, int height);
        #endregion glCopyTexSubImage2D(int target, int level, int xOffset, int yOffset, int x, int y, int width, int height)

        #region glDeleteTextures(int number, [In, Out] int[] textures)
        /// <summary>
        ///     Deletes named textures.
        /// </summary>
        // GLAPI void GLAPIENTRY glDeleteTextures(GLsizei n, const GLuint *textures);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glDeleteTextures(int number, [In, Out] int[] textures);
        #endregion glDeleteTextures(int number, [In, Out] int[] textures)

        #region glDeleteTextures(int number, [In, Out] ref int texture)
        /// <summary>
        ///     Deletes named textures.
        /// </summary>
        // GLAPI void GLAPIENTRY glDeleteTextures(GLsizei n, const GLuint *textures);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glDeleteTextures(int number, [In, Out] ref int texture);
        #endregion glDeleteTextures(int number, [In, Out] ref int texture)

        #region glDeleteTextures(int number, [In, Out] ref IntPtr textures)
        /// <summary>
        ///     Deletes named textures.
        /// </summary>
        // GLAPI void GLAPIENTRY glDeleteTextures(GLsizei n, const GLuint *textures);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glDeleteTextures(int number, [In, Out] ref IntPtr textures);
        #endregion glDeleteTextures(int number, [In, Out] ref IntPtr textures)

        #region glDeleteTextures(int number, [In, Out] int *textures)
        /// <summary>
        ///     Deletes named textures.
        /// </summary>
        // GLAPI void GLAPIENTRY glDeleteTextures(GLsizei n, const GLuint *textures);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glDeleteTextures(int number, [In, Out] int *textures);
        #endregion glDeleteTextures(int number, [In, Out] int *textures)

        #region glDisableClientState(int array)
        /// <summary>
        ///     Disables client-side arrays.
        /// </summary>
        // GLAPI void GLAPIENTRY glDisableClientState(GLenum cap);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glDisableClientState(int array);
        #endregion glDisableClientState(int array)

        #region glDrawArrays(int primitiveType, int startingIndex, int indicesCount)
        /// <summary>
        ///     Renders primitives from array data.
        /// </summary>
        // GLAPI void GLAPIENTRY glDrawArrays(GLenum mode, GLint first, GLsizei count);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawArrays(int primitiveType, int startingIndex, int indicesCount);
        #endregion glDrawArrays(int primitiveType, int startingIndex, int indicesCount)

        #region glDrawElements(int primitiveType, int number, int dataType, [In] byte[] indices)
        /// <summary>
        ///     Renders primitives from array data.
        /// </summary>
        // GLAPI void GLAPIENTRY glDrawElements(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawElements(int primitiveType, int number, int dataType, [In] byte[] indices);
        #endregion glDrawElements(int primitiveType, int number, int dataType, [In] byte[] indices)

        #region glDrawElements(int primitiveType, int number, int dataType, [In] byte[ , ] indices)
        /// <summary>
        ///     Renders primitives from array data.
        /// </summary>
        // GLAPI void GLAPIENTRY glDrawElements(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawElements(int primitiveType, int number, int dataType, [In] byte[ , ] indices);
        #endregion glDrawElements(int primitiveType, int number, int dataType, [In] byte[ , ] indices)

        #region glDrawElements(int primitiveType, int number, int dataType, [In] byte[ , , ] indices)
        /// <summary>
        ///     Renders primitives from array data.
        /// </summary>
        // GLAPI void GLAPIENTRY glDrawElements(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawElements(int primitiveType, int number, int dataType, [In] byte[ , , ] indices);
        #endregion glDrawElements(int primitiveType, int number, int dataType, [In] byte[ , , ] indices)

        #region glDrawElements(int primitiveType, int number, int dataType, [In] double[] indices)
        /// <summary>
        ///     Renders primitives from array data.
        /// </summary>
        // GLAPI void GLAPIENTRY glDrawElements(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawElements(int primitiveType, int number, int dataType, [In] double[] indices);
        #endregion glDrawElements(int primitiveType, int number, int dataType, [In] double[] indices)

        #region glDrawElements(int primitiveType, int number, int dataType, [In] double[ , ] indices)
        /// <summary>
        ///     Renders primitives from array data.
        /// </summary>
        // GLAPI void GLAPIENTRY glDrawElements(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawElements(int primitiveType, int number, int dataType, [In] double[ , ] indices);
        #endregion glDrawElements(int primitiveType, int number, int dataType, [In] double[ , ] indices)

        #region glDrawElements(int primitiveType, int number, int dataType, [In] double[ , , ] indices)
        /// <summary>
        ///     Renders primitives from array data.
        /// </summary>
        // GLAPI void GLAPIENTRY glDrawElements(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawElements(int primitiveType, int number, int dataType, [In] double[ , , ] indices);
        #endregion glDrawElements(int primitiveType, int number, int dataType, [In] double[ , , ] indices)

        #region glDrawElements(int primitiveType, int number, int dataType, [In] short[] indices)
        /// <summary>
        ///     Renders primitives from array data.
        /// </summary>
        // GLAPI void GLAPIENTRY glDrawElements(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawElements(int primitiveType, int number, int dataType, [In] short[] indices);
        #endregion glDrawElements(int primitiveType, int number, int dataType, [In] short[] indices)

        #region glDrawElements(int primitiveType, int number, int dataType, [In] short[ , ] indices)
        /// <summary>
        ///     Renders primitives from array data.
        /// </summary>
        // GLAPI void GLAPIENTRY glDrawElements(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawElements(int primitiveType, int number, int dataType, [In] short[ , ] indices);
        #endregion glDrawElements(int primitiveType, int number, int dataType, [In] short[ , ] indices)

        #region glDrawElements(int primitiveType, int number, int dataType, [In] short[ , , ] indices)
        /// <summary>
        ///     Renders primitives from array data.
        /// </summary>
        // GLAPI void GLAPIENTRY glDrawElements(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawElements(int primitiveType, int number, int dataType, [In] short[ , , ] indices);
        #endregion glDrawElements(int primitiveType, int number, int dataType, [In] short[ , , ] indices)

        #region glDrawElements(int primitiveType, int number, int dataType, [In] int[] indices)
        /// <summary>
        ///     Renders primitives from array data.
        /// </summary>
        // GLAPI void GLAPIENTRY glDrawElements(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawElements(int primitiveType, int number, int dataType, [In] int[] indices);
        #endregion glDrawElements(int primitiveType, int number, int dataType, [In] int[] indices)

        #region glDrawElements(int primitiveType, int number, int dataType, [In] int[ , ] indices)
        /// <summary>
        ///     Renders primitives from array data.
        /// </summary>
        // GLAPI void GLAPIENTRY glDrawElements(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawElements(int primitiveType, int number, int dataType, [In] int[ , ] indices);
        #endregion glDrawElements(int primitiveType, int number, int dataType, [In] int[ , ] indices)

        #region glDrawElements(int primitiveType, int number, int dataType, [In] int[ , , ] indices)
        /// <summary>
        ///     Renders primitives from array data.
        /// </summary>
        // GLAPI void GLAPIENTRY glDrawElements(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawElements(int primitiveType, int number, int dataType, [In] int[ , , ] indices);
        #endregion glDrawElements(int primitiveType, int number, int dataType, [In] int[ , , ] indices)

        #region glDrawElements(int primitiveType, int number, int dataType, [In] float[] indices)
        /// <summary>
        ///     Renders primitives from array data.
        /// </summary>
        // GLAPI void GLAPIENTRY glDrawElements(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawElements(int primitiveType, int number, int dataType, [In] float[] indices);
        #endregion glDrawElements(int primitiveType, int number, int dataType, [In] float[] indices)

        #region glDrawElements(int primitiveType, int number, int dataType, [In] float[ , ] indices)
        /// <summary>
        ///     Renders primitives from array data.
        /// </summary>
        // GLAPI void GLAPIENTRY glDrawElements(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawElements(int primitiveType, int number, int dataType, [In] float[ , ] indices);
        #endregion glDrawElements(int primitiveType, int number, int dataType, [In] float[ , ] indices)

        #region glDrawElements(int primitiveType, int number, int dataType, [In] float[ , , ] indices)
        /// <summary>
        ///     Renders primitives from array data.
        /// </summary>
        // GLAPI void GLAPIENTRY glDrawElements(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawElements(int primitiveType, int number, int dataType, [In] float[ , , ] indices);
        #endregion glDrawElements(int primitiveType, int number, int dataType, [In] float[ , , ] indices)

        #region glDrawElements(int primitiveType, int number, int dataType, [In] ushort[] indices)
        /// <summary>
        ///     Renders primitives from array data.
        /// </summary>
        // GLAPI void GLAPIENTRY glDrawElements(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawElements(int primitiveType, int number, int dataType, [In] ushort[] indices);
        #endregion glDrawElements(int primitiveType, int number, int dataType, [In] ushort[] indices)

        #region glDrawElements(int primitiveType, int number, int dataType, [In] ushort[ , ] indices)
        /// <summary>
        ///     Renders primitives from array data.
        /// </summary>
        // GLAPI void GLAPIENTRY glDrawElements(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawElements(int primitiveType, int number, int dataType, [In] ushort[ , ] indices);
        #endregion glDrawElements(int primitiveType, int number, int dataType, [In] ushort[ , ] indices)

        #region glDrawElements(int primitiveType, int number, int dataType, [In] ushort[ , , ] indices)
        /// <summary>
        ///     Renders primitives from array data.
        /// </summary>
        // GLAPI void GLAPIENTRY glDrawElements(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawElements(int primitiveType, int number, int dataType, [In] ushort[ , , ] indices);
        #endregion glDrawElements(int primitiveType, int number, int dataType, [In] ushort[ , , ] indices)

        #region glDrawElements(int primitiveType, int number, int dataType, [In] uint[] indices)
        /// <summary>
        ///     Renders primitives from array data.
        /// </summary>
        // GLAPI void GLAPIENTRY glDrawElements(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawElements(int primitiveType, int number, int dataType, [In] uint[] indices);
        #endregion glDrawElements(int primitiveType, int number, int dataType, [In] uint[] indices)

        #region glDrawElements(int primitiveType, int number, int dataType, [In] uint[ , ] indices)
        /// <summary>
        ///     Renders primitives from array data.
        /// </summary>
        // GLAPI void GLAPIENTRY glDrawElements(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawElements(int primitiveType, int number, int dataType, [In] uint[ , ] indices);
        #endregion glDrawElements(int primitiveType, int number, int dataType, [In] uint[ , ] indices)

        #region glDrawElements(int primitiveType, int number, int dataType, [In] uint[ , , ] indices)
        /// <summary>
        ///     Renders primitives from array data.
        /// </summary>
        // GLAPI void GLAPIENTRY glDrawElements(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawElements(int primitiveType, int number, int dataType, [In] uint[ , , ] indices);
        #endregion glDrawElements(int primitiveType, int number, int dataType, [In] uint[ , , ] indices)

        #region glDrawElements(int primitiveType, int number, int dataType, [In] IntPtr indices)
        /// <summary>
        ///     Renders primitives from array data.
        /// </summary>
        // GLAPI void GLAPIENTRY glDrawElements(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawElements(int primitiveType, int number, int dataType, [In] IntPtr indices);
        #endregion glDrawElements(int primitiveType, int number, int dataType, [In] IntPtr indices)

        #region glDrawElements(int primitiveType, int number, int dataType, [In] void *indices)
        /// <summary>
        ///     Renders primitives from array data.
        /// </summary>
        // GLAPI void GLAPIENTRY glDrawElements(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glDrawElements(int primitiveType, int number, int dataType, [In] void *indices);
        #endregion glDrawElements(int primitiveType, int number, int dataType, [In] void *indices)

        #region glEdgeFlagPointer(int offset, [In] byte[] pointer)
        /// <summary>
        ///     Defines an array of edge flags.
        /// </summary>
        // GLAPI void GLAPIENTRY glEdgeFlagPointer(GLsizei stride, const GLvoid *ptr);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glEdgeFlagPointer(int offset, [In] byte[] pointer);
        #endregion glEdgeFlagPointer(int offset, [In] byte[] pointer)

        #region glEdgeFlagPointer(int offset, [In] byte[ , ] pointer)
        /// <summary>
        ///     Defines an array of edge flags.
        /// </summary>
        // GLAPI void GLAPIENTRY glEdgeFlagPointer(GLsizei stride, const GLvoid *ptr);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glEdgeFlagPointer(int offset, [In] byte[ , ] pointer);
        #endregion glEdgeFlagPointer(int offset, [In] byte[ , ] pointer)

        #region glEdgeFlagPointer(int offset, [In] byte[ , , ] pointer)
        /// <summary>
        ///     Defines an array of edge flags.
        /// </summary>
        // GLAPI void GLAPIENTRY glEdgeFlagPointer(GLsizei stride, const GLvoid *ptr);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glEdgeFlagPointer(int offset, [In] byte[ , , ] pointer);
        #endregion glEdgeFlagPointer(int offset, [In] byte[ , , ] pointer)

        #region glEdgeFlagPointer(int offset, [In] double[] pointer)
        /// <summary>
        ///     Defines an array of edge flags.
        /// </summary>
        // GLAPI void GLAPIENTRY glEdgeFlagPointer(GLsizei stride, const GLvoid *ptr);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glEdgeFlagPointer(int offset, [In] double[] pointer);
        #endregion glEdgeFlagPointer(int offset, [In] double[] pointer)

        #region glEdgeFlagPointer(int offset, [In] double[ , ] pointer)
        /// <summary>
        ///     Defines an array of edge flags.
        /// </summary>
        // GLAPI void GLAPIENTRY glEdgeFlagPointer(GLsizei stride, const GLvoid *ptr);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glEdgeFlagPointer(int offset, [In] double[ , ] pointer);
        #endregion glEdgeFlagPointer(int offset, [In] double[ , ] pointer)

        #region glEdgeFlagPointer(int offset, [In] double[ , , ] pointer)
        /// <summary>
        ///     Defines an array of edge flags.
        /// </summary>
        // GLAPI void GLAPIENTRY glEdgeFlagPointer(GLsizei stride, const GLvoid *ptr);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glEdgeFlagPointer(int offset, [In] double[ , , ] pointer);
        #endregion glEdgeFlagPointer(int offset, [In] double[ , , ] pointer)

        #region glEdgeFlagPointer(int offset, [In] short[] pointer)
        /// <summary>
        ///     Defines an array of edge flags.
        /// </summary>
        // GLAPI void GLAPIENTRY glEdgeFlagPointer(GLsizei stride, const GLvoid *ptr);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glEdgeFlagPointer(int offset, [In] short[] pointer);
        #endregion glEdgeFlagPointer(int offset, [In] short[] pointer)

        #region glEdgeFlagPointer(int offset, [In] short[ , ] pointer)
        /// <summary>
        ///     Defines an array of edge flags.
        /// </summary>
        // GLAPI void GLAPIENTRY glEdgeFlagPointer(GLsizei stride, const GLvoid *ptr);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glEdgeFlagPointer(int offset, [In] short[ , ] pointer);
        #endregion glEdgeFlagPointer(int offset, [In] short[ , ] pointer)

        #region glEdgeFlagPointer(int offset, [In] short[ , , ] pointer)
        /// <summary>
        ///     Defines an array of edge flags.
        /// </summary>
        // GLAPI void GLAPIENTRY glEdgeFlagPointer(GLsizei stride, const GLvoid *ptr);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glEdgeFlagPointer(int offset, [In] short[ , , ] pointer);
        #endregion glEdgeFlagPointer(int offset, [In] short[ , , ] pointer)

        #region glEdgeFlagPointer(int offset, [In] int[] pointer)
        /// <summary>
        ///     Defines an array of edge flags.
        /// </summary>
        // GLAPI void GLAPIENTRY glEdgeFlagPointer(GLsizei stride, const GLvoid *ptr);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glEdgeFlagPointer(int offset, [In] int[] pointer);
        #endregion glEdgeFlagPointer(int offset, [In] int[] pointer)

        #region glEdgeFlagPointer(int offset, [In] int[ , ] pointer)
        /// <summary>
        ///     Defines an array of edge flags.
        /// </summary>
        // GLAPI void GLAPIENTRY glEdgeFlagPointer(GLsizei stride, const GLvoid *ptr);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glEdgeFlagPointer(int offset, [In] int[ , ] pointer);
        #endregion glEdgeFlagPointer(int offset, [In] int[ , ] pointer)

        #region glEdgeFlagPointer(int offset, [In] int[ , , ] pointer)
        /// <summary>
        ///     Defines an array of edge flags.
        /// </summary>
        // GLAPI void GLAPIENTRY glEdgeFlagPointer(GLsizei stride, const GLvoid *ptr);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glEdgeFlagPointer(int offset, [In] int[ , , ] pointer);
        #endregion glEdgeFlagPointer(int offset, [In] int[ , , ] pointer)

        #region glEdgeFlagPointer(int offset, [In] float[] pointer)
        /// <summary>
        ///     Defines an array of edge flags.
        /// </summary>
        // GLAPI void GLAPIENTRY glEdgeFlagPointer(GLsizei stride, const GLvoid *ptr);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glEdgeFlagPointer(int offset, [In] float[] pointer);
        #endregion glEdgeFlagPointer(int offset, [In] float[] pointer)

        #region glEdgeFlagPointer(int offset, [In] float[ , ] pointer)
        /// <summary>
        ///     Defines an array of edge flags.
        /// </summary>
        // GLAPI void GLAPIENTRY glEdgeFlagPointer(GLsizei stride, const GLvoid *ptr);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glEdgeFlagPointer(int offset, [In] float[ , ] pointer);
        #endregion glEdgeFlagPointer(int offset, [In] float[ , ] pointer)

        #region glEdgeFlagPointer(int offset, [In] float[ , , ] pointer)
        /// <summary>
        ///     Defines an array of edge flags.
        /// </summary>
        // GLAPI void GLAPIENTRY glEdgeFlagPointer(GLsizei stride, const GLvoid *ptr);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glEdgeFlagPointer(int offset, [In] float[ , , ] pointer);
        #endregion glEdgeFlagPointer(int offset, [In] float[ , , ] pointer)

        #region glEdgeFlagPointer(int offset, [In] ushort[] pointer)
        /// <summary>
        ///     Defines an array of edge flags.
        /// </summary>
        // GLAPI void GLAPIENTRY glEdgeFlagPointer(GLsizei stride, const GLvoid *ptr);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glEdgeFlagPointer(int offset, [In] ushort[] pointer);
        #endregion glEdgeFlagPointer(int offset, [In] ushort[] pointer)

        #region glEdgeFlagPointer(int offset, [In] ushort[ , ] pointer)
        /// <summary>
        ///     Defines an array of edge flags.
        /// </summary>
        // GLAPI void GLAPIENTRY glEdgeFlagPointer(GLsizei stride, const GLvoid *ptr);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glEdgeFlagPointer(int offset, [In] ushort[ , ] pointer);
        #endregion glEdgeFlagPointer(int offset, [In] ushort[ , ] pointer)

        #region glEdgeFlagPointer(int offset, [In] ushort[ , , ] pointer)
        /// <summary>
        ///     Defines an array of edge flags.
        /// </summary>
        // GLAPI void GLAPIENTRY glEdgeFlagPointer(GLsizei stride, const GLvoid *ptr);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glEdgeFlagPointer(int offset, [In] ushort[ , , ] pointer);
        #endregion glEdgeFlagPointer(int offset, [In] ushort[ , , ] pointer)

        #region glEdgeFlagPointer(int offset, [In] uint[] pointer)
        /// <summary>
        ///     Defines an array of edge flags.
        /// </summary>
        // GLAPI void GLAPIENTRY glEdgeFlagPointer(GLsizei stride, const GLvoid *ptr);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glEdgeFlagPointer(int offset, [In] uint[] pointer);
        #endregion glEdgeFlagPointer(int offset, [In] uint[] pointer)

        #region glEdgeFlagPointer(int offset, [In] uint[ , ] pointer)
        /// <summary>
        ///     Defines an array of edge flags.
        /// </summary>
        // GLAPI void GLAPIENTRY glEdgeFlagPointer(GLsizei stride, const GLvoid *ptr);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glEdgeFlagPointer(int offset, [In] uint[ , ] pointer);
        #endregion glEdgeFlagPointer(int offset, [In] uint[ , ] pointer)

        #region glEdgeFlagPointer(int offset, [In] uint[ , , ] pointer)
        /// <summary>
        ///     Defines an array of edge flags.
        /// </summary>
        // GLAPI void GLAPIENTRY glEdgeFlagPointer(GLsizei stride, const GLvoid *ptr);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glEdgeFlagPointer(int offset, [In] uint[ , , ] pointer);
        #endregion glEdgeFlagPointer(int offset, [In] uint[ , , ] pointer)

        #region glEdgeFlagPointer(int offset, [In] IntPtr pointer)
        /// <summary>
        ///     Defines an array of edge flags.
        /// </summary>
        // GLAPI void GLAPIENTRY glEdgeFlagPointer(GLsizei stride, const GLvoid *ptr);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glEdgeFlagPointer(int offset, [In] IntPtr pointer);
        #endregion glEdgeFlagPointer(int offset, [In] IntPtr pointer)

        #region glEdgeFlagPointer(int offset, [In] void *pointer)
        /// <summary>
        ///     Defines an array of edge flags.
        /// </summary>
        // GLAPI void GLAPIENTRY glEdgeFlagPointer(GLsizei stride, const GLvoid *ptr);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glEdgeFlagPointer(int offset, [In] void *pointer);
        #endregion glEdgeFlagPointer(int offset, [In] void *pointer)

        #region glEnableClientState(int capability)
        /// <summary>
        ///     Enables client-side GL capabilities.
        /// </summary>
        // GLAPI void GLAPIENTRY glEnableClientState(GLenum cap);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glEnableClientState(int capability);
        #endregion glEnableClientState(int capability)

        #region glEvalCoord1d(double uCoordinate)
        /// <summary>
        ///     Evaluates enabled one-dimensional maps.
        /// </summary>
        // GLAPI void GLAPIENTRY glEvalCoord1d(GLdouble u);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glEvalCoord1d(double uCoordinate);
        #endregion glEvalCoord1d(double uCoordinate)

        #region glEvalCoord1dv([In] double[] uCoordinates)
        /// <summary>
        ///     Evaluates enabled one-dimensional maps.
        /// </summary>
        // GLAPI void GLAPIENTRY glEvalCoord1dv(const GLdouble *u);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glEvalCoord1dv([In] double[] uCoordinates);
        #endregion glEvalCoord1dv([In] double[] uCoordinates)

        #region glEvalCoord1dv([In] IntPtr uCoordinates)
        /// <summary>
        ///     Evaluates enabled one-dimensional maps.
        /// </summary>
        // GLAPI void GLAPIENTRY glEvalCoord1dv(const GLdouble *u);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glEvalCoord1dv([In] IntPtr uCoordinates);
        #endregion glEvalCoord1dv([In] IntPtr uCoordinates)

        #region glEvalCoord1dv([In] double *uCoordinates)
        /// <summary>
        ///     Evaluates enabled one-dimensional maps.
        /// </summary>
        // GLAPI void GLAPIENTRY glEvalCoord1dv(const GLdouble *u);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glEvalCoord1dv([In] double *uCoordinates);
        #endregion glEvalCoord1dv([In] double *uCoordinates)

        #region glEvalCoord1f(float uCoordinate)
        /// <summary>
        ///     Evaluates enabled one-dimensional maps.
        /// </summary>
        // GLAPI void GLAPIENTRY glEvalCoord1f(GLfloat u);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glEvalCoord1f(float uCoordinate);
        #endregion glEvalCoord1f(float uCoordinate)

        #region glEvalCoord1fv([In] float[] uCoordinates)
        /// <summary>
        ///     Evaluates enabled one-dimensional maps.
        /// </summary>
        // GLAPI void GLAPIENTRY glEvalCoord1fv(const GLfloat *u);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glEvalCoord1fv([In] float[] uCoordinates);
        #endregion glEvalCoord1fv([In] float[] uCoordinates)

        #region glEvalCoord1fv([In] IntPtr uCoordinates)
        /// <summary>
        ///     Evaluates enabled one-dimensional maps.
        /// </summary>
        // GLAPI void GLAPIENTRY glEvalCoord1fv(const GLfloat *u);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glEvalCoord1fv([In] IntPtr uCoordinates);
        #endregion glEvalCoord1fv([In] IntPtr uCoordinates)

        #region glEvalCoord1fv([In] float *uCoordinates)
        /// <summary>
        ///     Evaluates enabled one-dimensional maps.
        /// </summary>
        // GLAPI void GLAPIENTRY glEvalCoord1fv(const GLfloat *u);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glEvalCoord1fv([In] float *uCoordinates);
        #endregion glEvalCoord1fv([In] float *uCoordinates)

        #region glEvalCoord2d(double uCoordinate, double vCoordinate)
        /// <summary>
        ///     Evaluates enabled two-dimensional maps.
        /// </summary>
        // GLAPI void GLAPIENTRY glEvalCoord2d(GLdouble u, GLdouble v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glEvalCoord2d(double uCoordinate, double vCoordinate);
        #endregion glEvalCoord2d(double uCoordinate, double vCoordinate)

        #region glEvalCoord2dv([In] double[] uvCoordinates)
        /// <summary>
        ///     Evaluates enabled two-dimensional maps.
        /// </summary>
        // GLAPI void GLAPIENTRY glEvalCoord2dv(const GLdouble *u);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glEvalCoord2dv([In] double[] uvCoordinates);
        #endregion glEvalCoord2dv([In] double[] uvCoordinates)

        #region glEvalCoord2dv([In] IntPtr uvCoordinates)
        /// <summary>
        ///     Evaluates enabled two-dimensional maps.
        /// </summary>
        // GLAPI void GLAPIENTRY glEvalCoord2dv(const GLdouble *u);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glEvalCoord2dv([In] IntPtr uvCoordinates);
        #endregion glEvalCoord2dv([In] IntPtr uvCoordinates)

        #region glEvalCoord2dv([In] double *uvCoordinates)
        /// <summary>
        ///     Evaluates enabled two-dimensional maps.
        /// </summary>
        // GLAPI void GLAPIENTRY glEvalCoord2dv(const GLdouble *u);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glEvalCoord2dv([In] double *uvCoordinates);
        #endregion glEvalCoord2dv([In] double *uvCoordinates)

        #region glEvalCoord2f(float uCoordinate, float vCoordinate)
        /// <summary>
        ///     Evaluates enabled two-dimensional maps.
        /// </summary>
        // GLAPI void GLAPIENTRY glEvalCoord2f(GLfloat u, GLfloat v);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glEvalCoord2f(float uCoordinate, float vCoordinate);
        #endregion glEvalCoord2f(float uCoordinate, float vCoordinate)

        #region glEvalCoord2fv([In] float[] uvCoordinates)
        /// <summary>
        ///     Evaluates enabled two-dimensional maps.
        /// </summary>
        // GLAPI void GLAPIENTRY glEvalCoord2fv(const GLfloat *u);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glEvalCoord2fv([In] float[] uvCoordinates);
        #endregion glEvalCoord2fv([In] float[] uvCoordinates)

        #region glEvalCoord2fv([In] IntPtr uvCoordinates)
        /// <summary>
        ///     Evaluates enabled two-dimensional maps.
        /// </summary>
        // GLAPI void GLAPIENTRY glEvalCoord2fv(const GLfloat *u);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glEvalCoord2fv([In] IntPtr uvCoordinates);
        #endregion glEvalCoord2fv([In] IntPtr uvCoordinates)

        #region glEvalCoord2fv([In] float *uvCoordinates)
        /// <summary>
        ///     Evaluates enabled two-dimensional maps.
        /// </summary>
        // GLAPI void GLAPIENTRY glEvalCoord2fv(const GLfloat *u);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glEvalCoord2fv([In] float *uvCoordinates);
        #endregion glEvalCoord2fv([In] float *uvCoordinates)

        #region glEvalMesh1(int primitiveType, int iFirstValue, int iLastValue)
        /// <summary>
        ///     Computes a one-dimensional grid of points or lines.
        /// </summary>
        // GLAPI void GLAPIENTRY glEvalMesh1(GLenum mode, GLint i1, GLint i2);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glEvalMesh1(int primitiveType, int iFirstValue, int iLastValue);
        #endregion glEvalMesh1(int primitiveType, int iFirstValue, int iLastValue)

        #region glEvalMesh2(int primitiveType, int iFirstValue, int iLastValue, int jFirstValue, int jLastValue)
        /// <summary>
        ///     Computes a two-dimensional grid of points or lines.
        /// </summary>
        // GLAPI void GLAPIENTRY glEvalMesh2(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glEvalMesh2(int primitiveType, int iFirstValue, int iLastValue, int jFirstValue, int jLastValue);
        #endregion glEvalMesh2(int primitiveType, int iFirstValue, int iLastValue, int jFirstValue, int jLastValue)

        #region glEvalPoint1(int iValue)
        /// <summary>
        ///     Generates and evaluates a single point in a mesh.
        /// </summary>
        // GLAPI void GLAPIENTRY glEvalPoint1(GLint i);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glEvalPoint1(int iValue);
        #endregion glEvalPoint1(int iValue)

        #region glEvalPoint2(int iValue, int jValue)
        /// <summary>
        ///     Generates and evaluates a single point in a mesh.
        /// </summary>
        // GLAPI void GLAPIENTRY glEvalPoint2(GLint i, GLint j);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glEvalPoint2(int iValue, int jValue);
        #endregion glEvalPoint2(int iValue, int jValue)

        #region glFeedbackBuffer(int size, int informationType, [In] float[] buffer)
        /// <summary>
        ///     Controls feedback mode.
        /// </summary>
        // GLAPI void GLAPIENTRY glFeedbackBuffer(GLsizei size, GLenum type, GLfloat *buffer);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glFeedbackBuffer(int size, int informationType, [In] float[] buffer);
        #endregion glFeedbackBuffer(int size, int informationType, [In] float[] buffer)

        #region glFeedbackBuffer(int size, int informationType, [In] IntPtr buffer)
        /// <summary>
        ///     Controls feedback mode.
        /// </summary>
        // GLAPI void GLAPIENTRY glFeedbackBuffer(GLsizei size, GLenum type, GLfloat *buffer);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glFeedbackBuffer(int size, int informationType, [In] IntPtr buffer);
        #endregion glFeedbackBuffer(int size, int informationType, [In] IntPtr buffer)

        #region glFeedbackBuffer(int size, int informationType, [In] float *buffer)
        /// <summary>
        ///     Controls feedback mode.
        /// </summary>
        // GLAPI void GLAPIENTRY glFeedbackBuffer(GLsizei size, GLenum type, GLfloat *buffer);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glFeedbackBuffer(int size, int informationType, [In] float *buffer);
        #endregion glFeedbackBuffer(int size, int informationType, [In] float *buffer)

        #region glFogf(int fogParameter, float fogValue)
        /// <summary>
        ///     Specifies fog parameters.
        /// </summary>
        // GLAPI void GLAPIENTRY glFogf(GLenum pname, GLfloat param);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glFogf(int fogParameter, float fogValue);
        #endregion glFogf(int fogParameter, float fogValue)

        #region glFogfv(int fogParameter, [In] float[] fogValues)
        /// <summary>
        ///     Specifies fog parameters.
        /// </summary>
        // GLAPI void GLAPIENTRY glFogfv(GLenum pname, const GLfloat *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glFogfv(int fogParameter, [In] float[] fogValues);
        #endregion glFogfv(int fogParameter, [In] float[] fogValues)

        #region glFogfv(int fogParameter, [In] IntPtr fogValues)
        /// <summary>
        ///     Specifies fog parameters.
        /// </summary>
        // GLAPI void GLAPIENTRY glFogfv(GLenum pname, const GLfloat *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glFogfv(int fogParameter, [In] IntPtr fogValues);
        #endregion glFogfv(int fogParameter, [In] IntPtr fogValues)

        #region glFogfv(int fogParameter, [In] float *fogValues)
        /// <summary>
        ///     Specifies fog parameters.
        /// </summary>
        // GLAPI void GLAPIENTRY glFogfv(GLenum pname, const GLfloat *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glFogfv(int fogParameter, [In] float *fogValues);
        #endregion glFogfv(int fogParameter, [In] float *fogValues)

        #region glFogi(int fogParameter, int fogValue)
        /// <summary>
        ///     Specifies fog parameters.
        /// </summary>
        // GLAPI void GLAPIENTRY glFogi(GLenum pname, GLint param);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glFogi(int fogParameter, int fogValue);
        #endregion glFogi(int fogParameter, int fogValue)

        #region glFogiv(int fogParameter, [In] int[] fogValues)
        /// <summary>
        ///     Specifies fog parameters.
        /// </summary>
        // GLAPI void GLAPIENTRY glFogiv(GLenum pname, const GLint *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glFogiv(int fogParameter, [In] int[] fogValues);
        #endregion glFogiv(int fogParameter, [In] int[] fogValues)

        #region glFogiv(int fogParameter, [In] IntPtr fogValues)
        /// <summary>
        ///     Specifies fog parameters.
        /// </summary>
        // GLAPI void GLAPIENTRY glFogiv(GLenum pname, const GLint *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glFogiv(int fogParameter, [In] IntPtr fogValues);
        #endregion glFogiv(int fogParameter, [In] IntPtr fogValues)

        #region glFogiv(int fogParameter, [In] int *fogValues)
        /// <summary>
        ///     Specifies fog parameters.
        /// </summary>
        // GLAPI void GLAPIENTRY glFogiv(GLenum pname, const GLint *params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glFogiv(int fogParameter, [In] int *fogValues);
        #endregion glFogiv(int fogParameter, [In] int *fogValues)

        #region glGenTextures(int number, [Out] int[] textures)
        /// <summary>
        ///     Generates texture names.
        /// </summary>
        // GLAPI void GLAPIENTRY glGenTextures(GLsizei n, GLuint *textures);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glGenTextures(int number, [Out] int[] textures);
        #endregion glGenTextures(int number, [Out] int[] textures)

        #region glGenTextures(int number, out int textures)
        /// <summary>
        ///     Generates texture names.
        /// </summary>
        // GLAPI void GLAPIENTRY glGenTextures(GLsizei n, GLuint *textures);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glGenTextures(int number, out int textures);
        #endregion glGenTextures(int number, out int textures)

        #region glGenTextures(int number, [Out] IntPtr textures)
        /// <summary>
        ///     Generates texture names.
        /// </summary>
        // GLAPI void GLAPIENTRY glGenTextures(GLsizei n, GLuint *textures);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glGenTextures(int number, [Out] IntPtr textures);
        #endregion glGenTextures(int number, [Out] IntPtr textures)

        #region glGenTextures(int number, [Out] int *textures)
        /// <summary>
        ///     Generates texture names.
        /// </summary>
        // GLAPI void GLAPIENTRY glGenTextures(GLsizei n, GLuint *textures);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glGenTextures(int number, [Out] int *textures);
        #endregion glGenTextures(int number, [Out] int *textures)

        #region glGetPointerv(int parameter, [Out] IntPtr[] buffer)
        /// <summary>
        ///     Returns the address of the specified pointer.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetPointerv(GLenum pname, GLvoid **params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glGetPointerv(int parameter, [Out] IntPtr[] buffer);
        #endregion glGetPointerv(int parameter, [Out] IntPtr[] buffer)

        #region glGetPointerv(int parameter, [Out] IntPtr buffer)
        /// <summary>
        ///     Returns the address of the specified pointer.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetPointerv(GLenum pname, GLvoid **params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glGetPointerv(int parameter, [Out] IntPtr buffer);
        #endregion glGetPointerv(int parameter, [Out] IntPtr buffer)

        #region glGetPointerv(int parameter, [Out] void **buffer)
        /// <summary>
        ///     Returns the address of the specified pointer.
        /// </summary>
        // GLAPI void GLAPIENTRY glGetPointerv(GLenum pname, GLvoid **params);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glGetPointerv(int parameter, [Out] void **buffer);
        #endregion glGetPointerv(int parameter, [Out] void **buffer)

        #region glIndexPointer(int dataType, int offset, [In] IntPtr pointer)
        /// <summary>
        ///     Defines an array of color indexes.
        /// </summary>
        // GLAPI void GLAPIENTRY glIndexPointer(GLenum type, GLsizei stride, const GLvoid *ptr);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glIndexPointer(int dataType, int offset, [In] IntPtr pointer);
        #endregion glIndexPointer(int dataType, int offset, [In] IntPtr pointer)

        #region glIndexPointer(int dataType, int offset, [In] void *pointer)
        /// <summary>
        ///     Defines an array of color indexes.
        /// </summary>
        // GLAPI void GLAPIENTRY glIndexPointer(GLenum type, GLsizei stride, const GLvoid *ptr);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glIndexPointer(int dataType, int offset, [In] void *pointer);
        #endregion glIndexPointer(int dataType, int offset, [In] void *pointer)

        #region glInitNames()
        /// <summary>
        ///     Initializes the name stack.
        /// </summary>
        // GLAPI void GLAPIENTRY glInitNames(void);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glInitNames();
        #endregion glInitNames()

        #region glIndexub(byte colorIndex)
        /// <summary>
        ///     Sets the current color index.
        /// </summary>
        // GLAPI void GLAPIENTRY glIndexub(GLubyte c);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glIndexub(byte colorIndex);
        #endregion glIndexub(byte colorIndex)

        #region glIndexubv([In] byte[] colorIndex)
        /// <summary>
        ///     Sets the current color index.
        /// </summary>
        // GLAPI void GLAPIENTRY glIndexubv(const GLubyte *c);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glIndexubv([In] byte[] colorIndex);
        #endregion glIndexubv([In] byte[] colorIndex)

        #region glIndexubv([In] IntPtr colorIndex)
        /// <summary>
        ///     Sets the current color index.
        /// </summary>
        // GLAPI void GLAPIENTRY glIndexubv(const GLubyte *c);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glIndexubv([In] IntPtr colorIndex);
        #endregion glIndexubv([In] IntPtr colorIndex)

        #region glIndexubv([In] byte *colorIndex)
        /// <summary>
        ///     Sets the current color index.
        /// </summary>
        // GLAPI void GLAPIENTRY glIndexubv(const GLubyte *c);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glIndexubv([In] byte *colorIndex);
        #endregion glIndexubv([In] byte *colorIndex)

        #region glInterleavedArrays(int arrayType, int offset, [In] byte[] pointer)
        /// <summary>
        ///     Simultaneously specifies and enables several interleaved arrays.
        /// </summary>
        // GLAPI void GLAPIENTRY glInterleavedArrays(GLenum format, GLsizei stride, const GLvoid *pointer);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glInterleavedArrays(int arrayType, int offset, [In] byte[] pointer);
        #endregion glInterleavedArrays(int arrayType, int offset, [In] byte[] pointer)

        #region glInterleavedArrays(int arrayType, int offset, [In] byte[ , ] pointer)
        /// <summary>
        ///     Simultaneously specifies and enables several interleaved arrays.
        /// </summary>
        // GLAPI void GLAPIENTRY glInterleavedArrays(GLenum format, GLsizei stride, const GLvoid *pointer);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glInterleavedArrays(int arrayType, int offset, [In] byte[ , ] pointer);
        #endregion glInterleavedArrays(int arrayType, int offset, [In] byte[ , ] pointer)

        #region glInterleavedArrays(int arrayType, int offset, [In] byte[ , , ] pointer)
        /// <summary>
        ///     Simultaneously specifies and enables several interleaved arrays.
        /// </summary>
        // GLAPI void GLAPIENTRY glInterleavedArrays(GLenum format, GLsizei stride, const GLvoid *pointer);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glInterleavedArrays(int arrayType, int offset, [In] byte[ , , ] pointer);
        #endregion glInterleavedArrays(int arrayType, int offset, [In] byte[ , , ] pointer)

        #region glInterleavedArrays(int arrayType, int offset, [In] double[] pointer)
        /// <summary>
        ///     Simultaneously specifies and enables several interleaved arrays.
        /// </summary>
        // GLAPI void GLAPIENTRY glInterleavedArrays(GLenum format, GLsizei stride, const GLvoid *pointer);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glInterleavedArrays(int arrayType, int offset, [In] double[] pointer);
        #endregion glInterleavedArrays(int arrayType, int offset, [In] double[] pointer)

        #region glInterleavedArrays(int arrayType, int offset, [In] double[ , ] pointer)
        /// <summary>
        ///     Simultaneously specifies and enables several interleaved arrays.
        /// </summary>
        // GLAPI void GLAPIENTRY glInterleavedArrays(GLenum format, GLsizei stride, const GLvoid *pointer);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glInterleavedArrays(int arrayType, int offset, [In] double[ , ] pointer);
        #endregion glInterleavedArrays(int arrayType, int offset, [In] double[ , ] pointer)

        #region glInterleavedArrays(int arrayType, int offset, [In] double[ , , ] pointer)
        /// <summary>
        ///     Simultaneously specifies and enables several interleaved arrays.
        /// </summary>
        // GLAPI void GLAPIENTRY glInterleavedArrays(GLenum format, GLsizei stride, const GLvoid *pointer);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glInterleavedArrays(int arrayType, int offset, [In] double[ , , ] pointer);
        #endregion glInterleavedArrays(int arrayType, int offset, [In] double[ , , ] pointer)

        #region glInterleavedArrays(int arrayType, int offset, [In] short[] pointer)
        /// <summary>
        ///     Simultaneously specifies and enables several interleaved arrays.
        /// </summary>
        // GLAPI void GLAPIENTRY glInterleavedArrays(GLenum format, GLsizei stride, const GLvoid *pointer);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glInterleavedArrays(int arrayType, int offset, [In] short[] pointer);
        #endregion glInterleavedArrays(int arrayType, int offset, [In] short[] pointer)

        #region glInterleavedArrays(int arrayType, int offset, [In] short[ , ] pointer)
        /// <summary>
        ///     Simultaneously specifies and enables several interleaved arrays.
        /// </summary>
        // GLAPI void GLAPIENTRY glInterleavedArrays(GLenum format, GLsizei stride, const GLvoid *pointer);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glInterleavedArrays(int arrayType, int offset, [In] short[ , ] pointer);
        #endregion glInterleavedArrays(int arrayType, int offset, [In] short[ , ] pointer)

        #region glInterleavedArrays(int arrayType, int offset, [In] short[ , , ] pointer)
        /// <summary>
        ///     Simultaneously specifies and enables several interleaved arrays.
        /// </summary>
        // GLAPI void GLAPIENTRY glInterleavedArrays(GLenum format, GLsizei stride, const GLvoid *pointer);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glInterleavedArrays(int arrayType, int offset, [In] short[ , , ] pointer);
        #endregion glInterleavedArrays(int arrayType, int offset, [In] short[ , , ] pointer)

        #region glInterleavedArrays(int arrayType, int offset, [In] int[] pointer)
        /// <summary>
        ///     Simultaneously specifies and enables several interleaved arrays.
        /// </summary>
        // GLAPI void GLAPIENTRY glInterleavedArrays(GLenum format, GLsizei stride, const GLvoid *pointer);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glInterleavedArrays(int arrayType, int offset, [In] int[] pointer);
        #endregion glInterleavedArrays(int arrayType, int offset, [In] int[] pointer)

        #region glInterleavedArrays(int arrayType, int offset, [In] int[ , ] pointer)
        /// <summary>
        ///     Simultaneously specifies and enables several interleaved arrays.
        /// </summary>
        // GLAPI void GLAPIENTRY glInterleavedArrays(GLenum format, GLsizei stride, const GLvoid *pointer);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glInterleavedArrays(int arrayType, int offset, [In] int[ , ] pointer);
        #endregion glInterleavedArrays(int arrayType, int offset, [In] int[ , ] pointer)

        #region glInterleavedArrays(int arrayType, int offset, [In] int[ , , ] pointer)
        /// <summary>
        ///     Simultaneously specifies and enables several interleaved arrays.
        /// </summary>
        // GLAPI void GLAPIENTRY glInterleavedArrays(GLenum format, GLsizei stride, const GLvoid *pointer);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glInterleavedArrays(int arrayType, int offset, [In] int[ , , ] pointer);
        #endregion glInterleavedArrays(int arrayType, int offset, [In] int[ , , ] pointer)

        #region glInterleavedArrays(int arrayType, int offset, [In] float[] pointer)
        /// <summary>
        ///     Simultaneously specifies and enables several interleaved arrays.
        /// </summary>
        // GLAPI void GLAPIENTRY glInterleavedArrays(GLenum format, GLsizei stride, const GLvoid *pointer);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glInterleavedArrays(int arrayType, int offset, [In] float[] pointer);
        #endregion glInterleavedArrays(int arrayType, int offset, [In] float[] pointer)

        #region glInterleavedArrays(int arrayType, int offset, [In] float[ , ] pointer)
        /// <summary>
        ///     Simultaneously specifies and enables several interleaved arrays.
        /// </summary>
        // GLAPI void GLAPIENTRY glInterleavedArrays(GLenum format, GLsizei stride, const GLvoid *pointer);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glInterleavedArrays(int arrayType, int offset, [In] float[ , ] pointer);
        #endregion glInterleavedArrays(int arrayType, int offset, [In] float[ , ] pointer)

        #region glInterleavedArrays(int arrayType, int offset, [In] float[ , , ] pointer)
        /// <summary>
        ///     Simultaneously specifies and enables several interleaved arrays.
        /// </summary>
        // GLAPI void GLAPIENTRY glInterleavedArrays(GLenum format, GLsizei stride, const GLvoid *pointer);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glInterleavedArrays(int arrayType, int offset, [In] float[ , , ] pointer);
        #endregion glInterleavedArrays(int arrayType, int offset, [In] float[ , , ] pointer)

        #region glInterleavedArrays(int arrayType, int offset, [In] ushort[] pointer)
        /// <summary>
        ///     Simultaneously specifies and enables several interleaved arrays.
        /// </summary>
        // GLAPI void GLAPIENTRY glInterleavedArrays(GLenum format, GLsizei stride, const GLvoid *pointer);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glInterleavedArrays(int arrayType, int offset, [In] ushort[] pointer);
        #endregion glInterleavedArrays(int arrayType, int offset, [In] ushort[] pointer)

        #region glInterleavedArrays(int arrayType, int offset, [In] ushort[ , ] pointer)
        /// <summary>
        ///     Simultaneously specifies and enables several interleaved arrays.
        /// </summary>
        // GLAPI void GLAPIENTRY glInterleavedArrays(GLenum format, GLsizei stride, const GLvoid *pointer);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glInterleavedArrays(int arrayType, int offset, [In] ushort[ , ] pointer);
        #endregion glInterleavedArrays(int arrayType, int offset, [In] ushort[ , ] pointer)

        #region glInterleavedArrays(int arrayType, int offset, [In] ushort[ , , ] pointer)
        /// <summary>
        ///     Simultaneously specifies and enables several interleaved arrays.
        /// </summary>
        // GLAPI void GLAPIENTRY glInterleavedArrays(GLenum format, GLsizei stride, const GLvoid *pointer);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glInterleavedArrays(int arrayType, int offset, [In] ushort[ , , ] pointer);
        #endregion glInterleavedArrays(int arrayType, int offset, [In] ushort[ , , ] pointer)

        #region glInterleavedArrays(int arrayType, int offset, [In] uint[] pointer)
        /// <summary>
        ///     Simultaneously specifies and enables several interleaved arrays.
        /// </summary>
        // GLAPI void GLAPIENTRY glInterleavedArrays(GLenum format, GLsizei stride, const GLvoid *pointer);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glInterleavedArrays(int arrayType, int offset, [In] uint[] pointer);
        #endregion glInterleavedArrays(int arrayType, int offset, [In] uint[] pointer)

        #region glInterleavedArrays(int arrayType, int offset, [In] uint[ , ] pointer)
        /// <summary>
        ///     Simultaneously specifies and enables several interleaved arrays.
        /// </summary>
        // GLAPI void GLAPIENTRY glInterleavedArrays(GLenum format, GLsizei stride, const GLvoid *pointer);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glInterleavedArrays(int arrayType, int offset, [In] uint[ , ] pointer);
        #endregion glInterleavedArrays(int arrayType, int offset, [In] uint[ , ] pointer)

        #region glInterleavedArrays(int arrayType, int offset, [In] uint[ , , ] pointer)
        /// <summary>
        ///     Simultaneously specifies and enables several interleaved arrays.
        /// </summary>
        // GLAPI void GLAPIENTRY glInterleavedArrays(GLenum format, GLsizei stride, const GLvoid *pointer);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glInterleavedArrays(int arrayType, int offset, [In] uint[ , , ] pointer);
        #endregion glInterleavedArrays(int arrayType, int offset, [In] uint[ , , ] pointer)

        #region glInterleavedArrays(int arrayType, int offset, [In] IntPtr pointer)
        /// <summary>
        ///     Simultaneously specifies and enables several interleaved arrays.
        /// </summary>
        // GLAPI void GLAPIENTRY glInterleavedArrays(GLenum format, GLsizei stride, const GLvoid *pointer);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glInterleavedArrays(int arrayType, int offset, [In] IntPtr pointer);
        #endregion glInterleavedArrays(int arrayType, int offset, [In] IntPtr pointer)

        #region glInterleavedArrays(int arrayType, int offset, [In] void *pointer)
        /// <summary>
        ///     Simultaneously specifies and enables several interleaved arrays.
        /// </summary>
        // GLAPI void GLAPIENTRY glInterleavedArrays(GLenum format, GLsizei stride, const GLvoid *pointer);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glInterleavedArrays(int arrayType, int offset, [In] void *pointer);
        #endregion glInterleavedArrays(int arrayType, int offset, [In] void *pointer)

        #region glLoadName(int name)
        /// <summary>
        ///     Loads a name onto the name stack.
        /// </summary>
        // GLAPI void GLAPIENTRY glLoadName(GLuint name);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glLoadName(int name);
        #endregion glLoadName(int name)

        #region glMap1d(int target, double u1, double u2, int stride, int number, [In] double[] points)
        /// <summary>
        ///     Defines a one-dimensional evaluator.
        /// </summary>
        // GLAPI void GLAPIENTRY glMap1d(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glMap1d(int target, double u1, double u2, int stride, int number, [In] double[] points);
        #endregion glMap1d(int target, double u1, double u2, int stride, int number, [In] double[] points)

        #region glMap1d(int target, double u1, double u2, int stride, int number, [In] double[ , ] points)
        /// <summary>
        ///     Defines a one-dimensional evaluator.
        /// </summary>
        // GLAPI void GLAPIENTRY glMap1d(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glMap1d(int target, double u1, double u2, int stride, int number, [In] double[ , ] points);
        #endregion glMap1d(int target, double u1, double u2, int stride, int number, [In] double[ , ] points)

        #region glMap1d(int target, double u1, double u2, int stride, int number, [In] double[ , , ] points)
        /// <summary>
        ///     Defines a one-dimensional evaluator.
        /// </summary>
        // GLAPI void GLAPIENTRY glMap1d(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glMap1d(int target, double u1, double u2, int stride, int number, [In] double[ , , ] points);
        #endregion glMap1d(int target, double u1, double u2, int stride, int number, [In] double[ , , ] points)

        #region glMap1d(int target, double u1, double u2, int stride, int number, [In] IntPtr points)
        /// <summary>
        ///     Defines a one-dimensional evaluator.
        /// </summary>
        // GLAPI void GLAPIENTRY glMap1d(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glMap1d(int target, double u1, double u2, int stride, int number, [In] IntPtr points);
        #endregion glMap1d(int target, double u1, double u2, int stride, int number, [In] IntPtr points)

        #region glMap1d(int target, double u1, double u2, int stride, int number, [In] double *points)
        /// <summary>
        ///     Defines a one-dimensional evaluator.
        /// </summary>
        // GLAPI void GLAPIENTRY glMap1d(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glMap1d(int target, double u1, double u2, int stride, int number, [In] double *points);
        #endregion glMap1d(int target, double u1, double u2, int stride, int number, [In] double *points)

        #region glMap1f(int target, float u1, float u2, int stride, int number, [In] float[] points)
        /// <summary>
        ///     Defines a one-dimensional evaluator.
        /// </summary>
        // GLAPI void GLAPIENTRY glMap1f(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glMap1f(int target, float u1, float u2, int stride, int number, [In] float[] points);
        #endregion glMap1f(int target, float u1, float u2, int stride, int number, [In] float[] points)

        #region glMap1f(int target, float u1, float u2, int stride, int number, [In] float[ , ] points)
        /// <summary>
        ///     Defines a one-dimensional evaluator.
        /// </summary>
        // GLAPI void GLAPIENTRY glMap1f(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glMap1f(int target, float u1, float u2, int stride, int number, [In] float[ , ] points);
        #endregion glMap1f(int target, float u1, float u2, int stride, int number, [In] float[ , ] points)

        #region glMap1f(int target, float u1, float u2, int stride, int number, [In] float[ , , ] points)
        /// <summary>
        ///     Defines a one-dimensional evaluator.
        /// </summary>
        // GLAPI void GLAPIENTRY glMap1f(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glMap1f(int target, float u1, float u2, int stride, int number, [In] float[ , , ] points);
        #endregion glMap1f(int target, float u1, float u2, int stride, int number, [In] float[ , , ] points)

        #region glMap1f(int target, float u1, float u2, int stride, int number, [In] IntPtr points)
        /// <summary>
        ///     Defines a one-dimensional evaluator.
        /// </summary>
        // GLAPI void GLAPIENTRY glMap1f(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glMap1f(int target, float u1, float u2, int stride, int number, [In] IntPtr points);
        #endregion glMap1f(int target, float u1, float u2, int stride, int number, [In] IntPtr points)

        #region glMap1f(int target, float u1, float u2, int stride, int number, [In] float *points)
        /// <summary>
        ///     Defines a one-dimensional evaluator.
        /// </summary>
        // GLAPI void GLAPIENTRY glMap1f(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glMap1f(int target, float u1, float u2, int stride, int number, [In] float *points);
        #endregion glMap1f(int target, float u1, float u2, int stride, int number, [In] float *points)

        #region glMap2d(int target, double u1, double u2, int uStride, int uNumber, double v1, double v2, int vStride, int vNumber, [In] double[] points)
        /// <summary>
        ///     Defines a two-dimensional evaluator.
        /// </summary>
        // GLAPI void GLAPIENTRY glMap2d(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glMap2d(int target, double u1, double u2, int uStride, int uNumber, double v1, double v2, int vStride, int vNumber, [In] double[] points);
        #endregion glMap2d(int target, double u1, double u2, int uStride, int uNumber, double v1, double v2, int vStride, int vNumber, [In] double[] points)

        #region glMap2d(int target, double u1, double u2, int uStride, int uNumber, double v1, double v2, int vStride, int vNumber, [In] double[ , ] points)
        /// <summary>
        ///     Defines a two-dimensional evaluator.
        /// </summary>
        // GLAPI void GLAPIENTRY glMap2d(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glMap2d(int target, double u1, double u2, int uStride, int uNumber, double v1, double v2, int vStride, int vNumber, [In] double[ , ] points);
        #endregion glMap2d(int target, double u1, double u2, int uStride, int uNumber, double v1, double v2, int vStride, int vNumber, [In] double[ , ] points)

        #region glMap2d(int target, double u1, double u2, int uStride, int uNumber, double v1, double v2, int vStride, int vNumber, [In] double[ , , ] points)
        /// <summary>
        ///     Defines a two-dimensional evaluator.
        /// </summary>
        // GLAPI void GLAPIENTRY glMap2d(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glMap2d(int target, double u1, double u2, int uStride, int uNumber, double v1, double v2, int vStride, int vNumber, [In] double[ , , ] points);
        #endregion glMap2d(int target, double u1, double u2, int uStride, int uNumber, double v1, double v2, int vStride, int vNumber, [In] double[ , , ] points)

        #region glMap2d(int target, double u1, double u2, int uStride, int uNumber, double v1, double v2, int vStride, int vNumber, [In] IntPtr points)
        /// <summary>
        ///     Defines a two-dimensional evaluator.
        /// </summary>
        // GLAPI void GLAPIENTRY glMap2d(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glMap2d(int target, double u1, double u2, int uStride, int uNumber, double v1, double v2, int vStride, int vNumber, [In] IntPtr points);
        #endregion glMap2d(int target, double u1, double u2, int uStride, int uNumber, double v1, double v2, int vStride, int vNumber, [In] IntPtr points)

        #region glMap2d(int target, double u1, double u2, int uStride, int uNumber, double v1, double v2, int vStride, int vNumber, [In] double *points)
        /// <summary>
        ///     Defines a two-dimensional evaluator.
        /// </summary>
        // GLAPI void GLAPIENTRY glMap2d(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glMap2d(int target, double u1, double u2, int uStride, int uNumber, double v1, double v2, int vStride, int vNumber, [In] double *points);
        #endregion glMap2d(int target, double u1, double u2, int uStride, int uNumber, double v1, double v2, int vStride, int vNumber, [In] double *points)

        #region glMap2f(int target, float u1, float u2, int uStride, int uNumber, float v1, float v2, int vStride, int vNumber, [In] float[] points)
        /// <summary>
        ///     Defines a two-dimensional evaluator.
        /// </summary>
        // GLAPI void GLAPIENTRY glMap2f(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glMap2f(int target, float u1, float u2, int uStride, int uNumber, float v1, float v2, int vStride, int vNumber, [In] float[] points);
        #endregion glMap2f(int target, float u1, float u2, int uStride, int uNumber, float v1, float v2, int vStride, int vNumber, [In] float[] points)

        #region glMap2f(int target, float u1, float u2, int uStride, int uNumber, float v1, float v2, int vStride, int vNumber, [In] float[ , ] points)
        /// <summary>
        ///     Defines a two-dimensional evaluator.
        /// </summary>
        // GLAPI void GLAPIENTRY glMap2f(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glMap2f(int target, float u1, float u2, int uStride, int uNumber, float v1, float v2, int vStride, int vNumber, [In] float[ , ] points);
        #endregion glMap2f(int target, float u1, float u2, int uStride, int uNumber, float v1, float v2, int vStride, int vNumber, [In] float[ , ] points)

        #region glMap2f(int target, float u1, float u2, int uStride, int uNumber, float v1, float v2, int vStride, int vNumber, [In] float[ , , ] points)
        /// <summary>
        ///     Defines a two-dimensional evaluator.
        /// </summary>
        // GLAPI void GLAPIENTRY glMap2f(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glMap2f(int target, float u1, float u2, int uStride, int uNumber, float v1, float v2, int vStride, int vNumber, [In] float[ , , ] points);
        #endregion glMap2f(int target, float u1, float u2, int uStride, int uNumber, float v1, float v2, int vStride, int vNumber, [In] float[ , , ] points)

        #region glMap2f(int target, float u1, float u2, int uStride, int uNumber, float v1, float v2, int vStride, int vNumber, [In] IntPtr points)
        /// <summary>
        ///     Defines a two-dimensional evaluator.
        /// </summary>
        // GLAPI void GLAPIENTRY glMap2f(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glMap2f(int target, float u1, float u2, int uStride, int uNumber, float v1, float v2, int vStride, int vNumber, [In] IntPtr points);
        #endregion glMap2f(int target, float u1, float u2, int uStride, int uNumber, float v1, float v2, int vStride, int vNumber, [In] IntPtr points)

        #region glMap2f(int target, float u1, float u2, int uStride, int uNumber, float v1, float v2, int vStride, int vNumber, [In] float *points)
        /// <summary>
        ///     Defines a two-dimensional evaluator.
        /// </summary>
        // GLAPI void GLAPIENTRY glMap2f(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glMap2f(int target, float u1, float u2, int uStride, int uNumber, float v1, float v2, int vStride, int vNumber, [In] float *points);
        #endregion glMap2f(int target, float u1, float u2, int uStride, int uNumber, float v1, float v2, int vStride, int vNumber, [In] float *points)

        #region glMapGrid1d(int uPartitions, double u1, double u2)
        /// <summary>
        ///     Defines a one-dimensional mesh.
        /// </summary>
        // GLAPI void GLAPIENTRY glMapGrid1d(GLint un, GLdouble u1, GLdouble u2);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glMapGrid1d(int uPartitions, double u1, double u2);
        #endregion glMapGrid1d(int uPartitions, double u1, double u2)

        #region glMapGrid1f(int uPartitions, float u1, float u2)
        /// <summary>
        ///     Defines a one-dimensional mesh.
        /// </summary>
        // GLAPI void GLAPIENTRY glMapGrid1f(GLint un, GLfloat u1, GLfloat u2);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glMapGrid1f(int uPartitions, float u1, float u2);
        #endregion glMapGrid1f(int uPartitions, float u1, float u2)

        #region glMapGrid2d(int uPartitions, double u1, double u2, int vPartitions, double v1, double v2)
        /// <summary>
        ///     Defines a two-dimensional mesh.
        /// </summary>
        // GLAPI void GLAPIENTRY glMapGrid2d(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glMapGrid2d(int uPartitions, double u1, double u2, int vPartitions, double v1, double v2);
        #endregion glMapGrid2d(int uPartitions, double u1, double u2, int vPartitions, double v1, double v2)

        #region glMapGrid2f(int uPartitions, float u1, float u2, int vPartitions, float v1, float v2)
        /// <summary>
        ///     Defines a two-dimensional mesh.
        /// </summary>
        // GLAPI void GLAPIENTRY glMapGrid2f(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glMapGrid2f(int uPartitions, float u1, float u2, int vPartitions, float v1, float v2);
        #endregion glMapGrid2f(int uPartitions, float u1, float u2, int vPartitions, float v1, float v2)

        #region glNormalPointer(int dataType, int offset, [In] IntPtr pointer)
        /// <summary>
        ///     Defines an array of normals.
        /// </summary>
        // GLAPI void GLAPIENTRY glNormalPointer(GLenum type, GLsizei stride, const GLvoid *ptr);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glNormalPointer(int dataType, int offset, [In] IntPtr pointer);
        #endregion glNormalPointer(int dataType, int offset, [In] IntPtr pointer)

        #region glNormalPointer(int dataType, int offset, [In] void *pointer)
        /// <summary>
        ///     Defines an array of normals.
        /// </summary>
        // GLAPI void GLAPIENTRY glNormalPointer(GLenum type, GLsizei stride, const GLvoid *ptr);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glNormalPointer(int dataType, int offset, [In] void *pointer);
        #endregion glNormalPointer(int dataType, int offset, [In] void *pointer)

        #region glPassThrough(float token)
        /// <summary>
        ///     Places a marker in the feedback buffer.
        /// </summary>
        // GLAPI void GLAPIENTRY glPassThrough(GLfloat token);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glPassThrough(float token);
        #endregion glPassThrough(float token)

        #region glPopClientAttrib()
        /// <summary>
        ///     Pops the client attribute stack.
        /// </summary>
        // GLAPI void GLAPIENTRY glPopClientAttrib(void);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glPopClientAttrib();
        #endregion glPopClientAttrib()

        #region glPopName()
        /// <summary>
        ///     Pops the name stack.
        /// </summary>
        // GLAPI void GLAPIENTRY glPopName(void);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glPopName();
        #endregion glPopName()

        #region glPrioritizeTextures(int number, [In] int[] textures, [In] float[] priorities)
        /// <summary>
        ///     Sets texture residence priority.
        /// </summary>
        // GLAPI void GLAPIENTRY glPrioritizeTextures(GLsizei n, const GLuint *textures, const GLclampf *priorities);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glPrioritizeTextures(int number, [In] int[] textures, [In] float[] priorities);
        #endregion glPrioritizeTextures(int number, [In] int[] textures, [In] float[] priorities)

        #region glPrioritizeTextures(int number, [In] ref int textures, [In] ref float priorities)
        /// <summary>
        ///     Sets texture residence priority.
        /// </summary>
        // GLAPI void GLAPIENTRY glPrioritizeTextures(GLsizei n, const GLuint *textures, const GLclampf *priorities);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glPrioritizeTextures(int number, [In] ref int textures, [In] ref float priorities);
        #endregion glPrioritizeTextures(int number, [In] ref int textures, [In] ref float priorities)

        #region glPrioritizeTextures(int number, [In] int[] textures, [In] IntPtr priorities)
        /// <summary>
        ///     Sets texture residence priority.
        /// </summary>
        // GLAPI void GLAPIENTRY glPrioritizeTextures(GLsizei n, const GLuint *textures, const GLclampf *priorities);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glPrioritizeTextures(int number, [In] int[] textures, [In] IntPtr priorities);
        #endregion glPrioritizeTextures(int number, [In] int[] textures, [In] IntPtr priorities)

        #region glPrioritizeTextures(int number, [In] IntPtr textures, [In] float[] priorities)
        /// <summary>
        ///     Sets texture residence priority.
        /// </summary>
        // GLAPI void GLAPIENTRY glPrioritizeTextures(GLsizei n, const GLuint *textures, const GLclampf *priorities);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glPrioritizeTextures(int number, [In] IntPtr textures, [In] float[] priorities);
        #endregion glPrioritizeTextures(int number, [In] IntPtr textures, [In] float[] priorities)

        #region glPrioritizeTextures(int number, [In] IntPtr textures, [In] IntPtr priorities)
        /// <summary>
        ///     Sets texture residence priority.
        /// </summary>
        // GLAPI void GLAPIENTRY glPrioritizeTextures(GLsizei n, const GLuint *textures, const GLclampf *priorities);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glPrioritizeTextures(int number, [In] IntPtr textures, [In] IntPtr priorities);
        #endregion glPrioritizeTextures(int number, [In] IntPtr textures, [In] IntPtr priorities)

        #region glPrioritizeTextures(int number, [In] int *textures, [In] float *priorities)
        /// <summary>
        ///     Sets texture residence priority.
        /// </summary>
        // GLAPI void GLAPIENTRY glPrioritizeTextures(GLsizei n, const GLuint *textures, const GLclampf *priorities);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glPrioritizeTextures(int number, [In] int *textures, [In] float *priorities);
        #endregion glPrioritizeTextures(int number, [In] int *textures, [In] float *priorities)

        #region glPushClientAttrib(int mask)
        /// <summary>
        ///     Pushes the client attribute stack.
        /// </summary>
        // GLAPI void GLAPIENTRY glPushClientAttrib(GLbitfield mask);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glPushClientAttrib(int mask);
        #endregion glPushClientAttrib(int mask)

        #region glPushName(int name)
        /// <summary>
        ///     Pushes the name stack.
        /// </summary>
        // GLAPI void GLAPIENTRY glPushName(GLuint name);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glPushName(int name);
        #endregion glPushName(int name)

        #region glSelectBuffer(int size, [Out] int[] buffer)
        /// <summary>
        ///     Establishes a buffer for selection mode values.
        /// </summary>
        // GLAPI void GLAPIENTRY glSelectBuffer(GLsizei size, GLuint *buffer);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glSelectBuffer(int size, [Out] int[] buffer);
        #endregion glSelectBuffer(int size, [Out] int[] buffer)

        #region glSelectBuffer(int size, [Out] uint[] buffer)
        /// <summary>
        ///     Establishes a buffer for selection mode values.
        /// </summary>
        // GLAPI void GLAPIENTRY glSelectBuffer(GLsizei size, GLuint *buffer);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glSelectBuffer(int size, [Out] uint[] buffer);
        #endregion glSelectBuffer(int size, [Out] uint[] buffer)

        #region glSelectBuffer(int size, [Out] IntPtr buffer)
        /// <summary>
        ///     Establishes a buffer for selection mode values.
        /// </summary>
        // GLAPI void GLAPIENTRY glSelectBuffer(GLsizei size, GLuint *buffer);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glSelectBuffer(int size, [Out] IntPtr buffer);
        #endregion glSelectBuffer(int size, [Out] IntPtr buffer)

        #region glSelectBuffer(int size, [Out] int *buffer)
        /// <summary>
        ///     Establishes a buffer for selection mode values.
        /// </summary>
        // GLAPI void GLAPIENTRY glSelectBuffer(GLsizei size, GLuint *buffer);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glSelectBuffer(int size, [Out] int *buffer);
        #endregion glSelectBuffer(int size, [Out] int *buffer)

        #region glSelectBuffer(int size, [Out] uint *buffer)
        /// <summary>
        ///     Establishes a buffer for selection mode values.
        /// </summary>
        // GLAPI void GLAPIENTRY glSelectBuffer(GLsizei size, GLuint *buffer);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glSelectBuffer(int size, [Out] uint *buffer);
        #endregion glSelectBuffer(int size, [Out] uint *buffer)

        #region glTexCoordPointer(int size, int dataType, int offset, [In] IntPtr pointer)
        /// <summary>
        ///     Defines an array of texture coordinates.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexCoordPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *ptr);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoordPointer(int size, int dataType, int offset, [In] IntPtr pointer);
        #endregion glTexCoordPointer(int size, int dataType, int offset, [In] IntPtr pointer)

        #region glTexCoordPointer(int size, int dataType, int offset, [In] void *pointer)
        /// <summary>
        ///     Defines an array of texture coordinates.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexCoordPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *ptr);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glTexCoordPointer(int size, int dataType, int offset, [In] void *pointer);
        #endregion glTexCoordPointer(int size, int dataType, int offset, [In] void *pointer)

        #region glTexSubImage1D(int textureTarget, int levelOfDetail, int xOffset, int width, int pixelFormat, int dataType, [In] byte[] pixels)
        /// <summary>
        ///     Specifies a one-dimensional texture subimage.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage1D(int textureTarget, int levelOfDetail, int xOffset, int width, int pixelFormat, int dataType, [In] byte[] pixels);
        #endregion glTexSubImage1D(int textureTarget, int levelOfDetail, int xOffset, int width, int pixelFormat, int dataType, [In] byte[] pixels)

        #region glTexSubImage1D(int textureTarget, int levelOfDetail, int xOffset, int width, int pixelFormat, int dataType, [In] byte[ , ] pixels)
        /// <summary>
        ///     Specifies a one-dimensional texture subimage.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage1D(int textureTarget, int levelOfDetail, int xOffset, int width, int pixelFormat, int dataType, [In] byte[ , ] pixels);
        #endregion glTexSubImage1D(int textureTarget, int levelOfDetail, int xOffset, int width, int pixelFormat, int dataType, [In] byte[ , ] pixels)

        #region glTexSubImage1D(int textureTarget, int levelOfDetail, int xOffset, int width, int pixelFormat, int dataType, [In] byte[ , , ] pixels)
        /// <summary>
        ///     Specifies a one-dimensional texture subimage.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage1D(int textureTarget, int levelOfDetail, int xOffset, int width, int pixelFormat, int dataType, [In] byte[ , , ] pixels);
        #endregion glTexSubImage1D(int textureTarget, int levelOfDetail, int xOffset, int width, int pixelFormat, int dataType, [In] byte[ , , ] pixels)

        #region glTexSubImage1D(int textureTarget, int levelOfDetail, int xOffset, int width, int pixelFormat, int dataType, [In] double[] pixels)
        /// <summary>
        ///     Specifies a one-dimensional texture subimage.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage1D(int textureTarget, int levelOfDetail, int xOffset, int width, int pixelFormat, int dataType, [In] double[] pixels);
        #endregion glTexSubImage1D(int textureTarget, int levelOfDetail, int xOffset, int width, int pixelFormat, int dataType, [In] double[] pixels)

        #region glTexSubImage1D(int textureTarget, int levelOfDetail, int xOffset, int width, int pixelFormat, int dataType, [In] double[ , ] pixels)
        /// <summary>
        ///     Specifies a one-dimensional texture subimage.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage1D(int textureTarget, int levelOfDetail, int xOffset, int width, int pixelFormat, int dataType, [In] double[ , ] pixels);
        #endregion glTexSubImage1D(int textureTarget, int levelOfDetail, int xOffset, int width, int pixelFormat, int dataType, [In] double[ , ] pixels)

        #region glTexSubImage1D(int textureTarget, int levelOfDetail, int xOffset, int width, int pixelFormat, int dataType, [In] double[ , , ] pixels)
        /// <summary>
        ///     Specifies a one-dimensional texture subimage.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage1D(int textureTarget, int levelOfDetail, int xOffset, int width, int pixelFormat, int dataType, [In] double[ , , ] pixels);
        #endregion glTexSubImage1D(int textureTarget, int levelOfDetail, int xOffset, int width, int pixelFormat, int dataType, [In] double[ , , ] pixels)

        #region glTexSubImage1D(int textureTarget, int levelOfDetail, int xOffset, int width, int pixelFormat, int dataType, [In] short[] pixels)
        /// <summary>
        ///     Specifies a one-dimensional texture subimage.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage1D(int textureTarget, int levelOfDetail, int xOffset, int width, int pixelFormat, int dataType, [In] short[] pixels);
        #endregion glTexSubImage1D(int textureTarget, int levelOfDetail, int xOffset, int width, int pixelFormat, int dataType, [In] short[] pixels)

        #region glTexSubImage1D(int textureTarget, int levelOfDetail, int xOffset, int width, int pixelFormat, int dataType, [In] short[ , ] pixels)
        /// <summary>
        ///     Specifies a one-dimensional texture subimage.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage1D(int textureTarget, int levelOfDetail, int xOffset, int width, int pixelFormat, int dataType, [In] short[ , ] pixels);
        #endregion glTexSubImage1D(int textureTarget, int levelOfDetail, int xOffset, int width, int pixelFormat, int dataType, [In] short[ , ] pixels)

        #region glTexSubImage1D(int textureTarget, int levelOfDetail, int xOffset, int width, int pixelFormat, int dataType, [In] short[ , , ] pixels)
        /// <summary>
        ///     Specifies a one-dimensional texture subimage.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage1D(int textureTarget, int levelOfDetail, int xOffset, int width, int pixelFormat, int dataType, [In] short[ , , ] pixels);
        #endregion glTexSubImage1D(int textureTarget, int levelOfDetail, int xOffset, int width, int pixelFormat, int dataType, [In] short[ , , ] pixels)

        #region glTexSubImage1D(int textureTarget, int levelOfDetail, int xOffset, int width, int pixelFormat, int dataType, [In] int[] pixels)
        /// <summary>
        ///     Specifies a one-dimensional texture subimage.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage1D(int textureTarget, int levelOfDetail, int xOffset, int width, int pixelFormat, int dataType, [In] int[] pixels);
        #endregion glTexSubImage1D(int textureTarget, int levelOfDetail, int xOffset, int width, int pixelFormat, int dataType, [In] int[] pixels)

        #region glTexSubImage1D(int textureTarget, int levelOfDetail, int xOffset, int width, int pixelFormat, int dataType, [In] int[ , ] pixels)
        /// <summary>
        ///     Specifies a one-dimensional texture subimage.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage1D(int textureTarget, int levelOfDetail, int xOffset, int width, int pixelFormat, int dataType, [In] int[ , ] pixels);
        #endregion glTexSubImage1D(int textureTarget, int levelOfDetail, int xOffset, int width, int pixelFormat, int dataType, [In] int[ , ] pixels)

        #region glTexSubImage1D(int textureTarget, int levelOfDetail, int xOffset, int width, int pixelFormat, int dataType, [In] int[ , , ] pixels)
        /// <summary>
        ///     Specifies a one-dimensional texture subimage.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage1D(int textureTarget, int levelOfDetail, int xOffset, int width, int pixelFormat, int dataType, [In] int[ , , ] pixels);
        #endregion glTexSubImage1D(int textureTarget, int levelOfDetail, int xOffset, int width, int pixelFormat, int dataType, [In] int[ , , ] pixels)

        #region glTexSubImage1D(int textureTarget, int levelOfDetail, int xOffset, int width, int pixelFormat, int dataType, [In] float[] pixels)
        /// <summary>
        ///     Specifies a one-dimensional texture subimage.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage1D(int textureTarget, int levelOfDetail, int xOffset, int width, int pixelFormat, int dataType, [In] float[] pixels);
        #endregion glTexSubImage1D(int textureTarget, int levelOfDetail, int xOffset, int width, int pixelFormat, int dataType, [In] float[] pixels)

        #region glTexSubImage1D(int textureTarget, int levelOfDetail, int xOffset, int width, int pixelFormat, int dataType, [In] float[ , ] pixels)
        /// <summary>
        ///     Specifies a one-dimensional texture subimage.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage1D(int textureTarget, int levelOfDetail, int xOffset, int width, int pixelFormat, int dataType, [In] float[ , ] pixels);
        #endregion glTexSubImage1D(int textureTarget, int levelOfDetail, int xOffset, int width, int pixelFormat, int dataType, [In] float[ , ] pixels)

        #region glTexSubImage1D(int textureTarget, int levelOfDetail, int xOffset, int width, int pixelFormat, int dataType, [In] float[ , , ] pixels)
        /// <summary>
        ///     Specifies a one-dimensional texture subimage.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage1D(int textureTarget, int levelOfDetail, int xOffset, int width, int pixelFormat, int dataType, [In] float[ , , ] pixels);
        #endregion glTexSubImage1D(int textureTarget, int levelOfDetail, int xOffset, int width, int pixelFormat, int dataType, [In] float[ , , ] pixels)

        #region glTexSubImage1D(int textureTarget, int levelOfDetail, int xOffset, int width, int pixelFormat, int dataType, [In] ushort[] pixels)
        /// <summary>
        ///     Specifies a one-dimensional texture subimage.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage1D(int textureTarget, int levelOfDetail, int xOffset, int width, int pixelFormat, int dataType, [In] ushort[] pixels);
        #endregion glTexSubImage1D(int textureTarget, int levelOfDetail, int xOffset, int width, int pixelFormat, int dataType, [In] ushort[] pixels)

        #region glTexSubImage1D(int textureTarget, int levelOfDetail, int xOffset, int width, int pixelFormat, int dataType, [In] ushort[ , ] pixels)
        /// <summary>
        ///     Specifies a one-dimensional texture subimage.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage1D(int textureTarget, int levelOfDetail, int xOffset, int width, int pixelFormat, int dataType, [In] ushort[ , ] pixels);
        #endregion glTexSubImage1D(int textureTarget, int levelOfDetail, int xOffset, int width, int pixelFormat, int dataType, [In] ushort[ , ] pixels)

        #region glTexSubImage1D(int textureTarget, int levelOfDetail, int xOffset, int width, int pixelFormat, int dataType, [In] ushort[ , , ] pixels)
        /// <summary>
        ///     Specifies a one-dimensional texture subimage.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage1D(int textureTarget, int levelOfDetail, int xOffset, int width, int pixelFormat, int dataType, [In] ushort[ , , ] pixels);
        #endregion glTexSubImage1D(int textureTarget, int levelOfDetail, int xOffset, int width, int pixelFormat, int dataType, [In] ushort[ , , ] pixels)

        #region glTexSubImage1D(int textureTarget, int levelOfDetail, int xOffset, int width, int pixelFormat, int dataType, [In] uint[] pixels)
        /// <summary>
        ///     Specifies a one-dimensional texture subimage.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage1D(int textureTarget, int levelOfDetail, int xOffset, int width, int pixelFormat, int dataType, [In] uint[] pixels);
        #endregion glTexSubImage1D(int textureTarget, int levelOfDetail, int xOffset, int width, int pixelFormat, int dataType, [In] uint[] pixels)

        #region glTexSubImage1D(int textureTarget, int levelOfDetail, int xOffset, int width, int pixelFormat, int dataType, [In] uint[ , ] pixels)
        /// <summary>
        ///     Specifies a one-dimensional texture subimage.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage1D(int textureTarget, int levelOfDetail, int xOffset, int width, int pixelFormat, int dataType, [In] uint[ , ] pixels);
        #endregion glTexSubImage1D(int textureTarget, int levelOfDetail, int xOffset, int width, int pixelFormat, int dataType, [In] uint[ , ] pixels)

        #region glTexSubImage1D(int textureTarget, int levelOfDetail, int xOffset, int width, int pixelFormat, int dataType, [In] uint[ , , ] pixels)
        /// <summary>
        ///     Specifies a one-dimensional texture subimage.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage1D(int textureTarget, int levelOfDetail, int xOffset, int width, int pixelFormat, int dataType, [In] uint[ , , ] pixels);
        #endregion glTexSubImage1D(int textureTarget, int levelOfDetail, int xOffset, int width, int pixelFormat, int dataType, [In] uint[ , , ] pixels)

        #region glTexSubImage1D(int textureTarget, int levelOfDetail, int xOffset, int width, int pixelFormat, int dataType, [In] IntPtr pixels)
        /// <summary>
        ///     Specifies a one-dimensional texture subimage.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage1D(int textureTarget, int levelOfDetail, int xOffset, int width, int pixelFormat, int dataType, [In] IntPtr pixels);
        #endregion glTexSubImage1D(int textureTarget, int levelOfDetail, int xOffset, int width, int pixelFormat, int dataType, [In] IntPtr pixels)

        #region glTexSubImage1D(int textureTarget, int levelOfDetail, int xOffset, int width, int pixelFormat, int dataType, [In] void *pixels)
        /// <summary>
        ///     Specifies a one-dimensional texture subimage.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glTexSubImage1D(int textureTarget, int levelOfDetail, int xOffset, int width, int pixelFormat, int dataType, [In] void *pixels);
        #endregion glTexSubImage1D(int textureTarget, int levelOfDetail, int xOffset, int width, int pixelFormat, int dataType, [In] void *pixels)

        #region glTexSubImage2D(int textureTarget, int levelOfDetail, int xOffset, int yOffset, int width, int height, int pixelFormat, int dataType, [In] byte[] pixels)
        /// <summary>
        ///     Specifies a two-dimensional texture subimage.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage2D(int textureTarget, int levelOfDetail, int xOffset, int yOffset, int width, int height, int pixelFormat, int dataType, [In] byte[] pixels);
        #endregion glTexSubImage2D(int textureTarget, int levelOfDetail, int xOffset, int yOffset, int width, int height, int pixelFormat, int dataType, [In] byte[] pixels)

        #region glTexSubImage2D(int textureTarget, int levelOfDetail, int xOffset, int yOffset, int width, int height, int pixelFormat, int dataType, [In] byte[ , ] pixels)
        /// <summary>
        ///     Specifies a two-dimensional texture subimage.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage2D(int textureTarget, int levelOfDetail, int xOffset, int yOffset, int width, int height, int pixelFormat, int dataType, [In] byte[ , ] pixels);
        #endregion glTexSubImage2D(int textureTarget, int levelOfDetail, int xOffset, int yOffset, int width, int height, int pixelFormat, int dataType, [In] byte[ , ] pixels)

        #region glTexSubImage2D(int textureTarget, int levelOfDetail, int xOffset, int yOffset, int width, int height, int pixelFormat, int dataType, [In] byte[ , , ] pixels)
        /// <summary>
        ///     Specifies a two-dimensional texture subimage.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage2D(int textureTarget, int levelOfDetail, int xOffset, int yOffset, int width, int height, int pixelFormat, int dataType, [In] byte[ , , ] pixels);
        #endregion glTexSubImage2D(int textureTarget, int levelOfDetail, int xOffset, int yOffset, int width, int height, int pixelFormat, int dataType, [In] byte[ , , ] pixels)

        #region glTexSubImage2D(int textureTarget, int levelOfDetail, int xOffset, int yOffset, int width, int height, int pixelFormat, int dataType, [In] double[] pixels)
        /// <summary>
        ///     Specifies a two-dimensional texture subimage.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage2D(int textureTarget, int levelOfDetail, int xOffset, int yOffset, int width, int height, int pixelFormat, int dataType, [In] double[] pixels);
        #endregion glTexSubImage2D(int textureTarget, int levelOfDetail, int xOffset, int yOffset, int width, int height, int pixelFormat, int dataType, [In] double[] pixels)

        #region glTexSubImage2D(int textureTarget, int levelOfDetail, int xOffset, int yOffset, int width, int height, int pixelFormat, int dataType, [In] double[ , ] pixels)
        /// <summary>
        ///     Specifies a two-dimensional texture subimage.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage2D(int textureTarget, int levelOfDetail, int xOffset, int yOffset, int width, int height, int pixelFormat, int dataType, [In] double[ , ] pixels);
        #endregion glTexSubImage2D(int textureTarget, int levelOfDetail, int xOffset, int yOffset, int width, int height, int pixelFormat, int dataType, [In] double[ , ] pixels)

        #region glTexSubImage2D(int textureTarget, int levelOfDetail, int xOffset, int yOffset, int width, int height, int pixelFormat, int dataType, [In] double[ , , ] pixels)
        /// <summary>
        ///     Specifies a two-dimensional texture subimage.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage2D(int textureTarget, int levelOfDetail, int xOffset, int yOffset, int width, int height, int pixelFormat, int dataType, [In] double[ , , ] pixels);
        #endregion glTexSubImage2D(int textureTarget, int levelOfDetail, int xOffset, int yOffset, int width, int height, int pixelFormat, int dataType, [In] double[ , , ] pixels)

        #region glTexSubImage2D(int textureTarget, int levelOfDetail, int xOffset, int yOffset, int width, int height, int pixelFormat, int dataType, [In] short[] pixels)
        /// <summary>
        ///     Specifies a two-dimensional texture subimage.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage2D(int textureTarget, int levelOfDetail, int xOffset, int yOffset, int width, int height, int pixelFormat, int dataType, [In] short[] pixels);
        #endregion glTexSubImage2D(int textureTarget, int levelOfDetail, int xOffset, int yOffset, int width, int height, int pixelFormat, int dataType, [In] short[] pixels)

        #region glTexSubImage2D(int textureTarget, int levelOfDetail, int xOffset, int yOffset, int width, int height, int pixelFormat, int dataType, [In] short[ , ] pixels)
        /// <summary>
        ///     Specifies a two-dimensional texture subimage.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage2D(int textureTarget, int levelOfDetail, int xOffset, int yOffset, int width, int height, int pixelFormat, int dataType, [In] short[ , ] pixels);
        #endregion glTexSubImage2D(int textureTarget, int levelOfDetail, int xOffset, int yOffset, int width, int height, int pixelFormat, int dataType, [In] short[ , ] pixels)

        #region glTexSubImage2D(int textureTarget, int levelOfDetail, int xOffset, int yOffset, int width, int height, int pixelFormat, int dataType, [In] short[ , , ] pixels)
        /// <summary>
        ///     Specifies a two-dimensional texture subimage.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage2D(int textureTarget, int levelOfDetail, int xOffset, int yOffset, int width, int height, int pixelFormat, int dataType, [In] short[ , , ] pixels);
        #endregion glTexSubImage2D(int textureTarget, int levelOfDetail, int xOffset, int yOffset, int width, int height, int pixelFormat, int dataType, [In] short[ , , ] pixels)

        #region glTexSubImage2D(int textureTarget, int levelOfDetail, int xOffset, int yOffset, int width, int height, int pixelFormat, int dataType, [In] int[] pixels)
        /// <summary>
        ///     Specifies a two-dimensional texture subimage.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage2D(int textureTarget, int levelOfDetail, int xOffset, int yOffset, int width, int height, int pixelFormat, int dataType, [In] int[] pixels);
        #endregion glTexSubImage2D(int textureTarget, int levelOfDetail, int xOffset, int yOffset, int width, int height, int pixelFormat, int dataType, [In] int[] pixels)

        #region glTexSubImage2D(int textureTarget, int levelOfDetail, int xOffset, int yOffset, int width, int height, int pixelFormat, int dataType, [In] int[ , ] pixels)
        /// <summary>
        ///     Specifies a two-dimensional texture subimage.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage2D(int textureTarget, int levelOfDetail, int xOffset, int yOffset, int width, int height, int pixelFormat, int dataType, [In] int[ , ] pixels);
        #endregion glTexSubImage2D(int textureTarget, int levelOfDetail, int xOffset, int yOffset, int width, int height, int pixelFormat, int dataType, [In] int[ , ] pixels)

        #region glTexSubImage2D(int textureTarget, int levelOfDetail, int xOffset, int yOffset, int width, int height, int pixelFormat, int dataType, [In] int[ , , ] pixels)
        /// <summary>
        ///     Specifies a two-dimensional texture subimage.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage2D(int textureTarget, int levelOfDetail, int xOffset, int yOffset, int width, int height, int pixelFormat, int dataType, [In] int[ , , ] pixels);
        #endregion glTexSubImage2D(int textureTarget, int levelOfDetail, int xOffset, int yOffset, int width, int height, int pixelFormat, int dataType, [In] int[ , , ] pixels)

        #region glTexSubImage2D(int textureTarget, int levelOfDetail, int xOffset, int yOffset, int width, int height, int pixelFormat, int dataType, [In] float[] pixels)
        /// <summary>
        ///     Specifies a two-dimensional texture subimage.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage2D(int textureTarget, int levelOfDetail, int xOffset, int yOffset, int width, int height, int pixelFormat, int dataType, [In] float[] pixels);
        #endregion glTexSubImage2D(int textureTarget, int levelOfDetail, int xOffset, int yOffset, int width, int height, int pixelFormat, int dataType, [In] float[] pixels)

        #region glTexSubImage2D(int textureTarget, int levelOfDetail, int xOffset, int yOffset, int width, int height, int pixelFormat, int dataType, [In] float[ , ] pixels)
        /// <summary>
        ///     Specifies a two-dimensional texture subimage.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage2D(int textureTarget, int levelOfDetail, int xOffset, int yOffset, int width, int height, int pixelFormat, int dataType, [In] float[ , ] pixels);
        #endregion glTexSubImage2D(int textureTarget, int levelOfDetail, int xOffset, int yOffset, int width, int height, int pixelFormat, int dataType, [In] float[ , ] pixels)

        #region glTexSubImage2D(int textureTarget, int levelOfDetail, int xOffset, int yOffset, int width, int height, int pixelFormat, int dataType, [In] float[ , , ] pixels)
        /// <summary>
        ///     Specifies a two-dimensional texture subimage.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage2D(int textureTarget, int levelOfDetail, int xOffset, int yOffset, int width, int height, int pixelFormat, int dataType, [In] float[ , , ] pixels);
        #endregion glTexSubImage2D(int textureTarget, int levelOfDetail, int xOffset, int yOffset, int width, int height, int pixelFormat, int dataType, [In] float[ , , ] pixels)

        #region glTexSubImage2D(int textureTarget, int levelOfDetail, int xOffset, int yOffset, int width, int height, int pixelFormat, int dataType, [In] ushort[] pixels)
        /// <summary>
        ///     Specifies a two-dimensional texture subimage.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage2D(int textureTarget, int levelOfDetail, int xOffset, int yOffset, int width, int height, int pixelFormat, int dataType, [In] ushort[] pixels);
        #endregion glTexSubImage2D(int textureTarget, int levelOfDetail, int xOffset, int yOffset, int width, int height, int pixelFormat, int dataType, [In] ushort[] pixels)

        #region glTexSubImage2D(int textureTarget, int levelOfDetail, int xOffset, int yOffset, int width, int height, int pixelFormat, int dataType, [In] ushort[ , ] pixels)
        /// <summary>
        ///     Specifies a two-dimensional texture subimage.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage2D(int textureTarget, int levelOfDetail, int xOffset, int yOffset, int width, int height, int pixelFormat, int dataType, [In] ushort[ , ] pixels);
        #endregion glTexSubImage2D(int textureTarget, int levelOfDetail, int xOffset, int yOffset, int width, int height, int pixelFormat, int dataType, [In] ushort[ , ] pixels)

        #region glTexSubImage2D(int textureTarget, int levelOfDetail, int xOffset, int yOffset, int width, int height, int pixelFormat, int dataType, [In] ushort[ , , ] pixels)
        /// <summary>
        ///     Specifies a two-dimensional texture subimage.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage2D(int textureTarget, int levelOfDetail, int xOffset, int yOffset, int width, int height, int pixelFormat, int dataType, [In] ushort[ , , ] pixels);
        #endregion glTexSubImage2D(int textureTarget, int levelOfDetail, int xOffset, int yOffset, int width, int height, int pixelFormat, int dataType, [In] ushort[ , , ] pixels)

        #region glTexSubImage2D(int textureTarget, int levelOfDetail, int xOffset, int yOffset, int width, int height, int pixelFormat, int dataType, [In] uint[] pixels)
        /// <summary>
        ///     Specifies a two-dimensional texture subimage.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage2D(int textureTarget, int levelOfDetail, int xOffset, int yOffset, int width, int height, int pixelFormat, int dataType, [In] uint[] pixels);
        #endregion glTexSubImage2D(int textureTarget, int levelOfDetail, int xOffset, int yOffset, int width, int height, int pixelFormat, int dataType, [In] uint[] pixels)

        #region glTexSubImage2D(int textureTarget, int levelOfDetail, int xOffset, int yOffset, int width, int height, int pixelFormat, int dataType, [In] uint[ , ] pixels)
        /// <summary>
        ///     Specifies a two-dimensional texture subimage.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage2D(int textureTarget, int levelOfDetail, int xOffset, int yOffset, int width, int height, int pixelFormat, int dataType, [In] uint[ , ] pixels);
        #endregion glTexSubImage2D(int textureTarget, int levelOfDetail, int xOffset, int yOffset, int width, int height, int pixelFormat, int dataType, [In] uint[ , ] pixels)

        #region glTexSubImage2D(int textureTarget, int levelOfDetail, int xOffset, int yOffset, int width, int height, int pixelFormat, int dataType, [In] uint[ , , ] pixels)
        /// <summary>
        ///     Specifies a two-dimensional texture subimage.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage2D(int textureTarget, int levelOfDetail, int xOffset, int yOffset, int width, int height, int pixelFormat, int dataType, [In] uint[ , , ] pixels);
        #endregion glTexSubImage2D(int textureTarget, int levelOfDetail, int xOffset, int yOffset, int width, int height, int pixelFormat, int dataType, [In] uint[ , , ] pixels)

        #region glTexSubImage2D(int textureTarget, int levelOfDetail, int xOffset, int yOffset, int width, int height, int pixelFormat, int dataType, [In] IntPtr pixels)
        /// <summary>
        ///     Specifies a two-dimensional texture subimage.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage2D(int textureTarget, int levelOfDetail, int xOffset, int yOffset, int width, int height, int pixelFormat, int dataType, [In] IntPtr pixels);
        #endregion glTexSubImage2D(int textureTarget, int levelOfDetail, int xOffset, int yOffset, int width, int height, int pixelFormat, int dataType, [In] IntPtr pixels)

        #region glTexSubImage2D(int textureTarget, int levelOfDetail, int xOffset, int yOffset, int width, int height, int pixelFormat, int dataType, [In] void *pixels)
        /// <summary>
        ///     Specifies a two-dimensional texture subimage.
        /// </summary>
        // GLAPI void GLAPIENTRY glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glTexSubImage2D(int textureTarget, int levelOfDetail, int xOffset, int yOffset, int width, int height, int pixelFormat, int dataType, [In] void *pixels);
        #endregion glTexSubImage2D(int textureTarget, int levelOfDetail, int xOffset, int yOffset, int width, int height, int pixelFormat, int dataType, [In] void *pixels)

        #region glVertexPointer(int size, int dataType, int offset, [In] byte[] pointer)
        /// <summary>
        ///     Defines an array of vertex data.
        /// </summary>
        // GLAPI void GLAPIENTRY glVertexPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *ptr);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glVertexPointer(int size, int dataType, int offset, [In] byte[] pointer);
        #endregion glVertexPointer(int size, int dataType, int offset, [In] byte[] pointer)

        #region glVertexPointer(int size, int dataType, int offset, [In] byte[ , ] pointer)
        /// <summary>
        ///     Defines an array of vertex data.
        /// </summary>
        // GLAPI void GLAPIENTRY glVertexPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *ptr);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glVertexPointer(int size, int dataType, int offset, [In] byte[ , ] pointer);
        #endregion glVertexPointer(int size, int dataType, int offset, [In] byte[ , ] pointer)

        #region glVertexPointer(int size, int dataType, int offset, [In] byte[ , , ] pointer)
        /// <summary>
        ///     Defines an array of vertex data.
        /// </summary>
        // GLAPI void GLAPIENTRY glVertexPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *ptr);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glVertexPointer(int size, int dataType, int offset, [In] byte[ , , ] pointer);
        #endregion glVertexPointer(int size, int dataType, int offset, [In] byte[ , , ] pointer)

        #region glVertexPointer(int size, int dataType, int offset, [In] double[] pointer)
        /// <summary>
        ///     Defines an array of vertex data.
        /// </summary>
        // GLAPI void GLAPIENTRY glVertexPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *ptr);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glVertexPointer(int size, int dataType, int offset, [In] double[] pointer);
        #endregion glVertexPointer(int size, int dataType, int offset, [In] double[] pointer)

        #region glVertexPointer(int size, int dataType, int offset, [In] double[ , ] pointer)
        /// <summary>
        ///     Defines an array of vertex data.
        /// </summary>
        // GLAPI void GLAPIENTRY glVertexPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *ptr);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glVertexPointer(int size, int dataType, int offset, [In] double[ , ] pointer);
        #endregion glVertexPointer(int size, int dataType, int offset, [In] double[ , ] pointer)

        #region glVertexPointer(int size, int dataType, int offset, [In] double[ , , ] pointer)
        /// <summary>
        ///     Defines an array of vertex data.
        /// </summary>
        // GLAPI void GLAPIENTRY glVertexPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *ptr);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glVertexPointer(int size, int dataType, int offset, [In] double[ , , ] pointer);
        #endregion glVertexPointer(int size, int dataType, int offset, [In] double[ , , ] pointer)

        #region glVertexPointer(int size, int dataType, int offset, [In] short[] pointer)
        /// <summary>
        ///     Defines an array of vertex data.
        /// </summary>
        // GLAPI void GLAPIENTRY glVertexPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *ptr);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glVertexPointer(int size, int dataType, int offset, [In] short[] pointer);
        #endregion glVertexPointer(int size, int dataType, int offset, [In] short[] pointer)

        #region glVertexPointer(int size, int dataType, int offset, [In] short[ , ] pointer)
        /// <summary>
        ///     Defines an array of vertex data.
        /// </summary>
        // GLAPI void GLAPIENTRY glVertexPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *ptr);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glVertexPointer(int size, int dataType, int offset, [In] short[ , ] pointer);
        #endregion glVertexPointer(int size, int dataType, int offset, [In] short[ , ] pointer)

        #region glVertexPointer(int size, int dataType, int offset, [In] short[ , , ] pointer)
        /// <summary>
        ///     Defines an array of vertex data.
        /// </summary>
        // GLAPI void GLAPIENTRY glVertexPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *ptr);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glVertexPointer(int size, int dataType, int offset, [In] short[ , , ] pointer);
        #endregion glVertexPointer(int size, int dataType, int offset, [In] short[ , , ] pointer)

        #region glVertexPointer(int size, int dataType, int offset, [In] int[] pointer)
        /// <summary>
        ///     Defines an array of vertex data.
        /// </summary>
        // GLAPI void GLAPIENTRY glVertexPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *ptr);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glVertexPointer(int size, int dataType, int offset, [In] int[] pointer);
        #endregion glVertexPointer(int size, int dataType, int offset, [In] int[] pointer)

        #region glVertexPointer(int size, int dataType, int offset, [In] int[ , ] pointer)
        /// <summary>
        ///     Defines an array of vertex data.
        /// </summary>
        // GLAPI void GLAPIENTRY glVertexPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *ptr);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glVertexPointer(int size, int dataType, int offset, [In] int[ , ] pointer);
        #endregion glVertexPointer(int size, int dataType, int offset, [In] int[ , ] pointer)

        #region glVertexPointer(int size, int dataType, int offset, [In] int[ , , ] pointer)
        /// <summary>
        ///     Defines an array of vertex data.
        /// </summary>
        // GLAPI void GLAPIENTRY glVertexPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *ptr);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glVertexPointer(int size, int dataType, int offset, [In] int[ , , ] pointer);
        #endregion glVertexPointer(int size, int dataType, int offset, [In] int[ , , ] pointer)

        #region glVertexPointer(int size, int dataType, int offset, [In] float[] pointer)
        /// <summary>
        ///     Defines an array of vertex data.
        /// </summary>
        // GLAPI void GLAPIENTRY glVertexPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *ptr);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glVertexPointer(int size, int dataType, int offset, [In] float[] pointer);
        #endregion glVertexPointer(int size, int dataType, int offset, [In] float[] pointer)

        #region glVertexPointer(int size, int dataType, int offset, [In] float[ , ] pointer)
        /// <summary>
        ///     Defines an array of vertex data.
        /// </summary>
        // GLAPI void GLAPIENTRY glVertexPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *ptr);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glVertexPointer(int size, int dataType, int offset, [In] float[ , ] pointer);
        #endregion glVertexPointer(int size, int dataType, int offset, [In] float[ , ] pointer)

        #region glVertexPointer(int size, int dataType, int offset, [In] float[ , , ] pointer)
        /// <summary>
        ///     Defines an array of vertex data.
        /// </summary>
        // GLAPI void GLAPIENTRY glVertexPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *ptr);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glVertexPointer(int size, int dataType, int offset, [In] float[ , , ] pointer);
        #endregion glVertexPointer(int size, int dataType, int offset, [In] float[ , , ] pointer)

        #region glVertexPointer(int size, int dataType, int offset, [In] ushort[] pointer)
        /// <summary>
        ///     Defines an array of vertex data.
        /// </summary>
        // GLAPI void GLAPIENTRY glVertexPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *ptr);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glVertexPointer(int size, int dataType, int offset, [In] ushort[] pointer);
        #endregion glVertexPointer(int size, int dataType, int offset, [In] ushort[] pointer)

        #region glVertexPointer(int size, int dataType, int offset, [In] ushort[ , ] pointer)
        /// <summary>
        ///     Defines an array of vertex data.
        /// </summary>
        // GLAPI void GLAPIENTRY glVertexPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *ptr);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glVertexPointer(int size, int dataType, int offset, [In] ushort[ , ] pointer);
        #endregion glVertexPointer(int size, int dataType, int offset, [In] ushort[ , ] pointer)

        #region glVertexPointer(int size, int dataType, int offset, [In] ushort[ , , ] pointer)
        /// <summary>
        ///     Defines an array of vertex data.
        /// </summary>
        // GLAPI void GLAPIENTRY glVertexPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *ptr);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glVertexPointer(int size, int dataType, int offset, [In] ushort[ , , ] pointer);
        #endregion glVertexPointer(int size, int dataType, int offset, [In] ushort[ , , ] pointer)

        #region glVertexPointer(int size, int dataType, int offset, [In] uint[] pointer)
        /// <summary>
        ///     Defines an array of vertex data.
        /// </summary>
        // GLAPI void GLAPIENTRY glVertexPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *ptr);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glVertexPointer(int size, int dataType, int offset, [In] uint[] pointer);
        #endregion glVertexPointer(int size, int dataType, int offset, [In] uint[] pointer)

        #region glVertexPointer(int size, int dataType, int offset, [In] uint[ , ] pointer)
        /// <summary>
        ///     Defines an array of vertex data.
        /// </summary>
        // GLAPI void GLAPIENTRY glVertexPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *ptr);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glVertexPointer(int size, int dataType, int offset, [In] uint[ , ] pointer);
        #endregion glVertexPointer(int size, int dataType, int offset, [In] uint[ , ] pointer)

        #region glVertexPointer(int size, int dataType, int offset, [In] uint[ , , ] pointer)
        /// <summary>
        ///     Defines an array of vertex data.
        /// </summary>
        // GLAPI void GLAPIENTRY glVertexPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *ptr);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void glVertexPointer(int size, int dataType, int offset, [In] uint[ , , ] pointer);
        #endregion glVertexPointer(int size, int dataType, int offset, [In] uint[ , , ] pointer)

        #region glVertexPointer(int size, int dataType, int offset, [In] IntPtr pointer)
        /// <summary>
        ///     Defines an array of vertex data.
        /// </summary>
        // GLAPI void GLAPIENTRY glVertexPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *ptr);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
        public static extern void glVertexPointer(int size, int dataType, int offset, [In] IntPtr pointer);
        #endregion glVertexPointer(int size, int dataType, int offset, [In] IntPtr pointer)

        #region glVertexPointer(int size, int dataType, int offset, [In] void *pointer)
        /// <summary>
        ///     Defines an array of vertex data.
        /// </summary>
        // GLAPI void GLAPIENTRY glVertexPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *ptr);
        [DllImport(GL_NATIVE_LIBRARY, CallingConvention=CALLING_CONVENTION, ExactSpelling=true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public unsafe static extern void glVertexPointer(int size, int dataType, int offset, [In] void *pointer);
        #endregion glVertexPointer(int size, int dataType, int offset, [In] void *pointer)
        #endregion OpenGL 1.1 Methods

        // --- GL Extensions ---
        #region 3DFX Extensions
        #region GL_3DFX_texture_compression_FXT1 (206)
        #region GL_3DFX_texture_compression_FXT1 Constants
        #region GL_COMPRESSED_RGB_FXT1_3DFX
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COMPRESSED_RGB_FXT1_3DFX 0x86B0
        public const int GL_COMPRESSED_RGB_FXT1_3DFX = 0x86B0;
        #endregion GL_COMPRESSED_RGB_FXT1_3DFX

        #region GL_COMPRESSED_RGBA_FXT1_3DFX
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COMPRESSED_RGBA_FXT1_3DFX 0x86B1
        public const int GL_COMPRESSED_RGBA_FXT1_3DFX = 0x86B1;
        #endregion GL_COMPRESSED_RGBA_FXT1_3DFX
        #endregion GL_3DFX_texture_compression_FXT1 Constants
        #endregion GL_3DFX_texture_compression_FXT1 (206)

        #region GL_3DFX_multisample (207)
        #region GL_3DFX_multisample Constants
        #region GL_MULTISAMPLE_3DFX
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MULTISAMPLE_3DFX 0x86B2
        public const int GL_MULTISAMPLE_3DFX = 0x86B2;
        #endregion GL_MULTISAMPLE_3DFX

        #region GL_SAMPLE_BUFFERS_3DFX
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SAMPLE_BUFFERS_3DFX 0x86B3
        public const int GL_SAMPLE_BUFFERS_3DFX = 0x86B3;
        #endregion GL_SAMPLE_BUFFERS_3DFX

        #region GL_SAMPLES_3DFX
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SAMPLES_3DFX 0x86B4
        public const int GL_SAMPLES_3DFX = 0x86B4;
        #endregion GL_SAMPLES_3DFX

        #region GL_MULTISAMPLE_BIT_3DFX
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MULTISAMPLE_BIT_3DFX 0x20000000
        public const int GL_MULTISAMPLE_BIT_3DFX = 0x20000000;
        #endregion GL_MULTISAMPLE_BIT_3DFX
        #endregion GL_3DFX_multisample Constants
        #endregion GL_3DFX_multisample (207)

        #region GL_3DFX_tbuffer (208)
        #region GL_3DFX_tbuffer Methods
        #region Overloads for GLvoid glTbufferMask3DFX(GLuint mask)
        #region void glTbufferMask3DFX([In] IntPtr extensionPointer, int mask)
        /// <summary>
        /// 
        /// </summary>
        // GLvoid glTbufferMask3DFX(GLuint mask)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg mask\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg mask\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32)\r\nret")]
        #endif
        public static void glTbufferMask3DFX([In] IntPtr extensionPointer, int mask) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTbufferMask3DFX([In] IntPtr extensionPointer, int mask)

        #region void glTbufferMask3DFX([In] IntPtr extensionPointer, uint mask)
        // GLvoid glTbufferMask3DFX(GLuint mask)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg mask\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int32)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg mask\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int32)\r\nret")]
        #endif
        public static void glTbufferMask3DFX([In] IntPtr extensionPointer, uint mask) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTbufferMask3DFX([In] IntPtr extensionPointer, uint mask)
        #endregion Overloads for GLvoid glTbufferMask3DFX(GLuint mask)
        #endregion GL_3DFX_tbuffer Methods
        #endregion GL_3DFX_tbuffer (208)
        #endregion 3DFX Extensions

        #region APPLE Extensions
        #region GL_APPLE_client_storage (270)
        #region GL_APPLE_client_storage Constants
        #region GL_UNPACK_CLIENT_STORAGE_APPLE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_UNPACK_CLIENT_STORAGE_APPLE 0x85B2
        public const int GL_UNPACK_CLIENT_STORAGE_APPLE = 0x85B2;
        #endregion GL_UNPACK_CLIENT_STORAGE_APPLE
        #endregion GL_APPLE_client_storage Constants
        #endregion GL_APPLE_client_storage (270)

        #region GL_APPLE_element_array (271)
        #region GL_APPLE_element_array Constants
        #region GL_ELEMENT_ARRAY_APPLE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_ELEMENT_ARRAY_APPLE 0x8768
        public const int GL_ELEMENT_ARRAY_APPLE = 0x8768;
        #endregion GL_ELEMENT_ARRAY_APPLE

        #region GL_ELEMENT_ARRAY_TYPE_APPLE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_ELEMENT_ARRAY_TYPE_APPLE 0x8769
        public const int GL_ELEMENT_ARRAY_TYPE_APPLE = 0x8769;
        #endregion GL_ELEMENT_ARRAY_TYPE_APPLE

        #region GL_ELEMENT_ARRAY_POINTER_APPLE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_ELEMENT_ARRAY_POINTER_APPLE 0x876A
        public const int GL_ELEMENT_ARRAY_POINTER_APPLE = 0x876A;
        #endregion GL_ELEMENT_ARRAY_POINTER_APPLE
        #endregion GL_APPLE_element_array Constants

        #region GL_APPLE_element_array Methods
        #region Overloads for GLvoid glElementPointerAPPLE(GLenum type, const GLvoid* pointer)
        #region void glElementPointerAPPLE([In] IntPtr extensionPointer, int type, short[] pointer)
        // GLvoid glElementPointerAPPLE(GLenum type, const GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg type\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg type\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int16[])\r\nret")]
        #endif
        public static void glElementPointerAPPLE([In] IntPtr extensionPointer, int type, short[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glElementPointerAPPLE([In] IntPtr extensionPointer, int type, short[] pointer)

        #region void glElementPointerAPPLE([In] IntPtr extensionPointer, int type, float[] pointer)
        // GLvoid glElementPointerAPPLE(GLenum type, const GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg type\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg type\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float32[])\r\nret")]
        #endif
        public static void glElementPointerAPPLE([In] IntPtr extensionPointer, int type, float[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glElementPointerAPPLE([In] IntPtr extensionPointer, int type, float[] pointer)

        #region void glElementPointerAPPLE([In] IntPtr extensionPointer, int type, int[] pointer)
        // GLvoid glElementPointerAPPLE(GLenum type, const GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg type\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg type\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32[])\r\nret")]
        #endif
        public static void glElementPointerAPPLE([In] IntPtr extensionPointer, int type, int[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glElementPointerAPPLE([In] IntPtr extensionPointer, int type, int[] pointer)

        #region void glElementPointerAPPLE([In] IntPtr extensionPointer, int type, IntPtr pointer)
        // GLvoid glElementPointerAPPLE(GLenum type, const GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg type\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg type\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glElementPointerAPPLE([In] IntPtr extensionPointer, int type, IntPtr pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glElementPointerAPPLE([In] IntPtr extensionPointer, int type, IntPtr pointer)

        #region void glElementPointerAPPLE([In] IntPtr extensionPointer, int type, byte[] pointer)
        // GLvoid glElementPointerAPPLE(GLenum type, const GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg type\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]unsigned int8[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg type\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]unsigned int8[])\r\nret")]
        #endif
        public static void glElementPointerAPPLE([In] IntPtr extensionPointer, int type, byte[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glElementPointerAPPLE([In] IntPtr extensionPointer, int type, byte[] pointer)

        #region void glElementPointerAPPLE([In] IntPtr extensionPointer, int type, double[] pointer)
        // GLvoid glElementPointerAPPLE(GLenum type, const GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg type\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float64[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg type\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float64[])\r\nret")]
        #endif
        public static void glElementPointerAPPLE([In] IntPtr extensionPointer, int type, double[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glElementPointerAPPLE([In] IntPtr extensionPointer, int type, double[] pointer)

        #region void glElementPointerAPPLE([In] IntPtr extensionPointer, int type, uint[] pointer)
        // GLvoid glElementPointerAPPLE(GLenum type, const GLvoid* pointer)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg type\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]unsigned int32[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg type\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]unsigned int32[])\r\nret")]
        #endif
        public static void glElementPointerAPPLE([In] IntPtr extensionPointer, int type, uint[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glElementPointerAPPLE([In] IntPtr extensionPointer, int type, uint[] pointer)

        #region void glElementPointerAPPLE([In] IntPtr extensionPointer, int type, sbyte[] pointer)
        // GLvoid glElementPointerAPPLE(GLenum type, const GLvoid* pointer)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg type\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int8[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg type\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int8[])\r\nret")]
        #endif
        public static void glElementPointerAPPLE([In] IntPtr extensionPointer, int type, sbyte[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glElementPointerAPPLE([In] IntPtr extensionPointer, int type, sbyte[] pointer)

        #region void glElementPointerAPPLE([In] IntPtr extensionPointer, int type, ushort[] pointer)
        // GLvoid glElementPointerAPPLE(GLenum type, const GLvoid* pointer)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg type\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]unsigned int16[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg type\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]unsigned int16[])\r\nret")]
        #endif
        public static void glElementPointerAPPLE([In] IntPtr extensionPointer, int type, ushort[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glElementPointerAPPLE([In] IntPtr extensionPointer, int type, ushort[] pointer)

        #region void glElementPointerAPPLE([In] IntPtr extensionPointer, int type, void* pointer)
        // GLvoid glElementPointerAPPLE(GLenum type, const GLvoid* pointer)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg type\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]void*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg type\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]void*)\r\nret")]
        #endif
        public static unsafe void glElementPointerAPPLE([In] IntPtr extensionPointer, int type, void* pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glElementPointerAPPLE([In] IntPtr extensionPointer, int type, void* pointer)
        #endregion Overloads for GLvoid glElementPointerAPPLE(GLenum type, const GLvoid* pointer)

        #region void glDrawElementArrayAPPLE([In] IntPtr extensionPointer, int mode, int first, int count)
        // GLvoid glDrawElementArrayAPPLE(GLenum mode, GLint first, GLsizei count)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg mode\r\nldarg first\r\nldarg count\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg mode\r\nldarg first\r\nldarg count\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32)\r\nret")]
        #endif
        public static void glDrawElementArrayAPPLE([In] IntPtr extensionPointer, int mode, int first, int count) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glDrawElementArrayAPPLE([In] IntPtr extensionPointer, int mode, int first, int count)

        #region void glDrawRangeElementArrayAPPLE([In] IntPtr extensionPointer, int mode, int start, int end, int first, int count)
        // GLvoid glDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg mode\r\nldarg start\r\nldarg end\r\nldarg first\r\nldarg count\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg mode\r\nldarg start\r\nldarg end\r\nldarg first\r\nldarg count\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32)\r\nret")]
        #endif
        public static void glDrawRangeElementArrayAPPLE([In] IntPtr extensionPointer, int mode, int start, int end, int first, int count) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glDrawRangeElementArrayAPPLE([In] IntPtr extensionPointer, int mode, int start, int end, int first, int count)

        #region Overloads for GLvoid glMultiDrawElementArrayAPPLE(GLenum mode, const GLint* first, const GLsizei* count, GLsizei primcount)
        #region void glMultiDrawElementArrayAPPLE([In] IntPtr extensionPointer, int mode, ref int first, ref int count, int primcount)
        // GLvoid glMultiDrawElementArrayAPPLE(GLenum mode, const GLint* first, const GLsizei* count, GLsizei primcount)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg mode\r\nldarg first\r\nldarg count\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]int32,[in][out]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg mode\r\nldarg first\r\nldarg count\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]int32,[in][out]int32,[in]int32)\r\nret")]
        #endif
        public static void glMultiDrawElementArrayAPPLE([In] IntPtr extensionPointer, int mode, ref int first, ref int count, int primcount) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiDrawElementArrayAPPLE([In] IntPtr extensionPointer, int mode, ref int first, ref int count, int primcount)

        #region void glMultiDrawElementArrayAPPLE([In] IntPtr extensionPointer, int mode, int[] first, int[] count, int primcount)
        // GLvoid glMultiDrawElementArrayAPPLE(GLenum mode, const GLint* first, const GLsizei* count, GLsizei primcount)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg mode\r\nldarg first\r\nldarg count\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32[],[in]int32[],[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg mode\r\nldarg first\r\nldarg count\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32[],[in]int32[],[in]int32)\r\nret")]
        #endif
        public static void glMultiDrawElementArrayAPPLE([In] IntPtr extensionPointer, int mode, int[] first, int[] count, int primcount) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiDrawElementArrayAPPLE([In] IntPtr extensionPointer, int mode, int[] first, int[] count, int primcount)

        #region void glMultiDrawElementArrayAPPLE([In] IntPtr extensionPointer, int mode, IntPtr first, IntPtr count, int primcount)
        // GLvoid glMultiDrawElementArrayAPPLE(GLenum mode, const GLint* first, const GLsizei* count, GLsizei primcount)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg mode\r\nldarg first\r\nldarg count\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int,[in]native int,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg mode\r\nldarg first\r\nldarg count\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int,[in]native int,[in]int32)\r\nret")]
        #endif
        public static void glMultiDrawElementArrayAPPLE([In] IntPtr extensionPointer, int mode, IntPtr first, IntPtr count, int primcount) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiDrawElementArrayAPPLE([In] IntPtr extensionPointer, int mode, IntPtr first, IntPtr count, int primcount)

        #region void glMultiDrawElementArrayAPPLE([In] IntPtr extensionPointer, int mode, int* first, int* count, int primcount)
        // GLvoid glMultiDrawElementArrayAPPLE(GLenum mode, const GLint* first, const GLsizei* count, GLsizei primcount)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg mode\r\nldarg first\r\nldarg count\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32*,[in]int32*,[in]int32)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg mode\r\nldarg first\r\nldarg count\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32*,[in]int32*,[in]int32)\r\nret")]
        #endif
        public static unsafe void glMultiDrawElementArrayAPPLE([In] IntPtr extensionPointer, int mode, int* first, int* count, int primcount) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiDrawElementArrayAPPLE([In] IntPtr extensionPointer, int mode, int* first, int* count, int primcount)
        #endregion Overloads for GLvoid glMultiDrawElementArrayAPPLE(GLenum mode, const GLint* first, const GLsizei* count, GLsizei primcount)

        #region Overloads for GLvoid glMultiDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, const GLint* first, const GLsizei* count, GLsizei primcount)
        #region void glMultiDrawRangeElementArrayAPPLE([In] IntPtr extensionPointer, int mode, int start, int end, ref int first, ref int count, int primcount)
        // GLvoid glMultiDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, const GLint* first, const GLsizei* count, GLsizei primcount)
        #if WIN32
        [IlasmAttribute(".maxstack 7\r\nldarg mode\r\nldarg start\r\nldarg end\r\nldarg first\r\nldarg count\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in][out]int32,[in][out]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 7\r\nldarg mode\r\nldarg start\r\nldarg end\r\nldarg first\r\nldarg count\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in][out]int32,[in][out]int32,[in]int32)\r\nret")]
        #endif
        public static void glMultiDrawRangeElementArrayAPPLE([In] IntPtr extensionPointer, int mode, int start, int end, ref int first, ref int count, int primcount) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiDrawRangeElementArrayAPPLE([In] IntPtr extensionPointer, int mode, int start, int end, ref int first, ref int count, int primcount)

        #region void glMultiDrawRangeElementArrayAPPLE([In] IntPtr extensionPointer, int mode, int start, int end, int[] first, int[] count, int primcount)
        // GLvoid glMultiDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, const GLint* first, const GLsizei* count, GLsizei primcount)
        #if WIN32
        [IlasmAttribute(".maxstack 7\r\nldarg mode\r\nldarg start\r\nldarg end\r\nldarg first\r\nldarg count\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32[],[in]int32[],[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 7\r\nldarg mode\r\nldarg start\r\nldarg end\r\nldarg first\r\nldarg count\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32[],[in]int32[],[in]int32)\r\nret")]
        #endif
        public static void glMultiDrawRangeElementArrayAPPLE([In] IntPtr extensionPointer, int mode, int start, int end, int[] first, int[] count, int primcount) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiDrawRangeElementArrayAPPLE([In] IntPtr extensionPointer, int mode, int start, int end, int[] first, int[] count, int primcount)

        #region void glMultiDrawRangeElementArrayAPPLE([In] IntPtr extensionPointer, int mode, int start, int end, IntPtr first, IntPtr count, int primcount)
        // GLvoid glMultiDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, const GLint* first, const GLsizei* count, GLsizei primcount)
        #if WIN32
        [IlasmAttribute(".maxstack 7\r\nldarg mode\r\nldarg start\r\nldarg end\r\nldarg first\r\nldarg count\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]native int,[in]native int,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 7\r\nldarg mode\r\nldarg start\r\nldarg end\r\nldarg first\r\nldarg count\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]native int,[in]native int,[in]int32)\r\nret")]
        #endif
        public static void glMultiDrawRangeElementArrayAPPLE([In] IntPtr extensionPointer, int mode, int start, int end, IntPtr first, IntPtr count, int primcount) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiDrawRangeElementArrayAPPLE([In] IntPtr extensionPointer, int mode, int start, int end, IntPtr first, IntPtr count, int primcount)

        #region void glMultiDrawRangeElementArrayAPPLE([In] IntPtr extensionPointer, int mode, int start, int end, int* first, int* count, int primcount)
        // GLvoid glMultiDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, const GLint* first, const GLsizei* count, GLsizei primcount)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 7\r\nldarg mode\r\nldarg start\r\nldarg end\r\nldarg first\r\nldarg count\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32*,[in]int32*,[in]int32)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 7\r\nldarg mode\r\nldarg start\r\nldarg end\r\nldarg first\r\nldarg count\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32*,[in]int32*,[in]int32)\r\nret")]
        #endif
        public static unsafe void glMultiDrawRangeElementArrayAPPLE([In] IntPtr extensionPointer, int mode, int start, int end, int* first, int* count, int primcount) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiDrawRangeElementArrayAPPLE([In] IntPtr extensionPointer, int mode, int start, int end, int* first, int* count, int primcount)
        #endregion Overloads for GLvoid glMultiDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, const GLint* first, const GLsizei* count, GLsizei primcount)
        #endregion GL_APPLE_element_array Methods
        #endregion GL_APPLE_element_array (271)

        #region GL_APPLE_fence (272)
        #region GL_APPLE_fence Constants
        #region GL_DRAW_PIXELS_APPLE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DRAW_PIXELS_APPLE 0x8A0A
        public const int GL_DRAW_PIXELS_APPLE = 0x8A0A;
        #endregion GL_DRAW_PIXELS_APPLE

        #region GL_FENCE_APPLE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_FENCE_APPLE 0x8A0B
        public const int GL_FENCE_APPLE = 0x8A0B;
        #endregion GL_FENCE_APPLE
        #endregion GL_APPLE_fence Constants

        #region GL_APPLE_fence Methods
        #region Overloads for GLvoid glGenFencesAPPLE(GLsizei n, GLuint* fences)
        #region void glGenFencesAPPLE([In] IntPtr extensionPointer, int n, out int fences)
        // GLvoid glGenFencesAPPLE(GLsizei n, GLuint* fences)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg fences\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[out]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg fences\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[out]int32)\r\nret")]
        #endif
        public static void glGenFencesAPPLE([In] IntPtr extensionPointer, int n, out int fences) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGenFencesAPPLE([In] IntPtr extensionPointer, int n, out int fences)

        #region void glGenFencesAPPLE([In] IntPtr extensionPointer, int n, int[] fences)
        // GLvoid glGenFencesAPPLE(GLsizei n, GLuint* fences)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg fences\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[out]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg fences\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[out]int32[])\r\nret")]
        #endif
        public static void glGenFencesAPPLE([In] IntPtr extensionPointer, int n, int[] fences) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGenFencesAPPLE([In] IntPtr extensionPointer, int n, int[] fences)

        #region void glGenFencesAPPLE([In] IntPtr extensionPointer, int n, IntPtr fences)
        // GLvoid glGenFencesAPPLE(GLsizei n, GLuint* fences)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg fences\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg fences\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGenFencesAPPLE([In] IntPtr extensionPointer, int n, IntPtr fences) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGenFencesAPPLE([In] IntPtr extensionPointer, int n, IntPtr fences)

        #region void glGenFencesAPPLE([In] IntPtr extensionPointer, int n, int* fences)
        // GLvoid glGenFencesAPPLE(GLsizei n, GLuint* fences)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg fences\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[out]int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg fences\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[out]int32*)\r\nret")]
        #endif
        public static unsafe void glGenFencesAPPLE([In] IntPtr extensionPointer, int n, int* fences) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGenFencesAPPLE([In] IntPtr extensionPointer, int n, int* fences)
        #endregion Overloads for GLvoid glGenFencesAPPLE(GLsizei n, GLuint* fences)

        #region Overloads for GLvoid glDeleteFencesAPPLE(GLsizei n, const GLuint* fences)
        #region void glDeleteFencesAPPLE([In] IntPtr extensionPointer, int n, ref int fences)
        // GLvoid glDeleteFencesAPPLE(GLsizei n, const GLuint* fences)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg fences\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg fences\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]int32)\r\nret")]
        #endif
        public static void glDeleteFencesAPPLE([In] IntPtr extensionPointer, int n, ref int fences) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glDeleteFencesAPPLE([In] IntPtr extensionPointer, int n, ref int fences)

        #region void glDeleteFencesAPPLE([In] IntPtr extensionPointer, int n, int[] fences)
        // GLvoid glDeleteFencesAPPLE(GLsizei n, const GLuint* fences)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg fences\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg fences\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32[])\r\nret")]
        #endif
        public static void glDeleteFencesAPPLE([In] IntPtr extensionPointer, int n, int[] fences) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glDeleteFencesAPPLE([In] IntPtr extensionPointer, int n, int[] fences)

        #region void glDeleteFencesAPPLE([In] IntPtr extensionPointer, int n, IntPtr fences)
        // GLvoid glDeleteFencesAPPLE(GLsizei n, const GLuint* fences)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg fences\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg fences\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glDeleteFencesAPPLE([In] IntPtr extensionPointer, int n, IntPtr fences) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glDeleteFencesAPPLE([In] IntPtr extensionPointer, int n, IntPtr fences)

        #region void glDeleteFencesAPPLE([In] IntPtr extensionPointer, int n, int* fences)
        // GLvoid glDeleteFencesAPPLE(GLsizei n, const GLuint* fences)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg fences\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg fences\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32*)\r\nret")]
        #endif
        public static unsafe void glDeleteFencesAPPLE([In] IntPtr extensionPointer, int n, int* fences) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glDeleteFencesAPPLE([In] IntPtr extensionPointer, int n, int* fences)
        #endregion Overloads for GLvoid glDeleteFencesAPPLE(GLsizei n, const GLuint* fences)

        #region void glSetFenceAPPLE([In] IntPtr extensionPointer, int fence)
        // GLvoid glSetFenceAPPLE(GLuint fence)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg fence\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg fence\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32)\r\nret")]
        #endif
        public static void glSetFenceAPPLE([In] IntPtr extensionPointer, int fence) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSetFenceAPPLE([In] IntPtr extensionPointer, int fence)

        #region int glIsFenceAPPLE([In] IntPtr extensionPointer, int fence)
        // GLboolean glIsFenceAPPLE(GLuint fence)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg fence\r\nldarg extensionPointer\r\ncalli unmanaged stdcall int32([in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg fence\r\nldarg extensionPointer\r\ncalli unmanaged cdecl int32([in]int32)\r\nret")]
        #endif
        public static int glIsFenceAPPLE([In] IntPtr extensionPointer, int fence) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion int glIsFenceAPPLE([In] IntPtr extensionPointer, int fence)

        #region int glTestFenceAPPLE([In] IntPtr extensionPointer, int fence)
        // GLboolean glTestFenceAPPLE(GLuint fence)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg fence\r\nldarg extensionPointer\r\ncalli unmanaged stdcall int32([in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg fence\r\nldarg extensionPointer\r\ncalli unmanaged cdecl int32([in]int32)\r\nret")]
        #endif
        public static int glTestFenceAPPLE([In] IntPtr extensionPointer, int fence) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion int glTestFenceAPPLE([In] IntPtr extensionPointer, int fence)

        #region void glFinishFenceAPPLE([In] IntPtr extensionPointer, int fence)
        // GLvoid glFinishFenceAPPLE(GLuint fence)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg fence\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg fence\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32)\r\nret")]
        #endif
        public static void glFinishFenceAPPLE([In] IntPtr extensionPointer, int fence) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glFinishFenceAPPLE([In] IntPtr extensionPointer, int fence)

        #region int glTestObjectAPPLE([In] IntPtr extensionPointer, int objectId, int name)
        // GLboolean glTestObjectAPPLE(GLenum objectId, GLuint name)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg objectId\r\nldarg name\r\nldarg extensionPointer\r\ncalli unmanaged stdcall int32([in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg objectId\r\nldarg name\r\nldarg extensionPointer\r\ncalli unmanaged cdecl int32([in]int32,[in]int32)\r\nret")]
        #endif
        public static int glTestObjectAPPLE([In] IntPtr extensionPointer, int objectId, int name) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion int glTestObjectAPPLE([In] IntPtr extensionPointer, int objectId, int name)

        #region void glFinishObjectAPPLE([In] IntPtr extensionPointer, int objectId, int name)
        // GLvoid glFinishObjectAPPLE(GLenum objectId, GLint name)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg objectId\r\nldarg name\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg objectId\r\nldarg name\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32)\r\nret")]
        #endif
        public static void glFinishObjectAPPLE([In] IntPtr extensionPointer, int objectId, int name) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glFinishObjectAPPLE([In] IntPtr extensionPointer, int objectId, int name)
        #endregion GL_APPLE_fence Methods
        #endregion GL_APPLE_fence (272)

        #region GL_APPLE_vertex_array_object (273)
        #region GL_APPLE_vertex_array_object Constants
        #region GL_VERTEX_ARRAY_BINDING_APPLE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VERTEX_ARRAY_BINDING_APPLE 0x85B5
        public const int GL_VERTEX_ARRAY_BINDING_APPLE = 0x85B5;
        #endregion GL_VERTEX_ARRAY_BINDING_APPLE
        #endregion GL_APPLE_vertex_array_object Constants

        #region GL_APPLE_vertex_array_object Methods
        #region void glBindVertexArrayAPPLE([In] IntPtr extensionPointer, int arrayId)
        // GLvoid glBindVertexArrayAPPLE(GLuint arrayId)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg arrayId\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg arrayId\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32)\r\nret")]
        #endif
        public static void glBindVertexArrayAPPLE([In] IntPtr extensionPointer, int arrayId) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glBindVertexArrayAPPLE([In] IntPtr extensionPointer, int arrayId)

        #region Overloads for GLvoid glDeleteVertexArraysAPPLE(GLsizei n, const GLuint* arrayIds)
        #region void glDeleteVertexArraysAPPLE([In] IntPtr extensionPointer, int n, ref int arrayIds)
        // GLvoid glDeleteVertexArraysAPPLE(GLsizei n, const GLuint* arrayIds)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg arrayIds\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg arrayIds\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]int32)\r\nret")]
        #endif
        public static void glDeleteVertexArraysAPPLE([In] IntPtr extensionPointer, int n, ref int arrayIds) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glDeleteVertexArraysAPPLE([In] IntPtr extensionPointer, int n, ref int arrayIds)

        #region void glDeleteVertexArraysAPPLE([In] IntPtr extensionPointer, int n, int[] arrayIds)
        // GLvoid glDeleteVertexArraysAPPLE(GLsizei n, const GLuint* arrayIds)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg arrayIds\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg arrayIds\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32[])\r\nret")]
        #endif
        public static void glDeleteVertexArraysAPPLE([In] IntPtr extensionPointer, int n, int[] arrayIds) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glDeleteVertexArraysAPPLE([In] IntPtr extensionPointer, int n, int[] arrayIds)

        #region void glDeleteVertexArraysAPPLE([In] IntPtr extensionPointer, int n, IntPtr arrayIds)
        // GLvoid glDeleteVertexArraysAPPLE(GLsizei n, const GLuint* arrayIds)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg arrayIds\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg arrayIds\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glDeleteVertexArraysAPPLE([In] IntPtr extensionPointer, int n, IntPtr arrayIds) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glDeleteVertexArraysAPPLE([In] IntPtr extensionPointer, int n, IntPtr arrayIds)

        #region void glDeleteVertexArraysAPPLE([In] IntPtr extensionPointer, int n, int* arrayIds)
        // GLvoid glDeleteVertexArraysAPPLE(GLsizei n, const GLuint* arrayIds)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg arrayIds\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg arrayIds\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32*)\r\nret")]
        #endif
        public static unsafe void glDeleteVertexArraysAPPLE([In] IntPtr extensionPointer, int n, int* arrayIds) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glDeleteVertexArraysAPPLE([In] IntPtr extensionPointer, int n, int* arrayIds)
        #endregion Overloads for GLvoid glDeleteVertexArraysAPPLE(GLsizei n, const GLuint* arrayIds)

        #region Overloads for GLvoid glGenVertexArraysAPPLE(GLsizei n, GLuint* arrayIds)
        #region void glGenVertexArraysAPPLE([In] IntPtr extensionPointer, int n, out int arrayIds)
        // GLvoid glGenVertexArraysAPPLE(GLsizei n, GLuint* arrayIds)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg arrayIds\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[out]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg arrayIds\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[out]int32)\r\nret")]
        #endif
        public static void glGenVertexArraysAPPLE([In] IntPtr extensionPointer, int n, out int arrayIds) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGenVertexArraysAPPLE([In] IntPtr extensionPointer, int n, out int arrayIds)

        #region void glGenVertexArraysAPPLE([In] IntPtr extensionPointer, int n, int[] arrayIds)
        // GLvoid glGenVertexArraysAPPLE(GLsizei n, GLuint* arrayIds)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg arrayIds\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[out]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg arrayIds\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[out]int32[])\r\nret")]
        #endif
        public static void glGenVertexArraysAPPLE([In] IntPtr extensionPointer, int n, int[] arrayIds) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGenVertexArraysAPPLE([In] IntPtr extensionPointer, int n, int[] arrayIds)

        #region void glGenVertexArraysAPPLE([In] IntPtr extensionPointer, int n, IntPtr arrayIds)
        // GLvoid glGenVertexArraysAPPLE(GLsizei n, GLuint* arrayIds)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg arrayIds\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg arrayIds\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGenVertexArraysAPPLE([In] IntPtr extensionPointer, int n, IntPtr arrayIds) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGenVertexArraysAPPLE([In] IntPtr extensionPointer, int n, IntPtr arrayIds)

        #region void glGenVertexArraysAPPLE([In] IntPtr extensionPointer, int n, int* arrayIds)
        // GLvoid glGenVertexArraysAPPLE(GLsizei n, GLuint* arrayIds)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg arrayIds\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[out]int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg arrayIds\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[out]int32*)\r\nret")]
        #endif
        public static unsafe void glGenVertexArraysAPPLE([In] IntPtr extensionPointer, int n, int* arrayIds) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGenVertexArraysAPPLE([In] IntPtr extensionPointer, int n, int* arrayIds)
        #endregion Overloads for GLvoid glGenVertexArraysAPPLE(GLsizei n, GLuint* arrayIds)

        #region int glIsVertexArrayAPPLE([In] IntPtr extensionPointer, int arrayId)
        // GLboolean glIsVertexArrayAPPLE(GLuint arrayId)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg arrayId\r\nldarg extensionPointer\r\ncalli unmanaged stdcall int32([in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg arrayId\r\nldarg extensionPointer\r\ncalli unmanaged cdecl int32([in]int32)\r\nret")]
        #endif
        public static int glIsVertexArrayAPPLE([In] IntPtr extensionPointer, int arrayId) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion int glIsVertexArrayAPPLE([In] IntPtr extensionPointer, int arrayId)
        #endregion GL_APPLE_vertex_array_object Methods
        #endregion GL_APPLE_vertex_array_object (273)

        #region GL_APPLE_vertex_array_range (274)
        #region GL_APPLE_vertex_array_range Constants
        #region GL_VERTEX_ARRAY_RANGE_APPLE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VERTEX_ARRAY_RANGE_APPLE 0x851D
        public const int GL_VERTEX_ARRAY_RANGE_APPLE = 0x851D;
        #endregion GL_VERTEX_ARRAY_RANGE_APPLE

        #region GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE 0x851E
        public const int GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE = 0x851E;
        #endregion GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE

        #region GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_APPLE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_APPLE 0x8520
        public const int GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_APPLE = 0x8520;
        #endregion GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_APPLE

        #region GL_VERTEX_ARRAY_RANGE_POINTER_APPLE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VERTEX_ARRAY_RANGE_POINTER_APPLE 0x8521
        public const int GL_VERTEX_ARRAY_RANGE_POINTER_APPLE = 0x8521;
        #endregion GL_VERTEX_ARRAY_RANGE_POINTER_APPLE

        #region GL_VERTEX_ARRAY_STORAGE_HINT_APPLE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VERTEX_ARRAY_STORAGE_HINT_APPLE 0x851F
        public const int GL_VERTEX_ARRAY_STORAGE_HINT_APPLE = 0x851F;
        #endregion GL_VERTEX_ARRAY_STORAGE_HINT_APPLE

        #region GL_STORAGE_CACHED_APPLE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_STORAGE_CACHED_APPLE 0x85BE
        public const int GL_STORAGE_CACHED_APPLE = 0x85BE;
        #endregion GL_STORAGE_CACHED_APPLE

        #region GL_STORAGE_SHARED_APPLE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_STORAGE_SHARED_APPLE 0x85BF
        public const int GL_STORAGE_SHARED_APPLE = 0x85BF;
        #endregion GL_STORAGE_SHARED_APPLE
        #endregion GL_APPLE_vertex_array_range Constants

        #region GL_APPLE_vertex_array_range Methods
        #region Overloads for GLvoid glVertexArrayRangeAPPLE(GLsizei length, GLvoid* pointer)
        #region void glVertexArrayRangeAPPLE([In] IntPtr extensionPointer, int length, short[] pointer)
        // GLvoid glVertexArrayRangeAPPLE(GLsizei length, GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg length\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg length\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int16[])\r\nret")]
        #endif
        public static void glVertexArrayRangeAPPLE([In] IntPtr extensionPointer, int length, short[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexArrayRangeAPPLE([In] IntPtr extensionPointer, int length, short[] pointer)

        #region void glVertexArrayRangeAPPLE([In] IntPtr extensionPointer, int length, float[] pointer)
        // GLvoid glVertexArrayRangeAPPLE(GLsizei length, GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg length\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg length\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float32[])\r\nret")]
        #endif
        public static void glVertexArrayRangeAPPLE([In] IntPtr extensionPointer, int length, float[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexArrayRangeAPPLE([In] IntPtr extensionPointer, int length, float[] pointer)

        #region void glVertexArrayRangeAPPLE([In] IntPtr extensionPointer, int length, int[] pointer)
        // GLvoid glVertexArrayRangeAPPLE(GLsizei length, GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg length\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg length\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32[])\r\nret")]
        #endif
        public static void glVertexArrayRangeAPPLE([In] IntPtr extensionPointer, int length, int[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexArrayRangeAPPLE([In] IntPtr extensionPointer, int length, int[] pointer)

        #region void glVertexArrayRangeAPPLE([In] IntPtr extensionPointer, int length, IntPtr pointer)
        // GLvoid glVertexArrayRangeAPPLE(GLsizei length, GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg length\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg length\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glVertexArrayRangeAPPLE([In] IntPtr extensionPointer, int length, IntPtr pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexArrayRangeAPPLE([In] IntPtr extensionPointer, int length, IntPtr pointer)

        #region void glVertexArrayRangeAPPLE([In] IntPtr extensionPointer, int length, byte[] pointer)
        // GLvoid glVertexArrayRangeAPPLE(GLsizei length, GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg length\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]unsigned int8[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg length\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]unsigned int8[])\r\nret")]
        #endif
        public static void glVertexArrayRangeAPPLE([In] IntPtr extensionPointer, int length, byte[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexArrayRangeAPPLE([In] IntPtr extensionPointer, int length, byte[] pointer)

        #region void glVertexArrayRangeAPPLE([In] IntPtr extensionPointer, int length, double[] pointer)
        // GLvoid glVertexArrayRangeAPPLE(GLsizei length, GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg length\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float64[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg length\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float64[])\r\nret")]
        #endif
        public static void glVertexArrayRangeAPPLE([In] IntPtr extensionPointer, int length, double[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexArrayRangeAPPLE([In] IntPtr extensionPointer, int length, double[] pointer)

        #region void glVertexArrayRangeAPPLE([In] IntPtr extensionPointer, int length, uint[] pointer)
        // GLvoid glVertexArrayRangeAPPLE(GLsizei length, GLvoid* pointer)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg length\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]unsigned int32[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg length\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]unsigned int32[])\r\nret")]
        #endif
        public static void glVertexArrayRangeAPPLE([In] IntPtr extensionPointer, int length, uint[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexArrayRangeAPPLE([In] IntPtr extensionPointer, int length, uint[] pointer)

        #region void glVertexArrayRangeAPPLE([In] IntPtr extensionPointer, int length, sbyte[] pointer)
        // GLvoid glVertexArrayRangeAPPLE(GLsizei length, GLvoid* pointer)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg length\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int8[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg length\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int8[])\r\nret")]
        #endif
        public static void glVertexArrayRangeAPPLE([In] IntPtr extensionPointer, int length, sbyte[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexArrayRangeAPPLE([In] IntPtr extensionPointer, int length, sbyte[] pointer)

        #region void glVertexArrayRangeAPPLE([In] IntPtr extensionPointer, int length, ushort[] pointer)
        // GLvoid glVertexArrayRangeAPPLE(GLsizei length, GLvoid* pointer)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg length\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]unsigned int16[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg length\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]unsigned int16[])\r\nret")]
        #endif
        public static void glVertexArrayRangeAPPLE([In] IntPtr extensionPointer, int length, ushort[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexArrayRangeAPPLE([In] IntPtr extensionPointer, int length, ushort[] pointer)

        #region void glVertexArrayRangeAPPLE([In] IntPtr extensionPointer, int length, void* pointer)
        // GLvoid glVertexArrayRangeAPPLE(GLsizei length, GLvoid* pointer)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg length\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]void*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg length\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]void*)\r\nret")]
        #endif
        public static unsafe void glVertexArrayRangeAPPLE([In] IntPtr extensionPointer, int length, void* pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexArrayRangeAPPLE([In] IntPtr extensionPointer, int length, void* pointer)
        #endregion Overloads for GLvoid glVertexArrayRangeAPPLE(GLsizei length, GLvoid* pointer)

        #region Overloads for GLvoid glFlushVertexArrayRangeAPPLE(GLsizei length, GLvoid* pointer)
        #region void glFlushVertexArrayRangeAPPLE([In] IntPtr extensionPointer, int length, short[] pointer)
        // GLvoid glFlushVertexArrayRangeAPPLE(GLsizei length, GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg length\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg length\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int16[])\r\nret")]
        #endif
        public static void glFlushVertexArrayRangeAPPLE([In] IntPtr extensionPointer, int length, short[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glFlushVertexArrayRangeAPPLE([In] IntPtr extensionPointer, int length, short[] pointer)

        #region void glFlushVertexArrayRangeAPPLE([In] IntPtr extensionPointer, int length, float[] pointer)
        // GLvoid glFlushVertexArrayRangeAPPLE(GLsizei length, GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg length\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg length\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float32[])\r\nret")]
        #endif
        public static void glFlushVertexArrayRangeAPPLE([In] IntPtr extensionPointer, int length, float[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glFlushVertexArrayRangeAPPLE([In] IntPtr extensionPointer, int length, float[] pointer)

        #region void glFlushVertexArrayRangeAPPLE([In] IntPtr extensionPointer, int length, int[] pointer)
        // GLvoid glFlushVertexArrayRangeAPPLE(GLsizei length, GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg length\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg length\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32[])\r\nret")]
        #endif
        public static void glFlushVertexArrayRangeAPPLE([In] IntPtr extensionPointer, int length, int[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glFlushVertexArrayRangeAPPLE([In] IntPtr extensionPointer, int length, int[] pointer)

        #region void glFlushVertexArrayRangeAPPLE([In] IntPtr extensionPointer, int length, IntPtr pointer)
        // GLvoid glFlushVertexArrayRangeAPPLE(GLsizei length, GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg length\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg length\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glFlushVertexArrayRangeAPPLE([In] IntPtr extensionPointer, int length, IntPtr pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glFlushVertexArrayRangeAPPLE([In] IntPtr extensionPointer, int length, IntPtr pointer)

        #region void glFlushVertexArrayRangeAPPLE([In] IntPtr extensionPointer, int length, byte[] pointer)
        // GLvoid glFlushVertexArrayRangeAPPLE(GLsizei length, GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg length\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]unsigned int8[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg length\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]unsigned int8[])\r\nret")]
        #endif
        public static void glFlushVertexArrayRangeAPPLE([In] IntPtr extensionPointer, int length, byte[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glFlushVertexArrayRangeAPPLE([In] IntPtr extensionPointer, int length, byte[] pointer)

        #region void glFlushVertexArrayRangeAPPLE([In] IntPtr extensionPointer, int length, double[] pointer)
        // GLvoid glFlushVertexArrayRangeAPPLE(GLsizei length, GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg length\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float64[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg length\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float64[])\r\nret")]
        #endif
        public static void glFlushVertexArrayRangeAPPLE([In] IntPtr extensionPointer, int length, double[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glFlushVertexArrayRangeAPPLE([In] IntPtr extensionPointer, int length, double[] pointer)

        #region void glFlushVertexArrayRangeAPPLE([In] IntPtr extensionPointer, int length, uint[] pointer)
        // GLvoid glFlushVertexArrayRangeAPPLE(GLsizei length, GLvoid* pointer)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg length\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]unsigned int32[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg length\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]unsigned int32[])\r\nret")]
        #endif
        public static void glFlushVertexArrayRangeAPPLE([In] IntPtr extensionPointer, int length, uint[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glFlushVertexArrayRangeAPPLE([In] IntPtr extensionPointer, int length, uint[] pointer)

        #region void glFlushVertexArrayRangeAPPLE([In] IntPtr extensionPointer, int length, sbyte[] pointer)
        // GLvoid glFlushVertexArrayRangeAPPLE(GLsizei length, GLvoid* pointer)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg length\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int8[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg length\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int8[])\r\nret")]
        #endif
        public static void glFlushVertexArrayRangeAPPLE([In] IntPtr extensionPointer, int length, sbyte[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glFlushVertexArrayRangeAPPLE([In] IntPtr extensionPointer, int length, sbyte[] pointer)

        #region void glFlushVertexArrayRangeAPPLE([In] IntPtr extensionPointer, int length, ushort[] pointer)
        // GLvoid glFlushVertexArrayRangeAPPLE(GLsizei length, GLvoid* pointer)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg length\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]unsigned int16[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg length\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]unsigned int16[])\r\nret")]
        #endif
        public static void glFlushVertexArrayRangeAPPLE([In] IntPtr extensionPointer, int length, ushort[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glFlushVertexArrayRangeAPPLE([In] IntPtr extensionPointer, int length, ushort[] pointer)

        #region void glFlushVertexArrayRangeAPPLE([In] IntPtr extensionPointer, int length, void* pointer)
        // GLvoid glFlushVertexArrayRangeAPPLE(GLsizei length, GLvoid* pointer)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg length\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]void*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg length\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]void*)\r\nret")]
        #endif
        public static unsafe void glFlushVertexArrayRangeAPPLE([In] IntPtr extensionPointer, int length, void* pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glFlushVertexArrayRangeAPPLE([In] IntPtr extensionPointer, int length, void* pointer)
        #endregion Overloads for GLvoid glFlushVertexArrayRangeAPPLE(GLsizei length, GLvoid* pointer)

        #region void glVertexArrayParameteriAPPLE([In] IntPtr extensionPointer, int pname, int param)
        // GLvoid glVertexArrayParameteriAPPLE(GLenum pname, GLint param)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg param\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg param\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32)\r\nret")]
        #endif
        public static void glVertexArrayParameteriAPPLE([In] IntPtr extensionPointer, int pname, int param) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexArrayParameteriAPPLE([In] IntPtr extensionPointer, int pname, int param)
        #endregion GL_APPLE_vertex_array_range Methods
        #endregion GL_APPLE_vertex_array_range (274)

        #region GL_APPLE_ycbcr_422 (275)
        #region GL_APPLE_ycbcr_422 Constants
        #region GL_YCBCR_422_APPLE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_YCBCR_422_APPLE 0x85B9
        public const int GL_YCBCR_422_APPLE = 0x85B9;
        #endregion GL_YCBCR_422_APPLE

        #region GL_UNSIGNED_SHORT_8_8_APPLE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_UNSIGNED_SHORT_8_8_APPLE 0x85BA
        public const int GL_UNSIGNED_SHORT_8_8_APPLE = 0x85BA;
        #endregion GL_UNSIGNED_SHORT_8_8_APPLE

        #region GL_UNSIGNED_SHORT_8_8_REV_APPLE
        /// <summary>
        /// 
        /// </summary>
        // #define GL_UNSIGNED_SHORT_8_8_REV_APPLE 0x85BB
        public const int GL_UNSIGNED_SHORT_8_8_REV_APPLE = 0x85BB;
        #endregion GL_UNSIGNED_SHORT_8_8_REV_APPLE
        #endregion GL_APPLE_ycbcr_422 Constants
        #endregion GL_APPLE_ycbcr_422 (275)
        #endregion APPLE Extensions

        #region ARB Extensions
        #region GL_ARB_multitexture (1)
        #region GL_ARB_multitexture Constants
        #region GL_TEXTURE0_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE0_ARB 0x84C0
        public const int GL_TEXTURE0_ARB = 0x84C0;
        #endregion GL_TEXTURE0_ARB

        #region GL_TEXTURE1_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE1_ARB 0x84C1
        public const int GL_TEXTURE1_ARB = 0x84C1;
        #endregion GL_TEXTURE1_ARB

        #region GL_TEXTURE2_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE2_ARB 0x84C2
        public const int GL_TEXTURE2_ARB = 0x84C2;
        #endregion GL_TEXTURE2_ARB

        #region GL_TEXTURE3_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE3_ARB 0x84C3
        public const int GL_TEXTURE3_ARB = 0x84C3;
        #endregion GL_TEXTURE3_ARB

        #region GL_TEXTURE4_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE4_ARB 0x84C4
        public const int GL_TEXTURE4_ARB = 0x84C4;
        #endregion GL_TEXTURE4_ARB

        #region GL_TEXTURE5_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE5_ARB 0x84C5
        public const int GL_TEXTURE5_ARB = 0x84C5;
        #endregion GL_TEXTURE5_ARB

        #region GL_TEXTURE6_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE6_ARB 0x84C6
        public const int GL_TEXTURE6_ARB = 0x84C6;
        #endregion GL_TEXTURE6_ARB

        #region GL_TEXTURE7_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE7_ARB 0x84C7
        public const int GL_TEXTURE7_ARB = 0x84C7;
        #endregion GL_TEXTURE7_ARB

        #region GL_TEXTURE8_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE8_ARB 0x84C8
        public const int GL_TEXTURE8_ARB = 0x84C8;
        #endregion GL_TEXTURE8_ARB

        #region GL_TEXTURE9_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE9_ARB 0x84C9
        public const int GL_TEXTURE9_ARB = 0x84C9;
        #endregion GL_TEXTURE9_ARB

        #region GL_TEXTURE10_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE10_ARB 0x84CA
        public const int GL_TEXTURE10_ARB = 0x84CA;
        #endregion GL_TEXTURE10_ARB

        #region GL_TEXTURE11_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE11_ARB 0x84CB
        public const int GL_TEXTURE11_ARB = 0x84CB;
        #endregion GL_TEXTURE11_ARB

        #region GL_TEXTURE12_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE12_ARB 0x84CC
        public const int GL_TEXTURE12_ARB = 0x84CC;
        #endregion GL_TEXTURE12_ARB

        #region GL_TEXTURE13_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE13_ARB 0x84CD
        public const int GL_TEXTURE13_ARB = 0x84CD;
        #endregion GL_TEXTURE13_ARB

        #region GL_TEXTURE14_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE14_ARB 0x84CE
        public const int GL_TEXTURE14_ARB = 0x84CE;
        #endregion GL_TEXTURE14_ARB

        #region GL_TEXTURE15_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE15_ARB 0x84CF
        public const int GL_TEXTURE15_ARB = 0x84CF;
        #endregion GL_TEXTURE15_ARB

        #region GL_TEXTURE16_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE16_ARB 0x84D0
        public const int GL_TEXTURE16_ARB = 0x84D0;
        #endregion GL_TEXTURE16_ARB

        #region GL_TEXTURE17_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE17_ARB 0x84D1
        public const int GL_TEXTURE17_ARB = 0x84D1;
        #endregion GL_TEXTURE17_ARB

        #region GL_TEXTURE18_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE18_ARB 0x84D2
        public const int GL_TEXTURE18_ARB = 0x84D2;
        #endregion GL_TEXTURE18_ARB

        #region GL_TEXTURE19_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE19_ARB 0x84D3
        public const int GL_TEXTURE19_ARB = 0x84D3;
        #endregion GL_TEXTURE19_ARB

        #region GL_TEXTURE20_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE20_ARB 0x84D4
        public const int GL_TEXTURE20_ARB = 0x84D4;
        #endregion GL_TEXTURE20_ARB

        #region GL_TEXTURE21_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE21_ARB 0x84D5
        public const int GL_TEXTURE21_ARB = 0x84D5;
        #endregion GL_TEXTURE21_ARB

        #region GL_TEXTURE22_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE22_ARB 0x84D6
        public const int GL_TEXTURE22_ARB = 0x84D6;
        #endregion GL_TEXTURE22_ARB

        #region GL_TEXTURE23_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE23_ARB 0x84D7
        public const int GL_TEXTURE23_ARB = 0x84D7;
        #endregion GL_TEXTURE23_ARB

        #region GL_TEXTURE24_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE24_ARB 0x84D8
        public const int GL_TEXTURE24_ARB = 0x84D8;
        #endregion GL_TEXTURE24_ARB

        #region GL_TEXTURE25_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE25_ARB 0x84D9
        public const int GL_TEXTURE25_ARB = 0x84D9;
        #endregion GL_TEXTURE25_ARB

        #region GL_TEXTURE26_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE26_ARB 0x84DA
        public const int GL_TEXTURE26_ARB = 0x84DA;
        #endregion GL_TEXTURE26_ARB

        #region GL_TEXTURE27_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE27_ARB 0x84DB
        public const int GL_TEXTURE27_ARB = 0x84DB;
        #endregion GL_TEXTURE27_ARB

        #region GL_TEXTURE28_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE28_ARB 0x84DC
        public const int GL_TEXTURE28_ARB = 0x84DC;
        #endregion GL_TEXTURE28_ARB

        #region GL_TEXTURE29_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE29_ARB 0x84DD
        public const int GL_TEXTURE29_ARB = 0x84DD;
        #endregion GL_TEXTURE29_ARB

        #region GL_TEXTURE30_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE30_ARB 0x84DE
        public const int GL_TEXTURE30_ARB = 0x84DE;
        #endregion GL_TEXTURE30_ARB

        #region GL_TEXTURE31_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE31_ARB 0x84DF
        public const int GL_TEXTURE31_ARB = 0x84DF;
        #endregion GL_TEXTURE31_ARB

        #region GL_ACTIVE_TEXTURE_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_ACTIVE_TEXTURE_ARB 0x84E0
        public const int GL_ACTIVE_TEXTURE_ARB = 0x84E0;
        #endregion GL_ACTIVE_TEXTURE_ARB

        #region GL_CLIENT_ACTIVE_TEXTURE_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_CLIENT_ACTIVE_TEXTURE_ARB 0x84E1
        public const int GL_CLIENT_ACTIVE_TEXTURE_ARB = 0x84E1;
        #endregion GL_CLIENT_ACTIVE_TEXTURE_ARB

        #region GL_MAX_TEXTURE_UNITS_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAX_TEXTURE_UNITS_ARB 0x84E2
        public const int GL_MAX_TEXTURE_UNITS_ARB = 0x84E2;
        #endregion GL_MAX_TEXTURE_UNITS_ARB
        #endregion GL_ARB_multitexture Constants

        #region GL_ARB_multitexture Methods
        #region void glActiveTextureARB([In] IntPtr extensionPointer, int texture)
        // GLvoid glActiveTextureARB(GLenum texture)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg texture\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg texture\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32)\r\nret")]
        #endif
        public static void glActiveTextureARB([In] IntPtr extensionPointer, int texture) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glActiveTextureARB([In] IntPtr extensionPointer, int texture)

        #region void glClientActiveTextureARB([In] IntPtr extensionPointer, int texture)
        // GLvoid glClientActiveTextureARB(GLenum texture)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg texture\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg texture\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32)\r\nret")]
        #endif
        public static void glClientActiveTextureARB([In] IntPtr extensionPointer, int texture) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glClientActiveTextureARB([In] IntPtr extensionPointer, int texture)

        #region void glMultiTexCoord1dARB([In] IntPtr extensionPointer, int target, double s)
        // GLvoid glMultiTexCoord1dARB(GLenum target, GLdouble s)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg s\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float64)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg s\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float64)\r\nret")]
        #endif
        public static void glMultiTexCoord1dARB([In] IntPtr extensionPointer, int target, double s) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord1dARB([In] IntPtr extensionPointer, int target, double s)

        #region Overloads for GLvoid glMultiTexCoord1dvARB(GLenum target, const GLdouble* v)
        #region void glMultiTexCoord1dvARB([In] IntPtr extensionPointer, int target, ref double v)
        // GLvoid glMultiTexCoord1dvARB(GLenum target, const GLdouble* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]float64)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]float64)\r\nret")]
        #endif
        public static void glMultiTexCoord1dvARB([In] IntPtr extensionPointer, int target, ref double v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord1dvARB([In] IntPtr extensionPointer, int target, ref double v)

        #region void glMultiTexCoord1dvARB([In] IntPtr extensionPointer, int target, double[] v)
        // GLvoid glMultiTexCoord1dvARB(GLenum target, const GLdouble* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float64[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float64[])\r\nret")]
        #endif
        public static void glMultiTexCoord1dvARB([In] IntPtr extensionPointer, int target, double[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord1dvARB([In] IntPtr extensionPointer, int target, double[] v)

        #region void glMultiTexCoord1dvARB([In] IntPtr extensionPointer, int target, IntPtr v)
        // GLvoid glMultiTexCoord1dvARB(GLenum target, const GLdouble* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glMultiTexCoord1dvARB([In] IntPtr extensionPointer, int target, IntPtr v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord1dvARB([In] IntPtr extensionPointer, int target, IntPtr v)

        #region void glMultiTexCoord1dvARB([In] IntPtr extensionPointer, int target, double* v)
        // GLvoid glMultiTexCoord1dvARB(GLenum target, const GLdouble* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float64*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float64*)\r\nret")]
        #endif
        public static unsafe void glMultiTexCoord1dvARB([In] IntPtr extensionPointer, int target, double* v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord1dvARB([In] IntPtr extensionPointer, int target, double* v)
        #endregion Overloads for GLvoid glMultiTexCoord1dvARB(GLenum target, const GLdouble* v)

        #region void glMultiTexCoord1fARB([In] IntPtr extensionPointer, int target, float s)
        // GLvoid glMultiTexCoord1fARB(GLenum target, GLfloat s)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg s\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg s\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float32)\r\nret")]
        #endif
        public static void glMultiTexCoord1fARB([In] IntPtr extensionPointer, int target, float s) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord1fARB([In] IntPtr extensionPointer, int target, float s)

        #region Overloads for GLvoid glMultiTexCoord1fvARB(GLenum target, const GLfloat* v)
        #region void glMultiTexCoord1fvARB([In] IntPtr extensionPointer, int target, ref float v)
        // GLvoid glMultiTexCoord1fvARB(GLenum target, const GLfloat* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]float32)\r\nret")]
        #endif
        public static void glMultiTexCoord1fvARB([In] IntPtr extensionPointer, int target, ref float v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord1fvARB([In] IntPtr extensionPointer, int target, ref float v)

        #region void glMultiTexCoord1fvARB([In] IntPtr extensionPointer, int target, float[] v)
        // GLvoid glMultiTexCoord1fvARB(GLenum target, const GLfloat* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float32[])\r\nret")]
        #endif
        public static void glMultiTexCoord1fvARB([In] IntPtr extensionPointer, int target, float[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord1fvARB([In] IntPtr extensionPointer, int target, float[] v)

        #region void glMultiTexCoord1fvARB([In] IntPtr extensionPointer, int target, IntPtr v)
        // GLvoid glMultiTexCoord1fvARB(GLenum target, const GLfloat* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glMultiTexCoord1fvARB([In] IntPtr extensionPointer, int target, IntPtr v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord1fvARB([In] IntPtr extensionPointer, int target, IntPtr v)

        #region void glMultiTexCoord1fvARB([In] IntPtr extensionPointer, int target, float* v)
        // GLvoid glMultiTexCoord1fvARB(GLenum target, const GLfloat* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float32*)\r\nret")]
        #endif
        public static unsafe void glMultiTexCoord1fvARB([In] IntPtr extensionPointer, int target, float* v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord1fvARB([In] IntPtr extensionPointer, int target, float* v)
        #endregion Overloads for GLvoid glMultiTexCoord1fvARB(GLenum target, const GLfloat* v)

        #region void glMultiTexCoord1iARB([In] IntPtr extensionPointer, int target, int s)
        // GLvoid glMultiTexCoord1iARB(GLenum target, GLint s)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg s\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg s\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32)\r\nret")]
        #endif
        public static void glMultiTexCoord1iARB([In] IntPtr extensionPointer, int target, int s) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord1iARB([In] IntPtr extensionPointer, int target, int s)

        #region Overloads for GLvoid glMultiTexCoord1ivARB(GLenum target, const GLint* v)
        #region void glMultiTexCoord1ivARB([In] IntPtr extensionPointer, int target, ref int v)
        // GLvoid glMultiTexCoord1ivARB(GLenum target, const GLint* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]int32)\r\nret")]
        #endif
        public static void glMultiTexCoord1ivARB([In] IntPtr extensionPointer, int target, ref int v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord1ivARB([In] IntPtr extensionPointer, int target, ref int v)

        #region void glMultiTexCoord1ivARB([In] IntPtr extensionPointer, int target, int[] v)
        // GLvoid glMultiTexCoord1ivARB(GLenum target, const GLint* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32[])\r\nret")]
        #endif
        public static void glMultiTexCoord1ivARB([In] IntPtr extensionPointer, int target, int[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord1ivARB([In] IntPtr extensionPointer, int target, int[] v)

        #region void glMultiTexCoord1ivARB([In] IntPtr extensionPointer, int target, IntPtr v)
        // GLvoid glMultiTexCoord1ivARB(GLenum target, const GLint* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glMultiTexCoord1ivARB([In] IntPtr extensionPointer, int target, IntPtr v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord1ivARB([In] IntPtr extensionPointer, int target, IntPtr v)

        #region void glMultiTexCoord1ivARB([In] IntPtr extensionPointer, int target, int* v)
        // GLvoid glMultiTexCoord1ivARB(GLenum target, const GLint* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32*)\r\nret")]
        #endif
        public static unsafe void glMultiTexCoord1ivARB([In] IntPtr extensionPointer, int target, int* v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord1ivARB([In] IntPtr extensionPointer, int target, int* v)
        #endregion Overloads for GLvoid glMultiTexCoord1ivARB(GLenum target, const GLint* v)

        #region void glMultiTexCoord1sARB([In] IntPtr extensionPointer, int target, short s)
        // GLvoid glMultiTexCoord1sARB(GLenum target, GLshort s)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg s\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg s\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int16)\r\nret")]
        #endif
        public static void glMultiTexCoord1sARB([In] IntPtr extensionPointer, int target, short s) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord1sARB([In] IntPtr extensionPointer, int target, short s)

        #region Overloads for GLvoid glMultiTexCoord1svARB(GLenum target, const GLshort* v)
        #region void glMultiTexCoord1svARB([In] IntPtr extensionPointer, int target, ref short v)
        // GLvoid glMultiTexCoord1svARB(GLenum target, const GLshort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]int16)\r\nret")]
        #endif
        public static void glMultiTexCoord1svARB([In] IntPtr extensionPointer, int target, ref short v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord1svARB([In] IntPtr extensionPointer, int target, ref short v)

        #region void glMultiTexCoord1svARB([In] IntPtr extensionPointer, int target, short[] v)
        // GLvoid glMultiTexCoord1svARB(GLenum target, const GLshort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int16[])\r\nret")]
        #endif
        public static void glMultiTexCoord1svARB([In] IntPtr extensionPointer, int target, short[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord1svARB([In] IntPtr extensionPointer, int target, short[] v)

        #region void glMultiTexCoord1svARB([In] IntPtr extensionPointer, int target, IntPtr v)
        // GLvoid glMultiTexCoord1svARB(GLenum target, const GLshort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glMultiTexCoord1svARB([In] IntPtr extensionPointer, int target, IntPtr v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord1svARB([In] IntPtr extensionPointer, int target, IntPtr v)

        #region void glMultiTexCoord1svARB([In] IntPtr extensionPointer, int target, short* v)
        // GLvoid glMultiTexCoord1svARB(GLenum target, const GLshort* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int16*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int16*)\r\nret")]
        #endif
        public static unsafe void glMultiTexCoord1svARB([In] IntPtr extensionPointer, int target, short* v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord1svARB([In] IntPtr extensionPointer, int target, short* v)
        #endregion Overloads for GLvoid glMultiTexCoord1svARB(GLenum target, const GLshort* v)

        #region void glMultiTexCoord2dARB([In] IntPtr extensionPointer, int target, double s, double t)
        // GLvoid glMultiTexCoord2dARB(GLenum target, GLdouble s, GLdouble t)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg s\r\nldarg t\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float64,[in]float64)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg s\r\nldarg t\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float64,[in]float64)\r\nret")]
        #endif
        public static void glMultiTexCoord2dARB([In] IntPtr extensionPointer, int target, double s, double t) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord2dARB([In] IntPtr extensionPointer, int target, double s, double t)

        #region Overloads for GLvoid glMultiTexCoord2dvARB(GLenum target, const GLdouble* v)
        #region void glMultiTexCoord2dvARB([In] IntPtr extensionPointer, int target, ref double v)
        // GLvoid glMultiTexCoord2dvARB(GLenum target, const GLdouble* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]float64)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]float64)\r\nret")]
        #endif
        public static void glMultiTexCoord2dvARB([In] IntPtr extensionPointer, int target, ref double v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord2dvARB([In] IntPtr extensionPointer, int target, ref double v)

        #region void glMultiTexCoord2dvARB([In] IntPtr extensionPointer, int target, double[] v)
        // GLvoid glMultiTexCoord2dvARB(GLenum target, const GLdouble* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float64[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float64[])\r\nret")]
        #endif
        public static void glMultiTexCoord2dvARB([In] IntPtr extensionPointer, int target, double[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord2dvARB([In] IntPtr extensionPointer, int target, double[] v)

        #region void glMultiTexCoord2dvARB([In] IntPtr extensionPointer, int target, IntPtr v)
        // GLvoid glMultiTexCoord2dvARB(GLenum target, const GLdouble* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glMultiTexCoord2dvARB([In] IntPtr extensionPointer, int target, IntPtr v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord2dvARB([In] IntPtr extensionPointer, int target, IntPtr v)

        #region void glMultiTexCoord2dvARB([In] IntPtr extensionPointer, int target, double* v)
        // GLvoid glMultiTexCoord2dvARB(GLenum target, const GLdouble* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float64*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float64*)\r\nret")]
        #endif
        public static unsafe void glMultiTexCoord2dvARB([In] IntPtr extensionPointer, int target, double* v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord2dvARB([In] IntPtr extensionPointer, int target, double* v)
        #endregion Overloads for GLvoid glMultiTexCoord2dvARB(GLenum target, const GLdouble* v)

        #region void glMultiTexCoord2fARB([In] IntPtr extensionPointer, int target, float s, float t)
        // GLvoid glMultiTexCoord2fARB(GLenum target, GLfloat s, GLfloat t)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg s\r\nldarg t\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float32,[in]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg s\r\nldarg t\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float32,[in]float32)\r\nret")]
        #endif
        public static void glMultiTexCoord2fARB([In] IntPtr extensionPointer, int target, float s, float t) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord2fARB([In] IntPtr extensionPointer, int target, float s, float t)

        #region Overloads for GLvoid glMultiTexCoord2fvARB(GLenum target, const GLfloat* v)
        #region void glMultiTexCoord2fvARB([In] IntPtr extensionPointer, int target, ref float v)
        // GLvoid glMultiTexCoord2fvARB(GLenum target, const GLfloat* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]float32)\r\nret")]
        #endif
        public static void glMultiTexCoord2fvARB([In] IntPtr extensionPointer, int target, ref float v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord2fvARB([In] IntPtr extensionPointer, int target, ref float v)

        #region void glMultiTexCoord2fvARB([In] IntPtr extensionPointer, int target, float[] v)
        // GLvoid glMultiTexCoord2fvARB(GLenum target, const GLfloat* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float32[])\r\nret")]
        #endif
        public static void glMultiTexCoord2fvARB([In] IntPtr extensionPointer, int target, float[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord2fvARB([In] IntPtr extensionPointer, int target, float[] v)

        #region void glMultiTexCoord2fvARB([In] IntPtr extensionPointer, int target, IntPtr v)
        // GLvoid glMultiTexCoord2fvARB(GLenum target, const GLfloat* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glMultiTexCoord2fvARB([In] IntPtr extensionPointer, int target, IntPtr v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord2fvARB([In] IntPtr extensionPointer, int target, IntPtr v)

        #region void glMultiTexCoord2fvARB([In] IntPtr extensionPointer, int target, float* v)
        // GLvoid glMultiTexCoord2fvARB(GLenum target, const GLfloat* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float32*)\r\nret")]
        #endif
        public static unsafe void glMultiTexCoord2fvARB([In] IntPtr extensionPointer, int target, float* v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord2fvARB([In] IntPtr extensionPointer, int target, float* v)
        #endregion Overloads for GLvoid glMultiTexCoord2fvARB(GLenum target, const GLfloat* v)

        #region void glMultiTexCoord2iARB([In] IntPtr extensionPointer, int target, int s, int t)
        // GLvoid glMultiTexCoord2iARB(GLenum target, GLint s, GLint t)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg s\r\nldarg t\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg s\r\nldarg t\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32)\r\nret")]
        #endif
        public static void glMultiTexCoord2iARB([In] IntPtr extensionPointer, int target, int s, int t) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord2iARB([In] IntPtr extensionPointer, int target, int s, int t)

        #region Overloads for GLvoid glMultiTexCoord2ivARB(GLenum target, const GLint* v)
        #region void glMultiTexCoord2ivARB([In] IntPtr extensionPointer, int target, ref int v)
        // GLvoid glMultiTexCoord2ivARB(GLenum target, const GLint* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]int32)\r\nret")]
        #endif
        public static void glMultiTexCoord2ivARB([In] IntPtr extensionPointer, int target, ref int v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord2ivARB([In] IntPtr extensionPointer, int target, ref int v)

        #region void glMultiTexCoord2ivARB([In] IntPtr extensionPointer, int target, int[] v)
        // GLvoid glMultiTexCoord2ivARB(GLenum target, const GLint* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32[])\r\nret")]
        #endif
        public static void glMultiTexCoord2ivARB([In] IntPtr extensionPointer, int target, int[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord2ivARB([In] IntPtr extensionPointer, int target, int[] v)

        #region void glMultiTexCoord2ivARB([In] IntPtr extensionPointer, int target, IntPtr v)
        // GLvoid glMultiTexCoord2ivARB(GLenum target, const GLint* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glMultiTexCoord2ivARB([In] IntPtr extensionPointer, int target, IntPtr v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord2ivARB([In] IntPtr extensionPointer, int target, IntPtr v)

        #region void glMultiTexCoord2ivARB([In] IntPtr extensionPointer, int target, int* v)
        // GLvoid glMultiTexCoord2ivARB(GLenum target, const GLint* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32*)\r\nret")]
        #endif
        public static unsafe void glMultiTexCoord2ivARB([In] IntPtr extensionPointer, int target, int* v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord2ivARB([In] IntPtr extensionPointer, int target, int* v)
        #endregion Overloads for GLvoid glMultiTexCoord2ivARB(GLenum target, const GLint* v)

        #region void glMultiTexCoord2sARB([In] IntPtr extensionPointer, int target, short s, short t)
        // GLvoid glMultiTexCoord2sARB(GLenum target, GLshort s, GLshort t)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg s\r\nldarg t\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int16,[in]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg s\r\nldarg t\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int16,[in]int16)\r\nret")]
        #endif
        public static void glMultiTexCoord2sARB([In] IntPtr extensionPointer, int target, short s, short t) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord2sARB([In] IntPtr extensionPointer, int target, short s, short t)

        #region Overloads for GLvoid glMultiTexCoord2svARB(GLenum target, const GLshort* v)
        #region void glMultiTexCoord2svARB([In] IntPtr extensionPointer, int target, ref short v)
        // GLvoid glMultiTexCoord2svARB(GLenum target, const GLshort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]int16)\r\nret")]
        #endif
        public static void glMultiTexCoord2svARB([In] IntPtr extensionPointer, int target, ref short v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord2svARB([In] IntPtr extensionPointer, int target, ref short v)

        #region void glMultiTexCoord2svARB([In] IntPtr extensionPointer, int target, short[] v)
        // GLvoid glMultiTexCoord2svARB(GLenum target, const GLshort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int16[])\r\nret")]
        #endif
        public static void glMultiTexCoord2svARB([In] IntPtr extensionPointer, int target, short[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord2svARB([In] IntPtr extensionPointer, int target, short[] v)

        #region void glMultiTexCoord2svARB([In] IntPtr extensionPointer, int target, IntPtr v)
        // GLvoid glMultiTexCoord2svARB(GLenum target, const GLshort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glMultiTexCoord2svARB([In] IntPtr extensionPointer, int target, IntPtr v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord2svARB([In] IntPtr extensionPointer, int target, IntPtr v)

        #region void glMultiTexCoord2svARB([In] IntPtr extensionPointer, int target, short* v)
        // GLvoid glMultiTexCoord2svARB(GLenum target, const GLshort* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int16*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int16*)\r\nret")]
        #endif
        public static unsafe void glMultiTexCoord2svARB([In] IntPtr extensionPointer, int target, short* v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord2svARB([In] IntPtr extensionPointer, int target, short* v)
        #endregion Overloads for GLvoid glMultiTexCoord2svARB(GLenum target, const GLshort* v)

        #region void glMultiTexCoord3dARB([In] IntPtr extensionPointer, int target, double s, double t, double r)
        // GLvoid glMultiTexCoord3dARB(GLenum target, GLdouble s, GLdouble t, GLdouble r)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg s\r\nldarg t\r\nldarg r\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float64,[in]float64,[in]float64)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg s\r\nldarg t\r\nldarg r\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float64,[in]float64,[in]float64)\r\nret")]
        #endif
        public static void glMultiTexCoord3dARB([In] IntPtr extensionPointer, int target, double s, double t, double r) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord3dARB([In] IntPtr extensionPointer, int target, double s, double t, double r)

        #region Overloads for GLvoid glMultiTexCoord3dvARB(GLenum target, const GLdouble* v)
        #region void glMultiTexCoord3dvARB([In] IntPtr extensionPointer, int target, ref double v)
        // GLvoid glMultiTexCoord3dvARB(GLenum target, const GLdouble* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]float64)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]float64)\r\nret")]
        #endif
        public static void glMultiTexCoord3dvARB([In] IntPtr extensionPointer, int target, ref double v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord3dvARB([In] IntPtr extensionPointer, int target, ref double v)

        #region void glMultiTexCoord3dvARB([In] IntPtr extensionPointer, int target, double[] v)
        // GLvoid glMultiTexCoord3dvARB(GLenum target, const GLdouble* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float64[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float64[])\r\nret")]
        #endif
        public static void glMultiTexCoord3dvARB([In] IntPtr extensionPointer, int target, double[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord3dvARB([In] IntPtr extensionPointer, int target, double[] v)

        #region void glMultiTexCoord3dvARB([In] IntPtr extensionPointer, int target, IntPtr v)
        // GLvoid glMultiTexCoord3dvARB(GLenum target, const GLdouble* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glMultiTexCoord3dvARB([In] IntPtr extensionPointer, int target, IntPtr v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord3dvARB([In] IntPtr extensionPointer, int target, IntPtr v)

        #region void glMultiTexCoord3dvARB([In] IntPtr extensionPointer, int target, double* v)
        // GLvoid glMultiTexCoord3dvARB(GLenum target, const GLdouble* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float64*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float64*)\r\nret")]
        #endif
        public static unsafe void glMultiTexCoord3dvARB([In] IntPtr extensionPointer, int target, double* v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord3dvARB([In] IntPtr extensionPointer, int target, double* v)
        #endregion Overloads for GLvoid glMultiTexCoord3dvARB(GLenum target, const GLdouble* v)

        #region void glMultiTexCoord3fARB([In] IntPtr extensionPointer, int target, float s, float t, float r)
        // GLvoid glMultiTexCoord3fARB(GLenum target, GLfloat s, GLfloat t, GLfloat r)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg s\r\nldarg t\r\nldarg r\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float32,[in]float32,[in]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg s\r\nldarg t\r\nldarg r\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float32,[in]float32,[in]float32)\r\nret")]
        #endif
        public static void glMultiTexCoord3fARB([In] IntPtr extensionPointer, int target, float s, float t, float r) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord3fARB([In] IntPtr extensionPointer, int target, float s, float t, float r)

        #region Overloads for GLvoid glMultiTexCoord3fvARB(GLenum target, const GLfloat* v)
        #region void glMultiTexCoord3fvARB([In] IntPtr extensionPointer, int target, ref float v)
        // GLvoid glMultiTexCoord3fvARB(GLenum target, const GLfloat* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]float32)\r\nret")]
        #endif
        public static void glMultiTexCoord3fvARB([In] IntPtr extensionPointer, int target, ref float v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord3fvARB([In] IntPtr extensionPointer, int target, ref float v)

        #region void glMultiTexCoord3fvARB([In] IntPtr extensionPointer, int target, float[] v)
        // GLvoid glMultiTexCoord3fvARB(GLenum target, const GLfloat* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float32[])\r\nret")]
        #endif
        public static void glMultiTexCoord3fvARB([In] IntPtr extensionPointer, int target, float[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord3fvARB([In] IntPtr extensionPointer, int target, float[] v)

        #region void glMultiTexCoord3fvARB([In] IntPtr extensionPointer, int target, IntPtr v)
        // GLvoid glMultiTexCoord3fvARB(GLenum target, const GLfloat* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glMultiTexCoord3fvARB([In] IntPtr extensionPointer, int target, IntPtr v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord3fvARB([In] IntPtr extensionPointer, int target, IntPtr v)

        #region void glMultiTexCoord3fvARB([In] IntPtr extensionPointer, int target, float* v)
        // GLvoid glMultiTexCoord3fvARB(GLenum target, const GLfloat* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float32*)\r\nret")]
        #endif
        public static unsafe void glMultiTexCoord3fvARB([In] IntPtr extensionPointer, int target, float* v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord3fvARB([In] IntPtr extensionPointer, int target, float* v)
        #endregion Overloads for GLvoid glMultiTexCoord3fvARB(GLenum target, const GLfloat* v)

        #region void glMultiTexCoord3iARB([In] IntPtr extensionPointer, int target, int s, int t, int r)
        // GLvoid glMultiTexCoord3iARB(GLenum target, GLint s, GLint t, GLint r)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg s\r\nldarg t\r\nldarg r\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg s\r\nldarg t\r\nldarg r\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32)\r\nret")]
        #endif
        public static void glMultiTexCoord3iARB([In] IntPtr extensionPointer, int target, int s, int t, int r) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord3iARB([In] IntPtr extensionPointer, int target, int s, int t, int r)

        #region Overloads for GLvoid glMultiTexCoord3ivARB(GLenum target, const GLint* v)
        #region void glMultiTexCoord3ivARB([In] IntPtr extensionPointer, int target, ref int v)
        // GLvoid glMultiTexCoord3ivARB(GLenum target, const GLint* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]int32)\r\nret")]
        #endif
        public static void glMultiTexCoord3ivARB([In] IntPtr extensionPointer, int target, ref int v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord3ivARB([In] IntPtr extensionPointer, int target, ref int v)

        #region void glMultiTexCoord3ivARB([In] IntPtr extensionPointer, int target, int[] v)
        // GLvoid glMultiTexCoord3ivARB(GLenum target, const GLint* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32[])\r\nret")]
        #endif
        public static void glMultiTexCoord3ivARB([In] IntPtr extensionPointer, int target, int[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord3ivARB([In] IntPtr extensionPointer, int target, int[] v)

        #region void glMultiTexCoord3ivARB([In] IntPtr extensionPointer, int target, IntPtr v)
        // GLvoid glMultiTexCoord3ivARB(GLenum target, const GLint* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glMultiTexCoord3ivARB([In] IntPtr extensionPointer, int target, IntPtr v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord3ivARB([In] IntPtr extensionPointer, int target, IntPtr v)

        #region void glMultiTexCoord3ivARB([In] IntPtr extensionPointer, int target, int* v)
        // GLvoid glMultiTexCoord3ivARB(GLenum target, const GLint* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32*)\r\nret")]
        #endif
        public static unsafe void glMultiTexCoord3ivARB([In] IntPtr extensionPointer, int target, int* v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord3ivARB([In] IntPtr extensionPointer, int target, int* v)
        #endregion Overloads for GLvoid glMultiTexCoord3ivARB(GLenum target, const GLint* v)

        #region void glMultiTexCoord3sARB([In] IntPtr extensionPointer, int target, short s, short t, short r)
        // GLvoid glMultiTexCoord3sARB(GLenum target, GLshort s, GLshort t, GLshort r)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg s\r\nldarg t\r\nldarg r\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int16,[in]int16,[in]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg s\r\nldarg t\r\nldarg r\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int16,[in]int16,[in]int16)\r\nret")]
        #endif
        public static void glMultiTexCoord3sARB([In] IntPtr extensionPointer, int target, short s, short t, short r) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord3sARB([In] IntPtr extensionPointer, int target, short s, short t, short r)

        #region Overloads for GLvoid glMultiTexCoord3svARB(GLenum target, const GLshort* v)
        #region void glMultiTexCoord3svARB([In] IntPtr extensionPointer, int target, ref short v)
        // GLvoid glMultiTexCoord3svARB(GLenum target, const GLshort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]int16)\r\nret")]
        #endif
        public static void glMultiTexCoord3svARB([In] IntPtr extensionPointer, int target, ref short v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord3svARB([In] IntPtr extensionPointer, int target, ref short v)

        #region void glMultiTexCoord3svARB([In] IntPtr extensionPointer, int target, short[] v)
        // GLvoid glMultiTexCoord3svARB(GLenum target, const GLshort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int16[])\r\nret")]
        #endif
        public static void glMultiTexCoord3svARB([In] IntPtr extensionPointer, int target, short[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord3svARB([In] IntPtr extensionPointer, int target, short[] v)

        #region void glMultiTexCoord3svARB([In] IntPtr extensionPointer, int target, IntPtr v)
        // GLvoid glMultiTexCoord3svARB(GLenum target, const GLshort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glMultiTexCoord3svARB([In] IntPtr extensionPointer, int target, IntPtr v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord3svARB([In] IntPtr extensionPointer, int target, IntPtr v)

        #region void glMultiTexCoord3svARB([In] IntPtr extensionPointer, int target, short* v)
        // GLvoid glMultiTexCoord3svARB(GLenum target, const GLshort* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int16*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int16*)\r\nret")]
        #endif
        public static unsafe void glMultiTexCoord3svARB([In] IntPtr extensionPointer, int target, short* v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord3svARB([In] IntPtr extensionPointer, int target, short* v)
        #endregion Overloads for GLvoid glMultiTexCoord3svARB(GLenum target, const GLshort* v)

        #region void glMultiTexCoord4dARB([In] IntPtr extensionPointer, int target, double s, double t, double r, double q)
        // GLvoid glMultiTexCoord4dARB(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg target\r\nldarg s\r\nldarg t\r\nldarg r\r\nldarg q\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float64,[in]float64,[in]float64,[in]float64)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg target\r\nldarg s\r\nldarg t\r\nldarg r\r\nldarg q\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float64,[in]float64,[in]float64,[in]float64)\r\nret")]
        #endif
        public static void glMultiTexCoord4dARB([In] IntPtr extensionPointer, int target, double s, double t, double r, double q) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord4dARB([In] IntPtr extensionPointer, int target, double s, double t, double r, double q)

        #region Overloads for GLvoid glMultiTexCoord4dvARB(GLenum target, const GLdouble* v)
        #region void glMultiTexCoord4dvARB([In] IntPtr extensionPointer, int target, ref double v)
        // GLvoid glMultiTexCoord4dvARB(GLenum target, const GLdouble* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]float64)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]float64)\r\nret")]
        #endif
        public static void glMultiTexCoord4dvARB([In] IntPtr extensionPointer, int target, ref double v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord4dvARB([In] IntPtr extensionPointer, int target, ref double v)

        #region void glMultiTexCoord4dvARB([In] IntPtr extensionPointer, int target, double[] v)
        // GLvoid glMultiTexCoord4dvARB(GLenum target, const GLdouble* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float64[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float64[])\r\nret")]
        #endif
        public static void glMultiTexCoord4dvARB([In] IntPtr extensionPointer, int target, double[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord4dvARB([In] IntPtr extensionPointer, int target, double[] v)

        #region void glMultiTexCoord4dvARB([In] IntPtr extensionPointer, int target, IntPtr v)
        // GLvoid glMultiTexCoord4dvARB(GLenum target, const GLdouble* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glMultiTexCoord4dvARB([In] IntPtr extensionPointer, int target, IntPtr v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord4dvARB([In] IntPtr extensionPointer, int target, IntPtr v)

        #region void glMultiTexCoord4dvARB([In] IntPtr extensionPointer, int target, double* v)
        // GLvoid glMultiTexCoord4dvARB(GLenum target, const GLdouble* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float64*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float64*)\r\nret")]
        #endif
        public static unsafe void glMultiTexCoord4dvARB([In] IntPtr extensionPointer, int target, double* v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord4dvARB([In] IntPtr extensionPointer, int target, double* v)
        #endregion Overloads for GLvoid glMultiTexCoord4dvARB(GLenum target, const GLdouble* v)

        #region void glMultiTexCoord4fARB([In] IntPtr extensionPointer, int target, float s, float t, float r, float q)
        // GLvoid glMultiTexCoord4fARB(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg target\r\nldarg s\r\nldarg t\r\nldarg r\r\nldarg q\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float32,[in]float32,[in]float32,[in]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg target\r\nldarg s\r\nldarg t\r\nldarg r\r\nldarg q\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float32,[in]float32,[in]float32,[in]float32)\r\nret")]
        #endif
        public static void glMultiTexCoord4fARB([In] IntPtr extensionPointer, int target, float s, float t, float r, float q) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord4fARB([In] IntPtr extensionPointer, int target, float s, float t, float r, float q)

        #region Overloads for GLvoid glMultiTexCoord4fvARB(GLenum target, const GLfloat* v)
        #region void glMultiTexCoord4fvARB([In] IntPtr extensionPointer, int target, ref float v)
        // GLvoid glMultiTexCoord4fvARB(GLenum target, const GLfloat* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]float32)\r\nret")]
        #endif
        public static void glMultiTexCoord4fvARB([In] IntPtr extensionPointer, int target, ref float v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord4fvARB([In] IntPtr extensionPointer, int target, ref float v)

        #region void glMultiTexCoord4fvARB([In] IntPtr extensionPointer, int target, float[] v)
        // GLvoid glMultiTexCoord4fvARB(GLenum target, const GLfloat* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float32[])\r\nret")]
        #endif
        public static void glMultiTexCoord4fvARB([In] IntPtr extensionPointer, int target, float[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord4fvARB([In] IntPtr extensionPointer, int target, float[] v)

        #region void glMultiTexCoord4fvARB([In] IntPtr extensionPointer, int target, IntPtr v)
        // GLvoid glMultiTexCoord4fvARB(GLenum target, const GLfloat* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glMultiTexCoord4fvARB([In] IntPtr extensionPointer, int target, IntPtr v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord4fvARB([In] IntPtr extensionPointer, int target, IntPtr v)

        #region void glMultiTexCoord4fvARB([In] IntPtr extensionPointer, int target, float* v)
        // GLvoid glMultiTexCoord4fvARB(GLenum target, const GLfloat* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float32*)\r\nret")]
        #endif
        public static unsafe void glMultiTexCoord4fvARB([In] IntPtr extensionPointer, int target, float* v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord4fvARB([In] IntPtr extensionPointer, int target, float* v)
        #endregion Overloads for GLvoid glMultiTexCoord4fvARB(GLenum target, const GLfloat* v)

        #region void glMultiTexCoord4iARB([In] IntPtr extensionPointer, int target, int s, int t, int r, int q)
        // GLvoid glMultiTexCoord4iARB(GLenum target, GLint s, GLint t, GLint r, GLint q)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg target\r\nldarg s\r\nldarg t\r\nldarg r\r\nldarg q\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg target\r\nldarg s\r\nldarg t\r\nldarg r\r\nldarg q\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32)\r\nret")]
        #endif
        public static void glMultiTexCoord4iARB([In] IntPtr extensionPointer, int target, int s, int t, int r, int q) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord4iARB([In] IntPtr extensionPointer, int target, int s, int t, int r, int q)

        #region Overloads for GLvoid glMultiTexCoord4ivARB(GLenum target, const GLint* v)
        #region void glMultiTexCoord4ivARB([In] IntPtr extensionPointer, int target, ref int v)
        // GLvoid glMultiTexCoord4ivARB(GLenum target, const GLint* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]int32)\r\nret")]
        #endif
        public static void glMultiTexCoord4ivARB([In] IntPtr extensionPointer, int target, ref int v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord4ivARB([In] IntPtr extensionPointer, int target, ref int v)

        #region void glMultiTexCoord4ivARB([In] IntPtr extensionPointer, int target, int[] v)
        // GLvoid glMultiTexCoord4ivARB(GLenum target, const GLint* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32[])\r\nret")]
        #endif
        public static void glMultiTexCoord4ivARB([In] IntPtr extensionPointer, int target, int[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord4ivARB([In] IntPtr extensionPointer, int target, int[] v)

        #region void glMultiTexCoord4ivARB([In] IntPtr extensionPointer, int target, IntPtr v)
        // GLvoid glMultiTexCoord4ivARB(GLenum target, const GLint* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glMultiTexCoord4ivARB([In] IntPtr extensionPointer, int target, IntPtr v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord4ivARB([In] IntPtr extensionPointer, int target, IntPtr v)

        #region void glMultiTexCoord4ivARB([In] IntPtr extensionPointer, int target, int* v)
        // GLvoid glMultiTexCoord4ivARB(GLenum target, const GLint* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32*)\r\nret")]
        #endif
        public static unsafe void glMultiTexCoord4ivARB([In] IntPtr extensionPointer, int target, int* v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord4ivARB([In] IntPtr extensionPointer, int target, int* v)
        #endregion Overloads for GLvoid glMultiTexCoord4ivARB(GLenum target, const GLint* v)

        #region void glMultiTexCoord4sARB([In] IntPtr extensionPointer, int target, short s, short t, short r, short q)
        // GLvoid glMultiTexCoord4sARB(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg target\r\nldarg s\r\nldarg t\r\nldarg r\r\nldarg q\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int16,[in]int16,[in]int16,[in]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg target\r\nldarg s\r\nldarg t\r\nldarg r\r\nldarg q\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int16,[in]int16,[in]int16,[in]int16)\r\nret")]
        #endif
        public static void glMultiTexCoord4sARB([In] IntPtr extensionPointer, int target, short s, short t, short r, short q) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord4sARB([In] IntPtr extensionPointer, int target, short s, short t, short r, short q)

        #region Overloads for GLvoid glMultiTexCoord4svARB(GLenum target, const GLshort* v)
        #region void glMultiTexCoord4svARB([In] IntPtr extensionPointer, int target, ref short v)
        // GLvoid glMultiTexCoord4svARB(GLenum target, const GLshort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]int16)\r\nret")]
        #endif
        public static void glMultiTexCoord4svARB([In] IntPtr extensionPointer, int target, ref short v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord4svARB([In] IntPtr extensionPointer, int target, ref short v)

        #region void glMultiTexCoord4svARB([In] IntPtr extensionPointer, int target, short[] v)
        // GLvoid glMultiTexCoord4svARB(GLenum target, const GLshort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int16[])\r\nret")]
        #endif
        public static void glMultiTexCoord4svARB([In] IntPtr extensionPointer, int target, short[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord4svARB([In] IntPtr extensionPointer, int target, short[] v)

        #region void glMultiTexCoord4svARB([In] IntPtr extensionPointer, int target, IntPtr v)
        // GLvoid glMultiTexCoord4svARB(GLenum target, const GLshort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glMultiTexCoord4svARB([In] IntPtr extensionPointer, int target, IntPtr v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord4svARB([In] IntPtr extensionPointer, int target, IntPtr v)

        #region void glMultiTexCoord4svARB([In] IntPtr extensionPointer, int target, short* v)
        // GLvoid glMultiTexCoord4svARB(GLenum target, const GLshort* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int16*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int16*)\r\nret")]
        #endif
        public static unsafe void glMultiTexCoord4svARB([In] IntPtr extensionPointer, int target, short* v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord4svARB([In] IntPtr extensionPointer, int target, short* v)
        #endregion Overloads for GLvoid glMultiTexCoord4svARB(GLenum target, const GLshort* v)
        #endregion GL_ARB_multitexture Methods
        #endregion GL_ARB_multitexture (1)

        #region GL_ARB_transpose_matrix (3)
        #region GL_ARB_transpose_matrix Constants
        #region GL_TRANSPOSE_MODELVIEW_MATRIX_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TRANSPOSE_MODELVIEW_MATRIX_ARB 0x84E3
        public const int GL_TRANSPOSE_MODELVIEW_MATRIX_ARB = 0x84E3;
        #endregion GL_TRANSPOSE_MODELVIEW_MATRIX_ARB

        #region GL_TRANSPOSE_PROJECTION_MATRIX_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TRANSPOSE_PROJECTION_MATRIX_ARB 0x84E4
        public const int GL_TRANSPOSE_PROJECTION_MATRIX_ARB = 0x84E4;
        #endregion GL_TRANSPOSE_PROJECTION_MATRIX_ARB

        #region GL_TRANSPOSE_TEXTURE_MATRIX_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TRANSPOSE_TEXTURE_MATRIX_ARB 0x84E5
        public const int GL_TRANSPOSE_TEXTURE_MATRIX_ARB = 0x84E5;
        #endregion GL_TRANSPOSE_TEXTURE_MATRIX_ARB

        #region GL_TRANSPOSE_COLOR_MATRIX_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TRANSPOSE_COLOR_MATRIX_ARB 0x84E6
        public const int GL_TRANSPOSE_COLOR_MATRIX_ARB = 0x84E6;
        #endregion GL_TRANSPOSE_COLOR_MATRIX_ARB
        #endregion GL_ARB_transpose_matrix Constants

        #region GL_ARB_transpose_matrix Methods
        #region Overloads for GLvoid glLoadTransposeMatrixfARB(GLfloat* m)
        #region void glLoadTransposeMatrixfARB([In] IntPtr extensionPointer, ref float m)
        // GLvoid glLoadTransposeMatrixfARB(GLfloat* m)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg m\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg m\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]float32)\r\nret")]
        #endif
        public static void glLoadTransposeMatrixfARB([In] IntPtr extensionPointer, ref float m) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glLoadTransposeMatrixfARB([In] IntPtr extensionPointer, ref float m)

        #region void glLoadTransposeMatrixfARB([In] IntPtr extensionPointer, float[] m)
        // GLvoid glLoadTransposeMatrixfARB(GLfloat* m)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg m\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg m\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]float32[])\r\nret")]
        #endif
        public static void glLoadTransposeMatrixfARB([In] IntPtr extensionPointer, float[] m) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glLoadTransposeMatrixfARB([In] IntPtr extensionPointer, float[] m)

        #region void glLoadTransposeMatrixfARB([In] IntPtr extensionPointer, IntPtr m)
        // GLvoid glLoadTransposeMatrixfARB(GLfloat* m)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg m\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg m\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int)\r\nret")]
        #endif
        public static void glLoadTransposeMatrixfARB([In] IntPtr extensionPointer, IntPtr m) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glLoadTransposeMatrixfARB([In] IntPtr extensionPointer, IntPtr m)

        #region void glLoadTransposeMatrixfARB([In] IntPtr extensionPointer, float* m)
        // GLvoid glLoadTransposeMatrixfARB(GLfloat* m)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg m\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg m\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]float32*)\r\nret")]
        #endif
        public static unsafe void glLoadTransposeMatrixfARB([In] IntPtr extensionPointer, float* m) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glLoadTransposeMatrixfARB([In] IntPtr extensionPointer, float* m)
        #endregion Overloads for GLvoid glLoadTransposeMatrixfARB(GLfloat* m)

        #region Overloads for GLvoid glLoadTransposeMatrixdARB(GLdouble* m)
        #region void glLoadTransposeMatrixdARB([In] IntPtr extensionPointer, ref double m)
        // GLvoid glLoadTransposeMatrixdARB(GLdouble* m)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg m\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]float64)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg m\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]float64)\r\nret")]
        #endif
        public static void glLoadTransposeMatrixdARB([In] IntPtr extensionPointer, ref double m) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glLoadTransposeMatrixdARB([In] IntPtr extensionPointer, ref double m)

        #region void glLoadTransposeMatrixdARB([In] IntPtr extensionPointer, double[] m)
        // GLvoid glLoadTransposeMatrixdARB(GLdouble* m)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg m\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]float64[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg m\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]float64[])\r\nret")]
        #endif
        public static void glLoadTransposeMatrixdARB([In] IntPtr extensionPointer, double[] m) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glLoadTransposeMatrixdARB([In] IntPtr extensionPointer, double[] m)

        #region void glLoadTransposeMatrixdARB([In] IntPtr extensionPointer, IntPtr m)
        // GLvoid glLoadTransposeMatrixdARB(GLdouble* m)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg m\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg m\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int)\r\nret")]
        #endif
        public static void glLoadTransposeMatrixdARB([In] IntPtr extensionPointer, IntPtr m) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glLoadTransposeMatrixdARB([In] IntPtr extensionPointer, IntPtr m)

        #region void glLoadTransposeMatrixdARB([In] IntPtr extensionPointer, double* m)
        // GLvoid glLoadTransposeMatrixdARB(GLdouble* m)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg m\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]float64*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg m\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]float64*)\r\nret")]
        #endif
        public static unsafe void glLoadTransposeMatrixdARB([In] IntPtr extensionPointer, double* m) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glLoadTransposeMatrixdARB([In] IntPtr extensionPointer, double* m)
        #endregion Overloads for GLvoid glLoadTransposeMatrixdARB(GLdouble* m)

        #region Overloads for GLvoid glMultTransposeMatrixfARB(GLfloat* m)
        #region void glMultTransposeMatrixfARB([In] IntPtr extensionPointer, ref float m)
        // GLvoid glMultTransposeMatrixfARB(GLfloat* m)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg m\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg m\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]float32)\r\nret")]
        #endif
        public static void glMultTransposeMatrixfARB([In] IntPtr extensionPointer, ref float m) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultTransposeMatrixfARB([In] IntPtr extensionPointer, ref float m)

        #region void glMultTransposeMatrixfARB([In] IntPtr extensionPointer, float[] m)
        // GLvoid glMultTransposeMatrixfARB(GLfloat* m)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg m\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg m\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]float32[])\r\nret")]
        #endif
        public static void glMultTransposeMatrixfARB([In] IntPtr extensionPointer, float[] m) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultTransposeMatrixfARB([In] IntPtr extensionPointer, float[] m)

        #region void glMultTransposeMatrixfARB([In] IntPtr extensionPointer, IntPtr m)
        // GLvoid glMultTransposeMatrixfARB(GLfloat* m)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg m\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg m\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int)\r\nret")]
        #endif
        public static void glMultTransposeMatrixfARB([In] IntPtr extensionPointer, IntPtr m) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultTransposeMatrixfARB([In] IntPtr extensionPointer, IntPtr m)

        #region void glMultTransposeMatrixfARB([In] IntPtr extensionPointer, float* m)
        // GLvoid glMultTransposeMatrixfARB(GLfloat* m)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg m\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg m\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]float32*)\r\nret")]
        #endif
        public static unsafe void glMultTransposeMatrixfARB([In] IntPtr extensionPointer, float* m) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultTransposeMatrixfARB([In] IntPtr extensionPointer, float* m)
        #endregion Overloads for GLvoid glMultTransposeMatrixfARB(GLfloat* m)

        #region Overloads for GLvoid glMultTransposeMatrixdARB(GLdouble* m)
        #region void glMultTransposeMatrixdARB([In] IntPtr extensionPointer, ref double m)
        // GLvoid glMultTransposeMatrixdARB(GLdouble* m)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg m\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]float64)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg m\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]float64)\r\nret")]
        #endif
        public static void glMultTransposeMatrixdARB([In] IntPtr extensionPointer, ref double m) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultTransposeMatrixdARB([In] IntPtr extensionPointer, ref double m)

        #region void glMultTransposeMatrixdARB([In] IntPtr extensionPointer, double[] m)
        // GLvoid glMultTransposeMatrixdARB(GLdouble* m)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg m\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]float64[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg m\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]float64[])\r\nret")]
        #endif
        public static void glMultTransposeMatrixdARB([In] IntPtr extensionPointer, double[] m) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultTransposeMatrixdARB([In] IntPtr extensionPointer, double[] m)

        #region void glMultTransposeMatrixdARB([In] IntPtr extensionPointer, IntPtr m)
        // GLvoid glMultTransposeMatrixdARB(GLdouble* m)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg m\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg m\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int)\r\nret")]
        #endif
        public static void glMultTransposeMatrixdARB([In] IntPtr extensionPointer, IntPtr m) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultTransposeMatrixdARB([In] IntPtr extensionPointer, IntPtr m)

        #region void glMultTransposeMatrixdARB([In] IntPtr extensionPointer, double* m)
        // GLvoid glMultTransposeMatrixdARB(GLdouble* m)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg m\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]float64*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg m\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]float64*)\r\nret")]
        #endif
        public static unsafe void glMultTransposeMatrixdARB([In] IntPtr extensionPointer, double* m) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultTransposeMatrixdARB([In] IntPtr extensionPointer, double* m)
        #endregion Overloads for GLvoid glMultTransposeMatrixdARB(GLdouble* m)
        #endregion GL_ARB_transpose_matrix Methods
        #endregion GL_ARB_transpose_matrix (3)

        #region GL_ARB_multisample (5)
        #region GL_ARB_multisample Constants
        #region GL_MULTISAMPLE_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MULTISAMPLE_ARB 0x809D
        public const int GL_MULTISAMPLE_ARB = 0x809D;
        #endregion GL_MULTISAMPLE_ARB

        #region GL_SAMPLE_ALPHA_TO_COVERAGE_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SAMPLE_ALPHA_TO_COVERAGE_ARB 0x809E
        public const int GL_SAMPLE_ALPHA_TO_COVERAGE_ARB = 0x809E;
        #endregion GL_SAMPLE_ALPHA_TO_COVERAGE_ARB

        #region GL_SAMPLE_ALPHA_TO_ONE_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SAMPLE_ALPHA_TO_ONE_ARB 0x809F
        public const int GL_SAMPLE_ALPHA_TO_ONE_ARB = 0x809F;
        #endregion GL_SAMPLE_ALPHA_TO_ONE_ARB

        #region GL_SAMPLE_COVERAGE_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SAMPLE_COVERAGE_ARB 0x80A0
        public const int GL_SAMPLE_COVERAGE_ARB = 0x80A0;
        #endregion GL_SAMPLE_COVERAGE_ARB

        #region GL_MULTISAMPLE_BIT_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MULTISAMPLE_BIT_ARB 0x20000000
        public const int GL_MULTISAMPLE_BIT_ARB = 0x20000000;
        #endregion GL_MULTISAMPLE_BIT_ARB

        #region GL_SAMPLE_BUFFERS_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SAMPLE_BUFFERS_ARB 0x80A8
        public const int GL_SAMPLE_BUFFERS_ARB = 0x80A8;
        #endregion GL_SAMPLE_BUFFERS_ARB

        #region GL_SAMPLES_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SAMPLES_ARB 0x80A9
        public const int GL_SAMPLES_ARB = 0x80A9;
        #endregion GL_SAMPLES_ARB

        #region GL_SAMPLE_COVERAGE_VALUE_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SAMPLE_COVERAGE_VALUE_ARB 0x80AA
        public const int GL_SAMPLE_COVERAGE_VALUE_ARB = 0x80AA;
        #endregion GL_SAMPLE_COVERAGE_VALUE_ARB

        #region GL_SAMPLE_COVERAGE_INVERT_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SAMPLE_COVERAGE_INVERT_ARB 0x80AB
        public const int GL_SAMPLE_COVERAGE_INVERT_ARB = 0x80AB;
        #endregion GL_SAMPLE_COVERAGE_INVERT_ARB
        #endregion GL_ARB_multisample Constants

        #region GL_ARB_multisample Methods
        #region void glSampleCoverageARB([In] IntPtr extensionPointer, float parameterValue, int invert)
        // GLvoid glSampleCoverageARB(GLclampf parameterValue, GLboolean invert)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg parameterValue\r\nldarg invert\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]float32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg parameterValue\r\nldarg invert\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]float32,[in]int32)\r\nret")]
        #endif
        public static void glSampleCoverageARB([In] IntPtr extensionPointer, float parameterValue, int invert) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSampleCoverageARB([In] IntPtr extensionPointer, float parameterValue, int invert)
        #endregion GL_ARB_multisample Methods
        #endregion GL_ARB_multisample (5)

        #region GL_ARB_texture_env_add (6)
        #endregion GL_ARB_texture_env_add (6)

        #region GL_ARB_texture_cube_map (7)
        #region GL_ARB_texture_cube_map Constants
        #region GL_NORMAL_MAP_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_NORMAL_MAP_ARB 0x8511
        public const int GL_NORMAL_MAP_ARB = 0x8511;
        #endregion GL_NORMAL_MAP_ARB

        #region GL_REFLECTION_MAP_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_REFLECTION_MAP_ARB 0x8512
        public const int GL_REFLECTION_MAP_ARB = 0x8512;
        #endregion GL_REFLECTION_MAP_ARB

        #region GL_TEXTURE_CUBE_MAP_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_CUBE_MAP_ARB 0x8513
        public const int GL_TEXTURE_CUBE_MAP_ARB = 0x8513;
        #endregion GL_TEXTURE_CUBE_MAP_ARB

        #region GL_TEXTURE_BINDING_CUBE_MAP_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_BINDING_CUBE_MAP_ARB 0x8514
        public const int GL_TEXTURE_BINDING_CUBE_MAP_ARB = 0x8514;
        #endregion GL_TEXTURE_BINDING_CUBE_MAP_ARB

        #region GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB 0x8515
        public const int GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB = 0x8515;
        #endregion GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB

        #region GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB 0x8516
        public const int GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB = 0x8516;
        #endregion GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB

        #region GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB 0x8517
        public const int GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB = 0x8517;
        #endregion GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB

        #region GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB 0x8518
        public const int GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB = 0x8518;
        #endregion GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB

        #region GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB 0x8519
        public const int GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB = 0x8519;
        #endregion GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB

        #region GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB 0x851A
        public const int GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB = 0x851A;
        #endregion GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB

        #region GL_PROXY_TEXTURE_CUBE_MAP_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PROXY_TEXTURE_CUBE_MAP_ARB 0x851B
        public const int GL_PROXY_TEXTURE_CUBE_MAP_ARB = 0x851B;
        #endregion GL_PROXY_TEXTURE_CUBE_MAP_ARB

        #region GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB 0x851C
        public const int GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB = 0x851C;
        #endregion GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB
        #endregion GL_ARB_texture_cube_map Constants
        #endregion GL_ARB_texture_cube_map (7)

        #region GL_ARB_texture_compression (12)
        #region GL_ARB_texture_compression Constants
        #region GL_COMPRESSED_ALPHA_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COMPRESSED_ALPHA_ARB 0x84E9
        public const int GL_COMPRESSED_ALPHA_ARB = 0x84E9;
        #endregion GL_COMPRESSED_ALPHA_ARB

        #region GL_COMPRESSED_LUMINANCE_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COMPRESSED_LUMINANCE_ARB 0x84EA
        public const int GL_COMPRESSED_LUMINANCE_ARB = 0x84EA;
        #endregion GL_COMPRESSED_LUMINANCE_ARB

        #region GL_COMPRESSED_LUMINANCE_ALPHA_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COMPRESSED_LUMINANCE_ALPHA_ARB 0x84EB
        public const int GL_COMPRESSED_LUMINANCE_ALPHA_ARB = 0x84EB;
        #endregion GL_COMPRESSED_LUMINANCE_ALPHA_ARB

        #region GL_COMPRESSED_INTENSITY_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COMPRESSED_INTENSITY_ARB 0x84EC
        public const int GL_COMPRESSED_INTENSITY_ARB = 0x84EC;
        #endregion GL_COMPRESSED_INTENSITY_ARB

        #region GL_COMPRESSED_RGB_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COMPRESSED_RGB_ARB 0x84ED
        public const int GL_COMPRESSED_RGB_ARB = 0x84ED;
        #endregion GL_COMPRESSED_RGB_ARB

        #region GL_COMPRESSED_RGBA_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COMPRESSED_RGBA_ARB 0x84EE
        public const int GL_COMPRESSED_RGBA_ARB = 0x84EE;
        #endregion GL_COMPRESSED_RGBA_ARB

        #region GL_TEXTURE_COMPRESSION_HINT_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_COMPRESSION_HINT_ARB 0x84EF
        public const int GL_TEXTURE_COMPRESSION_HINT_ARB = 0x84EF;
        #endregion GL_TEXTURE_COMPRESSION_HINT_ARB

        #region GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB 0x86A0
        public const int GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB = 0x86A0;
        #endregion GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB

        #region GL_TEXTURE_COMPRESSED_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_COMPRESSED_ARB 0x86A1
        public const int GL_TEXTURE_COMPRESSED_ARB = 0x86A1;
        #endregion GL_TEXTURE_COMPRESSED_ARB

        #region GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB 0x86A2
        public const int GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB = 0x86A2;
        #endregion GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB

        #region GL_COMPRESSED_TEXTURE_FORMATS_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COMPRESSED_TEXTURE_FORMATS_ARB 0x86A3
        public const int GL_COMPRESSED_TEXTURE_FORMATS_ARB = 0x86A3;
        #endregion GL_COMPRESSED_TEXTURE_FORMATS_ARB
        #endregion GL_ARB_texture_compression Constants

        #region GL_ARB_texture_compression Methods
        #region Overloads for GLvoid glCompressedTexImage3DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid* data)
        #region void glCompressedTexImage3DARB([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, short[] data)
        // GLvoid glCompressedTexImage3DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid* data)
        #if WIN32
        [IlasmAttribute(".maxstack 10\r\nldarg target\r\nldarg level\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg depth\r\nldarg border\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 10\r\nldarg target\r\nldarg level\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg depth\r\nldarg border\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int16[])\r\nret")]
        #endif
        public static void glCompressedTexImage3DARB([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, short[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glCompressedTexImage3DARB([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, short[] data)

        #region void glCompressedTexImage3DARB([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, float[] data)
        // GLvoid glCompressedTexImage3DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid* data)
        #if WIN32
        [IlasmAttribute(".maxstack 10\r\nldarg target\r\nldarg level\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg depth\r\nldarg border\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 10\r\nldarg target\r\nldarg level\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg depth\r\nldarg border\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]float32[])\r\nret")]
        #endif
        public static void glCompressedTexImage3DARB([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, float[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glCompressedTexImage3DARB([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, float[] data)

        #region void glCompressedTexImage3DARB([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, int[] data)
        // GLvoid glCompressedTexImage3DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid* data)
        #if WIN32
        [IlasmAttribute(".maxstack 10\r\nldarg target\r\nldarg level\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg depth\r\nldarg border\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 10\r\nldarg target\r\nldarg level\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg depth\r\nldarg border\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32[])\r\nret")]
        #endif
        public static void glCompressedTexImage3DARB([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, int[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glCompressedTexImage3DARB([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, int[] data)

        #region void glCompressedTexImage3DARB([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, IntPtr data)
        // GLvoid glCompressedTexImage3DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid* data)
        #if WIN32
        [IlasmAttribute(".maxstack 10\r\nldarg target\r\nldarg level\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg depth\r\nldarg border\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 10\r\nldarg target\r\nldarg level\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg depth\r\nldarg border\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]native int)\r\nret")]
        #endif
        public static void glCompressedTexImage3DARB([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, IntPtr data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glCompressedTexImage3DARB([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, IntPtr data)

        #region void glCompressedTexImage3DARB([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, byte[] data)
        // GLvoid glCompressedTexImage3DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid* data)
        #if WIN32
        [IlasmAttribute(".maxstack 10\r\nldarg target\r\nldarg level\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg depth\r\nldarg border\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int8[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 10\r\nldarg target\r\nldarg level\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg depth\r\nldarg border\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int8[])\r\nret")]
        #endif
        public static void glCompressedTexImage3DARB([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, byte[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glCompressedTexImage3DARB([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, byte[] data)

        #region void glCompressedTexImage3DARB([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, double[] data)
        // GLvoid glCompressedTexImage3DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid* data)
        #if WIN32
        [IlasmAttribute(".maxstack 10\r\nldarg target\r\nldarg level\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg depth\r\nldarg border\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]float64[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 10\r\nldarg target\r\nldarg level\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg depth\r\nldarg border\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]float64[])\r\nret")]
        #endif
        public static void glCompressedTexImage3DARB([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, double[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glCompressedTexImage3DARB([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, double[] data)

        #region void glCompressedTexImage3DARB([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, uint[] data)
        // GLvoid glCompressedTexImage3DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid* data)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 10\r\nldarg target\r\nldarg level\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg depth\r\nldarg border\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int32[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 10\r\nldarg target\r\nldarg level\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg depth\r\nldarg border\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int32[])\r\nret")]
        #endif
        public static void glCompressedTexImage3DARB([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, uint[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glCompressedTexImage3DARB([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, uint[] data)

        #region void glCompressedTexImage3DARB([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, sbyte[] data)
        // GLvoid glCompressedTexImage3DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid* data)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 10\r\nldarg target\r\nldarg level\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg depth\r\nldarg border\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int8[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 10\r\nldarg target\r\nldarg level\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg depth\r\nldarg border\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int8[])\r\nret")]
        #endif
        public static void glCompressedTexImage3DARB([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, sbyte[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glCompressedTexImage3DARB([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, sbyte[] data)

        #region void glCompressedTexImage3DARB([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, ushort[] data)
        // GLvoid glCompressedTexImage3DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid* data)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 10\r\nldarg target\r\nldarg level\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg depth\r\nldarg border\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int16[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 10\r\nldarg target\r\nldarg level\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg depth\r\nldarg border\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int16[])\r\nret")]
        #endif
        public static void glCompressedTexImage3DARB([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, ushort[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glCompressedTexImage3DARB([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, ushort[] data)

        #region void glCompressedTexImage3DARB([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, void* data)
        // GLvoid glCompressedTexImage3DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid* data)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 10\r\nldarg target\r\nldarg level\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg depth\r\nldarg border\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]void*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 10\r\nldarg target\r\nldarg level\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg depth\r\nldarg border\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]void*)\r\nret")]
        #endif
        public static unsafe void glCompressedTexImage3DARB([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, void* data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glCompressedTexImage3DARB([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, void* data)
        #endregion Overloads for GLvoid glCompressedTexImage3DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid* data)

        #region Overloads for GLvoid glCompressedTexImage2DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid* data)
        #region void glCompressedTexImage2DARB([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int height, int border, int imageSize, short[] data)
        // GLvoid glCompressedTexImage2DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid* data)
        #if WIN32
        [IlasmAttribute(".maxstack 9\r\nldarg target\r\nldarg level\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg border\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 9\r\nldarg target\r\nldarg level\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg border\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int16[])\r\nret")]
        #endif
        public static void glCompressedTexImage2DARB([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int height, int border, int imageSize, short[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glCompressedTexImage2DARB([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int height, int border, int imageSize, short[] data)

        #region void glCompressedTexImage2DARB([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int height, int border, int imageSize, float[] data)
        // GLvoid glCompressedTexImage2DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid* data)
        #if WIN32
        [IlasmAttribute(".maxstack 9\r\nldarg target\r\nldarg level\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg border\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 9\r\nldarg target\r\nldarg level\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg border\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]float32[])\r\nret")]
        #endif
        public static void glCompressedTexImage2DARB([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int height, int border, int imageSize, float[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glCompressedTexImage2DARB([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int height, int border, int imageSize, float[] data)

        #region void glCompressedTexImage2DARB([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int height, int border, int imageSize, int[] data)
        // GLvoid glCompressedTexImage2DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid* data)
        #if WIN32
        [IlasmAttribute(".maxstack 9\r\nldarg target\r\nldarg level\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg border\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 9\r\nldarg target\r\nldarg level\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg border\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32[])\r\nret")]
        #endif
        public static void glCompressedTexImage2DARB([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int height, int border, int imageSize, int[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glCompressedTexImage2DARB([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int height, int border, int imageSize, int[] data)

        #region void glCompressedTexImage2DARB([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int height, int border, int imageSize, IntPtr data)
        // GLvoid glCompressedTexImage2DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid* data)
        #if WIN32
        [IlasmAttribute(".maxstack 9\r\nldarg target\r\nldarg level\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg border\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 9\r\nldarg target\r\nldarg level\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg border\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]native int)\r\nret")]
        #endif
        public static void glCompressedTexImage2DARB([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int height, int border, int imageSize, IntPtr data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glCompressedTexImage2DARB([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int height, int border, int imageSize, IntPtr data)

        #region void glCompressedTexImage2DARB([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int height, int border, int imageSize, byte[] data)
        // GLvoid glCompressedTexImage2DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid* data)
        #if WIN32
        [IlasmAttribute(".maxstack 9\r\nldarg target\r\nldarg level\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg border\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int8[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 9\r\nldarg target\r\nldarg level\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg border\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int8[])\r\nret")]
        #endif
        public static void glCompressedTexImage2DARB([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int height, int border, int imageSize, byte[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glCompressedTexImage2DARB([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int height, int border, int imageSize, byte[] data)

        #region void glCompressedTexImage2DARB([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int height, int border, int imageSize, double[] data)
        // GLvoid glCompressedTexImage2DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid* data)
        #if WIN32
        [IlasmAttribute(".maxstack 9\r\nldarg target\r\nldarg level\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg border\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]float64[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 9\r\nldarg target\r\nldarg level\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg border\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]float64[])\r\nret")]
        #endif
        public static void glCompressedTexImage2DARB([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int height, int border, int imageSize, double[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glCompressedTexImage2DARB([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int height, int border, int imageSize, double[] data)

        #region void glCompressedTexImage2DARB([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int height, int border, int imageSize, uint[] data)
        // GLvoid glCompressedTexImage2DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid* data)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 9\r\nldarg target\r\nldarg level\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg border\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int32[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 9\r\nldarg target\r\nldarg level\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg border\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int32[])\r\nret")]
        #endif
        public static void glCompressedTexImage2DARB([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int height, int border, int imageSize, uint[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glCompressedTexImage2DARB([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int height, int border, int imageSize, uint[] data)

        #region void glCompressedTexImage2DARB([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int height, int border, int imageSize, sbyte[] data)
        // GLvoid glCompressedTexImage2DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid* data)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 9\r\nldarg target\r\nldarg level\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg border\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int8[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 9\r\nldarg target\r\nldarg level\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg border\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int8[])\r\nret")]
        #endif
        public static void glCompressedTexImage2DARB([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int height, int border, int imageSize, sbyte[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glCompressedTexImage2DARB([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int height, int border, int imageSize, sbyte[] data)

        #region void glCompressedTexImage2DARB([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int height, int border, int imageSize, ushort[] data)
        // GLvoid glCompressedTexImage2DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid* data)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 9\r\nldarg target\r\nldarg level\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg border\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int16[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 9\r\nldarg target\r\nldarg level\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg border\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int16[])\r\nret")]
        #endif
        public static void glCompressedTexImage2DARB([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int height, int border, int imageSize, ushort[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glCompressedTexImage2DARB([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int height, int border, int imageSize, ushort[] data)

        #region void glCompressedTexImage2DARB([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int height, int border, int imageSize, void* data)
        // GLvoid glCompressedTexImage2DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid* data)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 9\r\nldarg target\r\nldarg level\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg border\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]void*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 9\r\nldarg target\r\nldarg level\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg border\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]void*)\r\nret")]
        #endif
        public static unsafe void glCompressedTexImage2DARB([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int height, int border, int imageSize, void* data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glCompressedTexImage2DARB([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int height, int border, int imageSize, void* data)
        #endregion Overloads for GLvoid glCompressedTexImage2DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid* data)

        #region Overloads for GLvoid glCompressedTexImage1DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid* data)
        #region void glCompressedTexImage1DARB([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int border, int imageSize, short[] data)
        // GLvoid glCompressedTexImage1DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid* data)
        #if WIN32
        [IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg level\r\nldarg internalformat\r\nldarg width\r\nldarg border\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg level\r\nldarg internalformat\r\nldarg width\r\nldarg border\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int16[])\r\nret")]
        #endif
        public static void glCompressedTexImage1DARB([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int border, int imageSize, short[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glCompressedTexImage1DARB([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int border, int imageSize, short[] data)

        #region void glCompressedTexImage1DARB([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int border, int imageSize, float[] data)
        // GLvoid glCompressedTexImage1DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid* data)
        #if WIN32
        [IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg level\r\nldarg internalformat\r\nldarg width\r\nldarg border\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg level\r\nldarg internalformat\r\nldarg width\r\nldarg border\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]float32[])\r\nret")]
        #endif
        public static void glCompressedTexImage1DARB([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int border, int imageSize, float[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glCompressedTexImage1DARB([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int border, int imageSize, float[] data)

        #region void glCompressedTexImage1DARB([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int border, int imageSize, int[] data)
        // GLvoid glCompressedTexImage1DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid* data)
        #if WIN32
        [IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg level\r\nldarg internalformat\r\nldarg width\r\nldarg border\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg level\r\nldarg internalformat\r\nldarg width\r\nldarg border\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32[])\r\nret")]
        #endif
        public static void glCompressedTexImage1DARB([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int border, int imageSize, int[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glCompressedTexImage1DARB([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int border, int imageSize, int[] data)

        #region void glCompressedTexImage1DARB([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int border, int imageSize, IntPtr data)
        // GLvoid glCompressedTexImage1DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid* data)
        #if WIN32
        [IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg level\r\nldarg internalformat\r\nldarg width\r\nldarg border\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg level\r\nldarg internalformat\r\nldarg width\r\nldarg border\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]native int)\r\nret")]
        #endif
        public static void glCompressedTexImage1DARB([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int border, int imageSize, IntPtr data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glCompressedTexImage1DARB([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int border, int imageSize, IntPtr data)

        #region void glCompressedTexImage1DARB([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int border, int imageSize, byte[] data)
        // GLvoid glCompressedTexImage1DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid* data)
        #if WIN32
        [IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg level\r\nldarg internalformat\r\nldarg width\r\nldarg border\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int8[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg level\r\nldarg internalformat\r\nldarg width\r\nldarg border\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int8[])\r\nret")]
        #endif
        public static void glCompressedTexImage1DARB([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int border, int imageSize, byte[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glCompressedTexImage1DARB([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int border, int imageSize, byte[] data)

        #region void glCompressedTexImage1DARB([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int border, int imageSize, double[] data)
        // GLvoid glCompressedTexImage1DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid* data)
        #if WIN32
        [IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg level\r\nldarg internalformat\r\nldarg width\r\nldarg border\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]float64[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg level\r\nldarg internalformat\r\nldarg width\r\nldarg border\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]float64[])\r\nret")]
        #endif
        public static void glCompressedTexImage1DARB([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int border, int imageSize, double[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glCompressedTexImage1DARB([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int border, int imageSize, double[] data)

        #region void glCompressedTexImage1DARB([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int border, int imageSize, uint[] data)
        // GLvoid glCompressedTexImage1DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid* data)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg level\r\nldarg internalformat\r\nldarg width\r\nldarg border\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int32[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg level\r\nldarg internalformat\r\nldarg width\r\nldarg border\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int32[])\r\nret")]
        #endif
        public static void glCompressedTexImage1DARB([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int border, int imageSize, uint[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glCompressedTexImage1DARB([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int border, int imageSize, uint[] data)

        #region void glCompressedTexImage1DARB([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int border, int imageSize, sbyte[] data)
        // GLvoid glCompressedTexImage1DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid* data)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg level\r\nldarg internalformat\r\nldarg width\r\nldarg border\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int8[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg level\r\nldarg internalformat\r\nldarg width\r\nldarg border\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int8[])\r\nret")]
        #endif
        public static void glCompressedTexImage1DARB([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int border, int imageSize, sbyte[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glCompressedTexImage1DARB([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int border, int imageSize, sbyte[] data)

        #region void glCompressedTexImage1DARB([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int border, int imageSize, ushort[] data)
        // GLvoid glCompressedTexImage1DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid* data)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg level\r\nldarg internalformat\r\nldarg width\r\nldarg border\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int16[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg level\r\nldarg internalformat\r\nldarg width\r\nldarg border\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int16[])\r\nret")]
        #endif
        public static void glCompressedTexImage1DARB([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int border, int imageSize, ushort[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glCompressedTexImage1DARB([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int border, int imageSize, ushort[] data)

        #region void glCompressedTexImage1DARB([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int border, int imageSize, void* data)
        // GLvoid glCompressedTexImage1DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid* data)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg level\r\nldarg internalformat\r\nldarg width\r\nldarg border\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]void*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg level\r\nldarg internalformat\r\nldarg width\r\nldarg border\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]void*)\r\nret")]
        #endif
        public static unsafe void glCompressedTexImage1DARB([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int border, int imageSize, void* data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glCompressedTexImage1DARB([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int border, int imageSize, void* data)
        #endregion Overloads for GLvoid glCompressedTexImage1DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid* data)

        #region Overloads for GLvoid glCompressedTexSubImage3DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid* data)
        #region void glCompressedTexSubImage3DARB([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, short[] data)
        // GLvoid glCompressedTexSubImage3DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid* data)
        #if WIN32
        [IlasmAttribute(".maxstack 12\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg yoffset\r\nldarg zoffset\r\nldarg width\r\nldarg height\r\nldarg depth\r\nldarg format\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 12\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg yoffset\r\nldarg zoffset\r\nldarg width\r\nldarg height\r\nldarg depth\r\nldarg format\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int16[])\r\nret")]
        #endif
        public static void glCompressedTexSubImage3DARB([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, short[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glCompressedTexSubImage3DARB([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, short[] data)

        #region void glCompressedTexSubImage3DARB([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, float[] data)
        // GLvoid glCompressedTexSubImage3DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid* data)
        #if WIN32
        [IlasmAttribute(".maxstack 12\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg yoffset\r\nldarg zoffset\r\nldarg width\r\nldarg height\r\nldarg depth\r\nldarg format\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 12\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg yoffset\r\nldarg zoffset\r\nldarg width\r\nldarg height\r\nldarg depth\r\nldarg format\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]float32[])\r\nret")]
        #endif
        public static void glCompressedTexSubImage3DARB([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, float[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glCompressedTexSubImage3DARB([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, float[] data)

        #region void glCompressedTexSubImage3DARB([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, int[] data)
        // GLvoid glCompressedTexSubImage3DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid* data)
        #if WIN32
        [IlasmAttribute(".maxstack 12\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg yoffset\r\nldarg zoffset\r\nldarg width\r\nldarg height\r\nldarg depth\r\nldarg format\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 12\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg yoffset\r\nldarg zoffset\r\nldarg width\r\nldarg height\r\nldarg depth\r\nldarg format\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32[])\r\nret")]
        #endif
        public static void glCompressedTexSubImage3DARB([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, int[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glCompressedTexSubImage3DARB([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, int[] data)

        #region void glCompressedTexSubImage3DARB([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, IntPtr data)
        // GLvoid glCompressedTexSubImage3DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid* data)
        #if WIN32
        [IlasmAttribute(".maxstack 12\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg yoffset\r\nldarg zoffset\r\nldarg width\r\nldarg height\r\nldarg depth\r\nldarg format\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 12\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg yoffset\r\nldarg zoffset\r\nldarg width\r\nldarg height\r\nldarg depth\r\nldarg format\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]native int)\r\nret")]
        #endif
        public static void glCompressedTexSubImage3DARB([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, IntPtr data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glCompressedTexSubImage3DARB([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, IntPtr data)

        #region void glCompressedTexSubImage3DARB([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, byte[] data)
        // GLvoid glCompressedTexSubImage3DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid* data)
        #if WIN32
        [IlasmAttribute(".maxstack 12\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg yoffset\r\nldarg zoffset\r\nldarg width\r\nldarg height\r\nldarg depth\r\nldarg format\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int8[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 12\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg yoffset\r\nldarg zoffset\r\nldarg width\r\nldarg height\r\nldarg depth\r\nldarg format\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int8[])\r\nret")]
        #endif
        public static void glCompressedTexSubImage3DARB([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, byte[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glCompressedTexSubImage3DARB([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, byte[] data)

        #region void glCompressedTexSubImage3DARB([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, double[] data)
        // GLvoid glCompressedTexSubImage3DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid* data)
        #if WIN32
        [IlasmAttribute(".maxstack 12\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg yoffset\r\nldarg zoffset\r\nldarg width\r\nldarg height\r\nldarg depth\r\nldarg format\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]float64[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 12\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg yoffset\r\nldarg zoffset\r\nldarg width\r\nldarg height\r\nldarg depth\r\nldarg format\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]float64[])\r\nret")]
        #endif
        public static void glCompressedTexSubImage3DARB([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, double[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glCompressedTexSubImage3DARB([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, double[] data)

        #region void glCompressedTexSubImage3DARB([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, uint[] data)
        // GLvoid glCompressedTexSubImage3DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid* data)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 12\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg yoffset\r\nldarg zoffset\r\nldarg width\r\nldarg height\r\nldarg depth\r\nldarg format\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int32[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 12\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg yoffset\r\nldarg zoffset\r\nldarg width\r\nldarg height\r\nldarg depth\r\nldarg format\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int32[])\r\nret")]
        #endif
        public static void glCompressedTexSubImage3DARB([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, uint[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glCompressedTexSubImage3DARB([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, uint[] data)

        #region void glCompressedTexSubImage3DARB([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, sbyte[] data)
        // GLvoid glCompressedTexSubImage3DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid* data)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 12\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg yoffset\r\nldarg zoffset\r\nldarg width\r\nldarg height\r\nldarg depth\r\nldarg format\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int8[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 12\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg yoffset\r\nldarg zoffset\r\nldarg width\r\nldarg height\r\nldarg depth\r\nldarg format\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int8[])\r\nret")]
        #endif
        public static void glCompressedTexSubImage3DARB([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, sbyte[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glCompressedTexSubImage3DARB([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, sbyte[] data)

        #region void glCompressedTexSubImage3DARB([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, ushort[] data)
        // GLvoid glCompressedTexSubImage3DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid* data)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 12\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg yoffset\r\nldarg zoffset\r\nldarg width\r\nldarg height\r\nldarg depth\r\nldarg format\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int16[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 12\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg yoffset\r\nldarg zoffset\r\nldarg width\r\nldarg height\r\nldarg depth\r\nldarg format\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int16[])\r\nret")]
        #endif
        public static void glCompressedTexSubImage3DARB([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, ushort[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glCompressedTexSubImage3DARB([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, ushort[] data)

        #region void glCompressedTexSubImage3DARB([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, void* data)
        // GLvoid glCompressedTexSubImage3DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid* data)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 12\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg yoffset\r\nldarg zoffset\r\nldarg width\r\nldarg height\r\nldarg depth\r\nldarg format\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]void*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 12\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg yoffset\r\nldarg zoffset\r\nldarg width\r\nldarg height\r\nldarg depth\r\nldarg format\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]void*)\r\nret")]
        #endif
        public static unsafe void glCompressedTexSubImage3DARB([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, void* data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glCompressedTexSubImage3DARB([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, void* data)
        #endregion Overloads for GLvoid glCompressedTexSubImage3DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid* data)

        #region Overloads for GLvoid glCompressedTexSubImage2DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid* data)
        #region void glCompressedTexSubImage2DARB([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, short[] data)
        // GLvoid glCompressedTexSubImage2DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid* data)
        #if WIN32
        [IlasmAttribute(".maxstack 10\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg yoffset\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 10\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg yoffset\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int16[])\r\nret")]
        #endif
        public static void glCompressedTexSubImage2DARB([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, short[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glCompressedTexSubImage2DARB([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, short[] data)

        #region void glCompressedTexSubImage2DARB([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, float[] data)
        // GLvoid glCompressedTexSubImage2DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid* data)
        #if WIN32
        [IlasmAttribute(".maxstack 10\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg yoffset\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 10\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg yoffset\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]float32[])\r\nret")]
        #endif
        public static void glCompressedTexSubImage2DARB([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, float[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glCompressedTexSubImage2DARB([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, float[] data)

        #region void glCompressedTexSubImage2DARB([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, int[] data)
        // GLvoid glCompressedTexSubImage2DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid* data)
        #if WIN32
        [IlasmAttribute(".maxstack 10\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg yoffset\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 10\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg yoffset\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32[])\r\nret")]
        #endif
        public static void glCompressedTexSubImage2DARB([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, int[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glCompressedTexSubImage2DARB([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, int[] data)

        #region void glCompressedTexSubImage2DARB([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, IntPtr data)
        // GLvoid glCompressedTexSubImage2DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid* data)
        #if WIN32
        [IlasmAttribute(".maxstack 10\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg yoffset\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 10\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg yoffset\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]native int)\r\nret")]
        #endif
        public static void glCompressedTexSubImage2DARB([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, IntPtr data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glCompressedTexSubImage2DARB([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, IntPtr data)

        #region void glCompressedTexSubImage2DARB([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, byte[] data)
        // GLvoid glCompressedTexSubImage2DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid* data)
        #if WIN32
        [IlasmAttribute(".maxstack 10\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg yoffset\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int8[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 10\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg yoffset\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int8[])\r\nret")]
        #endif
        public static void glCompressedTexSubImage2DARB([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, byte[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glCompressedTexSubImage2DARB([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, byte[] data)

        #region void glCompressedTexSubImage2DARB([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, double[] data)
        // GLvoid glCompressedTexSubImage2DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid* data)
        #if WIN32
        [IlasmAttribute(".maxstack 10\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg yoffset\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]float64[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 10\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg yoffset\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]float64[])\r\nret")]
        #endif
        public static void glCompressedTexSubImage2DARB([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, double[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glCompressedTexSubImage2DARB([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, double[] data)

        #region void glCompressedTexSubImage2DARB([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, uint[] data)
        // GLvoid glCompressedTexSubImage2DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid* data)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 10\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg yoffset\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int32[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 10\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg yoffset\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int32[])\r\nret")]
        #endif
        public static void glCompressedTexSubImage2DARB([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, uint[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glCompressedTexSubImage2DARB([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, uint[] data)

        #region void glCompressedTexSubImage2DARB([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, sbyte[] data)
        // GLvoid glCompressedTexSubImage2DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid* data)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 10\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg yoffset\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int8[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 10\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg yoffset\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int8[])\r\nret")]
        #endif
        public static void glCompressedTexSubImage2DARB([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, sbyte[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glCompressedTexSubImage2DARB([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, sbyte[] data)

        #region void glCompressedTexSubImage2DARB([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, ushort[] data)
        // GLvoid glCompressedTexSubImage2DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid* data)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 10\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg yoffset\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int16[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 10\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg yoffset\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int16[])\r\nret")]
        #endif
        public static void glCompressedTexSubImage2DARB([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, ushort[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glCompressedTexSubImage2DARB([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, ushort[] data)

        #region void glCompressedTexSubImage2DARB([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, void* data)
        // GLvoid glCompressedTexSubImage2DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid* data)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 10\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg yoffset\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]void*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 10\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg yoffset\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]void*)\r\nret")]
        #endif
        public static unsafe void glCompressedTexSubImage2DARB([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, void* data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glCompressedTexSubImage2DARB([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, void* data)
        #endregion Overloads for GLvoid glCompressedTexSubImage2DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid* data)

        #region Overloads for GLvoid glCompressedTexSubImage1DARB(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid* data)
        #region void glCompressedTexSubImage1DARB([In] IntPtr extensionPointer, int target, int level, int xoffset, int width, int format, int imageSize, short[] data)
        // GLvoid glCompressedTexSubImage1DARB(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid* data)
        #if WIN32
        [IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg width\r\nldarg format\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg width\r\nldarg format\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int16[])\r\nret")]
        #endif
        public static void glCompressedTexSubImage1DARB([In] IntPtr extensionPointer, int target, int level, int xoffset, int width, int format, int imageSize, short[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glCompressedTexSubImage1DARB([In] IntPtr extensionPointer, int target, int level, int xoffset, int width, int format, int imageSize, short[] data)

        #region void glCompressedTexSubImage1DARB([In] IntPtr extensionPointer, int target, int level, int xoffset, int width, int format, int imageSize, float[] data)
        // GLvoid glCompressedTexSubImage1DARB(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid* data)
        #if WIN32
        [IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg width\r\nldarg format\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg width\r\nldarg format\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]float32[])\r\nret")]
        #endif
        public static void glCompressedTexSubImage1DARB([In] IntPtr extensionPointer, int target, int level, int xoffset, int width, int format, int imageSize, float[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glCompressedTexSubImage1DARB([In] IntPtr extensionPointer, int target, int level, int xoffset, int width, int format, int imageSize, float[] data)

        #region void glCompressedTexSubImage1DARB([In] IntPtr extensionPointer, int target, int level, int xoffset, int width, int format, int imageSize, int[] data)
        // GLvoid glCompressedTexSubImage1DARB(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid* data)
        #if WIN32
        [IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg width\r\nldarg format\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg width\r\nldarg format\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32[])\r\nret")]
        #endif
        public static void glCompressedTexSubImage1DARB([In] IntPtr extensionPointer, int target, int level, int xoffset, int width, int format, int imageSize, int[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glCompressedTexSubImage1DARB([In] IntPtr extensionPointer, int target, int level, int xoffset, int width, int format, int imageSize, int[] data)

        #region void glCompressedTexSubImage1DARB([In] IntPtr extensionPointer, int target, int level, int xoffset, int width, int format, int imageSize, IntPtr data)
        // GLvoid glCompressedTexSubImage1DARB(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid* data)
        #if WIN32
        [IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg width\r\nldarg format\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg width\r\nldarg format\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]native int)\r\nret")]
        #endif
        public static void glCompressedTexSubImage1DARB([In] IntPtr extensionPointer, int target, int level, int xoffset, int width, int format, int imageSize, IntPtr data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glCompressedTexSubImage1DARB([In] IntPtr extensionPointer, int target, int level, int xoffset, int width, int format, int imageSize, IntPtr data)

        #region void glCompressedTexSubImage1DARB([In] IntPtr extensionPointer, int target, int level, int xoffset, int width, int format, int imageSize, byte[] data)
        // GLvoid glCompressedTexSubImage1DARB(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid* data)
        #if WIN32
        [IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg width\r\nldarg format\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int8[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg width\r\nldarg format\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int8[])\r\nret")]
        #endif
        public static void glCompressedTexSubImage1DARB([In] IntPtr extensionPointer, int target, int level, int xoffset, int width, int format, int imageSize, byte[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glCompressedTexSubImage1DARB([In] IntPtr extensionPointer, int target, int level, int xoffset, int width, int format, int imageSize, byte[] data)

        #region void glCompressedTexSubImage1DARB([In] IntPtr extensionPointer, int target, int level, int xoffset, int width, int format, int imageSize, double[] data)
        // GLvoid glCompressedTexSubImage1DARB(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid* data)
        #if WIN32
        [IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg width\r\nldarg format\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]float64[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg width\r\nldarg format\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]float64[])\r\nret")]
        #endif
        public static void glCompressedTexSubImage1DARB([In] IntPtr extensionPointer, int target, int level, int xoffset, int width, int format, int imageSize, double[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glCompressedTexSubImage1DARB([In] IntPtr extensionPointer, int target, int level, int xoffset, int width, int format, int imageSize, double[] data)

        #region void glCompressedTexSubImage1DARB([In] IntPtr extensionPointer, int target, int level, int xoffset, int width, int format, int imageSize, uint[] data)
        // GLvoid glCompressedTexSubImage1DARB(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid* data)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg width\r\nldarg format\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int32[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg width\r\nldarg format\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int32[])\r\nret")]
        #endif
        public static void glCompressedTexSubImage1DARB([In] IntPtr extensionPointer, int target, int level, int xoffset, int width, int format, int imageSize, uint[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glCompressedTexSubImage1DARB([In] IntPtr extensionPointer, int target, int level, int xoffset, int width, int format, int imageSize, uint[] data)

        #region void glCompressedTexSubImage1DARB([In] IntPtr extensionPointer, int target, int level, int xoffset, int width, int format, int imageSize, sbyte[] data)
        // GLvoid glCompressedTexSubImage1DARB(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid* data)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg width\r\nldarg format\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int8[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg width\r\nldarg format\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int8[])\r\nret")]
        #endif
        public static void glCompressedTexSubImage1DARB([In] IntPtr extensionPointer, int target, int level, int xoffset, int width, int format, int imageSize, sbyte[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glCompressedTexSubImage1DARB([In] IntPtr extensionPointer, int target, int level, int xoffset, int width, int format, int imageSize, sbyte[] data)

        #region void glCompressedTexSubImage1DARB([In] IntPtr extensionPointer, int target, int level, int xoffset, int width, int format, int imageSize, ushort[] data)
        // GLvoid glCompressedTexSubImage1DARB(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid* data)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg width\r\nldarg format\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int16[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg width\r\nldarg format\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int16[])\r\nret")]
        #endif
        public static void glCompressedTexSubImage1DARB([In] IntPtr extensionPointer, int target, int level, int xoffset, int width, int format, int imageSize, ushort[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glCompressedTexSubImage1DARB([In] IntPtr extensionPointer, int target, int level, int xoffset, int width, int format, int imageSize, ushort[] data)

        #region void glCompressedTexSubImage1DARB([In] IntPtr extensionPointer, int target, int level, int xoffset, int width, int format, int imageSize, void* data)
        // GLvoid glCompressedTexSubImage1DARB(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid* data)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg width\r\nldarg format\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]void*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg width\r\nldarg format\r\nldarg imageSize\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]void*)\r\nret")]
        #endif
        public static unsafe void glCompressedTexSubImage1DARB([In] IntPtr extensionPointer, int target, int level, int xoffset, int width, int format, int imageSize, void* data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glCompressedTexSubImage1DARB([In] IntPtr extensionPointer, int target, int level, int xoffset, int width, int format, int imageSize, void* data)
        #endregion Overloads for GLvoid glCompressedTexSubImage1DARB(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid* data)

        #region Overloads for GLvoid glGetCompressedTexImageARB(GLenum target, GLint lod, GLvoid* img)
        #region void glGetCompressedTexImageARB([In] IntPtr extensionPointer, int target, int lod, short[] img)
        // GLvoid glGetCompressedTexImageARB(GLenum target, GLint lod, GLvoid* img)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg lod\r\nldarg img\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg lod\r\nldarg img\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]int16[])\r\nret")]
        #endif
        public static void glGetCompressedTexImageARB([In] IntPtr extensionPointer, int target, int lod, short[] img) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetCompressedTexImageARB([In] IntPtr extensionPointer, int target, int lod, short[] img)

        #region void glGetCompressedTexImageARB([In] IntPtr extensionPointer, int target, int lod, float[] img)
        // GLvoid glGetCompressedTexImageARB(GLenum target, GLint lod, GLvoid* img)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg lod\r\nldarg img\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg lod\r\nldarg img\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]float32[])\r\nret")]
        #endif
        public static void glGetCompressedTexImageARB([In] IntPtr extensionPointer, int target, int lod, float[] img) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetCompressedTexImageARB([In] IntPtr extensionPointer, int target, int lod, float[] img)

        #region void glGetCompressedTexImageARB([In] IntPtr extensionPointer, int target, int lod, int[] img)
        // GLvoid glGetCompressedTexImageARB(GLenum target, GLint lod, GLvoid* img)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg lod\r\nldarg img\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg lod\r\nldarg img\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]int32[])\r\nret")]
        #endif
        public static void glGetCompressedTexImageARB([In] IntPtr extensionPointer, int target, int lod, int[] img) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetCompressedTexImageARB([In] IntPtr extensionPointer, int target, int lod, int[] img)

        #region void glGetCompressedTexImageARB([In] IntPtr extensionPointer, int target, int lod, IntPtr img)
        // GLvoid glGetCompressedTexImageARB(GLenum target, GLint lod, GLvoid* img)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg lod\r\nldarg img\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg lod\r\nldarg img\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGetCompressedTexImageARB([In] IntPtr extensionPointer, int target, int lod, IntPtr img) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetCompressedTexImageARB([In] IntPtr extensionPointer, int target, int lod, IntPtr img)

        #region void glGetCompressedTexImageARB([In] IntPtr extensionPointer, int target, int lod, byte[] img)
        // GLvoid glGetCompressedTexImageARB(GLenum target, GLint lod, GLvoid* img)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg lod\r\nldarg img\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]unsigned int8[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg lod\r\nldarg img\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]unsigned int8[])\r\nret")]
        #endif
        public static void glGetCompressedTexImageARB([In] IntPtr extensionPointer, int target, int lod, byte[] img) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetCompressedTexImageARB([In] IntPtr extensionPointer, int target, int lod, byte[] img)

        #region void glGetCompressedTexImageARB([In] IntPtr extensionPointer, int target, int lod, double[] img)
        // GLvoid glGetCompressedTexImageARB(GLenum target, GLint lod, GLvoid* img)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg lod\r\nldarg img\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]float64[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg lod\r\nldarg img\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]float64[])\r\nret")]
        #endif
        public static void glGetCompressedTexImageARB([In] IntPtr extensionPointer, int target, int lod, double[] img) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetCompressedTexImageARB([In] IntPtr extensionPointer, int target, int lod, double[] img)

        #region void glGetCompressedTexImageARB([In] IntPtr extensionPointer, int target, int lod, uint[] img)
        // GLvoid glGetCompressedTexImageARB(GLenum target, GLint lod, GLvoid* img)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg lod\r\nldarg img\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]unsigned int32[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg lod\r\nldarg img\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]unsigned int32[])\r\nret")]
        #endif
        public static void glGetCompressedTexImageARB([In] IntPtr extensionPointer, int target, int lod, uint[] img) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetCompressedTexImageARB([In] IntPtr extensionPointer, int target, int lod, uint[] img)

        #region void glGetCompressedTexImageARB([In] IntPtr extensionPointer, int target, int lod, sbyte[] img)
        // GLvoid glGetCompressedTexImageARB(GLenum target, GLint lod, GLvoid* img)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg lod\r\nldarg img\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]int8[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg lod\r\nldarg img\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]int8[])\r\nret")]
        #endif
        public static void glGetCompressedTexImageARB([In] IntPtr extensionPointer, int target, int lod, sbyte[] img) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetCompressedTexImageARB([In] IntPtr extensionPointer, int target, int lod, sbyte[] img)

        #region void glGetCompressedTexImageARB([In] IntPtr extensionPointer, int target, int lod, ushort[] img)
        // GLvoid glGetCompressedTexImageARB(GLenum target, GLint lod, GLvoid* img)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg lod\r\nldarg img\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]unsigned int16[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg lod\r\nldarg img\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]unsigned int16[])\r\nret")]
        #endif
        public static void glGetCompressedTexImageARB([In] IntPtr extensionPointer, int target, int lod, ushort[] img) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetCompressedTexImageARB([In] IntPtr extensionPointer, int target, int lod, ushort[] img)

        #region void glGetCompressedTexImageARB([In] IntPtr extensionPointer, int target, int lod, void* img)
        // GLvoid glGetCompressedTexImageARB(GLenum target, GLint lod, GLvoid* img)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg lod\r\nldarg img\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]void*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg lod\r\nldarg img\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]void*)\r\nret")]
        #endif
        public static unsafe void glGetCompressedTexImageARB([In] IntPtr extensionPointer, int target, int lod, void* img) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetCompressedTexImageARB([In] IntPtr extensionPointer, int target, int lod, void* img)
        #endregion Overloads for GLvoid glGetCompressedTexImageARB(GLenum target, GLint lod, GLvoid* img)
        #endregion GL_ARB_texture_compression Methods
        #endregion GL_ARB_texture_compression (12)

        #region GL_ARB_texture_border_clamp (13)
        #region GL_ARB_texture_border_clamp Constants
        #region GL_CLAMP_TO_BORDER_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_CLAMP_TO_BORDER_ARB 0x812D
        public const int GL_CLAMP_TO_BORDER_ARB = 0x812D;
        #endregion GL_CLAMP_TO_BORDER_ARB
        #endregion GL_ARB_texture_border_clamp Constants
        #endregion GL_ARB_texture_border_clamp (13)

        #region GL_ARB_point_parameters (14)
        #region GL_ARB_point_parameters Constants
        #region GL_POINT_SIZE_MIN_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_POINT_SIZE_MIN_ARB 0x8126
        public const int GL_POINT_SIZE_MIN_ARB = 0x8126;
        #endregion GL_POINT_SIZE_MIN_ARB

        #region GL_POINT_SIZE_MAX_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_POINT_SIZE_MAX_ARB 0x8127
        public const int GL_POINT_SIZE_MAX_ARB = 0x8127;
        #endregion GL_POINT_SIZE_MAX_ARB

        #region GL_POINT_FADE_THRESHOLD_SIZE_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_POINT_FADE_THRESHOLD_SIZE_ARB 0x8128
        public const int GL_POINT_FADE_THRESHOLD_SIZE_ARB = 0x8128;
        #endregion GL_POINT_FADE_THRESHOLD_SIZE_ARB

        #region GL_POINT_DISTANCE_ATTENUATION_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_POINT_DISTANCE_ATTENUATION_ARB 0x8129
        public const int GL_POINT_DISTANCE_ATTENUATION_ARB = 0x8129;
        #endregion GL_POINT_DISTANCE_ATTENUATION_ARB
        #endregion GL_ARB_point_parameters Constants

        #region GL_ARB_point_parameters Methods
        #region void glPointParameterfARB([In] IntPtr extensionPointer, int pname, float param)
        // GLvoid glPointParameterfARB(GLenum pname, GLfloat param)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg param\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg param\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float32)\r\nret")]
        #endif
        public static void glPointParameterfARB([In] IntPtr extensionPointer, int pname, float param) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glPointParameterfARB([In] IntPtr extensionPointer, int pname, float param)

        #region Overloads for GLvoid glPointParameterfvARB(GLenum pname, const GLfloat* parameters)
        #region void glPointParameterfvARB([In] IntPtr extensionPointer, int pname, ref float parameters)
        // GLvoid glPointParameterfvARB(GLenum pname, const GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]float32)\r\nret")]
        #endif
        public static void glPointParameterfvARB([In] IntPtr extensionPointer, int pname, ref float parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glPointParameterfvARB([In] IntPtr extensionPointer, int pname, ref float parameters)

        #region void glPointParameterfvARB([In] IntPtr extensionPointer, int pname, float[] parameters)
        // GLvoid glPointParameterfvARB(GLenum pname, const GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float32[])\r\nret")]
        #endif
        public static void glPointParameterfvARB([In] IntPtr extensionPointer, int pname, float[] parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glPointParameterfvARB([In] IntPtr extensionPointer, int pname, float[] parameters)

        #region void glPointParameterfvARB([In] IntPtr extensionPointer, int pname, IntPtr parameters)
        // GLvoid glPointParameterfvARB(GLenum pname, const GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glPointParameterfvARB([In] IntPtr extensionPointer, int pname, IntPtr parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glPointParameterfvARB([In] IntPtr extensionPointer, int pname, IntPtr parameters)

        #region void glPointParameterfvARB([In] IntPtr extensionPointer, int pname, float* parameters)
        // GLvoid glPointParameterfvARB(GLenum pname, const GLfloat* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float32*)\r\nret")]
        #endif
        public static unsafe void glPointParameterfvARB([In] IntPtr extensionPointer, int pname, float* parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glPointParameterfvARB([In] IntPtr extensionPointer, int pname, float* parameters)
        #endregion Overloads for GLvoid glPointParameterfvARB(GLenum pname, const GLfloat* parameters)
        #endregion GL_ARB_point_parameters Methods
        #endregion GL_ARB_point_parameters (14)

        #region GL_ARB_vertex_blend (15)
        #region GL_ARB_vertex_blend Constants
        #region GL_MAX_VERTEX_UNITS_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAX_VERTEX_UNITS_ARB 0x86A4
        public const int GL_MAX_VERTEX_UNITS_ARB = 0x86A4;
        #endregion GL_MAX_VERTEX_UNITS_ARB

        #region GL_ACTIVE_VERTEX_UNITS_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_ACTIVE_VERTEX_UNITS_ARB 0x86A5
        public const int GL_ACTIVE_VERTEX_UNITS_ARB = 0x86A5;
        #endregion GL_ACTIVE_VERTEX_UNITS_ARB

        #region GL_WEIGHT_SUM_UNITY_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_WEIGHT_SUM_UNITY_ARB 0x86A6
        public const int GL_WEIGHT_SUM_UNITY_ARB = 0x86A6;
        #endregion GL_WEIGHT_SUM_UNITY_ARB

        #region GL_VERTEX_BLEND_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VERTEX_BLEND_ARB 0x86A7
        public const int GL_VERTEX_BLEND_ARB = 0x86A7;
        #endregion GL_VERTEX_BLEND_ARB

        #region GL_MODELVIEW0_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MODELVIEW0_ARB 0x1700
        public const int GL_MODELVIEW0_ARB = 0x1700;
        #endregion GL_MODELVIEW0_ARB

        #region GL_MODELVIEW1_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MODELVIEW1_ARB 0x850A
        public const int GL_MODELVIEW1_ARB = 0x850A;
        #endregion GL_MODELVIEW1_ARB

        #region GL_MODELVIEW2_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MODELVIEW2_ARB 0x8722
        public const int GL_MODELVIEW2_ARB = 0x8722;
        #endregion GL_MODELVIEW2_ARB

        #region GL_MODELVIEW3_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MODELVIEW3_ARB 0x8723
        public const int GL_MODELVIEW3_ARB = 0x8723;
        #endregion GL_MODELVIEW3_ARB

        #region GL_MODELVIEW4_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MODELVIEW4_ARB 0x8724
        public const int GL_MODELVIEW4_ARB = 0x8724;
        #endregion GL_MODELVIEW4_ARB

        #region GL_MODELVIEW5_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MODELVIEW5_ARB 0x8725
        public const int GL_MODELVIEW5_ARB = 0x8725;
        #endregion GL_MODELVIEW5_ARB

        #region GL_MODELVIEW6_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MODELVIEW6_ARB 0x8726
        public const int GL_MODELVIEW6_ARB = 0x8726;
        #endregion GL_MODELVIEW6_ARB

        #region GL_MODELVIEW7_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MODELVIEW7_ARB 0x8727
        public const int GL_MODELVIEW7_ARB = 0x8727;
        #endregion GL_MODELVIEW7_ARB

        #region GL_MODELVIEW8_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MODELVIEW8_ARB 0x8728
        public const int GL_MODELVIEW8_ARB = 0x8728;
        #endregion GL_MODELVIEW8_ARB

        #region GL_MODELVIEW9_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MODELVIEW9_ARB 0x8729
        public const int GL_MODELVIEW9_ARB = 0x8729;
        #endregion GL_MODELVIEW9_ARB

        #region GL_MODELVIEW10_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MODELVIEW10_ARB 0x872A
        public const int GL_MODELVIEW10_ARB = 0x872A;
        #endregion GL_MODELVIEW10_ARB

        #region GL_MODELVIEW11_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MODELVIEW11_ARB 0x872B
        public const int GL_MODELVIEW11_ARB = 0x872B;
        #endregion GL_MODELVIEW11_ARB

        #region GL_MODELVIEW12_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MODELVIEW12_ARB 0x872C
        public const int GL_MODELVIEW12_ARB = 0x872C;
        #endregion GL_MODELVIEW12_ARB

        #region GL_MODELVIEW13_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MODELVIEW13_ARB 0x872D
        public const int GL_MODELVIEW13_ARB = 0x872D;
        #endregion GL_MODELVIEW13_ARB

        #region GL_MODELVIEW14_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MODELVIEW14_ARB 0x872E
        public const int GL_MODELVIEW14_ARB = 0x872E;
        #endregion GL_MODELVIEW14_ARB

        #region GL_MODELVIEW15_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MODELVIEW15_ARB 0x872F
        public const int GL_MODELVIEW15_ARB = 0x872F;
        #endregion GL_MODELVIEW15_ARB

        #region GL_MODELVIEW16_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MODELVIEW16_ARB 0x8730
        public const int GL_MODELVIEW16_ARB = 0x8730;
        #endregion GL_MODELVIEW16_ARB

        #region GL_MODELVIEW17_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MODELVIEW17_ARB 0x8731
        public const int GL_MODELVIEW17_ARB = 0x8731;
        #endregion GL_MODELVIEW17_ARB

        #region GL_MODELVIEW18_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MODELVIEW18_ARB 0x8732
        public const int GL_MODELVIEW18_ARB = 0x8732;
        #endregion GL_MODELVIEW18_ARB

        #region GL_MODELVIEW19_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MODELVIEW19_ARB 0x8733
        public const int GL_MODELVIEW19_ARB = 0x8733;
        #endregion GL_MODELVIEW19_ARB

        #region GL_MODELVIEW20_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MODELVIEW20_ARB 0x8734
        public const int GL_MODELVIEW20_ARB = 0x8734;
        #endregion GL_MODELVIEW20_ARB

        #region GL_MODELVIEW21_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MODELVIEW21_ARB 0x8735
        public const int GL_MODELVIEW21_ARB = 0x8735;
        #endregion GL_MODELVIEW21_ARB

        #region GL_MODELVIEW22_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MODELVIEW22_ARB 0x8736
        public const int GL_MODELVIEW22_ARB = 0x8736;
        #endregion GL_MODELVIEW22_ARB

        #region GL_MODELVIEW23_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MODELVIEW23_ARB 0x8737
        public const int GL_MODELVIEW23_ARB = 0x8737;
        #endregion GL_MODELVIEW23_ARB

        #region GL_MODELVIEW24_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MODELVIEW24_ARB 0x8738
        public const int GL_MODELVIEW24_ARB = 0x8738;
        #endregion GL_MODELVIEW24_ARB

        #region GL_MODELVIEW25_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MODELVIEW25_ARB 0x8739
        public const int GL_MODELVIEW25_ARB = 0x8739;
        #endregion GL_MODELVIEW25_ARB

        #region GL_MODELVIEW26_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MODELVIEW26_ARB 0x873A
        public const int GL_MODELVIEW26_ARB = 0x873A;
        #endregion GL_MODELVIEW26_ARB

        #region GL_MODELVIEW27_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MODELVIEW27_ARB 0x873B
        public const int GL_MODELVIEW27_ARB = 0x873B;
        #endregion GL_MODELVIEW27_ARB

        #region GL_MODELVIEW28_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MODELVIEW28_ARB 0x873C
        public const int GL_MODELVIEW28_ARB = 0x873C;
        #endregion GL_MODELVIEW28_ARB

        #region GL_MODELVIEW29_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MODELVIEW29_ARB 0x873D
        public const int GL_MODELVIEW29_ARB = 0x873D;
        #endregion GL_MODELVIEW29_ARB

        #region GL_MODELVIEW30_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MODELVIEW30_ARB 0x873E
        public const int GL_MODELVIEW30_ARB = 0x873E;
        #endregion GL_MODELVIEW30_ARB

        #region GL_MODELVIEW31_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MODELVIEW31_ARB 0x873F
        public const int GL_MODELVIEW31_ARB = 0x873F;
        #endregion GL_MODELVIEW31_ARB

        #region GL_CURRENT_WEIGHT_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_CURRENT_WEIGHT_ARB 0x86A8
        public const int GL_CURRENT_WEIGHT_ARB = 0x86A8;
        #endregion GL_CURRENT_WEIGHT_ARB

        #region GL_WEIGHT_ARRAY_TYPE_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_WEIGHT_ARRAY_TYPE_ARB 0x86A9
        public const int GL_WEIGHT_ARRAY_TYPE_ARB = 0x86A9;
        #endregion GL_WEIGHT_ARRAY_TYPE_ARB

        #region GL_WEIGHT_ARRAY_STRIDE_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_WEIGHT_ARRAY_STRIDE_ARB 0x86AA
        public const int GL_WEIGHT_ARRAY_STRIDE_ARB = 0x86AA;
        #endregion GL_WEIGHT_ARRAY_STRIDE_ARB

        #region GL_WEIGHT_ARRAY_SIZE_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_WEIGHT_ARRAY_SIZE_ARB 0x86AB
        public const int GL_WEIGHT_ARRAY_SIZE_ARB = 0x86AB;
        #endregion GL_WEIGHT_ARRAY_SIZE_ARB

        #region GL_WEIGHT_ARRAY_POINTER_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_WEIGHT_ARRAY_POINTER_ARB 0x86AC
        public const int GL_WEIGHT_ARRAY_POINTER_ARB = 0x86AC;
        #endregion GL_WEIGHT_ARRAY_POINTER_ARB

        #region GL_WEIGHT_ARRAY_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_WEIGHT_ARRAY_ARB 0x86AD
        public const int GL_WEIGHT_ARRAY_ARB = 0x86AD;
        #endregion GL_WEIGHT_ARRAY_ARB
        #endregion GL_ARB_vertex_blend Constants

        #region GL_ARB_vertex_blend Methods
        #region Overloads for GLvoid glWeightbvARB(GLint size, GLbyte* weights)
        #region void glWeightbvARB([In] IntPtr extensionPointer, int size, byte[] weights)
        // GLvoid glWeightbvARB(GLint size, GLbyte* weights)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg weights\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]unsigned int8[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg weights\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]unsigned int8[])\r\nret")]
        #endif
        public static void glWeightbvARB([In] IntPtr extensionPointer, int size, byte[] weights) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWeightbvARB([In] IntPtr extensionPointer, int size, byte[] weights)

        #region void glWeightbvARB([In] IntPtr extensionPointer, int size, ref byte weights)
        // GLvoid glWeightbvARB(GLint size, GLbyte* weights)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg weights\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]unsigned int8)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg weights\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]unsigned int8)\r\nret")]
        #endif
        public static void glWeightbvARB([In] IntPtr extensionPointer, int size, ref byte weights) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWeightbvARB([In] IntPtr extensionPointer, int size, ref byte weights)

        #region void glWeightbvARB([In] IntPtr extensionPointer, int size, IntPtr weights)
        // GLvoid glWeightbvARB(GLint size, GLbyte* weights)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg weights\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg weights\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glWeightbvARB([In] IntPtr extensionPointer, int size, IntPtr weights) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWeightbvARB([In] IntPtr extensionPointer, int size, IntPtr weights)

        #region void glWeightbvARB([In] IntPtr extensionPointer, int size, ref sbyte weights)
        // GLvoid glWeightbvARB(GLint size, GLbyte* weights)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg weights\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]int8)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg weights\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]int8)\r\nret")]
        #endif
        public static void glWeightbvARB([In] IntPtr extensionPointer, int size, ref sbyte weights) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWeightbvARB([In] IntPtr extensionPointer, int size, ref sbyte weights)

        #region void glWeightbvARB([In] IntPtr extensionPointer, int size, sbyte[] weights)
        // GLvoid glWeightbvARB(GLint size, GLbyte* weights)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg weights\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int8[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg weights\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int8[])\r\nret")]
        #endif
        public static void glWeightbvARB([In] IntPtr extensionPointer, int size, sbyte[] weights) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWeightbvARB([In] IntPtr extensionPointer, int size, sbyte[] weights)

        #region void glWeightbvARB([In] IntPtr extensionPointer, int size, sbyte* weights)
        // GLvoid glWeightbvARB(GLint size, GLbyte* weights)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg weights\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int8*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg weights\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int8*)\r\nret")]
        #endif
        public static unsafe void glWeightbvARB([In] IntPtr extensionPointer, int size, sbyte* weights) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWeightbvARB([In] IntPtr extensionPointer, int size, sbyte* weights)
        #endregion Overloads for GLvoid glWeightbvARB(GLint size, GLbyte* weights)

        #region Overloads for GLvoid glWeightsvARB(GLint size, GLshort* weights)
        #region void glWeightsvARB([In] IntPtr extensionPointer, int size, ref short weights)
        // GLvoid glWeightsvARB(GLint size, GLshort* weights)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg weights\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg weights\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]int16)\r\nret")]
        #endif
        public static void glWeightsvARB([In] IntPtr extensionPointer, int size, ref short weights) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWeightsvARB([In] IntPtr extensionPointer, int size, ref short weights)

        #region void glWeightsvARB([In] IntPtr extensionPointer, int size, short[] weights)
        // GLvoid glWeightsvARB(GLint size, GLshort* weights)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg weights\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg weights\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int16[])\r\nret")]
        #endif
        public static void glWeightsvARB([In] IntPtr extensionPointer, int size, short[] weights) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWeightsvARB([In] IntPtr extensionPointer, int size, short[] weights)

        #region void glWeightsvARB([In] IntPtr extensionPointer, int size, IntPtr weights)
        // GLvoid glWeightsvARB(GLint size, GLshort* weights)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg weights\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg weights\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glWeightsvARB([In] IntPtr extensionPointer, int size, IntPtr weights) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWeightsvARB([In] IntPtr extensionPointer, int size, IntPtr weights)

        #region void glWeightsvARB([In] IntPtr extensionPointer, int size, short* weights)
        // GLvoid glWeightsvARB(GLint size, GLshort* weights)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg weights\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int16*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg weights\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int16*)\r\nret")]
        #endif
        public static unsafe void glWeightsvARB([In] IntPtr extensionPointer, int size, short* weights) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWeightsvARB([In] IntPtr extensionPointer, int size, short* weights)
        #endregion Overloads for GLvoid glWeightsvARB(GLint size, GLshort* weights)

        #region Overloads for GLvoid glWeightivARB(GLint size, GLint* weights)
        #region void glWeightivARB([In] IntPtr extensionPointer, int size, ref int weights)
        // GLvoid glWeightivARB(GLint size, GLint* weights)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg weights\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg weights\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]int32)\r\nret")]
        #endif
        public static void glWeightivARB([In] IntPtr extensionPointer, int size, ref int weights) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWeightivARB([In] IntPtr extensionPointer, int size, ref int weights)

        #region void glWeightivARB([In] IntPtr extensionPointer, int size, int[] weights)
        // GLvoid glWeightivARB(GLint size, GLint* weights)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg weights\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg weights\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32[])\r\nret")]
        #endif
        public static void glWeightivARB([In] IntPtr extensionPointer, int size, int[] weights) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWeightivARB([In] IntPtr extensionPointer, int size, int[] weights)

        #region void glWeightivARB([In] IntPtr extensionPointer, int size, IntPtr weights)
        // GLvoid glWeightivARB(GLint size, GLint* weights)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg weights\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg weights\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glWeightivARB([In] IntPtr extensionPointer, int size, IntPtr weights) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWeightivARB([In] IntPtr extensionPointer, int size, IntPtr weights)

        #region void glWeightivARB([In] IntPtr extensionPointer, int size, int* weights)
        // GLvoid glWeightivARB(GLint size, GLint* weights)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg weights\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg weights\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32*)\r\nret")]
        #endif
        public static unsafe void glWeightivARB([In] IntPtr extensionPointer, int size, int* weights) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWeightivARB([In] IntPtr extensionPointer, int size, int* weights)
        #endregion Overloads for GLvoid glWeightivARB(GLint size, GLint* weights)

        #region Overloads for GLvoid glWeightfvARB(GLint size, GLfloat* weights)
        #region void glWeightfvARB([In] IntPtr extensionPointer, int size, ref float weights)
        // GLvoid glWeightfvARB(GLint size, GLfloat* weights)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg weights\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg weights\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]float32)\r\nret")]
        #endif
        public static void glWeightfvARB([In] IntPtr extensionPointer, int size, ref float weights) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWeightfvARB([In] IntPtr extensionPointer, int size, ref float weights)

        #region void glWeightfvARB([In] IntPtr extensionPointer, int size, float[] weights)
        // GLvoid glWeightfvARB(GLint size, GLfloat* weights)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg weights\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg weights\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float32[])\r\nret")]
        #endif
        public static void glWeightfvARB([In] IntPtr extensionPointer, int size, float[] weights) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWeightfvARB([In] IntPtr extensionPointer, int size, float[] weights)

        #region void glWeightfvARB([In] IntPtr extensionPointer, int size, IntPtr weights)
        // GLvoid glWeightfvARB(GLint size, GLfloat* weights)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg weights\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg weights\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glWeightfvARB([In] IntPtr extensionPointer, int size, IntPtr weights) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWeightfvARB([In] IntPtr extensionPointer, int size, IntPtr weights)

        #region void glWeightfvARB([In] IntPtr extensionPointer, int size, float* weights)
        // GLvoid glWeightfvARB(GLint size, GLfloat* weights)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg weights\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg weights\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float32*)\r\nret")]
        #endif
        public static unsafe void glWeightfvARB([In] IntPtr extensionPointer, int size, float* weights) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWeightfvARB([In] IntPtr extensionPointer, int size, float* weights)
        #endregion Overloads for GLvoid glWeightfvARB(GLint size, GLfloat* weights)

        #region Overloads for GLvoid glWeightdvARB(GLint size, GLdouble* weights)
        #region void glWeightdvARB([In] IntPtr extensionPointer, int size, ref double weights)
        // GLvoid glWeightdvARB(GLint size, GLdouble* weights)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg weights\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]float64)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg weights\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]float64)\r\nret")]
        #endif
        public static void glWeightdvARB([In] IntPtr extensionPointer, int size, ref double weights) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWeightdvARB([In] IntPtr extensionPointer, int size, ref double weights)

        #region void glWeightdvARB([In] IntPtr extensionPointer, int size, double[] weights)
        // GLvoid glWeightdvARB(GLint size, GLdouble* weights)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg weights\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float64[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg weights\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float64[])\r\nret")]
        #endif
        public static void glWeightdvARB([In] IntPtr extensionPointer, int size, double[] weights) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWeightdvARB([In] IntPtr extensionPointer, int size, double[] weights)

        #region void glWeightdvARB([In] IntPtr extensionPointer, int size, IntPtr weights)
        // GLvoid glWeightdvARB(GLint size, GLdouble* weights)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg weights\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg weights\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glWeightdvARB([In] IntPtr extensionPointer, int size, IntPtr weights) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWeightdvARB([In] IntPtr extensionPointer, int size, IntPtr weights)

        #region void glWeightdvARB([In] IntPtr extensionPointer, int size, double* weights)
        // GLvoid glWeightdvARB(GLint size, GLdouble* weights)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg weights\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float64*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg weights\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float64*)\r\nret")]
        #endif
        public static unsafe void glWeightdvARB([In] IntPtr extensionPointer, int size, double* weights) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWeightdvARB([In] IntPtr extensionPointer, int size, double* weights)
        #endregion Overloads for GLvoid glWeightdvARB(GLint size, GLdouble* weights)

        #region Overloads for GLvoid glWeightubvARB(GLint size, GLubyte* weights)
        #region void glWeightubvARB([In] IntPtr extensionPointer, int size, ref byte weights)
        // GLvoid glWeightubvARB(GLint size, GLubyte* weights)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg weights\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]unsigned int8)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg weights\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]unsigned int8)\r\nret")]
        #endif
        public static void glWeightubvARB([In] IntPtr extensionPointer, int size, ref byte weights) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWeightubvARB([In] IntPtr extensionPointer, int size, ref byte weights)

        #region void glWeightubvARB([In] IntPtr extensionPointer, int size, byte[] weights)
        // GLvoid glWeightubvARB(GLint size, GLubyte* weights)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg weights\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]unsigned int8[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg weights\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]unsigned int8[])\r\nret")]
        #endif
        public static void glWeightubvARB([In] IntPtr extensionPointer, int size, byte[] weights) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWeightubvARB([In] IntPtr extensionPointer, int size, byte[] weights)

        #region void glWeightubvARB([In] IntPtr extensionPointer, int size, IntPtr weights)
        // GLvoid glWeightubvARB(GLint size, GLubyte* weights)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg weights\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg weights\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glWeightubvARB([In] IntPtr extensionPointer, int size, IntPtr weights) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWeightubvARB([In] IntPtr extensionPointer, int size, IntPtr weights)

        #region void glWeightubvARB([In] IntPtr extensionPointer, int size, byte* weights)
        // GLvoid glWeightubvARB(GLint size, GLubyte* weights)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg weights\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]unsigned int8*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg weights\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]unsigned int8*)\r\nret")]
        #endif
        public static unsafe void glWeightubvARB([In] IntPtr extensionPointer, int size, byte* weights) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWeightubvARB([In] IntPtr extensionPointer, int size, byte* weights)
        #endregion Overloads for GLvoid glWeightubvARB(GLint size, GLubyte* weights)

        #region Overloads for GLvoid glWeightusvARB(GLint size, GLushort* weights)
        #region void glWeightusvARB([In] IntPtr extensionPointer, int size, short[] weights)
        // GLvoid glWeightusvARB(GLint size, GLushort* weights)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg weights\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg weights\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int16[])\r\nret")]
        #endif
        public static void glWeightusvARB([In] IntPtr extensionPointer, int size, short[] weights) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWeightusvARB([In] IntPtr extensionPointer, int size, short[] weights)

        #region void glWeightusvARB([In] IntPtr extensionPointer, int size, ref short weights)
        // GLvoid glWeightusvARB(GLint size, GLushort* weights)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg weights\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg weights\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]int16)\r\nret")]
        #endif
        public static void glWeightusvARB([In] IntPtr extensionPointer, int size, ref short weights) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWeightusvARB([In] IntPtr extensionPointer, int size, ref short weights)

        #region void glWeightusvARB([In] IntPtr extensionPointer, int size, IntPtr weights)
        // GLvoid glWeightusvARB(GLint size, GLushort* weights)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg weights\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg weights\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glWeightusvARB([In] IntPtr extensionPointer, int size, IntPtr weights) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWeightusvARB([In] IntPtr extensionPointer, int size, IntPtr weights)

        #region void glWeightusvARB([In] IntPtr extensionPointer, int size, ref ushort weights)
        // GLvoid glWeightusvARB(GLint size, GLushort* weights)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg weights\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]unsigned int16)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg weights\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]unsigned int16)\r\nret")]
        #endif
        public static void glWeightusvARB([In] IntPtr extensionPointer, int size, ref ushort weights) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWeightusvARB([In] IntPtr extensionPointer, int size, ref ushort weights)

        #region void glWeightusvARB([In] IntPtr extensionPointer, int size, ushort[] weights)
        // GLvoid glWeightusvARB(GLint size, GLushort* weights)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg weights\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]unsigned int16[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg weights\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]unsigned int16[])\r\nret")]
        #endif
        public static void glWeightusvARB([In] IntPtr extensionPointer, int size, ushort[] weights) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWeightusvARB([In] IntPtr extensionPointer, int size, ushort[] weights)

        #region void glWeightusvARB([In] IntPtr extensionPointer, int size, ushort* weights)
        // GLvoid glWeightusvARB(GLint size, GLushort* weights)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg weights\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]unsigned int16*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg weights\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]unsigned int16*)\r\nret")]
        #endif
        public static unsafe void glWeightusvARB([In] IntPtr extensionPointer, int size, ushort* weights) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWeightusvARB([In] IntPtr extensionPointer, int size, ushort* weights)
        #endregion Overloads for GLvoid glWeightusvARB(GLint size, GLushort* weights)

        #region Overloads for GLvoid glWeightuivARB(GLint size, GLuint* weights)
        #region void glWeightuivARB([In] IntPtr extensionPointer, int size, int[] weights)
        // GLvoid glWeightuivARB(GLint size, GLuint* weights)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg weights\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg weights\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32[])\r\nret")]
        #endif
        public static void glWeightuivARB([In] IntPtr extensionPointer, int size, int[] weights) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWeightuivARB([In] IntPtr extensionPointer, int size, int[] weights)

        #region void glWeightuivARB([In] IntPtr extensionPointer, int size, ref int weights)
        // GLvoid glWeightuivARB(GLint size, GLuint* weights)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg weights\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg weights\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]int32)\r\nret")]
        #endif
        public static void glWeightuivARB([In] IntPtr extensionPointer, int size, ref int weights) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWeightuivARB([In] IntPtr extensionPointer, int size, ref int weights)

        #region void glWeightuivARB([In] IntPtr extensionPointer, int size, IntPtr weights)
        // GLvoid glWeightuivARB(GLint size, GLuint* weights)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg weights\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg weights\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glWeightuivARB([In] IntPtr extensionPointer, int size, IntPtr weights) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWeightuivARB([In] IntPtr extensionPointer, int size, IntPtr weights)

        #region void glWeightuivARB([In] IntPtr extensionPointer, int size, ref uint weights)
        // GLvoid glWeightuivARB(GLint size, GLuint* weights)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg weights\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]unsigned int32)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg weights\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]unsigned int32)\r\nret")]
        #endif
        public static void glWeightuivARB([In] IntPtr extensionPointer, int size, ref uint weights) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWeightuivARB([In] IntPtr extensionPointer, int size, ref uint weights)

        #region void glWeightuivARB([In] IntPtr extensionPointer, int size, uint[] weights)
        // GLvoid glWeightuivARB(GLint size, GLuint* weights)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg weights\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]unsigned int32[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg weights\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]unsigned int32[])\r\nret")]
        #endif
        public static void glWeightuivARB([In] IntPtr extensionPointer, int size, uint[] weights) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWeightuivARB([In] IntPtr extensionPointer, int size, uint[] weights)

        #region void glWeightuivARB([In] IntPtr extensionPointer, int size, uint* weights)
        // GLvoid glWeightuivARB(GLint size, GLuint* weights)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg weights\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]unsigned int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg weights\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]unsigned int32*)\r\nret")]
        #endif
        public static unsafe void glWeightuivARB([In] IntPtr extensionPointer, int size, uint* weights) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWeightuivARB([In] IntPtr extensionPointer, int size, uint* weights)
        #endregion Overloads for GLvoid glWeightuivARB(GLint size, GLuint* weights)

        #region Overloads for GLvoid glWeightPointerARB(GLint size, GLenum type, GLsizei stride, GLvoid* pointer)
        #region void glWeightPointerARB([In] IntPtr extensionPointer, int size, int type, int stride, short[] pointer)
        // GLvoid glWeightPointerARB(GLint size, GLenum type, GLsizei stride, GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int16[])\r\nret")]
        #endif
        public static void glWeightPointerARB([In] IntPtr extensionPointer, int size, int type, int stride, short[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWeightPointerARB([In] IntPtr extensionPointer, int size, int type, int stride, short[] pointer)

        #region void glWeightPointerARB([In] IntPtr extensionPointer, int size, int type, int stride, float[] pointer)
        // GLvoid glWeightPointerARB(GLint size, GLenum type, GLsizei stride, GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]float32[])\r\nret")]
        #endif
        public static void glWeightPointerARB([In] IntPtr extensionPointer, int size, int type, int stride, float[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWeightPointerARB([In] IntPtr extensionPointer, int size, int type, int stride, float[] pointer)

        #region void glWeightPointerARB([In] IntPtr extensionPointer, int size, int type, int stride, int[] pointer)
        // GLvoid glWeightPointerARB(GLint size, GLenum type, GLsizei stride, GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32[])\r\nret")]
        #endif
        public static void glWeightPointerARB([In] IntPtr extensionPointer, int size, int type, int stride, int[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWeightPointerARB([In] IntPtr extensionPointer, int size, int type, int stride, int[] pointer)

        #region void glWeightPointerARB([In] IntPtr extensionPointer, int size, int type, int stride, IntPtr pointer)
        // GLvoid glWeightPointerARB(GLint size, GLenum type, GLsizei stride, GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]native int)\r\nret")]
        #endif
        public static void glWeightPointerARB([In] IntPtr extensionPointer, int size, int type, int stride, IntPtr pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWeightPointerARB([In] IntPtr extensionPointer, int size, int type, int stride, IntPtr pointer)

        #region void glWeightPointerARB([In] IntPtr extensionPointer, int size, int type, int stride, byte[] pointer)
        // GLvoid glWeightPointerARB(GLint size, GLenum type, GLsizei stride, GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]unsigned int8[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]unsigned int8[])\r\nret")]
        #endif
        public static void glWeightPointerARB([In] IntPtr extensionPointer, int size, int type, int stride, byte[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWeightPointerARB([In] IntPtr extensionPointer, int size, int type, int stride, byte[] pointer)

        #region void glWeightPointerARB([In] IntPtr extensionPointer, int size, int type, int stride, double[] pointer)
        // GLvoid glWeightPointerARB(GLint size, GLenum type, GLsizei stride, GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]float64[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]float64[])\r\nret")]
        #endif
        public static void glWeightPointerARB([In] IntPtr extensionPointer, int size, int type, int stride, double[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWeightPointerARB([In] IntPtr extensionPointer, int size, int type, int stride, double[] pointer)

        #region void glWeightPointerARB([In] IntPtr extensionPointer, int size, int type, int stride, uint[] pointer)
        // GLvoid glWeightPointerARB(GLint size, GLenum type, GLsizei stride, GLvoid* pointer)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]unsigned int32[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]unsigned int32[])\r\nret")]
        #endif
        public static void glWeightPointerARB([In] IntPtr extensionPointer, int size, int type, int stride, uint[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWeightPointerARB([In] IntPtr extensionPointer, int size, int type, int stride, uint[] pointer)

        #region void glWeightPointerARB([In] IntPtr extensionPointer, int size, int type, int stride, sbyte[] pointer)
        // GLvoid glWeightPointerARB(GLint size, GLenum type, GLsizei stride, GLvoid* pointer)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int8[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int8[])\r\nret")]
        #endif
        public static void glWeightPointerARB([In] IntPtr extensionPointer, int size, int type, int stride, sbyte[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWeightPointerARB([In] IntPtr extensionPointer, int size, int type, int stride, sbyte[] pointer)

        #region void glWeightPointerARB([In] IntPtr extensionPointer, int size, int type, int stride, ushort[] pointer)
        // GLvoid glWeightPointerARB(GLint size, GLenum type, GLsizei stride, GLvoid* pointer)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]unsigned int16[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]unsigned int16[])\r\nret")]
        #endif
        public static void glWeightPointerARB([In] IntPtr extensionPointer, int size, int type, int stride, ushort[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWeightPointerARB([In] IntPtr extensionPointer, int size, int type, int stride, ushort[] pointer)

        #region void glWeightPointerARB([In] IntPtr extensionPointer, int size, int type, int stride, void* pointer)
        // GLvoid glWeightPointerARB(GLint size, GLenum type, GLsizei stride, GLvoid* pointer)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]void*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]void*)\r\nret")]
        #endif
        public static unsafe void glWeightPointerARB([In] IntPtr extensionPointer, int size, int type, int stride, void* pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWeightPointerARB([In] IntPtr extensionPointer, int size, int type, int stride, void* pointer)
        #endregion Overloads for GLvoid glWeightPointerARB(GLint size, GLenum type, GLsizei stride, GLvoid* pointer)

        #region void glVertexBlendARB([In] IntPtr extensionPointer, int count)
        // GLvoid glVertexBlendARB(GLint count)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg count\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg count\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32)\r\nret")]
        #endif
        public static void glVertexBlendARB([In] IntPtr extensionPointer, int count) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexBlendARB([In] IntPtr extensionPointer, int count)
        #endregion GL_ARB_vertex_blend Methods
        #endregion GL_ARB_vertex_blend (15)

        #region GL_ARB_matrix_palette (16)
        #region GL_ARB_matrix_palette Constants
        #region GL_MATRIX_PALETTE_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MATRIX_PALETTE_ARB 0x8840
        public const int GL_MATRIX_PALETTE_ARB = 0x8840;
        #endregion GL_MATRIX_PALETTE_ARB

        #region GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB 0x8841
        public const int GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB = 0x8841;
        #endregion GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB

        #region GL_MAX_PALETTE_MATRICES_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAX_PALETTE_MATRICES_ARB 0x8842
        public const int GL_MAX_PALETTE_MATRICES_ARB = 0x8842;
        #endregion GL_MAX_PALETTE_MATRICES_ARB

        #region GL_CURRENT_PALETTE_MATRIX_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_CURRENT_PALETTE_MATRIX_ARB 0x8843
        public const int GL_CURRENT_PALETTE_MATRIX_ARB = 0x8843;
        #endregion GL_CURRENT_PALETTE_MATRIX_ARB

        #region GL_MATRIX_INDEX_ARRAY_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MATRIX_INDEX_ARRAY_ARB 0x8844
        public const int GL_MATRIX_INDEX_ARRAY_ARB = 0x8844;
        #endregion GL_MATRIX_INDEX_ARRAY_ARB

        #region GL_CURRENT_MATRIX_INDEX_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_CURRENT_MATRIX_INDEX_ARB 0x8845
        public const int GL_CURRENT_MATRIX_INDEX_ARB = 0x8845;
        #endregion GL_CURRENT_MATRIX_INDEX_ARB

        #region GL_MATRIX_INDEX_ARRAY_SIZE_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MATRIX_INDEX_ARRAY_SIZE_ARB 0x8846
        public const int GL_MATRIX_INDEX_ARRAY_SIZE_ARB = 0x8846;
        #endregion GL_MATRIX_INDEX_ARRAY_SIZE_ARB

        #region GL_MATRIX_INDEX_ARRAY_TYPE_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MATRIX_INDEX_ARRAY_TYPE_ARB 0x8847
        public const int GL_MATRIX_INDEX_ARRAY_TYPE_ARB = 0x8847;
        #endregion GL_MATRIX_INDEX_ARRAY_TYPE_ARB

        #region GL_MATRIX_INDEX_ARRAY_STRIDE_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MATRIX_INDEX_ARRAY_STRIDE_ARB 0x8848
        public const int GL_MATRIX_INDEX_ARRAY_STRIDE_ARB = 0x8848;
        #endregion GL_MATRIX_INDEX_ARRAY_STRIDE_ARB

        #region GL_MATRIX_INDEX_ARRAY_POINTER_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MATRIX_INDEX_ARRAY_POINTER_ARB 0x8849
        public const int GL_MATRIX_INDEX_ARRAY_POINTER_ARB = 0x8849;
        #endregion GL_MATRIX_INDEX_ARRAY_POINTER_ARB
        #endregion GL_ARB_matrix_palette Constants

        #region GL_ARB_matrix_palette Methods
        #region void glCurrentPaletteMatrixARB([In] IntPtr extensionPointer, int index)
        // GLvoid glCurrentPaletteMatrixARB(GLint index)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg index\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg index\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32)\r\nret")]
        #endif
        public static void glCurrentPaletteMatrixARB([In] IntPtr extensionPointer, int index) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glCurrentPaletteMatrixARB([In] IntPtr extensionPointer, int index)

        #region Overloads for GLvoid glMatrixIndexubvARB(GLint size, GLubyte* indices)
        #region void glMatrixIndexubvARB([In] IntPtr extensionPointer, int size, ref byte indices)
        // GLvoid glMatrixIndexubvARB(GLint size, GLubyte* indices)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg indices\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]unsigned int8)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg indices\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]unsigned int8)\r\nret")]
        #endif
        public static void glMatrixIndexubvARB([In] IntPtr extensionPointer, int size, ref byte indices) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMatrixIndexubvARB([In] IntPtr extensionPointer, int size, ref byte indices)

        #region void glMatrixIndexubvARB([In] IntPtr extensionPointer, int size, byte[] indices)
        // GLvoid glMatrixIndexubvARB(GLint size, GLubyte* indices)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg indices\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]unsigned int8[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg indices\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]unsigned int8[])\r\nret")]
        #endif
        public static void glMatrixIndexubvARB([In] IntPtr extensionPointer, int size, byte[] indices) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMatrixIndexubvARB([In] IntPtr extensionPointer, int size, byte[] indices)

        #region void glMatrixIndexubvARB([In] IntPtr extensionPointer, int size, IntPtr indices)
        // GLvoid glMatrixIndexubvARB(GLint size, GLubyte* indices)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg indices\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg indices\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glMatrixIndexubvARB([In] IntPtr extensionPointer, int size, IntPtr indices) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMatrixIndexubvARB([In] IntPtr extensionPointer, int size, IntPtr indices)

        #region void glMatrixIndexubvARB([In] IntPtr extensionPointer, int size, byte* indices)
        // GLvoid glMatrixIndexubvARB(GLint size, GLubyte* indices)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg indices\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]unsigned int8*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg indices\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]unsigned int8*)\r\nret")]
        #endif
        public static unsafe void glMatrixIndexubvARB([In] IntPtr extensionPointer, int size, byte* indices) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMatrixIndexubvARB([In] IntPtr extensionPointer, int size, byte* indices)
        #endregion Overloads for GLvoid glMatrixIndexubvARB(GLint size, GLubyte* indices)

        #region Overloads for GLvoid glMatrixIndexusvARB(GLint size, GLushort* indices)
        #region void glMatrixIndexusvARB([In] IntPtr extensionPointer, int size, short[] indices)
        // GLvoid glMatrixIndexusvARB(GLint size, GLushort* indices)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg indices\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg indices\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int16[])\r\nret")]
        #endif
        public static void glMatrixIndexusvARB([In] IntPtr extensionPointer, int size, short[] indices) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMatrixIndexusvARB([In] IntPtr extensionPointer, int size, short[] indices)

        #region void glMatrixIndexusvARB([In] IntPtr extensionPointer, int size, ref short indices)
        // GLvoid glMatrixIndexusvARB(GLint size, GLushort* indices)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg indices\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg indices\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]int16)\r\nret")]
        #endif
        public static void glMatrixIndexusvARB([In] IntPtr extensionPointer, int size, ref short indices) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMatrixIndexusvARB([In] IntPtr extensionPointer, int size, ref short indices)

        #region void glMatrixIndexusvARB([In] IntPtr extensionPointer, int size, IntPtr indices)
        // GLvoid glMatrixIndexusvARB(GLint size, GLushort* indices)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg indices\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg indices\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glMatrixIndexusvARB([In] IntPtr extensionPointer, int size, IntPtr indices) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMatrixIndexusvARB([In] IntPtr extensionPointer, int size, IntPtr indices)

        #region void glMatrixIndexusvARB([In] IntPtr extensionPointer, int size, ref ushort indices)
        // GLvoid glMatrixIndexusvARB(GLint size, GLushort* indices)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg indices\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]unsigned int16)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg indices\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]unsigned int16)\r\nret")]
        #endif
        public static void glMatrixIndexusvARB([In] IntPtr extensionPointer, int size, ref ushort indices) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMatrixIndexusvARB([In] IntPtr extensionPointer, int size, ref ushort indices)

        #region void glMatrixIndexusvARB([In] IntPtr extensionPointer, int size, ushort[] indices)
        // GLvoid glMatrixIndexusvARB(GLint size, GLushort* indices)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg indices\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]unsigned int16[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg indices\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]unsigned int16[])\r\nret")]
        #endif
        public static void glMatrixIndexusvARB([In] IntPtr extensionPointer, int size, ushort[] indices) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMatrixIndexusvARB([In] IntPtr extensionPointer, int size, ushort[] indices)

        #region void glMatrixIndexusvARB([In] IntPtr extensionPointer, int size, ushort* indices)
        // GLvoid glMatrixIndexusvARB(GLint size, GLushort* indices)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg indices\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]unsigned int16*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg indices\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]unsigned int16*)\r\nret")]
        #endif
        public static unsafe void glMatrixIndexusvARB([In] IntPtr extensionPointer, int size, ushort* indices) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMatrixIndexusvARB([In] IntPtr extensionPointer, int size, ushort* indices)
        #endregion Overloads for GLvoid glMatrixIndexusvARB(GLint size, GLushort* indices)

        #region Overloads for GLvoid glMatrixIndexuivARB(GLint size, GLuint* indices)
        #region void glMatrixIndexuivARB([In] IntPtr extensionPointer, int size, int[] indices)
        // GLvoid glMatrixIndexuivARB(GLint size, GLuint* indices)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg indices\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg indices\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32[])\r\nret")]
        #endif
        public static void glMatrixIndexuivARB([In] IntPtr extensionPointer, int size, int[] indices) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMatrixIndexuivARB([In] IntPtr extensionPointer, int size, int[] indices)

        #region void glMatrixIndexuivARB([In] IntPtr extensionPointer, int size, ref int indices)
        // GLvoid glMatrixIndexuivARB(GLint size, GLuint* indices)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg indices\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg indices\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]int32)\r\nret")]
        #endif
        public static void glMatrixIndexuivARB([In] IntPtr extensionPointer, int size, ref int indices) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMatrixIndexuivARB([In] IntPtr extensionPointer, int size, ref int indices)

        #region void glMatrixIndexuivARB([In] IntPtr extensionPointer, int size, IntPtr indices)
        // GLvoid glMatrixIndexuivARB(GLint size, GLuint* indices)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg indices\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg indices\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glMatrixIndexuivARB([In] IntPtr extensionPointer, int size, IntPtr indices) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMatrixIndexuivARB([In] IntPtr extensionPointer, int size, IntPtr indices)

        #region void glMatrixIndexuivARB([In] IntPtr extensionPointer, int size, ref uint indices)
        // GLvoid glMatrixIndexuivARB(GLint size, GLuint* indices)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg indices\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]unsigned int32)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg indices\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]unsigned int32)\r\nret")]
        #endif
        public static void glMatrixIndexuivARB([In] IntPtr extensionPointer, int size, ref uint indices) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMatrixIndexuivARB([In] IntPtr extensionPointer, int size, ref uint indices)

        #region void glMatrixIndexuivARB([In] IntPtr extensionPointer, int size, uint[] indices)
        // GLvoid glMatrixIndexuivARB(GLint size, GLuint* indices)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg indices\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]unsigned int32[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg indices\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]unsigned int32[])\r\nret")]
        #endif
        public static void glMatrixIndexuivARB([In] IntPtr extensionPointer, int size, uint[] indices) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMatrixIndexuivARB([In] IntPtr extensionPointer, int size, uint[] indices)

        #region void glMatrixIndexuivARB([In] IntPtr extensionPointer, int size, uint* indices)
        // GLvoid glMatrixIndexuivARB(GLint size, GLuint* indices)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg indices\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]unsigned int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg size\r\nldarg indices\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]unsigned int32*)\r\nret")]
        #endif
        public static unsafe void glMatrixIndexuivARB([In] IntPtr extensionPointer, int size, uint* indices) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMatrixIndexuivARB([In] IntPtr extensionPointer, int size, uint* indices)
        #endregion Overloads for GLvoid glMatrixIndexuivARB(GLint size, GLuint* indices)

        #region Overloads for GLvoid glMatrixIndexPointerARB(GLint size, GLenum type, GLsizei stride, GLvoid* pointer)
        #region void glMatrixIndexPointerARB([In] IntPtr extensionPointer, int size, int type, int stride, short[] pointer)
        // GLvoid glMatrixIndexPointerARB(GLint size, GLenum type, GLsizei stride, GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int16[])\r\nret")]
        #endif
        public static void glMatrixIndexPointerARB([In] IntPtr extensionPointer, int size, int type, int stride, short[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMatrixIndexPointerARB([In] IntPtr extensionPointer, int size, int type, int stride, short[] pointer)

        #region void glMatrixIndexPointerARB([In] IntPtr extensionPointer, int size, int type, int stride, float[] pointer)
        // GLvoid glMatrixIndexPointerARB(GLint size, GLenum type, GLsizei stride, GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]float32[])\r\nret")]
        #endif
        public static void glMatrixIndexPointerARB([In] IntPtr extensionPointer, int size, int type, int stride, float[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMatrixIndexPointerARB([In] IntPtr extensionPointer, int size, int type, int stride, float[] pointer)

        #region void glMatrixIndexPointerARB([In] IntPtr extensionPointer, int size, int type, int stride, int[] pointer)
        // GLvoid glMatrixIndexPointerARB(GLint size, GLenum type, GLsizei stride, GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32[])\r\nret")]
        #endif
        public static void glMatrixIndexPointerARB([In] IntPtr extensionPointer, int size, int type, int stride, int[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMatrixIndexPointerARB([In] IntPtr extensionPointer, int size, int type, int stride, int[] pointer)

        #region void glMatrixIndexPointerARB([In] IntPtr extensionPointer, int size, int type, int stride, IntPtr pointer)
        // GLvoid glMatrixIndexPointerARB(GLint size, GLenum type, GLsizei stride, GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]native int)\r\nret")]
        #endif
        public static void glMatrixIndexPointerARB([In] IntPtr extensionPointer, int size, int type, int stride, IntPtr pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMatrixIndexPointerARB([In] IntPtr extensionPointer, int size, int type, int stride, IntPtr pointer)

        #region void glMatrixIndexPointerARB([In] IntPtr extensionPointer, int size, int type, int stride, byte[] pointer)
        // GLvoid glMatrixIndexPointerARB(GLint size, GLenum type, GLsizei stride, GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]unsigned int8[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]unsigned int8[])\r\nret")]
        #endif
        public static void glMatrixIndexPointerARB([In] IntPtr extensionPointer, int size, int type, int stride, byte[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMatrixIndexPointerARB([In] IntPtr extensionPointer, int size, int type, int stride, byte[] pointer)

        #region void glMatrixIndexPointerARB([In] IntPtr extensionPointer, int size, int type, int stride, double[] pointer)
        // GLvoid glMatrixIndexPointerARB(GLint size, GLenum type, GLsizei stride, GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]float64[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]float64[])\r\nret")]
        #endif
        public static void glMatrixIndexPointerARB([In] IntPtr extensionPointer, int size, int type, int stride, double[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMatrixIndexPointerARB([In] IntPtr extensionPointer, int size, int type, int stride, double[] pointer)

        #region void glMatrixIndexPointerARB([In] IntPtr extensionPointer, int size, int type, int stride, uint[] pointer)
        // GLvoid glMatrixIndexPointerARB(GLint size, GLenum type, GLsizei stride, GLvoid* pointer)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]unsigned int32[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]unsigned int32[])\r\nret")]
        #endif
        public static void glMatrixIndexPointerARB([In] IntPtr extensionPointer, int size, int type, int stride, uint[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMatrixIndexPointerARB([In] IntPtr extensionPointer, int size, int type, int stride, uint[] pointer)

        #region void glMatrixIndexPointerARB([In] IntPtr extensionPointer, int size, int type, int stride, sbyte[] pointer)
        // GLvoid glMatrixIndexPointerARB(GLint size, GLenum type, GLsizei stride, GLvoid* pointer)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int8[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int8[])\r\nret")]
        #endif
        public static void glMatrixIndexPointerARB([In] IntPtr extensionPointer, int size, int type, int stride, sbyte[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMatrixIndexPointerARB([In] IntPtr extensionPointer, int size, int type, int stride, sbyte[] pointer)

        #region void glMatrixIndexPointerARB([In] IntPtr extensionPointer, int size, int type, int stride, ushort[] pointer)
        // GLvoid glMatrixIndexPointerARB(GLint size, GLenum type, GLsizei stride, GLvoid* pointer)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]unsigned int16[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]unsigned int16[])\r\nret")]
        #endif
        public static void glMatrixIndexPointerARB([In] IntPtr extensionPointer, int size, int type, int stride, ushort[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMatrixIndexPointerARB([In] IntPtr extensionPointer, int size, int type, int stride, ushort[] pointer)

        #region void glMatrixIndexPointerARB([In] IntPtr extensionPointer, int size, int type, int stride, void* pointer)
        // GLvoid glMatrixIndexPointerARB(GLint size, GLenum type, GLsizei stride, GLvoid* pointer)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]void*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]void*)\r\nret")]
        #endif
        public static unsafe void glMatrixIndexPointerARB([In] IntPtr extensionPointer, int size, int type, int stride, void* pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMatrixIndexPointerARB([In] IntPtr extensionPointer, int size, int type, int stride, void* pointer)
        #endregion Overloads for GLvoid glMatrixIndexPointerARB(GLint size, GLenum type, GLsizei stride, GLvoid* pointer)
        #endregion GL_ARB_matrix_palette Methods
        #endregion GL_ARB_matrix_palette (16)

        #region GL_ARB_texture_env_combine (17)
        #region GL_ARB_texture_env_combine Constants
        #region GL_COMBINE_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COMBINE_ARB 0x8570
        public const int GL_COMBINE_ARB = 0x8570;
        #endregion GL_COMBINE_ARB

        #region GL_COMBINE_RGB_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COMBINE_RGB_ARB 0x8571
        public const int GL_COMBINE_RGB_ARB = 0x8571;
        #endregion GL_COMBINE_RGB_ARB

        #region GL_COMBINE_ALPHA_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COMBINE_ALPHA_ARB 0x8572
        public const int GL_COMBINE_ALPHA_ARB = 0x8572;
        #endregion GL_COMBINE_ALPHA_ARB

        #region GL_SOURCE0_RGB_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SOURCE0_RGB_ARB 0x8580
        public const int GL_SOURCE0_RGB_ARB = 0x8580;
        #endregion GL_SOURCE0_RGB_ARB

        #region GL_SOURCE1_RGB_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SOURCE1_RGB_ARB 0x8581
        public const int GL_SOURCE1_RGB_ARB = 0x8581;
        #endregion GL_SOURCE1_RGB_ARB

        #region GL_SOURCE2_RGB_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SOURCE2_RGB_ARB 0x8582
        public const int GL_SOURCE2_RGB_ARB = 0x8582;
        #endregion GL_SOURCE2_RGB_ARB

        #region GL_SOURCE0_ALPHA_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SOURCE0_ALPHA_ARB 0x8588
        public const int GL_SOURCE0_ALPHA_ARB = 0x8588;
        #endregion GL_SOURCE0_ALPHA_ARB

        #region GL_SOURCE1_ALPHA_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SOURCE1_ALPHA_ARB 0x8589
        public const int GL_SOURCE1_ALPHA_ARB = 0x8589;
        #endregion GL_SOURCE1_ALPHA_ARB

        #region GL_SOURCE2_ALPHA_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SOURCE2_ALPHA_ARB 0x858A
        public const int GL_SOURCE2_ALPHA_ARB = 0x858A;
        #endregion GL_SOURCE2_ALPHA_ARB

        #region GL_OPERAND0_RGB_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OPERAND0_RGB_ARB 0x8590
        public const int GL_OPERAND0_RGB_ARB = 0x8590;
        #endregion GL_OPERAND0_RGB_ARB

        #region GL_OPERAND1_RGB_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OPERAND1_RGB_ARB 0x8591
        public const int GL_OPERAND1_RGB_ARB = 0x8591;
        #endregion GL_OPERAND1_RGB_ARB

        #region GL_OPERAND2_RGB_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OPERAND2_RGB_ARB 0x8592
        public const int GL_OPERAND2_RGB_ARB = 0x8592;
        #endregion GL_OPERAND2_RGB_ARB

        #region GL_OPERAND0_ALPHA_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OPERAND0_ALPHA_ARB 0x8598
        public const int GL_OPERAND0_ALPHA_ARB = 0x8598;
        #endregion GL_OPERAND0_ALPHA_ARB

        #region GL_OPERAND1_ALPHA_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OPERAND1_ALPHA_ARB 0x8599
        public const int GL_OPERAND1_ALPHA_ARB = 0x8599;
        #endregion GL_OPERAND1_ALPHA_ARB

        #region GL_OPERAND2_ALPHA_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OPERAND2_ALPHA_ARB 0x859A
        public const int GL_OPERAND2_ALPHA_ARB = 0x859A;
        #endregion GL_OPERAND2_ALPHA_ARB

        #region GL_RGB_SCALE_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_RGB_SCALE_ARB 0x8573
        public const int GL_RGB_SCALE_ARB = 0x8573;
        #endregion GL_RGB_SCALE_ARB

        #region GL_ADD_SIGNED_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_ADD_SIGNED_ARB 0x8574
        public const int GL_ADD_SIGNED_ARB = 0x8574;
        #endregion GL_ADD_SIGNED_ARB

        #region GL_INTERPOLATE_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_INTERPOLATE_ARB 0x8575
        public const int GL_INTERPOLATE_ARB = 0x8575;
        #endregion GL_INTERPOLATE_ARB

        #region GL_SUBTRACT_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SUBTRACT_ARB 0x84E7
        public const int GL_SUBTRACT_ARB = 0x84E7;
        #endregion GL_SUBTRACT_ARB

        #region GL_CONSTANT_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_CONSTANT_ARB 0x8576
        public const int GL_CONSTANT_ARB = 0x8576;
        #endregion GL_CONSTANT_ARB

        #region GL_PRIMARY_COLOR_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PRIMARY_COLOR_ARB 0x8577
        public const int GL_PRIMARY_COLOR_ARB = 0x8577;
        #endregion GL_PRIMARY_COLOR_ARB

        #region GL_PREVIOUS_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PREVIOUS_ARB 0x8578
        public const int GL_PREVIOUS_ARB = 0x8578;
        #endregion GL_PREVIOUS_ARB
        #endregion GL_ARB_texture_env_combine Constants
        #endregion GL_ARB_texture_env_combine (17)

        #region GL_ARB_texture_env_crossbar (18)
        #region GL_ARB_texture_env_crossbar Constants
        // GL_TEXTURE0_ARB is already defined in GL_ARB_multitexture (1)

        // GL_TEXTURE1_ARB is already defined in GL_ARB_multitexture (1)

        // GL_TEXTURE2_ARB is already defined in GL_ARB_multitexture (1)

        // GL_TEXTURE3_ARB is already defined in GL_ARB_multitexture (1)

        // GL_TEXTURE4_ARB is already defined in GL_ARB_multitexture (1)

        // GL_TEXTURE5_ARB is already defined in GL_ARB_multitexture (1)

        // GL_TEXTURE6_ARB is already defined in GL_ARB_multitexture (1)

        // GL_TEXTURE7_ARB is already defined in GL_ARB_multitexture (1)

        // GL_TEXTURE8_ARB is already defined in GL_ARB_multitexture (1)

        // GL_TEXTURE9_ARB is already defined in GL_ARB_multitexture (1)

        // GL_TEXTURE10_ARB is already defined in GL_ARB_multitexture (1)

        // GL_TEXTURE11_ARB is already defined in GL_ARB_multitexture (1)

        // GL_TEXTURE12_ARB is already defined in GL_ARB_multitexture (1)

        // GL_TEXTURE13_ARB is already defined in GL_ARB_multitexture (1)

        // GL_TEXTURE14_ARB is already defined in GL_ARB_multitexture (1)

        // GL_TEXTURE15_ARB is already defined in GL_ARB_multitexture (1)

        // GL_TEXTURE16_ARB is already defined in GL_ARB_multitexture (1)

        // GL_TEXTURE17_ARB is already defined in GL_ARB_multitexture (1)

        // GL_TEXTURE18_ARB is already defined in GL_ARB_multitexture (1)

        // GL_TEXTURE19_ARB is already defined in GL_ARB_multitexture (1)

        // GL_TEXTURE20_ARB is already defined in GL_ARB_multitexture (1)

        // GL_TEXTURE21_ARB is already defined in GL_ARB_multitexture (1)

        // GL_TEXTURE22_ARB is already defined in GL_ARB_multitexture (1)

        // GL_TEXTURE23_ARB is already defined in GL_ARB_multitexture (1)

        // GL_TEXTURE24_ARB is already defined in GL_ARB_multitexture (1)

        // GL_TEXTURE25_ARB is already defined in GL_ARB_multitexture (1)

        // GL_TEXTURE26_ARB is already defined in GL_ARB_multitexture (1)

        // GL_TEXTURE27_ARB is already defined in GL_ARB_multitexture (1)

        // GL_TEXTURE28_ARB is already defined in GL_ARB_multitexture (1)

        // GL_TEXTURE29_ARB is already defined in GL_ARB_multitexture (1)

        // GL_TEXTURE30_ARB is already defined in GL_ARB_multitexture (1)

        // GL_TEXTURE31_ARB is already defined in GL_ARB_multitexture (1)
        #endregion GL_ARB_texture_env_crossbar Constants
        #endregion GL_ARB_texture_env_crossbar (18)

        #region GL_ARB_texture_env_dot3 (19)
        #region GL_ARB_texture_env_dot3 Constants
        #region GL_DOT3_RGB_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DOT3_RGB_ARB 0x86AE
        public const int GL_DOT3_RGB_ARB = 0x86AE;
        #endregion GL_DOT3_RGB_ARB

        #region GL_DOT3_RGBA_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DOT3_RGBA_ARB 0x86AF
        public const int GL_DOT3_RGBA_ARB = 0x86AF;
        #endregion GL_DOT3_RGBA_ARB
        #endregion GL_ARB_texture_env_dot3 Constants
        #endregion GL_ARB_texture_env_dot3 (19)

        #region GL_ARB_texture_mirrored_repeat (21)
        #region GL_ARB_texture_mirrored_repeat Constants
        #region GL_MIRRORED_REPEAT_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MIRRORED_REPEAT_ARB 0x8370
        public const int GL_MIRRORED_REPEAT_ARB = 0x8370;
        #endregion GL_MIRRORED_REPEAT_ARB
        #endregion GL_ARB_texture_mirrored_repeat Constants
        #endregion GL_ARB_texture_mirrored_repeat (21)

        #region GL_ARB_depth_texture (22)
        #region GL_ARB_depth_texture Constants
        #region GL_DEPTH_COMPONENT16_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DEPTH_COMPONENT16_ARB 0x81A5
        public const int GL_DEPTH_COMPONENT16_ARB = 0x81A5;
        #endregion GL_DEPTH_COMPONENT16_ARB

        #region GL_DEPTH_COMPONENT24_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DEPTH_COMPONENT24_ARB 0x81A6
        public const int GL_DEPTH_COMPONENT24_ARB = 0x81A6;
        #endregion GL_DEPTH_COMPONENT24_ARB

        #region GL_DEPTH_COMPONENT32_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DEPTH_COMPONENT32_ARB 0x81A7
        public const int GL_DEPTH_COMPONENT32_ARB = 0x81A7;
        #endregion GL_DEPTH_COMPONENT32_ARB

        #region GL_TEXTURE_DEPTH_SIZE_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_DEPTH_SIZE_ARB 0x884A
        public const int GL_TEXTURE_DEPTH_SIZE_ARB = 0x884A;
        #endregion GL_TEXTURE_DEPTH_SIZE_ARB

        #region GL_DEPTH_TEXTURE_MODE_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DEPTH_TEXTURE_MODE_ARB 0x884B
        public const int GL_DEPTH_TEXTURE_MODE_ARB = 0x884B;
        #endregion GL_DEPTH_TEXTURE_MODE_ARB
        #endregion GL_ARB_depth_texture Constants
        #endregion GL_ARB_depth_texture (22)

        #region GL_ARB_shadow (23)
        #region GL_ARB_shadow Constants
        #region GL_TEXTURE_COMPARE_MODE_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_COMPARE_MODE_ARB 0x884C
        public const int GL_TEXTURE_COMPARE_MODE_ARB = 0x884C;
        #endregion GL_TEXTURE_COMPARE_MODE_ARB

        #region GL_TEXTURE_COMPARE_FUNC_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_COMPARE_FUNC_ARB 0x884D
        public const int GL_TEXTURE_COMPARE_FUNC_ARB = 0x884D;
        #endregion GL_TEXTURE_COMPARE_FUNC_ARB

        #region GL_COMPARE_R_TO_TEXTURE_ARB
        // #define GL_COMPARE_R_TO_TEXTURE_ARB 0x884E
        /// <summary>
        /// 
        /// </summary>
        public const int GL_COMPARE_R_TO_TEXTURE_ARB = 0x884E;
        #endregion GL_COMPARE_R_TO_TEXTURE_ARB
        #endregion GL_ARB_shadow Constants
        #endregion GL_ARB_shadow (23)

        #region GL_ARB_shadow_ambient (24)
        #region GL_ARB_shadow_ambient Constants
        #region GL_TEXTURE_COMPARE_FAIL_VALUE_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_COMPARE_FAIL_VALUE_ARB 0x80BF
        public const int GL_TEXTURE_COMPARE_FAIL_VALUE_ARB = 0x80BF;
        #endregion GL_TEXTURE_COMPARE_FAIL_VALUE_ARB
        #endregion GL_ARB_shadow_ambient Constants
        #endregion GL_ARB_shadow_ambient (24)

        #region GL_ARB_window_pos (25)
        #region GL_ARB_window_pos Methods
        #region void glWindowPos2dARB([In] IntPtr extensionPointer, double x, double y)
        // GLvoid glWindowPos2dARB(GLdouble x, GLdouble y)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg x\r\nldarg y\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]float64,[in]float64)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg x\r\nldarg y\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]float64,[in]float64)\r\nret")]
        #endif
        public static void glWindowPos2dARB([In] IntPtr extensionPointer, double x, double y) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWindowPos2dARB([In] IntPtr extensionPointer, double x, double y)

        #region void glWindowPos2fARB([In] IntPtr extensionPointer, float x, float y)
        // GLvoid glWindowPos2fARB(GLfloat x, GLfloat y)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg x\r\nldarg y\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]float32,[in]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg x\r\nldarg y\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]float32,[in]float32)\r\nret")]
        #endif
        public static void glWindowPos2fARB([In] IntPtr extensionPointer, float x, float y) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWindowPos2fARB([In] IntPtr extensionPointer, float x, float y)

        #region void glWindowPos2iARB([In] IntPtr extensionPointer, int x, int y)
        // GLvoid glWindowPos2iARB(GLint x, GLint y)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg x\r\nldarg y\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg x\r\nldarg y\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32)\r\nret")]
        #endif
        public static void glWindowPos2iARB([In] IntPtr extensionPointer, int x, int y) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWindowPos2iARB([In] IntPtr extensionPointer, int x, int y)

        #region void glWindowPos2sARB([In] IntPtr extensionPointer, short x, short y)
        // GLvoid glWindowPos2sARB(GLshort x, GLshort y)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg x\r\nldarg y\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int16,[in]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg x\r\nldarg y\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int16,[in]int16)\r\nret")]
        #endif
        public static void glWindowPos2sARB([In] IntPtr extensionPointer, short x, short y) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWindowPos2sARB([In] IntPtr extensionPointer, short x, short y)

        #region Overloads for GLvoid glWindowPos2dvARB(const GLdouble* p)
        #region void glWindowPos2dvARB([In] IntPtr extensionPointer, ref double p)
        // GLvoid glWindowPos2dvARB(const GLdouble* p)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]float64)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]float64)\r\nret")]
        #endif
        public static void glWindowPos2dvARB([In] IntPtr extensionPointer, ref double p) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWindowPos2dvARB([In] IntPtr extensionPointer, ref double p)

        #region void glWindowPos2dvARB([In] IntPtr extensionPointer, double[] p)
        // GLvoid glWindowPos2dvARB(const GLdouble* p)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]float64[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]float64[])\r\nret")]
        #endif
        public static void glWindowPos2dvARB([In] IntPtr extensionPointer, double[] p) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWindowPos2dvARB([In] IntPtr extensionPointer, double[] p)

        #region void glWindowPos2dvARB([In] IntPtr extensionPointer, IntPtr p)
        // GLvoid glWindowPos2dvARB(const GLdouble* p)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int)\r\nret")]
        #endif
        public static void glWindowPos2dvARB([In] IntPtr extensionPointer, IntPtr p) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWindowPos2dvARB([In] IntPtr extensionPointer, IntPtr p)

        #region void glWindowPos2dvARB([In] IntPtr extensionPointer, double* p)
        // GLvoid glWindowPos2dvARB(const GLdouble* p)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]float64*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]float64*)\r\nret")]
        #endif
        public static unsafe void glWindowPos2dvARB([In] IntPtr extensionPointer, double* p) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWindowPos2dvARB([In] IntPtr extensionPointer, double* p)
        #endregion Overloads for GLvoid glWindowPos2dvARB(const GLdouble* p)

        #region Overloads for GLvoid glWindowPos2fvARB(const GLfloat* p)
        #region void glWindowPos2fvARB([In] IntPtr extensionPointer, ref float p)
        // GLvoid glWindowPos2fvARB(const GLfloat* p)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]float32)\r\nret")]
        #endif
        public static void glWindowPos2fvARB([In] IntPtr extensionPointer, ref float p) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWindowPos2fvARB([In] IntPtr extensionPointer, ref float p)

        #region void glWindowPos2fvARB([In] IntPtr extensionPointer, float[] p)
        // GLvoid glWindowPos2fvARB(const GLfloat* p)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]float32[])\r\nret")]
        #endif
        public static void glWindowPos2fvARB([In] IntPtr extensionPointer, float[] p) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWindowPos2fvARB([In] IntPtr extensionPointer, float[] p)

        #region void glWindowPos2fvARB([In] IntPtr extensionPointer, IntPtr p)
        // GLvoid glWindowPos2fvARB(const GLfloat* p)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int)\r\nret")]
        #endif
        public static void glWindowPos2fvARB([In] IntPtr extensionPointer, IntPtr p) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWindowPos2fvARB([In] IntPtr extensionPointer, IntPtr p)

        #region void glWindowPos2fvARB([In] IntPtr extensionPointer, float* p)
        // GLvoid glWindowPos2fvARB(const GLfloat* p)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]float32*)\r\nret")]
        #endif
        public static unsafe void glWindowPos2fvARB([In] IntPtr extensionPointer, float* p) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWindowPos2fvARB([In] IntPtr extensionPointer, float* p)
        #endregion Overloads for GLvoid glWindowPos2fvARB(const GLfloat* p)

        #region Overloads for GLvoid glWindowPos2ivARB(const GLint* p)
        #region void glWindowPos2ivARB([In] IntPtr extensionPointer, ref int p)
        // GLvoid glWindowPos2ivARB(const GLint* p)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]int32)\r\nret")]
        #endif
        public static void glWindowPos2ivARB([In] IntPtr extensionPointer, ref int p) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWindowPos2ivARB([In] IntPtr extensionPointer, ref int p)

        #region void glWindowPos2ivARB([In] IntPtr extensionPointer, int[] p)
        // GLvoid glWindowPos2ivARB(const GLint* p)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32[])\r\nret")]
        #endif
        public static void glWindowPos2ivARB([In] IntPtr extensionPointer, int[] p) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWindowPos2ivARB([In] IntPtr extensionPointer, int[] p)

        #region void glWindowPos2ivARB([In] IntPtr extensionPointer, IntPtr p)
        // GLvoid glWindowPos2ivARB(const GLint* p)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int)\r\nret")]
        #endif
        public static void glWindowPos2ivARB([In] IntPtr extensionPointer, IntPtr p) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWindowPos2ivARB([In] IntPtr extensionPointer, IntPtr p)

        #region void glWindowPos2ivARB([In] IntPtr extensionPointer, int* p)
        // GLvoid glWindowPos2ivARB(const GLint* p)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32*)\r\nret")]
        #endif
        public static unsafe void glWindowPos2ivARB([In] IntPtr extensionPointer, int* p) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWindowPos2ivARB([In] IntPtr extensionPointer, int* p)
        #endregion Overloads for GLvoid glWindowPos2ivARB(const GLint* p)

        #region Overloads for GLvoid glWindowPos2svARB(const GLshort* p)
        #region void glWindowPos2svARB([In] IntPtr extensionPointer, ref short p)
        // GLvoid glWindowPos2svARB(const GLshort* p)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]int16)\r\nret")]
        #endif
        public static void glWindowPos2svARB([In] IntPtr extensionPointer, ref short p) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWindowPos2svARB([In] IntPtr extensionPointer, ref short p)

        #region void glWindowPos2svARB([In] IntPtr extensionPointer, short[] p)
        // GLvoid glWindowPos2svARB(const GLshort* p)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int16[])\r\nret")]
        #endif
        public static void glWindowPos2svARB([In] IntPtr extensionPointer, short[] p) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWindowPos2svARB([In] IntPtr extensionPointer, short[] p)

        #region void glWindowPos2svARB([In] IntPtr extensionPointer, IntPtr p)
        // GLvoid glWindowPos2svARB(const GLshort* p)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int)\r\nret")]
        #endif
        public static void glWindowPos2svARB([In] IntPtr extensionPointer, IntPtr p) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWindowPos2svARB([In] IntPtr extensionPointer, IntPtr p)

        #region void glWindowPos2svARB([In] IntPtr extensionPointer, short* p)
        // GLvoid glWindowPos2svARB(const GLshort* p)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int16*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int16*)\r\nret")]
        #endif
        public static unsafe void glWindowPos2svARB([In] IntPtr extensionPointer, short* p) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWindowPos2svARB([In] IntPtr extensionPointer, short* p)
        #endregion Overloads for GLvoid glWindowPos2svARB(const GLshort* p)

        #region void glWindowPos3dARB([In] IntPtr extensionPointer, double x, double y, double z)
        // GLvoid glWindowPos3dARB(GLdouble x, GLdouble y, GLdouble z)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]float64,[in]float64,[in]float64)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]float64,[in]float64,[in]float64)\r\nret")]
        #endif
        public static void glWindowPos3dARB([In] IntPtr extensionPointer, double x, double y, double z) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWindowPos3dARB([In] IntPtr extensionPointer, double x, double y, double z)

        #region void glWindowPos3fARB([In] IntPtr extensionPointer, float x, float y, float z)
        // GLvoid glWindowPos3fARB(GLfloat x, GLfloat y, GLfloat z)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]float32,[in]float32,[in]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]float32,[in]float32,[in]float32)\r\nret")]
        #endif
        public static void glWindowPos3fARB([In] IntPtr extensionPointer, float x, float y, float z) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWindowPos3fARB([In] IntPtr extensionPointer, float x, float y, float z)

        #region void glWindowPos3iARB([In] IntPtr extensionPointer, int x, int y, int z)
        // GLvoid glWindowPos3iARB(GLint x, GLint y, GLint z)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32)\r\nret")]
        #endif
        public static void glWindowPos3iARB([In] IntPtr extensionPointer, int x, int y, int z) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWindowPos3iARB([In] IntPtr extensionPointer, int x, int y, int z)

        #region void glWindowPos3sARB([In] IntPtr extensionPointer, short x, short y, short z)
        // GLvoid glWindowPos3sARB(GLshort x, GLshort y, GLshort z)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int16,[in]int16,[in]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int16,[in]int16,[in]int16)\r\nret")]
        #endif
        public static void glWindowPos3sARB([In] IntPtr extensionPointer, short x, short y, short z) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWindowPos3sARB([In] IntPtr extensionPointer, short x, short y, short z)

        #region Overloads for GLvoid glWindowPos3dvARB(const GLdouble* p)
        #region void glWindowPos3dvARB([In] IntPtr extensionPointer, ref double p)
        // GLvoid glWindowPos3dvARB(const GLdouble* p)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]float64)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]float64)\r\nret")]
        #endif
        public static void glWindowPos3dvARB([In] IntPtr extensionPointer, ref double p) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWindowPos3dvARB([In] IntPtr extensionPointer, ref double p)

        #region void glWindowPos3dvARB([In] IntPtr extensionPointer, double[] p)
        // GLvoid glWindowPos3dvARB(const GLdouble* p)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]float64[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]float64[])\r\nret")]
        #endif
        public static void glWindowPos3dvARB([In] IntPtr extensionPointer, double[] p) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWindowPos3dvARB([In] IntPtr extensionPointer, double[] p)

        #region void glWindowPos3dvARB([In] IntPtr extensionPointer, IntPtr p)
        // GLvoid glWindowPos3dvARB(const GLdouble* p)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int)\r\nret")]
        #endif
        public static void glWindowPos3dvARB([In] IntPtr extensionPointer, IntPtr p) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWindowPos3dvARB([In] IntPtr extensionPointer, IntPtr p)

        #region void glWindowPos3dvARB([In] IntPtr extensionPointer, double* p)
        // GLvoid glWindowPos3dvARB(const GLdouble* p)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]float64*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]float64*)\r\nret")]
        #endif
        public static unsafe void glWindowPos3dvARB([In] IntPtr extensionPointer, double* p) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWindowPos3dvARB([In] IntPtr extensionPointer, double* p)
        #endregion Overloads for GLvoid glWindowPos3dvARB(const GLdouble* p)

        #region Overloads for GLvoid glWindowPos3fvARB(const GLfloat* p)
        #region void glWindowPos3fvARB([In] IntPtr extensionPointer, ref float p)
        // GLvoid glWindowPos3fvARB(const GLfloat* p)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]float32)\r\nret")]
        #endif
        public static void glWindowPos3fvARB([In] IntPtr extensionPointer, ref float p) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWindowPos3fvARB([In] IntPtr extensionPointer, ref float p)

        #region void glWindowPos3fvARB([In] IntPtr extensionPointer, float[] p)
        // GLvoid glWindowPos3fvARB(const GLfloat* p)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]float32[])\r\nret")]
        #endif
        public static void glWindowPos3fvARB([In] IntPtr extensionPointer, float[] p) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWindowPos3fvARB([In] IntPtr extensionPointer, float[] p)

        #region void glWindowPos3fvARB([In] IntPtr extensionPointer, IntPtr p)
        // GLvoid glWindowPos3fvARB(const GLfloat* p)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int)\r\nret")]
        #endif
        public static void glWindowPos3fvARB([In] IntPtr extensionPointer, IntPtr p) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWindowPos3fvARB([In] IntPtr extensionPointer, IntPtr p)

        #region void glWindowPos3fvARB([In] IntPtr extensionPointer, float* p)
        // GLvoid glWindowPos3fvARB(const GLfloat* p)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]float32*)\r\nret")]
        #endif
        public static unsafe void glWindowPos3fvARB([In] IntPtr extensionPointer, float* p) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWindowPos3fvARB([In] IntPtr extensionPointer, float* p)
        #endregion Overloads for GLvoid glWindowPos3fvARB(const GLfloat* p)

        #region Overloads for GLvoid glWindowPos3ivARB(const GLint* p)
        #region void glWindowPos3ivARB([In] IntPtr extensionPointer, ref int p)
        // GLvoid glWindowPos3ivARB(const GLint* p)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]int32)\r\nret")]
        #endif
        public static void glWindowPos3ivARB([In] IntPtr extensionPointer, ref int p) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWindowPos3ivARB([In] IntPtr extensionPointer, ref int p)

        #region void glWindowPos3ivARB([In] IntPtr extensionPointer, int[] p)
        // GLvoid glWindowPos3ivARB(const GLint* p)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32[])\r\nret")]
        #endif
        public static void glWindowPos3ivARB([In] IntPtr extensionPointer, int[] p) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWindowPos3ivARB([In] IntPtr extensionPointer, int[] p)

        #region void glWindowPos3ivARB([In] IntPtr extensionPointer, IntPtr p)
        // GLvoid glWindowPos3ivARB(const GLint* p)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int)\r\nret")]
        #endif
        public static void glWindowPos3ivARB([In] IntPtr extensionPointer, IntPtr p) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWindowPos3ivARB([In] IntPtr extensionPointer, IntPtr p)

        #region void glWindowPos3ivARB([In] IntPtr extensionPointer, int* p)
        // GLvoid glWindowPos3ivARB(const GLint* p)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32*)\r\nret")]
        #endif
        public static unsafe void glWindowPos3ivARB([In] IntPtr extensionPointer, int* p) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWindowPos3ivARB([In] IntPtr extensionPointer, int* p)
        #endregion Overloads for GLvoid glWindowPos3ivARB(const GLint* p)

        #region Overloads for GLvoid glWindowPos3svARB(const GLshort* p)
        #region void glWindowPos3svARB([In] IntPtr extensionPointer, ref short p)
        // GLvoid glWindowPos3svARB(const GLshort* p)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]int16)\r\nret")]
        #endif
        public static void glWindowPos3svARB([In] IntPtr extensionPointer, ref short p) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWindowPos3svARB([In] IntPtr extensionPointer, ref short p)

        #region void glWindowPos3svARB([In] IntPtr extensionPointer, short[] p)
        // GLvoid glWindowPos3svARB(const GLshort* p)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int16[])\r\nret")]
        #endif
        public static void glWindowPos3svARB([In] IntPtr extensionPointer, short[] p) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWindowPos3svARB([In] IntPtr extensionPointer, short[] p)

        #region void glWindowPos3svARB([In] IntPtr extensionPointer, IntPtr p)
        // GLvoid glWindowPos3svARB(const GLshort* p)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int)\r\nret")]
        #endif
        public static void glWindowPos3svARB([In] IntPtr extensionPointer, IntPtr p) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWindowPos3svARB([In] IntPtr extensionPointer, IntPtr p)

        #region void glWindowPos3svARB([In] IntPtr extensionPointer, short* p)
        // GLvoid glWindowPos3svARB(const GLshort* p)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int16*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int16*)\r\nret")]
        #endif
        public static unsafe void glWindowPos3svARB([In] IntPtr extensionPointer, short* p) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWindowPos3svARB([In] IntPtr extensionPointer, short* p)
        #endregion Overloads for GLvoid glWindowPos3svARB(const GLshort* p)
        #endregion GL_ARB_window_pos Methods
        #endregion GL_ARB_window_pos (25)

        #region GL_ARB_vertex_program (26)
        #region GL_ARB_vertex_program Constants
        #region GL_VERTEX_PROGRAM_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VERTEX_PROGRAM_ARB 0x8620
        public const int GL_VERTEX_PROGRAM_ARB = 0x8620;
        #endregion GL_VERTEX_PROGRAM_ARB

        #region GL_VERTEX_PROGRAM_POINT_SIZE_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VERTEX_PROGRAM_POINT_SIZE_ARB 0x8642
        public const int GL_VERTEX_PROGRAM_POINT_SIZE_ARB = 0x8642;
        #endregion GL_VERTEX_PROGRAM_POINT_SIZE_ARB

        #region GL_VERTEX_PROGRAM_TWO_SIDE_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VERTEX_PROGRAM_TWO_SIDE_ARB 0x8643
        public const int GL_VERTEX_PROGRAM_TWO_SIDE_ARB = 0x8643;
        #endregion GL_VERTEX_PROGRAM_TWO_SIDE_ARB

        #region GL_COLOR_SUM_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COLOR_SUM_ARB 0x8458
        public const int GL_COLOR_SUM_ARB = 0x8458;
        #endregion GL_COLOR_SUM_ARB

        #region GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB 0x8622
        public const int GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB = 0x8622;
        #endregion GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB

        #region GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB 0x8623
        public const int GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB = 0x8623;
        #endregion GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB

        #region GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB 0x8624
        public const int GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB = 0x8624;
        #endregion GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB

        #region GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB 0x8625
        public const int GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB = 0x8625;
        #endregion GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB

        #region GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB 0x886A
        public const int GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB = 0x886A;
        #endregion GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB

        #region GL_CURRENT_VERTEX_ATTRIB_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_CURRENT_VERTEX_ATTRIB_ARB 0x8626
        public const int GL_CURRENT_VERTEX_ATTRIB_ARB = 0x8626;
        #endregion GL_CURRENT_VERTEX_ATTRIB_ARB

        #region GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB 0x8645
        public const int GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB = 0x8645;
        #endregion GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB

        #region GL_PROGRAM_ADDRESS_REGISTERS_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PROGRAM_ADDRESS_REGISTERS_ARB 0x88B0
        public const int GL_PROGRAM_ADDRESS_REGISTERS_ARB = 0x88B0;
        #endregion GL_PROGRAM_ADDRESS_REGISTERS_ARB

        #region GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB 0x88B1
        public const int GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB = 0x88B1;
        #endregion GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB

        #region GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB 0x88B2
        public const int GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = 0x88B2;
        #endregion GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB

        #region GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB 0x88B3
        public const int GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = 0x88B3;
        #endregion GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB

        #region GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB 0x88B4
        public const int GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB = 0x88B4;
        #endregion GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB

        #region GL_MAX_PROGRAM_ENV_PARAMETERS_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAX_PROGRAM_ENV_PARAMETERS_ARB 0x88B5
        public const int GL_MAX_PROGRAM_ENV_PARAMETERS_ARB = 0x88B5;
        #endregion GL_MAX_PROGRAM_ENV_PARAMETERS_ARB

        #region GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB 0x88B6
        public const int GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB = 0x88B6;
        #endregion GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB

        #region GL_MAX_VERTEX_ATTRIBS_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAX_VERTEX_ATTRIBS_ARB 0x8869
        public const int GL_MAX_VERTEX_ATTRIBS_ARB = 0x8869;
        #endregion GL_MAX_VERTEX_ATTRIBS_ARB

        #region GL_PROGRAM_ERROR_STRING_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PROGRAM_ERROR_STRING_ARB 0x8874
        public const int GL_PROGRAM_ERROR_STRING_ARB = 0x8874;
        #endregion GL_PROGRAM_ERROR_STRING_ARB

        #region GL_MAX_PROGRAM_MATRICES_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAX_PROGRAM_MATRICES_ARB 0x862F
        public const int GL_MAX_PROGRAM_MATRICES_ARB = 0x862F;
        #endregion GL_MAX_PROGRAM_MATRICES_ARB

        #region GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB 0x862E
        public const int GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB = 0x862E;
        #endregion GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB

        #region GL_PROGRAM_STRING_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PROGRAM_STRING_ARB 0x8628
        public const int GL_PROGRAM_STRING_ARB = 0x8628;
        #endregion GL_PROGRAM_STRING_ARB

        #region GL_PROGRAM_ERROR_POSITION_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PROGRAM_ERROR_POSITION_ARB 0x864B
        public const int GL_PROGRAM_ERROR_POSITION_ARB = 0x864B;
        #endregion GL_PROGRAM_ERROR_POSITION_ARB

        #region GL_CURRENT_MATRIX_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_CURRENT_MATRIX_ARB 0x8641
        public const int GL_CURRENT_MATRIX_ARB = 0x8641;
        #endregion GL_CURRENT_MATRIX_ARB

        #region GL_TRANSPOSE_CURRENT_MATRIX_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TRANSPOSE_CURRENT_MATRIX_ARB 0x88B7
        public const int GL_TRANSPOSE_CURRENT_MATRIX_ARB = 0x88B7;
        #endregion GL_TRANSPOSE_CURRENT_MATRIX_ARB

        #region GL_CURRENT_MATRIX_STACK_DEPTH_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_CURRENT_MATRIX_STACK_DEPTH_ARB 0x8640
        public const int GL_CURRENT_MATRIX_STACK_DEPTH_ARB = 0x8640;
        #endregion GL_CURRENT_MATRIX_STACK_DEPTH_ARB

        #region GL_PROGRAM_FORMAT_ASCII_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PROGRAM_FORMAT_ASCII_ARB 0x8875
        public const int GL_PROGRAM_FORMAT_ASCII_ARB = 0x8875;
        #endregion GL_PROGRAM_FORMAT_ASCII_ARB

        #region GL_PROGRAM_LENGTH_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PROGRAM_LENGTH_ARB 0x8627
        public const int GL_PROGRAM_LENGTH_ARB = 0x8627;
        #endregion GL_PROGRAM_LENGTH_ARB

        #region GL_PROGRAM_FORMAT_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PROGRAM_FORMAT_ARB 0x8876
        public const int GL_PROGRAM_FORMAT_ARB = 0x8876;
        #endregion GL_PROGRAM_FORMAT_ARB

        #region GL_PROGRAM_BINDING_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PROGRAM_BINDING_ARB 0x8677
        public const int GL_PROGRAM_BINDING_ARB = 0x8677;
        #endregion GL_PROGRAM_BINDING_ARB

        #region GL_PROGRAM_INSTRUCTIONS_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PROGRAM_INSTRUCTIONS_ARB 0x88A0
        public const int GL_PROGRAM_INSTRUCTIONS_ARB = 0x88A0;
        #endregion GL_PROGRAM_INSTRUCTIONS_ARB

        #region GL_MAX_PROGRAM_INSTRUCTIONS_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAX_PROGRAM_INSTRUCTIONS_ARB 0x88A1
        public const int GL_MAX_PROGRAM_INSTRUCTIONS_ARB = 0x88A1;
        #endregion GL_MAX_PROGRAM_INSTRUCTIONS_ARB

        #region GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB 0x88A2
        public const int GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB = 0x88A2;
        #endregion GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB

        #region GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB 0x88A3
        public const int GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB = 0x88A3;
        #endregion GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB

        #region GL_PROGRAM_TEMPORARIES_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PROGRAM_TEMPORARIES_ARB 0x88A4
        public const int GL_PROGRAM_TEMPORARIES_ARB = 0x88A4;
        #endregion GL_PROGRAM_TEMPORARIES_ARB

        #region GL_MAX_PROGRAM_TEMPORARIES_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAX_PROGRAM_TEMPORARIES_ARB 0x88A5
        public const int GL_MAX_PROGRAM_TEMPORARIES_ARB = 0x88A5;
        #endregion GL_MAX_PROGRAM_TEMPORARIES_ARB

        #region GL_PROGRAM_NATIVE_TEMPORARIES_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PROGRAM_NATIVE_TEMPORARIES_ARB 0x88A6
        public const int GL_PROGRAM_NATIVE_TEMPORARIES_ARB = 0x88A6;
        #endregion GL_PROGRAM_NATIVE_TEMPORARIES_ARB

        #region GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB 0x88A7
        public const int GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB = 0x88A7;
        #endregion GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB

        #region GL_PROGRAM_PARAMETERS_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PROGRAM_PARAMETERS_ARB 0x88A8
        public const int GL_PROGRAM_PARAMETERS_ARB = 0x88A8;
        #endregion GL_PROGRAM_PARAMETERS_ARB

        #region GL_MAX_PROGRAM_PARAMETERS_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAX_PROGRAM_PARAMETERS_ARB 0x88A9
        public const int GL_MAX_PROGRAM_PARAMETERS_ARB = 0x88A9;
        #endregion GL_MAX_PROGRAM_PARAMETERS_ARB

        #region GL_PROGRAM_NATIVE_PARAMETERS_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PROGRAM_NATIVE_PARAMETERS_ARB 0x88AA
        public const int GL_PROGRAM_NATIVE_PARAMETERS_ARB = 0x88AA;
        #endregion GL_PROGRAM_NATIVE_PARAMETERS_ARB

        #region GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB 0x88AB
        public const int GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB = 0x88AB;
        #endregion GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB

        #region GL_PROGRAM_ATTRIBS_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PROGRAM_ATTRIBS_ARB 0x88AC
        public const int GL_PROGRAM_ATTRIBS_ARB = 0x88AC;
        #endregion GL_PROGRAM_ATTRIBS_ARB

        #region GL_MAX_PROGRAM_ATTRIBS_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAX_PROGRAM_ATTRIBS_ARB 0x88AD
        public const int GL_MAX_PROGRAM_ATTRIBS_ARB = 0x88AD;
        #endregion GL_MAX_PROGRAM_ATTRIBS_ARB

        #region GL_PROGRAM_NATIVE_ATTRIBS_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PROGRAM_NATIVE_ATTRIBS_ARB 0x88AE
        public const int GL_PROGRAM_NATIVE_ATTRIBS_ARB = 0x88AE;
        #endregion GL_PROGRAM_NATIVE_ATTRIBS_ARB

        #region GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB 0x88AF
        public const int GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB = 0x88AF;
        #endregion GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB

        #region GL_MATRIX0_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MATRIX0_ARB 0x88C0
        public const int GL_MATRIX0_ARB = 0x88C0;
        #endregion GL_MATRIX0_ARB

        #region GL_MATRIX1_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MATRIX1_ARB 0x88C1
        public const int GL_MATRIX1_ARB = 0x88C1;
        #endregion GL_MATRIX1_ARB

        #region GL_MATRIX2_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MATRIX2_ARB 0x88C2
        public const int GL_MATRIX2_ARB = 0x88C2;
        #endregion GL_MATRIX2_ARB

        #region GL_MATRIX3_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MATRIX3_ARB 0x88C3
        public const int GL_MATRIX3_ARB = 0x88C3;
        #endregion GL_MATRIX3_ARB

        #region GL_MATRIX4_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MATRIX4_ARB 0x88C4
        public const int GL_MATRIX4_ARB = 0x88C4;
        #endregion GL_MATRIX4_ARB

        #region GL_MATRIX5_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MATRIX5_ARB 0x88C5
        public const int GL_MATRIX5_ARB = 0x88C5;
        #endregion GL_MATRIX5_ARB

        #region GL_MATRIX6_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MATRIX6_ARB 0x88C6
        public const int GL_MATRIX6_ARB = 0x88C6;
        #endregion GL_MATRIX6_ARB

        #region GL_MATRIX7_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MATRIX7_ARB 0x88C7
        public const int GL_MATRIX7_ARB = 0x88C7;
        #endregion GL_MATRIX7_ARB

        #region GL_MATRIX8_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MATRIX8_ARB 0x88C8
        public const int GL_MATRIX8_ARB = 0x88C8;
        #endregion GL_MATRIX8_ARB

        #region GL_MATRIX9_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MATRIX9_ARB 0x88C9
        public const int GL_MATRIX9_ARB = 0x88C9;
        #endregion GL_MATRIX9_ARB

        #region GL_MATRIX10_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MATRIX10_ARB 0x88CA
        public const int GL_MATRIX10_ARB = 0x88CA;
        #endregion GL_MATRIX10_ARB

        #region GL_MATRIX11_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MATRIX11_ARB 0x88CB
        public const int GL_MATRIX11_ARB = 0x88CB;
        #endregion GL_MATRIX11_ARB

        #region GL_MATRIX12_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MATRIX12_ARB 0x88CC
        public const int GL_MATRIX12_ARB = 0x88CC;
        #endregion GL_MATRIX12_ARB

        #region GL_MATRIX13_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MATRIX13_ARB 0x88CD
        public const int GL_MATRIX13_ARB = 0x88CD;
        #endregion GL_MATRIX13_ARB

        #region GL_MATRIX14_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MATRIX14_ARB 0x88CE
        public const int GL_MATRIX14_ARB = 0x88CE;
        #endregion GL_MATRIX14_ARB

        #region GL_MATRIX15_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MATRIX15_ARB 0x88CF
        public const int GL_MATRIX15_ARB = 0x88CF;
        #endregion GL_MATRIX15_ARB

        #region GL_MATRIX16_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MATRIX16_ARB 0x88D0
        public const int GL_MATRIX16_ARB = 0x88D0;
        #endregion GL_MATRIX16_ARB

        #region GL_MATRIX17_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MATRIX17_ARB 0x88D1
        public const int GL_MATRIX17_ARB = 0x88D1;
        #endregion GL_MATRIX17_ARB

        #region GL_MATRIX18_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MATRIX18_ARB 0x88D2
        public const int GL_MATRIX18_ARB = 0x88D2;
        #endregion GL_MATRIX18_ARB

        #region GL_MATRIX19_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MATRIX19_ARB 0x88D3
        public const int GL_MATRIX19_ARB = 0x88D3;
        #endregion GL_MATRIX19_ARB

        #region GL_MATRIX20_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MATRIX20_ARB 0x88D4
        public const int GL_MATRIX20_ARB = 0x88D4;
        #endregion GL_MATRIX20_ARB

        #region GL_MATRIX21_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MATRIX21_ARB 0x88D5
        public const int GL_MATRIX21_ARB = 0x88D5;
        #endregion GL_MATRIX21_ARB

        #region GL_MATRIX22_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MATRIX22_ARB 0x88D6
        public const int GL_MATRIX22_ARB = 0x88D6;
        #endregion GL_MATRIX22_ARB

        #region GL_MATRIX23_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MATRIX23_ARB 0x88D7
        public const int GL_MATRIX23_ARB = 0x88D7;
        #endregion GL_MATRIX23_ARB

        #region GL_MATRIX24_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MATRIX24_ARB 0x88D8
        public const int GL_MATRIX24_ARB = 0x88D8;
        #endregion GL_MATRIX24_ARB

        #region GL_MATRIX25_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MATRIX25_ARB 0x88D9
        public const int GL_MATRIX25_ARB = 0x88D9;
        #endregion GL_MATRIX25_ARB

        #region GL_MATRIX26_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MATRIX26_ARB 0x88DA
        public const int GL_MATRIX26_ARB = 0x88DA;
        #endregion GL_MATRIX26_ARB

        #region GL_MATRIX27_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MATRIX27_ARB 0x88DB
        public const int GL_MATRIX27_ARB = 0x88DB;
        #endregion GL_MATRIX27_ARB

        #region GL_MATRIX28_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MATRIX28_ARB 0x88DC
        public const int GL_MATRIX28_ARB = 0x88DC;
        #endregion GL_MATRIX28_ARB

        #region GL_MATRIX29_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MATRIX29_ARB 0x88DD
        public const int GL_MATRIX29_ARB = 0x88DD;
        #endregion GL_MATRIX29_ARB

        #region GL_MATRIX30_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MATRIX30_ARB 0x88DE
        public const int GL_MATRIX30_ARB = 0x88DE;
        #endregion GL_MATRIX30_ARB

        #region GL_MATRIX31_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MATRIX31_ARB 0x88DF
        public const int GL_MATRIX31_ARB = 0x88DF;
        #endregion GL_MATRIX31_ARB
        #endregion GL_ARB_vertex_program Constants

        #region GL_ARB_vertex_program Methods
        #region void glVertexAttrib1sARB([In] IntPtr extensionPointer, int index, short x)
        // GLvoid glVertexAttrib1sARB(GLuint index, GLshort x)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg x\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg x\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int16)\r\nret")]
        #endif
        public static void glVertexAttrib1sARB([In] IntPtr extensionPointer, int index, short x) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib1sARB([In] IntPtr extensionPointer, int index, short x)

        #region void glVertexAttrib1fARB([In] IntPtr extensionPointer, int index, float x)
        // GLvoid glVertexAttrib1fARB(GLuint index, GLfloat x)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg x\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg x\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float32)\r\nret")]
        #endif
        public static void glVertexAttrib1fARB([In] IntPtr extensionPointer, int index, float x) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib1fARB([In] IntPtr extensionPointer, int index, float x)

        #region void glVertexAttrib1dARB([In] IntPtr extensionPointer, int index, double x)
        // GLvoid glVertexAttrib1dARB(GLuint index, GLdouble x)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg x\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float64)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg x\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float64)\r\nret")]
        #endif
        public static void glVertexAttrib1dARB([In] IntPtr extensionPointer, int index, double x) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib1dARB([In] IntPtr extensionPointer, int index, double x)

        #region void glVertexAttrib2sARB([In] IntPtr extensionPointer, int index, short x, short y)
        // GLvoid glVertexAttrib2sARB(GLuint index, GLshort x, GLshort y)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg x\r\nldarg y\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int16,[in]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg x\r\nldarg y\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int16,[in]int16)\r\nret")]
        #endif
        public static void glVertexAttrib2sARB([In] IntPtr extensionPointer, int index, short x, short y) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib2sARB([In] IntPtr extensionPointer, int index, short x, short y)

        #region void glVertexAttrib2fARB([In] IntPtr extensionPointer, int index, float x, float y)
        // GLvoid glVertexAttrib2fARB(GLuint index, GLfloat x, GLfloat y)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg x\r\nldarg y\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float32,[in]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg x\r\nldarg y\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float32,[in]float32)\r\nret")]
        #endif
        public static void glVertexAttrib2fARB([In] IntPtr extensionPointer, int index, float x, float y) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib2fARB([In] IntPtr extensionPointer, int index, float x, float y)

        #region void glVertexAttrib2dARB([In] IntPtr extensionPointer, int index, double x, double y)
        // GLvoid glVertexAttrib2dARB(GLuint index, GLdouble x, GLdouble y)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg x\r\nldarg y\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float64,[in]float64)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg x\r\nldarg y\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float64,[in]float64)\r\nret")]
        #endif
        public static void glVertexAttrib2dARB([In] IntPtr extensionPointer, int index, double x, double y) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib2dARB([In] IntPtr extensionPointer, int index, double x, double y)

        #region void glVertexAttrib3sARB([In] IntPtr extensionPointer, int index, short x, short y, short z)
        // GLvoid glVertexAttrib3sARB(GLuint index, GLshort x, GLshort y, GLshort z)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg index\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int16,[in]int16,[in]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg index\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int16,[in]int16,[in]int16)\r\nret")]
        #endif
        public static void glVertexAttrib3sARB([In] IntPtr extensionPointer, int index, short x, short y, short z) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib3sARB([In] IntPtr extensionPointer, int index, short x, short y, short z)

        #region void glVertexAttrib3fARB([In] IntPtr extensionPointer, int index, float x, float y, float z)
        // GLvoid glVertexAttrib3fARB(GLuint index, GLfloat x, GLfloat y, GLfloat z)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg index\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float32,[in]float32,[in]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg index\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float32,[in]float32,[in]float32)\r\nret")]
        #endif
        public static void glVertexAttrib3fARB([In] IntPtr extensionPointer, int index, float x, float y, float z) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib3fARB([In] IntPtr extensionPointer, int index, float x, float y, float z)

        #region void glVertexAttrib3dARB([In] IntPtr extensionPointer, int index, double x, double y, double z)
        // GLvoid glVertexAttrib3dARB(GLuint index, GLdouble x, GLdouble y, GLdouble z)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg index\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float64,[in]float64,[in]float64)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg index\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float64,[in]float64,[in]float64)\r\nret")]
        #endif
        public static void glVertexAttrib3dARB([In] IntPtr extensionPointer, int index, double x, double y, double z) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib3dARB([In] IntPtr extensionPointer, int index, double x, double y, double z)

        #region void glVertexAttrib4sARB([In] IntPtr extensionPointer, int index, short x, short y, short z, short w)
        // GLvoid glVertexAttrib4sARB(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg index\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg w\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int16,[in]int16,[in]int16,[in]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg index\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg w\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int16,[in]int16,[in]int16,[in]int16)\r\nret")]
        #endif
        public static void glVertexAttrib4sARB([In] IntPtr extensionPointer, int index, short x, short y, short z, short w) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib4sARB([In] IntPtr extensionPointer, int index, short x, short y, short z, short w)

        #region void glVertexAttrib4fARB([In] IntPtr extensionPointer, int index, float x, float y, float z, float w)
        // GLvoid glVertexAttrib4fARB(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg index\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg w\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float32,[in]float32,[in]float32,[in]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg index\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg w\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float32,[in]float32,[in]float32,[in]float32)\r\nret")]
        #endif
        public static void glVertexAttrib4fARB([In] IntPtr extensionPointer, int index, float x, float y, float z, float w) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib4fARB([In] IntPtr extensionPointer, int index, float x, float y, float z, float w)

        #region void glVertexAttrib4dARB([In] IntPtr extensionPointer, int index, double x, double y, double z, double w)
        // GLvoid glVertexAttrib4dARB(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg index\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg w\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float64,[in]float64,[in]float64,[in]float64)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg index\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg w\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float64,[in]float64,[in]float64,[in]float64)\r\nret")]
        #endif
        public static void glVertexAttrib4dARB([In] IntPtr extensionPointer, int index, double x, double y, double z, double w) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib4dARB([In] IntPtr extensionPointer, int index, double x, double y, double z, double w)

        #region void glVertexAttrib4NubARB([In] IntPtr extensionPointer, int index, byte x, byte y, byte z, byte w)
        // GLvoid glVertexAttrib4NubARB(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg index\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg w\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]unsigned int8,[in]unsigned int8,[in]unsigned int8,[in]unsigned int8)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg index\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg w\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]unsigned int8,[in]unsigned int8,[in]unsigned int8,[in]unsigned int8)\r\nret")]
        #endif
        public static void glVertexAttrib4NubARB([In] IntPtr extensionPointer, int index, byte x, byte y, byte z, byte w) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib4NubARB([In] IntPtr extensionPointer, int index, byte x, byte y, byte z, byte w)

        #region Overloads for GLvoid glVertexAttrib1svARB(GLuint index, const GLshort* v)
        #region void glVertexAttrib1svARB([In] IntPtr extensionPointer, int index, ref short v)
        // GLvoid glVertexAttrib1svARB(GLuint index, const GLshort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]int16)\r\nret")]
        #endif
        public static void glVertexAttrib1svARB([In] IntPtr extensionPointer, int index, ref short v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib1svARB([In] IntPtr extensionPointer, int index, ref short v)

        #region void glVertexAttrib1svARB([In] IntPtr extensionPointer, int index, short[] v)
        // GLvoid glVertexAttrib1svARB(GLuint index, const GLshort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int16[])\r\nret")]
        #endif
        public static void glVertexAttrib1svARB([In] IntPtr extensionPointer, int index, short[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib1svARB([In] IntPtr extensionPointer, int index, short[] v)

        #region void glVertexAttrib1svARB([In] IntPtr extensionPointer, int index, IntPtr v)
        // GLvoid glVertexAttrib1svARB(GLuint index, const GLshort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glVertexAttrib1svARB([In] IntPtr extensionPointer, int index, IntPtr v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib1svARB([In] IntPtr extensionPointer, int index, IntPtr v)

        #region void glVertexAttrib1svARB([In] IntPtr extensionPointer, int index, short* v)
        // GLvoid glVertexAttrib1svARB(GLuint index, const GLshort* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int16*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int16*)\r\nret")]
        #endif
        public static unsafe void glVertexAttrib1svARB([In] IntPtr extensionPointer, int index, short* v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib1svARB([In] IntPtr extensionPointer, int index, short* v)
        #endregion Overloads for GLvoid glVertexAttrib1svARB(GLuint index, const GLshort* v)

        #region Overloads for GLvoid glVertexAttrib1fvARB(GLuint index, const GLfloat* v)
        #region void glVertexAttrib1fvARB([In] IntPtr extensionPointer, int index, ref float v)
        // GLvoid glVertexAttrib1fvARB(GLuint index, const GLfloat* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]float32)\r\nret")]
        #endif
        public static void glVertexAttrib1fvARB([In] IntPtr extensionPointer, int index, ref float v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib1fvARB([In] IntPtr extensionPointer, int index, ref float v)

        #region void glVertexAttrib1fvARB([In] IntPtr extensionPointer, int index, float[] v)
        // GLvoid glVertexAttrib1fvARB(GLuint index, const GLfloat* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float32[])\r\nret")]
        #endif
        public static void glVertexAttrib1fvARB([In] IntPtr extensionPointer, int index, float[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib1fvARB([In] IntPtr extensionPointer, int index, float[] v)

        #region void glVertexAttrib1fvARB([In] IntPtr extensionPointer, int index, IntPtr v)
        // GLvoid glVertexAttrib1fvARB(GLuint index, const GLfloat* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glVertexAttrib1fvARB([In] IntPtr extensionPointer, int index, IntPtr v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib1fvARB([In] IntPtr extensionPointer, int index, IntPtr v)

        #region void glVertexAttrib1fvARB([In] IntPtr extensionPointer, int index, float* v)
        // GLvoid glVertexAttrib1fvARB(GLuint index, const GLfloat* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float32*)\r\nret")]
        #endif
        public static unsafe void glVertexAttrib1fvARB([In] IntPtr extensionPointer, int index, float* v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib1fvARB([In] IntPtr extensionPointer, int index, float* v)
        #endregion Overloads for GLvoid glVertexAttrib1fvARB(GLuint index, const GLfloat* v)

        #region Overloads for GLvoid glVertexAttrib1dvARB(GLuint index, const GLdouble* v)
        #region void glVertexAttrib1dvARB([In] IntPtr extensionPointer, int index, ref double v)
        // GLvoid glVertexAttrib1dvARB(GLuint index, const GLdouble* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]float64)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]float64)\r\nret")]
        #endif
        public static void glVertexAttrib1dvARB([In] IntPtr extensionPointer, int index, ref double v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib1dvARB([In] IntPtr extensionPointer, int index, ref double v)

        #region void glVertexAttrib1dvARB([In] IntPtr extensionPointer, int index, double[] v)
        // GLvoid glVertexAttrib1dvARB(GLuint index, const GLdouble* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float64[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float64[])\r\nret")]
        #endif
        public static void glVertexAttrib1dvARB([In] IntPtr extensionPointer, int index, double[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib1dvARB([In] IntPtr extensionPointer, int index, double[] v)

        #region void glVertexAttrib1dvARB([In] IntPtr extensionPointer, int index, IntPtr v)
        // GLvoid glVertexAttrib1dvARB(GLuint index, const GLdouble* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glVertexAttrib1dvARB([In] IntPtr extensionPointer, int index, IntPtr v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib1dvARB([In] IntPtr extensionPointer, int index, IntPtr v)

        #region void glVertexAttrib1dvARB([In] IntPtr extensionPointer, int index, double* v)
        // GLvoid glVertexAttrib1dvARB(GLuint index, const GLdouble* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float64*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float64*)\r\nret")]
        #endif
        public static unsafe void glVertexAttrib1dvARB([In] IntPtr extensionPointer, int index, double* v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib1dvARB([In] IntPtr extensionPointer, int index, double* v)
        #endregion Overloads for GLvoid glVertexAttrib1dvARB(GLuint index, const GLdouble* v)

        #region Overloads for GLvoid glVertexAttrib2svARB(GLuint index, const GLshort* v)
        #region void glVertexAttrib2svARB([In] IntPtr extensionPointer, int index, ref short v)
        // GLvoid glVertexAttrib2svARB(GLuint index, const GLshort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]int16)\r\nret")]
        #endif
        public static void glVertexAttrib2svARB([In] IntPtr extensionPointer, int index, ref short v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib2svARB([In] IntPtr extensionPointer, int index, ref short v)

        #region void glVertexAttrib2svARB([In] IntPtr extensionPointer, int index, short[] v)
        // GLvoid glVertexAttrib2svARB(GLuint index, const GLshort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int16[])\r\nret")]
        #endif
        public static void glVertexAttrib2svARB([In] IntPtr extensionPointer, int index, short[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib2svARB([In] IntPtr extensionPointer, int index, short[] v)

        #region void glVertexAttrib2svARB([In] IntPtr extensionPointer, int index, IntPtr v)
        // GLvoid glVertexAttrib2svARB(GLuint index, const GLshort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glVertexAttrib2svARB([In] IntPtr extensionPointer, int index, IntPtr v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib2svARB([In] IntPtr extensionPointer, int index, IntPtr v)

        #region void glVertexAttrib2svARB([In] IntPtr extensionPointer, int index, short* v)
        // GLvoid glVertexAttrib2svARB(GLuint index, const GLshort* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int16*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int16*)\r\nret")]
        #endif
        public static unsafe void glVertexAttrib2svARB([In] IntPtr extensionPointer, int index, short* v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib2svARB([In] IntPtr extensionPointer, int index, short* v)
        #endregion Overloads for GLvoid glVertexAttrib2svARB(GLuint index, const GLshort* v)

        #region Overloads for GLvoid glVertexAttrib2fvARB(GLuint index, const GLfloat* v)
        #region void glVertexAttrib2fvARB([In] IntPtr extensionPointer, int index, ref float v)
        // GLvoid glVertexAttrib2fvARB(GLuint index, const GLfloat* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]float32)\r\nret")]
        #endif
        public static void glVertexAttrib2fvARB([In] IntPtr extensionPointer, int index, ref float v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib2fvARB([In] IntPtr extensionPointer, int index, ref float v)

        #region void glVertexAttrib2fvARB([In] IntPtr extensionPointer, int index, float[] v)
        // GLvoid glVertexAttrib2fvARB(GLuint index, const GLfloat* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float32[])\r\nret")]
        #endif
        public static void glVertexAttrib2fvARB([In] IntPtr extensionPointer, int index, float[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib2fvARB([In] IntPtr extensionPointer, int index, float[] v)

        #region void glVertexAttrib2fvARB([In] IntPtr extensionPointer, int index, IntPtr v)
        // GLvoid glVertexAttrib2fvARB(GLuint index, const GLfloat* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glVertexAttrib2fvARB([In] IntPtr extensionPointer, int index, IntPtr v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib2fvARB([In] IntPtr extensionPointer, int index, IntPtr v)

        #region void glVertexAttrib2fvARB([In] IntPtr extensionPointer, int index, float* v)
        // GLvoid glVertexAttrib2fvARB(GLuint index, const GLfloat* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float32*)\r\nret")]
        #endif
        public static unsafe void glVertexAttrib2fvARB([In] IntPtr extensionPointer, int index, float* v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib2fvARB([In] IntPtr extensionPointer, int index, float* v)
        #endregion Overloads for GLvoid glVertexAttrib2fvARB(GLuint index, const GLfloat* v)

        #region Overloads for GLvoid glVertexAttrib2dvARB(GLuint index, const GLdouble* v)
        #region void glVertexAttrib2dvARB([In] IntPtr extensionPointer, int index, ref double v)
        // GLvoid glVertexAttrib2dvARB(GLuint index, const GLdouble* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]float64)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]float64)\r\nret")]
        #endif
        public static void glVertexAttrib2dvARB([In] IntPtr extensionPointer, int index, ref double v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib2dvARB([In] IntPtr extensionPointer, int index, ref double v)

        #region void glVertexAttrib2dvARB([In] IntPtr extensionPointer, int index, double[] v)
        // GLvoid glVertexAttrib2dvARB(GLuint index, const GLdouble* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float64[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float64[])\r\nret")]
        #endif
        public static void glVertexAttrib2dvARB([In] IntPtr extensionPointer, int index, double[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib2dvARB([In] IntPtr extensionPointer, int index, double[] v)

        #region void glVertexAttrib2dvARB([In] IntPtr extensionPointer, int index, IntPtr v)
        // GLvoid glVertexAttrib2dvARB(GLuint index, const GLdouble* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glVertexAttrib2dvARB([In] IntPtr extensionPointer, int index, IntPtr v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib2dvARB([In] IntPtr extensionPointer, int index, IntPtr v)

        #region void glVertexAttrib2dvARB([In] IntPtr extensionPointer, int index, double* v)
        // GLvoid glVertexAttrib2dvARB(GLuint index, const GLdouble* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float64*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float64*)\r\nret")]
        #endif
        public static unsafe void glVertexAttrib2dvARB([In] IntPtr extensionPointer, int index, double* v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib2dvARB([In] IntPtr extensionPointer, int index, double* v)
        #endregion Overloads for GLvoid glVertexAttrib2dvARB(GLuint index, const GLdouble* v)

        #region Overloads for GLvoid glVertexAttrib3svARB(GLuint index, const GLshort* v)
        #region void glVertexAttrib3svARB([In] IntPtr extensionPointer, int index, ref short v)
        // GLvoid glVertexAttrib3svARB(GLuint index, const GLshort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]int16)\r\nret")]
        #endif
        public static void glVertexAttrib3svARB([In] IntPtr extensionPointer, int index, ref short v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib3svARB([In] IntPtr extensionPointer, int index, ref short v)

        #region void glVertexAttrib3svARB([In] IntPtr extensionPointer, int index, short[] v)
        // GLvoid glVertexAttrib3svARB(GLuint index, const GLshort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int16[])\r\nret")]
        #endif
        public static void glVertexAttrib3svARB([In] IntPtr extensionPointer, int index, short[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib3svARB([In] IntPtr extensionPointer, int index, short[] v)

        #region void glVertexAttrib3svARB([In] IntPtr extensionPointer, int index, IntPtr v)
        // GLvoid glVertexAttrib3svARB(GLuint index, const GLshort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glVertexAttrib3svARB([In] IntPtr extensionPointer, int index, IntPtr v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib3svARB([In] IntPtr extensionPointer, int index, IntPtr v)

        #region void glVertexAttrib3svARB([In] IntPtr extensionPointer, int index, short* v)
        // GLvoid glVertexAttrib3svARB(GLuint index, const GLshort* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int16*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int16*)\r\nret")]
        #endif
        public static unsafe void glVertexAttrib3svARB([In] IntPtr extensionPointer, int index, short* v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib3svARB([In] IntPtr extensionPointer, int index, short* v)
        #endregion Overloads for GLvoid glVertexAttrib3svARB(GLuint index, const GLshort* v)

        #region Overloads for GLvoid glVertexAttrib3fvARB(GLuint index, const GLfloat* v)
        #region void glVertexAttrib3fvARB([In] IntPtr extensionPointer, int index, ref float v)
        // GLvoid glVertexAttrib3fvARB(GLuint index, const GLfloat* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]float32)\r\nret")]
        #endif
        public static void glVertexAttrib3fvARB([In] IntPtr extensionPointer, int index, ref float v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib3fvARB([In] IntPtr extensionPointer, int index, ref float v)

        #region void glVertexAttrib3fvARB([In] IntPtr extensionPointer, int index, float[] v)
        // GLvoid glVertexAttrib3fvARB(GLuint index, const GLfloat* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float32[])\r\nret")]
        #endif
        public static void glVertexAttrib3fvARB([In] IntPtr extensionPointer, int index, float[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib3fvARB([In] IntPtr extensionPointer, int index, float[] v)

        #region void glVertexAttrib3fvARB([In] IntPtr extensionPointer, int index, IntPtr v)
        // GLvoid glVertexAttrib3fvARB(GLuint index, const GLfloat* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glVertexAttrib3fvARB([In] IntPtr extensionPointer, int index, IntPtr v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib3fvARB([In] IntPtr extensionPointer, int index, IntPtr v)

        #region void glVertexAttrib3fvARB([In] IntPtr extensionPointer, int index, float* v)
        // GLvoid glVertexAttrib3fvARB(GLuint index, const GLfloat* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float32*)\r\nret")]
        #endif
        public static unsafe void glVertexAttrib3fvARB([In] IntPtr extensionPointer, int index, float* v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib3fvARB([In] IntPtr extensionPointer, int index, float* v)
        #endregion Overloads for GLvoid glVertexAttrib3fvARB(GLuint index, const GLfloat* v)

        #region Overloads for GLvoid glVertexAttrib3dvARB(GLuint index, const GLdouble* v)
        #region void glVertexAttrib3dvARB([In] IntPtr extensionPointer, int index, ref double v)
        // GLvoid glVertexAttrib3dvARB(GLuint index, const GLdouble* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]float64)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]float64)\r\nret")]
        #endif
        public static void glVertexAttrib3dvARB([In] IntPtr extensionPointer, int index, ref double v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib3dvARB([In] IntPtr extensionPointer, int index, ref double v)

        #region void glVertexAttrib3dvARB([In] IntPtr extensionPointer, int index, double[] v)
        // GLvoid glVertexAttrib3dvARB(GLuint index, const GLdouble* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float64[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float64[])\r\nret")]
        #endif
        public static void glVertexAttrib3dvARB([In] IntPtr extensionPointer, int index, double[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib3dvARB([In] IntPtr extensionPointer, int index, double[] v)

        #region void glVertexAttrib3dvARB([In] IntPtr extensionPointer, int index, IntPtr v)
        // GLvoid glVertexAttrib3dvARB(GLuint index, const GLdouble* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glVertexAttrib3dvARB([In] IntPtr extensionPointer, int index, IntPtr v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib3dvARB([In] IntPtr extensionPointer, int index, IntPtr v)

        #region void glVertexAttrib3dvARB([In] IntPtr extensionPointer, int index, double* v)
        // GLvoid glVertexAttrib3dvARB(GLuint index, const GLdouble* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float64*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float64*)\r\nret")]
        #endif
        public static unsafe void glVertexAttrib3dvARB([In] IntPtr extensionPointer, int index, double* v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib3dvARB([In] IntPtr extensionPointer, int index, double* v)
        #endregion Overloads for GLvoid glVertexAttrib3dvARB(GLuint index, const GLdouble* v)

        #region Overloads for GLvoid glVertexAttrib4bvARB(GLuint index, const GLbyte* v)
        #region void glVertexAttrib4bvARB([In] IntPtr extensionPointer, int index, byte[] v)
        // GLvoid glVertexAttrib4bvARB(GLuint index, const GLbyte* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]unsigned int8[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]unsigned int8[])\r\nret")]
        #endif
        public static void glVertexAttrib4bvARB([In] IntPtr extensionPointer, int index, byte[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib4bvARB([In] IntPtr extensionPointer, int index, byte[] v)

        #region void glVertexAttrib4bvARB([In] IntPtr extensionPointer, int index, ref byte v)
        // GLvoid glVertexAttrib4bvARB(GLuint index, const GLbyte* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]unsigned int8)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]unsigned int8)\r\nret")]
        #endif
        public static void glVertexAttrib4bvARB([In] IntPtr extensionPointer, int index, ref byte v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib4bvARB([In] IntPtr extensionPointer, int index, ref byte v)

        #region void glVertexAttrib4bvARB([In] IntPtr extensionPointer, int index, IntPtr v)
        // GLvoid glVertexAttrib4bvARB(GLuint index, const GLbyte* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glVertexAttrib4bvARB([In] IntPtr extensionPointer, int index, IntPtr v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib4bvARB([In] IntPtr extensionPointer, int index, IntPtr v)

        #region void glVertexAttrib4bvARB([In] IntPtr extensionPointer, int index, ref sbyte v)
        // GLvoid glVertexAttrib4bvARB(GLuint index, const GLbyte* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]int8)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]int8)\r\nret")]
        #endif
        public static void glVertexAttrib4bvARB([In] IntPtr extensionPointer, int index, ref sbyte v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib4bvARB([In] IntPtr extensionPointer, int index, ref sbyte v)

        #region void glVertexAttrib4bvARB([In] IntPtr extensionPointer, int index, sbyte[] v)
        // GLvoid glVertexAttrib4bvARB(GLuint index, const GLbyte* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int8[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int8[])\r\nret")]
        #endif
        public static void glVertexAttrib4bvARB([In] IntPtr extensionPointer, int index, sbyte[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib4bvARB([In] IntPtr extensionPointer, int index, sbyte[] v)

        #region void glVertexAttrib4bvARB([In] IntPtr extensionPointer, int index, sbyte* v)
        // GLvoid glVertexAttrib4bvARB(GLuint index, const GLbyte* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int8*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int8*)\r\nret")]
        #endif
        public static unsafe void glVertexAttrib4bvARB([In] IntPtr extensionPointer, int index, sbyte* v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib4bvARB([In] IntPtr extensionPointer, int index, sbyte* v)
        #endregion Overloads for GLvoid glVertexAttrib4bvARB(GLuint index, const GLbyte* v)

        #region Overloads for GLvoid glVertexAttrib4svARB(GLuint index, const GLshort* v)
        #region void glVertexAttrib4svARB([In] IntPtr extensionPointer, int index, ref short v)
        // GLvoid glVertexAttrib4svARB(GLuint index, const GLshort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]int16)\r\nret")]
        #endif
        public static void glVertexAttrib4svARB([In] IntPtr extensionPointer, int index, ref short v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib4svARB([In] IntPtr extensionPointer, int index, ref short v)

        #region void glVertexAttrib4svARB([In] IntPtr extensionPointer, int index, short[] v)
        // GLvoid glVertexAttrib4svARB(GLuint index, const GLshort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int16[])\r\nret")]
        #endif
        public static void glVertexAttrib4svARB([In] IntPtr extensionPointer, int index, short[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib4svARB([In] IntPtr extensionPointer, int index, short[] v)

        #region void glVertexAttrib4svARB([In] IntPtr extensionPointer, int index, IntPtr v)
        // GLvoid glVertexAttrib4svARB(GLuint index, const GLshort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glVertexAttrib4svARB([In] IntPtr extensionPointer, int index, IntPtr v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib4svARB([In] IntPtr extensionPointer, int index, IntPtr v)

        #region void glVertexAttrib4svARB([In] IntPtr extensionPointer, int index, short* v)
        // GLvoid glVertexAttrib4svARB(GLuint index, const GLshort* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int16*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int16*)\r\nret")]
        #endif
        public static unsafe void glVertexAttrib4svARB([In] IntPtr extensionPointer, int index, short* v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib4svARB([In] IntPtr extensionPointer, int index, short* v)
        #endregion Overloads for GLvoid glVertexAttrib4svARB(GLuint index, const GLshort* v)

        #region Overloads for GLvoid glVertexAttrib4ivARB(GLuint index, const GLint* v)
        #region void glVertexAttrib4ivARB([In] IntPtr extensionPointer, int index, ref int v)
        // GLvoid glVertexAttrib4ivARB(GLuint index, const GLint* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]int32)\r\nret")]
        #endif
        public static void glVertexAttrib4ivARB([In] IntPtr extensionPointer, int index, ref int v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib4ivARB([In] IntPtr extensionPointer, int index, ref int v)

        #region void glVertexAttrib4ivARB([In] IntPtr extensionPointer, int index, int[] v)
        // GLvoid glVertexAttrib4ivARB(GLuint index, const GLint* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32[])\r\nret")]
        #endif
        public static void glVertexAttrib4ivARB([In] IntPtr extensionPointer, int index, int[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib4ivARB([In] IntPtr extensionPointer, int index, int[] v)

        #region void glVertexAttrib4ivARB([In] IntPtr extensionPointer, int index, IntPtr v)
        // GLvoid glVertexAttrib4ivARB(GLuint index, const GLint* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glVertexAttrib4ivARB([In] IntPtr extensionPointer, int index, IntPtr v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib4ivARB([In] IntPtr extensionPointer, int index, IntPtr v)

        #region void glVertexAttrib4ivARB([In] IntPtr extensionPointer, int index, int* v)
        // GLvoid glVertexAttrib4ivARB(GLuint index, const GLint* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32*)\r\nret")]
        #endif
        public static unsafe void glVertexAttrib4ivARB([In] IntPtr extensionPointer, int index, int* v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib4ivARB([In] IntPtr extensionPointer, int index, int* v)
        #endregion Overloads for GLvoid glVertexAttrib4ivARB(GLuint index, const GLint* v)

        #region Overloads for GLvoid glVertexAttrib4ubvARB(GLuint index, const GLubyte* v)
        #region void glVertexAttrib4ubvARB([In] IntPtr extensionPointer, int index, ref byte v)
        // GLvoid glVertexAttrib4ubvARB(GLuint index, const GLubyte* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]unsigned int8)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]unsigned int8)\r\nret")]
        #endif
        public static void glVertexAttrib4ubvARB([In] IntPtr extensionPointer, int index, ref byte v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib4ubvARB([In] IntPtr extensionPointer, int index, ref byte v)

        #region void glVertexAttrib4ubvARB([In] IntPtr extensionPointer, int index, byte[] v)
        // GLvoid glVertexAttrib4ubvARB(GLuint index, const GLubyte* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]unsigned int8[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]unsigned int8[])\r\nret")]
        #endif
        public static void glVertexAttrib4ubvARB([In] IntPtr extensionPointer, int index, byte[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib4ubvARB([In] IntPtr extensionPointer, int index, byte[] v)

        #region void glVertexAttrib4ubvARB([In] IntPtr extensionPointer, int index, IntPtr v)
        // GLvoid glVertexAttrib4ubvARB(GLuint index, const GLubyte* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glVertexAttrib4ubvARB([In] IntPtr extensionPointer, int index, IntPtr v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib4ubvARB([In] IntPtr extensionPointer, int index, IntPtr v)

        #region void glVertexAttrib4ubvARB([In] IntPtr extensionPointer, int index, byte* v)
        // GLvoid glVertexAttrib4ubvARB(GLuint index, const GLubyte* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]unsigned int8*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]unsigned int8*)\r\nret")]
        #endif
        public static unsafe void glVertexAttrib4ubvARB([In] IntPtr extensionPointer, int index, byte* v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib4ubvARB([In] IntPtr extensionPointer, int index, byte* v)
        #endregion Overloads for GLvoid glVertexAttrib4ubvARB(GLuint index, const GLubyte* v)

        #region Overloads for GLvoid glVertexAttrib4usvARB(GLuint index, const GLushort* v)
        #region void glVertexAttrib4usvARB([In] IntPtr extensionPointer, int index, short[] v)
        // GLvoid glVertexAttrib4usvARB(GLuint index, const GLushort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int16[])\r\nret")]
        #endif
        public static void glVertexAttrib4usvARB([In] IntPtr extensionPointer, int index, short[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib4usvARB([In] IntPtr extensionPointer, int index, short[] v)

        #region void glVertexAttrib4usvARB([In] IntPtr extensionPointer, int index, ref short v)
        // GLvoid glVertexAttrib4usvARB(GLuint index, const GLushort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]int16)\r\nret")]
        #endif
        public static void glVertexAttrib4usvARB([In] IntPtr extensionPointer, int index, ref short v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib4usvARB([In] IntPtr extensionPointer, int index, ref short v)

        #region void glVertexAttrib4usvARB([In] IntPtr extensionPointer, int index, IntPtr v)
        // GLvoid glVertexAttrib4usvARB(GLuint index, const GLushort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glVertexAttrib4usvARB([In] IntPtr extensionPointer, int index, IntPtr v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib4usvARB([In] IntPtr extensionPointer, int index, IntPtr v)

        #region void glVertexAttrib4usvARB([In] IntPtr extensionPointer, int index, ref ushort v)
        // GLvoid glVertexAttrib4usvARB(GLuint index, const GLushort* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]unsigned int16)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]unsigned int16)\r\nret")]
        #endif
        public static void glVertexAttrib4usvARB([In] IntPtr extensionPointer, int index, ref ushort v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib4usvARB([In] IntPtr extensionPointer, int index, ref ushort v)

        #region void glVertexAttrib4usvARB([In] IntPtr extensionPointer, int index, ushort[] v)
        // GLvoid glVertexAttrib4usvARB(GLuint index, const GLushort* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]unsigned int16[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]unsigned int16[])\r\nret")]
        #endif
        public static void glVertexAttrib4usvARB([In] IntPtr extensionPointer, int index, ushort[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib4usvARB([In] IntPtr extensionPointer, int index, ushort[] v)

        #region void glVertexAttrib4usvARB([In] IntPtr extensionPointer, int index, ushort* v)
        // GLvoid glVertexAttrib4usvARB(GLuint index, const GLushort* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]unsigned int16*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]unsigned int16*)\r\nret")]
        #endif
        public static unsafe void glVertexAttrib4usvARB([In] IntPtr extensionPointer, int index, ushort* v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib4usvARB([In] IntPtr extensionPointer, int index, ushort* v)
        #endregion Overloads for GLvoid glVertexAttrib4usvARB(GLuint index, const GLushort* v)

        #region Overloads for GLvoid glVertexAttrib4uivARB(GLuint index, const GLuint* v)
        #region void glVertexAttrib4uivARB([In] IntPtr extensionPointer, int index, int[] v)
        // GLvoid glVertexAttrib4uivARB(GLuint index, const GLuint* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32[])\r\nret")]
        #endif
        public static void glVertexAttrib4uivARB([In] IntPtr extensionPointer, int index, int[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib4uivARB([In] IntPtr extensionPointer, int index, int[] v)

        #region void glVertexAttrib4uivARB([In] IntPtr extensionPointer, int index, ref int v)
        // GLvoid glVertexAttrib4uivARB(GLuint index, const GLuint* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]int32)\r\nret")]
        #endif
        public static void glVertexAttrib4uivARB([In] IntPtr extensionPointer, int index, ref int v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib4uivARB([In] IntPtr extensionPointer, int index, ref int v)

        #region void glVertexAttrib4uivARB([In] IntPtr extensionPointer, int index, IntPtr v)
        // GLvoid glVertexAttrib4uivARB(GLuint index, const GLuint* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glVertexAttrib4uivARB([In] IntPtr extensionPointer, int index, IntPtr v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib4uivARB([In] IntPtr extensionPointer, int index, IntPtr v)

        #region void glVertexAttrib4uivARB([In] IntPtr extensionPointer, int index, ref uint v)
        // GLvoid glVertexAttrib4uivARB(GLuint index, const GLuint* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]unsigned int32)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]unsigned int32)\r\nret")]
        #endif
        public static void glVertexAttrib4uivARB([In] IntPtr extensionPointer, int index, ref uint v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib4uivARB([In] IntPtr extensionPointer, int index, ref uint v)

        #region void glVertexAttrib4uivARB([In] IntPtr extensionPointer, int index, uint[] v)
        // GLvoid glVertexAttrib4uivARB(GLuint index, const GLuint* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]unsigned int32[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]unsigned int32[])\r\nret")]
        #endif
        public static void glVertexAttrib4uivARB([In] IntPtr extensionPointer, int index, uint[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib4uivARB([In] IntPtr extensionPointer, int index, uint[] v)

        #region void glVertexAttrib4uivARB([In] IntPtr extensionPointer, int index, uint* v)
        // GLvoid glVertexAttrib4uivARB(GLuint index, const GLuint* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]unsigned int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]unsigned int32*)\r\nret")]
        #endif
        public static unsafe void glVertexAttrib4uivARB([In] IntPtr extensionPointer, int index, uint* v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib4uivARB([In] IntPtr extensionPointer, int index, uint* v)
        #endregion Overloads for GLvoid glVertexAttrib4uivARB(GLuint index, const GLuint* v)

        #region Overloads for GLvoid glVertexAttrib4fvARB(GLuint index, const GLfloat* v)
        #region void glVertexAttrib4fvARB([In] IntPtr extensionPointer, int index, ref float v)
        // GLvoid glVertexAttrib4fvARB(GLuint index, const GLfloat* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]float32)\r\nret")]
        #endif
        public static void glVertexAttrib4fvARB([In] IntPtr extensionPointer, int index, ref float v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib4fvARB([In] IntPtr extensionPointer, int index, ref float v)

        #region void glVertexAttrib4fvARB([In] IntPtr extensionPointer, int index, float[] v)
        // GLvoid glVertexAttrib4fvARB(GLuint index, const GLfloat* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float32[])\r\nret")]
        #endif
        public static void glVertexAttrib4fvARB([In] IntPtr extensionPointer, int index, float[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib4fvARB([In] IntPtr extensionPointer, int index, float[] v)

        #region void glVertexAttrib4fvARB([In] IntPtr extensionPointer, int index, IntPtr v)
        // GLvoid glVertexAttrib4fvARB(GLuint index, const GLfloat* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glVertexAttrib4fvARB([In] IntPtr extensionPointer, int index, IntPtr v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib4fvARB([In] IntPtr extensionPointer, int index, IntPtr v)

        #region void glVertexAttrib4fvARB([In] IntPtr extensionPointer, int index, float* v)
        // GLvoid glVertexAttrib4fvARB(GLuint index, const GLfloat* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float32*)\r\nret")]
        #endif
        public static unsafe void glVertexAttrib4fvARB([In] IntPtr extensionPointer, int index, float* v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib4fvARB([In] IntPtr extensionPointer, int index, float* v)
        #endregion Overloads for GLvoid glVertexAttrib4fvARB(GLuint index, const GLfloat* v)

        #region Overloads for GLvoid glVertexAttrib4dvARB(GLuint index, const GLdouble* v)
        #region void glVertexAttrib4dvARB([In] IntPtr extensionPointer, int index, ref double v)
        // GLvoid glVertexAttrib4dvARB(GLuint index, const GLdouble* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]float64)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]float64)\r\nret")]
        #endif
        public static void glVertexAttrib4dvARB([In] IntPtr extensionPointer, int index, ref double v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib4dvARB([In] IntPtr extensionPointer, int index, ref double v)

        #region void glVertexAttrib4dvARB([In] IntPtr extensionPointer, int index, double[] v)
        // GLvoid glVertexAttrib4dvARB(GLuint index, const GLdouble* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float64[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float64[])\r\nret")]
        #endif
        public static void glVertexAttrib4dvARB([In] IntPtr extensionPointer, int index, double[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib4dvARB([In] IntPtr extensionPointer, int index, double[] v)

        #region void glVertexAttrib4dvARB([In] IntPtr extensionPointer, int index, IntPtr v)
        // GLvoid glVertexAttrib4dvARB(GLuint index, const GLdouble* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glVertexAttrib4dvARB([In] IntPtr extensionPointer, int index, IntPtr v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib4dvARB([In] IntPtr extensionPointer, int index, IntPtr v)

        #region void glVertexAttrib4dvARB([In] IntPtr extensionPointer, int index, double* v)
        // GLvoid glVertexAttrib4dvARB(GLuint index, const GLdouble* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float64*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float64*)\r\nret")]
        #endif
        public static unsafe void glVertexAttrib4dvARB([In] IntPtr extensionPointer, int index, double* v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib4dvARB([In] IntPtr extensionPointer, int index, double* v)
        #endregion Overloads for GLvoid glVertexAttrib4dvARB(GLuint index, const GLdouble* v)

        #region Overloads for GLvoid glVertexAttrib4NbvARB(GLuint index, const GLbyte* v)
        #region void glVertexAttrib4NbvARB([In] IntPtr extensionPointer, int index, byte[] v)
        // GLvoid glVertexAttrib4NbvARB(GLuint index, const GLbyte* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]unsigned int8[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]unsigned int8[])\r\nret")]
        #endif
        public static void glVertexAttrib4NbvARB([In] IntPtr extensionPointer, int index, byte[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib4NbvARB([In] IntPtr extensionPointer, int index, byte[] v)

        #region void glVertexAttrib4NbvARB([In] IntPtr extensionPointer, int index, ref byte v)
        // GLvoid glVertexAttrib4NbvARB(GLuint index, const GLbyte* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]unsigned int8)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]unsigned int8)\r\nret")]
        #endif
        public static void glVertexAttrib4NbvARB([In] IntPtr extensionPointer, int index, ref byte v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib4NbvARB([In] IntPtr extensionPointer, int index, ref byte v)

        #region void glVertexAttrib4NbvARB([In] IntPtr extensionPointer, int index, IntPtr v)
        // GLvoid glVertexAttrib4NbvARB(GLuint index, const GLbyte* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glVertexAttrib4NbvARB([In] IntPtr extensionPointer, int index, IntPtr v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib4NbvARB([In] IntPtr extensionPointer, int index, IntPtr v)

        #region void glVertexAttrib4NbvARB([In] IntPtr extensionPointer, int index, ref sbyte v)
        // GLvoid glVertexAttrib4NbvARB(GLuint index, const GLbyte* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]int8)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]int8)\r\nret")]
        #endif
        public static void glVertexAttrib4NbvARB([In] IntPtr extensionPointer, int index, ref sbyte v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib4NbvARB([In] IntPtr extensionPointer, int index, ref sbyte v)

        #region void glVertexAttrib4NbvARB([In] IntPtr extensionPointer, int index, sbyte[] v)
        // GLvoid glVertexAttrib4NbvARB(GLuint index, const GLbyte* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int8[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int8[])\r\nret")]
        #endif
        public static void glVertexAttrib4NbvARB([In] IntPtr extensionPointer, int index, sbyte[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib4NbvARB([In] IntPtr extensionPointer, int index, sbyte[] v)

        #region void glVertexAttrib4NbvARB([In] IntPtr extensionPointer, int index, sbyte* v)
        // GLvoid glVertexAttrib4NbvARB(GLuint index, const GLbyte* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int8*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int8*)\r\nret")]
        #endif
        public static unsafe void glVertexAttrib4NbvARB([In] IntPtr extensionPointer, int index, sbyte* v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib4NbvARB([In] IntPtr extensionPointer, int index, sbyte* v)
        #endregion Overloads for GLvoid glVertexAttrib4NbvARB(GLuint index, const GLbyte* v)

        #region Overloads for GLvoid glVertexAttrib4NsvARB(GLuint index, const GLshort* v)
        #region void glVertexAttrib4NsvARB([In] IntPtr extensionPointer, int index, ref short v)
        // GLvoid glVertexAttrib4NsvARB(GLuint index, const GLshort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]int16)\r\nret")]
        #endif
        public static void glVertexAttrib4NsvARB([In] IntPtr extensionPointer, int index, ref short v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib4NsvARB([In] IntPtr extensionPointer, int index, ref short v)

        #region void glVertexAttrib4NsvARB([In] IntPtr extensionPointer, int index, short[] v)
        // GLvoid glVertexAttrib4NsvARB(GLuint index, const GLshort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int16[])\r\nret")]
        #endif
        public static void glVertexAttrib4NsvARB([In] IntPtr extensionPointer, int index, short[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib4NsvARB([In] IntPtr extensionPointer, int index, short[] v)

        #region void glVertexAttrib4NsvARB([In] IntPtr extensionPointer, int index, IntPtr v)
        // GLvoid glVertexAttrib4NsvARB(GLuint index, const GLshort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glVertexAttrib4NsvARB([In] IntPtr extensionPointer, int index, IntPtr v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib4NsvARB([In] IntPtr extensionPointer, int index, IntPtr v)

        #region void glVertexAttrib4NsvARB([In] IntPtr extensionPointer, int index, short* v)
        // GLvoid glVertexAttrib4NsvARB(GLuint index, const GLshort* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int16*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int16*)\r\nret")]
        #endif
        public static unsafe void glVertexAttrib4NsvARB([In] IntPtr extensionPointer, int index, short* v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib4NsvARB([In] IntPtr extensionPointer, int index, short* v)
        #endregion Overloads for GLvoid glVertexAttrib4NsvARB(GLuint index, const GLshort* v)

        #region Overloads for GLvoid glVertexAttrib4NivARB(GLuint index, const GLint* v)
        #region void glVertexAttrib4NivARB([In] IntPtr extensionPointer, int index, ref int v)
        // GLvoid glVertexAttrib4NivARB(GLuint index, const GLint* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]int32)\r\nret")]
        #endif
        public static void glVertexAttrib4NivARB([In] IntPtr extensionPointer, int index, ref int v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib4NivARB([In] IntPtr extensionPointer, int index, ref int v)

        #region void glVertexAttrib4NivARB([In] IntPtr extensionPointer, int index, int[] v)
        // GLvoid glVertexAttrib4NivARB(GLuint index, const GLint* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32[])\r\nret")]
        #endif
        public static void glVertexAttrib4NivARB([In] IntPtr extensionPointer, int index, int[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib4NivARB([In] IntPtr extensionPointer, int index, int[] v)

        #region void glVertexAttrib4NivARB([In] IntPtr extensionPointer, int index, IntPtr v)
        // GLvoid glVertexAttrib4NivARB(GLuint index, const GLint* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glVertexAttrib4NivARB([In] IntPtr extensionPointer, int index, IntPtr v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib4NivARB([In] IntPtr extensionPointer, int index, IntPtr v)

        #region void glVertexAttrib4NivARB([In] IntPtr extensionPointer, int index, int* v)
        // GLvoid glVertexAttrib4NivARB(GLuint index, const GLint* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32*)\r\nret")]
        #endif
        public static unsafe void glVertexAttrib4NivARB([In] IntPtr extensionPointer, int index, int* v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib4NivARB([In] IntPtr extensionPointer, int index, int* v)
        #endregion Overloads for GLvoid glVertexAttrib4NivARB(GLuint index, const GLint* v)

        #region Overloads for GLvoid glVertexAttrib4NubvARB(GLuint index, const GLubyte* v)
        #region void glVertexAttrib4NubvARB([In] IntPtr extensionPointer, int index, ref byte v)
        // GLvoid glVertexAttrib4NubvARB(GLuint index, const GLubyte* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]unsigned int8)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]unsigned int8)\r\nret")]
        #endif
        public static void glVertexAttrib4NubvARB([In] IntPtr extensionPointer, int index, ref byte v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib4NubvARB([In] IntPtr extensionPointer, int index, ref byte v)

        #region void glVertexAttrib4NubvARB([In] IntPtr extensionPointer, int index, byte[] v)
        // GLvoid glVertexAttrib4NubvARB(GLuint index, const GLubyte* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]unsigned int8[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]unsigned int8[])\r\nret")]
        #endif
        public static void glVertexAttrib4NubvARB([In] IntPtr extensionPointer, int index, byte[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib4NubvARB([In] IntPtr extensionPointer, int index, byte[] v)

        #region void glVertexAttrib4NubvARB([In] IntPtr extensionPointer, int index, IntPtr v)
        // GLvoid glVertexAttrib4NubvARB(GLuint index, const GLubyte* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glVertexAttrib4NubvARB([In] IntPtr extensionPointer, int index, IntPtr v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib4NubvARB([In] IntPtr extensionPointer, int index, IntPtr v)

        #region void glVertexAttrib4NubvARB([In] IntPtr extensionPointer, int index, byte* v)
        // GLvoid glVertexAttrib4NubvARB(GLuint index, const GLubyte* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]unsigned int8*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]unsigned int8*)\r\nret")]
        #endif
        public static unsafe void glVertexAttrib4NubvARB([In] IntPtr extensionPointer, int index, byte* v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib4NubvARB([In] IntPtr extensionPointer, int index, byte* v)
        #endregion Overloads for GLvoid glVertexAttrib4NubvARB(GLuint index, const GLubyte* v)

        #region Overloads for GLvoid glVertexAttrib4NusvARB(GLuint index, const GLushort* v)
        #region void glVertexAttrib4NusvARB([In] IntPtr extensionPointer, int index, short[] v)
        // GLvoid glVertexAttrib4NusvARB(GLuint index, const GLushort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int16[])\r\nret")]
        #endif
        public static void glVertexAttrib4NusvARB([In] IntPtr extensionPointer, int index, short[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib4NusvARB([In] IntPtr extensionPointer, int index, short[] v)

        #region void glVertexAttrib4NusvARB([In] IntPtr extensionPointer, int index, ref short v)
        // GLvoid glVertexAttrib4NusvARB(GLuint index, const GLushort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]int16)\r\nret")]
        #endif
        public static void glVertexAttrib4NusvARB([In] IntPtr extensionPointer, int index, ref short v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib4NusvARB([In] IntPtr extensionPointer, int index, ref short v)

        #region void glVertexAttrib4NusvARB([In] IntPtr extensionPointer, int index, IntPtr v)
        // GLvoid glVertexAttrib4NusvARB(GLuint index, const GLushort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glVertexAttrib4NusvARB([In] IntPtr extensionPointer, int index, IntPtr v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib4NusvARB([In] IntPtr extensionPointer, int index, IntPtr v)

        #region void glVertexAttrib4NusvARB([In] IntPtr extensionPointer, int index, ref ushort v)
        // GLvoid glVertexAttrib4NusvARB(GLuint index, const GLushort* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]unsigned int16)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]unsigned int16)\r\nret")]
        #endif
        public static void glVertexAttrib4NusvARB([In] IntPtr extensionPointer, int index, ref ushort v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib4NusvARB([In] IntPtr extensionPointer, int index, ref ushort v)

        #region void glVertexAttrib4NusvARB([In] IntPtr extensionPointer, int index, ushort[] v)
        // GLvoid glVertexAttrib4NusvARB(GLuint index, const GLushort* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]unsigned int16[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]unsigned int16[])\r\nret")]
        #endif
        public static void glVertexAttrib4NusvARB([In] IntPtr extensionPointer, int index, ushort[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib4NusvARB([In] IntPtr extensionPointer, int index, ushort[] v)

        #region void glVertexAttrib4NusvARB([In] IntPtr extensionPointer, int index, ushort* v)
        // GLvoid glVertexAttrib4NusvARB(GLuint index, const GLushort* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]unsigned int16*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]unsigned int16*)\r\nret")]
        #endif
        public static unsafe void glVertexAttrib4NusvARB([In] IntPtr extensionPointer, int index, ushort* v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib4NusvARB([In] IntPtr extensionPointer, int index, ushort* v)
        #endregion Overloads for GLvoid glVertexAttrib4NusvARB(GLuint index, const GLushort* v)

        #region Overloads for GLvoid glVertexAttrib4NuivARB(GLuint index, const GLuint* v)
        #region void glVertexAttrib4NuivARB([In] IntPtr extensionPointer, int index, int[] v)
        // GLvoid glVertexAttrib4NuivARB(GLuint index, const GLuint* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32[])\r\nret")]
        #endif
        public static void glVertexAttrib4NuivARB([In] IntPtr extensionPointer, int index, int[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib4NuivARB([In] IntPtr extensionPointer, int index, int[] v)

        #region void glVertexAttrib4NuivARB([In] IntPtr extensionPointer, int index, ref int v)
        // GLvoid glVertexAttrib4NuivARB(GLuint index, const GLuint* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]int32)\r\nret")]
        #endif
        public static void glVertexAttrib4NuivARB([In] IntPtr extensionPointer, int index, ref int v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib4NuivARB([In] IntPtr extensionPointer, int index, ref int v)

        #region void glVertexAttrib4NuivARB([In] IntPtr extensionPointer, int index, IntPtr v)
        // GLvoid glVertexAttrib4NuivARB(GLuint index, const GLuint* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glVertexAttrib4NuivARB([In] IntPtr extensionPointer, int index, IntPtr v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib4NuivARB([In] IntPtr extensionPointer, int index, IntPtr v)

        #region void glVertexAttrib4NuivARB([In] IntPtr extensionPointer, int index, ref uint v)
        // GLvoid glVertexAttrib4NuivARB(GLuint index, const GLuint* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]unsigned int32)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]unsigned int32)\r\nret")]
        #endif
        public static void glVertexAttrib4NuivARB([In] IntPtr extensionPointer, int index, ref uint v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib4NuivARB([In] IntPtr extensionPointer, int index, ref uint v)

        #region void glVertexAttrib4NuivARB([In] IntPtr extensionPointer, int index, uint[] v)
        // GLvoid glVertexAttrib4NuivARB(GLuint index, const GLuint* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]unsigned int32[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]unsigned int32[])\r\nret")]
        #endif
        public static void glVertexAttrib4NuivARB([In] IntPtr extensionPointer, int index, uint[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib4NuivARB([In] IntPtr extensionPointer, int index, uint[] v)

        #region void glVertexAttrib4NuivARB([In] IntPtr extensionPointer, int index, uint* v)
        // GLvoid glVertexAttrib4NuivARB(GLuint index, const GLuint* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]unsigned int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]unsigned int32*)\r\nret")]
        #endif
        public static unsafe void glVertexAttrib4NuivARB([In] IntPtr extensionPointer, int index, uint* v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib4NuivARB([In] IntPtr extensionPointer, int index, uint* v)
        #endregion Overloads for GLvoid glVertexAttrib4NuivARB(GLuint index, const GLuint* v)

        #region Overloads for GLvoid glVertexAttribPointerARB(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid* pointer)
        #region void glVertexAttribPointerARB([In] IntPtr extensionPointer, int index, int size, int type, int normalized, int stride, short[] pointer)
        // GLvoid glVertexAttribPointerARB(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 7\r\nldarg index\r\nldarg size\r\nldarg type\r\nldarg normalized\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 7\r\nldarg index\r\nldarg size\r\nldarg type\r\nldarg normalized\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int16[])\r\nret")]
        #endif
        public static void glVertexAttribPointerARB([In] IntPtr extensionPointer, int index, int size, int type, int normalized, int stride, short[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttribPointerARB([In] IntPtr extensionPointer, int index, int size, int type, int normalized, int stride, short[] pointer)

        #region void glVertexAttribPointerARB([In] IntPtr extensionPointer, int index, int size, int type, int normalized, int stride, float[] pointer)
        // GLvoid glVertexAttribPointerARB(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 7\r\nldarg index\r\nldarg size\r\nldarg type\r\nldarg normalized\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 7\r\nldarg index\r\nldarg size\r\nldarg type\r\nldarg normalized\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]float32[])\r\nret")]
        #endif
        public static void glVertexAttribPointerARB([In] IntPtr extensionPointer, int index, int size, int type, int normalized, int stride, float[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttribPointerARB([In] IntPtr extensionPointer, int index, int size, int type, int normalized, int stride, float[] pointer)

        #region void glVertexAttribPointerARB([In] IntPtr extensionPointer, int index, int size, int type, int normalized, int stride, int[] pointer)
        // GLvoid glVertexAttribPointerARB(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 7\r\nldarg index\r\nldarg size\r\nldarg type\r\nldarg normalized\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 7\r\nldarg index\r\nldarg size\r\nldarg type\r\nldarg normalized\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32[])\r\nret")]
        #endif
        public static void glVertexAttribPointerARB([In] IntPtr extensionPointer, int index, int size, int type, int normalized, int stride, int[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttribPointerARB([In] IntPtr extensionPointer, int index, int size, int type, int normalized, int stride, int[] pointer)

        #region void glVertexAttribPointerARB([In] IntPtr extensionPointer, int index, int size, int type, int normalized, int stride, IntPtr pointer)
        // GLvoid glVertexAttribPointerARB(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 7\r\nldarg index\r\nldarg size\r\nldarg type\r\nldarg normalized\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 7\r\nldarg index\r\nldarg size\r\nldarg type\r\nldarg normalized\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]native int)\r\nret")]
        #endif
        public static void glVertexAttribPointerARB([In] IntPtr extensionPointer, int index, int size, int type, int normalized, int stride, IntPtr pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttribPointerARB([In] IntPtr extensionPointer, int index, int size, int type, int normalized, int stride, IntPtr pointer)

        #region void glVertexAttribPointerARB([In] IntPtr extensionPointer, int index, int size, int type, int normalized, int stride, byte[] pointer)
        // GLvoid glVertexAttribPointerARB(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 7\r\nldarg index\r\nldarg size\r\nldarg type\r\nldarg normalized\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int8[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 7\r\nldarg index\r\nldarg size\r\nldarg type\r\nldarg normalized\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int8[])\r\nret")]
        #endif
        public static void glVertexAttribPointerARB([In] IntPtr extensionPointer, int index, int size, int type, int normalized, int stride, byte[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttribPointerARB([In] IntPtr extensionPointer, int index, int size, int type, int normalized, int stride, byte[] pointer)

        #region void glVertexAttribPointerARB([In] IntPtr extensionPointer, int index, int size, int type, int normalized, int stride, double[] pointer)
        // GLvoid glVertexAttribPointerARB(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 7\r\nldarg index\r\nldarg size\r\nldarg type\r\nldarg normalized\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]float64[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 7\r\nldarg index\r\nldarg size\r\nldarg type\r\nldarg normalized\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]float64[])\r\nret")]
        #endif
        public static void glVertexAttribPointerARB([In] IntPtr extensionPointer, int index, int size, int type, int normalized, int stride, double[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttribPointerARB([In] IntPtr extensionPointer, int index, int size, int type, int normalized, int stride, double[] pointer)

        #region void glVertexAttribPointerARB([In] IntPtr extensionPointer, int index, int size, int type, int normalized, int stride, uint[] pointer)
        // GLvoid glVertexAttribPointerARB(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid* pointer)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 7\r\nldarg index\r\nldarg size\r\nldarg type\r\nldarg normalized\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int32[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 7\r\nldarg index\r\nldarg size\r\nldarg type\r\nldarg normalized\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int32[])\r\nret")]
        #endif
        public static void glVertexAttribPointerARB([In] IntPtr extensionPointer, int index, int size, int type, int normalized, int stride, uint[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttribPointerARB([In] IntPtr extensionPointer, int index, int size, int type, int normalized, int stride, uint[] pointer)

        #region void glVertexAttribPointerARB([In] IntPtr extensionPointer, int index, int size, int type, int normalized, int stride, sbyte[] pointer)
        // GLvoid glVertexAttribPointerARB(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid* pointer)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 7\r\nldarg index\r\nldarg size\r\nldarg type\r\nldarg normalized\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int8[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 7\r\nldarg index\r\nldarg size\r\nldarg type\r\nldarg normalized\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int8[])\r\nret")]
        #endif
        public static void glVertexAttribPointerARB([In] IntPtr extensionPointer, int index, int size, int type, int normalized, int stride, sbyte[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttribPointerARB([In] IntPtr extensionPointer, int index, int size, int type, int normalized, int stride, sbyte[] pointer)

        #region void glVertexAttribPointerARB([In] IntPtr extensionPointer, int index, int size, int type, int normalized, int stride, ushort[] pointer)
        // GLvoid glVertexAttribPointerARB(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid* pointer)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 7\r\nldarg index\r\nldarg size\r\nldarg type\r\nldarg normalized\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int16[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 7\r\nldarg index\r\nldarg size\r\nldarg type\r\nldarg normalized\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int16[])\r\nret")]
        #endif
        public static void glVertexAttribPointerARB([In] IntPtr extensionPointer, int index, int size, int type, int normalized, int stride, ushort[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttribPointerARB([In] IntPtr extensionPointer, int index, int size, int type, int normalized, int stride, ushort[] pointer)

        #region void glVertexAttribPointerARB([In] IntPtr extensionPointer, int index, int size, int type, int normalized, int stride, void* pointer)
        // GLvoid glVertexAttribPointerARB(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid* pointer)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 7\r\nldarg index\r\nldarg size\r\nldarg type\r\nldarg normalized\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]void*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 7\r\nldarg index\r\nldarg size\r\nldarg type\r\nldarg normalized\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]void*)\r\nret")]
        #endif
        public static unsafe void glVertexAttribPointerARB([In] IntPtr extensionPointer, int index, int size, int type, int normalized, int stride, void* pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttribPointerARB([In] IntPtr extensionPointer, int index, int size, int type, int normalized, int stride, void* pointer)
        #endregion Overloads for GLvoid glVertexAttribPointerARB(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid* pointer)

        #region void glEnableVertexAttribArrayARB([In] IntPtr extensionPointer, int index)
        // GLvoid glEnableVertexAttribArrayARB(GLuint index)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg index\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg index\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32)\r\nret")]
        #endif
        public static void glEnableVertexAttribArrayARB([In] IntPtr extensionPointer, int index) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glEnableVertexAttribArrayARB([In] IntPtr extensionPointer, int index)

        #region void glDisableVertexAttribArrayARB([In] IntPtr extensionPointer, int index)
        // GLvoid glDisableVertexAttribArrayARB(GLuint index)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg index\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg index\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32)\r\nret")]
        #endif
        public static void glDisableVertexAttribArrayARB([In] IntPtr extensionPointer, int index) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glDisableVertexAttribArrayARB([In] IntPtr extensionPointer, int index)

        #region Overloads for GLvoid glProgramStringARB(GLenum target, GLenum format, GLsizei len, const GLvoid* programString)
        #region void glProgramStringARB([In] IntPtr extensionPointer, int target, int format, int len, string programString)
        // GLvoid glProgramStringARB(GLenum target, GLenum format, GLsizei len, const GLvoid* programString)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg len\r\nldarg programString\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]string)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg len\r\nldarg programString\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]string)\r\nret")]
        #endif
        public static void glProgramStringARB([In] IntPtr extensionPointer, int target, int format, int len, string programString) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glProgramStringARB([In] IntPtr extensionPointer, int target, int format, int len, string programString)

        #region void glProgramStringARB([In] IntPtr extensionPointer, int target, int format, int len, short[] programString)
        // GLvoid glProgramStringARB(GLenum target, GLenum format, GLsizei len, const GLvoid* programString)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg len\r\nldarg programString\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg len\r\nldarg programString\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int16[])\r\nret")]
        #endif
        public static void glProgramStringARB([In] IntPtr extensionPointer, int target, int format, int len, short[] programString) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glProgramStringARB([In] IntPtr extensionPointer, int target, int format, int len, short[] programString)

        #region void glProgramStringARB([In] IntPtr extensionPointer, int target, int format, int len, float[] programString)
        // GLvoid glProgramStringARB(GLenum target, GLenum format, GLsizei len, const GLvoid* programString)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg len\r\nldarg programString\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg len\r\nldarg programString\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]float32[])\r\nret")]
        #endif
        public static void glProgramStringARB([In] IntPtr extensionPointer, int target, int format, int len, float[] programString) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glProgramStringARB([In] IntPtr extensionPointer, int target, int format, int len, float[] programString)

        #region void glProgramStringARB([In] IntPtr extensionPointer, int target, int format, int len, int[] programString)
        // GLvoid glProgramStringARB(GLenum target, GLenum format, GLsizei len, const GLvoid* programString)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg len\r\nldarg programString\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg len\r\nldarg programString\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32[])\r\nret")]
        #endif
        public static void glProgramStringARB([In] IntPtr extensionPointer, int target, int format, int len, int[] programString) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glProgramStringARB([In] IntPtr extensionPointer, int target, int format, int len, int[] programString)

        #region void glProgramStringARB([In] IntPtr extensionPointer, int target, int format, int len, IntPtr programString)
        // GLvoid glProgramStringARB(GLenum target, GLenum format, GLsizei len, const GLvoid* programString)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg len\r\nldarg programString\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg len\r\nldarg programString\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]native int)\r\nret")]
        #endif
        public static void glProgramStringARB([In] IntPtr extensionPointer, int target, int format, int len, IntPtr programString) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glProgramStringARB([In] IntPtr extensionPointer, int target, int format, int len, IntPtr programString)

        #region void glProgramStringARB([In] IntPtr extensionPointer, int target, int format, int len, byte[] programString)
        // GLvoid glProgramStringARB(GLenum target, GLenum format, GLsizei len, const GLvoid* programString)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg len\r\nldarg programString\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]unsigned int8[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg len\r\nldarg programString\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]unsigned int8[])\r\nret")]
        #endif
        public static void glProgramStringARB([In] IntPtr extensionPointer, int target, int format, int len, byte[] programString) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glProgramStringARB([In] IntPtr extensionPointer, int target, int format, int len, byte[] programString)

        #region void glProgramStringARB([In] IntPtr extensionPointer, int target, int format, int len, double[] programString)
        // GLvoid glProgramStringARB(GLenum target, GLenum format, GLsizei len, const GLvoid* programString)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg len\r\nldarg programString\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]float64[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg len\r\nldarg programString\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]float64[])\r\nret")]
        #endif
        public static void glProgramStringARB([In] IntPtr extensionPointer, int target, int format, int len, double[] programString) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glProgramStringARB([In] IntPtr extensionPointer, int target, int format, int len, double[] programString)

        #region void glProgramStringARB([In] IntPtr extensionPointer, int target, int format, int len, uint[] programString)
        // GLvoid glProgramStringARB(GLenum target, GLenum format, GLsizei len, const GLvoid* programString)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg len\r\nldarg programString\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]unsigned int32[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg len\r\nldarg programString\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]unsigned int32[])\r\nret")]
        #endif
        public static void glProgramStringARB([In] IntPtr extensionPointer, int target, int format, int len, uint[] programString) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glProgramStringARB([In] IntPtr extensionPointer, int target, int format, int len, uint[] programString)

        #region void glProgramStringARB([In] IntPtr extensionPointer, int target, int format, int len, sbyte[] programString)
        // GLvoid glProgramStringARB(GLenum target, GLenum format, GLsizei len, const GLvoid* programString)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg len\r\nldarg programString\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int8[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg len\r\nldarg programString\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int8[])\r\nret")]
        #endif
        public static void glProgramStringARB([In] IntPtr extensionPointer, int target, int format, int len, sbyte[] programString) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glProgramStringARB([In] IntPtr extensionPointer, int target, int format, int len, sbyte[] programString)

        #region void glProgramStringARB([In] IntPtr extensionPointer, int target, int format, int len, ushort[] programString)
        // GLvoid glProgramStringARB(GLenum target, GLenum format, GLsizei len, const GLvoid* programString)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg len\r\nldarg programString\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]unsigned int16[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg len\r\nldarg programString\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]unsigned int16[])\r\nret")]
        #endif
        public static void glProgramStringARB([In] IntPtr extensionPointer, int target, int format, int len, ushort[] programString) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glProgramStringARB([In] IntPtr extensionPointer, int target, int format, int len, ushort[] programString)

        #region void glProgramStringARB([In] IntPtr extensionPointer, int target, int format, int len, void* programString)
        // GLvoid glProgramStringARB(GLenum target, GLenum format, GLsizei len, const GLvoid* programString)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg len\r\nldarg programString\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]void*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg len\r\nldarg programString\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]void*)\r\nret")]
        #endif
        public static unsafe void glProgramStringARB([In] IntPtr extensionPointer, int target, int format, int len, void* programString) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glProgramStringARB([In] IntPtr extensionPointer, int target, int format, int len, void* programString)
        #endregion Overloads for GLvoid glProgramStringARB(GLenum target, GLenum format, GLsizei len, const GLvoid* programString)

        #region void glBindProgramARB([In] IntPtr extensionPointer, int target, int program)
        // GLvoid glBindProgramARB(GLenum target, GLuint program)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg program\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg program\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32)\r\nret")]
        #endif
        public static void glBindProgramARB([In] IntPtr extensionPointer, int target, int program) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glBindProgramARB([In] IntPtr extensionPointer, int target, int program)

        #region Overloads for GLvoid glDeleteProgramsARB(GLsizei n, const GLuint* programs)
        #region void glDeleteProgramsARB([In] IntPtr extensionPointer, int n, ref int programs)
        // GLvoid glDeleteProgramsARB(GLsizei n, const GLuint* programs)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg programs\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg programs\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]int32)\r\nret")]
        #endif
        public static void glDeleteProgramsARB([In] IntPtr extensionPointer, int n, ref int programs) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glDeleteProgramsARB([In] IntPtr extensionPointer, int n, ref int programs)

        #region void glDeleteProgramsARB([In] IntPtr extensionPointer, int n, int[] programs)
        // GLvoid glDeleteProgramsARB(GLsizei n, const GLuint* programs)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg programs\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg programs\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32[])\r\nret")]
        #endif
        public static void glDeleteProgramsARB([In] IntPtr extensionPointer, int n, int[] programs) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glDeleteProgramsARB([In] IntPtr extensionPointer, int n, int[] programs)

        #region void glDeleteProgramsARB([In] IntPtr extensionPointer, int n, IntPtr programs)
        // GLvoid glDeleteProgramsARB(GLsizei n, const GLuint* programs)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg programs\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg programs\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glDeleteProgramsARB([In] IntPtr extensionPointer, int n, IntPtr programs) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glDeleteProgramsARB([In] IntPtr extensionPointer, int n, IntPtr programs)

        #region void glDeleteProgramsARB([In] IntPtr extensionPointer, int n, int* programs)
        // GLvoid glDeleteProgramsARB(GLsizei n, const GLuint* programs)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg programs\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg programs\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32*)\r\nret")]
        #endif
        public static unsafe void glDeleteProgramsARB([In] IntPtr extensionPointer, int n, int* programs) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glDeleteProgramsARB([In] IntPtr extensionPointer, int n, int* programs)
        #endregion Overloads for GLvoid glDeleteProgramsARB(GLsizei n, const GLuint* programs)

        #region Overloads for GLvoid glGenProgramsARB(GLsizei n, GLuint* programs)
        #region void glGenProgramsARB([In] IntPtr extensionPointer, int n, out int programs)
        // GLvoid glGenProgramsARB(GLsizei n, GLuint* programs)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg programs\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[out]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg programs\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[out]int32)\r\nret")]
        #endif
        public static void glGenProgramsARB([In] IntPtr extensionPointer, int n, out int programs) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGenProgramsARB([In] IntPtr extensionPointer, int n, out int programs)

        #region void glGenProgramsARB([In] IntPtr extensionPointer, int n, int[] programs)
        // GLvoid glGenProgramsARB(GLsizei n, GLuint* programs)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg programs\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[out]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg programs\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[out]int32[])\r\nret")]
        #endif
        public static void glGenProgramsARB([In] IntPtr extensionPointer, int n, int[] programs) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGenProgramsARB([In] IntPtr extensionPointer, int n, int[] programs)

        #region void glGenProgramsARB([In] IntPtr extensionPointer, int n, IntPtr programs)
        // GLvoid glGenProgramsARB(GLsizei n, GLuint* programs)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg programs\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg programs\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGenProgramsARB([In] IntPtr extensionPointer, int n, IntPtr programs) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGenProgramsARB([In] IntPtr extensionPointer, int n, IntPtr programs)

        #region void glGenProgramsARB([In] IntPtr extensionPointer, int n, int* programs)
        // GLvoid glGenProgramsARB(GLsizei n, GLuint* programs)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg programs\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[out]int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg programs\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[out]int32*)\r\nret")]
        #endif
        public static unsafe void glGenProgramsARB([In] IntPtr extensionPointer, int n, int* programs) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGenProgramsARB([In] IntPtr extensionPointer, int n, int* programs)
        #endregion Overloads for GLvoid glGenProgramsARB(GLsizei n, GLuint* programs)

        #region void glProgramEnvParameter4dARB([In] IntPtr extensionPointer, int target, int index, double x, double y, double z, double w)
        // GLvoid glProgramEnvParameter4dARB(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
        #if WIN32
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg index\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg w\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]float64,[in]float64,[in]float64,[in]float64)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg index\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg w\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]float64,[in]float64,[in]float64,[in]float64)\r\nret")]
        #endif
        public static void glProgramEnvParameter4dARB([In] IntPtr extensionPointer, int target, int index, double x, double y, double z, double w) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glProgramEnvParameter4dARB([In] IntPtr extensionPointer, int target, int index, double x, double y, double z, double w)

        #region Overloads for GLvoid glProgramEnvParameter4dvARB(GLenum target, GLuint index, const GLdouble* parameters)
        #region void glProgramEnvParameter4dvARB([In] IntPtr extensionPointer, int target, int index, ref double parameters)
        // GLvoid glProgramEnvParameter4dvARB(GLenum target, GLuint index, const GLdouble* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg index\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in][out]float64)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg index\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in][out]float64)\r\nret")]
        #endif
        public static void glProgramEnvParameter4dvARB([In] IntPtr extensionPointer, int target, int index, ref double parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glProgramEnvParameter4dvARB([In] IntPtr extensionPointer, int target, int index, ref double parameters)

        #region void glProgramEnvParameter4dvARB([In] IntPtr extensionPointer, int target, int index, double[] parameters)
        // GLvoid glProgramEnvParameter4dvARB(GLenum target, GLuint index, const GLdouble* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg index\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]float64[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg index\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]float64[])\r\nret")]
        #endif
        public static void glProgramEnvParameter4dvARB([In] IntPtr extensionPointer, int target, int index, double[] parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glProgramEnvParameter4dvARB([In] IntPtr extensionPointer, int target, int index, double[] parameters)

        #region void glProgramEnvParameter4dvARB([In] IntPtr extensionPointer, int target, int index, IntPtr parameters)
        // GLvoid glProgramEnvParameter4dvARB(GLenum target, GLuint index, const GLdouble* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg index\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg index\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]native int)\r\nret")]
        #endif
        public static void glProgramEnvParameter4dvARB([In] IntPtr extensionPointer, int target, int index, IntPtr parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glProgramEnvParameter4dvARB([In] IntPtr extensionPointer, int target, int index, IntPtr parameters)

        #region void glProgramEnvParameter4dvARB([In] IntPtr extensionPointer, int target, int index, double* parameters)
        // GLvoid glProgramEnvParameter4dvARB(GLenum target, GLuint index, const GLdouble* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg index\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]float64*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg index\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]float64*)\r\nret")]
        #endif
        public static unsafe void glProgramEnvParameter4dvARB([In] IntPtr extensionPointer, int target, int index, double* parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glProgramEnvParameter4dvARB([In] IntPtr extensionPointer, int target, int index, double* parameters)
        #endregion Overloads for GLvoid glProgramEnvParameter4dvARB(GLenum target, GLuint index, const GLdouble* parameters)

        #region void glProgramEnvParameter4fARB([In] IntPtr extensionPointer, int target, int index, float x, float y, float z, float w)
        // GLvoid glProgramEnvParameter4fARB(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
        #if WIN32
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg index\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg w\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]float32,[in]float32,[in]float32,[in]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg index\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg w\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]float32,[in]float32,[in]float32,[in]float32)\r\nret")]
        #endif
        public static void glProgramEnvParameter4fARB([In] IntPtr extensionPointer, int target, int index, float x, float y, float z, float w) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glProgramEnvParameter4fARB([In] IntPtr extensionPointer, int target, int index, float x, float y, float z, float w)

        #region Overloads for GLvoid glProgramEnvParameter4fvARB(GLenum target, GLuint index, const GLfloat* parameters)
        #region void glProgramEnvParameter4fvARB([In] IntPtr extensionPointer, int target, int index, ref float parameters)
        // GLvoid glProgramEnvParameter4fvARB(GLenum target, GLuint index, const GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg index\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in][out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg index\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in][out]float32)\r\nret")]
        #endif
        public static void glProgramEnvParameter4fvARB([In] IntPtr extensionPointer, int target, int index, ref float parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glProgramEnvParameter4fvARB([In] IntPtr extensionPointer, int target, int index, ref float parameters)

        #region void glProgramEnvParameter4fvARB([In] IntPtr extensionPointer, int target, int index, float[] parameters)
        // GLvoid glProgramEnvParameter4fvARB(GLenum target, GLuint index, const GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg index\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg index\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]float32[])\r\nret")]
        #endif
        public static void glProgramEnvParameter4fvARB([In] IntPtr extensionPointer, int target, int index, float[] parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glProgramEnvParameter4fvARB([In] IntPtr extensionPointer, int target, int index, float[] parameters)

        #region void glProgramEnvParameter4fvARB([In] IntPtr extensionPointer, int target, int index, IntPtr parameters)
        // GLvoid glProgramEnvParameter4fvARB(GLenum target, GLuint index, const GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg index\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg index\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]native int)\r\nret")]
        #endif
        public static void glProgramEnvParameter4fvARB([In] IntPtr extensionPointer, int target, int index, IntPtr parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glProgramEnvParameter4fvARB([In] IntPtr extensionPointer, int target, int index, IntPtr parameters)

        #region void glProgramEnvParameter4fvARB([In] IntPtr extensionPointer, int target, int index, float* parameters)
        // GLvoid glProgramEnvParameter4fvARB(GLenum target, GLuint index, const GLfloat* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg index\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg index\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]float32*)\r\nret")]
        #endif
        public static unsafe void glProgramEnvParameter4fvARB([In] IntPtr extensionPointer, int target, int index, float* parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glProgramEnvParameter4fvARB([In] IntPtr extensionPointer, int target, int index, float* parameters)
        #endregion Overloads for GLvoid glProgramEnvParameter4fvARB(GLenum target, GLuint index, const GLfloat* parameters)

        #region void glProgramLocalParameter4dARB([In] IntPtr extensionPointer, int target, int index, double x, double y, double z, double w)
        // GLvoid glProgramLocalParameter4dARB(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
        #if WIN32
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg index\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg w\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]float64,[in]float64,[in]float64,[in]float64)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg index\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg w\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]float64,[in]float64,[in]float64,[in]float64)\r\nret")]
        #endif
        public static void glProgramLocalParameter4dARB([In] IntPtr extensionPointer, int target, int index, double x, double y, double z, double w) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glProgramLocalParameter4dARB([In] IntPtr extensionPointer, int target, int index, double x, double y, double z, double w)

        #region Overloads for GLvoid glProgramLocalParameter4dvARB(GLenum target, GLuint index, const GLdouble* parameters)
        #region void glProgramLocalParameter4dvARB([In] IntPtr extensionPointer, int target, int index, ref double parameters)
        // GLvoid glProgramLocalParameter4dvARB(GLenum target, GLuint index, const GLdouble* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg index\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in][out]float64)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg index\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in][out]float64)\r\nret")]
        #endif
        public static void glProgramLocalParameter4dvARB([In] IntPtr extensionPointer, int target, int index, ref double parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glProgramLocalParameter4dvARB([In] IntPtr extensionPointer, int target, int index, ref double parameters)

        #region void glProgramLocalParameter4dvARB([In] IntPtr extensionPointer, int target, int index, double[] parameters)
        // GLvoid glProgramLocalParameter4dvARB(GLenum target, GLuint index, const GLdouble* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg index\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]float64[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg index\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]float64[])\r\nret")]
        #endif
        public static void glProgramLocalParameter4dvARB([In] IntPtr extensionPointer, int target, int index, double[] parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glProgramLocalParameter4dvARB([In] IntPtr extensionPointer, int target, int index, double[] parameters)

        #region void glProgramLocalParameter4dvARB([In] IntPtr extensionPointer, int target, int index, IntPtr parameters)
        // GLvoid glProgramLocalParameter4dvARB(GLenum target, GLuint index, const GLdouble* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg index\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg index\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]native int)\r\nret")]
        #endif
        public static void glProgramLocalParameter4dvARB([In] IntPtr extensionPointer, int target, int index, IntPtr parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glProgramLocalParameter4dvARB([In] IntPtr extensionPointer, int target, int index, IntPtr parameters)

        #region void glProgramLocalParameter4dvARB([In] IntPtr extensionPointer, int target, int index, double* parameters)
        // GLvoid glProgramLocalParameter4dvARB(GLenum target, GLuint index, const GLdouble* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg index\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]float64*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg index\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]float64*)\r\nret")]
        #endif
        public static unsafe void glProgramLocalParameter4dvARB([In] IntPtr extensionPointer, int target, int index, double* parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glProgramLocalParameter4dvARB([In] IntPtr extensionPointer, int target, int index, double* parameters)
        #endregion Overloads for GLvoid glProgramLocalParameter4dvARB(GLenum target, GLuint index, const GLdouble* parameters)

        #region void glProgramLocalParameter4fARB([In] IntPtr extensionPointer, int target, int index, float x, float y, float z, float w)
        // GLvoid glProgramLocalParameter4fARB(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
        #if WIN32
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg index\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg w\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]float32,[in]float32,[in]float32,[in]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg index\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg w\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]float32,[in]float32,[in]float32,[in]float32)\r\nret")]
        #endif
        public static void glProgramLocalParameter4fARB([In] IntPtr extensionPointer, int target, int index, float x, float y, float z, float w) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glProgramLocalParameter4fARB([In] IntPtr extensionPointer, int target, int index, float x, float y, float z, float w)

        #region Overloads for GLvoid glProgramLocalParameter4fvARB(GLenum target, GLuint index, const GLfloat* parameters)
        #region void glProgramLocalParameter4fvARB([In] IntPtr extensionPointer, int target, int index, ref float parameters)
        // GLvoid glProgramLocalParameter4fvARB(GLenum target, GLuint index, const GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg index\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in][out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg index\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in][out]float32)\r\nret")]
        #endif
        public static void glProgramLocalParameter4fvARB([In] IntPtr extensionPointer, int target, int index, ref float parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glProgramLocalParameter4fvARB([In] IntPtr extensionPointer, int target, int index, ref float parameters)

        #region void glProgramLocalParameter4fvARB([In] IntPtr extensionPointer, int target, int index, float[] parameters)
        // GLvoid glProgramLocalParameter4fvARB(GLenum target, GLuint index, const GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg index\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg index\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]float32[])\r\nret")]
        #endif
        public static void glProgramLocalParameter4fvARB([In] IntPtr extensionPointer, int target, int index, float[] parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glProgramLocalParameter4fvARB([In] IntPtr extensionPointer, int target, int index, float[] parameters)

        #region void glProgramLocalParameter4fvARB([In] IntPtr extensionPointer, int target, int index, IntPtr parameters)
        // GLvoid glProgramLocalParameter4fvARB(GLenum target, GLuint index, const GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg index\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg index\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]native int)\r\nret")]
        #endif
        public static void glProgramLocalParameter4fvARB([In] IntPtr extensionPointer, int target, int index, IntPtr parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glProgramLocalParameter4fvARB([In] IntPtr extensionPointer, int target, int index, IntPtr parameters)

        #region void glProgramLocalParameter4fvARB([In] IntPtr extensionPointer, int target, int index, float* parameters)
        // GLvoid glProgramLocalParameter4fvARB(GLenum target, GLuint index, const GLfloat* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg index\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg index\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]float32*)\r\nret")]
        #endif
        public static unsafe void glProgramLocalParameter4fvARB([In] IntPtr extensionPointer, int target, int index, float* parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glProgramLocalParameter4fvARB([In] IntPtr extensionPointer, int target, int index, float* parameters)
        #endregion Overloads for GLvoid glProgramLocalParameter4fvARB(GLenum target, GLuint index, const GLfloat* parameters)

        #region Overloads for GLvoid glGetProgramEnvParameterdvARB(GLenum target, GLuint index, GLdouble* parameters)
        #region void glGetProgramEnvParameterdvARB([In] IntPtr extensionPointer, int target, int index, out double parameters)
        // GLvoid glGetProgramEnvParameterdvARB(GLenum target, GLuint index, GLdouble* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg index\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]float64)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg index\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]float64)\r\nret")]
        #endif
        public static void glGetProgramEnvParameterdvARB([In] IntPtr extensionPointer, int target, int index, out double parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetProgramEnvParameterdvARB([In] IntPtr extensionPointer, int target, int index, out double parameters)

        #region void glGetProgramEnvParameterdvARB([In] IntPtr extensionPointer, int target, int index, double[] parameters)
        // GLvoid glGetProgramEnvParameterdvARB(GLenum target, GLuint index, GLdouble* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg index\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]float64[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg index\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]float64[])\r\nret")]
        #endif
        public static void glGetProgramEnvParameterdvARB([In] IntPtr extensionPointer, int target, int index, double[] parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetProgramEnvParameterdvARB([In] IntPtr extensionPointer, int target, int index, double[] parameters)

        #region void glGetProgramEnvParameterdvARB([In] IntPtr extensionPointer, int target, int index, IntPtr parameters)
        // GLvoid glGetProgramEnvParameterdvARB(GLenum target, GLuint index, GLdouble* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg index\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg index\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGetProgramEnvParameterdvARB([In] IntPtr extensionPointer, int target, int index, IntPtr parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetProgramEnvParameterdvARB([In] IntPtr extensionPointer, int target, int index, IntPtr parameters)

        #region void glGetProgramEnvParameterdvARB([In] IntPtr extensionPointer, int target, int index, double* parameters)
        // GLvoid glGetProgramEnvParameterdvARB(GLenum target, GLuint index, GLdouble* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg index\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]float64*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg index\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]float64*)\r\nret")]
        #endif
        public static unsafe void glGetProgramEnvParameterdvARB([In] IntPtr extensionPointer, int target, int index, double* parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetProgramEnvParameterdvARB([In] IntPtr extensionPointer, int target, int index, double* parameters)
        #endregion Overloads for GLvoid glGetProgramEnvParameterdvARB(GLenum target, GLuint index, GLdouble* parameters)

        #region Overloads for GLvoid glGetProgramEnvParameterfvARB(GLenum target, GLuint index, GLfloat* parameters)
        #region void glGetProgramEnvParameterfvARB([In] IntPtr extensionPointer, int target, int index, out float parameters)
        // GLvoid glGetProgramEnvParameterfvARB(GLenum target, GLuint index, GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg index\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg index\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]float32)\r\nret")]
        #endif
        public static void glGetProgramEnvParameterfvARB([In] IntPtr extensionPointer, int target, int index, out float parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetProgramEnvParameterfvARB([In] IntPtr extensionPointer, int target, int index, out float parameters)

        #region void glGetProgramEnvParameterfvARB([In] IntPtr extensionPointer, int target, int index, float[] parameters)
        // GLvoid glGetProgramEnvParameterfvARB(GLenum target, GLuint index, GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg index\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg index\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]float32[])\r\nret")]
        #endif
        public static void glGetProgramEnvParameterfvARB([In] IntPtr extensionPointer, int target, int index, float[] parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetProgramEnvParameterfvARB([In] IntPtr extensionPointer, int target, int index, float[] parameters)

        #region void glGetProgramEnvParameterfvARB([In] IntPtr extensionPointer, int target, int index, IntPtr parameters)
        // GLvoid glGetProgramEnvParameterfvARB(GLenum target, GLuint index, GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg index\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg index\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGetProgramEnvParameterfvARB([In] IntPtr extensionPointer, int target, int index, IntPtr parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetProgramEnvParameterfvARB([In] IntPtr extensionPointer, int target, int index, IntPtr parameters)

        #region void glGetProgramEnvParameterfvARB([In] IntPtr extensionPointer, int target, int index, float* parameters)
        // GLvoid glGetProgramEnvParameterfvARB(GLenum target, GLuint index, GLfloat* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg index\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg index\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]float32*)\r\nret")]
        #endif
        public static unsafe void glGetProgramEnvParameterfvARB([In] IntPtr extensionPointer, int target, int index, float* parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetProgramEnvParameterfvARB([In] IntPtr extensionPointer, int target, int index, float* parameters)
        #endregion Overloads for GLvoid glGetProgramEnvParameterfvARB(GLenum target, GLuint index, GLfloat* parameters)

        #region Overloads for GLvoid glGetProgramLocalParameterdvARB(GLenum target, GLuint index, GLdouble* parameters)
        #region void glGetProgramLocalParameterdvARB([In] IntPtr extensionPointer, int target, int index, out double parameters)
        // GLvoid glGetProgramLocalParameterdvARB(GLenum target, GLuint index, GLdouble* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg index\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]float64)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg index\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]float64)\r\nret")]
        #endif
        public static void glGetProgramLocalParameterdvARB([In] IntPtr extensionPointer, int target, int index, out double parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetProgramLocalParameterdvARB([In] IntPtr extensionPointer, int target, int index, out double parameters)

        #region void glGetProgramLocalParameterdvARB([In] IntPtr extensionPointer, int target, int index, double[] parameters)
        // GLvoid glGetProgramLocalParameterdvARB(GLenum target, GLuint index, GLdouble* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg index\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]float64[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg index\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]float64[])\r\nret")]
        #endif
        public static void glGetProgramLocalParameterdvARB([In] IntPtr extensionPointer, int target, int index, double[] parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetProgramLocalParameterdvARB([In] IntPtr extensionPointer, int target, int index, double[] parameters)

        #region void glGetProgramLocalParameterdvARB([In] IntPtr extensionPointer, int target, int index, IntPtr parameters)
        // GLvoid glGetProgramLocalParameterdvARB(GLenum target, GLuint index, GLdouble* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg index\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg index\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGetProgramLocalParameterdvARB([In] IntPtr extensionPointer, int target, int index, IntPtr parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetProgramLocalParameterdvARB([In] IntPtr extensionPointer, int target, int index, IntPtr parameters)

        #region void glGetProgramLocalParameterdvARB([In] IntPtr extensionPointer, int target, int index, double* parameters)
        // GLvoid glGetProgramLocalParameterdvARB(GLenum target, GLuint index, GLdouble* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg index\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]float64*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg index\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]float64*)\r\nret")]
        #endif
        public static unsafe void glGetProgramLocalParameterdvARB([In] IntPtr extensionPointer, int target, int index, double* parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetProgramLocalParameterdvARB([In] IntPtr extensionPointer, int target, int index, double* parameters)
        #endregion Overloads for GLvoid glGetProgramLocalParameterdvARB(GLenum target, GLuint index, GLdouble* parameters)

        #region Overloads for GLvoid glGetProgramLocalParameterfvARB(GLenum target, GLuint index, GLfloat* parameters)
        #region void glGetProgramLocalParameterfvARB([In] IntPtr extensionPointer, int target, int index, out float parameters)
        // GLvoid glGetProgramLocalParameterfvARB(GLenum target, GLuint index, GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg index\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg index\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]float32)\r\nret")]
        #endif
        public static void glGetProgramLocalParameterfvARB([In] IntPtr extensionPointer, int target, int index, out float parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetProgramLocalParameterfvARB([In] IntPtr extensionPointer, int target, int index, out float parameters)

        #region void glGetProgramLocalParameterfvARB([In] IntPtr extensionPointer, int target, int index, float[] parameters)
        // GLvoid glGetProgramLocalParameterfvARB(GLenum target, GLuint index, GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg index\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg index\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]float32[])\r\nret")]
        #endif
        public static void glGetProgramLocalParameterfvARB([In] IntPtr extensionPointer, int target, int index, float[] parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetProgramLocalParameterfvARB([In] IntPtr extensionPointer, int target, int index, float[] parameters)

        #region void glGetProgramLocalParameterfvARB([In] IntPtr extensionPointer, int target, int index, IntPtr parameters)
        // GLvoid glGetProgramLocalParameterfvARB(GLenum target, GLuint index, GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg index\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg index\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGetProgramLocalParameterfvARB([In] IntPtr extensionPointer, int target, int index, IntPtr parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetProgramLocalParameterfvARB([In] IntPtr extensionPointer, int target, int index, IntPtr parameters)

        #region void glGetProgramLocalParameterfvARB([In] IntPtr extensionPointer, int target, int index, float* parameters)
        // GLvoid glGetProgramLocalParameterfvARB(GLenum target, GLuint index, GLfloat* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg index\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg index\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]float32*)\r\nret")]
        #endif
        public static unsafe void glGetProgramLocalParameterfvARB([In] IntPtr extensionPointer, int target, int index, float* parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetProgramLocalParameterfvARB([In] IntPtr extensionPointer, int target, int index, float* parameters)
        #endregion Overloads for GLvoid glGetProgramLocalParameterfvARB(GLenum target, GLuint index, GLfloat* parameters)

        #region Overloads for GLvoid glGetProgramivARB(GLenum target, GLenum pname, GLint* parameters)
        #region void glGetProgramivARB([In] IntPtr extensionPointer, int target, int pname, out int parameters)
        // GLvoid glGetProgramivARB(GLenum target, GLenum pname, GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]int32)\r\nret")]
        #endif
        public static void glGetProgramivARB([In] IntPtr extensionPointer, int target, int pname, out int parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetProgramivARB([In] IntPtr extensionPointer, int target, int pname, out int parameters)

        #region void glGetProgramivARB([In] IntPtr extensionPointer, int target, int pname, int[] parameters)
        // GLvoid glGetProgramivARB(GLenum target, GLenum pname, GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]int32[])\r\nret")]
        #endif
        public static void glGetProgramivARB([In] IntPtr extensionPointer, int target, int pname, int[] parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetProgramivARB([In] IntPtr extensionPointer, int target, int pname, int[] parameters)

        #region void glGetProgramivARB([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters)
        // GLvoid glGetProgramivARB(GLenum target, GLenum pname, GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGetProgramivARB([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetProgramivARB([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters)

        #region void glGetProgramivARB([In] IntPtr extensionPointer, int target, int pname, int* parameters)
        // GLvoid glGetProgramivARB(GLenum target, GLenum pname, GLint* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]int32*)\r\nret")]
        #endif
        public static unsafe void glGetProgramivARB([In] IntPtr extensionPointer, int target, int pname, int* parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetProgramivARB([In] IntPtr extensionPointer, int target, int pname, int* parameters)
        #endregion Overloads for GLvoid glGetProgramivARB(GLenum target, GLenum pname, GLint* parameters)

        #region Overloads for GLvoid glGetProgramStringARB(GLenum target, GLenum pname, GLvoid* programString)
        #region void glGetProgramStringARB([In] IntPtr extensionPointer, int target, int pname, short[] programString)
        // GLvoid glGetProgramStringARB(GLenum target, GLenum pname, GLvoid* programString)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg programString\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg programString\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]int16[])\r\nret")]
        #endif
        public static void glGetProgramStringARB([In] IntPtr extensionPointer, int target, int pname, short[] programString) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetProgramStringARB([In] IntPtr extensionPointer, int target, int pname, short[] programString)

        #region void glGetProgramStringARB([In] IntPtr extensionPointer, int target, int pname, float[] programString)
        // GLvoid glGetProgramStringARB(GLenum target, GLenum pname, GLvoid* programString)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg programString\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg programString\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]float32[])\r\nret")]
        #endif
        public static void glGetProgramStringARB([In] IntPtr extensionPointer, int target, int pname, float[] programString) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetProgramStringARB([In] IntPtr extensionPointer, int target, int pname, float[] programString)

        #region void glGetProgramStringARB([In] IntPtr extensionPointer, int target, int pname, int[] programString)
        // GLvoid glGetProgramStringARB(GLenum target, GLenum pname, GLvoid* programString)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg programString\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg programString\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]int32[])\r\nret")]
        #endif
        public static void glGetProgramStringARB([In] IntPtr extensionPointer, int target, int pname, int[] programString) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetProgramStringARB([In] IntPtr extensionPointer, int target, int pname, int[] programString)

        #region void glGetProgramStringARB([In] IntPtr extensionPointer, int target, int pname, IntPtr programString)
        // GLvoid glGetProgramStringARB(GLenum target, GLenum pname, GLvoid* programString)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg programString\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg programString\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGetProgramStringARB([In] IntPtr extensionPointer, int target, int pname, IntPtr programString) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetProgramStringARB([In] IntPtr extensionPointer, int target, int pname, IntPtr programString)

        #region void glGetProgramStringARB([In] IntPtr extensionPointer, int target, int pname, byte[] programString)
        // GLvoid glGetProgramStringARB(GLenum target, GLenum pname, GLvoid* programString)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg programString\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]unsigned int8[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg programString\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]unsigned int8[])\r\nret")]
        #endif
        public static void glGetProgramStringARB([In] IntPtr extensionPointer, int target, int pname, byte[] programString) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetProgramStringARB([In] IntPtr extensionPointer, int target, int pname, byte[] programString)

        #region void glGetProgramStringARB([In] IntPtr extensionPointer, int target, int pname, double[] programString)
        // GLvoid glGetProgramStringARB(GLenum target, GLenum pname, GLvoid* programString)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg programString\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]float64[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg programString\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]float64[])\r\nret")]
        #endif
        public static void glGetProgramStringARB([In] IntPtr extensionPointer, int target, int pname, double[] programString) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetProgramStringARB([In] IntPtr extensionPointer, int target, int pname, double[] programString)

        #region void glGetProgramStringARB([In] IntPtr extensionPointer, int target, int pname, uint[] programString)
        // GLvoid glGetProgramStringARB(GLenum target, GLenum pname, GLvoid* programString)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg programString\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]unsigned int32[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg programString\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]unsigned int32[])\r\nret")]
        #endif
        public static void glGetProgramStringARB([In] IntPtr extensionPointer, int target, int pname, uint[] programString) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetProgramStringARB([In] IntPtr extensionPointer, int target, int pname, uint[] programString)

        #region void glGetProgramStringARB([In] IntPtr extensionPointer, int target, int pname, sbyte[] programString)
        // GLvoid glGetProgramStringARB(GLenum target, GLenum pname, GLvoid* programString)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg programString\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]int8[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg programString\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]int8[])\r\nret")]
        #endif
        public static void glGetProgramStringARB([In] IntPtr extensionPointer, int target, int pname, sbyte[] programString) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetProgramStringARB([In] IntPtr extensionPointer, int target, int pname, sbyte[] programString)

        #region void glGetProgramStringARB([In] IntPtr extensionPointer, int target, int pname, ushort[] programString)
        // GLvoid glGetProgramStringARB(GLenum target, GLenum pname, GLvoid* programString)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg programString\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]unsigned int16[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg programString\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]unsigned int16[])\r\nret")]
        #endif
        public static void glGetProgramStringARB([In] IntPtr extensionPointer, int target, int pname, ushort[] programString) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetProgramStringARB([In] IntPtr extensionPointer, int target, int pname, ushort[] programString)

        #region void glGetProgramStringARB([In] IntPtr extensionPointer, int target, int pname, void* programString)
        // GLvoid glGetProgramStringARB(GLenum target, GLenum pname, GLvoid* programString)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg programString\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]void*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg programString\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]void*)\r\nret")]
        #endif
        public static unsafe void glGetProgramStringARB([In] IntPtr extensionPointer, int target, int pname, void* programString) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetProgramStringARB([In] IntPtr extensionPointer, int target, int pname, void* programString)
        #endregion Overloads for GLvoid glGetProgramStringARB(GLenum target, GLenum pname, GLvoid* programString)

        #region Overloads for GLvoid glGetVertexAttribdvARB(GLuint index, GLenum pname, GLdouble* parameters)
        #region void glGetVertexAttribdvARB([In] IntPtr extensionPointer, int index, int pname, out double parameters)
        // GLvoid glGetVertexAttribdvARB(GLuint index, GLenum pname, GLdouble* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]float64)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]float64)\r\nret")]
        #endif
        public static void glGetVertexAttribdvARB([In] IntPtr extensionPointer, int index, int pname, out double parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetVertexAttribdvARB([In] IntPtr extensionPointer, int index, int pname, out double parameters)

        #region void glGetVertexAttribdvARB([In] IntPtr extensionPointer, int index, int pname, double[] parameters)
        // GLvoid glGetVertexAttribdvARB(GLuint index, GLenum pname, GLdouble* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]float64[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]float64[])\r\nret")]
        #endif
        public static void glGetVertexAttribdvARB([In] IntPtr extensionPointer, int index, int pname, double[] parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetVertexAttribdvARB([In] IntPtr extensionPointer, int index, int pname, double[] parameters)

        #region void glGetVertexAttribdvARB([In] IntPtr extensionPointer, int index, int pname, IntPtr parameters)
        // GLvoid glGetVertexAttribdvARB(GLuint index, GLenum pname, GLdouble* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGetVertexAttribdvARB([In] IntPtr extensionPointer, int index, int pname, IntPtr parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetVertexAttribdvARB([In] IntPtr extensionPointer, int index, int pname, IntPtr parameters)

        #region void glGetVertexAttribdvARB([In] IntPtr extensionPointer, int index, int pname, double* parameters)
        // GLvoid glGetVertexAttribdvARB(GLuint index, GLenum pname, GLdouble* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]float64*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]float64*)\r\nret")]
        #endif
        public static unsafe void glGetVertexAttribdvARB([In] IntPtr extensionPointer, int index, int pname, double* parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetVertexAttribdvARB([In] IntPtr extensionPointer, int index, int pname, double* parameters)
        #endregion Overloads for GLvoid glGetVertexAttribdvARB(GLuint index, GLenum pname, GLdouble* parameters)

        #region Overloads for GLvoid glGetVertexAttribfvARB(GLuint index, GLenum pname, GLfloat* parameters)
        #region void glGetVertexAttribfvARB([In] IntPtr extensionPointer, int index, int pname, out float parameters)
        // GLvoid glGetVertexAttribfvARB(GLuint index, GLenum pname, GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]float32)\r\nret")]
        #endif
        public static void glGetVertexAttribfvARB([In] IntPtr extensionPointer, int index, int pname, out float parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetVertexAttribfvARB([In] IntPtr extensionPointer, int index, int pname, out float parameters)

        #region void glGetVertexAttribfvARB([In] IntPtr extensionPointer, int index, int pname, float[] parameters)
        // GLvoid glGetVertexAttribfvARB(GLuint index, GLenum pname, GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]float32[])\r\nret")]
        #endif
        public static void glGetVertexAttribfvARB([In] IntPtr extensionPointer, int index, int pname, float[] parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetVertexAttribfvARB([In] IntPtr extensionPointer, int index, int pname, float[] parameters)

        #region void glGetVertexAttribfvARB([In] IntPtr extensionPointer, int index, int pname, IntPtr parameters)
        // GLvoid glGetVertexAttribfvARB(GLuint index, GLenum pname, GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGetVertexAttribfvARB([In] IntPtr extensionPointer, int index, int pname, IntPtr parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetVertexAttribfvARB([In] IntPtr extensionPointer, int index, int pname, IntPtr parameters)

        #region void glGetVertexAttribfvARB([In] IntPtr extensionPointer, int index, int pname, float* parameters)
        // GLvoid glGetVertexAttribfvARB(GLuint index, GLenum pname, GLfloat* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]float32*)\r\nret")]
        #endif
        public static unsafe void glGetVertexAttribfvARB([In] IntPtr extensionPointer, int index, int pname, float* parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetVertexAttribfvARB([In] IntPtr extensionPointer, int index, int pname, float* parameters)
        #endregion Overloads for GLvoid glGetVertexAttribfvARB(GLuint index, GLenum pname, GLfloat* parameters)

        #region Overloads for GLvoid glGetVertexAttribivARB(GLuint index, GLenum pname, GLint* parameters)
        #region void glGetVertexAttribivARB([In] IntPtr extensionPointer, int index, int pname, out int parameters)
        // GLvoid glGetVertexAttribivARB(GLuint index, GLenum pname, GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]int32)\r\nret")]
        #endif
        public static void glGetVertexAttribivARB([In] IntPtr extensionPointer, int index, int pname, out int parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetVertexAttribivARB([In] IntPtr extensionPointer, int index, int pname, out int parameters)

        #region void glGetVertexAttribivARB([In] IntPtr extensionPointer, int index, int pname, int[] parameters)
        // GLvoid glGetVertexAttribivARB(GLuint index, GLenum pname, GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]int32[])\r\nret")]
        #endif
        public static void glGetVertexAttribivARB([In] IntPtr extensionPointer, int index, int pname, int[] parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetVertexAttribivARB([In] IntPtr extensionPointer, int index, int pname, int[] parameters)

        #region void glGetVertexAttribivARB([In] IntPtr extensionPointer, int index, int pname, IntPtr parameters)
        // GLvoid glGetVertexAttribivARB(GLuint index, GLenum pname, GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGetVertexAttribivARB([In] IntPtr extensionPointer, int index, int pname, IntPtr parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetVertexAttribivARB([In] IntPtr extensionPointer, int index, int pname, IntPtr parameters)

        #region void glGetVertexAttribivARB([In] IntPtr extensionPointer, int index, int pname, int* parameters)
        // GLvoid glGetVertexAttribivARB(GLuint index, GLenum pname, GLint* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]int32*)\r\nret")]
        #endif
        public static unsafe void glGetVertexAttribivARB([In] IntPtr extensionPointer, int index, int pname, int* parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetVertexAttribivARB([In] IntPtr extensionPointer, int index, int pname, int* parameters)
        #endregion Overloads for GLvoid glGetVertexAttribivARB(GLuint index, GLenum pname, GLint* parameters)

        #region Overloads for GLvoid glGetVertexAttribPointervARB(GLuint index, GLenum pname, GLvoid* pointer)
        #region void glGetVertexAttribPointervARB([In] IntPtr extensionPointer, int index, int pname, IntPtr[] pointer)
        // GLvoid glGetVertexAttribPointervARB(GLuint index, GLenum pname, GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg pname\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]native int[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg pname\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]native int[])\r\nret")]
        #endif
        public static void glGetVertexAttribPointervARB([In] IntPtr extensionPointer, int index, int pname, IntPtr[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetVertexAttribPointervARB([In] IntPtr extensionPointer, int index, int pname, IntPtr[] pointer)

        #region void glGetVertexAttribPointervARB([In] IntPtr extensionPointer, int index, int pname, IntPtr pointer)
        // GLvoid glGetVertexAttribPointervARB(GLuint index, GLenum pname, GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg pname\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg pname\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGetVertexAttribPointervARB([In] IntPtr extensionPointer, int index, int pname, IntPtr pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetVertexAttribPointervARB([In] IntPtr extensionPointer, int index, int pname, IntPtr pointer)

        #region void glGetVertexAttribPointervARB([In] IntPtr extensionPointer, int index, int pname, void** pointer)
        // GLvoid glGetVertexAttribPointervARB(GLuint index, GLenum pname, GLvoid* pointer)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg pname\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]void**)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg pname\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]void**)\r\nret")]
        #endif
        public static unsafe void glGetVertexAttribPointervARB([In] IntPtr extensionPointer, int index, int pname, void** pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetVertexAttribPointervARB([In] IntPtr extensionPointer, int index, int pname, void** pointer)
        #endregion Overloads for GLvoid glGetVertexAttribPointervARB(GLuint index, GLenum pname, GLvoid* pointer)

        #region int glIsProgramARB([In] IntPtr extensionPointer, int program)
        // GLboolean glIsProgramARB(GLuint program)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg program\r\nldarg extensionPointer\r\ncalli unmanaged stdcall int32([in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg program\r\nldarg extensionPointer\r\ncalli unmanaged cdecl int32([in]int32)\r\nret")]
        #endif
        public static int glIsProgramARB([In] IntPtr extensionPointer, int program) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion int glIsProgramARB([In] IntPtr extensionPointer, int program)
        #endregion GL_ARB_vertex_program Methods
        #endregion GL_ARB_vertex_program (26)

        #region GL_ARB_fragment_program (27)
        #region GL_ARB_fragment_program Constants
        #region GL_FRAGMENT_PROGRAM_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_FRAGMENT_PROGRAM_ARB 0x8804
        public const int GL_FRAGMENT_PROGRAM_ARB = 0x8804;
        #endregion GL_FRAGMENT_PROGRAM_ARB

        // GL_PROGRAM_FORMAT_ASCII_ARB is already defined in GL_ARB_vertex_program (26)

        // GL_PROGRAM_LENGTH_ARB is already defined in GL_ARB_vertex_program (26)

        // GL_PROGRAM_FORMAT_ARB is already defined in GL_ARB_vertex_program (26)

        // GL_PROGRAM_BINDING_ARB is already defined in GL_ARB_vertex_program (26)

        // GL_PROGRAM_INSTRUCTIONS_ARB is already defined in GL_ARB_vertex_program (26)

        // GL_MAX_PROGRAM_INSTRUCTIONS_ARB is already defined in GL_ARB_vertex_program (26)

        // GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB is already defined in GL_ARB_vertex_program (26)

        // GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB is already defined in GL_ARB_vertex_program (26)

        // GL_PROGRAM_TEMPORARIES_ARB is already defined in GL_ARB_vertex_program (26)

        // GL_MAX_PROGRAM_TEMPORARIES_ARB is already defined in GL_ARB_vertex_program (26)

        // GL_PROGRAM_NATIVE_TEMPORARIES_ARB is already defined in GL_ARB_vertex_program (26)

        // GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB is already defined in GL_ARB_vertex_program (26)

        // GL_PROGRAM_PARAMETERS_ARB is already defined in GL_ARB_vertex_program (26)

        // GL_MAX_PROGRAM_PARAMETERS_ARB is already defined in GL_ARB_vertex_program (26)

        // GL_PROGRAM_NATIVE_PARAMETERS_ARB is already defined in GL_ARB_vertex_program (26)

        // GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB is already defined in GL_ARB_vertex_program (26)

        // GL_PROGRAM_ATTRIBS_ARB is already defined in GL_ARB_vertex_program (26)

        // GL_MAX_PROGRAM_ATTRIBS_ARB is already defined in GL_ARB_vertex_program (26)

        // GL_PROGRAM_NATIVE_ATTRIBS_ARB is already defined in GL_ARB_vertex_program (26)

        // GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB is already defined in GL_ARB_vertex_program (26)

        // GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB is already defined in GL_ARB_vertex_program (26)

        // GL_MAX_PROGRAM_ENV_PARAMETERS_ARB is already defined in GL_ARB_vertex_program (26)

        // GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB is already defined in GL_ARB_vertex_program (26)

        #region GL_PROGRAM_ALU_INSTRUCTIONS_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PROGRAM_ALU_INSTRUCTIONS_ARB 0x8805
        public const int GL_PROGRAM_ALU_INSTRUCTIONS_ARB = 0x8805;
        #endregion GL_PROGRAM_ALU_INSTRUCTIONS_ARB

        #region GL_PROGRAM_TEX_INSTRUCTIONS_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PROGRAM_TEX_INSTRUCTIONS_ARB 0x8806
        public const int GL_PROGRAM_TEX_INSTRUCTIONS_ARB = 0x8806;
        #endregion GL_PROGRAM_TEX_INSTRUCTIONS_ARB

        #region GL_PROGRAM_TEX_INDIRECTIONS_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PROGRAM_TEX_INDIRECTIONS_ARB 0x8807
        public const int GL_PROGRAM_TEX_INDIRECTIONS_ARB = 0x8807;
        #endregion GL_PROGRAM_TEX_INDIRECTIONS_ARB

        #region GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB 0x8808
        public const int GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = 0x8808;
        #endregion GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB

        #region GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB 0x8809
        public const int GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = 0x8809;
        #endregion GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB

        #region GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB 0x880A
        public const int GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = 0x880A;
        #endregion GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB

        #region GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB 0x880B
        public const int GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB = 0x880B;
        #endregion GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB

        #region GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB 0x880C
        public const int GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB = 0x880C;
        #endregion GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB

        #region GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB 0x880D
        public const int GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB = 0x880D;
        #endregion GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB

        #region GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB 0x880E
        public const int GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = 0x880E;
        #endregion GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB

        #region GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB 0x880F
        public const int GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = 0x880F;
        #endregion GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB

        #region GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB 0x8810
        public const int GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = 0x8810;
        #endregion GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB

        // GL_PROGRAM_STRING_ARB is already defined in GL_ARB_vertex_program (26)

        // GL_PROGRAM_ERROR_POSITION_ARB is already defined in GL_ARB_vertex_program (26)

        // GL_CURRENT_MATRIX_ARB is already defined in GL_ARB_vertex_program (26)

        // GL_TRANSPOSE_CURRENT_MATRIX_ARB is already defined in GL_ARB_vertex_program (26)

        // GL_CURRENT_MATRIX_STACK_DEPTH_ARB is already defined in GL_ARB_vertex_program (26)

        // GL_MAX_PROGRAM_MATRICES_ARB is already defined in GL_ARB_vertex_program (26)

        // GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB is already defined in GL_ARB_vertex_program (26)

        #region GL_MAX_TEXTURE_COORDS_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAX_TEXTURE_COORDS_ARB 0x8871
        public const int GL_MAX_TEXTURE_COORDS_ARB = 0x8871;
        #endregion GL_MAX_TEXTURE_COORDS_ARB

        #region GL_MAX_TEXTURE_IMAGE_UNITS_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAX_TEXTURE_IMAGE_UNITS_ARB 0x8872
        public const int GL_MAX_TEXTURE_IMAGE_UNITS_ARB = 0x8872;
        #endregion GL_MAX_TEXTURE_IMAGE_UNITS_ARB

        // GL_PROGRAM_ERROR_STRING_ARB is already defined in GL_ARB_vertex_program (26)

        // GL_MATRIX0_ARB is already defined in GL_ARB_vertex_program (26)

        // GL_MATRIX1_ARB is already defined in GL_ARB_vertex_program (26)

        // GL_MATRIX2_ARB is already defined in GL_ARB_vertex_program (26)

        // GL_MATRIX3_ARB is already defined in GL_ARB_vertex_program (26)

        // GL_MATRIX4_ARB is already defined in GL_ARB_vertex_program (26)

        // GL_MATRIX5_ARB is already defined in GL_ARB_vertex_program (26)

        // GL_MATRIX6_ARB is already defined in GL_ARB_vertex_program (26)

        // GL_MATRIX7_ARB is already defined in GL_ARB_vertex_program (26)

        // GL_MATRIX8_ARB is already defined in GL_ARB_vertex_program (26)

        // GL_MATRIX9_ARB is already defined in GL_ARB_vertex_program (26)

        // GL_MATRIX10_ARB is already defined in GL_ARB_vertex_program (26)

        // GL_MATRIX11_ARB is already defined in GL_ARB_vertex_program (26)

        // GL_MATRIX12_ARB is already defined in GL_ARB_vertex_program (26)

        // GL_MATRIX13_ARB is already defined in GL_ARB_vertex_program (26)

        // GL_MATRIX14_ARB is already defined in GL_ARB_vertex_program (26)

        // GL_MATRIX15_ARB is already defined in GL_ARB_vertex_program (26)

        // GL_MATRIX16_ARB is already defined in GL_ARB_vertex_program (26)

        // GL_MATRIX17_ARB is already defined in GL_ARB_vertex_program (26)

        // GL_MATRIX18_ARB is already defined in GL_ARB_vertex_program (26)

        // GL_MATRIX19_ARB is already defined in GL_ARB_vertex_program (26)

        // GL_MATRIX20_ARB is already defined in GL_ARB_vertex_program (26)

        // GL_MATRIX21_ARB is already defined in GL_ARB_vertex_program (26)

        // GL_MATRIX22_ARB is already defined in GL_ARB_vertex_program (26)

        // GL_MATRIX23_ARB is already defined in GL_ARB_vertex_program (26)

        // GL_MATRIX24_ARB is already defined in GL_ARB_vertex_program (26)

        // GL_MATRIX25_ARB is already defined in GL_ARB_vertex_program (26)

        // GL_MATRIX26_ARB is already defined in GL_ARB_vertex_program (26)

        // GL_MATRIX27_ARB is already defined in GL_ARB_vertex_program (26)

        // GL_MATRIX28_ARB is already defined in GL_ARB_vertex_program (26)

        // GL_MATRIX29_ARB is already defined in GL_ARB_vertex_program (26)

        // GL_MATRIX30_ARB is already defined in GL_ARB_vertex_program (26)

        // GL_MATRIX31_ARB is already defined in GL_ARB_vertex_program (26)
        #endregion GL_ARB_fragment_program Constants

        #region GL_ARB_fragment_program Methods
        // glProgramStringARB is already defined in GL_ARB_vertex_program (26)

        // glBindProgramARB is already defined in GL_ARB_vertex_program (26)

        // glDeleteProgramsARB is already defined in GL_ARB_vertex_program (26)

        // glGenProgramsARB is already defined in GL_ARB_vertex_program (26)

        // glProgramEnvParameter4dARB is already defined in GL_ARB_vertex_program (26)

        // glProgramEnvParameter4dvARB is already defined in GL_ARB_vertex_program (26)

        // glProgramEnvParameter4fARB is already defined in GL_ARB_vertex_program (26)

        // glProgramEnvParameter4fvARB is already defined in GL_ARB_vertex_program (26)

        // glProgramLocalParameter4dARB is already defined in GL_ARB_vertex_program (26)

        // glProgramLocalParameter4dvARB is already defined in GL_ARB_vertex_program (26)

        // glProgramLocalParameter4fARB is already defined in GL_ARB_vertex_program (26)

        // glProgramLocalParameter4fvARB is already defined in GL_ARB_vertex_program (26)

        // glGetProgramEnvParameterdvARB is already defined in GL_ARB_vertex_program (26)

        // glGetProgramEnvParameterfvARB is already defined in GL_ARB_vertex_program (26)

        // glGetProgramLocalParameterdvARB is already defined in GL_ARB_vertex_program (26)

        // glGetProgramLocalParameterfvARB is already defined in GL_ARB_vertex_program (26)

        // glGetProgramivARB is already defined in GL_ARB_vertex_program (26)

        // glGetProgramStringARB is already defined in GL_ARB_vertex_program (26)

        // glIsProgramARB is already defined in GL_ARB_vertex_program (26)
        #endregion GL_ARB_fragment_program Methods
        #endregion GL_ARB_fragment_program (27)

        #region GL_ARB_vertex_buffer_object (28)
        #region GL_ARB_vertex_buffer_object Constants
        #region GL_ARRAY_BUFFER_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_ARRAY_BUFFER_ARB 0x8892
        public const int GL_ARRAY_BUFFER_ARB = 0x8892;
        #endregion GL_ARRAY_BUFFER_ARB

        #region GL_ELEMENT_ARRAY_BUFFER_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_ELEMENT_ARRAY_BUFFER_ARB 0x8893
        public const int GL_ELEMENT_ARRAY_BUFFER_ARB = 0x8893;
        #endregion GL_ELEMENT_ARRAY_BUFFER_ARB

        #region GL_ARRAY_BUFFER_BINDING_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_ARRAY_BUFFER_BINDING_ARB 0x8894
        public const int GL_ARRAY_BUFFER_BINDING_ARB = 0x8894;
        #endregion GL_ARRAY_BUFFER_BINDING_ARB

        #region GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB 0x8895
        public const int GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB = 0x8895;
        #endregion GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB

        #region GL_VERTEX_ARRAY_BUFFER_BINDING_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VERTEX_ARRAY_BUFFER_BINDING_ARB 0x8896
        public const int GL_VERTEX_ARRAY_BUFFER_BINDING_ARB = 0x8896;
        #endregion GL_VERTEX_ARRAY_BUFFER_BINDING_ARB

        #region GL_NORMAL_ARRAY_BUFFER_BINDING_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_NORMAL_ARRAY_BUFFER_BINDING_ARB 0x8897
        public const int GL_NORMAL_ARRAY_BUFFER_BINDING_ARB = 0x8897;
        #endregion GL_NORMAL_ARRAY_BUFFER_BINDING_ARB

        #region GL_COLOR_ARRAY_BUFFER_BINDING_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COLOR_ARRAY_BUFFER_BINDING_ARB 0x8898
        public const int GL_COLOR_ARRAY_BUFFER_BINDING_ARB = 0x8898;
        #endregion GL_COLOR_ARRAY_BUFFER_BINDING_ARB

        #region GL_INDEX_ARRAY_BUFFER_BINDING_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_INDEX_ARRAY_BUFFER_BINDING_ARB 0x8899
        public const int GL_INDEX_ARRAY_BUFFER_BINDING_ARB = 0x8899;
        #endregion GL_INDEX_ARRAY_BUFFER_BINDING_ARB

        #region GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB 0x889A
        public const int GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB = 0x889A;
        #endregion GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB

        #region GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB 0x889B
        public const int GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB = 0x889B;
        #endregion GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB

        #region GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB 0x889C
        public const int GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB = 0x889C;
        #endregion GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB

        #region GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB 0x889D
        public const int GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB = 0x889D;
        #endregion GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB

        #region GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB 0x889E
        public const int GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB = 0x889E;
        #endregion GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB

        #region GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB 0x889F
        public const int GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB = 0x889F;
        #endregion GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB

        #region GL_STREAM_DRAW_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_STREAM_DRAW_ARB 0x88E0
        public const int GL_STREAM_DRAW_ARB = 0x88E0;
        #endregion GL_STREAM_DRAW_ARB

        #region GL_STREAM_READ_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_STREAM_READ_ARB 0x88E1
        public const int GL_STREAM_READ_ARB = 0x88E1;
        #endregion GL_STREAM_READ_ARB

        #region GL_STREAM_COPY_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_STREAM_COPY_ARB 0x88E2
        public const int GL_STREAM_COPY_ARB = 0x88E2;
        #endregion GL_STREAM_COPY_ARB

        #region GL_STATIC_DRAW_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_STATIC_DRAW_ARB 0x88E4
        public const int GL_STATIC_DRAW_ARB = 0x88E4;
        #endregion GL_STATIC_DRAW_ARB

        #region GL_STATIC_READ_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_STATIC_READ_ARB 0x88E5
        public const int GL_STATIC_READ_ARB = 0x88E5;
        #endregion GL_STATIC_READ_ARB

        #region GL_STATIC_COPY_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_STATIC_COPY_ARB 0x88E6
        public const int GL_STATIC_COPY_ARB = 0x88E6;
        #endregion GL_STATIC_COPY_ARB

        #region GL_DYNAMIC_DRAW_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DYNAMIC_DRAW_ARB 0x88E8
        public const int GL_DYNAMIC_DRAW_ARB = 0x88E8;
        #endregion GL_DYNAMIC_DRAW_ARB

        #region GL_DYNAMIC_READ_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DYNAMIC_READ_ARB 0x88E9
        public const int GL_DYNAMIC_READ_ARB = 0x88E9;
        #endregion GL_DYNAMIC_READ_ARB

        #region GL_DYNAMIC_COPY_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DYNAMIC_COPY_ARB 0x88EA
        public const int GL_DYNAMIC_COPY_ARB = 0x88EA;
        #endregion GL_DYNAMIC_COPY_ARB

        #region GL_READ_ONLY_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_READ_ONLY_ARB 0x88B8
        public const int GL_READ_ONLY_ARB = 0x88B8;
        #endregion GL_READ_ONLY_ARB

        #region GL_WRITE_ONLY_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_WRITE_ONLY_ARB 0x88B9
        public const int GL_WRITE_ONLY_ARB = 0x88B9;
        #endregion GL_WRITE_ONLY_ARB

        #region GL_READ_WRITE_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_READ_WRITE_ARB 0x88BA
        public const int GL_READ_WRITE_ARB = 0x88BA;
        #endregion GL_READ_WRITE_ARB

        #region GL_BUFFER_SIZE_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_BUFFER_SIZE_ARB 0x8764
        public const int GL_BUFFER_SIZE_ARB = 0x8764;
        #endregion GL_BUFFER_SIZE_ARB

        #region GL_BUFFER_USAGE_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_BUFFER_USAGE_ARB 0x8765
        public const int GL_BUFFER_USAGE_ARB = 0x8765;
        #endregion GL_BUFFER_USAGE_ARB

        #region GL_BUFFER_ACCESS_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_BUFFER_ACCESS_ARB 0x88BB
        public const int GL_BUFFER_ACCESS_ARB = 0x88BB;
        #endregion GL_BUFFER_ACCESS_ARB

        #region GL_BUFFER_MAPPED_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_BUFFER_MAPPED_ARB 0x88BC
        public const int GL_BUFFER_MAPPED_ARB = 0x88BC;
        #endregion GL_BUFFER_MAPPED_ARB

        #region GL_BUFFER_MAP_POINTER_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_BUFFER_MAP_POINTER_ARB 0x88BD
        public const int GL_BUFFER_MAP_POINTER_ARB = 0x88BD;
        #endregion GL_BUFFER_MAP_POINTER_ARB
        #endregion GL_ARB_vertex_buffer_object Constants

        #region GL_ARB_vertex_buffer_object Methods
        #region Overloads for GLvoid glBindBufferARB(GLenum target, GLuint buffer)
        #region void glBindBufferARB([In] IntPtr extensionPointer, int target, int buffer)
        // GLvoid glBindBufferARB(GLenum target, GLuint buffer)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg buffer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg buffer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32)\r\nret")]
        #endif
        public static void glBindBufferARB([In] IntPtr extensionPointer, int target, int buffer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glBindBufferARB([In] IntPtr extensionPointer, int target, int buffer)

        #region void glBindBufferARB([In] IntPtr extensionPointer, int target, uint buffer)
        // GLvoid glBindBufferARB(GLenum target, GLuint buffer)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg buffer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]unsigned int32)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg buffer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]unsigned int32)\r\nret")]
        #endif
        public static void glBindBufferARB([In] IntPtr extensionPointer, int target, uint buffer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glBindBufferARB([In] IntPtr extensionPointer, int target, uint buffer)
        #endregion Overloads for GLvoid glBindBufferARB(GLenum target, GLuint buffer)

        #region Overloads for GLvoid glDeleteBuffersARB(GLsizei n, const GLuint* buffers)
        #region void glDeleteBuffersARB([In] IntPtr extensionPointer, int n, int[] buffers)
        // GLvoid glDeleteBuffersARB(GLsizei n, const GLuint* buffers)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg buffers\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg buffers\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32[])\r\nret")]
        #endif
        public static void glDeleteBuffersARB([In] IntPtr extensionPointer, int n, int[] buffers) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glDeleteBuffersARB([In] IntPtr extensionPointer, int n, int[] buffers)

        #region void glDeleteBuffersARB([In] IntPtr extensionPointer, int n, ref int buffers)
        // GLvoid glDeleteBuffersARB(GLsizei n, const GLuint* buffers)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg buffers\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg buffers\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]int32)\r\nret")]
        #endif
        public static void glDeleteBuffersARB([In] IntPtr extensionPointer, int n, ref int buffers) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glDeleteBuffersARB([In] IntPtr extensionPointer, int n, ref int buffers)

        #region void glDeleteBuffersARB([In] IntPtr extensionPointer, int n, IntPtr buffers)
        // GLvoid glDeleteBuffersARB(GLsizei n, const GLuint* buffers)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg buffers\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg buffers\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glDeleteBuffersARB([In] IntPtr extensionPointer, int n, IntPtr buffers) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glDeleteBuffersARB([In] IntPtr extensionPointer, int n, IntPtr buffers)

        #region void glDeleteBuffersARB([In] IntPtr extensionPointer, int n, ref uint buffers)
        // GLvoid glDeleteBuffersARB(GLsizei n, const GLuint* buffers)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg buffers\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]unsigned int32)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg buffers\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]unsigned int32)\r\nret")]
        #endif
        public static void glDeleteBuffersARB([In] IntPtr extensionPointer, int n, ref uint buffers) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glDeleteBuffersARB([In] IntPtr extensionPointer, int n, ref uint buffers)

        #region void glDeleteBuffersARB([In] IntPtr extensionPointer, int n, uint[] buffers)
        // GLvoid glDeleteBuffersARB(GLsizei n, const GLuint* buffers)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg buffers\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]unsigned int32[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg buffers\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]unsigned int32[])\r\nret")]
        #endif
        public static void glDeleteBuffersARB([In] IntPtr extensionPointer, int n, uint[] buffers) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glDeleteBuffersARB([In] IntPtr extensionPointer, int n, uint[] buffers)

        #region void glDeleteBuffersARB([In] IntPtr extensionPointer, int n, uint* buffers)
        // GLvoid glDeleteBuffersARB(GLsizei n, const GLuint* buffers)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg buffers\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]unsigned int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg buffers\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]unsigned int32*)\r\nret")]
        #endif
        public static unsafe void glDeleteBuffersARB([In] IntPtr extensionPointer, int n, uint* buffers) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glDeleteBuffersARB([In] IntPtr extensionPointer, int n, uint* buffers)
        #endregion Overloads for GLvoid glDeleteBuffersARB(GLsizei n, const GLuint* buffers)

        #region Overloads for GLvoid glGenBuffersARB(GLsizei n, GLuint* buffers)
        #region void glGenBuffersARB([In] IntPtr extensionPointer, int n, int[] buffers)
        // GLvoid glGenBuffersARB(GLsizei n, GLuint* buffers)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg buffers\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[out]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg buffers\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[out]int32[])\r\nret")]
        #endif
        public static void glGenBuffersARB([In] IntPtr extensionPointer, int n, int[] buffers) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGenBuffersARB([In] IntPtr extensionPointer, int n, int[] buffers)

        #region void glGenBuffersARB([In] IntPtr extensionPointer, int n, out int buffers)
        // GLvoid glGenBuffersARB(GLsizei n, GLuint* buffers)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg buffers\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[out]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg buffers\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[out]int32)\r\nret")]
        #endif
        public static void glGenBuffersARB([In] IntPtr extensionPointer, int n, out int buffers) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGenBuffersARB([In] IntPtr extensionPointer, int n, out int buffers)

        #region void glGenBuffersARB([In] IntPtr extensionPointer, int n, IntPtr buffers)
        // GLvoid glGenBuffersARB(GLsizei n, GLuint* buffers)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg buffers\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg buffers\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGenBuffersARB([In] IntPtr extensionPointer, int n, IntPtr buffers) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGenBuffersARB([In] IntPtr extensionPointer, int n, IntPtr buffers)

        #region void glGenBuffersARB([In] IntPtr extensionPointer, int n, out uint buffers)
        // GLvoid glGenBuffersARB(GLsizei n, GLuint* buffers)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg buffers\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[out]unsigned int32)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg buffers\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[out]unsigned int32)\r\nret")]
        #endif
        public static void glGenBuffersARB([In] IntPtr extensionPointer, int n, out uint buffers) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGenBuffersARB([In] IntPtr extensionPointer, int n, out uint buffers)

        #region void glGenBuffersARB([In] IntPtr extensionPointer, int n, uint[] buffers)
        // GLvoid glGenBuffersARB(GLsizei n, GLuint* buffers)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg buffers\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[out]unsigned int32[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg buffers\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[out]unsigned int32[])\r\nret")]
        #endif
        public static void glGenBuffersARB([In] IntPtr extensionPointer, int n, uint[] buffers) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGenBuffersARB([In] IntPtr extensionPointer, int n, uint[] buffers)

        #region void glGenBuffersARB([In] IntPtr extensionPointer, int n, uint* buffers)
        // GLvoid glGenBuffersARB(GLsizei n, GLuint* buffers)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg buffers\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[out]unsigned int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg buffers\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[out]unsigned int32*)\r\nret")]
        #endif
        public static unsafe void glGenBuffersARB([In] IntPtr extensionPointer, int n, uint* buffers) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGenBuffersARB([In] IntPtr extensionPointer, int n, uint* buffers)
        #endregion Overloads for GLvoid glGenBuffersARB(GLsizei n, GLuint* buffers)

        #region Overloads for GLboolean glIsBufferARB(GLuint buffer)
        #region int glIsBufferARB([In] IntPtr extensionPointer, int buffer)
        // GLboolean glIsBufferARB(GLuint buffer)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg buffer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall int32([in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg buffer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl int32([in]int32)\r\nret")]
        #endif
        public static int glIsBufferARB([In] IntPtr extensionPointer, int buffer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion int glIsBufferARB([In] IntPtr extensionPointer, int buffer)

        #region int glIsBufferARB([In] IntPtr extensionPointer, uint buffer)
        // GLboolean glIsBufferARB(GLuint buffer)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg buffer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall int32([in]unsigned int32)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg buffer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl int32([in]unsigned int32)\r\nret")]
        #endif
        public static int glIsBufferARB([In] IntPtr extensionPointer, uint buffer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion int glIsBufferARB([In] IntPtr extensionPointer, uint buffer)
        #endregion Overloads for GLboolean glIsBufferARB(GLuint buffer)

        #region Overloads for GLvoid glBufferDataARB(GLenum target, GLsizeiptrARB size, const GLvoid* data, GLenum usage)
        #region void glBufferDataARB([In] IntPtr extensionPointer, int target, int size, short[] data, int usage)
        // GLvoid glBufferDataARB(GLenum target, GLsizeiptrARB size, const GLvoid* data, GLenum usage)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg size\r\nldarg data\r\nldarg usage\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int16[],[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg size\r\nldarg data\r\nldarg usage\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int16[],[in]int32)\r\nret")]
        #endif
        public static void glBufferDataARB([In] IntPtr extensionPointer, int target, int size, short[] data, int usage) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glBufferDataARB([In] IntPtr extensionPointer, int target, int size, short[] data, int usage)

        #region void glBufferDataARB([In] IntPtr extensionPointer, int target, int size, float[] data, int usage)
        // GLvoid glBufferDataARB(GLenum target, GLsizeiptrARB size, const GLvoid* data, GLenum usage)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg size\r\nldarg data\r\nldarg usage\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]float32[],[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg size\r\nldarg data\r\nldarg usage\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]float32[],[in]int32)\r\nret")]
        #endif
        public static void glBufferDataARB([In] IntPtr extensionPointer, int target, int size, float[] data, int usage) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glBufferDataARB([In] IntPtr extensionPointer, int target, int size, float[] data, int usage)

        #region void glBufferDataARB([In] IntPtr extensionPointer, int target, int size, int[] data, int usage)
        // GLvoid glBufferDataARB(GLenum target, GLsizeiptrARB size, const GLvoid* data, GLenum usage)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg size\r\nldarg data\r\nldarg usage\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32[],[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg size\r\nldarg data\r\nldarg usage\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32[],[in]int32)\r\nret")]
        #endif
        public static void glBufferDataARB([In] IntPtr extensionPointer, int target, int size, int[] data, int usage) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glBufferDataARB([In] IntPtr extensionPointer, int target, int size, int[] data, int usage)

        #region void glBufferDataARB([In] IntPtr extensionPointer, int target, int size, IntPtr data, int usage)
        // GLvoid glBufferDataARB(GLenum target, GLsizeiptrARB size, const GLvoid* data, GLenum usage)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg size\r\nldarg data\r\nldarg usage\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]native int,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg size\r\nldarg data\r\nldarg usage\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]native int,[in]int32)\r\nret")]
        #endif
        public static void glBufferDataARB([In] IntPtr extensionPointer, int target, int size, IntPtr data, int usage) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glBufferDataARB([In] IntPtr extensionPointer, int target, int size, IntPtr data, int usage)

        #region void glBufferDataARB([In] IntPtr extensionPointer, int target, int size, byte[] data, int usage)
        // GLvoid glBufferDataARB(GLenum target, GLsizeiptrARB size, const GLvoid* data, GLenum usage)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg size\r\nldarg data\r\nldarg usage\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]unsigned int8[],[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg size\r\nldarg data\r\nldarg usage\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]unsigned int8[],[in]int32)\r\nret")]
        #endif
        public static void glBufferDataARB([In] IntPtr extensionPointer, int target, int size, byte[] data, int usage) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glBufferDataARB([In] IntPtr extensionPointer, int target, int size, byte[] data, int usage)

        #region void glBufferDataARB([In] IntPtr extensionPointer, int target, int size, double[] data, int usage)
        // GLvoid glBufferDataARB(GLenum target, GLsizeiptrARB size, const GLvoid* data, GLenum usage)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg size\r\nldarg data\r\nldarg usage\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]float64[],[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg size\r\nldarg data\r\nldarg usage\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]float64[],[in]int32)\r\nret")]
        #endif
        public static void glBufferDataARB([In] IntPtr extensionPointer, int target, int size, double[] data, int usage) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glBufferDataARB([In] IntPtr extensionPointer, int target, int size, double[] data, int usage)

        #region void glBufferDataARB([In] IntPtr extensionPointer, int target, int size, uint[] data, int usage)
        // GLvoid glBufferDataARB(GLenum target, GLsizeiptrARB size, const GLvoid* data, GLenum usage)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg size\r\nldarg data\r\nldarg usage\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]unsigned int32[],[in]int32)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg size\r\nldarg data\r\nldarg usage\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]unsigned int32[],[in]int32)\r\nret")]
        #endif
        public static void glBufferDataARB([In] IntPtr extensionPointer, int target, int size, uint[] data, int usage) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glBufferDataARB([In] IntPtr extensionPointer, int target, int size, uint[] data, int usage)

        #region void glBufferDataARB([In] IntPtr extensionPointer, int target, int size, sbyte[] data, int usage)
        // GLvoid glBufferDataARB(GLenum target, GLsizeiptrARB size, const GLvoid* data, GLenum usage)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg size\r\nldarg data\r\nldarg usage\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int8[],[in]int32)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg size\r\nldarg data\r\nldarg usage\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int8[],[in]int32)\r\nret")]
        #endif
        public static void glBufferDataARB([In] IntPtr extensionPointer, int target, int size, sbyte[] data, int usage) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glBufferDataARB([In] IntPtr extensionPointer, int target, int size, sbyte[] data, int usage)

        #region void glBufferDataARB([In] IntPtr extensionPointer, int target, int size, ushort[] data, int usage)
        // GLvoid glBufferDataARB(GLenum target, GLsizeiptrARB size, const GLvoid* data, GLenum usage)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg size\r\nldarg data\r\nldarg usage\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]unsigned int16[],[in]int32)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg size\r\nldarg data\r\nldarg usage\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]unsigned int16[],[in]int32)\r\nret")]
        #endif
        public static void glBufferDataARB([In] IntPtr extensionPointer, int target, int size, ushort[] data, int usage) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glBufferDataARB([In] IntPtr extensionPointer, int target, int size, ushort[] data, int usage)

        #region void glBufferDataARB([In] IntPtr extensionPointer, int target, int size, void* data, int usage)
        // GLvoid glBufferDataARB(GLenum target, GLsizeiptrARB size, const GLvoid* data, GLenum usage)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg size\r\nldarg data\r\nldarg usage\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]void*,[in]int32)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg size\r\nldarg data\r\nldarg usage\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]void*,[in]int32)\r\nret")]
        #endif
        public static unsafe void glBufferDataARB([In] IntPtr extensionPointer, int target, int size, void* data, int usage) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glBufferDataARB([In] IntPtr extensionPointer, int target, int size, void* data, int usage)
        #endregion Overloads for GLvoid glBufferDataARB(GLenum target, GLsizeiptrARB size, const GLvoid* data, GLenum usage)

        #region Overloads for GLvoid glBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, const GLvoid* data)
        #region void glBufferSubDataARB([In] IntPtr extensionPointer, int target, int offset, int size, short[] data)
        // GLvoid glBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, const GLvoid* data)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg offset\r\nldarg size\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg offset\r\nldarg size\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int16[])\r\nret")]
        #endif
        public static void glBufferSubDataARB([In] IntPtr extensionPointer, int target, int offset, int size, short[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glBufferSubDataARB([In] IntPtr extensionPointer, int target, int offset, int size, short[] data)

        #region void glBufferSubDataARB([In] IntPtr extensionPointer, int target, int offset, int size, float[] data)
        // GLvoid glBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, const GLvoid* data)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg offset\r\nldarg size\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg offset\r\nldarg size\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]float32[])\r\nret")]
        #endif
        public static void glBufferSubDataARB([In] IntPtr extensionPointer, int target, int offset, int size, float[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glBufferSubDataARB([In] IntPtr extensionPointer, int target, int offset, int size, float[] data)

        #region void glBufferSubDataARB([In] IntPtr extensionPointer, int target, int offset, int size, int[] data)
        // GLvoid glBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, const GLvoid* data)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg offset\r\nldarg size\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg offset\r\nldarg size\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32[])\r\nret")]
        #endif
        public static void glBufferSubDataARB([In] IntPtr extensionPointer, int target, int offset, int size, int[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glBufferSubDataARB([In] IntPtr extensionPointer, int target, int offset, int size, int[] data)

        #region void glBufferSubDataARB([In] IntPtr extensionPointer, int target, int offset, int size, IntPtr data)
        // GLvoid glBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, const GLvoid* data)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg offset\r\nldarg size\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]native int,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg offset\r\nldarg size\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]native int)\r\nret")]
        #endif
        public static void glBufferSubDataARB([In] IntPtr extensionPointer, int target, int offset, int size, IntPtr data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glBufferSubDataARB([In] IntPtr extensionPointer, int target, int offset, int size, IntPtr data)

        #region void glBufferSubDataARB([In] IntPtr extensionPointer, int target, int offset, int size, byte[] data)
        // GLvoid glBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, const GLvoid* data)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg offset\r\nldarg size\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]unsigned int8[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg offset\r\nldarg size\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]unsigned int8[])\r\nret")]
        #endif
        public static void glBufferSubDataARB([In] IntPtr extensionPointer, int target, int offset, int size, byte[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glBufferSubDataARB([In] IntPtr extensionPointer, int target, int offset, int size, byte[] data)

        #region void glBufferSubDataARB([In] IntPtr extensionPointer, int target, int offset, int size, double[] data)
        // GLvoid glBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, const GLvoid* data)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg offset\r\nldarg size\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]float64[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg offset\r\nldarg size\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]float64[])\r\nret")]
        #endif
        public static void glBufferSubDataARB([In] IntPtr extensionPointer, int target, int offset, int size, double[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glBufferSubDataARB([In] IntPtr extensionPointer, int target, int offset, int size, double[] data)

        #region void glBufferSubDataARB([In] IntPtr extensionPointer, int target, int offset, int size, uint[] data)
        // GLvoid glBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, const GLvoid* data)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg offset\r\nldarg size\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]unsigned int32[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg offset\r\nldarg size\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]unsigned int32[])\r\nret")]
        #endif
        public static void glBufferSubDataARB([In] IntPtr extensionPointer, int target, int offset, int size, uint[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glBufferSubDataARB([In] IntPtr extensionPointer, int target, int offset, int size, uint[] data)

        #region void glBufferSubDataARB([In] IntPtr extensionPointer, int target, int offset, int size, sbyte[] data)
        // GLvoid glBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, const GLvoid* data)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg offset\r\nldarg size\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int8[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg offset\r\nldarg size\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int8[])\r\nret")]
        #endif
        public static void glBufferSubDataARB([In] IntPtr extensionPointer, int target, int offset, int size, sbyte[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glBufferSubDataARB([In] IntPtr extensionPointer, int target, int offset, int size, sbyte[] data)

        #region void glBufferSubDataARB([In] IntPtr extensionPointer, int target, int offset, int size, ushort[] data)
        // GLvoid glBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, const GLvoid* data)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg offset\r\nldarg size\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]unsigned int16[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg offset\r\nldarg size\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]unsigned int16[])\r\nret")]
        #endif
        public static void glBufferSubDataARB([In] IntPtr extensionPointer, int target, int offset, int size, ushort[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glBufferSubDataARB([In] IntPtr extensionPointer, int target, int offset, int size, ushort[] data)

        #region void glBufferSubDataARB([In] IntPtr extensionPointer, int target, int offset, int size, void* data)
        // GLvoid glBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, const GLvoid* data)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg offset\r\nldarg size\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]void*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg offset\r\nldarg size\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]void*)\r\nret")]
        #endif
        public static unsafe void glBufferSubDataARB([In] IntPtr extensionPointer, int target, int offset, int size, void* data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glBufferSubDataARB([In] IntPtr extensionPointer, int target, int offset, int size, void* data)
        #endregion Overloads for GLvoid glBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, const GLvoid* data)

        #region Overloads for GLvoid glGetBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, GLvoid* data)
        #region void glGetBufferSubDataARB([In] IntPtr extensionPointer, int target, IntPtr offset, IntPtr size, short[] data)
        // GLvoid glGetBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, GLvoid* data)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg offset\r\nldarg size\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int,[in]native int,[out]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg offset\r\nldarg size\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int,[in]native int,[out]int16[])\r\nret")]
        #endif
        public static void glGetBufferSubDataARB([In] IntPtr extensionPointer, int target, IntPtr offset, IntPtr size, short[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetBufferSubDataARB([In] IntPtr extensionPointer, int target, IntPtr offset, IntPtr size, short[] data)

        #region void glGetBufferSubDataARB([In] IntPtr extensionPointer, int target, IntPtr offset, IntPtr size, float[] data)
        // GLvoid glGetBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, GLvoid* data)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg offset\r\nldarg size\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int,[in]native int,[out]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg offset\r\nldarg size\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int,[in]native int,[out]float32[])\r\nret")]
        #endif
        public static void glGetBufferSubDataARB([In] IntPtr extensionPointer, int target, IntPtr offset, IntPtr size, float[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetBufferSubDataARB([In] IntPtr extensionPointer, int target, IntPtr offset, IntPtr size, float[] data)

        #region void glGetBufferSubDataARB([In] IntPtr extensionPointer, int target, IntPtr offset, IntPtr size, int[] data)
        // GLvoid glGetBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, GLvoid* data)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg offset\r\nldarg size\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int,[in]native int,[out]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg offset\r\nldarg size\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int,[in]native int,[out]int32[])\r\nret")]
        #endif
        public static void glGetBufferSubDataARB([In] IntPtr extensionPointer, int target, IntPtr offset, IntPtr size, int[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetBufferSubDataARB([In] IntPtr extensionPointer, int target, IntPtr offset, IntPtr size, int[] data)

        #region void glGetBufferSubDataARB([In] IntPtr extensionPointer, int target, int offset, int size, IntPtr data)
        // GLvoid glGetBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, GLvoid* data)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg offset\r\nldarg size\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg offset\r\nldarg size\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGetBufferSubDataARB([In] IntPtr extensionPointer, int target, int offset, int size, IntPtr data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetBufferSubDataARB([In] IntPtr extensionPointer, int target, int offset, int size, IntPtr data)

        #region void glGetBufferSubDataARB([In] IntPtr extensionPointer, int target, IntPtr offset, IntPtr size, byte[] data)
        // GLvoid glGetBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, GLvoid* data)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg offset\r\nldarg size\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int,[in]native int,[out]unsigned int8[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg offset\r\nldarg size\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int,[in]native int,[out]unsigned int8[])\r\nret")]
        #endif
        public static void glGetBufferSubDataARB([In] IntPtr extensionPointer, int target, IntPtr offset, IntPtr size, byte[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetBufferSubDataARB([In] IntPtr extensionPointer, int target, IntPtr offset, IntPtr size, byte[] data)

        #region void glGetBufferSubDataARB([In] IntPtr extensionPointer, int target, IntPtr offset, IntPtr size, double[] data)
        // GLvoid glGetBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, GLvoid* data)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg offset\r\nldarg size\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int,[in]native int,[out]float64[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg offset\r\nldarg size\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int,[in]native int,[out]float64[])\r\nret")]
        #endif
        public static void glGetBufferSubDataARB([In] IntPtr extensionPointer, int target, IntPtr offset, IntPtr size, double[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetBufferSubDataARB([In] IntPtr extensionPointer, int target, IntPtr offset, IntPtr size, double[] data)

        #region void glGetBufferSubDataARB([In] IntPtr extensionPointer, int target, IntPtr offset, IntPtr size, uint[] data)
        // GLvoid glGetBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, GLvoid* data)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg offset\r\nldarg size\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int,[in]native int,[out]unsigned int32[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg offset\r\nldarg size\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int,[in]native int,[out]unsigned int32[])\r\nret")]
        #endif
        public static void glGetBufferSubDataARB([In] IntPtr extensionPointer, int target, IntPtr offset, IntPtr size, uint[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetBufferSubDataARB([In] IntPtr extensionPointer, int target, IntPtr offset, IntPtr size, uint[] data)

        #region void glGetBufferSubDataARB([In] IntPtr extensionPointer, int target, IntPtr offset, IntPtr size, sbyte[] data)
        // GLvoid glGetBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, GLvoid* data)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg offset\r\nldarg size\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int,[in]native int,[out]int8[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg offset\r\nldarg size\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int,[in]native int,[out]int8[])\r\nret")]
        #endif
        public static void glGetBufferSubDataARB([In] IntPtr extensionPointer, int target, IntPtr offset, IntPtr size, sbyte[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetBufferSubDataARB([In] IntPtr extensionPointer, int target, IntPtr offset, IntPtr size, sbyte[] data)

        #region void glGetBufferSubDataARB([In] IntPtr extensionPointer, int target, IntPtr offset, IntPtr size, ushort[] data)
        // GLvoid glGetBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, GLvoid* data)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg offset\r\nldarg size\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int,[in]native int,[out]unsigned int16[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg offset\r\nldarg size\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int,[in]native int,[out]unsigned int16[])\r\nret")]
        #endif
        public static void glGetBufferSubDataARB([In] IntPtr extensionPointer, int target, IntPtr offset, IntPtr size, ushort[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetBufferSubDataARB([In] IntPtr extensionPointer, int target, IntPtr offset, IntPtr size, ushort[] data)

        #region void glGetBufferSubDataARB([In] IntPtr extensionPointer, int target, IntPtr offset, IntPtr size, void* data)
        // GLvoid glGetBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, GLvoid* data)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg offset\r\nldarg size\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int,[in]native int,[out]void*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg offset\r\nldarg size\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int,[in]native int,[out]void*)\r\nret")]
        #endif
        public static unsafe void glGetBufferSubDataARB([In] IntPtr extensionPointer, int target, IntPtr offset, IntPtr size, void* data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetBufferSubDataARB([In] IntPtr extensionPointer, int target, IntPtr offset, IntPtr size, void* data)
        #endregion Overloads for GLvoid glGetBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, GLvoid* data)

        #region IntPtr glMapBufferARB([In] IntPtr extensionPointer, int target, int access)
        // GLvoid* glMapBufferARB(GLenum target, GLenum access)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg access\r\nldarg extensionPointer\r\ncalli unmanaged stdcall native int([in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg access\r\nldarg extensionPointer\r\ncalli unmanaged cdecl native int([in]int32,[in]int32)\r\nret")]
        #endif
        public static IntPtr glMapBufferARB([In] IntPtr extensionPointer, int target, int access) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion IntPtr glMapBufferARB([In] IntPtr extensionPointer, int target, int access)

        #region int glUnmapBufferARB([In] IntPtr extensionPointer, int target)
        // GLboolean glUnmapBufferARB(GLenum target)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg target\r\nldarg extensionPointer\r\ncalli unmanaged stdcall int32([in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg target\r\nldarg extensionPointer\r\ncalli unmanaged cdecl int32([in]int32)\r\nret")]
        #endif
        public static int glUnmapBufferARB([In] IntPtr extensionPointer, int target) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion int glUnmapBufferARB([In] IntPtr extensionPointer, int target)

        #region Overloads for GLvoid glGetBufferParameterivARB(GLenum target, GLenum pname, GLint* parameters)
        #region void glGetBufferParameterivARB([In] IntPtr extensionPointer, int target, int pname, out int parameters)
        // GLvoid glGetBufferParameterivARB(GLenum target, GLenum pname, GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]int32)\r\nret")]
        #endif
        public static void glGetBufferParameterivARB([In] IntPtr extensionPointer, int target, int pname, out int parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetBufferParameterivARB([In] IntPtr extensionPointer, int target, int pname, out int parameters)

        #region void glGetBufferParameterivARB([In] IntPtr extensionPointer, int target, int pname, int[] parameters)
        // GLvoid glGetBufferParameterivARB(GLenum target, GLenum pname, GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]int32[])\r\nret")]
        #endif
        public static void glGetBufferParameterivARB([In] IntPtr extensionPointer, int target, int pname, int[] parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetBufferParameterivARB([In] IntPtr extensionPointer, int target, int pname, int[] parameters)

        #region void glGetBufferParameterivARB([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters)
        // GLvoid glGetBufferParameterivARB(GLenum target, GLenum pname, GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGetBufferParameterivARB([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetBufferParameterivARB([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters)

        #region void glGetBufferParameterivARB([In] IntPtr extensionPointer, int target, int pname, int* parameters)
        // GLvoid glGetBufferParameterivARB(GLenum target, GLenum pname, GLint* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]int32*)\r\nret")]
        #endif
        public static unsafe void glGetBufferParameterivARB([In] IntPtr extensionPointer, int target, int pname, int* parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetBufferParameterivARB([In] IntPtr extensionPointer, int target, int pname, int* parameters)
        #endregion Overloads for GLvoid glGetBufferParameterivARB(GLenum target, GLenum pname, GLint* parameters)

        #region Overloads for GLvoid glGetBufferPointervARB(GLenum target, GLenum pname, GLvoid* parameters)
        #region void glGetBufferPointervARB([In] IntPtr extensionPointer, int target, int pname, IntPtr[] parameters)
        // GLvoid glGetBufferPointervARB(GLenum target, GLenum pname, GLvoid* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]native int[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]native int[])\r\nret")]
        #endif
        public static void glGetBufferPointervARB([In] IntPtr extensionPointer, int target, int pname, IntPtr[] parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetBufferPointervARB([In] IntPtr extensionPointer, int target, int pname, IntPtr[] parameters)

        #region void glGetBufferPointervARB([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters)
        // GLvoid glGetBufferPointervARB(GLenum target, GLenum pname, GLvoid* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGetBufferPointervARB([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetBufferPointervARB([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters)

        #region void glGetBufferPointervARB([In] IntPtr extensionPointer, int target, int pname, void** parameters)
        // GLvoid glGetBufferPointervARB(GLenum target, GLenum pname, GLvoid* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]void**)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]void**)\r\nret")]
        #endif
        public static unsafe void glGetBufferPointervARB([In] IntPtr extensionPointer, int target, int pname, void** parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetBufferPointervARB([In] IntPtr extensionPointer, int target, int pname, void** parameters)
        #endregion Overloads for GLvoid glGetBufferPointervARB(GLenum target, GLenum pname, GLvoid* parameters)
        #endregion GL_ARB_vertex_buffer_object Methods
        #endregion GL_ARB_vertex_buffer_object (28)

        #region GL_ARB_occlusion_query (29)
        #region GL_ARB_occlusion_query Constants
        #region GL_SAMPLES_PASSED_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SAMPLES_PASSED_ARB 0x8914
        public const int GL_SAMPLES_PASSED_ARB = 0x8914;
        #endregion GL_SAMPLES_PASSED_ARB

        #region GL_QUERY_COUNTER_BITS_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_QUERY_COUNTER_BITS_ARB 0x8864
        public const int GL_QUERY_COUNTER_BITS_ARB = 0x8864;
        #endregion GL_QUERY_COUNTER_BITS_ARB

        #region GL_CURRENT_QUERY_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_CURRENT_QUERY_ARB 0x8865
        public const int GL_CURRENT_QUERY_ARB = 0x8865;
        #endregion GL_CURRENT_QUERY_ARB

        #region GL_QUERY_RESULT_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_QUERY_RESULT_ARB 0x8866
        public const int GL_QUERY_RESULT_ARB = 0x8866;
        #endregion GL_QUERY_RESULT_ARB

        #region GL_QUERY_RESULT_AVAILABLE_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_QUERY_RESULT_AVAILABLE_ARB 0x8867
        public const int GL_QUERY_RESULT_AVAILABLE_ARB = 0x8867;
        #endregion GL_QUERY_RESULT_AVAILABLE_ARB
        #endregion GL_ARB_occlusion_query Constants

        #region GL_ARB_occlusion_query Methods
        #region Overloads for GLvoid glGenQueriesARB(GLsizei n, GLuint* ids)
        #region void glGenQueriesARB([In] IntPtr extensionPointer, int n, out int ids)
        // GLvoid glGenQueriesARB(GLsizei n, GLuint* ids)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg ids\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[out]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg ids\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[out]int32)\r\nret")]
        #endif
        public static void glGenQueriesARB([In] IntPtr extensionPointer, int n, out int ids) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGenQueriesARB([In] IntPtr extensionPointer, int n, out int ids)

        #region void glGenQueriesARB([In] IntPtr extensionPointer, int n, int[] ids)
        // GLvoid glGenQueriesARB(GLsizei n, GLuint* ids)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg ids\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[out]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg ids\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[out]int32[])\r\nret")]
        #endif
        public static void glGenQueriesARB([In] IntPtr extensionPointer, int n, int[] ids) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGenQueriesARB([In] IntPtr extensionPointer, int n, int[] ids)

        #region void glGenQueriesARB([In] IntPtr extensionPointer, int n, IntPtr ids)
        // GLvoid glGenQueriesARB(GLsizei n, GLuint* ids)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg ids\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg ids\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGenQueriesARB([In] IntPtr extensionPointer, int n, IntPtr ids) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGenQueriesARB([In] IntPtr extensionPointer, int n, IntPtr ids)

        #region void glGenQueriesARB([In] IntPtr extensionPointer, int n, int* ids)
        // GLvoid glGenQueriesARB(GLsizei n, GLuint* ids)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg ids\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[out]int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg ids\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[out]int32*)\r\nret")]
        #endif
        public static unsafe void glGenQueriesARB([In] IntPtr extensionPointer, int n, int* ids) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGenQueriesARB([In] IntPtr extensionPointer, int n, int* ids)
        #endregion Overloads for GLvoid glGenQueriesARB(GLsizei n, GLuint* ids)

        #region Overloads for GLvoid glDeleteQueriesARB(GLsizei n, const GLuint* ids)
        #region void glDeleteQueriesARB([In] IntPtr extensionPointer, int n, ref int ids)
        // GLvoid glDeleteQueriesARB(GLsizei n, const GLuint* ids)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg ids\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg ids\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]int32)\r\nret")]
        #endif
        public static void glDeleteQueriesARB([In] IntPtr extensionPointer, int n, ref int ids) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glDeleteQueriesARB([In] IntPtr extensionPointer, int n, ref int ids)

        #region void glDeleteQueriesARB([In] IntPtr extensionPointer, int n, int[] ids)
        // GLvoid glDeleteQueriesARB(GLsizei n, const GLuint* ids)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg ids\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg ids\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32[])\r\nret")]
        #endif
        public static void glDeleteQueriesARB([In] IntPtr extensionPointer, int n, int[] ids) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glDeleteQueriesARB([In] IntPtr extensionPointer, int n, int[] ids)

        #region void glDeleteQueriesARB([In] IntPtr extensionPointer, int n, IntPtr ids)
        // GLvoid glDeleteQueriesARB(GLsizei n, const GLuint* ids)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg ids\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg ids\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glDeleteQueriesARB([In] IntPtr extensionPointer, int n, IntPtr ids) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glDeleteQueriesARB([In] IntPtr extensionPointer, int n, IntPtr ids)

        #region void glDeleteQueriesARB([In] IntPtr extensionPointer, int n, int* ids)
        // GLvoid glDeleteQueriesARB(GLsizei n, const GLuint* ids)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg ids\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg ids\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32*)\r\nret")]
        #endif
        public static unsafe void glDeleteQueriesARB([In] IntPtr extensionPointer, int n, int* ids) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glDeleteQueriesARB([In] IntPtr extensionPointer, int n, int* ids)
        #endregion Overloads for GLvoid glDeleteQueriesARB(GLsizei n, const GLuint* ids)

        #region int glIsQueryARB([In] IntPtr extensionPointer, int id)
        // GLboolean glIsQueryARB(GLuint id)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg id\r\nldarg extensionPointer\r\ncalli unmanaged stdcall int32([in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg id\r\nldarg extensionPointer\r\ncalli unmanaged cdecl int32([in]int32)\r\nret")]
        #endif
        public static int glIsQueryARB([In] IntPtr extensionPointer, int id) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion int glIsQueryARB([In] IntPtr extensionPointer, int id)

        #region void glBeginQueryARB([In] IntPtr extensionPointer, int target, int id)
        // GLvoid glBeginQueryARB(GLenum target, GLuint id)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg id\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg id\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32)\r\nret")]
        #endif
        public static void glBeginQueryARB([In] IntPtr extensionPointer, int target, int id) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glBeginQueryARB([In] IntPtr extensionPointer, int target, int id)

        #region void glEndQueryARB([In] IntPtr extensionPointer, int target)
        // GLvoid glEndQueryARB(GLenum target)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg target\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg target\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32)\r\nret")]
        #endif
        public static void glEndQueryARB([In] IntPtr extensionPointer, int target) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glEndQueryARB([In] IntPtr extensionPointer, int target)

        #region Overloads for GLvoid glGetQueryivARB(GLenum target, GLenum pname, GLint* parameters)
        #region void glGetQueryivARB([In] IntPtr extensionPointer, int target, int pname, out int parameters)
        // GLvoid glGetQueryivARB(GLenum target, GLenum pname, GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]int32)\r\nret")]
        #endif
        public static void glGetQueryivARB([In] IntPtr extensionPointer, int target, int pname, out int parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetQueryivARB([In] IntPtr extensionPointer, int target, int pname, out int parameters)

        #region void glGetQueryivARB([In] IntPtr extensionPointer, int target, int pname, int[] parameters)
        // GLvoid glGetQueryivARB(GLenum target, GLenum pname, GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]int32[])\r\nret")]
        #endif
        public static void glGetQueryivARB([In] IntPtr extensionPointer, int target, int pname, int[] parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetQueryivARB([In] IntPtr extensionPointer, int target, int pname, int[] parameters)

        #region void glGetQueryivARB([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters)
        // GLvoid glGetQueryivARB(GLenum target, GLenum pname, GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGetQueryivARB([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetQueryivARB([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters)

        #region void glGetQueryivARB([In] IntPtr extensionPointer, int target, int pname, int* parameters)
        // GLvoid glGetQueryivARB(GLenum target, GLenum pname, GLint* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]int32*)\r\nret")]
        #endif
        public static unsafe void glGetQueryivARB([In] IntPtr extensionPointer, int target, int pname, int* parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetQueryivARB([In] IntPtr extensionPointer, int target, int pname, int* parameters)
        #endregion Overloads for GLvoid glGetQueryivARB(GLenum target, GLenum pname, GLint* parameters)

        #region Overloads for GLvoid glGetQueryObjectivARB(GLuint id, GLenum pname, GLint* parameters)
        #region void glGetQueryObjectivARB([In] IntPtr extensionPointer, int id, int pname, int[] parameters)
        // GLvoid glGetQueryObjectivARB(GLuint id, GLenum pname, GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]int32[])\r\nret")]
        #endif
        public static void glGetQueryObjectivARB([In] IntPtr extensionPointer, int id, int pname, int[] parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetQueryObjectivARB([In] IntPtr extensionPointer, int id, int pname, int[] parameters)

        #region void glGetQueryObjectivARB([In] IntPtr extensionPointer, int id, int pname, out int parameters)
        // GLvoid glGetQueryObjectivARB(GLuint id, GLenum pname, GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]int32)\r\nret")]
        #endif
        public static void glGetQueryObjectivARB([In] IntPtr extensionPointer, int id, int pname, out int parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetQueryObjectivARB([In] IntPtr extensionPointer, int id, int pname, out int parameters)

        #region void glGetQueryObjectivARB([In] IntPtr extensionPointer, int id, int pname, IntPtr parameters)
        // GLvoid glGetQueryObjectivARB(GLuint id, GLenum pname, GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGetQueryObjectivARB([In] IntPtr extensionPointer, int id, int pname, IntPtr parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetQueryObjectivARB([In] IntPtr extensionPointer, int id, int pname, IntPtr parameters)

        #region void glGetQueryObjectivARB([In] IntPtr extensionPointer, uint id, int pname, IntPtr parameters)
        // GLvoid glGetQueryObjectivARB(GLuint id, GLenum pname, GLint* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int32,[in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int32,[in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGetQueryObjectivARB([In] IntPtr extensionPointer, uint id, int pname, IntPtr parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetQueryObjectivARB([In] IntPtr extensionPointer, uint id, int pname, IntPtr parameters)

        #region void glGetQueryObjectivARB([In] IntPtr extensionPointer, uint id, int pname, out int parameters)
        // GLvoid glGetQueryObjectivARB(GLuint id, GLenum pname, GLint* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int32,[in]int32,[out]int32)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int32,[in]int32,[out]int32)\r\nret")]
        #endif
        public static void glGetQueryObjectivARB([In] IntPtr extensionPointer, uint id, int pname, out int parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetQueryObjectivARB([In] IntPtr extensionPointer, uint id, int pname, out int parameters)

        #region void glGetQueryObjectivARB([In] IntPtr extensionPointer, uint id, int pname, int[] parameters)
        // GLvoid glGetQueryObjectivARB(GLuint id, GLenum pname, GLint* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int32,[in]int32,[out]int32[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int32,[in]int32,[out]int32[])\r\nret")]
        #endif
        public static void glGetQueryObjectivARB([In] IntPtr extensionPointer, uint id, int pname, int[] parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetQueryObjectivARB([In] IntPtr extensionPointer, uint id, int pname, int[] parameters)

        #region void glGetQueryObjectivARB([In] IntPtr extensionPointer, uint id, int pname, int* parameters)
        // GLvoid glGetQueryObjectivARB(GLuint id, GLenum pname, GLint* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int32,[in]int32,[out]int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int32,[in]int32,[out]int32*)\r\nret")]
        #endif
        public static unsafe void glGetQueryObjectivARB([In] IntPtr extensionPointer, uint id, int pname, int* parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetQueryObjectivARB([In] IntPtr extensionPointer, uint id, int pname, int* parameters)
        #endregion Overloads for GLvoid glGetQueryObjectivARB(GLuint id, GLenum pname, GLint* parameters)

        #region Overloads for GLvoid glGetQueryObjectuivARB(GLuint id, GLenum pname, GLuint* parameters)
        #region void glGetQueryObjectuivARB([In] IntPtr extensionPointer, int id, int pname, int[] parameters)
        // GLvoid glGetQueryObjectuivARB(GLuint id, GLenum pname, GLuint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]int32[])\r\nret")]
        #endif
        public static void glGetQueryObjectuivARB([In] IntPtr extensionPointer, int id, int pname, int[] parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetQueryObjectuivARB([In] IntPtr extensionPointer, int id, int pname, int[] parameters)

        #region void glGetQueryObjectuivARB([In] IntPtr extensionPointer, int id, int pname, out int parameters)
        // GLvoid glGetQueryObjectuivARB(GLuint id, GLenum pname, GLuint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]int32)\r\nret")]
        #endif
        public static void glGetQueryObjectuivARB([In] IntPtr extensionPointer, int id, int pname, out int parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetQueryObjectuivARB([In] IntPtr extensionPointer, int id, int pname, out int parameters)

        #region void glGetQueryObjectuivARB([In] IntPtr extensionPointer, int id, int pname, IntPtr parameters)
        // GLvoid glGetQueryObjectuivARB(GLuint id, GLenum pname, GLuint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGetQueryObjectuivARB([In] IntPtr extensionPointer, int id, int pname, IntPtr parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetQueryObjectuivARB([In] IntPtr extensionPointer, int id, int pname, IntPtr parameters)

        #region void glGetQueryObjectuivARB([In] IntPtr extensionPointer, uint id, int pname, IntPtr parameters)
        // GLvoid glGetQueryObjectuivARB(GLuint id, GLenum pname, GLuint* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int32,[in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int32,[in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGetQueryObjectuivARB([In] IntPtr extensionPointer, uint id, int pname, IntPtr parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetQueryObjectuivARB([In] IntPtr extensionPointer, uint id, int pname, IntPtr parameters)

        #region void glGetQueryObjectuivARB([In] IntPtr extensionPointer, uint id, int pname, out uint parameters)
        // GLvoid glGetQueryObjectuivARB(GLuint id, GLenum pname, GLuint* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int32,[in]int32,[out]unsigned int32)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int32,[in]int32,[out]unsigned int32)\r\nret")]
        #endif
        public static void glGetQueryObjectuivARB([In] IntPtr extensionPointer, uint id, int pname, out uint parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetQueryObjectuivARB([In] IntPtr extensionPointer, uint id, int pname, out uint parameters)

        #region void glGetQueryObjectuivARB([In] IntPtr extensionPointer, uint id, int pname, uint[] parameters)
        // GLvoid glGetQueryObjectuivARB(GLuint id, GLenum pname, GLuint* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int32,[in]int32,[out]unsigned int32[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int32,[in]int32,[out]unsigned int32[])\r\nret")]
        #endif
        public static void glGetQueryObjectuivARB([In] IntPtr extensionPointer, uint id, int pname, uint[] parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetQueryObjectuivARB([In] IntPtr extensionPointer, uint id, int pname, uint[] parameters)

        #region void glGetQueryObjectuivARB([In] IntPtr extensionPointer, uint id, int pname, uint* parameters)
        // GLvoid glGetQueryObjectuivARB(GLuint id, GLenum pname, GLuint* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int32,[in]int32,[out]unsigned int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int32,[in]int32,[out]unsigned int32*)\r\nret")]
        #endif
        public static unsafe void glGetQueryObjectuivARB([In] IntPtr extensionPointer, uint id, int pname, uint* parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetQueryObjectuivARB([In] IntPtr extensionPointer, uint id, int pname, uint* parameters)
        #endregion Overloads for GLvoid glGetQueryObjectuivARB(GLuint id, GLenum pname, GLuint* parameters)
        #endregion GL_ARB_occlusion_query Methods
        #endregion GL_ARB_occlusion_query (29)

        #region GL_ARB_shader_objects (30)
        #region GL_ARB_shader_objects Constants
        #region GL_PROGRAM_OBJECT_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PROGRAM_OBJECT_ARB 0x8B40
        public const int GL_PROGRAM_OBJECT_ARB = 0x8B40;
        #endregion GL_PROGRAM_OBJECT_ARB

        #region GL_OBJECT_TYPE_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OBJECT_TYPE_ARB 0x8B4E
        public const int GL_OBJECT_TYPE_ARB = 0x8B4E;
        #endregion GL_OBJECT_TYPE_ARB

        #region GL_OBJECT_SUBTYPE_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OBJECT_SUBTYPE_ARB 0x8B4F
        public const int GL_OBJECT_SUBTYPE_ARB = 0x8B4F;
        #endregion GL_OBJECT_SUBTYPE_ARB

        #region GL_OBJECT_DELETE_STATUS_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OBJECT_DELETE_STATUS_ARB 0x8B80
        public const int GL_OBJECT_DELETE_STATUS_ARB = 0x8B80;
        #endregion GL_OBJECT_DELETE_STATUS_ARB

        #region GL_OBJECT_COMPILE_STATUS_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OBJECT_COMPILE_STATUS_ARB 0x8B81
        public const int GL_OBJECT_COMPILE_STATUS_ARB = 0x8B81;
        #endregion GL_OBJECT_COMPILE_STATUS_ARB

        #region GL_OBJECT_LINK_STATUS_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OBJECT_LINK_STATUS_ARB 0x8B82
        public const int GL_OBJECT_LINK_STATUS_ARB = 0x8B82;
        #endregion GL_OBJECT_LINK_STATUS_ARB

        #region GL_OBJECT_VALIDATE_STATUS_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OBJECT_VALIDATE_STATUS_ARB 0x8B83
        public const int GL_OBJECT_VALIDATE_STATUS_ARB = 0x8B83;
        #endregion GL_OBJECT_VALIDATE_STATUS_ARB

        #region GL_OBJECT_INFO_LOG_LENGTH_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OBJECT_INFO_LOG_LENGTH_ARB 0x8B84
        public const int GL_OBJECT_INFO_LOG_LENGTH_ARB = 0x8B84;
        #endregion GL_OBJECT_INFO_LOG_LENGTH_ARB

        #region GL_OBJECT_ATTACHED_OBJECTS_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OBJECT_ATTACHED_OBJECTS_ARB 0x8B85
        public const int GL_OBJECT_ATTACHED_OBJECTS_ARB = 0x8B85;
        #endregion GL_OBJECT_ATTACHED_OBJECTS_ARB

        #region GL_OBJECT_ACTIVE_UNIFORMS_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OBJECT_ACTIVE_UNIFORMS_ARB 0x8B86
        public const int GL_OBJECT_ACTIVE_UNIFORMS_ARB = 0x8B86;
        #endregion GL_OBJECT_ACTIVE_UNIFORMS_ARB

        #region GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB 0x8B87
        public const int GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB = 0x8B87;
        #endregion GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB

        #region GL_OBJECT_SHADER_SOURCE_LENGTH_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OBJECT_SHADER_SOURCE_LENGTH_ARB 0x8B88
        public const int GL_OBJECT_SHADER_SOURCE_LENGTH_ARB = 0x8B88;
        #endregion GL_OBJECT_SHADER_SOURCE_LENGTH_ARB

        #region GL_SHADER_OBJECT_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SHADER_OBJECT_ARB 0x8B48
        public const int GL_SHADER_OBJECT_ARB = 0x8B48;
        #endregion GL_SHADER_OBJECT_ARB

        #region GL_FLOAT_VEC2_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_FLOAT_VEC2_ARB 0x8B50
        public const int GL_FLOAT_VEC2_ARB = 0x8B50;
        #endregion GL_FLOAT_VEC2_ARB

        #region GL_FLOAT_VEC3_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_FLOAT_VEC3_ARB 0x8B51
        public const int GL_FLOAT_VEC3_ARB = 0x8B51;
        #endregion GL_FLOAT_VEC3_ARB

        #region GL_FLOAT_VEC4_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_FLOAT_VEC4_ARB 0x8B52
        public const int GL_FLOAT_VEC4_ARB = 0x8B52;
        #endregion GL_FLOAT_VEC4_ARB

        #region GL_INT_VEC2_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_INT_VEC2_ARB 0x8B53
        public const int GL_INT_VEC2_ARB = 0x8B53;
        #endregion GL_INT_VEC2_ARB

        #region GL_INT_VEC3_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_INT_VEC3_ARB 0x8B54
        public const int GL_INT_VEC3_ARB = 0x8B54;
        #endregion GL_INT_VEC3_ARB

        #region GL_INT_VEC4_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_INT_VEC4_ARB 0x8B55
        public const int GL_INT_VEC4_ARB = 0x8B55;
        #endregion GL_INT_VEC4_ARB

        #region GL_BOOL_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_BOOL_ARB 0x8B56
        public const int GL_BOOL_ARB = 0x8B56;
        #endregion GL_BOOL_ARB

        #region GL_BOOL_VEC2_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_BOOL_VEC2_ARB 0x8B57
        public const int GL_BOOL_VEC2_ARB = 0x8B57;
        #endregion GL_BOOL_VEC2_ARB

        #region GL_BOOL_VEC3_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_BOOL_VEC3_ARB 0x8B58
        public const int GL_BOOL_VEC3_ARB = 0x8B58;
        #endregion GL_BOOL_VEC3_ARB

        #region GL_BOOL_VEC4_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_BOOL_VEC4_ARB 0x8B59
        public const int GL_BOOL_VEC4_ARB = 0x8B59;
        #endregion GL_BOOL_VEC4_ARB

        #region GL_FLOAT_MAT2_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_FLOAT_MAT2_ARB 0x8B5A
        public const int GL_FLOAT_MAT2_ARB = 0x8B5A;
        #endregion GL_FLOAT_MAT2_ARB

        #region GL_FLOAT_MAT3_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_FLOAT_MAT3_ARB 0x8B5B
        public const int GL_FLOAT_MAT3_ARB = 0x8B5B;
        #endregion GL_FLOAT_MAT3_ARB

        #region GL_FLOAT_MAT4_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_FLOAT_MAT4_ARB 0x8B5C
        public const int GL_FLOAT_MAT4_ARB = 0x8B5C;
        #endregion GL_FLOAT_MAT4_ARB
        #endregion GL_ARB_shader_objects Constants

        #region GL_ARB_shader_objects Methods
        #region void glDeleteObjectARB([In] IntPtr extensionPointer, IntPtr obj)
        // GLvoid glDeleteObjectARB(GLhandleARB obj)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg obj\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg obj\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int)\r\nret")]
        #endif
        public static void glDeleteObjectARB([In] IntPtr extensionPointer, IntPtr obj) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glDeleteObjectARB([In] IntPtr extensionPointer, IntPtr obj)

        #region IntPtr glGetHandleARB([In] IntPtr extensionPointer, int pname)
        // GLhandleARB glGetHandleARB(GLenum pname)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg pname\r\nldarg extensionPointer\r\ncalli unmanaged stdcall native int([in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg pname\r\nldarg extensionPointer\r\ncalli unmanaged cdecl native int([in]int32)\r\nret")]
        #endif
        public static IntPtr glGetHandleARB([In] IntPtr extensionPointer, int pname) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion IntPtr glGetHandleARB([In] IntPtr extensionPointer, int pname)

        #region void glDetachObjectARB([In] IntPtr extensionPointer, IntPtr containerObj, IntPtr attachedObj)
        // GLvoid glDetachObjectARB(GLhandleARB containerObj, GLhandleARB attachedObj)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg containerObj\r\nldarg attachedObj\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg containerObj\r\nldarg attachedObj\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]native int)\r\nret")]
        #endif
        public static void glDetachObjectARB([In] IntPtr extensionPointer, IntPtr containerObj, IntPtr attachedObj) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glDetachObjectARB([In] IntPtr extensionPointer, IntPtr containerObj, IntPtr attachedObj)

        #region IntPtr glCreateShaderObjectARB([In] IntPtr extensionPointer, int shaderType)
        // GLhandleARB glCreateShaderObjectARB(GLenum shaderType)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg shaderType\r\nldarg extensionPointer\r\ncalli unmanaged stdcall native int([in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg shaderType\r\nldarg extensionPointer\r\ncalli unmanaged cdecl native int([in]int32)\r\nret")]
        #endif
        public static IntPtr glCreateShaderObjectARB([In] IntPtr extensionPointer, int shaderType) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion IntPtr glCreateShaderObjectARB([In] IntPtr extensionPointer, int shaderType)

        #region Overloads for GLvoid glShaderSourceARB(GLhandleARB shaderObj, GLsizei count, const GLcharARB* programString, const GLint* length)
        #region void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, short[] programString, ref int length)
        // GLvoid glShaderSourceARB(GLhandleARB shaderObj, GLsizei count, const GLcharARB* programString, const GLint* length)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg shaderObj\r\nldarg count\r\nldarg programString\r\nldarg length\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]int32,[in]int16[],[in][out]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg shaderObj\r\nldarg count\r\nldarg programString\r\nldarg length\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]int32,[in]int16[],[in][out]int32)\r\nret")]
        #endif
        public static void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, short[] programString, ref int length) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, short[] programString, ref int length)

        #region void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, float[] programString, IntPtr length)
        // GLvoid glShaderSourceARB(GLhandleARB shaderObj, GLsizei count, const GLcharARB* programString, const GLint* length)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg shaderObj\r\nldarg count\r\nldarg programString\r\nldarg length\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]int32,[in]float32[],[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg shaderObj\r\nldarg count\r\nldarg programString\r\nldarg length\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]int32,[in]float32[],[in]native int)\r\nret")]
        #endif
        public static void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, float[] programString, IntPtr length) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, float[] programString, IntPtr length)

        #region void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, short[] programString, int[] length)
        // GLvoid glShaderSourceARB(GLhandleARB shaderObj, GLsizei count, const GLcharARB* programString, const GLint* length)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg shaderObj\r\nldarg count\r\nldarg programString\r\nldarg length\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]int32,[in]int16[],[in]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg shaderObj\r\nldarg count\r\nldarg programString\r\nldarg length\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]int32,[in]int16[],[in]int32[])\r\nret")]
        #endif
        public static void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, short[] programString, int[] length) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, short[] programString, int[] length)

        #region void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, float[] programString, int[] length)
        // GLvoid glShaderSourceARB(GLhandleARB shaderObj, GLsizei count, const GLcharARB* programString, const GLint* length)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg shaderObj\r\nldarg count\r\nldarg programString\r\nldarg length\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]int32,[in]float32[],[in]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg shaderObj\r\nldarg count\r\nldarg programString\r\nldarg length\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]int32,[in]float32[],[in]int32[])\r\nret")]
        #endif
        public static void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, float[] programString, int[] length) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, float[] programString, int[] length)

        #region void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, short[] programString, IntPtr length)
        // GLvoid glShaderSourceARB(GLhandleARB shaderObj, GLsizei count, const GLcharARB* programString, const GLint* length)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg shaderObj\r\nldarg count\r\nldarg programString\r\nldarg length\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]int32,[in]int16[],[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg shaderObj\r\nldarg count\r\nldarg programString\r\nldarg length\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]int32,[in]int16[],[in]native int)\r\nret")]
        #endif
        public static void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, short[] programString, IntPtr length) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, short[] programString, IntPtr length)

        #region void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, int[] programString, ref int length)
        // GLvoid glShaderSourceARB(GLhandleARB shaderObj, GLsizei count, const GLcharARB* programString, const GLint* length)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg shaderObj\r\nldarg count\r\nldarg programString\r\nldarg length\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]int32,[in]int32[],[in][out]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg shaderObj\r\nldarg count\r\nldarg programString\r\nldarg length\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]int32,[in]int32[],[in][out]int32)\r\nret")]
        #endif
        public static void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, int[] programString, ref int length) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, int[] programString, ref int length)

        #region void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, double[] programString, ref int length)
        // GLvoid glShaderSourceARB(GLhandleARB shaderObj, GLsizei count, const GLcharARB* programString, const GLint* length)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg shaderObj\r\nldarg count\r\nldarg programString\r\nldarg length\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]int32,[in]float64[],[in][out]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg shaderObj\r\nldarg count\r\nldarg programString\r\nldarg length\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]int32,[in]float64[],[in][out]int32)\r\nret")]
        #endif
        public static void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, double[] programString, ref int length) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, double[] programString, ref int length)

        #region void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, int[] programString, int[] length)
        // GLvoid glShaderSourceARB(GLhandleARB shaderObj, GLsizei count, const GLcharARB* programString, const GLint* length)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg shaderObj\r\nldarg count\r\nldarg programString\r\nldarg length\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]int32,[in]int32[],[in]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg shaderObj\r\nldarg count\r\nldarg programString\r\nldarg length\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]int32,[in]int32[],[in]int32[])\r\nret")]
        #endif
        public static void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, int[] programString, int[] length) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, int[] programString, int[] length)

        #region void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, double[] programString, int[] length)
        // GLvoid glShaderSourceARB(GLhandleARB shaderObj, GLsizei count, const GLcharARB* programString, const GLint* length)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg shaderObj\r\nldarg count\r\nldarg programString\r\nldarg length\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]int32,[in]float64[],[in]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg shaderObj\r\nldarg count\r\nldarg programString\r\nldarg length\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]int32,[in]float64[],[in]int32[])\r\nret")]
        #endif
        public static void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, double[] programString, int[] length) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, double[] programString, int[] length)

        #region void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, int[] programString, IntPtr length)
        // GLvoid glShaderSourceARB(GLhandleARB shaderObj, GLsizei count, const GLcharARB* programString, const GLint* length)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg shaderObj\r\nldarg count\r\nldarg programString\r\nldarg length\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]int32,[in]int32[],[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg shaderObj\r\nldarg count\r\nldarg programString\r\nldarg length\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]int32,[in]int32[],[in]native int)\r\nret")]
        #endif
        public static void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, int[] programString, IntPtr length) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, int[] programString, IntPtr length)

        #region void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, IntPtr programString, int[] length)
        // GLvoid glShaderSourceARB(GLhandleARB shaderObj, GLsizei count, const GLcharARB* programString, const GLint* length)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg shaderObj\r\nldarg count\r\nldarg programString\r\nldarg length\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]int32,[in]native int,[in]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg shaderObj\r\nldarg count\r\nldarg programString\r\nldarg length\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]int32,[in]native int,[in]int32[])\r\nret")]
        #endif
        public static void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, IntPtr programString, int[] length) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, IntPtr programString, int[] length)

        #region void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, IntPtr programString, IntPtr length)
        // GLvoid glShaderSourceARB(GLhandleARB shaderObj, GLsizei count, const GLcharARB* programString, const GLint* length)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg shaderObj\r\nldarg count\r\nldarg programString\r\nldarg length\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]int32,[in]native int,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg shaderObj\r\nldarg count\r\nldarg programString\r\nldarg length\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]int32,[in]native int,[in]native int)\r\nret")]
        #endif
        public static void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, IntPtr programString, IntPtr length) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, IntPtr programString, IntPtr length)

        #region void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, IntPtr programString, ref int length)
        // GLvoid glShaderSourceARB(GLhandleARB shaderObj, GLsizei count, const GLcharARB* programString, const GLint* length)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg shaderObj\r\nldarg count\r\nldarg programString\r\nldarg length\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]int32,[in]native int,[in][out]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg shaderObj\r\nldarg count\r\nldarg programString\r\nldarg length\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]int32,[in]native int,[in][out]int32)\r\nret")]
        #endif
        public static void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, IntPtr programString, ref int length) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, IntPtr programString, ref int length)

        #region void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, double[] programString, IntPtr length)
        // GLvoid glShaderSourceARB(GLhandleARB shaderObj, GLsizei count, const GLcharARB* programString, const GLint* length)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg shaderObj\r\nldarg count\r\nldarg programString\r\nldarg length\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]int32,[in]float64[],[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg shaderObj\r\nldarg count\r\nldarg programString\r\nldarg length\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]int32,[in]float64[],[in]native int)\r\nret")]
        #endif
        public static void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, double[] programString, IntPtr length) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, double[] programString, IntPtr length)

        #region void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, byte[] programString, IntPtr length)
        // GLvoid glShaderSourceARB(GLhandleARB shaderObj, GLsizei count, const GLcharARB* programString, const GLint* length)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg shaderObj\r\nldarg count\r\nldarg programString\r\nldarg length\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]int32,[in]unsigned int8[],[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg shaderObj\r\nldarg count\r\nldarg programString\r\nldarg length\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]int32,[in]unsigned int8[],[in]native int)\r\nret")]
        #endif
        public static void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, byte[] programString, IntPtr length) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, byte[] programString, IntPtr length)

        #region void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, byte[] programString, int[] length)
        // GLvoid glShaderSourceARB(GLhandleARB shaderObj, GLsizei count, const GLcharARB* programString, const GLint* length)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg shaderObj\r\nldarg count\r\nldarg programString\r\nldarg length\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]int32,[in]unsigned int8[],[in]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg shaderObj\r\nldarg count\r\nldarg programString\r\nldarg length\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]int32,[in]unsigned int8[],[in]int32[])\r\nret")]
        #endif
        public static void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, byte[] programString, int[] length) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, byte[] programString, int[] length)

        #region void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, float[] programString, ref int length)
        // GLvoid glShaderSourceARB(GLhandleARB shaderObj, GLsizei count, const GLcharARB* programString, const GLint* length)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg shaderObj\r\nldarg count\r\nldarg programString\r\nldarg length\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]int32,[in]float32[],[in][out]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg shaderObj\r\nldarg count\r\nldarg programString\r\nldarg length\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]int32,[in]float32[],[in][out]int32)\r\nret")]
        #endif
        public static void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, float[] programString, ref int length) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, float[] programString, ref int length)

        #region void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, byte[] programString, ref int length)
        // GLvoid glShaderSourceARB(GLhandleARB shaderObj, GLsizei count, const GLcharARB* programString, const GLint* length)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg shaderObj\r\nldarg count\r\nldarg programString\r\nldarg length\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]int32,[in]unsigned int8[],[in][out]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg shaderObj\r\nldarg count\r\nldarg programString\r\nldarg length\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]int32,[in]unsigned int8[],[in][out]int32)\r\nret")]
        #endif
        public static void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, byte[] programString, ref int length) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, byte[] programString, ref int length)

        #region void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, uint[] programString, ref int length)
        // GLvoid glShaderSourceARB(GLhandleARB shaderObj, GLsizei count, const GLcharARB* programString, const GLint* length)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg shaderObj\r\nldarg count\r\nldarg programString\r\nldarg length\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]int32,[in]unsigned int32[],[in][out]int32)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg shaderObj\r\nldarg count\r\nldarg programString\r\nldarg length\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]int32,[in]unsigned int32[],[in][out]int32)\r\nret")]
        #endif
        public static void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, uint[] programString, ref int length) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, uint[] programString, ref int length)

        #region void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, uint[] programString, int[] length)
        // GLvoid glShaderSourceARB(GLhandleARB shaderObj, GLsizei count, const GLcharARB* programString, const GLint* length)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg shaderObj\r\nldarg count\r\nldarg programString\r\nldarg length\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]int32,[in]unsigned int32[],[in]int32[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg shaderObj\r\nldarg count\r\nldarg programString\r\nldarg length\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]int32,[in]unsigned int32[],[in]int32[])\r\nret")]
        #endif
        public static void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, uint[] programString, int[] length) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, uint[] programString, int[] length)

        #region void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, uint[] programString, IntPtr length)
        // GLvoid glShaderSourceARB(GLhandleARB shaderObj, GLsizei count, const GLcharARB* programString, const GLint* length)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg shaderObj\r\nldarg count\r\nldarg programString\r\nldarg length\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]int32,[in]unsigned int32[],[in]native int)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg shaderObj\r\nldarg count\r\nldarg programString\r\nldarg length\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]int32,[in]unsigned int32[],[in]native int)\r\nret")]
        #endif
        public static void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, uint[] programString, IntPtr length) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, uint[] programString, IntPtr length)

        #region void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, sbyte[] programString, IntPtr length)
        // GLvoid glShaderSourceARB(GLhandleARB shaderObj, GLsizei count, const GLcharARB* programString, const GLint* length)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg shaderObj\r\nldarg count\r\nldarg programString\r\nldarg length\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]int32,[in]int8[],[in]native int)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg shaderObj\r\nldarg count\r\nldarg programString\r\nldarg length\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]int32,[in]int8[],[in]native int)\r\nret")]
        #endif
        public static void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, sbyte[] programString, IntPtr length) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, sbyte[] programString, IntPtr length)

        #region void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, sbyte[] programString, int[] length)
        // GLvoid glShaderSourceARB(GLhandleARB shaderObj, GLsizei count, const GLcharARB* programString, const GLint* length)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg shaderObj\r\nldarg count\r\nldarg programString\r\nldarg length\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]int32,[in]int8[],[in]int32[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg shaderObj\r\nldarg count\r\nldarg programString\r\nldarg length\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]int32,[in]int8[],[in]int32[])\r\nret")]
        #endif
        public static void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, sbyte[] programString, int[] length) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, sbyte[] programString, int[] length)

        #region void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, sbyte[] programString, ref int length)
        // GLvoid glShaderSourceARB(GLhandleARB shaderObj, GLsizei count, const GLcharARB* programString, const GLint* length)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg shaderObj\r\nldarg count\r\nldarg programString\r\nldarg length\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]int32,[in]int8[],[in][out]int32)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg shaderObj\r\nldarg count\r\nldarg programString\r\nldarg length\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]int32,[in]int8[],[in][out]int32)\r\nret")]
        #endif
        public static void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, sbyte[] programString, ref int length) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, sbyte[] programString, ref int length)

        #region void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, ushort[] programString, ref int length)
        // GLvoid glShaderSourceARB(GLhandleARB shaderObj, GLsizei count, const GLcharARB* programString, const GLint* length)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg shaderObj\r\nldarg count\r\nldarg programString\r\nldarg length\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]int32,[in]unsigned int16[],[in][out]int32)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg shaderObj\r\nldarg count\r\nldarg programString\r\nldarg length\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]int32,[in]unsigned int16[],[in][out]int32)\r\nret")]
        #endif
        public static void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, ushort[] programString, ref int length) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, ushort[] programString, ref int length)

        #region void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, ushort[] programString, int[] length)
        // GLvoid glShaderSourceARB(GLhandleARB shaderObj, GLsizei count, const GLcharARB* programString, const GLint* length)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg shaderObj\r\nldarg count\r\nldarg programString\r\nldarg length\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]int32,[in]unsigned int16[],[in]int32[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg shaderObj\r\nldarg count\r\nldarg programString\r\nldarg length\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]int32,[in]unsigned int16[],[in]int32[])\r\nret")]
        #endif
        public static void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, ushort[] programString, int[] length) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, ushort[] programString, int[] length)

        #region void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, ushort[] programString, IntPtr length)
        // GLvoid glShaderSourceARB(GLhandleARB shaderObj, GLsizei count, const GLcharARB* programString, const GLint* length)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg shaderObj\r\nldarg count\r\nldarg programString\r\nldarg length\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]int32,[in]unsigned int16[],[in]native int)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg shaderObj\r\nldarg count\r\nldarg programString\r\nldarg length\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]int32,[in]unsigned int16[],[in]native int)\r\nret")]
        #endif
        public static void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, ushort[] programString, IntPtr length) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, ushort[] programString, IntPtr length)

        #region void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, void* programString, ref int length)
        // GLvoid glShaderSourceARB(GLhandleARB shaderObj, GLsizei count, const GLcharARB* programString, const GLint* length)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg shaderObj\r\nldarg count\r\nldarg programString\r\nldarg length\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]int32,[in]void*,[in][out]int32)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg shaderObj\r\nldarg count\r\nldarg programString\r\nldarg length\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]int32,[in]void*,[in][out]int32)\r\nret")]
        #endif
        public static unsafe void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, void* programString, ref int length) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, void* programString, ref int length)

        #region void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, void* programString, int* length)
        // GLvoid glShaderSourceARB(GLhandleARB shaderObj, GLsizei count, const GLcharARB* programString, const GLint* length)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg shaderObj\r\nldarg count\r\nldarg programString\r\nldarg length\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]int32,[in]void*,[in]int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg shaderObj\r\nldarg count\r\nldarg programString\r\nldarg length\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]int32,[in]void*,[in]int32*)\r\nret")]
        #endif
        public static unsafe void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, void* programString, int* length) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, void* programString, int* length)

        #region void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, void* programString, int[] length)
        // GLvoid glShaderSourceARB(GLhandleARB shaderObj, GLsizei count, const GLcharARB* programString, const GLint* length)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg shaderObj\r\nldarg count\r\nldarg programString\r\nldarg length\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]int32,[in]void*,[in]int32[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg shaderObj\r\nldarg count\r\nldarg programString\r\nldarg length\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]int32,[in]void*,[in]int32[])\r\nret")]
        #endif
        public static unsafe void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, void* programString, int[] length) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, void* programString, int[] length)

        #region void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, double[] programString, int* length)
        // GLvoid glShaderSourceARB(GLhandleARB shaderObj, GLsizei count, const GLcharARB* programString, const GLint* length)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg shaderObj\r\nldarg count\r\nldarg programString\r\nldarg length\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]int32,[in]float64[],[in]int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg shaderObj\r\nldarg count\r\nldarg programString\r\nldarg length\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]int32,[in]float64[],[in]int32*)\r\nret")]
        #endif
        public static unsafe void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, double[] programString, int* length) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, double[] programString, int* length)

        #region void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, void* programString, IntPtr length)
        // GLvoid glShaderSourceARB(GLhandleARB shaderObj, GLsizei count, const GLcharARB* programString, const GLint* length)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg shaderObj\r\nldarg count\r\nldarg programString\r\nldarg length\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]int32,[in]void*,[in]native int)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg shaderObj\r\nldarg count\r\nldarg programString\r\nldarg length\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]int32,[in]void*,[in]native int)\r\nret")]
        #endif
        public static unsafe void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, void* programString, IntPtr length) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, void* programString, IntPtr length)

        #region void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, sbyte[] programString, int* length)
        // GLvoid glShaderSourceARB(GLhandleARB shaderObj, GLsizei count, const GLcharARB* programString, const GLint* length)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg shaderObj\r\nldarg count\r\nldarg programString\r\nldarg length\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]int32,[in]int8[],[in]int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg shaderObj\r\nldarg count\r\nldarg programString\r\nldarg length\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]int32,[in]int8[],[in]int32*)\r\nret")]
        #endif
        public static unsafe void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, sbyte[] programString, int* length) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, sbyte[] programString, int* length)

        #region void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, short[] programString, int* length)
        // GLvoid glShaderSourceARB(GLhandleARB shaderObj, GLsizei count, const GLcharARB* programString, const GLint* length)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg shaderObj\r\nldarg count\r\nldarg programString\r\nldarg length\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]int32,[in]int16[],[in]int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg shaderObj\r\nldarg count\r\nldarg programString\r\nldarg length\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]int32,[in]int16[],[in]int32*)\r\nret")]
        #endif
        public static unsafe void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, short[] programString, int* length) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, short[] programString, int* length)

        #region void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, IntPtr programString, int* length)
        // GLvoid glShaderSourceARB(GLhandleARB shaderObj, GLsizei count, const GLcharARB* programString, const GLint* length)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg shaderObj\r\nldarg count\r\nldarg programString\r\nldarg length\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]int32,[in]native int,[in]int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg shaderObj\r\nldarg count\r\nldarg programString\r\nldarg length\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]int32,[in]native int,[in]int32*)\r\nret")]
        #endif
        public static unsafe void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, IntPtr programString, int* length) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, IntPtr programString, int* length)

        #region void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, byte[] programString, int* length)
        // GLvoid glShaderSourceARB(GLhandleARB shaderObj, GLsizei count, const GLcharARB* programString, const GLint* length)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg shaderObj\r\nldarg count\r\nldarg programString\r\nldarg length\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]int32,[in]unsigned int8[],[in]int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg shaderObj\r\nldarg count\r\nldarg programString\r\nldarg length\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]int32,[in]unsigned int8[],[in]int32*)\r\nret")]
        #endif
        public static unsafe void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, byte[] programString, int* length) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, byte[] programString, int* length)

        #region void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, uint[] programString, int* length)
        // GLvoid glShaderSourceARB(GLhandleARB shaderObj, GLsizei count, const GLcharARB* programString, const GLint* length)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg shaderObj\r\nldarg count\r\nldarg programString\r\nldarg length\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]int32,[in]unsigned int32[],[in]int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg shaderObj\r\nldarg count\r\nldarg programString\r\nldarg length\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]int32,[in]unsigned int32[],[in]int32*)\r\nret")]
        #endif
        public static unsafe void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, uint[] programString, int* length) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, uint[] programString, int* length)

        #region void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, float[] programString, int* length)
        // GLvoid glShaderSourceARB(GLhandleARB shaderObj, GLsizei count, const GLcharARB* programString, const GLint* length)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg shaderObj\r\nldarg count\r\nldarg programString\r\nldarg length\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]int32,[in]float32[],[in]int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg shaderObj\r\nldarg count\r\nldarg programString\r\nldarg length\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]int32,[in]float32[],[in]int32*)\r\nret")]
        #endif
        public static unsafe void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, float[] programString, int* length) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, float[] programString, int* length)

        #region void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, ushort[] programString, int* length)
        // GLvoid glShaderSourceARB(GLhandleARB shaderObj, GLsizei count, const GLcharARB* programString, const GLint* length)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg shaderObj\r\nldarg count\r\nldarg programString\r\nldarg length\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]int32,[in]unsigned int16[],[in]int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg shaderObj\r\nldarg count\r\nldarg programString\r\nldarg length\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]int32,[in]unsigned int16[],[in]int32*)\r\nret")]
        #endif
        public static unsafe void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, ushort[] programString, int* length) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, ushort[] programString, int* length)

        #region void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, int[] programString, int* length)
        // GLvoid glShaderSourceARB(GLhandleARB shaderObj, GLsizei count, const GLcharARB* programString, const GLint* length)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg shaderObj\r\nldarg count\r\nldarg programString\r\nldarg length\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]int32,[in]int32[],[in]int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg shaderObj\r\nldarg count\r\nldarg programString\r\nldarg length\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]int32,[in]int32[],[in]int32*)\r\nret")]
        #endif
        public static unsafe void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, int[] programString, int* length) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glShaderSourceARB([In] IntPtr extensionPointer, IntPtr shaderObj, int count, int[] programString, int* length)
        #endregion Overloads for GLvoid glShaderSourceARB(GLhandleARB shaderObj, GLsizei count, const GLcharARB* programString, const GLint* length)

        #region void glCompileShaderARB([In] IntPtr extensionPointer, IntPtr shaderObj)
        // GLvoid glCompileShaderARB(GLhandleARB shaderObj)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg shaderObj\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg shaderObj\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int)\r\nret")]
        #endif
        public static void glCompileShaderARB([In] IntPtr extensionPointer, IntPtr shaderObj) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glCompileShaderARB([In] IntPtr extensionPointer, IntPtr shaderObj)

        #region IntPtr glCreateProgramObjectARB([In] IntPtr extensionPointer)
        // GLhandleARB glCreateProgramObjectARB()
        #if WIN32
        [IlasmAttribute(".maxstack 1\r\nldarg extensionPointer\r\ncalli unmanaged stdcall native int()\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 1\r\nldarg extensionPointer\r\ncalli unmanaged cdecl native int()\r\nret")]
        #endif
        public static IntPtr glCreateProgramObjectARB([In] IntPtr extensionPointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion IntPtr glCreateProgramObjectARB([In] IntPtr extensionPointer)

        #region void glAttachObjectARB([In] IntPtr extensionPointer, IntPtr containerObj, IntPtr obj)
        // GLvoid glAttachObjectARB(GLhandleARB containerObj, GLhandleARB obj)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg containerObj\r\nldarg obj\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg containerObj\r\nldarg obj\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]native int)\r\nret")]
        #endif
        public static void glAttachObjectARB([In] IntPtr extensionPointer, IntPtr containerObj, IntPtr obj) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glAttachObjectARB([In] IntPtr extensionPointer, IntPtr containerObj, IntPtr obj)

        #region void glLinkProgramARB([In] IntPtr extensionPointer, IntPtr programObj)
        // GLvoid glLinkProgramARB(GLhandleARB programObj)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg programObj\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg programObj\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int)\r\nret")]
        #endif
        public static void glLinkProgramARB([In] IntPtr extensionPointer, IntPtr programObj) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glLinkProgramARB([In] IntPtr extensionPointer, IntPtr programObj)

        #region void glUseProgramObjectARB([In] IntPtr extensionPointer, IntPtr programObj)
        // GLvoid glUseProgramObjectARB(GLhandleARB programObj)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg programObj\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg programObj\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int)\r\nret")]
        #endif
        public static void glUseProgramObjectARB([In] IntPtr extensionPointer, IntPtr programObj) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glUseProgramObjectARB([In] IntPtr extensionPointer, IntPtr programObj)

        #region void glValidateProgramARB([In] IntPtr extensionPointer, IntPtr programObj)
        // GLvoid glValidateProgramARB(GLhandleARB programObj)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg programObj\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg programObj\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int)\r\nret")]
        #endif
        public static void glValidateProgramARB([In] IntPtr extensionPointer, IntPtr programObj) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glValidateProgramARB([In] IntPtr extensionPointer, IntPtr programObj)

        #region void glUniform1fARB([In] IntPtr extensionPointer, int location, float v0)
        // GLvoid glUniform1fARB(GLint location, GLfloat v0)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg location\r\nldarg v0\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg location\r\nldarg v0\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float32)\r\nret")]
        #endif
        public static void glUniform1fARB([In] IntPtr extensionPointer, int location, float v0) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glUniform1fARB([In] IntPtr extensionPointer, int location, float v0)

        #region void glUniform2fARB([In] IntPtr extensionPointer, int location, float v0, float v1)
        // GLvoid glUniform2fARB(GLint location, GLfloat v0, GLfloat v1)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg location\r\nldarg v0\r\nldarg v1\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float32,[in]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg location\r\nldarg v0\r\nldarg v1\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float32,[in]float32)\r\nret")]
        #endif
        public static void glUniform2fARB([In] IntPtr extensionPointer, int location, float v0, float v1) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glUniform2fARB([In] IntPtr extensionPointer, int location, float v0, float v1)

        #region void glUniform3fARB([In] IntPtr extensionPointer, int location, float v0, float v1, float v2)
        // GLvoid glUniform3fARB(GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg location\r\nldarg v0\r\nldarg v1\r\nldarg v2\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float32,[in]float32,[in]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg location\r\nldarg v0\r\nldarg v1\r\nldarg v2\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float32,[in]float32,[in]float32)\r\nret")]
        #endif
        public static void glUniform3fARB([In] IntPtr extensionPointer, int location, float v0, float v1, float v2) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glUniform3fARB([In] IntPtr extensionPointer, int location, float v0, float v1, float v2)

        #region void glUniform4fARB([In] IntPtr extensionPointer, int location, float v0, float v1, float v2, float v3)
        // GLvoid glUniform4fARB(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg location\r\nldarg v0\r\nldarg v1\r\nldarg v2\r\nldarg v3\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float32,[in]float32,[in]float32,[in]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg location\r\nldarg v0\r\nldarg v1\r\nldarg v2\r\nldarg v3\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float32,[in]float32,[in]float32,[in]float32)\r\nret")]
        #endif
        public static void glUniform4fARB([In] IntPtr extensionPointer, int location, float v0, float v1, float v2, float v3) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glUniform4fARB([In] IntPtr extensionPointer, int location, float v0, float v1, float v2, float v3)

        #region void glUniform1iARB([In] IntPtr extensionPointer, int location, int v0)
        // GLvoid glUniform1iARB(GLint location, GLint v0)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg location\r\nldarg v0\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg location\r\nldarg v0\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32)\r\nret")]
        #endif
        public static void glUniform1iARB([In] IntPtr extensionPointer, int location, int v0) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glUniform1iARB([In] IntPtr extensionPointer, int location, int v0)

        #region void glUniform2iARB([In] IntPtr extensionPointer, int location, int v0, int v1)
        // GLvoid glUniform2iARB(GLint location, GLint v0, GLint v1)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg location\r\nldarg v0\r\nldarg v1\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg location\r\nldarg v0\r\nldarg v1\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32)\r\nret")]
        #endif
        public static void glUniform2iARB([In] IntPtr extensionPointer, int location, int v0, int v1) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glUniform2iARB([In] IntPtr extensionPointer, int location, int v0, int v1)

        #region void glUniform3iARB([In] IntPtr extensionPointer, int location, int v0, int v1, int v2)
        // GLvoid glUniform3iARB(GLint location, GLint v0, GLint v1, GLint v2)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg location\r\nldarg v0\r\nldarg v1\r\nldarg v2\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg location\r\nldarg v0\r\nldarg v1\r\nldarg v2\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32)\r\nret")]
        #endif
        public static void glUniform3iARB([In] IntPtr extensionPointer, int location, int v0, int v1, int v2) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glUniform3iARB([In] IntPtr extensionPointer, int location, int v0, int v1, int v2)

        #region void glUniform4iARB([In] IntPtr extensionPointer, int location, int v0, int v1, int v2, int v3)
        // GLvoid glUniform4iARB(GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg location\r\nldarg v0\r\nldarg v1\r\nldarg v2\r\nldarg v3\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg location\r\nldarg v0\r\nldarg v1\r\nldarg v2\r\nldarg v3\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32)\r\nret")]
        #endif
        public static void glUniform4iARB([In] IntPtr extensionPointer, int location, int v0, int v1, int v2, int v3) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glUniform4iARB([In] IntPtr extensionPointer, int location, int v0, int v1, int v2, int v3)

        #region Overloads for GLvoid glUniform1fvARB(GLint location, GLsizei count, GLfloat* parameterValue)
        #region void glUniform1fvARB([In] IntPtr extensionPointer, int location, int count, ref float parameterValue)
        // GLvoid glUniform1fvARB(GLint location, GLsizei count, GLfloat* parameterValue)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg location\r\nldarg count\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in][out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg location\r\nldarg count\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in][out]float32)\r\nret")]
        #endif
        public static void glUniform1fvARB([In] IntPtr extensionPointer, int location, int count, ref float parameterValue) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glUniform1fvARB([In] IntPtr extensionPointer, int location, int count, ref float parameterValue)

        #region void glUniform1fvARB([In] IntPtr extensionPointer, int location, int count, float[] parameterValue)
        // GLvoid glUniform1fvARB(GLint location, GLsizei count, GLfloat* parameterValue)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg location\r\nldarg count\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg location\r\nldarg count\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]float32[])\r\nret")]
        #endif
        public static void glUniform1fvARB([In] IntPtr extensionPointer, int location, int count, float[] parameterValue) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glUniform1fvARB([In] IntPtr extensionPointer, int location, int count, float[] parameterValue)

        #region void glUniform1fvARB([In] IntPtr extensionPointer, int location, int count, IntPtr parameterValue)
        // GLvoid glUniform1fvARB(GLint location, GLsizei count, GLfloat* parameterValue)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg location\r\nldarg count\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg location\r\nldarg count\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]native int)\r\nret")]
        #endif
        public static void glUniform1fvARB([In] IntPtr extensionPointer, int location, int count, IntPtr parameterValue) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glUniform1fvARB([In] IntPtr extensionPointer, int location, int count, IntPtr parameterValue)

        #region void glUniform1fvARB([In] IntPtr extensionPointer, int location, int count, float* parameterValue)
        // GLvoid glUniform1fvARB(GLint location, GLsizei count, GLfloat* parameterValue)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg location\r\nldarg count\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg location\r\nldarg count\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]float32*)\r\nret")]
        #endif
        public static unsafe void glUniform1fvARB([In] IntPtr extensionPointer, int location, int count, float* parameterValue) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glUniform1fvARB([In] IntPtr extensionPointer, int location, int count, float* parameterValue)
        #endregion Overloads for GLvoid glUniform1fvARB(GLint location, GLsizei count, GLfloat* parameterValue)

        #region Overloads for GLvoid glUniform2fvARB(GLint location, GLsizei count, GLfloat* parameterValue)
        #region void glUniform2fvARB([In] IntPtr extensionPointer, int location, int count, ref float parameterValue)
        // GLvoid glUniform2fvARB(GLint location, GLsizei count, GLfloat* parameterValue)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg location\r\nldarg count\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in][out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg location\r\nldarg count\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in][out]float32)\r\nret")]
        #endif
        public static void glUniform2fvARB([In] IntPtr extensionPointer, int location, int count, ref float parameterValue) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glUniform2fvARB([In] IntPtr extensionPointer, int location, int count, ref float parameterValue)

        #region void glUniform2fvARB([In] IntPtr extensionPointer, int location, int count, float[] parameterValue)
        // GLvoid glUniform2fvARB(GLint location, GLsizei count, GLfloat* parameterValue)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg location\r\nldarg count\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg location\r\nldarg count\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]float32[])\r\nret")]
        #endif
        public static void glUniform2fvARB([In] IntPtr extensionPointer, int location, int count, float[] parameterValue) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glUniform2fvARB([In] IntPtr extensionPointer, int location, int count, float[] parameterValue)

        #region void glUniform2fvARB([In] IntPtr extensionPointer, int location, int count, IntPtr parameterValue)
        // GLvoid glUniform2fvARB(GLint location, GLsizei count, GLfloat* parameterValue)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg location\r\nldarg count\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg location\r\nldarg count\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]native int)\r\nret")]
        #endif
        public static void glUniform2fvARB([In] IntPtr extensionPointer, int location, int count, IntPtr parameterValue) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glUniform2fvARB([In] IntPtr extensionPointer, int location, int count, IntPtr parameterValue)

        #region void glUniform2fvARB([In] IntPtr extensionPointer, int location, int count, float* parameterValue)
        // GLvoid glUniform2fvARB(GLint location, GLsizei count, GLfloat* parameterValue)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg location\r\nldarg count\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg location\r\nldarg count\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]float32*)\r\nret")]
        #endif
        public static unsafe void glUniform2fvARB([In] IntPtr extensionPointer, int location, int count, float* parameterValue) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glUniform2fvARB([In] IntPtr extensionPointer, int location, int count, float* parameterValue)
        #endregion Overloads for GLvoid glUniform2fvARB(GLint location, GLsizei count, GLfloat* parameterValue)

        #region Overloads for GLvoid glUniform3fvARB(GLint location, GLsizei count, GLfloat* parameterValue)
        #region void glUniform3fvARB([In] IntPtr extensionPointer, int location, int count, ref float parameterValue)
        // GLvoid glUniform3fvARB(GLint location, GLsizei count, GLfloat* parameterValue)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg location\r\nldarg count\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in][out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg location\r\nldarg count\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in][out]float32)\r\nret")]
        #endif
        public static void glUniform3fvARB([In] IntPtr extensionPointer, int location, int count, ref float parameterValue) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glUniform3fvARB([In] IntPtr extensionPointer, int location, int count, ref float parameterValue)

        #region void glUniform3fvARB([In] IntPtr extensionPointer, int location, int count, float[] parameterValue)
        // GLvoid glUniform3fvARB(GLint location, GLsizei count, GLfloat* parameterValue)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg location\r\nldarg count\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg location\r\nldarg count\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]float32[])\r\nret")]
        #endif
        public static void glUniform3fvARB([In] IntPtr extensionPointer, int location, int count, float[] parameterValue) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glUniform3fvARB([In] IntPtr extensionPointer, int location, int count, float[] parameterValue)

        #region void glUniform3fvARB([In] IntPtr extensionPointer, int location, int count, IntPtr parameterValue)
        // GLvoid glUniform3fvARB(GLint location, GLsizei count, GLfloat* parameterValue)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg location\r\nldarg count\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg location\r\nldarg count\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]native int)\r\nret")]
        #endif
        public static void glUniform3fvARB([In] IntPtr extensionPointer, int location, int count, IntPtr parameterValue) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glUniform3fvARB([In] IntPtr extensionPointer, int location, int count, IntPtr parameterValue)

        #region void glUniform3fvARB([In] IntPtr extensionPointer, int location, int count, float* parameterValue)
        // GLvoid glUniform3fvARB(GLint location, GLsizei count, GLfloat* parameterValue)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg location\r\nldarg count\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg location\r\nldarg count\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]float32*)\r\nret")]
        #endif
        public static unsafe void glUniform3fvARB([In] IntPtr extensionPointer, int location, int count, float* parameterValue) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glUniform3fvARB([In] IntPtr extensionPointer, int location, int count, float* parameterValue)
        #endregion Overloads for GLvoid glUniform3fvARB(GLint location, GLsizei count, GLfloat* parameterValue)

        #region Overloads for GLvoid glUniform4fvARB(GLint location, GLsizei count, GLfloat* parameterValue)
        #region void glUniform4fvARB([In] IntPtr extensionPointer, int location, int count, ref float parameterValue)
        // GLvoid glUniform4fvARB(GLint location, GLsizei count, GLfloat* parameterValue)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg location\r\nldarg count\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in][out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg location\r\nldarg count\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in][out]float32)\r\nret")]
        #endif
        public static void glUniform4fvARB([In] IntPtr extensionPointer, int location, int count, ref float parameterValue) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glUniform4fvARB([In] IntPtr extensionPointer, int location, int count, ref float parameterValue)

        #region void glUniform4fvARB([In] IntPtr extensionPointer, int location, int count, float[] parameterValue)
        // GLvoid glUniform4fvARB(GLint location, GLsizei count, GLfloat* parameterValue)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg location\r\nldarg count\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg location\r\nldarg count\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]float32[])\r\nret")]
        #endif
        public static void glUniform4fvARB([In] IntPtr extensionPointer, int location, int count, float[] parameterValue) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glUniform4fvARB([In] IntPtr extensionPointer, int location, int count, float[] parameterValue)

        #region void glUniform4fvARB([In] IntPtr extensionPointer, int location, int count, IntPtr parameterValue)
        // GLvoid glUniform4fvARB(GLint location, GLsizei count, GLfloat* parameterValue)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg location\r\nldarg count\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg location\r\nldarg count\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]native int)\r\nret")]
        #endif
        public static void glUniform4fvARB([In] IntPtr extensionPointer, int location, int count, IntPtr parameterValue) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glUniform4fvARB([In] IntPtr extensionPointer, int location, int count, IntPtr parameterValue)

        #region void glUniform4fvARB([In] IntPtr extensionPointer, int location, int count, float* parameterValue)
        // GLvoid glUniform4fvARB(GLint location, GLsizei count, GLfloat* parameterValue)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg location\r\nldarg count\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg location\r\nldarg count\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]float32*)\r\nret")]
        #endif
        public static unsafe void glUniform4fvARB([In] IntPtr extensionPointer, int location, int count, float* parameterValue) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glUniform4fvARB([In] IntPtr extensionPointer, int location, int count, float* parameterValue)
        #endregion Overloads for GLvoid glUniform4fvARB(GLint location, GLsizei count, GLfloat* parameterValue)

        #region Overloads for GLvoid glUniform1ivARB(GLint location, GLsizei count, GLint* parameterValue)
        #region void glUniform1ivARB([In] IntPtr extensionPointer, int location, int count, ref int parameterValue)
        // GLvoid glUniform1ivARB(GLint location, GLsizei count, GLint* parameterValue)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg location\r\nldarg count\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in][out]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg location\r\nldarg count\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in][out]int32)\r\nret")]
        #endif
        public static void glUniform1ivARB([In] IntPtr extensionPointer, int location, int count, ref int parameterValue) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glUniform1ivARB([In] IntPtr extensionPointer, int location, int count, ref int parameterValue)

        #region void glUniform1ivARB([In] IntPtr extensionPointer, int location, int count, int[] parameterValue)
        // GLvoid glUniform1ivARB(GLint location, GLsizei count, GLint* parameterValue)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg location\r\nldarg count\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg location\r\nldarg count\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32[])\r\nret")]
        #endif
        public static void glUniform1ivARB([In] IntPtr extensionPointer, int location, int count, int[] parameterValue) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glUniform1ivARB([In] IntPtr extensionPointer, int location, int count, int[] parameterValue)

        #region void glUniform1ivARB([In] IntPtr extensionPointer, int location, int count, IntPtr parameterValue)
        // GLvoid glUniform1ivARB(GLint location, GLsizei count, GLint* parameterValue)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg location\r\nldarg count\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg location\r\nldarg count\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]native int)\r\nret")]
        #endif
        public static void glUniform1ivARB([In] IntPtr extensionPointer, int location, int count, IntPtr parameterValue) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glUniform1ivARB([In] IntPtr extensionPointer, int location, int count, IntPtr parameterValue)

        #region void glUniform1ivARB([In] IntPtr extensionPointer, int location, int count, int* parameterValue)
        // GLvoid glUniform1ivARB(GLint location, GLsizei count, GLint* parameterValue)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg location\r\nldarg count\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg location\r\nldarg count\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32*)\r\nret")]
        #endif
        public static unsafe void glUniform1ivARB([In] IntPtr extensionPointer, int location, int count, int* parameterValue) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glUniform1ivARB([In] IntPtr extensionPointer, int location, int count, int* parameterValue)
        #endregion Overloads for GLvoid glUniform1ivARB(GLint location, GLsizei count, GLint* parameterValue)

        #region Overloads for GLvoid glUniform2ivARB(GLint location, GLsizei count, GLint* parameterValue)
        #region void glUniform2ivARB([In] IntPtr extensionPointer, int location, int count, ref int parameterValue)
        // GLvoid glUniform2ivARB(GLint location, GLsizei count, GLint* parameterValue)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg location\r\nldarg count\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in][out]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg location\r\nldarg count\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in][out]int32)\r\nret")]
        #endif
        public static void glUniform2ivARB([In] IntPtr extensionPointer, int location, int count, ref int parameterValue) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glUniform2ivARB([In] IntPtr extensionPointer, int location, int count, ref int parameterValue)

        #region void glUniform2ivARB([In] IntPtr extensionPointer, int location, int count, int[] parameterValue)
        // GLvoid glUniform2ivARB(GLint location, GLsizei count, GLint* parameterValue)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg location\r\nldarg count\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg location\r\nldarg count\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32[])\r\nret")]
        #endif
        public static void glUniform2ivARB([In] IntPtr extensionPointer, int location, int count, int[] parameterValue) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glUniform2ivARB([In] IntPtr extensionPointer, int location, int count, int[] parameterValue)

        #region void glUniform2ivARB([In] IntPtr extensionPointer, int location, int count, IntPtr parameterValue)
        // GLvoid glUniform2ivARB(GLint location, GLsizei count, GLint* parameterValue)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg location\r\nldarg count\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg location\r\nldarg count\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]native int)\r\nret")]
        #endif
        public static void glUniform2ivARB([In] IntPtr extensionPointer, int location, int count, IntPtr parameterValue) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glUniform2ivARB([In] IntPtr extensionPointer, int location, int count, IntPtr parameterValue)

        #region void glUniform2ivARB([In] IntPtr extensionPointer, int location, int count, int* parameterValue)
        // GLvoid glUniform2ivARB(GLint location, GLsizei count, GLint* parameterValue)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg location\r\nldarg count\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg location\r\nldarg count\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32*)\r\nret")]
        #endif
        public static unsafe void glUniform2ivARB([In] IntPtr extensionPointer, int location, int count, int* parameterValue) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glUniform2ivARB([In] IntPtr extensionPointer, int location, int count, int* parameterValue)
        #endregion Overloads for GLvoid glUniform2ivARB(GLint location, GLsizei count, GLint* parameterValue)

        #region Overloads for GLvoid glUniform3ivARB(GLint location, GLsizei count, GLint* parameterValue)
        #region void glUniform3ivARB([In] IntPtr extensionPointer, int location, int count, ref int parameterValue)
        // GLvoid glUniform3ivARB(GLint location, GLsizei count, GLint* parameterValue)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg location\r\nldarg count\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in][out]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg location\r\nldarg count\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in][out]int32)\r\nret")]
        #endif
        public static void glUniform3ivARB([In] IntPtr extensionPointer, int location, int count, ref int parameterValue) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glUniform3ivARB([In] IntPtr extensionPointer, int location, int count, ref int parameterValue)

        #region void glUniform3ivARB([In] IntPtr extensionPointer, int location, int count, int[] parameterValue)
        // GLvoid glUniform3ivARB(GLint location, GLsizei count, GLint* parameterValue)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg location\r\nldarg count\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg location\r\nldarg count\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32[])\r\nret")]
        #endif
        public static void glUniform3ivARB([In] IntPtr extensionPointer, int location, int count, int[] parameterValue) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glUniform3ivARB([In] IntPtr extensionPointer, int location, int count, int[] parameterValue)

        #region void glUniform3ivARB([In] IntPtr extensionPointer, int location, int count, IntPtr parameterValue)
        // GLvoid glUniform3ivARB(GLint location, GLsizei count, GLint* parameterValue)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg location\r\nldarg count\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg location\r\nldarg count\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]native int)\r\nret")]
        #endif
        public static void glUniform3ivARB([In] IntPtr extensionPointer, int location, int count, IntPtr parameterValue) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glUniform3ivARB([In] IntPtr extensionPointer, int location, int count, IntPtr parameterValue)

        #region void glUniform3ivARB([In] IntPtr extensionPointer, int location, int count, int* parameterValue)
        // GLvoid glUniform3ivARB(GLint location, GLsizei count, GLint* parameterValue)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg location\r\nldarg count\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg location\r\nldarg count\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32*)\r\nret")]
        #endif
        public static unsafe void glUniform3ivARB([In] IntPtr extensionPointer, int location, int count, int* parameterValue) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glUniform3ivARB([In] IntPtr extensionPointer, int location, int count, int* parameterValue)
        #endregion Overloads for GLvoid glUniform3ivARB(GLint location, GLsizei count, GLint* parameterValue)

        #region Overloads for GLvoid glUniform4ivARB(GLint location, GLsizei count, GLint* parameterValue)
        #region void glUniform4ivARB([In] IntPtr extensionPointer, int location, int count, ref int parameterValue)
        // GLvoid glUniform4ivARB(GLint location, GLsizei count, GLint* parameterValue)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg location\r\nldarg count\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in][out]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg location\r\nldarg count\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in][out]int32)\r\nret")]
        #endif
        public static void glUniform4ivARB([In] IntPtr extensionPointer, int location, int count, ref int parameterValue) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glUniform4ivARB([In] IntPtr extensionPointer, int location, int count, ref int parameterValue)

        #region void glUniform4ivARB([In] IntPtr extensionPointer, int location, int count, int[] parameterValue)
        // GLvoid glUniform4ivARB(GLint location, GLsizei count, GLint* parameterValue)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg location\r\nldarg count\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg location\r\nldarg count\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32[])\r\nret")]
        #endif
        public static void glUniform4ivARB([In] IntPtr extensionPointer, int location, int count, int[] parameterValue) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glUniform4ivARB([In] IntPtr extensionPointer, int location, int count, int[] parameterValue)

        #region void glUniform4ivARB([In] IntPtr extensionPointer, int location, int count, IntPtr parameterValue)
        // GLvoid glUniform4ivARB(GLint location, GLsizei count, GLint* parameterValue)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg location\r\nldarg count\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg location\r\nldarg count\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]native int)\r\nret")]
        #endif
        public static void glUniform4ivARB([In] IntPtr extensionPointer, int location, int count, IntPtr parameterValue) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glUniform4ivARB([In] IntPtr extensionPointer, int location, int count, IntPtr parameterValue)

        #region void glUniform4ivARB([In] IntPtr extensionPointer, int location, int count, int* parameterValue)
        // GLvoid glUniform4ivARB(GLint location, GLsizei count, GLint* parameterValue)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg location\r\nldarg count\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg location\r\nldarg count\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32*)\r\nret")]
        #endif
        public static unsafe void glUniform4ivARB([In] IntPtr extensionPointer, int location, int count, int* parameterValue) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glUniform4ivARB([In] IntPtr extensionPointer, int location, int count, int* parameterValue)
        #endregion Overloads for GLvoid glUniform4ivARB(GLint location, GLsizei count, GLint* parameterValue)

        #region Overloads for GLvoid glUniformMatrix2fvARB(GLint location, GLsizei count, GLboolean transpose, GLfloat* parameterValue)
        #region void glUniformMatrix2fvARB([In] IntPtr extensionPointer, int location, int count, int transpose, ref float parameterValue)
        // GLvoid glUniformMatrix2fvARB(GLint location, GLsizei count, GLboolean transpose, GLfloat* parameterValue)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg location\r\nldarg count\r\nldarg transpose\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in][out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg location\r\nldarg count\r\nldarg transpose\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in][out]float32)\r\nret")]
        #endif
        public static void glUniformMatrix2fvARB([In] IntPtr extensionPointer, int location, int count, int transpose, ref float parameterValue) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glUniformMatrix2fvARB([In] IntPtr extensionPointer, int location, int count, int transpose, ref float parameterValue)

        #region void glUniformMatrix2fvARB([In] IntPtr extensionPointer, int location, int count, int transpose, float[] parameterValue)
        // GLvoid glUniformMatrix2fvARB(GLint location, GLsizei count, GLboolean transpose, GLfloat* parameterValue)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg location\r\nldarg count\r\nldarg transpose\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg location\r\nldarg count\r\nldarg transpose\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]float32[])\r\nret")]
        #endif
        public static void glUniformMatrix2fvARB([In] IntPtr extensionPointer, int location, int count, int transpose, float[] parameterValue) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glUniformMatrix2fvARB([In] IntPtr extensionPointer, int location, int count, int transpose, float[] parameterValue)

        #region void glUniformMatrix2fvARB([In] IntPtr extensionPointer, int location, int count, int transpose, IntPtr parameterValue)
        // GLvoid glUniformMatrix2fvARB(GLint location, GLsizei count, GLboolean transpose, GLfloat* parameterValue)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg location\r\nldarg count\r\nldarg transpose\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg location\r\nldarg count\r\nldarg transpose\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]native int)\r\nret")]
        #endif
        public static void glUniformMatrix2fvARB([In] IntPtr extensionPointer, int location, int count, int transpose, IntPtr parameterValue) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glUniformMatrix2fvARB([In] IntPtr extensionPointer, int location, int count, int transpose, IntPtr parameterValue)

        #region void glUniformMatrix2fvARB([In] IntPtr extensionPointer, int location, int count, int transpose, float* parameterValue)
        // GLvoid glUniformMatrix2fvARB(GLint location, GLsizei count, GLboolean transpose, GLfloat* parameterValue)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg location\r\nldarg count\r\nldarg transpose\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg location\r\nldarg count\r\nldarg transpose\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]float32*)\r\nret")]
        #endif
        public static unsafe void glUniformMatrix2fvARB([In] IntPtr extensionPointer, int location, int count, int transpose, float* parameterValue) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glUniformMatrix2fvARB([In] IntPtr extensionPointer, int location, int count, int transpose, float* parameterValue)
        #endregion Overloads for GLvoid glUniformMatrix2fvARB(GLint location, GLsizei count, GLboolean transpose, GLfloat* parameterValue)

        #region Overloads for GLvoid glUniformMatrix3fvARB(GLint location, GLsizei count, GLboolean transpose, GLfloat* parameterValue)
        #region void glUniformMatrix3fvARB([In] IntPtr extensionPointer, int location, int count, int transpose, ref float parameterValue)
        // GLvoid glUniformMatrix3fvARB(GLint location, GLsizei count, GLboolean transpose, GLfloat* parameterValue)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg location\r\nldarg count\r\nldarg transpose\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in][out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg location\r\nldarg count\r\nldarg transpose\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in][out]float32)\r\nret")]
        #endif
        public static void glUniformMatrix3fvARB([In] IntPtr extensionPointer, int location, int count, int transpose, ref float parameterValue) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glUniformMatrix3fvARB([In] IntPtr extensionPointer, int location, int count, int transpose, ref float parameterValue)

        #region void glUniformMatrix3fvARB([In] IntPtr extensionPointer, int location, int count, int transpose, float[] parameterValue)
        // GLvoid glUniformMatrix3fvARB(GLint location, GLsizei count, GLboolean transpose, GLfloat* parameterValue)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg location\r\nldarg count\r\nldarg transpose\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg location\r\nldarg count\r\nldarg transpose\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]float32[])\r\nret")]
        #endif
        public static void glUniformMatrix3fvARB([In] IntPtr extensionPointer, int location, int count, int transpose, float[] parameterValue) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glUniformMatrix3fvARB([In] IntPtr extensionPointer, int location, int count, int transpose, float[] parameterValue)

        #region void glUniformMatrix3fvARB([In] IntPtr extensionPointer, int location, int count, int transpose, IntPtr parameterValue)
        // GLvoid glUniformMatrix3fvARB(GLint location, GLsizei count, GLboolean transpose, GLfloat* parameterValue)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg location\r\nldarg count\r\nldarg transpose\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg location\r\nldarg count\r\nldarg transpose\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]native int)\r\nret")]
        #endif
        public static void glUniformMatrix3fvARB([In] IntPtr extensionPointer, int location, int count, int transpose, IntPtr parameterValue) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glUniformMatrix3fvARB([In] IntPtr extensionPointer, int location, int count, int transpose, IntPtr parameterValue)

        #region void glUniformMatrix3fvARB([In] IntPtr extensionPointer, int location, int count, int transpose, float* parameterValue)
        // GLvoid glUniformMatrix3fvARB(GLint location, GLsizei count, GLboolean transpose, GLfloat* parameterValue)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg location\r\nldarg count\r\nldarg transpose\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg location\r\nldarg count\r\nldarg transpose\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]float32*)\r\nret")]
        #endif
        public static unsafe void glUniformMatrix3fvARB([In] IntPtr extensionPointer, int location, int count, int transpose, float* parameterValue) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glUniformMatrix3fvARB([In] IntPtr extensionPointer, int location, int count, int transpose, float* parameterValue)
        #endregion Overloads for GLvoid glUniformMatrix3fvARB(GLint location, GLsizei count, GLboolean transpose, GLfloat* parameterValue)

        #region Overloads for GLvoid glUniformMatrix4fvARB(GLint location, GLsizei count, GLboolean transpose, GLfloat* parameterValue)
        #region void glUniformMatrix4fvARB([In] IntPtr extensionPointer, int location, int count, int transpose, ref float parameterValue)
        // GLvoid glUniformMatrix4fvARB(GLint location, GLsizei count, GLboolean transpose, GLfloat* parameterValue)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg location\r\nldarg count\r\nldarg transpose\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in][out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg location\r\nldarg count\r\nldarg transpose\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in][out]float32)\r\nret")]
        #endif
        public static void glUniformMatrix4fvARB([In] IntPtr extensionPointer, int location, int count, int transpose, ref float parameterValue) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glUniformMatrix4fvARB([In] IntPtr extensionPointer, int location, int count, int transpose, ref float parameterValue)

        #region void glUniformMatrix4fvARB([In] IntPtr extensionPointer, int location, int count, int transpose, float[] parameterValue)
        // GLvoid glUniformMatrix4fvARB(GLint location, GLsizei count, GLboolean transpose, GLfloat* parameterValue)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg location\r\nldarg count\r\nldarg transpose\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg location\r\nldarg count\r\nldarg transpose\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]float32[])\r\nret")]
        #endif
        public static void glUniformMatrix4fvARB([In] IntPtr extensionPointer, int location, int count, int transpose, float[] parameterValue) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glUniformMatrix4fvARB([In] IntPtr extensionPointer, int location, int count, int transpose, float[] parameterValue)

        #region void glUniformMatrix4fvARB([In] IntPtr extensionPointer, int location, int count, int transpose, IntPtr parameterValue)
        // GLvoid glUniformMatrix4fvARB(GLint location, GLsizei count, GLboolean transpose, GLfloat* parameterValue)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg location\r\nldarg count\r\nldarg transpose\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg location\r\nldarg count\r\nldarg transpose\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]native int)\r\nret")]
        #endif
        public static void glUniformMatrix4fvARB([In] IntPtr extensionPointer, int location, int count, int transpose, IntPtr parameterValue) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glUniformMatrix4fvARB([In] IntPtr extensionPointer, int location, int count, int transpose, IntPtr parameterValue)

        #region void glUniformMatrix4fvARB([In] IntPtr extensionPointer, int location, int count, int transpose, float* parameterValue)
        // GLvoid glUniformMatrix4fvARB(GLint location, GLsizei count, GLboolean transpose, GLfloat* parameterValue)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg location\r\nldarg count\r\nldarg transpose\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg location\r\nldarg count\r\nldarg transpose\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]float32*)\r\nret")]
        #endif
        public static unsafe void glUniformMatrix4fvARB([In] IntPtr extensionPointer, int location, int count, int transpose, float* parameterValue) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glUniformMatrix4fvARB([In] IntPtr extensionPointer, int location, int count, int transpose, float* parameterValue)
        #endregion Overloads for GLvoid glUniformMatrix4fvARB(GLint location, GLsizei count, GLboolean transpose, GLfloat* parameterValue)

        #region Overloads for GLvoid glGetObjectParameterfvARB(GLhandleARB obj, GLenum pname, GLfloat* parameters)
        #region void glGetObjectParameterfvARB([In] IntPtr extensionPointer, IntPtr obj, int pname, out float parameters)
        // GLvoid glGetObjectParameterfvARB(GLhandleARB obj, GLenum pname, GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg obj\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]int32,[out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg obj\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]int32,[out]float32)\r\nret")]
        #endif
        public static void glGetObjectParameterfvARB([In] IntPtr extensionPointer, IntPtr obj, int pname, out float parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetObjectParameterfvARB([In] IntPtr extensionPointer, IntPtr obj, int pname, out float parameters)

        #region void glGetObjectParameterfvARB([In] IntPtr extensionPointer, IntPtr obj, int pname, float[] parameters)
        // GLvoid glGetObjectParameterfvARB(GLhandleARB obj, GLenum pname, GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg obj\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]int32,[out]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg obj\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]int32,[out]float32[])\r\nret")]
        #endif
        public static void glGetObjectParameterfvARB([In] IntPtr extensionPointer, IntPtr obj, int pname, float[] parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetObjectParameterfvARB([In] IntPtr extensionPointer, IntPtr obj, int pname, float[] parameters)

        #region void glGetObjectParameterfvARB([In] IntPtr extensionPointer, IntPtr obj, int pname, IntPtr parameters)
        // GLvoid glGetObjectParameterfvARB(GLhandleARB obj, GLenum pname, GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg obj\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg obj\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGetObjectParameterfvARB([In] IntPtr extensionPointer, IntPtr obj, int pname, IntPtr parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetObjectParameterfvARB([In] IntPtr extensionPointer, IntPtr obj, int pname, IntPtr parameters)

        #region void glGetObjectParameterfvARB([In] IntPtr extensionPointer, IntPtr obj, int pname, float* parameters)
        // GLvoid glGetObjectParameterfvARB(GLhandleARB obj, GLenum pname, GLfloat* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg obj\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]int32,[out]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg obj\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]int32,[out]float32*)\r\nret")]
        #endif
        public static unsafe void glGetObjectParameterfvARB([In] IntPtr extensionPointer, IntPtr obj, int pname, float* parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetObjectParameterfvARB([In] IntPtr extensionPointer, IntPtr obj, int pname, float* parameters)
        #endregion Overloads for GLvoid glGetObjectParameterfvARB(GLhandleARB obj, GLenum pname, GLfloat* parameters)

        #region Overloads for GLvoid glGetObjectParameterivARB(GLhandleARB obj, GLenum pname, GLint* parameters)
        #region void glGetObjectParameterivARB([In] IntPtr extensionPointer, IntPtr obj, int pname, out int parameters)
        // GLvoid glGetObjectParameterivARB(GLhandleARB obj, GLenum pname, GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg obj\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]int32,[out]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg obj\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]int32,[out]int32)\r\nret")]
        #endif
        public static void glGetObjectParameterivARB([In] IntPtr extensionPointer, IntPtr obj, int pname, out int parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetObjectParameterivARB([In] IntPtr extensionPointer, IntPtr obj, int pname, out int parameters)

        #region void glGetObjectParameterivARB([In] IntPtr extensionPointer, IntPtr obj, int pname, int[] parameters)
        // GLvoid glGetObjectParameterivARB(GLhandleARB obj, GLenum pname, GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg obj\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]int32,[out]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg obj\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]int32,[out]int32[])\r\nret")]
        #endif
        public static void glGetObjectParameterivARB([In] IntPtr extensionPointer, IntPtr obj, int pname, int[] parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetObjectParameterivARB([In] IntPtr extensionPointer, IntPtr obj, int pname, int[] parameters)

        #region void glGetObjectParameterivARB([In] IntPtr extensionPointer, IntPtr obj, int pname, IntPtr parameters)
        // GLvoid glGetObjectParameterivARB(GLhandleARB obj, GLenum pname, GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg obj\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg obj\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGetObjectParameterivARB([In] IntPtr extensionPointer, IntPtr obj, int pname, IntPtr parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetObjectParameterivARB([In] IntPtr extensionPointer, IntPtr obj, int pname, IntPtr parameters)

        #region void glGetObjectParameterivARB([In] IntPtr extensionPointer, IntPtr obj, int pname, int* parameters)
        // GLvoid glGetObjectParameterivARB(GLhandleARB obj, GLenum pname, GLint* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg obj\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]int32,[out]int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg obj\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]int32,[out]int32*)\r\nret")]
        #endif
        public static unsafe void glGetObjectParameterivARB([In] IntPtr extensionPointer, IntPtr obj, int pname, int* parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetObjectParameterivARB([In] IntPtr extensionPointer, IntPtr obj, int pname, int* parameters)
        #endregion Overloads for GLvoid glGetObjectParameterivARB(GLhandleARB obj, GLenum pname, GLint* parameters)

        #region Overloads for GLvoid glGetInfoLogARB(GLhandleARB obj, GLsizei maxLength, GLsizei* length, GLcharARB* infoLog)
        #region void glGetInfoLogARB([In] IntPtr extensionPointer, IntPtr obj, int maxLength, out int length, System.Text.StringBuilder infoLog)
        // GLvoid glGetInfoLogARB(GLhandleARB obj, GLsizei maxLength, GLsizei* length, GLcharARB* infoLog)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg obj\r\nldarg maxLength\r\nldarg length\r\nldarg infoLog\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]int32,[out]int32,[in][out]class [mscorlib]System.Text.StringBuilder)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg obj\r\nldarg maxLength\r\nldarg length\r\nldarg infoLog\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]int32,[out]int32,[in][out]class [mscorlib]System.Text.StringBuilder)\r\nret")]
        #endif
        public static void glGetInfoLogARB([In] IntPtr extensionPointer, IntPtr obj, int maxLength, out int length, System.Text.StringBuilder infoLog) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetInfoLogARB([In] IntPtr extensionPointer, IntPtr obj, int maxLength, out int length, System.Text.StringBuilder infoLog)

        #region void glGetInfoLogARB([In] IntPtr extensionPointer, IntPtr obj, int maxLength, int[] length, System.Text.StringBuilder infoLog)
        // GLvoid glGetInfoLogARB(GLhandleARB obj, GLsizei maxLength, GLsizei* length, GLcharARB* infoLog)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg obj\r\nldarg maxLength\r\nldarg length\r\nldarg infoLog\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]int32,[out]int32[],[in][out]class [mscorlib]System.Text.StringBuilder)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg obj\r\nldarg maxLength\r\nldarg length\r\nldarg infoLog\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]int32,[out]int32[],[in][out]class [mscorlib]System.Text.StringBuilder)\r\nret")]
        #endif
        public static void glGetInfoLogARB([In] IntPtr extensionPointer, IntPtr obj, int maxLength, int[] length, System.Text.StringBuilder infoLog) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetInfoLogARB([In] IntPtr extensionPointer, IntPtr obj, int maxLength, int[] length, System.Text.StringBuilder infoLog)

        #region void glGetInfoLogARB([In] IntPtr extensionPointer, IntPtr obj, int maxLength, IntPtr length, System.Text.StringBuilder infoLog)
        // GLvoid glGetInfoLogARB(GLhandleARB obj, GLsizei maxLength, GLsizei* length, GLcharARB* infoLog)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg obj\r\nldarg maxLength\r\nldarg length\r\nldarg infoLog\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]int32,[out]native int,[in][out]class [mscorlib]System.Text.StringBuilder)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg obj\r\nldarg maxLength\r\nldarg length\r\nldarg infoLog\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]int32,[out]native int,[in][out]class [mscorlib]System.Text.StringBuilder)\r\nret")]
        #endif
        public static void glGetInfoLogARB([In] IntPtr extensionPointer, IntPtr obj, int maxLength, IntPtr length, System.Text.StringBuilder infoLog) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetInfoLogARB([In] IntPtr extensionPointer, IntPtr obj, int maxLength, IntPtr length, System.Text.StringBuilder infoLog)

        #region void glGetInfoLogARB([In] IntPtr extensionPointer, IntPtr obj, int maxLength, int* length, System.Text.StringBuilder infoLog)
        // GLvoid glGetInfoLogARB(GLhandleARB obj, GLsizei maxLength, GLsizei* length, GLcharARB* infoLog)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg obj\r\nldarg maxLength\r\nldarg length\r\nldarg infoLog\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]int32,[out]int32*,[in][out]class [mscorlib]System.Text.StringBuilder)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg obj\r\nldarg maxLength\r\nldarg length\r\nldarg infoLog\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]int32,[out]int32*,[in][out]class [mscorlib]System.Text.StringBuilder)\r\nret")]
        #endif
        public static unsafe void glGetInfoLogARB([In] IntPtr extensionPointer, IntPtr obj, int maxLength, int* length, System.Text.StringBuilder infoLog) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetInfoLogARB([In] IntPtr extensionPointer, IntPtr obj, int maxLength, int* length, System.Text.StringBuilder infoLog)
        #endregion Overloads for GLvoid glGetInfoLogARB(GLhandleARB obj, GLsizei maxLength, GLsizei* length, GLcharARB* infoLog)

        #region Overloads for GLvoid glGetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, GLsizei* count, GLhandleARB* obj)
        #region void glGetAttachedObjectsARB([In] IntPtr extensionPointer, IntPtr containerObj, int maxCount, int[] count, IntPtr[] obj)
        // GLvoid glGetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, GLsizei* count, GLhandleARB* obj)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg containerObj\r\nldarg maxCount\r\nldarg count\r\nldarg obj\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]int32,[out]int32[],[out]native int[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg containerObj\r\nldarg maxCount\r\nldarg count\r\nldarg obj\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]int32,[out]int32[],[out]native int[])\r\nret")]
        #endif
        public static void glGetAttachedObjectsARB([In] IntPtr extensionPointer, IntPtr containerObj, int maxCount, int[] count, IntPtr[] obj) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetAttachedObjectsARB([In] IntPtr extensionPointer, IntPtr containerObj, int maxCount, int[] count, IntPtr[] obj)

        #region void glGetAttachedObjectsARB([In] IntPtr extensionPointer, IntPtr containerObj, int maxCount, IntPtr count, IntPtr obj)
        // GLvoid glGetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, GLsizei* count, GLhandleARB* obj)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg containerObj\r\nldarg maxCount\r\nldarg count\r\nldarg obj\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]int32,[out]native int,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg containerObj\r\nldarg maxCount\r\nldarg count\r\nldarg obj\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]int32,[out]native int,[out]native int)\r\nret")]
        #endif
        public static void glGetAttachedObjectsARB([In] IntPtr extensionPointer, IntPtr containerObj, int maxCount, IntPtr count, IntPtr obj) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetAttachedObjectsARB([In] IntPtr extensionPointer, IntPtr containerObj, int maxCount, IntPtr count, IntPtr obj)

        #region void glGetAttachedObjectsARB([In] IntPtr extensionPointer, IntPtr containerObj, int maxCount, int* count, void** obj)
        // GLvoid glGetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, GLsizei* count, GLhandleARB* obj)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg containerObj\r\nldarg maxCount\r\nldarg count\r\nldarg obj\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]int32,[out]int32*,[out]void**)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg containerObj\r\nldarg maxCount\r\nldarg count\r\nldarg obj\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]int32,[out]int32*,[out]void**)\r\nret")]
        #endif
        public static unsafe void glGetAttachedObjectsARB([In] IntPtr extensionPointer, IntPtr containerObj, int maxCount, int* count, void** obj) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetAttachedObjectsARB([In] IntPtr extensionPointer, IntPtr containerObj, int maxCount, int* count, void** obj)
        #endregion Overloads for GLvoid glGetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, GLsizei* count, GLhandleARB* obj)

        #region int glGetUniformLocationARB([In] IntPtr extensionPointer, IntPtr programObj, string name)
        // GLint glGetUniformLocationARB(GLhandleARB programObj, const GLcharARB* name)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg programObj\r\nldarg name\r\nldarg extensionPointer\r\ncalli unmanaged stdcall int32([in]native int,[in]string)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg programObj\r\nldarg name\r\nldarg extensionPointer\r\ncalli unmanaged cdecl int32([in]native int,[in]string)\r\nret")]
        #endif
        public static int glGetUniformLocationARB([In] IntPtr extensionPointer, IntPtr programObj, string name) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion int glGetUniformLocationARB([In] IntPtr extensionPointer, IntPtr programObj, string name)

        #region Overloads for GLvoid glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei* length, GLint* size, GLenum* type, GLcharARB* name)
        #region void glGetActiveUniformARB([In] IntPtr extensionPointer, IntPtr programObj, int index, int maxLength, int[] length, int[] size, int[] type, System.Text.StringBuilder name)
        // GLvoid glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei* length, GLint* size, GLenum* type, GLcharARB* name)
        #if WIN32
        [IlasmAttribute(".maxstack 8\r\nldarg programObj\r\nldarg index\r\nldarg maxLength\r\nldarg length\r\nldarg size\r\nldarg type\r\nldarg name\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]int32,[in]int32,[out]int32[],[out]int32[],[out]int32[],[in][out]class [mscorlib]System.Text.StringBuilder)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 8\r\nldarg programObj\r\nldarg index\r\nldarg maxLength\r\nldarg length\r\nldarg size\r\nldarg type\r\nldarg name\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]int32,[in]int32,[out]int32[],[out]int32[],[out]int32[],[in][out]class [mscorlib]System.Text.StringBuilder)\r\nret")]
        #endif
        public static void glGetActiveUniformARB([In] IntPtr extensionPointer, IntPtr programObj, int index, int maxLength, int[] length, int[] size, int[] type, System.Text.StringBuilder name) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetActiveUniformARB([In] IntPtr extensionPointer, IntPtr programObj, int index, int maxLength, int[] length, int[] size, int[] type, System.Text.StringBuilder name)

        #region void glGetActiveUniformARB([In] IntPtr extensionPointer, IntPtr programObj, int index, int maxLength, out int length, out int size, out int type, System.Text.StringBuilder name)
        // GLvoid glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei* length, GLint* size, GLenum* type, GLcharARB* name)
        #if WIN32
        [IlasmAttribute(".maxstack 8\r\nldarg programObj\r\nldarg index\r\nldarg maxLength\r\nldarg length\r\nldarg size\r\nldarg type\r\nldarg name\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]int32,[in]int32,[out]int32,[out]int32,[out]int32,[in][out]class [mscorlib]System.Text.StringBuilder)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 8\r\nldarg programObj\r\nldarg index\r\nldarg maxLength\r\nldarg length\r\nldarg size\r\nldarg type\r\nldarg name\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]int32,[in]int32,[out]int32,[out]int32,[out]int32,[in][out]class [mscorlib]System.Text.StringBuilder)\r\nret")]
        #endif
        public static void glGetActiveUniformARB([In] IntPtr extensionPointer, IntPtr programObj, int index, int maxLength, out int length, out int size, out int type, System.Text.StringBuilder name) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetActiveUniformARB([In] IntPtr extensionPointer, IntPtr programObj, int index, int maxLength, out int length, out int size, out int type, System.Text.StringBuilder name)

        #region void glGetActiveUniformARB([In] IntPtr extensionPointer, IntPtr programObj, int index, int maxLength, IntPtr length, IntPtr size, IntPtr type, System.Text.StringBuilder name)
        // GLvoid glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei* length, GLint* size, GLenum* type, GLcharARB* name)
        #if WIN32
        [IlasmAttribute(".maxstack 8\r\nldarg programObj\r\nldarg index\r\nldarg maxLength\r\nldarg length\r\nldarg size\r\nldarg type\r\nldarg name\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]int32,[in]int32,[out]native int,[out]native int,[out]native int,[in][out]class [mscorlib]System.Text.StringBuilder)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 8\r\nldarg programObj\r\nldarg index\r\nldarg maxLength\r\nldarg length\r\nldarg size\r\nldarg type\r\nldarg name\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]int32,[in]int32,[out]native int,[out]native int,[out]native int,[in][out]class [mscorlib]System.Text.StringBuilder)\r\nret")]
        #endif
        public static void glGetActiveUniformARB([In] IntPtr extensionPointer, IntPtr programObj, int index, int maxLength, IntPtr length, IntPtr size, IntPtr type, System.Text.StringBuilder name) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetActiveUniformARB([In] IntPtr extensionPointer, IntPtr programObj, int index, int maxLength, IntPtr length, IntPtr size, IntPtr type, System.Text.StringBuilder name)

        #region void glGetActiveUniformARB([In] IntPtr extensionPointer, IntPtr programObj, uint index, int maxLength, IntPtr length, IntPtr size, IntPtr type, System.Text.StringBuilder name)
        // GLvoid glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei* length, GLint* size, GLenum* type, GLcharARB* name)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 8\r\nldarg programObj\r\nldarg index\r\nldarg maxLength\r\nldarg length\r\nldarg size\r\nldarg type\r\nldarg name\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]unsigned int32,[in]int32,[out]native int,[out]native int,[out]native int,[in][out]class [mscorlib]System.Text.StringBuilder)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 8\r\nldarg programObj\r\nldarg index\r\nldarg maxLength\r\nldarg length\r\nldarg size\r\nldarg type\r\nldarg name\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]unsigned int32,[in]int32,[out]native int,[out]native int,[out]native int,[in][out]class [mscorlib]System.Text.StringBuilder)\r\nret")]
        #endif
        public static void glGetActiveUniformARB([In] IntPtr extensionPointer, IntPtr programObj, uint index, int maxLength, IntPtr length, IntPtr size, IntPtr type, System.Text.StringBuilder name) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetActiveUniformARB([In] IntPtr extensionPointer, IntPtr programObj, uint index, int maxLength, IntPtr length, IntPtr size, IntPtr type, System.Text.StringBuilder name)

        #region void glGetActiveUniformARB([In] IntPtr extensionPointer, IntPtr programObj, uint index, int maxLength, out int length, out int size, out int type, System.Text.StringBuilder name)
        // GLvoid glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei* length, GLint* size, GLenum* type, GLcharARB* name)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 8\r\nldarg programObj\r\nldarg index\r\nldarg maxLength\r\nldarg length\r\nldarg size\r\nldarg type\r\nldarg name\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]unsigned int32,[in]int32,[out]int32,[out]int32,[out]int32,[in][out]class [mscorlib]System.Text.StringBuilder)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 8\r\nldarg programObj\r\nldarg index\r\nldarg maxLength\r\nldarg length\r\nldarg size\r\nldarg type\r\nldarg name\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]unsigned int32,[in]int32,[out]int32,[out]int32,[out]int32,[in][out]class [mscorlib]System.Text.StringBuilder)\r\nret")]
        #endif
        public static void glGetActiveUniformARB([In] IntPtr extensionPointer, IntPtr programObj, uint index, int maxLength, out int length, out int size, out int type, System.Text.StringBuilder name) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetActiveUniformARB([In] IntPtr extensionPointer, IntPtr programObj, uint index, int maxLength, out int length, out int size, out int type, System.Text.StringBuilder name)

        #region void glGetActiveUniformARB([In] IntPtr extensionPointer, IntPtr programObj, uint index, int maxLength, int[] length, int[] size, int[] type, System.Text.StringBuilder name)
        // GLvoid glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei* length, GLint* size, GLenum* type, GLcharARB* name)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 8\r\nldarg programObj\r\nldarg index\r\nldarg maxLength\r\nldarg length\r\nldarg size\r\nldarg type\r\nldarg name\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]unsigned int32,[in]int32,[out]int32[],[out]int32[],[out]int32[],[in][out]class [mscorlib]System.Text.StringBuilder)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 8\r\nldarg programObj\r\nldarg index\r\nldarg maxLength\r\nldarg length\r\nldarg size\r\nldarg type\r\nldarg name\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]unsigned int32,[in]int32,[out]int32[],[out]int32[],[out]int32[],[in][out]class [mscorlib]System.Text.StringBuilder)\r\nret")]
        #endif
        public static void glGetActiveUniformARB([In] IntPtr extensionPointer, IntPtr programObj, uint index, int maxLength, int[] length, int[] size, int[] type, System.Text.StringBuilder name) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetActiveUniformARB([In] IntPtr extensionPointer, IntPtr programObj, uint index, int maxLength, int[] length, int[] size, int[] type, System.Text.StringBuilder name)

        #region void glGetActiveUniformARB([In] IntPtr extensionPointer, IntPtr programObj, uint index, int maxLength, int* length, int* size, int* type, System.Text.StringBuilder name)
        // GLvoid glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei* length, GLint* size, GLenum* type, GLcharARB* name)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 8\r\nldarg programObj\r\nldarg index\r\nldarg maxLength\r\nldarg length\r\nldarg size\r\nldarg type\r\nldarg name\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]unsigned int32,[in]int32,[out]int32*,[out]int32*,[out]int32*,[in][out]class [mscorlib]System.Text.StringBuilder)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 8\r\nldarg programObj\r\nldarg index\r\nldarg maxLength\r\nldarg length\r\nldarg size\r\nldarg type\r\nldarg name\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]unsigned int32,[in]int32,[out]int32*,[out]int32*,[out]int32*,[in][out]class [mscorlib]System.Text.StringBuilder)\r\nret")]
        #endif
        public static unsafe void glGetActiveUniformARB([In] IntPtr extensionPointer, IntPtr programObj, uint index, int maxLength, int* length, int* size, int* type, System.Text.StringBuilder name) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetActiveUniformARB([In] IntPtr extensionPointer, IntPtr programObj, uint index, int maxLength, int* length, int* size, int* type, System.Text.StringBuilder name)
        #endregion Overloads for GLvoid glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei* length, GLint* size, GLenum* type, GLcharARB* name)

        #region Overloads for GLvoid glGetUniformfvARB(GLhandleARB programObj, GLint location, GLfloat* parameters)
        #region void glGetUniformfvARB([In] IntPtr extensionPointer, IntPtr programObj, int location, out float parameters)
        // GLvoid glGetUniformfvARB(GLhandleARB programObj, GLint location, GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg programObj\r\nldarg location\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]int32,[out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg programObj\r\nldarg location\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]int32,[out]float32)\r\nret")]
        #endif
        public static void glGetUniformfvARB([In] IntPtr extensionPointer, IntPtr programObj, int location, out float parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetUniformfvARB([In] IntPtr extensionPointer, IntPtr programObj, int location, out float parameters)

        #region void glGetUniformfvARB([In] IntPtr extensionPointer, IntPtr programObj, int location, float[] parameters)
        // GLvoid glGetUniformfvARB(GLhandleARB programObj, GLint location, GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg programObj\r\nldarg location\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]int32,[out]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg programObj\r\nldarg location\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]int32,[out]float32[])\r\nret")]
        #endif
        public static void glGetUniformfvARB([In] IntPtr extensionPointer, IntPtr programObj, int location, float[] parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetUniformfvARB([In] IntPtr extensionPointer, IntPtr programObj, int location, float[] parameters)

        #region void glGetUniformfvARB([In] IntPtr extensionPointer, IntPtr programObj, int location, IntPtr parameters)
        // GLvoid glGetUniformfvARB(GLhandleARB programObj, GLint location, GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg programObj\r\nldarg location\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg programObj\r\nldarg location\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGetUniformfvARB([In] IntPtr extensionPointer, IntPtr programObj, int location, IntPtr parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetUniformfvARB([In] IntPtr extensionPointer, IntPtr programObj, int location, IntPtr parameters)

        #region void glGetUniformfvARB([In] IntPtr extensionPointer, IntPtr programObj, int location, float* parameters)
        // GLvoid glGetUniformfvARB(GLhandleARB programObj, GLint location, GLfloat* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg programObj\r\nldarg location\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]int32,[out]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg programObj\r\nldarg location\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]int32,[out]float32*)\r\nret")]
        #endif
        public static unsafe void glGetUniformfvARB([In] IntPtr extensionPointer, IntPtr programObj, int location, float* parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetUniformfvARB([In] IntPtr extensionPointer, IntPtr programObj, int location, float* parameters)
        #endregion Overloads for GLvoid glGetUniformfvARB(GLhandleARB programObj, GLint location, GLfloat* parameters)

        #region Overloads for GLvoid glGetUniformivARB(GLhandleARB programObj, GLint location, GLint* parameters)
        #region void glGetUniformivARB([In] IntPtr extensionPointer, IntPtr programObj, int location, out int parameters)
        // GLvoid glGetUniformivARB(GLhandleARB programObj, GLint location, GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg programObj\r\nldarg location\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]int32,[out]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg programObj\r\nldarg location\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]int32,[out]int32)\r\nret")]
        #endif
        public static void glGetUniformivARB([In] IntPtr extensionPointer, IntPtr programObj, int location, out int parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetUniformivARB([In] IntPtr extensionPointer, IntPtr programObj, int location, out int parameters)

        #region void glGetUniformivARB([In] IntPtr extensionPointer, IntPtr programObj, int location, int[] parameters)
        // GLvoid glGetUniformivARB(GLhandleARB programObj, GLint location, GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg programObj\r\nldarg location\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]int32,[out]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg programObj\r\nldarg location\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]int32,[out]int32[])\r\nret")]
        #endif
        public static void glGetUniformivARB([In] IntPtr extensionPointer, IntPtr programObj, int location, int[] parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetUniformivARB([In] IntPtr extensionPointer, IntPtr programObj, int location, int[] parameters)

        #region void glGetUniformivARB([In] IntPtr extensionPointer, IntPtr programObj, int location, IntPtr parameters)
        // GLvoid glGetUniformivARB(GLhandleARB programObj, GLint location, GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg programObj\r\nldarg location\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg programObj\r\nldarg location\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGetUniformivARB([In] IntPtr extensionPointer, IntPtr programObj, int location, IntPtr parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetUniformivARB([In] IntPtr extensionPointer, IntPtr programObj, int location, IntPtr parameters)

        #region void glGetUniformivARB([In] IntPtr extensionPointer, IntPtr programObj, int location, int* parameters)
        // GLvoid glGetUniformivARB(GLhandleARB programObj, GLint location, GLint* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg programObj\r\nldarg location\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]int32,[out]int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg programObj\r\nldarg location\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]int32,[out]int32*)\r\nret")]
        #endif
        public static unsafe void glGetUniformivARB([In] IntPtr extensionPointer, IntPtr programObj, int location, int* parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetUniformivARB([In] IntPtr extensionPointer, IntPtr programObj, int location, int* parameters)
        #endregion Overloads for GLvoid glGetUniformivARB(GLhandleARB programObj, GLint location, GLint* parameters)

        #region Overloads for GLvoid glGetShaderSourceARB(GLhandleARB obj, GLsizei maxLength, GLsizei* length, GLcharARB* source)
        #region void glGetShaderSourceARB([In] IntPtr extensionPointer, IntPtr obj, int maxLength, out int length, System.Text.StringBuilder source)
        // GLvoid glGetShaderSourceARB(GLhandleARB obj, GLsizei maxLength, GLsizei* length, GLcharARB* source)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg obj\r\nldarg maxLength\r\nldarg length\r\nldarg source\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]int32,[out]int32,[in][out]class [mscorlib]System.Text.StringBuilder)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg obj\r\nldarg maxLength\r\nldarg length\r\nldarg source\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]int32,[out]int32,[in][out]class [mscorlib]System.Text.StringBuilder)\r\nret")]
        #endif
        public static void glGetShaderSourceARB([In] IntPtr extensionPointer, IntPtr obj, int maxLength, out int length, System.Text.StringBuilder source) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetShaderSourceARB([In] IntPtr extensionPointer, IntPtr obj, int maxLength, out int length, System.Text.StringBuilder source)

        #region void glGetShaderSourceARB([In] IntPtr extensionPointer, IntPtr obj, int maxLength, int[] length, System.Text.StringBuilder source)
        // GLvoid glGetShaderSourceARB(GLhandleARB obj, GLsizei maxLength, GLsizei* length, GLcharARB* source)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg obj\r\nldarg maxLength\r\nldarg length\r\nldarg source\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]int32,[out]int32[],[in][out]class [mscorlib]System.Text.StringBuilder)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg obj\r\nldarg maxLength\r\nldarg length\r\nldarg source\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]int32,[out]int32[],[in][out]class [mscorlib]System.Text.StringBuilder)\r\nret")]
        #endif
        public static void glGetShaderSourceARB([In] IntPtr extensionPointer, IntPtr obj, int maxLength, int[] length, System.Text.StringBuilder source) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetShaderSourceARB([In] IntPtr extensionPointer, IntPtr obj, int maxLength, int[] length, System.Text.StringBuilder source)

        #region void glGetShaderSourceARB([In] IntPtr extensionPointer, IntPtr obj, int maxLength, IntPtr length, System.Text.StringBuilder source)
        // GLvoid glGetShaderSourceARB(GLhandleARB obj, GLsizei maxLength, GLsizei* length, GLcharARB* source)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg obj\r\nldarg maxLength\r\nldarg length\r\nldarg source\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]int32,[out]native int,[in][out]class [mscorlib]System.Text.StringBuilder)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg obj\r\nldarg maxLength\r\nldarg length\r\nldarg source\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]int32,[out]native int,[in][out]class [mscorlib]System.Text.StringBuilder)\r\nret")]
        #endif
        public static void glGetShaderSourceARB([In] IntPtr extensionPointer, IntPtr obj, int maxLength, IntPtr length, System.Text.StringBuilder source) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetShaderSourceARB([In] IntPtr extensionPointer, IntPtr obj, int maxLength, IntPtr length, System.Text.StringBuilder source)

        #region void glGetShaderSourceARB([In] IntPtr extensionPointer, IntPtr obj, int maxLength, int* length, System.Text.StringBuilder source)
        // GLvoid glGetShaderSourceARB(GLhandleARB obj, GLsizei maxLength, GLsizei* length, GLcharARB* source)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg obj\r\nldarg maxLength\r\nldarg length\r\nldarg source\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]int32,[out]int32*,[in][out]class [mscorlib]System.Text.StringBuilder)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg obj\r\nldarg maxLength\r\nldarg length\r\nldarg source\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]int32,[out]int32*,[in][out]class [mscorlib]System.Text.StringBuilder)\r\nret")]
        #endif
        public static unsafe void glGetShaderSourceARB([In] IntPtr extensionPointer, IntPtr obj, int maxLength, int* length, System.Text.StringBuilder source) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetShaderSourceARB([In] IntPtr extensionPointer, IntPtr obj, int maxLength, int* length, System.Text.StringBuilder source)
        #endregion Overloads for GLvoid glGetShaderSourceARB(GLhandleARB obj, GLsizei maxLength, GLsizei* length, GLcharARB* source)
        #endregion GL_ARB_shader_objects Methods
        #endregion GL_ARB_shader_objects (30)

        #region GL_ARB_vertex_shader (31)
        #region GL_ARB_vertex_shader Constants
        #region GL_VERTEX_SHADER_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VERTEX_SHADER_ARB 0x8B31
        public const int GL_VERTEX_SHADER_ARB = 0x8B31;
        #endregion GL_VERTEX_SHADER_ARB

        #region GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB 0x8B4A
        public const int GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB = 0x8B4A;
        #endregion GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB

        #region GL_MAX_VARYING_FLOATS_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAX_VARYING_FLOATS_ARB 0x8B4B
        public const int GL_MAX_VARYING_FLOATS_ARB = 0x8B4B;
        #endregion GL_MAX_VARYING_FLOATS_ARB

        // GL_MAX_VERTEX_ATTRIBS_ARB is already defined in GL_ARB_vertex_program (26)

        // GL_MAX_TEXTURE_IMAGE_UNITS_ARB is already defined in GL_ARB_fragment_program (27)

        #region GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB 0x8B4C
        public const int GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB = 0x8B4C;
        #endregion GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB

        #region GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB 0x8B4D
        public const int GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB = 0x8B4D;
        #endregion GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB

        // GL_MAX_TEXTURE_COORDS_ARB is already defined in GL_ARB_fragment_program (27)

        // GL_VERTEX_PROGRAM_POINT_SIZE_ARB is already defined in GL_ARB_vertex_program (26)

        // GL_VERTEX_PROGRAM_TWO_SIDE_ARB is already defined in GL_ARB_vertex_program (26)

        // GL_OBJECT_TYPE_ARB is already defined in GL_ARB_shader_objects (30)

        // GL_OBJECT_SUBTYPE_ARB is already defined in GL_ARB_shader_objects (30)

        #region GL_OBJECT_ACTIVE_ATTRIBUTES_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OBJECT_ACTIVE_ATTRIBUTES_ARB 0x8B89
        public const int GL_OBJECT_ACTIVE_ATTRIBUTES_ARB = 0x8B89;
        #endregion GL_OBJECT_ACTIVE_ATTRIBUTES_ARB

        #region GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB 0x8B8A
        public const int GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB = 0x8B8A;
        #endregion GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB

        // GL_SHADER_OBJECT_ARB is already defined in GL_ARB_shader_objects (30)

        // GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB is already defined in GL_ARB_vertex_program (26)

        // GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB is already defined in GL_ARB_vertex_program (26)

        // GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB is already defined in GL_ARB_vertex_program (26)

        // GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB is already defined in GL_ARB_vertex_program (26)

        // GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB is already defined in GL_ARB_vertex_program (26)

        // GL_CURRENT_VERTEX_ATTRIB_ARB is already defined in GL_ARB_vertex_program (26)

        // GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB is already defined in GL_ARB_vertex_program (26)

        // GL_FLOAT_VEC2_ARB is already defined in GL_ARB_shader_objects (30)

        // GL_FLOAT_VEC3_ARB is already defined in GL_ARB_shader_objects (30)

        // GL_FLOAT_VEC4_ARB is already defined in GL_ARB_shader_objects (30)

        // GL_FLOAT_MAT2_ARB is already defined in GL_ARB_shader_objects (30)

        // GL_FLOAT_MAT3_ARB is already defined in GL_ARB_shader_objects (30)

        // GL_FLOAT_MAT4_ARB is already defined in GL_ARB_shader_objects (30)
        #endregion GL_ARB_vertex_shader Constants

        #region GL_ARB_vertex_shader Methods
        // glVertexAttrib1fARB is already defined in GL_ARB_vertex_program (26)

        // glVertexAttrib1sARB is already defined in GL_ARB_vertex_program (26)

        // glVertexAttrib1dARB is already defined in GL_ARB_vertex_program (26)

        // glVertexAttrib2fARB is already defined in GL_ARB_vertex_program (26)

        // glVertexAttrib2sARB is already defined in GL_ARB_vertex_program (26)

        // glVertexAttrib2dARB is already defined in GL_ARB_vertex_program (26)

        // glVertexAttrib3fARB is already defined in GL_ARB_vertex_program (26)

        // glVertexAttrib3sARB is already defined in GL_ARB_vertex_program (26)

        // glVertexAttrib3dARB is already defined in GL_ARB_vertex_program (26)

        // glVertexAttrib4fARB is already defined in GL_ARB_vertex_program (26)

        // glVertexAttrib4sARB is already defined in GL_ARB_vertex_program (26)

        // glVertexAttrib4dARB is already defined in GL_ARB_vertex_program (26)

        // glVertexAttrib4NubARB is already defined in GL_ARB_vertex_program (26)

        // glVertexAttrib1fvARB is already defined in GL_ARB_vertex_program (26)

        // glVertexAttrib1svARB is already defined in GL_ARB_vertex_program (26)

        // glVertexAttrib1dvARB is already defined in GL_ARB_vertex_program (26)

        // glVertexAttrib2fvARB is already defined in GL_ARB_vertex_program (26)

        // glVertexAttrib2svARB is already defined in GL_ARB_vertex_program (26)

        // glVertexAttrib2dvARB is already defined in GL_ARB_vertex_program (26)

        // glVertexAttrib3fvARB is already defined in GL_ARB_vertex_program (26)

        // glVertexAttrib3svARB is already defined in GL_ARB_vertex_program (26)

        // glVertexAttrib3dvARB is already defined in GL_ARB_vertex_program (26)

        // glVertexAttrib4fvARB is already defined in GL_ARB_vertex_program (26)

        // glVertexAttrib4svARB is already defined in GL_ARB_vertex_program (26)

        // glVertexAttrib4dvARB is already defined in GL_ARB_vertex_program (26)

        // glVertexAttrib4ivARB is already defined in GL_ARB_vertex_program (26)

        // glVertexAttrib4bvARB is already defined in GL_ARB_vertex_program (26)

        // glVertexAttrib4ubvARB is already defined in GL_ARB_vertex_program (26)

        // glVertexAttrib4usvARB is already defined in GL_ARB_vertex_program (26)

        // glVertexAttrib4uivARB is already defined in GL_ARB_vertex_program (26)

        // glVertexAttrib4NbvARB is already defined in GL_ARB_vertex_program (26)

        // glVertexAttrib4NsvARB is already defined in GL_ARB_vertex_program (26)

        // glVertexAttrib4NivARB is already defined in GL_ARB_vertex_program (26)

        // glVertexAttrib4NubvARB is already defined in GL_ARB_vertex_program (26)

        // glVertexAttrib4NusvARB is already defined in GL_ARB_vertex_program (26)

        // glVertexAttrib4NuivARB is already defined in GL_ARB_vertex_program (26)

        // glVertexAttribPointerARB is already defined in GL_ARB_vertex_program (26)

        // glEnableVertexAttribArrayARB is already defined in GL_ARB_vertex_program (26)

        // glDisableVertexAttribArrayARB is already defined in GL_ARB_vertex_program (26)

        // glGetVertexAttribdvARB is already defined in GL_ARB_vertex_program (26)

        // glGetVertexAttribfvARB is already defined in GL_ARB_vertex_program (26)

        // glGetVertexAttribivARB is already defined in GL_ARB_vertex_program (26)

        // glGetVertexAttribPointervARB is already defined in GL_ARB_vertex_program (26)

        #region void glBindAttribLocationARB([In] IntPtr extensionPointer, IntPtr programObj, int index, string name)
        // GLvoid glBindAttribLocationARB(GLhandleARB programObj, GLuint index, const GLcharARB* name)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg programObj\r\nldarg index\r\nldarg name\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]int32,[in]string)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg programObj\r\nldarg index\r\nldarg name\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]int32,[in]string)\r\nret")]
        #endif
        public static void glBindAttribLocationARB([In] IntPtr extensionPointer, IntPtr programObj, int index, string name) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glBindAttribLocationARB([In] IntPtr extensionPointer, IntPtr programObj, int index, string name)

        #region Overloads for GLvoid glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei* length, GLint* size, GLenum* type, GLcharARB* name)
        #region void glGetActiveAttribARB([In] IntPtr extensionPointer, IntPtr programObj, int index, int maxLength, int[] length, int[] size, int[] type, System.Text.StringBuilder name)
        // GLvoid glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei* length, GLint* size, GLenum* type, GLcharARB* name)
        #if WIN32
        [IlasmAttribute(".maxstack 8\r\nldarg programObj\r\nldarg index\r\nldarg maxLength\r\nldarg length\r\nldarg size\r\nldarg type\r\nldarg name\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]int32,[in]int32,[out]int32[],[out]int32[],[out]int32[],[in][out]class [mscorlib]System.Text.StringBuilder)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 8\r\nldarg programObj\r\nldarg index\r\nldarg maxLength\r\nldarg length\r\nldarg size\r\nldarg type\r\nldarg name\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]int32,[in]int32,[out]int32[],[out]int32[],[out]int32[],[in][out]class [mscorlib]System.Text.StringBuilder)\r\nret")]
        #endif
        public static void glGetActiveAttribARB([In] IntPtr extensionPointer, IntPtr programObj, int index, int maxLength, int[] length, int[] size, int[] type, System.Text.StringBuilder name) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetActiveAttribARB([In] IntPtr extensionPointer, IntPtr programObj, int index, int maxLength, int[] length, int[] size, int[] type, System.Text.StringBuilder name)

        #region void glGetActiveAttribARB([In] IntPtr extensionPointer, IntPtr programObj, int index, int maxLength, out int length, out int size, out int type, System.Text.StringBuilder name)
        // GLvoid glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei* length, GLint* size, GLenum* type, GLcharARB* name)
        #if WIN32
        [IlasmAttribute(".maxstack 8\r\nldarg programObj\r\nldarg index\r\nldarg maxLength\r\nldarg length\r\nldarg size\r\nldarg type\r\nldarg name\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]int32,[in]int32,[out]int32,[out]int32,[out]int32,[in][out]class [mscorlib]System.Text.StringBuilder)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 8\r\nldarg programObj\r\nldarg index\r\nldarg maxLength\r\nldarg length\r\nldarg size\r\nldarg type\r\nldarg name\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]int32,[in]int32,[out]int32,[out]int32,[out]int32,[in][out]class [mscorlib]System.Text.StringBuilder)\r\nret")]
        #endif
        public static void glGetActiveAttribARB([In] IntPtr extensionPointer, IntPtr programObj, int index, int maxLength, out int length, out int size, out int type, System.Text.StringBuilder name) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetActiveAttribARB([In] IntPtr extensionPointer, IntPtr programObj, int index, int maxLength, out int length, out int size, out int type, System.Text.StringBuilder name)

        #region void glGetActiveAttribARB([In] IntPtr extensionPointer, IntPtr programObj, int index, int maxLength, IntPtr length, IntPtr size, IntPtr type, System.Text.StringBuilder name)
        // GLvoid glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei* length, GLint* size, GLenum* type, GLcharARB* name)
        #if WIN32
        [IlasmAttribute(".maxstack 8\r\nldarg programObj\r\nldarg index\r\nldarg maxLength\r\nldarg length\r\nldarg size\r\nldarg type\r\nldarg name\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]int32,[in]int32,[out]native int,[out]native int,[out]native int,[in][out]class [mscorlib]System.Text.StringBuilder)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 8\r\nldarg programObj\r\nldarg index\r\nldarg maxLength\r\nldarg length\r\nldarg size\r\nldarg type\r\nldarg name\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]int32,[in]int32,[out]native int,[out]native int,[out]native int,[in][out]class [mscorlib]System.Text.StringBuilder)\r\nret")]
        #endif
        public static void glGetActiveAttribARB([In] IntPtr extensionPointer, IntPtr programObj, int index, int maxLength, IntPtr length, IntPtr size, IntPtr type, System.Text.StringBuilder name) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetActiveAttribARB([In] IntPtr extensionPointer, IntPtr programObj, int index, int maxLength, IntPtr length, IntPtr size, IntPtr type, System.Text.StringBuilder name)

        #region void glGetActiveAttribARB([In] IntPtr extensionPointer, IntPtr programObj, uint index, int maxLength, IntPtr length, IntPtr size, IntPtr type, System.Text.StringBuilder name)
        // GLvoid glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei* length, GLint* size, GLenum* type, GLcharARB* name)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 8\r\nldarg programObj\r\nldarg index\r\nldarg maxLength\r\nldarg length\r\nldarg size\r\nldarg type\r\nldarg name\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]unsigned int32,[in]int32,[out]native int,[out]native int,[out]native int,[in][out]class [mscorlib]System.Text.StringBuilder)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 8\r\nldarg programObj\r\nldarg index\r\nldarg maxLength\r\nldarg length\r\nldarg size\r\nldarg type\r\nldarg name\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]unsigned int32,[in]int32,[out]native int,[out]native int,[out]native int,[in][out]class [mscorlib]System.Text.StringBuilder)\r\nret")]
        #endif
        public static void glGetActiveAttribARB([In] IntPtr extensionPointer, IntPtr programObj, uint index, int maxLength, IntPtr length, IntPtr size, IntPtr type, System.Text.StringBuilder name) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetActiveAttribARB([In] IntPtr extensionPointer, IntPtr programObj, uint index, int maxLength, IntPtr length, IntPtr size, IntPtr type, System.Text.StringBuilder name)

        #region void glGetActiveAttribARB([In] IntPtr extensionPointer, IntPtr programObj, uint index, int maxLength, out int length, out int size, out int type, System.Text.StringBuilder name)
        // GLvoid glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei* length, GLint* size, GLenum* type, GLcharARB* name)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 8\r\nldarg programObj\r\nldarg index\r\nldarg maxLength\r\nldarg length\r\nldarg size\r\nldarg type\r\nldarg name\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]unsigned int32,[in]int32,[out]int32,[out]int32,[out]int32,[in][out]class [mscorlib]System.Text.StringBuilder)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 8\r\nldarg programObj\r\nldarg index\r\nldarg maxLength\r\nldarg length\r\nldarg size\r\nldarg type\r\nldarg name\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]unsigned int32,[in]int32,[out]int32,[out]int32,[out]int32,[in][out]class [mscorlib]System.Text.StringBuilder)\r\nret")]
        #endif
        public static void glGetActiveAttribARB([In] IntPtr extensionPointer, IntPtr programObj, uint index, int maxLength, out int length, out int size, out int type, System.Text.StringBuilder name) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetActiveAttribARB([In] IntPtr extensionPointer, IntPtr programObj, uint index, int maxLength, out int length, out int size, out int type, System.Text.StringBuilder name)

        #region void glGetActiveAttribARB([In] IntPtr extensionPointer, IntPtr programObj, uint index, int maxLength, int[] length, int[] size, int[] type, System.Text.StringBuilder name)
        // GLvoid glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei* length, GLint* size, GLenum* type, GLcharARB* name)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 8\r\nldarg programObj\r\nldarg index\r\nldarg maxLength\r\nldarg length\r\nldarg size\r\nldarg type\r\nldarg name\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]unsigned int32,[in]int32,[out]int32[],[out]int32[],[out]int32[],[in][out]class [mscorlib]System.Text.StringBuilder)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 8\r\nldarg programObj\r\nldarg index\r\nldarg maxLength\r\nldarg length\r\nldarg size\r\nldarg type\r\nldarg name\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]unsigned int32,[in]int32,[out]int32[],[out]int32[],[out]int32[],[in][out]class [mscorlib]System.Text.StringBuilder)\r\nret")]
        #endif
        public static void glGetActiveAttribARB([In] IntPtr extensionPointer, IntPtr programObj, uint index, int maxLength, int[] length, int[] size, int[] type, System.Text.StringBuilder name) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetActiveAttribARB([In] IntPtr extensionPointer, IntPtr programObj, uint index, int maxLength, int[] length, int[] size, int[] type, System.Text.StringBuilder name)

        #region void glGetActiveAttribARB([In] IntPtr extensionPointer, IntPtr programObj, uint index, int maxLength, int* length, int* size, int* type, System.Text.StringBuilder name)
        // GLvoid glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei* length, GLint* size, GLenum* type, GLcharARB* name)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 8\r\nldarg programObj\r\nldarg index\r\nldarg maxLength\r\nldarg length\r\nldarg size\r\nldarg type\r\nldarg name\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]unsigned int32,[in]int32,[out]int32*,[out]int32*,[out]int32*,[in][out]class [mscorlib]System.Text.StringBuilder)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 8\r\nldarg programObj\r\nldarg index\r\nldarg maxLength\r\nldarg length\r\nldarg size\r\nldarg type\r\nldarg name\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]unsigned int32,[in]int32,[out]int32*,[out]int32*,[out]int32*,[in][out]class [mscorlib]System.Text.StringBuilder)\r\nret")]
        #endif
        public static unsafe void glGetActiveAttribARB([In] IntPtr extensionPointer, IntPtr programObj, uint index, int maxLength, int* length, int* size, int* type, System.Text.StringBuilder name) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetActiveAttribARB([In] IntPtr extensionPointer, IntPtr programObj, uint index, int maxLength, int* length, int* size, int* type, System.Text.StringBuilder name)
        #endregion Overloads for GLvoid glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei* length, GLint* size, GLenum* type, GLcharARB* name)

        #region int glGetAttribLocationARB([In] IntPtr extensionPointer, IntPtr programObj, string name)
        // GLint glGetAttribLocationARB(GLhandleARB programObj, const GLcharARB* name)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg programObj\r\nldarg name\r\nldarg extensionPointer\r\ncalli unmanaged stdcall int32([in]native int,[in]string)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg programObj\r\nldarg name\r\nldarg extensionPointer\r\ncalli unmanaged cdecl int32([in]native int,[in]string)\r\nret")]
        #endif
        public static int glGetAttribLocationARB([In] IntPtr extensionPointer, IntPtr programObj, string name) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion int glGetAttribLocationARB([In] IntPtr extensionPointer, IntPtr programObj, string name)
        #endregion GL_ARB_vertex_shader Methods
        #endregion GL_ARB_vertex_shader (31)

        #region GL_ARB_fragment_shader (32)
        #region GL_ARB_fragment_shader Constants
        #region GL_FRAGMENT_SHADER_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_FRAGMENT_SHADER_ARB 0x8B30
        public const int GL_FRAGMENT_SHADER_ARB = 0x8B30;
        #endregion GL_FRAGMENT_SHADER_ARB

        #region GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB 0x8B49
        public const int GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB = 0x8B49;
        #endregion GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB

        // GL_MAX_TEXTURE_COORDS_ARB is already defined in GL_ARB_fragment_program (27)

        // GL_MAX_TEXTURE_IMAGE_UNITS_ARB is already defined in GL_ARB_fragment_program (27)

        // GL_OBJECT_TYPE_ARB is already defined in GL_ARB_shader_objects (30)

        // GL_OBJECT_SUBTYPE_ARB is already defined in GL_ARB_shader_objects (30)

        // GL_SHADER_OBJECT_ARB is already defined in GL_ARB_shader_objects (30)
        #endregion GL_ARB_fragment_shader Constants
        #endregion GL_ARB_fragment_shader (32)

        #region GL_ARB_shading_language_100 (33)
        #endregion GL_ARB_shading_language_100 (33)

        #region GL_ARB_texture_non_power_of_two (34)
        #endregion GL_ARB_texture_non_power_of_two (34)

        #region GL_ARB_point_sprite (35)
        #region GL_ARB_point_sprite Constants
        #region GL_POINT_SPRITE_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_POINT_SPRITE_ARB 0x8861
        public const int GL_POINT_SPRITE_ARB = 0x8861;
        #endregion GL_POINT_SPRITE_ARB

        #region GL_COORD_REPLACE_ARB
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COORD_REPLACE_ARB 0x8862
        public const int GL_COORD_REPLACE_ARB = 0x8862;
        #endregion GL_COORD_REPLACE_ARB
        #endregion GL_ARB_point_sprite Constants
        #endregion GL_ARB_point_sprite (35)

        #region GL_ARB_imaging (N/A)
        #region GL_ARB_imaging Constants
        #region GL_IGNORE_BORDER
        /// <summary>
        /// 
        /// </summary>
        // #define GL_IGNORE_BORDER 0x8150
        public const int GL_IGNORE_BORDER = 0x8150;
        #endregion GL_IGNORE_BORDER

        #region GL_WRAP_BORDER
        /// <summary>
        /// 
        /// </summary>
        // #define GL_WRAP_BORDER 0x8152
        public const int GL_WRAP_BORDER = 0x8152;
        #endregion GL_WRAP_BORDER
        #endregion GL_ARB_imaging Constants

        #region GL_ARB_imaging Methods
        #region Overloads for GLvoid glColorTable(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid* table)
        #region void glColorTable([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, short[] table)
        // GLvoid glColorTable(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid* table)
        #if WIN32
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg table\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg table\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int16[])\r\nret")]
        #endif
        public static void glColorTable([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, short[] table) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColorTable([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, short[] table)

        #region void glColorTable([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, float[] table)
        // GLvoid glColorTable(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid* table)
        #if WIN32
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg table\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg table\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]float32[])\r\nret")]
        #endif
        public static void glColorTable([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, float[] table) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColorTable([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, float[] table)

        #region void glColorTable([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, int[] table)
        // GLvoid glColorTable(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid* table)
        #if WIN32
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg table\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg table\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32[])\r\nret")]
        #endif
        public static void glColorTable([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, int[] table) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColorTable([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, int[] table)

        #region void glColorTable([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, IntPtr table)
        // GLvoid glColorTable(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid* table)
        #if WIN32
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg table\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg table\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]native int)\r\nret")]
        #endif
        public static void glColorTable([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, IntPtr table) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColorTable([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, IntPtr table)

        #region void glColorTable([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, byte[] table)
        // GLvoid glColorTable(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid* table)
        #if WIN32
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg table\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int8[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg table\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int8[])\r\nret")]
        #endif
        public static void glColorTable([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, byte[] table) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColorTable([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, byte[] table)

        #region void glColorTable([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, double[] table)
        // GLvoid glColorTable(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid* table)
        #if WIN32
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg table\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]float64[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg table\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]float64[])\r\nret")]
        #endif
        public static void glColorTable([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, double[] table) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColorTable([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, double[] table)

        #region void glColorTable([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, uint[] table)
        // GLvoid glColorTable(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid* table)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg table\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int32[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg table\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int32[])\r\nret")]
        #endif
        public static void glColorTable([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, uint[] table) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColorTable([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, uint[] table)

        #region void glColorTable([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, sbyte[] table)
        // GLvoid glColorTable(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid* table)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg table\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int8[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg table\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int8[])\r\nret")]
        #endif
        public static void glColorTable([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, sbyte[] table) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColorTable([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, sbyte[] table)

        #region void glColorTable([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, ushort[] table)
        // GLvoid glColorTable(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid* table)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg table\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int16[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg table\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int16[])\r\nret")]
        #endif
        public static void glColorTable([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, ushort[] table) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColorTable([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, ushort[] table)

        #region void glColorTable([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, void* table)
        // GLvoid glColorTable(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid* table)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg table\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]void*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg table\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]void*)\r\nret")]
        #endif
        public static unsafe void glColorTable([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, void* table) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColorTable([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, void* table)
        #endregion Overloads for GLvoid glColorTable(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid* table)

        #region Overloads for GLvoid glColorTableParameterfv(GLenum target, GLenum pname, const GLfloat* parameters)
        #region void glColorTableParameterfv([In] IntPtr extensionPointer, int target, int pname, ref float parameters)
        // GLvoid glColorTableParameterfv(GLenum target, GLenum pname, const GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in][out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in][out]float32)\r\nret")]
        #endif
        public static void glColorTableParameterfv([In] IntPtr extensionPointer, int target, int pname, ref float parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColorTableParameterfv([In] IntPtr extensionPointer, int target, int pname, ref float parameters)

        #region void glColorTableParameterfv([In] IntPtr extensionPointer, int target, int pname, float[] parameters)
        // GLvoid glColorTableParameterfv(GLenum target, GLenum pname, const GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]float32[])\r\nret")]
        #endif
        public static void glColorTableParameterfv([In] IntPtr extensionPointer, int target, int pname, float[] parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColorTableParameterfv([In] IntPtr extensionPointer, int target, int pname, float[] parameters)

        #region void glColorTableParameterfv([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters)
        // GLvoid glColorTableParameterfv(GLenum target, GLenum pname, const GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]native int)\r\nret")]
        #endif
        public static void glColorTableParameterfv([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColorTableParameterfv([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters)

        #region void glColorTableParameterfv([In] IntPtr extensionPointer, int target, int pname, float* parameters)
        // GLvoid glColorTableParameterfv(GLenum target, GLenum pname, const GLfloat* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]float32*)\r\nret")]
        #endif
        public static unsafe void glColorTableParameterfv([In] IntPtr extensionPointer, int target, int pname, float* parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColorTableParameterfv([In] IntPtr extensionPointer, int target, int pname, float* parameters)
        #endregion Overloads for GLvoid glColorTableParameterfv(GLenum target, GLenum pname, const GLfloat* parameters)

        #region Overloads for GLvoid glColorTableParameteriv(GLenum target, GLenum pname, const GLint* parameters)
        #region void glColorTableParameteriv([In] IntPtr extensionPointer, int target, int pname, ref int parameters)
        // GLvoid glColorTableParameteriv(GLenum target, GLenum pname, const GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in][out]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in][out]int32)\r\nret")]
        #endif
        public static void glColorTableParameteriv([In] IntPtr extensionPointer, int target, int pname, ref int parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColorTableParameteriv([In] IntPtr extensionPointer, int target, int pname, ref int parameters)

        #region void glColorTableParameteriv([In] IntPtr extensionPointer, int target, int pname, int[] parameters)
        // GLvoid glColorTableParameteriv(GLenum target, GLenum pname, const GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32[])\r\nret")]
        #endif
        public static void glColorTableParameteriv([In] IntPtr extensionPointer, int target, int pname, int[] parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColorTableParameteriv([In] IntPtr extensionPointer, int target, int pname, int[] parameters)

        #region void glColorTableParameteriv([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters)
        // GLvoid glColorTableParameteriv(GLenum target, GLenum pname, const GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]native int)\r\nret")]
        #endif
        public static void glColorTableParameteriv([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColorTableParameteriv([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters)

        #region void glColorTableParameteriv([In] IntPtr extensionPointer, int target, int pname, int* parameters)
        // GLvoid glColorTableParameteriv(GLenum target, GLenum pname, const GLint* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32*)\r\nret")]
        #endif
        public static unsafe void glColorTableParameteriv([In] IntPtr extensionPointer, int target, int pname, int* parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColorTableParameteriv([In] IntPtr extensionPointer, int target, int pname, int* parameters)
        #endregion Overloads for GLvoid glColorTableParameteriv(GLenum target, GLenum pname, const GLint* parameters)

        #region void glCopyColorTable([In] IntPtr extensionPointer, int target, int internalformat, int x, int y, int width)
        // GLvoid glCopyColorTable(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg target\r\nldarg internalformat\r\nldarg x\r\nldarg y\r\nldarg width\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg target\r\nldarg internalformat\r\nldarg x\r\nldarg y\r\nldarg width\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32)\r\nret")]
        #endif
        public static void glCopyColorTable([In] IntPtr extensionPointer, int target, int internalformat, int x, int y, int width) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glCopyColorTable([In] IntPtr extensionPointer, int target, int internalformat, int x, int y, int width)

        #region Overloads for GLvoid glGetColorTable(GLenum target, GLenum format, GLenum type, GLvoid* table)
        #region void glGetColorTable([In] IntPtr extensionPointer, int target, int format, int type, short[] table)
        // GLvoid glGetColorTable(GLenum target, GLenum format, GLenum type, GLvoid* table)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg table\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[out]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg table\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[out]int16[])\r\nret")]
        #endif
        public static void glGetColorTable([In] IntPtr extensionPointer, int target, int format, int type, short[] table) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetColorTable([In] IntPtr extensionPointer, int target, int format, int type, short[] table)

        #region void glGetColorTable([In] IntPtr extensionPointer, int target, int format, int type, float[] table)
        // GLvoid glGetColorTable(GLenum target, GLenum format, GLenum type, GLvoid* table)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg table\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[out]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg table\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[out]float32[])\r\nret")]
        #endif
        public static void glGetColorTable([In] IntPtr extensionPointer, int target, int format, int type, float[] table) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetColorTable([In] IntPtr extensionPointer, int target, int format, int type, float[] table)

        #region void glGetColorTable([In] IntPtr extensionPointer, int target, int format, int type, int[] table)
        // GLvoid glGetColorTable(GLenum target, GLenum format, GLenum type, GLvoid* table)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg table\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[out]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg table\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[out]int32[])\r\nret")]
        #endif
        public static void glGetColorTable([In] IntPtr extensionPointer, int target, int format, int type, int[] table) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetColorTable([In] IntPtr extensionPointer, int target, int format, int type, int[] table)

        #region void glGetColorTable([In] IntPtr extensionPointer, int target, int format, int type, IntPtr table)
        // GLvoid glGetColorTable(GLenum target, GLenum format, GLenum type, GLvoid* table)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg table\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg table\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGetColorTable([In] IntPtr extensionPointer, int target, int format, int type, IntPtr table) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetColorTable([In] IntPtr extensionPointer, int target, int format, int type, IntPtr table)

        #region void glGetColorTable([In] IntPtr extensionPointer, int target, int format, int type, byte[] table)
        // GLvoid glGetColorTable(GLenum target, GLenum format, GLenum type, GLvoid* table)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg table\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[out]unsigned int8[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg table\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[out]unsigned int8[])\r\nret")]
        #endif
        public static void glGetColorTable([In] IntPtr extensionPointer, int target, int format, int type, byte[] table) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetColorTable([In] IntPtr extensionPointer, int target, int format, int type, byte[] table)

        #region void glGetColorTable([In] IntPtr extensionPointer, int target, int format, int type, double[] table)
        // GLvoid glGetColorTable(GLenum target, GLenum format, GLenum type, GLvoid* table)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg table\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[out]float64[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg table\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[out]float64[])\r\nret")]
        #endif
        public static void glGetColorTable([In] IntPtr extensionPointer, int target, int format, int type, double[] table) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetColorTable([In] IntPtr extensionPointer, int target, int format, int type, double[] table)

        #region void glGetColorTable([In] IntPtr extensionPointer, int target, int format, int type, uint[] table)
        // GLvoid glGetColorTable(GLenum target, GLenum format, GLenum type, GLvoid* table)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg table\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[out]unsigned int32[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg table\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[out]unsigned int32[])\r\nret")]
        #endif
        public static void glGetColorTable([In] IntPtr extensionPointer, int target, int format, int type, uint[] table) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetColorTable([In] IntPtr extensionPointer, int target, int format, int type, uint[] table)

        #region void glGetColorTable([In] IntPtr extensionPointer, int target, int format, int type, sbyte[] table)
        // GLvoid glGetColorTable(GLenum target, GLenum format, GLenum type, GLvoid* table)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg table\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[out]int8[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg table\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[out]int8[])\r\nret")]
        #endif
        public static void glGetColorTable([In] IntPtr extensionPointer, int target, int format, int type, sbyte[] table) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetColorTable([In] IntPtr extensionPointer, int target, int format, int type, sbyte[] table)

        #region void glGetColorTable([In] IntPtr extensionPointer, int target, int format, int type, ushort[] table)
        // GLvoid glGetColorTable(GLenum target, GLenum format, GLenum type, GLvoid* table)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg table\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[out]unsigned int16[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg table\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[out]unsigned int16[])\r\nret")]
        #endif
        public static void glGetColorTable([In] IntPtr extensionPointer, int target, int format, int type, ushort[] table) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetColorTable([In] IntPtr extensionPointer, int target, int format, int type, ushort[] table)

        #region void glGetColorTable([In] IntPtr extensionPointer, int target, int format, int type, void* table)
        // GLvoid glGetColorTable(GLenum target, GLenum format, GLenum type, GLvoid* table)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg table\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[out]void*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg table\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[out]void*)\r\nret")]
        #endif
        public static unsafe void glGetColorTable([In] IntPtr extensionPointer, int target, int format, int type, void* table) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetColorTable([In] IntPtr extensionPointer, int target, int format, int type, void* table)
        #endregion Overloads for GLvoid glGetColorTable(GLenum target, GLenum format, GLenum type, GLvoid* table)

        #region Overloads for GLvoid glGetColorTableParameterfv(GLenum target, GLenum pname, GLfloat* parameters)
        #region void glGetColorTableParameterfv([In] IntPtr extensionPointer, int target, int pname, out float parameters)
        // GLvoid glGetColorTableParameterfv(GLenum target, GLenum pname, GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]float32)\r\nret")]
        #endif
        public static void glGetColorTableParameterfv([In] IntPtr extensionPointer, int target, int pname, out float parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetColorTableParameterfv([In] IntPtr extensionPointer, int target, int pname, out float parameters)

        #region void glGetColorTableParameterfv([In] IntPtr extensionPointer, int target, int pname, float[] parameters)
        // GLvoid glGetColorTableParameterfv(GLenum target, GLenum pname, GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]float32[])\r\nret")]
        #endif
        public static void glGetColorTableParameterfv([In] IntPtr extensionPointer, int target, int pname, float[] parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetColorTableParameterfv([In] IntPtr extensionPointer, int target, int pname, float[] parameters)

        #region void glGetColorTableParameterfv([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters)
        // GLvoid glGetColorTableParameterfv(GLenum target, GLenum pname, GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGetColorTableParameterfv([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetColorTableParameterfv([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters)

        #region void glGetColorTableParameterfv([In] IntPtr extensionPointer, int target, int pname, float* parameters)
        // GLvoid glGetColorTableParameterfv(GLenum target, GLenum pname, GLfloat* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]float32*)\r\nret")]
        #endif
        public static unsafe void glGetColorTableParameterfv([In] IntPtr extensionPointer, int target, int pname, float* parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetColorTableParameterfv([In] IntPtr extensionPointer, int target, int pname, float* parameters)
        #endregion Overloads for GLvoid glGetColorTableParameterfv(GLenum target, GLenum pname, GLfloat* parameters)

        #region Overloads for GLvoid glGetColorTableParameteriv(GLenum target, GLenum pname, GLint* parameters)
        #region void glGetColorTableParameteriv([In] IntPtr extensionPointer, int target, int pname, out int parameters)
        // GLvoid glGetColorTableParameteriv(GLenum target, GLenum pname, GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]int32)\r\nret")]
        #endif
        public static void glGetColorTableParameteriv([In] IntPtr extensionPointer, int target, int pname, out int parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetColorTableParameteriv([In] IntPtr extensionPointer, int target, int pname, out int parameters)

        #region void glGetColorTableParameteriv([In] IntPtr extensionPointer, int target, int pname, int[] parameters)
        // GLvoid glGetColorTableParameteriv(GLenum target, GLenum pname, GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]int32[])\r\nret")]
        #endif
        public static void glGetColorTableParameteriv([In] IntPtr extensionPointer, int target, int pname, int[] parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetColorTableParameteriv([In] IntPtr extensionPointer, int target, int pname, int[] parameters)

        #region void glGetColorTableParameteriv([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters)
        // GLvoid glGetColorTableParameteriv(GLenum target, GLenum pname, GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGetColorTableParameteriv([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetColorTableParameteriv([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters)

        #region void glGetColorTableParameteriv([In] IntPtr extensionPointer, int target, int pname, int* parameters)
        // GLvoid glGetColorTableParameteriv(GLenum target, GLenum pname, GLint* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]int32*)\r\nret")]
        #endif
        public static unsafe void glGetColorTableParameteriv([In] IntPtr extensionPointer, int target, int pname, int* parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetColorTableParameteriv([In] IntPtr extensionPointer, int target, int pname, int* parameters)
        #endregion Overloads for GLvoid glGetColorTableParameteriv(GLenum target, GLenum pname, GLint* parameters)

        #region Overloads for GLvoid glColorSubTable(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid* data)
        #region void glColorSubTable([In] IntPtr extensionPointer, int target, int start, int count, int format, int type, short[] data)
        // GLvoid glColorSubTable(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid* data)
        #if WIN32
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg start\r\nldarg count\r\nldarg format\r\nldarg type\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg start\r\nldarg count\r\nldarg format\r\nldarg type\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int16[])\r\nret")]
        #endif
        public static void glColorSubTable([In] IntPtr extensionPointer, int target, int start, int count, int format, int type, short[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColorSubTable([In] IntPtr extensionPointer, int target, int start, int count, int format, int type, short[] data)

        #region void glColorSubTable([In] IntPtr extensionPointer, int target, int start, int count, int format, int type, float[] data)
        // GLvoid glColorSubTable(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid* data)
        #if WIN32
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg start\r\nldarg count\r\nldarg format\r\nldarg type\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg start\r\nldarg count\r\nldarg format\r\nldarg type\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]float32[])\r\nret")]
        #endif
        public static void glColorSubTable([In] IntPtr extensionPointer, int target, int start, int count, int format, int type, float[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColorSubTable([In] IntPtr extensionPointer, int target, int start, int count, int format, int type, float[] data)

        #region void glColorSubTable([In] IntPtr extensionPointer, int target, int start, int count, int format, int type, int[] data)
        // GLvoid glColorSubTable(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid* data)
        #if WIN32
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg start\r\nldarg count\r\nldarg format\r\nldarg type\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg start\r\nldarg count\r\nldarg format\r\nldarg type\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32[])\r\nret")]
        #endif
        public static void glColorSubTable([In] IntPtr extensionPointer, int target, int start, int count, int format, int type, int[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColorSubTable([In] IntPtr extensionPointer, int target, int start, int count, int format, int type, int[] data)

        #region void glColorSubTable([In] IntPtr extensionPointer, int target, int start, int count, int format, int type, IntPtr data)
        // GLvoid glColorSubTable(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid* data)
        #if WIN32
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg start\r\nldarg count\r\nldarg format\r\nldarg type\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg start\r\nldarg count\r\nldarg format\r\nldarg type\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]native int)\r\nret")]
        #endif
        public static void glColorSubTable([In] IntPtr extensionPointer, int target, int start, int count, int format, int type, IntPtr data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColorSubTable([In] IntPtr extensionPointer, int target, int start, int count, int format, int type, IntPtr data)

        #region void glColorSubTable([In] IntPtr extensionPointer, int target, int start, int count, int format, int type, byte[] data)
        // GLvoid glColorSubTable(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid* data)
        #if WIN32
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg start\r\nldarg count\r\nldarg format\r\nldarg type\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int8[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg start\r\nldarg count\r\nldarg format\r\nldarg type\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int8[])\r\nret")]
        #endif
        public static void glColorSubTable([In] IntPtr extensionPointer, int target, int start, int count, int format, int type, byte[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColorSubTable([In] IntPtr extensionPointer, int target, int start, int count, int format, int type, byte[] data)

        #region void glColorSubTable([In] IntPtr extensionPointer, int target, int start, int count, int format, int type, double[] data)
        // GLvoid glColorSubTable(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid* data)
        #if WIN32
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg start\r\nldarg count\r\nldarg format\r\nldarg type\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]float64[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg start\r\nldarg count\r\nldarg format\r\nldarg type\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]float64[])\r\nret")]
        #endif
        public static void glColorSubTable([In] IntPtr extensionPointer, int target, int start, int count, int format, int type, double[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColorSubTable([In] IntPtr extensionPointer, int target, int start, int count, int format, int type, double[] data)

        #region void glColorSubTable([In] IntPtr extensionPointer, int target, int start, int count, int format, int type, uint[] data)
        // GLvoid glColorSubTable(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid* data)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg start\r\nldarg count\r\nldarg format\r\nldarg type\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int32[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg start\r\nldarg count\r\nldarg format\r\nldarg type\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int32[])\r\nret")]
        #endif
        public static void glColorSubTable([In] IntPtr extensionPointer, int target, int start, int count, int format, int type, uint[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColorSubTable([In] IntPtr extensionPointer, int target, int start, int count, int format, int type, uint[] data)

        #region void glColorSubTable([In] IntPtr extensionPointer, int target, int start, int count, int format, int type, sbyte[] data)
        // GLvoid glColorSubTable(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid* data)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg start\r\nldarg count\r\nldarg format\r\nldarg type\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int8[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg start\r\nldarg count\r\nldarg format\r\nldarg type\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int8[])\r\nret")]
        #endif
        public static void glColorSubTable([In] IntPtr extensionPointer, int target, int start, int count, int format, int type, sbyte[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColorSubTable([In] IntPtr extensionPointer, int target, int start, int count, int format, int type, sbyte[] data)

        #region void glColorSubTable([In] IntPtr extensionPointer, int target, int start, int count, int format, int type, ushort[] data)
        // GLvoid glColorSubTable(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid* data)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg start\r\nldarg count\r\nldarg format\r\nldarg type\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int16[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg start\r\nldarg count\r\nldarg format\r\nldarg type\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int16[])\r\nret")]
        #endif
        public static void glColorSubTable([In] IntPtr extensionPointer, int target, int start, int count, int format, int type, ushort[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColorSubTable([In] IntPtr extensionPointer, int target, int start, int count, int format, int type, ushort[] data)

        #region void glColorSubTable([In] IntPtr extensionPointer, int target, int start, int count, int format, int type, void* data)
        // GLvoid glColorSubTable(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid* data)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg start\r\nldarg count\r\nldarg format\r\nldarg type\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]void*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg start\r\nldarg count\r\nldarg format\r\nldarg type\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]void*)\r\nret")]
        #endif
        public static unsafe void glColorSubTable([In] IntPtr extensionPointer, int target, int start, int count, int format, int type, void* data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColorSubTable([In] IntPtr extensionPointer, int target, int start, int count, int format, int type, void* data)
        #endregion Overloads for GLvoid glColorSubTable(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid* data)

        #region void glCopyColorSubTable([In] IntPtr extensionPointer, int target, int start, int x, int y, int width)
        // GLvoid glCopyColorSubTable(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg target\r\nldarg start\r\nldarg x\r\nldarg y\r\nldarg width\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg target\r\nldarg start\r\nldarg x\r\nldarg y\r\nldarg width\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32)\r\nret")]
        #endif
        public static void glCopyColorSubTable([In] IntPtr extensionPointer, int target, int start, int x, int y, int width) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glCopyColorSubTable([In] IntPtr extensionPointer, int target, int start, int x, int y, int width)

        #region Overloads for GLvoid glConvolutionFilter1D(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid* image)
        #region void glConvolutionFilter1D([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, short[] image)
        // GLvoid glConvolutionFilter1D(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid* image)
        #if WIN32
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int16[])\r\nret")]
        #endif
        public static void glConvolutionFilter1D([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, short[] image) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glConvolutionFilter1D([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, short[] image)

        #region void glConvolutionFilter1D([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, float[] image)
        // GLvoid glConvolutionFilter1D(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid* image)
        #if WIN32
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]float32[])\r\nret")]
        #endif
        public static void glConvolutionFilter1D([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, float[] image) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glConvolutionFilter1D([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, float[] image)

        #region void glConvolutionFilter1D([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, int[] image)
        // GLvoid glConvolutionFilter1D(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid* image)
        #if WIN32
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32[])\r\nret")]
        #endif
        public static void glConvolutionFilter1D([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, int[] image) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glConvolutionFilter1D([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, int[] image)

        #region void glConvolutionFilter1D([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, IntPtr image)
        // GLvoid glConvolutionFilter1D(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid* image)
        #if WIN32
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]native int)\r\nret")]
        #endif
        public static void glConvolutionFilter1D([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, IntPtr image) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glConvolutionFilter1D([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, IntPtr image)

        #region void glConvolutionFilter1D([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, byte[] image)
        // GLvoid glConvolutionFilter1D(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid* image)
        #if WIN32
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int8[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int8[])\r\nret")]
        #endif
        public static void glConvolutionFilter1D([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, byte[] image) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glConvolutionFilter1D([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, byte[] image)

        #region void glConvolutionFilter1D([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, double[] image)
        // GLvoid glConvolutionFilter1D(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid* image)
        #if WIN32
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]float64[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]float64[])\r\nret")]
        #endif
        public static void glConvolutionFilter1D([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, double[] image) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glConvolutionFilter1D([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, double[] image)

        #region void glConvolutionFilter1D([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, uint[] image)
        // GLvoid glConvolutionFilter1D(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid* image)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int32[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int32[])\r\nret")]
        #endif
        public static void glConvolutionFilter1D([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, uint[] image) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glConvolutionFilter1D([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, uint[] image)

        #region void glConvolutionFilter1D([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, sbyte[] image)
        // GLvoid glConvolutionFilter1D(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid* image)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int8[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int8[])\r\nret")]
        #endif
        public static void glConvolutionFilter1D([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, sbyte[] image) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glConvolutionFilter1D([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, sbyte[] image)

        #region void glConvolutionFilter1D([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, ushort[] image)
        // GLvoid glConvolutionFilter1D(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid* image)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int16[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int16[])\r\nret")]
        #endif
        public static void glConvolutionFilter1D([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, ushort[] image) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glConvolutionFilter1D([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, ushort[] image)

        #region void glConvolutionFilter1D([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, void* image)
        // GLvoid glConvolutionFilter1D(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid* image)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]void*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]void*)\r\nret")]
        #endif
        public static unsafe void glConvolutionFilter1D([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, void* image) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glConvolutionFilter1D([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, void* image)
        #endregion Overloads for GLvoid glConvolutionFilter1D(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid* image)

        #region Overloads for GLvoid glConvolutionFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid* image)
        #region void glConvolutionFilter2D([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, short[] image)
        // GLvoid glConvolutionFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid* image)
        #if WIN32
        [IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int16[])\r\nret")]
        #endif
        public static void glConvolutionFilter2D([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, short[] image) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glConvolutionFilter2D([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, short[] image)

        #region void glConvolutionFilter2D([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, float[] image)
        // GLvoid glConvolutionFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid* image)
        #if WIN32
        [IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]float32[])\r\nret")]
        #endif
        public static void glConvolutionFilter2D([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, float[] image) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glConvolutionFilter2D([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, float[] image)

        #region void glConvolutionFilter2D([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, int[] image)
        // GLvoid glConvolutionFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid* image)
        #if WIN32
        [IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32[])\r\nret")]
        #endif
        public static void glConvolutionFilter2D([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, int[] image) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glConvolutionFilter2D([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, int[] image)

        #region void glConvolutionFilter2D([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, IntPtr image)
        // GLvoid glConvolutionFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid* image)
        #if WIN32
        [IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]native int)\r\nret")]
        #endif
        public static void glConvolutionFilter2D([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, IntPtr image) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glConvolutionFilter2D([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, IntPtr image)

        #region void glConvolutionFilter2D([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, byte[] image)
        // GLvoid glConvolutionFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid* image)
        #if WIN32
        [IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int8[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int8[])\r\nret")]
        #endif
        public static void glConvolutionFilter2D([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, byte[] image) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glConvolutionFilter2D([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, byte[] image)

        #region void glConvolutionFilter2D([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, double[] image)
        // GLvoid glConvolutionFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid* image)
        #if WIN32
        [IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]float64[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]float64[])\r\nret")]
        #endif
        public static void glConvolutionFilter2D([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, double[] image) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glConvolutionFilter2D([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, double[] image)

        #region void glConvolutionFilter2D([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, uint[] image)
        // GLvoid glConvolutionFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid* image)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int32[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int32[])\r\nret")]
        #endif
        public static void glConvolutionFilter2D([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, uint[] image) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glConvolutionFilter2D([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, uint[] image)

        #region void glConvolutionFilter2D([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, sbyte[] image)
        // GLvoid glConvolutionFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid* image)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int8[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int8[])\r\nret")]
        #endif
        public static void glConvolutionFilter2D([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, sbyte[] image) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glConvolutionFilter2D([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, sbyte[] image)

        #region void glConvolutionFilter2D([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, ushort[] image)
        // GLvoid glConvolutionFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid* image)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int16[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int16[])\r\nret")]
        #endif
        public static void glConvolutionFilter2D([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, ushort[] image) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glConvolutionFilter2D([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, ushort[] image)

        #region void glConvolutionFilter2D([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, void* image)
        // GLvoid glConvolutionFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid* image)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]void*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]void*)\r\nret")]
        #endif
        public static unsafe void glConvolutionFilter2D([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, void* image) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glConvolutionFilter2D([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, void* image)
        #endregion Overloads for GLvoid glConvolutionFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid* image)

        #region void glConvolutionParameterf([In] IntPtr extensionPointer, int target, int pname, float parameters)
        // GLvoid glConvolutionParameterf(GLenum target, GLenum pname, GLfloat parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]float32)\r\nret")]
        #endif
        public static void glConvolutionParameterf([In] IntPtr extensionPointer, int target, int pname, float parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glConvolutionParameterf([In] IntPtr extensionPointer, int target, int pname, float parameters)

        #region Overloads for GLvoid glConvolutionParameterfv(GLenum target, GLenum pname, const GLfloat* parameters)
        #region void glConvolutionParameterfv([In] IntPtr extensionPointer, int target, int pname, ref float parameters)
        // GLvoid glConvolutionParameterfv(GLenum target, GLenum pname, const GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in][out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in][out]float32)\r\nret")]
        #endif
        public static void glConvolutionParameterfv([In] IntPtr extensionPointer, int target, int pname, ref float parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glConvolutionParameterfv([In] IntPtr extensionPointer, int target, int pname, ref float parameters)

        #region void glConvolutionParameterfv([In] IntPtr extensionPointer, int target, int pname, float[] parameters)
        // GLvoid glConvolutionParameterfv(GLenum target, GLenum pname, const GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]float32[])\r\nret")]
        #endif
        public static void glConvolutionParameterfv([In] IntPtr extensionPointer, int target, int pname, float[] parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glConvolutionParameterfv([In] IntPtr extensionPointer, int target, int pname, float[] parameters)

        #region void glConvolutionParameterfv([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters)
        // GLvoid glConvolutionParameterfv(GLenum target, GLenum pname, const GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]native int)\r\nret")]
        #endif
        public static void glConvolutionParameterfv([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glConvolutionParameterfv([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters)

        #region void glConvolutionParameterfv([In] IntPtr extensionPointer, int target, int pname, float* parameters)
        // GLvoid glConvolutionParameterfv(GLenum target, GLenum pname, const GLfloat* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]float32*)\r\nret")]
        #endif
        public static unsafe void glConvolutionParameterfv([In] IntPtr extensionPointer, int target, int pname, float* parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glConvolutionParameterfv([In] IntPtr extensionPointer, int target, int pname, float* parameters)
        #endregion Overloads for GLvoid glConvolutionParameterfv(GLenum target, GLenum pname, const GLfloat* parameters)

        #region void glConvolutionParameteri([In] IntPtr extensionPointer, int target, int pname, int parameters)
        // GLvoid glConvolutionParameteri(GLenum target, GLenum pname, GLint parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32)\r\nret")]
        #endif
        public static void glConvolutionParameteri([In] IntPtr extensionPointer, int target, int pname, int parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glConvolutionParameteri([In] IntPtr extensionPointer, int target, int pname, int parameters)

        #region Overloads for GLvoid glConvolutionParameteriv(GLenum target, GLenum pname, const GLint* parameters)
        #region void glConvolutionParameteriv([In] IntPtr extensionPointer, int target, int pname, ref int parameters)
        // GLvoid glConvolutionParameteriv(GLenum target, GLenum pname, const GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in][out]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in][out]int32)\r\nret")]
        #endif
        public static void glConvolutionParameteriv([In] IntPtr extensionPointer, int target, int pname, ref int parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glConvolutionParameteriv([In] IntPtr extensionPointer, int target, int pname, ref int parameters)

        #region void glConvolutionParameteriv([In] IntPtr extensionPointer, int target, int pname, int[] parameters)
        // GLvoid glConvolutionParameteriv(GLenum target, GLenum pname, const GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32[])\r\nret")]
        #endif
        public static void glConvolutionParameteriv([In] IntPtr extensionPointer, int target, int pname, int[] parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glConvolutionParameteriv([In] IntPtr extensionPointer, int target, int pname, int[] parameters)

        #region void glConvolutionParameteriv([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters)
        // GLvoid glConvolutionParameteriv(GLenum target, GLenum pname, const GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]native int)\r\nret")]
        #endif
        public static void glConvolutionParameteriv([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glConvolutionParameteriv([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters)

        #region void glConvolutionParameteriv([In] IntPtr extensionPointer, int target, int pname, int* parameters)
        // GLvoid glConvolutionParameteriv(GLenum target, GLenum pname, const GLint* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32*)\r\nret")]
        #endif
        public static unsafe void glConvolutionParameteriv([In] IntPtr extensionPointer, int target, int pname, int* parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glConvolutionParameteriv([In] IntPtr extensionPointer, int target, int pname, int* parameters)
        #endregion Overloads for GLvoid glConvolutionParameteriv(GLenum target, GLenum pname, const GLint* parameters)

        #region void glCopyConvolutionFilter1D([In] IntPtr extensionPointer, int target, int internalformat, int x, int y, int width)
        // GLvoid glCopyConvolutionFilter1D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg target\r\nldarg internalformat\r\nldarg x\r\nldarg y\r\nldarg width\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg target\r\nldarg internalformat\r\nldarg x\r\nldarg y\r\nldarg width\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32)\r\nret")]
        #endif
        public static void glCopyConvolutionFilter1D([In] IntPtr extensionPointer, int target, int internalformat, int x, int y, int width) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glCopyConvolutionFilter1D([In] IntPtr extensionPointer, int target, int internalformat, int x, int y, int width)

        #region void glCopyConvolutionFilter2D([In] IntPtr extensionPointer, int target, int internalformat, int x, int y, int width, int height)
        // GLvoid glCopyConvolutionFilter2D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height)
        #if WIN32
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg internalformat\r\nldarg x\r\nldarg y\r\nldarg width\r\nldarg height\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg internalformat\r\nldarg x\r\nldarg y\r\nldarg width\r\nldarg height\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32)\r\nret")]
        #endif
        public static void glCopyConvolutionFilter2D([In] IntPtr extensionPointer, int target, int internalformat, int x, int y, int width, int height) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glCopyConvolutionFilter2D([In] IntPtr extensionPointer, int target, int internalformat, int x, int y, int width, int height)

        #region Overloads for GLvoid glGetConvolutionFilter(GLenum target, GLenum format, GLenum type, GLvoid* image)
        #region void glGetConvolutionFilter([In] IntPtr extensionPointer, int target, int format, int type, short[] image)
        // GLvoid glGetConvolutionFilter(GLenum target, GLenum format, GLenum type, GLvoid* image)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[out]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[out]int16[])\r\nret")]
        #endif
        public static void glGetConvolutionFilter([In] IntPtr extensionPointer, int target, int format, int type, short[] image) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetConvolutionFilter([In] IntPtr extensionPointer, int target, int format, int type, short[] image)

        #region void glGetConvolutionFilter([In] IntPtr extensionPointer, int target, int format, int type, float[] image)
        // GLvoid glGetConvolutionFilter(GLenum target, GLenum format, GLenum type, GLvoid* image)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[out]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[out]float32[])\r\nret")]
        #endif
        public static void glGetConvolutionFilter([In] IntPtr extensionPointer, int target, int format, int type, float[] image) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetConvolutionFilter([In] IntPtr extensionPointer, int target, int format, int type, float[] image)

        #region void glGetConvolutionFilter([In] IntPtr extensionPointer, int target, int format, int type, int[] image)
        // GLvoid glGetConvolutionFilter(GLenum target, GLenum format, GLenum type, GLvoid* image)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[out]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[out]int32[])\r\nret")]
        #endif
        public static void glGetConvolutionFilter([In] IntPtr extensionPointer, int target, int format, int type, int[] image) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetConvolutionFilter([In] IntPtr extensionPointer, int target, int format, int type, int[] image)

        #region void glGetConvolutionFilter([In] IntPtr extensionPointer, int target, int format, int type, IntPtr image)
        // GLvoid glGetConvolutionFilter(GLenum target, GLenum format, GLenum type, GLvoid* image)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGetConvolutionFilter([In] IntPtr extensionPointer, int target, int format, int type, IntPtr image) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetConvolutionFilter([In] IntPtr extensionPointer, int target, int format, int type, IntPtr image)

        #region void glGetConvolutionFilter([In] IntPtr extensionPointer, int target, int format, int type, byte[] image)
        // GLvoid glGetConvolutionFilter(GLenum target, GLenum format, GLenum type, GLvoid* image)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[out]unsigned int8[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[out]unsigned int8[])\r\nret")]
        #endif
        public static void glGetConvolutionFilter([In] IntPtr extensionPointer, int target, int format, int type, byte[] image) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetConvolutionFilter([In] IntPtr extensionPointer, int target, int format, int type, byte[] image)

        #region void glGetConvolutionFilter([In] IntPtr extensionPointer, int target, int format, int type, double[] image)
        // GLvoid glGetConvolutionFilter(GLenum target, GLenum format, GLenum type, GLvoid* image)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[out]float64[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[out]float64[])\r\nret")]
        #endif
        public static void glGetConvolutionFilter([In] IntPtr extensionPointer, int target, int format, int type, double[] image) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetConvolutionFilter([In] IntPtr extensionPointer, int target, int format, int type, double[] image)

        #region void glGetConvolutionFilter([In] IntPtr extensionPointer, int target, int format, int type, uint[] image)
        // GLvoid glGetConvolutionFilter(GLenum target, GLenum format, GLenum type, GLvoid* image)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[out]unsigned int32[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[out]unsigned int32[])\r\nret")]
        #endif
        public static void glGetConvolutionFilter([In] IntPtr extensionPointer, int target, int format, int type, uint[] image) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetConvolutionFilter([In] IntPtr extensionPointer, int target, int format, int type, uint[] image)

        #region void glGetConvolutionFilter([In] IntPtr extensionPointer, int target, int format, int type, sbyte[] image)
        // GLvoid glGetConvolutionFilter(GLenum target, GLenum format, GLenum type, GLvoid* image)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[out]int8[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[out]int8[])\r\nret")]
        #endif
        public static void glGetConvolutionFilter([In] IntPtr extensionPointer, int target, int format, int type, sbyte[] image) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetConvolutionFilter([In] IntPtr extensionPointer, int target, int format, int type, sbyte[] image)

        #region void glGetConvolutionFilter([In] IntPtr extensionPointer, int target, int format, int type, ushort[] image)
        // GLvoid glGetConvolutionFilter(GLenum target, GLenum format, GLenum type, GLvoid* image)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[out]unsigned int16[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[out]unsigned int16[])\r\nret")]
        #endif
        public static void glGetConvolutionFilter([In] IntPtr extensionPointer, int target, int format, int type, ushort[] image) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetConvolutionFilter([In] IntPtr extensionPointer, int target, int format, int type, ushort[] image)

        #region void glGetConvolutionFilter([In] IntPtr extensionPointer, int target, int format, int type, void* image)
        // GLvoid glGetConvolutionFilter(GLenum target, GLenum format, GLenum type, GLvoid* image)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[out]void*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[out]void*)\r\nret")]
        #endif
        public static unsafe void glGetConvolutionFilter([In] IntPtr extensionPointer, int target, int format, int type, void* image) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetConvolutionFilter([In] IntPtr extensionPointer, int target, int format, int type, void* image)
        #endregion Overloads for GLvoid glGetConvolutionFilter(GLenum target, GLenum format, GLenum type, GLvoid* image)

        #region Overloads for GLvoid glGetConvolutionParameterfv(GLenum target, GLenum pname, GLfloat* parameters)
        #region void glGetConvolutionParameterfv([In] IntPtr extensionPointer, int target, int pname, out float parameters)
        // GLvoid glGetConvolutionParameterfv(GLenum target, GLenum pname, GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]float32)\r\nret")]
        #endif
        public static void glGetConvolutionParameterfv([In] IntPtr extensionPointer, int target, int pname, out float parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetConvolutionParameterfv([In] IntPtr extensionPointer, int target, int pname, out float parameters)

        #region void glGetConvolutionParameterfv([In] IntPtr extensionPointer, int target, int pname, float[] parameters)
        // GLvoid glGetConvolutionParameterfv(GLenum target, GLenum pname, GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]float32[])\r\nret")]
        #endif
        public static void glGetConvolutionParameterfv([In] IntPtr extensionPointer, int target, int pname, float[] parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetConvolutionParameterfv([In] IntPtr extensionPointer, int target, int pname, float[] parameters)

        #region void glGetConvolutionParameterfv([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters)
        // GLvoid glGetConvolutionParameterfv(GLenum target, GLenum pname, GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGetConvolutionParameterfv([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetConvolutionParameterfv([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters)

        #region void glGetConvolutionParameterfv([In] IntPtr extensionPointer, int target, int pname, float* parameters)
        // GLvoid glGetConvolutionParameterfv(GLenum target, GLenum pname, GLfloat* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]float32*)\r\nret")]
        #endif
        public static unsafe void glGetConvolutionParameterfv([In] IntPtr extensionPointer, int target, int pname, float* parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetConvolutionParameterfv([In] IntPtr extensionPointer, int target, int pname, float* parameters)
        #endregion Overloads for GLvoid glGetConvolutionParameterfv(GLenum target, GLenum pname, GLfloat* parameters)

        #region Overloads for GLvoid glGetConvolutionParameteriv(GLenum target, GLenum pname, GLint* parameters)
        #region void glGetConvolutionParameteriv([In] IntPtr extensionPointer, int target, int pname, out int parameters)
        // GLvoid glGetConvolutionParameteriv(GLenum target, GLenum pname, GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]int32)\r\nret")]
        #endif
        public static void glGetConvolutionParameteriv([In] IntPtr extensionPointer, int target, int pname, out int parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetConvolutionParameteriv([In] IntPtr extensionPointer, int target, int pname, out int parameters)

        #region void glGetConvolutionParameteriv([In] IntPtr extensionPointer, int target, int pname, int[] parameters)
        // GLvoid glGetConvolutionParameteriv(GLenum target, GLenum pname, GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]int32[])\r\nret")]
        #endif
        public static void glGetConvolutionParameteriv([In] IntPtr extensionPointer, int target, int pname, int[] parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetConvolutionParameteriv([In] IntPtr extensionPointer, int target, int pname, int[] parameters)

        #region void glGetConvolutionParameteriv([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters)
        // GLvoid glGetConvolutionParameteriv(GLenum target, GLenum pname, GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGetConvolutionParameteriv([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetConvolutionParameteriv([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters)

        #region void glGetConvolutionParameteriv([In] IntPtr extensionPointer, int target, int pname, int* parameters)
        // GLvoid glGetConvolutionParameteriv(GLenum target, GLenum pname, GLint* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]int32*)\r\nret")]
        #endif
        public static unsafe void glGetConvolutionParameteriv([In] IntPtr extensionPointer, int target, int pname, int* parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetConvolutionParameteriv([In] IntPtr extensionPointer, int target, int pname, int* parameters)
        #endregion Overloads for GLvoid glGetConvolutionParameteriv(GLenum target, GLenum pname, GLint* parameters)

        #region Overloads for GLvoid glGetSeparableFilter(GLenum target, GLenum format, GLenum type, GLvoid* row, GLvoid* column, GLvoid* span)
        #region void glGetSeparableFilter([In] IntPtr extensionPointer, int target, int format, int type, short[] row, short[] column, short[] span)
        // GLvoid glGetSeparableFilter(GLenum target, GLenum format, GLenum type, GLvoid* row, GLvoid* column, GLvoid* span)
        #if WIN32
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg row\r\nldarg column\r\nldarg span\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[out]int16[],[out]int16[],[in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg row\r\nldarg column\r\nldarg span\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[out]int16[],[out]int16[],[in]int16[])\r\nret")]
        #endif
        public static void glGetSeparableFilter([In] IntPtr extensionPointer, int target, int format, int type, short[] row, short[] column, short[] span) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetSeparableFilter([In] IntPtr extensionPointer, int target, int format, int type, short[] row, short[] column, short[] span)

        #region void glGetSeparableFilter([In] IntPtr extensionPointer, int target, int format, int type, float[] row, float[] column, float[] span)
        // GLvoid glGetSeparableFilter(GLenum target, GLenum format, GLenum type, GLvoid* row, GLvoid* column, GLvoid* span)
        #if WIN32
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg row\r\nldarg column\r\nldarg span\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[out]float32[],[out]float32[],[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg row\r\nldarg column\r\nldarg span\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[out]float32[],[out]float32[],[in]float32[])\r\nret")]
        #endif
        public static void glGetSeparableFilter([In] IntPtr extensionPointer, int target, int format, int type, float[] row, float[] column, float[] span) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetSeparableFilter([In] IntPtr extensionPointer, int target, int format, int type, float[] row, float[] column, float[] span)

        #region void glGetSeparableFilter([In] IntPtr extensionPointer, int target, int format, int type, int[] row, int[] column, int[] span)
        // GLvoid glGetSeparableFilter(GLenum target, GLenum format, GLenum type, GLvoid* row, GLvoid* column, GLvoid* span)
        #if WIN32
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg row\r\nldarg column\r\nldarg span\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[out]int32[],[out]int32[],[in]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg row\r\nldarg column\r\nldarg span\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[out]int32[],[out]int32[],[in]int32[])\r\nret")]
        #endif
        public static void glGetSeparableFilter([In] IntPtr extensionPointer, int target, int format, int type, int[] row, int[] column, int[] span) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetSeparableFilter([In] IntPtr extensionPointer, int target, int format, int type, int[] row, int[] column, int[] span)

        #region void glGetSeparableFilter([In] IntPtr extensionPointer, int target, int format, int type, IntPtr row, IntPtr column, IntPtr span)
        // GLvoid glGetSeparableFilter(GLenum target, GLenum format, GLenum type, GLvoid* row, GLvoid* column, GLvoid* span)
        #if WIN32
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg row\r\nldarg column\r\nldarg span\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[out]native int,[out]native int,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg row\r\nldarg column\r\nldarg span\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[out]native int,[out]native int,[in]native int)\r\nret")]
        #endif
        public static void glGetSeparableFilter([In] IntPtr extensionPointer, int target, int format, int type, IntPtr row, IntPtr column, IntPtr span) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetSeparableFilter([In] IntPtr extensionPointer, int target, int format, int type, IntPtr row, IntPtr column, IntPtr span)

        #region void glGetSeparableFilter([In] IntPtr extensionPointer, int target, int format, int type, byte[] row, byte[] column, byte[] span)
        // GLvoid glGetSeparableFilter(GLenum target, GLenum format, GLenum type, GLvoid* row, GLvoid* column, GLvoid* span)
        #if WIN32
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg row\r\nldarg column\r\nldarg span\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[out]unsigned int8[],[out]unsigned int8[],[in]unsigned int8[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg row\r\nldarg column\r\nldarg span\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[out]unsigned int8[],[out]unsigned int8[],[in]unsigned int8[])\r\nret")]
        #endif
        public static void glGetSeparableFilter([In] IntPtr extensionPointer, int target, int format, int type, byte[] row, byte[] column, byte[] span) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetSeparableFilter([In] IntPtr extensionPointer, int target, int format, int type, byte[] row, byte[] column, byte[] span)

        #region void glGetSeparableFilter([In] IntPtr extensionPointer, int target, int format, int type, double[] row, double[] column, double[] span)
        // GLvoid glGetSeparableFilter(GLenum target, GLenum format, GLenum type, GLvoid* row, GLvoid* column, GLvoid* span)
        #if WIN32
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg row\r\nldarg column\r\nldarg span\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[out]float64[],[out]float64[],[in]float64[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg row\r\nldarg column\r\nldarg span\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[out]float64[],[out]float64[],[in]float64[])\r\nret")]
        #endif
        public static void glGetSeparableFilter([In] IntPtr extensionPointer, int target, int format, int type, double[] row, double[] column, double[] span) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetSeparableFilter([In] IntPtr extensionPointer, int target, int format, int type, double[] row, double[] column, double[] span)

        #region void glGetSeparableFilter([In] IntPtr extensionPointer, int target, int format, int type, uint[] row, uint[] column, uint[] span)
        // GLvoid glGetSeparableFilter(GLenum target, GLenum format, GLenum type, GLvoid* row, GLvoid* column, GLvoid* span)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg row\r\nldarg column\r\nldarg span\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[out]unsigned int32[],[out]unsigned int32[],[in]unsigned int32[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg row\r\nldarg column\r\nldarg span\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[out]unsigned int32[],[out]unsigned int32[],[in]unsigned int32[])\r\nret")]
        #endif
        public static void glGetSeparableFilter([In] IntPtr extensionPointer, int target, int format, int type, uint[] row, uint[] column, uint[] span) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetSeparableFilter([In] IntPtr extensionPointer, int target, int format, int type, uint[] row, uint[] column, uint[] span)

        #region void glGetSeparableFilter([In] IntPtr extensionPointer, int target, int format, int type, sbyte[] row, sbyte[] column, sbyte[] span)
        // GLvoid glGetSeparableFilter(GLenum target, GLenum format, GLenum type, GLvoid* row, GLvoid* column, GLvoid* span)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg row\r\nldarg column\r\nldarg span\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[out]int8[],[out]int8[],[in]int8[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg row\r\nldarg column\r\nldarg span\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[out]int8[],[out]int8[],[in]int8[])\r\nret")]
        #endif
        public static void glGetSeparableFilter([In] IntPtr extensionPointer, int target, int format, int type, sbyte[] row, sbyte[] column, sbyte[] span) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetSeparableFilter([In] IntPtr extensionPointer, int target, int format, int type, sbyte[] row, sbyte[] column, sbyte[] span)

        #region void glGetSeparableFilter([In] IntPtr extensionPointer, int target, int format, int type, ushort[] row, ushort[] column, ushort[] span)
        // GLvoid glGetSeparableFilter(GLenum target, GLenum format, GLenum type, GLvoid* row, GLvoid* column, GLvoid* span)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg row\r\nldarg column\r\nldarg span\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[out]unsigned int16[],[out]unsigned int16[],[in]unsigned int16[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg row\r\nldarg column\r\nldarg span\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[out]unsigned int16[],[out]unsigned int16[],[in]unsigned int16[])\r\nret")]
        #endif
        public static void glGetSeparableFilter([In] IntPtr extensionPointer, int target, int format, int type, ushort[] row, ushort[] column, ushort[] span) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetSeparableFilter([In] IntPtr extensionPointer, int target, int format, int type, ushort[] row, ushort[] column, ushort[] span)

        #region void glGetSeparableFilter([In] IntPtr extensionPointer, int target, int format, int type, void* row, void* column, void* span)
        // GLvoid glGetSeparableFilter(GLenum target, GLenum format, GLenum type, GLvoid* row, GLvoid* column, GLvoid* span)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg row\r\nldarg column\r\nldarg span\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[out]void*,[out]void*,[in]void*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg row\r\nldarg column\r\nldarg span\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[out]void*,[out]void*,[in]void*)\r\nret")]
        #endif
        public static unsafe void glGetSeparableFilter([In] IntPtr extensionPointer, int target, int format, int type, void* row, void* column, void* span) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetSeparableFilter([In] IntPtr extensionPointer, int target, int format, int type, void* row, void* column, void* span)
        #endregion Overloads for GLvoid glGetSeparableFilter(GLenum target, GLenum format, GLenum type, GLvoid* row, GLvoid* column, GLvoid* span)

        #region Overloads for GLvoid glSeparableFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid* row, const GLvoid* column)
        #region void glSeparableFilter2D([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, short[] row, short[] column)
        // GLvoid glSeparableFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid* row, const GLvoid* column)
        #if WIN32
        [IlasmAttribute(".maxstack 9\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg type\r\nldarg row\r\nldarg column\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int16[],[in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 9\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg type\r\nldarg row\r\nldarg column\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int16[],[in]int16[])\r\nret")]
        #endif
        public static void glSeparableFilter2D([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, short[] row, short[] column) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSeparableFilter2D([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, short[] row, short[] column)

        #region void glSeparableFilter2D([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, float[] row, float[] column)
        // GLvoid glSeparableFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid* row, const GLvoid* column)
        #if WIN32
        [IlasmAttribute(".maxstack 9\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg type\r\nldarg row\r\nldarg column\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]float32[],[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 9\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg type\r\nldarg row\r\nldarg column\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]float32[],[in]float32[])\r\nret")]
        #endif
        public static void glSeparableFilter2D([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, float[] row, float[] column) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSeparableFilter2D([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, float[] row, float[] column)

        #region void glSeparableFilter2D([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, int[] row, int[] column)
        // GLvoid glSeparableFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid* row, const GLvoid* column)
        #if WIN32
        [IlasmAttribute(".maxstack 9\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg type\r\nldarg row\r\nldarg column\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32[],[in]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 9\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg type\r\nldarg row\r\nldarg column\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32[],[in]int32[])\r\nret")]
        #endif
        public static void glSeparableFilter2D([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, int[] row, int[] column) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSeparableFilter2D([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, int[] row, int[] column)

        #region void glSeparableFilter2D([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, IntPtr row, IntPtr column)
        // GLvoid glSeparableFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid* row, const GLvoid* column)
        #if WIN32
        [IlasmAttribute(".maxstack 9\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg type\r\nldarg row\r\nldarg column\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]native int,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 9\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg type\r\nldarg row\r\nldarg column\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]native int,[in]native int)\r\nret")]
        #endif
        public static void glSeparableFilter2D([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, IntPtr row, IntPtr column) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSeparableFilter2D([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, IntPtr row, IntPtr column)

        #region void glSeparableFilter2D([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, byte[] row, byte[] column)
        // GLvoid glSeparableFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid* row, const GLvoid* column)
        #if WIN32
        [IlasmAttribute(".maxstack 9\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg type\r\nldarg row\r\nldarg column\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int8[],[in]unsigned int8[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 9\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg type\r\nldarg row\r\nldarg column\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int8[],[in]unsigned int8[])\r\nret")]
        #endif
        public static void glSeparableFilter2D([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, byte[] row, byte[] column) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSeparableFilter2D([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, byte[] row, byte[] column)

        #region void glSeparableFilter2D([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, double[] row, double[] column)
        // GLvoid glSeparableFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid* row, const GLvoid* column)
        #if WIN32
        [IlasmAttribute(".maxstack 9\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg type\r\nldarg row\r\nldarg column\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]float64[],[in]float64[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 9\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg type\r\nldarg row\r\nldarg column\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]float64[],[in]float64[])\r\nret")]
        #endif
        public static void glSeparableFilter2D([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, double[] row, double[] column) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSeparableFilter2D([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, double[] row, double[] column)

        #region void glSeparableFilter2D([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, uint[] row, uint[] column)
        // GLvoid glSeparableFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid* row, const GLvoid* column)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 9\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg type\r\nldarg row\r\nldarg column\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int32[],[in]unsigned int32[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 9\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg type\r\nldarg row\r\nldarg column\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int32[],[in]unsigned int32[])\r\nret")]
        #endif
        public static void glSeparableFilter2D([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, uint[] row, uint[] column) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSeparableFilter2D([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, uint[] row, uint[] column)

        #region void glSeparableFilter2D([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, sbyte[] row, sbyte[] column)
        // GLvoid glSeparableFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid* row, const GLvoid* column)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 9\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg type\r\nldarg row\r\nldarg column\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int8[],[in]int8[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 9\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg type\r\nldarg row\r\nldarg column\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int8[],[in]int8[])\r\nret")]
        #endif
        public static void glSeparableFilter2D([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, sbyte[] row, sbyte[] column) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSeparableFilter2D([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, sbyte[] row, sbyte[] column)

        #region void glSeparableFilter2D([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, ushort[] row, ushort[] column)
        // GLvoid glSeparableFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid* row, const GLvoid* column)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 9\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg type\r\nldarg row\r\nldarg column\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int16[],[in]unsigned int16[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 9\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg type\r\nldarg row\r\nldarg column\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int16[],[in]unsigned int16[])\r\nret")]
        #endif
        public static void glSeparableFilter2D([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, ushort[] row, ushort[] column) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSeparableFilter2D([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, ushort[] row, ushort[] column)

        #region void glSeparableFilter2D([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, void* row, void* column)
        // GLvoid glSeparableFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid* row, const GLvoid* column)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 9\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg type\r\nldarg row\r\nldarg column\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]void*,[in]void*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 9\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg type\r\nldarg row\r\nldarg column\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]void*,[in]void*)\r\nret")]
        #endif
        public static unsafe void glSeparableFilter2D([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, void* row, void* column) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSeparableFilter2D([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, void* row, void* column)
        #endregion Overloads for GLvoid glSeparableFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid* row, const GLvoid* column)

        #region Overloads for GLvoid glGetHistogram(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid* values)
        #region void glGetHistogram([In] IntPtr extensionPointer, int target, int reset, int format, int type, short[] values)
        // GLvoid glGetHistogram(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid* values)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg target\r\nldarg reset\r\nldarg format\r\nldarg type\r\nldarg values\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[out]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg target\r\nldarg reset\r\nldarg format\r\nldarg type\r\nldarg values\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[out]int16[])\r\nret")]
        #endif
        public static void glGetHistogram([In] IntPtr extensionPointer, int target, int reset, int format, int type, short[] values) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetHistogram([In] IntPtr extensionPointer, int target, int reset, int format, int type, short[] values)

        #region void glGetHistogram([In] IntPtr extensionPointer, int target, int reset, int format, int type, float[] values)
        // GLvoid glGetHistogram(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid* values)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg target\r\nldarg reset\r\nldarg format\r\nldarg type\r\nldarg values\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[out]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg target\r\nldarg reset\r\nldarg format\r\nldarg type\r\nldarg values\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[out]float32[])\r\nret")]
        #endif
        public static void glGetHistogram([In] IntPtr extensionPointer, int target, int reset, int format, int type, float[] values) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetHistogram([In] IntPtr extensionPointer, int target, int reset, int format, int type, float[] values)

        #region void glGetHistogram([In] IntPtr extensionPointer, int target, int reset, int format, int type, int[] values)
        // GLvoid glGetHistogram(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid* values)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg target\r\nldarg reset\r\nldarg format\r\nldarg type\r\nldarg values\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[out]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg target\r\nldarg reset\r\nldarg format\r\nldarg type\r\nldarg values\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[out]int32[])\r\nret")]
        #endif
        public static void glGetHistogram([In] IntPtr extensionPointer, int target, int reset, int format, int type, int[] values) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetHistogram([In] IntPtr extensionPointer, int target, int reset, int format, int type, int[] values)

        #region void glGetHistogram([In] IntPtr extensionPointer, int target, int reset, int format, int type, IntPtr values)
        // GLvoid glGetHistogram(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid* values)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg target\r\nldarg reset\r\nldarg format\r\nldarg type\r\nldarg values\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg target\r\nldarg reset\r\nldarg format\r\nldarg type\r\nldarg values\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGetHistogram([In] IntPtr extensionPointer, int target, int reset, int format, int type, IntPtr values) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetHistogram([In] IntPtr extensionPointer, int target, int reset, int format, int type, IntPtr values)

        #region void glGetHistogram([In] IntPtr extensionPointer, int target, int reset, int format, int type, byte[] values)
        // GLvoid glGetHistogram(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid* values)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg target\r\nldarg reset\r\nldarg format\r\nldarg type\r\nldarg values\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[out]unsigned int8[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg target\r\nldarg reset\r\nldarg format\r\nldarg type\r\nldarg values\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[out]unsigned int8[])\r\nret")]
        #endif
        public static void glGetHistogram([In] IntPtr extensionPointer, int target, int reset, int format, int type, byte[] values) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetHistogram([In] IntPtr extensionPointer, int target, int reset, int format, int type, byte[] values)

        #region void glGetHistogram([In] IntPtr extensionPointer, int target, int reset, int format, int type, double[] values)
        // GLvoid glGetHistogram(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid* values)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg target\r\nldarg reset\r\nldarg format\r\nldarg type\r\nldarg values\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[out]float64[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg target\r\nldarg reset\r\nldarg format\r\nldarg type\r\nldarg values\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[out]float64[])\r\nret")]
        #endif
        public static void glGetHistogram([In] IntPtr extensionPointer, int target, int reset, int format, int type, double[] values) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetHistogram([In] IntPtr extensionPointer, int target, int reset, int format, int type, double[] values)

        #region void glGetHistogram([In] IntPtr extensionPointer, int target, int reset, int format, int type, uint[] values)
        // GLvoid glGetHistogram(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid* values)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg target\r\nldarg reset\r\nldarg format\r\nldarg type\r\nldarg values\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[out]unsigned int32[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg target\r\nldarg reset\r\nldarg format\r\nldarg type\r\nldarg values\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[out]unsigned int32[])\r\nret")]
        #endif
        public static void glGetHistogram([In] IntPtr extensionPointer, int target, int reset, int format, int type, uint[] values) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetHistogram([In] IntPtr extensionPointer, int target, int reset, int format, int type, uint[] values)

        #region void glGetHistogram([In] IntPtr extensionPointer, int target, int reset, int format, int type, sbyte[] values)
        // GLvoid glGetHistogram(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid* values)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg target\r\nldarg reset\r\nldarg format\r\nldarg type\r\nldarg values\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[out]int8[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg target\r\nldarg reset\r\nldarg format\r\nldarg type\r\nldarg values\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[out]int8[])\r\nret")]
        #endif
        public static void glGetHistogram([In] IntPtr extensionPointer, int target, int reset, int format, int type, sbyte[] values) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetHistogram([In] IntPtr extensionPointer, int target, int reset, int format, int type, sbyte[] values)

        #region void glGetHistogram([In] IntPtr extensionPointer, int target, int reset, int format, int type, ushort[] values)
        // GLvoid glGetHistogram(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid* values)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg target\r\nldarg reset\r\nldarg format\r\nldarg type\r\nldarg values\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[out]unsigned int16[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg target\r\nldarg reset\r\nldarg format\r\nldarg type\r\nldarg values\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[out]unsigned int16[])\r\nret")]
        #endif
        public static void glGetHistogram([In] IntPtr extensionPointer, int target, int reset, int format, int type, ushort[] values) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetHistogram([In] IntPtr extensionPointer, int target, int reset, int format, int type, ushort[] values)

        #region void glGetHistogram([In] IntPtr extensionPointer, int target, int reset, int format, int type, void* values)
        // GLvoid glGetHistogram(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid* values)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg target\r\nldarg reset\r\nldarg format\r\nldarg type\r\nldarg values\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[out]void*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg target\r\nldarg reset\r\nldarg format\r\nldarg type\r\nldarg values\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[out]void*)\r\nret")]
        #endif
        public static unsafe void glGetHistogram([In] IntPtr extensionPointer, int target, int reset, int format, int type, void* values) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetHistogram([In] IntPtr extensionPointer, int target, int reset, int format, int type, void* values)
        #endregion Overloads for GLvoid glGetHistogram(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid* values)

        #region Overloads for GLvoid glGetHistogramParameterfv(GLenum target, GLenum pname, GLfloat* parameters)
        #region void glGetHistogramParameterfv([In] IntPtr extensionPointer, int target, int pname, out float parameters)
        // GLvoid glGetHistogramParameterfv(GLenum target, GLenum pname, GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]float32)\r\nret")]
        #endif
        public static void glGetHistogramParameterfv([In] IntPtr extensionPointer, int target, int pname, out float parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetHistogramParameterfv([In] IntPtr extensionPointer, int target, int pname, out float parameters)

        #region void glGetHistogramParameterfv([In] IntPtr extensionPointer, int target, int pname, float[] parameters)
        // GLvoid glGetHistogramParameterfv(GLenum target, GLenum pname, GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]float32[])\r\nret")]
        #endif
        public static void glGetHistogramParameterfv([In] IntPtr extensionPointer, int target, int pname, float[] parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetHistogramParameterfv([In] IntPtr extensionPointer, int target, int pname, float[] parameters)

        #region void glGetHistogramParameterfv([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters)
        // GLvoid glGetHistogramParameterfv(GLenum target, GLenum pname, GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGetHistogramParameterfv([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetHistogramParameterfv([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters)

        #region void glGetHistogramParameterfv([In] IntPtr extensionPointer, int target, int pname, float* parameters)
        // GLvoid glGetHistogramParameterfv(GLenum target, GLenum pname, GLfloat* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]float32*)\r\nret")]
        #endif
        public static unsafe void glGetHistogramParameterfv([In] IntPtr extensionPointer, int target, int pname, float* parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetHistogramParameterfv([In] IntPtr extensionPointer, int target, int pname, float* parameters)
        #endregion Overloads for GLvoid glGetHistogramParameterfv(GLenum target, GLenum pname, GLfloat* parameters)

        #region Overloads for GLvoid glGetHistogramParameteriv(GLenum target, GLenum pname, GLint* parameters)
        #region void glGetHistogramParameteriv([In] IntPtr extensionPointer, int target, int pname, out int parameters)
        // GLvoid glGetHistogramParameteriv(GLenum target, GLenum pname, GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]int32)\r\nret")]
        #endif
        public static void glGetHistogramParameteriv([In] IntPtr extensionPointer, int target, int pname, out int parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetHistogramParameteriv([In] IntPtr extensionPointer, int target, int pname, out int parameters)

        #region void glGetHistogramParameteriv([In] IntPtr extensionPointer, int target, int pname, int[] parameters)
        // GLvoid glGetHistogramParameteriv(GLenum target, GLenum pname, GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]int32[])\r\nret")]
        #endif
        public static void glGetHistogramParameteriv([In] IntPtr extensionPointer, int target, int pname, int[] parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetHistogramParameteriv([In] IntPtr extensionPointer, int target, int pname, int[] parameters)

        #region void glGetHistogramParameteriv([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters)
        // GLvoid glGetHistogramParameteriv(GLenum target, GLenum pname, GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGetHistogramParameteriv([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetHistogramParameteriv([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters)

        #region void glGetHistogramParameteriv([In] IntPtr extensionPointer, int target, int pname, int* parameters)
        // GLvoid glGetHistogramParameteriv(GLenum target, GLenum pname, GLint* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]int32*)\r\nret")]
        #endif
        public static unsafe void glGetHistogramParameteriv([In] IntPtr extensionPointer, int target, int pname, int* parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetHistogramParameteriv([In] IntPtr extensionPointer, int target, int pname, int* parameters)
        #endregion Overloads for GLvoid glGetHistogramParameteriv(GLenum target, GLenum pname, GLint* parameters)

        #region Overloads for GLvoid glGetMinmax(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid* values)
        #region void glGetMinmax([In] IntPtr extensionPointer, int target, int reset, int format, int type, short[] values)
        // GLvoid glGetMinmax(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid* values)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg target\r\nldarg reset\r\nldarg format\r\nldarg type\r\nldarg values\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[out]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg target\r\nldarg reset\r\nldarg format\r\nldarg type\r\nldarg values\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[out]int16[])\r\nret")]
        #endif
        public static void glGetMinmax([In] IntPtr extensionPointer, int target, int reset, int format, int type, short[] values) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetMinmax([In] IntPtr extensionPointer, int target, int reset, int format, int type, short[] values)

        #region void glGetMinmax([In] IntPtr extensionPointer, int target, int reset, int format, int type, float[] values)
        // GLvoid glGetMinmax(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid* values)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg target\r\nldarg reset\r\nldarg format\r\nldarg type\r\nldarg values\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[out]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg target\r\nldarg reset\r\nldarg format\r\nldarg type\r\nldarg values\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[out]float32[])\r\nret")]
        #endif
        public static void glGetMinmax([In] IntPtr extensionPointer, int target, int reset, int format, int type, float[] values) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetMinmax([In] IntPtr extensionPointer, int target, int reset, int format, int type, float[] values)

        #region void glGetMinmax([In] IntPtr extensionPointer, int target, int reset, int format, int type, int[] values)
        // GLvoid glGetMinmax(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid* values)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg target\r\nldarg reset\r\nldarg format\r\nldarg type\r\nldarg values\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[out]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg target\r\nldarg reset\r\nldarg format\r\nldarg type\r\nldarg values\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[out]int32[])\r\nret")]
        #endif
        public static void glGetMinmax([In] IntPtr extensionPointer, int target, int reset, int format, int type, int[] values) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetMinmax([In] IntPtr extensionPointer, int target, int reset, int format, int type, int[] values)

        #region void glGetMinmax([In] IntPtr extensionPointer, int target, int reset, int format, int type, IntPtr values)
        // GLvoid glGetMinmax(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid* values)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg target\r\nldarg reset\r\nldarg format\r\nldarg type\r\nldarg values\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg target\r\nldarg reset\r\nldarg format\r\nldarg type\r\nldarg values\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGetMinmax([In] IntPtr extensionPointer, int target, int reset, int format, int type, IntPtr values) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetMinmax([In] IntPtr extensionPointer, int target, int reset, int format, int type, IntPtr values)

        #region void glGetMinmax([In] IntPtr extensionPointer, int target, int reset, int format, int type, byte[] values)
        // GLvoid glGetMinmax(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid* values)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg target\r\nldarg reset\r\nldarg format\r\nldarg type\r\nldarg values\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[out]unsigned int8[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg target\r\nldarg reset\r\nldarg format\r\nldarg type\r\nldarg values\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[out]unsigned int8[])\r\nret")]
        #endif
        public static void glGetMinmax([In] IntPtr extensionPointer, int target, int reset, int format, int type, byte[] values) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetMinmax([In] IntPtr extensionPointer, int target, int reset, int format, int type, byte[] values)

        #region void glGetMinmax([In] IntPtr extensionPointer, int target, int reset, int format, int type, double[] values)
        // GLvoid glGetMinmax(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid* values)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg target\r\nldarg reset\r\nldarg format\r\nldarg type\r\nldarg values\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[out]float64[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg target\r\nldarg reset\r\nldarg format\r\nldarg type\r\nldarg values\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[out]float64[])\r\nret")]
        #endif
        public static void glGetMinmax([In] IntPtr extensionPointer, int target, int reset, int format, int type, double[] values) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetMinmax([In] IntPtr extensionPointer, int target, int reset, int format, int type, double[] values)

        #region void glGetMinmax([In] IntPtr extensionPointer, int target, int reset, int format, int type, uint[] values)
        // GLvoid glGetMinmax(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid* values)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg target\r\nldarg reset\r\nldarg format\r\nldarg type\r\nldarg values\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[out]unsigned int32[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg target\r\nldarg reset\r\nldarg format\r\nldarg type\r\nldarg values\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[out]unsigned int32[])\r\nret")]
        #endif
        public static void glGetMinmax([In] IntPtr extensionPointer, int target, int reset, int format, int type, uint[] values) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetMinmax([In] IntPtr extensionPointer, int target, int reset, int format, int type, uint[] values)

        #region void glGetMinmax([In] IntPtr extensionPointer, int target, int reset, int format, int type, sbyte[] values)
        // GLvoid glGetMinmax(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid* values)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg target\r\nldarg reset\r\nldarg format\r\nldarg type\r\nldarg values\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[out]int8[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg target\r\nldarg reset\r\nldarg format\r\nldarg type\r\nldarg values\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[out]int8[])\r\nret")]
        #endif
        public static void glGetMinmax([In] IntPtr extensionPointer, int target, int reset, int format, int type, sbyte[] values) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetMinmax([In] IntPtr extensionPointer, int target, int reset, int format, int type, sbyte[] values)

        #region void glGetMinmax([In] IntPtr extensionPointer, int target, int reset, int format, int type, ushort[] values)
        // GLvoid glGetMinmax(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid* values)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg target\r\nldarg reset\r\nldarg format\r\nldarg type\r\nldarg values\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[out]unsigned int16[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg target\r\nldarg reset\r\nldarg format\r\nldarg type\r\nldarg values\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[out]unsigned int16[])\r\nret")]
        #endif
        public static void glGetMinmax([In] IntPtr extensionPointer, int target, int reset, int format, int type, ushort[] values) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetMinmax([In] IntPtr extensionPointer, int target, int reset, int format, int type, ushort[] values)

        #region void glGetMinmax([In] IntPtr extensionPointer, int target, int reset, int format, int type, void* values)
        // GLvoid glGetMinmax(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid* values)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg target\r\nldarg reset\r\nldarg format\r\nldarg type\r\nldarg values\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[out]void*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg target\r\nldarg reset\r\nldarg format\r\nldarg type\r\nldarg values\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[out]void*)\r\nret")]
        #endif
        public static unsafe void glGetMinmax([In] IntPtr extensionPointer, int target, int reset, int format, int type, void* values) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetMinmax([In] IntPtr extensionPointer, int target, int reset, int format, int type, void* values)
        #endregion Overloads for GLvoid glGetMinmax(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid* values)

        #region Overloads for GLvoid glGetMinmaxParameterfv(GLenum target, GLenum pname, GLfloat* parameters)
        #region void glGetMinmaxParameterfv([In] IntPtr extensionPointer, int target, int pname, out float parameters)
        // GLvoid glGetMinmaxParameterfv(GLenum target, GLenum pname, GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]float32)\r\nret")]
        #endif
        public static void glGetMinmaxParameterfv([In] IntPtr extensionPointer, int target, int pname, out float parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetMinmaxParameterfv([In] IntPtr extensionPointer, int target, int pname, out float parameters)

        #region void glGetMinmaxParameterfv([In] IntPtr extensionPointer, int target, int pname, float[] parameters)
        // GLvoid glGetMinmaxParameterfv(GLenum target, GLenum pname, GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]float32[])\r\nret")]
        #endif
        public static void glGetMinmaxParameterfv([In] IntPtr extensionPointer, int target, int pname, float[] parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetMinmaxParameterfv([In] IntPtr extensionPointer, int target, int pname, float[] parameters)

        #region void glGetMinmaxParameterfv([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters)
        // GLvoid glGetMinmaxParameterfv(GLenum target, GLenum pname, GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGetMinmaxParameterfv([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetMinmaxParameterfv([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters)

        #region void glGetMinmaxParameterfv([In] IntPtr extensionPointer, int target, int pname, float* parameters)
        // GLvoid glGetMinmaxParameterfv(GLenum target, GLenum pname, GLfloat* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]float32*)\r\nret")]
        #endif
        public static unsafe void glGetMinmaxParameterfv([In] IntPtr extensionPointer, int target, int pname, float* parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetMinmaxParameterfv([In] IntPtr extensionPointer, int target, int pname, float* parameters)
        #endregion Overloads for GLvoid glGetMinmaxParameterfv(GLenum target, GLenum pname, GLfloat* parameters)

        #region Overloads for GLvoid glGetMinmaxParameteriv(GLenum target, GLenum pname, GLint* parameters)
        #region void glGetMinmaxParameteriv([In] IntPtr extensionPointer, int target, int pname, out int parameters)
        // GLvoid glGetMinmaxParameteriv(GLenum target, GLenum pname, GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]int32)\r\nret")]
        #endif
        public static void glGetMinmaxParameteriv([In] IntPtr extensionPointer, int target, int pname, out int parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetMinmaxParameteriv([In] IntPtr extensionPointer, int target, int pname, out int parameters)

        #region void glGetMinmaxParameteriv([In] IntPtr extensionPointer, int target, int pname, int[] parameters)
        // GLvoid glGetMinmaxParameteriv(GLenum target, GLenum pname, GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]int32[])\r\nret")]
        #endif
        public static void glGetMinmaxParameteriv([In] IntPtr extensionPointer, int target, int pname, int[] parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetMinmaxParameteriv([In] IntPtr extensionPointer, int target, int pname, int[] parameters)

        #region void glGetMinmaxParameteriv([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters)
        // GLvoid glGetMinmaxParameteriv(GLenum target, GLenum pname, GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGetMinmaxParameteriv([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetMinmaxParameteriv([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters)

        #region void glGetMinmaxParameteriv([In] IntPtr extensionPointer, int target, int pname, int* parameters)
        // GLvoid glGetMinmaxParameteriv(GLenum target, GLenum pname, GLint* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]int32*)\r\nret")]
        #endif
        public static unsafe void glGetMinmaxParameteriv([In] IntPtr extensionPointer, int target, int pname, int* parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetMinmaxParameteriv([In] IntPtr extensionPointer, int target, int pname, int* parameters)
        #endregion Overloads for GLvoid glGetMinmaxParameteriv(GLenum target, GLenum pname, GLint* parameters)

        #region void glHistogram([In] IntPtr extensionPointer, int target, int width, int internalformat, int sink)
        // GLvoid glHistogram(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg width\r\nldarg internalformat\r\nldarg sink\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg width\r\nldarg internalformat\r\nldarg sink\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32)\r\nret")]
        #endif
        public static void glHistogram([In] IntPtr extensionPointer, int target, int width, int internalformat, int sink) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glHistogram([In] IntPtr extensionPointer, int target, int width, int internalformat, int sink)

        #region void glMinmax([In] IntPtr extensionPointer, int target, int internalformat, int sink)
        // GLvoid glMinmax(GLenum target, GLenum internalformat, GLboolean sink)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg internalformat\r\nldarg sink\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg internalformat\r\nldarg sink\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32)\r\nret")]
        #endif
        public static void glMinmax([In] IntPtr extensionPointer, int target, int internalformat, int sink) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMinmax([In] IntPtr extensionPointer, int target, int internalformat, int sink)

        #region void glResetHistogram([In] IntPtr extensionPointer, int target)
        // GLvoid glResetHistogram(GLenum target)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg target\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg target\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32)\r\nret")]
        #endif
        public static void glResetHistogram([In] IntPtr extensionPointer, int target) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glResetHistogram([In] IntPtr extensionPointer, int target)

        #region void glResetMinmax([In] IntPtr extensionPointer, int target)
        // GLvoid glResetMinmax(GLenum target)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg target\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg target\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32)\r\nret")]
        #endif
        public static void glResetMinmax([In] IntPtr extensionPointer, int target) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glResetMinmax([In] IntPtr extensionPointer, int target)

        #region void glBlendEquation([In] IntPtr extensionPointer, int mode)
        // GLvoid glBlendEquation(GLenum mode)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg mode\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg mode\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32)\r\nret")]
        #endif
        public static void glBlendEquation([In] IntPtr extensionPointer, int mode) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glBlendEquation([In] IntPtr extensionPointer, int mode)

        #region void glBlendColor([In] IntPtr extensionPointer, float red, float green, float blue, float alpha)
        // GLvoid glBlendColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg red\r\nldarg green\r\nldarg blue\r\nldarg alpha\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]float32,[in]float32,[in]float32,[in]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg red\r\nldarg green\r\nldarg blue\r\nldarg alpha\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]float32,[in]float32,[in]float32,[in]float32)\r\nret")]
        #endif
        public static void glBlendColor([In] IntPtr extensionPointer, float red, float green, float blue, float alpha) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glBlendColor([In] IntPtr extensionPointer, float red, float green, float blue, float alpha)
        #endregion GL_ARB_imaging Methods
        #endregion GL_ARB_imaging (N/A)
        #endregion ARB Extensions

        #region ATI Extensions
        #region GL_ATI_texture_mirror_once (221)
        #region GL_ATI_texture_mirror_once Constants
        #region GL_MIRROR_CLAMP_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MIRROR_CLAMP_ATI 0x8742
        public const int GL_MIRROR_CLAMP_ATI = 0x8742;
        #endregion GL_MIRROR_CLAMP_ATI

        #region GL_MIRROR_CLAMP_TO_EDGE_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MIRROR_CLAMP_TO_EDGE_ATI 0x8743
        public const int GL_MIRROR_CLAMP_TO_EDGE_ATI = 0x8743;
        #endregion GL_MIRROR_CLAMP_TO_EDGE_ATI
        #endregion GL_ATI_texture_mirror_once Constants
        #endregion GL_ATI_texture_mirror_once (221)

        #region GL_ATI_envmap_bumpmap (244)
        #region GL_ATI_envmap_bumpmap Constants
        #region GL_BUMP_ROT_MATRIX_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_BUMP_ROT_MATRIX_ATI 0x8775
        public const int GL_BUMP_ROT_MATRIX_ATI = 0x8775;
        #endregion GL_BUMP_ROT_MATRIX_ATI

        #region GL_BUMP_ROT_MATRIX_SIZE_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_BUMP_ROT_MATRIX_SIZE_ATI 0x8776
        public const int GL_BUMP_ROT_MATRIX_SIZE_ATI = 0x8776;
        #endregion GL_BUMP_ROT_MATRIX_SIZE_ATI

        #region GL_BUMP_NUM_TEX_UNITS_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_BUMP_NUM_TEX_UNITS_ATI 0x8777
        public const int GL_BUMP_NUM_TEX_UNITS_ATI = 0x8777;
        #endregion GL_BUMP_NUM_TEX_UNITS_ATI

        #region GL_BUMP_TEX_UNITS_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_BUMP_TEX_UNITS_ATI 0x8778
        public const int GL_BUMP_TEX_UNITS_ATI = 0x8778;
        #endregion GL_BUMP_TEX_UNITS_ATI

        #region GL_DUDV_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DUDV_ATI 0x8779
        public const int GL_DUDV_ATI = 0x8779;
        #endregion GL_DUDV_ATI

        #region GL_DU8DV8_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DU8DV8_ATI 0x877A
        public const int GL_DU8DV8_ATI = 0x877A;
        #endregion GL_DU8DV8_ATI

        #region GL_BUMP_ENVMAP_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_BUMP_ENVMAP_ATI 0x877B
        public const int GL_BUMP_ENVMAP_ATI = 0x877B;
        #endregion GL_BUMP_ENVMAP_ATI

        #region GL_BUMP_TARGET_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_BUMP_TARGET_ATI 0x877C
        public const int GL_BUMP_TARGET_ATI = 0x877C;
        #endregion GL_BUMP_TARGET_ATI
        #endregion GL_ATI_envmap_bumpmap Constants

        #region GL_ATI_envmap_bumpmap Methods
        #region Overloads for GLvoid glTexBumpParameterivATI(GLenum pname, GLint* param)
        #region void glTexBumpParameterivATI([In] IntPtr extensionPointer, int pname, ref int param)
        // GLvoid glTexBumpParameterivATI(GLenum pname, GLint* param)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg param\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg param\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]int32)\r\nret")]
        #endif
        public static void glTexBumpParameterivATI([In] IntPtr extensionPointer, int pname, ref int param) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexBumpParameterivATI([In] IntPtr extensionPointer, int pname, ref int param)

        #region void glTexBumpParameterivATI([In] IntPtr extensionPointer, int pname, int[] param)
        // GLvoid glTexBumpParameterivATI(GLenum pname, GLint* param)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg param\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg param\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32[])\r\nret")]
        #endif
        public static void glTexBumpParameterivATI([In] IntPtr extensionPointer, int pname, int[] param) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexBumpParameterivATI([In] IntPtr extensionPointer, int pname, int[] param)

        #region void glTexBumpParameterivATI([In] IntPtr extensionPointer, int pname, IntPtr param)
        // GLvoid glTexBumpParameterivATI(GLenum pname, GLint* param)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg param\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg param\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glTexBumpParameterivATI([In] IntPtr extensionPointer, int pname, IntPtr param) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexBumpParameterivATI([In] IntPtr extensionPointer, int pname, IntPtr param)

        #region void glTexBumpParameterivATI([In] IntPtr extensionPointer, int pname, int* param)
        // GLvoid glTexBumpParameterivATI(GLenum pname, GLint* param)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg param\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg param\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32*)\r\nret")]
        #endif
        public static unsafe void glTexBumpParameterivATI([In] IntPtr extensionPointer, int pname, int* param) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexBumpParameterivATI([In] IntPtr extensionPointer, int pname, int* param)
        #endregion Overloads for GLvoid glTexBumpParameterivATI(GLenum pname, GLint* param)

        #region Overloads for GLvoid glTexBumpParameterfvATI(GLenum pname, GLfloat* param)
        #region void glTexBumpParameterfvATI([In] IntPtr extensionPointer, int pname, ref float param)
        // GLvoid glTexBumpParameterfvATI(GLenum pname, GLfloat* param)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg param\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg param\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]float32)\r\nret")]
        #endif
        public static void glTexBumpParameterfvATI([In] IntPtr extensionPointer, int pname, ref float param) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexBumpParameterfvATI([In] IntPtr extensionPointer, int pname, ref float param)

        #region void glTexBumpParameterfvATI([In] IntPtr extensionPointer, int pname, float[] param)
        // GLvoid glTexBumpParameterfvATI(GLenum pname, GLfloat* param)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg param\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg param\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float32[])\r\nret")]
        #endif
        public static void glTexBumpParameterfvATI([In] IntPtr extensionPointer, int pname, float[] param) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexBumpParameterfvATI([In] IntPtr extensionPointer, int pname, float[] param)

        #region void glTexBumpParameterfvATI([In] IntPtr extensionPointer, int pname, IntPtr param)
        // GLvoid glTexBumpParameterfvATI(GLenum pname, GLfloat* param)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg param\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg param\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glTexBumpParameterfvATI([In] IntPtr extensionPointer, int pname, IntPtr param) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexBumpParameterfvATI([In] IntPtr extensionPointer, int pname, IntPtr param)

        #region void glTexBumpParameterfvATI([In] IntPtr extensionPointer, int pname, float* param)
        // GLvoid glTexBumpParameterfvATI(GLenum pname, GLfloat* param)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg param\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg param\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float32*)\r\nret")]
        #endif
        public static unsafe void glTexBumpParameterfvATI([In] IntPtr extensionPointer, int pname, float* param) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexBumpParameterfvATI([In] IntPtr extensionPointer, int pname, float* param)
        #endregion Overloads for GLvoid glTexBumpParameterfvATI(GLenum pname, GLfloat* param)

        #region Overloads for GLvoid glGetTexBumpParameterivATI(GLenum pname, GLint* param)
        #region void glGetTexBumpParameterivATI([In] IntPtr extensionPointer, int pname, out int param)
        // GLvoid glGetTexBumpParameterivATI(GLenum pname, GLint* param)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg param\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[out]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg param\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[out]int32)\r\nret")]
        #endif
        public static void glGetTexBumpParameterivATI([In] IntPtr extensionPointer, int pname, out int param) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetTexBumpParameterivATI([In] IntPtr extensionPointer, int pname, out int param)

        #region void glGetTexBumpParameterivATI([In] IntPtr extensionPointer, int pname, int[] param)
        // GLvoid glGetTexBumpParameterivATI(GLenum pname, GLint* param)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg param\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[out]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg param\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[out]int32[])\r\nret")]
        #endif
        public static void glGetTexBumpParameterivATI([In] IntPtr extensionPointer, int pname, int[] param) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetTexBumpParameterivATI([In] IntPtr extensionPointer, int pname, int[] param)

        #region void glGetTexBumpParameterivATI([In] IntPtr extensionPointer, int pname, IntPtr param)
        // GLvoid glGetTexBumpParameterivATI(GLenum pname, GLint* param)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg param\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg param\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGetTexBumpParameterivATI([In] IntPtr extensionPointer, int pname, IntPtr param) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetTexBumpParameterivATI([In] IntPtr extensionPointer, int pname, IntPtr param)

        #region void glGetTexBumpParameterivATI([In] IntPtr extensionPointer, int pname, int* param)
        // GLvoid glGetTexBumpParameterivATI(GLenum pname, GLint* param)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg param\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[out]int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg param\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[out]int32*)\r\nret")]
        #endif
        public static unsafe void glGetTexBumpParameterivATI([In] IntPtr extensionPointer, int pname, int* param) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetTexBumpParameterivATI([In] IntPtr extensionPointer, int pname, int* param)
        #endregion Overloads for GLvoid glGetTexBumpParameterivATI(GLenum pname, GLint* param)

        #region Overloads for GLvoid glGetTexBumpParameterfvATI(GLenum pname, GLfloat* param)
        #region void glGetTexBumpParameterfvATI([In] IntPtr extensionPointer, int pname, out float param)
        // GLvoid glGetTexBumpParameterfvATI(GLenum pname, GLfloat* param)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg param\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg param\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[out]float32)\r\nret")]
        #endif
        public static void glGetTexBumpParameterfvATI([In] IntPtr extensionPointer, int pname, out float param) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetTexBumpParameterfvATI([In] IntPtr extensionPointer, int pname, out float param)

        #region void glGetTexBumpParameterfvATI([In] IntPtr extensionPointer, int pname, float[] param)
        // GLvoid glGetTexBumpParameterfvATI(GLenum pname, GLfloat* param)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg param\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[out]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg param\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[out]float32[])\r\nret")]
        #endif
        public static void glGetTexBumpParameterfvATI([In] IntPtr extensionPointer, int pname, float[] param) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetTexBumpParameterfvATI([In] IntPtr extensionPointer, int pname, float[] param)

        #region void glGetTexBumpParameterfvATI([In] IntPtr extensionPointer, int pname, IntPtr param)
        // GLvoid glGetTexBumpParameterfvATI(GLenum pname, GLfloat* param)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg param\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg param\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGetTexBumpParameterfvATI([In] IntPtr extensionPointer, int pname, IntPtr param) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetTexBumpParameterfvATI([In] IntPtr extensionPointer, int pname, IntPtr param)

        #region void glGetTexBumpParameterfvATI([In] IntPtr extensionPointer, int pname, float* param)
        // GLvoid glGetTexBumpParameterfvATI(GLenum pname, GLfloat* param)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg param\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[out]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg param\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[out]float32*)\r\nret")]
        #endif
        public static unsafe void glGetTexBumpParameterfvATI([In] IntPtr extensionPointer, int pname, float* param) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetTexBumpParameterfvATI([In] IntPtr extensionPointer, int pname, float* param)
        #endregion Overloads for GLvoid glGetTexBumpParameterfvATI(GLenum pname, GLfloat* param)
        #endregion GL_ATI_envmap_bumpmap Methods
        #endregion GL_ATI_envmap_bumpmap (244)

        #region GL_ATI_fragment_shader (245)
        #region GL_ATI_fragment_shader Constants
        #region GL_FRAGMENT_SHADER_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_FRAGMENT_SHADER_ATI 0x8920
        public const int GL_FRAGMENT_SHADER_ATI = 0x8920;
        #endregion GL_FRAGMENT_SHADER_ATI

        #region GL_REG_0_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_REG_0_ATI 0x8921
        public const int GL_REG_0_ATI = 0x8921;
        #endregion GL_REG_0_ATI

        #region GL_REG_1_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_REG_1_ATI 0x8922
        public const int GL_REG_1_ATI = 0x8922;
        #endregion GL_REG_1_ATI

        #region GL_REG_2_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_REG_2_ATI 0x8923
        public const int GL_REG_2_ATI = 0x8923;
        #endregion GL_REG_2_ATI

        #region GL_REG_3_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_REG_3_ATI 0x8924
        public const int GL_REG_3_ATI = 0x8924;
        #endregion GL_REG_3_ATI

        #region GL_REG_4_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_REG_4_ATI 0x8925
        public const int GL_REG_4_ATI = 0x8925;
        #endregion GL_REG_4_ATI

        #region GL_REG_5_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_REG_5_ATI 0x8926
        public const int GL_REG_5_ATI = 0x8926;
        #endregion GL_REG_5_ATI

        #region GL_CON_0_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_CON_0_ATI 0x8941
        public const int GL_CON_0_ATI = 0x8941;
        #endregion GL_CON_0_ATI

        #region GL_CON_1_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_CON_1_ATI 0x8942
        public const int GL_CON_1_ATI = 0x8942;
        #endregion GL_CON_1_ATI

        #region GL_CON_2_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_CON_2_ATI 0x8943
        public const int GL_CON_2_ATI = 0x8943;
        #endregion GL_CON_2_ATI

        #region GL_CON_3_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_CON_3_ATI 0x8944
        public const int GL_CON_3_ATI = 0x8944;
        #endregion GL_CON_3_ATI

        #region GL_CON_4_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_CON_4_ATI 0x8945
        public const int GL_CON_4_ATI = 0x8945;
        #endregion GL_CON_4_ATI

        #region GL_CON_5_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_CON_5_ATI 0x8946
        public const int GL_CON_5_ATI = 0x8946;
        #endregion GL_CON_5_ATI

        #region GL_CON_6_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_CON_6_ATI 0x8947
        public const int GL_CON_6_ATI = 0x8947;
        #endregion GL_CON_6_ATI

        #region GL_CON_7_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_CON_7_ATI 0x8948
        public const int GL_CON_7_ATI = 0x8948;
        #endregion GL_CON_7_ATI

        #region GL_MOV_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MOV_ATI 0x8961
        public const int GL_MOV_ATI = 0x8961;
        #endregion GL_MOV_ATI

        #region GL_ADD_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_ADD_ATI 0x8963
        public const int GL_ADD_ATI = 0x8963;
        #endregion GL_ADD_ATI

        #region GL_MUL_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MUL_ATI 0x8964
        public const int GL_MUL_ATI = 0x8964;
        #endregion GL_MUL_ATI

        #region GL_SUB_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SUB_ATI 0x8965
        public const int GL_SUB_ATI = 0x8965;
        #endregion GL_SUB_ATI

        #region GL_DOT3_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DOT3_ATI 0x8966
        public const int GL_DOT3_ATI = 0x8966;
        #endregion GL_DOT3_ATI

        #region GL_DOT4_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DOT4_ATI 0x8967
        public const int GL_DOT4_ATI = 0x8967;
        #endregion GL_DOT4_ATI

        #region GL_MAD_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAD_ATI 0x8968
        public const int GL_MAD_ATI = 0x8968;
        #endregion GL_MAD_ATI

        #region GL_LERP_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_LERP_ATI 0x8969
        public const int GL_LERP_ATI = 0x8969;
        #endregion GL_LERP_ATI

        #region GL_CND_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_CND_ATI 0x896A
        public const int GL_CND_ATI = 0x896A;
        #endregion GL_CND_ATI

        #region GL_CND0_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_CND0_ATI 0x896B
        public const int GL_CND0_ATI = 0x896B;
        #endregion GL_CND0_ATI

        #region GL_DOT2_ADD_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DOT2_ADD_ATI 0x896C
        public const int GL_DOT2_ADD_ATI = 0x896C;
        #endregion GL_DOT2_ADD_ATI

        #region GL_SECONDARY_INTERPOLATOR_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SECONDARY_INTERPOLATOR_ATI 0x896D
        public const int GL_SECONDARY_INTERPOLATOR_ATI = 0x896D;
        #endregion GL_SECONDARY_INTERPOLATOR_ATI

        #region GL_SWIZZLE_STR_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SWIZZLE_STR_ATI 0x8976
        public const int GL_SWIZZLE_STR_ATI = 0x8976;
        #endregion GL_SWIZZLE_STR_ATI

        #region GL_SWIZZLE_STQ_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SWIZZLE_STQ_ATI 0x8977
        public const int GL_SWIZZLE_STQ_ATI = 0x8977;
        #endregion GL_SWIZZLE_STQ_ATI

        #region GL_SWIZZLE_STR_DR_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SWIZZLE_STR_DR_ATI 0x8978
        public const int GL_SWIZZLE_STR_DR_ATI = 0x8978;
        #endregion GL_SWIZZLE_STR_DR_ATI

        #region GL_SWIZZLE_STQ_DQ_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SWIZZLE_STQ_DQ_ATI 0x8979
        public const int GL_SWIZZLE_STQ_DQ_ATI = 0x8979;
        #endregion GL_SWIZZLE_STQ_DQ_ATI

        #region GL_RED_BIT_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_RED_BIT_ATI 0x0001
        public const int GL_RED_BIT_ATI = 0x0001;
        #endregion GL_RED_BIT_ATI

        #region GL_GREEN_BIT_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_GREEN_BIT_ATI 0x0002
        public const int GL_GREEN_BIT_ATI = 0x0002;
        #endregion GL_GREEN_BIT_ATI

        #region GL_BLUE_BIT_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_BLUE_BIT_ATI 0x0004
        public const int GL_BLUE_BIT_ATI = 0x0004;
        #endregion GL_BLUE_BIT_ATI

        #region GL_2X_BIT_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_2X_BIT_ATI 0x0001
        public const int GL_2X_BIT_ATI = 0x0001;
        #endregion GL_2X_BIT_ATI

        #region GL_4X_BIT_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_4X_BIT_ATI 0x0002
        public const int GL_4X_BIT_ATI = 0x0002;
        #endregion GL_4X_BIT_ATI

        #region GL_8X_BIT_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_8X_BIT_ATI 0x0004
        public const int GL_8X_BIT_ATI = 0x0004;
        #endregion GL_8X_BIT_ATI

        #region GL_HALF_BIT_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_HALF_BIT_ATI 0x0008
        public const int GL_HALF_BIT_ATI = 0x0008;
        #endregion GL_HALF_BIT_ATI

        #region GL_QUARTER_BIT_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_QUARTER_BIT_ATI 0x0010
        public const int GL_QUARTER_BIT_ATI = 0x0010;
        #endregion GL_QUARTER_BIT_ATI

        #region GL_EIGHTH_BIT_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_EIGHTH_BIT_ATI 0x0020
        public const int GL_EIGHTH_BIT_ATI = 0x0020;
        #endregion GL_EIGHTH_BIT_ATI

        #region GL_SATURATE_BIT_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SATURATE_BIT_ATI 0x0040
        public const int GL_SATURATE_BIT_ATI = 0x0040;
        #endregion GL_SATURATE_BIT_ATI

        // GL_2X_BIT_ATI is already defined in GL_ATI_fragment_shader (245)

        #region GL_COMP_BIT_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COMP_BIT_ATI 0x0002
        public const int GL_COMP_BIT_ATI = 0x0002;
        #endregion GL_COMP_BIT_ATI

        #region GL_NEGATE_BIT_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_NEGATE_BIT_ATI 0x0004
        public const int GL_NEGATE_BIT_ATI = 0x0004;
        #endregion GL_NEGATE_BIT_ATI

        #region GL_BIAS_BIT_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_BIAS_BIT_ATI 0x0008
        public const int GL_BIAS_BIT_ATI = 0x0008;
        #endregion GL_BIAS_BIT_ATI
        #endregion GL_ATI_fragment_shader Constants

        #region GL_ATI_fragment_shader Methods
        #region int glGenFragmentShadersATI([In] IntPtr extensionPointer, int range)
        // GLuint glGenFragmentShadersATI(GLuint range)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg range\r\nldarg extensionPointer\r\ncalli unmanaged stdcall int32([in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg range\r\nldarg extensionPointer\r\ncalli unmanaged cdecl int32([in]int32)\r\nret")]
        #endif
        public static int glGenFragmentShadersATI([In] IntPtr extensionPointer, int range) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion int glGenFragmentShadersATI([In] IntPtr extensionPointer, int range)

        #region void glBindFragmentShaderATI([In] IntPtr extensionPointer, int id)
        // GLvoid glBindFragmentShaderATI(GLuint id)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg id\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg id\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32)\r\nret")]
        #endif
        public static void glBindFragmentShaderATI([In] IntPtr extensionPointer, int id) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glBindFragmentShaderATI([In] IntPtr extensionPointer, int id)

        #region void glDeleteFragmentShaderATI([In] IntPtr extensionPointer, int id)
        // GLvoid glDeleteFragmentShaderATI(GLuint id)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg id\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg id\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32)\r\nret")]
        #endif
        public static void glDeleteFragmentShaderATI([In] IntPtr extensionPointer, int id) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glDeleteFragmentShaderATI([In] IntPtr extensionPointer, int id)

        #region void glBeginFragmentShaderATI([In] IntPtr extensionPointer)
        // GLvoid glBeginFragmentShaderATI()
        #if WIN32
        [IlasmAttribute(".maxstack 1\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void()\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 1\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void()\r\nret")]
        #endif
        public static void glBeginFragmentShaderATI([In] IntPtr extensionPointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glBeginFragmentShaderATI([In] IntPtr extensionPointer)

        #region void glEndFragmentShaderATI([In] IntPtr extensionPointer)
        // GLvoid glEndFragmentShaderATI()
        #if WIN32
        [IlasmAttribute(".maxstack 1\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void()\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 1\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void()\r\nret")]
        #endif
        public static void glEndFragmentShaderATI([In] IntPtr extensionPointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glEndFragmentShaderATI([In] IntPtr extensionPointer)

        #region void glPassTexCoordATI([In] IntPtr extensionPointer, int dst, int coord, int swizzle)
        // GLvoid glPassTexCoordATI(GLuint dst, GLuint coord, GLenum swizzle)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg dst\r\nldarg coord\r\nldarg swizzle\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg dst\r\nldarg coord\r\nldarg swizzle\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32)\r\nret")]
        #endif
        public static void glPassTexCoordATI([In] IntPtr extensionPointer, int dst, int coord, int swizzle) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glPassTexCoordATI([In] IntPtr extensionPointer, int dst, int coord, int swizzle)

        #region void glSampleMapATI([In] IntPtr extensionPointer, int dst, int interp, int swizzle)
        // GLvoid glSampleMapATI(GLuint dst, GLuint interp, GLenum swizzle)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg dst\r\nldarg interp\r\nldarg swizzle\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg dst\r\nldarg interp\r\nldarg swizzle\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32)\r\nret")]
        #endif
        public static void glSampleMapATI([In] IntPtr extensionPointer, int dst, int interp, int swizzle) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSampleMapATI([In] IntPtr extensionPointer, int dst, int interp, int swizzle)

        #region void glColorFragmentOp1ATI([In] IntPtr extensionPointer, int op, int dst, int dstMask, int dstMod, int arg1, int arg1Rep, int arg1Mod)
        // GLvoid glColorFragmentOp1ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod)
        #if WIN32
        [IlasmAttribute(".maxstack 8\r\nldarg op\r\nldarg dst\r\nldarg dstMask\r\nldarg dstMod\r\nldarg arg1\r\nldarg arg1Rep\r\nldarg arg1Mod\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 8\r\nldarg op\r\nldarg dst\r\nldarg dstMask\r\nldarg dstMod\r\nldarg arg1\r\nldarg arg1Rep\r\nldarg arg1Mod\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32)\r\nret")]
        #endif
        public static void glColorFragmentOp1ATI([In] IntPtr extensionPointer, int op, int dst, int dstMask, int dstMod, int arg1, int arg1Rep, int arg1Mod) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColorFragmentOp1ATI([In] IntPtr extensionPointer, int op, int dst, int dstMask, int dstMod, int arg1, int arg1Rep, int arg1Mod)

        #region void glColorFragmentOp2ATI([In] IntPtr extensionPointer, int op, int dst, int dstMask, int dstMod, int arg1, int arg1Rep, int arg1Mod, int arg2, int arg2Rep, int arg2Mod)
        // GLvoid glColorFragmentOp2ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod)
        #if WIN32
        [IlasmAttribute(".maxstack 11\r\nldarg op\r\nldarg dst\r\nldarg dstMask\r\nldarg dstMod\r\nldarg arg1\r\nldarg arg1Rep\r\nldarg arg1Mod\r\nldarg arg2\r\nldarg arg2Rep\r\nldarg arg2Mod\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 11\r\nldarg op\r\nldarg dst\r\nldarg dstMask\r\nldarg dstMod\r\nldarg arg1\r\nldarg arg1Rep\r\nldarg arg1Mod\r\nldarg arg2\r\nldarg arg2Rep\r\nldarg arg2Mod\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32)\r\nret")]
        #endif
        public static void glColorFragmentOp2ATI([In] IntPtr extensionPointer, int op, int dst, int dstMask, int dstMod, int arg1, int arg1Rep, int arg1Mod, int arg2, int arg2Rep, int arg2Mod) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColorFragmentOp2ATI([In] IntPtr extensionPointer, int op, int dst, int dstMask, int dstMod, int arg1, int arg1Rep, int arg1Mod, int arg2, int arg2Rep, int arg2Mod)

        #region void glColorFragmentOp3ATI([In] IntPtr extensionPointer, int op, int dst, int dstMask, int dstMod, int arg1, int arg1Rep, int arg1Mod, int arg2, int arg2Rep, int arg2Mod, int arg3, int arg3Rep, int arg3Mod)
        // GLvoid glColorFragmentOp3ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod)
        #if WIN32
        [IlasmAttribute(".maxstack 14\r\nldarg op\r\nldarg dst\r\nldarg dstMask\r\nldarg dstMod\r\nldarg arg1\r\nldarg arg1Rep\r\nldarg arg1Mod\r\nldarg arg2\r\nldarg arg2Rep\r\nldarg arg2Mod\r\nldarg arg3\r\nldarg arg3Rep\r\nldarg arg3Mod\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 14\r\nldarg op\r\nldarg dst\r\nldarg dstMask\r\nldarg dstMod\r\nldarg arg1\r\nldarg arg1Rep\r\nldarg arg1Mod\r\nldarg arg2\r\nldarg arg2Rep\r\nldarg arg2Mod\r\nldarg arg3\r\nldarg arg3Rep\r\nldarg arg3Mod\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32)\r\nret")]
        #endif
        public static void glColorFragmentOp3ATI([In] IntPtr extensionPointer, int op, int dst, int dstMask, int dstMod, int arg1, int arg1Rep, int arg1Mod, int arg2, int arg2Rep, int arg2Mod, int arg3, int arg3Rep, int arg3Mod) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColorFragmentOp3ATI([In] IntPtr extensionPointer, int op, int dst, int dstMask, int dstMod, int arg1, int arg1Rep, int arg1Mod, int arg2, int arg2Rep, int arg2Mod, int arg3, int arg3Rep, int arg3Mod)

        #region void glAlphaFragmentOp1ATI([In] IntPtr extensionPointer, int op, int dst, int dstMod, int arg1, int arg1Rep, int arg1Mod)
        // GLvoid glAlphaFragmentOp1ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod)
        #if WIN32
        [IlasmAttribute(".maxstack 7\r\nldarg op\r\nldarg dst\r\nldarg dstMod\r\nldarg arg1\r\nldarg arg1Rep\r\nldarg arg1Mod\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 7\r\nldarg op\r\nldarg dst\r\nldarg dstMod\r\nldarg arg1\r\nldarg arg1Rep\r\nldarg arg1Mod\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32)\r\nret")]
        #endif
        public static void glAlphaFragmentOp1ATI([In] IntPtr extensionPointer, int op, int dst, int dstMod, int arg1, int arg1Rep, int arg1Mod) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glAlphaFragmentOp1ATI([In] IntPtr extensionPointer, int op, int dst, int dstMod, int arg1, int arg1Rep, int arg1Mod)

        #region void glAlphaFragmentOp2ATI([In] IntPtr extensionPointer, int op, int dst, int dstMod, int arg1, int arg1Rep, int arg1Mod, int arg2, int arg2Rep, int arg2Mod)
        // GLvoid glAlphaFragmentOp2ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod)
        #if WIN32
        [IlasmAttribute(".maxstack 10\r\nldarg op\r\nldarg dst\r\nldarg dstMod\r\nldarg arg1\r\nldarg arg1Rep\r\nldarg arg1Mod\r\nldarg arg2\r\nldarg arg2Rep\r\nldarg arg2Mod\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 10\r\nldarg op\r\nldarg dst\r\nldarg dstMod\r\nldarg arg1\r\nldarg arg1Rep\r\nldarg arg1Mod\r\nldarg arg2\r\nldarg arg2Rep\r\nldarg arg2Mod\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32)\r\nret")]
        #endif
        public static void glAlphaFragmentOp2ATI([In] IntPtr extensionPointer, int op, int dst, int dstMod, int arg1, int arg1Rep, int arg1Mod, int arg2, int arg2Rep, int arg2Mod) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glAlphaFragmentOp2ATI([In] IntPtr extensionPointer, int op, int dst, int dstMod, int arg1, int arg1Rep, int arg1Mod, int arg2, int arg2Rep, int arg2Mod)

        #region void glAlphaFragmentOp3ATI([In] IntPtr extensionPointer, int op, int dst, int dstMod, int arg1, int arg1Rep, int arg1Mod, int arg2, int arg2Rep, int arg2Mod, int arg3, int arg3Rep, int arg3Mod)
        // GLvoid glAlphaFragmentOp3ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod)
        #if WIN32
        [IlasmAttribute(".maxstack 13\r\nldarg op\r\nldarg dst\r\nldarg dstMod\r\nldarg arg1\r\nldarg arg1Rep\r\nldarg arg1Mod\r\nldarg arg2\r\nldarg arg2Rep\r\nldarg arg2Mod\r\nldarg arg3\r\nldarg arg3Rep\r\nldarg arg3Mod\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 13\r\nldarg op\r\nldarg dst\r\nldarg dstMod\r\nldarg arg1\r\nldarg arg1Rep\r\nldarg arg1Mod\r\nldarg arg2\r\nldarg arg2Rep\r\nldarg arg2Mod\r\nldarg arg3\r\nldarg arg3Rep\r\nldarg arg3Mod\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32)\r\nret")]
        #endif
        public static void glAlphaFragmentOp3ATI([In] IntPtr extensionPointer, int op, int dst, int dstMod, int arg1, int arg1Rep, int arg1Mod, int arg2, int arg2Rep, int arg2Mod, int arg3, int arg3Rep, int arg3Mod) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glAlphaFragmentOp3ATI([In] IntPtr extensionPointer, int op, int dst, int dstMod, int arg1, int arg1Rep, int arg1Mod, int arg2, int arg2Rep, int arg2Mod, int arg3, int arg3Rep, int arg3Mod)

        #region Overloads for GLvoid glSetFragmentShaderConstantATI(GLuint dst, const GLfloat* parameterValue)
        #region void glSetFragmentShaderConstantATI([In] IntPtr extensionPointer, int dst, ref float parameterValue)
        // GLvoid glSetFragmentShaderConstantATI(GLuint dst, const GLfloat* parameterValue)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg dst\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg dst\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]float32)\r\nret")]
        #endif
        public static void glSetFragmentShaderConstantATI([In] IntPtr extensionPointer, int dst, ref float parameterValue) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSetFragmentShaderConstantATI([In] IntPtr extensionPointer, int dst, ref float parameterValue)

        #region void glSetFragmentShaderConstantATI([In] IntPtr extensionPointer, int dst, float[] parameterValue)
        // GLvoid glSetFragmentShaderConstantATI(GLuint dst, const GLfloat* parameterValue)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg dst\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg dst\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float32[])\r\nret")]
        #endif
        public static void glSetFragmentShaderConstantATI([In] IntPtr extensionPointer, int dst, float[] parameterValue) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSetFragmentShaderConstantATI([In] IntPtr extensionPointer, int dst, float[] parameterValue)

        #region void glSetFragmentShaderConstantATI([In] IntPtr extensionPointer, int dst, IntPtr parameterValue)
        // GLvoid glSetFragmentShaderConstantATI(GLuint dst, const GLfloat* parameterValue)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg dst\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg dst\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glSetFragmentShaderConstantATI([In] IntPtr extensionPointer, int dst, IntPtr parameterValue) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSetFragmentShaderConstantATI([In] IntPtr extensionPointer, int dst, IntPtr parameterValue)

        #region void glSetFragmentShaderConstantATI([In] IntPtr extensionPointer, int dst, float* parameterValue)
        // GLvoid glSetFragmentShaderConstantATI(GLuint dst, const GLfloat* parameterValue)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg dst\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg dst\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float32*)\r\nret")]
        #endif
        public static unsafe void glSetFragmentShaderConstantATI([In] IntPtr extensionPointer, int dst, float* parameterValue) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSetFragmentShaderConstantATI([In] IntPtr extensionPointer, int dst, float* parameterValue)
        #endregion Overloads for GLvoid glSetFragmentShaderConstantATI(GLuint dst, const GLfloat* parameterValue)
        #endregion GL_ATI_fragment_shader Methods
        #endregion GL_ATI_fragment_shader (245)

        #region GL_ATI_pn_triangles (246)
        #region GL_ATI_pn_triangles Constants
        #region GL_PN_TRIANGLES_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PN_TRIANGLES_ATI 0x87F0
        public const int GL_PN_TRIANGLES_ATI = 0x87F0;
        #endregion GL_PN_TRIANGLES_ATI

        #region GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI 0x87F1
        public const int GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI = 0x87F1;
        #endregion GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI

        #region GL_PN_TRIANGLES_POINT_MODE_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PN_TRIANGLES_POINT_MODE_ATI 0x87F2
        public const int GL_PN_TRIANGLES_POINT_MODE_ATI = 0x87F2;
        #endregion GL_PN_TRIANGLES_POINT_MODE_ATI

        #region GL_PN_TRIANGLES_NORMAL_MODE_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PN_TRIANGLES_NORMAL_MODE_ATI 0x87F3
        public const int GL_PN_TRIANGLES_NORMAL_MODE_ATI = 0x87F3;
        #endregion GL_PN_TRIANGLES_NORMAL_MODE_ATI

        #region GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI 0x87F4
        public const int GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI = 0x87F4;
        #endregion GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI

        #region GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI 0x87F5
        public const int GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI = 0x87F5;
        #endregion GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI

        #region GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI 0x87F6
        public const int GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI = 0x87F6;
        #endregion GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI

        #region GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI 0x87F7
        public const int GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI = 0x87F7;
        #endregion GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI

        #region GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI 0x87F8
        public const int GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI = 0x87F8;
        #endregion GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI
        #endregion GL_ATI_pn_triangles Constants

        #region GL_ATI_pn_triangles Methods
        #region void glPNTrianglesiATI([In] IntPtr extensionPointer, int pname, int param)
        // GLvoid glPNTrianglesiATI(GLenum pname, GLint param)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg param\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg param\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32)\r\nret")]
        #endif
        public static void glPNTrianglesiATI([In] IntPtr extensionPointer, int pname, int param) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glPNTrianglesiATI([In] IntPtr extensionPointer, int pname, int param)

        #region void glPNTrianglesfATI([In] IntPtr extensionPointer, int pname, float param)
        // GLvoid glPNTrianglesfATI(GLenum pname, GLfloat param)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg param\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg param\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float32)\r\nret")]
        #endif
        public static void glPNTrianglesfATI([In] IntPtr extensionPointer, int pname, float param) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glPNTrianglesfATI([In] IntPtr extensionPointer, int pname, float param)
        #endregion GL_ATI_pn_triangles Methods
        #endregion GL_ATI_pn_triangles (246)

        #region GL_ATI_vertex_array_object (247)
        #region GL_ATI_vertex_array_object Constants
        #region GL_STATIC_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_STATIC_ATI 0x8760
        public const int GL_STATIC_ATI = 0x8760;
        #endregion GL_STATIC_ATI

        #region GL_DYNAMIC_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DYNAMIC_ATI 0x8761
        public const int GL_DYNAMIC_ATI = 0x8761;
        #endregion GL_DYNAMIC_ATI

        #region GL_PRESERVE_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PRESERVE_ATI 0x8762
        public const int GL_PRESERVE_ATI = 0x8762;
        #endregion GL_PRESERVE_ATI

        #region GL_DISCARD_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DISCARD_ATI 0x8763
        public const int GL_DISCARD_ATI = 0x8763;
        #endregion GL_DISCARD_ATI

        #region GL_OBJECT_BUFFER_SIZE_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OBJECT_BUFFER_SIZE_ATI 0x8764
        public const int GL_OBJECT_BUFFER_SIZE_ATI = 0x8764;
        #endregion GL_OBJECT_BUFFER_SIZE_ATI

        #region GL_OBJECT_BUFFER_USAGE_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OBJECT_BUFFER_USAGE_ATI 0x8765
        public const int GL_OBJECT_BUFFER_USAGE_ATI = 0x8765;
        #endregion GL_OBJECT_BUFFER_USAGE_ATI

        #region GL_ARRAY_OBJECT_BUFFER_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_ARRAY_OBJECT_BUFFER_ATI 0x8766
        public const int GL_ARRAY_OBJECT_BUFFER_ATI = 0x8766;
        #endregion GL_ARRAY_OBJECT_BUFFER_ATI

        #region GL_ARRAY_OBJECT_OFFSET_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_ARRAY_OBJECT_OFFSET_ATI 0x8767
        public const int GL_ARRAY_OBJECT_OFFSET_ATI = 0x8767;
        #endregion GL_ARRAY_OBJECT_OFFSET_ATI
        #endregion GL_ATI_vertex_array_object Constants

        #region GL_ATI_vertex_array_object Methods
        #region Overloads for GLuint glNewObjectBufferATI(GLsizei size, const GLvoid* pointer, GLenum usage)
        #region int glNewObjectBufferATI([In] IntPtr extensionPointer, int size, short[] pointer, int usage)
        // GLuint glNewObjectBufferATI(GLsizei size, const GLvoid* pointer, GLenum usage)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg size\r\nldarg pointer\r\nldarg usage\r\nldarg extensionPointer\r\ncalli unmanaged stdcall int32([in]int32,[in]int16[],[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg size\r\nldarg pointer\r\nldarg usage\r\nldarg extensionPointer\r\ncalli unmanaged cdecl int32([in]int32,[in]int16[],[in]int32)\r\nret")]
        #endif
        public static int glNewObjectBufferATI([In] IntPtr extensionPointer, int size, short[] pointer, int usage) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion int glNewObjectBufferATI([In] IntPtr extensionPointer, int size, short[] pointer, int usage)

        #region int glNewObjectBufferATI([In] IntPtr extensionPointer, int size, float[] pointer, int usage)
        // GLuint glNewObjectBufferATI(GLsizei size, const GLvoid* pointer, GLenum usage)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg size\r\nldarg pointer\r\nldarg usage\r\nldarg extensionPointer\r\ncalli unmanaged stdcall int32([in]int32,[in]float32[],[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg size\r\nldarg pointer\r\nldarg usage\r\nldarg extensionPointer\r\ncalli unmanaged cdecl int32([in]int32,[in]float32[],[in]int32)\r\nret")]
        #endif
        public static int glNewObjectBufferATI([In] IntPtr extensionPointer, int size, float[] pointer, int usage) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion int glNewObjectBufferATI([In] IntPtr extensionPointer, int size, float[] pointer, int usage)

        #region int glNewObjectBufferATI([In] IntPtr extensionPointer, int size, int[] pointer, int usage)
        // GLuint glNewObjectBufferATI(GLsizei size, const GLvoid* pointer, GLenum usage)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg size\r\nldarg pointer\r\nldarg usage\r\nldarg extensionPointer\r\ncalli unmanaged stdcall int32([in]int32,[in]int32[],[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg size\r\nldarg pointer\r\nldarg usage\r\nldarg extensionPointer\r\ncalli unmanaged cdecl int32([in]int32,[in]int32[],[in]int32)\r\nret")]
        #endif
        public static int glNewObjectBufferATI([In] IntPtr extensionPointer, int size, int[] pointer, int usage) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion int glNewObjectBufferATI([In] IntPtr extensionPointer, int size, int[] pointer, int usage)

        #region int glNewObjectBufferATI([In] IntPtr extensionPointer, int size, IntPtr pointer, int usage)
        // GLuint glNewObjectBufferATI(GLsizei size, const GLvoid* pointer, GLenum usage)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg size\r\nldarg pointer\r\nldarg usage\r\nldarg extensionPointer\r\ncalli unmanaged stdcall int32([in]int32,[in]native int,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg size\r\nldarg pointer\r\nldarg usage\r\nldarg extensionPointer\r\ncalli unmanaged cdecl int32([in]int32,[in]native int,[in]int32)\r\nret")]
        #endif
        public static int glNewObjectBufferATI([In] IntPtr extensionPointer, int size, IntPtr pointer, int usage) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion int glNewObjectBufferATI([In] IntPtr extensionPointer, int size, IntPtr pointer, int usage)

        #region int glNewObjectBufferATI([In] IntPtr extensionPointer, int size, byte[] pointer, int usage)
        // GLuint glNewObjectBufferATI(GLsizei size, const GLvoid* pointer, GLenum usage)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg size\r\nldarg pointer\r\nldarg usage\r\nldarg extensionPointer\r\ncalli unmanaged stdcall int32([in]int32,[in]unsigned int8[],[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg size\r\nldarg pointer\r\nldarg usage\r\nldarg extensionPointer\r\ncalli unmanaged cdecl int32([in]int32,[in]unsigned int8[],[in]int32)\r\nret")]
        #endif
        public static int glNewObjectBufferATI([In] IntPtr extensionPointer, int size, byte[] pointer, int usage) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion int glNewObjectBufferATI([In] IntPtr extensionPointer, int size, byte[] pointer, int usage)

        #region int glNewObjectBufferATI([In] IntPtr extensionPointer, int size, double[] pointer, int usage)
        // GLuint glNewObjectBufferATI(GLsizei size, const GLvoid* pointer, GLenum usage)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg size\r\nldarg pointer\r\nldarg usage\r\nldarg extensionPointer\r\ncalli unmanaged stdcall int32([in]int32,[in]float64[],[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg size\r\nldarg pointer\r\nldarg usage\r\nldarg extensionPointer\r\ncalli unmanaged cdecl int32([in]int32,[in]float64[],[in]int32)\r\nret")]
        #endif
        public static int glNewObjectBufferATI([In] IntPtr extensionPointer, int size, double[] pointer, int usage) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion int glNewObjectBufferATI([In] IntPtr extensionPointer, int size, double[] pointer, int usage)

        #region int glNewObjectBufferATI([In] IntPtr extensionPointer, int size, uint[] pointer, int usage)
        // GLuint glNewObjectBufferATI(GLsizei size, const GLvoid* pointer, GLenum usage)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg size\r\nldarg pointer\r\nldarg usage\r\nldarg extensionPointer\r\ncalli unmanaged stdcall int32([in]int32,[in]unsigned int32[],[in]int32)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg size\r\nldarg pointer\r\nldarg usage\r\nldarg extensionPointer\r\ncalli unmanaged cdecl int32([in]int32,[in]unsigned int32[],[in]int32)\r\nret")]
        #endif
        public static int glNewObjectBufferATI([In] IntPtr extensionPointer, int size, uint[] pointer, int usage) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion int glNewObjectBufferATI([In] IntPtr extensionPointer, int size, uint[] pointer, int usage)

        #region int glNewObjectBufferATI([In] IntPtr extensionPointer, int size, sbyte[] pointer, int usage)
        // GLuint glNewObjectBufferATI(GLsizei size, const GLvoid* pointer, GLenum usage)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg size\r\nldarg pointer\r\nldarg usage\r\nldarg extensionPointer\r\ncalli unmanaged stdcall int32([in]int32,[in]int8[],[in]int32)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg size\r\nldarg pointer\r\nldarg usage\r\nldarg extensionPointer\r\ncalli unmanaged cdecl int32([in]int32,[in]int8[],[in]int32)\r\nret")]
        #endif
        public static int glNewObjectBufferATI([In] IntPtr extensionPointer, int size, sbyte[] pointer, int usage) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion int glNewObjectBufferATI([In] IntPtr extensionPointer, int size, sbyte[] pointer, int usage)

        #region int glNewObjectBufferATI([In] IntPtr extensionPointer, int size, ushort[] pointer, int usage)
        // GLuint glNewObjectBufferATI(GLsizei size, const GLvoid* pointer, GLenum usage)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg size\r\nldarg pointer\r\nldarg usage\r\nldarg extensionPointer\r\ncalli unmanaged stdcall int32([in]int32,[in]unsigned int16[],[in]int32)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg size\r\nldarg pointer\r\nldarg usage\r\nldarg extensionPointer\r\ncalli unmanaged cdecl int32([in]int32,[in]unsigned int16[],[in]int32)\r\nret")]
        #endif
        public static int glNewObjectBufferATI([In] IntPtr extensionPointer, int size, ushort[] pointer, int usage) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion int glNewObjectBufferATI([In] IntPtr extensionPointer, int size, ushort[] pointer, int usage)

        #region int glNewObjectBufferATI([In] IntPtr extensionPointer, int size, void* pointer, int usage)
        // GLuint glNewObjectBufferATI(GLsizei size, const GLvoid* pointer, GLenum usage)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg size\r\nldarg pointer\r\nldarg usage\r\nldarg extensionPointer\r\ncalli unmanaged stdcall int32([in]int32,[in]void*,[in]int32)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg size\r\nldarg pointer\r\nldarg usage\r\nldarg extensionPointer\r\ncalli unmanaged cdecl int32([in]int32,[in]void*,[in]int32)\r\nret")]
        #endif
        public static unsafe int glNewObjectBufferATI([In] IntPtr extensionPointer, int size, void* pointer, int usage) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion int glNewObjectBufferATI([In] IntPtr extensionPointer, int size, void* pointer, int usage)
        #endregion Overloads for GLuint glNewObjectBufferATI(GLsizei size, const GLvoid* pointer, GLenum usage)

        #region int glIsObjectBufferATI([In] IntPtr extensionPointer, int buffer)
        // GLboolean glIsObjectBufferATI(GLuint buffer)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg buffer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall int32([in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg buffer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl int32([in]int32)\r\nret")]
        #endif
        public static int glIsObjectBufferATI([In] IntPtr extensionPointer, int buffer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion int glIsObjectBufferATI([In] IntPtr extensionPointer, int buffer)

        #region Overloads for GLvoid glUpdateObjectBufferATI(GLuint buffer, GLuint offset, GLsizei size, const GLvoid* pointer, GLenum preserve)
        #region void glUpdateObjectBufferATI([In] IntPtr extensionPointer, int buffer, int offset, int size, short[] pointer, int preserve)
        // GLvoid glUpdateObjectBufferATI(GLuint buffer, GLuint offset, GLsizei size, const GLvoid* pointer, GLenum preserve)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg buffer\r\nldarg offset\r\nldarg size\r\nldarg pointer\r\nldarg preserve\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int16[],[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg buffer\r\nldarg offset\r\nldarg size\r\nldarg pointer\r\nldarg preserve\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int16[],[in]int32)\r\nret")]
        #endif
        public static void glUpdateObjectBufferATI([In] IntPtr extensionPointer, int buffer, int offset, int size, short[] pointer, int preserve) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glUpdateObjectBufferATI([In] IntPtr extensionPointer, int buffer, int offset, int size, short[] pointer, int preserve)

        #region void glUpdateObjectBufferATI([In] IntPtr extensionPointer, int buffer, int offset, int size, float[] pointer, int preserve)
        // GLvoid glUpdateObjectBufferATI(GLuint buffer, GLuint offset, GLsizei size, const GLvoid* pointer, GLenum preserve)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg buffer\r\nldarg offset\r\nldarg size\r\nldarg pointer\r\nldarg preserve\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]float32[],[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg buffer\r\nldarg offset\r\nldarg size\r\nldarg pointer\r\nldarg preserve\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]float32[],[in]int32)\r\nret")]
        #endif
        public static void glUpdateObjectBufferATI([In] IntPtr extensionPointer, int buffer, int offset, int size, float[] pointer, int preserve) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glUpdateObjectBufferATI([In] IntPtr extensionPointer, int buffer, int offset, int size, float[] pointer, int preserve)

        #region void glUpdateObjectBufferATI([In] IntPtr extensionPointer, int buffer, int offset, int size, int[] pointer, int preserve)
        // GLvoid glUpdateObjectBufferATI(GLuint buffer, GLuint offset, GLsizei size, const GLvoid* pointer, GLenum preserve)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg buffer\r\nldarg offset\r\nldarg size\r\nldarg pointer\r\nldarg preserve\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32[],[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg buffer\r\nldarg offset\r\nldarg size\r\nldarg pointer\r\nldarg preserve\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32[],[in]int32)\r\nret")]
        #endif
        public static void glUpdateObjectBufferATI([In] IntPtr extensionPointer, int buffer, int offset, int size, int[] pointer, int preserve) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glUpdateObjectBufferATI([In] IntPtr extensionPointer, int buffer, int offset, int size, int[] pointer, int preserve)

        #region void glUpdateObjectBufferATI([In] IntPtr extensionPointer, int buffer, int offset, int size, IntPtr pointer, int preserve)
        // GLvoid glUpdateObjectBufferATI(GLuint buffer, GLuint offset, GLsizei size, const GLvoid* pointer, GLenum preserve)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg buffer\r\nldarg offset\r\nldarg size\r\nldarg pointer\r\nldarg preserve\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]native int,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg buffer\r\nldarg offset\r\nldarg size\r\nldarg pointer\r\nldarg preserve\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]native int,[in]int32)\r\nret")]
        #endif
        public static void glUpdateObjectBufferATI([In] IntPtr extensionPointer, int buffer, int offset, int size, IntPtr pointer, int preserve) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glUpdateObjectBufferATI([In] IntPtr extensionPointer, int buffer, int offset, int size, IntPtr pointer, int preserve)

        #region void glUpdateObjectBufferATI([In] IntPtr extensionPointer, int buffer, int offset, int size, byte[] pointer, int preserve)
        // GLvoid glUpdateObjectBufferATI(GLuint buffer, GLuint offset, GLsizei size, const GLvoid* pointer, GLenum preserve)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg buffer\r\nldarg offset\r\nldarg size\r\nldarg pointer\r\nldarg preserve\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]unsigned int8[],[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg buffer\r\nldarg offset\r\nldarg size\r\nldarg pointer\r\nldarg preserve\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]unsigned int8[],[in]int32)\r\nret")]
        #endif
        public static void glUpdateObjectBufferATI([In] IntPtr extensionPointer, int buffer, int offset, int size, byte[] pointer, int preserve) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glUpdateObjectBufferATI([In] IntPtr extensionPointer, int buffer, int offset, int size, byte[] pointer, int preserve)

        #region void glUpdateObjectBufferATI([In] IntPtr extensionPointer, int buffer, int offset, int size, double[] pointer, int preserve)
        // GLvoid glUpdateObjectBufferATI(GLuint buffer, GLuint offset, GLsizei size, const GLvoid* pointer, GLenum preserve)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg buffer\r\nldarg offset\r\nldarg size\r\nldarg pointer\r\nldarg preserve\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]float64[],[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg buffer\r\nldarg offset\r\nldarg size\r\nldarg pointer\r\nldarg preserve\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]float64[],[in]int32)\r\nret")]
        #endif
        public static void glUpdateObjectBufferATI([In] IntPtr extensionPointer, int buffer, int offset, int size, double[] pointer, int preserve) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glUpdateObjectBufferATI([In] IntPtr extensionPointer, int buffer, int offset, int size, double[] pointer, int preserve)

        #region void glUpdateObjectBufferATI([In] IntPtr extensionPointer, int buffer, int offset, int size, uint[] pointer, int preserve)
        // GLvoid glUpdateObjectBufferATI(GLuint buffer, GLuint offset, GLsizei size, const GLvoid* pointer, GLenum preserve)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg buffer\r\nldarg offset\r\nldarg size\r\nldarg pointer\r\nldarg preserve\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]unsigned int32[],[in]int32)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg buffer\r\nldarg offset\r\nldarg size\r\nldarg pointer\r\nldarg preserve\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]unsigned int32[],[in]int32)\r\nret")]
        #endif
        public static void glUpdateObjectBufferATI([In] IntPtr extensionPointer, int buffer, int offset, int size, uint[] pointer, int preserve) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glUpdateObjectBufferATI([In] IntPtr extensionPointer, int buffer, int offset, int size, uint[] pointer, int preserve)

        #region void glUpdateObjectBufferATI([In] IntPtr extensionPointer, int buffer, int offset, int size, sbyte[] pointer, int preserve)
        // GLvoid glUpdateObjectBufferATI(GLuint buffer, GLuint offset, GLsizei size, const GLvoid* pointer, GLenum preserve)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg buffer\r\nldarg offset\r\nldarg size\r\nldarg pointer\r\nldarg preserve\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int8[],[in]int32)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg buffer\r\nldarg offset\r\nldarg size\r\nldarg pointer\r\nldarg preserve\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int8[],[in]int32)\r\nret")]
        #endif
        public static void glUpdateObjectBufferATI([In] IntPtr extensionPointer, int buffer, int offset, int size, sbyte[] pointer, int preserve) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glUpdateObjectBufferATI([In] IntPtr extensionPointer, int buffer, int offset, int size, sbyte[] pointer, int preserve)

        #region void glUpdateObjectBufferATI([In] IntPtr extensionPointer, int buffer, int offset, int size, ushort[] pointer, int preserve)
        // GLvoid glUpdateObjectBufferATI(GLuint buffer, GLuint offset, GLsizei size, const GLvoid* pointer, GLenum preserve)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg buffer\r\nldarg offset\r\nldarg size\r\nldarg pointer\r\nldarg preserve\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]unsigned int16[],[in]int32)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg buffer\r\nldarg offset\r\nldarg size\r\nldarg pointer\r\nldarg preserve\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]unsigned int16[],[in]int32)\r\nret")]
        #endif
        public static void glUpdateObjectBufferATI([In] IntPtr extensionPointer, int buffer, int offset, int size, ushort[] pointer, int preserve) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glUpdateObjectBufferATI([In] IntPtr extensionPointer, int buffer, int offset, int size, ushort[] pointer, int preserve)

        #region void glUpdateObjectBufferATI([In] IntPtr extensionPointer, int buffer, int offset, int size, void* pointer, int preserve)
        // GLvoid glUpdateObjectBufferATI(GLuint buffer, GLuint offset, GLsizei size, const GLvoid* pointer, GLenum preserve)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg buffer\r\nldarg offset\r\nldarg size\r\nldarg pointer\r\nldarg preserve\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]void*,[in]int32)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg buffer\r\nldarg offset\r\nldarg size\r\nldarg pointer\r\nldarg preserve\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]void*,[in]int32)\r\nret")]
        #endif
        public static unsafe void glUpdateObjectBufferATI([In] IntPtr extensionPointer, int buffer, int offset, int size, void* pointer, int preserve) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glUpdateObjectBufferATI([In] IntPtr extensionPointer, int buffer, int offset, int size, void* pointer, int preserve)
        #endregion Overloads for GLvoid glUpdateObjectBufferATI(GLuint buffer, GLuint offset, GLsizei size, const GLvoid* pointer, GLenum preserve)

        #region Overloads for GLvoid glGetObjectBufferfvATI(GLuint buffer, GLenum pname, GLfloat* parameters)
        #region void glGetObjectBufferfvATI([In] IntPtr extensionPointer, int buffer, int pname, out float parameters)
        // GLvoid glGetObjectBufferfvATI(GLuint buffer, GLenum pname, GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg buffer\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg buffer\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]float32)\r\nret")]
        #endif
        public static void glGetObjectBufferfvATI([In] IntPtr extensionPointer, int buffer, int pname, out float parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetObjectBufferfvATI([In] IntPtr extensionPointer, int buffer, int pname, out float parameters)

        #region void glGetObjectBufferfvATI([In] IntPtr extensionPointer, int buffer, int pname, float[] parameters)
        // GLvoid glGetObjectBufferfvATI(GLuint buffer, GLenum pname, GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg buffer\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg buffer\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]float32[])\r\nret")]
        #endif
        public static void glGetObjectBufferfvATI([In] IntPtr extensionPointer, int buffer, int pname, float[] parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetObjectBufferfvATI([In] IntPtr extensionPointer, int buffer, int pname, float[] parameters)

        #region void glGetObjectBufferfvATI([In] IntPtr extensionPointer, int buffer, int pname, IntPtr parameters)
        // GLvoid glGetObjectBufferfvATI(GLuint buffer, GLenum pname, GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg buffer\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg buffer\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGetObjectBufferfvATI([In] IntPtr extensionPointer, int buffer, int pname, IntPtr parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetObjectBufferfvATI([In] IntPtr extensionPointer, int buffer, int pname, IntPtr parameters)

        #region void glGetObjectBufferfvATI([In] IntPtr extensionPointer, int buffer, int pname, float* parameters)
        // GLvoid glGetObjectBufferfvATI(GLuint buffer, GLenum pname, GLfloat* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg buffer\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg buffer\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]float32*)\r\nret")]
        #endif
        public static unsafe void glGetObjectBufferfvATI([In] IntPtr extensionPointer, int buffer, int pname, float* parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetObjectBufferfvATI([In] IntPtr extensionPointer, int buffer, int pname, float* parameters)
        #endregion Overloads for GLvoid glGetObjectBufferfvATI(GLuint buffer, GLenum pname, GLfloat* parameters)

        #region Overloads for GLvoid glGetObjectBufferivATI(GLuint buffer, GLenum pname, GLint* parameters)
        #region void glGetObjectBufferivATI([In] IntPtr extensionPointer, int buffer, int pname, out int parameters)
        // GLvoid glGetObjectBufferivATI(GLuint buffer, GLenum pname, GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg buffer\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg buffer\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]int32)\r\nret")]
        #endif
        public static void glGetObjectBufferivATI([In] IntPtr extensionPointer, int buffer, int pname, out int parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetObjectBufferivATI([In] IntPtr extensionPointer, int buffer, int pname, out int parameters)

        #region void glGetObjectBufferivATI([In] IntPtr extensionPointer, int buffer, int pname, int[] parameters)
        // GLvoid glGetObjectBufferivATI(GLuint buffer, GLenum pname, GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg buffer\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg buffer\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]int32[])\r\nret")]
        #endif
        public static void glGetObjectBufferivATI([In] IntPtr extensionPointer, int buffer, int pname, int[] parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetObjectBufferivATI([In] IntPtr extensionPointer, int buffer, int pname, int[] parameters)

        #region void glGetObjectBufferivATI([In] IntPtr extensionPointer, int buffer, int pname, IntPtr parameters)
        // GLvoid glGetObjectBufferivATI(GLuint buffer, GLenum pname, GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg buffer\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg buffer\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGetObjectBufferivATI([In] IntPtr extensionPointer, int buffer, int pname, IntPtr parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetObjectBufferivATI([In] IntPtr extensionPointer, int buffer, int pname, IntPtr parameters)

        #region void glGetObjectBufferivATI([In] IntPtr extensionPointer, int buffer, int pname, int* parameters)
        // GLvoid glGetObjectBufferivATI(GLuint buffer, GLenum pname, GLint* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg buffer\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg buffer\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]int32*)\r\nret")]
        #endif
        public static unsafe void glGetObjectBufferivATI([In] IntPtr extensionPointer, int buffer, int pname, int* parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetObjectBufferivATI([In] IntPtr extensionPointer, int buffer, int pname, int* parameters)
        #endregion Overloads for GLvoid glGetObjectBufferivATI(GLuint buffer, GLenum pname, GLint* parameters)

        #region void glDeleteObjectBufferATI([In] IntPtr extensionPointer, int buffer)
        // GLvoid glDeleteObjectBufferATI(GLuint buffer)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg buffer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg buffer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32)\r\nret")]
        #endif
        public static void glDeleteObjectBufferATI([In] IntPtr extensionPointer, int buffer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glDeleteObjectBufferATI([In] IntPtr extensionPointer, int buffer)

        #region void glArrayObjectATI([In] IntPtr extensionPointer, int arrayId, int size, int type, int stride, int buffer, int offset)
        // GLvoid glArrayObjectATI(GLenum arrayId, GLint size, GLenum type, GLsizei stride, GLuint buffer, GLuint offset)
        #if WIN32
        [IlasmAttribute(".maxstack 7\r\nldarg arrayId\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg buffer\r\nldarg offset\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 7\r\nldarg arrayId\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg buffer\r\nldarg offset\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32)\r\nret")]
        #endif
        public static void glArrayObjectATI([In] IntPtr extensionPointer, int arrayId, int size, int type, int stride, int buffer, int offset) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glArrayObjectATI([In] IntPtr extensionPointer, int arrayId, int size, int type, int stride, int buffer, int offset)

        #region Overloads for GLvoid glGetArrayObjectfvATI(GLenum arrayId, GLenum pname, GLfloat* parameters)
        #region void glGetArrayObjectfvATI([In] IntPtr extensionPointer, int arrayId, int pname, out float parameters)
        // GLvoid glGetArrayObjectfvATI(GLenum arrayId, GLenum pname, GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg arrayId\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg arrayId\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]float32)\r\nret")]
        #endif
        public static void glGetArrayObjectfvATI([In] IntPtr extensionPointer, int arrayId, int pname, out float parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetArrayObjectfvATI([In] IntPtr extensionPointer, int arrayId, int pname, out float parameters)

        #region void glGetArrayObjectfvATI([In] IntPtr extensionPointer, int arrayId, int pname, float[] parameters)
        // GLvoid glGetArrayObjectfvATI(GLenum arrayId, GLenum pname, GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg arrayId\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg arrayId\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]float32[])\r\nret")]
        #endif
        public static void glGetArrayObjectfvATI([In] IntPtr extensionPointer, int arrayId, int pname, float[] parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetArrayObjectfvATI([In] IntPtr extensionPointer, int arrayId, int pname, float[] parameters)

        #region void glGetArrayObjectfvATI([In] IntPtr extensionPointer, int arrayId, int pname, IntPtr parameters)
        // GLvoid glGetArrayObjectfvATI(GLenum arrayId, GLenum pname, GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg arrayId\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg arrayId\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGetArrayObjectfvATI([In] IntPtr extensionPointer, int arrayId, int pname, IntPtr parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetArrayObjectfvATI([In] IntPtr extensionPointer, int arrayId, int pname, IntPtr parameters)

        #region void glGetArrayObjectfvATI([In] IntPtr extensionPointer, int arrayId, int pname, float* parameters)
        // GLvoid glGetArrayObjectfvATI(GLenum arrayId, GLenum pname, GLfloat* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg arrayId\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg arrayId\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]float32*)\r\nret")]
        #endif
        public static unsafe void glGetArrayObjectfvATI([In] IntPtr extensionPointer, int arrayId, int pname, float* parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetArrayObjectfvATI([In] IntPtr extensionPointer, int arrayId, int pname, float* parameters)
        #endregion Overloads for GLvoid glGetArrayObjectfvATI(GLenum arrayId, GLenum pname, GLfloat* parameters)

        #region Overloads for GLvoid glGetArrayObjectivATI(GLenum arrayId, GLenum pname, GLint* parameters)
        #region void glGetArrayObjectivATI([In] IntPtr extensionPointer, int arrayId, int pname, out int parameters)
        // GLvoid glGetArrayObjectivATI(GLenum arrayId, GLenum pname, GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg arrayId\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg arrayId\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]int32)\r\nret")]
        #endif
        public static void glGetArrayObjectivATI([In] IntPtr extensionPointer, int arrayId, int pname, out int parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetArrayObjectivATI([In] IntPtr extensionPointer, int arrayId, int pname, out int parameters)

        #region void glGetArrayObjectivATI([In] IntPtr extensionPointer, int arrayId, int pname, int[] parameters)
        // GLvoid glGetArrayObjectivATI(GLenum arrayId, GLenum pname, GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg arrayId\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg arrayId\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]int32[])\r\nret")]
        #endif
        public static void glGetArrayObjectivATI([In] IntPtr extensionPointer, int arrayId, int pname, int[] parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetArrayObjectivATI([In] IntPtr extensionPointer, int arrayId, int pname, int[] parameters)

        #region void glGetArrayObjectivATI([In] IntPtr extensionPointer, int arrayId, int pname, IntPtr parameters)
        // GLvoid glGetArrayObjectivATI(GLenum arrayId, GLenum pname, GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg arrayId\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg arrayId\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGetArrayObjectivATI([In] IntPtr extensionPointer, int arrayId, int pname, IntPtr parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetArrayObjectivATI([In] IntPtr extensionPointer, int arrayId, int pname, IntPtr parameters)

        #region void glGetArrayObjectivATI([In] IntPtr extensionPointer, int arrayId, int pname, int* parameters)
        // GLvoid glGetArrayObjectivATI(GLenum arrayId, GLenum pname, GLint* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg arrayId\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg arrayId\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]int32*)\r\nret")]
        #endif
        public static unsafe void glGetArrayObjectivATI([In] IntPtr extensionPointer, int arrayId, int pname, int* parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetArrayObjectivATI([In] IntPtr extensionPointer, int arrayId, int pname, int* parameters)
        #endregion Overloads for GLvoid glGetArrayObjectivATI(GLenum arrayId, GLenum pname, GLint* parameters)

        #region void glVariantArrayObjectATI([In] IntPtr extensionPointer, int id, int type, int stride, int buffer, int offset)
        // GLvoid glVariantArrayObjectATI(GLuint id, GLenum type, GLsizei stride, GLuint buffer, GLuint offset)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg id\r\nldarg type\r\nldarg stride\r\nldarg buffer\r\nldarg offset\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg id\r\nldarg type\r\nldarg stride\r\nldarg buffer\r\nldarg offset\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32)\r\nret")]
        #endif
        public static void glVariantArrayObjectATI([In] IntPtr extensionPointer, int id, int type, int stride, int buffer, int offset) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVariantArrayObjectATI([In] IntPtr extensionPointer, int id, int type, int stride, int buffer, int offset)

        #region Overloads for GLvoid glGetVariantArrayObjectfvATI(GLuint id, GLenum pname, GLfloat* parameters)
        #region void glGetVariantArrayObjectfvATI([In] IntPtr extensionPointer, int id, int pname, out float parameters)
        // GLvoid glGetVariantArrayObjectfvATI(GLuint id, GLenum pname, GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]float32)\r\nret")]
        #endif
        public static void glGetVariantArrayObjectfvATI([In] IntPtr extensionPointer, int id, int pname, out float parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetVariantArrayObjectfvATI([In] IntPtr extensionPointer, int id, int pname, out float parameters)

        #region void glGetVariantArrayObjectfvATI([In] IntPtr extensionPointer, int id, int pname, float[] parameters)
        // GLvoid glGetVariantArrayObjectfvATI(GLuint id, GLenum pname, GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]float32[])\r\nret")]
        #endif
        public static void glGetVariantArrayObjectfvATI([In] IntPtr extensionPointer, int id, int pname, float[] parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetVariantArrayObjectfvATI([In] IntPtr extensionPointer, int id, int pname, float[] parameters)

        #region void glGetVariantArrayObjectfvATI([In] IntPtr extensionPointer, int id, int pname, IntPtr parameters)
        // GLvoid glGetVariantArrayObjectfvATI(GLuint id, GLenum pname, GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGetVariantArrayObjectfvATI([In] IntPtr extensionPointer, int id, int pname, IntPtr parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetVariantArrayObjectfvATI([In] IntPtr extensionPointer, int id, int pname, IntPtr parameters)

        #region void glGetVariantArrayObjectfvATI([In] IntPtr extensionPointer, int id, int pname, float* parameters)
        // GLvoid glGetVariantArrayObjectfvATI(GLuint id, GLenum pname, GLfloat* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]float32*)\r\nret")]
        #endif
        public static unsafe void glGetVariantArrayObjectfvATI([In] IntPtr extensionPointer, int id, int pname, float* parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetVariantArrayObjectfvATI([In] IntPtr extensionPointer, int id, int pname, float* parameters)
        #endregion Overloads for GLvoid glGetVariantArrayObjectfvATI(GLuint id, GLenum pname, GLfloat* parameters)

        #region Overloads for GLvoid glGetVariantArrayObjectivATI(GLuint id, GLenum pname, GLint* parameters)
        #region void glGetVariantArrayObjectivATI([In] IntPtr extensionPointer, int id, int pname, out int parameters)
        // GLvoid glGetVariantArrayObjectivATI(GLuint id, GLenum pname, GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]int32)\r\nret")]
        #endif
        public static void glGetVariantArrayObjectivATI([In] IntPtr extensionPointer, int id, int pname, out int parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetVariantArrayObjectivATI([In] IntPtr extensionPointer, int id, int pname, out int parameters)

        #region void glGetVariantArrayObjectivATI([In] IntPtr extensionPointer, int id, int pname, int[] parameters)
        // GLvoid glGetVariantArrayObjectivATI(GLuint id, GLenum pname, GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]int32[])\r\nret")]
        #endif
        public static void glGetVariantArrayObjectivATI([In] IntPtr extensionPointer, int id, int pname, int[] parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetVariantArrayObjectivATI([In] IntPtr extensionPointer, int id, int pname, int[] parameters)

        #region void glGetVariantArrayObjectivATI([In] IntPtr extensionPointer, int id, int pname, IntPtr parameters)
        // GLvoid glGetVariantArrayObjectivATI(GLuint id, GLenum pname, GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGetVariantArrayObjectivATI([In] IntPtr extensionPointer, int id, int pname, IntPtr parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetVariantArrayObjectivATI([In] IntPtr extensionPointer, int id, int pname, IntPtr parameters)

        #region void glGetVariantArrayObjectivATI([In] IntPtr extensionPointer, int id, int pname, int* parameters)
        // GLvoid glGetVariantArrayObjectivATI(GLuint id, GLenum pname, GLint* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]int32*)\r\nret")]
        #endif
        public static unsafe void glGetVariantArrayObjectivATI([In] IntPtr extensionPointer, int id, int pname, int* parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetVariantArrayObjectivATI([In] IntPtr extensionPointer, int id, int pname, int* parameters)
        #endregion Overloads for GLvoid glGetVariantArrayObjectivATI(GLuint id, GLenum pname, GLint* parameters)
        #endregion GL_ATI_vertex_array_object Methods
        #endregion GL_ATI_vertex_array_object (247)

        #region GL_ATI_vertex_streams (249)
        #region GL_ATI_vertex_streams Constants
        #region GL_MAX_VERTEX_STREAMS_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAX_VERTEX_STREAMS_ATI 0x876B
        public const int GL_MAX_VERTEX_STREAMS_ATI = 0x876B;
        #endregion GL_MAX_VERTEX_STREAMS_ATI

        #region GL_VERTEX_STREAM0_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VERTEX_STREAM0_ATI 0x876C
        public const int GL_VERTEX_STREAM0_ATI = 0x876C;
        #endregion GL_VERTEX_STREAM0_ATI

        #region GL_VERTEX_STREAM1_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VERTEX_STREAM1_ATI 0x876D
        public const int GL_VERTEX_STREAM1_ATI = 0x876D;
        #endregion GL_VERTEX_STREAM1_ATI

        #region GL_VERTEX_STREAM2_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VERTEX_STREAM2_ATI 0x876E
        public const int GL_VERTEX_STREAM2_ATI = 0x876E;
        #endregion GL_VERTEX_STREAM2_ATI

        #region GL_VERTEX_STREAM3_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VERTEX_STREAM3_ATI 0x876F
        public const int GL_VERTEX_STREAM3_ATI = 0x876F;
        #endregion GL_VERTEX_STREAM3_ATI

        #region GL_VERTEX_STREAM4_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VERTEX_STREAM4_ATI 0x8770
        public const int GL_VERTEX_STREAM4_ATI = 0x8770;
        #endregion GL_VERTEX_STREAM4_ATI

        #region GL_VERTEX_STREAM5_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VERTEX_STREAM5_ATI 0x8771
        public const int GL_VERTEX_STREAM5_ATI = 0x8771;
        #endregion GL_VERTEX_STREAM5_ATI

        #region GL_VERTEX_STREAM6_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VERTEX_STREAM6_ATI 0x8772
        public const int GL_VERTEX_STREAM6_ATI = 0x8772;
        #endregion GL_VERTEX_STREAM6_ATI

        #region GL_VERTEX_STREAM7_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VERTEX_STREAM7_ATI 0x8773
        public const int GL_VERTEX_STREAM7_ATI = 0x8773;
        #endregion GL_VERTEX_STREAM7_ATI

        #region GL_VERTEX_SOURCE_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VERTEX_SOURCE_ATI 0x8774
        public const int GL_VERTEX_SOURCE_ATI = 0x8774;
        #endregion GL_VERTEX_SOURCE_ATI
        #endregion GL_ATI_vertex_streams Constants

        #region GL_ATI_vertex_streams Methods
        #region void glVertexStream1s([In] IntPtr extensionPointer, int streamId, short coords)
        // GLvoid glVertexStream1s(GLenum streamId, GLshort coords)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg streamId\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg streamId\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int16)\r\nret")]
        #endif
        public static void glVertexStream1s([In] IntPtr extensionPointer, int streamId, short coords) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexStream1s([In] IntPtr extensionPointer, int streamId, short coords)

        #region void glVertexStream1i([In] IntPtr extensionPointer, int streamId, int x)
        // GLvoid glVertexStream1i(GLenum streamId, GLint x)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg streamId\r\nldarg x\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg streamId\r\nldarg x\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32)\r\nret")]
        #endif
        public static void glVertexStream1i([In] IntPtr extensionPointer, int streamId, int x) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexStream1i([In] IntPtr extensionPointer, int streamId, int x)

        #region void glVertexStream1f([In] IntPtr extensionPointer, int streamId, float x)
        // GLvoid glVertexStream1f(GLenum streamId, GLfloat x)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg streamId\r\nldarg x\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg streamId\r\nldarg x\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float32)\r\nret")]
        #endif
        public static void glVertexStream1f([In] IntPtr extensionPointer, int streamId, float x) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexStream1f([In] IntPtr extensionPointer, int streamId, float x)

        #region void glVertexStream1d([In] IntPtr extensionPointer, int streamId, double x)
        // GLvoid glVertexStream1d(GLenum streamId, GLdouble x)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg streamId\r\nldarg x\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float64)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg streamId\r\nldarg x\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float64)\r\nret")]
        #endif
        public static void glVertexStream1d([In] IntPtr extensionPointer, int streamId, double x) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexStream1d([In] IntPtr extensionPointer, int streamId, double x)

        #region void glVertexStream1sv([In] IntPtr extensionPointer, int streamId, short coords)
        // GLvoid glVertexStream1sv(GLenum streamId, GLshort coords)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg streamId\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg streamId\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int16)\r\nret")]
        #endif
        public static void glVertexStream1sv([In] IntPtr extensionPointer, int streamId, short coords) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexStream1sv([In] IntPtr extensionPointer, int streamId, short coords)

        #region void glVertexStream1iv([In] IntPtr extensionPointer, int streamId, int coords)
        // GLvoid glVertexStream1iv(GLenum streamId, GLint coords)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg streamId\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg streamId\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32)\r\nret")]
        #endif
        public static void glVertexStream1iv([In] IntPtr extensionPointer, int streamId, int coords) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexStream1iv([In] IntPtr extensionPointer, int streamId, int coords)

        #region void glVertexStream1fv([In] IntPtr extensionPointer, int streamId, float coords)
        // GLvoid glVertexStream1fv(GLenum streamId, GLfloat coords)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg streamId\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg streamId\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float32)\r\nret")]
        #endif
        public static void glVertexStream1fv([In] IntPtr extensionPointer, int streamId, float coords) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexStream1fv([In] IntPtr extensionPointer, int streamId, float coords)

        #region void glVertexStream1dv([In] IntPtr extensionPointer, int streamId, double coords)
        // GLvoid glVertexStream1dv(GLenum streamId, GLdouble coords)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg streamId\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float64)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg streamId\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float64)\r\nret")]
        #endif
        public static void glVertexStream1dv([In] IntPtr extensionPointer, int streamId, double coords) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexStream1dv([In] IntPtr extensionPointer, int streamId, double coords)

        #region void glVertexStream2s([In] IntPtr extensionPointer, int streamId, short x, short y)
        // GLvoid glVertexStream2s(GLenum streamId, GLshort x, GLshort y)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg streamId\r\nldarg x\r\nldarg y\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int16,[in]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg streamId\r\nldarg x\r\nldarg y\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int16,[in]int16)\r\nret")]
        #endif
        public static void glVertexStream2s([In] IntPtr extensionPointer, int streamId, short x, short y) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexStream2s([In] IntPtr extensionPointer, int streamId, short x, short y)

        #region void glVertexStream2i([In] IntPtr extensionPointer, int streamId, int x, int y)
        // GLvoid glVertexStream2i(GLenum streamId, GLint x, GLint y)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg streamId\r\nldarg x\r\nldarg y\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg streamId\r\nldarg x\r\nldarg y\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32)\r\nret")]
        #endif
        public static void glVertexStream2i([In] IntPtr extensionPointer, int streamId, int x, int y) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexStream2i([In] IntPtr extensionPointer, int streamId, int x, int y)

        #region void glVertexStream2f([In] IntPtr extensionPointer, int streamId, float x, float y)
        // GLvoid glVertexStream2f(GLenum streamId, GLfloat x, GLfloat y)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg streamId\r\nldarg x\r\nldarg y\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float32,[in]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg streamId\r\nldarg x\r\nldarg y\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float32,[in]float32)\r\nret")]
        #endif
        public static void glVertexStream2f([In] IntPtr extensionPointer, int streamId, float x, float y) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexStream2f([In] IntPtr extensionPointer, int streamId, float x, float y)

        #region void glVertexStream2d([In] IntPtr extensionPointer, int streamId, double x, double y)
        // GLvoid glVertexStream2d(GLenum streamId, GLdouble x, GLdouble y)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg streamId\r\nldarg x\r\nldarg y\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float64,[in]float64)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg streamId\r\nldarg x\r\nldarg y\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float64,[in]float64)\r\nret")]
        #endif
        public static void glVertexStream2d([In] IntPtr extensionPointer, int streamId, double x, double y) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexStream2d([In] IntPtr extensionPointer, int streamId, double x, double y)

        #region void glVertexStream2sv([In] IntPtr extensionPointer, int streamId, short coords)
        // GLvoid glVertexStream2sv(GLenum streamId, GLshort coords)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg streamId\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg streamId\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int16)\r\nret")]
        #endif
        public static void glVertexStream2sv([In] IntPtr extensionPointer, int streamId, short coords) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexStream2sv([In] IntPtr extensionPointer, int streamId, short coords)

        #region void glVertexStream2iv([In] IntPtr extensionPointer, int streamId, int coords)
        // GLvoid glVertexStream2iv(GLenum streamId, GLint coords)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg streamId\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg streamId\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32)\r\nret")]
        #endif
        public static void glVertexStream2iv([In] IntPtr extensionPointer, int streamId, int coords) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexStream2iv([In] IntPtr extensionPointer, int streamId, int coords)

        #region void glVertexStream2fv([In] IntPtr extensionPointer, int streamId, float coords)
        // GLvoid glVertexStream2fv(GLenum streamId, GLfloat coords)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg streamId\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg streamId\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float32)\r\nret")]
        #endif
        public static void glVertexStream2fv([In] IntPtr extensionPointer, int streamId, float coords) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexStream2fv([In] IntPtr extensionPointer, int streamId, float coords)

        #region void glVertexStream2dv([In] IntPtr extensionPointer, int streamId, double coords)
        // GLvoid glVertexStream2dv(GLenum streamId, GLdouble coords)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg streamId\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float64)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg streamId\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float64)\r\nret")]
        #endif
        public static void glVertexStream2dv([In] IntPtr extensionPointer, int streamId, double coords) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexStream2dv([In] IntPtr extensionPointer, int streamId, double coords)

        #region void glVertexStream3s([In] IntPtr extensionPointer, int streamId, short x, short y, short z)
        // GLvoid glVertexStream3s(GLenum streamId, GLshort x, GLshort y, GLshort z)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg streamId\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int16,[in]int16,[in]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg streamId\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int16,[in]int16,[in]int16)\r\nret")]
        #endif
        public static void glVertexStream3s([In] IntPtr extensionPointer, int streamId, short x, short y, short z) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexStream3s([In] IntPtr extensionPointer, int streamId, short x, short y, short z)

        #region void glVertexStream3i([In] IntPtr extensionPointer, int streamId, int x, int y, int z)
        // GLvoid glVertexStream3i(GLenum streamId, GLint x, GLint y, GLint z)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg streamId\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg streamId\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32)\r\nret")]
        #endif
        public static void glVertexStream3i([In] IntPtr extensionPointer, int streamId, int x, int y, int z) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexStream3i([In] IntPtr extensionPointer, int streamId, int x, int y, int z)

        #region void glVertexStream3f([In] IntPtr extensionPointer, int streamId, float x, float y, float z)
        // GLvoid glVertexStream3f(GLenum streamId, GLfloat x, GLfloat y, GLfloat z)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg streamId\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float32,[in]float32,[in]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg streamId\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float32,[in]float32,[in]float32)\r\nret")]
        #endif
        public static void glVertexStream3f([In] IntPtr extensionPointer, int streamId, float x, float y, float z) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexStream3f([In] IntPtr extensionPointer, int streamId, float x, float y, float z)

        #region void glVertexStream3d([In] IntPtr extensionPointer, int streamId, double x, double y, double z)
        // GLvoid glVertexStream3d(GLenum streamId, GLdouble x, GLdouble y, GLdouble z)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg streamId\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float64,[in]float64,[in]float64)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg streamId\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float64,[in]float64,[in]float64)\r\nret")]
        #endif
        public static void glVertexStream3d([In] IntPtr extensionPointer, int streamId, double x, double y, double z) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexStream3d([In] IntPtr extensionPointer, int streamId, double x, double y, double z)

        #region void glVertexStream3sv([In] IntPtr extensionPointer, int streamId, short coords)
        // GLvoid glVertexStream3sv(GLenum streamId, GLshort coords)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg streamId\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg streamId\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int16)\r\nret")]
        #endif
        public static void glVertexStream3sv([In] IntPtr extensionPointer, int streamId, short coords) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexStream3sv([In] IntPtr extensionPointer, int streamId, short coords)

        #region void glVertexStream3iv([In] IntPtr extensionPointer, int streamId, int coords)
        // GLvoid glVertexStream3iv(GLenum streamId, GLint coords)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg streamId\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg streamId\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32)\r\nret")]
        #endif
        public static void glVertexStream3iv([In] IntPtr extensionPointer, int streamId, int coords) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexStream3iv([In] IntPtr extensionPointer, int streamId, int coords)

        #region void glVertexStream3fv([In] IntPtr extensionPointer, int streamId, float coords)
        // GLvoid glVertexStream3fv(GLenum streamId, GLfloat coords)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg streamId\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg streamId\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float32)\r\nret")]
        #endif
        public static void glVertexStream3fv([In] IntPtr extensionPointer, int streamId, float coords) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexStream3fv([In] IntPtr extensionPointer, int streamId, float coords)

        #region void glVertexStream3dv([In] IntPtr extensionPointer, int streamId, double coords)
        // GLvoid glVertexStream3dv(GLenum streamId, GLdouble coords)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg streamId\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float64)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg streamId\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float64)\r\nret")]
        #endif
        public static void glVertexStream3dv([In] IntPtr extensionPointer, int streamId, double coords) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexStream3dv([In] IntPtr extensionPointer, int streamId, double coords)

        #region void glVertexStream4s([In] IntPtr extensionPointer, int streamId, short x, short y, short z, short w)
        // GLvoid glVertexStream4s(GLenum streamId, GLshort x, GLshort y, GLshort z, GLshort w)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg streamId\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg w\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int16,[in]int16,[in]int16,[in]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg streamId\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg w\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int16,[in]int16,[in]int16,[in]int16)\r\nret")]
        #endif
        public static void glVertexStream4s([In] IntPtr extensionPointer, int streamId, short x, short y, short z, short w) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexStream4s([In] IntPtr extensionPointer, int streamId, short x, short y, short z, short w)

        #region void glVertexStream4i([In] IntPtr extensionPointer, int streamId, int x, int y, int z, int w)
        // GLvoid glVertexStream4i(GLenum streamId, GLint x, GLint y, GLint z, GLint w)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg streamId\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg w\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg streamId\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg w\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32)\r\nret")]
        #endif
        public static void glVertexStream4i([In] IntPtr extensionPointer, int streamId, int x, int y, int z, int w) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexStream4i([In] IntPtr extensionPointer, int streamId, int x, int y, int z, int w)

        #region void glVertexStream4f([In] IntPtr extensionPointer, int streamId, float x, float y, float z, float w)
        // GLvoid glVertexStream4f(GLenum streamId, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg streamId\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg w\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float32,[in]float32,[in]float32,[in]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg streamId\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg w\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float32,[in]float32,[in]float32,[in]float32)\r\nret")]
        #endif
        public static void glVertexStream4f([In] IntPtr extensionPointer, int streamId, float x, float y, float z, float w) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexStream4f([In] IntPtr extensionPointer, int streamId, float x, float y, float z, float w)

        #region void glVertexStream4d([In] IntPtr extensionPointer, int streamId, double x, double y, double z, double w)
        // GLvoid glVertexStream4d(GLenum streamId, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg streamId\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg w\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float64,[in]float64,[in]float64,[in]float64)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg streamId\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg w\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float64,[in]float64,[in]float64,[in]float64)\r\nret")]
        #endif
        public static void glVertexStream4d([In] IntPtr extensionPointer, int streamId, double x, double y, double z, double w) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexStream4d([In] IntPtr extensionPointer, int streamId, double x, double y, double z, double w)

        #region void glVertexStream4sv([In] IntPtr extensionPointer, int streamId, short coords)
        // GLvoid glVertexStream4sv(GLenum streamId, GLshort coords)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg streamId\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg streamId\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int16)\r\nret")]
        #endif
        public static void glVertexStream4sv([In] IntPtr extensionPointer, int streamId, short coords) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexStream4sv([In] IntPtr extensionPointer, int streamId, short coords)

        #region void glVertexStream4iv([In] IntPtr extensionPointer, int streamId, int coords)
        // GLvoid glVertexStream4iv(GLenum streamId, GLint coords)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg streamId\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg streamId\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32)\r\nret")]
        #endif
        public static void glVertexStream4iv([In] IntPtr extensionPointer, int streamId, int coords) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexStream4iv([In] IntPtr extensionPointer, int streamId, int coords)

        #region void glVertexStream4fv([In] IntPtr extensionPointer, int streamId, float coords)
        // GLvoid glVertexStream4fv(GLenum streamId, GLfloat coords)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg streamId\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg streamId\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float32)\r\nret")]
        #endif
        public static void glVertexStream4fv([In] IntPtr extensionPointer, int streamId, float coords) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexStream4fv([In] IntPtr extensionPointer, int streamId, float coords)

        #region void glVertexStream4dv([In] IntPtr extensionPointer, int streamId, double coords)
        // GLvoid glVertexStream4dv(GLenum streamId, GLdouble coords)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg streamId\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float64)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg streamId\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float64)\r\nret")]
        #endif
        public static void glVertexStream4dv([In] IntPtr extensionPointer, int streamId, double coords) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexStream4dv([In] IntPtr extensionPointer, int streamId, double coords)

        #region Overloads for GLvoid glNormalStream3b(GLenum streamId, GLbyte x, GLbyte y, GLbyte z)
        #region void glNormalStream3b([In] IntPtr extensionPointer, int streamId, byte x, byte y, byte z)
        // GLvoid glNormalStream3b(GLenum streamId, GLbyte x, GLbyte y, GLbyte z)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg streamId\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]unsigned int8,[in]unsigned int8,[in]unsigned int8)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg streamId\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]unsigned int8,[in]unsigned int8,[in]unsigned int8)\r\nret")]
        #endif
        public static void glNormalStream3b([In] IntPtr extensionPointer, int streamId, byte x, byte y, byte z) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glNormalStream3b([In] IntPtr extensionPointer, int streamId, byte x, byte y, byte z)

        #region void glNormalStream3b([In] IntPtr extensionPointer, int streamId, sbyte x, sbyte y, sbyte z)
        // GLvoid glNormalStream3b(GLenum streamId, GLbyte x, GLbyte y, GLbyte z)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg streamId\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int8,[in]int8,[in]int8)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg streamId\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int8,[in]int8,[in]int8)\r\nret")]
        #endif
        public static void glNormalStream3b([In] IntPtr extensionPointer, int streamId, sbyte x, sbyte y, sbyte z) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glNormalStream3b([In] IntPtr extensionPointer, int streamId, sbyte x, sbyte y, sbyte z)
        #endregion Overloads for GLvoid glNormalStream3b(GLenum streamId, GLbyte x, GLbyte y, GLbyte z)

        #region void glNormalStream3s([In] IntPtr extensionPointer, int streamId, short x, short y, short z)
        // GLvoid glNormalStream3s(GLenum streamId, GLshort x, GLshort y, GLshort z)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg streamId\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int16,[in]int16,[in]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg streamId\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int16,[in]int16,[in]int16)\r\nret")]
        #endif
        public static void glNormalStream3s([In] IntPtr extensionPointer, int streamId, short x, short y, short z) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glNormalStream3s([In] IntPtr extensionPointer, int streamId, short x, short y, short z)

        #region void glNormalStream3i([In] IntPtr extensionPointer, int streamId, int x, int y, int z)
        // GLvoid glNormalStream3i(GLenum streamId, GLint x, GLint y, GLint z)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg streamId\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg streamId\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32)\r\nret")]
        #endif
        public static void glNormalStream3i([In] IntPtr extensionPointer, int streamId, int x, int y, int z) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glNormalStream3i([In] IntPtr extensionPointer, int streamId, int x, int y, int z)

        #region void glNormalStream3f([In] IntPtr extensionPointer, int streamId, float x, float y, float z)
        // GLvoid glNormalStream3f(GLenum streamId, GLfloat x, GLfloat y, GLfloat z)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg streamId\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float32,[in]float32,[in]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg streamId\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float32,[in]float32,[in]float32)\r\nret")]
        #endif
        public static void glNormalStream3f([In] IntPtr extensionPointer, int streamId, float x, float y, float z) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glNormalStream3f([In] IntPtr extensionPointer, int streamId, float x, float y, float z)

        #region void glNormalStream3d([In] IntPtr extensionPointer, int streamId, double x, double y, double z)
        // GLvoid glNormalStream3d(GLenum streamId, GLdouble x, GLdouble y, GLdouble z)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg streamId\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float64,[in]float64,[in]float64)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg streamId\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float64,[in]float64,[in]float64)\r\nret")]
        #endif
        public static void glNormalStream3d([In] IntPtr extensionPointer, int streamId, double x, double y, double z) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glNormalStream3d([In] IntPtr extensionPointer, int streamId, double x, double y, double z)

        #region Overloads for GLvoid glNormalStream3bv(GLenum streamId, GLbyte coords)
        #region void glNormalStream3bv([In] IntPtr extensionPointer, int streamId, byte coords)
        // GLvoid glNormalStream3bv(GLenum streamId, GLbyte coords)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg streamId\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]unsigned int8)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg streamId\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]unsigned int8)\r\nret")]
        #endif
        public static void glNormalStream3bv([In] IntPtr extensionPointer, int streamId, byte coords) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glNormalStream3bv([In] IntPtr extensionPointer, int streamId, byte coords)

        #region void glNormalStream3bv([In] IntPtr extensionPointer, int streamId, sbyte coords)
        // GLvoid glNormalStream3bv(GLenum streamId, GLbyte coords)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg streamId\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int8)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg streamId\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int8)\r\nret")]
        #endif
        public static void glNormalStream3bv([In] IntPtr extensionPointer, int streamId, sbyte coords) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glNormalStream3bv([In] IntPtr extensionPointer, int streamId, sbyte coords)
        #endregion Overloads for GLvoid glNormalStream3bv(GLenum streamId, GLbyte coords)

        #region void glNormalStream3sv([In] IntPtr extensionPointer, int streamId, short coords)
        // GLvoid glNormalStream3sv(GLenum streamId, GLshort coords)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg streamId\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg streamId\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int16)\r\nret")]
        #endif
        public static void glNormalStream3sv([In] IntPtr extensionPointer, int streamId, short coords) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glNormalStream3sv([In] IntPtr extensionPointer, int streamId, short coords)

        #region void glNormalStream3iv([In] IntPtr extensionPointer, int streamId, int coords)
        // GLvoid glNormalStream3iv(GLenum streamId, GLint coords)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg streamId\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg streamId\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32)\r\nret")]
        #endif
        public static void glNormalStream3iv([In] IntPtr extensionPointer, int streamId, int coords) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glNormalStream3iv([In] IntPtr extensionPointer, int streamId, int coords)

        #region void glNormalStream3fv([In] IntPtr extensionPointer, int streamId, float coords)
        // GLvoid glNormalStream3fv(GLenum streamId, GLfloat coords)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg streamId\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg streamId\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float32)\r\nret")]
        #endif
        public static void glNormalStream3fv([In] IntPtr extensionPointer, int streamId, float coords) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glNormalStream3fv([In] IntPtr extensionPointer, int streamId, float coords)

        #region void glNormalStream3dv([In] IntPtr extensionPointer, int streamId, double coords)
        // GLvoid glNormalStream3dv(GLenum streamId, GLdouble coords)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg streamId\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float64)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg streamId\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float64)\r\nret")]
        #endif
        public static void glNormalStream3dv([In] IntPtr extensionPointer, int streamId, double coords) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glNormalStream3dv([In] IntPtr extensionPointer, int streamId, double coords)

        #region void glClientActiveVertexStream([In] IntPtr extensionPointer, int streamId)
        // GLvoid glClientActiveVertexStream(GLenum streamId)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg streamId\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg streamId\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32)\r\nret")]
        #endif
        public static void glClientActiveVertexStream([In] IntPtr extensionPointer, int streamId) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glClientActiveVertexStream([In] IntPtr extensionPointer, int streamId)

        #region void glVertexBlendEnvi([In] IntPtr extensionPointer, int pname, int param)
        // GLvoid glVertexBlendEnvi(GLenum pname, GLint param)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg param\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg param\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32)\r\nret")]
        #endif
        public static void glVertexBlendEnvi([In] IntPtr extensionPointer, int pname, int param) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexBlendEnvi([In] IntPtr extensionPointer, int pname, int param)

        #region void glVertexBlendEnvf([In] IntPtr extensionPointer, int pname, float param)
        // GLvoid glVertexBlendEnvf(GLenum pname, GLfloat param)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg param\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg param\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float32)\r\nret")]
        #endif
        public static void glVertexBlendEnvf([In] IntPtr extensionPointer, int pname, float param) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexBlendEnvf([In] IntPtr extensionPointer, int pname, float param)
        #endregion GL_ATI_vertex_streams Methods
        #endregion GL_ATI_vertex_streams (249)

        #region GL_ATI_element_array (256)
        #region GL_ATI_element_array Constants
        #region GL_ELEMENT_ARRAY_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_ELEMENT_ARRAY_ATI 0x8768
        public const int GL_ELEMENT_ARRAY_ATI = 0x8768;
        #endregion GL_ELEMENT_ARRAY_ATI

        #region GL_ELEMENT_ARRAY_TYPE_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_ELEMENT_ARRAY_TYPE_ATI 0x8769
        public const int GL_ELEMENT_ARRAY_TYPE_ATI = 0x8769;
        #endregion GL_ELEMENT_ARRAY_TYPE_ATI

        #region GL_ELEMENT_ARRAY_POINTER_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_ELEMENT_ARRAY_POINTER_ATI 0x876A
        public const int GL_ELEMENT_ARRAY_POINTER_ATI = 0x876A;
        #endregion GL_ELEMENT_ARRAY_POINTER_ATI
        #endregion GL_ATI_element_array Constants

        #region GL_ATI_element_array Methods
        #region Overloads for GLvoid glElementPointerATI(GLenum type, const GLvoid* pointer)
        #region void glElementPointerATI([In] IntPtr extensionPointer, int type, short[] pointer)
        // GLvoid glElementPointerATI(GLenum type, const GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg type\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg type\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int16[])\r\nret")]
        #endif
        public static void glElementPointerATI([In] IntPtr extensionPointer, int type, short[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glElementPointerATI([In] IntPtr extensionPointer, int type, short[] pointer)

        #region void glElementPointerATI([In] IntPtr extensionPointer, int type, float[] pointer)
        // GLvoid glElementPointerATI(GLenum type, const GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg type\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg type\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float32[])\r\nret")]
        #endif
        public static void glElementPointerATI([In] IntPtr extensionPointer, int type, float[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glElementPointerATI([In] IntPtr extensionPointer, int type, float[] pointer)

        #region void glElementPointerATI([In] IntPtr extensionPointer, int type, int[] pointer)
        // GLvoid glElementPointerATI(GLenum type, const GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg type\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg type\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32[])\r\nret")]
        #endif
        public static void glElementPointerATI([In] IntPtr extensionPointer, int type, int[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glElementPointerATI([In] IntPtr extensionPointer, int type, int[] pointer)

        #region void glElementPointerATI([In] IntPtr extensionPointer, int type, IntPtr pointer)
        // GLvoid glElementPointerATI(GLenum type, const GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg type\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg type\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glElementPointerATI([In] IntPtr extensionPointer, int type, IntPtr pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glElementPointerATI([In] IntPtr extensionPointer, int type, IntPtr pointer)

        #region void glElementPointerATI([In] IntPtr extensionPointer, int type, byte[] pointer)
        // GLvoid glElementPointerATI(GLenum type, const GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg type\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]unsigned int8[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg type\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]unsigned int8[])\r\nret")]
        #endif
        public static void glElementPointerATI([In] IntPtr extensionPointer, int type, byte[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glElementPointerATI([In] IntPtr extensionPointer, int type, byte[] pointer)

        #region void glElementPointerATI([In] IntPtr extensionPointer, int type, double[] pointer)
        // GLvoid glElementPointerATI(GLenum type, const GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg type\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float64[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg type\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float64[])\r\nret")]
        #endif
        public static void glElementPointerATI([In] IntPtr extensionPointer, int type, double[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glElementPointerATI([In] IntPtr extensionPointer, int type, double[] pointer)

        #region void glElementPointerATI([In] IntPtr extensionPointer, int type, uint[] pointer)
        // GLvoid glElementPointerATI(GLenum type, const GLvoid* pointer)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg type\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]unsigned int32[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg type\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]unsigned int32[])\r\nret")]
        #endif
        public static void glElementPointerATI([In] IntPtr extensionPointer, int type, uint[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glElementPointerATI([In] IntPtr extensionPointer, int type, uint[] pointer)

        #region void glElementPointerATI([In] IntPtr extensionPointer, int type, sbyte[] pointer)
        // GLvoid glElementPointerATI(GLenum type, const GLvoid* pointer)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg type\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int8[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg type\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int8[])\r\nret")]
        #endif
        public static void glElementPointerATI([In] IntPtr extensionPointer, int type, sbyte[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glElementPointerATI([In] IntPtr extensionPointer, int type, sbyte[] pointer)

        #region void glElementPointerATI([In] IntPtr extensionPointer, int type, ushort[] pointer)
        // GLvoid glElementPointerATI(GLenum type, const GLvoid* pointer)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg type\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]unsigned int16[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg type\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]unsigned int16[])\r\nret")]
        #endif
        public static void glElementPointerATI([In] IntPtr extensionPointer, int type, ushort[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glElementPointerATI([In] IntPtr extensionPointer, int type, ushort[] pointer)

        #region void glElementPointerATI([In] IntPtr extensionPointer, int type, void* pointer)
        // GLvoid glElementPointerATI(GLenum type, const GLvoid* pointer)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg type\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]void*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg type\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]void*)\r\nret")]
        #endif
        public static unsafe void glElementPointerATI([In] IntPtr extensionPointer, int type, void* pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glElementPointerATI([In] IntPtr extensionPointer, int type, void* pointer)
        #endregion Overloads for GLvoid glElementPointerATI(GLenum type, const GLvoid* pointer)

        #region void glDrawElementArrayATI([In] IntPtr extensionPointer, int mode, int count)
        // GLvoid glDrawElementArrayATI(GLenum mode, GLsizei count)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg mode\r\nldarg count\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg mode\r\nldarg count\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32)\r\nret")]
        #endif
        public static void glDrawElementArrayATI([In] IntPtr extensionPointer, int mode, int count) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glDrawElementArrayATI([In] IntPtr extensionPointer, int mode, int count)

        #region void glDrawRangeElementArrayATI([In] IntPtr extensionPointer, int mode, int start, int end, int count)
        // GLvoid glDrawRangeElementArrayATI(GLenum mode, GLuint start, GLuint end, GLsizei count)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg mode\r\nldarg start\r\nldarg end\r\nldarg count\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg mode\r\nldarg start\r\nldarg end\r\nldarg count\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32)\r\nret")]
        #endif
        public static void glDrawRangeElementArrayATI([In] IntPtr extensionPointer, int mode, int start, int end, int count) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glDrawRangeElementArrayATI([In] IntPtr extensionPointer, int mode, int start, int end, int count)
        #endregion GL_ATI_element_array Methods
        #endregion GL_ATI_element_array (256)

        #region GL_ATI_text_fragment_shader (269)
        #region GL_ATI_text_fragment_shader Constants
        #region GL_TEXT_FRAGMENT_SHADER_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXT_FRAGMENT_SHADER_ATI 0x8200
        public const int GL_TEXT_FRAGMENT_SHADER_ATI = 0x8200;
        #endregion GL_TEXT_FRAGMENT_SHADER_ATI
        #endregion GL_ATI_text_fragment_shader Constants
        #endregion GL_ATI_text_fragment_shader (269)

        #region GL_ATI_draw_buffers (277)
        #region GL_ATI_draw_buffers Constants
        #region GL_MAX_DRAW_BUFFERS_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAX_DRAW_BUFFERS_ATI 0x8824
        public const int GL_MAX_DRAW_BUFFERS_ATI = 0x8824;
        #endregion GL_MAX_DRAW_BUFFERS_ATI

        #region GL_DRAW_BUFFER0_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DRAW_BUFFER0_ATI 0x8825
        public const int GL_DRAW_BUFFER0_ATI = 0x8825;
        #endregion GL_DRAW_BUFFER0_ATI

        #region GL_DRAW_BUFFER1_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DRAW_BUFFER1_ATI 0x8826
        public const int GL_DRAW_BUFFER1_ATI = 0x8826;
        #endregion GL_DRAW_BUFFER1_ATI

        #region GL_DRAW_BUFFER2_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DRAW_BUFFER2_ATI 0x8827
        public const int GL_DRAW_BUFFER2_ATI = 0x8827;
        #endregion GL_DRAW_BUFFER2_ATI

        #region GL_DRAW_BUFFER3_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DRAW_BUFFER3_ATI 0x8828
        public const int GL_DRAW_BUFFER3_ATI = 0x8828;
        #endregion GL_DRAW_BUFFER3_ATI

        #region GL_DRAW_BUFFER4_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DRAW_BUFFER4_ATI 0x8829
        public const int GL_DRAW_BUFFER4_ATI = 0x8829;
        #endregion GL_DRAW_BUFFER4_ATI

        #region GL_DRAW_BUFFER5_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DRAW_BUFFER5_ATI 0x882A
        public const int GL_DRAW_BUFFER5_ATI = 0x882A;
        #endregion GL_DRAW_BUFFER5_ATI

        #region GL_DRAW_BUFFER6_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DRAW_BUFFER6_ATI 0x882B
        public const int GL_DRAW_BUFFER6_ATI = 0x882B;
        #endregion GL_DRAW_BUFFER6_ATI

        #region GL_DRAW_BUFFER7_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DRAW_BUFFER7_ATI 0x882C
        public const int GL_DRAW_BUFFER7_ATI = 0x882C;
        #endregion GL_DRAW_BUFFER7_ATI

        #region GL_DRAW_BUFFER8_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DRAW_BUFFER8_ATI 0x882D
        public const int GL_DRAW_BUFFER8_ATI = 0x882D;
        #endregion GL_DRAW_BUFFER8_ATI

        #region GL_DRAW_BUFFER9_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DRAW_BUFFER9_ATI 0x882E
        public const int GL_DRAW_BUFFER9_ATI = 0x882E;
        #endregion GL_DRAW_BUFFER9_ATI

        #region GL_DRAW_BUFFER10_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DRAW_BUFFER10_ATI 0x882F
        public const int GL_DRAW_BUFFER10_ATI = 0x882F;
        #endregion GL_DRAW_BUFFER10_ATI

        #region GL_DRAW_BUFFER11_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DRAW_BUFFER11_ATI 0x8830
        public const int GL_DRAW_BUFFER11_ATI = 0x8830;
        #endregion GL_DRAW_BUFFER11_ATI

        #region GL_DRAW_BUFFER12_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DRAW_BUFFER12_ATI 0x8831
        public const int GL_DRAW_BUFFER12_ATI = 0x8831;
        #endregion GL_DRAW_BUFFER12_ATI

        #region GL_DRAW_BUFFER13_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DRAW_BUFFER13_ATI 0x8832
        public const int GL_DRAW_BUFFER13_ATI = 0x8832;
        #endregion GL_DRAW_BUFFER13_ATI

        #region GL_DRAW_BUFFER14_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DRAW_BUFFER14_ATI 0x8833
        public const int GL_DRAW_BUFFER14_ATI = 0x8833;
        #endregion GL_DRAW_BUFFER14_ATI

        #region GL_DRAW_BUFFER15_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DRAW_BUFFER15_ATI 0x8834
        public const int GL_DRAW_BUFFER15_ATI = 0x8834;
        #endregion GL_DRAW_BUFFER15_ATI
        #endregion GL_ATI_draw_buffers Constants

        #region GL_ATI_draw_buffers Methods
        #region Overloads for GLvoid glDrawBuffersATI(GLsizei n, const GLenum* bufs)
        #region void glDrawBuffersATI([In] IntPtr extensionPointer, int n, ref int bufs)
        // GLvoid glDrawBuffersATI(GLsizei n, const GLenum* bufs)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg bufs\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg bufs\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]int32)\r\nret")]
        #endif
        public static void glDrawBuffersATI([In] IntPtr extensionPointer, int n, ref int bufs) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glDrawBuffersATI([In] IntPtr extensionPointer, int n, ref int bufs)

        #region void glDrawBuffersATI([In] IntPtr extensionPointer, int n, int[] bufs)
        // GLvoid glDrawBuffersATI(GLsizei n, const GLenum* bufs)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg bufs\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg bufs\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32[])\r\nret")]
        #endif
        public static void glDrawBuffersATI([In] IntPtr extensionPointer, int n, int[] bufs) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glDrawBuffersATI([In] IntPtr extensionPointer, int n, int[] bufs)

        #region void glDrawBuffersATI([In] IntPtr extensionPointer, int n, IntPtr bufs)
        // GLvoid glDrawBuffersATI(GLsizei n, const GLenum* bufs)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg bufs\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg bufs\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glDrawBuffersATI([In] IntPtr extensionPointer, int n, IntPtr bufs) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glDrawBuffersATI([In] IntPtr extensionPointer, int n, IntPtr bufs)

        #region void glDrawBuffersATI([In] IntPtr extensionPointer, int n, int* bufs)
        // GLvoid glDrawBuffersATI(GLsizei n, const GLenum* bufs)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg bufs\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg bufs\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32*)\r\nret")]
        #endif
        public static unsafe void glDrawBuffersATI([In] IntPtr extensionPointer, int n, int* bufs) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glDrawBuffersATI([In] IntPtr extensionPointer, int n, int* bufs)
        #endregion Overloads for GLvoid glDrawBuffersATI(GLsizei n, const GLenum* bufs)
        #endregion GL_ATI_draw_buffers Methods
        #endregion GL_ATI_draw_buffers (277)

        #region GL_ATI_texture_float (280)
        #region GL_ATI_texture_float Constants
        #region GL_RGBA_FLOAT32_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_RGBA_FLOAT32_ATI 0x8814
        public const int GL_RGBA_FLOAT32_ATI = 0x8814;
        #endregion GL_RGBA_FLOAT32_ATI

        #region GL_RGB_FLOAT32_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_RGB_FLOAT32_ATI 0x8815
        public const int GL_RGB_FLOAT32_ATI = 0x8815;
        #endregion GL_RGB_FLOAT32_ATI

        #region GL_ALPHA_FLOAT32_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_ALPHA_FLOAT32_ATI 0x8816
        public const int GL_ALPHA_FLOAT32_ATI = 0x8816;
        #endregion GL_ALPHA_FLOAT32_ATI

        #region GL_INTENSITY_FLOAT32_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_INTENSITY_FLOAT32_ATI 0x8817
        public const int GL_INTENSITY_FLOAT32_ATI = 0x8817;
        #endregion GL_INTENSITY_FLOAT32_ATI

        #region GL_LUMINANCE_FLOAT32_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_LUMINANCE_FLOAT32_ATI 0x8818
        public const int GL_LUMINANCE_FLOAT32_ATI = 0x8818;
        #endregion GL_LUMINANCE_FLOAT32_ATI

        #region GL_LUMINANCE_ALPHA_FLOAT32_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_LUMINANCE_ALPHA_FLOAT32_ATI 0x8819
        public const int GL_LUMINANCE_ALPHA_FLOAT32_ATI = 0x8819;
        #endregion GL_LUMINANCE_ALPHA_FLOAT32_ATI

        #region GL_RGBA_FLOAT16_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_RGBA_FLOAT16_ATI 0x881A
        public const int GL_RGBA_FLOAT16_ATI = 0x881A;
        #endregion GL_RGBA_FLOAT16_ATI

        #region GL_RGB_FLOAT16_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_RGB_FLOAT16_ATI 0x881B
        public const int GL_RGB_FLOAT16_ATI = 0x881B;
        #endregion GL_RGB_FLOAT16_ATI

        #region GL_ALPHA_FLOAT16_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_ALPHA_FLOAT16_ATI 0x881C
        public const int GL_ALPHA_FLOAT16_ATI = 0x881C;
        #endregion GL_ALPHA_FLOAT16_ATI

        #region GL_INTENSITY_FLOAT16_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_INTENSITY_FLOAT16_ATI 0x881D
        public const int GL_INTENSITY_FLOAT16_ATI = 0x881D;
        #endregion GL_INTENSITY_FLOAT16_ATI

        #region GL_LUMINANCE_FLOAT16_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_LUMINANCE_FLOAT16_ATI 0x881E
        public const int GL_LUMINANCE_FLOAT16_ATI = 0x881E;
        #endregion GL_LUMINANCE_FLOAT16_ATI

        #region GL_LUMINANCE_ALPHA_FLOAT16_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_LUMINANCE_ALPHA_FLOAT16_ATI 0x881F
        public const int GL_LUMINANCE_ALPHA_FLOAT16_ATI = 0x881F;
        #endregion GL_LUMINANCE_ALPHA_FLOAT16_ATI
        #endregion GL_ATI_texture_float Constants
        #endregion GL_ATI_texture_float (280)

        #region GL_ATI_map_object_buffer (288)
        #region GL_ATI_map_object_buffer Methods
        #region IntPtr glMapObjectBufferATI([In] IntPtr extensionPointer, int buffer)
        // GLvoid* glMapObjectBufferATI(GLuint buffer)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg buffer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall native int([in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg buffer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl native int([in]int32)\r\nret")]
        #endif
        public static IntPtr glMapObjectBufferATI([In] IntPtr extensionPointer, int buffer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion IntPtr glMapObjectBufferATI([In] IntPtr extensionPointer, int buffer)

        #region void glUnmapObjectBufferATI([In] IntPtr extensionPointer, int buffer)
        // GLvoid glUnmapObjectBufferATI(GLuint buffer)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg buffer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg buffer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32)\r\nret")]
        #endif
        public static void glUnmapObjectBufferATI([In] IntPtr extensionPointer, int buffer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glUnmapObjectBufferATI([In] IntPtr extensionPointer, int buffer)
        #endregion GL_ATI_map_object_buffer Methods
        #endregion GL_ATI_map_object_buffer (288)

        #region GL_ATI_separate_stencil (289)
        #region GL_ATI_separate_stencil Constants
        #region GL_STENCIL_BACK_FUNC_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_STENCIL_BACK_FUNC_ATI 0x8800
        public const int GL_STENCIL_BACK_FUNC_ATI = 0x8800;
        #endregion GL_STENCIL_BACK_FUNC_ATI

        #region GL_STENCIL_BACK_FAIL_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_STENCIL_BACK_FAIL_ATI 0x8801
        public const int GL_STENCIL_BACK_FAIL_ATI = 0x8801;
        #endregion GL_STENCIL_BACK_FAIL_ATI

        #region GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI 0x8802
        public const int GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI = 0x8802;
        #endregion GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI

        #region GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI 0x8803
        public const int GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI = 0x8803;
        #endregion GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI
        #endregion GL_ATI_separate_stencil Constants

        #region GL_ATI_separate_stencil Methods
        #region void glStencilOpSeparateATI([In] IntPtr extensionPointer, int face, int sfail, int dpfail, int dppass)
        // GLvoid glStencilOpSeparateATI(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg face\r\nldarg sfail\r\nldarg dpfail\r\nldarg dppass\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg face\r\nldarg sfail\r\nldarg dpfail\r\nldarg dppass\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32)\r\nret")]
        #endif
        public static void glStencilOpSeparateATI([In] IntPtr extensionPointer, int face, int sfail, int dpfail, int dppass) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glStencilOpSeparateATI([In] IntPtr extensionPointer, int face, int sfail, int dpfail, int dppass)

        #region Overloads for GLvoid glStencilFuncSeparateATI(GLenum frontfunc, GLenum backfunc, GLint reference, GLuint mask)
        #region void glStencilFuncSeparateATI([In] IntPtr extensionPointer, int frontfunc, int backfunc, int reference, int mask)
        // GLvoid glStencilFuncSeparateATI(GLenum frontfunc, GLenum backfunc, GLint reference, GLuint mask)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg frontfunc\r\nldarg backfunc\r\nldarg reference\r\nldarg mask\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg frontfunc\r\nldarg backfunc\r\nldarg reference\r\nldarg mask\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32)\r\nret")]
        #endif
        public static void glStencilFuncSeparateATI([In] IntPtr extensionPointer, int frontfunc, int backfunc, int reference, int mask) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glStencilFuncSeparateATI([In] IntPtr extensionPointer, int frontfunc, int backfunc, int reference, int mask)

        #region void glStencilFuncSeparateATI([In] IntPtr extensionPointer, int frontfunc, int backfunc, int reference, uint mask)
        // GLvoid glStencilFuncSeparateATI(GLenum frontfunc, GLenum backfunc, GLint reference, GLuint mask)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg frontfunc\r\nldarg backfunc\r\nldarg reference\r\nldarg mask\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]unsigned int32)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg frontfunc\r\nldarg backfunc\r\nldarg reference\r\nldarg mask\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]unsigned int32)\r\nret")]
        #endif
        public static void glStencilFuncSeparateATI([In] IntPtr extensionPointer, int frontfunc, int backfunc, int reference, uint mask) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glStencilFuncSeparateATI([In] IntPtr extensionPointer, int frontfunc, int backfunc, int reference, uint mask)
        #endregion Overloads for GLvoid glStencilFuncSeparateATI(GLenum frontfunc, GLenum backfunc, GLint reference, GLuint mask)
        #endregion GL_ATI_separate_stencil Methods
        #endregion GL_ATI_separate_stencil (289)

        #region GL_ATI_vertex_attrib_array_object (290)
        #region GL_ATI_vertex_attrib_array_object Methods
        #region void glVertexAttribArrayObjectATI([In] IntPtr extensionPointer, int index, int size, int type, int normalized, int stride, int buffer, int offset)
        // GLvoid glVertexAttribArrayObjectATI(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset)
        #if WIN32
        [IlasmAttribute(".maxstack 8\r\nldarg index\r\nldarg size\r\nldarg type\r\nldarg normalized\r\nldarg stride\r\nldarg buffer\r\nldarg offset\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 8\r\nldarg index\r\nldarg size\r\nldarg type\r\nldarg normalized\r\nldarg stride\r\nldarg buffer\r\nldarg offset\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32)\r\nret")]
        #endif
        public static void glVertexAttribArrayObjectATI([In] IntPtr extensionPointer, int index, int size, int type, int normalized, int stride, int buffer, int offset) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttribArrayObjectATI([In] IntPtr extensionPointer, int index, int size, int type, int normalized, int stride, int buffer, int offset)

        #region Overloads for GLvoid glGetVertexAttribArrayObjectfvATI(GLuint index, GLenum pname, GLfloat* parameters)
        #region void glGetVertexAttribArrayObjectfvATI([In] IntPtr extensionPointer, int index, int pname, out float parameters)
        // GLvoid glGetVertexAttribArrayObjectfvATI(GLuint index, GLenum pname, GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]float32)\r\nret")]
        #endif
        public static void glGetVertexAttribArrayObjectfvATI([In] IntPtr extensionPointer, int index, int pname, out float parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetVertexAttribArrayObjectfvATI([In] IntPtr extensionPointer, int index, int pname, out float parameters)

        #region void glGetVertexAttribArrayObjectfvATI([In] IntPtr extensionPointer, int index, int pname, float[] parameters)
        // GLvoid glGetVertexAttribArrayObjectfvATI(GLuint index, GLenum pname, GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]float32[])\r\nret")]
        #endif
        public static void glGetVertexAttribArrayObjectfvATI([In] IntPtr extensionPointer, int index, int pname, float[] parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetVertexAttribArrayObjectfvATI([In] IntPtr extensionPointer, int index, int pname, float[] parameters)

        #region void glGetVertexAttribArrayObjectfvATI([In] IntPtr extensionPointer, int index, int pname, IntPtr parameters)
        // GLvoid glGetVertexAttribArrayObjectfvATI(GLuint index, GLenum pname, GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGetVertexAttribArrayObjectfvATI([In] IntPtr extensionPointer, int index, int pname, IntPtr parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetVertexAttribArrayObjectfvATI([In] IntPtr extensionPointer, int index, int pname, IntPtr parameters)

        #region void glGetVertexAttribArrayObjectfvATI([In] IntPtr extensionPointer, int index, int pname, float* parameters)
        // GLvoid glGetVertexAttribArrayObjectfvATI(GLuint index, GLenum pname, GLfloat* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]float32*)\r\nret")]
        #endif
        public static unsafe void glGetVertexAttribArrayObjectfvATI([In] IntPtr extensionPointer, int index, int pname, float* parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetVertexAttribArrayObjectfvATI([In] IntPtr extensionPointer, int index, int pname, float* parameters)
        #endregion Overloads for GLvoid glGetVertexAttribArrayObjectfvATI(GLuint index, GLenum pname, GLfloat* parameters)

        #region Overloads for GLvoid glGetVertexAttribArrayObjectivATI(GLuint index, GLenum pname, GLint* parameters)
        #region void glGetVertexAttribArrayObjectivATI([In] IntPtr extensionPointer, int index, int pname, out int parameters)
        // GLvoid glGetVertexAttribArrayObjectivATI(GLuint index, GLenum pname, GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]int32)\r\nret")]
        #endif
        public static void glGetVertexAttribArrayObjectivATI([In] IntPtr extensionPointer, int index, int pname, out int parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetVertexAttribArrayObjectivATI([In] IntPtr extensionPointer, int index, int pname, out int parameters)

        #region void glGetVertexAttribArrayObjectivATI([In] IntPtr extensionPointer, int index, int pname, int[] parameters)
        // GLvoid glGetVertexAttribArrayObjectivATI(GLuint index, GLenum pname, GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]int32[])\r\nret")]
        #endif
        public static void glGetVertexAttribArrayObjectivATI([In] IntPtr extensionPointer, int index, int pname, int[] parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetVertexAttribArrayObjectivATI([In] IntPtr extensionPointer, int index, int pname, int[] parameters)

        #region void glGetVertexAttribArrayObjectivATI([In] IntPtr extensionPointer, int index, int pname, IntPtr parameters)
        // GLvoid glGetVertexAttribArrayObjectivATI(GLuint index, GLenum pname, GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGetVertexAttribArrayObjectivATI([In] IntPtr extensionPointer, int index, int pname, IntPtr parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetVertexAttribArrayObjectivATI([In] IntPtr extensionPointer, int index, int pname, IntPtr parameters)

        #region void glGetVertexAttribArrayObjectivATI([In] IntPtr extensionPointer, int index, int pname, int* parameters)
        // GLvoid glGetVertexAttribArrayObjectivATI(GLuint index, GLenum pname, GLint* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]int32*)\r\nret")]
        #endif
        public static unsafe void glGetVertexAttribArrayObjectivATI([In] IntPtr extensionPointer, int index, int pname, int* parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetVertexAttribArrayObjectivATI([In] IntPtr extensionPointer, int index, int pname, int* parameters)
        #endregion Overloads for GLvoid glGetVertexAttribArrayObjectivATI(GLuint index, GLenum pname, GLint* parameters)
        #endregion GL_ATI_vertex_attrib_array_object Methods
        #endregion GL_ATI_vertex_attrib_array_object (290)

        #region GL_ATI_texture_env_combine3 (N/A)
        #region GL_ATI_texture_env_combine3 Constants
        #region GL_MODULATE_ADD_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MODULATE_ADD_ATI 0x8744
        public const int GL_MODULATE_ADD_ATI = 0x8744;
        #endregion GL_MODULATE_ADD_ATI

        #region GL_MODULATE_SIGNED_ADD_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MODULATE_SIGNED_ADD_ATI 0x8745
        public const int GL_MODULATE_SIGNED_ADD_ATI = 0x8745;
        #endregion GL_MODULATE_SIGNED_ADD_ATI

        #region GL_MODULATE_SUBTRACT_ATI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MODULATE_SUBTRACT_ATI 0x8746
        public const int GL_MODULATE_SUBTRACT_ATI = 0x8746;
        #endregion GL_MODULATE_SUBTRACT_ATI
        #endregion GL_ATI_texture_env_combine3 Constants
        #endregion GL_ATI_texture_env_combine3 (N/A)
        #endregion ATI Extensions

        #region EXT Extensions
        #region GL_EXT_abgr (1)
        #region GL_EXT_abgr Constants
        #region GL_ABGR_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_ABGR_EXT 0x8000
        public const int GL_ABGR_EXT = 0x8000;
        #endregion GL_ABGR_EXT
        #endregion GL_EXT_abgr Constants
        #endregion GL_EXT_abgr (1)

        #region GL_EXT_blend_color (2)
        #region GL_EXT_blend_color Constants
        #region GL_CONSTANT_COLOR_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_CONSTANT_COLOR_EXT 0x8001
        public const int GL_CONSTANT_COLOR_EXT = 0x8001;
        #endregion GL_CONSTANT_COLOR_EXT

        #region GL_ONE_MINUS_CONSTANT_COLOR_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_ONE_MINUS_CONSTANT_COLOR_EXT 0x8002
        public const int GL_ONE_MINUS_CONSTANT_COLOR_EXT = 0x8002;
        #endregion GL_ONE_MINUS_CONSTANT_COLOR_EXT

        #region GL_CONSTANT_ALPHA_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_CONSTANT_ALPHA_EXT 0x8003
        public const int GL_CONSTANT_ALPHA_EXT = 0x8003;
        #endregion GL_CONSTANT_ALPHA_EXT

        #region GL_ONE_MINUS_CONSTANT_ALPHA_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_ONE_MINUS_CONSTANT_ALPHA_EXT 0x8004
        public const int GL_ONE_MINUS_CONSTANT_ALPHA_EXT = 0x8004;
        #endregion GL_ONE_MINUS_CONSTANT_ALPHA_EXT

        #region GL_BLEND_COLOR_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_BLEND_COLOR_EXT 0x8005
        public const int GL_BLEND_COLOR_EXT = 0x8005;
        #endregion GL_BLEND_COLOR_EXT
        #endregion GL_EXT_blend_color Constants

        #region GL_EXT_blend_color Methods
        #region void glBlendColorEXT([In] IntPtr extensionPointer, float red, float green, float blue, float alpha)
        // GLvoid glBlendColorEXT(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg red\r\nldarg green\r\nldarg blue\r\nldarg alpha\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]float32,[in]float32,[in]float32,[in]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg red\r\nldarg green\r\nldarg blue\r\nldarg alpha\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]float32,[in]float32,[in]float32,[in]float32)\r\nret")]
        #endif
        public static void glBlendColorEXT([In] IntPtr extensionPointer, float red, float green, float blue, float alpha) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glBlendColorEXT([In] IntPtr extensionPointer, float red, float green, float blue, float alpha)
        #endregion GL_EXT_blend_color Methods
        #endregion GL_EXT_blend_color (2)

        #region GL_EXT_polygon_offset (3)
        #region GL_EXT_polygon_offset Constants
        #region GL_POLYGON_OFFSET_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_POLYGON_OFFSET_EXT 0x8037
        public const int GL_POLYGON_OFFSET_EXT = 0x8037;
        #endregion GL_POLYGON_OFFSET_EXT

        #region GL_POLYGON_OFFSET_FACTOR_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_POLYGON_OFFSET_FACTOR_EXT 0x8038
        public const int GL_POLYGON_OFFSET_FACTOR_EXT = 0x8038;
        #endregion GL_POLYGON_OFFSET_FACTOR_EXT

        #region GL_POLYGON_OFFSET_BIAS_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_POLYGON_OFFSET_BIAS_EXT 0x8039
        public const int GL_POLYGON_OFFSET_BIAS_EXT = 0x8039;
        #endregion GL_POLYGON_OFFSET_BIAS_EXT
        #endregion GL_EXT_polygon_offset Constants

        #region GL_EXT_polygon_offset Methods
        #region void glPolygonOffsetEXT([In] IntPtr extensionPointer, float factor, float bias)
        // GLvoid glPolygonOffsetEXT(GLfloat factor, GLfloat bias)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg factor\r\nldarg bias\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]float32,[in]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg factor\r\nldarg bias\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]float32,[in]float32)\r\nret")]
        #endif
        public static void glPolygonOffsetEXT([In] IntPtr extensionPointer, float factor, float bias) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glPolygonOffsetEXT([In] IntPtr extensionPointer, float factor, float bias)
        #endregion GL_EXT_polygon_offset Methods
        #endregion GL_EXT_polygon_offset (3)

        #region GL_EXT_texture (4)
        #region GL_EXT_texture Constants
        #region GL_ALPHA4_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_ALPHA4_EXT 0x803B
        public const int GL_ALPHA4_EXT = 0x803B;
        #endregion GL_ALPHA4_EXT

        #region GL_ALPHA8_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_ALPHA8_EXT 0x803C
        public const int GL_ALPHA8_EXT = 0x803C;
        #endregion GL_ALPHA8_EXT

        #region GL_ALPHA12_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_ALPHA12_EXT 0x803D
        public const int GL_ALPHA12_EXT = 0x803D;
        #endregion GL_ALPHA12_EXT

        #region GL_ALPHA16_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_ALPHA16_EXT 0x803E
        public const int GL_ALPHA16_EXT = 0x803E;
        #endregion GL_ALPHA16_EXT

        #region GL_LUMINANCE4_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_LUMINANCE4_EXT 0x803F
        public const int GL_LUMINANCE4_EXT = 0x803F;
        #endregion GL_LUMINANCE4_EXT

        #region GL_LUMINANCE8_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_LUMINANCE8_EXT 0x8040
        public const int GL_LUMINANCE8_EXT = 0x8040;
        #endregion GL_LUMINANCE8_EXT

        #region GL_LUMINANCE12_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_LUMINANCE12_EXT 0x8041
        public const int GL_LUMINANCE12_EXT = 0x8041;
        #endregion GL_LUMINANCE12_EXT

        #region GL_LUMINANCE16_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_LUMINANCE16_EXT 0x8042
        public const int GL_LUMINANCE16_EXT = 0x8042;
        #endregion GL_LUMINANCE16_EXT

        #region GL_LUMINANCE4_ALPHA4_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_LUMINANCE4_ALPHA4_EXT 0x8043
        public const int GL_LUMINANCE4_ALPHA4_EXT = 0x8043;
        #endregion GL_LUMINANCE4_ALPHA4_EXT

        #region GL_LUMINANCE6_ALPHA2_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_LUMINANCE6_ALPHA2_EXT 0x8044
        public const int GL_LUMINANCE6_ALPHA2_EXT = 0x8044;
        #endregion GL_LUMINANCE6_ALPHA2_EXT

        #region GL_LUMINANCE8_ALPHA8_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_LUMINANCE8_ALPHA8_EXT 0x8045
        public const int GL_LUMINANCE8_ALPHA8_EXT = 0x8045;
        #endregion GL_LUMINANCE8_ALPHA8_EXT

        #region GL_LUMINANCE12_ALPHA4_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_LUMINANCE12_ALPHA4_EXT 0x8046
        public const int GL_LUMINANCE12_ALPHA4_EXT = 0x8046;
        #endregion GL_LUMINANCE12_ALPHA4_EXT

        #region GL_LUMINANCE12_ALPHA12_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_LUMINANCE12_ALPHA12_EXT 0x8047
        public const int GL_LUMINANCE12_ALPHA12_EXT = 0x8047;
        #endregion GL_LUMINANCE12_ALPHA12_EXT

        #region GL_LUMINANCE16_ALPHA16_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_LUMINANCE16_ALPHA16_EXT 0x8048
        public const int GL_LUMINANCE16_ALPHA16_EXT = 0x8048;
        #endregion GL_LUMINANCE16_ALPHA16_EXT

        #region GL_INTENSITY_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_INTENSITY_EXT 0x8049
        public const int GL_INTENSITY_EXT = 0x8049;
        #endregion GL_INTENSITY_EXT

        #region GL_INTENSITY4_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_INTENSITY4_EXT 0x804A
        public const int GL_INTENSITY4_EXT = 0x804A;
        #endregion GL_INTENSITY4_EXT

        #region GL_INTENSITY8_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_INTENSITY8_EXT 0x804B
        public const int GL_INTENSITY8_EXT = 0x804B;
        #endregion GL_INTENSITY8_EXT

        #region GL_INTENSITY12_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_INTENSITY12_EXT 0x804C
        public const int GL_INTENSITY12_EXT = 0x804C;
        #endregion GL_INTENSITY12_EXT

        #region GL_INTENSITY16_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_INTENSITY16_EXT 0x804D
        public const int GL_INTENSITY16_EXT = 0x804D;
        #endregion GL_INTENSITY16_EXT

        #region GL_RGB2_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_RGB2_EXT 0x804E
        public const int GL_RGB2_EXT = 0x804E;
        #endregion GL_RGB2_EXT

        #region GL_RGB4_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_RGB4_EXT 0x804F
        public const int GL_RGB4_EXT = 0x804F;
        #endregion GL_RGB4_EXT

        #region GL_RGB5_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_RGB5_EXT 0x8050
        public const int GL_RGB5_EXT = 0x8050;
        #endregion GL_RGB5_EXT

        #region GL_RGB8_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_RGB8_EXT 0x8051
        public const int GL_RGB8_EXT = 0x8051;
        #endregion GL_RGB8_EXT

        #region GL_RGB10_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_RGB10_EXT 0x8052
        public const int GL_RGB10_EXT = 0x8052;
        #endregion GL_RGB10_EXT

        #region GL_RGB12_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_RGB12_EXT 0x8053
        public const int GL_RGB12_EXT = 0x8053;
        #endregion GL_RGB12_EXT

        #region GL_RGB16_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_RGB16_EXT 0x8054
        public const int GL_RGB16_EXT = 0x8054;
        #endregion GL_RGB16_EXT

        #region GL_RGBA2_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_RGBA2_EXT 0x8055
        public const int GL_RGBA2_EXT = 0x8055;
        #endregion GL_RGBA2_EXT

        #region GL_RGBA4_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_RGBA4_EXT 0x8056
        public const int GL_RGBA4_EXT = 0x8056;
        #endregion GL_RGBA4_EXT

        #region GL_RGB5_A1_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_RGB5_A1_EXT 0x8057
        public const int GL_RGB5_A1_EXT = 0x8057;
        #endregion GL_RGB5_A1_EXT

        #region GL_RGBA8_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_RGBA8_EXT 0x8058
        public const int GL_RGBA8_EXT = 0x8058;
        #endregion GL_RGBA8_EXT

        #region GL_RGB10_A2_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_RGB10_A2_EXT 0x8059
        public const int GL_RGB10_A2_EXT = 0x8059;
        #endregion GL_RGB10_A2_EXT

        #region GL_RGBA12_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_RGBA12_EXT 0x805A
        public const int GL_RGBA12_EXT = 0x805A;
        #endregion GL_RGBA12_EXT

        #region GL_RGBA16_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_RGBA16_EXT 0x805B
        public const int GL_RGBA16_EXT = 0x805B;
        #endregion GL_RGBA16_EXT

        #region GL_TEXTURE_RED_SIZE_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_RED_SIZE_EXT 0x805C
        public const int GL_TEXTURE_RED_SIZE_EXT = 0x805C;
        #endregion GL_TEXTURE_RED_SIZE_EXT

        #region GL_TEXTURE_GREEN_SIZE_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_GREEN_SIZE_EXT 0x805D
        public const int GL_TEXTURE_GREEN_SIZE_EXT = 0x805D;
        #endregion GL_TEXTURE_GREEN_SIZE_EXT

        #region GL_TEXTURE_BLUE_SIZE_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_BLUE_SIZE_EXT 0x805E
        public const int GL_TEXTURE_BLUE_SIZE_EXT = 0x805E;
        #endregion GL_TEXTURE_BLUE_SIZE_EXT

        #region GL_TEXTURE_ALPHA_SIZE_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_ALPHA_SIZE_EXT 0x805F
        public const int GL_TEXTURE_ALPHA_SIZE_EXT = 0x805F;
        #endregion GL_TEXTURE_ALPHA_SIZE_EXT

        #region GL_TEXTURE_LUMINANCE_SIZE_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_LUMINANCE_SIZE_EXT 0x8060
        public const int GL_TEXTURE_LUMINANCE_SIZE_EXT = 0x8060;
        #endregion GL_TEXTURE_LUMINANCE_SIZE_EXT

        #region GL_TEXTURE_INTENSITY_SIZE_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_INTENSITY_SIZE_EXT 0x8061
        public const int GL_TEXTURE_INTENSITY_SIZE_EXT = 0x8061;
        #endregion GL_TEXTURE_INTENSITY_SIZE_EXT

        #region GL_REPLACE_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_REPLACE_EXT 0x8062
        public const int GL_REPLACE_EXT = 0x8062;
        #endregion GL_REPLACE_EXT

        #region GL_PROXY_TEXTURE_1D_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PROXY_TEXTURE_1D_EXT 0x8063
        public const int GL_PROXY_TEXTURE_1D_EXT = 0x8063;
        #endregion GL_PROXY_TEXTURE_1D_EXT

        #region GL_PROXY_TEXTURE_2D_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PROXY_TEXTURE_2D_EXT 0x8064
        public const int GL_PROXY_TEXTURE_2D_EXT = 0x8064;
        #endregion GL_PROXY_TEXTURE_2D_EXT
        #endregion GL_EXT_texture Constants
        #endregion GL_EXT_texture (4)

        #region GL_EXT_texture3D (6)
        #region GL_EXT_texture3D Constants
        #region GL_PACK_SKIP_IMAGES_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PACK_SKIP_IMAGES_EXT 0x806B
        public const int GL_PACK_SKIP_IMAGES_EXT = 0x806B;
        #endregion GL_PACK_SKIP_IMAGES_EXT

        #region GL_PACK_IMAGE_HEIGHT_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PACK_IMAGE_HEIGHT_EXT 0x806C
        public const int GL_PACK_IMAGE_HEIGHT_EXT = 0x806C;
        #endregion GL_PACK_IMAGE_HEIGHT_EXT

        #region GL_UNPACK_SKIP_IMAGES_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_UNPACK_SKIP_IMAGES_EXT 0x806D
        public const int GL_UNPACK_SKIP_IMAGES_EXT = 0x806D;
        #endregion GL_UNPACK_SKIP_IMAGES_EXT

        #region GL_UNPACK_IMAGE_HEIGHT_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_UNPACK_IMAGE_HEIGHT_EXT 0x806E
        public const int GL_UNPACK_IMAGE_HEIGHT_EXT = 0x806E;
        #endregion GL_UNPACK_IMAGE_HEIGHT_EXT

        #region GL_TEXTURE_3D_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_3D_EXT 0x806F
        public const int GL_TEXTURE_3D_EXT = 0x806F;
        #endregion GL_TEXTURE_3D_EXT

        #region GL_PROXY_TEXTURE_3D_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PROXY_TEXTURE_3D_EXT 0x8070
        public const int GL_PROXY_TEXTURE_3D_EXT = 0x8070;
        #endregion GL_PROXY_TEXTURE_3D_EXT

        #region GL_TEXTURE_DEPTH_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_DEPTH_EXT 0x8071
        public const int GL_TEXTURE_DEPTH_EXT = 0x8071;
        #endregion GL_TEXTURE_DEPTH_EXT

        #region GL_TEXTURE_WRAP_R_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_WRAP_R_EXT 0x8072
        public const int GL_TEXTURE_WRAP_R_EXT = 0x8072;
        #endregion GL_TEXTURE_WRAP_R_EXT

        #region GL_MAX_3D_TEXTURE_SIZE_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAX_3D_TEXTURE_SIZE_EXT 0x8073
        public const int GL_MAX_3D_TEXTURE_SIZE_EXT = 0x8073;
        #endregion GL_MAX_3D_TEXTURE_SIZE_EXT
        #endregion GL_EXT_texture3D Constants

        #region GL_EXT_texture3D Methods
        #region Overloads for GLvoid glTexImage3DEXT(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid* pixels)
        #region void glTexImage3DEXT([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, short[] pixels)
        // GLvoid glTexImage3DEXT(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid* pixels)
        #if WIN32
        [IlasmAttribute(".maxstack 11\r\nldarg target\r\nldarg level\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg depth\r\nldarg border\r\nldarg format\r\nldarg type\r\nldarg pixels\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 11\r\nldarg target\r\nldarg level\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg depth\r\nldarg border\r\nldarg format\r\nldarg type\r\nldarg pixels\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int16[])\r\nret")]
        #endif
        public static void glTexImage3DEXT([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, short[] pixels) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexImage3DEXT([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, short[] pixels)

        #region void glTexImage3DEXT([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, float[] pixels)
        // GLvoid glTexImage3DEXT(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid* pixels)
        #if WIN32
        [IlasmAttribute(".maxstack 11\r\nldarg target\r\nldarg level\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg depth\r\nldarg border\r\nldarg format\r\nldarg type\r\nldarg pixels\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 11\r\nldarg target\r\nldarg level\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg depth\r\nldarg border\r\nldarg format\r\nldarg type\r\nldarg pixels\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]float32[])\r\nret")]
        #endif
        public static void glTexImage3DEXT([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, float[] pixels) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexImage3DEXT([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, float[] pixels)

        #region void glTexImage3DEXT([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, int[] pixels)
        // GLvoid glTexImage3DEXT(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid* pixels)
        #if WIN32
        [IlasmAttribute(".maxstack 11\r\nldarg target\r\nldarg level\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg depth\r\nldarg border\r\nldarg format\r\nldarg type\r\nldarg pixels\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 11\r\nldarg target\r\nldarg level\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg depth\r\nldarg border\r\nldarg format\r\nldarg type\r\nldarg pixels\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32[])\r\nret")]
        #endif
        public static void glTexImage3DEXT([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, int[] pixels) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexImage3DEXT([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, int[] pixels)

        #region void glTexImage3DEXT([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, IntPtr pixels)
        // GLvoid glTexImage3DEXT(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid* pixels)
        #if WIN32
        [IlasmAttribute(".maxstack 11\r\nldarg target\r\nldarg level\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg depth\r\nldarg border\r\nldarg format\r\nldarg type\r\nldarg pixels\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 11\r\nldarg target\r\nldarg level\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg depth\r\nldarg border\r\nldarg format\r\nldarg type\r\nldarg pixels\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]native int)\r\nret")]
        #endif
        public static void glTexImage3DEXT([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, IntPtr pixels) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexImage3DEXT([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, IntPtr pixels)

        #region void glTexImage3DEXT([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, byte[] pixels)
        // GLvoid glTexImage3DEXT(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid* pixels)
        #if WIN32
        [IlasmAttribute(".maxstack 11\r\nldarg target\r\nldarg level\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg depth\r\nldarg border\r\nldarg format\r\nldarg type\r\nldarg pixels\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int8[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 11\r\nldarg target\r\nldarg level\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg depth\r\nldarg border\r\nldarg format\r\nldarg type\r\nldarg pixels\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int8[])\r\nret")]
        #endif
        public static void glTexImage3DEXT([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, byte[] pixels) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexImage3DEXT([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, byte[] pixels)

        #region void glTexImage3DEXT([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, double[] pixels)
        // GLvoid glTexImage3DEXT(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid* pixels)
        #if WIN32
        [IlasmAttribute(".maxstack 11\r\nldarg target\r\nldarg level\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg depth\r\nldarg border\r\nldarg format\r\nldarg type\r\nldarg pixels\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]float64[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 11\r\nldarg target\r\nldarg level\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg depth\r\nldarg border\r\nldarg format\r\nldarg type\r\nldarg pixels\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]float64[])\r\nret")]
        #endif
        public static void glTexImage3DEXT([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, double[] pixels) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexImage3DEXT([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, double[] pixels)

        #region void glTexImage3DEXT([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, uint[] pixels)
        // GLvoid glTexImage3DEXT(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid* pixels)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 11\r\nldarg target\r\nldarg level\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg depth\r\nldarg border\r\nldarg format\r\nldarg type\r\nldarg pixels\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int32[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 11\r\nldarg target\r\nldarg level\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg depth\r\nldarg border\r\nldarg format\r\nldarg type\r\nldarg pixels\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int32[])\r\nret")]
        #endif
        public static void glTexImage3DEXT([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, uint[] pixels) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexImage3DEXT([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, uint[] pixels)

        #region void glTexImage3DEXT([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, sbyte[] pixels)
        // GLvoid glTexImage3DEXT(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid* pixels)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 11\r\nldarg target\r\nldarg level\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg depth\r\nldarg border\r\nldarg format\r\nldarg type\r\nldarg pixels\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int8[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 11\r\nldarg target\r\nldarg level\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg depth\r\nldarg border\r\nldarg format\r\nldarg type\r\nldarg pixels\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int8[])\r\nret")]
        #endif
        public static void glTexImage3DEXT([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, sbyte[] pixels) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexImage3DEXT([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, sbyte[] pixels)

        #region void glTexImage3DEXT([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, ushort[] pixels)
        // GLvoid glTexImage3DEXT(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid* pixels)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 11\r\nldarg target\r\nldarg level\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg depth\r\nldarg border\r\nldarg format\r\nldarg type\r\nldarg pixels\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int16[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 11\r\nldarg target\r\nldarg level\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg depth\r\nldarg border\r\nldarg format\r\nldarg type\r\nldarg pixels\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int16[])\r\nret")]
        #endif
        public static void glTexImage3DEXT([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, ushort[] pixels) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexImage3DEXT([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, ushort[] pixels)

        #region void glTexImage3DEXT([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, void* pixels)
        // GLvoid glTexImage3DEXT(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid* pixels)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 11\r\nldarg target\r\nldarg level\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg depth\r\nldarg border\r\nldarg format\r\nldarg type\r\nldarg pixels\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]void*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 11\r\nldarg target\r\nldarg level\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg depth\r\nldarg border\r\nldarg format\r\nldarg type\r\nldarg pixels\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]void*)\r\nret")]
        #endif
        public static unsafe void glTexImage3DEXT([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, void* pixels) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexImage3DEXT([In] IntPtr extensionPointer, int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, void* pixels)
        #endregion Overloads for GLvoid glTexImage3DEXT(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid* pixels)
        #endregion GL_EXT_texture3D Methods
        #endregion GL_EXT_texture3D (6)

        #region GL_EXT_subtexture (9)
        #region GL_EXT_subtexture Methods
        #region Overloads for GLvoid glTexSubImage1DEXT(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid* pixels)
        #region void glTexSubImage1DEXT([In] IntPtr extensionPointer, int target, int level, int xoffset, int width, int format, int type, short[] pixels)
        // GLvoid glTexSubImage1DEXT(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid* pixels)
        #if WIN32
        [IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg pixels\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg pixels\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int16[])\r\nret")]
        #endif
        public static void glTexSubImage1DEXT([In] IntPtr extensionPointer, int target, int level, int xoffset, int width, int format, int type, short[] pixels) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexSubImage1DEXT([In] IntPtr extensionPointer, int target, int level, int xoffset, int width, int format, int type, short[] pixels)

        #region void glTexSubImage1DEXT([In] IntPtr extensionPointer, int target, int level, int xoffset, int width, int format, int type, float[] pixels)
        // GLvoid glTexSubImage1DEXT(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid* pixels)
        #if WIN32
        [IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg pixels\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg pixels\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]float32[])\r\nret")]
        #endif
        public static void glTexSubImage1DEXT([In] IntPtr extensionPointer, int target, int level, int xoffset, int width, int format, int type, float[] pixels) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexSubImage1DEXT([In] IntPtr extensionPointer, int target, int level, int xoffset, int width, int format, int type, float[] pixels)

        #region void glTexSubImage1DEXT([In] IntPtr extensionPointer, int target, int level, int xoffset, int width, int format, int type, int[] pixels)
        // GLvoid glTexSubImage1DEXT(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid* pixels)
        #if WIN32
        [IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg pixels\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg pixels\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32[])\r\nret")]
        #endif
        public static void glTexSubImage1DEXT([In] IntPtr extensionPointer, int target, int level, int xoffset, int width, int format, int type, int[] pixels) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexSubImage1DEXT([In] IntPtr extensionPointer, int target, int level, int xoffset, int width, int format, int type, int[] pixels)

        #region void glTexSubImage1DEXT([In] IntPtr extensionPointer, int target, int level, int xoffset, int width, int format, int type, IntPtr pixels)
        // GLvoid glTexSubImage1DEXT(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid* pixels)
        #if WIN32
        [IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg pixels\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg pixels\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]native int)\r\nret")]
        #endif
        public static void glTexSubImage1DEXT([In] IntPtr extensionPointer, int target, int level, int xoffset, int width, int format, int type, IntPtr pixels) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexSubImage1DEXT([In] IntPtr extensionPointer, int target, int level, int xoffset, int width, int format, int type, IntPtr pixels)

        #region void glTexSubImage1DEXT([In] IntPtr extensionPointer, int target, int level, int xoffset, int width, int format, int type, byte[] pixels)
        // GLvoid glTexSubImage1DEXT(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid* pixels)
        #if WIN32
        [IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg pixels\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int8[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg pixels\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int8[])\r\nret")]
        #endif
        public static void glTexSubImage1DEXT([In] IntPtr extensionPointer, int target, int level, int xoffset, int width, int format, int type, byte[] pixels) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexSubImage1DEXT([In] IntPtr extensionPointer, int target, int level, int xoffset, int width, int format, int type, byte[] pixels)

        #region void glTexSubImage1DEXT([In] IntPtr extensionPointer, int target, int level, int xoffset, int width, int format, int type, double[] pixels)
        // GLvoid glTexSubImage1DEXT(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid* pixels)
        #if WIN32
        [IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg pixels\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]float64[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg pixels\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]float64[])\r\nret")]
        #endif
        public static void glTexSubImage1DEXT([In] IntPtr extensionPointer, int target, int level, int xoffset, int width, int format, int type, double[] pixels) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexSubImage1DEXT([In] IntPtr extensionPointer, int target, int level, int xoffset, int width, int format, int type, double[] pixels)

        #region void glTexSubImage1DEXT([In] IntPtr extensionPointer, int target, int level, int xoffset, int width, int format, int type, uint[] pixels)
        // GLvoid glTexSubImage1DEXT(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid* pixels)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg pixels\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int32[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg pixels\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int32[])\r\nret")]
        #endif
        public static void glTexSubImage1DEXT([In] IntPtr extensionPointer, int target, int level, int xoffset, int width, int format, int type, uint[] pixels) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexSubImage1DEXT([In] IntPtr extensionPointer, int target, int level, int xoffset, int width, int format, int type, uint[] pixels)

        #region void glTexSubImage1DEXT([In] IntPtr extensionPointer, int target, int level, int xoffset, int width, int format, int type, sbyte[] pixels)
        // GLvoid glTexSubImage1DEXT(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid* pixels)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg pixels\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int8[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg pixels\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int8[])\r\nret")]
        #endif
        public static void glTexSubImage1DEXT([In] IntPtr extensionPointer, int target, int level, int xoffset, int width, int format, int type, sbyte[] pixels) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexSubImage1DEXT([In] IntPtr extensionPointer, int target, int level, int xoffset, int width, int format, int type, sbyte[] pixels)

        #region void glTexSubImage1DEXT([In] IntPtr extensionPointer, int target, int level, int xoffset, int width, int format, int type, ushort[] pixels)
        // GLvoid glTexSubImage1DEXT(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid* pixels)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg pixels\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int16[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg pixels\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int16[])\r\nret")]
        #endif
        public static void glTexSubImage1DEXT([In] IntPtr extensionPointer, int target, int level, int xoffset, int width, int format, int type, ushort[] pixels) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexSubImage1DEXT([In] IntPtr extensionPointer, int target, int level, int xoffset, int width, int format, int type, ushort[] pixels)

        #region void glTexSubImage1DEXT([In] IntPtr extensionPointer, int target, int level, int xoffset, int width, int format, int type, void* pixels)
        // GLvoid glTexSubImage1DEXT(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid* pixels)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg pixels\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]void*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg pixels\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]void*)\r\nret")]
        #endif
        public static unsafe void glTexSubImage1DEXT([In] IntPtr extensionPointer, int target, int level, int xoffset, int width, int format, int type, void* pixels) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexSubImage1DEXT([In] IntPtr extensionPointer, int target, int level, int xoffset, int width, int format, int type, void* pixels)
        #endregion Overloads for GLvoid glTexSubImage1DEXT(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid* pixels)

        #region Overloads for GLvoid glTexSubImage2DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid* pixels)
        #region void glTexSubImage2DEXT([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, short[] pixels)
        // GLvoid glTexSubImage2DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid* pixels)
        #if WIN32
        [IlasmAttribute(".maxstack 10\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg yoffset\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg type\r\nldarg pixels\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 10\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg yoffset\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg type\r\nldarg pixels\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int16[])\r\nret")]
        #endif
        public static void glTexSubImage2DEXT([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, short[] pixels) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexSubImage2DEXT([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, short[] pixels)

        #region void glTexSubImage2DEXT([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, float[] pixels)
        // GLvoid glTexSubImage2DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid* pixels)
        #if WIN32
        [IlasmAttribute(".maxstack 10\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg yoffset\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg type\r\nldarg pixels\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 10\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg yoffset\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg type\r\nldarg pixels\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]float32[])\r\nret")]
        #endif
        public static void glTexSubImage2DEXT([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, float[] pixels) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexSubImage2DEXT([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, float[] pixels)

        #region void glTexSubImage2DEXT([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, int[] pixels)
        // GLvoid glTexSubImage2DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid* pixels)
        #if WIN32
        [IlasmAttribute(".maxstack 10\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg yoffset\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg type\r\nldarg pixels\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 10\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg yoffset\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg type\r\nldarg pixels\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32[])\r\nret")]
        #endif
        public static void glTexSubImage2DEXT([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, int[] pixels) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexSubImage2DEXT([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, int[] pixels)

        #region void glTexSubImage2DEXT([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, IntPtr pixels)
        // GLvoid glTexSubImage2DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid* pixels)
        #if WIN32
        [IlasmAttribute(".maxstack 10\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg yoffset\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg type\r\nldarg pixels\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 10\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg yoffset\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg type\r\nldarg pixels\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]native int)\r\nret")]
        #endif
        public static void glTexSubImage2DEXT([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, IntPtr pixels) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexSubImage2DEXT([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, IntPtr pixels)

        #region void glTexSubImage2DEXT([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, byte[] pixels)
        // GLvoid glTexSubImage2DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid* pixels)
        #if WIN32
        [IlasmAttribute(".maxstack 10\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg yoffset\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg type\r\nldarg pixels\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int8[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 10\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg yoffset\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg type\r\nldarg pixels\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int8[])\r\nret")]
        #endif
        public static void glTexSubImage2DEXT([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, byte[] pixels) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexSubImage2DEXT([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, byte[] pixels)

        #region void glTexSubImage2DEXT([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, double[] pixels)
        // GLvoid glTexSubImage2DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid* pixels)
        #if WIN32
        [IlasmAttribute(".maxstack 10\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg yoffset\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg type\r\nldarg pixels\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]float64[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 10\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg yoffset\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg type\r\nldarg pixels\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]float64[])\r\nret")]
        #endif
        public static void glTexSubImage2DEXT([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, double[] pixels) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexSubImage2DEXT([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, double[] pixels)

        #region void glTexSubImage2DEXT([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, uint[] pixels)
        // GLvoid glTexSubImage2DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid* pixels)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 10\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg yoffset\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg type\r\nldarg pixels\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int32[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 10\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg yoffset\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg type\r\nldarg pixels\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int32[])\r\nret")]
        #endif
        public static void glTexSubImage2DEXT([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, uint[] pixels) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexSubImage2DEXT([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, uint[] pixels)

        #region void glTexSubImage2DEXT([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, sbyte[] pixels)
        // GLvoid glTexSubImage2DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid* pixels)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 10\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg yoffset\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg type\r\nldarg pixels\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int8[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 10\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg yoffset\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg type\r\nldarg pixels\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int8[])\r\nret")]
        #endif
        public static void glTexSubImage2DEXT([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, sbyte[] pixels) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexSubImage2DEXT([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, sbyte[] pixels)

        #region void glTexSubImage2DEXT([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, ushort[] pixels)
        // GLvoid glTexSubImage2DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid* pixels)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 10\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg yoffset\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg type\r\nldarg pixels\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int16[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 10\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg yoffset\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg type\r\nldarg pixels\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int16[])\r\nret")]
        #endif
        public static void glTexSubImage2DEXT([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, ushort[] pixels) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexSubImage2DEXT([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, ushort[] pixels)

        #region void glTexSubImage2DEXT([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, void* pixels)
        // GLvoid glTexSubImage2DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid* pixels)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 10\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg yoffset\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg type\r\nldarg pixels\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]void*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 10\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg yoffset\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg type\r\nldarg pixels\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]void*)\r\nret")]
        #endif
        public static unsafe void glTexSubImage2DEXT([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, void* pixels) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexSubImage2DEXT([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, void* pixels)
        #endregion Overloads for GLvoid glTexSubImage2DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid* pixels)

        #region Overloads for GLvoid glTexSubImage3DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid* pixels)
        #region void glTexSubImage3DEXT([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, short[] pixels)
        // GLvoid glTexSubImage3DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid* pixels)
        #if WIN32
        [IlasmAttribute(".maxstack 12\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg yoffset\r\nldarg zoffset\r\nldarg width\r\nldarg height\r\nldarg depth\r\nldarg format\r\nldarg type\r\nldarg pixels\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 12\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg yoffset\r\nldarg zoffset\r\nldarg width\r\nldarg height\r\nldarg depth\r\nldarg format\r\nldarg type\r\nldarg pixels\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int16[])\r\nret")]
        #endif
        public static void glTexSubImage3DEXT([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, short[] pixels) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexSubImage3DEXT([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, short[] pixels)

        #region void glTexSubImage3DEXT([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, float[] pixels)
        // GLvoid glTexSubImage3DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid* pixels)
        #if WIN32
        [IlasmAttribute(".maxstack 12\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg yoffset\r\nldarg zoffset\r\nldarg width\r\nldarg height\r\nldarg depth\r\nldarg format\r\nldarg type\r\nldarg pixels\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 12\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg yoffset\r\nldarg zoffset\r\nldarg width\r\nldarg height\r\nldarg depth\r\nldarg format\r\nldarg type\r\nldarg pixels\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]float32[])\r\nret")]
        #endif
        public static void glTexSubImage3DEXT([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, float[] pixels) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexSubImage3DEXT([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, float[] pixels)

        #region void glTexSubImage3DEXT([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, int[] pixels)
        // GLvoid glTexSubImage3DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid* pixels)
        #if WIN32
        [IlasmAttribute(".maxstack 12\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg yoffset\r\nldarg zoffset\r\nldarg width\r\nldarg height\r\nldarg depth\r\nldarg format\r\nldarg type\r\nldarg pixels\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 12\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg yoffset\r\nldarg zoffset\r\nldarg width\r\nldarg height\r\nldarg depth\r\nldarg format\r\nldarg type\r\nldarg pixels\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32[])\r\nret")]
        #endif
        public static void glTexSubImage3DEXT([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, int[] pixels) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexSubImage3DEXT([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, int[] pixels)

        #region void glTexSubImage3DEXT([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, IntPtr pixels)
        // GLvoid glTexSubImage3DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid* pixels)
        #if WIN32
        [IlasmAttribute(".maxstack 12\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg yoffset\r\nldarg zoffset\r\nldarg width\r\nldarg height\r\nldarg depth\r\nldarg format\r\nldarg type\r\nldarg pixels\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 12\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg yoffset\r\nldarg zoffset\r\nldarg width\r\nldarg height\r\nldarg depth\r\nldarg format\r\nldarg type\r\nldarg pixels\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]native int)\r\nret")]
        #endif
        public static void glTexSubImage3DEXT([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, IntPtr pixels) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexSubImage3DEXT([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, IntPtr pixels)

        #region void glTexSubImage3DEXT([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, byte[] pixels)
        // GLvoid glTexSubImage3DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid* pixels)
        #if WIN32
        [IlasmAttribute(".maxstack 12\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg yoffset\r\nldarg zoffset\r\nldarg width\r\nldarg height\r\nldarg depth\r\nldarg format\r\nldarg type\r\nldarg pixels\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int8[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 12\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg yoffset\r\nldarg zoffset\r\nldarg width\r\nldarg height\r\nldarg depth\r\nldarg format\r\nldarg type\r\nldarg pixels\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int8[])\r\nret")]
        #endif
        public static void glTexSubImage3DEXT([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, byte[] pixels) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexSubImage3DEXT([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, byte[] pixels)

        #region void glTexSubImage3DEXT([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, double[] pixels)
        // GLvoid glTexSubImage3DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid* pixels)
        #if WIN32
        [IlasmAttribute(".maxstack 12\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg yoffset\r\nldarg zoffset\r\nldarg width\r\nldarg height\r\nldarg depth\r\nldarg format\r\nldarg type\r\nldarg pixels\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]float64[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 12\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg yoffset\r\nldarg zoffset\r\nldarg width\r\nldarg height\r\nldarg depth\r\nldarg format\r\nldarg type\r\nldarg pixels\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]float64[])\r\nret")]
        #endif
        public static void glTexSubImage3DEXT([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, double[] pixels) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexSubImage3DEXT([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, double[] pixels)

        #region void glTexSubImage3DEXT([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, uint[] pixels)
        // GLvoid glTexSubImage3DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid* pixels)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 12\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg yoffset\r\nldarg zoffset\r\nldarg width\r\nldarg height\r\nldarg depth\r\nldarg format\r\nldarg type\r\nldarg pixels\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int32[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 12\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg yoffset\r\nldarg zoffset\r\nldarg width\r\nldarg height\r\nldarg depth\r\nldarg format\r\nldarg type\r\nldarg pixels\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int32[])\r\nret")]
        #endif
        public static void glTexSubImage3DEXT([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, uint[] pixels) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexSubImage3DEXT([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, uint[] pixels)

        #region void glTexSubImage3DEXT([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, sbyte[] pixels)
        // GLvoid glTexSubImage3DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid* pixels)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 12\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg yoffset\r\nldarg zoffset\r\nldarg width\r\nldarg height\r\nldarg depth\r\nldarg format\r\nldarg type\r\nldarg pixels\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int8[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 12\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg yoffset\r\nldarg zoffset\r\nldarg width\r\nldarg height\r\nldarg depth\r\nldarg format\r\nldarg type\r\nldarg pixels\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int8[])\r\nret")]
        #endif
        public static void glTexSubImage3DEXT([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, sbyte[] pixels) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexSubImage3DEXT([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, sbyte[] pixels)

        #region void glTexSubImage3DEXT([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, ushort[] pixels)
        // GLvoid glTexSubImage3DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid* pixels)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 12\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg yoffset\r\nldarg zoffset\r\nldarg width\r\nldarg height\r\nldarg depth\r\nldarg format\r\nldarg type\r\nldarg pixels\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int16[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 12\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg yoffset\r\nldarg zoffset\r\nldarg width\r\nldarg height\r\nldarg depth\r\nldarg format\r\nldarg type\r\nldarg pixels\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int16[])\r\nret")]
        #endif
        public static void glTexSubImage3DEXT([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, ushort[] pixels) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexSubImage3DEXT([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, ushort[] pixels)

        #region void glTexSubImage3DEXT([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, void* pixels)
        // GLvoid glTexSubImage3DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid* pixels)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 12\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg yoffset\r\nldarg zoffset\r\nldarg width\r\nldarg height\r\nldarg depth\r\nldarg format\r\nldarg type\r\nldarg pixels\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]void*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 12\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg yoffset\r\nldarg zoffset\r\nldarg width\r\nldarg height\r\nldarg depth\r\nldarg format\r\nldarg type\r\nldarg pixels\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]void*)\r\nret")]
        #endif
        public static unsafe void glTexSubImage3DEXT([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, void* pixels) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexSubImage3DEXT([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, void* pixels)
        #endregion Overloads for GLvoid glTexSubImage3DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid* pixels)
        #endregion GL_EXT_subtexture Methods
        #endregion GL_EXT_subtexture (9)

        #region GL_EXT_copy_texture (10)
        #region GL_EXT_copy_texture Methods
        #region void glCopyTexImage1DEXT([In] IntPtr extensionPointer, int target, int level, int internalformat, int x, int y, int width, int border)
        // GLvoid glCopyTexImage1DEXT(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)
        #if WIN32
        [IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg level\r\nldarg internalformat\r\nldarg x\r\nldarg y\r\nldarg width\r\nldarg border\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg level\r\nldarg internalformat\r\nldarg x\r\nldarg y\r\nldarg width\r\nldarg border\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32)\r\nret")]
        #endif
        public static void glCopyTexImage1DEXT([In] IntPtr extensionPointer, int target, int level, int internalformat, int x, int y, int width, int border) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glCopyTexImage1DEXT([In] IntPtr extensionPointer, int target, int level, int internalformat, int x, int y, int width, int border)

        #region void glCopyTexImage2DEXT([In] IntPtr extensionPointer, int target, int level, int internalformat, int x, int y, int width, int height, int border)
        // GLvoid glCopyTexImage2DEXT(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
        #if WIN32
        [IlasmAttribute(".maxstack 9\r\nldarg target\r\nldarg level\r\nldarg internalformat\r\nldarg x\r\nldarg y\r\nldarg width\r\nldarg height\r\nldarg border\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 9\r\nldarg target\r\nldarg level\r\nldarg internalformat\r\nldarg x\r\nldarg y\r\nldarg width\r\nldarg height\r\nldarg border\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32)\r\nret")]
        #endif
        public static void glCopyTexImage2DEXT([In] IntPtr extensionPointer, int target, int level, int internalformat, int x, int y, int width, int height, int border) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glCopyTexImage2DEXT([In] IntPtr extensionPointer, int target, int level, int internalformat, int x, int y, int width, int height, int border)

        #region void glCopyTexSubImage1DEXT([In] IntPtr extensionPointer, int target, int level, int xoffset, int x, int y, int width)
        // GLvoid glCopyTexSubImage1DEXT(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
        #if WIN32
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg x\r\nldarg y\r\nldarg width\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg x\r\nldarg y\r\nldarg width\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32)\r\nret")]
        #endif
        public static void glCopyTexSubImage1DEXT([In] IntPtr extensionPointer, int target, int level, int xoffset, int x, int y, int width) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glCopyTexSubImage1DEXT([In] IntPtr extensionPointer, int target, int level, int xoffset, int x, int y, int width)

        #region void glCopyTexSubImage2DEXT([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int x, int y, int width, int height)
        // GLvoid glCopyTexSubImage2DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
        #if WIN32
        [IlasmAttribute(".maxstack 9\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg yoffset\r\nldarg x\r\nldarg y\r\nldarg width\r\nldarg height\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 9\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg yoffset\r\nldarg x\r\nldarg y\r\nldarg width\r\nldarg height\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32)\r\nret")]
        #endif
        public static void glCopyTexSubImage2DEXT([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int x, int y, int width, int height) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glCopyTexSubImage2DEXT([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int x, int y, int width, int height)

        #region void glCopyTexSubImage3DEXT([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height)
        // GLvoid glCopyTexSubImage3DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
        #if WIN32
        [IlasmAttribute(".maxstack 10\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg yoffset\r\nldarg zoffset\r\nldarg x\r\nldarg y\r\nldarg width\r\nldarg height\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 10\r\nldarg target\r\nldarg level\r\nldarg xoffset\r\nldarg yoffset\r\nldarg zoffset\r\nldarg x\r\nldarg y\r\nldarg width\r\nldarg height\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32)\r\nret")]
        #endif
        public static void glCopyTexSubImage3DEXT([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glCopyTexSubImage3DEXT([In] IntPtr extensionPointer, int target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height)
        #endregion GL_EXT_copy_texture Methods
        #endregion GL_EXT_copy_texture (10)

        #region GL_EXT_histogram (11)
        #region GL_EXT_histogram Constants
        #region GL_HISTOGRAM_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_HISTOGRAM_EXT 0x8024
        public const int GL_HISTOGRAM_EXT = 0x8024;
        #endregion GL_HISTOGRAM_EXT

        #region GL_PROXY_HISTOGRAM_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PROXY_HISTOGRAM_EXT 0x8025
        public const int GL_PROXY_HISTOGRAM_EXT = 0x8025;
        #endregion GL_PROXY_HISTOGRAM_EXT

        #region GL_HISTOGRAM_WIDTH_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_HISTOGRAM_WIDTH_EXT 0x8026
        public const int GL_HISTOGRAM_WIDTH_EXT = 0x8026;
        #endregion GL_HISTOGRAM_WIDTH_EXT

        #region GL_HISTOGRAM_FORMAT_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_HISTOGRAM_FORMAT_EXT 0x8027
        public const int GL_HISTOGRAM_FORMAT_EXT = 0x8027;
        #endregion GL_HISTOGRAM_FORMAT_EXT

        #region GL_HISTOGRAM_RED_SIZE_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_HISTOGRAM_RED_SIZE_EXT 0x8028
        public const int GL_HISTOGRAM_RED_SIZE_EXT = 0x8028;
        #endregion GL_HISTOGRAM_RED_SIZE_EXT

        #region GL_HISTOGRAM_GREEN_SIZE_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_HISTOGRAM_GREEN_SIZE_EXT 0x8029
        public const int GL_HISTOGRAM_GREEN_SIZE_EXT = 0x8029;
        #endregion GL_HISTOGRAM_GREEN_SIZE_EXT

        #region GL_HISTOGRAM_BLUE_SIZE_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_HISTOGRAM_BLUE_SIZE_EXT 0x802A
        public const int GL_HISTOGRAM_BLUE_SIZE_EXT = 0x802A;
        #endregion GL_HISTOGRAM_BLUE_SIZE_EXT

        #region GL_HISTOGRAM_ALPHA_SIZE_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_HISTOGRAM_ALPHA_SIZE_EXT 0x802B
        public const int GL_HISTOGRAM_ALPHA_SIZE_EXT = 0x802B;
        #endregion GL_HISTOGRAM_ALPHA_SIZE_EXT

        #region GL_HISTOGRAM_LUMINANCE_SIZE_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_HISTOGRAM_LUMINANCE_SIZE_EXT 0x802C
        public const int GL_HISTOGRAM_LUMINANCE_SIZE_EXT = 0x802C;
        #endregion GL_HISTOGRAM_LUMINANCE_SIZE_EXT

        #region GL_HISTOGRAM_SINK_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_HISTOGRAM_SINK_EXT 0x802D
        public const int GL_HISTOGRAM_SINK_EXT = 0x802D;
        #endregion GL_HISTOGRAM_SINK_EXT

        #region GL_MINMAX_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MINMAX_EXT 0x802E
        public const int GL_MINMAX_EXT = 0x802E;
        #endregion GL_MINMAX_EXT

        #region GL_MINMAX_FORMAT_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MINMAX_FORMAT_EXT 0x802F
        public const int GL_MINMAX_FORMAT_EXT = 0x802F;
        #endregion GL_MINMAX_FORMAT_EXT

        #region GL_MINMAX_SINK_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MINMAX_SINK_EXT 0x8030
        public const int GL_MINMAX_SINK_EXT = 0x8030;
        #endregion GL_MINMAX_SINK_EXT
        #endregion GL_EXT_histogram Constants

        #region GL_EXT_histogram Methods
        #region void glHistogramEXT([In] IntPtr extensionPointer, int target, int width, int internalformat, int sink)
        // GLvoid glHistogramEXT(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg width\r\nldarg internalformat\r\nldarg sink\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg width\r\nldarg internalformat\r\nldarg sink\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32)\r\nret")]
        #endif
        public static void glHistogramEXT([In] IntPtr extensionPointer, int target, int width, int internalformat, int sink) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glHistogramEXT([In] IntPtr extensionPointer, int target, int width, int internalformat, int sink)

        #region void glResetHistogramEXT([In] IntPtr extensionPointer, int target)
        // GLvoid glResetHistogramEXT(GLenum target)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg target\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg target\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32)\r\nret")]
        #endif
        public static void glResetHistogramEXT([In] IntPtr extensionPointer, int target) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glResetHistogramEXT([In] IntPtr extensionPointer, int target)

        #region Overloads for GLvoid glGetHistogramEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid* values)
        #region void glGetHistogramEXT([In] IntPtr extensionPointer, int target, int reset, int format, int type, short[] values)
        // GLvoid glGetHistogramEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid* values)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg target\r\nldarg reset\r\nldarg format\r\nldarg type\r\nldarg values\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[out]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg target\r\nldarg reset\r\nldarg format\r\nldarg type\r\nldarg values\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[out]int16[])\r\nret")]
        #endif
        public static void glGetHistogramEXT([In] IntPtr extensionPointer, int target, int reset, int format, int type, short[] values) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetHistogramEXT([In] IntPtr extensionPointer, int target, int reset, int format, int type, short[] values)

        #region void glGetHistogramEXT([In] IntPtr extensionPointer, int target, int reset, int format, int type, float[] values)
        // GLvoid glGetHistogramEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid* values)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg target\r\nldarg reset\r\nldarg format\r\nldarg type\r\nldarg values\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[out]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg target\r\nldarg reset\r\nldarg format\r\nldarg type\r\nldarg values\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[out]float32[])\r\nret")]
        #endif
        public static void glGetHistogramEXT([In] IntPtr extensionPointer, int target, int reset, int format, int type, float[] values) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetHistogramEXT([In] IntPtr extensionPointer, int target, int reset, int format, int type, float[] values)

        #region void glGetHistogramEXT([In] IntPtr extensionPointer, int target, int reset, int format, int type, int[] values)
        // GLvoid glGetHistogramEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid* values)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg target\r\nldarg reset\r\nldarg format\r\nldarg type\r\nldarg values\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[out]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg target\r\nldarg reset\r\nldarg format\r\nldarg type\r\nldarg values\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[out]int32[])\r\nret")]
        #endif
        public static void glGetHistogramEXT([In] IntPtr extensionPointer, int target, int reset, int format, int type, int[] values) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetHistogramEXT([In] IntPtr extensionPointer, int target, int reset, int format, int type, int[] values)

        #region void glGetHistogramEXT([In] IntPtr extensionPointer, int target, int reset, int format, int type, IntPtr values)
        // GLvoid glGetHistogramEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid* values)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg target\r\nldarg reset\r\nldarg format\r\nldarg type\r\nldarg values\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg target\r\nldarg reset\r\nldarg format\r\nldarg type\r\nldarg values\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGetHistogramEXT([In] IntPtr extensionPointer, int target, int reset, int format, int type, IntPtr values) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetHistogramEXT([In] IntPtr extensionPointer, int target, int reset, int format, int type, IntPtr values)

        #region void glGetHistogramEXT([In] IntPtr extensionPointer, int target, int reset, int format, int type, byte[] values)
        // GLvoid glGetHistogramEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid* values)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg target\r\nldarg reset\r\nldarg format\r\nldarg type\r\nldarg values\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[out]unsigned int8[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg target\r\nldarg reset\r\nldarg format\r\nldarg type\r\nldarg values\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[out]unsigned int8[])\r\nret")]
        #endif
        public static void glGetHistogramEXT([In] IntPtr extensionPointer, int target, int reset, int format, int type, byte[] values) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetHistogramEXT([In] IntPtr extensionPointer, int target, int reset, int format, int type, byte[] values)

        #region void glGetHistogramEXT([In] IntPtr extensionPointer, int target, int reset, int format, int type, double[] values)
        // GLvoid glGetHistogramEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid* values)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg target\r\nldarg reset\r\nldarg format\r\nldarg type\r\nldarg values\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[out]float64[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg target\r\nldarg reset\r\nldarg format\r\nldarg type\r\nldarg values\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[out]float64[])\r\nret")]
        #endif
        public static void glGetHistogramEXT([In] IntPtr extensionPointer, int target, int reset, int format, int type, double[] values) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetHistogramEXT([In] IntPtr extensionPointer, int target, int reset, int format, int type, double[] values)

        #region void glGetHistogramEXT([In] IntPtr extensionPointer, int target, int reset, int format, int type, uint[] values)
        // GLvoid glGetHistogramEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid* values)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg target\r\nldarg reset\r\nldarg format\r\nldarg type\r\nldarg values\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[out]unsigned int32[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg target\r\nldarg reset\r\nldarg format\r\nldarg type\r\nldarg values\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[out]unsigned int32[])\r\nret")]
        #endif
        public static void glGetHistogramEXT([In] IntPtr extensionPointer, int target, int reset, int format, int type, uint[] values) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetHistogramEXT([In] IntPtr extensionPointer, int target, int reset, int format, int type, uint[] values)

        #region void glGetHistogramEXT([In] IntPtr extensionPointer, int target, int reset, int format, int type, sbyte[] values)
        // GLvoid glGetHistogramEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid* values)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg target\r\nldarg reset\r\nldarg format\r\nldarg type\r\nldarg values\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[out]int8[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg target\r\nldarg reset\r\nldarg format\r\nldarg type\r\nldarg values\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[out]int8[])\r\nret")]
        #endif
        public static void glGetHistogramEXT([In] IntPtr extensionPointer, int target, int reset, int format, int type, sbyte[] values) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetHistogramEXT([In] IntPtr extensionPointer, int target, int reset, int format, int type, sbyte[] values)

        #region void glGetHistogramEXT([In] IntPtr extensionPointer, int target, int reset, int format, int type, ushort[] values)
        // GLvoid glGetHistogramEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid* values)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg target\r\nldarg reset\r\nldarg format\r\nldarg type\r\nldarg values\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[out]unsigned int16[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg target\r\nldarg reset\r\nldarg format\r\nldarg type\r\nldarg values\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[out]unsigned int16[])\r\nret")]
        #endif
        public static void glGetHistogramEXT([In] IntPtr extensionPointer, int target, int reset, int format, int type, ushort[] values) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetHistogramEXT([In] IntPtr extensionPointer, int target, int reset, int format, int type, ushort[] values)

        #region void glGetHistogramEXT([In] IntPtr extensionPointer, int target, int reset, int format, int type, void* values)
        // GLvoid glGetHistogramEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid* values)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg target\r\nldarg reset\r\nldarg format\r\nldarg type\r\nldarg values\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[out]void*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg target\r\nldarg reset\r\nldarg format\r\nldarg type\r\nldarg values\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[out]void*)\r\nret")]
        #endif
        public static unsafe void glGetHistogramEXT([In] IntPtr extensionPointer, int target, int reset, int format, int type, void* values) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetHistogramEXT([In] IntPtr extensionPointer, int target, int reset, int format, int type, void* values)
        #endregion Overloads for GLvoid glGetHistogramEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid* values)

        #region Overloads for GLvoid glGetHistogramParameterivEXT(GLenum target, GLenum pname, GLint* parameters)
        #region void glGetHistogramParameterivEXT([In] IntPtr extensionPointer, int target, int pname, out int parameters)
        // GLvoid glGetHistogramParameterivEXT(GLenum target, GLenum pname, GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]int32)\r\nret")]
        #endif
        public static void glGetHistogramParameterivEXT([In] IntPtr extensionPointer, int target, int pname, out int parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetHistogramParameterivEXT([In] IntPtr extensionPointer, int target, int pname, out int parameters)

        #region void glGetHistogramParameterivEXT([In] IntPtr extensionPointer, int target, int pname, int[] parameters)
        // GLvoid glGetHistogramParameterivEXT(GLenum target, GLenum pname, GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]int32[])\r\nret")]
        #endif
        public static void glGetHistogramParameterivEXT([In] IntPtr extensionPointer, int target, int pname, int[] parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetHistogramParameterivEXT([In] IntPtr extensionPointer, int target, int pname, int[] parameters)

        #region void glGetHistogramParameterivEXT([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters)
        // GLvoid glGetHistogramParameterivEXT(GLenum target, GLenum pname, GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGetHistogramParameterivEXT([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetHistogramParameterivEXT([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters)

        #region void glGetHistogramParameterivEXT([In] IntPtr extensionPointer, int target, int pname, int* parameters)
        // GLvoid glGetHistogramParameterivEXT(GLenum target, GLenum pname, GLint* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]int32*)\r\nret")]
        #endif
        public static unsafe void glGetHistogramParameterivEXT([In] IntPtr extensionPointer, int target, int pname, int* parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetHistogramParameterivEXT([In] IntPtr extensionPointer, int target, int pname, int* parameters)
        #endregion Overloads for GLvoid glGetHistogramParameterivEXT(GLenum target, GLenum pname, GLint* parameters)

        #region Overloads for GLvoid glGetHistogramParameterfvEXT(GLenum target, GLenum pname, GLfloat* parameters)
        #region void glGetHistogramParameterfvEXT([In] IntPtr extensionPointer, int target, int pname, out float parameters)
        // GLvoid glGetHistogramParameterfvEXT(GLenum target, GLenum pname, GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]float32)\r\nret")]
        #endif
        public static void glGetHistogramParameterfvEXT([In] IntPtr extensionPointer, int target, int pname, out float parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetHistogramParameterfvEXT([In] IntPtr extensionPointer, int target, int pname, out float parameters)

        #region void glGetHistogramParameterfvEXT([In] IntPtr extensionPointer, int target, int pname, float[] parameters)
        // GLvoid glGetHistogramParameterfvEXT(GLenum target, GLenum pname, GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]float32[])\r\nret")]
        #endif
        public static void glGetHistogramParameterfvEXT([In] IntPtr extensionPointer, int target, int pname, float[] parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetHistogramParameterfvEXT([In] IntPtr extensionPointer, int target, int pname, float[] parameters)

        #region void glGetHistogramParameterfvEXT([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters)
        // GLvoid glGetHistogramParameterfvEXT(GLenum target, GLenum pname, GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGetHistogramParameterfvEXT([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetHistogramParameterfvEXT([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters)

        #region void glGetHistogramParameterfvEXT([In] IntPtr extensionPointer, int target, int pname, float* parameters)
        // GLvoid glGetHistogramParameterfvEXT(GLenum target, GLenum pname, GLfloat* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]float32*)\r\nret")]
        #endif
        public static unsafe void glGetHistogramParameterfvEXT([In] IntPtr extensionPointer, int target, int pname, float* parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetHistogramParameterfvEXT([In] IntPtr extensionPointer, int target, int pname, float* parameters)
        #endregion Overloads for GLvoid glGetHistogramParameterfvEXT(GLenum target, GLenum pname, GLfloat* parameters)

        #region void glMinmaxEXT([In] IntPtr extensionPointer, int target, int internalformat, int sink)
        // GLvoid glMinmaxEXT(GLenum target, GLenum internalformat, GLboolean sink)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg internalformat\r\nldarg sink\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg internalformat\r\nldarg sink\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32)\r\nret")]
        #endif
        public static void glMinmaxEXT([In] IntPtr extensionPointer, int target, int internalformat, int sink) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMinmaxEXT([In] IntPtr extensionPointer, int target, int internalformat, int sink)

        #region void glResetMinmaxEXT([In] IntPtr extensionPointer, int target)
        // GLvoid glResetMinmaxEXT(GLenum target)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg target\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg target\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32)\r\nret")]
        #endif
        public static void glResetMinmaxEXT([In] IntPtr extensionPointer, int target) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glResetMinmaxEXT([In] IntPtr extensionPointer, int target)

        #region Overloads for GLvoid glGetMinmaxEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid* values)
        #region void glGetMinmaxEXT([In] IntPtr extensionPointer, int target, int reset, int format, int type, short[] values)
        // GLvoid glGetMinmaxEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid* values)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg target\r\nldarg reset\r\nldarg format\r\nldarg type\r\nldarg values\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[out]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg target\r\nldarg reset\r\nldarg format\r\nldarg type\r\nldarg values\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[out]int16[])\r\nret")]
        #endif
        public static void glGetMinmaxEXT([In] IntPtr extensionPointer, int target, int reset, int format, int type, short[] values) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetMinmaxEXT([In] IntPtr extensionPointer, int target, int reset, int format, int type, short[] values)

        #region void glGetMinmaxEXT([In] IntPtr extensionPointer, int target, int reset, int format, int type, float[] values)
        // GLvoid glGetMinmaxEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid* values)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg target\r\nldarg reset\r\nldarg format\r\nldarg type\r\nldarg values\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[out]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg target\r\nldarg reset\r\nldarg format\r\nldarg type\r\nldarg values\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[out]float32[])\r\nret")]
        #endif
        public static void glGetMinmaxEXT([In] IntPtr extensionPointer, int target, int reset, int format, int type, float[] values) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetMinmaxEXT([In] IntPtr extensionPointer, int target, int reset, int format, int type, float[] values)

        #region void glGetMinmaxEXT([In] IntPtr extensionPointer, int target, int reset, int format, int type, int[] values)
        // GLvoid glGetMinmaxEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid* values)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg target\r\nldarg reset\r\nldarg format\r\nldarg type\r\nldarg values\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[out]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg target\r\nldarg reset\r\nldarg format\r\nldarg type\r\nldarg values\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[out]int32[])\r\nret")]
        #endif
        public static void glGetMinmaxEXT([In] IntPtr extensionPointer, int target, int reset, int format, int type, int[] values) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetMinmaxEXT([In] IntPtr extensionPointer, int target, int reset, int format, int type, int[] values)

        #region void glGetMinmaxEXT([In] IntPtr extensionPointer, int target, int reset, int format, int type, IntPtr values)
        // GLvoid glGetMinmaxEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid* values)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg target\r\nldarg reset\r\nldarg format\r\nldarg type\r\nldarg values\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg target\r\nldarg reset\r\nldarg format\r\nldarg type\r\nldarg values\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGetMinmaxEXT([In] IntPtr extensionPointer, int target, int reset, int format, int type, IntPtr values) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetMinmaxEXT([In] IntPtr extensionPointer, int target, int reset, int format, int type, IntPtr values)

        #region void glGetMinmaxEXT([In] IntPtr extensionPointer, int target, int reset, int format, int type, byte[] values)
        // GLvoid glGetMinmaxEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid* values)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg target\r\nldarg reset\r\nldarg format\r\nldarg type\r\nldarg values\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[out]unsigned int8[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg target\r\nldarg reset\r\nldarg format\r\nldarg type\r\nldarg values\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[out]unsigned int8[])\r\nret")]
        #endif
        public static void glGetMinmaxEXT([In] IntPtr extensionPointer, int target, int reset, int format, int type, byte[] values) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetMinmaxEXT([In] IntPtr extensionPointer, int target, int reset, int format, int type, byte[] values)

        #region void glGetMinmaxEXT([In] IntPtr extensionPointer, int target, int reset, int format, int type, double[] values)
        // GLvoid glGetMinmaxEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid* values)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg target\r\nldarg reset\r\nldarg format\r\nldarg type\r\nldarg values\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[out]float64[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg target\r\nldarg reset\r\nldarg format\r\nldarg type\r\nldarg values\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[out]float64[])\r\nret")]
        #endif
        public static void glGetMinmaxEXT([In] IntPtr extensionPointer, int target, int reset, int format, int type, double[] values) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetMinmaxEXT([In] IntPtr extensionPointer, int target, int reset, int format, int type, double[] values)

        #region void glGetMinmaxEXT([In] IntPtr extensionPointer, int target, int reset, int format, int type, uint[] values)
        // GLvoid glGetMinmaxEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid* values)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg target\r\nldarg reset\r\nldarg format\r\nldarg type\r\nldarg values\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[out]unsigned int32[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg target\r\nldarg reset\r\nldarg format\r\nldarg type\r\nldarg values\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[out]unsigned int32[])\r\nret")]
        #endif
        public static void glGetMinmaxEXT([In] IntPtr extensionPointer, int target, int reset, int format, int type, uint[] values) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetMinmaxEXT([In] IntPtr extensionPointer, int target, int reset, int format, int type, uint[] values)

        #region void glGetMinmaxEXT([In] IntPtr extensionPointer, int target, int reset, int format, int type, sbyte[] values)
        // GLvoid glGetMinmaxEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid* values)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg target\r\nldarg reset\r\nldarg format\r\nldarg type\r\nldarg values\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[out]int8[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg target\r\nldarg reset\r\nldarg format\r\nldarg type\r\nldarg values\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[out]int8[])\r\nret")]
        #endif
        public static void glGetMinmaxEXT([In] IntPtr extensionPointer, int target, int reset, int format, int type, sbyte[] values) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetMinmaxEXT([In] IntPtr extensionPointer, int target, int reset, int format, int type, sbyte[] values)

        #region void glGetMinmaxEXT([In] IntPtr extensionPointer, int target, int reset, int format, int type, ushort[] values)
        // GLvoid glGetMinmaxEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid* values)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg target\r\nldarg reset\r\nldarg format\r\nldarg type\r\nldarg values\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[out]unsigned int16[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg target\r\nldarg reset\r\nldarg format\r\nldarg type\r\nldarg values\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[out]unsigned int16[])\r\nret")]
        #endif
        public static void glGetMinmaxEXT([In] IntPtr extensionPointer, int target, int reset, int format, int type, ushort[] values) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetMinmaxEXT([In] IntPtr extensionPointer, int target, int reset, int format, int type, ushort[] values)

        #region void glGetMinmaxEXT([In] IntPtr extensionPointer, int target, int reset, int format, int type, void* values)
        // GLvoid glGetMinmaxEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid* values)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg target\r\nldarg reset\r\nldarg format\r\nldarg type\r\nldarg values\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[out]void*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg target\r\nldarg reset\r\nldarg format\r\nldarg type\r\nldarg values\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[out]void*)\r\nret")]
        #endif
        public static unsafe void glGetMinmaxEXT([In] IntPtr extensionPointer, int target, int reset, int format, int type, void* values) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetMinmaxEXT([In] IntPtr extensionPointer, int target, int reset, int format, int type, void* values)
        #endregion Overloads for GLvoid glGetMinmaxEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid* values)

        #region Overloads for GLvoid glGetMinmaxParameterivEXT(GLenum target, GLenum pname, GLint* parameters)
        #region void glGetMinmaxParameterivEXT([In] IntPtr extensionPointer, int target, int pname, out int parameters)
        // GLvoid glGetMinmaxParameterivEXT(GLenum target, GLenum pname, GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]int32)\r\nret")]
        #endif
        public static void glGetMinmaxParameterivEXT([In] IntPtr extensionPointer, int target, int pname, out int parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetMinmaxParameterivEXT([In] IntPtr extensionPointer, int target, int pname, out int parameters)

        #region void glGetMinmaxParameterivEXT([In] IntPtr extensionPointer, int target, int pname, int[] parameters)
        // GLvoid glGetMinmaxParameterivEXT(GLenum target, GLenum pname, GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]int32[])\r\nret")]
        #endif
        public static void glGetMinmaxParameterivEXT([In] IntPtr extensionPointer, int target, int pname, int[] parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetMinmaxParameterivEXT([In] IntPtr extensionPointer, int target, int pname, int[] parameters)

        #region void glGetMinmaxParameterivEXT([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters)
        // GLvoid glGetMinmaxParameterivEXT(GLenum target, GLenum pname, GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGetMinmaxParameterivEXT([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetMinmaxParameterivEXT([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters)

        #region void glGetMinmaxParameterivEXT([In] IntPtr extensionPointer, int target, int pname, int* parameters)
        // GLvoid glGetMinmaxParameterivEXT(GLenum target, GLenum pname, GLint* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]int32*)\r\nret")]
        #endif
        public static unsafe void glGetMinmaxParameterivEXT([In] IntPtr extensionPointer, int target, int pname, int* parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetMinmaxParameterivEXT([In] IntPtr extensionPointer, int target, int pname, int* parameters)
        #endregion Overloads for GLvoid glGetMinmaxParameterivEXT(GLenum target, GLenum pname, GLint* parameters)

        #region Overloads for GLvoid glGetMinmaxParameterfvEXT(GLenum target, GLenum pname, GLfloat* parameters)
        #region void glGetMinmaxParameterfvEXT([In] IntPtr extensionPointer, int target, int pname, out float parameters)
        // GLvoid glGetMinmaxParameterfvEXT(GLenum target, GLenum pname, GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]float32)\r\nret")]
        #endif
        public static void glGetMinmaxParameterfvEXT([In] IntPtr extensionPointer, int target, int pname, out float parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetMinmaxParameterfvEXT([In] IntPtr extensionPointer, int target, int pname, out float parameters)

        #region void glGetMinmaxParameterfvEXT([In] IntPtr extensionPointer, int target, int pname, float[] parameters)
        // GLvoid glGetMinmaxParameterfvEXT(GLenum target, GLenum pname, GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]float32[])\r\nret")]
        #endif
        public static void glGetMinmaxParameterfvEXT([In] IntPtr extensionPointer, int target, int pname, float[] parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetMinmaxParameterfvEXT([In] IntPtr extensionPointer, int target, int pname, float[] parameters)

        #region void glGetMinmaxParameterfvEXT([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters)
        // GLvoid glGetMinmaxParameterfvEXT(GLenum target, GLenum pname, GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGetMinmaxParameterfvEXT([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetMinmaxParameterfvEXT([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters)

        #region void glGetMinmaxParameterfvEXT([In] IntPtr extensionPointer, int target, int pname, float* parameters)
        // GLvoid glGetMinmaxParameterfvEXT(GLenum target, GLenum pname, GLfloat* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]float32*)\r\nret")]
        #endif
        public static unsafe void glGetMinmaxParameterfvEXT([In] IntPtr extensionPointer, int target, int pname, float* parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetMinmaxParameterfvEXT([In] IntPtr extensionPointer, int target, int pname, float* parameters)
        #endregion Overloads for GLvoid glGetMinmaxParameterfvEXT(GLenum target, GLenum pname, GLfloat* parameters)
        #endregion GL_EXT_histogram Methods
        #endregion GL_EXT_histogram (11)

        #region GL_EXT_convolution (12)
        #region GL_EXT_convolution Constants
        #region GL_CONVOLUTION_1D_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_CONVOLUTION_1D_EXT 0x8010
        public const int GL_CONVOLUTION_1D_EXT = 0x8010;
        #endregion GL_CONVOLUTION_1D_EXT

        #region GL_CONVOLUTION_2D_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_CONVOLUTION_2D_EXT 0x8011
        public const int GL_CONVOLUTION_2D_EXT = 0x8011;
        #endregion GL_CONVOLUTION_2D_EXT

        #region GL_SEPARABLE_2D_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SEPARABLE_2D_EXT 0x8012
        public const int GL_SEPARABLE_2D_EXT = 0x8012;
        #endregion GL_SEPARABLE_2D_EXT

        #region GL_CONVOLUTION_BORDER_MODE_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_CONVOLUTION_BORDER_MODE_EXT 0x8013
        public const int GL_CONVOLUTION_BORDER_MODE_EXT = 0x8013;
        #endregion GL_CONVOLUTION_BORDER_MODE_EXT

        #region GL_CONVOLUTION_FILTER_SCALE_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_CONVOLUTION_FILTER_SCALE_EXT 0x8014
        public const int GL_CONVOLUTION_FILTER_SCALE_EXT = 0x8014;
        #endregion GL_CONVOLUTION_FILTER_SCALE_EXT

        #region GL_CONVOLUTION_FILTER_BIAS_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_CONVOLUTION_FILTER_BIAS_EXT 0x8015
        public const int GL_CONVOLUTION_FILTER_BIAS_EXT = 0x8015;
        #endregion GL_CONVOLUTION_FILTER_BIAS_EXT

        #region GL_REDUCE_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_REDUCE_EXT 0x8016
        public const int GL_REDUCE_EXT = 0x8016;
        #endregion GL_REDUCE_EXT

        #region GL_CONVOLUTION_FORMAT_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_CONVOLUTION_FORMAT_EXT 0x8017
        public const int GL_CONVOLUTION_FORMAT_EXT = 0x8017;
        #endregion GL_CONVOLUTION_FORMAT_EXT

        #region GL_CONVOLUTION_WIDTH_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_CONVOLUTION_WIDTH_EXT 0x8018
        public const int GL_CONVOLUTION_WIDTH_EXT = 0x8018;
        #endregion GL_CONVOLUTION_WIDTH_EXT

        #region GL_CONVOLUTION_HEIGHT_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_CONVOLUTION_HEIGHT_EXT 0x8019
        public const int GL_CONVOLUTION_HEIGHT_EXT = 0x8019;
        #endregion GL_CONVOLUTION_HEIGHT_EXT

        #region GL_MAX_CONVOLUTION_WIDTH_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAX_CONVOLUTION_WIDTH_EXT 0x801A
        public const int GL_MAX_CONVOLUTION_WIDTH_EXT = 0x801A;
        #endregion GL_MAX_CONVOLUTION_WIDTH_EXT

        #region GL_MAX_CONVOLUTION_HEIGHT_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAX_CONVOLUTION_HEIGHT_EXT 0x801B
        public const int GL_MAX_CONVOLUTION_HEIGHT_EXT = 0x801B;
        #endregion GL_MAX_CONVOLUTION_HEIGHT_EXT

        #region GL_POST_CONVOLUTION_RED_SCALE_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_POST_CONVOLUTION_RED_SCALE_EXT 0x801C
        public const int GL_POST_CONVOLUTION_RED_SCALE_EXT = 0x801C;
        #endregion GL_POST_CONVOLUTION_RED_SCALE_EXT

        #region GL_POST_CONVOLUTION_GREEN_SCALE_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_POST_CONVOLUTION_GREEN_SCALE_EXT 0x801D
        public const int GL_POST_CONVOLUTION_GREEN_SCALE_EXT = 0x801D;
        #endregion GL_POST_CONVOLUTION_GREEN_SCALE_EXT

        #region GL_POST_CONVOLUTION_BLUE_SCALE_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_POST_CONVOLUTION_BLUE_SCALE_EXT 0x801E
        public const int GL_POST_CONVOLUTION_BLUE_SCALE_EXT = 0x801E;
        #endregion GL_POST_CONVOLUTION_BLUE_SCALE_EXT

        #region GL_POST_CONVOLUTION_ALPHA_SCALE_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_POST_CONVOLUTION_ALPHA_SCALE_EXT 0x801F
        public const int GL_POST_CONVOLUTION_ALPHA_SCALE_EXT = 0x801F;
        #endregion GL_POST_CONVOLUTION_ALPHA_SCALE_EXT

        #region GL_POST_CONVOLUTION_RED_BIAS_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_POST_CONVOLUTION_RED_BIAS_EXT 0x8020
        public const int GL_POST_CONVOLUTION_RED_BIAS_EXT = 0x8020;
        #endregion GL_POST_CONVOLUTION_RED_BIAS_EXT

        #region GL_POST_CONVOLUTION_GREEN_BIAS_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_POST_CONVOLUTION_GREEN_BIAS_EXT 0x8021
        public const int GL_POST_CONVOLUTION_GREEN_BIAS_EXT = 0x8021;
        #endregion GL_POST_CONVOLUTION_GREEN_BIAS_EXT

        #region GL_POST_CONVOLUTION_BLUE_BIAS_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_POST_CONVOLUTION_BLUE_BIAS_EXT 0x8022
        public const int GL_POST_CONVOLUTION_BLUE_BIAS_EXT = 0x8022;
        #endregion GL_POST_CONVOLUTION_BLUE_BIAS_EXT

        #region GL_POST_CONVOLUTION_ALPHA_BIAS_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_POST_CONVOLUTION_ALPHA_BIAS_EXT 0x8023
        public const int GL_POST_CONVOLUTION_ALPHA_BIAS_EXT = 0x8023;
        #endregion GL_POST_CONVOLUTION_ALPHA_BIAS_EXT
        #endregion GL_EXT_convolution Constants

        #region GL_EXT_convolution Methods
        #region Overloads for GLvoid glConvolutionFilter1DEXT(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid* image)
        #region void glConvolutionFilter1DEXT([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, short[] image)
        // GLvoid glConvolutionFilter1DEXT(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid* image)
        #if WIN32
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int16[])\r\nret")]
        #endif
        public static void glConvolutionFilter1DEXT([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, short[] image) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glConvolutionFilter1DEXT([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, short[] image)

        #region void glConvolutionFilter1DEXT([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, float[] image)
        // GLvoid glConvolutionFilter1DEXT(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid* image)
        #if WIN32
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]float32[])\r\nret")]
        #endif
        public static void glConvolutionFilter1DEXT([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, float[] image) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glConvolutionFilter1DEXT([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, float[] image)

        #region void glConvolutionFilter1DEXT([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, int[] image)
        // GLvoid glConvolutionFilter1DEXT(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid* image)
        #if WIN32
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32[])\r\nret")]
        #endif
        public static void glConvolutionFilter1DEXT([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, int[] image) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glConvolutionFilter1DEXT([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, int[] image)

        #region void glConvolutionFilter1DEXT([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, IntPtr image)
        // GLvoid glConvolutionFilter1DEXT(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid* image)
        #if WIN32
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]native int)\r\nret")]
        #endif
        public static void glConvolutionFilter1DEXT([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, IntPtr image) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glConvolutionFilter1DEXT([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, IntPtr image)

        #region void glConvolutionFilter1DEXT([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, byte[] image)
        // GLvoid glConvolutionFilter1DEXT(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid* image)
        #if WIN32
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int8[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int8[])\r\nret")]
        #endif
        public static void glConvolutionFilter1DEXT([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, byte[] image) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glConvolutionFilter1DEXT([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, byte[] image)

        #region void glConvolutionFilter1DEXT([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, double[] image)
        // GLvoid glConvolutionFilter1DEXT(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid* image)
        #if WIN32
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]float64[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]float64[])\r\nret")]
        #endif
        public static void glConvolutionFilter1DEXT([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, double[] image) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glConvolutionFilter1DEXT([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, double[] image)

        #region void glConvolutionFilter1DEXT([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, uint[] image)
        // GLvoid glConvolutionFilter1DEXT(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid* image)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int32[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int32[])\r\nret")]
        #endif
        public static void glConvolutionFilter1DEXT([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, uint[] image) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glConvolutionFilter1DEXT([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, uint[] image)

        #region void glConvolutionFilter1DEXT([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, sbyte[] image)
        // GLvoid glConvolutionFilter1DEXT(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid* image)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int8[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int8[])\r\nret")]
        #endif
        public static void glConvolutionFilter1DEXT([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, sbyte[] image) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glConvolutionFilter1DEXT([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, sbyte[] image)

        #region void glConvolutionFilter1DEXT([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, ushort[] image)
        // GLvoid glConvolutionFilter1DEXT(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid* image)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int16[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int16[])\r\nret")]
        #endif
        public static void glConvolutionFilter1DEXT([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, ushort[] image) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glConvolutionFilter1DEXT([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, ushort[] image)

        #region void glConvolutionFilter1DEXT([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, void* image)
        // GLvoid glConvolutionFilter1DEXT(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid* image)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]void*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]void*)\r\nret")]
        #endif
        public static unsafe void glConvolutionFilter1DEXT([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, void* image) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glConvolutionFilter1DEXT([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, void* image)
        #endregion Overloads for GLvoid glConvolutionFilter1DEXT(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid* image)

        #region Overloads for GLvoid glConvolutionFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid* image)
        #region void glConvolutionFilter2DEXT([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, short[] image)
        // GLvoid glConvolutionFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid* image)
        #if WIN32
        [IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int16[])\r\nret")]
        #endif
        public static void glConvolutionFilter2DEXT([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, short[] image) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glConvolutionFilter2DEXT([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, short[] image)

        #region void glConvolutionFilter2DEXT([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, float[] image)
        // GLvoid glConvolutionFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid* image)
        #if WIN32
        [IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]float32[])\r\nret")]
        #endif
        public static void glConvolutionFilter2DEXT([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, float[] image) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glConvolutionFilter2DEXT([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, float[] image)

        #region void glConvolutionFilter2DEXT([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, int[] image)
        // GLvoid glConvolutionFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid* image)
        #if WIN32
        [IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32[])\r\nret")]
        #endif
        public static void glConvolutionFilter2DEXT([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, int[] image) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glConvolutionFilter2DEXT([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, int[] image)

        #region void glConvolutionFilter2DEXT([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, IntPtr image)
        // GLvoid glConvolutionFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid* image)
        #if WIN32
        [IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]native int)\r\nret")]
        #endif
        public static void glConvolutionFilter2DEXT([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, IntPtr image) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glConvolutionFilter2DEXT([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, IntPtr image)

        #region void glConvolutionFilter2DEXT([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, byte[] image)
        // GLvoid glConvolutionFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid* image)
        #if WIN32
        [IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int8[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int8[])\r\nret")]
        #endif
        public static void glConvolutionFilter2DEXT([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, byte[] image) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glConvolutionFilter2DEXT([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, byte[] image)

        #region void glConvolutionFilter2DEXT([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, double[] image)
        // GLvoid glConvolutionFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid* image)
        #if WIN32
        [IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]float64[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]float64[])\r\nret")]
        #endif
        public static void glConvolutionFilter2DEXT([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, double[] image) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glConvolutionFilter2DEXT([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, double[] image)

        #region void glConvolutionFilter2DEXT([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, uint[] image)
        // GLvoid glConvolutionFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid* image)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int32[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int32[])\r\nret")]
        #endif
        public static void glConvolutionFilter2DEXT([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, uint[] image) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glConvolutionFilter2DEXT([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, uint[] image)

        #region void glConvolutionFilter2DEXT([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, sbyte[] image)
        // GLvoid glConvolutionFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid* image)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int8[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int8[])\r\nret")]
        #endif
        public static void glConvolutionFilter2DEXT([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, sbyte[] image) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glConvolutionFilter2DEXT([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, sbyte[] image)

        #region void glConvolutionFilter2DEXT([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, ushort[] image)
        // GLvoid glConvolutionFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid* image)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int16[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int16[])\r\nret")]
        #endif
        public static void glConvolutionFilter2DEXT([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, ushort[] image) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glConvolutionFilter2DEXT([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, ushort[] image)

        #region void glConvolutionFilter2DEXT([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, void* image)
        // GLvoid glConvolutionFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid* image)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]void*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]void*)\r\nret")]
        #endif
        public static unsafe void glConvolutionFilter2DEXT([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, void* image) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glConvolutionFilter2DEXT([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, void* image)
        #endregion Overloads for GLvoid glConvolutionFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid* image)

        #region void glCopyConvolutionFilter1DEXT([In] IntPtr extensionPointer, int target, int internalformat, int x, int y, int width)
        // GLvoid glCopyConvolutionFilter1DEXT(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg target\r\nldarg internalformat\r\nldarg x\r\nldarg y\r\nldarg width\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg target\r\nldarg internalformat\r\nldarg x\r\nldarg y\r\nldarg width\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32)\r\nret")]
        #endif
        public static void glCopyConvolutionFilter1DEXT([In] IntPtr extensionPointer, int target, int internalformat, int x, int y, int width) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glCopyConvolutionFilter1DEXT([In] IntPtr extensionPointer, int target, int internalformat, int x, int y, int width)

        #region void glCopyConvolutionFilter2DEXT([In] IntPtr extensionPointer, int target, int internalformat, int x, int y, int width, int height)
        // GLvoid glCopyConvolutionFilter2DEXT(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height)
        #if WIN32
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg internalformat\r\nldarg x\r\nldarg y\r\nldarg width\r\nldarg height\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg internalformat\r\nldarg x\r\nldarg y\r\nldarg width\r\nldarg height\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32)\r\nret")]
        #endif
        public static void glCopyConvolutionFilter2DEXT([In] IntPtr extensionPointer, int target, int internalformat, int x, int y, int width, int height) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glCopyConvolutionFilter2DEXT([In] IntPtr extensionPointer, int target, int internalformat, int x, int y, int width, int height)

        #region Overloads for GLvoid glGetConvolutionFilterEXT(GLenum target, GLenum format, GLenum type, GLvoid* image)
        #region void glGetConvolutionFilterEXT([In] IntPtr extensionPointer, int target, int format, int type, short[] image)
        // GLvoid glGetConvolutionFilterEXT(GLenum target, GLenum format, GLenum type, GLvoid* image)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[out]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[out]int16[])\r\nret")]
        #endif
        public static void glGetConvolutionFilterEXT([In] IntPtr extensionPointer, int target, int format, int type, short[] image) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetConvolutionFilterEXT([In] IntPtr extensionPointer, int target, int format, int type, short[] image)

        #region void glGetConvolutionFilterEXT([In] IntPtr extensionPointer, int target, int format, int type, float[] image)
        // GLvoid glGetConvolutionFilterEXT(GLenum target, GLenum format, GLenum type, GLvoid* image)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[out]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[out]float32[])\r\nret")]
        #endif
        public static void glGetConvolutionFilterEXT([In] IntPtr extensionPointer, int target, int format, int type, float[] image) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetConvolutionFilterEXT([In] IntPtr extensionPointer, int target, int format, int type, float[] image)

        #region void glGetConvolutionFilterEXT([In] IntPtr extensionPointer, int target, int format, int type, int[] image)
        // GLvoid glGetConvolutionFilterEXT(GLenum target, GLenum format, GLenum type, GLvoid* image)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[out]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[out]int32[])\r\nret")]
        #endif
        public static void glGetConvolutionFilterEXT([In] IntPtr extensionPointer, int target, int format, int type, int[] image) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetConvolutionFilterEXT([In] IntPtr extensionPointer, int target, int format, int type, int[] image)

        #region void glGetConvolutionFilterEXT([In] IntPtr extensionPointer, int target, int format, int type, IntPtr image)
        // GLvoid glGetConvolutionFilterEXT(GLenum target, GLenum format, GLenum type, GLvoid* image)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGetConvolutionFilterEXT([In] IntPtr extensionPointer, int target, int format, int type, IntPtr image) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetConvolutionFilterEXT([In] IntPtr extensionPointer, int target, int format, int type, IntPtr image)

        #region void glGetConvolutionFilterEXT([In] IntPtr extensionPointer, int target, int format, int type, byte[] image)
        // GLvoid glGetConvolutionFilterEXT(GLenum target, GLenum format, GLenum type, GLvoid* image)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[out]unsigned int8[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[out]unsigned int8[])\r\nret")]
        #endif
        public static void glGetConvolutionFilterEXT([In] IntPtr extensionPointer, int target, int format, int type, byte[] image) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetConvolutionFilterEXT([In] IntPtr extensionPointer, int target, int format, int type, byte[] image)

        #region void glGetConvolutionFilterEXT([In] IntPtr extensionPointer, int target, int format, int type, double[] image)
        // GLvoid glGetConvolutionFilterEXT(GLenum target, GLenum format, GLenum type, GLvoid* image)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[out]float64[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[out]float64[])\r\nret")]
        #endif
        public static void glGetConvolutionFilterEXT([In] IntPtr extensionPointer, int target, int format, int type, double[] image) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetConvolutionFilterEXT([In] IntPtr extensionPointer, int target, int format, int type, double[] image)

        #region void glGetConvolutionFilterEXT([In] IntPtr extensionPointer, int target, int format, int type, uint[] image)
        // GLvoid glGetConvolutionFilterEXT(GLenum target, GLenum format, GLenum type, GLvoid* image)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[out]unsigned int32[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[out]unsigned int32[])\r\nret")]
        #endif
        public static void glGetConvolutionFilterEXT([In] IntPtr extensionPointer, int target, int format, int type, uint[] image) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetConvolutionFilterEXT([In] IntPtr extensionPointer, int target, int format, int type, uint[] image)

        #region void glGetConvolutionFilterEXT([In] IntPtr extensionPointer, int target, int format, int type, sbyte[] image)
        // GLvoid glGetConvolutionFilterEXT(GLenum target, GLenum format, GLenum type, GLvoid* image)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[out]int8[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[out]int8[])\r\nret")]
        #endif
        public static void glGetConvolutionFilterEXT([In] IntPtr extensionPointer, int target, int format, int type, sbyte[] image) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetConvolutionFilterEXT([In] IntPtr extensionPointer, int target, int format, int type, sbyte[] image)

        #region void glGetConvolutionFilterEXT([In] IntPtr extensionPointer, int target, int format, int type, ushort[] image)
        // GLvoid glGetConvolutionFilterEXT(GLenum target, GLenum format, GLenum type, GLvoid* image)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[out]unsigned int16[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[out]unsigned int16[])\r\nret")]
        #endif
        public static void glGetConvolutionFilterEXT([In] IntPtr extensionPointer, int target, int format, int type, ushort[] image) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetConvolutionFilterEXT([In] IntPtr extensionPointer, int target, int format, int type, ushort[] image)

        #region void glGetConvolutionFilterEXT([In] IntPtr extensionPointer, int target, int format, int type, void* image)
        // GLvoid glGetConvolutionFilterEXT(GLenum target, GLenum format, GLenum type, GLvoid* image)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[out]void*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg image\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[out]void*)\r\nret")]
        #endif
        public static unsafe void glGetConvolutionFilterEXT([In] IntPtr extensionPointer, int target, int format, int type, void* image) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetConvolutionFilterEXT([In] IntPtr extensionPointer, int target, int format, int type, void* image)
        #endregion Overloads for GLvoid glGetConvolutionFilterEXT(GLenum target, GLenum format, GLenum type, GLvoid* image)

        #region Overloads for GLvoid glSeparableFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid* row, const GLvoid* column)
        #region void glSeparableFilter2DEXT([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, short[] row, short[] column)
        // GLvoid glSeparableFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid* row, const GLvoid* column)
        #if WIN32
        [IlasmAttribute(".maxstack 9\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg type\r\nldarg row\r\nldarg column\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int16[],[in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 9\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg type\r\nldarg row\r\nldarg column\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int16[],[in]int16[])\r\nret")]
        #endif
        public static void glSeparableFilter2DEXT([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, short[] row, short[] column) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSeparableFilter2DEXT([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, short[] row, short[] column)

        #region void glSeparableFilter2DEXT([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, float[] row, float[] column)
        // GLvoid glSeparableFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid* row, const GLvoid* column)
        #if WIN32
        [IlasmAttribute(".maxstack 9\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg type\r\nldarg row\r\nldarg column\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]float32[],[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 9\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg type\r\nldarg row\r\nldarg column\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]float32[],[in]float32[])\r\nret")]
        #endif
        public static void glSeparableFilter2DEXT([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, float[] row, float[] column) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSeparableFilter2DEXT([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, float[] row, float[] column)

        #region void glSeparableFilter2DEXT([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, int[] row, int[] column)
        // GLvoid glSeparableFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid* row, const GLvoid* column)
        #if WIN32
        [IlasmAttribute(".maxstack 9\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg type\r\nldarg row\r\nldarg column\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32[],[in]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 9\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg type\r\nldarg row\r\nldarg column\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32[],[in]int32[])\r\nret")]
        #endif
        public static void glSeparableFilter2DEXT([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, int[] row, int[] column) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSeparableFilter2DEXT([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, int[] row, int[] column)

        #region void glSeparableFilter2DEXT([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, IntPtr row, IntPtr column)
        // GLvoid glSeparableFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid* row, const GLvoid* column)
        #if WIN32
        [IlasmAttribute(".maxstack 9\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg type\r\nldarg row\r\nldarg column\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]native int,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 9\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg type\r\nldarg row\r\nldarg column\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]native int,[in]native int)\r\nret")]
        #endif
        public static void glSeparableFilter2DEXT([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, IntPtr row, IntPtr column) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSeparableFilter2DEXT([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, IntPtr row, IntPtr column)

        #region void glSeparableFilter2DEXT([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, byte[] row, byte[] column)
        // GLvoid glSeparableFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid* row, const GLvoid* column)
        #if WIN32
        [IlasmAttribute(".maxstack 9\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg type\r\nldarg row\r\nldarg column\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int8[],[in]unsigned int8[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 9\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg type\r\nldarg row\r\nldarg column\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int8[],[in]unsigned int8[])\r\nret")]
        #endif
        public static void glSeparableFilter2DEXT([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, byte[] row, byte[] column) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSeparableFilter2DEXT([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, byte[] row, byte[] column)

        #region void glSeparableFilter2DEXT([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, double[] row, double[] column)
        // GLvoid glSeparableFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid* row, const GLvoid* column)
        #if WIN32
        [IlasmAttribute(".maxstack 9\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg type\r\nldarg row\r\nldarg column\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]float64[],[in]float64[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 9\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg type\r\nldarg row\r\nldarg column\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]float64[],[in]float64[])\r\nret")]
        #endif
        public static void glSeparableFilter2DEXT([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, double[] row, double[] column) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSeparableFilter2DEXT([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, double[] row, double[] column)

        #region void glSeparableFilter2DEXT([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, uint[] row, uint[] column)
        // GLvoid glSeparableFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid* row, const GLvoid* column)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 9\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg type\r\nldarg row\r\nldarg column\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int32[],[in]unsigned int32[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 9\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg type\r\nldarg row\r\nldarg column\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int32[],[in]unsigned int32[])\r\nret")]
        #endif
        public static void glSeparableFilter2DEXT([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, uint[] row, uint[] column) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSeparableFilter2DEXT([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, uint[] row, uint[] column)

        #region void glSeparableFilter2DEXT([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, sbyte[] row, sbyte[] column)
        // GLvoid glSeparableFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid* row, const GLvoid* column)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 9\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg type\r\nldarg row\r\nldarg column\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int8[],[in]int8[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 9\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg type\r\nldarg row\r\nldarg column\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int8[],[in]int8[])\r\nret")]
        #endif
        public static void glSeparableFilter2DEXT([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, sbyte[] row, sbyte[] column) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSeparableFilter2DEXT([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, sbyte[] row, sbyte[] column)

        #region void glSeparableFilter2DEXT([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, ushort[] row, ushort[] column)
        // GLvoid glSeparableFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid* row, const GLvoid* column)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 9\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg type\r\nldarg row\r\nldarg column\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int16[],[in]unsigned int16[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 9\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg type\r\nldarg row\r\nldarg column\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int16[],[in]unsigned int16[])\r\nret")]
        #endif
        public static void glSeparableFilter2DEXT([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, ushort[] row, ushort[] column) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSeparableFilter2DEXT([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, ushort[] row, ushort[] column)

        #region void glSeparableFilter2DEXT([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, void* row, void* column)
        // GLvoid glSeparableFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid* row, const GLvoid* column)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 9\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg type\r\nldarg row\r\nldarg column\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]void*,[in]void*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 9\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg height\r\nldarg format\r\nldarg type\r\nldarg row\r\nldarg column\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]void*,[in]void*)\r\nret")]
        #endif
        public static unsafe void glSeparableFilter2DEXT([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, void* row, void* column) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSeparableFilter2DEXT([In] IntPtr extensionPointer, int target, int internalformat, int width, int height, int format, int type, void* row, void* column)
        #endregion Overloads for GLvoid glSeparableFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid* row, const GLvoid* column)

        #region Overloads for GLvoid glGetSeparableFilterEXT(GLenum target, GLenum format, GLenum type, GLvoid* row, GLvoid* column, GLvoid* span)
        #region void glGetSeparableFilterEXT([In] IntPtr extensionPointer, int target, int format, int type, short[] row, short[] column, short[] span)
        // GLvoid glGetSeparableFilterEXT(GLenum target, GLenum format, GLenum type, GLvoid* row, GLvoid* column, GLvoid* span)
        #if WIN32
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg row\r\nldarg column\r\nldarg span\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[out]int16[],[out]int16[],[out]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg row\r\nldarg column\r\nldarg span\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[out]int16[],[out]int16[],[out]int16[])\r\nret")]
        #endif
        public static void glGetSeparableFilterEXT([In] IntPtr extensionPointer, int target, int format, int type, short[] row, short[] column, short[] span) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetSeparableFilterEXT([In] IntPtr extensionPointer, int target, int format, int type, short[] row, short[] column, short[] span)

        #region void glGetSeparableFilterEXT([In] IntPtr extensionPointer, int target, int format, int type, float[] row, float[] column, float[] span)
        // GLvoid glGetSeparableFilterEXT(GLenum target, GLenum format, GLenum type, GLvoid* row, GLvoid* column, GLvoid* span)
        #if WIN32
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg row\r\nldarg column\r\nldarg span\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[out]float32[],[out]float32[],[out]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg row\r\nldarg column\r\nldarg span\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[out]float32[],[out]float32[],[out]float32[])\r\nret")]
        #endif
        public static void glGetSeparableFilterEXT([In] IntPtr extensionPointer, int target, int format, int type, float[] row, float[] column, float[] span) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetSeparableFilterEXT([In] IntPtr extensionPointer, int target, int format, int type, float[] row, float[] column, float[] span)

        #region void glGetSeparableFilterEXT([In] IntPtr extensionPointer, int target, int format, int type, int[] row, int[] column, int[] span)
        // GLvoid glGetSeparableFilterEXT(GLenum target, GLenum format, GLenum type, GLvoid* row, GLvoid* column, GLvoid* span)
        #if WIN32
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg row\r\nldarg column\r\nldarg span\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[out]int32[],[out]int32[],[out]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg row\r\nldarg column\r\nldarg span\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[out]int32[],[out]int32[],[out]int32[])\r\nret")]
        #endif
        public static void glGetSeparableFilterEXT([In] IntPtr extensionPointer, int target, int format, int type, int[] row, int[] column, int[] span) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetSeparableFilterEXT([In] IntPtr extensionPointer, int target, int format, int type, int[] row, int[] column, int[] span)

        #region void glGetSeparableFilterEXT([In] IntPtr extensionPointer, int target, int format, int type, IntPtr row, IntPtr column, IntPtr span)
        // GLvoid glGetSeparableFilterEXT(GLenum target, GLenum format, GLenum type, GLvoid* row, GLvoid* column, GLvoid* span)
        #if WIN32
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg row\r\nldarg column\r\nldarg span\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[out]native int,[out]native int,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg row\r\nldarg column\r\nldarg span\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[out]native int,[out]native int,[out]native int)\r\nret")]
        #endif
        public static void glGetSeparableFilterEXT([In] IntPtr extensionPointer, int target, int format, int type, IntPtr row, IntPtr column, IntPtr span) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetSeparableFilterEXT([In] IntPtr extensionPointer, int target, int format, int type, IntPtr row, IntPtr column, IntPtr span)

        #region void glGetSeparableFilterEXT([In] IntPtr extensionPointer, int target, int format, int type, byte[] row, byte[] column, byte[] span)
        // GLvoid glGetSeparableFilterEXT(GLenum target, GLenum format, GLenum type, GLvoid* row, GLvoid* column, GLvoid* span)
        #if WIN32
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg row\r\nldarg column\r\nldarg span\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[out]unsigned int8[],[out]unsigned int8[],[out]unsigned int8[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg row\r\nldarg column\r\nldarg span\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[out]unsigned int8[],[out]unsigned int8[],[out]unsigned int8[])\r\nret")]
        #endif
        public static void glGetSeparableFilterEXT([In] IntPtr extensionPointer, int target, int format, int type, byte[] row, byte[] column, byte[] span) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetSeparableFilterEXT([In] IntPtr extensionPointer, int target, int format, int type, byte[] row, byte[] column, byte[] span)

        #region void glGetSeparableFilterEXT([In] IntPtr extensionPointer, int target, int format, int type, double[] row, double[] column, double[] span)
        // GLvoid glGetSeparableFilterEXT(GLenum target, GLenum format, GLenum type, GLvoid* row, GLvoid* column, GLvoid* span)
        #if WIN32
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg row\r\nldarg column\r\nldarg span\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[out]float64[],[out]float64[],[out]float64[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg row\r\nldarg column\r\nldarg span\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[out]float64[],[out]float64[],[out]float64[])\r\nret")]
        #endif
        public static void glGetSeparableFilterEXT([In] IntPtr extensionPointer, int target, int format, int type, double[] row, double[] column, double[] span) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetSeparableFilterEXT([In] IntPtr extensionPointer, int target, int format, int type, double[] row, double[] column, double[] span)

        #region void glGetSeparableFilterEXT([In] IntPtr extensionPointer, int target, int format, int type, uint[] row, uint[] column, uint[] span)
        // GLvoid glGetSeparableFilterEXT(GLenum target, GLenum format, GLenum type, GLvoid* row, GLvoid* column, GLvoid* span)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg row\r\nldarg column\r\nldarg span\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[out]unsigned int32[],[out]unsigned int32[],[out]unsigned int32[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg row\r\nldarg column\r\nldarg span\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[out]unsigned int32[],[out]unsigned int32[],[out]unsigned int32[])\r\nret")]
        #endif
        public static void glGetSeparableFilterEXT([In] IntPtr extensionPointer, int target, int format, int type, uint[] row, uint[] column, uint[] span) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetSeparableFilterEXT([In] IntPtr extensionPointer, int target, int format, int type, uint[] row, uint[] column, uint[] span)

        #region void glGetSeparableFilterEXT([In] IntPtr extensionPointer, int target, int format, int type, sbyte[] row, sbyte[] column, sbyte[] span)
        // GLvoid glGetSeparableFilterEXT(GLenum target, GLenum format, GLenum type, GLvoid* row, GLvoid* column, GLvoid* span)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg row\r\nldarg column\r\nldarg span\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[out]int8[],[out]int8[],[out]int8[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg row\r\nldarg column\r\nldarg span\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[out]int8[],[out]int8[],[out]int8[])\r\nret")]
        #endif
        public static void glGetSeparableFilterEXT([In] IntPtr extensionPointer, int target, int format, int type, sbyte[] row, sbyte[] column, sbyte[] span) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetSeparableFilterEXT([In] IntPtr extensionPointer, int target, int format, int type, sbyte[] row, sbyte[] column, sbyte[] span)

        #region void glGetSeparableFilterEXT([In] IntPtr extensionPointer, int target, int format, int type, ushort[] row, ushort[] column, ushort[] span)
        // GLvoid glGetSeparableFilterEXT(GLenum target, GLenum format, GLenum type, GLvoid* row, GLvoid* column, GLvoid* span)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg row\r\nldarg column\r\nldarg span\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[out]unsigned int16[],[out]unsigned int16[],[out]unsigned int16[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg row\r\nldarg column\r\nldarg span\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[out]unsigned int16[],[out]unsigned int16[],[out]unsigned int16[])\r\nret")]
        #endif
        public static void glGetSeparableFilterEXT([In] IntPtr extensionPointer, int target, int format, int type, ushort[] row, ushort[] column, ushort[] span) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetSeparableFilterEXT([In] IntPtr extensionPointer, int target, int format, int type, ushort[] row, ushort[] column, ushort[] span)

        #region void glGetSeparableFilterEXT([In] IntPtr extensionPointer, int target, int format, int type, void* row, void* column, void* span)
        // GLvoid glGetSeparableFilterEXT(GLenum target, GLenum format, GLenum type, GLvoid* row, GLvoid* column, GLvoid* span)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg row\r\nldarg column\r\nldarg span\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[out]void*,[out]void*,[out]void*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg row\r\nldarg column\r\nldarg span\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[out]void*,[out]void*,[out]void*)\r\nret")]
        #endif
        public static unsafe void glGetSeparableFilterEXT([In] IntPtr extensionPointer, int target, int format, int type, void* row, void* column, void* span) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetSeparableFilterEXT([In] IntPtr extensionPointer, int target, int format, int type, void* row, void* column, void* span)
        #endregion Overloads for GLvoid glGetSeparableFilterEXT(GLenum target, GLenum format, GLenum type, GLvoid* row, GLvoid* column, GLvoid* span)

        #region void glConvolutionParameteriEXT([In] IntPtr extensionPointer, int target, int pname, int parameter)
        // GLvoid glConvolutionParameteriEXT(GLenum target, GLenum pname, GLint parameter)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameter\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameter\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32)\r\nret")]
        #endif
        public static void glConvolutionParameteriEXT([In] IntPtr extensionPointer, int target, int pname, int parameter) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glConvolutionParameteriEXT([In] IntPtr extensionPointer, int target, int pname, int parameter)

        #region Overloads for GLvoid glConvolutionParameterivEXT(GLenum target, GLenum pname, const GLint* parameters)
        #region void glConvolutionParameterivEXT([In] IntPtr extensionPointer, int target, int pname, ref int parameters)
        // GLvoid glConvolutionParameterivEXT(GLenum target, GLenum pname, const GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in][out]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in][out]int32)\r\nret")]
        #endif
        public static void glConvolutionParameterivEXT([In] IntPtr extensionPointer, int target, int pname, ref int parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glConvolutionParameterivEXT([In] IntPtr extensionPointer, int target, int pname, ref int parameters)

        #region void glConvolutionParameterivEXT([In] IntPtr extensionPointer, int target, int pname, int[] parameters)
        // GLvoid glConvolutionParameterivEXT(GLenum target, GLenum pname, const GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32[])\r\nret")]
        #endif
        public static void glConvolutionParameterivEXT([In] IntPtr extensionPointer, int target, int pname, int[] parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glConvolutionParameterivEXT([In] IntPtr extensionPointer, int target, int pname, int[] parameters)

        #region void glConvolutionParameterivEXT([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters)
        // GLvoid glConvolutionParameterivEXT(GLenum target, GLenum pname, const GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]native int)\r\nret")]
        #endif
        public static void glConvolutionParameterivEXT([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glConvolutionParameterivEXT([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters)

        #region void glConvolutionParameterivEXT([In] IntPtr extensionPointer, int target, int pname, int* parameters)
        // GLvoid glConvolutionParameterivEXT(GLenum target, GLenum pname, const GLint* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32*)\r\nret")]
        #endif
        public static unsafe void glConvolutionParameterivEXT([In] IntPtr extensionPointer, int target, int pname, int* parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glConvolutionParameterivEXT([In] IntPtr extensionPointer, int target, int pname, int* parameters)
        #endregion Overloads for GLvoid glConvolutionParameterivEXT(GLenum target, GLenum pname, const GLint* parameters)

        #region void glConvolutionParameterfEXT([In] IntPtr extensionPointer, int target, int pname, float param)
        // GLvoid glConvolutionParameterfEXT(GLenum target, GLenum pname, GLfloat param)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg param\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg param\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]float32)\r\nret")]
        #endif
        public static void glConvolutionParameterfEXT([In] IntPtr extensionPointer, int target, int pname, float param) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glConvolutionParameterfEXT([In] IntPtr extensionPointer, int target, int pname, float param)

        #region Overloads for GLvoid glConvolutionParameterfvEXT(GLenum target, GLenum pname, const GLfloat* parameters)
        #region void glConvolutionParameterfvEXT([In] IntPtr extensionPointer, int target, int pname, ref float parameters)
        // GLvoid glConvolutionParameterfvEXT(GLenum target, GLenum pname, const GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in][out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in][out]float32)\r\nret")]
        #endif
        public static void glConvolutionParameterfvEXT([In] IntPtr extensionPointer, int target, int pname, ref float parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glConvolutionParameterfvEXT([In] IntPtr extensionPointer, int target, int pname, ref float parameters)

        #region void glConvolutionParameterfvEXT([In] IntPtr extensionPointer, int target, int pname, float[] parameters)
        // GLvoid glConvolutionParameterfvEXT(GLenum target, GLenum pname, const GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]float32[])\r\nret")]
        #endif
        public static void glConvolutionParameterfvEXT([In] IntPtr extensionPointer, int target, int pname, float[] parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glConvolutionParameterfvEXT([In] IntPtr extensionPointer, int target, int pname, float[] parameters)

        #region void glConvolutionParameterfvEXT([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters)
        // GLvoid glConvolutionParameterfvEXT(GLenum target, GLenum pname, const GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]native int)\r\nret")]
        #endif
        public static void glConvolutionParameterfvEXT([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glConvolutionParameterfvEXT([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters)

        #region void glConvolutionParameterfvEXT([In] IntPtr extensionPointer, int target, int pname, float* parameters)
        // GLvoid glConvolutionParameterfvEXT(GLenum target, GLenum pname, const GLfloat* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]float32*)\r\nret")]
        #endif
        public static unsafe void glConvolutionParameterfvEXT([In] IntPtr extensionPointer, int target, int pname, float* parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glConvolutionParameterfvEXT([In] IntPtr extensionPointer, int target, int pname, float* parameters)
        #endregion Overloads for GLvoid glConvolutionParameterfvEXT(GLenum target, GLenum pname, const GLfloat* parameters)

        #region Overloads for GLvoid glGetConvolutionParameterivEXT(GLenum target, GLenum pname, GLint* parameters)
        #region void glGetConvolutionParameterivEXT([In] IntPtr extensionPointer, int target, int pname, out int parameters)
        // GLvoid glGetConvolutionParameterivEXT(GLenum target, GLenum pname, GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]int32)\r\nret")]
        #endif
        public static void glGetConvolutionParameterivEXT([In] IntPtr extensionPointer, int target, int pname, out int parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetConvolutionParameterivEXT([In] IntPtr extensionPointer, int target, int pname, out int parameters)

        #region void glGetConvolutionParameterivEXT([In] IntPtr extensionPointer, int target, int pname, int[] parameters)
        // GLvoid glGetConvolutionParameterivEXT(GLenum target, GLenum pname, GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]int32[])\r\nret")]
        #endif
        public static void glGetConvolutionParameterivEXT([In] IntPtr extensionPointer, int target, int pname, int[] parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetConvolutionParameterivEXT([In] IntPtr extensionPointer, int target, int pname, int[] parameters)

        #region void glGetConvolutionParameterivEXT([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters)
        // GLvoid glGetConvolutionParameterivEXT(GLenum target, GLenum pname, GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGetConvolutionParameterivEXT([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetConvolutionParameterivEXT([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters)

        #region void glGetConvolutionParameterivEXT([In] IntPtr extensionPointer, int target, int pname, int* parameters)
        // GLvoid glGetConvolutionParameterivEXT(GLenum target, GLenum pname, GLint* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]int32*)\r\nret")]
        #endif
        public static unsafe void glGetConvolutionParameterivEXT([In] IntPtr extensionPointer, int target, int pname, int* parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetConvolutionParameterivEXT([In] IntPtr extensionPointer, int target, int pname, int* parameters)
        #endregion Overloads for GLvoid glGetConvolutionParameterivEXT(GLenum target, GLenum pname, GLint* parameters)

        #region Overloads for GLvoid glGetConvolutionParameterfvEXT(GLenum target, GLenum pname, GLfloat* parameters)
        #region void glGetConvolutionParameterfvEXT([In] IntPtr extensionPointer, int target, int pname, out float parameters)
        // GLvoid glGetConvolutionParameterfvEXT(GLenum target, GLenum pname, GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]float32)\r\nret")]
        #endif
        public static void glGetConvolutionParameterfvEXT([In] IntPtr extensionPointer, int target, int pname, out float parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetConvolutionParameterfvEXT([In] IntPtr extensionPointer, int target, int pname, out float parameters)

        #region void glGetConvolutionParameterfvEXT([In] IntPtr extensionPointer, int target, int pname, float[] parameters)
        // GLvoid glGetConvolutionParameterfvEXT(GLenum target, GLenum pname, GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]float32[])\r\nret")]
        #endif
        public static void glGetConvolutionParameterfvEXT([In] IntPtr extensionPointer, int target, int pname, float[] parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetConvolutionParameterfvEXT([In] IntPtr extensionPointer, int target, int pname, float[] parameters)

        #region void glGetConvolutionParameterfvEXT([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters)
        // GLvoid glGetConvolutionParameterfvEXT(GLenum target, GLenum pname, GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGetConvolutionParameterfvEXT([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetConvolutionParameterfvEXT([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters)

        #region void glGetConvolutionParameterfvEXT([In] IntPtr extensionPointer, int target, int pname, float* parameters)
        // GLvoid glGetConvolutionParameterfvEXT(GLenum target, GLenum pname, GLfloat* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]float32*)\r\nret")]
        #endif
        public static unsafe void glGetConvolutionParameterfvEXT([In] IntPtr extensionPointer, int target, int pname, float* parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetConvolutionParameterfvEXT([In] IntPtr extensionPointer, int target, int pname, float* parameters)
        #endregion Overloads for GLvoid glGetConvolutionParameterfvEXT(GLenum target, GLenum pname, GLfloat* parameters)
        #endregion GL_EXT_convolution Methods
        #endregion GL_EXT_convolution (12)

        #region GL_EXT_cmyka (18)
        #region GL_EXT_cmyka Constants
        #region GL_CMYK_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_CMYK_EXT 0x800C
        public const int GL_CMYK_EXT = 0x800C;
        #endregion GL_CMYK_EXT

        #region GL_CMYKA_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_CMYKA_EXT 0x800D
        public const int GL_CMYKA_EXT = 0x800D;
        #endregion GL_CMYKA_EXT

        #region GL_PACK_CMYK_HINT_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PACK_CMYK_HINT_EXT 0x800E
        public const int GL_PACK_CMYK_HINT_EXT = 0x800E;
        #endregion GL_PACK_CMYK_HINT_EXT

        #region GL_UNPACK_CMYKA_HINT_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_UNPACK_CMYKA_HINT_EXT 0x800F
        public const int GL_UNPACK_CMYKA_HINT_EXT = 0x800F;
        #endregion GL_UNPACK_CMYKA_HINT_EXT
        #endregion GL_EXT_cmyka Constants
        #endregion GL_EXT_cmyka (18)

        #region GL_EXT_texture_object (20)
        #region GL_EXT_texture_object Constants
        #region GL_TEXTURE_PRIORITY_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_PRIORITY_EXT 0x8066
        public const int GL_TEXTURE_PRIORITY_EXT = 0x8066;
        #endregion GL_TEXTURE_PRIORITY_EXT

        #region GL_TEXTURE_RESIDENT_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_RESIDENT_EXT 0x8067
        public const int GL_TEXTURE_RESIDENT_EXT = 0x8067;
        #endregion GL_TEXTURE_RESIDENT_EXT

        #region GL_TEXTURE_1D_BINDING_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_1D_BINDING_EXT 0x8068
        public const int GL_TEXTURE_1D_BINDING_EXT = 0x8068;
        #endregion GL_TEXTURE_1D_BINDING_EXT

        #region GL_TEXTURE_2D_BINDING_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_2D_BINDING_EXT 0x8069
        public const int GL_TEXTURE_2D_BINDING_EXT = 0x8069;
        #endregion GL_TEXTURE_2D_BINDING_EXT

        #region GL_TEXTURE_3D_BINDING_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_3D_BINDING_EXT 0x806A
        public const int GL_TEXTURE_3D_BINDING_EXT = 0x806A;
        #endregion GL_TEXTURE_3D_BINDING_EXT
        #endregion GL_EXT_texture_object Constants

        #region GL_EXT_texture_object Methods
        #region Overloads for GLvoid glGenTexturesEXT(GLsizei n, GLuint* textures)
        #region void glGenTexturesEXT([In] IntPtr extensionPointer, int n, out int textures)
        // GLvoid glGenTexturesEXT(GLsizei n, GLuint* textures)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg textures\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[out]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg textures\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[out]int32)\r\nret")]
        #endif
        public static void glGenTexturesEXT([In] IntPtr extensionPointer, int n, out int textures) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGenTexturesEXT([In] IntPtr extensionPointer, int n, out int textures)

        #region void glGenTexturesEXT([In] IntPtr extensionPointer, int n, int[] textures)
        // GLvoid glGenTexturesEXT(GLsizei n, GLuint* textures)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg textures\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[out]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg textures\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[out]int32[])\r\nret")]
        #endif
        public static void glGenTexturesEXT([In] IntPtr extensionPointer, int n, int[] textures) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGenTexturesEXT([In] IntPtr extensionPointer, int n, int[] textures)

        #region void glGenTexturesEXT([In] IntPtr extensionPointer, int n, IntPtr textures)
        // GLvoid glGenTexturesEXT(GLsizei n, GLuint* textures)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg textures\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg textures\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGenTexturesEXT([In] IntPtr extensionPointer, int n, IntPtr textures) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGenTexturesEXT([In] IntPtr extensionPointer, int n, IntPtr textures)

        #region void glGenTexturesEXT([In] IntPtr extensionPointer, int n, int* textures)
        // GLvoid glGenTexturesEXT(GLsizei n, GLuint* textures)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg textures\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[out]int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg textures\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[out]int32*)\r\nret")]
        #endif
        public static unsafe void glGenTexturesEXT([In] IntPtr extensionPointer, int n, int* textures) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGenTexturesEXT([In] IntPtr extensionPointer, int n, int* textures)
        #endregion Overloads for GLvoid glGenTexturesEXT(GLsizei n, GLuint* textures)

        #region Overloads for GLvoid glDeleteTexturesEXT(GLsizei n, const GLuint* textures)
        #region void glDeleteTexturesEXT([In] IntPtr extensionPointer, int n, ref int textures)
        // GLvoid glDeleteTexturesEXT(GLsizei n, const GLuint* textures)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg textures\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg textures\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]int32)\r\nret")]
        #endif
        public static void glDeleteTexturesEXT([In] IntPtr extensionPointer, int n, ref int textures) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glDeleteTexturesEXT([In] IntPtr extensionPointer, int n, ref int textures)

        #region void glDeleteTexturesEXT([In] IntPtr extensionPointer, int n, int[] textures)
        // GLvoid glDeleteTexturesEXT(GLsizei n, const GLuint* textures)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg textures\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg textures\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32[])\r\nret")]
        #endif
        public static void glDeleteTexturesEXT([In] IntPtr extensionPointer, int n, int[] textures) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glDeleteTexturesEXT([In] IntPtr extensionPointer, int n, int[] textures)

        #region void glDeleteTexturesEXT([In] IntPtr extensionPointer, int n, IntPtr textures)
        // GLvoid glDeleteTexturesEXT(GLsizei n, const GLuint* textures)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg textures\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg textures\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glDeleteTexturesEXT([In] IntPtr extensionPointer, int n, IntPtr textures) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glDeleteTexturesEXT([In] IntPtr extensionPointer, int n, IntPtr textures)

        #region void glDeleteTexturesEXT([In] IntPtr extensionPointer, int n, int* textures)
        // GLvoid glDeleteTexturesEXT(GLsizei n, const GLuint* textures)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg textures\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg textures\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32*)\r\nret")]
        #endif
        public static unsafe void glDeleteTexturesEXT([In] IntPtr extensionPointer, int n, int* textures) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glDeleteTexturesEXT([In] IntPtr extensionPointer, int n, int* textures)
        #endregion Overloads for GLvoid glDeleteTexturesEXT(GLsizei n, const GLuint* textures)

        #region void glBindTextureEXT([In] IntPtr extensionPointer, int target, int texture)
        // GLvoid glBindTextureEXT(GLenum target, GLuint texture)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg texture\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg texture\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32)\r\nret")]
        #endif
        public static void glBindTextureEXT([In] IntPtr extensionPointer, int target, int texture) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glBindTextureEXT([In] IntPtr extensionPointer, int target, int texture)

        #region Overloads for GLvoid glPrioritizeTexturesEXT(GLsizei n, const GLuint* textures, const GLclampf* priorities)
        #region void glPrioritizeTexturesEXT([In] IntPtr extensionPointer, int n, ref int textures, ref float priorities)
        // GLvoid glPrioritizeTexturesEXT(GLsizei n, const GLuint* textures, const GLclampf* priorities)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg n\r\nldarg textures\r\nldarg priorities\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]int32,[in][out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg n\r\nldarg textures\r\nldarg priorities\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]int32,[in][out]float32)\r\nret")]
        #endif
        public static void glPrioritizeTexturesEXT([In] IntPtr extensionPointer, int n, ref int textures, ref float priorities) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glPrioritizeTexturesEXT([In] IntPtr extensionPointer, int n, ref int textures, ref float priorities)

        #region void glPrioritizeTexturesEXT([In] IntPtr extensionPointer, int n, int[] textures, float[] priorities)
        // GLvoid glPrioritizeTexturesEXT(GLsizei n, const GLuint* textures, const GLclampf* priorities)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg n\r\nldarg textures\r\nldarg priorities\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32[],[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg n\r\nldarg textures\r\nldarg priorities\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32[],[in]float32[])\r\nret")]
        #endif
        public static void glPrioritizeTexturesEXT([In] IntPtr extensionPointer, int n, int[] textures, float[] priorities) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glPrioritizeTexturesEXT([In] IntPtr extensionPointer, int n, int[] textures, float[] priorities)

        #region void glPrioritizeTexturesEXT([In] IntPtr extensionPointer, int n, IntPtr textures, IntPtr priorities)
        // GLvoid glPrioritizeTexturesEXT(GLsizei n, const GLuint* textures, const GLclampf* priorities)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg n\r\nldarg textures\r\nldarg priorities\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg n\r\nldarg textures\r\nldarg priorities\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int,[in]native int)\r\nret")]
        #endif
        public static void glPrioritizeTexturesEXT([In] IntPtr extensionPointer, int n, IntPtr textures, IntPtr priorities) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glPrioritizeTexturesEXT([In] IntPtr extensionPointer, int n, IntPtr textures, IntPtr priorities)

        #region void glPrioritizeTexturesEXT([In] IntPtr extensionPointer, int n, int* textures, float* priorities)
        // GLvoid glPrioritizeTexturesEXT(GLsizei n, const GLuint* textures, const GLclampf* priorities)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg n\r\nldarg textures\r\nldarg priorities\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32*,[in]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg n\r\nldarg textures\r\nldarg priorities\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32*,[in]float32*)\r\nret")]
        #endif
        public static unsafe void glPrioritizeTexturesEXT([In] IntPtr extensionPointer, int n, int* textures, float* priorities) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glPrioritizeTexturesEXT([In] IntPtr extensionPointer, int n, int* textures, float* priorities)
        #endregion Overloads for GLvoid glPrioritizeTexturesEXT(GLsizei n, const GLuint* textures, const GLclampf* priorities)

        #region Overloads for GLboolean glAreTexturesResidentEXT(GLsizei n, const GLuint* textures, GLboolean* residences)
        #region int glAreTexturesResidentEXT([In] IntPtr extensionPointer, int n, ref int textures, out int residences)
        // GLboolean glAreTexturesResidentEXT(GLsizei n, const GLuint* textures, GLboolean* residences)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg n\r\nldarg textures\r\nldarg residences\r\nldarg extensionPointer\r\ncalli unmanaged stdcall int32([in]int32,[in][out]int32,[out]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg n\r\nldarg textures\r\nldarg residences\r\nldarg extensionPointer\r\ncalli unmanaged cdecl int32([in]int32,[in][out]int32,[out]int32)\r\nret")]
        #endif
        public static int glAreTexturesResidentEXT([In] IntPtr extensionPointer, int n, ref int textures, out int residences) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion int glAreTexturesResidentEXT([In] IntPtr extensionPointer, int n, ref int textures, out int residences)

        #region int glAreTexturesResidentEXT([In] IntPtr extensionPointer, int n, int[] textures, int[] residences)
        // GLboolean glAreTexturesResidentEXT(GLsizei n, const GLuint* textures, GLboolean* residences)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg n\r\nldarg textures\r\nldarg residences\r\nldarg extensionPointer\r\ncalli unmanaged stdcall int32([in]int32,[in]int32[],[out]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg n\r\nldarg textures\r\nldarg residences\r\nldarg extensionPointer\r\ncalli unmanaged cdecl int32([in]int32,[in]int32[],[out]int32[])\r\nret")]
        #endif
        public static int glAreTexturesResidentEXT([In] IntPtr extensionPointer, int n, int[] textures, int[] residences) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion int glAreTexturesResidentEXT([In] IntPtr extensionPointer, int n, int[] textures, int[] residences)

        #region int glAreTexturesResidentEXT([In] IntPtr extensionPointer, int n, IntPtr textures, IntPtr residences)
        // GLboolean glAreTexturesResidentEXT(GLsizei n, const GLuint* textures, GLboolean* residences)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg n\r\nldarg textures\r\nldarg residences\r\nldarg extensionPointer\r\ncalli unmanaged stdcall int32([in]int32,[in]native int,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg n\r\nldarg textures\r\nldarg residences\r\nldarg extensionPointer\r\ncalli unmanaged cdecl int32([in]int32,[in]native int,[out]native int)\r\nret")]
        #endif
        public static int glAreTexturesResidentEXT([In] IntPtr extensionPointer, int n, IntPtr textures, IntPtr residences) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion int glAreTexturesResidentEXT([In] IntPtr extensionPointer, int n, IntPtr textures, IntPtr residences)

        #region int glAreTexturesResidentEXT([In] IntPtr extensionPointer, int n, int* textures, int* residences)
        // GLboolean glAreTexturesResidentEXT(GLsizei n, const GLuint* textures, GLboolean* residences)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg n\r\nldarg textures\r\nldarg residences\r\nldarg extensionPointer\r\ncalli unmanaged stdcall int32([in]int32,[in]int32*,[out]int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg n\r\nldarg textures\r\nldarg residences\r\nldarg extensionPointer\r\ncalli unmanaged cdecl int32([in]int32,[in]int32*,[out]int32*)\r\nret")]
        #endif
        public static unsafe int glAreTexturesResidentEXT([In] IntPtr extensionPointer, int n, int* textures, int* residences) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion int glAreTexturesResidentEXT([In] IntPtr extensionPointer, int n, int* textures, int* residences)
        #endregion Overloads for GLboolean glAreTexturesResidentEXT(GLsizei n, const GLuint* textures, GLboolean* residences)

        #region int glIsTextureEXT([In] IntPtr extensionPointer, int texture)
        // GLboolean glIsTextureEXT(GLuint texture)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg texture\r\nldarg extensionPointer\r\ncalli unmanaged stdcall int32([in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg texture\r\nldarg extensionPointer\r\ncalli unmanaged cdecl int32([in]int32)\r\nret")]
        #endif
        public static int glIsTextureEXT([In] IntPtr extensionPointer, int texture) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion int glIsTextureEXT([In] IntPtr extensionPointer, int texture)
        #endregion GL_EXT_texture_object Methods
        #endregion GL_EXT_texture_object (20)

        #region GL_EXT_packed_pixels (23)
        #region GL_EXT_packed_pixels Constants
        #region GL_UNSIGNED_BYTE_3_3_2_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_UNSIGNED_BYTE_3_3_2_EXT 0x8032
        public const int GL_UNSIGNED_BYTE_3_3_2_EXT = 0x8032;
        #endregion GL_UNSIGNED_BYTE_3_3_2_EXT

        #region GL_UNSIGNED_SHORT_4_4_4_4_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_UNSIGNED_SHORT_4_4_4_4_EXT 0x8033
        public const int GL_UNSIGNED_SHORT_4_4_4_4_EXT = 0x8033;
        #endregion GL_UNSIGNED_SHORT_4_4_4_4_EXT

        #region GL_UNSIGNED_SHORT_5_5_5_1_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_UNSIGNED_SHORT_5_5_5_1_EXT 0x8034
        public const int GL_UNSIGNED_SHORT_5_5_5_1_EXT = 0x8034;
        #endregion GL_UNSIGNED_SHORT_5_5_5_1_EXT

        #region GL_UNSIGNED_INT_8_8_8_8_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_UNSIGNED_INT_8_8_8_8_EXT 0x8035
        public const int GL_UNSIGNED_INT_8_8_8_8_EXT = 0x8035;
        #endregion GL_UNSIGNED_INT_8_8_8_8_EXT

        #region GL_UNSIGNED_INT_10_10_10_2_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_UNSIGNED_INT_10_10_10_2_EXT 0x8036
        public const int GL_UNSIGNED_INT_10_10_10_2_EXT = 0x8036;
        #endregion GL_UNSIGNED_INT_10_10_10_2_EXT
        #endregion GL_EXT_packed_pixels Constants
        #endregion GL_EXT_packed_pixels (23)

        #region GL_EXT_rescale_normal (27)
        #region GL_EXT_rescale_normal Constants
        #region GL_RESCALE_NORMAL_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_RESCALE_NORMAL_EXT 0x803A
        public const int GL_RESCALE_NORMAL_EXT = 0x803A;
        #endregion GL_RESCALE_NORMAL_EXT
        #endregion GL_EXT_rescale_normal Constants
        #endregion GL_EXT_rescale_normal (27)

        #region GL_EXT_vertex_array (30)
        #region GL_EXT_vertex_array Constants
        #region GL_VERTEX_ARRAY_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VERTEX_ARRAY_EXT 0x8074
        public const int GL_VERTEX_ARRAY_EXT = 0x8074;
        #endregion GL_VERTEX_ARRAY_EXT

        #region GL_NORMAL_ARRAY_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_NORMAL_ARRAY_EXT 0x8075
        public const int GL_NORMAL_ARRAY_EXT = 0x8075;
        #endregion GL_NORMAL_ARRAY_EXT

        #region GL_COLOR_ARRAY_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COLOR_ARRAY_EXT 0x8076
        public const int GL_COLOR_ARRAY_EXT = 0x8076;
        #endregion GL_COLOR_ARRAY_EXT

        #region GL_INDEX_ARRAY_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_INDEX_ARRAY_EXT 0x8077
        public const int GL_INDEX_ARRAY_EXT = 0x8077;
        #endregion GL_INDEX_ARRAY_EXT

        #region GL_TEXTURE_COORD_ARRAY_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_COORD_ARRAY_EXT 0x8078
        public const int GL_TEXTURE_COORD_ARRAY_EXT = 0x8078;
        #endregion GL_TEXTURE_COORD_ARRAY_EXT

        #region GL_EDGE_FLAG_ARRAY_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_EDGE_FLAG_ARRAY_EXT 0x8079
        public const int GL_EDGE_FLAG_ARRAY_EXT = 0x8079;
        #endregion GL_EDGE_FLAG_ARRAY_EXT

        #region GL_VERTEX_ARRAY_SIZE_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VERTEX_ARRAY_SIZE_EXT 0x807A
        public const int GL_VERTEX_ARRAY_SIZE_EXT = 0x807A;
        #endregion GL_VERTEX_ARRAY_SIZE_EXT

        #region GL_VERTEX_ARRAY_TYPE_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VERTEX_ARRAY_TYPE_EXT 0x807B
        public const int GL_VERTEX_ARRAY_TYPE_EXT = 0x807B;
        #endregion GL_VERTEX_ARRAY_TYPE_EXT

        #region GL_VERTEX_ARRAY_STRIDE_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VERTEX_ARRAY_STRIDE_EXT 0x807C
        public const int GL_VERTEX_ARRAY_STRIDE_EXT = 0x807C;
        #endregion GL_VERTEX_ARRAY_STRIDE_EXT

        #region GL_VERTEX_ARRAY_COUNT_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VERTEX_ARRAY_COUNT_EXT 0x807D
        public const int GL_VERTEX_ARRAY_COUNT_EXT = 0x807D;
        #endregion GL_VERTEX_ARRAY_COUNT_EXT

        #region GL_NORMAL_ARRAY_TYPE_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_NORMAL_ARRAY_TYPE_EXT 0x807E
        public const int GL_NORMAL_ARRAY_TYPE_EXT = 0x807E;
        #endregion GL_NORMAL_ARRAY_TYPE_EXT

        #region GL_NORMAL_ARRAY_STRIDE_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_NORMAL_ARRAY_STRIDE_EXT 0x807F
        public const int GL_NORMAL_ARRAY_STRIDE_EXT = 0x807F;
        #endregion GL_NORMAL_ARRAY_STRIDE_EXT

        #region GL_NORMAL_ARRAY_COUNT_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_NORMAL_ARRAY_COUNT_EXT 0x8080
        public const int GL_NORMAL_ARRAY_COUNT_EXT = 0x8080;
        #endregion GL_NORMAL_ARRAY_COUNT_EXT

        #region GL_COLOR_ARRAY_SIZE_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COLOR_ARRAY_SIZE_EXT 0x8081
        public const int GL_COLOR_ARRAY_SIZE_EXT = 0x8081;
        #endregion GL_COLOR_ARRAY_SIZE_EXT

        #region GL_COLOR_ARRAY_TYPE_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COLOR_ARRAY_TYPE_EXT 0x8082
        public const int GL_COLOR_ARRAY_TYPE_EXT = 0x8082;
        #endregion GL_COLOR_ARRAY_TYPE_EXT

        #region GL_COLOR_ARRAY_STRIDE_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COLOR_ARRAY_STRIDE_EXT 0x8083
        public const int GL_COLOR_ARRAY_STRIDE_EXT = 0x8083;
        #endregion GL_COLOR_ARRAY_STRIDE_EXT

        #region GL_COLOR_ARRAY_COUNT_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COLOR_ARRAY_COUNT_EXT 0x8084
        public const int GL_COLOR_ARRAY_COUNT_EXT = 0x8084;
        #endregion GL_COLOR_ARRAY_COUNT_EXT

        #region GL_INDEX_ARRAY_TYPE_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_INDEX_ARRAY_TYPE_EXT 0x8085
        public const int GL_INDEX_ARRAY_TYPE_EXT = 0x8085;
        #endregion GL_INDEX_ARRAY_TYPE_EXT

        #region GL_INDEX_ARRAY_STRIDE_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_INDEX_ARRAY_STRIDE_EXT 0x8086
        public const int GL_INDEX_ARRAY_STRIDE_EXT = 0x8086;
        #endregion GL_INDEX_ARRAY_STRIDE_EXT

        #region GL_INDEX_ARRAY_COUNT_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_INDEX_ARRAY_COUNT_EXT 0x8087
        public const int GL_INDEX_ARRAY_COUNT_EXT = 0x8087;
        #endregion GL_INDEX_ARRAY_COUNT_EXT

        #region GL_TEXTURE_COORD_ARRAY_SIZE_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_COORD_ARRAY_SIZE_EXT 0x8088
        public const int GL_TEXTURE_COORD_ARRAY_SIZE_EXT = 0x8088;
        #endregion GL_TEXTURE_COORD_ARRAY_SIZE_EXT

        #region GL_TEXTURE_COORD_ARRAY_TYPE_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_COORD_ARRAY_TYPE_EXT 0x8089
        public const int GL_TEXTURE_COORD_ARRAY_TYPE_EXT = 0x8089;
        #endregion GL_TEXTURE_COORD_ARRAY_TYPE_EXT

        #region GL_TEXTURE_COORD_ARRAY_STRIDE_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_COORD_ARRAY_STRIDE_EXT 0x808A
        public const int GL_TEXTURE_COORD_ARRAY_STRIDE_EXT = 0x808A;
        #endregion GL_TEXTURE_COORD_ARRAY_STRIDE_EXT

        #region GL_TEXTURE_COORD_ARRAY_COUNT_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_COORD_ARRAY_COUNT_EXT 0x808B
        public const int GL_TEXTURE_COORD_ARRAY_COUNT_EXT = 0x808B;
        #endregion GL_TEXTURE_COORD_ARRAY_COUNT_EXT

        #region GL_EDGE_FLAG_ARRAY_STRIDE_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_EDGE_FLAG_ARRAY_STRIDE_EXT 0x808C
        public const int GL_EDGE_FLAG_ARRAY_STRIDE_EXT = 0x808C;
        #endregion GL_EDGE_FLAG_ARRAY_STRIDE_EXT

        #region GL_EDGE_FLAG_ARRAY_COUNT_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_EDGE_FLAG_ARRAY_COUNT_EXT 0x808D
        public const int GL_EDGE_FLAG_ARRAY_COUNT_EXT = 0x808D;
        #endregion GL_EDGE_FLAG_ARRAY_COUNT_EXT

        #region GL_VERTEX_ARRAY_POINTER_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VERTEX_ARRAY_POINTER_EXT 0x808E
        public const int GL_VERTEX_ARRAY_POINTER_EXT = 0x808E;
        #endregion GL_VERTEX_ARRAY_POINTER_EXT

        #region GL_NORMAL_ARRAY_POINTER_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_NORMAL_ARRAY_POINTER_EXT 0x808F
        public const int GL_NORMAL_ARRAY_POINTER_EXT = 0x808F;
        #endregion GL_NORMAL_ARRAY_POINTER_EXT

        #region GL_COLOR_ARRAY_POINTER_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COLOR_ARRAY_POINTER_EXT 0x8090
        public const int GL_COLOR_ARRAY_POINTER_EXT = 0x8090;
        #endregion GL_COLOR_ARRAY_POINTER_EXT

        #region GL_INDEX_ARRAY_POINTER_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_INDEX_ARRAY_POINTER_EXT 0x8091
        public const int GL_INDEX_ARRAY_POINTER_EXT = 0x8091;
        #endregion GL_INDEX_ARRAY_POINTER_EXT

        #region GL_TEXTURE_COORD_ARRAY_POINTER_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_COORD_ARRAY_POINTER_EXT 0x8092
        public const int GL_TEXTURE_COORD_ARRAY_POINTER_EXT = 0x8092;
        #endregion GL_TEXTURE_COORD_ARRAY_POINTER_EXT

        #region GL_EDGE_FLAG_ARRAY_POINTER_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_EDGE_FLAG_ARRAY_POINTER_EXT 0x8093
        public const int GL_EDGE_FLAG_ARRAY_POINTER_EXT = 0x8093;
        #endregion GL_EDGE_FLAG_ARRAY_POINTER_EXT
        #endregion GL_EXT_vertex_array Constants

        #region GL_EXT_vertex_array Methods
        #region void glArrayElementEXT([In] IntPtr extensionPointer, int i)
        // GLvoid glArrayElementEXT(GLint i)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg i\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg i\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32)\r\nret")]
        #endif
        public static void glArrayElementEXT([In] IntPtr extensionPointer, int i) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glArrayElementEXT([In] IntPtr extensionPointer, int i)

        #region void glDrawArraysEXT([In] IntPtr extensionPointer, int mode, int first, int count)
        // GLvoid glDrawArraysEXT(GLenum mode, GLint first, GLsizei count)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg mode\r\nldarg first\r\nldarg count\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg mode\r\nldarg first\r\nldarg count\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32)\r\nret")]
        #endif
        public static void glDrawArraysEXT([In] IntPtr extensionPointer, int mode, int first, int count) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glDrawArraysEXT([In] IntPtr extensionPointer, int mode, int first, int count)

        #region Overloads for GLvoid glVertexPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid* pointer)
        #region void glVertexPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, int count, short[] pointer)
        // GLvoid glVertexPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int16[])\r\nret")]
        #endif
        public static void glVertexPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, int count, short[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, int count, short[] pointer)

        #region void glVertexPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, int count, float[] pointer)
        // GLvoid glVertexPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]float32[])\r\nret")]
        #endif
        public static void glVertexPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, int count, float[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, int count, float[] pointer)

        #region void glVertexPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, int count, int[] pointer)
        // GLvoid glVertexPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32[])\r\nret")]
        #endif
        public static void glVertexPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, int count, int[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, int count, int[] pointer)

        #region void glVertexPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, int count, IntPtr pointer)
        // GLvoid glVertexPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]native int)\r\nret")]
        #endif
        public static void glVertexPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, int count, IntPtr pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, int count, IntPtr pointer)

        #region void glVertexPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, int count, byte[] pointer)
        // GLvoid glVertexPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int8[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int8[])\r\nret")]
        #endif
        public static void glVertexPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, int count, byte[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, int count, byte[] pointer)

        #region void glVertexPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, int count, double[] pointer)
        // GLvoid glVertexPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]float64[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]float64[])\r\nret")]
        #endif
        public static void glVertexPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, int count, double[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, int count, double[] pointer)

        #region void glVertexPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, int count, uint[] pointer)
        // GLvoid glVertexPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid* pointer)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int32[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int32[])\r\nret")]
        #endif
        public static void glVertexPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, int count, uint[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, int count, uint[] pointer)

        #region void glVertexPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, int count, sbyte[] pointer)
        // GLvoid glVertexPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid* pointer)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int8[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int8[])\r\nret")]
        #endif
        public static void glVertexPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, int count, sbyte[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, int count, sbyte[] pointer)

        #region void glVertexPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, int count, ushort[] pointer)
        // GLvoid glVertexPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid* pointer)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int16[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int16[])\r\nret")]
        #endif
        public static void glVertexPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, int count, ushort[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, int count, ushort[] pointer)

        #region void glVertexPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, int count, void* pointer)
        // GLvoid glVertexPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid* pointer)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]void*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]void*)\r\nret")]
        #endif
        public static unsafe void glVertexPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, int count, void* pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, int count, void* pointer)
        #endregion Overloads for GLvoid glVertexPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid* pointer)

        #region Overloads for GLvoid glNormalPointerEXT(GLenum type, GLsizei stride, GLsizei count, const GLvoid* pointer)
        #region void glNormalPointerEXT([In] IntPtr extensionPointer, int type, int stride, int count, short[] pointer)
        // GLvoid glNormalPointerEXT(GLenum type, GLsizei stride, GLsizei count, const GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg type\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg type\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int16[])\r\nret")]
        #endif
        public static void glNormalPointerEXT([In] IntPtr extensionPointer, int type, int stride, int count, short[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glNormalPointerEXT([In] IntPtr extensionPointer, int type, int stride, int count, short[] pointer)

        #region void glNormalPointerEXT([In] IntPtr extensionPointer, int type, int stride, int count, float[] pointer)
        // GLvoid glNormalPointerEXT(GLenum type, GLsizei stride, GLsizei count, const GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg type\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg type\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]float32[])\r\nret")]
        #endif
        public static void glNormalPointerEXT([In] IntPtr extensionPointer, int type, int stride, int count, float[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glNormalPointerEXT([In] IntPtr extensionPointer, int type, int stride, int count, float[] pointer)

        #region void glNormalPointerEXT([In] IntPtr extensionPointer, int type, int stride, int count, int[] pointer)
        // GLvoid glNormalPointerEXT(GLenum type, GLsizei stride, GLsizei count, const GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg type\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg type\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32[])\r\nret")]
        #endif
        public static void glNormalPointerEXT([In] IntPtr extensionPointer, int type, int stride, int count, int[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glNormalPointerEXT([In] IntPtr extensionPointer, int type, int stride, int count, int[] pointer)

        #region void glNormalPointerEXT([In] IntPtr extensionPointer, int type, int stride, int count, IntPtr pointer)
        // GLvoid glNormalPointerEXT(GLenum type, GLsizei stride, GLsizei count, const GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg type\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg type\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]native int)\r\nret")]
        #endif
        public static void glNormalPointerEXT([In] IntPtr extensionPointer, int type, int stride, int count, IntPtr pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glNormalPointerEXT([In] IntPtr extensionPointer, int type, int stride, int count, IntPtr pointer)

        #region void glNormalPointerEXT([In] IntPtr extensionPointer, int type, int stride, int count, byte[] pointer)
        // GLvoid glNormalPointerEXT(GLenum type, GLsizei stride, GLsizei count, const GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg type\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]unsigned int8[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg type\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]unsigned int8[])\r\nret")]
        #endif
        public static void glNormalPointerEXT([In] IntPtr extensionPointer, int type, int stride, int count, byte[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glNormalPointerEXT([In] IntPtr extensionPointer, int type, int stride, int count, byte[] pointer)

        #region void glNormalPointerEXT([In] IntPtr extensionPointer, int type, int stride, int count, double[] pointer)
        // GLvoid glNormalPointerEXT(GLenum type, GLsizei stride, GLsizei count, const GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg type\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]float64[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg type\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]float64[])\r\nret")]
        #endif
        public static void glNormalPointerEXT([In] IntPtr extensionPointer, int type, int stride, int count, double[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glNormalPointerEXT([In] IntPtr extensionPointer, int type, int stride, int count, double[] pointer)

        #region void glNormalPointerEXT([In] IntPtr extensionPointer, int type, int stride, int count, uint[] pointer)
        // GLvoid glNormalPointerEXT(GLenum type, GLsizei stride, GLsizei count, const GLvoid* pointer)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg type\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]unsigned int32[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg type\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]unsigned int32[])\r\nret")]
        #endif
        public static void glNormalPointerEXT([In] IntPtr extensionPointer, int type, int stride, int count, uint[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glNormalPointerEXT([In] IntPtr extensionPointer, int type, int stride, int count, uint[] pointer)

        #region void glNormalPointerEXT([In] IntPtr extensionPointer, int type, int stride, int count, sbyte[] pointer)
        // GLvoid glNormalPointerEXT(GLenum type, GLsizei stride, GLsizei count, const GLvoid* pointer)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg type\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int8[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg type\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int8[])\r\nret")]
        #endif
        public static void glNormalPointerEXT([In] IntPtr extensionPointer, int type, int stride, int count, sbyte[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glNormalPointerEXT([In] IntPtr extensionPointer, int type, int stride, int count, sbyte[] pointer)

        #region void glNormalPointerEXT([In] IntPtr extensionPointer, int type, int stride, int count, ushort[] pointer)
        // GLvoid glNormalPointerEXT(GLenum type, GLsizei stride, GLsizei count, const GLvoid* pointer)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg type\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]unsigned int16[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg type\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]unsigned int16[])\r\nret")]
        #endif
        public static void glNormalPointerEXT([In] IntPtr extensionPointer, int type, int stride, int count, ushort[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glNormalPointerEXT([In] IntPtr extensionPointer, int type, int stride, int count, ushort[] pointer)

        #region void glNormalPointerEXT([In] IntPtr extensionPointer, int type, int stride, int count, void* pointer)
        // GLvoid glNormalPointerEXT(GLenum type, GLsizei stride, GLsizei count, const GLvoid* pointer)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg type\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]void*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg type\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]void*)\r\nret")]
        #endif
        public static unsafe void glNormalPointerEXT([In] IntPtr extensionPointer, int type, int stride, int count, void* pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glNormalPointerEXT([In] IntPtr extensionPointer, int type, int stride, int count, void* pointer)
        #endregion Overloads for GLvoid glNormalPointerEXT(GLenum type, GLsizei stride, GLsizei count, const GLvoid* pointer)

        #region Overloads for GLvoid glColorPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid* pointer)
        #region void glColorPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, int count, short[] pointer)
        // GLvoid glColorPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int16[])\r\nret")]
        #endif
        public static void glColorPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, int count, short[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColorPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, int count, short[] pointer)

        #region void glColorPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, int count, float[] pointer)
        // GLvoid glColorPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]float32[])\r\nret")]
        #endif
        public static void glColorPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, int count, float[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColorPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, int count, float[] pointer)

        #region void glColorPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, int count, int[] pointer)
        // GLvoid glColorPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32[])\r\nret")]
        #endif
        public static void glColorPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, int count, int[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColorPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, int count, int[] pointer)

        #region void glColorPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, int count, IntPtr pointer)
        // GLvoid glColorPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]native int)\r\nret")]
        #endif
        public static void glColorPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, int count, IntPtr pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColorPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, int count, IntPtr pointer)

        #region void glColorPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, int count, byte[] pointer)
        // GLvoid glColorPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int8[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int8[])\r\nret")]
        #endif
        public static void glColorPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, int count, byte[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColorPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, int count, byte[] pointer)

        #region void glColorPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, int count, double[] pointer)
        // GLvoid glColorPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]float64[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]float64[])\r\nret")]
        #endif
        public static void glColorPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, int count, double[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColorPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, int count, double[] pointer)

        #region void glColorPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, int count, uint[] pointer)
        // GLvoid glColorPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid* pointer)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int32[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int32[])\r\nret")]
        #endif
        public static void glColorPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, int count, uint[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColorPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, int count, uint[] pointer)

        #region void glColorPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, int count, sbyte[] pointer)
        // GLvoid glColorPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid* pointer)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int8[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int8[])\r\nret")]
        #endif
        public static void glColorPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, int count, sbyte[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColorPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, int count, sbyte[] pointer)

        #region void glColorPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, int count, ushort[] pointer)
        // GLvoid glColorPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid* pointer)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int16[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int16[])\r\nret")]
        #endif
        public static void glColorPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, int count, ushort[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColorPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, int count, ushort[] pointer)

        #region void glColorPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, int count, void* pointer)
        // GLvoid glColorPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid* pointer)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]void*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]void*)\r\nret")]
        #endif
        public static unsafe void glColorPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, int count, void* pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColorPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, int count, void* pointer)
        #endregion Overloads for GLvoid glColorPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid* pointer)

        #region Overloads for GLvoid glIndexPointerEXT(GLenum type, GLsizei stride, GLsizei count, const GLvoid* pointer)
        #region void glIndexPointerEXT([In] IntPtr extensionPointer, int type, int stride, int count, short[] pointer)
        // GLvoid glIndexPointerEXT(GLenum type, GLsizei stride, GLsizei count, const GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg type\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg type\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int16[])\r\nret")]
        #endif
        public static void glIndexPointerEXT([In] IntPtr extensionPointer, int type, int stride, int count, short[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glIndexPointerEXT([In] IntPtr extensionPointer, int type, int stride, int count, short[] pointer)

        #region void glIndexPointerEXT([In] IntPtr extensionPointer, int type, int stride, int count, float[] pointer)
        // GLvoid glIndexPointerEXT(GLenum type, GLsizei stride, GLsizei count, const GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg type\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg type\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]float32[])\r\nret")]
        #endif
        public static void glIndexPointerEXT([In] IntPtr extensionPointer, int type, int stride, int count, float[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glIndexPointerEXT([In] IntPtr extensionPointer, int type, int stride, int count, float[] pointer)

        #region void glIndexPointerEXT([In] IntPtr extensionPointer, int type, int stride, int count, int[] pointer)
        // GLvoid glIndexPointerEXT(GLenum type, GLsizei stride, GLsizei count, const GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg type\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg type\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32[])\r\nret")]
        #endif
        public static void glIndexPointerEXT([In] IntPtr extensionPointer, int type, int stride, int count, int[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glIndexPointerEXT([In] IntPtr extensionPointer, int type, int stride, int count, int[] pointer)

        #region void glIndexPointerEXT([In] IntPtr extensionPointer, int type, int stride, int count, IntPtr pointer)
        // GLvoid glIndexPointerEXT(GLenum type, GLsizei stride, GLsizei count, const GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg type\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg type\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]native int)\r\nret")]
        #endif
        public static void glIndexPointerEXT([In] IntPtr extensionPointer, int type, int stride, int count, IntPtr pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glIndexPointerEXT([In] IntPtr extensionPointer, int type, int stride, int count, IntPtr pointer)

        #region void glIndexPointerEXT([In] IntPtr extensionPointer, int type, int stride, int count, byte[] pointer)
        // GLvoid glIndexPointerEXT(GLenum type, GLsizei stride, GLsizei count, const GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg type\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]unsigned int8[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg type\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]unsigned int8[])\r\nret")]
        #endif
        public static void glIndexPointerEXT([In] IntPtr extensionPointer, int type, int stride, int count, byte[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glIndexPointerEXT([In] IntPtr extensionPointer, int type, int stride, int count, byte[] pointer)

        #region void glIndexPointerEXT([In] IntPtr extensionPointer, int type, int stride, int count, double[] pointer)
        // GLvoid glIndexPointerEXT(GLenum type, GLsizei stride, GLsizei count, const GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg type\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]float64[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg type\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]float64[])\r\nret")]
        #endif
        public static void glIndexPointerEXT([In] IntPtr extensionPointer, int type, int stride, int count, double[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glIndexPointerEXT([In] IntPtr extensionPointer, int type, int stride, int count, double[] pointer)

        #region void glIndexPointerEXT([In] IntPtr extensionPointer, int type, int stride, int count, uint[] pointer)
        // GLvoid glIndexPointerEXT(GLenum type, GLsizei stride, GLsizei count, const GLvoid* pointer)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg type\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]unsigned int32[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg type\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]unsigned int32[])\r\nret")]
        #endif
        public static void glIndexPointerEXT([In] IntPtr extensionPointer, int type, int stride, int count, uint[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glIndexPointerEXT([In] IntPtr extensionPointer, int type, int stride, int count, uint[] pointer)

        #region void glIndexPointerEXT([In] IntPtr extensionPointer, int type, int stride, int count, sbyte[] pointer)
        // GLvoid glIndexPointerEXT(GLenum type, GLsizei stride, GLsizei count, const GLvoid* pointer)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg type\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int8[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg type\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int8[])\r\nret")]
        #endif
        public static void glIndexPointerEXT([In] IntPtr extensionPointer, int type, int stride, int count, sbyte[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glIndexPointerEXT([In] IntPtr extensionPointer, int type, int stride, int count, sbyte[] pointer)

        #region void glIndexPointerEXT([In] IntPtr extensionPointer, int type, int stride, int count, ushort[] pointer)
        // GLvoid glIndexPointerEXT(GLenum type, GLsizei stride, GLsizei count, const GLvoid* pointer)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg type\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]unsigned int16[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg type\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]unsigned int16[])\r\nret")]
        #endif
        public static void glIndexPointerEXT([In] IntPtr extensionPointer, int type, int stride, int count, ushort[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glIndexPointerEXT([In] IntPtr extensionPointer, int type, int stride, int count, ushort[] pointer)

        #region void glIndexPointerEXT([In] IntPtr extensionPointer, int type, int stride, int count, void* pointer)
        // GLvoid glIndexPointerEXT(GLenum type, GLsizei stride, GLsizei count, const GLvoid* pointer)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg type\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]void*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg type\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]void*)\r\nret")]
        #endif
        public static unsafe void glIndexPointerEXT([In] IntPtr extensionPointer, int type, int stride, int count, void* pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glIndexPointerEXT([In] IntPtr extensionPointer, int type, int stride, int count, void* pointer)
        #endregion Overloads for GLvoid glIndexPointerEXT(GLenum type, GLsizei stride, GLsizei count, const GLvoid* pointer)

        #region Overloads for GLvoid glTexCoordPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid* pointer)
        #region void glTexCoordPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, int count, short[] pointer)
        // GLvoid glTexCoordPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int16[])\r\nret")]
        #endif
        public static void glTexCoordPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, int count, short[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoordPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, int count, short[] pointer)

        #region void glTexCoordPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, int count, float[] pointer)
        // GLvoid glTexCoordPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]float32[])\r\nret")]
        #endif
        public static void glTexCoordPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, int count, float[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoordPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, int count, float[] pointer)

        #region void glTexCoordPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, int count, int[] pointer)
        // GLvoid glTexCoordPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32[])\r\nret")]
        #endif
        public static void glTexCoordPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, int count, int[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoordPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, int count, int[] pointer)

        #region void glTexCoordPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, int count, IntPtr pointer)
        // GLvoid glTexCoordPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]native int)\r\nret")]
        #endif
        public static void glTexCoordPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, int count, IntPtr pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoordPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, int count, IntPtr pointer)

        #region void glTexCoordPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, int count, byte[] pointer)
        // GLvoid glTexCoordPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int8[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int8[])\r\nret")]
        #endif
        public static void glTexCoordPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, int count, byte[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoordPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, int count, byte[] pointer)

        #region void glTexCoordPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, int count, double[] pointer)
        // GLvoid glTexCoordPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]float64[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]float64[])\r\nret")]
        #endif
        public static void glTexCoordPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, int count, double[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoordPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, int count, double[] pointer)

        #region void glTexCoordPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, int count, uint[] pointer)
        // GLvoid glTexCoordPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid* pointer)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int32[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int32[])\r\nret")]
        #endif
        public static void glTexCoordPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, int count, uint[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoordPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, int count, uint[] pointer)

        #region void glTexCoordPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, int count, sbyte[] pointer)
        // GLvoid glTexCoordPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid* pointer)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int8[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int8[])\r\nret")]
        #endif
        public static void glTexCoordPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, int count, sbyte[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoordPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, int count, sbyte[] pointer)

        #region void glTexCoordPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, int count, ushort[] pointer)
        // GLvoid glTexCoordPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid* pointer)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int16[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int16[])\r\nret")]
        #endif
        public static void glTexCoordPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, int count, ushort[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoordPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, int count, ushort[] pointer)

        #region void glTexCoordPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, int count, void* pointer)
        // GLvoid glTexCoordPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid* pointer)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]void*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]void*)\r\nret")]
        #endif
        public static unsafe void glTexCoordPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, int count, void* pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoordPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, int count, void* pointer)
        #endregion Overloads for GLvoid glTexCoordPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid* pointer)

        #region Overloads for GLvoid glEdgeFlagPointerEXT(GLsizei stride, GLsizei count, const GLboolean* pointer)
        #region void glEdgeFlagPointerEXT([In] IntPtr extensionPointer, int stride, int count, ref int pointer)
        // GLvoid glEdgeFlagPointerEXT(GLsizei stride, GLsizei count, const GLboolean* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in][out]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in][out]int32)\r\nret")]
        #endif
        public static void glEdgeFlagPointerEXT([In] IntPtr extensionPointer, int stride, int count, ref int pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glEdgeFlagPointerEXT([In] IntPtr extensionPointer, int stride, int count, ref int pointer)

        #region void glEdgeFlagPointerEXT([In] IntPtr extensionPointer, int stride, int count, int[] pointer)
        // GLvoid glEdgeFlagPointerEXT(GLsizei stride, GLsizei count, const GLboolean* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32[])\r\nret")]
        #endif
        public static void glEdgeFlagPointerEXT([In] IntPtr extensionPointer, int stride, int count, int[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glEdgeFlagPointerEXT([In] IntPtr extensionPointer, int stride, int count, int[] pointer)

        #region void glEdgeFlagPointerEXT([In] IntPtr extensionPointer, int stride, int count, IntPtr pointer)
        // GLvoid glEdgeFlagPointerEXT(GLsizei stride, GLsizei count, const GLboolean* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]native int)\r\nret")]
        #endif
        public static void glEdgeFlagPointerEXT([In] IntPtr extensionPointer, int stride, int count, IntPtr pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glEdgeFlagPointerEXT([In] IntPtr extensionPointer, int stride, int count, IntPtr pointer)

        #region void glEdgeFlagPointerEXT([In] IntPtr extensionPointer, int stride, int count, int* pointer)
        // GLvoid glEdgeFlagPointerEXT(GLsizei stride, GLsizei count, const GLboolean* pointer)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg stride\r\nldarg count\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32*)\r\nret")]
        #endif
        public static unsafe void glEdgeFlagPointerEXT([In] IntPtr extensionPointer, int stride, int count, int* pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glEdgeFlagPointerEXT([In] IntPtr extensionPointer, int stride, int count, int* pointer)
        #endregion Overloads for GLvoid glEdgeFlagPointerEXT(GLsizei stride, GLsizei count, const GLboolean* pointer)

        #region Overloads for GLvoid glGetPointervEXT(GLenum pname, GLvoid* parameters)
        #region void glGetPointervEXT([In] IntPtr extensionPointer, int pname, IntPtr[] parameters)
        // GLvoid glGetPointervEXT(GLenum pname, GLvoid* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[out]native int[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[out]native int[])\r\nret")]
        #endif
        public static void glGetPointervEXT([In] IntPtr extensionPointer, int pname, IntPtr[] parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetPointervEXT([In] IntPtr extensionPointer, int pname, IntPtr[] parameters)

        #region void glGetPointervEXT([In] IntPtr extensionPointer, int pname, IntPtr parameters)
        // GLvoid glGetPointervEXT(GLenum pname, GLvoid* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGetPointervEXT([In] IntPtr extensionPointer, int pname, IntPtr parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetPointervEXT([In] IntPtr extensionPointer, int pname, IntPtr parameters)

        #region void glGetPointervEXT([In] IntPtr extensionPointer, int pname, void** parameters)
        // GLvoid glGetPointervEXT(GLenum pname, GLvoid* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[out]void**)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[out]void**)\r\nret")]
        #endif
        public static unsafe void glGetPointervEXT([In] IntPtr extensionPointer, int pname, void** parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetPointervEXT([In] IntPtr extensionPointer, int pname, void** parameters)
        #endregion Overloads for GLvoid glGetPointervEXT(GLenum pname, GLvoid* parameters)
        #endregion GL_EXT_vertex_array Methods
        #endregion GL_EXT_vertex_array (30)

        #region GL_EXT_blend_minmax (37)
        #region GL_EXT_blend_minmax Constants
        #region GL_FUNC_ADD_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_FUNC_ADD_EXT 0x8006
        public const int GL_FUNC_ADD_EXT = 0x8006;
        #endregion GL_FUNC_ADD_EXT

        #region GL_MIN_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MIN_EXT 0x8007
        public const int GL_MIN_EXT = 0x8007;
        #endregion GL_MIN_EXT

        #region GL_MAX_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAX_EXT 0x8008
        public const int GL_MAX_EXT = 0x8008;
        #endregion GL_MAX_EXT

        #region GL_BLEND_EQUATION_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_BLEND_EQUATION_EXT 0x8009
        public const int GL_BLEND_EQUATION_EXT = 0x8009;
        #endregion GL_BLEND_EQUATION_EXT
        #endregion GL_EXT_blend_minmax Constants

        #region GL_EXT_blend_minmax Methods
        #region void glBlendEquationEXT([In] IntPtr extensionPointer, int mode)
        // GLvoid glBlendEquationEXT(GLenum mode)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg mode\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg mode\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32)\r\nret")]
        #endif
        public static void glBlendEquationEXT([In] IntPtr extensionPointer, int mode) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glBlendEquationEXT([In] IntPtr extensionPointer, int mode)
        #endregion GL_EXT_blend_minmax Methods
        #endregion GL_EXT_blend_minmax (37)

        #region GL_EXT_blend_subtract (38)
        #region GL_EXT_blend_subtract Constants
        #region GL_FUNC_SUBTRACT_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_FUNC_SUBTRACT_EXT 0x800A
        public const int GL_FUNC_SUBTRACT_EXT = 0x800A;
        #endregion GL_FUNC_SUBTRACT_EXT

        #region GL_FUNC_REVERSE_SUBTRACT_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_FUNC_REVERSE_SUBTRACT_EXT 0x800B
        public const int GL_FUNC_REVERSE_SUBTRACT_EXT = 0x800B;
        #endregion GL_FUNC_REVERSE_SUBTRACT_EXT
        #endregion GL_EXT_blend_subtract Constants
        #endregion GL_EXT_blend_subtract (38)

        #region GL_EXT_blend_logic_op (39)
        #endregion GL_EXT_blend_logic_op (39)

        #region GL_EXT_point_parameters (54)
        #region GL_EXT_point_parameters Constants
        #region GL_POINT_SIZE_MIN_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_POINT_SIZE_MIN_EXT 0x8126
        public const int GL_POINT_SIZE_MIN_EXT = 0x8126;
        #endregion GL_POINT_SIZE_MIN_EXT

        #region GL_POINT_SIZE_MAX_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_POINT_SIZE_MAX_EXT 0x8127
        public const int GL_POINT_SIZE_MAX_EXT = 0x8127;
        #endregion GL_POINT_SIZE_MAX_EXT

        #region GL_POINT_FADE_THRESHOLD_SIZE_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_POINT_FADE_THRESHOLD_SIZE_EXT 0x8128
        public const int GL_POINT_FADE_THRESHOLD_SIZE_EXT = 0x8128;
        #endregion GL_POINT_FADE_THRESHOLD_SIZE_EXT

        #region GL_DISTANCE_ATTENUATION_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DISTANCE_ATTENUATION_EXT 0x8129
        public const int GL_DISTANCE_ATTENUATION_EXT = 0x8129;
        #endregion GL_DISTANCE_ATTENUATION_EXT
        #endregion GL_EXT_point_parameters Constants

        #region GL_EXT_point_parameters Methods
        #region void glPointParameterfEXT([In] IntPtr extensionPointer, int pname, float param)
        // GLvoid glPointParameterfEXT(GLenum pname, GLfloat param)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg param\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg param\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float32)\r\nret")]
        #endif
        public static void glPointParameterfEXT([In] IntPtr extensionPointer, int pname, float param) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glPointParameterfEXT([In] IntPtr extensionPointer, int pname, float param)

        #region Overloads for GLvoid glPointParameterfvEXT(GLenum pname, GLfloat* parameters)
        #region void glPointParameterfvEXT([In] IntPtr extensionPointer, int pname, ref float parameters)
        // GLvoid glPointParameterfvEXT(GLenum pname, GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]float32)\r\nret")]
        #endif
        public static void glPointParameterfvEXT([In] IntPtr extensionPointer, int pname, ref float parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glPointParameterfvEXT([In] IntPtr extensionPointer, int pname, ref float parameters)

        #region void glPointParameterfvEXT([In] IntPtr extensionPointer, int pname, float[] parameters)
        // GLvoid glPointParameterfvEXT(GLenum pname, GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float32[])\r\nret")]
        #endif
        public static void glPointParameterfvEXT([In] IntPtr extensionPointer, int pname, float[] parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glPointParameterfvEXT([In] IntPtr extensionPointer, int pname, float[] parameters)

        #region void glPointParameterfvEXT([In] IntPtr extensionPointer, int pname, IntPtr parameters)
        // GLvoid glPointParameterfvEXT(GLenum pname, GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glPointParameterfvEXT([In] IntPtr extensionPointer, int pname, IntPtr parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glPointParameterfvEXT([In] IntPtr extensionPointer, int pname, IntPtr parameters)

        #region void glPointParameterfvEXT([In] IntPtr extensionPointer, int pname, float* parameters)
        // GLvoid glPointParameterfvEXT(GLenum pname, GLfloat* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float32*)\r\nret")]
        #endif
        public static unsafe void glPointParameterfvEXT([In] IntPtr extensionPointer, int pname, float* parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glPointParameterfvEXT([In] IntPtr extensionPointer, int pname, float* parameters)
        #endregion Overloads for GLvoid glPointParameterfvEXT(GLenum pname, GLfloat* parameters)
        #endregion GL_EXT_point_parameters Methods
        #endregion GL_EXT_point_parameters (54)

        #region GL_EXT_color_subtable (74)
        #region GL_EXT_color_subtable Methods
        #region Overloads for GLvoid glColorSubTableEXT(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid* data)
        #region void glColorSubTableEXT([In] IntPtr extensionPointer, int target, int start, int count, int format, int type, short[] data)
        // GLvoid glColorSubTableEXT(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid* data)
        #if WIN32
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg start\r\nldarg count\r\nldarg format\r\nldarg type\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg start\r\nldarg count\r\nldarg format\r\nldarg type\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int16[])\r\nret")]
        #endif
        public static void glColorSubTableEXT([In] IntPtr extensionPointer, int target, int start, int count, int format, int type, short[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColorSubTableEXT([In] IntPtr extensionPointer, int target, int start, int count, int format, int type, short[] data)

        #region void glColorSubTableEXT([In] IntPtr extensionPointer, int target, int start, int count, int format, int type, float[] data)
        // GLvoid glColorSubTableEXT(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid* data)
        #if WIN32
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg start\r\nldarg count\r\nldarg format\r\nldarg type\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg start\r\nldarg count\r\nldarg format\r\nldarg type\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]float32[])\r\nret")]
        #endif
        public static void glColorSubTableEXT([In] IntPtr extensionPointer, int target, int start, int count, int format, int type, float[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColorSubTableEXT([In] IntPtr extensionPointer, int target, int start, int count, int format, int type, float[] data)

        #region void glColorSubTableEXT([In] IntPtr extensionPointer, int target, int start, int count, int format, int type, int[] data)
        // GLvoid glColorSubTableEXT(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid* data)
        #if WIN32
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg start\r\nldarg count\r\nldarg format\r\nldarg type\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg start\r\nldarg count\r\nldarg format\r\nldarg type\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32[])\r\nret")]
        #endif
        public static void glColorSubTableEXT([In] IntPtr extensionPointer, int target, int start, int count, int format, int type, int[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColorSubTableEXT([In] IntPtr extensionPointer, int target, int start, int count, int format, int type, int[] data)

        #region void glColorSubTableEXT([In] IntPtr extensionPointer, int target, int start, int count, int format, int type, IntPtr data)
        // GLvoid glColorSubTableEXT(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid* data)
        #if WIN32
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg start\r\nldarg count\r\nldarg format\r\nldarg type\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg start\r\nldarg count\r\nldarg format\r\nldarg type\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]native int)\r\nret")]
        #endif
        public static void glColorSubTableEXT([In] IntPtr extensionPointer, int target, int start, int count, int format, int type, IntPtr data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColorSubTableEXT([In] IntPtr extensionPointer, int target, int start, int count, int format, int type, IntPtr data)

        #region void glColorSubTableEXT([In] IntPtr extensionPointer, int target, int start, int count, int format, int type, byte[] data)
        // GLvoid glColorSubTableEXT(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid* data)
        #if WIN32
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg start\r\nldarg count\r\nldarg format\r\nldarg type\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int8[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg start\r\nldarg count\r\nldarg format\r\nldarg type\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int8[])\r\nret")]
        #endif
        public static void glColorSubTableEXT([In] IntPtr extensionPointer, int target, int start, int count, int format, int type, byte[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColorSubTableEXT([In] IntPtr extensionPointer, int target, int start, int count, int format, int type, byte[] data)

        #region void glColorSubTableEXT([In] IntPtr extensionPointer, int target, int start, int count, int format, int type, double[] data)
        // GLvoid glColorSubTableEXT(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid* data)
        #if WIN32
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg start\r\nldarg count\r\nldarg format\r\nldarg type\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]float64[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg start\r\nldarg count\r\nldarg format\r\nldarg type\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]float64[])\r\nret")]
        #endif
        public static void glColorSubTableEXT([In] IntPtr extensionPointer, int target, int start, int count, int format, int type, double[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColorSubTableEXT([In] IntPtr extensionPointer, int target, int start, int count, int format, int type, double[] data)

        #region void glColorSubTableEXT([In] IntPtr extensionPointer, int target, int start, int count, int format, int type, uint[] data)
        // GLvoid glColorSubTableEXT(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid* data)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg start\r\nldarg count\r\nldarg format\r\nldarg type\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int32[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg start\r\nldarg count\r\nldarg format\r\nldarg type\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int32[])\r\nret")]
        #endif
        public static void glColorSubTableEXT([In] IntPtr extensionPointer, int target, int start, int count, int format, int type, uint[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColorSubTableEXT([In] IntPtr extensionPointer, int target, int start, int count, int format, int type, uint[] data)

        #region void glColorSubTableEXT([In] IntPtr extensionPointer, int target, int start, int count, int format, int type, sbyte[] data)
        // GLvoid glColorSubTableEXT(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid* data)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg start\r\nldarg count\r\nldarg format\r\nldarg type\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int8[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg start\r\nldarg count\r\nldarg format\r\nldarg type\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int8[])\r\nret")]
        #endif
        public static void glColorSubTableEXT([In] IntPtr extensionPointer, int target, int start, int count, int format, int type, sbyte[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColorSubTableEXT([In] IntPtr extensionPointer, int target, int start, int count, int format, int type, sbyte[] data)

        #region void glColorSubTableEXT([In] IntPtr extensionPointer, int target, int start, int count, int format, int type, ushort[] data)
        // GLvoid glColorSubTableEXT(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid* data)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg start\r\nldarg count\r\nldarg format\r\nldarg type\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int16[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg start\r\nldarg count\r\nldarg format\r\nldarg type\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int16[])\r\nret")]
        #endif
        public static void glColorSubTableEXT([In] IntPtr extensionPointer, int target, int start, int count, int format, int type, ushort[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColorSubTableEXT([In] IntPtr extensionPointer, int target, int start, int count, int format, int type, ushort[] data)

        #region void glColorSubTableEXT([In] IntPtr extensionPointer, int target, int start, int count, int format, int type, void* data)
        // GLvoid glColorSubTableEXT(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid* data)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg start\r\nldarg count\r\nldarg format\r\nldarg type\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]void*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg start\r\nldarg count\r\nldarg format\r\nldarg type\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]void*)\r\nret")]
        #endif
        public static unsafe void glColorSubTableEXT([In] IntPtr extensionPointer, int target, int start, int count, int format, int type, void* data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColorSubTableEXT([In] IntPtr extensionPointer, int target, int start, int count, int format, int type, void* data)
        #endregion Overloads for GLvoid glColorSubTableEXT(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid* data)

        #region void glCopyColorSubTableEXT([In] IntPtr extensionPointer, int target, int start, int x, int y, int width)
        // GLvoid glCopyColorSubTableEXT(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg target\r\nldarg start\r\nldarg x\r\nldarg y\r\nldarg width\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg target\r\nldarg start\r\nldarg x\r\nldarg y\r\nldarg width\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32)\r\nret")]
        #endif
        public static void glCopyColorSubTableEXT([In] IntPtr extensionPointer, int target, int start, int x, int y, int width) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glCopyColorSubTableEXT([In] IntPtr extensionPointer, int target, int start, int x, int y, int width)
        #endregion GL_EXT_color_subtable Methods
        #endregion GL_EXT_color_subtable (74)

        #region GL_EXT_paletted_texture (78)
        #region GL_EXT_paletted_texture Constants
        #region GL_COLOR_INDEX1_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COLOR_INDEX1_EXT 0x80E2
        public const int GL_COLOR_INDEX1_EXT = 0x80E2;
        #endregion GL_COLOR_INDEX1_EXT

        #region GL_COLOR_INDEX2_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COLOR_INDEX2_EXT 0x80E3
        public const int GL_COLOR_INDEX2_EXT = 0x80E3;
        #endregion GL_COLOR_INDEX2_EXT

        #region GL_COLOR_INDEX4_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COLOR_INDEX4_EXT 0x80E4
        public const int GL_COLOR_INDEX4_EXT = 0x80E4;
        #endregion GL_COLOR_INDEX4_EXT

        #region GL_COLOR_INDEX8_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COLOR_INDEX8_EXT 0x80E5
        public const int GL_COLOR_INDEX8_EXT = 0x80E5;
        #endregion GL_COLOR_INDEX8_EXT

        #region GL_COLOR_INDEX12_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COLOR_INDEX12_EXT 0x80E6
        public const int GL_COLOR_INDEX12_EXT = 0x80E6;
        #endregion GL_COLOR_INDEX12_EXT

        #region GL_COLOR_INDEX16_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COLOR_INDEX16_EXT 0x80E7
        public const int GL_COLOR_INDEX16_EXT = 0x80E7;
        #endregion GL_COLOR_INDEX16_EXT

        #region GL_COLOR_TABLE_FORMAT_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COLOR_TABLE_FORMAT_EXT 0x80D8
        public const int GL_COLOR_TABLE_FORMAT_EXT = 0x80D8;
        #endregion GL_COLOR_TABLE_FORMAT_EXT

        #region GL_COLOR_TABLE_WIDTH_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COLOR_TABLE_WIDTH_EXT 0x80D9
        public const int GL_COLOR_TABLE_WIDTH_EXT = 0x80D9;
        #endregion GL_COLOR_TABLE_WIDTH_EXT

        #region GL_COLOR_TABLE_RED_SIZE_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COLOR_TABLE_RED_SIZE_EXT 0x80DA
        public const int GL_COLOR_TABLE_RED_SIZE_EXT = 0x80DA;
        #endregion GL_COLOR_TABLE_RED_SIZE_EXT

        #region GL_COLOR_TABLE_GREEN_SIZE_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COLOR_TABLE_GREEN_SIZE_EXT 0x80DB
        public const int GL_COLOR_TABLE_GREEN_SIZE_EXT = 0x80DB;
        #endregion GL_COLOR_TABLE_GREEN_SIZE_EXT

        #region GL_COLOR_TABLE_BLUE_SIZE_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COLOR_TABLE_BLUE_SIZE_EXT 0x80DC
        public const int GL_COLOR_TABLE_BLUE_SIZE_EXT = 0x80DC;
        #endregion GL_COLOR_TABLE_BLUE_SIZE_EXT

        #region GL_COLOR_TABLE_ALPHA_SIZE_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COLOR_TABLE_ALPHA_SIZE_EXT 0x80DD
        public const int GL_COLOR_TABLE_ALPHA_SIZE_EXT = 0x80DD;
        #endregion GL_COLOR_TABLE_ALPHA_SIZE_EXT

        #region GL_COLOR_TABLE_LUMINANCE_SIZE_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COLOR_TABLE_LUMINANCE_SIZE_EXT 0x80DE
        public const int GL_COLOR_TABLE_LUMINANCE_SIZE_EXT = 0x80DE;
        #endregion GL_COLOR_TABLE_LUMINANCE_SIZE_EXT

        #region GL_COLOR_TABLE_INTENSITY_SIZE_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COLOR_TABLE_INTENSITY_SIZE_EXT 0x80DF
        public const int GL_COLOR_TABLE_INTENSITY_SIZE_EXT = 0x80DF;
        #endregion GL_COLOR_TABLE_INTENSITY_SIZE_EXT

        #region GL_TEXTURE_INDEX_SIZE_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_INDEX_SIZE_EXT 0x80ED
        public const int GL_TEXTURE_INDEX_SIZE_EXT = 0x80ED;
        #endregion GL_TEXTURE_INDEX_SIZE_EXT
        #endregion GL_EXT_paletted_texture Constants

        #region GL_EXT_paletted_texture Methods
        #region Overloads for GLvoid glColorTableEXT(GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, const GLvoid* data)
        #region void glColorTableEXT([In] IntPtr extensionPointer, int target, int internalFormat, int width, int format, int type, short[] data)
        // GLvoid glColorTableEXT(GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, const GLvoid* data)
        #if WIN32
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg internalFormat\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg internalFormat\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int16[])\r\nret")]
        #endif
        public static void glColorTableEXT([In] IntPtr extensionPointer, int target, int internalFormat, int width, int format, int type, short[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColorTableEXT([In] IntPtr extensionPointer, int target, int internalFormat, int width, int format, int type, short[] data)

        #region void glColorTableEXT([In] IntPtr extensionPointer, int target, int internalFormat, int width, int format, int type, float[] data)
        // GLvoid glColorTableEXT(GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, const GLvoid* data)
        #if WIN32
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg internalFormat\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg internalFormat\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]float32[])\r\nret")]
        #endif
        public static void glColorTableEXT([In] IntPtr extensionPointer, int target, int internalFormat, int width, int format, int type, float[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColorTableEXT([In] IntPtr extensionPointer, int target, int internalFormat, int width, int format, int type, float[] data)

        #region void glColorTableEXT([In] IntPtr extensionPointer, int target, int internalFormat, int width, int format, int type, int[] data)
        // GLvoid glColorTableEXT(GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, const GLvoid* data)
        #if WIN32
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg internalFormat\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg internalFormat\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32[])\r\nret")]
        #endif
        public static void glColorTableEXT([In] IntPtr extensionPointer, int target, int internalFormat, int width, int format, int type, int[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColorTableEXT([In] IntPtr extensionPointer, int target, int internalFormat, int width, int format, int type, int[] data)

        #region void glColorTableEXT([In] IntPtr extensionPointer, int target, int internalFormat, int width, int format, int type, IntPtr data)
        // GLvoid glColorTableEXT(GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, const GLvoid* data)
        #if WIN32
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg internalFormat\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg internalFormat\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]native int)\r\nret")]
        #endif
        public static void glColorTableEXT([In] IntPtr extensionPointer, int target, int internalFormat, int width, int format, int type, IntPtr data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColorTableEXT([In] IntPtr extensionPointer, int target, int internalFormat, int width, int format, int type, IntPtr data)

        #region void glColorTableEXT([In] IntPtr extensionPointer, int target, int internalFormat, int width, int format, int type, byte[] data)
        // GLvoid glColorTableEXT(GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, const GLvoid* data)
        #if WIN32
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg internalFormat\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int8[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg internalFormat\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int8[])\r\nret")]
        #endif
        public static void glColorTableEXT([In] IntPtr extensionPointer, int target, int internalFormat, int width, int format, int type, byte[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColorTableEXT([In] IntPtr extensionPointer, int target, int internalFormat, int width, int format, int type, byte[] data)

        #region void glColorTableEXT([In] IntPtr extensionPointer, int target, int internalFormat, int width, int format, int type, double[] data)
        // GLvoid glColorTableEXT(GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, const GLvoid* data)
        #if WIN32
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg internalFormat\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]float64[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg internalFormat\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]float64[])\r\nret")]
        #endif
        public static void glColorTableEXT([In] IntPtr extensionPointer, int target, int internalFormat, int width, int format, int type, double[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColorTableEXT([In] IntPtr extensionPointer, int target, int internalFormat, int width, int format, int type, double[] data)

        #region void glColorTableEXT([In] IntPtr extensionPointer, int target, int internalFormat, int width, int format, int type, uint[] data)
        // GLvoid glColorTableEXT(GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, const GLvoid* data)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg internalFormat\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int32[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg internalFormat\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int32[])\r\nret")]
        #endif
        public static void glColorTableEXT([In] IntPtr extensionPointer, int target, int internalFormat, int width, int format, int type, uint[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColorTableEXT([In] IntPtr extensionPointer, int target, int internalFormat, int width, int format, int type, uint[] data)

        #region void glColorTableEXT([In] IntPtr extensionPointer, int target, int internalFormat, int width, int format, int type, sbyte[] data)
        // GLvoid glColorTableEXT(GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, const GLvoid* data)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg internalFormat\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int8[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg internalFormat\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int8[])\r\nret")]
        #endif
        public static void glColorTableEXT([In] IntPtr extensionPointer, int target, int internalFormat, int width, int format, int type, sbyte[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColorTableEXT([In] IntPtr extensionPointer, int target, int internalFormat, int width, int format, int type, sbyte[] data)

        #region void glColorTableEXT([In] IntPtr extensionPointer, int target, int internalFormat, int width, int format, int type, ushort[] data)
        // GLvoid glColorTableEXT(GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, const GLvoid* data)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg internalFormat\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int16[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg internalFormat\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int16[])\r\nret")]
        #endif
        public static void glColorTableEXT([In] IntPtr extensionPointer, int target, int internalFormat, int width, int format, int type, ushort[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColorTableEXT([In] IntPtr extensionPointer, int target, int internalFormat, int width, int format, int type, ushort[] data)

        #region void glColorTableEXT([In] IntPtr extensionPointer, int target, int internalFormat, int width, int format, int type, void* data)
        // GLvoid glColorTableEXT(GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, const GLvoid* data)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg internalFormat\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]void*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg internalFormat\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]void*)\r\nret")]
        #endif
        public static unsafe void glColorTableEXT([In] IntPtr extensionPointer, int target, int internalFormat, int width, int format, int type, void* data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColorTableEXT([In] IntPtr extensionPointer, int target, int internalFormat, int width, int format, int type, void* data)
        #endregion Overloads for GLvoid glColorTableEXT(GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, const GLvoid* data)

        // glColorSubTableEXT is already defined in GL_EXT_color_subtable (74)

        #region Overloads for GLvoid glGetColorTableEXT(GLenum target, GLenum format, GLenum type, GLvoid* data)
        #region void glGetColorTableEXT([In] IntPtr extensionPointer, int target, int format, int type, short[] data)
        // GLvoid glGetColorTableEXT(GLenum target, GLenum format, GLenum type, GLvoid* data)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[out]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[out]int16[])\r\nret")]
        #endif
        public static void glGetColorTableEXT([In] IntPtr extensionPointer, int target, int format, int type, short[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetColorTableEXT([In] IntPtr extensionPointer, int target, int format, int type, short[] data)

        #region void glGetColorTableEXT([In] IntPtr extensionPointer, int target, int format, int type, float[] data)
        // GLvoid glGetColorTableEXT(GLenum target, GLenum format, GLenum type, GLvoid* data)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[out]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[out]float32[])\r\nret")]
        #endif
        public static void glGetColorTableEXT([In] IntPtr extensionPointer, int target, int format, int type, float[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetColorTableEXT([In] IntPtr extensionPointer, int target, int format, int type, float[] data)

        #region void glGetColorTableEXT([In] IntPtr extensionPointer, int target, int format, int type, int[] data)
        // GLvoid glGetColorTableEXT(GLenum target, GLenum format, GLenum type, GLvoid* data)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[out]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[out]int32[])\r\nret")]
        #endif
        public static void glGetColorTableEXT([In] IntPtr extensionPointer, int target, int format, int type, int[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetColorTableEXT([In] IntPtr extensionPointer, int target, int format, int type, int[] data)

        #region void glGetColorTableEXT([In] IntPtr extensionPointer, int target, int format, int type, IntPtr data)
        // GLvoid glGetColorTableEXT(GLenum target, GLenum format, GLenum type, GLvoid* data)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGetColorTableEXT([In] IntPtr extensionPointer, int target, int format, int type, IntPtr data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetColorTableEXT([In] IntPtr extensionPointer, int target, int format, int type, IntPtr data)

        #region void glGetColorTableEXT([In] IntPtr extensionPointer, int target, int format, int type, byte[] data)
        // GLvoid glGetColorTableEXT(GLenum target, GLenum format, GLenum type, GLvoid* data)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[out]unsigned int8[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[out]unsigned int8[])\r\nret")]
        #endif
        public static void glGetColorTableEXT([In] IntPtr extensionPointer, int target, int format, int type, byte[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetColorTableEXT([In] IntPtr extensionPointer, int target, int format, int type, byte[] data)

        #region void glGetColorTableEXT([In] IntPtr extensionPointer, int target, int format, int type, double[] data)
        // GLvoid glGetColorTableEXT(GLenum target, GLenum format, GLenum type, GLvoid* data)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[out]float64[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[out]float64[])\r\nret")]
        #endif
        public static void glGetColorTableEXT([In] IntPtr extensionPointer, int target, int format, int type, double[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetColorTableEXT([In] IntPtr extensionPointer, int target, int format, int type, double[] data)

        #region void glGetColorTableEXT([In] IntPtr extensionPointer, int target, int format, int type, uint[] data)
        // GLvoid glGetColorTableEXT(GLenum target, GLenum format, GLenum type, GLvoid* data)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[out]unsigned int32[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[out]unsigned int32[])\r\nret")]
        #endif
        public static void glGetColorTableEXT([In] IntPtr extensionPointer, int target, int format, int type, uint[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetColorTableEXT([In] IntPtr extensionPointer, int target, int format, int type, uint[] data)

        #region void glGetColorTableEXT([In] IntPtr extensionPointer, int target, int format, int type, sbyte[] data)
        // GLvoid glGetColorTableEXT(GLenum target, GLenum format, GLenum type, GLvoid* data)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[out]int8[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[out]int8[])\r\nret")]
        #endif
        public static void glGetColorTableEXT([In] IntPtr extensionPointer, int target, int format, int type, sbyte[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetColorTableEXT([In] IntPtr extensionPointer, int target, int format, int type, sbyte[] data)

        #region void glGetColorTableEXT([In] IntPtr extensionPointer, int target, int format, int type, ushort[] data)
        // GLvoid glGetColorTableEXT(GLenum target, GLenum format, GLenum type, GLvoid* data)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[out]unsigned int16[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[out]unsigned int16[])\r\nret")]
        #endif
        public static void glGetColorTableEXT([In] IntPtr extensionPointer, int target, int format, int type, ushort[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetColorTableEXT([In] IntPtr extensionPointer, int target, int format, int type, ushort[] data)

        #region void glGetColorTableEXT([In] IntPtr extensionPointer, int target, int format, int type, void* data)
        // GLvoid glGetColorTableEXT(GLenum target, GLenum format, GLenum type, GLvoid* data)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[out]void*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[out]void*)\r\nret")]
        #endif
        public static unsafe void glGetColorTableEXT([In] IntPtr extensionPointer, int target, int format, int type, void* data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetColorTableEXT([In] IntPtr extensionPointer, int target, int format, int type, void* data)
        #endregion Overloads for GLvoid glGetColorTableEXT(GLenum target, GLenum format, GLenum type, GLvoid* data)

        #region Overloads for GLvoid glGetColorTableParameterivEXT(GLenum target, GLenum pname, GLint* parameters)
        #region void glGetColorTableParameterivEXT([In] IntPtr extensionPointer, int target, int pname, out int parameters)
        // GLvoid glGetColorTableParameterivEXT(GLenum target, GLenum pname, GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]int32)\r\nret")]
        #endif
        public static void glGetColorTableParameterivEXT([In] IntPtr extensionPointer, int target, int pname, out int parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetColorTableParameterivEXT([In] IntPtr extensionPointer, int target, int pname, out int parameters)

        #region void glGetColorTableParameterivEXT([In] IntPtr extensionPointer, int target, int pname, int[] parameters)
        // GLvoid glGetColorTableParameterivEXT(GLenum target, GLenum pname, GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]int32[])\r\nret")]
        #endif
        public static void glGetColorTableParameterivEXT([In] IntPtr extensionPointer, int target, int pname, int[] parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetColorTableParameterivEXT([In] IntPtr extensionPointer, int target, int pname, int[] parameters)

        #region void glGetColorTableParameterivEXT([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters)
        // GLvoid glGetColorTableParameterivEXT(GLenum target, GLenum pname, GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGetColorTableParameterivEXT([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetColorTableParameterivEXT([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters)

        #region void glGetColorTableParameterivEXT([In] IntPtr extensionPointer, int target, int pname, int* parameters)
        // GLvoid glGetColorTableParameterivEXT(GLenum target, GLenum pname, GLint* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]int32*)\r\nret")]
        #endif
        public static unsafe void glGetColorTableParameterivEXT([In] IntPtr extensionPointer, int target, int pname, int* parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetColorTableParameterivEXT([In] IntPtr extensionPointer, int target, int pname, int* parameters)
        #endregion Overloads for GLvoid glGetColorTableParameterivEXT(GLenum target, GLenum pname, GLint* parameters)

        #region Overloads for GLvoid glGetColorTableParameterfvEXT(GLenum target, GLenum pname, GLfloat* parameters)
        #region void glGetColorTableParameterfvEXT([In] IntPtr extensionPointer, int target, int pname, out float parameters)
        // GLvoid glGetColorTableParameterfvEXT(GLenum target, GLenum pname, GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]float32)\r\nret")]
        #endif
        public static void glGetColorTableParameterfvEXT([In] IntPtr extensionPointer, int target, int pname, out float parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetColorTableParameterfvEXT([In] IntPtr extensionPointer, int target, int pname, out float parameters)

        #region void glGetColorTableParameterfvEXT([In] IntPtr extensionPointer, int target, int pname, float[] parameters)
        // GLvoid glGetColorTableParameterfvEXT(GLenum target, GLenum pname, GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]float32[])\r\nret")]
        #endif
        public static void glGetColorTableParameterfvEXT([In] IntPtr extensionPointer, int target, int pname, float[] parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetColorTableParameterfvEXT([In] IntPtr extensionPointer, int target, int pname, float[] parameters)

        #region void glGetColorTableParameterfvEXT([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters)
        // GLvoid glGetColorTableParameterfvEXT(GLenum target, GLenum pname, GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGetColorTableParameterfvEXT([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetColorTableParameterfvEXT([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters)

        #region void glGetColorTableParameterfvEXT([In] IntPtr extensionPointer, int target, int pname, float* parameters)
        // GLvoid glGetColorTableParameterfvEXT(GLenum target, GLenum pname, GLfloat* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]float32*)\r\nret")]
        #endif
        public static unsafe void glGetColorTableParameterfvEXT([In] IntPtr extensionPointer, int target, int pname, float* parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetColorTableParameterfvEXT([In] IntPtr extensionPointer, int target, int pname, float* parameters)
        #endregion Overloads for GLvoid glGetColorTableParameterfvEXT(GLenum target, GLenum pname, GLfloat* parameters)
        #endregion GL_EXT_paletted_texture Methods
        #endregion GL_EXT_paletted_texture (78)

        #region GL_EXT_clip_volume_hint (79)
        #region GL_EXT_clip_volume_hint Constants
        #region GL_CLIP_VOLUME_CLIPPING_HINT_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_CLIP_VOLUME_CLIPPING_HINT_EXT 0x80F0
        public const int GL_CLIP_VOLUME_CLIPPING_HINT_EXT = 0x80F0;
        #endregion GL_CLIP_VOLUME_CLIPPING_HINT_EXT
        #endregion GL_EXT_clip_volume_hint Constants
        #endregion GL_EXT_clip_volume_hint (79)

        #region GL_EXT_light_texture (117)
        #region GL_EXT_light_texture Constants
        #region GL_FRAGMENT_MATERIAL_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_FRAGMENT_MATERIAL_EXT 0x8349
        public const int GL_FRAGMENT_MATERIAL_EXT = 0x8349;
        #endregion GL_FRAGMENT_MATERIAL_EXT

        #region GL_FRAGMENT_NORMAL_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_FRAGMENT_NORMAL_EXT 0x834A
        public const int GL_FRAGMENT_NORMAL_EXT = 0x834A;
        #endregion GL_FRAGMENT_NORMAL_EXT

        #region GL_FRAGMENT_DEPTH_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_FRAGMENT_DEPTH_EXT 0x8452
        public const int GL_FRAGMENT_DEPTH_EXT = 0x8452;
        #endregion GL_FRAGMENT_DEPTH_EXT

        #region GL_FRAGMENT_COLOR_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_FRAGMENT_COLOR_EXT 0x834C
        public const int GL_FRAGMENT_COLOR_EXT = 0x834C;
        #endregion GL_FRAGMENT_COLOR_EXT

        #region GL_ATTENUATION_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_ATTENUATION_EXT 0x834D
        public const int GL_ATTENUATION_EXT = 0x834D;
        #endregion GL_ATTENUATION_EXT

        #region GL_SHADOW_ATTENUATION_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SHADOW_ATTENUATION_EXT 0x834E
        public const int GL_SHADOW_ATTENUATION_EXT = 0x834E;
        #endregion GL_SHADOW_ATTENUATION_EXT

        #region GL_TEXTURE_APPLICATION_MODE_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_APPLICATION_MODE_EXT 0x834F
        public const int GL_TEXTURE_APPLICATION_MODE_EXT = 0x834F;
        #endregion GL_TEXTURE_APPLICATION_MODE_EXT

        #region GL_TEXTURE_LIGHT_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_LIGHT_EXT 0x8350
        public const int GL_TEXTURE_LIGHT_EXT = 0x8350;
        #endregion GL_TEXTURE_LIGHT_EXT

        #region GL_TEXTURE_MATERIAL_FACE_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_MATERIAL_FACE_EXT 0x8351
        /// <summary>
        /// 
        /// </summary>
        public const int GL_TEXTURE_MATERIAL_FACE_EXT = 0x8351;
        #endregion GL_TEXTURE_MATERIAL_FACE_EXT

        #region GL_TEXTURE_MATERIAL_PARAMETER_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_MATERIAL_PARAMETER_EXT 0x8352
        public const int GL_TEXTURE_MATERIAL_PARAMETER_EXT = 0x8352;
        #endregion GL_TEXTURE_MATERIAL_PARAMETER_EXT
        #endregion GL_EXT_light_texture Constants

        #region GL_EXT_light_texture Methods
        #region void glApplyTextureEXT([In] IntPtr extensionPointer, int mode)
        // GLvoid glApplyTextureEXT(GLenum mode)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg mode\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg mode\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32)\r\nret")]
        #endif
        public static void glApplyTextureEXT([In] IntPtr extensionPointer, int mode) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glApplyTextureEXT([In] IntPtr extensionPointer, int mode)

        #region void glTextureLightEXT([In] IntPtr extensionPointer, int pname)
        // GLvoid glTextureLightEXT(GLenum pname)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg pname\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg pname\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32)\r\nret")]
        #endif
        public static void glTextureLightEXT([In] IntPtr extensionPointer, int pname) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTextureLightEXT([In] IntPtr extensionPointer, int pname)

        #region void glTextureMaterialEXT([In] IntPtr extensionPointer, int face, int mode)
        // GLvoid glTextureMaterialEXT(GLenum face, GLenum mode)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg face\r\nldarg mode\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg face\r\nldarg mode\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32)\r\nret")]
        #endif
        public static void glTextureMaterialEXT([In] IntPtr extensionPointer, int face, int mode) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTextureMaterialEXT([In] IntPtr extensionPointer, int face, int mode)
        #endregion GL_EXT_light_texture Methods
        #endregion GL_EXT_light_texture (117)

        #region GL_EXT_bgra (129)
        #region GL_EXT_bgra Constants
        #region GL_BGR_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_BGR_EXT 0x80E0
        public const int GL_BGR_EXT = 0x80E0;
        #endregion GL_BGR_EXT

        #region GL_BGRA_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_BGRA_EXT 0x80E1
        public const int GL_BGRA_EXT = 0x80E1;
        #endregion GL_BGRA_EXT
        #endregion GL_EXT_bgra Constants
        #endregion GL_EXT_bgra (129)

        #region GL_EXT_pixel_transform (138)
        #region GL_EXT_pixel_transform Constants
        #region GL_PIXEL_MAG_FILTER_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PIXEL_MAG_FILTER_EXT 0x8331
        public const int GL_PIXEL_MAG_FILTER_EXT = 0x8331;
        #endregion GL_PIXEL_MAG_FILTER_EXT

        #region GL_PIXEL_MIN_FILTER_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PIXEL_MIN_FILTER_EXT 0x8332
        public const int GL_PIXEL_MIN_FILTER_EXT = 0x8332;
        #endregion GL_PIXEL_MIN_FILTER_EXT

        #region GL_PIXEL_CUBIC_WEIGHT_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PIXEL_CUBIC_WEIGHT_EXT 0x8333
        public const int GL_PIXEL_CUBIC_WEIGHT_EXT = 0x8333;
        #endregion GL_PIXEL_CUBIC_WEIGHT_EXT

        #region GL_CUBIC_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_CUBIC_EXT 0x8334
        public const int GL_CUBIC_EXT = 0x8334;
        #endregion GL_CUBIC_EXT

        #region GL_AVERAGE_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_AVERAGE_EXT 0x8335
        public const int GL_AVERAGE_EXT = 0x8335;
        #endregion GL_AVERAGE_EXT

        #region GL_PIXEL_TRANSFORM_2D_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PIXEL_TRANSFORM_2D_EXT 0x8330
        public const int GL_PIXEL_TRANSFORM_2D_EXT = 0x8330;
        #endregion GL_PIXEL_TRANSFORM_2D_EXT

        #region GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT 0x8336
        public const int GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT = 0x8336;
        #endregion GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT

        #region GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT 0x8337
        public const int GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT = 0x8337;
        #endregion GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT

        #region GL_PIXEL_TRANSFORM_2D_MATRIX_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PIXEL_TRANSFORM_2D_MATRIX_EXT 0x8338
        public const int GL_PIXEL_TRANSFORM_2D_MATRIX_EXT = 0x8338;
        #endregion GL_PIXEL_TRANSFORM_2D_MATRIX_EXT
        #endregion GL_EXT_pixel_transform Constants

        #region GL_EXT_pixel_transform Methods
        #region void glPixelTransformParameteriEXT([In] IntPtr extensionPointer, int target, int pname, int parameter)
        // GLvoid glPixelTransformParameteriEXT(GLenum target, GLenum pname, const GLint parameter)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameter\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameter\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32)\r\nret")]
        #endif
        public static void glPixelTransformParameteriEXT([In] IntPtr extensionPointer, int target, int pname, int parameter) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glPixelTransformParameteriEXT([In] IntPtr extensionPointer, int target, int pname, int parameter)

        #region void glPixelTransformParameterfEXT([In] IntPtr extensionPointer, int target, int pname, float parameter)
        // GLvoid glPixelTransformParameterfEXT(GLenum target, GLenum pname, const GLfloat parameter)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameter\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameter\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]float32)\r\nret")]
        #endif
        public static void glPixelTransformParameterfEXT([In] IntPtr extensionPointer, int target, int pname, float parameter) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glPixelTransformParameterfEXT([In] IntPtr extensionPointer, int target, int pname, float parameter)

        #region Overloads for GLvoid glPixelTransformParameterivEXT(GLenum target, GLenum pname, const GLint* parameters)
        #region void glPixelTransformParameterivEXT([In] IntPtr extensionPointer, int target, int pname, ref int parameters)
        // GLvoid glPixelTransformParameterivEXT(GLenum target, GLenum pname, const GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in][out]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in][out]int32)\r\nret")]
        #endif
        public static void glPixelTransformParameterivEXT([In] IntPtr extensionPointer, int target, int pname, ref int parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glPixelTransformParameterivEXT([In] IntPtr extensionPointer, int target, int pname, ref int parameters)

        #region void glPixelTransformParameterivEXT([In] IntPtr extensionPointer, int target, int pname, int[] parameters)
        // GLvoid glPixelTransformParameterivEXT(GLenum target, GLenum pname, const GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32[])\r\nret")]
        #endif
        public static void glPixelTransformParameterivEXT([In] IntPtr extensionPointer, int target, int pname, int[] parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glPixelTransformParameterivEXT([In] IntPtr extensionPointer, int target, int pname, int[] parameters)

        #region void glPixelTransformParameterivEXT([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters)
        // GLvoid glPixelTransformParameterivEXT(GLenum target, GLenum pname, const GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]native int)\r\nret")]
        #endif
        public static void glPixelTransformParameterivEXT([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glPixelTransformParameterivEXT([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters)

        #region void glPixelTransformParameterivEXT([In] IntPtr extensionPointer, int target, int pname, int* parameters)
        // GLvoid glPixelTransformParameterivEXT(GLenum target, GLenum pname, const GLint* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32*)\r\nret")]
        #endif
        public static unsafe void glPixelTransformParameterivEXT([In] IntPtr extensionPointer, int target, int pname, int* parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glPixelTransformParameterivEXT([In] IntPtr extensionPointer, int target, int pname, int* parameters)
        #endregion Overloads for GLvoid glPixelTransformParameterivEXT(GLenum target, GLenum pname, const GLint* parameters)

        #region Overloads for GLvoid glPixelTransformParameterfvEXT(GLenum target, GLenum pname, const GLfloat* parameters)
        #region void glPixelTransformParameterfvEXT([In] IntPtr extensionPointer, int target, int pname, ref float parameters)
        // GLvoid glPixelTransformParameterfvEXT(GLenum target, GLenum pname, const GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in][out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in][out]float32)\r\nret")]
        #endif
        public static void glPixelTransformParameterfvEXT([In] IntPtr extensionPointer, int target, int pname, ref float parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glPixelTransformParameterfvEXT([In] IntPtr extensionPointer, int target, int pname, ref float parameters)

        #region void glPixelTransformParameterfvEXT([In] IntPtr extensionPointer, int target, int pname, float[] parameters)
        // GLvoid glPixelTransformParameterfvEXT(GLenum target, GLenum pname, const GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]float32[])\r\nret")]
        #endif
        public static void glPixelTransformParameterfvEXT([In] IntPtr extensionPointer, int target, int pname, float[] parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glPixelTransformParameterfvEXT([In] IntPtr extensionPointer, int target, int pname, float[] parameters)

        #region void glPixelTransformParameterfvEXT([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters)
        // GLvoid glPixelTransformParameterfvEXT(GLenum target, GLenum pname, const GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]native int)\r\nret")]
        #endif
        public static void glPixelTransformParameterfvEXT([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glPixelTransformParameterfvEXT([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters)

        #region void glPixelTransformParameterfvEXT([In] IntPtr extensionPointer, int target, int pname, float* parameters)
        // GLvoid glPixelTransformParameterfvEXT(GLenum target, GLenum pname, const GLfloat* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]float32*)\r\nret")]
        #endif
        public static unsafe void glPixelTransformParameterfvEXT([In] IntPtr extensionPointer, int target, int pname, float* parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glPixelTransformParameterfvEXT([In] IntPtr extensionPointer, int target, int pname, float* parameters)
        #endregion Overloads for GLvoid glPixelTransformParameterfvEXT(GLenum target, GLenum pname, const GLfloat* parameters)

        #region Overloads for GLvoid glGetPixelTransformParameterivEXT(GLenum target, GLenum pname, GLint* parameters)
        #region void glGetPixelTransformParameterivEXT([In] IntPtr extensionPointer, int target, int pname, out int parameters)
        // GLvoid glGetPixelTransformParameterivEXT(GLenum target, GLenum pname, GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]int32)\r\nret")]
        #endif
        public static void glGetPixelTransformParameterivEXT([In] IntPtr extensionPointer, int target, int pname, out int parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetPixelTransformParameterivEXT([In] IntPtr extensionPointer, int target, int pname, out int parameters)

        #region void glGetPixelTransformParameterivEXT([In] IntPtr extensionPointer, int target, int pname, int[] parameters)
        // GLvoid glGetPixelTransformParameterivEXT(GLenum target, GLenum pname, GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]int32[])\r\nret")]
        #endif
        public static void glGetPixelTransformParameterivEXT([In] IntPtr extensionPointer, int target, int pname, int[] parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetPixelTransformParameterivEXT([In] IntPtr extensionPointer, int target, int pname, int[] parameters)

        #region void glGetPixelTransformParameterivEXT([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters)
        // GLvoid glGetPixelTransformParameterivEXT(GLenum target, GLenum pname, GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGetPixelTransformParameterivEXT([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetPixelTransformParameterivEXT([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters)

        #region void glGetPixelTransformParameterivEXT([In] IntPtr extensionPointer, int target, int pname, int* parameters)
        // GLvoid glGetPixelTransformParameterivEXT(GLenum target, GLenum pname, GLint* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]int32*)\r\nret")]
        #endif
        public static unsafe void glGetPixelTransformParameterivEXT([In] IntPtr extensionPointer, int target, int pname, int* parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetPixelTransformParameterivEXT([In] IntPtr extensionPointer, int target, int pname, int* parameters)
        #endregion Overloads for GLvoid glGetPixelTransformParameterivEXT(GLenum target, GLenum pname, GLint* parameters)

        #region Overloads for GLvoid glGetPixelTransformParameterfvEXT(GLenum target, GLenum pname, GLfloat* parameters)
        #region void glGetPixelTransformParameterfvEXT([In] IntPtr extensionPointer, int target, int pname, out float parameters)
        // GLvoid glGetPixelTransformParameterfvEXT(GLenum target, GLenum pname, GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]float32)\r\nret")]
        #endif
        public static void glGetPixelTransformParameterfvEXT([In] IntPtr extensionPointer, int target, int pname, out float parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetPixelTransformParameterfvEXT([In] IntPtr extensionPointer, int target, int pname, out float parameters)

        #region void glGetPixelTransformParameterfvEXT([In] IntPtr extensionPointer, int target, int pname, float[] parameters)
        // GLvoid glGetPixelTransformParameterfvEXT(GLenum target, GLenum pname, GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]float32[])\r\nret")]
        #endif
        public static void glGetPixelTransformParameterfvEXT([In] IntPtr extensionPointer, int target, int pname, float[] parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetPixelTransformParameterfvEXT([In] IntPtr extensionPointer, int target, int pname, float[] parameters)

        #region void glGetPixelTransformParameterfvEXT([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters)
        // GLvoid glGetPixelTransformParameterfvEXT(GLenum target, GLenum pname, GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGetPixelTransformParameterfvEXT([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetPixelTransformParameterfvEXT([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters)

        #region void glGetPixelTransformParameterfvEXT([In] IntPtr extensionPointer, int target, int pname, float* parameters)
        // GLvoid glGetPixelTransformParameterfvEXT(GLenum target, GLenum pname, GLfloat* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]float32*)\r\nret")]
        #endif
        public static unsafe void glGetPixelTransformParameterfvEXT([In] IntPtr extensionPointer, int target, int pname, float* parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetPixelTransformParameterfvEXT([In] IntPtr extensionPointer, int target, int pname, float* parameters)
        #endregion Overloads for GLvoid glGetPixelTransformParameterfvEXT(GLenum target, GLenum pname, GLfloat* parameters)
        #endregion GL_EXT_pixel_transform Methods
        #endregion GL_EXT_pixel_transform (138)

        #region GL_EXT_shared_texture_palette (141)
        #region GL_EXT_shared_texture_palette Constants
        #region GL_SHARED_TEXTURE_PALETTE_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SHARED_TEXTURE_PALETTE_EXT 0x81FB
        public const int GL_SHARED_TEXTURE_PALETTE_EXT = 0x81FB;
        #endregion GL_SHARED_TEXTURE_PALETTE_EXT
        #endregion GL_EXT_shared_texture_palette Constants
        #endregion GL_EXT_shared_texture_palette (141)

        #region GL_EXT_separate_specular_color (144)
        #region GL_EXT_separate_specular_color Constants
        #region GL_LIGHT_MODEL_COLOR_CONTROL_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_LIGHT_MODEL_COLOR_CONTROL_EXT 0x81F8
        public const int GL_LIGHT_MODEL_COLOR_CONTROL_EXT = 0x81F8;
        #endregion GL_LIGHT_MODEL_COLOR_CONTROL_EXT

        #region GL_SINGLE_COLOR_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SINGLE_COLOR_EXT 0x81F9
        public const int GL_SINGLE_COLOR_EXT = 0x81F9;
        #endregion GL_SINGLE_COLOR_EXT

        #region GL_SEPARATE_SPECULAR_COLOR_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SEPARATE_SPECULAR_COLOR_EXT 0x81FA
        public const int GL_SEPARATE_SPECULAR_COLOR_EXT = 0x81FA;
        #endregion GL_SEPARATE_SPECULAR_COLOR_EXT
        #endregion GL_EXT_separate_specular_color Constants
        #endregion GL_EXT_separate_specular_color (144)

        #region GL_EXT_secondary_color (145)
        #region GL_EXT_secondary_color Constants
        #region GL_COLOR_SUM_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COLOR_SUM_EXT 0x8458
        public const int GL_COLOR_SUM_EXT = 0x8458;
        #endregion GL_COLOR_SUM_EXT

        #region GL_CURRENT_SECONDARY_COLOR_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_CURRENT_SECONDARY_COLOR_EXT 0x8459
        public const int GL_CURRENT_SECONDARY_COLOR_EXT = 0x8459;
        #endregion GL_CURRENT_SECONDARY_COLOR_EXT

        #region GL_SECONDARY_COLOR_ARRAY_SIZE_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SECONDARY_COLOR_ARRAY_SIZE_EXT 0x845A
        public const int GL_SECONDARY_COLOR_ARRAY_SIZE_EXT = 0x845A;
        #endregion GL_SECONDARY_COLOR_ARRAY_SIZE_EXT

        #region GL_SECONDARY_COLOR_ARRAY_TYPE_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SECONDARY_COLOR_ARRAY_TYPE_EXT 0x845B
        public const int GL_SECONDARY_COLOR_ARRAY_TYPE_EXT = 0x845B;
        #endregion GL_SECONDARY_COLOR_ARRAY_TYPE_EXT

        #region GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT 0x845C
        public const int GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT = 0x845C;
        #endregion GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT

        #region GL_SECONDARY_COLOR_ARRAY_POINTER_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SECONDARY_COLOR_ARRAY_POINTER_EXT 0x845D
        public const int GL_SECONDARY_COLOR_ARRAY_POINTER_EXT = 0x845D;
        #endregion GL_SECONDARY_COLOR_ARRAY_POINTER_EXT

        #region GL_SECONDARY_COLOR_ARRAY_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SECONDARY_COLOR_ARRAY_EXT 0x845E
        public const int GL_SECONDARY_COLOR_ARRAY_EXT = 0x845E;
        #endregion GL_SECONDARY_COLOR_ARRAY_EXT
        #endregion GL_EXT_secondary_color Constants

        #region GL_EXT_secondary_color Methods
        #region Overloads for GLvoid glSecondaryColor3bEXT(GLbyte r, GLbyte g, GLbyte b)
        #region void glSecondaryColor3bEXT([In] IntPtr extensionPointer, byte r, byte g, byte b)
        // GLvoid glSecondaryColor3bEXT(GLbyte r, GLbyte g, GLbyte b)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg r\r\nldarg g\r\nldarg b\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int8,[in]unsigned int8,[in]unsigned int8)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg r\r\nldarg g\r\nldarg b\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int8,[in]unsigned int8,[in]unsigned int8)\r\nret")]
        #endif
        public static void glSecondaryColor3bEXT([In] IntPtr extensionPointer, byte r, byte g, byte b) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSecondaryColor3bEXT([In] IntPtr extensionPointer, byte r, byte g, byte b)

        #region void glSecondaryColor3bEXT([In] IntPtr extensionPointer, sbyte r, sbyte g, sbyte b)
        // GLvoid glSecondaryColor3bEXT(GLbyte r, GLbyte g, GLbyte b)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg r\r\nldarg g\r\nldarg b\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int8,[in]int8,[in]int8)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg r\r\nldarg g\r\nldarg b\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int8,[in]int8,[in]int8)\r\nret")]
        #endif
        public static void glSecondaryColor3bEXT([In] IntPtr extensionPointer, sbyte r, sbyte g, sbyte b) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSecondaryColor3bEXT([In] IntPtr extensionPointer, sbyte r, sbyte g, sbyte b)
        #endregion Overloads for GLvoid glSecondaryColor3bEXT(GLbyte r, GLbyte g, GLbyte b)

        #region void glSecondaryColor3sEXT([In] IntPtr extensionPointer, short r, short g, short b)
        // GLvoid glSecondaryColor3sEXT(GLshort r, GLshort g, GLshort b)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg r\r\nldarg g\r\nldarg b\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int16,[in]int16,[in]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg r\r\nldarg g\r\nldarg b\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int16,[in]int16,[in]int16)\r\nret")]
        #endif
        public static void glSecondaryColor3sEXT([In] IntPtr extensionPointer, short r, short g, short b) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSecondaryColor3sEXT([In] IntPtr extensionPointer, short r, short g, short b)

        #region void glSecondaryColor3iEXT([In] IntPtr extensionPointer, int r, int g, int b)
        // GLvoid glSecondaryColor3iEXT(GLint r, GLint g, GLint b)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg r\r\nldarg g\r\nldarg b\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg r\r\nldarg g\r\nldarg b\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32)\r\nret")]
        #endif
        public static void glSecondaryColor3iEXT([In] IntPtr extensionPointer, int r, int g, int b) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSecondaryColor3iEXT([In] IntPtr extensionPointer, int r, int g, int b)

        #region void glSecondaryColor3fEXT([In] IntPtr extensionPointer, float r, float g, float b)
        // GLvoid glSecondaryColor3fEXT(GLfloat r, GLfloat g, GLfloat b)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg r\r\nldarg g\r\nldarg b\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]float32,[in]float32,[in]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg r\r\nldarg g\r\nldarg b\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]float32,[in]float32,[in]float32)\r\nret")]
        #endif
        public static void glSecondaryColor3fEXT([In] IntPtr extensionPointer, float r, float g, float b) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSecondaryColor3fEXT([In] IntPtr extensionPointer, float r, float g, float b)

        #region void glSecondaryColor3dEXT([In] IntPtr extensionPointer, double r, double g, double b)
        // GLvoid glSecondaryColor3dEXT(GLdouble r, GLdouble g, GLdouble b)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg r\r\nldarg g\r\nldarg b\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]float64,[in]float64,[in]float64)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg r\r\nldarg g\r\nldarg b\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]float64,[in]float64,[in]float64)\r\nret")]
        #endif
        public static void glSecondaryColor3dEXT([In] IntPtr extensionPointer, double r, double g, double b) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSecondaryColor3dEXT([In] IntPtr extensionPointer, double r, double g, double b)

        #region void glSecondaryColor3ubEXT([In] IntPtr extensionPointer, byte r, byte g, byte b)
        // GLvoid glSecondaryColor3ubEXT(GLubyte r, GLubyte g, GLubyte b)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg r\r\nldarg g\r\nldarg b\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int8,[in]unsigned int8,[in]unsigned int8)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg r\r\nldarg g\r\nldarg b\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int8,[in]unsigned int8,[in]unsigned int8)\r\nret")]
        #endif
        public static void glSecondaryColor3ubEXT([In] IntPtr extensionPointer, byte r, byte g, byte b) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSecondaryColor3ubEXT([In] IntPtr extensionPointer, byte r, byte g, byte b)

        #region Overloads for GLvoid glSecondaryColor3usEXT(GLushort r, GLushort g, GLushort b)
        #region void glSecondaryColor3usEXT([In] IntPtr extensionPointer, short r, short g, short b)
        // GLvoid glSecondaryColor3usEXT(GLushort r, GLushort g, GLushort b)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg r\r\nldarg g\r\nldarg b\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int16,[in]int16,[in]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg r\r\nldarg g\r\nldarg b\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int16,[in]int16,[in]int16)\r\nret")]
        #endif
        public static void glSecondaryColor3usEXT([In] IntPtr extensionPointer, short r, short g, short b) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSecondaryColor3usEXT([In] IntPtr extensionPointer, short r, short g, short b)

        #region void glSecondaryColor3usEXT([In] IntPtr extensionPointer, ushort r, ushort g, ushort b)
        // GLvoid glSecondaryColor3usEXT(GLushort r, GLushort g, GLushort b)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg r\r\nldarg g\r\nldarg b\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int16,[in]unsigned int16,[in]unsigned int16)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg r\r\nldarg g\r\nldarg b\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int16,[in]unsigned int16,[in]unsigned int16)\r\nret")]
        #endif
        public static void glSecondaryColor3usEXT([In] IntPtr extensionPointer, ushort r, ushort g, ushort b) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSecondaryColor3usEXT([In] IntPtr extensionPointer, ushort r, ushort g, ushort b)
        #endregion Overloads for GLvoid glSecondaryColor3usEXT(GLushort r, GLushort g, GLushort b)

        #region Overloads for GLvoid glSecondaryColor3uiEXT(GLuint r, GLuint g, GLuint b)
        #region void glSecondaryColor3uiEXT([In] IntPtr extensionPointer, int r, int g, int b)
        // GLvoid glSecondaryColor3uiEXT(GLuint r, GLuint g, GLuint b)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg r\r\nldarg g\r\nldarg b\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg r\r\nldarg g\r\nldarg b\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32)\r\nret")]
        #endif
        public static void glSecondaryColor3uiEXT([In] IntPtr extensionPointer, int r, int g, int b) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSecondaryColor3uiEXT([In] IntPtr extensionPointer, int r, int g, int b)

        #region void glSecondaryColor3uiEXT([In] IntPtr extensionPointer, uint r, uint g, uint b)
        // GLvoid glSecondaryColor3uiEXT(GLuint r, GLuint g, GLuint b)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg r\r\nldarg g\r\nldarg b\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int32,[in]unsigned int32,[in]unsigned int32)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg r\r\nldarg g\r\nldarg b\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int32,[in]unsigned int32,[in]unsigned int32)\r\nret")]
        #endif
        public static void glSecondaryColor3uiEXT([In] IntPtr extensionPointer, uint r, uint g, uint b) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSecondaryColor3uiEXT([In] IntPtr extensionPointer, uint r, uint g, uint b)
        #endregion Overloads for GLvoid glSecondaryColor3uiEXT(GLuint r, GLuint g, GLuint b)

        #region Overloads for GLvoid glSecondaryColor3bvEXT(GLbyte* components)
        #region void glSecondaryColor3bvEXT([In] IntPtr extensionPointer, byte[] components)
        // GLvoid glSecondaryColor3bvEXT(GLbyte* components)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg components\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int8[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg components\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int8[])\r\nret")]
        #endif
        public static void glSecondaryColor3bvEXT([In] IntPtr extensionPointer, byte[] components) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSecondaryColor3bvEXT([In] IntPtr extensionPointer, byte[] components)

        #region void glSecondaryColor3bvEXT([In] IntPtr extensionPointer, ref byte components)
        // GLvoid glSecondaryColor3bvEXT(GLbyte* components)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg components\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]unsigned int8)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg components\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]unsigned int8)\r\nret")]
        #endif
        public static void glSecondaryColor3bvEXT([In] IntPtr extensionPointer, ref byte components) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSecondaryColor3bvEXT([In] IntPtr extensionPointer, ref byte components)

        #region void glSecondaryColor3bvEXT([In] IntPtr extensionPointer, IntPtr components)
        // GLvoid glSecondaryColor3bvEXT(GLbyte* components)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg components\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg components\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int)\r\nret")]
        #endif
        public static void glSecondaryColor3bvEXT([In] IntPtr extensionPointer, IntPtr components) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSecondaryColor3bvEXT([In] IntPtr extensionPointer, IntPtr components)

        #region void glSecondaryColor3bvEXT([In] IntPtr extensionPointer, ref sbyte components)
        // GLvoid glSecondaryColor3bvEXT(GLbyte* components)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg components\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]int8)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg components\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]int8)\r\nret")]
        #endif
        public static void glSecondaryColor3bvEXT([In] IntPtr extensionPointer, ref sbyte components) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSecondaryColor3bvEXT([In] IntPtr extensionPointer, ref sbyte components)

        #region void glSecondaryColor3bvEXT([In] IntPtr extensionPointer, sbyte[] components)
        // GLvoid glSecondaryColor3bvEXT(GLbyte* components)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg components\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int8[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg components\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int8[])\r\nret")]
        #endif
        public static void glSecondaryColor3bvEXT([In] IntPtr extensionPointer, sbyte[] components) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSecondaryColor3bvEXT([In] IntPtr extensionPointer, sbyte[] components)

        #region void glSecondaryColor3bvEXT([In] IntPtr extensionPointer, sbyte* components)
        // GLvoid glSecondaryColor3bvEXT(GLbyte* components)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg components\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int8*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg components\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int8*)\r\nret")]
        #endif
        public static unsafe void glSecondaryColor3bvEXT([In] IntPtr extensionPointer, sbyte* components) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSecondaryColor3bvEXT([In] IntPtr extensionPointer, sbyte* components)
        #endregion Overloads for GLvoid glSecondaryColor3bvEXT(GLbyte* components)

        #region Overloads for GLvoid glSecondaryColor3svEXT(GLshort* components)
        #region void glSecondaryColor3svEXT([In] IntPtr extensionPointer, ref short components)
        // GLvoid glSecondaryColor3svEXT(GLshort* components)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg components\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg components\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]int16)\r\nret")]
        #endif
        public static void glSecondaryColor3svEXT([In] IntPtr extensionPointer, ref short components) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSecondaryColor3svEXT([In] IntPtr extensionPointer, ref short components)

        #region void glSecondaryColor3svEXT([In] IntPtr extensionPointer, short[] components)
        // GLvoid glSecondaryColor3svEXT(GLshort* components)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg components\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg components\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int16[])\r\nret")]
        #endif
        public static void glSecondaryColor3svEXT([In] IntPtr extensionPointer, short[] components) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSecondaryColor3svEXT([In] IntPtr extensionPointer, short[] components)

        #region void glSecondaryColor3svEXT([In] IntPtr extensionPointer, IntPtr components)
        // GLvoid glSecondaryColor3svEXT(GLshort* components)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg components\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg components\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int)\r\nret")]
        #endif
        public static void glSecondaryColor3svEXT([In] IntPtr extensionPointer, IntPtr components) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSecondaryColor3svEXT([In] IntPtr extensionPointer, IntPtr components)

        #region void glSecondaryColor3svEXT([In] IntPtr extensionPointer, short* components)
        // GLvoid glSecondaryColor3svEXT(GLshort* components)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg components\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int16*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg components\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int16*)\r\nret")]
        #endif
        public static unsafe void glSecondaryColor3svEXT([In] IntPtr extensionPointer, short* components) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSecondaryColor3svEXT([In] IntPtr extensionPointer, short* components)
        #endregion Overloads for GLvoid glSecondaryColor3svEXT(GLshort* components)

        #region Overloads for GLvoid glSecondaryColor3ivEXT(GLint* components)
        #region void glSecondaryColor3ivEXT([In] IntPtr extensionPointer, ref int components)
        // GLvoid glSecondaryColor3ivEXT(GLint* components)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg components\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg components\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]int32)\r\nret")]
        #endif
        public static void glSecondaryColor3ivEXT([In] IntPtr extensionPointer, ref int components) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSecondaryColor3ivEXT([In] IntPtr extensionPointer, ref int components)

        #region void glSecondaryColor3ivEXT([In] IntPtr extensionPointer, int[] components)
        // GLvoid glSecondaryColor3ivEXT(GLint* components)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg components\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg components\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32[])\r\nret")]
        #endif
        public static void glSecondaryColor3ivEXT([In] IntPtr extensionPointer, int[] components) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSecondaryColor3ivEXT([In] IntPtr extensionPointer, int[] components)

        #region void glSecondaryColor3ivEXT([In] IntPtr extensionPointer, IntPtr components)
        // GLvoid glSecondaryColor3ivEXT(GLint* components)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg components\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg components\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int)\r\nret")]
        #endif
        public static void glSecondaryColor3ivEXT([In] IntPtr extensionPointer, IntPtr components) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSecondaryColor3ivEXT([In] IntPtr extensionPointer, IntPtr components)

        #region void glSecondaryColor3ivEXT([In] IntPtr extensionPointer, int* components)
        // GLvoid glSecondaryColor3ivEXT(GLint* components)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg components\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg components\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32*)\r\nret")]
        #endif
        public static unsafe void glSecondaryColor3ivEXT([In] IntPtr extensionPointer, int* components) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSecondaryColor3ivEXT([In] IntPtr extensionPointer, int* components)
        #endregion Overloads for GLvoid glSecondaryColor3ivEXT(GLint* components)

        #region Overloads for GLvoid glSecondaryColor3fvEXT(GLfloat* components)
        #region void glSecondaryColor3fvEXT([In] IntPtr extensionPointer, ref float components)
        // GLvoid glSecondaryColor3fvEXT(GLfloat* components)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg components\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg components\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]float32)\r\nret")]
        #endif
        public static void glSecondaryColor3fvEXT([In] IntPtr extensionPointer, ref float components) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSecondaryColor3fvEXT([In] IntPtr extensionPointer, ref float components)

        #region void glSecondaryColor3fvEXT([In] IntPtr extensionPointer, float[] components)
        // GLvoid glSecondaryColor3fvEXT(GLfloat* components)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg components\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg components\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]float32[])\r\nret")]
        #endif
        public static void glSecondaryColor3fvEXT([In] IntPtr extensionPointer, float[] components) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSecondaryColor3fvEXT([In] IntPtr extensionPointer, float[] components)

        #region void glSecondaryColor3fvEXT([In] IntPtr extensionPointer, IntPtr components)
        // GLvoid glSecondaryColor3fvEXT(GLfloat* components)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg components\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg components\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int)\r\nret")]
        #endif
        public static void glSecondaryColor3fvEXT([In] IntPtr extensionPointer, IntPtr components) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSecondaryColor3fvEXT([In] IntPtr extensionPointer, IntPtr components)

        #region void glSecondaryColor3fvEXT([In] IntPtr extensionPointer, float* components)
        // GLvoid glSecondaryColor3fvEXT(GLfloat* components)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg components\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg components\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]float32*)\r\nret")]
        #endif
        public static unsafe void glSecondaryColor3fvEXT([In] IntPtr extensionPointer, float* components) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSecondaryColor3fvEXT([In] IntPtr extensionPointer, float* components)
        #endregion Overloads for GLvoid glSecondaryColor3fvEXT(GLfloat* components)

        #region Overloads for GLvoid glSecondaryColor3dvEXT(GLdouble* components)
        #region void glSecondaryColor3dvEXT([In] IntPtr extensionPointer, ref double components)
        // GLvoid glSecondaryColor3dvEXT(GLdouble* components)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg components\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]float64)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg components\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]float64)\r\nret")]
        #endif
        public static void glSecondaryColor3dvEXT([In] IntPtr extensionPointer, ref double components) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSecondaryColor3dvEXT([In] IntPtr extensionPointer, ref double components)

        #region void glSecondaryColor3dvEXT([In] IntPtr extensionPointer, double[] components)
        // GLvoid glSecondaryColor3dvEXT(GLdouble* components)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg components\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]float64[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg components\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]float64[])\r\nret")]
        #endif
        public static void glSecondaryColor3dvEXT([In] IntPtr extensionPointer, double[] components) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSecondaryColor3dvEXT([In] IntPtr extensionPointer, double[] components)

        #region void glSecondaryColor3dvEXT([In] IntPtr extensionPointer, IntPtr components)
        // GLvoid glSecondaryColor3dvEXT(GLdouble* components)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg components\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg components\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int)\r\nret")]
        #endif
        public static void glSecondaryColor3dvEXT([In] IntPtr extensionPointer, IntPtr components) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSecondaryColor3dvEXT([In] IntPtr extensionPointer, IntPtr components)

        #region void glSecondaryColor3dvEXT([In] IntPtr extensionPointer, double* components)
        // GLvoid glSecondaryColor3dvEXT(GLdouble* components)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg components\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]float64*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg components\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]float64*)\r\nret")]
        #endif
        public static unsafe void glSecondaryColor3dvEXT([In] IntPtr extensionPointer, double* components) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSecondaryColor3dvEXT([In] IntPtr extensionPointer, double* components)
        #endregion Overloads for GLvoid glSecondaryColor3dvEXT(GLdouble* components)

        #region Overloads for GLvoid glSecondaryColor3ubvEXT(GLubyte* components)
        #region void glSecondaryColor3ubvEXT([In] IntPtr extensionPointer, ref byte components)
        // GLvoid glSecondaryColor3ubvEXT(GLubyte* components)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg components\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]unsigned int8)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg components\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]unsigned int8)\r\nret")]
        #endif
        public static void glSecondaryColor3ubvEXT([In] IntPtr extensionPointer, ref byte components) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSecondaryColor3ubvEXT([In] IntPtr extensionPointer, ref byte components)

        #region void glSecondaryColor3ubvEXT([In] IntPtr extensionPointer, byte[] components)
        // GLvoid glSecondaryColor3ubvEXT(GLubyte* components)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg components\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int8[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg components\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int8[])\r\nret")]
        #endif
        public static void glSecondaryColor3ubvEXT([In] IntPtr extensionPointer, byte[] components) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSecondaryColor3ubvEXT([In] IntPtr extensionPointer, byte[] components)

        #region void glSecondaryColor3ubvEXT([In] IntPtr extensionPointer, IntPtr components)
        // GLvoid glSecondaryColor3ubvEXT(GLubyte* components)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg components\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg components\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int)\r\nret")]
        #endif
        public static void glSecondaryColor3ubvEXT([In] IntPtr extensionPointer, IntPtr components) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSecondaryColor3ubvEXT([In] IntPtr extensionPointer, IntPtr components)

        #region void glSecondaryColor3ubvEXT([In] IntPtr extensionPointer, byte* components)
        // GLvoid glSecondaryColor3ubvEXT(GLubyte* components)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg components\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int8*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg components\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int8*)\r\nret")]
        #endif
        public static unsafe void glSecondaryColor3ubvEXT([In] IntPtr extensionPointer, byte* components) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSecondaryColor3ubvEXT([In] IntPtr extensionPointer, byte* components)
        #endregion Overloads for GLvoid glSecondaryColor3ubvEXT(GLubyte* components)

        #region Overloads for GLvoid glSecondaryColor3usvEXT(GLushort* components)
        #region void glSecondaryColor3usvEXT([In] IntPtr extensionPointer, short[] components)
        // GLvoid glSecondaryColor3usvEXT(GLushort* components)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg components\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg components\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int16[])\r\nret")]
        #endif
        public static void glSecondaryColor3usvEXT([In] IntPtr extensionPointer, short[] components) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSecondaryColor3usvEXT([In] IntPtr extensionPointer, short[] components)

        #region void glSecondaryColor3usvEXT([In] IntPtr extensionPointer, ref short components)
        // GLvoid glSecondaryColor3usvEXT(GLushort* components)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg components\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg components\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]int16)\r\nret")]
        #endif
        public static void glSecondaryColor3usvEXT([In] IntPtr extensionPointer, ref short components) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSecondaryColor3usvEXT([In] IntPtr extensionPointer, ref short components)

        #region void glSecondaryColor3usvEXT([In] IntPtr extensionPointer, IntPtr components)
        // GLvoid glSecondaryColor3usvEXT(GLushort* components)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg components\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg components\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int)\r\nret")]
        #endif
        public static void glSecondaryColor3usvEXT([In] IntPtr extensionPointer, IntPtr components) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSecondaryColor3usvEXT([In] IntPtr extensionPointer, IntPtr components)

        #region void glSecondaryColor3usvEXT([In] IntPtr extensionPointer, ref ushort components)
        // GLvoid glSecondaryColor3usvEXT(GLushort* components)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg components\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]unsigned int16)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg components\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]unsigned int16)\r\nret")]
        #endif
        public static void glSecondaryColor3usvEXT([In] IntPtr extensionPointer, ref ushort components) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSecondaryColor3usvEXT([In] IntPtr extensionPointer, ref ushort components)

        #region void glSecondaryColor3usvEXT([In] IntPtr extensionPointer, ushort[] components)
        // GLvoid glSecondaryColor3usvEXT(GLushort* components)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg components\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int16[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg components\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int16[])\r\nret")]
        #endif
        public static void glSecondaryColor3usvEXT([In] IntPtr extensionPointer, ushort[] components) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSecondaryColor3usvEXT([In] IntPtr extensionPointer, ushort[] components)

        #region void glSecondaryColor3usvEXT([In] IntPtr extensionPointer, ushort* components)
        // GLvoid glSecondaryColor3usvEXT(GLushort* components)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg components\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int16*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg components\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int16*)\r\nret")]
        #endif
        public static unsafe void glSecondaryColor3usvEXT([In] IntPtr extensionPointer, ushort* components) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSecondaryColor3usvEXT([In] IntPtr extensionPointer, ushort* components)
        #endregion Overloads for GLvoid glSecondaryColor3usvEXT(GLushort* components)

        #region Overloads for GLvoid glSecondaryColor3uivEXT(GLuint* components)
        #region void glSecondaryColor3uivEXT([In] IntPtr extensionPointer, int[] components)
        // GLvoid glSecondaryColor3uivEXT(GLuint* components)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg components\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg components\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32[])\r\nret")]
        #endif
        public static void glSecondaryColor3uivEXT([In] IntPtr extensionPointer, int[] components) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSecondaryColor3uivEXT([In] IntPtr extensionPointer, int[] components)

        #region void glSecondaryColor3uivEXT([In] IntPtr extensionPointer, ref int components)
        // GLvoid glSecondaryColor3uivEXT(GLuint* components)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg components\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg components\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]int32)\r\nret")]
        #endif
        public static void glSecondaryColor3uivEXT([In] IntPtr extensionPointer, ref int components) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSecondaryColor3uivEXT([In] IntPtr extensionPointer, ref int components)

        #region void glSecondaryColor3uivEXT([In] IntPtr extensionPointer, IntPtr components)
        // GLvoid glSecondaryColor3uivEXT(GLuint* components)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg components\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg components\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int)\r\nret")]
        #endif
        public static void glSecondaryColor3uivEXT([In] IntPtr extensionPointer, IntPtr components) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSecondaryColor3uivEXT([In] IntPtr extensionPointer, IntPtr components)

        #region void glSecondaryColor3uivEXT([In] IntPtr extensionPointer, ref uint components)
        // GLvoid glSecondaryColor3uivEXT(GLuint* components)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg components\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]unsigned int32)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg components\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]unsigned int32)\r\nret")]
        #endif
        public static void glSecondaryColor3uivEXT([In] IntPtr extensionPointer, ref uint components) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSecondaryColor3uivEXT([In] IntPtr extensionPointer, ref uint components)

        #region void glSecondaryColor3uivEXT([In] IntPtr extensionPointer, uint[] components)
        // GLvoid glSecondaryColor3uivEXT(GLuint* components)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg components\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int32[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg components\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int32[])\r\nret")]
        #endif
        public static void glSecondaryColor3uivEXT([In] IntPtr extensionPointer, uint[] components) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSecondaryColor3uivEXT([In] IntPtr extensionPointer, uint[] components)

        #region void glSecondaryColor3uivEXT([In] IntPtr extensionPointer, uint* components)
        // GLvoid glSecondaryColor3uivEXT(GLuint* components)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg components\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg components\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int32*)\r\nret")]
        #endif
        public static unsafe void glSecondaryColor3uivEXT([In] IntPtr extensionPointer, uint* components) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSecondaryColor3uivEXT([In] IntPtr extensionPointer, uint* components)
        #endregion Overloads for GLvoid glSecondaryColor3uivEXT(GLuint* components)

        #region Overloads for GLvoid glSecondaryColorPointerEXT(GLint size, GLenum type, GLsizei stride, GLvoid* pointer)
        #region void glSecondaryColorPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, short[] pointer)
        // GLvoid glSecondaryColorPointerEXT(GLint size, GLenum type, GLsizei stride, GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int16[])\r\nret")]
        #endif
        public static void glSecondaryColorPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, short[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSecondaryColorPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, short[] pointer)

        #region void glSecondaryColorPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, float[] pointer)
        // GLvoid glSecondaryColorPointerEXT(GLint size, GLenum type, GLsizei stride, GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]float32[])\r\nret")]
        #endif
        public static void glSecondaryColorPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, float[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSecondaryColorPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, float[] pointer)

        #region void glSecondaryColorPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, int[] pointer)
        // GLvoid glSecondaryColorPointerEXT(GLint size, GLenum type, GLsizei stride, GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32[])\r\nret")]
        #endif
        public static void glSecondaryColorPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, int[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSecondaryColorPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, int[] pointer)

        #region void glSecondaryColorPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, IntPtr pointer)
        // GLvoid glSecondaryColorPointerEXT(GLint size, GLenum type, GLsizei stride, GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]native int)\r\nret")]
        #endif
        public static void glSecondaryColorPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, IntPtr pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSecondaryColorPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, IntPtr pointer)

        #region void glSecondaryColorPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, byte[] pointer)
        // GLvoid glSecondaryColorPointerEXT(GLint size, GLenum type, GLsizei stride, GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]unsigned int8[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]unsigned int8[])\r\nret")]
        #endif
        public static void glSecondaryColorPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, byte[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSecondaryColorPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, byte[] pointer)

        #region void glSecondaryColorPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, double[] pointer)
        // GLvoid glSecondaryColorPointerEXT(GLint size, GLenum type, GLsizei stride, GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]float64[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]float64[])\r\nret")]
        #endif
        public static void glSecondaryColorPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, double[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSecondaryColorPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, double[] pointer)

        #region void glSecondaryColorPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, uint[] pointer)
        // GLvoid glSecondaryColorPointerEXT(GLint size, GLenum type, GLsizei stride, GLvoid* pointer)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]unsigned int32[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]unsigned int32[])\r\nret")]
        #endif
        public static void glSecondaryColorPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, uint[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSecondaryColorPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, uint[] pointer)

        #region void glSecondaryColorPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, sbyte[] pointer)
        // GLvoid glSecondaryColorPointerEXT(GLint size, GLenum type, GLsizei stride, GLvoid* pointer)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int8[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int8[])\r\nret")]
        #endif
        public static void glSecondaryColorPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, sbyte[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSecondaryColorPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, sbyte[] pointer)

        #region void glSecondaryColorPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, ushort[] pointer)
        // GLvoid glSecondaryColorPointerEXT(GLint size, GLenum type, GLsizei stride, GLvoid* pointer)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]unsigned int16[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]unsigned int16[])\r\nret")]
        #endif
        public static void glSecondaryColorPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, ushort[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSecondaryColorPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, ushort[] pointer)

        #region void glSecondaryColorPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, void* pointer)
        // GLvoid glSecondaryColorPointerEXT(GLint size, GLenum type, GLsizei stride, GLvoid* pointer)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]void*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]void*)\r\nret")]
        #endif
        public static unsafe void glSecondaryColorPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, void* pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSecondaryColorPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, void* pointer)
        #endregion Overloads for GLvoid glSecondaryColorPointerEXT(GLint size, GLenum type, GLsizei stride, GLvoid* pointer)
        #endregion GL_EXT_secondary_color Methods
        #endregion GL_EXT_secondary_color (145)

        #region GL_EXT_texture_perturb_normal (147)
        #region GL_EXT_texture_perturb_normal Constants
        #region GL_PERTURB_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PERTURB_EXT 0x85AE
        public const int GL_PERTURB_EXT = 0x85AE;
        #endregion GL_PERTURB_EXT

        #region GL_TEXTURE_NORMAL_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_NORMAL_EXT 0x85AF
        public const int GL_TEXTURE_NORMAL_EXT = 0x85AF;
        #endregion GL_TEXTURE_NORMAL_EXT
        #endregion GL_EXT_texture_perturb_normal Constants

        #region GL_EXT_texture_perturb_normal Methods
        #region void glTextureNormalEXT([In] IntPtr extensionPointer, int mode)
        // GLvoid glTextureNormalEXT(GLenum mode)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg mode\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg mode\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32)\r\nret")]
        #endif
        public static void glTextureNormalEXT([In] IntPtr extensionPointer, int mode) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTextureNormalEXT([In] IntPtr extensionPointer, int mode)
        #endregion GL_EXT_texture_perturb_normal Methods
        #endregion GL_EXT_texture_perturb_normal (147)

        #region GL_EXT_multi_draw_arrays (148)
        #region GL_EXT_multi_draw_arrays Methods
        #region Overloads for GLvoid glMultiDrawArraysEXT(GLenum mode, GLint* first, GLsizei* count, GLsizei primcount)
        #region void glMultiDrawArraysEXT([In] IntPtr extensionPointer, int mode, ref int first, ref int count, int primcount)
        // GLvoid glMultiDrawArraysEXT(GLenum mode, GLint* first, GLsizei* count, GLsizei primcount)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg mode\r\nldarg first\r\nldarg count\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]int32,[in][out]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg mode\r\nldarg first\r\nldarg count\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]int32,[in][out]int32,[in]int32)\r\nret")]
        #endif
        public static void glMultiDrawArraysEXT([In] IntPtr extensionPointer, int mode, ref int first, ref int count, int primcount) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiDrawArraysEXT([In] IntPtr extensionPointer, int mode, ref int first, ref int count, int primcount)

        #region void glMultiDrawArraysEXT([In] IntPtr extensionPointer, int mode, int[] first, int[] count, int primcount)
        // GLvoid glMultiDrawArraysEXT(GLenum mode, GLint* first, GLsizei* count, GLsizei primcount)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg mode\r\nldarg first\r\nldarg count\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32[],[in]int32[],[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg mode\r\nldarg first\r\nldarg count\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32[],[in]int32[],[in]int32)\r\nret")]
        #endif
        public static void glMultiDrawArraysEXT([In] IntPtr extensionPointer, int mode, int[] first, int[] count, int primcount) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiDrawArraysEXT([In] IntPtr extensionPointer, int mode, int[] first, int[] count, int primcount)

        #region void glMultiDrawArraysEXT([In] IntPtr extensionPointer, int mode, IntPtr first, IntPtr count, int primcount)
        // GLvoid glMultiDrawArraysEXT(GLenum mode, GLint* first, GLsizei* count, GLsizei primcount)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg mode\r\nldarg first\r\nldarg count\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int,[in]native int,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg mode\r\nldarg first\r\nldarg count\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int,[in]native int,[in]int32)\r\nret")]
        #endif
        public static void glMultiDrawArraysEXT([In] IntPtr extensionPointer, int mode, IntPtr first, IntPtr count, int primcount) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiDrawArraysEXT([In] IntPtr extensionPointer, int mode, IntPtr first, IntPtr count, int primcount)

        #region void glMultiDrawArraysEXT([In] IntPtr extensionPointer, int mode, int* first, int* count, int primcount)
        // GLvoid glMultiDrawArraysEXT(GLenum mode, GLint* first, GLsizei* count, GLsizei primcount)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg mode\r\nldarg first\r\nldarg count\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32*,[in]int32*,[in]int32)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg mode\r\nldarg first\r\nldarg count\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32*,[in]int32*,[in]int32)\r\nret")]
        #endif
        public static unsafe void glMultiDrawArraysEXT([In] IntPtr extensionPointer, int mode, int* first, int* count, int primcount) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiDrawArraysEXT([In] IntPtr extensionPointer, int mode, int* first, int* count, int primcount)
        #endregion Overloads for GLvoid glMultiDrawArraysEXT(GLenum mode, GLint* first, GLsizei* count, GLsizei primcount)

        #region Overloads for GLvoid glMultiDrawElementsEXT(GLenum mode, GLsizei* count, GLenum type, const GLvoid* indices, GLsizei primcount)
        #region void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, ref int count, int type, short[] indices, int primcount)
        // GLvoid glMultiDrawElementsEXT(GLenum mode, GLsizei* count, GLenum type, const GLvoid* indices, GLsizei primcount)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg mode\r\nldarg count\r\nldarg type\r\nldarg indices\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]int32,[in]int32,[in]int16[],[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg mode\r\nldarg count\r\nldarg type\r\nldarg indices\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]int32,[in]int32,[in]int16[],[in]int32)\r\nret")]
        #endif
        public static void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, ref int count, int type, short[] indices, int primcount) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, ref int count, int type, short[] indices, int primcount)

        #region void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, IntPtr count, int type, float[] indices, int primcount)
        // GLvoid glMultiDrawElementsEXT(GLenum mode, GLsizei* count, GLenum type, const GLvoid* indices, GLsizei primcount)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg mode\r\nldarg count\r\nldarg type\r\nldarg indices\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int,[in]int32,[in]float32[],[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg mode\r\nldarg count\r\nldarg type\r\nldarg indices\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int,[in]int32,[in]float32[],[in]int32)\r\nret")]
        #endif
        public static void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, IntPtr count, int type, float[] indices, int primcount) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, IntPtr count, int type, float[] indices, int primcount)

        #region void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, int[] count, int type, short[] indices, int primcount)
        // GLvoid glMultiDrawElementsEXT(GLenum mode, GLsizei* count, GLenum type, const GLvoid* indices, GLsizei primcount)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg mode\r\nldarg count\r\nldarg type\r\nldarg indices\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32[],[in]int32,[in]int16[],[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg mode\r\nldarg count\r\nldarg type\r\nldarg indices\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32[],[in]int32,[in]int16[],[in]int32)\r\nret")]
        #endif
        public static void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, int[] count, int type, short[] indices, int primcount) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, int[] count, int type, short[] indices, int primcount)

        #region void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, int[] count, int type, float[] indices, int primcount)
        // GLvoid glMultiDrawElementsEXT(GLenum mode, GLsizei* count, GLenum type, const GLvoid* indices, GLsizei primcount)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg mode\r\nldarg count\r\nldarg type\r\nldarg indices\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32[],[in]int32,[in]float32[],[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg mode\r\nldarg count\r\nldarg type\r\nldarg indices\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32[],[in]int32,[in]float32[],[in]int32)\r\nret")]
        #endif
        public static void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, int[] count, int type, float[] indices, int primcount) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, int[] count, int type, float[] indices, int primcount)

        #region void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, IntPtr count, int type, short[] indices, int primcount)
        // GLvoid glMultiDrawElementsEXT(GLenum mode, GLsizei* count, GLenum type, const GLvoid* indices, GLsizei primcount)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg mode\r\nldarg count\r\nldarg type\r\nldarg indices\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int,[in]int32,[in]int16[],[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg mode\r\nldarg count\r\nldarg type\r\nldarg indices\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int,[in]int32,[in]int16[],[in]int32)\r\nret")]
        #endif
        public static void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, IntPtr count, int type, short[] indices, int primcount) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, IntPtr count, int type, short[] indices, int primcount)

        #region void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, ref int count, int type, int[] indices, int primcount)
        // GLvoid glMultiDrawElementsEXT(GLenum mode, GLsizei* count, GLenum type, const GLvoid* indices, GLsizei primcount)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg mode\r\nldarg count\r\nldarg type\r\nldarg indices\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]int32,[in]int32,[in]int32[],[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg mode\r\nldarg count\r\nldarg type\r\nldarg indices\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]int32,[in]int32,[in]int32[],[in]int32)\r\nret")]
        #endif
        public static void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, ref int count, int type, int[] indices, int primcount) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, ref int count, int type, int[] indices, int primcount)

        #region void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, ref int count, int type, double[] indices, int primcount)
        // GLvoid glMultiDrawElementsEXT(GLenum mode, GLsizei* count, GLenum type, const GLvoid* indices, GLsizei primcount)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg mode\r\nldarg count\r\nldarg type\r\nldarg indices\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]int32,[in]int32,[in]float64[],[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg mode\r\nldarg count\r\nldarg type\r\nldarg indices\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]int32,[in]int32,[in]float64[],[in]int32)\r\nret")]
        #endif
        public static void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, ref int count, int type, double[] indices, int primcount) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, ref int count, int type, double[] indices, int primcount)

        #region void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, int[] count, int type, int[] indices, int primcount)
        // GLvoid glMultiDrawElementsEXT(GLenum mode, GLsizei* count, GLenum type, const GLvoid* indices, GLsizei primcount)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg mode\r\nldarg count\r\nldarg type\r\nldarg indices\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32[],[in]int32,[in]int32[],[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg mode\r\nldarg count\r\nldarg type\r\nldarg indices\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32[],[in]int32,[in]int32[],[in]int32)\r\nret")]
        #endif
        public static void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, int[] count, int type, int[] indices, int primcount) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, int[] count, int type, int[] indices, int primcount)

        #region void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, int[] count, int type, double[] indices, int primcount)
        // GLvoid glMultiDrawElementsEXT(GLenum mode, GLsizei* count, GLenum type, const GLvoid* indices, GLsizei primcount)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg mode\r\nldarg count\r\nldarg type\r\nldarg indices\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32[],[in]int32,[in]float64[],[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg mode\r\nldarg count\r\nldarg type\r\nldarg indices\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32[],[in]int32,[in]float64[],[in]int32)\r\nret")]
        #endif
        public static void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, int[] count, int type, double[] indices, int primcount) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, int[] count, int type, double[] indices, int primcount)

        #region void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, IntPtr count, int type, int[] indices, int primcount)
        // GLvoid glMultiDrawElementsEXT(GLenum mode, GLsizei* count, GLenum type, const GLvoid* indices, GLsizei primcount)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg mode\r\nldarg count\r\nldarg type\r\nldarg indices\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int,[in]int32,[in]int32[],[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg mode\r\nldarg count\r\nldarg type\r\nldarg indices\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int,[in]int32,[in]int32[],[in]int32)\r\nret")]
        #endif
        public static void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, IntPtr count, int type, int[] indices, int primcount) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, IntPtr count, int type, int[] indices, int primcount)

        #region void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, int[] count, int type, IntPtr indices, int primcount)
        // GLvoid glMultiDrawElementsEXT(GLenum mode, GLsizei* count, GLenum type, const GLvoid* indices, GLsizei primcount)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg mode\r\nldarg count\r\nldarg type\r\nldarg indices\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32[],[in]int32,[in]native int,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg mode\r\nldarg count\r\nldarg type\r\nldarg indices\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32[],[in]int32,[in]native int,[in]int32)\r\nret")]
        #endif
        public static void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, int[] count, int type, IntPtr indices, int primcount) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, int[] count, int type, IntPtr indices, int primcount)

        #region void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, IntPtr count, int type, IntPtr indices, int primcount)
        // GLvoid glMultiDrawElementsEXT(GLenum mode, GLsizei* count, GLenum type, const GLvoid* indices, GLsizei primcount)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg mode\r\nldarg count\r\nldarg type\r\nldarg indices\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int,[in]int32,[in]native int,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg mode\r\nldarg count\r\nldarg type\r\nldarg indices\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int,[in]int32,[in]native int,[in]int32)\r\nret")]
        #endif
        public static void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, IntPtr count, int type, IntPtr indices, int primcount) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, IntPtr count, int type, IntPtr indices, int primcount)

        #region void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, ref int count, int type, IntPtr indices, int primcount)
        // GLvoid glMultiDrawElementsEXT(GLenum mode, GLsizei* count, GLenum type, const GLvoid* indices, GLsizei primcount)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg mode\r\nldarg count\r\nldarg type\r\nldarg indices\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]int32,[in]int32,[in]native int,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg mode\r\nldarg count\r\nldarg type\r\nldarg indices\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]int32,[in]int32,[in]native int,[in]int32)\r\nret")]
        #endif
        public static void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, ref int count, int type, IntPtr indices, int primcount) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, ref int count, int type, IntPtr indices, int primcount)

        #region void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, IntPtr count, int type, double[] indices, int primcount)
        // GLvoid glMultiDrawElementsEXT(GLenum mode, GLsizei* count, GLenum type, const GLvoid* indices, GLsizei primcount)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg mode\r\nldarg count\r\nldarg type\r\nldarg indices\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int,[in]int32,[in]float64[],[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg mode\r\nldarg count\r\nldarg type\r\nldarg indices\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int,[in]int32,[in]float64[],[in]int32)\r\nret")]
        #endif
        public static void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, IntPtr count, int type, double[] indices, int primcount) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, IntPtr count, int type, double[] indices, int primcount)

        #region void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, IntPtr count, int type, byte[] indices, int primcount)
        // GLvoid glMultiDrawElementsEXT(GLenum mode, GLsizei* count, GLenum type, const GLvoid* indices, GLsizei primcount)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg mode\r\nldarg count\r\nldarg type\r\nldarg indices\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int,[in]int32,[in]unsigned int8[],[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg mode\r\nldarg count\r\nldarg type\r\nldarg indices\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int,[in]int32,[in]unsigned int8[],[in]int32)\r\nret")]
        #endif
        public static void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, IntPtr count, int type, byte[] indices, int primcount) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, IntPtr count, int type, byte[] indices, int primcount)

        #region void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, int[] count, int type, byte[] indices, int primcount)
        // GLvoid glMultiDrawElementsEXT(GLenum mode, GLsizei* count, GLenum type, const GLvoid* indices, GLsizei primcount)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg mode\r\nldarg count\r\nldarg type\r\nldarg indices\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32[],[in]int32,[in]unsigned int8[],[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg mode\r\nldarg count\r\nldarg type\r\nldarg indices\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32[],[in]int32,[in]unsigned int8[],[in]int32)\r\nret")]
        #endif
        public static void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, int[] count, int type, byte[] indices, int primcount) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, int[] count, int type, byte[] indices, int primcount)

        #region void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, ref int count, int type, float[] indices, int primcount)
        // GLvoid glMultiDrawElementsEXT(GLenum mode, GLsizei* count, GLenum type, const GLvoid* indices, GLsizei primcount)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg mode\r\nldarg count\r\nldarg type\r\nldarg indices\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]int32,[in]int32,[in]float32[],[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg mode\r\nldarg count\r\nldarg type\r\nldarg indices\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]int32,[in]int32,[in]float32[],[in]int32)\r\nret")]
        #endif
        public static void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, ref int count, int type, float[] indices, int primcount) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, ref int count, int type, float[] indices, int primcount)

        #region void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, ref int count, int type, byte[] indices, int primcount)
        // GLvoid glMultiDrawElementsEXT(GLenum mode, GLsizei* count, GLenum type, const GLvoid* indices, GLsizei primcount)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg mode\r\nldarg count\r\nldarg type\r\nldarg indices\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]int32,[in]int32,[in]unsigned int8[],[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg mode\r\nldarg count\r\nldarg type\r\nldarg indices\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]int32,[in]int32,[in]unsigned int8[],[in]int32)\r\nret")]
        #endif
        public static void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, ref int count, int type, byte[] indices, int primcount) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, ref int count, int type, byte[] indices, int primcount)

        #region void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, ref int count, int type, uint[] indices, int primcount)
        // GLvoid glMultiDrawElementsEXT(GLenum mode, GLsizei* count, GLenum type, const GLvoid* indices, GLsizei primcount)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg mode\r\nldarg count\r\nldarg type\r\nldarg indices\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]int32,[in]int32,[in]unsigned int32[],[in]int32)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg mode\r\nldarg count\r\nldarg type\r\nldarg indices\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]int32,[in]int32,[in]unsigned int32[],[in]int32)\r\nret")]
        #endif
        public static void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, ref int count, int type, uint[] indices, int primcount) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, ref int count, int type, uint[] indices, int primcount)

        #region void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, int[] count, int type, uint[] indices, int primcount)
        // GLvoid glMultiDrawElementsEXT(GLenum mode, GLsizei* count, GLenum type, const GLvoid* indices, GLsizei primcount)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg mode\r\nldarg count\r\nldarg type\r\nldarg indices\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32[],[in]int32,[in]unsigned int32[],[in]int32)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg mode\r\nldarg count\r\nldarg type\r\nldarg indices\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32[],[in]int32,[in]unsigned int32[],[in]int32)\r\nret")]
        #endif
        public static void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, int[] count, int type, uint[] indices, int primcount) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, int[] count, int type, uint[] indices, int primcount)

        #region void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, IntPtr count, int type, uint[] indices, int primcount)
        // GLvoid glMultiDrawElementsEXT(GLenum mode, GLsizei* count, GLenum type, const GLvoid* indices, GLsizei primcount)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg mode\r\nldarg count\r\nldarg type\r\nldarg indices\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int,[in]int32,[in]unsigned int32[],[in]int32)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg mode\r\nldarg count\r\nldarg type\r\nldarg indices\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int,[in]int32,[in]unsigned int32[],[in]int32)\r\nret")]
        #endif
        public static void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, IntPtr count, int type, uint[] indices, int primcount) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, IntPtr count, int type, uint[] indices, int primcount)

        #region void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, IntPtr count, int type, sbyte[] indices, int primcount)
        // GLvoid glMultiDrawElementsEXT(GLenum mode, GLsizei* count, GLenum type, const GLvoid* indices, GLsizei primcount)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg mode\r\nldarg count\r\nldarg type\r\nldarg indices\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int,[in]int32,[in]int8[],[in]int32)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg mode\r\nldarg count\r\nldarg type\r\nldarg indices\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int,[in]int32,[in]int8[],[in]int32)\r\nret")]
        #endif
        public static void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, IntPtr count, int type, sbyte[] indices, int primcount) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, IntPtr count, int type, sbyte[] indices, int primcount)

        #region void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, int[] count, int type, sbyte[] indices, int primcount)
        // GLvoid glMultiDrawElementsEXT(GLenum mode, GLsizei* count, GLenum type, const GLvoid* indices, GLsizei primcount)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg mode\r\nldarg count\r\nldarg type\r\nldarg indices\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32[],[in]int32,[in]int8[],[in]int32)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg mode\r\nldarg count\r\nldarg type\r\nldarg indices\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32[],[in]int32,[in]int8[],[in]int32)\r\nret")]
        #endif
        public static void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, int[] count, int type, sbyte[] indices, int primcount) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, int[] count, int type, sbyte[] indices, int primcount)

        #region void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, ref int count, int type, sbyte[] indices, int primcount)
        // GLvoid glMultiDrawElementsEXT(GLenum mode, GLsizei* count, GLenum type, const GLvoid* indices, GLsizei primcount)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg mode\r\nldarg count\r\nldarg type\r\nldarg indices\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]int32,[in]int32,[in]int8[],[in]int32)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg mode\r\nldarg count\r\nldarg type\r\nldarg indices\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]int32,[in]int32,[in]int8[],[in]int32)\r\nret")]
        #endif
        public static void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, ref int count, int type, sbyte[] indices, int primcount) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, ref int count, int type, sbyte[] indices, int primcount)

        #region void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, ref int count, int type, ushort[] indices, int primcount)
        // GLvoid glMultiDrawElementsEXT(GLenum mode, GLsizei* count, GLenum type, const GLvoid* indices, GLsizei primcount)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg mode\r\nldarg count\r\nldarg type\r\nldarg indices\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]int32,[in]int32,[in]unsigned int16[],[in]int32)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg mode\r\nldarg count\r\nldarg type\r\nldarg indices\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]int32,[in]int32,[in]unsigned int16[],[in]int32)\r\nret")]
        #endif
        public static void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, ref int count, int type, ushort[] indices, int primcount) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, ref int count, int type, ushort[] indices, int primcount)

        #region void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, int[] count, int type, ushort[] indices, int primcount)
        // GLvoid glMultiDrawElementsEXT(GLenum mode, GLsizei* count, GLenum type, const GLvoid* indices, GLsizei primcount)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg mode\r\nldarg count\r\nldarg type\r\nldarg indices\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32[],[in]int32,[in]unsigned int16[],[in]int32)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg mode\r\nldarg count\r\nldarg type\r\nldarg indices\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32[],[in]int32,[in]unsigned int16[],[in]int32)\r\nret")]
        #endif
        public static void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, int[] count, int type, ushort[] indices, int primcount) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, int[] count, int type, ushort[] indices, int primcount)

        #region void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, IntPtr count, int type, ushort[] indices, int primcount)
        // GLvoid glMultiDrawElementsEXT(GLenum mode, GLsizei* count, GLenum type, const GLvoid* indices, GLsizei primcount)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg mode\r\nldarg count\r\nldarg type\r\nldarg indices\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int,[in]int32,[in]unsigned int16[],[in]int32)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg mode\r\nldarg count\r\nldarg type\r\nldarg indices\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int,[in]int32,[in]unsigned int16[],[in]int32)\r\nret")]
        #endif
        public static void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, IntPtr count, int type, ushort[] indices, int primcount) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, IntPtr count, int type, ushort[] indices, int primcount)

        #region void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, ref int count, int type, void* indices, int primcount)
        // GLvoid glMultiDrawElementsEXT(GLenum mode, GLsizei* count, GLenum type, const GLvoid* indices, GLsizei primcount)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg mode\r\nldarg count\r\nldarg type\r\nldarg indices\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]int32,[in]int32,[in]void*,[in]int32)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg mode\r\nldarg count\r\nldarg type\r\nldarg indices\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]int32,[in]int32,[in]void*,[in]int32)\r\nret")]
        #endif
        public static unsafe void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, ref int count, int type, void* indices, int primcount) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, ref int count, int type, void* indices, int primcount)

        #region void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, int* count, int type, void* indices, int primcount)
        // GLvoid glMultiDrawElementsEXT(GLenum mode, GLsizei* count, GLenum type, const GLvoid* indices, GLsizei primcount)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg mode\r\nldarg count\r\nldarg type\r\nldarg indices\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32*,[in]int32,[in]void*,[in]int32)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg mode\r\nldarg count\r\nldarg type\r\nldarg indices\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32*,[in]int32,[in]void*,[in]int32)\r\nret")]
        #endif
        public static unsafe void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, int* count, int type, void* indices, int primcount) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, int* count, int type, void* indices, int primcount)

        #region void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, int[] count, int type, void* indices, int primcount)
        // GLvoid glMultiDrawElementsEXT(GLenum mode, GLsizei* count, GLenum type, const GLvoid* indices, GLsizei primcount)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg mode\r\nldarg count\r\nldarg type\r\nldarg indices\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32[],[in]int32,[in]void*,[in]int32)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg mode\r\nldarg count\r\nldarg type\r\nldarg indices\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32[],[in]int32,[in]void*,[in]int32)\r\nret")]
        #endif
        public static unsafe void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, int[] count, int type, void* indices, int primcount) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, int[] count, int type, void* indices, int primcount)

        #region void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, int* count, int type, double[] indices, int primcount)
        // GLvoid glMultiDrawElementsEXT(GLenum mode, GLsizei* count, GLenum type, const GLvoid* indices, GLsizei primcount)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg mode\r\nldarg count\r\nldarg type\r\nldarg indices\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32*,[in]int32,[in]float64[],[in]int32)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg mode\r\nldarg count\r\nldarg type\r\nldarg indices\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32*,[in]int32,[in]float64[],[in]int32)\r\nret")]
        #endif
        public static unsafe void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, int* count, int type, double[] indices, int primcount) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, int* count, int type, double[] indices, int primcount)

        #region void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, IntPtr count, int type, void* indices, int primcount)
        // GLvoid glMultiDrawElementsEXT(GLenum mode, GLsizei* count, GLenum type, const GLvoid* indices, GLsizei primcount)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg mode\r\nldarg count\r\nldarg type\r\nldarg indices\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int,[in]int32,[in]void*,[in]int32)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg mode\r\nldarg count\r\nldarg type\r\nldarg indices\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int,[in]int32,[in]void*,[in]int32)\r\nret")]
        #endif
        public static unsafe void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, IntPtr count, int type, void* indices, int primcount) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, IntPtr count, int type, void* indices, int primcount)

        #region void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, int* count, int type, sbyte[] indices, int primcount)
        // GLvoid glMultiDrawElementsEXT(GLenum mode, GLsizei* count, GLenum type, const GLvoid* indices, GLsizei primcount)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg mode\r\nldarg count\r\nldarg type\r\nldarg indices\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32*,[in]int32,[in]int8[],[in]int32)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg mode\r\nldarg count\r\nldarg type\r\nldarg indices\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32*,[in]int32,[in]int8[],[in]int32)\r\nret")]
        #endif
        public static unsafe void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, int* count, int type, sbyte[] indices, int primcount) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, int* count, int type, sbyte[] indices, int primcount)

        #region void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, int* count, int type, short[] indices, int primcount)
        // GLvoid glMultiDrawElementsEXT(GLenum mode, GLsizei* count, GLenum type, const GLvoid* indices, GLsizei primcount)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg mode\r\nldarg count\r\nldarg type\r\nldarg indices\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32*,[in]int32,[in]int16[],[in]int32)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg mode\r\nldarg count\r\nldarg type\r\nldarg indices\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32*,[in]int32,[in]int16[],[in]int32)\r\nret")]
        #endif
        public static unsafe void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, int* count, int type, short[] indices, int primcount) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, int* count, int type, short[] indices, int primcount)

        #region void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, int* count, int type, IntPtr indices, int primcount)
        // GLvoid glMultiDrawElementsEXT(GLenum mode, GLsizei* count, GLenum type, const GLvoid* indices, GLsizei primcount)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg mode\r\nldarg count\r\nldarg type\r\nldarg indices\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32*,[in]int32,[in]native int,[in]int32)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg mode\r\nldarg count\r\nldarg type\r\nldarg indices\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32*,[in]int32,[in]native int,[in]int32)\r\nret")]
        #endif
        public static unsafe void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, int* count, int type, IntPtr indices, int primcount) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, int* count, int type, IntPtr indices, int primcount)

        #region void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, int* count, int type, byte[] indices, int primcount)
        // GLvoid glMultiDrawElementsEXT(GLenum mode, GLsizei* count, GLenum type, const GLvoid* indices, GLsizei primcount)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg mode\r\nldarg count\r\nldarg type\r\nldarg indices\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32*,[in]int32,[in]unsigned int8[],[in]int32)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg mode\r\nldarg count\r\nldarg type\r\nldarg indices\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32*,[in]int32,[in]unsigned int8[],[in]int32)\r\nret")]
        #endif
        public static unsafe void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, int* count, int type, byte[] indices, int primcount) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, int* count, int type, byte[] indices, int primcount)

        #region void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, int* count, int type, uint[] indices, int primcount)
        // GLvoid glMultiDrawElementsEXT(GLenum mode, GLsizei* count, GLenum type, const GLvoid* indices, GLsizei primcount)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg mode\r\nldarg count\r\nldarg type\r\nldarg indices\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32*,[in]int32,[in]unsigned int32[],[in]int32)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg mode\r\nldarg count\r\nldarg type\r\nldarg indices\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32*,[in]int32,[in]unsigned int32[],[in]int32)\r\nret")]
        #endif
        public static unsafe void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, int* count, int type, uint[] indices, int primcount) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, int* count, int type, uint[] indices, int primcount)

        #region void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, int* count, int type, float[] indices, int primcount)
        // GLvoid glMultiDrawElementsEXT(GLenum mode, GLsizei* count, GLenum type, const GLvoid* indices, GLsizei primcount)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg mode\r\nldarg count\r\nldarg type\r\nldarg indices\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32*,[in]int32,[in]float32[],[in]int32)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg mode\r\nldarg count\r\nldarg type\r\nldarg indices\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32*,[in]int32,[in]float32[],[in]int32)\r\nret")]
        #endif
        public static unsafe void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, int* count, int type, float[] indices, int primcount) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, int* count, int type, float[] indices, int primcount)

        #region void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, int* count, int type, ushort[] indices, int primcount)
        // GLvoid glMultiDrawElementsEXT(GLenum mode, GLsizei* count, GLenum type, const GLvoid* indices, GLsizei primcount)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg mode\r\nldarg count\r\nldarg type\r\nldarg indices\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32*,[in]int32,[in]unsigned int16[],[in]int32)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg mode\r\nldarg count\r\nldarg type\r\nldarg indices\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32*,[in]int32,[in]unsigned int16[],[in]int32)\r\nret")]
        #endif
        public static unsafe void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, int* count, int type, ushort[] indices, int primcount) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, int* count, int type, ushort[] indices, int primcount)

        #region void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, int* count, int type, int[] indices, int primcount)
        // GLvoid glMultiDrawElementsEXT(GLenum mode, GLsizei* count, GLenum type, const GLvoid* indices, GLsizei primcount)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg mode\r\nldarg count\r\nldarg type\r\nldarg indices\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32*,[in]int32,[in]int32[],[in]int32)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg mode\r\nldarg count\r\nldarg type\r\nldarg indices\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32*,[in]int32,[in]int32[],[in]int32)\r\nret")]
        #endif
        public static unsafe void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, int* count, int type, int[] indices, int primcount) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiDrawElementsEXT([In] IntPtr extensionPointer, int mode, int* count, int type, int[] indices, int primcount)
        #endregion Overloads for GLvoid glMultiDrawElementsEXT(GLenum mode, GLsizei* count, GLenum type, const GLvoid* indices, GLsizei primcount)
        #endregion GL_EXT_multi_draw_arrays Methods
        #endregion GL_EXT_multi_draw_arrays (148)

        #region GL_EXT_fog_coord (149)
        #region GL_EXT_fog_coord Constants
        #region GL_FOG_COORDINATE_SOURCE_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_FOG_COORDINATE_SOURCE_EXT 0x8450
        public const int GL_FOG_COORDINATE_SOURCE_EXT = 0x8450;
        #endregion GL_FOG_COORDINATE_SOURCE_EXT

        #region GL_FOG_COORDINATE_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_FOG_COORDINATE_EXT 0x8451
        public const int GL_FOG_COORDINATE_EXT = 0x8451;
        #endregion GL_FOG_COORDINATE_EXT

        // GL_FRAGMENT_DEPTH_EXT is already defined in GL_EXT_light_texture (117)

        #region GL_CURRENT_FOG_COORDINATE_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_CURRENT_FOG_COORDINATE_EXT 0x8453
        public const int GL_CURRENT_FOG_COORDINATE_EXT = 0x8453;
        #endregion GL_CURRENT_FOG_COORDINATE_EXT

        #region GL_FOG_COORDINATE_ARRAY_TYPE_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_FOG_COORDINATE_ARRAY_TYPE_EXT 0x8454
        public const int GL_FOG_COORDINATE_ARRAY_TYPE_EXT = 0x8454;
        #endregion GL_FOG_COORDINATE_ARRAY_TYPE_EXT

        #region GL_FOG_COORDINATE_ARRAY_STRIDE_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_FOG_COORDINATE_ARRAY_STRIDE_EXT 0x8455
        public const int GL_FOG_COORDINATE_ARRAY_STRIDE_EXT = 0x8455;
        #endregion GL_FOG_COORDINATE_ARRAY_STRIDE_EXT

        #region GL_FOG_COORDINATE_ARRAY_POINTER_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_FOG_COORDINATE_ARRAY_POINTER_EXT 0x8456
        public const int GL_FOG_COORDINATE_ARRAY_POINTER_EXT = 0x8456;
        #endregion GL_FOG_COORDINATE_ARRAY_POINTER_EXT

        #region GL_FOG_COORDINATE_ARRAY_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_FOG_COORDINATE_ARRAY_EXT 0x8457
        public const int GL_FOG_COORDINATE_ARRAY_EXT = 0x8457;
        #endregion GL_FOG_COORDINATE_ARRAY_EXT
        #endregion GL_EXT_fog_coord Constants

        #region GL_EXT_fog_coord Methods
        #region void glFogCoordfEXT([In] IntPtr extensionPointer, float coord)
        // GLvoid glFogCoordfEXT(GLfloat coord)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg coord\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg coord\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]float32)\r\nret")]
        #endif
        public static void glFogCoordfEXT([In] IntPtr extensionPointer, float coord) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glFogCoordfEXT([In] IntPtr extensionPointer, float coord)

        #region void glFogCoorddEXT([In] IntPtr extensionPointer, double coord)
        // GLvoid glFogCoorddEXT(GLdouble coord)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg coord\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]float64)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg coord\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]float64)\r\nret")]
        #endif
        public static void glFogCoorddEXT([In] IntPtr extensionPointer, double coord) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glFogCoorddEXT([In] IntPtr extensionPointer, double coord)

        #region Overloads for GLvoid glFogCoordfvEXT(GLfloat coord)
        #region void glFogCoordfvEXT([In] IntPtr extensionPointer, ref float coord)
        // GLvoid glFogCoordfvEXT(GLfloat coord)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg coord\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg coord\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]float32)\r\nret")]
        #endif
        public static void glFogCoordfvEXT([In] IntPtr extensionPointer, ref float coord) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glFogCoordfvEXT([In] IntPtr extensionPointer, ref float coord)

        #region void glFogCoordfvEXT([In] IntPtr extensionPointer, float[] coord)
        // GLvoid glFogCoordfvEXT(GLfloat coord)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg coord\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg coord\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]float32[])\r\nret")]
        #endif
        public static void glFogCoordfvEXT([In] IntPtr extensionPointer, float[] coord) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glFogCoordfvEXT([In] IntPtr extensionPointer, float[] coord)

        #region void glFogCoordfvEXT([In] IntPtr extensionPointer, IntPtr coord)
        // GLvoid glFogCoordfvEXT(GLfloat coord)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg coord\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg coord\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int)\r\nret")]
        #endif
        public static void glFogCoordfvEXT([In] IntPtr extensionPointer, IntPtr coord) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glFogCoordfvEXT([In] IntPtr extensionPointer, IntPtr coord)

        #region void glFogCoordfvEXT([In] IntPtr extensionPointer, float* coord)
        // GLvoid glFogCoordfvEXT(GLfloat coord)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg coord\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg coord\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]float32*)\r\nret")]
        #endif
        public static unsafe void glFogCoordfvEXT([In] IntPtr extensionPointer, float* coord) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glFogCoordfvEXT([In] IntPtr extensionPointer, float* coord)
        #endregion Overloads for GLvoid glFogCoordfvEXT(GLfloat coord)

        #region Overloads for GLvoid glFogCoorddvEXT(GLdouble coord)
        #region void glFogCoorddvEXT([In] IntPtr extensionPointer, ref double coord)
        // GLvoid glFogCoorddvEXT(GLdouble coord)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg coord\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]float64)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg coord\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]float64)\r\nret")]
        #endif
        public static void glFogCoorddvEXT([In] IntPtr extensionPointer, ref double coord) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glFogCoorddvEXT([In] IntPtr extensionPointer, ref double coord)

        #region void glFogCoorddvEXT([In] IntPtr extensionPointer, double[] coord)
        // GLvoid glFogCoorddvEXT(GLdouble coord)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg coord\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]float64[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg coord\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]float64[])\r\nret")]
        #endif
        public static void glFogCoorddvEXT([In] IntPtr extensionPointer, double[] coord) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glFogCoorddvEXT([In] IntPtr extensionPointer, double[] coord)

        #region void glFogCoorddvEXT([In] IntPtr extensionPointer, IntPtr coord)
        // GLvoid glFogCoorddvEXT(GLdouble coord)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg coord\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg coord\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int)\r\nret")]
        #endif
        public static void glFogCoorddvEXT([In] IntPtr extensionPointer, IntPtr coord) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glFogCoorddvEXT([In] IntPtr extensionPointer, IntPtr coord)

        #region void glFogCoorddvEXT([In] IntPtr extensionPointer, double* coord)
        // GLvoid glFogCoorddvEXT(GLdouble coord)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg coord\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]float64*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg coord\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]float64*)\r\nret")]
        #endif
        public static unsafe void glFogCoorddvEXT([In] IntPtr extensionPointer, double* coord) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glFogCoorddvEXT([In] IntPtr extensionPointer, double* coord)
        #endregion Overloads for GLvoid glFogCoorddvEXT(GLdouble coord)

        #region Overloads for GLvoid glFogCoordPointerEXT(GLenum type, GLsizei stride, GLvoid* pointer)
        #region void glFogCoordPointerEXT([In] IntPtr extensionPointer, int type, int stride, short[] pointer)
        // GLvoid glFogCoordPointerEXT(GLenum type, GLsizei stride, GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int16[])\r\nret")]
        #endif
        public static void glFogCoordPointerEXT([In] IntPtr extensionPointer, int type, int stride, short[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glFogCoordPointerEXT([In] IntPtr extensionPointer, int type, int stride, short[] pointer)

        #region void glFogCoordPointerEXT([In] IntPtr extensionPointer, int type, int stride, float[] pointer)
        // GLvoid glFogCoordPointerEXT(GLenum type, GLsizei stride, GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]float32[])\r\nret")]
        #endif
        public static void glFogCoordPointerEXT([In] IntPtr extensionPointer, int type, int stride, float[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glFogCoordPointerEXT([In] IntPtr extensionPointer, int type, int stride, float[] pointer)

        #region void glFogCoordPointerEXT([In] IntPtr extensionPointer, int type, int stride, int[] pointer)
        // GLvoid glFogCoordPointerEXT(GLenum type, GLsizei stride, GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32[])\r\nret")]
        #endif
        public static void glFogCoordPointerEXT([In] IntPtr extensionPointer, int type, int stride, int[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glFogCoordPointerEXT([In] IntPtr extensionPointer, int type, int stride, int[] pointer)

        #region void glFogCoordPointerEXT([In] IntPtr extensionPointer, int type, int stride, IntPtr pointer)
        // GLvoid glFogCoordPointerEXT(GLenum type, GLsizei stride, GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]native int)\r\nret")]
        #endif
        public static void glFogCoordPointerEXT([In] IntPtr extensionPointer, int type, int stride, IntPtr pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glFogCoordPointerEXT([In] IntPtr extensionPointer, int type, int stride, IntPtr pointer)

        #region void glFogCoordPointerEXT([In] IntPtr extensionPointer, int type, int stride, byte[] pointer)
        // GLvoid glFogCoordPointerEXT(GLenum type, GLsizei stride, GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]unsigned int8[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]unsigned int8[])\r\nret")]
        #endif
        public static void glFogCoordPointerEXT([In] IntPtr extensionPointer, int type, int stride, byte[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glFogCoordPointerEXT([In] IntPtr extensionPointer, int type, int stride, byte[] pointer)

        #region void glFogCoordPointerEXT([In] IntPtr extensionPointer, int type, int stride, double[] pointer)
        // GLvoid glFogCoordPointerEXT(GLenum type, GLsizei stride, GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]float64[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]float64[])\r\nret")]
        #endif
        public static void glFogCoordPointerEXT([In] IntPtr extensionPointer, int type, int stride, double[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glFogCoordPointerEXT([In] IntPtr extensionPointer, int type, int stride, double[] pointer)

        #region void glFogCoordPointerEXT([In] IntPtr extensionPointer, int type, int stride, uint[] pointer)
        // GLvoid glFogCoordPointerEXT(GLenum type, GLsizei stride, GLvoid* pointer)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]unsigned int32[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]unsigned int32[])\r\nret")]
        #endif
        public static void glFogCoordPointerEXT([In] IntPtr extensionPointer, int type, int stride, uint[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glFogCoordPointerEXT([In] IntPtr extensionPointer, int type, int stride, uint[] pointer)

        #region void glFogCoordPointerEXT([In] IntPtr extensionPointer, int type, int stride, sbyte[] pointer)
        // GLvoid glFogCoordPointerEXT(GLenum type, GLsizei stride, GLvoid* pointer)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int8[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int8[])\r\nret")]
        #endif
        public static void glFogCoordPointerEXT([In] IntPtr extensionPointer, int type, int stride, sbyte[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glFogCoordPointerEXT([In] IntPtr extensionPointer, int type, int stride, sbyte[] pointer)

        #region void glFogCoordPointerEXT([In] IntPtr extensionPointer, int type, int stride, ushort[] pointer)
        // GLvoid glFogCoordPointerEXT(GLenum type, GLsizei stride, GLvoid* pointer)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]unsigned int16[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]unsigned int16[])\r\nret")]
        #endif
        public static void glFogCoordPointerEXT([In] IntPtr extensionPointer, int type, int stride, ushort[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glFogCoordPointerEXT([In] IntPtr extensionPointer, int type, int stride, ushort[] pointer)

        #region void glFogCoordPointerEXT([In] IntPtr extensionPointer, int type, int stride, void* pointer)
        // GLvoid glFogCoordPointerEXT(GLenum type, GLsizei stride, GLvoid* pointer)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]void*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]void*)\r\nret")]
        #endif
        public static unsafe void glFogCoordPointerEXT([In] IntPtr extensionPointer, int type, int stride, void* pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glFogCoordPointerEXT([In] IntPtr extensionPointer, int type, int stride, void* pointer)
        #endregion Overloads for GLvoid glFogCoordPointerEXT(GLenum type, GLsizei stride, GLvoid* pointer)
        #endregion GL_EXT_fog_coord Methods
        #endregion GL_EXT_fog_coord (149)

        #region GL_EXT_texture_env_combine (158)
        #region GL_EXT_texture_env_combine Constants
        #region GL_COMBINE_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COMBINE_EXT 0x8570
        public const int GL_COMBINE_EXT = 0x8570;
        #endregion GL_COMBINE_EXT

        #region GL_COMBINE_RGB_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COMBINE_RGB_EXT 0x8571
        public const int GL_COMBINE_RGB_EXT = 0x8571;
        #endregion GL_COMBINE_RGB_EXT

        #region GL_COMBINE_ALPHA_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COMBINE_ALPHA_EXT 0x8572
        public const int GL_COMBINE_ALPHA_EXT = 0x8572;
        #endregion GL_COMBINE_ALPHA_EXT

        #region GL_SOURCE0_RGB_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SOURCE0_RGB_EXT 0x8580
        public const int GL_SOURCE0_RGB_EXT = 0x8580;
        #endregion GL_SOURCE0_RGB_EXT

        #region GL_SOURCE1_RGB_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SOURCE1_RGB_EXT 0x8581
        public const int GL_SOURCE1_RGB_EXT = 0x8581;
        #endregion GL_SOURCE1_RGB_EXT

        #region GL_SOURCE2_RGB_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SOURCE2_RGB_EXT 0x8582
        public const int GL_SOURCE2_RGB_EXT = 0x8582;
        #endregion GL_SOURCE2_RGB_EXT

        #region GL_SOURCE0_ALPHA_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SOURCE0_ALPHA_EXT 0x8588
        public const int GL_SOURCE0_ALPHA_EXT = 0x8588;
        #endregion GL_SOURCE0_ALPHA_EXT

        #region GL_SOURCE1_ALPHA_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SOURCE1_ALPHA_EXT 0x8589
        public const int GL_SOURCE1_ALPHA_EXT = 0x8589;
        #endregion GL_SOURCE1_ALPHA_EXT

        #region GL_SOURCE2_ALPHA_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SOURCE2_ALPHA_EXT 0x858A
        public const int GL_SOURCE2_ALPHA_EXT = 0x858A;
        #endregion GL_SOURCE2_ALPHA_EXT

        #region GL_OPERAND0_RGB_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OPERAND0_RGB_EXT 0x8590
        public const int GL_OPERAND0_RGB_EXT = 0x8590;
        #endregion GL_OPERAND0_RGB_EXT

        #region GL_OPERAND1_RGB_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OPERAND1_RGB_EXT 0x8591
        public const int GL_OPERAND1_RGB_EXT = 0x8591;
        #endregion GL_OPERAND1_RGB_EXT

        #region GL_OPERAND2_RGB_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OPERAND2_RGB_EXT 0x8592
        public const int GL_OPERAND2_RGB_EXT = 0x8592;
        #endregion GL_OPERAND2_RGB_EXT

        #region GL_OPERAND0_ALPHA_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OPERAND0_ALPHA_EXT 0x8598
        public const int GL_OPERAND0_ALPHA_EXT = 0x8598;
        #endregion GL_OPERAND0_ALPHA_EXT

        #region GL_OPERAND1_ALPHA_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OPERAND1_ALPHA_EXT 0x8599
        public const int GL_OPERAND1_ALPHA_EXT = 0x8599;
        #endregion GL_OPERAND1_ALPHA_EXT

        #region GL_OPERAND2_ALPHA_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OPERAND2_ALPHA_EXT 0x859A
        public const int GL_OPERAND2_ALPHA_EXT = 0x859A;
        #endregion GL_OPERAND2_ALPHA_EXT

        #region GL_RGB_SCALE_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_RGB_SCALE_EXT 0x8573
        public const int GL_RGB_SCALE_EXT = 0x8573;
        #endregion GL_RGB_SCALE_EXT

        #region GL_ADD_SIGNED_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_ADD_SIGNED_EXT 0x8574
        public const int GL_ADD_SIGNED_EXT = 0x8574;
        #endregion GL_ADD_SIGNED_EXT

        #region GL_INTERPOLATE_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_INTERPOLATE_EXT 0x8575
        public const int GL_INTERPOLATE_EXT = 0x8575;
        #endregion GL_INTERPOLATE_EXT

        #region GL_CONSTANT_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_CONSTANT_EXT 0x8576
        public const int GL_CONSTANT_EXT = 0x8576;
        #endregion GL_CONSTANT_EXT

        #region GL_PRIMARY_COLOR_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PRIMARY_COLOR_EXT 0x8577
        public const int GL_PRIMARY_COLOR_EXT = 0x8577;
        #endregion GL_PRIMARY_COLOR_EXT

        #region GL_PREVIOUS_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PREVIOUS_EXT 0x8578
        public const int GL_PREVIOUS_EXT = 0x8578;
        #endregion GL_PREVIOUS_EXT
        #endregion GL_EXT_texture_env_combine Constants
        #endregion GL_EXT_texture_env_combine (158)

        #region GL_EXT_blend_func_separate (173)
        #region GL_EXT_blend_func_separate Constants
        #region GL_BLEND_DST_RGB_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_BLEND_DST_RGB_EXT 0x80C8
        public const int GL_BLEND_DST_RGB_EXT = 0x80C8;
        #endregion GL_BLEND_DST_RGB_EXT

        #region GL_BLEND_SRC_RGB_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_BLEND_SRC_RGB_EXT 0x80C9
        public const int GL_BLEND_SRC_RGB_EXT = 0x80C9;
        #endregion GL_BLEND_SRC_RGB_EXT

        #region GL_BLEND_DST_ALPHA_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_BLEND_DST_ALPHA_EXT 0x80CA
        public const int GL_BLEND_DST_ALPHA_EXT = 0x80CA;
        #endregion GL_BLEND_DST_ALPHA_EXT

        #region GL_BLEND_SRC_ALPHA_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_BLEND_SRC_ALPHA_EXT 0x80CB
        public const int GL_BLEND_SRC_ALPHA_EXT = 0x80CB;
        #endregion GL_BLEND_SRC_ALPHA_EXT
        #endregion GL_EXT_blend_func_separate Constants

        #region GL_EXT_blend_func_separate Methods
        #region void glBlendFuncSeparateEXT([In] IntPtr extensionPointer, int sfactorRGB, int dfactorRGB, int sfactorAlpha, int dfactorAlpha)
        // GLvoid glBlendFuncSeparateEXT(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg sfactorRGB\r\nldarg dfactorRGB\r\nldarg sfactorAlpha\r\nldarg dfactorAlpha\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg sfactorRGB\r\nldarg dfactorRGB\r\nldarg sfactorAlpha\r\nldarg dfactorAlpha\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32)\r\nret")]
        #endif
        public static void glBlendFuncSeparateEXT([In] IntPtr extensionPointer, int sfactorRGB, int dfactorRGB, int sfactorAlpha, int dfactorAlpha) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glBlendFuncSeparateEXT([In] IntPtr extensionPointer, int sfactorRGB, int dfactorRGB, int sfactorAlpha, int dfactorAlpha)
        #endregion GL_EXT_blend_func_separate Methods
        #endregion GL_EXT_blend_func_separate (173)

        #region GL_EXT_stencil_wrap (176)
        #region GL_EXT_stencil_wrap Constants
        #region GL_INCR_WRAP_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_INCR_WRAP_EXT 0x8507
        public const int GL_INCR_WRAP_EXT = 0x8507;
        #endregion GL_INCR_WRAP_EXT

        #region GL_DECR_WRAP_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DECR_WRAP_EXT 0x8508
        public const int GL_DECR_WRAP_EXT = 0x8508;
        #endregion GL_DECR_WRAP_EXT
        #endregion GL_EXT_stencil_wrap Constants
        #endregion GL_EXT_stencil_wrap (176)

        #region GL_EXT_422_pixels (178)
        #region GL_EXT_422_pixels Constants
        #region GL_422_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_422_EXT 0x80CC
        public const int GL_422_EXT = 0x80CC;
        #endregion GL_422_EXT

        #region GL_422_REV_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_422_REV_EXT 0x80CD
        public const int GL_422_REV_EXT = 0x80CD;
        #endregion GL_422_REV_EXT

        #region GL_422_AVERAGE_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_422_AVERAGE_EXT 0x80CE
        public const int GL_422_AVERAGE_EXT = 0x80CE;
        #endregion GL_422_AVERAGE_EXT

        #region GL_422_REV_AVERAGE_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_422_REV_AVERAGE_EXT 0x80CF
        public const int GL_422_REV_AVERAGE_EXT = 0x80CF;
        #endregion GL_422_REV_AVERAGE_EXT
        #endregion GL_EXT_422_pixels Constants
        #endregion GL_EXT_422_pixels (178)

        #region GL_EXT_texture_env_add (185)
        #endregion GL_EXT_texture_env_add (185)

        #region GL_EXT_texture_lod_bias (186)
        #region GL_EXT_texture_lod_bias Constants
        #region GL_TEXTURE_FILTER_CONTROL_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_FILTER_CONTROL_EXT 0x8500
        public const int GL_TEXTURE_FILTER_CONTROL_EXT = 0x8500;
        #endregion GL_TEXTURE_FILTER_CONTROL_EXT

        #region GL_TEXTURE_LOD_BIAS_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_LOD_BIAS_EXT 0x8501
        public const int GL_TEXTURE_LOD_BIAS_EXT = 0x8501;
        #endregion GL_TEXTURE_LOD_BIAS_EXT

        #region GL_MAX_TEXTURE_LOD_BIAS_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAX_TEXTURE_LOD_BIAS_EXT 0x84FD
        public const int GL_MAX_TEXTURE_LOD_BIAS_EXT = 0x84FD;
        #endregion GL_MAX_TEXTURE_LOD_BIAS_EXT
        #endregion GL_EXT_texture_lod_bias Constants
        #endregion GL_EXT_texture_lod_bias (186)

        #region GL_EXT_texture_filter_anisotropic (187)
        #region GL_EXT_texture_filter_anisotropic Constants
        #region GL_TEXTURE_MAX_ANISOTROPY_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_MAX_ANISOTROPY_EXT 0x84FE
        public const int GL_TEXTURE_MAX_ANISOTROPY_EXT = 0x84FE;
        #endregion GL_TEXTURE_MAX_ANISOTROPY_EXT

        #region GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT 0x84FF
        public const int GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT = 0x84FF;
        #endregion GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT
        #endregion GL_EXT_texture_filter_anisotropic Constants
        #endregion GL_EXT_texture_filter_anisotropic (187)

        #region GL_EXT_vertex_weighting (188)
        #region GL_EXT_vertex_weighting Constants
        #region GL_VERTEX_WEIGHTING_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VERTEX_WEIGHTING_EXT 0x8509
        public const int GL_VERTEX_WEIGHTING_EXT = 0x8509;
        #endregion GL_VERTEX_WEIGHTING_EXT

        #region GL_MODELVIEW0_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MODELVIEW0_EXT 0x1700
        public const int GL_MODELVIEW0_EXT = 0x1700;
        #endregion GL_MODELVIEW0_EXT

        #region GL_MODELVIEW1_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MODELVIEW1_EXT 0x850A
        public const int GL_MODELVIEW1_EXT = 0x850A;
        #endregion GL_MODELVIEW1_EXT

        #region GL_MODELVIEW0_MATRIX_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MODELVIEW0_MATRIX_EXT 0x0BA6
        public const int GL_MODELVIEW0_MATRIX_EXT = 0x0BA6;
        #endregion GL_MODELVIEW0_MATRIX_EXT

        #region GL_MODELVIEW1_MATRIX_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MODELVIEW1_MATRIX_EXT 0x8506
        public const int GL_MODELVIEW1_MATRIX_EXT = 0x8506;
        #endregion GL_MODELVIEW1_MATRIX_EXT

        #region GL_CURRENT_VERTEX_WEIGHT_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_CURRENT_VERTEX_WEIGHT_EXT 0x850B
        public const int GL_CURRENT_VERTEX_WEIGHT_EXT = 0x850B;
        #endregion GL_CURRENT_VERTEX_WEIGHT_EXT

        #region GL_VERTEX_WEIGHT_ARRAY_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VERTEX_WEIGHT_ARRAY_EXT 0x850C
        public const int GL_VERTEX_WEIGHT_ARRAY_EXT = 0x850C;
        #endregion GL_VERTEX_WEIGHT_ARRAY_EXT

        #region GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT 0x850D
        public const int GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT = 0x850D;
        #endregion GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT

        #region GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT 0x850E
        public const int GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT = 0x850E;
        #endregion GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT

        #region GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT 0x850F
        public const int GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT = 0x850F;
        #endregion GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT

        #region GL_MODELVIEW0_STACK_DEPTH_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MODELVIEW0_STACK_DEPTH_EXT 0x0BA3
        public const int GL_MODELVIEW0_STACK_DEPTH_EXT = 0x0BA3;
        #endregion GL_MODELVIEW0_STACK_DEPTH_EXT

        #region GL_MODELVIEW1_STACK_DEPTH_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MODELVIEW1_STACK_DEPTH_EXT 0x8502
        public const int GL_MODELVIEW1_STACK_DEPTH_EXT = 0x8502;
        #endregion GL_MODELVIEW1_STACK_DEPTH_EXT

        #region GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT 0x8510
        public const int GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT = 0x8510;
        #endregion GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT
        #endregion GL_EXT_vertex_weighting Constants

        #region GL_EXT_vertex_weighting Methods
        #region void glVertexWeightfEXT([In] IntPtr extensionPointer, float weight)
        // GLvoid glVertexWeightfEXT(GLfloat weight)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg weight\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg weight\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]float32)\r\nret")]
        #endif
        public static void glVertexWeightfEXT([In] IntPtr extensionPointer, float weight) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexWeightfEXT([In] IntPtr extensionPointer, float weight)

        #region Overloads for GLvoid glVertexWeightfvEXT(GLfloat* weight)
        #region void glVertexWeightfvEXT([In] IntPtr extensionPointer, ref float weight)
        // GLvoid glVertexWeightfvEXT(GLfloat* weight)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg weight\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg weight\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]float32)\r\nret")]
        #endif
        public static void glVertexWeightfvEXT([In] IntPtr extensionPointer, ref float weight) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexWeightfvEXT([In] IntPtr extensionPointer, ref float weight)

        #region void glVertexWeightfvEXT([In] IntPtr extensionPointer, float[] weight)
        // GLvoid glVertexWeightfvEXT(GLfloat* weight)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg weight\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg weight\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]float32[])\r\nret")]
        #endif
        public static void glVertexWeightfvEXT([In] IntPtr extensionPointer, float[] weight) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexWeightfvEXT([In] IntPtr extensionPointer, float[] weight)

        #region void glVertexWeightfvEXT([In] IntPtr extensionPointer, IntPtr weight)
        // GLvoid glVertexWeightfvEXT(GLfloat* weight)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg weight\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg weight\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int)\r\nret")]
        #endif
        public static void glVertexWeightfvEXT([In] IntPtr extensionPointer, IntPtr weight) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexWeightfvEXT([In] IntPtr extensionPointer, IntPtr weight)

        #region void glVertexWeightfvEXT([In] IntPtr extensionPointer, float* weight)
        // GLvoid glVertexWeightfvEXT(GLfloat* weight)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg weight\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg weight\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]float32*)\r\nret")]
        #endif
        public static unsafe void glVertexWeightfvEXT([In] IntPtr extensionPointer, float* weight) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexWeightfvEXT([In] IntPtr extensionPointer, float* weight)
        #endregion Overloads for GLvoid glVertexWeightfvEXT(GLfloat* weight)

        #region Overloads for GLvoid glVertexWeightPointerEXT(GLint size, GLenum type, GLsizei stride, GLvoid* pointer)
        #region void glVertexWeightPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, short[] pointer)
        // GLvoid glVertexWeightPointerEXT(GLint size, GLenum type, GLsizei stride, GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int16[])\r\nret")]
        #endif
        public static void glVertexWeightPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, short[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexWeightPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, short[] pointer)

        #region void glVertexWeightPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, float[] pointer)
        // GLvoid glVertexWeightPointerEXT(GLint size, GLenum type, GLsizei stride, GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]float32[])\r\nret")]
        #endif
        public static void glVertexWeightPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, float[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexWeightPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, float[] pointer)

        #region void glVertexWeightPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, int[] pointer)
        // GLvoid glVertexWeightPointerEXT(GLint size, GLenum type, GLsizei stride, GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32[])\r\nret")]
        #endif
        public static void glVertexWeightPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, int[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexWeightPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, int[] pointer)

        #region void glVertexWeightPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, IntPtr pointer)
        // GLvoid glVertexWeightPointerEXT(GLint size, GLenum type, GLsizei stride, GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]native int)\r\nret")]
        #endif
        public static void glVertexWeightPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, IntPtr pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexWeightPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, IntPtr pointer)

        #region void glVertexWeightPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, byte[] pointer)
        // GLvoid glVertexWeightPointerEXT(GLint size, GLenum type, GLsizei stride, GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]unsigned int8[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]unsigned int8[])\r\nret")]
        #endif
        public static void glVertexWeightPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, byte[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexWeightPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, byte[] pointer)

        #region void glVertexWeightPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, double[] pointer)
        // GLvoid glVertexWeightPointerEXT(GLint size, GLenum type, GLsizei stride, GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]float64[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]float64[])\r\nret")]
        #endif
        public static void glVertexWeightPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, double[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexWeightPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, double[] pointer)

        #region void glVertexWeightPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, uint[] pointer)
        // GLvoid glVertexWeightPointerEXT(GLint size, GLenum type, GLsizei stride, GLvoid* pointer)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]unsigned int32[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]unsigned int32[])\r\nret")]
        #endif
        public static void glVertexWeightPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, uint[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexWeightPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, uint[] pointer)

        #region void glVertexWeightPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, sbyte[] pointer)
        // GLvoid glVertexWeightPointerEXT(GLint size, GLenum type, GLsizei stride, GLvoid* pointer)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int8[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int8[])\r\nret")]
        #endif
        public static void glVertexWeightPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, sbyte[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexWeightPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, sbyte[] pointer)

        #region void glVertexWeightPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, ushort[] pointer)
        // GLvoid glVertexWeightPointerEXT(GLint size, GLenum type, GLsizei stride, GLvoid* pointer)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]unsigned int16[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]unsigned int16[])\r\nret")]
        #endif
        public static void glVertexWeightPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, ushort[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexWeightPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, ushort[] pointer)

        #region void glVertexWeightPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, void* pointer)
        // GLvoid glVertexWeightPointerEXT(GLint size, GLenum type, GLsizei stride, GLvoid* pointer)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]void*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]void*)\r\nret")]
        #endif
        public static unsafe void glVertexWeightPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, void* pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexWeightPointerEXT([In] IntPtr extensionPointer, int size, int type, int stride, void* pointer)
        #endregion Overloads for GLvoid glVertexWeightPointerEXT(GLint size, GLenum type, GLsizei stride, GLvoid* pointer)
        #endregion GL_EXT_vertex_weighting Methods
        #endregion GL_EXT_vertex_weighting (188)

        #region GL_EXT_texture_compression_s3tc (198)
        #region GL_EXT_texture_compression_s3tc Constants
        #region GL_COMPRESSED_RGB_S3TC_DXT1_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COMPRESSED_RGB_S3TC_DXT1_EXT 0x83F0
        public const int GL_COMPRESSED_RGB_S3TC_DXT1_EXT = 0x83F0;
        #endregion GL_COMPRESSED_RGB_S3TC_DXT1_EXT

        #region GL_COMPRESSED_RGBA_S3TC_DXT1_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COMPRESSED_RGBA_S3TC_DXT1_EXT 0x83F1
        public const int GL_COMPRESSED_RGBA_S3TC_DXT1_EXT = 0x83F1;
        #endregion GL_COMPRESSED_RGBA_S3TC_DXT1_EXT

        #region GL_COMPRESSED_RGBA_S3TC_DXT3_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COMPRESSED_RGBA_S3TC_DXT3_EXT 0x83F2
        public const int GL_COMPRESSED_RGBA_S3TC_DXT3_EXT = 0x83F2;
        #endregion GL_COMPRESSED_RGBA_S3TC_DXT3_EXT

        #region GL_COMPRESSED_RGBA_S3TC_DXT5_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COMPRESSED_RGBA_S3TC_DXT5_EXT 0x83F3
        public const int GL_COMPRESSED_RGBA_S3TC_DXT5_EXT = 0x83F3;
        #endregion GL_COMPRESSED_RGBA_S3TC_DXT5_EXT
        #endregion GL_EXT_texture_compression_s3tc Constants
        #endregion GL_EXT_texture_compression_s3tc (198)

        #region GL_EXT_multisample (209)
        /// <summary>
        /// 
        /// </summary>
        #region GL_EXT_multisample Constants
        /// <summary>
        /// 
        /// </summary>
        #region GL_MULTISAMPLE_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MULTISAMPLE_EXT 0x809D
        public const int GL_MULTISAMPLE_EXT = 0x809D;
        #endregion GL_MULTISAMPLE_EXT

        #region GL_SAMPLE_ALPHA_TO_MASK_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SAMPLE_ALPHA_TO_MASK_EXT 0x809E
        public const int GL_SAMPLE_ALPHA_TO_MASK_EXT = 0x809E;
        #endregion GL_SAMPLE_ALPHA_TO_MASK_EXT

        #region GL_SAMPLE_ALPHA_TO_ONE_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SAMPLE_ALPHA_TO_ONE_EXT 0x809F
        public const int GL_SAMPLE_ALPHA_TO_ONE_EXT = 0x809F;
        #endregion GL_SAMPLE_ALPHA_TO_ONE_EXT

        #region GL_SAMPLE_MASK_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SAMPLE_MASK_EXT 0x80A0
        public const int GL_SAMPLE_MASK_EXT = 0x80A0;
        #endregion GL_SAMPLE_MASK_EXT

        #region GL_MULTISAMPLE_BIT_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MULTISAMPLE_BIT_EXT 0x20000000
        public const int GL_MULTISAMPLE_BIT_EXT = 0x20000000;
        #endregion GL_MULTISAMPLE_BIT_EXT

        #region GL_1PASS_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_1PASS_EXT 0x80A1
        public const int GL_1PASS_EXT = 0x80A1;
        #endregion GL_1PASS_EXT

        #region GL_2PASS_0_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_2PASS_0_EXT 0x80A2
        public const int GL_2PASS_0_EXT = 0x80A2;
        #endregion GL_2PASS_0_EXT

        #region GL_2PASS_1_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_2PASS_1_EXT 0x80A3
        public const int GL_2PASS_1_EXT = 0x80A3;
        #endregion GL_2PASS_1_EXT

        #region GL_4PASS_0_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_4PASS_0_EXT 0x80A4
        public const int GL_4PASS_0_EXT = 0x80A4;
        #endregion GL_4PASS_0_EXT

        #region GL_4PASS_1_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_4PASS_1_EXT 0x80A5
        public const int GL_4PASS_1_EXT = 0x80A5;
        #endregion GL_4PASS_1_EXT

        #region GL_4PASS_2_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_4PASS_2_EXT 0x80A6
        public const int GL_4PASS_2_EXT = 0x80A6;
        #endregion GL_4PASS_2_EXT

        #region GL_4PASS_3_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_4PASS_3_EXT 0x80A7
        public const int GL_4PASS_3_EXT = 0x80A7;
        #endregion GL_4PASS_3_EXT

        #region GL_SAMPLE_BUFFERS_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SAMPLE_BUFFERS_EXT 0x80A8
        public const int GL_SAMPLE_BUFFERS_EXT = 0x80A8;
        #endregion GL_SAMPLE_BUFFERS_EXT

        #region GL_SAMPLES_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SAMPLES_EXT 0x80A9
        public const int GL_SAMPLES_EXT = 0x80A9;
        #endregion GL_SAMPLES_EXT

        #region GL_SAMPLE_MASK_VALUE_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SAMPLE_MASK_VALUE_EXT 0x80AA
        public const int GL_SAMPLE_MASK_VALUE_EXT = 0x80AA;
        #endregion GL_SAMPLE_MASK_VALUE_EXT

        #region GL_SAMPLE_MASK_INVERT_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SAMPLE_MASK_INVERT_EXT 0x80AB
        public const int GL_SAMPLE_MASK_INVERT_EXT = 0x80AB;
        #endregion GL_SAMPLE_MASK_INVERT_EXT

        #region GL_SAMPLE_PATTERN_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SAMPLE_PATTERN_EXT 0x80AC
        public const int GL_SAMPLE_PATTERN_EXT = 0x80AC;
        #endregion GL_SAMPLE_PATTERN_EXT
        #endregion GL_EXT_multisample Constants

        #region GL_EXT_multisample Methods
        #region void glSampleMaskEXT([In] IntPtr extensionPointer, float maskValue, int invert)
        // GLvoid glSampleMaskEXT(GLclampf maskValue, GLboolean invert)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg maskValue\r\nldarg invert\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]float32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg maskValue\r\nldarg invert\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]float32,[in]int32)\r\nret")]
        #endif
        public static void glSampleMaskEXT([In] IntPtr extensionPointer, float maskValue, int invert) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSampleMaskEXT([In] IntPtr extensionPointer, float maskValue, int invert)

        #region void glSamplePatternEXT([In] IntPtr extensionPointer, int pattern)
        // GLvoid glSamplePatternEXT(GLenum pattern)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg pattern\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg pattern\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32)\r\nret")]
        #endif
        public static void glSamplePatternEXT([In] IntPtr extensionPointer, int pattern) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSamplePatternEXT([In] IntPtr extensionPointer, int pattern)
        #endregion GL_EXT_multisample Methods
        #endregion GL_EXT_multisample (209)

        #region GL_EXT_texture_env_dot3 (220)
        #region GL_EXT_texture_env_dot3 Constants
        #region GL_DOT3_RGB_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DOT3_RGB_EXT 0x8740
        public const int GL_DOT3_RGB_EXT = 0x8740;
        #endregion GL_DOT3_RGB_EXT

        #region GL_DOT3_RGBA_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DOT3_RGBA_EXT 0x8741
        public const int GL_DOT3_RGBA_EXT = 0x8741;
        #endregion GL_DOT3_RGBA_EXT
        #endregion GL_EXT_texture_env_dot3 Constants
        #endregion GL_EXT_texture_env_dot3 (220)

        #region GL_EXT_vertex_shader (248)
        #region GL_EXT_vertex_shader Constants
        #region GL_VERTEX_SHADER_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VERTEX_SHADER_EXT 0x8780
        public const int GL_VERTEX_SHADER_EXT = 0x8780;
        #endregion GL_VERTEX_SHADER_EXT

        #region GL_VARIANT_VALUE_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VARIANT_VALUE_EXT 0x87E4
        public const int GL_VARIANT_VALUE_EXT = 0x87E4;
        #endregion GL_VARIANT_VALUE_EXT

        #region GL_VARIANT_DATATYPE_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VARIANT_DATATYPE_EXT 0x87E5
        public const int GL_VARIANT_DATATYPE_EXT = 0x87E5;
        #endregion GL_VARIANT_DATATYPE_EXT

        #region GL_VARIANT_ARRAY_STRIDE_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VARIANT_ARRAY_STRIDE_EXT 0x87E6
        public const int GL_VARIANT_ARRAY_STRIDE_EXT = 0x87E6;
        #endregion GL_VARIANT_ARRAY_STRIDE_EXT

        #region GL_VARIANT_ARRAY_TYPE_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VARIANT_ARRAY_TYPE_EXT 0x87E7
        public const int GL_VARIANT_ARRAY_TYPE_EXT = 0x87E7;
        #endregion GL_VARIANT_ARRAY_TYPE_EXT

        #region GL_VARIANT_ARRAY_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VARIANT_ARRAY_EXT 0x87E8
        public const int GL_VARIANT_ARRAY_EXT = 0x87E8;
        #endregion GL_VARIANT_ARRAY_EXT

        #region GL_VARIANT_ARRAY_POINTER_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VARIANT_ARRAY_POINTER_EXT 0x87E9
        public const int GL_VARIANT_ARRAY_POINTER_EXT = 0x87E9;
        #endregion GL_VARIANT_ARRAY_POINTER_EXT

        #region GL_INVARIANT_VALUE_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_INVARIANT_VALUE_EXT 0x87EA
        public const int GL_INVARIANT_VALUE_EXT = 0x87EA;
        #endregion GL_INVARIANT_VALUE_EXT

        #region GL_INVARIANT_DATATYPE_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_INVARIANT_DATATYPE_EXT 0x87EB
        public const int GL_INVARIANT_DATATYPE_EXT = 0x87EB;
        #endregion GL_INVARIANT_DATATYPE_EXT

        #region GL_LOCAL_CONSTANT_VALUE_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_LOCAL_CONSTANT_VALUE_EXT 0x87EC
        public const int GL_LOCAL_CONSTANT_VALUE_EXT = 0x87EC;
        #endregion GL_LOCAL_CONSTANT_VALUE_EXT

        #region GL_LOCAL_CONSTANT_DATATYPE_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_LOCAL_CONSTANT_DATATYPE_EXT 0x87ED
        public const int GL_LOCAL_CONSTANT_DATATYPE_EXT = 0x87ED;
        #endregion GL_LOCAL_CONSTANT_DATATYPE_EXT

        #region GL_OP_INDEX_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OP_INDEX_EXT 0x8782
        public const int GL_OP_INDEX_EXT = 0x8782;
        #endregion GL_OP_INDEX_EXT

        #region GL_OP_NEGATE_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OP_NEGATE_EXT 0x8783
        public const int GL_OP_NEGATE_EXT = 0x8783;
        #endregion GL_OP_NEGATE_EXT

        #region GL_OP_DOT3_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OP_DOT3_EXT 0x8784
        public const int GL_OP_DOT3_EXT = 0x8784;
        #endregion GL_OP_DOT3_EXT

        #region GL_OP_DOT4_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OP_DOT4_EXT 0x8785
        public const int GL_OP_DOT4_EXT = 0x8785;
        #endregion GL_OP_DOT4_EXT

        #region GL_OP_MUL_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OP_MUL_EXT 0x8786
        public const int GL_OP_MUL_EXT = 0x8786;
        #endregion GL_OP_MUL_EXT

        #region GL_OP_ADD_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OP_ADD_EXT 0x8787
        public const int GL_OP_ADD_EXT = 0x8787;
        #endregion GL_OP_ADD_EXT

        #region GL_OP_MADD_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OP_MADD_EXT 0x8788
        public const int GL_OP_MADD_EXT = 0x8788;
        #endregion GL_OP_MADD_EXT

        #region GL_OP_FRAC_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OP_FRAC_EXT 0x8789
        public const int GL_OP_FRAC_EXT = 0x8789;
        #endregion GL_OP_FRAC_EXT

        #region GL_OP_MAX_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OP_MAX_EXT 0x878A
        public const int GL_OP_MAX_EXT = 0x878A;
        #endregion GL_OP_MAX_EXT

        #region GL_OP_MIN_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OP_MIN_EXT 0x878B
        public const int GL_OP_MIN_EXT = 0x878B;
        #endregion GL_OP_MIN_EXT

        #region GL_OP_SET_GE_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OP_SET_GE_EXT 0x878C
        public const int GL_OP_SET_GE_EXT = 0x878C;
        #endregion GL_OP_SET_GE_EXT

        #region GL_OP_SET_LT_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OP_SET_LT_EXT 0x878D
        public const int GL_OP_SET_LT_EXT = 0x878D;
        #endregion GL_OP_SET_LT_EXT

        #region GL_OP_CLAMP_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OP_CLAMP_EXT 0x878E
        public const int GL_OP_CLAMP_EXT = 0x878E;
        #endregion GL_OP_CLAMP_EXT

        #region GL_OP_FLOOR_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OP_FLOOR_EXT 0x878F
        public const int GL_OP_FLOOR_EXT = 0x878F;
        #endregion GL_OP_FLOOR_EXT

        #region GL_OP_ROUND_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OP_ROUND_EXT 0x8790
        public const int GL_OP_ROUND_EXT = 0x8790;
        #endregion GL_OP_ROUND_EXT

        #region GL_OP_EXP_BASE_2_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OP_EXP_BASE_2_EXT 0x8791
        public const int GL_OP_EXP_BASE_2_EXT = 0x8791;
        #endregion GL_OP_EXP_BASE_2_EXT

        #region GL_OP_LOG_BASE_2_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OP_LOG_BASE_2_EXT 0x8792
        public const int GL_OP_LOG_BASE_2_EXT = 0x8792;
        #endregion GL_OP_LOG_BASE_2_EXT

        #region GL_OP_POWER_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OP_POWER_EXT 0x8793
        public const int GL_OP_POWER_EXT = 0x8793;
        #endregion GL_OP_POWER_EXT

        #region GL_OP_RECIP_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OP_RECIP_EXT 0x8794
        public const int GL_OP_RECIP_EXT = 0x8794;
        #endregion GL_OP_RECIP_EXT

        #region GL_OP_RECIP_SQRT_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OP_RECIP_SQRT_EXT 0x8795
        public const int GL_OP_RECIP_SQRT_EXT = 0x8795;
        #endregion GL_OP_RECIP_SQRT_EXT

        #region GL_OP_SUB_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OP_SUB_EXT 0x8796
        public const int GL_OP_SUB_EXT = 0x8796;
        #endregion GL_OP_SUB_EXT

        #region GL_OP_CROSS_PRODUCT_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OP_CROSS_PRODUCT_EXT 0x8797
        public const int GL_OP_CROSS_PRODUCT_EXT = 0x8797;
        #endregion GL_OP_CROSS_PRODUCT_EXT

        #region GL_OP_MULTIPLY_MATRIX_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OP_MULTIPLY_MATRIX_EXT 0x8798
        public const int GL_OP_MULTIPLY_MATRIX_EXT = 0x8798;
        #endregion GL_OP_MULTIPLY_MATRIX_EXT

        #region GL_OP_MOV_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OP_MOV_EXT 0x8799
        public const int GL_OP_MOV_EXT = 0x8799;
        #endregion GL_OP_MOV_EXT

        #region GL_OUTPUT_VERTEX_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OUTPUT_VERTEX_EXT 0x879A
        public const int GL_OUTPUT_VERTEX_EXT = 0x879A;
        #endregion GL_OUTPUT_VERTEX_EXT

        #region GL_OUTPUT_COLOR0_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OUTPUT_COLOR0_EXT 0x879B
        public const int GL_OUTPUT_COLOR0_EXT = 0x879B;
        #endregion GL_OUTPUT_COLOR0_EXT

        #region GL_OUTPUT_COLOR1_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OUTPUT_COLOR1_EXT 0x879C
        public const int GL_OUTPUT_COLOR1_EXT = 0x879C;
        #endregion GL_OUTPUT_COLOR1_EXT

        #region GL_OUTPUT_TEXTURE_COORD0_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OUTPUT_TEXTURE_COORD0_EXT 0x879D
        public const int GL_OUTPUT_TEXTURE_COORD0_EXT = 0x879D;
        #endregion GL_OUTPUT_TEXTURE_COORD0_EXT

        #region GL_OUTPUT_TEXTURE_COORD1_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OUTPUT_TEXTURE_COORD1_EXT 0x879E
        public const int GL_OUTPUT_TEXTURE_COORD1_EXT = 0x879E;
        #endregion GL_OUTPUT_TEXTURE_COORD1_EXT

        #region GL_OUTPUT_TEXTURE_COORD2_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OUTPUT_TEXTURE_COORD2_EXT 0x879F
        public const int GL_OUTPUT_TEXTURE_COORD2_EXT = 0x879F;
        #endregion GL_OUTPUT_TEXTURE_COORD2_EXT

        #region GL_OUTPUT_TEXTURE_COORD3_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OUTPUT_TEXTURE_COORD3_EXT 0x87A0
        public const int GL_OUTPUT_TEXTURE_COORD3_EXT = 0x87A0;
        #endregion GL_OUTPUT_TEXTURE_COORD3_EXT

        #region GL_OUTPUT_TEXTURE_COORD4_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OUTPUT_TEXTURE_COORD4_EXT 0x87A1
        public const int GL_OUTPUT_TEXTURE_COORD4_EXT = 0x87A1;
        #endregion GL_OUTPUT_TEXTURE_COORD4_EXT

        #region GL_OUTPUT_TEXTURE_COORD5_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OUTPUT_TEXTURE_COORD5_EXT 0x87A2
        public const int GL_OUTPUT_TEXTURE_COORD5_EXT = 0x87A2;
        #endregion GL_OUTPUT_TEXTURE_COORD5_EXT

        #region GL_OUTPUT_TEXTURE_COORD6_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OUTPUT_TEXTURE_COORD6_EXT 0x87A3
        public const int GL_OUTPUT_TEXTURE_COORD6_EXT = 0x87A3;
        #endregion GL_OUTPUT_TEXTURE_COORD6_EXT

        #region GL_OUTPUT_TEXTURE_COORD7_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OUTPUT_TEXTURE_COORD7_EXT 0x87A4
        public const int GL_OUTPUT_TEXTURE_COORD7_EXT = 0x87A4;
        #endregion GL_OUTPUT_TEXTURE_COORD7_EXT

        #region GL_OUTPUT_TEXTURE_COORD8_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OUTPUT_TEXTURE_COORD8_EXT 0x87A5
        public const int GL_OUTPUT_TEXTURE_COORD8_EXT = 0x87A5;
        #endregion GL_OUTPUT_TEXTURE_COORD8_EXT

        #region GL_OUTPUT_TEXTURE_COORD9_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OUTPUT_TEXTURE_COORD9_EXT 0x87A6
        public const int GL_OUTPUT_TEXTURE_COORD9_EXT = 0x87A6;
        #endregion GL_OUTPUT_TEXTURE_COORD9_EXT

        #region GL_OUTPUT_TEXTURE_COORD10_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OUTPUT_TEXTURE_COORD10_EXT 0x87A7
        public const int GL_OUTPUT_TEXTURE_COORD10_EXT = 0x87A7;
        #endregion GL_OUTPUT_TEXTURE_COORD10_EXT

        #region GL_OUTPUT_TEXTURE_COORD11_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OUTPUT_TEXTURE_COORD11_EXT 0x87A8
        public const int GL_OUTPUT_TEXTURE_COORD11_EXT = 0x87A8;
        #endregion GL_OUTPUT_TEXTURE_COORD11_EXT

        #region GL_OUTPUT_TEXTURE_COORD12_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OUTPUT_TEXTURE_COORD12_EXT 0x87A9
        public const int GL_OUTPUT_TEXTURE_COORD12_EXT = 0x87A9;
        #endregion GL_OUTPUT_TEXTURE_COORD12_EXT

        #region GL_OUTPUT_TEXTURE_COORD13_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OUTPUT_TEXTURE_COORD13_EXT 0x87AA
        public const int GL_OUTPUT_TEXTURE_COORD13_EXT = 0x87AA;
        #endregion GL_OUTPUT_TEXTURE_COORD13_EXT

        #region GL_OUTPUT_TEXTURE_COORD14_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OUTPUT_TEXTURE_COORD14_EXT 0x87AB
        public const int GL_OUTPUT_TEXTURE_COORD14_EXT = 0x87AB;
        #endregion GL_OUTPUT_TEXTURE_COORD14_EXT

        #region GL_OUTPUT_TEXTURE_COORD15_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OUTPUT_TEXTURE_COORD15_EXT 0x87AC
        public const int GL_OUTPUT_TEXTURE_COORD15_EXT = 0x87AC;
        #endregion GL_OUTPUT_TEXTURE_COORD15_EXT

        #region GL_OUTPUT_TEXTURE_COORD16_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OUTPUT_TEXTURE_COORD16_EXT 0x87AD
        public const int GL_OUTPUT_TEXTURE_COORD16_EXT = 0x87AD;
        #endregion GL_OUTPUT_TEXTURE_COORD16_EXT

        #region GL_OUTPUT_TEXTURE_COORD17_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OUTPUT_TEXTURE_COORD17_EXT 0x87AE
        public const int GL_OUTPUT_TEXTURE_COORD17_EXT = 0x87AE;
        #endregion GL_OUTPUT_TEXTURE_COORD17_EXT

        #region GL_OUTPUT_TEXTURE_COORD18_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OUTPUT_TEXTURE_COORD18_EXT 0x87AF
        public const int GL_OUTPUT_TEXTURE_COORD18_EXT = 0x87AF;
        #endregion GL_OUTPUT_TEXTURE_COORD18_EXT

        #region GL_OUTPUT_TEXTURE_COORD19_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OUTPUT_TEXTURE_COORD19_EXT 0x87B0
        public const int GL_OUTPUT_TEXTURE_COORD19_EXT = 0x87B0;
        #endregion GL_OUTPUT_TEXTURE_COORD19_EXT

        #region GL_OUTPUT_TEXTURE_COORD20_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OUTPUT_TEXTURE_COORD20_EXT 0x87B1
        public const int GL_OUTPUT_TEXTURE_COORD20_EXT = 0x87B1;
        #endregion GL_OUTPUT_TEXTURE_COORD20_EXT

        #region GL_OUTPUT_TEXTURE_COORD21_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OUTPUT_TEXTURE_COORD21_EXT 0x87B2
        public const int GL_OUTPUT_TEXTURE_COORD21_EXT = 0x87B2;
        #endregion GL_OUTPUT_TEXTURE_COORD21_EXT

        #region GL_OUTPUT_TEXTURE_COORD22_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OUTPUT_TEXTURE_COORD22_EXT 0x87B3
        public const int GL_OUTPUT_TEXTURE_COORD22_EXT = 0x87B3;
        #endregion GL_OUTPUT_TEXTURE_COORD22_EXT

        #region GL_OUTPUT_TEXTURE_COORD23_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OUTPUT_TEXTURE_COORD23_EXT 0x87B4
        public const int GL_OUTPUT_TEXTURE_COORD23_EXT = 0x87B4;
        #endregion GL_OUTPUT_TEXTURE_COORD23_EXT

        #region GL_OUTPUT_TEXTURE_COORD24_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OUTPUT_TEXTURE_COORD24_EXT 0x87B5
        public const int GL_OUTPUT_TEXTURE_COORD24_EXT = 0x87B5;
        #endregion GL_OUTPUT_TEXTURE_COORD24_EXT

        #region GL_OUTPUT_TEXTURE_COORD25_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OUTPUT_TEXTURE_COORD25_EXT 0x87B6
        public const int GL_OUTPUT_TEXTURE_COORD25_EXT = 0x87B6;
        #endregion GL_OUTPUT_TEXTURE_COORD25_EXT

        #region GL_OUTPUT_TEXTURE_COORD26_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OUTPUT_TEXTURE_COORD26_EXT 0x87B7
        public const int GL_OUTPUT_TEXTURE_COORD26_EXT = 0x87B7;
        #endregion GL_OUTPUT_TEXTURE_COORD26_EXT

        #region GL_OUTPUT_TEXTURE_COORD27_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OUTPUT_TEXTURE_COORD27_EXT 0x87B8
        public const int GL_OUTPUT_TEXTURE_COORD27_EXT = 0x87B8;
        #endregion GL_OUTPUT_TEXTURE_COORD27_EXT

        #region GL_OUTPUT_TEXTURE_COORD28_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OUTPUT_TEXTURE_COORD28_EXT 0x87B9
        public const int GL_OUTPUT_TEXTURE_COORD28_EXT = 0x87B9;
        #endregion GL_OUTPUT_TEXTURE_COORD28_EXT

        #region GL_OUTPUT_TEXTURE_COORD29_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OUTPUT_TEXTURE_COORD29_EXT 0x87BA
        public const int GL_OUTPUT_TEXTURE_COORD29_EXT = 0x87BA;
        #endregion GL_OUTPUT_TEXTURE_COORD29_EXT

        #region GL_OUTPUT_TEXTURE_COORD30_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OUTPUT_TEXTURE_COORD30_EXT 0x87BB
        public const int GL_OUTPUT_TEXTURE_COORD30_EXT = 0x87BB;
        #endregion GL_OUTPUT_TEXTURE_COORD30_EXT

        #region GL_OUTPUT_TEXTURE_COORD31_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OUTPUT_TEXTURE_COORD31_EXT 0x87BC
        public const int GL_OUTPUT_TEXTURE_COORD31_EXT = 0x87BC;
        #endregion GL_OUTPUT_TEXTURE_COORD31_EXT

        #region GL_OUTPUT_FOG_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OUTPUT_FOG_EXT 0x87BD
        public const int GL_OUTPUT_FOG_EXT = 0x87BD;
        #endregion GL_OUTPUT_FOG_EXT

        #region GL_SCALAR_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SCALAR_EXT 0x87BE
        public const int GL_SCALAR_EXT = 0x87BE;
        #endregion GL_SCALAR_EXT

        #region GL_VECTOR_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VECTOR_EXT 0x87BF
        public const int GL_VECTOR_EXT = 0x87BF;
        #endregion GL_VECTOR_EXT

        #region GL_MATRIX_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MATRIX_EXT 0x87C0
        public const int GL_MATRIX_EXT = 0x87C0;
        #endregion GL_MATRIX_EXT

        #region GL_VARIANT_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VARIANT_EXT 0x87C1
        public const int GL_VARIANT_EXT = 0x87C1;
        #endregion GL_VARIANT_EXT

        #region GL_INVARIANT_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_INVARIANT_EXT 0x87C2
        public const int GL_INVARIANT_EXT = 0x87C2;
        #endregion GL_INVARIANT_EXT

        #region GL_LOCAL_CONSTANT_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_LOCAL_CONSTANT_EXT 0x87C3
        public const int GL_LOCAL_CONSTANT_EXT = 0x87C3;
        #endregion GL_LOCAL_CONSTANT_EXT

        #region GL_LOCAL_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_LOCAL_EXT 0x87C4
        public const int GL_LOCAL_EXT = 0x87C4;
        #endregion GL_LOCAL_EXT

        #region GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT 0x87C5
        public const int GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT = 0x87C5;
        #endregion GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT

        #region GL_MAX_VERTEX_SHADER_VARIANTS_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAX_VERTEX_SHADER_VARIANTS_EXT 0x87C6
        public const int GL_MAX_VERTEX_SHADER_VARIANTS_EXT = 0x87C6;
        #endregion GL_MAX_VERTEX_SHADER_VARIANTS_EXT

        #region GL_MAX_VERTEX_SHADER_INVARIANTS_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAX_VERTEX_SHADER_INVARIANTS_EXT 0x87C7
        public const int GL_MAX_VERTEX_SHADER_INVARIANTS_EXT = 0x87C7;
        #endregion GL_MAX_VERTEX_SHADER_INVARIANTS_EXT

        #region GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT 0x87C8
        public const int GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 0x87C8;
        #endregion GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT

        #region GL_MAX_VERTEX_SHADER_LOCALS_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAX_VERTEX_SHADER_LOCALS_EXT 0x87C9
        public const int GL_MAX_VERTEX_SHADER_LOCALS_EXT = 0x87C9;
        #endregion GL_MAX_VERTEX_SHADER_LOCALS_EXT

        #region GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT 0x87CA
        public const int GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT = 0x87CA;
        #endregion GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT

        #region GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT 0x87CB
        public const int GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT = 0x87CB;
        #endregion GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT

        #region GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT 0x87CC
        public const int GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 0x87CC;
        #endregion GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT

        #region GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT 0x87CD
        public const int GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT = 0x87CD;
        #endregion GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT

        #region GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT 0x87CE
        public const int GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT = 0x87CE;
        #endregion GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT

        #region GL_VERTEX_SHADER_INSTRUCTIONS_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VERTEX_SHADER_INSTRUCTIONS_EXT 0x87CF
        public const int GL_VERTEX_SHADER_INSTRUCTIONS_EXT = 0x87CF;
        #endregion GL_VERTEX_SHADER_INSTRUCTIONS_EXT

        #region GL_VERTEX_SHADER_VARIANTS_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VERTEX_SHADER_VARIANTS_EXT 0x87D0
        public const int GL_VERTEX_SHADER_VARIANTS_EXT = 0x87D0;
        #endregion GL_VERTEX_SHADER_VARIANTS_EXT

        #region GL_VERTEX_SHADER_INVARIANTS_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VERTEX_SHADER_INVARIANTS_EXT 0x87D1
        public const int GL_VERTEX_SHADER_INVARIANTS_EXT = 0x87D1;
        #endregion GL_VERTEX_SHADER_INVARIANTS_EXT

        #region GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT 0x87D2
        public const int GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 0x87D2;
        #endregion GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT

        #region GL_VERTEX_SHADER_LOCALS_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VERTEX_SHADER_LOCALS_EXT 0x87D3
        public const int GL_VERTEX_SHADER_LOCALS_EXT = 0x87D3;
        #endregion GL_VERTEX_SHADER_LOCALS_EXT

        #region GL_VERTEX_SHADER_BINDING_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VERTEX_SHADER_BINDING_EXT 0x8781
        public const int GL_VERTEX_SHADER_BINDING_EXT = 0x8781;
        #endregion GL_VERTEX_SHADER_BINDING_EXT

        #region GL_VERTEX_SHADER_OPTIMIZED_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VERTEX_SHADER_OPTIMIZED_EXT 0x87D4
        public const int GL_VERTEX_SHADER_OPTIMIZED_EXT = 0x87D4;
        #endregion GL_VERTEX_SHADER_OPTIMIZED_EXT

        #region GL_X_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_X_EXT 0x87D5
        public const int GL_X_EXT = 0x87D5;
        #endregion GL_X_EXT

        #region GL_Y_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_Y_EXT 0x87D6
        public const int GL_Y_EXT = 0x87D6;
        #endregion GL_Y_EXT

        #region GL_Z_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_Z_EXT 0x87D7
        public const int GL_Z_EXT = 0x87D7;
        #endregion GL_Z_EXT

        #region GL_W_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_W_EXT 0x87D8
        public const int GL_W_EXT = 0x87D8;
        #endregion GL_W_EXT

        #region GL_NEGATIVE_X_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_NEGATIVE_X_EXT 0x87D9
        public const int GL_NEGATIVE_X_EXT = 0x87D9;
        #endregion GL_NEGATIVE_X_EXT

        #region GL_NEGATIVE_Y_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_NEGATIVE_Y_EXT 0x87DA
        public const int GL_NEGATIVE_Y_EXT = 0x87DA;
        #endregion GL_NEGATIVE_Y_EXT

        #region GL_NEGATIVE_Z_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_NEGATIVE_Z_EXT 0x87DB
        public const int GL_NEGATIVE_Z_EXT = 0x87DB;
        #endregion GL_NEGATIVE_Z_EXT

        #region GL_NEGATIVE_W_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_NEGATIVE_W_EXT 0x87DC
        public const int GL_NEGATIVE_W_EXT = 0x87DC;
        #endregion GL_NEGATIVE_W_EXT

        #region GL_ZERO_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_ZERO_EXT 0x87DD
        public const int GL_ZERO_EXT = 0x87DD;
        #endregion GL_ZERO_EXT

        #region GL_ONE_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_ONE_EXT 0x87DE
        public const int GL_ONE_EXT = 0x87DE;
        #endregion GL_ONE_EXT

        #region GL_NEGATIVE_ONE_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_NEGATIVE_ONE_EXT 0x87DF
        public const int GL_NEGATIVE_ONE_EXT = 0x87DF;
        #endregion GL_NEGATIVE_ONE_EXT

        #region GL_NORMALIZED_RANGE_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_NORMALIZED_RANGE_EXT 0x87E0
        public const int GL_NORMALIZED_RANGE_EXT = 0x87E0;
        #endregion GL_NORMALIZED_RANGE_EXT

        #region GL_FULL_RANGE_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_FULL_RANGE_EXT 0x87E1
        public const int GL_FULL_RANGE_EXT = 0x87E1;
        #endregion GL_FULL_RANGE_EXT

        #region GL_CURRENT_VERTEX_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_CURRENT_VERTEX_EXT 0x87E2
        public const int GL_CURRENT_VERTEX_EXT = 0x87E2;
        #endregion GL_CURRENT_VERTEX_EXT

        #region GL_MVP_MATRIX_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MVP_MATRIX_EXT 0x87E3
        public const int GL_MVP_MATRIX_EXT = 0x87E3;
        #endregion GL_MVP_MATRIX_EXT
        #endregion GL_EXT_vertex_shader Constants

        #region GL_EXT_vertex_shader Methods
        #region void glBeginVertexShaderEXT([In] IntPtr extensionPointer)
        // GLvoid glBeginVertexShaderEXT()
        #if WIN32
        [IlasmAttribute(".maxstack 1\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void()\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 1\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void()\r\nret")]
        #endif
        public static void glBeginVertexShaderEXT([In] IntPtr extensionPointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glBeginVertexShaderEXT([In] IntPtr extensionPointer)

        #region void glEndVertexShaderEXT([In] IntPtr extensionPointer)
        // GLvoid glEndVertexShaderEXT()
        #if WIN32
        [IlasmAttribute(".maxstack 1\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void()\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 1\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void()\r\nret")]
        #endif
        public static void glEndVertexShaderEXT([In] IntPtr extensionPointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glEndVertexShaderEXT([In] IntPtr extensionPointer)

        #region void glBindVertexShaderEXT([In] IntPtr extensionPointer, int id)
        // GLvoid glBindVertexShaderEXT(GLuint id)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg id\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg id\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32)\r\nret")]
        #endif
        public static void glBindVertexShaderEXT([In] IntPtr extensionPointer, int id) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glBindVertexShaderEXT([In] IntPtr extensionPointer, int id)

        #region int glGenVertexShadersEXT([In] IntPtr extensionPointer, int range)
        // GLuint glGenVertexShadersEXT(GLuint range)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg range\r\nldarg extensionPointer\r\ncalli unmanaged stdcall int32([in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg range\r\nldarg extensionPointer\r\ncalli unmanaged cdecl int32([in]int32)\r\nret")]
        #endif
        public static int glGenVertexShadersEXT([In] IntPtr extensionPointer, int range) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion int glGenVertexShadersEXT([In] IntPtr extensionPointer, int range)

        #region void glDeleteVertexShaderEXT([In] IntPtr extensionPointer, int id)
        // GLvoid glDeleteVertexShaderEXT(GLuint id)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg id\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg id\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32)\r\nret")]
        #endif
        public static void glDeleteVertexShaderEXT([In] IntPtr extensionPointer, int id) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glDeleteVertexShaderEXT([In] IntPtr extensionPointer, int id)

        #region Overloads for GLvoid glShaderOp1EXT(GLenum op, GLuint res, GLuint arg1)
        #region void glShaderOp1EXT([In] IntPtr extensionPointer, int op, int res, int arg1)
        // GLvoid glShaderOp1EXT(GLenum op, GLuint res, GLuint arg1)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg op\r\nldarg res\r\nldarg arg1\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg op\r\nldarg res\r\nldarg arg1\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32)\r\nret")]
        #endif
        public static void glShaderOp1EXT([In] IntPtr extensionPointer, int op, int res, int arg1) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glShaderOp1EXT([In] IntPtr extensionPointer, int op, int res, int arg1)

        #region void glShaderOp1EXT([In] IntPtr extensionPointer, int op, uint res, uint arg1)
        // GLvoid glShaderOp1EXT(GLenum op, GLuint res, GLuint arg1)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg op\r\nldarg res\r\nldarg arg1\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]unsigned int32,[in]unsigned int32)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg op\r\nldarg res\r\nldarg arg1\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]unsigned int32,[in]unsigned int32)\r\nret")]
        #endif
        public static void glShaderOp1EXT([In] IntPtr extensionPointer, int op, uint res, uint arg1) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glShaderOp1EXT([In] IntPtr extensionPointer, int op, uint res, uint arg1)
        #endregion Overloads for GLvoid glShaderOp1EXT(GLenum op, GLuint res, GLuint arg1)

        #region Overloads for GLvoid glShaderOp2EXT(GLenum op, GLuint res, GLuint arg1, GLuint arg2)
        #region void glShaderOp2EXT([In] IntPtr extensionPointer, int op, int res, int arg1, int arg2)
        // GLvoid glShaderOp2EXT(GLenum op, GLuint res, GLuint arg1, GLuint arg2)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg op\r\nldarg res\r\nldarg arg1\r\nldarg arg2\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg op\r\nldarg res\r\nldarg arg1\r\nldarg arg2\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32)\r\nret")]
        #endif
        public static void glShaderOp2EXT([In] IntPtr extensionPointer, int op, int res, int arg1, int arg2) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glShaderOp2EXT([In] IntPtr extensionPointer, int op, int res, int arg1, int arg2)

        #region void glShaderOp2EXT([In] IntPtr extensionPointer, int op, uint res, uint arg1, uint arg2)
        // GLvoid glShaderOp2EXT(GLenum op, GLuint res, GLuint arg1, GLuint arg2)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg op\r\nldarg res\r\nldarg arg1\r\nldarg arg2\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]unsigned int32,[in]unsigned int32,[in]unsigned int32)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg op\r\nldarg res\r\nldarg arg1\r\nldarg arg2\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]unsigned int32,[in]unsigned int32,[in]unsigned int32)\r\nret")]
        #endif
        public static void glShaderOp2EXT([In] IntPtr extensionPointer, int op, uint res, uint arg1, uint arg2) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glShaderOp2EXT([In] IntPtr extensionPointer, int op, uint res, uint arg1, uint arg2)
        #endregion Overloads for GLvoid glShaderOp2EXT(GLenum op, GLuint res, GLuint arg1, GLuint arg2)

        #region Overloads for GLvoid glShaderOp3EXT(GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3)
        #region void glShaderOp3EXT([In] IntPtr extensionPointer, int op, int res, int arg1, int arg2, int arg3)
        // GLvoid glShaderOp3EXT(GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg op\r\nldarg res\r\nldarg arg1\r\nldarg arg2\r\nldarg arg3\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg op\r\nldarg res\r\nldarg arg1\r\nldarg arg2\r\nldarg arg3\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32)\r\nret")]
        #endif
        public static void glShaderOp3EXT([In] IntPtr extensionPointer, int op, int res, int arg1, int arg2, int arg3) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glShaderOp3EXT([In] IntPtr extensionPointer, int op, int res, int arg1, int arg2, int arg3)

        #region void glShaderOp3EXT([In] IntPtr extensionPointer, int op, uint res, uint arg1, uint arg2, uint arg3)
        // GLvoid glShaderOp3EXT(GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg op\r\nldarg res\r\nldarg arg1\r\nldarg arg2\r\nldarg arg3\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]unsigned int32,[in]unsigned int32,[in]unsigned int32,[in]unsigned int32)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg op\r\nldarg res\r\nldarg arg1\r\nldarg arg2\r\nldarg arg3\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]unsigned int32,[in]unsigned int32,[in]unsigned int32,[in]unsigned int32)\r\nret")]
        #endif
        public static void glShaderOp3EXT([In] IntPtr extensionPointer, int op, uint res, uint arg1, uint arg2, uint arg3) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glShaderOp3EXT([In] IntPtr extensionPointer, int op, uint res, uint arg1, uint arg2, uint arg3)
        #endregion Overloads for GLvoid glShaderOp3EXT(GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3)

        #region Overloads for GLvoid glSwizzleEXT(GLuint res, GLuint input, GLenum outX, GLenum outY, GLenum outZ, GLenum outW)
        #region void glSwizzleEXT([In] IntPtr extensionPointer, int res, int input, int outX, int outY, int outZ, int outW)
        // GLvoid glSwizzleEXT(GLuint res, GLuint input, GLenum outX, GLenum outY, GLenum outZ, GLenum outW)
        #if WIN32
        [IlasmAttribute(".maxstack 7\r\nldarg res\r\nldarg input\r\nldarg outX\r\nldarg outY\r\nldarg outZ\r\nldarg outW\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 7\r\nldarg res\r\nldarg input\r\nldarg outX\r\nldarg outY\r\nldarg outZ\r\nldarg outW\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32)\r\nret")]
        #endif
        public static void glSwizzleEXT([In] IntPtr extensionPointer, int res, int input, int outX, int outY, int outZ, int outW) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSwizzleEXT([In] IntPtr extensionPointer, int res, int input, int outX, int outY, int outZ, int outW)

        #region void glSwizzleEXT([In] IntPtr extensionPointer, uint res, uint input, int outX, int outY, int outZ, int outW)
        // GLvoid glSwizzleEXT(GLuint res, GLuint input, GLenum outX, GLenum outY, GLenum outZ, GLenum outW)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 7\r\nldarg res\r\nldarg input\r\nldarg outX\r\nldarg outY\r\nldarg outZ\r\nldarg outW\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int32,[in]unsigned int32,[in]int32,[in]int32,[in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 7\r\nldarg res\r\nldarg input\r\nldarg outX\r\nldarg outY\r\nldarg outZ\r\nldarg outW\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int32,[in]unsigned int32,[in]int32,[in]int32,[in]int32,[in]int32)\r\nret")]
        #endif
        public static void glSwizzleEXT([In] IntPtr extensionPointer, uint res, uint input, int outX, int outY, int outZ, int outW) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSwizzleEXT([In] IntPtr extensionPointer, uint res, uint input, int outX, int outY, int outZ, int outW)
        #endregion Overloads for GLvoid glSwizzleEXT(GLuint res, GLuint input, GLenum outX, GLenum outY, GLenum outZ, GLenum outW)

        #region Overloads for GLvoid glWriteMaskEXT(GLuint res, GLuint input, GLenum outX, GLenum outY, GLenum outZ, GLenum outW)
        #region void glWriteMaskEXT([In] IntPtr extensionPointer, int res, int input, int outX, int outY, int outZ, int outW)
        // GLvoid glWriteMaskEXT(GLuint res, GLuint input, GLenum outX, GLenum outY, GLenum outZ, GLenum outW)
        #if WIN32
        [IlasmAttribute(".maxstack 7\r\nldarg res\r\nldarg input\r\nldarg outX\r\nldarg outY\r\nldarg outZ\r\nldarg outW\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 7\r\nldarg res\r\nldarg input\r\nldarg outX\r\nldarg outY\r\nldarg outZ\r\nldarg outW\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32)\r\nret")]
        #endif
        public static void glWriteMaskEXT([In] IntPtr extensionPointer, int res, int input, int outX, int outY, int outZ, int outW) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWriteMaskEXT([In] IntPtr extensionPointer, int res, int input, int outX, int outY, int outZ, int outW)

        #region void glWriteMaskEXT([In] IntPtr extensionPointer, uint res, uint input, int outX, int outY, int outZ, int outW)
        // GLvoid glWriteMaskEXT(GLuint res, GLuint input, GLenum outX, GLenum outY, GLenum outZ, GLenum outW)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 7\r\nldarg res\r\nldarg input\r\nldarg outX\r\nldarg outY\r\nldarg outZ\r\nldarg outW\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int32,[in]unsigned int32,[in]int32,[in]int32,[in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 7\r\nldarg res\r\nldarg input\r\nldarg outX\r\nldarg outY\r\nldarg outZ\r\nldarg outW\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int32,[in]unsigned int32,[in]int32,[in]int32,[in]int32,[in]int32)\r\nret")]
        #endif
        public static void glWriteMaskEXT([In] IntPtr extensionPointer, uint res, uint input, int outX, int outY, int outZ, int outW) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWriteMaskEXT([In] IntPtr extensionPointer, uint res, uint input, int outX, int outY, int outZ, int outW)
        #endregion Overloads for GLvoid glWriteMaskEXT(GLuint res, GLuint input, GLenum outX, GLenum outY, GLenum outZ, GLenum outW)

        #region Overloads for GLvoid glInsertComponentEXT(GLuint res, GLuint src, GLuint num)
        #region void glInsertComponentEXT([In] IntPtr extensionPointer, int res, int src, int num)
        // GLvoid glInsertComponentEXT(GLuint res, GLuint src, GLuint num)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg res\r\nldarg src\r\nldarg num\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg res\r\nldarg src\r\nldarg num\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32)\r\nret")]
        #endif
        public static void glInsertComponentEXT([In] IntPtr extensionPointer, int res, int src, int num) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glInsertComponentEXT([In] IntPtr extensionPointer, int res, int src, int num)

        #region void glInsertComponentEXT([In] IntPtr extensionPointer, uint res, uint src, uint num)
        // GLvoid glInsertComponentEXT(GLuint res, GLuint src, GLuint num)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg res\r\nldarg src\r\nldarg num\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int32,[in]unsigned int32,[in]unsigned int32)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg res\r\nldarg src\r\nldarg num\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int32,[in]unsigned int32,[in]unsigned int32)\r\nret")]
        #endif
        public static void glInsertComponentEXT([In] IntPtr extensionPointer, uint res, uint src, uint num) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glInsertComponentEXT([In] IntPtr extensionPointer, uint res, uint src, uint num)
        #endregion Overloads for GLvoid glInsertComponentEXT(GLuint res, GLuint src, GLuint num)

        #region Overloads for GLvoid glExtractComponentEXT(GLuint res, GLuint src, GLuint num)
        #region void glExtractComponentEXT([In] IntPtr extensionPointer, int res, int src, int num)
        // GLvoid glExtractComponentEXT(GLuint res, GLuint src, GLuint num)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg res\r\nldarg src\r\nldarg num\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg res\r\nldarg src\r\nldarg num\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32)\r\nret")]
        #endif
        public static void glExtractComponentEXT([In] IntPtr extensionPointer, int res, int src, int num) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glExtractComponentEXT([In] IntPtr extensionPointer, int res, int src, int num)

        #region void glExtractComponentEXT([In] IntPtr extensionPointer, uint res, uint src, uint num)
        // GLvoid glExtractComponentEXT(GLuint res, GLuint src, GLuint num)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg res\r\nldarg src\r\nldarg num\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int32,[in]unsigned int32,[in]unsigned int32)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg res\r\nldarg src\r\nldarg num\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int32,[in]unsigned int32,[in]unsigned int32)\r\nret")]
        #endif
        public static void glExtractComponentEXT([In] IntPtr extensionPointer, uint res, uint src, uint num) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glExtractComponentEXT([In] IntPtr extensionPointer, uint res, uint src, uint num)
        #endregion Overloads for GLvoid glExtractComponentEXT(GLuint res, GLuint src, GLuint num)

        #region Overloads for GLuint glGenSymbolsEXT(GLenum datatype, GLenum storagetype, GLenum range, GLuint components)
        #region int glGenSymbolsEXT([In] IntPtr extensionPointer, int datatype, int storagetype, int range, int components)
        // GLuint glGenSymbolsEXT(GLenum datatype, GLenum storagetype, GLenum range, GLuint components)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg datatype\r\nldarg storagetype\r\nldarg range\r\nldarg components\r\nldarg extensionPointer\r\ncalli unmanaged stdcall int32([in]int32,[in]int32,[in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg datatype\r\nldarg storagetype\r\nldarg range\r\nldarg components\r\nldarg extensionPointer\r\ncalli unmanaged cdecl int32([in]int32,[in]int32,[in]int32,[in]int32)\r\nret")]
        #endif
        public static int glGenSymbolsEXT([In] IntPtr extensionPointer, int datatype, int storagetype, int range, int components) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion int glGenSymbolsEXT([In] IntPtr extensionPointer, int datatype, int storagetype, int range, int components)

        #region int glGenSymbolsEXT([In] IntPtr extensionPointer, int datatype, int storagetype, int range, uint components)
        // GLuint glGenSymbolsEXT(GLenum datatype, GLenum storagetype, GLenum range, GLuint components)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg datatype\r\nldarg storagetype\r\nldarg range\r\nldarg components\r\nldarg extensionPointer\r\ncalli unmanaged stdcall int32([in]int32,[in]int32,[in]int32,[in]unsigned int32)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg datatype\r\nldarg storagetype\r\nldarg range\r\nldarg components\r\nldarg extensionPointer\r\ncalli unmanaged cdecl int32([in]int32,[in]int32,[in]int32,[in]unsigned int32)\r\nret")]
        #endif
        public static int glGenSymbolsEXT([In] IntPtr extensionPointer, int datatype, int storagetype, int range, uint components) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion int glGenSymbolsEXT([In] IntPtr extensionPointer, int datatype, int storagetype, int range, uint components)
        #endregion Overloads for GLuint glGenSymbolsEXT(GLenum datatype, GLenum storagetype, GLenum range, GLuint components)

        #region Overloads for GLvoid glSetInvariantEXT(GLuint id, GLenum type, GLvoid* addr)
        #region void glSetInvariantEXT([In] IntPtr extensionPointer, int id, int type, short[] addr)
        // GLvoid glSetInvariantEXT(GLuint id, GLenum type, GLvoid* addr)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg type\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg type\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int16[])\r\nret")]
        #endif
        public static void glSetInvariantEXT([In] IntPtr extensionPointer, int id, int type, short[] addr) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSetInvariantEXT([In] IntPtr extensionPointer, int id, int type, short[] addr)

        #region void glSetInvariantEXT([In] IntPtr extensionPointer, int id, int type, float[] addr)
        // GLvoid glSetInvariantEXT(GLuint id, GLenum type, GLvoid* addr)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg type\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg type\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]float32[])\r\nret")]
        #endif
        public static void glSetInvariantEXT([In] IntPtr extensionPointer, int id, int type, float[] addr) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSetInvariantEXT([In] IntPtr extensionPointer, int id, int type, float[] addr)

        #region void glSetInvariantEXT([In] IntPtr extensionPointer, int id, int type, int[] addr)
        // GLvoid glSetInvariantEXT(GLuint id, GLenum type, GLvoid* addr)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg type\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg type\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32[])\r\nret")]
        #endif
        public static void glSetInvariantEXT([In] IntPtr extensionPointer, int id, int type, int[] addr) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSetInvariantEXT([In] IntPtr extensionPointer, int id, int type, int[] addr)

        #region void glSetInvariantEXT([In] IntPtr extensionPointer, int id, int type, IntPtr addr)
        // GLvoid glSetInvariantEXT(GLuint id, GLenum type, GLvoid* addr)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg type\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg type\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]native int)\r\nret")]
        #endif
        public static void glSetInvariantEXT([In] IntPtr extensionPointer, int id, int type, IntPtr addr) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSetInvariantEXT([In] IntPtr extensionPointer, int id, int type, IntPtr addr)

        #region void glSetInvariantEXT([In] IntPtr extensionPointer, int id, int type, byte[] addr)
        // GLvoid glSetInvariantEXT(GLuint id, GLenum type, GLvoid* addr)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg type\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]unsigned int8[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg type\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]unsigned int8[])\r\nret")]
        #endif
        public static void glSetInvariantEXT([In] IntPtr extensionPointer, int id, int type, byte[] addr) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSetInvariantEXT([In] IntPtr extensionPointer, int id, int type, byte[] addr)

        #region void glSetInvariantEXT([In] IntPtr extensionPointer, int id, int type, double[] addr)
        // GLvoid glSetInvariantEXT(GLuint id, GLenum type, GLvoid* addr)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg type\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]float64[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg type\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]float64[])\r\nret")]
        #endif
        public static void glSetInvariantEXT([In] IntPtr extensionPointer, int id, int type, double[] addr) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSetInvariantEXT([In] IntPtr extensionPointer, int id, int type, double[] addr)

        #region void glSetInvariantEXT([In] IntPtr extensionPointer, int id, int type, uint[] addr)
        // GLvoid glSetInvariantEXT(GLuint id, GLenum type, GLvoid* addr)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg type\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]unsigned int32[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg type\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]unsigned int32[])\r\nret")]
        #endif
        public static void glSetInvariantEXT([In] IntPtr extensionPointer, int id, int type, uint[] addr) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSetInvariantEXT([In] IntPtr extensionPointer, int id, int type, uint[] addr)

        #region void glSetInvariantEXT([In] IntPtr extensionPointer, int id, int type, sbyte[] addr)
        // GLvoid glSetInvariantEXT(GLuint id, GLenum type, GLvoid* addr)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg type\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int8[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg type\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int8[])\r\nret")]
        #endif
        public static void glSetInvariantEXT([In] IntPtr extensionPointer, int id, int type, sbyte[] addr) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSetInvariantEXT([In] IntPtr extensionPointer, int id, int type, sbyte[] addr)

        #region void glSetInvariantEXT([In] IntPtr extensionPointer, int id, int type, ushort[] addr)
        // GLvoid glSetInvariantEXT(GLuint id, GLenum type, GLvoid* addr)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg type\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]unsigned int16[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg type\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]unsigned int16[])\r\nret")]
        #endif
        public static void glSetInvariantEXT([In] IntPtr extensionPointer, int id, int type, ushort[] addr) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSetInvariantEXT([In] IntPtr extensionPointer, int id, int type, ushort[] addr)

        #region void glSetInvariantEXT([In] IntPtr extensionPointer, int id, int type, void* addr)
        // GLvoid glSetInvariantEXT(GLuint id, GLenum type, GLvoid* addr)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg type\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]void*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg type\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]void*)\r\nret")]
        #endif
        public static unsafe void glSetInvariantEXT([In] IntPtr extensionPointer, int id, int type, void* addr) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSetInvariantEXT([In] IntPtr extensionPointer, int id, int type, void* addr)
        #endregion Overloads for GLvoid glSetInvariantEXT(GLuint id, GLenum type, GLvoid* addr)

        #region Overloads for GLvoid glSetLocalConstantEXT(GLuint id, GLenum type, GLvoid* addr)
        #region void glSetLocalConstantEXT([In] IntPtr extensionPointer, int id, int type, short[] addr)
        // GLvoid glSetLocalConstantEXT(GLuint id, GLenum type, GLvoid* addr)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg type\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg type\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int16[])\r\nret")]
        #endif
        public static void glSetLocalConstantEXT([In] IntPtr extensionPointer, int id, int type, short[] addr) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSetLocalConstantEXT([In] IntPtr extensionPointer, int id, int type, short[] addr)

        #region void glSetLocalConstantEXT([In] IntPtr extensionPointer, int id, int type, float[] addr)
        // GLvoid glSetLocalConstantEXT(GLuint id, GLenum type, GLvoid* addr)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg type\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg type\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]float32[])\r\nret")]
        #endif
        public static void glSetLocalConstantEXT([In] IntPtr extensionPointer, int id, int type, float[] addr) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSetLocalConstantEXT([In] IntPtr extensionPointer, int id, int type, float[] addr)

        #region void glSetLocalConstantEXT([In] IntPtr extensionPointer, int id, int type, int[] addr)
        // GLvoid glSetLocalConstantEXT(GLuint id, GLenum type, GLvoid* addr)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg type\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg type\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32[])\r\nret")]
        #endif
        public static void glSetLocalConstantEXT([In] IntPtr extensionPointer, int id, int type, int[] addr) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSetLocalConstantEXT([In] IntPtr extensionPointer, int id, int type, int[] addr)

        #region void glSetLocalConstantEXT([In] IntPtr extensionPointer, int id, int type, IntPtr addr)
        // GLvoid glSetLocalConstantEXT(GLuint id, GLenum type, GLvoid* addr)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg type\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg type\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]native int)\r\nret")]
        #endif
        public static void glSetLocalConstantEXT([In] IntPtr extensionPointer, int id, int type, IntPtr addr) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSetLocalConstantEXT([In] IntPtr extensionPointer, int id, int type, IntPtr addr)

        #region void glSetLocalConstantEXT([In] IntPtr extensionPointer, int id, int type, byte[] addr)
        // GLvoid glSetLocalConstantEXT(GLuint id, GLenum type, GLvoid* addr)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg type\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]unsigned int8[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg type\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]unsigned int8[])\r\nret")]
        #endif
        public static void glSetLocalConstantEXT([In] IntPtr extensionPointer, int id, int type, byte[] addr) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSetLocalConstantEXT([In] IntPtr extensionPointer, int id, int type, byte[] addr)

        #region void glSetLocalConstantEXT([In] IntPtr extensionPointer, int id, int type, double[] addr)
        // GLvoid glSetLocalConstantEXT(GLuint id, GLenum type, GLvoid* addr)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg type\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]float64[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg type\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]float64[])\r\nret")]
        #endif
        public static void glSetLocalConstantEXT([In] IntPtr extensionPointer, int id, int type, double[] addr) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSetLocalConstantEXT([In] IntPtr extensionPointer, int id, int type, double[] addr)

        #region void glSetLocalConstantEXT([In] IntPtr extensionPointer, int id, int type, uint[] addr)
        // GLvoid glSetLocalConstantEXT(GLuint id, GLenum type, GLvoid* addr)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg type\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]unsigned int32[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg type\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]unsigned int32[])\r\nret")]
        #endif
        public static void glSetLocalConstantEXT([In] IntPtr extensionPointer, int id, int type, uint[] addr) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSetLocalConstantEXT([In] IntPtr extensionPointer, int id, int type, uint[] addr)

        #region void glSetLocalConstantEXT([In] IntPtr extensionPointer, int id, int type, sbyte[] addr)
        // GLvoid glSetLocalConstantEXT(GLuint id, GLenum type, GLvoid* addr)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg type\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int8[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg type\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int8[])\r\nret")]
        #endif
        public static void glSetLocalConstantEXT([In] IntPtr extensionPointer, int id, int type, sbyte[] addr) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSetLocalConstantEXT([In] IntPtr extensionPointer, int id, int type, sbyte[] addr)

        #region void glSetLocalConstantEXT([In] IntPtr extensionPointer, int id, int type, ushort[] addr)
        // GLvoid glSetLocalConstantEXT(GLuint id, GLenum type, GLvoid* addr)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg type\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]unsigned int16[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg type\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]unsigned int16[])\r\nret")]
        #endif
        public static void glSetLocalConstantEXT([In] IntPtr extensionPointer, int id, int type, ushort[] addr) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSetLocalConstantEXT([In] IntPtr extensionPointer, int id, int type, ushort[] addr)

        #region void glSetLocalConstantEXT([In] IntPtr extensionPointer, int id, int type, void* addr)
        // GLvoid glSetLocalConstantEXT(GLuint id, GLenum type, GLvoid* addr)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg type\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]void*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg type\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]void*)\r\nret")]
        #endif
        public static unsafe void glSetLocalConstantEXT([In] IntPtr extensionPointer, int id, int type, void* addr) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSetLocalConstantEXT([In] IntPtr extensionPointer, int id, int type, void* addr)
        #endregion Overloads for GLvoid glSetLocalConstantEXT(GLuint id, GLenum type, GLvoid* addr)

        #region Overloads for GLvoid glVariantbvEXT(GLuint id, GLbyte* addr)
        #region void glVariantbvEXT([In] IntPtr extensionPointer, int id, byte[] addr)
        // GLvoid glVariantbvEXT(GLuint id, GLbyte* addr)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg id\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]unsigned int8[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg id\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]unsigned int8[])\r\nret")]
        #endif
        public static void glVariantbvEXT([In] IntPtr extensionPointer, int id, byte[] addr) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVariantbvEXT([In] IntPtr extensionPointer, int id, byte[] addr)

        #region void glVariantbvEXT([In] IntPtr extensionPointer, int id, ref byte addr)
        // GLvoid glVariantbvEXT(GLuint id, GLbyte* addr)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg id\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]unsigned int8)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg id\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]unsigned int8)\r\nret")]
        #endif
        public static void glVariantbvEXT([In] IntPtr extensionPointer, int id, ref byte addr) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVariantbvEXT([In] IntPtr extensionPointer, int id, ref byte addr)

        #region void glVariantbvEXT([In] IntPtr extensionPointer, int id, IntPtr addr)
        // GLvoid glVariantbvEXT(GLuint id, GLbyte* addr)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg id\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg id\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glVariantbvEXT([In] IntPtr extensionPointer, int id, IntPtr addr) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVariantbvEXT([In] IntPtr extensionPointer, int id, IntPtr addr)

        #region void glVariantbvEXT([In] IntPtr extensionPointer, int id, ref sbyte addr)
        // GLvoid glVariantbvEXT(GLuint id, GLbyte* addr)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg id\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]int8)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg id\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]int8)\r\nret")]
        #endif
        public static void glVariantbvEXT([In] IntPtr extensionPointer, int id, ref sbyte addr) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVariantbvEXT([In] IntPtr extensionPointer, int id, ref sbyte addr)

        #region void glVariantbvEXT([In] IntPtr extensionPointer, int id, sbyte[] addr)
        // GLvoid glVariantbvEXT(GLuint id, GLbyte* addr)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg id\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int8[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg id\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int8[])\r\nret")]
        #endif
        public static void glVariantbvEXT([In] IntPtr extensionPointer, int id, sbyte[] addr) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVariantbvEXT([In] IntPtr extensionPointer, int id, sbyte[] addr)

        #region void glVariantbvEXT([In] IntPtr extensionPointer, int id, sbyte* addr)
        // GLvoid glVariantbvEXT(GLuint id, GLbyte* addr)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg id\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int8*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg id\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int8*)\r\nret")]
        #endif
        public static unsafe void glVariantbvEXT([In] IntPtr extensionPointer, int id, sbyte* addr) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVariantbvEXT([In] IntPtr extensionPointer, int id, sbyte* addr)
        #endregion Overloads for GLvoid glVariantbvEXT(GLuint id, GLbyte* addr)

        #region Overloads for GLvoid glVariantsvEXT(GLuint id, GLshort* addr)
        #region void glVariantsvEXT([In] IntPtr extensionPointer, int id, ref short addr)
        // GLvoid glVariantsvEXT(GLuint id, GLshort* addr)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg id\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg id\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]int16)\r\nret")]
        #endif
        public static void glVariantsvEXT([In] IntPtr extensionPointer, int id, ref short addr) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVariantsvEXT([In] IntPtr extensionPointer, int id, ref short addr)

        #region void glVariantsvEXT([In] IntPtr extensionPointer, int id, short[] addr)
        // GLvoid glVariantsvEXT(GLuint id, GLshort* addr)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg id\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg id\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int16[])\r\nret")]
        #endif
        public static void glVariantsvEXT([In] IntPtr extensionPointer, int id, short[] addr) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVariantsvEXT([In] IntPtr extensionPointer, int id, short[] addr)

        #region void glVariantsvEXT([In] IntPtr extensionPointer, int id, IntPtr addr)
        // GLvoid glVariantsvEXT(GLuint id, GLshort* addr)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg id\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg id\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glVariantsvEXT([In] IntPtr extensionPointer, int id, IntPtr addr) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVariantsvEXT([In] IntPtr extensionPointer, int id, IntPtr addr)

        #region void glVariantsvEXT([In] IntPtr extensionPointer, int id, short* addr)
        // GLvoid glVariantsvEXT(GLuint id, GLshort* addr)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg id\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int16*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg id\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int16*)\r\nret")]
        #endif
        public static unsafe void glVariantsvEXT([In] IntPtr extensionPointer, int id, short* addr) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVariantsvEXT([In] IntPtr extensionPointer, int id, short* addr)
        #endregion Overloads for GLvoid glVariantsvEXT(GLuint id, GLshort* addr)

        #region Overloads for GLvoid glVariantivEXT(GLuint id, GLint* addr)
        #region void glVariantivEXT([In] IntPtr extensionPointer, int id, ref int addr)
        // GLvoid glVariantivEXT(GLuint id, GLint* addr)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg id\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg id\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]int32)\r\nret")]
        #endif
        public static void glVariantivEXT([In] IntPtr extensionPointer, int id, ref int addr) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVariantivEXT([In] IntPtr extensionPointer, int id, ref int addr)

        #region void glVariantivEXT([In] IntPtr extensionPointer, int id, int[] addr)
        // GLvoid glVariantivEXT(GLuint id, GLint* addr)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg id\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg id\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32[])\r\nret")]
        #endif
        public static void glVariantivEXT([In] IntPtr extensionPointer, int id, int[] addr) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVariantivEXT([In] IntPtr extensionPointer, int id, int[] addr)

        #region void glVariantivEXT([In] IntPtr extensionPointer, int id, IntPtr addr)
        // GLvoid glVariantivEXT(GLuint id, GLint* addr)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg id\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg id\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glVariantivEXT([In] IntPtr extensionPointer, int id, IntPtr addr) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVariantivEXT([In] IntPtr extensionPointer, int id, IntPtr addr)

        #region void glVariantivEXT([In] IntPtr extensionPointer, int id, int* addr)
        // GLvoid glVariantivEXT(GLuint id, GLint* addr)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg id\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg id\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32*)\r\nret")]
        #endif
        public static unsafe void glVariantivEXT([In] IntPtr extensionPointer, int id, int* addr) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVariantivEXT([In] IntPtr extensionPointer, int id, int* addr)
        #endregion Overloads for GLvoid glVariantivEXT(GLuint id, GLint* addr)

        #region Overloads for GLvoid glVariantfvEXT(GLuint id, GLfloat* addr)
        #region void glVariantfvEXT([In] IntPtr extensionPointer, int id, ref float addr)
        // GLvoid glVariantfvEXT(GLuint id, GLfloat* addr)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg id\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg id\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]float32)\r\nret")]
        #endif
        public static void glVariantfvEXT([In] IntPtr extensionPointer, int id, ref float addr) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVariantfvEXT([In] IntPtr extensionPointer, int id, ref float addr)

        #region void glVariantfvEXT([In] IntPtr extensionPointer, int id, float[] addr)
        // GLvoid glVariantfvEXT(GLuint id, GLfloat* addr)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg id\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg id\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float32[])\r\nret")]
        #endif
        public static void glVariantfvEXT([In] IntPtr extensionPointer, int id, float[] addr) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVariantfvEXT([In] IntPtr extensionPointer, int id, float[] addr)

        #region void glVariantfvEXT([In] IntPtr extensionPointer, int id, IntPtr addr)
        // GLvoid glVariantfvEXT(GLuint id, GLfloat* addr)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg id\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg id\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glVariantfvEXT([In] IntPtr extensionPointer, int id, IntPtr addr) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVariantfvEXT([In] IntPtr extensionPointer, int id, IntPtr addr)

        #region void glVariantfvEXT([In] IntPtr extensionPointer, int id, float* addr)
        // GLvoid glVariantfvEXT(GLuint id, GLfloat* addr)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg id\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg id\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float32*)\r\nret")]
        #endif
        public static unsafe void glVariantfvEXT([In] IntPtr extensionPointer, int id, float* addr) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVariantfvEXT([In] IntPtr extensionPointer, int id, float* addr)
        #endregion Overloads for GLvoid glVariantfvEXT(GLuint id, GLfloat* addr)

        #region Overloads for GLvoid glVariantdvEXT(GLuint id, GLdouble* addr)
        #region void glVariantdvEXT([In] IntPtr extensionPointer, int id, ref double addr)
        // GLvoid glVariantdvEXT(GLuint id, GLdouble* addr)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg id\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]float64)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg id\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]float64)\r\nret")]
        #endif
        public static void glVariantdvEXT([In] IntPtr extensionPointer, int id, ref double addr) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVariantdvEXT([In] IntPtr extensionPointer, int id, ref double addr)

        #region void glVariantdvEXT([In] IntPtr extensionPointer, int id, double[] addr)
        // GLvoid glVariantdvEXT(GLuint id, GLdouble* addr)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg id\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float64[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg id\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float64[])\r\nret")]
        #endif
        public static void glVariantdvEXT([In] IntPtr extensionPointer, int id, double[] addr) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVariantdvEXT([In] IntPtr extensionPointer, int id, double[] addr)

        #region void glVariantdvEXT([In] IntPtr extensionPointer, int id, IntPtr addr)
        // GLvoid glVariantdvEXT(GLuint id, GLdouble* addr)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg id\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg id\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glVariantdvEXT([In] IntPtr extensionPointer, int id, IntPtr addr) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVariantdvEXT([In] IntPtr extensionPointer, int id, IntPtr addr)

        #region void glVariantdvEXT([In] IntPtr extensionPointer, int id, double* addr)
        // GLvoid glVariantdvEXT(GLuint id, GLdouble* addr)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg id\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float64*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg id\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float64*)\r\nret")]
        #endif
        public static unsafe void glVariantdvEXT([In] IntPtr extensionPointer, int id, double* addr) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVariantdvEXT([In] IntPtr extensionPointer, int id, double* addr)
        #endregion Overloads for GLvoid glVariantdvEXT(GLuint id, GLdouble* addr)

        #region Overloads for GLvoid glVariantubvEXT(GLuint id, GLubyte* addr)
        #region void glVariantubvEXT([In] IntPtr extensionPointer, int id, ref byte addr)
        // GLvoid glVariantubvEXT(GLuint id, GLubyte* addr)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg id\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]unsigned int8)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg id\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]unsigned int8)\r\nret")]
        #endif
        public static void glVariantubvEXT([In] IntPtr extensionPointer, int id, ref byte addr) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVariantubvEXT([In] IntPtr extensionPointer, int id, ref byte addr)

        #region void glVariantubvEXT([In] IntPtr extensionPointer, int id, byte[] addr)
        // GLvoid glVariantubvEXT(GLuint id, GLubyte* addr)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg id\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]unsigned int8[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg id\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]unsigned int8[])\r\nret")]
        #endif
        public static void glVariantubvEXT([In] IntPtr extensionPointer, int id, byte[] addr) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVariantubvEXT([In] IntPtr extensionPointer, int id, byte[] addr)

        #region void glVariantubvEXT([In] IntPtr extensionPointer, int id, IntPtr addr)
        // GLvoid glVariantubvEXT(GLuint id, GLubyte* addr)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg id\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg id\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glVariantubvEXT([In] IntPtr extensionPointer, int id, IntPtr addr) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVariantubvEXT([In] IntPtr extensionPointer, int id, IntPtr addr)

        #region void glVariantubvEXT([In] IntPtr extensionPointer, int id, byte* addr)
        // GLvoid glVariantubvEXT(GLuint id, GLubyte* addr)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg id\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]unsigned int8*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg id\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]unsigned int8*)\r\nret")]
        #endif
        public static unsafe void glVariantubvEXT([In] IntPtr extensionPointer, int id, byte* addr) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVariantubvEXT([In] IntPtr extensionPointer, int id, byte* addr)
        #endregion Overloads for GLvoid glVariantubvEXT(GLuint id, GLubyte* addr)

        #region Overloads for GLvoid glVariantusvEXT(GLuint id, GLushort* addr)
        #region void glVariantusvEXT([In] IntPtr extensionPointer, int id, short[] addr)
        // GLvoid glVariantusvEXT(GLuint id, GLushort* addr)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg id\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg id\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int16[])\r\nret")]
        #endif
        public static void glVariantusvEXT([In] IntPtr extensionPointer, int id, short[] addr) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVariantusvEXT([In] IntPtr extensionPointer, int id, short[] addr)

        #region void glVariantusvEXT([In] IntPtr extensionPointer, int id, ref short addr)
        // GLvoid glVariantusvEXT(GLuint id, GLushort* addr)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg id\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg id\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]int16)\r\nret")]
        #endif
        public static void glVariantusvEXT([In] IntPtr extensionPointer, int id, ref short addr) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVariantusvEXT([In] IntPtr extensionPointer, int id, ref short addr)

        #region void glVariantusvEXT([In] IntPtr extensionPointer, int id, IntPtr addr)
        // GLvoid glVariantusvEXT(GLuint id, GLushort* addr)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg id\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg id\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glVariantusvEXT([In] IntPtr extensionPointer, int id, IntPtr addr) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVariantusvEXT([In] IntPtr extensionPointer, int id, IntPtr addr)

        #region void glVariantusvEXT([In] IntPtr extensionPointer, int id, ref ushort addr)
        // GLvoid glVariantusvEXT(GLuint id, GLushort* addr)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg id\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]unsigned int16)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg id\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]unsigned int16)\r\nret")]
        #endif
        public static void glVariantusvEXT([In] IntPtr extensionPointer, int id, ref ushort addr) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVariantusvEXT([In] IntPtr extensionPointer, int id, ref ushort addr)

        #region void glVariantusvEXT([In] IntPtr extensionPointer, int id, ushort[] addr)
        // GLvoid glVariantusvEXT(GLuint id, GLushort* addr)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg id\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]unsigned int16[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg id\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]unsigned int16[])\r\nret")]
        #endif
        public static void glVariantusvEXT([In] IntPtr extensionPointer, int id, ushort[] addr) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVariantusvEXT([In] IntPtr extensionPointer, int id, ushort[] addr)

        #region void glVariantusvEXT([In] IntPtr extensionPointer, int id, ushort* addr)
        // GLvoid glVariantusvEXT(GLuint id, GLushort* addr)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg id\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]unsigned int16*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg id\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]unsigned int16*)\r\nret")]
        #endif
        public static unsafe void glVariantusvEXT([In] IntPtr extensionPointer, int id, ushort* addr) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVariantusvEXT([In] IntPtr extensionPointer, int id, ushort* addr)
        #endregion Overloads for GLvoid glVariantusvEXT(GLuint id, GLushort* addr)

        #region Overloads for GLvoid glVariantuivEXT(GLuint id, GLuint* addr)
        #region void glVariantuivEXT([In] IntPtr extensionPointer, int id, int[] addr)
        // GLvoid glVariantuivEXT(GLuint id, GLuint* addr)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg id\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg id\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32[])\r\nret")]
        #endif
        public static void glVariantuivEXT([In] IntPtr extensionPointer, int id, int[] addr) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVariantuivEXT([In] IntPtr extensionPointer, int id, int[] addr)

        #region void glVariantuivEXT([In] IntPtr extensionPointer, int id, ref int addr)
        // GLvoid glVariantuivEXT(GLuint id, GLuint* addr)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg id\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg id\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]int32)\r\nret")]
        #endif
        public static void glVariantuivEXT([In] IntPtr extensionPointer, int id, ref int addr) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVariantuivEXT([In] IntPtr extensionPointer, int id, ref int addr)

        #region void glVariantuivEXT([In] IntPtr extensionPointer, int id, IntPtr addr)
        // GLvoid glVariantuivEXT(GLuint id, GLuint* addr)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg id\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg id\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glVariantuivEXT([In] IntPtr extensionPointer, int id, IntPtr addr) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVariantuivEXT([In] IntPtr extensionPointer, int id, IntPtr addr)

        #region void glVariantuivEXT([In] IntPtr extensionPointer, int id, ref uint addr)
        // GLvoid glVariantuivEXT(GLuint id, GLuint* addr)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg id\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]unsigned int32)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg id\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]unsigned int32)\r\nret")]
        #endif
        public static void glVariantuivEXT([In] IntPtr extensionPointer, int id, ref uint addr) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVariantuivEXT([In] IntPtr extensionPointer, int id, ref uint addr)

        #region void glVariantuivEXT([In] IntPtr extensionPointer, int id, uint[] addr)
        // GLvoid glVariantuivEXT(GLuint id, GLuint* addr)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg id\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]unsigned int32[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg id\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]unsigned int32[])\r\nret")]
        #endif
        public static void glVariantuivEXT([In] IntPtr extensionPointer, int id, uint[] addr) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVariantuivEXT([In] IntPtr extensionPointer, int id, uint[] addr)

        #region void glVariantuivEXT([In] IntPtr extensionPointer, int id, uint* addr)
        // GLvoid glVariantuivEXT(GLuint id, GLuint* addr)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg id\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]unsigned int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg id\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]unsigned int32*)\r\nret")]
        #endif
        public static unsafe void glVariantuivEXT([In] IntPtr extensionPointer, int id, uint* addr) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVariantuivEXT([In] IntPtr extensionPointer, int id, uint* addr)
        #endregion Overloads for GLvoid glVariantuivEXT(GLuint id, GLuint* addr)

        #region Overloads for GLvoid glVariantPointerEXT(GLuint id, GLenum type, GLuint stride, GLvoid* addr)
        #region void glVariantPointerEXT([In] IntPtr extensionPointer, int id, int type, int stride, float[] addr)
        // GLvoid glVariantPointerEXT(GLuint id, GLenum type, GLuint stride, GLvoid* addr)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg id\r\nldarg type\r\nldarg stride\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg id\r\nldarg type\r\nldarg stride\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]float32[])\r\nret")]
        #endif
        public static void glVariantPointerEXT([In] IntPtr extensionPointer, int id, int type, int stride, float[] addr) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVariantPointerEXT([In] IntPtr extensionPointer, int id, int type, int stride, float[] addr)

        #region void glVariantPointerEXT([In] IntPtr extensionPointer, int id, int type, int stride, short[] addr)
        // GLvoid glVariantPointerEXT(GLuint id, GLenum type, GLuint stride, GLvoid* addr)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg id\r\nldarg type\r\nldarg stride\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg id\r\nldarg type\r\nldarg stride\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int16[])\r\nret")]
        #endif
        public static void glVariantPointerEXT([In] IntPtr extensionPointer, int id, int type, int stride, short[] addr) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVariantPointerEXT([In] IntPtr extensionPointer, int id, int type, int stride, short[] addr)

        #region void glVariantPointerEXT([In] IntPtr extensionPointer, int id, int type, int stride, int[] addr)
        // GLvoid glVariantPointerEXT(GLuint id, GLenum type, GLuint stride, GLvoid* addr)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg id\r\nldarg type\r\nldarg stride\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg id\r\nldarg type\r\nldarg stride\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32[])\r\nret")]
        #endif
        public static void glVariantPointerEXT([In] IntPtr extensionPointer, int id, int type, int stride, int[] addr) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVariantPointerEXT([In] IntPtr extensionPointer, int id, int type, int stride, int[] addr)

        #region void glVariantPointerEXT([In] IntPtr extensionPointer, int id, int type, int stride, byte[] addr)
        // GLvoid glVariantPointerEXT(GLuint id, GLenum type, GLuint stride, GLvoid* addr)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg id\r\nldarg type\r\nldarg stride\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]unsigned int8[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg id\r\nldarg type\r\nldarg stride\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]unsigned int8[])\r\nret")]
        #endif
        public static void glVariantPointerEXT([In] IntPtr extensionPointer, int id, int type, int stride, byte[] addr) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVariantPointerEXT([In] IntPtr extensionPointer, int id, int type, int stride, byte[] addr)

        #region void glVariantPointerEXT([In] IntPtr extensionPointer, int id, int type, int stride, IntPtr addr)
        // GLvoid glVariantPointerEXT(GLuint id, GLenum type, GLuint stride, GLvoid* addr)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg id\r\nldarg type\r\nldarg stride\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg id\r\nldarg type\r\nldarg stride\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]native int)\r\nret")]
        #endif
        public static void glVariantPointerEXT([In] IntPtr extensionPointer, int id, int type, int stride, IntPtr addr) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVariantPointerEXT([In] IntPtr extensionPointer, int id, int type, int stride, IntPtr addr)

        #region void glVariantPointerEXT([In] IntPtr extensionPointer, int id, int type, int stride, double[] addr)
        // GLvoid glVariantPointerEXT(GLuint id, GLenum type, GLuint stride, GLvoid* addr)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg id\r\nldarg type\r\nldarg stride\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]float64[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg id\r\nldarg type\r\nldarg stride\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]float64[])\r\nret")]
        #endif
        public static void glVariantPointerEXT([In] IntPtr extensionPointer, int id, int type, int stride, double[] addr) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVariantPointerEXT([In] IntPtr extensionPointer, int id, int type, int stride, double[] addr)

        #region void glVariantPointerEXT([In] IntPtr extensionPointer, int id, int type, uint stride, double[] addr)
        // GLvoid glVariantPointerEXT(GLuint id, GLenum type, GLuint stride, GLvoid* addr)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg id\r\nldarg type\r\nldarg stride\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]unsigned int32,[in]float64[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg id\r\nldarg type\r\nldarg stride\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]unsigned int32,[in]float64[])\r\nret")]
        #endif
        public static void glVariantPointerEXT([In] IntPtr extensionPointer, int id, int type, uint stride, double[] addr) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVariantPointerEXT([In] IntPtr extensionPointer, int id, int type, uint stride, double[] addr)

        #region void glVariantPointerEXT([In] IntPtr extensionPointer, int id, int type, uint stride, uint[] addr)
        // GLvoid glVariantPointerEXT(GLuint id, GLenum type, GLuint stride, GLvoid* addr)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg id\r\nldarg type\r\nldarg stride\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]unsigned int32,[in]unsigned int32[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg id\r\nldarg type\r\nldarg stride\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]unsigned int32,[in]unsigned int32[])\r\nret")]
        #endif
        public static void glVariantPointerEXT([In] IntPtr extensionPointer, int id, int type, uint stride, uint[] addr) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVariantPointerEXT([In] IntPtr extensionPointer, int id, int type, uint stride, uint[] addr)

        #region void glVariantPointerEXT([In] IntPtr extensionPointer, int id, int type, uint stride, float[] addr)
        // GLvoid glVariantPointerEXT(GLuint id, GLenum type, GLuint stride, GLvoid* addr)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg id\r\nldarg type\r\nldarg stride\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]unsigned int32,[in]float32[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg id\r\nldarg type\r\nldarg stride\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]unsigned int32,[in]float32[])\r\nret")]
        #endif
        public static void glVariantPointerEXT([In] IntPtr extensionPointer, int id, int type, uint stride, float[] addr) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVariantPointerEXT([In] IntPtr extensionPointer, int id, int type, uint stride, float[] addr)

        #region void glVariantPointerEXT([In] IntPtr extensionPointer, int id, int type, uint stride, sbyte[] addr)
        // GLvoid glVariantPointerEXT(GLuint id, GLenum type, GLuint stride, GLvoid* addr)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg id\r\nldarg type\r\nldarg stride\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]unsigned int32,[in]int8[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg id\r\nldarg type\r\nldarg stride\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]unsigned int32,[in]int8[])\r\nret")]
        #endif
        public static void glVariantPointerEXT([In] IntPtr extensionPointer, int id, int type, uint stride, sbyte[] addr) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVariantPointerEXT([In] IntPtr extensionPointer, int id, int type, uint stride, sbyte[] addr)

        #region void glVariantPointerEXT([In] IntPtr extensionPointer, int id, int type, uint stride, byte[] addr)
        // GLvoid glVariantPointerEXT(GLuint id, GLenum type, GLuint stride, GLvoid* addr)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg id\r\nldarg type\r\nldarg stride\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]unsigned int32,[in]unsigned int8[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg id\r\nldarg type\r\nldarg stride\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]unsigned int32,[in]unsigned int8[])\r\nret")]
        #endif
        public static void glVariantPointerEXT([In] IntPtr extensionPointer, int id, int type, uint stride, byte[] addr) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVariantPointerEXT([In] IntPtr extensionPointer, int id, int type, uint stride, byte[] addr)

        #region void glVariantPointerEXT([In] IntPtr extensionPointer, int id, int type, uint stride, IntPtr addr)
        // GLvoid glVariantPointerEXT(GLuint id, GLenum type, GLuint stride, GLvoid* addr)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg id\r\nldarg type\r\nldarg stride\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]unsigned int32,[in]native int)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg id\r\nldarg type\r\nldarg stride\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]unsigned int32,[in]native int)\r\nret")]
        #endif
        public static void glVariantPointerEXT([In] IntPtr extensionPointer, int id, int type, uint stride, IntPtr addr) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVariantPointerEXT([In] IntPtr extensionPointer, int id, int type, uint stride, IntPtr addr)

        #region void glVariantPointerEXT([In] IntPtr extensionPointer, int id, int type, uint stride, int[] addr)
        // GLvoid glVariantPointerEXT(GLuint id, GLenum type, GLuint stride, GLvoid* addr)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg id\r\nldarg type\r\nldarg stride\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]unsigned int32,[in]int32[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg id\r\nldarg type\r\nldarg stride\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]unsigned int32,[in]int32[])\r\nret")]
        #endif
        public static void glVariantPointerEXT([In] IntPtr extensionPointer, int id, int type, uint stride, int[] addr) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVariantPointerEXT([In] IntPtr extensionPointer, int id, int type, uint stride, int[] addr)

        #region void glVariantPointerEXT([In] IntPtr extensionPointer, int id, int type, uint stride, ushort[] addr)
        // GLvoid glVariantPointerEXT(GLuint id, GLenum type, GLuint stride, GLvoid* addr)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg id\r\nldarg type\r\nldarg stride\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]unsigned int32,[in]unsigned int16[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg id\r\nldarg type\r\nldarg stride\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]unsigned int32,[in]unsigned int16[])\r\nret")]
        #endif
        public static void glVariantPointerEXT([In] IntPtr extensionPointer, int id, int type, uint stride, ushort[] addr) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVariantPointerEXT([In] IntPtr extensionPointer, int id, int type, uint stride, ushort[] addr)

        #region void glVariantPointerEXT([In] IntPtr extensionPointer, int id, int type, uint stride, short[] addr)
        // GLvoid glVariantPointerEXT(GLuint id, GLenum type, GLuint stride, GLvoid* addr)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg id\r\nldarg type\r\nldarg stride\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]unsigned int32,[in]int16[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg id\r\nldarg type\r\nldarg stride\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]unsigned int32,[in]int16[])\r\nret")]
        #endif
        public static void glVariantPointerEXT([In] IntPtr extensionPointer, int id, int type, uint stride, short[] addr) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVariantPointerEXT([In] IntPtr extensionPointer, int id, int type, uint stride, short[] addr)

        #region void glVariantPointerEXT([In] IntPtr extensionPointer, int id, int type, uint stride, void* addr)
        // GLvoid glVariantPointerEXT(GLuint id, GLenum type, GLuint stride, GLvoid* addr)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg id\r\nldarg type\r\nldarg stride\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]unsigned int32,[in]void*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg id\r\nldarg type\r\nldarg stride\r\nldarg addr\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]unsigned int32,[in]void*)\r\nret")]
        #endif
        public static unsafe void glVariantPointerEXT([In] IntPtr extensionPointer, int id, int type, uint stride, void* addr) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVariantPointerEXT([In] IntPtr extensionPointer, int id, int type, uint stride, void* addr)
        #endregion Overloads for GLvoid glVariantPointerEXT(GLuint id, GLenum type, GLuint stride, GLvoid* addr)

        #region void glEnableVariantClientStateEXT([In] IntPtr extensionPointer, int id)
        // GLvoid glEnableVariantClientStateEXT(GLuint id)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg id\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg id\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32)\r\nret")]
        #endif
        public static void glEnableVariantClientStateEXT([In] IntPtr extensionPointer, int id) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glEnableVariantClientStateEXT([In] IntPtr extensionPointer, int id)

        #region void glDisableVariantClientStateEXT([In] IntPtr extensionPointer, int id)
        // GLvoid glDisableVariantClientStateEXT(GLuint id)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg id\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg id\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32)\r\nret")]
        #endif
        public static void glDisableVariantClientStateEXT([In] IntPtr extensionPointer, int id) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glDisableVariantClientStateEXT([In] IntPtr extensionPointer, int id)

        #region int glBindLightParameterEXT([In] IntPtr extensionPointer, int light, int parameterValue)
        // GLuint glBindLightParameterEXT(GLenum light, GLenum parameterValue)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg light\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged stdcall int32([in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg light\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged cdecl int32([in]int32,[in]int32)\r\nret")]
        #endif
        public static int glBindLightParameterEXT([In] IntPtr extensionPointer, int light, int parameterValue) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion int glBindLightParameterEXT([In] IntPtr extensionPointer, int light, int parameterValue)

        #region int glBindMaterialParameterEXT([In] IntPtr extensionPointer, int face, int parameterValue)
        // GLuint glBindMaterialParameterEXT(GLenum face, GLenum parameterValue)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg face\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged stdcall int32([in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg face\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged cdecl int32([in]int32,[in]int32)\r\nret")]
        #endif
        public static int glBindMaterialParameterEXT([In] IntPtr extensionPointer, int face, int parameterValue) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion int glBindMaterialParameterEXT([In] IntPtr extensionPointer, int face, int parameterValue)

        #region int glBindTexGenParameterEXT([In] IntPtr extensionPointer, int unit, int coord, int parameterValue)
        // GLuint glBindTexGenParameterEXT(GLenum unit, GLenum coord, GLenum parameterValue)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg unit\r\nldarg coord\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged stdcall int32([in]int32,[in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg unit\r\nldarg coord\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged cdecl int32([in]int32,[in]int32,[in]int32)\r\nret")]
        #endif
        public static int glBindTexGenParameterEXT([In] IntPtr extensionPointer, int unit, int coord, int parameterValue) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion int glBindTexGenParameterEXT([In] IntPtr extensionPointer, int unit, int coord, int parameterValue)

        #region int glBindTextureUnitParameterEXT([In] IntPtr extensionPointer, int unit, int parameterValue)
        // GLuint glBindTextureUnitParameterEXT(GLenum unit, GLenum parameterValue)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg unit\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged stdcall int32([in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg unit\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged cdecl int32([in]int32,[in]int32)\r\nret")]
        #endif
        public static int glBindTextureUnitParameterEXT([In] IntPtr extensionPointer, int unit, int parameterValue) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion int glBindTextureUnitParameterEXT([In] IntPtr extensionPointer, int unit, int parameterValue)

        #region int glBindParameterEXT([In] IntPtr extensionPointer, int parameterValue)
        // GLuint glBindParameterEXT(GLenum parameterValue)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged stdcall int32([in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg parameterValue\r\nldarg extensionPointer\r\ncalli unmanaged cdecl int32([in]int32)\r\nret")]
        #endif
        public static int glBindParameterEXT([In] IntPtr extensionPointer, int parameterValue) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion int glBindParameterEXT([In] IntPtr extensionPointer, int parameterValue)

        #region int glIsVariantEnabledEXT([In] IntPtr extensionPointer, int id, int cap)
        // GLboolean glIsVariantEnabledEXT(GLuint id, GLenum cap)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg id\r\nldarg cap\r\nldarg extensionPointer\r\ncalli unmanaged stdcall int32([in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg id\r\nldarg cap\r\nldarg extensionPointer\r\ncalli unmanaged cdecl int32([in]int32,[in]int32)\r\nret")]
        #endif
        public static int glIsVariantEnabledEXT([In] IntPtr extensionPointer, int id, int cap) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion int glIsVariantEnabledEXT([In] IntPtr extensionPointer, int id, int cap)

        #region Overloads for GLvoid glGetVariantBooleanvEXT(GLuint id, GLenum parameterValue, GLboolean* data)
        #region void glGetVariantBooleanvEXT([In] IntPtr extensionPointer, int id, int parameterValue, out int data)
        // GLvoid glGetVariantBooleanvEXT(GLuint id, GLenum parameterValue, GLboolean* data)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg parameterValue\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg parameterValue\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]int32)\r\nret")]
        #endif
        public static void glGetVariantBooleanvEXT([In] IntPtr extensionPointer, int id, int parameterValue, out int data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetVariantBooleanvEXT([In] IntPtr extensionPointer, int id, int parameterValue, out int data)

        #region void glGetVariantBooleanvEXT([In] IntPtr extensionPointer, int id, int parameterValue, int[] data)
        // GLvoid glGetVariantBooleanvEXT(GLuint id, GLenum parameterValue, GLboolean* data)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg parameterValue\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg parameterValue\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]int32[])\r\nret")]
        #endif
        public static void glGetVariantBooleanvEXT([In] IntPtr extensionPointer, int id, int parameterValue, int[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetVariantBooleanvEXT([In] IntPtr extensionPointer, int id, int parameterValue, int[] data)

        #region void glGetVariantBooleanvEXT([In] IntPtr extensionPointer, int id, int parameterValue, IntPtr data)
        // GLvoid glGetVariantBooleanvEXT(GLuint id, GLenum parameterValue, GLboolean* data)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg parameterValue\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg parameterValue\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGetVariantBooleanvEXT([In] IntPtr extensionPointer, int id, int parameterValue, IntPtr data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetVariantBooleanvEXT([In] IntPtr extensionPointer, int id, int parameterValue, IntPtr data)

        #region void glGetVariantBooleanvEXT([In] IntPtr extensionPointer, int id, int parameterValue, int* data)
        // GLvoid glGetVariantBooleanvEXT(GLuint id, GLenum parameterValue, GLboolean* data)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg parameterValue\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg parameterValue\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]int32*)\r\nret")]
        #endif
        public static unsafe void glGetVariantBooleanvEXT([In] IntPtr extensionPointer, int id, int parameterValue, int* data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetVariantBooleanvEXT([In] IntPtr extensionPointer, int id, int parameterValue, int* data)
        #endregion Overloads for GLvoid glGetVariantBooleanvEXT(GLuint id, GLenum parameterValue, GLboolean* data)

        #region Overloads for GLvoid glGetVariantIntegervEXT(GLuint id, GLenum parameterValue, GLint* data)
        #region void glGetVariantIntegervEXT([In] IntPtr extensionPointer, int id, int parameterValue, out int data)
        // GLvoid glGetVariantIntegervEXT(GLuint id, GLenum parameterValue, GLint* data)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg parameterValue\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg parameterValue\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]int32)\r\nret")]
        #endif
        public static void glGetVariantIntegervEXT([In] IntPtr extensionPointer, int id, int parameterValue, out int data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetVariantIntegervEXT([In] IntPtr extensionPointer, int id, int parameterValue, out int data)

        #region void glGetVariantIntegervEXT([In] IntPtr extensionPointer, int id, int parameterValue, int[] data)
        // GLvoid glGetVariantIntegervEXT(GLuint id, GLenum parameterValue, GLint* data)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg parameterValue\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg parameterValue\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]int32[])\r\nret")]
        #endif
        public static void glGetVariantIntegervEXT([In] IntPtr extensionPointer, int id, int parameterValue, int[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetVariantIntegervEXT([In] IntPtr extensionPointer, int id, int parameterValue, int[] data)

        #region void glGetVariantIntegervEXT([In] IntPtr extensionPointer, int id, int parameterValue, IntPtr data)
        // GLvoid glGetVariantIntegervEXT(GLuint id, GLenum parameterValue, GLint* data)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg parameterValue\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg parameterValue\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGetVariantIntegervEXT([In] IntPtr extensionPointer, int id, int parameterValue, IntPtr data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetVariantIntegervEXT([In] IntPtr extensionPointer, int id, int parameterValue, IntPtr data)

        #region void glGetVariantIntegervEXT([In] IntPtr extensionPointer, int id, int parameterValue, int* data)
        // GLvoid glGetVariantIntegervEXT(GLuint id, GLenum parameterValue, GLint* data)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg parameterValue\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg parameterValue\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]int32*)\r\nret")]
        #endif
        public static unsafe void glGetVariantIntegervEXT([In] IntPtr extensionPointer, int id, int parameterValue, int* data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetVariantIntegervEXT([In] IntPtr extensionPointer, int id, int parameterValue, int* data)
        #endregion Overloads for GLvoid glGetVariantIntegervEXT(GLuint id, GLenum parameterValue, GLint* data)

        #region Overloads for GLvoid glGetVariantFloatvEXT(GLuint id, GLenum parameterValue, GLfloat* data)
        #region void glGetVariantFloatvEXT([In] IntPtr extensionPointer, int id, int parameterValue, out float data)
        // GLvoid glGetVariantFloatvEXT(GLuint id, GLenum parameterValue, GLfloat* data)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg parameterValue\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg parameterValue\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]float32)\r\nret")]
        #endif
        public static void glGetVariantFloatvEXT([In] IntPtr extensionPointer, int id, int parameterValue, out float data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetVariantFloatvEXT([In] IntPtr extensionPointer, int id, int parameterValue, out float data)

        #region void glGetVariantFloatvEXT([In] IntPtr extensionPointer, int id, int parameterValue, float[] data)
        // GLvoid glGetVariantFloatvEXT(GLuint id, GLenum parameterValue, GLfloat* data)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg parameterValue\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg parameterValue\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]float32[])\r\nret")]
        #endif
        public static void glGetVariantFloatvEXT([In] IntPtr extensionPointer, int id, int parameterValue, float[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetVariantFloatvEXT([In] IntPtr extensionPointer, int id, int parameterValue, float[] data)

        #region void glGetVariantFloatvEXT([In] IntPtr extensionPointer, int id, int parameterValue, IntPtr data)
        // GLvoid glGetVariantFloatvEXT(GLuint id, GLenum parameterValue, GLfloat* data)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg parameterValue\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg parameterValue\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGetVariantFloatvEXT([In] IntPtr extensionPointer, int id, int parameterValue, IntPtr data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetVariantFloatvEXT([In] IntPtr extensionPointer, int id, int parameterValue, IntPtr data)

        #region void glGetVariantFloatvEXT([In] IntPtr extensionPointer, int id, int parameterValue, float* data)
        // GLvoid glGetVariantFloatvEXT(GLuint id, GLenum parameterValue, GLfloat* data)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg parameterValue\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg parameterValue\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]float32*)\r\nret")]
        #endif
        public static unsafe void glGetVariantFloatvEXT([In] IntPtr extensionPointer, int id, int parameterValue, float* data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetVariantFloatvEXT([In] IntPtr extensionPointer, int id, int parameterValue, float* data)
        #endregion Overloads for GLvoid glGetVariantFloatvEXT(GLuint id, GLenum parameterValue, GLfloat* data)

        #region Overloads for GLvoid glGetVariantPointervEXT(GLuint id, GLenum parameterValue, GLvoid* data)
        #region void glGetVariantPointervEXT([In] IntPtr extensionPointer, int id, int parameterValue, IntPtr[] data)
        // GLvoid glGetVariantPointervEXT(GLuint id, GLenum parameterValue, GLvoid* data)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg parameterValue\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]native int[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg parameterValue\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]native int[])\r\nret")]
        #endif
        public static void glGetVariantPointervEXT([In] IntPtr extensionPointer, int id, int parameterValue, IntPtr[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetVariantPointervEXT([In] IntPtr extensionPointer, int id, int parameterValue, IntPtr[] data)

        #region void glGetVariantPointervEXT([In] IntPtr extensionPointer, int id, int parameterValue, IntPtr data)
        // GLvoid glGetVariantPointervEXT(GLuint id, GLenum parameterValue, GLvoid* data)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg parameterValue\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg parameterValue\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGetVariantPointervEXT([In] IntPtr extensionPointer, int id, int parameterValue, IntPtr data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetVariantPointervEXT([In] IntPtr extensionPointer, int id, int parameterValue, IntPtr data)

        #region void glGetVariantPointervEXT([In] IntPtr extensionPointer, int id, int parameterValue, void** data)
        // GLvoid glGetVariantPointervEXT(GLuint id, GLenum parameterValue, GLvoid* data)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg parameterValue\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]void**)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg parameterValue\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]void**)\r\nret")]
        #endif
        public static unsafe void glGetVariantPointervEXT([In] IntPtr extensionPointer, int id, int parameterValue, void** data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetVariantPointervEXT([In] IntPtr extensionPointer, int id, int parameterValue, void** data)
        #endregion Overloads for GLvoid glGetVariantPointervEXT(GLuint id, GLenum parameterValue, GLvoid* data)

        #region Overloads for GLvoid glGetInvariantBooleanvEXT(GLuint id, GLenum parameterValue, GLboolean* data)
        #region void glGetInvariantBooleanvEXT([In] IntPtr extensionPointer, int id, int parameterValue, out int data)
        // GLvoid glGetInvariantBooleanvEXT(GLuint id, GLenum parameterValue, GLboolean* data)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg parameterValue\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg parameterValue\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]int32)\r\nret")]
        #endif
        public static void glGetInvariantBooleanvEXT([In] IntPtr extensionPointer, int id, int parameterValue, out int data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetInvariantBooleanvEXT([In] IntPtr extensionPointer, int id, int parameterValue, out int data)

        #region void glGetInvariantBooleanvEXT([In] IntPtr extensionPointer, int id, int parameterValue, int[] data)
        // GLvoid glGetInvariantBooleanvEXT(GLuint id, GLenum parameterValue, GLboolean* data)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg parameterValue\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg parameterValue\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]int32[])\r\nret")]
        #endif
        public static void glGetInvariantBooleanvEXT([In] IntPtr extensionPointer, int id, int parameterValue, int[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetInvariantBooleanvEXT([In] IntPtr extensionPointer, int id, int parameterValue, int[] data)

        #region void glGetInvariantBooleanvEXT([In] IntPtr extensionPointer, int id, int parameterValue, IntPtr data)
        // GLvoid glGetInvariantBooleanvEXT(GLuint id, GLenum parameterValue, GLboolean* data)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg parameterValue\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg parameterValue\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGetInvariantBooleanvEXT([In] IntPtr extensionPointer, int id, int parameterValue, IntPtr data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetInvariantBooleanvEXT([In] IntPtr extensionPointer, int id, int parameterValue, IntPtr data)

        #region void glGetInvariantBooleanvEXT([In] IntPtr extensionPointer, int id, int parameterValue, int* data)
        // GLvoid glGetInvariantBooleanvEXT(GLuint id, GLenum parameterValue, GLboolean* data)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg parameterValue\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg parameterValue\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]int32*)\r\nret")]
        #endif
        public static unsafe void glGetInvariantBooleanvEXT([In] IntPtr extensionPointer, int id, int parameterValue, int* data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetInvariantBooleanvEXT([In] IntPtr extensionPointer, int id, int parameterValue, int* data)
        #endregion Overloads for GLvoid glGetInvariantBooleanvEXT(GLuint id, GLenum parameterValue, GLboolean* data)

        #region Overloads for GLvoid glGetInvariantIntegervEXT(GLuint id, GLenum parameterValue, GLint* data)
        #region void glGetInvariantIntegervEXT([In] IntPtr extensionPointer, int id, int parameterValue, out int data)
        // GLvoid glGetInvariantIntegervEXT(GLuint id, GLenum parameterValue, GLint* data)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg parameterValue\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg parameterValue\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]int32)\r\nret")]
        #endif
        public static void glGetInvariantIntegervEXT([In] IntPtr extensionPointer, int id, int parameterValue, out int data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetInvariantIntegervEXT([In] IntPtr extensionPointer, int id, int parameterValue, out int data)

        #region void glGetInvariantIntegervEXT([In] IntPtr extensionPointer, int id, int parameterValue, int[] data)
        // GLvoid glGetInvariantIntegervEXT(GLuint id, GLenum parameterValue, GLint* data)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg parameterValue\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg parameterValue\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]int32[])\r\nret")]
        #endif
        public static void glGetInvariantIntegervEXT([In] IntPtr extensionPointer, int id, int parameterValue, int[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetInvariantIntegervEXT([In] IntPtr extensionPointer, int id, int parameterValue, int[] data)

        #region void glGetInvariantIntegervEXT([In] IntPtr extensionPointer, int id, int parameterValue, IntPtr data)
        // GLvoid glGetInvariantIntegervEXT(GLuint id, GLenum parameterValue, GLint* data)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg parameterValue\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg parameterValue\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGetInvariantIntegervEXT([In] IntPtr extensionPointer, int id, int parameterValue, IntPtr data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetInvariantIntegervEXT([In] IntPtr extensionPointer, int id, int parameterValue, IntPtr data)

        #region void glGetInvariantIntegervEXT([In] IntPtr extensionPointer, int id, int parameterValue, int* data)
        // GLvoid glGetInvariantIntegervEXT(GLuint id, GLenum parameterValue, GLint* data)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg parameterValue\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg parameterValue\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]int32*)\r\nret")]
        #endif
        public static unsafe void glGetInvariantIntegervEXT([In] IntPtr extensionPointer, int id, int parameterValue, int* data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetInvariantIntegervEXT([In] IntPtr extensionPointer, int id, int parameterValue, int* data)
        #endregion Overloads for GLvoid glGetInvariantIntegervEXT(GLuint id, GLenum parameterValue, GLint* data)

        #region Overloads for GLvoid glGetInvariantFloatvEXT(GLuint id, GLenum parameterValue, GLfloat* data)
        #region void glGetInvariantFloatvEXT([In] IntPtr extensionPointer, int id, int parameterValue, out float data)
        // GLvoid glGetInvariantFloatvEXT(GLuint id, GLenum parameterValue, GLfloat* data)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg parameterValue\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg parameterValue\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]float32)\r\nret")]
        #endif
        public static void glGetInvariantFloatvEXT([In] IntPtr extensionPointer, int id, int parameterValue, out float data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetInvariantFloatvEXT([In] IntPtr extensionPointer, int id, int parameterValue, out float data)

        #region void glGetInvariantFloatvEXT([In] IntPtr extensionPointer, int id, int parameterValue, float[] data)
        // GLvoid glGetInvariantFloatvEXT(GLuint id, GLenum parameterValue, GLfloat* data)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg parameterValue\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg parameterValue\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]float32[])\r\nret")]
        #endif
        public static void glGetInvariantFloatvEXT([In] IntPtr extensionPointer, int id, int parameterValue, float[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetInvariantFloatvEXT([In] IntPtr extensionPointer, int id, int parameterValue, float[] data)

        #region void glGetInvariantFloatvEXT([In] IntPtr extensionPointer, int id, int parameterValue, IntPtr data)
        // GLvoid glGetInvariantFloatvEXT(GLuint id, GLenum parameterValue, GLfloat* data)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg parameterValue\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg parameterValue\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGetInvariantFloatvEXT([In] IntPtr extensionPointer, int id, int parameterValue, IntPtr data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetInvariantFloatvEXT([In] IntPtr extensionPointer, int id, int parameterValue, IntPtr data)

        #region void glGetInvariantFloatvEXT([In] IntPtr extensionPointer, int id, int parameterValue, float* data)
        // GLvoid glGetInvariantFloatvEXT(GLuint id, GLenum parameterValue, GLfloat* data)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg parameterValue\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg parameterValue\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]float32*)\r\nret")]
        #endif
        public static unsafe void glGetInvariantFloatvEXT([In] IntPtr extensionPointer, int id, int parameterValue, float* data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetInvariantFloatvEXT([In] IntPtr extensionPointer, int id, int parameterValue, float* data)
        #endregion Overloads for GLvoid glGetInvariantFloatvEXT(GLuint id, GLenum parameterValue, GLfloat* data)

        #region Overloads for GLvoid glGetLocalConstantBooleanvEXT(GLuint id, GLenum parameterValue, GLboolean* data)
        #region void glGetLocalConstantBooleanvEXT([In] IntPtr extensionPointer, int id, int parameterValue, out int data)
        // GLvoid glGetLocalConstantBooleanvEXT(GLuint id, GLenum parameterValue, GLboolean* data)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg parameterValue\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg parameterValue\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]int32)\r\nret")]
        #endif
        public static void glGetLocalConstantBooleanvEXT([In] IntPtr extensionPointer, int id, int parameterValue, out int data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetLocalConstantBooleanvEXT([In] IntPtr extensionPointer, int id, int parameterValue, out int data)

        #region void glGetLocalConstantBooleanvEXT([In] IntPtr extensionPointer, int id, int parameterValue, int[] data)
        // GLvoid glGetLocalConstantBooleanvEXT(GLuint id, GLenum parameterValue, GLboolean* data)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg parameterValue\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg parameterValue\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]int32[])\r\nret")]
        #endif
        public static void glGetLocalConstantBooleanvEXT([In] IntPtr extensionPointer, int id, int parameterValue, int[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetLocalConstantBooleanvEXT([In] IntPtr extensionPointer, int id, int parameterValue, int[] data)

        #region void glGetLocalConstantBooleanvEXT([In] IntPtr extensionPointer, int id, int parameterValue, IntPtr data)
        // GLvoid glGetLocalConstantBooleanvEXT(GLuint id, GLenum parameterValue, GLboolean* data)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg parameterValue\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg parameterValue\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGetLocalConstantBooleanvEXT([In] IntPtr extensionPointer, int id, int parameterValue, IntPtr data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetLocalConstantBooleanvEXT([In] IntPtr extensionPointer, int id, int parameterValue, IntPtr data)

        #region void glGetLocalConstantBooleanvEXT([In] IntPtr extensionPointer, int id, int parameterValue, int* data)
        // GLvoid glGetLocalConstantBooleanvEXT(GLuint id, GLenum parameterValue, GLboolean* data)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg parameterValue\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg parameterValue\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]int32*)\r\nret")]
        #endif
        public static unsafe void glGetLocalConstantBooleanvEXT([In] IntPtr extensionPointer, int id, int parameterValue, int* data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetLocalConstantBooleanvEXT([In] IntPtr extensionPointer, int id, int parameterValue, int* data)
        #endregion Overloads for GLvoid glGetLocalConstantBooleanvEXT(GLuint id, GLenum parameterValue, GLboolean* data)

        #region Overloads for GLvoid glGetLocalConstantIntegervEXT(GLuint id, GLenum parameterValue, GLint* data)
        #region void glGetLocalConstantIntegervEXT([In] IntPtr extensionPointer, int id, int parameterValue, out int data)
        // GLvoid glGetLocalConstantIntegervEXT(GLuint id, GLenum parameterValue, GLint* data)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg parameterValue\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg parameterValue\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]int32)\r\nret")]
        #endif
        public static void glGetLocalConstantIntegervEXT([In] IntPtr extensionPointer, int id, int parameterValue, out int data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetLocalConstantIntegervEXT([In] IntPtr extensionPointer, int id, int parameterValue, out int data)

        #region void glGetLocalConstantIntegervEXT([In] IntPtr extensionPointer, int id, int parameterValue, int[] data)
        // GLvoid glGetLocalConstantIntegervEXT(GLuint id, GLenum parameterValue, GLint* data)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg parameterValue\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg parameterValue\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]int32[])\r\nret")]
        #endif
        public static void glGetLocalConstantIntegervEXT([In] IntPtr extensionPointer, int id, int parameterValue, int[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetLocalConstantIntegervEXT([In] IntPtr extensionPointer, int id, int parameterValue, int[] data)

        #region void glGetLocalConstantIntegervEXT([In] IntPtr extensionPointer, int id, int parameterValue, IntPtr data)
        // GLvoid glGetLocalConstantIntegervEXT(GLuint id, GLenum parameterValue, GLint* data)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg parameterValue\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg parameterValue\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGetLocalConstantIntegervEXT([In] IntPtr extensionPointer, int id, int parameterValue, IntPtr data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetLocalConstantIntegervEXT([In] IntPtr extensionPointer, int id, int parameterValue, IntPtr data)

        #region void glGetLocalConstantIntegervEXT([In] IntPtr extensionPointer, int id, int parameterValue, int* data)
        // GLvoid glGetLocalConstantIntegervEXT(GLuint id, GLenum parameterValue, GLint* data)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg parameterValue\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg parameterValue\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]int32*)\r\nret")]
        #endif
        public static unsafe void glGetLocalConstantIntegervEXT([In] IntPtr extensionPointer, int id, int parameterValue, int* data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetLocalConstantIntegervEXT([In] IntPtr extensionPointer, int id, int parameterValue, int* data)
        #endregion Overloads for GLvoid glGetLocalConstantIntegervEXT(GLuint id, GLenum parameterValue, GLint* data)

        #region Overloads for GLvoid glGetLocalConstantFloatvEXT(GLuint id, GLenum parameterValue, GLfloat* data)
        #region void glGetLocalConstantFloatvEXT([In] IntPtr extensionPointer, int id, int parameterValue, out float data)
        // GLvoid glGetLocalConstantFloatvEXT(GLuint id, GLenum parameterValue, GLfloat* data)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg parameterValue\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg parameterValue\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]float32)\r\nret")]
        #endif
        public static void glGetLocalConstantFloatvEXT([In] IntPtr extensionPointer, int id, int parameterValue, out float data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetLocalConstantFloatvEXT([In] IntPtr extensionPointer, int id, int parameterValue, out float data)

        #region void glGetLocalConstantFloatvEXT([In] IntPtr extensionPointer, int id, int parameterValue, float[] data)
        // GLvoid glGetLocalConstantFloatvEXT(GLuint id, GLenum parameterValue, GLfloat* data)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg parameterValue\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg parameterValue\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]float32[])\r\nret")]
        #endif
        public static void glGetLocalConstantFloatvEXT([In] IntPtr extensionPointer, int id, int parameterValue, float[] data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetLocalConstantFloatvEXT([In] IntPtr extensionPointer, int id, int parameterValue, float[] data)

        #region void glGetLocalConstantFloatvEXT([In] IntPtr extensionPointer, int id, int parameterValue, IntPtr data)
        // GLvoid glGetLocalConstantFloatvEXT(GLuint id, GLenum parameterValue, GLfloat* data)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg parameterValue\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg parameterValue\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGetLocalConstantFloatvEXT([In] IntPtr extensionPointer, int id, int parameterValue, IntPtr data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetLocalConstantFloatvEXT([In] IntPtr extensionPointer, int id, int parameterValue, IntPtr data)

        #region void glGetLocalConstantFloatvEXT([In] IntPtr extensionPointer, int id, int parameterValue, float* data)
        // GLvoid glGetLocalConstantFloatvEXT(GLuint id, GLenum parameterValue, GLfloat* data)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg parameterValue\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg parameterValue\r\nldarg data\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]float32*)\r\nret")]
        #endif
        public static unsafe void glGetLocalConstantFloatvEXT([In] IntPtr extensionPointer, int id, int parameterValue, float* data) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetLocalConstantFloatvEXT([In] IntPtr extensionPointer, int id, int parameterValue, float* data)
        #endregion Overloads for GLvoid glGetLocalConstantFloatvEXT(GLuint id, GLenum parameterValue, GLfloat* data)
        #endregion GL_EXT_vertex_shader Methods
        #endregion GL_EXT_vertex_shader (248)

        #region GL_EXT_shadow_funcs (267)
        #endregion GL_EXT_shadow_funcs (267)

        #region GL_EXT_stencil_two_side (268)
        #region GL_EXT_stencil_two_side Constants
        #region GL_STENCIL_TEST_TWO_SIDE_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_STENCIL_TEST_TWO_SIDE_EXT 0x8910
        public const int GL_STENCIL_TEST_TWO_SIDE_EXT = 0x8910;
        #endregion GL_STENCIL_TEST_TWO_SIDE_EXT

        #region GL_ACTIVE_STENCIL_FACE_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_ACTIVE_STENCIL_FACE_EXT 0x8911
        public const int GL_ACTIVE_STENCIL_FACE_EXT = 0x8911;
        #endregion GL_ACTIVE_STENCIL_FACE_EXT
        #endregion GL_EXT_stencil_two_side Constants

        #region GL_EXT_stencil_two_side Methods
        #region void glActiveStencilFaceEXT([In] IntPtr extensionPointer, int face)
        // GLvoid glActiveStencilFaceEXT(GLenum face)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg face\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg face\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32)\r\nret")]
        #endif
        public static void glActiveStencilFaceEXT([In] IntPtr extensionPointer, int face) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glActiveStencilFaceEXT([In] IntPtr extensionPointer, int face)
        #endregion GL_EXT_stencil_two_side Methods
        #endregion GL_EXT_stencil_two_side (268)

        #region GL_EXT_depth_bounds_test (297)
        #region GL_EXT_depth_bounds_test Constants
        #region GL_DEPTH_BOUNDS_TEST_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DEPTH_BOUNDS_TEST_EXT 0x8890
        public const int GL_DEPTH_BOUNDS_TEST_EXT = 0x8890;
        #endregion GL_DEPTH_BOUNDS_TEST_EXT

        #region GL_DEPTH_BOUNDS_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DEPTH_BOUNDS_EXT 0x8891
        public const int GL_DEPTH_BOUNDS_EXT = 0x8891;
        #endregion GL_DEPTH_BOUNDS_EXT
        #endregion GL_EXT_depth_bounds_test Constants

        #region GL_EXT_depth_bounds_test Methods
        #region void glDepthBoundsEXT([In] IntPtr extensionPointer, double zmin, double zmax)
        // GLvoid glDepthBoundsEXT(GLclampd zmin, GLclampd zmax)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg zmin\r\nldarg zmax\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]float64,[in]float64)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg zmin\r\nldarg zmax\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]float64,[in]float64)\r\nret")]
        #endif
        public static void glDepthBoundsEXT([In] IntPtr extensionPointer, double zmin, double zmax) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glDepthBoundsEXT([In] IntPtr extensionPointer, double zmin, double zmax)
        #endregion GL_EXT_depth_bounds_test Methods
        #endregion GL_EXT_depth_bounds_test (297)

        #region GL_EXT_texture_mirror_clamp (298)
        #region GL_EXT_texture_mirror_clamp Constants
        #region GL_MIRROR_CLAMP_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MIRROR_CLAMP_EXT 0x8742
        public const int GL_MIRROR_CLAMP_EXT = 0x8742;
        #endregion GL_MIRROR_CLAMP_EXT

        #region GL_MIRROR_CLAMP_TO_EDGE_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MIRROR_CLAMP_TO_EDGE_EXT 0x8743
        public const int GL_MIRROR_CLAMP_TO_EDGE_EXT = 0x8743;
        #endregion GL_MIRROR_CLAMP_TO_EDGE_EXT

        #region GL_MIRROR_CLAMP_TO_BORDER_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MIRROR_CLAMP_TO_BORDER_EXT 0x8912
        public const int GL_MIRROR_CLAMP_TO_BORDER_EXT = 0x8912;
        #endregion GL_MIRROR_CLAMP_TO_BORDER_EXT
        #endregion GL_EXT_texture_mirror_clamp Constants
        #endregion GL_EXT_texture_mirror_clamp (298)

        #region GL_EXT_texture_rectangle (N/A)
        #region GL_EXT_texture_rectangle Constants
        #region GL_TEXTURE_RECTANGLE_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_RECTANGLE_EXT 0x84F5
        public const int GL_TEXTURE_RECTANGLE_EXT = 0x84F5;
        #endregion GL_TEXTURE_RECTANGLE_EXT

        #region GL_TEXTURE_BINDING_RECTANGLE_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_BINDING_RECTANGLE_EXT 0x84F6
        public const int GL_TEXTURE_BINDING_RECTANGLE_EXT = 0x84F6;
        #endregion GL_TEXTURE_BINDING_RECTANGLE_EXT

        #region GL_PROXY_TEXTURE_RECTANGLE_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PROXY_TEXTURE_RECTANGLE_EXT 0x84F7
        public const int GL_PROXY_TEXTURE_RECTANGLE_EXT = 0x84F7;
        #endregion GL_PROXY_TEXTURE_RECTANGLE_EXT

        #region GL_MAX_RECTANGLE_TEXTURE_SIZE_EXT
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAX_RECTANGLE_TEXTURE_SIZE_EXT 0x84F8
        public const int GL_MAX_RECTANGLE_TEXTURE_SIZE_EXT = 0x84F8;
        #endregion GL_MAX_RECTANGLE_TEXTURE_SIZE_EXT
        #endregion GL_EXT_texture_rectangle Constants
        #endregion GL_EXT_texture_rectangle (N/A)
        #endregion EXT Extensions

        #region IBM Extensions
        #region GL_IBM_rasterpos_clip (110)
        #region GL_IBM_rasterpos_clip Constants
        #region GL_RASTER_POSITION_UNCLIPPED_IBM
        /// <summary>
        /// 
        /// </summary>
        // #define GL_RASTER_POSITION_UNCLIPPED_IBM 0x19262
        public const int GL_RASTER_POSITION_UNCLIPPED_IBM = 0x19262;
        #endregion GL_RASTER_POSITION_UNCLIPPED_IBM
        #endregion GL_IBM_rasterpos_clip Constants
        #endregion GL_IBM_rasterpos_clip (110)

        #region GL_IBM_cull_vertex (199)
        #region GL_IBM_cull_vertex Constants
        #region GL_CULL_VERTEX_IBM
        /// <summary>
        /// 
        /// </summary>
        // #define GL_CULL_VERTEX_IBM 0x1928A
        public const int GL_CULL_VERTEX_IBM = 0x1928A;
        #endregion GL_CULL_VERTEX_IBM
        #endregion GL_IBM_cull_vertex Constants
        #endregion GL_IBM_cull_vertex (199)

        #region GL_IBM_multimode_draw_arrays (200)
        #region GL_IBM_multimode_draw_arrays Methods
        #region Overloads for GLvoid glMultiModeDrawArraysIBM(GLenum* mode, GLint* first, GLsizei* count, GLsizei primcount, GLint modestride)
        #region void glMultiModeDrawArraysIBM([In] IntPtr extensionPointer, ref int mode, ref int first, ref int count, int primcount, int modestride)
        // GLvoid glMultiModeDrawArraysIBM(GLenum* mode, GLint* first, GLsizei* count, GLsizei primcount, GLint modestride)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg mode\r\nldarg first\r\nldarg count\r\nldarg primcount\r\nldarg modestride\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]int32,[in][out]int32,[in][out]int32,[in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg mode\r\nldarg first\r\nldarg count\r\nldarg primcount\r\nldarg modestride\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]int32,[in][out]int32,[in][out]int32,[in]int32,[in]int32)\r\nret")]
        #endif
        public static void glMultiModeDrawArraysIBM([In] IntPtr extensionPointer, ref int mode, ref int first, ref int count, int primcount, int modestride) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiModeDrawArraysIBM([In] IntPtr extensionPointer, ref int mode, ref int first, ref int count, int primcount, int modestride)

        #region void glMultiModeDrawArraysIBM([In] IntPtr extensionPointer, int[] mode, int[] first, int[] count, int primcount, int modestride)
        // GLvoid glMultiModeDrawArraysIBM(GLenum* mode, GLint* first, GLsizei* count, GLsizei primcount, GLint modestride)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg mode\r\nldarg first\r\nldarg count\r\nldarg primcount\r\nldarg modestride\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32[],[in]int32[],[in]int32[],[in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg mode\r\nldarg first\r\nldarg count\r\nldarg primcount\r\nldarg modestride\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32[],[in]int32[],[in]int32[],[in]int32,[in]int32)\r\nret")]
        #endif
        public static void glMultiModeDrawArraysIBM([In] IntPtr extensionPointer, int[] mode, int[] first, int[] count, int primcount, int modestride) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiModeDrawArraysIBM([In] IntPtr extensionPointer, int[] mode, int[] first, int[] count, int primcount, int modestride)

        #region void glMultiModeDrawArraysIBM([In] IntPtr extensionPointer, IntPtr mode, IntPtr first, IntPtr count, int primcount, int modestride)
        // GLvoid glMultiModeDrawArraysIBM(GLenum* mode, GLint* first, GLsizei* count, GLsizei primcount, GLint modestride)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg mode\r\nldarg first\r\nldarg count\r\nldarg primcount\r\nldarg modestride\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]native int,[in]native int,[in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg mode\r\nldarg first\r\nldarg count\r\nldarg primcount\r\nldarg modestride\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]native int,[in]native int,[in]int32,[in]int32)\r\nret")]
        #endif
        public static void glMultiModeDrawArraysIBM([In] IntPtr extensionPointer, IntPtr mode, IntPtr first, IntPtr count, int primcount, int modestride) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiModeDrawArraysIBM([In] IntPtr extensionPointer, IntPtr mode, IntPtr first, IntPtr count, int primcount, int modestride)

        #region void glMultiModeDrawArraysIBM([In] IntPtr extensionPointer, int* mode, int* first, int* count, int primcount, int modestride)
        // GLvoid glMultiModeDrawArraysIBM(GLenum* mode, GLint* first, GLsizei* count, GLsizei primcount, GLint modestride)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg mode\r\nldarg first\r\nldarg count\r\nldarg primcount\r\nldarg modestride\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32*,[in]int32*,[in]int32*,[in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg mode\r\nldarg first\r\nldarg count\r\nldarg primcount\r\nldarg modestride\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32*,[in]int32*,[in]int32*,[in]int32,[in]int32)\r\nret")]
        #endif
        public static unsafe void glMultiModeDrawArraysIBM([In] IntPtr extensionPointer, int* mode, int* first, int* count, int primcount, int modestride) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiModeDrawArraysIBM([In] IntPtr extensionPointer, int* mode, int* first, int* count, int primcount, int modestride)
        #endregion Overloads for GLvoid glMultiModeDrawArraysIBM(GLenum* mode, GLint* first, GLsizei* count, GLsizei primcount, GLint modestride)

        #region Overloads for GLvoid glMultiModeDrawElementsIBM(GLenum* mode, GLsizei* count, GLenum type, const GLvoid* indices, GLsizei primcount, GLint modestride)
        #region void glMultiModeDrawElementsIBM([In] IntPtr extensionPointer, int[] mode, int[] count, int type, IntPtr[] indices, int primcount, int modestride)
        // GLvoid glMultiModeDrawElementsIBM(GLenum* mode, GLsizei* count, GLenum type, const GLvoid* indices, GLsizei primcount, GLint modestride)
        #if WIN32
        [IlasmAttribute(".maxstack 7\r\nldarg mode\r\nldarg count\r\nldarg type\r\nldarg indices\r\nldarg primcount\r\nldarg modestride\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32[],[in]int32[],[in]int32,[in]native int[],[in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 7\r\nldarg mode\r\nldarg count\r\nldarg type\r\nldarg indices\r\nldarg primcount\r\nldarg modestride\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32[],[in]int32[],[in]int32,[in]native int[],[in]int32,[in]int32)\r\nret")]
        #endif
        public static void glMultiModeDrawElementsIBM([In] IntPtr extensionPointer, int[] mode, int[] count, int type, IntPtr[] indices, int primcount, int modestride) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiModeDrawElementsIBM([In] IntPtr extensionPointer, int[] mode, int[] count, int type, IntPtr[] indices, int primcount, int modestride)

        #region void glMultiModeDrawElementsIBM([In] IntPtr extensionPointer, IntPtr mode, IntPtr count, int type, IntPtr indices, int primcount, int modestride)
        // GLvoid glMultiModeDrawElementsIBM(GLenum* mode, GLsizei* count, GLenum type, const GLvoid* indices, GLsizei primcount, GLint modestride)
        #if WIN32
        [IlasmAttribute(".maxstack 7\r\nldarg mode\r\nldarg count\r\nldarg type\r\nldarg indices\r\nldarg primcount\r\nldarg modestride\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]native int,[in]int32,[in]native int,[in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 7\r\nldarg mode\r\nldarg count\r\nldarg type\r\nldarg indices\r\nldarg primcount\r\nldarg modestride\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]native int,[in]int32,[in]native int,[in]int32,[in]int32)\r\nret")]
        #endif
        public static void glMultiModeDrawElementsIBM([In] IntPtr extensionPointer, IntPtr mode, IntPtr count, int type, IntPtr indices, int primcount, int modestride) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiModeDrawElementsIBM([In] IntPtr extensionPointer, IntPtr mode, IntPtr count, int type, IntPtr indices, int primcount, int modestride)

        #region void glMultiModeDrawElementsIBM([In] IntPtr extensionPointer, int* mode, int* count, int type, void** indices, int primcount, int modestride)
        // GLvoid glMultiModeDrawElementsIBM(GLenum* mode, GLsizei* count, GLenum type, const GLvoid* indices, GLsizei primcount, GLint modestride)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 7\r\nldarg mode\r\nldarg count\r\nldarg type\r\nldarg indices\r\nldarg primcount\r\nldarg modestride\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32*,[in]int32*,[in]int32,[in]void**,[in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 7\r\nldarg mode\r\nldarg count\r\nldarg type\r\nldarg indices\r\nldarg primcount\r\nldarg modestride\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32*,[in]int32*,[in]int32,[in]void**,[in]int32,[in]int32)\r\nret")]
        #endif
        public static unsafe void glMultiModeDrawElementsIBM([In] IntPtr extensionPointer, int* mode, int* count, int type, void** indices, int primcount, int modestride) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiModeDrawElementsIBM([In] IntPtr extensionPointer, int* mode, int* count, int type, void** indices, int primcount, int modestride)
        #endregion Overloads for GLvoid glMultiModeDrawElementsIBM(GLenum* mode, GLsizei* count, GLenum type, const GLvoid* indices, GLsizei primcount, GLint modestride)
        #endregion GL_IBM_multimode_draw_arrays Methods
        #endregion GL_IBM_multimode_draw_arrays (200)

        #region GL_IBM_vertex_array_lists (201)
        #region GL_IBM_vertex_array_lists Constants
        #region GL_VERTEX_ARRAY_LIST_IBM
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VERTEX_ARRAY_LIST_IBM 0x1929E
        public const int GL_VERTEX_ARRAY_LIST_IBM = 0x1929E;
        #endregion GL_VERTEX_ARRAY_LIST_IBM

        #region GL_NORMAL_ARRAY_LIST_IBM
        /// <summary>
        /// 
        /// </summary>
        // #define GL_NORMAL_ARRAY_LIST_IBM 0x1929F
        public const int GL_NORMAL_ARRAY_LIST_IBM = 0x1929F;
        #endregion GL_NORMAL_ARRAY_LIST_IBM

        #region GL_COLOR_ARRAY_LIST_IBM
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COLOR_ARRAY_LIST_IBM 0x192A0
        public const int GL_COLOR_ARRAY_LIST_IBM = 0x192A0;
        #endregion GL_COLOR_ARRAY_LIST_IBM

        #region GL_INDEX_ARRAY_LIST_IBM
        /// <summary>
        /// 
        /// </summary>
        // #define GL_INDEX_ARRAY_LIST_IBM 0x192A1
        public const int GL_INDEX_ARRAY_LIST_IBM = 0x192A1;
        #endregion GL_INDEX_ARRAY_LIST_IBM

        #region GL_TEXTURE_COORD_ARRAY_LIST_IBM
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_COORD_ARRAY_LIST_IBM 0x192A2
        public const int GL_TEXTURE_COORD_ARRAY_LIST_IBM = 0x192A2;
        #endregion GL_TEXTURE_COORD_ARRAY_LIST_IBM

        #region GL_EDGE_FLAG_ARRAY_LIST_IBM
        /// <summary>
        /// 
        /// </summary>
        // #define GL_EDGE_FLAG_ARRAY_LIST_IBM 0x192A3
        public const int GL_EDGE_FLAG_ARRAY_LIST_IBM = 0x192A3;
        #endregion GL_EDGE_FLAG_ARRAY_LIST_IBM

        #region GL_FOG_COORDINATE_ARRAY_LIST_IBM
        /// <summary>
        /// 
        /// </summary>
        // #define GL_FOG_COORDINATE_ARRAY_LIST_IBM 0x192A4
        public const int GL_FOG_COORDINATE_ARRAY_LIST_IBM = 0x192A4;
        #endregion GL_FOG_COORDINATE_ARRAY_LIST_IBM

        #region GL_SECONDARY_COLOR_ARRAY_LIST_IBM
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SECONDARY_COLOR_ARRAY_LIST_IBM 0x192A5
        public const int GL_SECONDARY_COLOR_ARRAY_LIST_IBM = 0x192A5;
        #endregion GL_SECONDARY_COLOR_ARRAY_LIST_IBM

        #region GL_VERTEX_ARRAY_LIST_STRIDE_IBM
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VERTEX_ARRAY_LIST_STRIDE_IBM 0x192A8
        public const int GL_VERTEX_ARRAY_LIST_STRIDE_IBM = 0x192A8;
        #endregion GL_VERTEX_ARRAY_LIST_STRIDE_IBM

        #region GL_NORMAL_ARRAY_LIST_STRIDE_IBM
        /// <summary>
        /// 
        /// </summary>
        // #define GL_NORMAL_ARRAY_LIST_STRIDE_IBM 0x192A9
        public const int GL_NORMAL_ARRAY_LIST_STRIDE_IBM = 0x192A9;
        #endregion GL_NORMAL_ARRAY_LIST_STRIDE_IBM

        #region GL_COLOR_ARRAY_LIST_STRIDE_IBM
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COLOR_ARRAY_LIST_STRIDE_IBM 0x192AA
        public const int GL_COLOR_ARRAY_LIST_STRIDE_IBM = 0x192AA;
        #endregion GL_COLOR_ARRAY_LIST_STRIDE_IBM

        #region GL_INDEX_ARRAY_LIST_STRIDE_IBM
        /// <summary>
        /// 
        /// </summary>
        // #define GL_INDEX_ARRAY_LIST_STRIDE_IBM 0x192AB
        public const int GL_INDEX_ARRAY_LIST_STRIDE_IBM = 0x192AB;
        #endregion GL_INDEX_ARRAY_LIST_STRIDE_IBM

        #region GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM 0x192AC
        public const int GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM = 0x192AC;
        #endregion GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM

        #region GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM
        /// <summary>
        /// 
        /// </summary>
        // #define GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM 0x192AD
        public const int GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM = 0x192AD;
        #endregion GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM

        #region GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM
        /// <summary>
        /// 
        /// </summary>
        // #define GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM 0x192AE
        public const int GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM = 0x192AE;
        #endregion GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM

        #region GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM 0x192AF
        public const int GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM = 0x192AF;
        #endregion GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM
        #endregion GL_IBM_vertex_array_lists Constants

        #region GL_IBM_vertex_array_lists Methods
        #region Overloads for GLvoid glColorPointerListIBM(GLint size, GLenum type, GLint stride, const GLvoid* pointer, GLint ptrstride)
        #region void glColorPointerListIBM([In] IntPtr extensionPointer, int size, int type, int stride, IntPtr[] pointer, int ptrstride)
        // GLvoid glColorPointerListIBM(GLint size, GLenum type, GLint stride, const GLvoid* pointer, GLint ptrstride)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg ptrstride\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]native int[],[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg ptrstride\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]native int[],[in]int32)\r\nret")]
        #endif
        public static void glColorPointerListIBM([In] IntPtr extensionPointer, int size, int type, int stride, IntPtr[] pointer, int ptrstride) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColorPointerListIBM([In] IntPtr extensionPointer, int size, int type, int stride, IntPtr[] pointer, int ptrstride)

        #region void glColorPointerListIBM([In] IntPtr extensionPointer, int size, int type, int stride, IntPtr pointer, int ptrstride)
        // GLvoid glColorPointerListIBM(GLint size, GLenum type, GLint stride, const GLvoid* pointer, GLint ptrstride)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg ptrstride\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]native int,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg ptrstride\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]native int,[in]int32)\r\nret")]
        #endif
        public static void glColorPointerListIBM([In] IntPtr extensionPointer, int size, int type, int stride, IntPtr pointer, int ptrstride) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColorPointerListIBM([In] IntPtr extensionPointer, int size, int type, int stride, IntPtr pointer, int ptrstride)

        #region void glColorPointerListIBM([In] IntPtr extensionPointer, int size, int type, int stride, void** pointer, int ptrstride)
        // GLvoid glColorPointerListIBM(GLint size, GLenum type, GLint stride, const GLvoid* pointer, GLint ptrstride)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg ptrstride\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]void**,[in]int32)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg ptrstride\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]void**,[in]int32)\r\nret")]
        #endif
        public static unsafe void glColorPointerListIBM([In] IntPtr extensionPointer, int size, int type, int stride, void** pointer, int ptrstride) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColorPointerListIBM([In] IntPtr extensionPointer, int size, int type, int stride, void** pointer, int ptrstride)
        #endregion Overloads for GLvoid glColorPointerListIBM(GLint size, GLenum type, GLint stride, const GLvoid* pointer, GLint ptrstride)

        #region Overloads for GLvoid glSecondaryColorPointerListIBM(GLint size, GLenum type, GLint stride, const GLvoid* pointer, GLint ptrstride)
        #region void glSecondaryColorPointerListIBM([In] IntPtr extensionPointer, int size, int type, int stride, IntPtr[] pointer, int ptrstride)
        // GLvoid glSecondaryColorPointerListIBM(GLint size, GLenum type, GLint stride, const GLvoid* pointer, GLint ptrstride)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg ptrstride\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]native int[],[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg ptrstride\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]native int[],[in]int32)\r\nret")]
        #endif
        public static void glSecondaryColorPointerListIBM([In] IntPtr extensionPointer, int size, int type, int stride, IntPtr[] pointer, int ptrstride) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSecondaryColorPointerListIBM([In] IntPtr extensionPointer, int size, int type, int stride, IntPtr[] pointer, int ptrstride)

        #region void glSecondaryColorPointerListIBM([In] IntPtr extensionPointer, int size, int type, int stride, IntPtr pointer, int ptrstride)
        // GLvoid glSecondaryColorPointerListIBM(GLint size, GLenum type, GLint stride, const GLvoid* pointer, GLint ptrstride)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg ptrstride\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]native int,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg ptrstride\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]native int,[in]int32)\r\nret")]
        #endif
        public static void glSecondaryColorPointerListIBM([In] IntPtr extensionPointer, int size, int type, int stride, IntPtr pointer, int ptrstride) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSecondaryColorPointerListIBM([In] IntPtr extensionPointer, int size, int type, int stride, IntPtr pointer, int ptrstride)

        #region void glSecondaryColorPointerListIBM([In] IntPtr extensionPointer, int size, int type, int stride, void** pointer, int ptrstride)
        // GLvoid glSecondaryColorPointerListIBM(GLint size, GLenum type, GLint stride, const GLvoid* pointer, GLint ptrstride)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg ptrstride\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]void**,[in]int32)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg ptrstride\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]void**,[in]int32)\r\nret")]
        #endif
        public static unsafe void glSecondaryColorPointerListIBM([In] IntPtr extensionPointer, int size, int type, int stride, void** pointer, int ptrstride) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSecondaryColorPointerListIBM([In] IntPtr extensionPointer, int size, int type, int stride, void** pointer, int ptrstride)
        #endregion Overloads for GLvoid glSecondaryColorPointerListIBM(GLint size, GLenum type, GLint stride, const GLvoid* pointer, GLint ptrstride)

        #region Overloads for GLvoid glEdgeFlagPointerListIBM(GLint stride, const GLboolean* pointer, GLint ptrstride)
        #region void glEdgeFlagPointerListIBM([In] IntPtr extensionPointer, int stride, ref int pointer, int ptrstride)
        // GLvoid glEdgeFlagPointerListIBM(GLint stride, const GLboolean* pointer, GLint ptrstride)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg stride\r\nldarg pointer\r\nldarg ptrstride\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg stride\r\nldarg pointer\r\nldarg ptrstride\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]int32,[in]int32)\r\nret")]
        #endif
        public static void glEdgeFlagPointerListIBM([In] IntPtr extensionPointer, int stride, ref int pointer, int ptrstride) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glEdgeFlagPointerListIBM([In] IntPtr extensionPointer, int stride, ref int pointer, int ptrstride)

        #region void glEdgeFlagPointerListIBM([In] IntPtr extensionPointer, int stride, int[] pointer, int ptrstride)
        // GLvoid glEdgeFlagPointerListIBM(GLint stride, const GLboolean* pointer, GLint ptrstride)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg stride\r\nldarg pointer\r\nldarg ptrstride\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32[],[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg stride\r\nldarg pointer\r\nldarg ptrstride\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32[],[in]int32)\r\nret")]
        #endif
        public static void glEdgeFlagPointerListIBM([In] IntPtr extensionPointer, int stride, int[] pointer, int ptrstride) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glEdgeFlagPointerListIBM([In] IntPtr extensionPointer, int stride, int[] pointer, int ptrstride)

        #region void glEdgeFlagPointerListIBM([In] IntPtr extensionPointer, int stride, IntPtr pointer, int ptrstride)
        // GLvoid glEdgeFlagPointerListIBM(GLint stride, const GLboolean* pointer, GLint ptrstride)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg stride\r\nldarg pointer\r\nldarg ptrstride\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg stride\r\nldarg pointer\r\nldarg ptrstride\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int,[in]int32)\r\nret")]
        #endif
        public static void glEdgeFlagPointerListIBM([In] IntPtr extensionPointer, int stride, IntPtr pointer, int ptrstride) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glEdgeFlagPointerListIBM([In] IntPtr extensionPointer, int stride, IntPtr pointer, int ptrstride)

        #region void glEdgeFlagPointerListIBM([In] IntPtr extensionPointer, int stride, int* pointer, int ptrstride)
        // GLvoid glEdgeFlagPointerListIBM(GLint stride, const GLboolean* pointer, GLint ptrstride)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg stride\r\nldarg pointer\r\nldarg ptrstride\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32*,[in]int32)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg stride\r\nldarg pointer\r\nldarg ptrstride\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32*,[in]int32)\r\nret")]
        #endif
        public static unsafe void glEdgeFlagPointerListIBM([In] IntPtr extensionPointer, int stride, int* pointer, int ptrstride) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glEdgeFlagPointerListIBM([In] IntPtr extensionPointer, int stride, int* pointer, int ptrstride)
        #endregion Overloads for GLvoid glEdgeFlagPointerListIBM(GLint stride, const GLboolean* pointer, GLint ptrstride)

        #region Overloads for GLvoid glFogCoordPointerListIBM(GLenum type, GLint stride, const GLvoid* pointer, GLint ptrstride)
        #region void glFogCoordPointerListIBM([In] IntPtr extensionPointer, int type, int stride, IntPtr[] pointer, int ptrstride)
        // GLvoid glFogCoordPointerListIBM(GLenum type, GLint stride, const GLvoid* pointer, GLint ptrstride)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg ptrstride\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]native int[],[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg ptrstride\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]native int[],[in]int32)\r\nret")]
        #endif
        public static void glFogCoordPointerListIBM([In] IntPtr extensionPointer, int type, int stride, IntPtr[] pointer, int ptrstride) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glFogCoordPointerListIBM([In] IntPtr extensionPointer, int type, int stride, IntPtr[] pointer, int ptrstride)

        #region void glFogCoordPointerListIBM([In] IntPtr extensionPointer, int type, int stride, IntPtr pointer, int ptrstride)
        // GLvoid glFogCoordPointerListIBM(GLenum type, GLint stride, const GLvoid* pointer, GLint ptrstride)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg ptrstride\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]native int,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg ptrstride\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]native int,[in]int32)\r\nret")]
        #endif
        public static void glFogCoordPointerListIBM([In] IntPtr extensionPointer, int type, int stride, IntPtr pointer, int ptrstride) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glFogCoordPointerListIBM([In] IntPtr extensionPointer, int type, int stride, IntPtr pointer, int ptrstride)

        #region void glFogCoordPointerListIBM([In] IntPtr extensionPointer, int type, int stride, void** pointer, int ptrstride)
        // GLvoid glFogCoordPointerListIBM(GLenum type, GLint stride, const GLvoid* pointer, GLint ptrstride)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg ptrstride\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]void**,[in]int32)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg ptrstride\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]void**,[in]int32)\r\nret")]
        #endif
        public static unsafe void glFogCoordPointerListIBM([In] IntPtr extensionPointer, int type, int stride, void** pointer, int ptrstride) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glFogCoordPointerListIBM([In] IntPtr extensionPointer, int type, int stride, void** pointer, int ptrstride)
        #endregion Overloads for GLvoid glFogCoordPointerListIBM(GLenum type, GLint stride, const GLvoid* pointer, GLint ptrstride)

        #region Overloads for GLvoid glNormalPointerListIBM(GLenum type, GLint stride, const GLvoid* pointer, GLint ptrstride)
        #region void glNormalPointerListIBM([In] IntPtr extensionPointer, int type, int stride, IntPtr[] pointer, int ptrstride)
        // GLvoid glNormalPointerListIBM(GLenum type, GLint stride, const GLvoid* pointer, GLint ptrstride)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg ptrstride\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]native int[],[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg ptrstride\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]native int[],[in]int32)\r\nret")]
        #endif
        public static void glNormalPointerListIBM([In] IntPtr extensionPointer, int type, int stride, IntPtr[] pointer, int ptrstride) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glNormalPointerListIBM([In] IntPtr extensionPointer, int type, int stride, IntPtr[] pointer, int ptrstride)

        #region void glNormalPointerListIBM([In] IntPtr extensionPointer, int type, int stride, IntPtr pointer, int ptrstride)
        // GLvoid glNormalPointerListIBM(GLenum type, GLint stride, const GLvoid* pointer, GLint ptrstride)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg ptrstride\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]native int,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg ptrstride\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]native int,[in]int32)\r\nret")]
        #endif
        public static void glNormalPointerListIBM([In] IntPtr extensionPointer, int type, int stride, IntPtr pointer, int ptrstride) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glNormalPointerListIBM([In] IntPtr extensionPointer, int type, int stride, IntPtr pointer, int ptrstride)

        #region void glNormalPointerListIBM([In] IntPtr extensionPointer, int type, int stride, void** pointer, int ptrstride)
        // GLvoid glNormalPointerListIBM(GLenum type, GLint stride, const GLvoid* pointer, GLint ptrstride)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg ptrstride\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]void**,[in]int32)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg ptrstride\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]void**,[in]int32)\r\nret")]
        #endif
        public static unsafe void glNormalPointerListIBM([In] IntPtr extensionPointer, int type, int stride, void** pointer, int ptrstride) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glNormalPointerListIBM([In] IntPtr extensionPointer, int type, int stride, void** pointer, int ptrstride)
        #endregion Overloads for GLvoid glNormalPointerListIBM(GLenum type, GLint stride, const GLvoid* pointer, GLint ptrstride)

        #region Overloads for GLvoid glTexCoordPointerListIBM(GLint size, GLenum type, GLint stride, const GLvoid* pointer, GLint ptrstride)
        #region void glTexCoordPointerListIBM([In] IntPtr extensionPointer, int size, int type, int stride, short[] pointer, int ptrstride)
        // GLvoid glTexCoordPointerListIBM(GLint size, GLenum type, GLint stride, const GLvoid* pointer, GLint ptrstride)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg ptrstride\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int16[],[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg ptrstride\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int16[],[in]int32)\r\nret")]
        #endif
        public static void glTexCoordPointerListIBM([In] IntPtr extensionPointer, int size, int type, int stride, short[] pointer, int ptrstride) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoordPointerListIBM([In] IntPtr extensionPointer, int size, int type, int stride, short[] pointer, int ptrstride)

        #region void glTexCoordPointerListIBM([In] IntPtr extensionPointer, int size, int type, int stride, float[] pointer, int ptrstride)
        // GLvoid glTexCoordPointerListIBM(GLint size, GLenum type, GLint stride, const GLvoid* pointer, GLint ptrstride)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg ptrstride\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]float32[],[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg ptrstride\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]float32[],[in]int32)\r\nret")]
        #endif
        public static void glTexCoordPointerListIBM([In] IntPtr extensionPointer, int size, int type, int stride, float[] pointer, int ptrstride) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoordPointerListIBM([In] IntPtr extensionPointer, int size, int type, int stride, float[] pointer, int ptrstride)

        #region void glTexCoordPointerListIBM([In] IntPtr extensionPointer, int size, int type, int stride, int[] pointer, int ptrstride)
        // GLvoid glTexCoordPointerListIBM(GLint size, GLenum type, GLint stride, const GLvoid* pointer, GLint ptrstride)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg ptrstride\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32[],[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg ptrstride\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32[],[in]int32)\r\nret")]
        #endif
        public static void glTexCoordPointerListIBM([In] IntPtr extensionPointer, int size, int type, int stride, int[] pointer, int ptrstride) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoordPointerListIBM([In] IntPtr extensionPointer, int size, int type, int stride, int[] pointer, int ptrstride)

        #region void glTexCoordPointerListIBM([In] IntPtr extensionPointer, int size, int type, int stride, IntPtr pointer, int ptrstride)
        // GLvoid glTexCoordPointerListIBM(GLint size, GLenum type, GLint stride, const GLvoid* pointer, GLint ptrstride)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg ptrstride\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]native int,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg ptrstride\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]native int,[in]int32)\r\nret")]
        #endif
        public static void glTexCoordPointerListIBM([In] IntPtr extensionPointer, int size, int type, int stride, IntPtr pointer, int ptrstride) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoordPointerListIBM([In] IntPtr extensionPointer, int size, int type, int stride, IntPtr pointer, int ptrstride)

        #region void glTexCoordPointerListIBM([In] IntPtr extensionPointer, int size, int type, int stride, byte[] pointer, int ptrstride)
        // GLvoid glTexCoordPointerListIBM(GLint size, GLenum type, GLint stride, const GLvoid* pointer, GLint ptrstride)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg ptrstride\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]unsigned int8[],[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg ptrstride\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]unsigned int8[],[in]int32)\r\nret")]
        #endif
        public static void glTexCoordPointerListIBM([In] IntPtr extensionPointer, int size, int type, int stride, byte[] pointer, int ptrstride) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoordPointerListIBM([In] IntPtr extensionPointer, int size, int type, int stride, byte[] pointer, int ptrstride)

        #region void glTexCoordPointerListIBM([In] IntPtr extensionPointer, int size, int type, int stride, double[] pointer, int ptrstride)
        // GLvoid glTexCoordPointerListIBM(GLint size, GLenum type, GLint stride, const GLvoid* pointer, GLint ptrstride)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg ptrstride\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]float64[],[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg ptrstride\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]float64[],[in]int32)\r\nret")]
        #endif
        public static void glTexCoordPointerListIBM([In] IntPtr extensionPointer, int size, int type, int stride, double[] pointer, int ptrstride) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoordPointerListIBM([In] IntPtr extensionPointer, int size, int type, int stride, double[] pointer, int ptrstride)

        #region void glTexCoordPointerListIBM([In] IntPtr extensionPointer, int size, int type, int stride, uint[] pointer, int ptrstride)
        // GLvoid glTexCoordPointerListIBM(GLint size, GLenum type, GLint stride, const GLvoid* pointer, GLint ptrstride)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg ptrstride\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]unsigned int32[],[in]int32)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg ptrstride\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]unsigned int32[],[in]int32)\r\nret")]
        #endif
        public static void glTexCoordPointerListIBM([In] IntPtr extensionPointer, int size, int type, int stride, uint[] pointer, int ptrstride) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoordPointerListIBM([In] IntPtr extensionPointer, int size, int type, int stride, uint[] pointer, int ptrstride)

        #region void glTexCoordPointerListIBM([In] IntPtr extensionPointer, int size, int type, int stride, sbyte[] pointer, int ptrstride)
        // GLvoid glTexCoordPointerListIBM(GLint size, GLenum type, GLint stride, const GLvoid* pointer, GLint ptrstride)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg ptrstride\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int8[],[in]int32)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg ptrstride\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int8[],[in]int32)\r\nret")]
        #endif
        public static void glTexCoordPointerListIBM([In] IntPtr extensionPointer, int size, int type, int stride, sbyte[] pointer, int ptrstride) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoordPointerListIBM([In] IntPtr extensionPointer, int size, int type, int stride, sbyte[] pointer, int ptrstride)

        #region void glTexCoordPointerListIBM([In] IntPtr extensionPointer, int size, int type, int stride, ushort[] pointer, int ptrstride)
        // GLvoid glTexCoordPointerListIBM(GLint size, GLenum type, GLint stride, const GLvoid* pointer, GLint ptrstride)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg ptrstride\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]unsigned int16[],[in]int32)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg ptrstride\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]unsigned int16[],[in]int32)\r\nret")]
        #endif
        public static void glTexCoordPointerListIBM([In] IntPtr extensionPointer, int size, int type, int stride, ushort[] pointer, int ptrstride) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoordPointerListIBM([In] IntPtr extensionPointer, int size, int type, int stride, ushort[] pointer, int ptrstride)

        #region void glTexCoordPointerListIBM([In] IntPtr extensionPointer, int size, int type, int stride, void* pointer, int ptrstride)
        // GLvoid glTexCoordPointerListIBM(GLint size, GLenum type, GLint stride, const GLvoid* pointer, GLint ptrstride)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg ptrstride\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]void*,[in]int32)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg ptrstride\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]void*,[in]int32)\r\nret")]
        #endif
        public static unsafe void glTexCoordPointerListIBM([In] IntPtr extensionPointer, int size, int type, int stride, void* pointer, int ptrstride) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoordPointerListIBM([In] IntPtr extensionPointer, int size, int type, int stride, void* pointer, int ptrstride)
        #endregion Overloads for GLvoid glTexCoordPointerListIBM(GLint size, GLenum type, GLint stride, const GLvoid* pointer, GLint ptrstride)

        #region Overloads for GLvoid glVertexPointerListIBM(GLint size, GLenum type, GLint stride, const GLvoid* pointer, GLint ptrstride)
        #region void glVertexPointerListIBM([In] IntPtr extensionPointer, int size, int type, int stride, IntPtr[] pointer, int ptrstride)
        // GLvoid glVertexPointerListIBM(GLint size, GLenum type, GLint stride, const GLvoid* pointer, GLint ptrstride)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg ptrstride\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]native int[],[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg ptrstride\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]native int[],[in]int32)\r\nret")]
        #endif
        public static void glVertexPointerListIBM([In] IntPtr extensionPointer, int size, int type, int stride, IntPtr[] pointer, int ptrstride) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexPointerListIBM([In] IntPtr extensionPointer, int size, int type, int stride, IntPtr[] pointer, int ptrstride)

        #region void glVertexPointerListIBM([In] IntPtr extensionPointer, int size, int type, int stride, IntPtr pointer, int ptrstride)
        // GLvoid glVertexPointerListIBM(GLint size, GLenum type, GLint stride, const GLvoid* pointer, GLint ptrstride)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg ptrstride\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]native int,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg ptrstride\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]native int,[in]int32)\r\nret")]
        #endif
        public static void glVertexPointerListIBM([In] IntPtr extensionPointer, int size, int type, int stride, IntPtr pointer, int ptrstride) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexPointerListIBM([In] IntPtr extensionPointer, int size, int type, int stride, IntPtr pointer, int ptrstride)

        #region void glVertexPointerListIBM([In] IntPtr extensionPointer, int size, int type, int stride, void** pointer, int ptrstride)
        // GLvoid glVertexPointerListIBM(GLint size, GLenum type, GLint stride, const GLvoid* pointer, GLint ptrstride)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg ptrstride\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]void**,[in]int32)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg ptrstride\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]void**,[in]int32)\r\nret")]
        #endif
        public static unsafe void glVertexPointerListIBM([In] IntPtr extensionPointer, int size, int type, int stride, void** pointer, int ptrstride) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexPointerListIBM([In] IntPtr extensionPointer, int size, int type, int stride, void** pointer, int ptrstride)
        #endregion Overloads for GLvoid glVertexPointerListIBM(GLint size, GLenum type, GLint stride, const GLvoid* pointer, GLint ptrstride)
        #endregion GL_IBM_vertex_array_lists Methods
        #endregion GL_IBM_vertex_array_lists (201)

        #region GL_IBM_static_data (223)
        #region GL_IBM_static_data Constants
        #region GL_ALL_STATIC_DATA_IBM
        /// <summary>
        /// 
        /// </summary>
        // #define GL_ALL_STATIC_DATA_IBM 0x19294
        public const int GL_ALL_STATIC_DATA_IBM = 0x19294;
        #endregion GL_ALL_STATIC_DATA_IBM

        #region GL_STATIC_VERTEX_ARRAY_IBM
        /// <summary>
        /// 
        /// </summary>
        // #define GL_STATIC_VERTEX_ARRAY_IBM 0x19295
        public const int GL_STATIC_VERTEX_ARRAY_IBM = 0x19295;
        #endregion GL_STATIC_VERTEX_ARRAY_IBM
        #endregion GL_IBM_static_data Constants

        #region GL_IBM_static_data Methods
        #region void glFlushStaticDataIBM([In] IntPtr extensionPointer, int target)
        // GLvoid glFlushStaticDataIBM(GLenum target)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg target\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg target\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32)\r\nret")]
        #endif
        public static void glFlushStaticDataIBM([In] IntPtr extensionPointer, int target) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glFlushStaticDataIBM([In] IntPtr extensionPointer, int target)
        #endregion GL_IBM_static_data Methods
        #endregion GL_IBM_static_data (223)

        #region GL_IBM_texture_mirrored_repeat (224)
        #region GL_IBM_texture_mirrored_repeat Constants
        #region GL_MIRRORED_REPEAT_IBM
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MIRRORED_REPEAT_IBM 0x8370
        public const int GL_MIRRORED_REPEAT_IBM = 0x8370;
        #endregion GL_MIRRORED_REPEAT_IBM
        #endregion GL_IBM_texture_mirrored_repeat Constants
        #endregion GL_IBM_texture_mirrored_repeat (224)
        #endregion IBM Extensions

        #region INGR Extensions
        #region GL_INGR_color_clamp (174)
        #region GL_INGR_color_clamp Constants
        #region GL_RED_MIN_CLAMP_INGR
        /// <summary>
        /// 
        /// </summary>
        // #define GL_RED_MIN_CLAMP_INGR 0x8560
        public const int GL_RED_MIN_CLAMP_INGR = 0x8560;
        #endregion GL_RED_MIN_CLAMP_INGR

        #region GL_GREEN_MIN_CLAMP_INGR
        /// <summary>
        /// 
        /// </summary>
        // #define GL_GREEN_MIN_CLAMP_INGR 0x8561
        public const int GL_GREEN_MIN_CLAMP_INGR = 0x8561;
        #endregion GL_GREEN_MIN_CLAMP_INGR

        #region GL_BLUE_MIN_CLAMP_INGR
        /// <summary>
        /// 
        /// </summary>
        // #define GL_BLUE_MIN_CLAMP_INGR 0x8562
        public const int GL_BLUE_MIN_CLAMP_INGR = 0x8562;
        #endregion GL_BLUE_MIN_CLAMP_INGR

        #region GL_ALPHA_MIN_CLAMP_INGR
        /// <summary>
        /// 
        /// </summary>
        // #define GL_ALPHA_MIN_CLAMP_INGR 0x8563
        public const int GL_ALPHA_MIN_CLAMP_INGR = 0x8563;
        #endregion GL_ALPHA_MIN_CLAMP_INGR

        #region GL_RED_MAX_CLAMP_INGR
        /// <summary>
        /// 
        /// </summary>
        // #define GL_RED_MAX_CLAMP_INGR 0x8564
        public const int GL_RED_MAX_CLAMP_INGR = 0x8564;
        #endregion GL_RED_MAX_CLAMP_INGR

        #region GL_GREEN_MAX_CLAMP_INGR
        /// <summary>
        /// 
        /// </summary>
        // #define GL_GREEN_MAX_CLAMP_INGR 0x8565
        public const int GL_GREEN_MAX_CLAMP_INGR = 0x8565;
        #endregion GL_GREEN_MAX_CLAMP_INGR

        #region GL_BLUE_MAX_CLAMP_INGR
        /// <summary>
        /// 
        /// </summary>
        // #define GL_BLUE_MAX_CLAMP_INGR 0x8566
        public const int GL_BLUE_MAX_CLAMP_INGR = 0x8566;
        #endregion GL_BLUE_MAX_CLAMP_INGR

        #region GL_ALPHA_MAX_CLAMP_INGR
        /// <summary>
        /// 
        /// </summary>
        // #define GL_ALPHA_MAX_CLAMP_INGR 0x8567
        public const int GL_ALPHA_MAX_CLAMP_INGR = 0x8567;
        #endregion GL_ALPHA_MAX_CLAMP_INGR
        #endregion GL_INGR_color_clamp Constants
        #endregion GL_INGR_color_clamp (174)

        #region GL_INGR_interlace_read (175)
        #region GL_INGR_interlace_read Constants
        #region GL_INTERLACE_READ_INGR
        /// <summary>
        /// 
        /// </summary>
        // #define GL_INTERLACE_READ_INGR 0x8568
        public const int GL_INTERLACE_READ_INGR = 0x8568;
        #endregion GL_INTERLACE_READ_INGR
        #endregion GL_INGR_interlace_read Constants
        #endregion GL_INGR_interlace_read (175)
        #endregion INGR Extensions

        #region INTEL Extensions
        #region GL_INTEL_parallel_arrays (136)
        #region GL_INTEL_parallel_arrays Constants
        #region GL_PARALLEL_ARRAYS_INTEL
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PARALLEL_ARRAYS_INTEL 0x83F4
        public const int GL_PARALLEL_ARRAYS_INTEL = 0x83F4;
        #endregion GL_PARALLEL_ARRAYS_INTEL

        #region GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL 0x83F5
        public const int GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL = 0x83F5;
        #endregion GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL

        #region GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL
        /// <summary>
        /// 
        /// </summary>
        // #define GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL 0x83F6
        public const int GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL = 0x83F6;
        #endregion GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL

        #region GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL 0x83F7
        public const int GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL = 0x83F7;
        #endregion GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL

        #region GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL 0x83F8
        public const int GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL = 0x83F8;
        #endregion GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL
        #endregion GL_INTEL_parallel_arrays Constants

        #region GL_INTEL_parallel_arrays Methods
        #region Overloads for GLvoid glVertexPointervINTEL(GLint size, GLenum type, const GLvoid* pointer)
        #region void glVertexPointervINTEL([In] IntPtr extensionPointer, int size, int type, IntPtr[] pointer)
        // GLvoid glVertexPointervINTEL(GLint size, GLenum type, const GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg size\r\nldarg type\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]native int[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg size\r\nldarg type\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]native int[])\r\nret")]
        #endif
        public static void glVertexPointervINTEL([In] IntPtr extensionPointer, int size, int type, IntPtr[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexPointervINTEL([In] IntPtr extensionPointer, int size, int type, IntPtr[] pointer)

        #region void glVertexPointervINTEL([In] IntPtr extensionPointer, int size, int type, IntPtr pointer)
        // GLvoid glVertexPointervINTEL(GLint size, GLenum type, const GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg size\r\nldarg type\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg size\r\nldarg type\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]native int)\r\nret")]
        #endif
        public static void glVertexPointervINTEL([In] IntPtr extensionPointer, int size, int type, IntPtr pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexPointervINTEL([In] IntPtr extensionPointer, int size, int type, IntPtr pointer)

        #region void glVertexPointervINTEL([In] IntPtr extensionPointer, int size, int type, void** pointer)
        // GLvoid glVertexPointervINTEL(GLint size, GLenum type, const GLvoid* pointer)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg size\r\nldarg type\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]void**)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg size\r\nldarg type\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]void**)\r\nret")]
        #endif
        public static unsafe void glVertexPointervINTEL([In] IntPtr extensionPointer, int size, int type, void** pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexPointervINTEL([In] IntPtr extensionPointer, int size, int type, void** pointer)
        #endregion Overloads for GLvoid glVertexPointervINTEL(GLint size, GLenum type, const GLvoid* pointer)

        #region Overloads for GLvoid glNormalPointervINTEL(GLenum type, const GLvoid* pointer)
        #region void glNormalPointervINTEL([In] IntPtr extensionPointer, int type, IntPtr[] pointer)
        // GLvoid glNormalPointervINTEL(GLenum type, const GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg type\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg type\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int[])\r\nret")]
        #endif
        public static void glNormalPointervINTEL([In] IntPtr extensionPointer, int type, IntPtr[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glNormalPointervINTEL([In] IntPtr extensionPointer, int type, IntPtr[] pointer)

        #region void glNormalPointervINTEL([In] IntPtr extensionPointer, int type, IntPtr pointer)
        // GLvoid glNormalPointervINTEL(GLenum type, const GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg type\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg type\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glNormalPointervINTEL([In] IntPtr extensionPointer, int type, IntPtr pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glNormalPointervINTEL([In] IntPtr extensionPointer, int type, IntPtr pointer)

        #region void glNormalPointervINTEL([In] IntPtr extensionPointer, int type, void** pointer)
        // GLvoid glNormalPointervINTEL(GLenum type, const GLvoid* pointer)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg type\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]void**)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg type\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]void**)\r\nret")]
        #endif
        public static unsafe void glNormalPointervINTEL([In] IntPtr extensionPointer, int type, void** pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glNormalPointervINTEL([In] IntPtr extensionPointer, int type, void** pointer)
        #endregion Overloads for GLvoid glNormalPointervINTEL(GLenum type, const GLvoid* pointer)

        #region Overloads for GLvoid glColorPointervINTEL(GLint size, GLenum type, const GLvoid* pointer)
        #region void glColorPointervINTEL([In] IntPtr extensionPointer, int size, int type, IntPtr[] pointer)
        // GLvoid glColorPointervINTEL(GLint size, GLenum type, const GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg size\r\nldarg type\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]native int[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg size\r\nldarg type\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]native int[])\r\nret")]
        #endif
        public static void glColorPointervINTEL([In] IntPtr extensionPointer, int size, int type, IntPtr[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColorPointervINTEL([In] IntPtr extensionPointer, int size, int type, IntPtr[] pointer)

        #region void glColorPointervINTEL([In] IntPtr extensionPointer, int size, int type, IntPtr pointer)
        // GLvoid glColorPointervINTEL(GLint size, GLenum type, const GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg size\r\nldarg type\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg size\r\nldarg type\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]native int)\r\nret")]
        #endif
        public static void glColorPointervINTEL([In] IntPtr extensionPointer, int size, int type, IntPtr pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColorPointervINTEL([In] IntPtr extensionPointer, int size, int type, IntPtr pointer)

        #region void glColorPointervINTEL([In] IntPtr extensionPointer, int size, int type, void** pointer)
        // GLvoid glColorPointervINTEL(GLint size, GLenum type, const GLvoid* pointer)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg size\r\nldarg type\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]void**)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg size\r\nldarg type\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]void**)\r\nret")]
        #endif
        public static unsafe void glColorPointervINTEL([In] IntPtr extensionPointer, int size, int type, void** pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColorPointervINTEL([In] IntPtr extensionPointer, int size, int type, void** pointer)
        #endregion Overloads for GLvoid glColorPointervINTEL(GLint size, GLenum type, const GLvoid* pointer)

        #region Overloads for GLvoid glTexCoordPointervINTEL(GLint size, GLenum type, const GLvoid* pointer)
        #region void glTexCoordPointervINTEL([In] IntPtr extensionPointer, int size, int type, IntPtr[] pointer)
        // GLvoid glTexCoordPointervINTEL(GLint size, GLenum type, const GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg size\r\nldarg type\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]native int[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg size\r\nldarg type\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]native int[])\r\nret")]
        #endif
        public static void glTexCoordPointervINTEL([In] IntPtr extensionPointer, int size, int type, IntPtr[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoordPointervINTEL([In] IntPtr extensionPointer, int size, int type, IntPtr[] pointer)

        #region void glTexCoordPointervINTEL([In] IntPtr extensionPointer, int size, int type, IntPtr pointer)
        // GLvoid glTexCoordPointervINTEL(GLint size, GLenum type, const GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg size\r\nldarg type\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg size\r\nldarg type\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]native int)\r\nret")]
        #endif
        public static void glTexCoordPointervINTEL([In] IntPtr extensionPointer, int size, int type, IntPtr pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoordPointervINTEL([In] IntPtr extensionPointer, int size, int type, IntPtr pointer)

        #region void glTexCoordPointervINTEL([In] IntPtr extensionPointer, int size, int type, void** pointer)
        // GLvoid glTexCoordPointervINTEL(GLint size, GLenum type, const GLvoid* pointer)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg size\r\nldarg type\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]void**)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg size\r\nldarg type\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]void**)\r\nret")]
        #endif
        public static unsafe void glTexCoordPointervINTEL([In] IntPtr extensionPointer, int size, int type, void** pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoordPointervINTEL([In] IntPtr extensionPointer, int size, int type, void** pointer)
        #endregion Overloads for GLvoid glTexCoordPointervINTEL(GLint size, GLenum type, const GLvoid* pointer)
        #endregion GL_INTEL_parallel_arrays Methods
        #endregion GL_INTEL_parallel_arrays (136)
        #endregion INTEL Extensions

        #region MESA Extensions
        #region GL_MESA_resize_buffers (196)
        #region GL_MESA_resize_buffers Methods
        #region void glResizeBuffersMESA([In] IntPtr extensionPointer)
        // GLvoid glResizeBuffersMESA()
        #if WIN32
        [IlasmAttribute(".maxstack 1\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void()\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 1\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void()\r\nret")]
        #endif
        public static void glResizeBuffersMESA([In] IntPtr extensionPointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glResizeBuffersMESA([In] IntPtr extensionPointer)
        #endregion GL_MESA_resize_buffers Methods
        #endregion GL_MESA_resize_buffers (196)

        #region GL_MESA_window_pos (197)
        #region GL_MESA_window_pos Methods
        #region void glWindowPos2dMESA([In] IntPtr extensionPointer, double x, double y)
        // GLvoid glWindowPos2dMESA(GLdouble x, GLdouble y)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg x\r\nldarg y\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]float64,[in]float64)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg x\r\nldarg y\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]float64,[in]float64)\r\nret")]
        #endif
        public static void glWindowPos2dMESA([In] IntPtr extensionPointer, double x, double y) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWindowPos2dMESA([In] IntPtr extensionPointer, double x, double y)

        #region void glWindowPos2fMESA([In] IntPtr extensionPointer, float x, float y)
        // GLvoid glWindowPos2fMESA(GLfloat x, GLfloat y)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg x\r\nldarg y\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]float32,[in]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg x\r\nldarg y\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]float32,[in]float32)\r\nret")]
        #endif
        public static void glWindowPos2fMESA([In] IntPtr extensionPointer, float x, float y) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWindowPos2fMESA([In] IntPtr extensionPointer, float x, float y)

        #region void glWindowPos2iMESA([In] IntPtr extensionPointer, int x, int y)
        // GLvoid glWindowPos2iMESA(GLint x, GLint y)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg x\r\nldarg y\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg x\r\nldarg y\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32)\r\nret")]
        #endif
        public static void glWindowPos2iMESA([In] IntPtr extensionPointer, int x, int y) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWindowPos2iMESA([In] IntPtr extensionPointer, int x, int y)

        #region void glWindowPos2sMESA([In] IntPtr extensionPointer, short x, short y)
        // GLvoid glWindowPos2sMESA(GLshort x, GLshort y)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg x\r\nldarg y\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int16,[in]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg x\r\nldarg y\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int16,[in]int16)\r\nret")]
        #endif
        public static void glWindowPos2sMESA([In] IntPtr extensionPointer, short x, short y) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWindowPos2sMESA([In] IntPtr extensionPointer, short x, short y)

        #region Overloads for GLvoid glWindowPos2ivMESA(const GLint* p)
        #region void glWindowPos2ivMESA([In] IntPtr extensionPointer, ref int p)
        // GLvoid glWindowPos2ivMESA(const GLint* p)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]int32)\r\nret")]
        #endif
        public static void glWindowPos2ivMESA([In] IntPtr extensionPointer, ref int p) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWindowPos2ivMESA([In] IntPtr extensionPointer, ref int p)

        #region void glWindowPos2ivMESA([In] IntPtr extensionPointer, int[] p)
        // GLvoid glWindowPos2ivMESA(const GLint* p)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32[])\r\nret")]
        #endif
        public static void glWindowPos2ivMESA([In] IntPtr extensionPointer, int[] p) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWindowPos2ivMESA([In] IntPtr extensionPointer, int[] p)

        #region void glWindowPos2ivMESA([In] IntPtr extensionPointer, IntPtr p)
        // GLvoid glWindowPos2ivMESA(const GLint* p)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int)\r\nret")]
        #endif
        public static void glWindowPos2ivMESA([In] IntPtr extensionPointer, IntPtr p) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWindowPos2ivMESA([In] IntPtr extensionPointer, IntPtr p)

        #region void glWindowPos2ivMESA([In] IntPtr extensionPointer, int* p)
        // GLvoid glWindowPos2ivMESA(const GLint* p)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32*)\r\nret")]
        #endif
        public static unsafe void glWindowPos2ivMESA([In] IntPtr extensionPointer, int* p) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWindowPos2ivMESA([In] IntPtr extensionPointer, int* p)
        #endregion Overloads for GLvoid glWindowPos2ivMESA(const GLint* p)

        #region Overloads for GLvoid glWindowPos2svMESA(const GLshort* p)
        #region void glWindowPos2svMESA([In] IntPtr extensionPointer, ref short p)
        // GLvoid glWindowPos2svMESA(const GLshort* p)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]int16)\r\nret")]
        #endif
        public static void glWindowPos2svMESA([In] IntPtr extensionPointer, ref short p) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWindowPos2svMESA([In] IntPtr extensionPointer, ref short p)

        #region void glWindowPos2svMESA([In] IntPtr extensionPointer, short[] p)
        // GLvoid glWindowPos2svMESA(const GLshort* p)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int16[])\r\nret")]
        #endif
        public static void glWindowPos2svMESA([In] IntPtr extensionPointer, short[] p) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWindowPos2svMESA([In] IntPtr extensionPointer, short[] p)

        #region void glWindowPos2svMESA([In] IntPtr extensionPointer, IntPtr p)
        // GLvoid glWindowPos2svMESA(const GLshort* p)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int)\r\nret")]
        #endif
        public static void glWindowPos2svMESA([In] IntPtr extensionPointer, IntPtr p) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWindowPos2svMESA([In] IntPtr extensionPointer, IntPtr p)

        #region void glWindowPos2svMESA([In] IntPtr extensionPointer, short* p)
        // GLvoid glWindowPos2svMESA(const GLshort* p)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int16*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int16*)\r\nret")]
        #endif
        public static unsafe void glWindowPos2svMESA([In] IntPtr extensionPointer, short* p) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWindowPos2svMESA([In] IntPtr extensionPointer, short* p)
        #endregion Overloads for GLvoid glWindowPos2svMESA(const GLshort* p)

        #region Overloads for GLvoid glWindowPos2fvMESA(const GLfloat* p)
        #region void glWindowPos2fvMESA([In] IntPtr extensionPointer, ref float p)
        // GLvoid glWindowPos2fvMESA(const GLfloat* p)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]float32)\r\nret")]
        #endif
        public static void glWindowPos2fvMESA([In] IntPtr extensionPointer, ref float p) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWindowPos2fvMESA([In] IntPtr extensionPointer, ref float p)

        #region void glWindowPos2fvMESA([In] IntPtr extensionPointer, float[] p)
        // GLvoid glWindowPos2fvMESA(const GLfloat* p)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]float32[])\r\nret")]
        #endif
        public static void glWindowPos2fvMESA([In] IntPtr extensionPointer, float[] p) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWindowPos2fvMESA([In] IntPtr extensionPointer, float[] p)

        #region void glWindowPos2fvMESA([In] IntPtr extensionPointer, IntPtr p)
        // GLvoid glWindowPos2fvMESA(const GLfloat* p)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int)\r\nret")]
        #endif
        public static void glWindowPos2fvMESA([In] IntPtr extensionPointer, IntPtr p) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWindowPos2fvMESA([In] IntPtr extensionPointer, IntPtr p)

        #region void glWindowPos2fvMESA([In] IntPtr extensionPointer, float* p)
        // GLvoid glWindowPos2fvMESA(const GLfloat* p)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]float32*)\r\nret")]
        #endif
        public static unsafe void glWindowPos2fvMESA([In] IntPtr extensionPointer, float* p) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWindowPos2fvMESA([In] IntPtr extensionPointer, float* p)
        #endregion Overloads for GLvoid glWindowPos2fvMESA(const GLfloat* p)

        #region Overloads for GLvoid glWindowPos2dvMESA(const GLdouble* p)
        #region void glWindowPos2dvMESA([In] IntPtr extensionPointer, ref double p)
        // GLvoid glWindowPos2dvMESA(const GLdouble* p)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]float64)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]float64)\r\nret")]
        #endif
        public static void glWindowPos2dvMESA([In] IntPtr extensionPointer, ref double p) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWindowPos2dvMESA([In] IntPtr extensionPointer, ref double p)

        #region void glWindowPos2dvMESA([In] IntPtr extensionPointer, double[] p)
        // GLvoid glWindowPos2dvMESA(const GLdouble* p)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]float64[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]float64[])\r\nret")]
        #endif
        public static void glWindowPos2dvMESA([In] IntPtr extensionPointer, double[] p) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWindowPos2dvMESA([In] IntPtr extensionPointer, double[] p)

        #region void glWindowPos2dvMESA([In] IntPtr extensionPointer, IntPtr p)
        // GLvoid glWindowPos2dvMESA(const GLdouble* p)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int)\r\nret")]
        #endif
        public static void glWindowPos2dvMESA([In] IntPtr extensionPointer, IntPtr p) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWindowPos2dvMESA([In] IntPtr extensionPointer, IntPtr p)

        #region void glWindowPos2dvMESA([In] IntPtr extensionPointer, double* p)
        // GLvoid glWindowPos2dvMESA(const GLdouble* p)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]float64*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]float64*)\r\nret")]
        #endif
        public static unsafe void glWindowPos2dvMESA([In] IntPtr extensionPointer, double* p) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWindowPos2dvMESA([In] IntPtr extensionPointer, double* p)
        #endregion Overloads for GLvoid glWindowPos2dvMESA(const GLdouble* p)

        #region void glWindowPos3iMESA([In] IntPtr extensionPointer, int x, int y, int z)
        // GLvoid glWindowPos3iMESA(GLint x, GLint y, GLint z)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32)\r\nret")]
        #endif
        public static void glWindowPos3iMESA([In] IntPtr extensionPointer, int x, int y, int z) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWindowPos3iMESA([In] IntPtr extensionPointer, int x, int y, int z)

        #region void glWindowPos3sMESA([In] IntPtr extensionPointer, short x, short y, short z)
        // GLvoid glWindowPos3sMESA(GLshort x, GLshort y, GLshort z)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int16,[in]int16,[in]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int16,[in]int16,[in]int16)\r\nret")]
        #endif
        public static void glWindowPos3sMESA([In] IntPtr extensionPointer, short x, short y, short z) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWindowPos3sMESA([In] IntPtr extensionPointer, short x, short y, short z)

        #region void glWindowPos3fMESA([In] IntPtr extensionPointer, float x, float y, float z)
        // GLvoid glWindowPos3fMESA(GLfloat x, GLfloat y, GLfloat z)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]float32,[in]float32,[in]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]float32,[in]float32,[in]float32)\r\nret")]
        #endif
        public static void glWindowPos3fMESA([In] IntPtr extensionPointer, float x, float y, float z) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWindowPos3fMESA([In] IntPtr extensionPointer, float x, float y, float z)

        #region void glWindowPos3dMESA([In] IntPtr extensionPointer, double x, double y, double z)
        // GLvoid glWindowPos3dMESA(GLdouble x, GLdouble y, GLdouble z)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]float64,[in]float64,[in]float64)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]float64,[in]float64,[in]float64)\r\nret")]
        #endif
        public static void glWindowPos3dMESA([In] IntPtr extensionPointer, double x, double y, double z) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWindowPos3dMESA([In] IntPtr extensionPointer, double x, double y, double z)

        #region Overloads for GLvoid glWindowPos3ivMESA(const GLint* p)
        #region void glWindowPos3ivMESA([In] IntPtr extensionPointer, ref int p)
        // GLvoid glWindowPos3ivMESA(const GLint* p)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]int32)\r\nret")]
        #endif
        public static void glWindowPos3ivMESA([In] IntPtr extensionPointer, ref int p) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWindowPos3ivMESA([In] IntPtr extensionPointer, ref int p)

        #region void glWindowPos3ivMESA([In] IntPtr extensionPointer, int[] p)
        // GLvoid glWindowPos3ivMESA(const GLint* p)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32[])\r\nret")]
        #endif
        public static void glWindowPos3ivMESA([In] IntPtr extensionPointer, int[] p) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWindowPos3ivMESA([In] IntPtr extensionPointer, int[] p)

        #region void glWindowPos3ivMESA([In] IntPtr extensionPointer, IntPtr p)
        // GLvoid glWindowPos3ivMESA(const GLint* p)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int)\r\nret")]
        #endif
        public static void glWindowPos3ivMESA([In] IntPtr extensionPointer, IntPtr p) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWindowPos3ivMESA([In] IntPtr extensionPointer, IntPtr p)

        #region void glWindowPos3ivMESA([In] IntPtr extensionPointer, int* p)
        // GLvoid glWindowPos3ivMESA(const GLint* p)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32*)\r\nret")]
        #endif
        public static unsafe void glWindowPos3ivMESA([In] IntPtr extensionPointer, int* p) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWindowPos3ivMESA([In] IntPtr extensionPointer, int* p)
        #endregion Overloads for GLvoid glWindowPos3ivMESA(const GLint* p)

        #region Overloads for GLvoid glWindowPos3svMESA(const GLshort* p)
        #region void glWindowPos3svMESA([In] IntPtr extensionPointer, ref short p)
        // GLvoid glWindowPos3svMESA(const GLshort* p)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]int16)\r\nret")]
        #endif
        public static void glWindowPos3svMESA([In] IntPtr extensionPointer, ref short p) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWindowPos3svMESA([In] IntPtr extensionPointer, ref short p)

        #region void glWindowPos3svMESA([In] IntPtr extensionPointer, short[] p)
        // GLvoid glWindowPos3svMESA(const GLshort* p)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int16[])\r\nret")]
        #endif
        public static void glWindowPos3svMESA([In] IntPtr extensionPointer, short[] p) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWindowPos3svMESA([In] IntPtr extensionPointer, short[] p)

        #region void glWindowPos3svMESA([In] IntPtr extensionPointer, IntPtr p)
        // GLvoid glWindowPos3svMESA(const GLshort* p)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int)\r\nret")]
        #endif
        public static void glWindowPos3svMESA([In] IntPtr extensionPointer, IntPtr p) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWindowPos3svMESA([In] IntPtr extensionPointer, IntPtr p)

        #region void glWindowPos3svMESA([In] IntPtr extensionPointer, short* p)
        // GLvoid glWindowPos3svMESA(const GLshort* p)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int16*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int16*)\r\nret")]
        #endif
        public static unsafe void glWindowPos3svMESA([In] IntPtr extensionPointer, short* p) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWindowPos3svMESA([In] IntPtr extensionPointer, short* p)
        #endregion Overloads for GLvoid glWindowPos3svMESA(const GLshort* p)

        #region Overloads for GLvoid glWindowPos3fvMESA(const GLfloat* p)
        #region void glWindowPos3fvMESA([In] IntPtr extensionPointer, ref float p)
        // GLvoid glWindowPos3fvMESA(const GLfloat* p)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]float32)\r\nret")]
        #endif
        public static void glWindowPos3fvMESA([In] IntPtr extensionPointer, ref float p) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWindowPos3fvMESA([In] IntPtr extensionPointer, ref float p)

        #region void glWindowPos3fvMESA([In] IntPtr extensionPointer, float[] p)
        // GLvoid glWindowPos3fvMESA(const GLfloat* p)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]float32[])\r\nret")]
        #endif
        public static void glWindowPos3fvMESA([In] IntPtr extensionPointer, float[] p) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWindowPos3fvMESA([In] IntPtr extensionPointer, float[] p)

        #region void glWindowPos3fvMESA([In] IntPtr extensionPointer, IntPtr p)
        // GLvoid glWindowPos3fvMESA(const GLfloat* p)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int)\r\nret")]
        #endif
        public static void glWindowPos3fvMESA([In] IntPtr extensionPointer, IntPtr p) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWindowPos3fvMESA([In] IntPtr extensionPointer, IntPtr p)

        #region void glWindowPos3fvMESA([In] IntPtr extensionPointer, float* p)
        // GLvoid glWindowPos3fvMESA(const GLfloat* p)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]float32*)\r\nret")]
        #endif
        public static unsafe void glWindowPos3fvMESA([In] IntPtr extensionPointer, float* p) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWindowPos3fvMESA([In] IntPtr extensionPointer, float* p)
        #endregion Overloads for GLvoid glWindowPos3fvMESA(const GLfloat* p)

        #region Overloads for GLvoid glWindowPos3dvMESA(const GLdouble* p)
        #region void glWindowPos3dvMESA([In] IntPtr extensionPointer, ref double p)
        // GLvoid glWindowPos3dvMESA(const GLdouble* p)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]float64)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]float64)\r\nret")]
        #endif
        public static void glWindowPos3dvMESA([In] IntPtr extensionPointer, ref double p) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWindowPos3dvMESA([In] IntPtr extensionPointer, ref double p)

        #region void glWindowPos3dvMESA([In] IntPtr extensionPointer, double[] p)
        // GLvoid glWindowPos3dvMESA(const GLdouble* p)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]float64[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]float64[])\r\nret")]
        #endif
        public static void glWindowPos3dvMESA([In] IntPtr extensionPointer, double[] p) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWindowPos3dvMESA([In] IntPtr extensionPointer, double[] p)

        #region void glWindowPos3dvMESA([In] IntPtr extensionPointer, IntPtr p)
        // GLvoid glWindowPos3dvMESA(const GLdouble* p)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int)\r\nret")]
        #endif
        public static void glWindowPos3dvMESA([In] IntPtr extensionPointer, IntPtr p) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWindowPos3dvMESA([In] IntPtr extensionPointer, IntPtr p)

        #region void glWindowPos3dvMESA([In] IntPtr extensionPointer, double* p)
        // GLvoid glWindowPos3dvMESA(const GLdouble* p)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]float64*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]float64*)\r\nret")]
        #endif
        public static unsafe void glWindowPos3dvMESA([In] IntPtr extensionPointer, double* p) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWindowPos3dvMESA([In] IntPtr extensionPointer, double* p)
        #endregion Overloads for GLvoid glWindowPos3dvMESA(const GLdouble* p)

        #region void glWindowPos4iMESA([In] IntPtr extensionPointer, int x, int y, int z, int w)
        // GLvoid glWindowPos4iMESA(GLint x, GLint y, GLint z, GLint w)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg w\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg w\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32)\r\nret")]
        #endif
        public static void glWindowPos4iMESA([In] IntPtr extensionPointer, int x, int y, int z, int w) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWindowPos4iMESA([In] IntPtr extensionPointer, int x, int y, int z, int w)

        #region void glWindowPos4sMESA([In] IntPtr extensionPointer, short x, short y, short z, short w)
        // GLvoid glWindowPos4sMESA(GLshort x, GLshort y, GLshort z, GLshort w)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg w\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int16,[in]int16,[in]int16,[in]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg w\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int16,[in]int16,[in]int16,[in]int16)\r\nret")]
        #endif
        public static void glWindowPos4sMESA([In] IntPtr extensionPointer, short x, short y, short z, short w) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWindowPos4sMESA([In] IntPtr extensionPointer, short x, short y, short z, short w)

        #region void glWindowPos4fMESA([In] IntPtr extensionPointer, float x, float y, float z, float w)
        // GLvoid glWindowPos4fMESA(GLfloat x, GLfloat y, GLfloat z, GLfloat w)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg w\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]float32,[in]float32,[in]float32,[in]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg w\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]float32,[in]float32,[in]float32,[in]float32)\r\nret")]
        #endif
        public static void glWindowPos4fMESA([In] IntPtr extensionPointer, float x, float y, float z, float w) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWindowPos4fMESA([In] IntPtr extensionPointer, float x, float y, float z, float w)

        #region void glWindowPos4dMESA([In] IntPtr extensionPointer, double x, double y, double z, double w)
        // GLvoid glWindowPos4dMESA(GLdouble x, GLdouble y, GLdouble z, GLdouble w)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg w\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]float64,[in]float64,[in]float64,[in]float64)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg w\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]float64,[in]float64,[in]float64,[in]float64)\r\nret")]
        #endif
        public static void glWindowPos4dMESA([In] IntPtr extensionPointer, double x, double y, double z, double w) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWindowPos4dMESA([In] IntPtr extensionPointer, double x, double y, double z, double w)

        #region Overloads for GLvoid glWindowPos4ivMESA(const GLint* p)
        #region void glWindowPos4ivMESA([In] IntPtr extensionPointer, ref int p)
        // GLvoid glWindowPos4ivMESA(const GLint* p)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]int32)\r\nret")]
        #endif
        public static void glWindowPos4ivMESA([In] IntPtr extensionPointer, ref int p) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWindowPos4ivMESA([In] IntPtr extensionPointer, ref int p)

        #region void glWindowPos4ivMESA([In] IntPtr extensionPointer, int[] p)
        // GLvoid glWindowPos4ivMESA(const GLint* p)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32[])\r\nret")]
        #endif
        public static void glWindowPos4ivMESA([In] IntPtr extensionPointer, int[] p) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWindowPos4ivMESA([In] IntPtr extensionPointer, int[] p)

        #region void glWindowPos4ivMESA([In] IntPtr extensionPointer, IntPtr p)
        // GLvoid glWindowPos4ivMESA(const GLint* p)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int)\r\nret")]
        #endif
        public static void glWindowPos4ivMESA([In] IntPtr extensionPointer, IntPtr p) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWindowPos4ivMESA([In] IntPtr extensionPointer, IntPtr p)

        #region void glWindowPos4ivMESA([In] IntPtr extensionPointer, int* p)
        // GLvoid glWindowPos4ivMESA(const GLint* p)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32*)\r\nret")]
        #endif
        public static unsafe void glWindowPos4ivMESA([In] IntPtr extensionPointer, int* p) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWindowPos4ivMESA([In] IntPtr extensionPointer, int* p)
        #endregion Overloads for GLvoid glWindowPos4ivMESA(const GLint* p)

        #region Overloads for GLvoid glWindowPos4svMESA(const GLshort* p)
        #region void glWindowPos4svMESA([In] IntPtr extensionPointer, ref short p)
        // GLvoid glWindowPos4svMESA(const GLshort* p)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]int16)\r\nret")]
        #endif
        public static void glWindowPos4svMESA([In] IntPtr extensionPointer, ref short p) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWindowPos4svMESA([In] IntPtr extensionPointer, ref short p)

        #region void glWindowPos4svMESA([In] IntPtr extensionPointer, short[] p)
        // GLvoid glWindowPos4svMESA(const GLshort* p)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int16[])\r\nret")]
        #endif
        public static void glWindowPos4svMESA([In] IntPtr extensionPointer, short[] p) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWindowPos4svMESA([In] IntPtr extensionPointer, short[] p)

        #region void glWindowPos4svMESA([In] IntPtr extensionPointer, IntPtr p)
        // GLvoid glWindowPos4svMESA(const GLshort* p)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int)\r\nret")]
        #endif
        public static void glWindowPos4svMESA([In] IntPtr extensionPointer, IntPtr p) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWindowPos4svMESA([In] IntPtr extensionPointer, IntPtr p)

        #region void glWindowPos4svMESA([In] IntPtr extensionPointer, short* p)
        // GLvoid glWindowPos4svMESA(const GLshort* p)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int16*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int16*)\r\nret")]
        #endif
        public static unsafe void glWindowPos4svMESA([In] IntPtr extensionPointer, short* p) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWindowPos4svMESA([In] IntPtr extensionPointer, short* p)
        #endregion Overloads for GLvoid glWindowPos4svMESA(const GLshort* p)

        #region Overloads for GLvoid glWindowPos4fvMESA(const GLfloat* p)
        #region void glWindowPos4fvMESA([In] IntPtr extensionPointer, ref float p)
        // GLvoid glWindowPos4fvMESA(const GLfloat* p)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]float32)\r\nret")]
        #endif
        public static void glWindowPos4fvMESA([In] IntPtr extensionPointer, ref float p) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWindowPos4fvMESA([In] IntPtr extensionPointer, ref float p)

        #region void glWindowPos4fvMESA([In] IntPtr extensionPointer, float[] p)
        // GLvoid glWindowPos4fvMESA(const GLfloat* p)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]float32[])\r\nret")]
        #endif
        public static void glWindowPos4fvMESA([In] IntPtr extensionPointer, float[] p) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWindowPos4fvMESA([In] IntPtr extensionPointer, float[] p)

        #region void glWindowPos4fvMESA([In] IntPtr extensionPointer, IntPtr p)
        // GLvoid glWindowPos4fvMESA(const GLfloat* p)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int)\r\nret")]
        #endif
        public static void glWindowPos4fvMESA([In] IntPtr extensionPointer, IntPtr p) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWindowPos4fvMESA([In] IntPtr extensionPointer, IntPtr p)

        #region void glWindowPos4fvMESA([In] IntPtr extensionPointer, float* p)
        // GLvoid glWindowPos4fvMESA(const GLfloat* p)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]float32*)\r\nret")]
        #endif
        public static unsafe void glWindowPos4fvMESA([In] IntPtr extensionPointer, float* p) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWindowPos4fvMESA([In] IntPtr extensionPointer, float* p)
        #endregion Overloads for GLvoid glWindowPos4fvMESA(const GLfloat* p)

        #region Overloads for GLvoid glWindowPos4dvMESA(const GLdouble* p)
        #region void glWindowPos4dvMESA([In] IntPtr extensionPointer, ref double p)
        // GLvoid glWindowPos4dvMESA(const GLdouble* p)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]float64)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]float64)\r\nret")]
        #endif
        public static void glWindowPos4dvMESA([In] IntPtr extensionPointer, ref double p) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWindowPos4dvMESA([In] IntPtr extensionPointer, ref double p)

        #region void glWindowPos4dvMESA([In] IntPtr extensionPointer, double[] p)
        // GLvoid glWindowPos4dvMESA(const GLdouble* p)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]float64[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]float64[])\r\nret")]
        #endif
        public static void glWindowPos4dvMESA([In] IntPtr extensionPointer, double[] p) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWindowPos4dvMESA([In] IntPtr extensionPointer, double[] p)

        #region void glWindowPos4dvMESA([In] IntPtr extensionPointer, IntPtr p)
        // GLvoid glWindowPos4dvMESA(const GLdouble* p)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int)\r\nret")]
        #endif
        public static void glWindowPos4dvMESA([In] IntPtr extensionPointer, IntPtr p) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWindowPos4dvMESA([In] IntPtr extensionPointer, IntPtr p)

        #region void glWindowPos4dvMESA([In] IntPtr extensionPointer, double* p)
        // GLvoid glWindowPos4dvMESA(const GLdouble* p)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]float64*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg p\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]float64*)\r\nret")]
        #endif
        public static unsafe void glWindowPos4dvMESA([In] IntPtr extensionPointer, double* p) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glWindowPos4dvMESA([In] IntPtr extensionPointer, double* p)
        #endregion Overloads for GLvoid glWindowPos4dvMESA(const GLdouble* p)
        #endregion GL_MESA_window_pos Methods
        #endregion GL_MESA_window_pos (197)
        #endregion MESA Extensions

        #region NV Extensions
        #region GL_NV_texgen_reflection (179)
        #region GL_NV_texgen_reflection Constants
        #region GL_NORMAL_MAP_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_NORMAL_MAP_NV 0x8511
        public const int GL_NORMAL_MAP_NV = 0x8511;
        #endregion GL_NORMAL_MAP_NV

        #region GL_REFLECTION_MAP_NV
        // #define GL_REFLECTION_MAP_NV 0x8512
        /// <summary>
        /// 
        /// </summary>
        public const int GL_REFLECTION_MAP_NV = 0x8512;
        #endregion GL_REFLECTION_MAP_NV
        #endregion GL_NV_texgen_reflection Constants
        #endregion GL_NV_texgen_reflection (179)

        #region GL_NV_light_max_exponent (189)
        #region GL_NV_light_max_exponent Constants
        #region GL_MAX_SHININESS_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAX_SHININESS_NV 0x8504
        public const int GL_MAX_SHININESS_NV = 0x8504;
        #endregion GL_MAX_SHININESS_NV

        #region GL_MAX_SPOT_EXPONENT_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAX_SPOT_EXPONENT_NV 0x8505
        public const int GL_MAX_SPOT_EXPONENT_NV = 0x8505;
        #endregion GL_MAX_SPOT_EXPONENT_NV
        #endregion GL_NV_light_max_exponent Constants
        #endregion GL_NV_light_max_exponent (189)

        #region GL_NV_vertex_array_range (190)
        #region GL_NV_vertex_array_range Constants
        #region GL_VERTEX_ARRAY_RANGE_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VERTEX_ARRAY_RANGE_NV 0x851D
        public const int GL_VERTEX_ARRAY_RANGE_NV = 0x851D;
        #endregion GL_VERTEX_ARRAY_RANGE_NV

        #region GL_VERTEX_ARRAY_RANGE_LENGTH_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VERTEX_ARRAY_RANGE_LENGTH_NV 0x851E
        public const int GL_VERTEX_ARRAY_RANGE_LENGTH_NV = 0x851E;
        #endregion GL_VERTEX_ARRAY_RANGE_LENGTH_NV

        #region GL_VERTEX_ARRAY_RANGE_VALID_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VERTEX_ARRAY_RANGE_VALID_NV 0x851F
        public const int GL_VERTEX_ARRAY_RANGE_VALID_NV = 0x851F;
        #endregion GL_VERTEX_ARRAY_RANGE_VALID_NV

        #region GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV 0x8520
        public const int GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV = 0x8520;
        #endregion GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV

        #region GL_VERTEX_ARRAY_RANGE_POINTER_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VERTEX_ARRAY_RANGE_POINTER_NV 0x8521
        public const int GL_VERTEX_ARRAY_RANGE_POINTER_NV = 0x8521;
        #endregion GL_VERTEX_ARRAY_RANGE_POINTER_NV
        #endregion GL_NV_vertex_array_range Constants

        #region GL_NV_vertex_array_range Methods
        #region Overloads for GLvoid glVertexArrayRangeNV(GLsizei length, GLvoid* pointer)
        #region void glVertexArrayRangeNV([In] IntPtr extensionPointer, int length, short[] pointer)
        // GLvoid glVertexArrayRangeNV(GLsizei length, GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg length\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg length\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int16[])\r\nret")]
        #endif
        public static void glVertexArrayRangeNV([In] IntPtr extensionPointer, int length, short[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexArrayRangeNV([In] IntPtr extensionPointer, int length, short[] pointer)

        #region void glVertexArrayRangeNV([In] IntPtr extensionPointer, int length, float[] pointer)
        // GLvoid glVertexArrayRangeNV(GLsizei length, GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg length\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg length\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float32[])\r\nret")]
        #endif
        public static void glVertexArrayRangeNV([In] IntPtr extensionPointer, int length, float[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexArrayRangeNV([In] IntPtr extensionPointer, int length, float[] pointer)

        #region void glVertexArrayRangeNV([In] IntPtr extensionPointer, int length, int[] pointer)
        // GLvoid glVertexArrayRangeNV(GLsizei length, GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg length\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg length\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32[])\r\nret")]
        #endif
        public static void glVertexArrayRangeNV([In] IntPtr extensionPointer, int length, int[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexArrayRangeNV([In] IntPtr extensionPointer, int length, int[] pointer)

        #region void glVertexArrayRangeNV([In] IntPtr extensionPointer, int length, IntPtr pointer)
        // GLvoid glVertexArrayRangeNV(GLsizei length, GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg length\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg length\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glVertexArrayRangeNV([In] IntPtr extensionPointer, int length, IntPtr pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexArrayRangeNV([In] IntPtr extensionPointer, int length, IntPtr pointer)

        #region void glVertexArrayRangeNV([In] IntPtr extensionPointer, int length, byte[] pointer)
        // GLvoid glVertexArrayRangeNV(GLsizei length, GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg length\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]unsigned int8[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg length\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]unsigned int8[])\r\nret")]
        #endif
        public static void glVertexArrayRangeNV([In] IntPtr extensionPointer, int length, byte[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexArrayRangeNV([In] IntPtr extensionPointer, int length, byte[] pointer)

        #region void glVertexArrayRangeNV([In] IntPtr extensionPointer, int length, double[] pointer)
        // GLvoid glVertexArrayRangeNV(GLsizei length, GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg length\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float64[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg length\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float64[])\r\nret")]
        #endif
        public static void glVertexArrayRangeNV([In] IntPtr extensionPointer, int length, double[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexArrayRangeNV([In] IntPtr extensionPointer, int length, double[] pointer)

        #region void glVertexArrayRangeNV([In] IntPtr extensionPointer, int length, uint[] pointer)
        // GLvoid glVertexArrayRangeNV(GLsizei length, GLvoid* pointer)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg length\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]unsigned int32[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg length\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]unsigned int32[])\r\nret")]
        #endif
        public static void glVertexArrayRangeNV([In] IntPtr extensionPointer, int length, uint[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexArrayRangeNV([In] IntPtr extensionPointer, int length, uint[] pointer)

        #region void glVertexArrayRangeNV([In] IntPtr extensionPointer, int length, sbyte[] pointer)
        // GLvoid glVertexArrayRangeNV(GLsizei length, GLvoid* pointer)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg length\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int8[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg length\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int8[])\r\nret")]
        #endif
        public static void glVertexArrayRangeNV([In] IntPtr extensionPointer, int length, sbyte[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexArrayRangeNV([In] IntPtr extensionPointer, int length, sbyte[] pointer)

        #region void glVertexArrayRangeNV([In] IntPtr extensionPointer, int length, ushort[] pointer)
        // GLvoid glVertexArrayRangeNV(GLsizei length, GLvoid* pointer)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg length\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]unsigned int16[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg length\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]unsigned int16[])\r\nret")]
        #endif
        public static void glVertexArrayRangeNV([In] IntPtr extensionPointer, int length, ushort[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexArrayRangeNV([In] IntPtr extensionPointer, int length, ushort[] pointer)

        #region void glVertexArrayRangeNV([In] IntPtr extensionPointer, int length, void* pointer)
        // GLvoid glVertexArrayRangeNV(GLsizei length, GLvoid* pointer)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg length\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]void*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg length\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]void*)\r\nret")]
        #endif
        public static unsafe void glVertexArrayRangeNV([In] IntPtr extensionPointer, int length, void* pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexArrayRangeNV([In] IntPtr extensionPointer, int length, void* pointer)
        #endregion Overloads for GLvoid glVertexArrayRangeNV(GLsizei length, GLvoid* pointer)

        #region void glFlushVertexArrayRangeNV([In] IntPtr extensionPointer)
        // GLvoid glFlushVertexArrayRangeNV()
        #if WIN32
        [IlasmAttribute(".maxstack 1\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void()\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 1\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void()\r\nret")]
        #endif
        public static void glFlushVertexArrayRangeNV([In] IntPtr extensionPointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glFlushVertexArrayRangeNV([In] IntPtr extensionPointer)
        #endregion GL_NV_vertex_array_range Methods
        #endregion GL_NV_vertex_array_range (190)

        #region GL_NV_register_combiners (191)
        #region GL_NV_register_combiners Constants
        #region GL_REGISTER_COMBINERS_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_REGISTER_COMBINERS_NV 0x8522
        public const int GL_REGISTER_COMBINERS_NV = 0x8522;
        #endregion GL_REGISTER_COMBINERS_NV

        #region GL_COMBINER0_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COMBINER0_NV 0x8550
        public const int GL_COMBINER0_NV = 0x8550;
        #endregion GL_COMBINER0_NV

        #region GL_COMBINER1_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COMBINER1_NV 0x8551
        public const int GL_COMBINER1_NV = 0x8551;
        #endregion GL_COMBINER1_NV

        #region GL_COMBINER2_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COMBINER2_NV 0x8552
        public const int GL_COMBINER2_NV = 0x8552;
        #endregion GL_COMBINER2_NV

        #region GL_COMBINER3_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COMBINER3_NV 0x8553
        public const int GL_COMBINER3_NV = 0x8553;
        #endregion GL_COMBINER3_NV

        #region GL_COMBINER4_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COMBINER4_NV 0x8554
        public const int GL_COMBINER4_NV = 0x8554;
        #endregion GL_COMBINER4_NV

        #region GL_COMBINER5_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COMBINER5_NV 0x8555
        public const int GL_COMBINER5_NV = 0x8555;
        #endregion GL_COMBINER5_NV

        #region GL_COMBINER6_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COMBINER6_NV 0x8556
        public const int GL_COMBINER6_NV = 0x8556;
        #endregion GL_COMBINER6_NV

        #region GL_COMBINER7_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COMBINER7_NV 0x8557
        public const int GL_COMBINER7_NV = 0x8557;
        #endregion GL_COMBINER7_NV

        #region GL_VARIABLE_A_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VARIABLE_A_NV 0x8523
        public const int GL_VARIABLE_A_NV = 0x8523;
        #endregion GL_VARIABLE_A_NV

        #region GL_VARIABLE_B_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VARIABLE_B_NV 0x8524
        public const int GL_VARIABLE_B_NV = 0x8524;
        #endregion GL_VARIABLE_B_NV

        #region GL_VARIABLE_C_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VARIABLE_C_NV 0x8525
        public const int GL_VARIABLE_C_NV = 0x8525;
        #endregion GL_VARIABLE_C_NV

        #region GL_VARIABLE_D_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VARIABLE_D_NV 0x8526
        public const int GL_VARIABLE_D_NV = 0x8526;
        #endregion GL_VARIABLE_D_NV

        #region GL_VARIABLE_E_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VARIABLE_E_NV 0x8527
        public const int GL_VARIABLE_E_NV = 0x8527;
        #endregion GL_VARIABLE_E_NV

        #region GL_VARIABLE_F_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VARIABLE_F_NV 0x8528
        public const int GL_VARIABLE_F_NV = 0x8528;
        #endregion GL_VARIABLE_F_NV

        #region GL_VARIABLE_G_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VARIABLE_G_NV 0x8529
        public const int GL_VARIABLE_G_NV = 0x8529;
        #endregion GL_VARIABLE_G_NV

        #region GL_CONSTANT_COLOR0_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_CONSTANT_COLOR0_NV 0x852A
        public const int GL_CONSTANT_COLOR0_NV = 0x852A;
        #endregion GL_CONSTANT_COLOR0_NV

        #region GL_CONSTANT_COLOR1_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_CONSTANT_COLOR1_NV 0x852B
        public const int GL_CONSTANT_COLOR1_NV = 0x852B;
        #endregion GL_CONSTANT_COLOR1_NV

        #region GL_PRIMARY_COLOR_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PRIMARY_COLOR_NV 0x852C
        public const int GL_PRIMARY_COLOR_NV = 0x852C;
        #endregion GL_PRIMARY_COLOR_NV

        #region GL_SECONDARY_COLOR_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SECONDARY_COLOR_NV 0x852D
        public const int GL_SECONDARY_COLOR_NV = 0x852D;
        #endregion GL_SECONDARY_COLOR_NV

        #region GL_SPARE0_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SPARE0_NV 0x852E
        public const int GL_SPARE0_NV = 0x852E;
        #endregion GL_SPARE0_NV

        #region GL_SPARE1_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SPARE1_NV 0x852F
        public const int GL_SPARE1_NV = 0x852F;
        #endregion GL_SPARE1_NV

        #region GL_UNSIGNED_IDENTITY_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_UNSIGNED_IDENTITY_NV 0x8536
        public const int GL_UNSIGNED_IDENTITY_NV = 0x8536;
        #endregion GL_UNSIGNED_IDENTITY_NV

        #region GL_UNSIGNED_INVERT_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_UNSIGNED_INVERT_NV 0x8537
        public const int GL_UNSIGNED_INVERT_NV = 0x8537;
        #endregion GL_UNSIGNED_INVERT_NV

        #region GL_EXPAND_NORMAL_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_EXPAND_NORMAL_NV 0x8538
        public const int GL_EXPAND_NORMAL_NV = 0x8538;
        #endregion GL_EXPAND_NORMAL_NV

        #region GL_EXPAND_NEGATE_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_EXPAND_NEGATE_NV 0x8539
        public const int GL_EXPAND_NEGATE_NV = 0x8539;
        #endregion GL_EXPAND_NEGATE_NV

        #region GL_HALF_BIAS_NORMAL_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_HALF_BIAS_NORMAL_NV 0x853A
        public const int GL_HALF_BIAS_NORMAL_NV = 0x853A;
        #endregion GL_HALF_BIAS_NORMAL_NV

        #region GL_HALF_BIAS_NEGATE_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_HALF_BIAS_NEGATE_NV 0x853B
        public const int GL_HALF_BIAS_NEGATE_NV = 0x853B;
        #endregion GL_HALF_BIAS_NEGATE_NV

        #region GL_SIGNED_IDENTITY_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SIGNED_IDENTITY_NV 0x853C
        public const int GL_SIGNED_IDENTITY_NV = 0x853C;
        #endregion GL_SIGNED_IDENTITY_NV

        #region GL_SIGNED_NEGATE_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SIGNED_NEGATE_NV 0x853D
        public const int GL_SIGNED_NEGATE_NV = 0x853D;
        #endregion GL_SIGNED_NEGATE_NV

        #region GL_E_TIMES_F_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_E_TIMES_F_NV 0x8531
        public const int GL_E_TIMES_F_NV = 0x8531;
        #endregion GL_E_TIMES_F_NV

        #region GL_SPARE0_PLUS_SECONDARY_COLOR_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SPARE0_PLUS_SECONDARY_COLOR_NV 0x8532
        public const int GL_SPARE0_PLUS_SECONDARY_COLOR_NV = 0x8532;
        #endregion GL_SPARE0_PLUS_SECONDARY_COLOR_NV

        #region GL_SCALE_BY_TWO_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SCALE_BY_TWO_NV 0x853E
        public const int GL_SCALE_BY_TWO_NV = 0x853E;
        #endregion GL_SCALE_BY_TWO_NV

        #region GL_SCALE_BY_FOUR_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SCALE_BY_FOUR_NV 0x853F
        public const int GL_SCALE_BY_FOUR_NV = 0x853F;
        #endregion GL_SCALE_BY_FOUR_NV

        #region GL_SCALE_BY_ONE_HALF_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SCALE_BY_ONE_HALF_NV 0x8540
        public const int GL_SCALE_BY_ONE_HALF_NV = 0x8540;
        #endregion GL_SCALE_BY_ONE_HALF_NV

        #region GL_BIAS_BY_NEGATIVE_ONE_HALF_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_BIAS_BY_NEGATIVE_ONE_HALF_NV 0x8541
        public const int GL_BIAS_BY_NEGATIVE_ONE_HALF_NV = 0x8541;
        #endregion GL_BIAS_BY_NEGATIVE_ONE_HALF_NV

        #region GL_DISCARD_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DISCARD_NV 0x8530
        public const int GL_DISCARD_NV = 0x8530;
        #endregion GL_DISCARD_NV

        #region GL_COMBINER_INPUT_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COMBINER_INPUT_NV 0x8542
        public const int GL_COMBINER_INPUT_NV = 0x8542;
        #endregion GL_COMBINER_INPUT_NV

        #region GL_COMBINER_MAPPING_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COMBINER_MAPPING_NV 0x8543
        public const int GL_COMBINER_MAPPING_NV = 0x8543;
        #endregion GL_COMBINER_MAPPING_NV

        #region GL_COMBINER_COMPONENT_USAGE_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COMBINER_COMPONENT_USAGE_NV 0x8544
        public const int GL_COMBINER_COMPONENT_USAGE_NV = 0x8544;
        #endregion GL_COMBINER_COMPONENT_USAGE_NV

        #region GL_COMBINER_AB_DOT_PRODUCT_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COMBINER_AB_DOT_PRODUCT_NV 0x8545
        public const int GL_COMBINER_AB_DOT_PRODUCT_NV = 0x8545;
        #endregion GL_COMBINER_AB_DOT_PRODUCT_NV

        #region GL_COMBINER_CD_DOT_PRODUCT_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COMBINER_CD_DOT_PRODUCT_NV 0x8546
        public const int GL_COMBINER_CD_DOT_PRODUCT_NV = 0x8546;
        #endregion GL_COMBINER_CD_DOT_PRODUCT_NV

        #region GL_COMBINER_MUX_SUM_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COMBINER_MUX_SUM_NV 0x8547
        public const int GL_COMBINER_MUX_SUM_NV = 0x8547;
        #endregion GL_COMBINER_MUX_SUM_NV

        #region GL_COMBINER_SCALE_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COMBINER_SCALE_NV 0x8548
        public const int GL_COMBINER_SCALE_NV = 0x8548;
        #endregion GL_COMBINER_SCALE_NV

        #region GL_COMBINER_BIAS_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COMBINER_BIAS_NV 0x8549
        public const int GL_COMBINER_BIAS_NV = 0x8549;
        #endregion GL_COMBINER_BIAS_NV

        #region GL_COMBINER_AB_OUTPUT_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COMBINER_AB_OUTPUT_NV 0x854A
        public const int GL_COMBINER_AB_OUTPUT_NV = 0x854A;
        #endregion GL_COMBINER_AB_OUTPUT_NV

        #region GL_COMBINER_CD_OUTPUT_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COMBINER_CD_OUTPUT_NV 0x854B
        public const int GL_COMBINER_CD_OUTPUT_NV = 0x854B;
        #endregion GL_COMBINER_CD_OUTPUT_NV

        #region GL_COMBINER_SUM_OUTPUT_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COMBINER_SUM_OUTPUT_NV 0x854C
        public const int GL_COMBINER_SUM_OUTPUT_NV = 0x854C;
        #endregion GL_COMBINER_SUM_OUTPUT_NV

        #region GL_NUM_GENERAL_COMBINERS_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_NUM_GENERAL_COMBINERS_NV 0x854E
        public const int GL_NUM_GENERAL_COMBINERS_NV = 0x854E;
        #endregion GL_NUM_GENERAL_COMBINERS_NV

        #region GL_COLOR_SUM_CLAMP_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COLOR_SUM_CLAMP_NV 0x854F
        public const int GL_COLOR_SUM_CLAMP_NV = 0x854F;
        #endregion GL_COLOR_SUM_CLAMP_NV

        #region GL_MAX_GENERAL_COMBINERS_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAX_GENERAL_COMBINERS_NV 0x854D
        public const int GL_MAX_GENERAL_COMBINERS_NV = 0x854D;
        #endregion GL_MAX_GENERAL_COMBINERS_NV
        #endregion GL_NV_register_combiners Constants

        #region GL_NV_register_combiners Methods
        #region Overloads for GLvoid glCombinerParameterfvNV(GLenum pname, const GLfloat* parameters)
        #region void glCombinerParameterfvNV([In] IntPtr extensionPointer, int pname, ref float parameters)
        // GLvoid glCombinerParameterfvNV(GLenum pname, const GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]float32)\r\nret")]
        #endif
        public static void glCombinerParameterfvNV([In] IntPtr extensionPointer, int pname, ref float parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glCombinerParameterfvNV([In] IntPtr extensionPointer, int pname, ref float parameters)

        #region void glCombinerParameterfvNV([In] IntPtr extensionPointer, int pname, float[] parameters)
        // GLvoid glCombinerParameterfvNV(GLenum pname, const GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float32[])\r\nret")]
        #endif
        public static void glCombinerParameterfvNV([In] IntPtr extensionPointer, int pname, float[] parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glCombinerParameterfvNV([In] IntPtr extensionPointer, int pname, float[] parameters)

        #region void glCombinerParameterfvNV([In] IntPtr extensionPointer, int pname, IntPtr parameters)
        // GLvoid glCombinerParameterfvNV(GLenum pname, const GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glCombinerParameterfvNV([In] IntPtr extensionPointer, int pname, IntPtr parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glCombinerParameterfvNV([In] IntPtr extensionPointer, int pname, IntPtr parameters)

        #region void glCombinerParameterfvNV([In] IntPtr extensionPointer, int pname, float* parameters)
        // GLvoid glCombinerParameterfvNV(GLenum pname, const GLfloat* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float32*)\r\nret")]
        #endif
        public static unsafe void glCombinerParameterfvNV([In] IntPtr extensionPointer, int pname, float* parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glCombinerParameterfvNV([In] IntPtr extensionPointer, int pname, float* parameters)
        #endregion Overloads for GLvoid glCombinerParameterfvNV(GLenum pname, const GLfloat* parameters)

        #region Overloads for GLvoid glCombinerParameterivNV(GLenum pname, const GLint* parameters)
        #region void glCombinerParameterivNV([In] IntPtr extensionPointer, int pname, ref int parameters)
        // GLvoid glCombinerParameterivNV(GLenum pname, const GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]int32)\r\nret")]
        #endif
        public static void glCombinerParameterivNV([In] IntPtr extensionPointer, int pname, ref int parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glCombinerParameterivNV([In] IntPtr extensionPointer, int pname, ref int parameters)

        #region void glCombinerParameterivNV([In] IntPtr extensionPointer, int pname, int[] parameters)
        // GLvoid glCombinerParameterivNV(GLenum pname, const GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32[])\r\nret")]
        #endif
        public static void glCombinerParameterivNV([In] IntPtr extensionPointer, int pname, int[] parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glCombinerParameterivNV([In] IntPtr extensionPointer, int pname, int[] parameters)

        #region void glCombinerParameterivNV([In] IntPtr extensionPointer, int pname, IntPtr parameters)
        // GLvoid glCombinerParameterivNV(GLenum pname, const GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glCombinerParameterivNV([In] IntPtr extensionPointer, int pname, IntPtr parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glCombinerParameterivNV([In] IntPtr extensionPointer, int pname, IntPtr parameters)

        #region void glCombinerParameterivNV([In] IntPtr extensionPointer, int pname, int* parameters)
        // GLvoid glCombinerParameterivNV(GLenum pname, const GLint* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32*)\r\nret")]
        #endif
        public static unsafe void glCombinerParameterivNV([In] IntPtr extensionPointer, int pname, int* parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glCombinerParameterivNV([In] IntPtr extensionPointer, int pname, int* parameters)
        #endregion Overloads for GLvoid glCombinerParameterivNV(GLenum pname, const GLint* parameters)

        #region void glCombinerParameterfNV([In] IntPtr extensionPointer, int pname, float param)
        // GLvoid glCombinerParameterfNV(GLenum pname, GLfloat param)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg param\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg param\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float32)\r\nret")]
        #endif
        public static void glCombinerParameterfNV([In] IntPtr extensionPointer, int pname, float param) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glCombinerParameterfNV([In] IntPtr extensionPointer, int pname, float param)

        #region void glCombinerParameteriNV([In] IntPtr extensionPointer, int pname, int param)
        // GLvoid glCombinerParameteriNV(GLenum pname, GLint param)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg param\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg param\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32)\r\nret")]
        #endif
        public static void glCombinerParameteriNV([In] IntPtr extensionPointer, int pname, int param) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glCombinerParameteriNV([In] IntPtr extensionPointer, int pname, int param)

        #region void glCombinerInputNV([In] IntPtr extensionPointer, int stage, int portion, int variable, int input, int mapping, int componentUsage)
        // GLvoid glCombinerInputNV(GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage)
        #if WIN32
        [IlasmAttribute(".maxstack 7\r\nldarg stage\r\nldarg portion\r\nldarg variable\r\nldarg input\r\nldarg mapping\r\nldarg componentUsage\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 7\r\nldarg stage\r\nldarg portion\r\nldarg variable\r\nldarg input\r\nldarg mapping\r\nldarg componentUsage\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32)\r\nret")]
        #endif
        public static void glCombinerInputNV([In] IntPtr extensionPointer, int stage, int portion, int variable, int input, int mapping, int componentUsage) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glCombinerInputNV([In] IntPtr extensionPointer, int stage, int portion, int variable, int input, int mapping, int componentUsage)

        #region void glCombinerOutputNV([In] IntPtr extensionPointer, int stage, int portion, int abOutput, int cdOutput, int sumOutput, int scale, int bias, int abDotProduct, int cdDotProduct, int muxSum)
        // GLvoid glCombinerOutputNV(GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum)
        #if WIN32
        [IlasmAttribute(".maxstack 11\r\nldarg stage\r\nldarg portion\r\nldarg abOutput\r\nldarg cdOutput\r\nldarg sumOutput\r\nldarg scale\r\nldarg bias\r\nldarg abDotProduct\r\nldarg cdDotProduct\r\nldarg muxSum\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 11\r\nldarg stage\r\nldarg portion\r\nldarg abOutput\r\nldarg cdOutput\r\nldarg sumOutput\r\nldarg scale\r\nldarg bias\r\nldarg abDotProduct\r\nldarg cdDotProduct\r\nldarg muxSum\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32)\r\nret")]
        #endif
        public static void glCombinerOutputNV([In] IntPtr extensionPointer, int stage, int portion, int abOutput, int cdOutput, int sumOutput, int scale, int bias, int abDotProduct, int cdDotProduct, int muxSum) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glCombinerOutputNV([In] IntPtr extensionPointer, int stage, int portion, int abOutput, int cdOutput, int sumOutput, int scale, int bias, int abDotProduct, int cdDotProduct, int muxSum)

        #region void glFinalCombinerInputNV([In] IntPtr extensionPointer, int variable, int input, int mapping, int componentUsage)
        // GLvoid glFinalCombinerInputNV(GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg variable\r\nldarg input\r\nldarg mapping\r\nldarg componentUsage\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg variable\r\nldarg input\r\nldarg mapping\r\nldarg componentUsage\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32)\r\nret")]
        #endif
        public static void glFinalCombinerInputNV([In] IntPtr extensionPointer, int variable, int input, int mapping, int componentUsage) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glFinalCombinerInputNV([In] IntPtr extensionPointer, int variable, int input, int mapping, int componentUsage)

        #region Overloads for GLvoid glGetCombinerInputParameterfvNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat* parameters)
        #region void glGetCombinerInputParameterfvNV([In] IntPtr extensionPointer, int stage, int portion, int variable, int pname, out float parameters)
        // GLvoid glGetCombinerInputParameterfvNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg stage\r\nldarg portion\r\nldarg variable\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg stage\r\nldarg portion\r\nldarg variable\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[out]float32)\r\nret")]
        #endif
        public static void glGetCombinerInputParameterfvNV([In] IntPtr extensionPointer, int stage, int portion, int variable, int pname, out float parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetCombinerInputParameterfvNV([In] IntPtr extensionPointer, int stage, int portion, int variable, int pname, out float parameters)

        #region void glGetCombinerInputParameterfvNV([In] IntPtr extensionPointer, int stage, int portion, int variable, int pname, float[] parameters)
        // GLvoid glGetCombinerInputParameterfvNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg stage\r\nldarg portion\r\nldarg variable\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[out]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg stage\r\nldarg portion\r\nldarg variable\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[out]float32[])\r\nret")]
        #endif
        public static void glGetCombinerInputParameterfvNV([In] IntPtr extensionPointer, int stage, int portion, int variable, int pname, float[] parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetCombinerInputParameterfvNV([In] IntPtr extensionPointer, int stage, int portion, int variable, int pname, float[] parameters)

        #region void glGetCombinerInputParameterfvNV([In] IntPtr extensionPointer, int stage, int portion, int variable, int pname, IntPtr parameters)
        // GLvoid glGetCombinerInputParameterfvNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg stage\r\nldarg portion\r\nldarg variable\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg stage\r\nldarg portion\r\nldarg variable\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGetCombinerInputParameterfvNV([In] IntPtr extensionPointer, int stage, int portion, int variable, int pname, IntPtr parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetCombinerInputParameterfvNV([In] IntPtr extensionPointer, int stage, int portion, int variable, int pname, IntPtr parameters)

        #region void glGetCombinerInputParameterfvNV([In] IntPtr extensionPointer, int stage, int portion, int variable, int pname, float* parameters)
        // GLvoid glGetCombinerInputParameterfvNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg stage\r\nldarg portion\r\nldarg variable\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[out]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg stage\r\nldarg portion\r\nldarg variable\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[out]float32*)\r\nret")]
        #endif
        public static unsafe void glGetCombinerInputParameterfvNV([In] IntPtr extensionPointer, int stage, int portion, int variable, int pname, float* parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetCombinerInputParameterfvNV([In] IntPtr extensionPointer, int stage, int portion, int variable, int pname, float* parameters)
        #endregion Overloads for GLvoid glGetCombinerInputParameterfvNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat* parameters)

        #region Overloads for GLvoid glGetCombinerInputParameterivNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint* parameters)
        #region void glGetCombinerInputParameterivNV([In] IntPtr extensionPointer, int stage, int portion, int variable, int pname, out int parameters)
        // GLvoid glGetCombinerInputParameterivNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg stage\r\nldarg portion\r\nldarg variable\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[out]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg stage\r\nldarg portion\r\nldarg variable\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[out]int32)\r\nret")]
        #endif
        public static void glGetCombinerInputParameterivNV([In] IntPtr extensionPointer, int stage, int portion, int variable, int pname, out int parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetCombinerInputParameterivNV([In] IntPtr extensionPointer, int stage, int portion, int variable, int pname, out int parameters)

        #region void glGetCombinerInputParameterivNV([In] IntPtr extensionPointer, int stage, int portion, int variable, int pname, int[] parameters)
        // GLvoid glGetCombinerInputParameterivNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg stage\r\nldarg portion\r\nldarg variable\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[out]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg stage\r\nldarg portion\r\nldarg variable\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[out]int32[])\r\nret")]
        #endif
        public static void glGetCombinerInputParameterivNV([In] IntPtr extensionPointer, int stage, int portion, int variable, int pname, int[] parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetCombinerInputParameterivNV([In] IntPtr extensionPointer, int stage, int portion, int variable, int pname, int[] parameters)

        #region void glGetCombinerInputParameterivNV([In] IntPtr extensionPointer, int stage, int portion, int variable, int pname, IntPtr parameters)
        // GLvoid glGetCombinerInputParameterivNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg stage\r\nldarg portion\r\nldarg variable\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg stage\r\nldarg portion\r\nldarg variable\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGetCombinerInputParameterivNV([In] IntPtr extensionPointer, int stage, int portion, int variable, int pname, IntPtr parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetCombinerInputParameterivNV([In] IntPtr extensionPointer, int stage, int portion, int variable, int pname, IntPtr parameters)

        #region void glGetCombinerInputParameterivNV([In] IntPtr extensionPointer, int stage, int portion, int variable, int pname, int* parameters)
        // GLvoid glGetCombinerInputParameterivNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg stage\r\nldarg portion\r\nldarg variable\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[out]int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg stage\r\nldarg portion\r\nldarg variable\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[out]int32*)\r\nret")]
        #endif
        public static unsafe void glGetCombinerInputParameterivNV([In] IntPtr extensionPointer, int stage, int portion, int variable, int pname, int* parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetCombinerInputParameterivNV([In] IntPtr extensionPointer, int stage, int portion, int variable, int pname, int* parameters)
        #endregion Overloads for GLvoid glGetCombinerInputParameterivNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint* parameters)

        #region Overloads for GLvoid glGetCombinerOutputParameterfvNV(GLenum stage, GLenum portion, GLenum pname, GLfloat* parameters)
        #region void glGetCombinerOutputParameterfvNV([In] IntPtr extensionPointer, int stage, int portion, int pname, out float parameters)
        // GLvoid glGetCombinerOutputParameterfvNV(GLenum stage, GLenum portion, GLenum pname, GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg stage\r\nldarg portion\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg stage\r\nldarg portion\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[out]float32)\r\nret")]
        #endif
        public static void glGetCombinerOutputParameterfvNV([In] IntPtr extensionPointer, int stage, int portion, int pname, out float parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetCombinerOutputParameterfvNV([In] IntPtr extensionPointer, int stage, int portion, int pname, out float parameters)

        #region void glGetCombinerOutputParameterfvNV([In] IntPtr extensionPointer, int stage, int portion, int pname, float[] parameters)
        // GLvoid glGetCombinerOutputParameterfvNV(GLenum stage, GLenum portion, GLenum pname, GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg stage\r\nldarg portion\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[out]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg stage\r\nldarg portion\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[out]float32[])\r\nret")]
        #endif
        public static void glGetCombinerOutputParameterfvNV([In] IntPtr extensionPointer, int stage, int portion, int pname, float[] parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetCombinerOutputParameterfvNV([In] IntPtr extensionPointer, int stage, int portion, int pname, float[] parameters)

        #region void glGetCombinerOutputParameterfvNV([In] IntPtr extensionPointer, int stage, int portion, int pname, IntPtr parameters)
        // GLvoid glGetCombinerOutputParameterfvNV(GLenum stage, GLenum portion, GLenum pname, GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg stage\r\nldarg portion\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg stage\r\nldarg portion\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGetCombinerOutputParameterfvNV([In] IntPtr extensionPointer, int stage, int portion, int pname, IntPtr parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetCombinerOutputParameterfvNV([In] IntPtr extensionPointer, int stage, int portion, int pname, IntPtr parameters)

        #region void glGetCombinerOutputParameterfvNV([In] IntPtr extensionPointer, int stage, int portion, int pname, float* parameters)
        // GLvoid glGetCombinerOutputParameterfvNV(GLenum stage, GLenum portion, GLenum pname, GLfloat* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg stage\r\nldarg portion\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[out]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg stage\r\nldarg portion\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[out]float32*)\r\nret")]
        #endif
        public static unsafe void glGetCombinerOutputParameterfvNV([In] IntPtr extensionPointer, int stage, int portion, int pname, float* parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetCombinerOutputParameterfvNV([In] IntPtr extensionPointer, int stage, int portion, int pname, float* parameters)
        #endregion Overloads for GLvoid glGetCombinerOutputParameterfvNV(GLenum stage, GLenum portion, GLenum pname, GLfloat* parameters)

        #region Overloads for GLvoid glGetCombinerOutputParameterivNV(GLenum stage, GLenum portion, GLenum pname, GLint* parameters)
        #region void glGetCombinerOutputParameterivNV([In] IntPtr extensionPointer, int stage, int portion, int pname, out int parameters)
        // GLvoid glGetCombinerOutputParameterivNV(GLenum stage, GLenum portion, GLenum pname, GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg stage\r\nldarg portion\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[out]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg stage\r\nldarg portion\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[out]int32)\r\nret")]
        #endif
        public static void glGetCombinerOutputParameterivNV([In] IntPtr extensionPointer, int stage, int portion, int pname, out int parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetCombinerOutputParameterivNV([In] IntPtr extensionPointer, int stage, int portion, int pname, out int parameters)

        #region void glGetCombinerOutputParameterivNV([In] IntPtr extensionPointer, int stage, int portion, int pname, int[] parameters)
        // GLvoid glGetCombinerOutputParameterivNV(GLenum stage, GLenum portion, GLenum pname, GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg stage\r\nldarg portion\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[out]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg stage\r\nldarg portion\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[out]int32[])\r\nret")]
        #endif
        public static void glGetCombinerOutputParameterivNV([In] IntPtr extensionPointer, int stage, int portion, int pname, int[] parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetCombinerOutputParameterivNV([In] IntPtr extensionPointer, int stage, int portion, int pname, int[] parameters)

        #region void glGetCombinerOutputParameterivNV([In] IntPtr extensionPointer, int stage, int portion, int pname, IntPtr parameters)
        // GLvoid glGetCombinerOutputParameterivNV(GLenum stage, GLenum portion, GLenum pname, GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg stage\r\nldarg portion\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg stage\r\nldarg portion\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGetCombinerOutputParameterivNV([In] IntPtr extensionPointer, int stage, int portion, int pname, IntPtr parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetCombinerOutputParameterivNV([In] IntPtr extensionPointer, int stage, int portion, int pname, IntPtr parameters)

        #region void glGetCombinerOutputParameterivNV([In] IntPtr extensionPointer, int stage, int portion, int pname, int* parameters)
        // GLvoid glGetCombinerOutputParameterivNV(GLenum stage, GLenum portion, GLenum pname, GLint* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg stage\r\nldarg portion\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[out]int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg stage\r\nldarg portion\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[out]int32*)\r\nret")]
        #endif
        public static unsafe void glGetCombinerOutputParameterivNV([In] IntPtr extensionPointer, int stage, int portion, int pname, int* parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetCombinerOutputParameterivNV([In] IntPtr extensionPointer, int stage, int portion, int pname, int* parameters)
        #endregion Overloads for GLvoid glGetCombinerOutputParameterivNV(GLenum stage, GLenum portion, GLenum pname, GLint* parameters)

        #region Overloads for GLvoid glGetFinalCombinerInputParameterfvNV(GLenum variable, GLenum pname, GLfloat* parameters)
        #region void glGetFinalCombinerInputParameterfvNV([In] IntPtr extensionPointer, int variable, int pname, out float parameters)
        // GLvoid glGetFinalCombinerInputParameterfvNV(GLenum variable, GLenum pname, GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg variable\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg variable\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]float32)\r\nret")]
        #endif
        public static void glGetFinalCombinerInputParameterfvNV([In] IntPtr extensionPointer, int variable, int pname, out float parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetFinalCombinerInputParameterfvNV([In] IntPtr extensionPointer, int variable, int pname, out float parameters)

        #region void glGetFinalCombinerInputParameterfvNV([In] IntPtr extensionPointer, int variable, int pname, float[] parameters)
        // GLvoid glGetFinalCombinerInputParameterfvNV(GLenum variable, GLenum pname, GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg variable\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg variable\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]float32[])\r\nret")]
        #endif
        public static void glGetFinalCombinerInputParameterfvNV([In] IntPtr extensionPointer, int variable, int pname, float[] parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetFinalCombinerInputParameterfvNV([In] IntPtr extensionPointer, int variable, int pname, float[] parameters)

        #region void glGetFinalCombinerInputParameterfvNV([In] IntPtr extensionPointer, int variable, int pname, IntPtr parameters)
        // GLvoid glGetFinalCombinerInputParameterfvNV(GLenum variable, GLenum pname, GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg variable\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg variable\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGetFinalCombinerInputParameterfvNV([In] IntPtr extensionPointer, int variable, int pname, IntPtr parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetFinalCombinerInputParameterfvNV([In] IntPtr extensionPointer, int variable, int pname, IntPtr parameters)

        #region void glGetFinalCombinerInputParameterfvNV([In] IntPtr extensionPointer, int variable, int pname, float* parameters)
        // GLvoid glGetFinalCombinerInputParameterfvNV(GLenum variable, GLenum pname, GLfloat* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg variable\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg variable\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]float32*)\r\nret")]
        #endif
        public static unsafe void glGetFinalCombinerInputParameterfvNV([In] IntPtr extensionPointer, int variable, int pname, float* parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetFinalCombinerInputParameterfvNV([In] IntPtr extensionPointer, int variable, int pname, float* parameters)
        #endregion Overloads for GLvoid glGetFinalCombinerInputParameterfvNV(GLenum variable, GLenum pname, GLfloat* parameters)

        #region Overloads for GLvoid glGetFinalCombinerInputParameterivNV(GLenum variable, GLenum pname, GLint* parameters)
        #region void glGetFinalCombinerInputParameterivNV([In] IntPtr extensionPointer, int variable, int pname, out int parameters)
        // GLvoid glGetFinalCombinerInputParameterivNV(GLenum variable, GLenum pname, GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg variable\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg variable\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]int32)\r\nret")]
        #endif
        public static void glGetFinalCombinerInputParameterivNV([In] IntPtr extensionPointer, int variable, int pname, out int parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetFinalCombinerInputParameterivNV([In] IntPtr extensionPointer, int variable, int pname, out int parameters)

        #region void glGetFinalCombinerInputParameterivNV([In] IntPtr extensionPointer, int variable, int pname, int[] parameters)
        // GLvoid glGetFinalCombinerInputParameterivNV(GLenum variable, GLenum pname, GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg variable\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg variable\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]int32[])\r\nret")]
        #endif
        public static void glGetFinalCombinerInputParameterivNV([In] IntPtr extensionPointer, int variable, int pname, int[] parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetFinalCombinerInputParameterivNV([In] IntPtr extensionPointer, int variable, int pname, int[] parameters)

        #region void glGetFinalCombinerInputParameterivNV([In] IntPtr extensionPointer, int variable, int pname, IntPtr parameters)
        // GLvoid glGetFinalCombinerInputParameterivNV(GLenum variable, GLenum pname, GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg variable\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg variable\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGetFinalCombinerInputParameterivNV([In] IntPtr extensionPointer, int variable, int pname, IntPtr parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetFinalCombinerInputParameterivNV([In] IntPtr extensionPointer, int variable, int pname, IntPtr parameters)

        #region void glGetFinalCombinerInputParameterivNV([In] IntPtr extensionPointer, int variable, int pname, int* parameters)
        // GLvoid glGetFinalCombinerInputParameterivNV(GLenum variable, GLenum pname, GLint* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg variable\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg variable\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]int32*)\r\nret")]
        #endif
        public static unsafe void glGetFinalCombinerInputParameterivNV([In] IntPtr extensionPointer, int variable, int pname, int* parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetFinalCombinerInputParameterivNV([In] IntPtr extensionPointer, int variable, int pname, int* parameters)
        #endregion Overloads for GLvoid glGetFinalCombinerInputParameterivNV(GLenum variable, GLenum pname, GLint* parameters)
        #endregion GL_NV_register_combiners Methods
        #endregion GL_NV_register_combiners (191)

        #region GL_NV_fog_distance (192)
        #region GL_NV_fog_distance Constants
        #region GL_FOG_DISTANCE_MODE_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_FOG_DISTANCE_MODE_NV 0x855A
        public const int GL_FOG_DISTANCE_MODE_NV = 0x855A;
        #endregion GL_FOG_DISTANCE_MODE_NV

        #region GL_EYE_RADIAL_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_EYE_RADIAL_NV 0x855B
        public const int GL_EYE_RADIAL_NV = 0x855B;
        #endregion GL_EYE_RADIAL_NV

        #region GL_EYE_PLANE_ABSOLUTE_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_EYE_PLANE_ABSOLUTE_NV 0x855C
        public const int GL_EYE_PLANE_ABSOLUTE_NV = 0x855C;
        #endregion GL_EYE_PLANE_ABSOLUTE_NV
        #endregion GL_NV_fog_distance Constants
        #endregion GL_NV_fog_distance (192)

        #region GL_NV_texgen_emboss (193)
        #region GL_NV_texgen_emboss Constants
        #region GL_EMBOSS_MAP_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_EMBOSS_MAP_NV 0x855F
        public const int GL_EMBOSS_MAP_NV = 0x855F;
        #endregion GL_EMBOSS_MAP_NV

        #region GL_EMBOSS_LIGHT_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_EMBOSS_LIGHT_NV 0x855D
        public const int GL_EMBOSS_LIGHT_NV = 0x855D;
        #endregion GL_EMBOSS_LIGHT_NV

        #region GL_EMBOSS_CONSTANT_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_EMBOSS_CONSTANT_NV 0x855E
        public const int GL_EMBOSS_CONSTANT_NV = 0x855E;
        #endregion GL_EMBOSS_CONSTANT_NV
        #endregion GL_NV_texgen_emboss Constants
        #endregion GL_NV_texgen_emboss (193)

        #region GL_NV_blend_square (194)
        #endregion GL_NV_blend_square (194)

        #region GL_NV_texture_env_combine4 (195)
        #region GL_NV_texture_env_combine4 Constants
        #region GL_COMBINE4_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COMBINE4_NV 0x8503
        public const int GL_COMBINE4_NV = 0x8503;
        #endregion GL_COMBINE4_NV

        #region GL_SOURCE3_RGB_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SOURCE3_RGB_NV 0x8583
        public const int GL_SOURCE3_RGB_NV = 0x8583;
        #endregion GL_SOURCE3_RGB_NV

        #region GL_SOURCE3_ALPHA_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SOURCE3_ALPHA_NV 0x858B
        public const int GL_SOURCE3_ALPHA_NV = 0x858B;
        #endregion GL_SOURCE3_ALPHA_NV

        #region GL_OPERAND3_RGB_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OPERAND3_RGB_NV 0x8593
        public const int GL_OPERAND3_RGB_NV = 0x8593;
        #endregion GL_OPERAND3_RGB_NV

        #region GL_OPERAND3_ALPHA_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OPERAND3_ALPHA_NV 0x859B
        public const int GL_OPERAND3_ALPHA_NV = 0x859B;
        #endregion GL_OPERAND3_ALPHA_NV
        #endregion GL_NV_texture_env_combine4 Constants
        #endregion GL_NV_texture_env_combine4 (195)

        #region GL_NV_fence (222)
        #region GL_NV_fence Constants
        #region GL_ALL_COMPLETED_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_ALL_COMPLETED_NV 0x84F2
        public const int GL_ALL_COMPLETED_NV = 0x84F2;
        #endregion GL_ALL_COMPLETED_NV

        #region GL_FENCE_STATUS_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_FENCE_STATUS_NV 0x84F3
        public const int GL_FENCE_STATUS_NV = 0x84F3;
        #endregion GL_FENCE_STATUS_NV

        #region GL_FENCE_CONDITION_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_FENCE_CONDITION_NV 0x84F4
        public const int GL_FENCE_CONDITION_NV = 0x84F4;
        #endregion GL_FENCE_CONDITION_NV
        #endregion GL_NV_fence Constants

        #region GL_NV_fence Methods
        #region Overloads for GLvoid glGenFencesNV(GLsizei n, GLuint* fences)
        #region void glGenFencesNV([In] IntPtr extensionPointer, int n, out int fences)
        // GLvoid glGenFencesNV(GLsizei n, GLuint* fences)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg fences\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[out]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg fences\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[out]int32)\r\nret")]
        #endif
        public static void glGenFencesNV([In] IntPtr extensionPointer, int n, out int fences) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGenFencesNV([In] IntPtr extensionPointer, int n, out int fences)

        #region void glGenFencesNV([In] IntPtr extensionPointer, int n, int[] fences)
        // GLvoid glGenFencesNV(GLsizei n, GLuint* fences)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg fences\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[out]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg fences\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[out]int32[])\r\nret")]
        #endif
        public static void glGenFencesNV([In] IntPtr extensionPointer, int n, int[] fences) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGenFencesNV([In] IntPtr extensionPointer, int n, int[] fences)

        #region void glGenFencesNV([In] IntPtr extensionPointer, int n, IntPtr fences)
        // GLvoid glGenFencesNV(GLsizei n, GLuint* fences)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg fences\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg fences\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGenFencesNV([In] IntPtr extensionPointer, int n, IntPtr fences) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGenFencesNV([In] IntPtr extensionPointer, int n, IntPtr fences)

        #region void glGenFencesNV([In] IntPtr extensionPointer, int n, int* fences)
        // GLvoid glGenFencesNV(GLsizei n, GLuint* fences)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg fences\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[out]int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg fences\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[out]int32*)\r\nret")]
        #endif
        public static unsafe void glGenFencesNV([In] IntPtr extensionPointer, int n, int* fences) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGenFencesNV([In] IntPtr extensionPointer, int n, int* fences)
        #endregion Overloads for GLvoid glGenFencesNV(GLsizei n, GLuint* fences)

        #region Overloads for GLvoid glDeleteFencesNV(GLsizei n, const GLuint* fences)
        #region void glDeleteFencesNV([In] IntPtr extensionPointer, int n, ref int fences)
        // GLvoid glDeleteFencesNV(GLsizei n, const GLuint* fences)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg fences\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg fences\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]int32)\r\nret")]
        #endif
        public static void glDeleteFencesNV([In] IntPtr extensionPointer, int n, ref int fences) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glDeleteFencesNV([In] IntPtr extensionPointer, int n, ref int fences)

        #region void glDeleteFencesNV([In] IntPtr extensionPointer, int n, int[] fences)
        // GLvoid glDeleteFencesNV(GLsizei n, const GLuint* fences)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg fences\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg fences\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32[])\r\nret")]
        #endif
        public static void glDeleteFencesNV([In] IntPtr extensionPointer, int n, int[] fences) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glDeleteFencesNV([In] IntPtr extensionPointer, int n, int[] fences)

        #region void glDeleteFencesNV([In] IntPtr extensionPointer, int n, IntPtr fences)
        // GLvoid glDeleteFencesNV(GLsizei n, const GLuint* fences)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg fences\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg fences\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glDeleteFencesNV([In] IntPtr extensionPointer, int n, IntPtr fences) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glDeleteFencesNV([In] IntPtr extensionPointer, int n, IntPtr fences)

        #region void glDeleteFencesNV([In] IntPtr extensionPointer, int n, int* fences)
        // GLvoid glDeleteFencesNV(GLsizei n, const GLuint* fences)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg fences\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg fences\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32*)\r\nret")]
        #endif
        public static unsafe void glDeleteFencesNV([In] IntPtr extensionPointer, int n, int* fences) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glDeleteFencesNV([In] IntPtr extensionPointer, int n, int* fences)
        #endregion Overloads for GLvoid glDeleteFencesNV(GLsizei n, const GLuint* fences)

        #region void glSetFenceNV([In] IntPtr extensionPointer, int fence, int condition)
        // GLvoid glSetFenceNV(GLuint fence, GLenum condition)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg fence\r\nldarg condition\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg fence\r\nldarg condition\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32)\r\nret")]
        #endif
        public static void glSetFenceNV([In] IntPtr extensionPointer, int fence, int condition) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSetFenceNV([In] IntPtr extensionPointer, int fence, int condition)

        #region int glTestFenceNV([In] IntPtr extensionPointer, int fence)
        // GLboolean glTestFenceNV(GLuint fence)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg fence\r\nldarg extensionPointer\r\ncalli unmanaged stdcall int32([in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg fence\r\nldarg extensionPointer\r\ncalli unmanaged cdecl int32([in]int32)\r\nret")]
        #endif
        public static int glTestFenceNV([In] IntPtr extensionPointer, int fence) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion int glTestFenceNV([In] IntPtr extensionPointer, int fence)

        #region void glFinishFenceNV([In] IntPtr extensionPointer, int fence)
        // GLvoid glFinishFenceNV(GLuint fence)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg fence\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg fence\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32)\r\nret")]
        #endif
        public static void glFinishFenceNV([In] IntPtr extensionPointer, int fence) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glFinishFenceNV([In] IntPtr extensionPointer, int fence)

        #region int glIsFenceNV([In] IntPtr extensionPointer, int fence)
        // GLboolean glIsFenceNV(GLuint fence)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg fence\r\nldarg extensionPointer\r\ncalli unmanaged stdcall int32([in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg fence\r\nldarg extensionPointer\r\ncalli unmanaged cdecl int32([in]int32)\r\nret")]
        #endif
        public static int glIsFenceNV([In] IntPtr extensionPointer, int fence) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion int glIsFenceNV([In] IntPtr extensionPointer, int fence)

        #region Overloads for GLvoid glGetFenceivNV(GLuint fence, GLenum pname, GLint* parameters)
        #region void glGetFenceivNV([In] IntPtr extensionPointer, int fence, int pname, out int parameters)
        // GLvoid glGetFenceivNV(GLuint fence, GLenum pname, GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg fence\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg fence\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]int32)\r\nret")]
        #endif
        public static void glGetFenceivNV([In] IntPtr extensionPointer, int fence, int pname, out int parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetFenceivNV([In] IntPtr extensionPointer, int fence, int pname, out int parameters)

        #region void glGetFenceivNV([In] IntPtr extensionPointer, int fence, int pname, int[] parameters)
        // GLvoid glGetFenceivNV(GLuint fence, GLenum pname, GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg fence\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg fence\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]int32[])\r\nret")]
        #endif
        public static void glGetFenceivNV([In] IntPtr extensionPointer, int fence, int pname, int[] parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetFenceivNV([In] IntPtr extensionPointer, int fence, int pname, int[] parameters)

        #region void glGetFenceivNV([In] IntPtr extensionPointer, int fence, int pname, IntPtr parameters)
        // GLvoid glGetFenceivNV(GLuint fence, GLenum pname, GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg fence\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg fence\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGetFenceivNV([In] IntPtr extensionPointer, int fence, int pname, IntPtr parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetFenceivNV([In] IntPtr extensionPointer, int fence, int pname, IntPtr parameters)

        #region void glGetFenceivNV([In] IntPtr extensionPointer, int fence, int pname, int* parameters)
        // GLvoid glGetFenceivNV(GLuint fence, GLenum pname, GLint* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg fence\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg fence\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]int32*)\r\nret")]
        #endif
        public static unsafe void glGetFenceivNV([In] IntPtr extensionPointer, int fence, int pname, int* parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetFenceivNV([In] IntPtr extensionPointer, int fence, int pname, int* parameters)
        #endregion Overloads for GLvoid glGetFenceivNV(GLuint fence, GLenum pname, GLint* parameters)
        #endregion GL_NV_fence Methods
        #endregion GL_NV_fence (222)

        #region GL_NV_evaluators (225)
        #region GL_NV_evaluators Constants
        #region GL_EVAL_2D_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_EVAL_2D_NV 0x86C0
        public const int GL_EVAL_2D_NV = 0x86C0;
        #endregion GL_EVAL_2D_NV

        #region GL_EVAL_TRIANGULAR_2D_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_EVAL_TRIANGULAR_2D_NV 0x86C1
        public const int GL_EVAL_TRIANGULAR_2D_NV = 0x86C1;
        #endregion GL_EVAL_TRIANGULAR_2D_NV

        #region GL_MAP_TESSELLATION_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAP_TESSELLATION_NV 0x86C2
        public const int GL_MAP_TESSELLATION_NV = 0x86C2;
        #endregion GL_MAP_TESSELLATION_NV

        #region GL_MAP_ATTRIB_U_ORDER_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAP_ATTRIB_U_ORDER_NV 0x86C3
        public const int GL_MAP_ATTRIB_U_ORDER_NV = 0x86C3;
        #endregion GL_MAP_ATTRIB_U_ORDER_NV

        #region GL_MAP_ATTRIB_V_ORDER_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAP_ATTRIB_V_ORDER_NV 0x86C4
        public const int GL_MAP_ATTRIB_V_ORDER_NV = 0x86C4;
        #endregion GL_MAP_ATTRIB_V_ORDER_NV

        #region GL_EVAL_FRACTIONAL_TESSELLATION_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_EVAL_FRACTIONAL_TESSELLATION_NV 0x86C5
        public const int GL_EVAL_FRACTIONAL_TESSELLATION_NV = 0x86C5;
        #endregion GL_EVAL_FRACTIONAL_TESSELLATION_NV

        #region GL_EVAL_VERTEX_ATTRIB0_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_EVAL_VERTEX_ATTRIB0_NV 0x86C6
        public const int GL_EVAL_VERTEX_ATTRIB0_NV = 0x86C6;
        #endregion GL_EVAL_VERTEX_ATTRIB0_NV

        #region GL_EVAL_VERTEX_ATTRIB1_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_EVAL_VERTEX_ATTRIB1_NV 0x86C7
        public const int GL_EVAL_VERTEX_ATTRIB1_NV = 0x86C7;
        #endregion GL_EVAL_VERTEX_ATTRIB1_NV

        #region GL_EVAL_VERTEX_ATTRIB2_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_EVAL_VERTEX_ATTRIB2_NV 0x86C8
        public const int GL_EVAL_VERTEX_ATTRIB2_NV = 0x86C8;
        #endregion GL_EVAL_VERTEX_ATTRIB2_NV

        #region GL_EVAL_VERTEX_ATTRIB3_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_EVAL_VERTEX_ATTRIB3_NV 0x86C9
        public const int GL_EVAL_VERTEX_ATTRIB3_NV = 0x86C9;
        #endregion GL_EVAL_VERTEX_ATTRIB3_NV

        #region GL_EVAL_VERTEX_ATTRIB4_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_EVAL_VERTEX_ATTRIB4_NV 0x86CA
        public const int GL_EVAL_VERTEX_ATTRIB4_NV = 0x86CA;
        #endregion GL_EVAL_VERTEX_ATTRIB4_NV

        #region GL_EVAL_VERTEX_ATTRIB5_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_EVAL_VERTEX_ATTRIB5_NV 0x86CB
        public const int GL_EVAL_VERTEX_ATTRIB5_NV = 0x86CB;
        #endregion GL_EVAL_VERTEX_ATTRIB5_NV

        #region GL_EVAL_VERTEX_ATTRIB6_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_EVAL_VERTEX_ATTRIB6_NV 0x86CC
        public const int GL_EVAL_VERTEX_ATTRIB6_NV = 0x86CC;
        #endregion GL_EVAL_VERTEX_ATTRIB6_NV

        #region GL_EVAL_VERTEX_ATTRIB7_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_EVAL_VERTEX_ATTRIB7_NV 0x86CD
        public const int GL_EVAL_VERTEX_ATTRIB7_NV = 0x86CD;
        #endregion GL_EVAL_VERTEX_ATTRIB7_NV

        #region GL_EVAL_VERTEX_ATTRIB8_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_EVAL_VERTEX_ATTRIB8_NV 0x86CE
        public const int GL_EVAL_VERTEX_ATTRIB8_NV = 0x86CE;
        #endregion GL_EVAL_VERTEX_ATTRIB8_NV

        #region GL_EVAL_VERTEX_ATTRIB9_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_EVAL_VERTEX_ATTRIB9_NV 0x86CF
        public const int GL_EVAL_VERTEX_ATTRIB9_NV = 0x86CF;
        #endregion GL_EVAL_VERTEX_ATTRIB9_NV

        #region GL_EVAL_VERTEX_ATTRIB10_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_EVAL_VERTEX_ATTRIB10_NV 0x86D0
        public const int GL_EVAL_VERTEX_ATTRIB10_NV = 0x86D0;
        #endregion GL_EVAL_VERTEX_ATTRIB10_NV

        #region GL_EVAL_VERTEX_ATTRIB11_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_EVAL_VERTEX_ATTRIB11_NV 0x86D1
        public const int GL_EVAL_VERTEX_ATTRIB11_NV = 0x86D1;
        #endregion GL_EVAL_VERTEX_ATTRIB11_NV

        #region GL_EVAL_VERTEX_ATTRIB12_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_EVAL_VERTEX_ATTRIB12_NV 0x86D2
        public const int GL_EVAL_VERTEX_ATTRIB12_NV = 0x86D2;
        #endregion GL_EVAL_VERTEX_ATTRIB12_NV

        #region GL_EVAL_VERTEX_ATTRIB13_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_EVAL_VERTEX_ATTRIB13_NV 0x86D3
        public const int GL_EVAL_VERTEX_ATTRIB13_NV = 0x86D3;
        #endregion GL_EVAL_VERTEX_ATTRIB13_NV

        #region GL_EVAL_VERTEX_ATTRIB14_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_EVAL_VERTEX_ATTRIB14_NV 0x86D4
        public const int GL_EVAL_VERTEX_ATTRIB14_NV = 0x86D4;
        #endregion GL_EVAL_VERTEX_ATTRIB14_NV

        #region GL_EVAL_VERTEX_ATTRIB15_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_EVAL_VERTEX_ATTRIB15_NV 0x86D5
        public const int GL_EVAL_VERTEX_ATTRIB15_NV = 0x86D5;
        #endregion GL_EVAL_VERTEX_ATTRIB15_NV

        #region GL_MAX_MAP_TESSELLATION_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAX_MAP_TESSELLATION_NV 0x86D6
        public const int GL_MAX_MAP_TESSELLATION_NV = 0x86D6;
        #endregion GL_MAX_MAP_TESSELLATION_NV

        #region GL_MAX_RATIONAL_EVAL_ORDER_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAX_RATIONAL_EVAL_ORDER_NV 0x86D7
        public const int GL_MAX_RATIONAL_EVAL_ORDER_NV = 0x86D7;
        #endregion GL_MAX_RATIONAL_EVAL_ORDER_NV
        #endregion GL_NV_evaluators Constants

        #region GL_NV_evaluators Methods
        #region Overloads for GLvoid glMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const GLvoid* points)
        #region void glMapControlPointsNV([In] IntPtr extensionPointer, int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, short[] points)
        // GLvoid glMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const GLvoid* points)
        #if WIN32
        [IlasmAttribute(".maxstack 10\r\nldarg target\r\nldarg index\r\nldarg type\r\nldarg ustride\r\nldarg vstride\r\nldarg uorder\r\nldarg vorder\r\nldarg packed\r\nldarg points\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 10\r\nldarg target\r\nldarg index\r\nldarg type\r\nldarg ustride\r\nldarg vstride\r\nldarg uorder\r\nldarg vorder\r\nldarg packed\r\nldarg points\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int16[])\r\nret")]
        #endif
        public static void glMapControlPointsNV([In] IntPtr extensionPointer, int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, short[] points) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMapControlPointsNV([In] IntPtr extensionPointer, int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, short[] points)

        #region void glMapControlPointsNV([In] IntPtr extensionPointer, int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, float[] points)
        // GLvoid glMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const GLvoid* points)
        #if WIN32
        [IlasmAttribute(".maxstack 10\r\nldarg target\r\nldarg index\r\nldarg type\r\nldarg ustride\r\nldarg vstride\r\nldarg uorder\r\nldarg vorder\r\nldarg packed\r\nldarg points\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 10\r\nldarg target\r\nldarg index\r\nldarg type\r\nldarg ustride\r\nldarg vstride\r\nldarg uorder\r\nldarg vorder\r\nldarg packed\r\nldarg points\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]float32[])\r\nret")]
        #endif
        public static void glMapControlPointsNV([In] IntPtr extensionPointer, int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, float[] points) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMapControlPointsNV([In] IntPtr extensionPointer, int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, float[] points)

        #region void glMapControlPointsNV([In] IntPtr extensionPointer, int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, int[] points)
        // GLvoid glMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const GLvoid* points)
        #if WIN32
        [IlasmAttribute(".maxstack 10\r\nldarg target\r\nldarg index\r\nldarg type\r\nldarg ustride\r\nldarg vstride\r\nldarg uorder\r\nldarg vorder\r\nldarg packed\r\nldarg points\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 10\r\nldarg target\r\nldarg index\r\nldarg type\r\nldarg ustride\r\nldarg vstride\r\nldarg uorder\r\nldarg vorder\r\nldarg packed\r\nldarg points\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32[])\r\nret")]
        #endif
        public static void glMapControlPointsNV([In] IntPtr extensionPointer, int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, int[] points) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMapControlPointsNV([In] IntPtr extensionPointer, int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, int[] points)

        #region void glMapControlPointsNV([In] IntPtr extensionPointer, int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, IntPtr points)
        // GLvoid glMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const GLvoid* points)
        #if WIN32
        [IlasmAttribute(".maxstack 10\r\nldarg target\r\nldarg index\r\nldarg type\r\nldarg ustride\r\nldarg vstride\r\nldarg uorder\r\nldarg vorder\r\nldarg packed\r\nldarg points\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 10\r\nldarg target\r\nldarg index\r\nldarg type\r\nldarg ustride\r\nldarg vstride\r\nldarg uorder\r\nldarg vorder\r\nldarg packed\r\nldarg points\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]native int)\r\nret")]
        #endif
        public static void glMapControlPointsNV([In] IntPtr extensionPointer, int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, IntPtr points) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMapControlPointsNV([In] IntPtr extensionPointer, int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, IntPtr points)

        #region void glMapControlPointsNV([In] IntPtr extensionPointer, int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, byte[] points)
        // GLvoid glMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const GLvoid* points)
        #if WIN32
        [IlasmAttribute(".maxstack 10\r\nldarg target\r\nldarg index\r\nldarg type\r\nldarg ustride\r\nldarg vstride\r\nldarg uorder\r\nldarg vorder\r\nldarg packed\r\nldarg points\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int8[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 10\r\nldarg target\r\nldarg index\r\nldarg type\r\nldarg ustride\r\nldarg vstride\r\nldarg uorder\r\nldarg vorder\r\nldarg packed\r\nldarg points\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int8[])\r\nret")]
        #endif
        public static void glMapControlPointsNV([In] IntPtr extensionPointer, int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, byte[] points) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMapControlPointsNV([In] IntPtr extensionPointer, int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, byte[] points)

        #region void glMapControlPointsNV([In] IntPtr extensionPointer, int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, double[] points)
        // GLvoid glMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const GLvoid* points)
        #if WIN32
        [IlasmAttribute(".maxstack 10\r\nldarg target\r\nldarg index\r\nldarg type\r\nldarg ustride\r\nldarg vstride\r\nldarg uorder\r\nldarg vorder\r\nldarg packed\r\nldarg points\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]float64[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 10\r\nldarg target\r\nldarg index\r\nldarg type\r\nldarg ustride\r\nldarg vstride\r\nldarg uorder\r\nldarg vorder\r\nldarg packed\r\nldarg points\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]float64[])\r\nret")]
        #endif
        public static void glMapControlPointsNV([In] IntPtr extensionPointer, int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, double[] points) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMapControlPointsNV([In] IntPtr extensionPointer, int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, double[] points)

        #region void glMapControlPointsNV([In] IntPtr extensionPointer, int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, uint[] points)
        // GLvoid glMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const GLvoid* points)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 10\r\nldarg target\r\nldarg index\r\nldarg type\r\nldarg ustride\r\nldarg vstride\r\nldarg uorder\r\nldarg vorder\r\nldarg packed\r\nldarg points\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int32[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 10\r\nldarg target\r\nldarg index\r\nldarg type\r\nldarg ustride\r\nldarg vstride\r\nldarg uorder\r\nldarg vorder\r\nldarg packed\r\nldarg points\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int32[])\r\nret")]
        #endif
        public static void glMapControlPointsNV([In] IntPtr extensionPointer, int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, uint[] points) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMapControlPointsNV([In] IntPtr extensionPointer, int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, uint[] points)

        #region void glMapControlPointsNV([In] IntPtr extensionPointer, int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, sbyte[] points)
        // GLvoid glMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const GLvoid* points)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 10\r\nldarg target\r\nldarg index\r\nldarg type\r\nldarg ustride\r\nldarg vstride\r\nldarg uorder\r\nldarg vorder\r\nldarg packed\r\nldarg points\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int8[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 10\r\nldarg target\r\nldarg index\r\nldarg type\r\nldarg ustride\r\nldarg vstride\r\nldarg uorder\r\nldarg vorder\r\nldarg packed\r\nldarg points\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int8[])\r\nret")]
        #endif
        public static void glMapControlPointsNV([In] IntPtr extensionPointer, int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, sbyte[] points) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMapControlPointsNV([In] IntPtr extensionPointer, int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, sbyte[] points)

        #region void glMapControlPointsNV([In] IntPtr extensionPointer, int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, ushort[] points)
        // GLvoid glMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const GLvoid* points)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 10\r\nldarg target\r\nldarg index\r\nldarg type\r\nldarg ustride\r\nldarg vstride\r\nldarg uorder\r\nldarg vorder\r\nldarg packed\r\nldarg points\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int16[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 10\r\nldarg target\r\nldarg index\r\nldarg type\r\nldarg ustride\r\nldarg vstride\r\nldarg uorder\r\nldarg vorder\r\nldarg packed\r\nldarg points\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int16[])\r\nret")]
        #endif
        public static void glMapControlPointsNV([In] IntPtr extensionPointer, int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, ushort[] points) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMapControlPointsNV([In] IntPtr extensionPointer, int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, ushort[] points)

        #region void glMapControlPointsNV([In] IntPtr extensionPointer, int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, void* points)
        // GLvoid glMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const GLvoid* points)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 10\r\nldarg target\r\nldarg index\r\nldarg type\r\nldarg ustride\r\nldarg vstride\r\nldarg uorder\r\nldarg vorder\r\nldarg packed\r\nldarg points\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]void*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 10\r\nldarg target\r\nldarg index\r\nldarg type\r\nldarg ustride\r\nldarg vstride\r\nldarg uorder\r\nldarg vorder\r\nldarg packed\r\nldarg points\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]void*)\r\nret")]
        #endif
        public static unsafe void glMapControlPointsNV([In] IntPtr extensionPointer, int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, void* points) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMapControlPointsNV([In] IntPtr extensionPointer, int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, void* points)
        #endregion Overloads for GLvoid glMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const GLvoid* points)

        #region Overloads for GLvoid glMapParameterivNV(GLenum target, GLenum pname, const GLint* parameters)
        #region void glMapParameterivNV([In] IntPtr extensionPointer, int target, int pname, ref int parameters)
        // GLvoid glMapParameterivNV(GLenum target, GLenum pname, const GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in][out]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in][out]int32)\r\nret")]
        #endif
        public static void glMapParameterivNV([In] IntPtr extensionPointer, int target, int pname, ref int parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMapParameterivNV([In] IntPtr extensionPointer, int target, int pname, ref int parameters)

        #region void glMapParameterivNV([In] IntPtr extensionPointer, int target, int pname, int[] parameters)
        // GLvoid glMapParameterivNV(GLenum target, GLenum pname, const GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32[])\r\nret")]
        #endif
        public static void glMapParameterivNV([In] IntPtr extensionPointer, int target, int pname, int[] parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMapParameterivNV([In] IntPtr extensionPointer, int target, int pname, int[] parameters)

        #region void glMapParameterivNV([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters)
        // GLvoid glMapParameterivNV(GLenum target, GLenum pname, const GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]native int)\r\nret")]
        #endif
        public static void glMapParameterivNV([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMapParameterivNV([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters)

        #region void glMapParameterivNV([In] IntPtr extensionPointer, int target, int pname, int* parameters)
        // GLvoid glMapParameterivNV(GLenum target, GLenum pname, const GLint* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32*)\r\nret")]
        #endif
        public static unsafe void glMapParameterivNV([In] IntPtr extensionPointer, int target, int pname, int* parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMapParameterivNV([In] IntPtr extensionPointer, int target, int pname, int* parameters)
        #endregion Overloads for GLvoid glMapParameterivNV(GLenum target, GLenum pname, const GLint* parameters)

        #region Overloads for GLvoid glMapParameterfvNV(GLenum target, GLenum pname, const GLfloat* parameters)
        #region void glMapParameterfvNV([In] IntPtr extensionPointer, int target, int pname, ref float parameters)
        // GLvoid glMapParameterfvNV(GLenum target, GLenum pname, const GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in][out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in][out]float32)\r\nret")]
        #endif
        public static void glMapParameterfvNV([In] IntPtr extensionPointer, int target, int pname, ref float parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMapParameterfvNV([In] IntPtr extensionPointer, int target, int pname, ref float parameters)

        #region void glMapParameterfvNV([In] IntPtr extensionPointer, int target, int pname, float[] parameters)
        // GLvoid glMapParameterfvNV(GLenum target, GLenum pname, const GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]float32[])\r\nret")]
        #endif
        public static void glMapParameterfvNV([In] IntPtr extensionPointer, int target, int pname, float[] parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMapParameterfvNV([In] IntPtr extensionPointer, int target, int pname, float[] parameters)

        #region void glMapParameterfvNV([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters)
        // GLvoid glMapParameterfvNV(GLenum target, GLenum pname, const GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]native int)\r\nret")]
        #endif
        public static void glMapParameterfvNV([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMapParameterfvNV([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters)

        #region void glMapParameterfvNV([In] IntPtr extensionPointer, int target, int pname, float* parameters)
        // GLvoid glMapParameterfvNV(GLenum target, GLenum pname, const GLfloat* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]float32*)\r\nret")]
        #endif
        public static unsafe void glMapParameterfvNV([In] IntPtr extensionPointer, int target, int pname, float* parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMapParameterfvNV([In] IntPtr extensionPointer, int target, int pname, float* parameters)
        #endregion Overloads for GLvoid glMapParameterfvNV(GLenum target, GLenum pname, const GLfloat* parameters)

        #region Overloads for GLvoid glGetMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, GLvoid* points)
        #region void glGetMapControlPointsNV([In] IntPtr extensionPointer, int target, int index, int type, int ustride, int vstride, int packed, short[] points)
        // GLvoid glGetMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, GLvoid* points)
        #if WIN32
        [IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg index\r\nldarg type\r\nldarg ustride\r\nldarg vstride\r\nldarg packed\r\nldarg points\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[out]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg index\r\nldarg type\r\nldarg ustride\r\nldarg vstride\r\nldarg packed\r\nldarg points\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[out]int16[])\r\nret")]
        #endif
        public static void glGetMapControlPointsNV([In] IntPtr extensionPointer, int target, int index, int type, int ustride, int vstride, int packed, short[] points) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetMapControlPointsNV([In] IntPtr extensionPointer, int target, int index, int type, int ustride, int vstride, int packed, short[] points)

        #region void glGetMapControlPointsNV([In] IntPtr extensionPointer, int target, int index, int type, int ustride, int vstride, int packed, float[] points)
        // GLvoid glGetMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, GLvoid* points)
        #if WIN32
        [IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg index\r\nldarg type\r\nldarg ustride\r\nldarg vstride\r\nldarg packed\r\nldarg points\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[out]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg index\r\nldarg type\r\nldarg ustride\r\nldarg vstride\r\nldarg packed\r\nldarg points\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[out]float32[])\r\nret")]
        #endif
        public static void glGetMapControlPointsNV([In] IntPtr extensionPointer, int target, int index, int type, int ustride, int vstride, int packed, float[] points) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetMapControlPointsNV([In] IntPtr extensionPointer, int target, int index, int type, int ustride, int vstride, int packed, float[] points)

        #region void glGetMapControlPointsNV([In] IntPtr extensionPointer, int target, int index, int type, int ustride, int vstride, int packed, int[] points)
        // GLvoid glGetMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, GLvoid* points)
        #if WIN32
        [IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg index\r\nldarg type\r\nldarg ustride\r\nldarg vstride\r\nldarg packed\r\nldarg points\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[out]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg index\r\nldarg type\r\nldarg ustride\r\nldarg vstride\r\nldarg packed\r\nldarg points\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[out]int32[])\r\nret")]
        #endif
        public static void glGetMapControlPointsNV([In] IntPtr extensionPointer, int target, int index, int type, int ustride, int vstride, int packed, int[] points) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetMapControlPointsNV([In] IntPtr extensionPointer, int target, int index, int type, int ustride, int vstride, int packed, int[] points)

        #region void glGetMapControlPointsNV([In] IntPtr extensionPointer, int target, int index, int type, int ustride, int vstride, int packed, IntPtr points)
        // GLvoid glGetMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, GLvoid* points)
        #if WIN32
        [IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg index\r\nldarg type\r\nldarg ustride\r\nldarg vstride\r\nldarg packed\r\nldarg points\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg index\r\nldarg type\r\nldarg ustride\r\nldarg vstride\r\nldarg packed\r\nldarg points\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGetMapControlPointsNV([In] IntPtr extensionPointer, int target, int index, int type, int ustride, int vstride, int packed, IntPtr points) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetMapControlPointsNV([In] IntPtr extensionPointer, int target, int index, int type, int ustride, int vstride, int packed, IntPtr points)

        #region void glGetMapControlPointsNV([In] IntPtr extensionPointer, int target, int index, int type, int ustride, int vstride, int packed, byte[] points)
        // GLvoid glGetMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, GLvoid* points)
        #if WIN32
        [IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg index\r\nldarg type\r\nldarg ustride\r\nldarg vstride\r\nldarg packed\r\nldarg points\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[out]unsigned int8[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg index\r\nldarg type\r\nldarg ustride\r\nldarg vstride\r\nldarg packed\r\nldarg points\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[out]unsigned int8[])\r\nret")]
        #endif
        public static void glGetMapControlPointsNV([In] IntPtr extensionPointer, int target, int index, int type, int ustride, int vstride, int packed, byte[] points) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetMapControlPointsNV([In] IntPtr extensionPointer, int target, int index, int type, int ustride, int vstride, int packed, byte[] points)

        #region void glGetMapControlPointsNV([In] IntPtr extensionPointer, int target, int index, int type, int ustride, int vstride, int packed, double[] points)
        // GLvoid glGetMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, GLvoid* points)
        #if WIN32
        [IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg index\r\nldarg type\r\nldarg ustride\r\nldarg vstride\r\nldarg packed\r\nldarg points\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[out]float64[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg index\r\nldarg type\r\nldarg ustride\r\nldarg vstride\r\nldarg packed\r\nldarg points\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[out]float64[])\r\nret")]
        #endif
        public static void glGetMapControlPointsNV([In] IntPtr extensionPointer, int target, int index, int type, int ustride, int vstride, int packed, double[] points) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetMapControlPointsNV([In] IntPtr extensionPointer, int target, int index, int type, int ustride, int vstride, int packed, double[] points)

        #region void glGetMapControlPointsNV([In] IntPtr extensionPointer, int target, int index, int type, int ustride, int vstride, int packed, uint[] points)
        // GLvoid glGetMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, GLvoid* points)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg index\r\nldarg type\r\nldarg ustride\r\nldarg vstride\r\nldarg packed\r\nldarg points\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[out]unsigned int32[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg index\r\nldarg type\r\nldarg ustride\r\nldarg vstride\r\nldarg packed\r\nldarg points\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[out]unsigned int32[])\r\nret")]
        #endif
        public static void glGetMapControlPointsNV([In] IntPtr extensionPointer, int target, int index, int type, int ustride, int vstride, int packed, uint[] points) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetMapControlPointsNV([In] IntPtr extensionPointer, int target, int index, int type, int ustride, int vstride, int packed, uint[] points)

        #region void glGetMapControlPointsNV([In] IntPtr extensionPointer, int target, int index, int type, int ustride, int vstride, int packed, sbyte[] points)
        // GLvoid glGetMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, GLvoid* points)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg index\r\nldarg type\r\nldarg ustride\r\nldarg vstride\r\nldarg packed\r\nldarg points\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[out]int8[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg index\r\nldarg type\r\nldarg ustride\r\nldarg vstride\r\nldarg packed\r\nldarg points\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[out]int8[])\r\nret")]
        #endif
        public static void glGetMapControlPointsNV([In] IntPtr extensionPointer, int target, int index, int type, int ustride, int vstride, int packed, sbyte[] points) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetMapControlPointsNV([In] IntPtr extensionPointer, int target, int index, int type, int ustride, int vstride, int packed, sbyte[] points)

        #region void glGetMapControlPointsNV([In] IntPtr extensionPointer, int target, int index, int type, int ustride, int vstride, int packed, ushort[] points)
        // GLvoid glGetMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, GLvoid* points)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg index\r\nldarg type\r\nldarg ustride\r\nldarg vstride\r\nldarg packed\r\nldarg points\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[out]unsigned int16[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg index\r\nldarg type\r\nldarg ustride\r\nldarg vstride\r\nldarg packed\r\nldarg points\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[out]unsigned int16[])\r\nret")]
        #endif
        public static void glGetMapControlPointsNV([In] IntPtr extensionPointer, int target, int index, int type, int ustride, int vstride, int packed, ushort[] points) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetMapControlPointsNV([In] IntPtr extensionPointer, int target, int index, int type, int ustride, int vstride, int packed, ushort[] points)

        #region void glGetMapControlPointsNV([In] IntPtr extensionPointer, int target, int index, int type, int ustride, int vstride, int packed, void* points)
        // GLvoid glGetMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, GLvoid* points)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg index\r\nldarg type\r\nldarg ustride\r\nldarg vstride\r\nldarg packed\r\nldarg points\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[out]void*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 8\r\nldarg target\r\nldarg index\r\nldarg type\r\nldarg ustride\r\nldarg vstride\r\nldarg packed\r\nldarg points\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[out]void*)\r\nret")]
        #endif
        public static unsafe void glGetMapControlPointsNV([In] IntPtr extensionPointer, int target, int index, int type, int ustride, int vstride, int packed, void* points) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetMapControlPointsNV([In] IntPtr extensionPointer, int target, int index, int type, int ustride, int vstride, int packed, void* points)
        #endregion Overloads for GLvoid glGetMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, GLvoid* points)

        #region Overloads for GLvoid glGetMapParameterivNV(GLenum target, GLenum pname, GLint* parameters)
        #region void glGetMapParameterivNV([In] IntPtr extensionPointer, int target, int pname, out int parameters)
        // GLvoid glGetMapParameterivNV(GLenum target, GLenum pname, GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]int32)\r\nret")]
        #endif
        public static void glGetMapParameterivNV([In] IntPtr extensionPointer, int target, int pname, out int parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetMapParameterivNV([In] IntPtr extensionPointer, int target, int pname, out int parameters)

        #region void glGetMapParameterivNV([In] IntPtr extensionPointer, int target, int pname, int[] parameters)
        // GLvoid glGetMapParameterivNV(GLenum target, GLenum pname, GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]int32[])\r\nret")]
        #endif
        public static void glGetMapParameterivNV([In] IntPtr extensionPointer, int target, int pname, int[] parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetMapParameterivNV([In] IntPtr extensionPointer, int target, int pname, int[] parameters)

        #region void glGetMapParameterivNV([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters)
        // GLvoid glGetMapParameterivNV(GLenum target, GLenum pname, GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGetMapParameterivNV([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetMapParameterivNV([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters)

        #region void glGetMapParameterivNV([In] IntPtr extensionPointer, int target, int pname, int* parameters)
        // GLvoid glGetMapParameterivNV(GLenum target, GLenum pname, GLint* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]int32*)\r\nret")]
        #endif
        public static unsafe void glGetMapParameterivNV([In] IntPtr extensionPointer, int target, int pname, int* parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetMapParameterivNV([In] IntPtr extensionPointer, int target, int pname, int* parameters)
        #endregion Overloads for GLvoid glGetMapParameterivNV(GLenum target, GLenum pname, GLint* parameters)

        #region Overloads for GLvoid glGetMapParameterfvNV(GLenum target, GLenum pname, GLfloat* parameters)
        #region void glGetMapParameterfvNV([In] IntPtr extensionPointer, int target, int pname, out float parameters)
        // GLvoid glGetMapParameterfvNV(GLenum target, GLenum pname, GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]float32)\r\nret")]
        #endif
        public static void glGetMapParameterfvNV([In] IntPtr extensionPointer, int target, int pname, out float parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetMapParameterfvNV([In] IntPtr extensionPointer, int target, int pname, out float parameters)

        #region void glGetMapParameterfvNV([In] IntPtr extensionPointer, int target, int pname, float[] parameters)
        // GLvoid glGetMapParameterfvNV(GLenum target, GLenum pname, GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]float32[])\r\nret")]
        #endif
        public static void glGetMapParameterfvNV([In] IntPtr extensionPointer, int target, int pname, float[] parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetMapParameterfvNV([In] IntPtr extensionPointer, int target, int pname, float[] parameters)

        #region void glGetMapParameterfvNV([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters)
        // GLvoid glGetMapParameterfvNV(GLenum target, GLenum pname, GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGetMapParameterfvNV([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetMapParameterfvNV([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters)

        #region void glGetMapParameterfvNV([In] IntPtr extensionPointer, int target, int pname, float* parameters)
        // GLvoid glGetMapParameterfvNV(GLenum target, GLenum pname, GLfloat* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]float32*)\r\nret")]
        #endif
        public static unsafe void glGetMapParameterfvNV([In] IntPtr extensionPointer, int target, int pname, float* parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetMapParameterfvNV([In] IntPtr extensionPointer, int target, int pname, float* parameters)
        #endregion Overloads for GLvoid glGetMapParameterfvNV(GLenum target, GLenum pname, GLfloat* parameters)

        #region Overloads for GLvoid glGetMapAttribParameterivNV(GLenum target, GLuint index, GLenum pname, GLint* parameters)
        #region void glGetMapAttribParameterivNV([In] IntPtr extensionPointer, int target, int index, int pname, out int parameters)
        // GLvoid glGetMapAttribParameterivNV(GLenum target, GLuint index, GLenum pname, GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg index\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[out]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg index\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[out]int32)\r\nret")]
        #endif
        public static void glGetMapAttribParameterivNV([In] IntPtr extensionPointer, int target, int index, int pname, out int parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetMapAttribParameterivNV([In] IntPtr extensionPointer, int target, int index, int pname, out int parameters)

        #region void glGetMapAttribParameterivNV([In] IntPtr extensionPointer, int target, int index, int pname, int[] parameters)
        // GLvoid glGetMapAttribParameterivNV(GLenum target, GLuint index, GLenum pname, GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg index\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[out]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg index\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[out]int32[])\r\nret")]
        #endif
        public static void glGetMapAttribParameterivNV([In] IntPtr extensionPointer, int target, int index, int pname, int[] parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetMapAttribParameterivNV([In] IntPtr extensionPointer, int target, int index, int pname, int[] parameters)

        #region void glGetMapAttribParameterivNV([In] IntPtr extensionPointer, int target, int index, int pname, IntPtr parameters)
        // GLvoid glGetMapAttribParameterivNV(GLenum target, GLuint index, GLenum pname, GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg index\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg index\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGetMapAttribParameterivNV([In] IntPtr extensionPointer, int target, int index, int pname, IntPtr parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetMapAttribParameterivNV([In] IntPtr extensionPointer, int target, int index, int pname, IntPtr parameters)

        #region void glGetMapAttribParameterivNV([In] IntPtr extensionPointer, int target, int index, int pname, int* parameters)
        // GLvoid glGetMapAttribParameterivNV(GLenum target, GLuint index, GLenum pname, GLint* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg index\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[out]int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg index\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[out]int32*)\r\nret")]
        #endif
        public static unsafe void glGetMapAttribParameterivNV([In] IntPtr extensionPointer, int target, int index, int pname, int* parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetMapAttribParameterivNV([In] IntPtr extensionPointer, int target, int index, int pname, int* parameters)
        #endregion Overloads for GLvoid glGetMapAttribParameterivNV(GLenum target, GLuint index, GLenum pname, GLint* parameters)

        #region Overloads for GLvoid glGetMapAttribParameterfvNV(GLenum target, GLuint index, GLenum pname, GLfloat* parameters)
        #region void glGetMapAttribParameterfvNV([In] IntPtr extensionPointer, int target, int index, int pname, out float parameters)
        // GLvoid glGetMapAttribParameterfvNV(GLenum target, GLuint index, GLenum pname, GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg index\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg index\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[out]float32)\r\nret")]
        #endif
        public static void glGetMapAttribParameterfvNV([In] IntPtr extensionPointer, int target, int index, int pname, out float parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetMapAttribParameterfvNV([In] IntPtr extensionPointer, int target, int index, int pname, out float parameters)

        #region void glGetMapAttribParameterfvNV([In] IntPtr extensionPointer, int target, int index, int pname, float[] parameters)
        // GLvoid glGetMapAttribParameterfvNV(GLenum target, GLuint index, GLenum pname, GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg index\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[out]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg index\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[out]float32[])\r\nret")]
        #endif
        public static void glGetMapAttribParameterfvNV([In] IntPtr extensionPointer, int target, int index, int pname, float[] parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetMapAttribParameterfvNV([In] IntPtr extensionPointer, int target, int index, int pname, float[] parameters)

        #region void glGetMapAttribParameterfvNV([In] IntPtr extensionPointer, int target, int index, int pname, IntPtr parameters)
        // GLvoid glGetMapAttribParameterfvNV(GLenum target, GLuint index, GLenum pname, GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg index\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg index\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGetMapAttribParameterfvNV([In] IntPtr extensionPointer, int target, int index, int pname, IntPtr parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetMapAttribParameterfvNV([In] IntPtr extensionPointer, int target, int index, int pname, IntPtr parameters)

        #region void glGetMapAttribParameterfvNV([In] IntPtr extensionPointer, int target, int index, int pname, float* parameters)
        // GLvoid glGetMapAttribParameterfvNV(GLenum target, GLuint index, GLenum pname, GLfloat* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg index\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[out]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg index\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[out]float32*)\r\nret")]
        #endif
        public static unsafe void glGetMapAttribParameterfvNV([In] IntPtr extensionPointer, int target, int index, int pname, float* parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetMapAttribParameterfvNV([In] IntPtr extensionPointer, int target, int index, int pname, float* parameters)
        #endregion Overloads for GLvoid glGetMapAttribParameterfvNV(GLenum target, GLuint index, GLenum pname, GLfloat* parameters)

        #region void glEvalMapsNV([In] IntPtr extensionPointer, int target, int mode)
        // GLvoid glEvalMapsNV(GLenum target, GLenum mode)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg mode\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg mode\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32)\r\nret")]
        #endif
        public static void glEvalMapsNV([In] IntPtr extensionPointer, int target, int mode) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glEvalMapsNV([In] IntPtr extensionPointer, int target, int mode)
        #endregion GL_NV_evaluators Methods
        #endregion GL_NV_evaluators (225)

        #region GL_NV_packed_depth_stencil (226)
        #region GL_NV_packed_depth_stencil Constants
        #region GL_DEPTH_STENCIL_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DEPTH_STENCIL_NV 0x84F9
        public const int GL_DEPTH_STENCIL_NV = 0x84F9;
        #endregion GL_DEPTH_STENCIL_NV

        #region GL_UNSIGNED_INT_24_8_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_UNSIGNED_INT_24_8_NV 0x84FA
        public const int GL_UNSIGNED_INT_24_8_NV = 0x84FA;
        #endregion GL_UNSIGNED_INT_24_8_NV
        #endregion GL_NV_packed_depth_stencil Constants
        #endregion GL_NV_packed_depth_stencil (226)

        #region GL_NV_register_combiners2 (227)
        #region GL_NV_register_combiners2 Constants
        #region GL_PER_STAGE_CONSTANTS_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PER_STAGE_CONSTANTS_NV 0x8535
        public const int GL_PER_STAGE_CONSTANTS_NV = 0x8535;
        #endregion GL_PER_STAGE_CONSTANTS_NV
        #endregion GL_NV_register_combiners2 Constants

        #region GL_NV_register_combiners2 Methods
        #region Overloads for GLvoid glCombinerStageParameterfvNV(GLenum stage, GLenum pname, const GLfloat* parameters)
        #region void glCombinerStageParameterfvNV([In] IntPtr extensionPointer, int stage, int pname, ref float parameters)
        // GLvoid glCombinerStageParameterfvNV(GLenum stage, GLenum pname, const GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg stage\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in][out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg stage\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in][out]float32)\r\nret")]
        #endif
        public static void glCombinerStageParameterfvNV([In] IntPtr extensionPointer, int stage, int pname, ref float parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glCombinerStageParameterfvNV([In] IntPtr extensionPointer, int stage, int pname, ref float parameters)

        #region void glCombinerStageParameterfvNV([In] IntPtr extensionPointer, int stage, int pname, float[] parameters)
        // GLvoid glCombinerStageParameterfvNV(GLenum stage, GLenum pname, const GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg stage\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg stage\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]float32[])\r\nret")]
        #endif
        public static void glCombinerStageParameterfvNV([In] IntPtr extensionPointer, int stage, int pname, float[] parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glCombinerStageParameterfvNV([In] IntPtr extensionPointer, int stage, int pname, float[] parameters)

        #region void glCombinerStageParameterfvNV([In] IntPtr extensionPointer, int stage, int pname, IntPtr parameters)
        // GLvoid glCombinerStageParameterfvNV(GLenum stage, GLenum pname, const GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg stage\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg stage\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]native int)\r\nret")]
        #endif
        public static void glCombinerStageParameterfvNV([In] IntPtr extensionPointer, int stage, int pname, IntPtr parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glCombinerStageParameterfvNV([In] IntPtr extensionPointer, int stage, int pname, IntPtr parameters)

        #region void glCombinerStageParameterfvNV([In] IntPtr extensionPointer, int stage, int pname, float* parameters)
        // GLvoid glCombinerStageParameterfvNV(GLenum stage, GLenum pname, const GLfloat* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg stage\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg stage\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]float32*)\r\nret")]
        #endif
        public static unsafe void glCombinerStageParameterfvNV([In] IntPtr extensionPointer, int stage, int pname, float* parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glCombinerStageParameterfvNV([In] IntPtr extensionPointer, int stage, int pname, float* parameters)
        #endregion Overloads for GLvoid glCombinerStageParameterfvNV(GLenum stage, GLenum pname, const GLfloat* parameters)

        #region Overloads for GLvoid glGetCombinerStageParameterfvNV(GLenum stage, GLenum pname, GLfloat* parameters)
        #region void glGetCombinerStageParameterfvNV([In] IntPtr extensionPointer, int stage, int pname, out float parameters)
        // GLvoid glGetCombinerStageParameterfvNV(GLenum stage, GLenum pname, GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg stage\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg stage\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]float32)\r\nret")]
        #endif
        public static void glGetCombinerStageParameterfvNV([In] IntPtr extensionPointer, int stage, int pname, out float parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetCombinerStageParameterfvNV([In] IntPtr extensionPointer, int stage, int pname, out float parameters)

        #region void glGetCombinerStageParameterfvNV([In] IntPtr extensionPointer, int stage, int pname, float[] parameters)
        // GLvoid glGetCombinerStageParameterfvNV(GLenum stage, GLenum pname, GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg stage\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg stage\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]float32[])\r\nret")]
        #endif
        public static void glGetCombinerStageParameterfvNV([In] IntPtr extensionPointer, int stage, int pname, float[] parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetCombinerStageParameterfvNV([In] IntPtr extensionPointer, int stage, int pname, float[] parameters)

        #region void glGetCombinerStageParameterfvNV([In] IntPtr extensionPointer, int stage, int pname, IntPtr parameters)
        // GLvoid glGetCombinerStageParameterfvNV(GLenum stage, GLenum pname, GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg stage\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg stage\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGetCombinerStageParameterfvNV([In] IntPtr extensionPointer, int stage, int pname, IntPtr parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetCombinerStageParameterfvNV([In] IntPtr extensionPointer, int stage, int pname, IntPtr parameters)

        #region void glGetCombinerStageParameterfvNV([In] IntPtr extensionPointer, int stage, int pname, float* parameters)
        // GLvoid glGetCombinerStageParameterfvNV(GLenum stage, GLenum pname, GLfloat* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg stage\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg stage\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]float32*)\r\nret")]
        #endif
        public static unsafe void glGetCombinerStageParameterfvNV([In] IntPtr extensionPointer, int stage, int pname, float* parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetCombinerStageParameterfvNV([In] IntPtr extensionPointer, int stage, int pname, float* parameters)
        #endregion Overloads for GLvoid glGetCombinerStageParameterfvNV(GLenum stage, GLenum pname, GLfloat* parameters)
        #endregion GL_NV_register_combiners2 Methods
        #endregion GL_NV_register_combiners2 (227)

        #region GL_NV_texture_compression_vtc (228)
        #region GL_NV_texture_compression_vtc Constants
        // GL_COMPRESSED_RGB_S3TC_DXT1_EXT is already defined in GL_EXT_texture_compression_s3tc (198)

        // GL_COMPRESSED_RGBA_S3TC_DXT1_EXT is already defined in GL_EXT_texture_compression_s3tc (198)

        // GL_COMPRESSED_RGBA_S3TC_DXT3_EXT is already defined in GL_EXT_texture_compression_s3tc (198)

        // GL_COMPRESSED_RGBA_S3TC_DXT5_EXT is already defined in GL_EXT_texture_compression_s3tc (198)
        #endregion GL_NV_texture_compression_vtc Constants
        #endregion GL_NV_texture_compression_vtc (228)

        #region GL_NV_texture_rectangle (229)
        #region GL_NV_texture_rectangle Constants
        #region GL_TEXTURE_RECTANGLE_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_RECTANGLE_NV 0x84F5
        public const int GL_TEXTURE_RECTANGLE_NV = 0x84F5;
        #endregion GL_TEXTURE_RECTANGLE_NV

        #region GL_TEXTURE_BINDING_RECTANGLE_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_BINDING_RECTANGLE_NV 0x84F6
        public const int GL_TEXTURE_BINDING_RECTANGLE_NV = 0x84F6;
        #endregion GL_TEXTURE_BINDING_RECTANGLE_NV

        #region GL_PROXY_TEXTURE_RECTANGLE_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PROXY_TEXTURE_RECTANGLE_NV 0x84F7
        public const int GL_PROXY_TEXTURE_RECTANGLE_NV = 0x84F7;
        #endregion GL_PROXY_TEXTURE_RECTANGLE_NV

        #region GL_MAX_RECTANGLE_TEXTURE_SIZE_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAX_RECTANGLE_TEXTURE_SIZE_NV 0x84F8
        public const int GL_MAX_RECTANGLE_TEXTURE_SIZE_NV = 0x84F8;
        #endregion GL_MAX_RECTANGLE_TEXTURE_SIZE_NV
        #endregion GL_NV_texture_rectangle Constants
        #endregion GL_NV_texture_rectangle (229)

        #region GL_NV_texture_shader (230)
        #region GL_NV_texture_shader Constants
        #region GL_TEXTURE_SHADER_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_SHADER_NV 0x86DE
        public const int GL_TEXTURE_SHADER_NV = 0x86DE;
        #endregion GL_TEXTURE_SHADER_NV

        #region GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV 0x86D9
        public const int GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV = 0x86D9;
        #endregion GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV

        #region GL_SHADER_OPERATION_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SHADER_OPERATION_NV 0x86DF
        public const int GL_SHADER_OPERATION_NV = 0x86DF;
        #endregion GL_SHADER_OPERATION_NV

        #region GL_CULL_MODES_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_CULL_MODES_NV 0x86E0
        public const int GL_CULL_MODES_NV = 0x86E0;
        #endregion GL_CULL_MODES_NV

        #region GL_OFFSET_TEXTURE_MATRIX_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OFFSET_TEXTURE_MATRIX_NV 0x86E1
        public const int GL_OFFSET_TEXTURE_MATRIX_NV = 0x86E1;
        #endregion GL_OFFSET_TEXTURE_MATRIX_NV

        #region GL_OFFSET_TEXTURE_SCALE_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OFFSET_TEXTURE_SCALE_NV 0x86E2
        public const int GL_OFFSET_TEXTURE_SCALE_NV = 0x86E2;
        #endregion GL_OFFSET_TEXTURE_SCALE_NV

        #region GL_OFFSET_TEXTURE_2D_SCALE_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OFFSET_TEXTURE_2D_SCALE_NV 0x86E2
        public const int GL_OFFSET_TEXTURE_2D_SCALE_NV = 0x86E2;
        #endregion GL_OFFSET_TEXTURE_2D_SCALE_NV

        #region GL_OFFSET_TEXTURE_BIAS_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OFFSET_TEXTURE_BIAS_NV 0x86E3
        public const int GL_OFFSET_TEXTURE_BIAS_NV = 0x86E3;
        #endregion GL_OFFSET_TEXTURE_BIAS_NV

        #region GL_OFFSET_TEXTURE_2D_BIAS_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OFFSET_TEXTURE_2D_BIAS_NV 0x86E3
        public const int GL_OFFSET_TEXTURE_2D_BIAS_NV = 0x86E3;
        #endregion GL_OFFSET_TEXTURE_2D_BIAS_NV

        #region GL_PREVIOUS_TEXTURE_INPUT_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PREVIOUS_TEXTURE_INPUT_NV 0x86E4
        public const int GL_PREVIOUS_TEXTURE_INPUT_NV = 0x86E4;
        #endregion GL_PREVIOUS_TEXTURE_INPUT_NV

        #region GL_CONST_EYE_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_CONST_EYE_NV 0x86E5
        public const int GL_CONST_EYE_NV = 0x86E5;
        #endregion GL_CONST_EYE_NV

        #region GL_SHADER_CONSISTENT_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SHADER_CONSISTENT_NV 0x86DD
        public const int GL_SHADER_CONSISTENT_NV = 0x86DD;
        #endregion GL_SHADER_CONSISTENT_NV

        #region GL_PASS_THROUGH_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PASS_THROUGH_NV 0x86E6
        public const int GL_PASS_THROUGH_NV = 0x86E6;
        #endregion GL_PASS_THROUGH_NV

        #region GL_CULL_FRAGMENT_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_CULL_FRAGMENT_NV 0x86E7
        public const int GL_CULL_FRAGMENT_NV = 0x86E7;
        #endregion GL_CULL_FRAGMENT_NV

        #region GL_OFFSET_TEXTURE_2D_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OFFSET_TEXTURE_2D_NV 0x86E8
        public const int GL_OFFSET_TEXTURE_2D_NV = 0x86E8;
        #endregion GL_OFFSET_TEXTURE_2D_NV

        #region GL_OFFSET_TEXTURE_RECTANGLE_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OFFSET_TEXTURE_RECTANGLE_NV 0x864C
        public const int GL_OFFSET_TEXTURE_RECTANGLE_NV = 0x864C;
        #endregion GL_OFFSET_TEXTURE_RECTANGLE_NV

        #region GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV 0x864D
        public const int GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV = 0x864D;
        #endregion GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV

        #region GL_DEPENDENT_AR_TEXTURE_2D_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DEPENDENT_AR_TEXTURE_2D_NV 0x86E9
        public const int GL_DEPENDENT_AR_TEXTURE_2D_NV = 0x86E9;
        #endregion GL_DEPENDENT_AR_TEXTURE_2D_NV

        #region GL_DEPENDENT_GB_TEXTURE_2D_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DEPENDENT_GB_TEXTURE_2D_NV 0x86EA
        public const int GL_DEPENDENT_GB_TEXTURE_2D_NV = 0x86EA;
        #endregion GL_DEPENDENT_GB_TEXTURE_2D_NV

        #region GL_DOT_PRODUCT_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DOT_PRODUCT_NV 0x86EC
        public const int GL_DOT_PRODUCT_NV = 0x86EC;
        #endregion GL_DOT_PRODUCT_NV

        #region GL_DOT_PRODUCT_DEPTH_REPLACE_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DOT_PRODUCT_DEPTH_REPLACE_NV 0x86ED
        public const int GL_DOT_PRODUCT_DEPTH_REPLACE_NV = 0x86ED;
        #endregion GL_DOT_PRODUCT_DEPTH_REPLACE_NV

        #region GL_DOT_PRODUCT_TEXTURE_2D_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DOT_PRODUCT_TEXTURE_2D_NV 0x86EE
        public const int GL_DOT_PRODUCT_TEXTURE_2D_NV = 0x86EE;
        #endregion GL_DOT_PRODUCT_TEXTURE_2D_NV

        #region GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV 0x864E
        public const int GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV = 0x864E;
        #endregion GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV

        #region GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV 0x86F0
        public const int GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV = 0x86F0;
        #endregion GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV

        #region GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV 0x86F1
        public const int GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV = 0x86F1;
        #endregion GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV

        #region GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV 0x86F2
        public const int GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV = 0x86F2;
        #endregion GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV

        #region GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV 0x86F3
        public const int GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV = 0x86F3;
        #endregion GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV

        #region GL_HILO_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_HILO_NV 0x86F4
        public const int GL_HILO_NV = 0x86F4;
        #endregion GL_HILO_NV

        #region GL_DSDT_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DSDT_NV 0x86F5
        public const int GL_DSDT_NV = 0x86F5;
        #endregion GL_DSDT_NV

        #region GL_DSDT_MAG_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DSDT_MAG_NV 0x86F6
        public const int GL_DSDT_MAG_NV = 0x86F6;
        #endregion GL_DSDT_MAG_NV

        #region GL_DSDT_MAG_VIB_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DSDT_MAG_VIB_NV 0x86F7
        public const int GL_DSDT_MAG_VIB_NV = 0x86F7;
        #endregion GL_DSDT_MAG_VIB_NV

        #region GL_UNSIGNED_INT_S8_S8_8_8_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_UNSIGNED_INT_S8_S8_8_8_NV 0x86DA
        public const int GL_UNSIGNED_INT_S8_S8_8_8_NV = 0x86DA;
        #endregion GL_UNSIGNED_INT_S8_S8_8_8_NV

        #region GL_UNSIGNED_INT_8_8_S8_S8_REV_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_UNSIGNED_INT_8_8_S8_S8_REV_NV 0x86DB
        public const int GL_UNSIGNED_INT_8_8_S8_S8_REV_NV = 0x86DB;
        #endregion GL_UNSIGNED_INT_8_8_S8_S8_REV_NV

        #region GL_SIGNED_RGBA_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SIGNED_RGBA_NV 0x86FB
        public const int GL_SIGNED_RGBA_NV = 0x86FB;
        #endregion GL_SIGNED_RGBA_NV

        #region GL_SIGNED_RGBA8_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SIGNED_RGBA8_NV 0x86FC
        public const int GL_SIGNED_RGBA8_NV = 0x86FC;
        #endregion GL_SIGNED_RGBA8_NV

        #region GL_SIGNED_RGB_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SIGNED_RGB_NV 0x86FE
        public const int GL_SIGNED_RGB_NV = 0x86FE;
        #endregion GL_SIGNED_RGB_NV

        #region GL_SIGNED_RGB8_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SIGNED_RGB8_NV 0x86FF
        public const int GL_SIGNED_RGB8_NV = 0x86FF;
        #endregion GL_SIGNED_RGB8_NV

        #region GL_SIGNED_LUMINANCE_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SIGNED_LUMINANCE_NV 0x8701
        public const int GL_SIGNED_LUMINANCE_NV = 0x8701;
        #endregion GL_SIGNED_LUMINANCE_NV

        #region GL_SIGNED_LUMINANCE8_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SIGNED_LUMINANCE8_NV 0x8702
        public const int GL_SIGNED_LUMINANCE8_NV = 0x8702;
        #endregion GL_SIGNED_LUMINANCE8_NV

        #region GL_SIGNED_LUMINANCE_ALPHA_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SIGNED_LUMINANCE_ALPHA_NV 0x8703
        public const int GL_SIGNED_LUMINANCE_ALPHA_NV = 0x8703;
        #endregion GL_SIGNED_LUMINANCE_ALPHA_NV

        #region GL_SIGNED_LUMINANCE8_ALPHA8_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SIGNED_LUMINANCE8_ALPHA8_NV 0x8704
        public const int GL_SIGNED_LUMINANCE8_ALPHA8_NV = 0x8704;
        #endregion GL_SIGNED_LUMINANCE8_ALPHA8_NV

        #region GL_SIGNED_ALPHA_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SIGNED_ALPHA_NV 0x8705
        public const int GL_SIGNED_ALPHA_NV = 0x8705;
        #endregion GL_SIGNED_ALPHA_NV

        #region GL_SIGNED_ALPHA8_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SIGNED_ALPHA8_NV 0x8706
        public const int GL_SIGNED_ALPHA8_NV = 0x8706;
        #endregion GL_SIGNED_ALPHA8_NV

        #region GL_SIGNED_INTENSITY_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SIGNED_INTENSITY_NV 0x8707
        public const int GL_SIGNED_INTENSITY_NV = 0x8707;
        #endregion GL_SIGNED_INTENSITY_NV

        #region GL_SIGNED_INTENSITY8_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SIGNED_INTENSITY8_NV 0x8708
        public const int GL_SIGNED_INTENSITY8_NV = 0x8708;
        #endregion GL_SIGNED_INTENSITY8_NV

        #region GL_SIGNED_RGB_UNSIGNED_ALPHA_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SIGNED_RGB_UNSIGNED_ALPHA_NV 0x870C
        public const int GL_SIGNED_RGB_UNSIGNED_ALPHA_NV = 0x870C;
        #endregion GL_SIGNED_RGB_UNSIGNED_ALPHA_NV

        #region GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV 0x870D
        public const int GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV = 0x870D;
        #endregion GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV

        #region GL_HILO16_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_HILO16_NV 0x86F8
        public const int GL_HILO16_NV = 0x86F8;
        #endregion GL_HILO16_NV

        #region GL_SIGNED_HILO_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SIGNED_HILO_NV 0x86F9
        public const int GL_SIGNED_HILO_NV = 0x86F9;
        #endregion GL_SIGNED_HILO_NV

        #region GL_SIGNED_HILO16_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SIGNED_HILO16_NV 0x86FA
        public const int GL_SIGNED_HILO16_NV = 0x86FA;
        #endregion GL_SIGNED_HILO16_NV

        #region GL_DSDT8_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DSDT8_NV 0x8709
        public const int GL_DSDT8_NV = 0x8709;
        #endregion GL_DSDT8_NV

        #region GL_DSDT8_MAG8_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DSDT8_MAG8_NV 0x870A
        public const int GL_DSDT8_MAG8_NV = 0x870A;
        #endregion GL_DSDT8_MAG8_NV

        #region GL_DSDT_MAG_INTENSITY_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DSDT_MAG_INTENSITY_NV 0x86DC
        public const int GL_DSDT_MAG_INTENSITY_NV = 0x86DC;
        #endregion GL_DSDT_MAG_INTENSITY_NV

        #region GL_DSDT8_MAG8_INTENSITY8_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DSDT8_MAG8_INTENSITY8_NV 0x870B
        public const int GL_DSDT8_MAG8_INTENSITY8_NV = 0x870B;
        #endregion GL_DSDT8_MAG8_INTENSITY8_NV

        #region GL_HI_SCALE_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_HI_SCALE_NV 0x870E
        public const int GL_HI_SCALE_NV = 0x870E;
        #endregion GL_HI_SCALE_NV

        #region GL_LO_SCALE_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_LO_SCALE_NV 0x870F
        public const int GL_LO_SCALE_NV = 0x870F;
        #endregion GL_LO_SCALE_NV

        #region GL_DS_SCALE_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DS_SCALE_NV 0x8710
        public const int GL_DS_SCALE_NV = 0x8710;
        #endregion GL_DS_SCALE_NV

        #region GL_DT_SCALE_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DT_SCALE_NV 0x8711
        public const int GL_DT_SCALE_NV = 0x8711;
        #endregion GL_DT_SCALE_NV

        #region GL_MAGNITUDE_SCALE_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAGNITUDE_SCALE_NV 0x8712
        public const int GL_MAGNITUDE_SCALE_NV = 0x8712;
        #endregion GL_MAGNITUDE_SCALE_NV

        #region GL_VIBRANCE_SCALE_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VIBRANCE_SCALE_NV 0x8713
        public const int GL_VIBRANCE_SCALE_NV = 0x8713;
        #endregion GL_VIBRANCE_SCALE_NV

        #region GL_HI_BIAS_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_HI_BIAS_NV 0x8714
        public const int GL_HI_BIAS_NV = 0x8714;
        #endregion GL_HI_BIAS_NV

        #region GL_LO_BIAS_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_LO_BIAS_NV 0x8715
        public const int GL_LO_BIAS_NV = 0x8715;
        #endregion GL_LO_BIAS_NV

        #region GL_DS_BIAS_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DS_BIAS_NV 0x8716
        public const int GL_DS_BIAS_NV = 0x8716;
        #endregion GL_DS_BIAS_NV

        #region GL_DT_BIAS_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DT_BIAS_NV 0x8717
        public const int GL_DT_BIAS_NV = 0x8717;
        #endregion GL_DT_BIAS_NV

        #region GL_MAGNITUDE_BIAS_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAGNITUDE_BIAS_NV 0x8718
        public const int GL_MAGNITUDE_BIAS_NV = 0x8718;
        #endregion GL_MAGNITUDE_BIAS_NV

        #region GL_VIBRANCE_BIAS_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VIBRANCE_BIAS_NV 0x8719
        public const int GL_VIBRANCE_BIAS_NV = 0x8719;
        #endregion GL_VIBRANCE_BIAS_NV

        #region GL_TEXTURE_BORDER_VALUES_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_BORDER_VALUES_NV 0x871A
        public const int GL_TEXTURE_BORDER_VALUES_NV = 0x871A;
        #endregion GL_TEXTURE_BORDER_VALUES_NV

        #region GL_TEXTURE_HI_SIZE_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_HI_SIZE_NV 0x871B
        public const int GL_TEXTURE_HI_SIZE_NV = 0x871B;
        #endregion GL_TEXTURE_HI_SIZE_NV

        #region GL_TEXTURE_LO_SIZE_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_LO_SIZE_NV 0x871C
        public const int GL_TEXTURE_LO_SIZE_NV = 0x871C;
        #endregion GL_TEXTURE_LO_SIZE_NV

        #region GL_TEXTURE_DS_SIZE_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_DS_SIZE_NV 0x871D
        public const int GL_TEXTURE_DS_SIZE_NV = 0x871D;
        #endregion GL_TEXTURE_DS_SIZE_NV

        #region GL_TEXTURE_DT_SIZE_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_DT_SIZE_NV 0x871E
        public const int GL_TEXTURE_DT_SIZE_NV = 0x871E;
        #endregion GL_TEXTURE_DT_SIZE_NV

        #region GL_TEXTURE_MAG_SIZE_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_MAG_SIZE_NV 0x871F
        public const int GL_TEXTURE_MAG_SIZE_NV = 0x871F;
        #endregion GL_TEXTURE_MAG_SIZE_NV
        #endregion GL_NV_texture_shader Constants
        #endregion GL_NV_texture_shader (230)

        #region GL_NV_texture_shader2 (231)
        #region GL_NV_texture_shader2 Constants
        #region GL_DOT_PRODUCT_TEXTURE_3D_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DOT_PRODUCT_TEXTURE_3D_NV 0x86EF
        public const int GL_DOT_PRODUCT_TEXTURE_3D_NV = 0x86EF;
        #endregion GL_DOT_PRODUCT_TEXTURE_3D_NV

        // GL_HILO_NV is already defined in GL_NV_texture_shader (230)

        // GL_DSDT_NV is already defined in GL_NV_texture_shader (230)

        // GL_DSDT_MAG_NV is already defined in GL_NV_texture_shader (230)

        // GL_DSDT_MAG_VIB_NV is already defined in GL_NV_texture_shader (230)

        // GL_UNSIGNED_INT_S8_S8_8_8_NV is already defined in GL_NV_texture_shader (230)

        // GL_UNSIGNED_INT_8_8_S8_S8_REV_NV is already defined in GL_NV_texture_shader (230)

        // GL_SIGNED_RGBA_NV is already defined in GL_NV_texture_shader (230)

        // GL_SIGNED_RGBA8_NV is already defined in GL_NV_texture_shader (230)

        // GL_SIGNED_RGB_NV is already defined in GL_NV_texture_shader (230)

        // GL_SIGNED_RGB8_NV is already defined in GL_NV_texture_shader (230)

        // GL_SIGNED_LUMINANCE_NV is already defined in GL_NV_texture_shader (230)

        // GL_SIGNED_LUMINANCE8_NV is already defined in GL_NV_texture_shader (230)

        // GL_SIGNED_LUMINANCE_ALPHA_NV is already defined in GL_NV_texture_shader (230)

        // GL_SIGNED_LUMINANCE8_ALPHA8_NV is already defined in GL_NV_texture_shader (230)

        // GL_SIGNED_ALPHA_NV is already defined in GL_NV_texture_shader (230)

        // GL_SIGNED_ALPHA8_NV is already defined in GL_NV_texture_shader (230)

        // GL_SIGNED_INTENSITY_NV is already defined in GL_NV_texture_shader (230)

        // GL_SIGNED_INTENSITY8_NV is already defined in GL_NV_texture_shader (230)

        // GL_SIGNED_RGB_UNSIGNED_ALPHA_NV is already defined in GL_NV_texture_shader (230)

        // GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV is already defined in GL_NV_texture_shader (230)

        // GL_HILO16_NV is already defined in GL_NV_texture_shader (230)

        // GL_SIGNED_HILO_NV is already defined in GL_NV_texture_shader (230)

        // GL_SIGNED_HILO16_NV is already defined in GL_NV_texture_shader (230)

        // GL_DSDT8_NV is already defined in GL_NV_texture_shader (230)

        // GL_DSDT8_MAG8_NV is already defined in GL_NV_texture_shader (230)

        // GL_DSDT_MAG_INTENSITY_NV is already defined in GL_NV_texture_shader (230)

        // GL_DSDT8_MAG8_INTENSITY8_NV is already defined in GL_NV_texture_shader (230)
        #endregion GL_NV_texture_shader2 Constants
        #endregion GL_NV_texture_shader2 (231)

        #region GL_NV_vertex_array_range2 (232)
        #region GL_NV_vertex_array_range2 Constants
        #region GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV 0x8533
        public const int GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV = 0x8533;
        #endregion GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV
        #endregion GL_NV_vertex_array_range2 Constants
        #endregion GL_NV_vertex_array_range2 (232)

        #region GL_NV_vertex_program (233)
        #region GL_NV_vertex_program Constants
        #region GL_VERTEX_PROGRAM_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VERTEX_PROGRAM_NV 0x8620
        public const int GL_VERTEX_PROGRAM_NV = 0x8620;
        #endregion GL_VERTEX_PROGRAM_NV

        #region GL_VERTEX_PROGRAM_POINT_SIZE_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VERTEX_PROGRAM_POINT_SIZE_NV 0x8642
        public const int GL_VERTEX_PROGRAM_POINT_SIZE_NV = 0x8642;
        #endregion GL_VERTEX_PROGRAM_POINT_SIZE_NV

        #region GL_VERTEX_PROGRAM_TWO_SIDE_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VERTEX_PROGRAM_TWO_SIDE_NV 0x8643
        public const int GL_VERTEX_PROGRAM_TWO_SIDE_NV = 0x8643;
        #endregion GL_VERTEX_PROGRAM_TWO_SIDE_NV

        #region GL_VERTEX_STATE_PROGRAM_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VERTEX_STATE_PROGRAM_NV 0x8621
        public const int GL_VERTEX_STATE_PROGRAM_NV = 0x8621;
        #endregion GL_VERTEX_STATE_PROGRAM_NV

        #region GL_ATTRIB_ARRAY_SIZE_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_ATTRIB_ARRAY_SIZE_NV 0x8623
        public const int GL_ATTRIB_ARRAY_SIZE_NV = 0x8623;
        #endregion GL_ATTRIB_ARRAY_SIZE_NV

        #region GL_ATTRIB_ARRAY_STRIDE_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_ATTRIB_ARRAY_STRIDE_NV 0x8624
        public const int GL_ATTRIB_ARRAY_STRIDE_NV = 0x8624;
        #endregion GL_ATTRIB_ARRAY_STRIDE_NV

        #region GL_ATTRIB_ARRAY_TYPE_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_ATTRIB_ARRAY_TYPE_NV 0x8625
        public const int GL_ATTRIB_ARRAY_TYPE_NV = 0x8625;
        #endregion GL_ATTRIB_ARRAY_TYPE_NV

        #region GL_CURRENT_ATTRIB_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_CURRENT_ATTRIB_NV 0x8626
        public const int GL_CURRENT_ATTRIB_NV = 0x8626;
        #endregion GL_CURRENT_ATTRIB_NV

        #region GL_PROGRAM_PARAMETER_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PROGRAM_PARAMETER_NV 0x8644
        public const int GL_PROGRAM_PARAMETER_NV = 0x8644;
        #endregion GL_PROGRAM_PARAMETER_NV

        #region GL_ATTRIB_ARRAY_POINTER_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_ATTRIB_ARRAY_POINTER_NV 0x8645
        public const int GL_ATTRIB_ARRAY_POINTER_NV = 0x8645;
        #endregion GL_ATTRIB_ARRAY_POINTER_NV

        #region GL_PROGRAM_TARGET_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PROGRAM_TARGET_NV 0x8646
        public const int GL_PROGRAM_TARGET_NV = 0x8646;
        #endregion GL_PROGRAM_TARGET_NV

        #region GL_PROGRAM_LENGTH_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PROGRAM_LENGTH_NV 0x8627
        public const int GL_PROGRAM_LENGTH_NV = 0x8627;
        #endregion GL_PROGRAM_LENGTH_NV

        #region GL_PROGRAM_RESIDENT_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PROGRAM_RESIDENT_NV 0x8647
        public const int GL_PROGRAM_RESIDENT_NV = 0x8647;
        #endregion GL_PROGRAM_RESIDENT_NV

        #region GL_PROGRAM_STRING_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PROGRAM_STRING_NV 0x8628
        public const int GL_PROGRAM_STRING_NV = 0x8628;
        #endregion GL_PROGRAM_STRING_NV

        #region GL_TRACK_MATRIX_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TRACK_MATRIX_NV 0x8648
        public const int GL_TRACK_MATRIX_NV = 0x8648;
        #endregion GL_TRACK_MATRIX_NV

        #region GL_TRACK_MATRIX_TRANSFORM_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TRACK_MATRIX_TRANSFORM_NV 0x8649
        public const int GL_TRACK_MATRIX_TRANSFORM_NV = 0x8649;
        #endregion GL_TRACK_MATRIX_TRANSFORM_NV

        #region GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV 0x862E
        public const int GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV = 0x862E;
        #endregion GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV

        #region GL_MAX_TRACK_MATRICES_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAX_TRACK_MATRICES_NV 0x862F
        public const int GL_MAX_TRACK_MATRICES_NV = 0x862F;
        #endregion GL_MAX_TRACK_MATRICES_NV

        #region GL_CURRENT_MATRIX_STACK_DEPTH_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_CURRENT_MATRIX_STACK_DEPTH_NV 0x8640
        public const int GL_CURRENT_MATRIX_STACK_DEPTH_NV = 0x8640;
        #endregion GL_CURRENT_MATRIX_STACK_DEPTH_NV

        #region GL_CURRENT_MATRIX_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_CURRENT_MATRIX_NV 0x8641
        public const int GL_CURRENT_MATRIX_NV = 0x8641;
        #endregion GL_CURRENT_MATRIX_NV

        #region GL_VERTEX_PROGRAM_BINDING_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VERTEX_PROGRAM_BINDING_NV 0x864A
        public const int GL_VERTEX_PROGRAM_BINDING_NV = 0x864A;
        #endregion GL_VERTEX_PROGRAM_BINDING_NV

        #region GL_PROGRAM_ERROR_POSITION_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PROGRAM_ERROR_POSITION_NV 0x864B
        public const int GL_PROGRAM_ERROR_POSITION_NV = 0x864B;
        #endregion GL_PROGRAM_ERROR_POSITION_NV

        #region GL_MODELVIEW_PROJECTION_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MODELVIEW_PROJECTION_NV 0x8629
        public const int GL_MODELVIEW_PROJECTION_NV = 0x8629;
        #endregion GL_MODELVIEW_PROJECTION_NV

        #region GL_MATRIX0_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MATRIX0_NV 0x8630
        public const int GL_MATRIX0_NV = 0x8630;
        #endregion GL_MATRIX0_NV

        #region GL_MATRIX1_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MATRIX1_NV 0x8631
        public const int GL_MATRIX1_NV = 0x8631;
        #endregion GL_MATRIX1_NV

        #region GL_MATRIX2_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MATRIX2_NV 0x8632
        public const int GL_MATRIX2_NV = 0x8632;
        #endregion GL_MATRIX2_NV

        #region GL_MATRIX3_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MATRIX3_NV 0x8633
        public const int GL_MATRIX3_NV = 0x8633;
        #endregion GL_MATRIX3_NV

        #region GL_MATRIX4_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MATRIX4_NV 0x8634
        public const int GL_MATRIX4_NV = 0x8634;
        #endregion GL_MATRIX4_NV

        #region GL_MATRIX5_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MATRIX5_NV 0x8635
        public const int GL_MATRIX5_NV = 0x8635;
        #endregion GL_MATRIX5_NV

        #region GL_MATRIX6_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MATRIX6_NV 0x8636
        public const int GL_MATRIX6_NV = 0x8636;
        #endregion GL_MATRIX6_NV

        #region GL_MATRIX7_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MATRIX7_NV 0x8637
        public const int GL_MATRIX7_NV = 0x8637;
        #endregion GL_MATRIX7_NV

        #region GL_IDENTITY_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_IDENTITY_NV 0x862A
        public const int GL_IDENTITY_NV = 0x862A;
        #endregion GL_IDENTITY_NV

        #region GL_INVERSE_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_INVERSE_NV 0x862B
        public const int GL_INVERSE_NV = 0x862B;
        #endregion GL_INVERSE_NV

        #region GL_TRANSPOSE_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TRANSPOSE_NV 0x862C
        public const int GL_TRANSPOSE_NV = 0x862C;
        #endregion GL_TRANSPOSE_NV

        #region GL_INVERSE_TRANSPOSE_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_INVERSE_TRANSPOSE_NV 0x862D
        public const int GL_INVERSE_TRANSPOSE_NV = 0x862D;
        #endregion GL_INVERSE_TRANSPOSE_NV

        #region GL_VERTEX_ATTRIB_ARRAY0_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VERTEX_ATTRIB_ARRAY0_NV 0x8650
        public const int GL_VERTEX_ATTRIB_ARRAY0_NV = 0x8650;
        #endregion GL_VERTEX_ATTRIB_ARRAY0_NV

        #region GL_VERTEX_ATTRIB_ARRAY1_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VERTEX_ATTRIB_ARRAY1_NV 0x8651
        public const int GL_VERTEX_ATTRIB_ARRAY1_NV = 0x8651;
        #endregion GL_VERTEX_ATTRIB_ARRAY1_NV

        #region GL_VERTEX_ATTRIB_ARRAY2_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VERTEX_ATTRIB_ARRAY2_NV 0x8652
        public const int GL_VERTEX_ATTRIB_ARRAY2_NV = 0x8652;
        #endregion GL_VERTEX_ATTRIB_ARRAY2_NV

        #region GL_VERTEX_ATTRIB_ARRAY3_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VERTEX_ATTRIB_ARRAY3_NV 0x8653
        public const int GL_VERTEX_ATTRIB_ARRAY3_NV = 0x8653;
        #endregion GL_VERTEX_ATTRIB_ARRAY3_NV

        #region GL_VERTEX_ATTRIB_ARRAY4_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VERTEX_ATTRIB_ARRAY4_NV 0x8654
        public const int GL_VERTEX_ATTRIB_ARRAY4_NV = 0x8654;
        #endregion GL_VERTEX_ATTRIB_ARRAY4_NV

        #region GL_VERTEX_ATTRIB_ARRAY5_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VERTEX_ATTRIB_ARRAY5_NV 0x8655
        public const int GL_VERTEX_ATTRIB_ARRAY5_NV = 0x8655;
        #endregion GL_VERTEX_ATTRIB_ARRAY5_NV

        #region GL_VERTEX_ATTRIB_ARRAY6_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VERTEX_ATTRIB_ARRAY6_NV 0x8656
        public const int GL_VERTEX_ATTRIB_ARRAY6_NV = 0x8656;
        #endregion GL_VERTEX_ATTRIB_ARRAY6_NV

        #region GL_VERTEX_ATTRIB_ARRAY7_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VERTEX_ATTRIB_ARRAY7_NV 0x8657
        public const int GL_VERTEX_ATTRIB_ARRAY7_NV = 0x8657;
        #endregion GL_VERTEX_ATTRIB_ARRAY7_NV

        #region GL_VERTEX_ATTRIB_ARRAY8_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VERTEX_ATTRIB_ARRAY8_NV 0x8658
        public const int GL_VERTEX_ATTRIB_ARRAY8_NV = 0x8658;
        #endregion GL_VERTEX_ATTRIB_ARRAY8_NV

        #region GL_VERTEX_ATTRIB_ARRAY9_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VERTEX_ATTRIB_ARRAY9_NV 0x8659
        public const int GL_VERTEX_ATTRIB_ARRAY9_NV = 0x8659;
        #endregion GL_VERTEX_ATTRIB_ARRAY9_NV

        #region GL_VERTEX_ATTRIB_ARRAY10_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VERTEX_ATTRIB_ARRAY10_NV 0x865A
        public const int GL_VERTEX_ATTRIB_ARRAY10_NV = 0x865A;
        #endregion GL_VERTEX_ATTRIB_ARRAY10_NV

        #region GL_VERTEX_ATTRIB_ARRAY11_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VERTEX_ATTRIB_ARRAY11_NV 0x865B
        public const int GL_VERTEX_ATTRIB_ARRAY11_NV = 0x865B;
        #endregion GL_VERTEX_ATTRIB_ARRAY11_NV

        #region GL_VERTEX_ATTRIB_ARRAY12_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VERTEX_ATTRIB_ARRAY12_NV 0x865C
        public const int GL_VERTEX_ATTRIB_ARRAY12_NV = 0x865C;
        #endregion GL_VERTEX_ATTRIB_ARRAY12_NV

        #region GL_VERTEX_ATTRIB_ARRAY13_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VERTEX_ATTRIB_ARRAY13_NV 0x865D
        public const int GL_VERTEX_ATTRIB_ARRAY13_NV = 0x865D;
        #endregion GL_VERTEX_ATTRIB_ARRAY13_NV

        #region GL_VERTEX_ATTRIB_ARRAY14_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VERTEX_ATTRIB_ARRAY14_NV 0x865E
        public const int GL_VERTEX_ATTRIB_ARRAY14_NV = 0x865E;
        #endregion GL_VERTEX_ATTRIB_ARRAY14_NV

        #region GL_VERTEX_ATTRIB_ARRAY15_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VERTEX_ATTRIB_ARRAY15_NV 0x865F
        public const int GL_VERTEX_ATTRIB_ARRAY15_NV = 0x865F;
        #endregion GL_VERTEX_ATTRIB_ARRAY15_NV

        #region GL_MAP1_VERTEX_ATTRIB0_4_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAP1_VERTEX_ATTRIB0_4_NV 0x8660
        public const int GL_MAP1_VERTEX_ATTRIB0_4_NV = 0x8660;
        #endregion GL_MAP1_VERTEX_ATTRIB0_4_NV

        #region GL_MAP1_VERTEX_ATTRIB1_4_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAP1_VERTEX_ATTRIB1_4_NV 0x8661
        public const int GL_MAP1_VERTEX_ATTRIB1_4_NV = 0x8661;
        #endregion GL_MAP1_VERTEX_ATTRIB1_4_NV

        #region GL_MAP1_VERTEX_ATTRIB2_4_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAP1_VERTEX_ATTRIB2_4_NV 0x8662
        public const int GL_MAP1_VERTEX_ATTRIB2_4_NV = 0x8662;
        #endregion GL_MAP1_VERTEX_ATTRIB2_4_NV

        #region GL_MAP1_VERTEX_ATTRIB3_4_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAP1_VERTEX_ATTRIB3_4_NV 0x8663
        public const int GL_MAP1_VERTEX_ATTRIB3_4_NV = 0x8663;
        #endregion GL_MAP1_VERTEX_ATTRIB3_4_NV

        #region GL_MAP1_VERTEX_ATTRIB4_4_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAP1_VERTEX_ATTRIB4_4_NV 0x8664
        public const int GL_MAP1_VERTEX_ATTRIB4_4_NV = 0x8664;
        #endregion GL_MAP1_VERTEX_ATTRIB4_4_NV

        #region GL_MAP1_VERTEX_ATTRIB5_4_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAP1_VERTEX_ATTRIB5_4_NV 0x8665
        public const int GL_MAP1_VERTEX_ATTRIB5_4_NV = 0x8665;
        #endregion GL_MAP1_VERTEX_ATTRIB5_4_NV

        #region GL_MAP1_VERTEX_ATTRIB6_4_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAP1_VERTEX_ATTRIB6_4_NV 0x8666
        public const int GL_MAP1_VERTEX_ATTRIB6_4_NV = 0x8666;
        #endregion GL_MAP1_VERTEX_ATTRIB6_4_NV

        #region GL_MAP1_VERTEX_ATTRIB7_4_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAP1_VERTEX_ATTRIB7_4_NV 0x8667
        public const int GL_MAP1_VERTEX_ATTRIB7_4_NV = 0x8667;
        #endregion GL_MAP1_VERTEX_ATTRIB7_4_NV

        #region GL_MAP1_VERTEX_ATTRIB8_4_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAP1_VERTEX_ATTRIB8_4_NV 0x8668
        public const int GL_MAP1_VERTEX_ATTRIB8_4_NV = 0x8668;
        #endregion GL_MAP1_VERTEX_ATTRIB8_4_NV

        #region GL_MAP1_VERTEX_ATTRIB9_4_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAP1_VERTEX_ATTRIB9_4_NV 0x8669
        public const int GL_MAP1_VERTEX_ATTRIB9_4_NV = 0x8669;
        #endregion GL_MAP1_VERTEX_ATTRIB9_4_NV

        #region GL_MAP1_VERTEX_ATTRIB10_4_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAP1_VERTEX_ATTRIB10_4_NV 0x866A
        public const int GL_MAP1_VERTEX_ATTRIB10_4_NV = 0x866A;
        #endregion GL_MAP1_VERTEX_ATTRIB10_4_NV

        #region GL_MAP1_VERTEX_ATTRIB11_4_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAP1_VERTEX_ATTRIB11_4_NV 0x866B
        public const int GL_MAP1_VERTEX_ATTRIB11_4_NV = 0x866B;
        #endregion GL_MAP1_VERTEX_ATTRIB11_4_NV

        #region GL_MAP1_VERTEX_ATTRIB12_4_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAP1_VERTEX_ATTRIB12_4_NV 0x866C
        public const int GL_MAP1_VERTEX_ATTRIB12_4_NV = 0x866C;
        #endregion GL_MAP1_VERTEX_ATTRIB12_4_NV

        #region GL_MAP1_VERTEX_ATTRIB13_4_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAP1_VERTEX_ATTRIB13_4_NV 0x866D
        public const int GL_MAP1_VERTEX_ATTRIB13_4_NV = 0x866D;
        #endregion GL_MAP1_VERTEX_ATTRIB13_4_NV

        #region GL_MAP1_VERTEX_ATTRIB14_4_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAP1_VERTEX_ATTRIB14_4_NV 0x866E
        public const int GL_MAP1_VERTEX_ATTRIB14_4_NV = 0x866E;
        #endregion GL_MAP1_VERTEX_ATTRIB14_4_NV

        #region GL_MAP1_VERTEX_ATTRIB15_4_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAP1_VERTEX_ATTRIB15_4_NV 0x866F
        public const int GL_MAP1_VERTEX_ATTRIB15_4_NV = 0x866F;
        #endregion GL_MAP1_VERTEX_ATTRIB15_4_NV

        #region GL_MAP2_VERTEX_ATTRIB0_4_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAP2_VERTEX_ATTRIB0_4_NV 0x8670
        public const int GL_MAP2_VERTEX_ATTRIB0_4_NV = 0x8670;
        #endregion GL_MAP2_VERTEX_ATTRIB0_4_NV

        #region GL_MAP2_VERTEX_ATTRIB1_4_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAP2_VERTEX_ATTRIB1_4_NV 0x8671
        public const int GL_MAP2_VERTEX_ATTRIB1_4_NV = 0x8671;
        #endregion GL_MAP2_VERTEX_ATTRIB1_4_NV

        #region GL_MAP2_VERTEX_ATTRIB2_4_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAP2_VERTEX_ATTRIB2_4_NV 0x8672
        public const int GL_MAP2_VERTEX_ATTRIB2_4_NV = 0x8672;
        #endregion GL_MAP2_VERTEX_ATTRIB2_4_NV

        #region GL_MAP2_VERTEX_ATTRIB3_4_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAP2_VERTEX_ATTRIB3_4_NV 0x8673
        public const int GL_MAP2_VERTEX_ATTRIB3_4_NV = 0x8673;
        #endregion GL_MAP2_VERTEX_ATTRIB3_4_NV

        #region GL_MAP2_VERTEX_ATTRIB4_4_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAP2_VERTEX_ATTRIB4_4_NV 0x8674
        public const int GL_MAP2_VERTEX_ATTRIB4_4_NV = 0x8674;
        #endregion GL_MAP2_VERTEX_ATTRIB4_4_NV

        #region GL_MAP2_VERTEX_ATTRIB5_4_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAP2_VERTEX_ATTRIB5_4_NV 0x8675
        public const int GL_MAP2_VERTEX_ATTRIB5_4_NV = 0x8675;
        #endregion GL_MAP2_VERTEX_ATTRIB5_4_NV

        #region GL_MAP2_VERTEX_ATTRIB6_4_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAP2_VERTEX_ATTRIB6_4_NV 0x8676
        public const int GL_MAP2_VERTEX_ATTRIB6_4_NV = 0x8676;
        #endregion GL_MAP2_VERTEX_ATTRIB6_4_NV

        #region GL_MAP2_VERTEX_ATTRIB7_4_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAP2_VERTEX_ATTRIB7_4_NV 0x8677
        public const int GL_MAP2_VERTEX_ATTRIB7_4_NV = 0x8677;
        #endregion GL_MAP2_VERTEX_ATTRIB7_4_NV

        #region GL_MAP2_VERTEX_ATTRIB8_4_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAP2_VERTEX_ATTRIB8_4_NV 0x8678
        public const int GL_MAP2_VERTEX_ATTRIB8_4_NV = 0x8678;
        #endregion GL_MAP2_VERTEX_ATTRIB8_4_NV

        #region GL_MAP2_VERTEX_ATTRIB9_4_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAP2_VERTEX_ATTRIB9_4_NV 0x8679
        public const int GL_MAP2_VERTEX_ATTRIB9_4_NV = 0x8679;
        #endregion GL_MAP2_VERTEX_ATTRIB9_4_NV

        #region GL_MAP2_VERTEX_ATTRIB10_4_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAP2_VERTEX_ATTRIB10_4_NV 0x867A
        public const int GL_MAP2_VERTEX_ATTRIB10_4_NV = 0x867A;
        #endregion GL_MAP2_VERTEX_ATTRIB10_4_NV

        #region GL_MAP2_VERTEX_ATTRIB11_4_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAP2_VERTEX_ATTRIB11_4_NV 0x867B
        public const int GL_MAP2_VERTEX_ATTRIB11_4_NV = 0x867B;
        #endregion GL_MAP2_VERTEX_ATTRIB11_4_NV

        #region GL_MAP2_VERTEX_ATTRIB12_4_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAP2_VERTEX_ATTRIB12_4_NV 0x867C
        public const int GL_MAP2_VERTEX_ATTRIB12_4_NV = 0x867C;
        #endregion GL_MAP2_VERTEX_ATTRIB12_4_NV

        #region GL_MAP2_VERTEX_ATTRIB13_4_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAP2_VERTEX_ATTRIB13_4_NV 0x867D
        public const int GL_MAP2_VERTEX_ATTRIB13_4_NV = 0x867D;
        #endregion GL_MAP2_VERTEX_ATTRIB13_4_NV

        #region GL_MAP2_VERTEX_ATTRIB14_4_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAP2_VERTEX_ATTRIB14_4_NV 0x867E
        public const int GL_MAP2_VERTEX_ATTRIB14_4_NV = 0x867E;
        #endregion GL_MAP2_VERTEX_ATTRIB14_4_NV

        #region GL_MAP2_VERTEX_ATTRIB15_4_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAP2_VERTEX_ATTRIB15_4_NV 0x867F
        public const int GL_MAP2_VERTEX_ATTRIB15_4_NV = 0x867F;
        #endregion GL_MAP2_VERTEX_ATTRIB15_4_NV
        #endregion GL_NV_vertex_program Constants

        #region GL_NV_vertex_program Methods
        #region void glBindProgramNV([In] IntPtr extensionPointer, int target, int id)
        // GLvoid glBindProgramNV(GLenum target, GLuint id)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg id\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg id\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32)\r\nret")]
        #endif
        public static void glBindProgramNV([In] IntPtr extensionPointer, int target, int id) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glBindProgramNV([In] IntPtr extensionPointer, int target, int id)

        #region Overloads for GLvoid glDeleteProgramsNV(GLsizei n, const GLuint* ids)
        #region void glDeleteProgramsNV([In] IntPtr extensionPointer, int n, ref int ids)
        // GLvoid glDeleteProgramsNV(GLsizei n, const GLuint* ids)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg ids\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg ids\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]int32)\r\nret")]
        #endif
        public static void glDeleteProgramsNV([In] IntPtr extensionPointer, int n, ref int ids) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glDeleteProgramsNV([In] IntPtr extensionPointer, int n, ref int ids)

        #region void glDeleteProgramsNV([In] IntPtr extensionPointer, int n, int[] ids)
        // GLvoid glDeleteProgramsNV(GLsizei n, const GLuint* ids)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg ids\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg ids\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32[])\r\nret")]
        #endif
        public static void glDeleteProgramsNV([In] IntPtr extensionPointer, int n, int[] ids) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glDeleteProgramsNV([In] IntPtr extensionPointer, int n, int[] ids)

        #region void glDeleteProgramsNV([In] IntPtr extensionPointer, int n, IntPtr ids)
        // GLvoid glDeleteProgramsNV(GLsizei n, const GLuint* ids)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg ids\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg ids\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glDeleteProgramsNV([In] IntPtr extensionPointer, int n, IntPtr ids) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glDeleteProgramsNV([In] IntPtr extensionPointer, int n, IntPtr ids)

        #region void glDeleteProgramsNV([In] IntPtr extensionPointer, int n, int* ids)
        // GLvoid glDeleteProgramsNV(GLsizei n, const GLuint* ids)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg ids\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg ids\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32*)\r\nret")]
        #endif
        public static unsafe void glDeleteProgramsNV([In] IntPtr extensionPointer, int n, int* ids) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glDeleteProgramsNV([In] IntPtr extensionPointer, int n, int* ids)
        #endregion Overloads for GLvoid glDeleteProgramsNV(GLsizei n, const GLuint* ids)

        #region Overloads for GLvoid glExecuteProgramNV(GLenum target, GLuint id, const GLfloat* parameters)
        #region void glExecuteProgramNV([In] IntPtr extensionPointer, int target, int id, ref float parameters)
        // GLvoid glExecuteProgramNV(GLenum target, GLuint id, const GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg id\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in][out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg id\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in][out]float32)\r\nret")]
        #endif
        public static void glExecuteProgramNV([In] IntPtr extensionPointer, int target, int id, ref float parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glExecuteProgramNV([In] IntPtr extensionPointer, int target, int id, ref float parameters)

        #region void glExecuteProgramNV([In] IntPtr extensionPointer, int target, int id, float[] parameters)
        // GLvoid glExecuteProgramNV(GLenum target, GLuint id, const GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg id\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg id\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]float32[])\r\nret")]
        #endif
        public static void glExecuteProgramNV([In] IntPtr extensionPointer, int target, int id, float[] parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glExecuteProgramNV([In] IntPtr extensionPointer, int target, int id, float[] parameters)

        #region void glExecuteProgramNV([In] IntPtr extensionPointer, int target, int id, IntPtr parameters)
        // GLvoid glExecuteProgramNV(GLenum target, GLuint id, const GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg id\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg id\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]native int)\r\nret")]
        #endif
        public static void glExecuteProgramNV([In] IntPtr extensionPointer, int target, int id, IntPtr parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glExecuteProgramNV([In] IntPtr extensionPointer, int target, int id, IntPtr parameters)

        #region void glExecuteProgramNV([In] IntPtr extensionPointer, int target, int id, float* parameters)
        // GLvoid glExecuteProgramNV(GLenum target, GLuint id, const GLfloat* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg id\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg id\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]float32*)\r\nret")]
        #endif
        public static unsafe void glExecuteProgramNV([In] IntPtr extensionPointer, int target, int id, float* parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glExecuteProgramNV([In] IntPtr extensionPointer, int target, int id, float* parameters)
        #endregion Overloads for GLvoid glExecuteProgramNV(GLenum target, GLuint id, const GLfloat* parameters)

        #region Overloads for GLvoid glGenProgramsNV(GLsizei n, GLuint* ids)
        #region void glGenProgramsNV([In] IntPtr extensionPointer, int n, out int ids)
        // GLvoid glGenProgramsNV(GLsizei n, GLuint* ids)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg ids\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[out]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg ids\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[out]int32)\r\nret")]
        #endif
        public static void glGenProgramsNV([In] IntPtr extensionPointer, int n, out int ids) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGenProgramsNV([In] IntPtr extensionPointer, int n, out int ids)

        #region void glGenProgramsNV([In] IntPtr extensionPointer, int n, int[] ids)
        // GLvoid glGenProgramsNV(GLsizei n, GLuint* ids)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg ids\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[out]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg ids\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[out]int32[])\r\nret")]
        #endif
        public static void glGenProgramsNV([In] IntPtr extensionPointer, int n, int[] ids) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGenProgramsNV([In] IntPtr extensionPointer, int n, int[] ids)

        #region void glGenProgramsNV([In] IntPtr extensionPointer, int n, IntPtr ids)
        // GLvoid glGenProgramsNV(GLsizei n, GLuint* ids)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg ids\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg ids\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGenProgramsNV([In] IntPtr extensionPointer, int n, IntPtr ids) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGenProgramsNV([In] IntPtr extensionPointer, int n, IntPtr ids)

        #region void glGenProgramsNV([In] IntPtr extensionPointer, int n, int* ids)
        // GLvoid glGenProgramsNV(GLsizei n, GLuint* ids)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg ids\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[out]int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg ids\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[out]int32*)\r\nret")]
        #endif
        public static unsafe void glGenProgramsNV([In] IntPtr extensionPointer, int n, int* ids) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGenProgramsNV([In] IntPtr extensionPointer, int n, int* ids)
        #endregion Overloads for GLvoid glGenProgramsNV(GLsizei n, GLuint* ids)

        #region Overloads for GLboolean glAreProgramsResidentNV(GLsizei n, const GLuint* ids, GLboolean* residences)
        #region int glAreProgramsResidentNV([In] IntPtr extensionPointer, int n, ref int ids, out int residences)
        // GLboolean glAreProgramsResidentNV(GLsizei n, const GLuint* ids, GLboolean* residences)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg n\r\nldarg ids\r\nldarg residences\r\nldarg extensionPointer\r\ncalli unmanaged stdcall int32([in]int32,[in][out]int32,[out]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg n\r\nldarg ids\r\nldarg residences\r\nldarg extensionPointer\r\ncalli unmanaged cdecl int32([in]int32,[in][out]int32,[out]int32)\r\nret")]
        #endif
        public static int glAreProgramsResidentNV([In] IntPtr extensionPointer, int n, ref int ids, out int residences) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion int glAreProgramsResidentNV([In] IntPtr extensionPointer, int n, ref int ids, out int residences)

        #region int glAreProgramsResidentNV([In] IntPtr extensionPointer, int n, int[] ids, int[] residences)
        // GLboolean glAreProgramsResidentNV(GLsizei n, const GLuint* ids, GLboolean* residences)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg n\r\nldarg ids\r\nldarg residences\r\nldarg extensionPointer\r\ncalli unmanaged stdcall int32([in]int32,[in]int32[],[out]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg n\r\nldarg ids\r\nldarg residences\r\nldarg extensionPointer\r\ncalli unmanaged cdecl int32([in]int32,[in]int32[],[out]int32[])\r\nret")]
        #endif
        public static int glAreProgramsResidentNV([In] IntPtr extensionPointer, int n, int[] ids, int[] residences) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion int glAreProgramsResidentNV([In] IntPtr extensionPointer, int n, int[] ids, int[] residences)

        #region int glAreProgramsResidentNV([In] IntPtr extensionPointer, int n, IntPtr ids, IntPtr residences)
        // GLboolean glAreProgramsResidentNV(GLsizei n, const GLuint* ids, GLboolean* residences)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg n\r\nldarg ids\r\nldarg residences\r\nldarg extensionPointer\r\ncalli unmanaged stdcall int32([in]int32,[in]native int,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg n\r\nldarg ids\r\nldarg residences\r\nldarg extensionPointer\r\ncalli unmanaged cdecl int32([in]int32,[in]native int,[out]native int)\r\nret")]
        #endif
        public static int glAreProgramsResidentNV([In] IntPtr extensionPointer, int n, IntPtr ids, IntPtr residences) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion int glAreProgramsResidentNV([In] IntPtr extensionPointer, int n, IntPtr ids, IntPtr residences)

        #region int glAreProgramsResidentNV([In] IntPtr extensionPointer, int n, int* ids, int* residences)
        // GLboolean glAreProgramsResidentNV(GLsizei n, const GLuint* ids, GLboolean* residences)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg n\r\nldarg ids\r\nldarg residences\r\nldarg extensionPointer\r\ncalli unmanaged stdcall int32([in]int32,[in]int32*,[out]int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg n\r\nldarg ids\r\nldarg residences\r\nldarg extensionPointer\r\ncalli unmanaged cdecl int32([in]int32,[in]int32*,[out]int32*)\r\nret")]
        #endif
        public static unsafe int glAreProgramsResidentNV([In] IntPtr extensionPointer, int n, int* ids, int* residences) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion int glAreProgramsResidentNV([In] IntPtr extensionPointer, int n, int* ids, int* residences)
        #endregion Overloads for GLboolean glAreProgramsResidentNV(GLsizei n, const GLuint* ids, GLboolean* residences)

        #region Overloads for GLvoid glRequestResidentProgramsNV(GLsizei n, GLuint* ids)
        #region void glRequestResidentProgramsNV([In] IntPtr extensionPointer, int n, out int ids)
        // GLvoid glRequestResidentProgramsNV(GLsizei n, GLuint* ids)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg ids\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[out]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg ids\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[out]int32)\r\nret")]
        #endif
        public static void glRequestResidentProgramsNV([In] IntPtr extensionPointer, int n, out int ids) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glRequestResidentProgramsNV([In] IntPtr extensionPointer, int n, out int ids)

        #region void glRequestResidentProgramsNV([In] IntPtr extensionPointer, int n, int[] ids)
        // GLvoid glRequestResidentProgramsNV(GLsizei n, GLuint* ids)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg ids\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[out]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg ids\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[out]int32[])\r\nret")]
        #endif
        public static void glRequestResidentProgramsNV([In] IntPtr extensionPointer, int n, int[] ids) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glRequestResidentProgramsNV([In] IntPtr extensionPointer, int n, int[] ids)

        #region void glRequestResidentProgramsNV([In] IntPtr extensionPointer, int n, IntPtr ids)
        // GLvoid glRequestResidentProgramsNV(GLsizei n, GLuint* ids)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg ids\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg ids\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[out]native int)\r\nret")]
        #endif
        public static void glRequestResidentProgramsNV([In] IntPtr extensionPointer, int n, IntPtr ids) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glRequestResidentProgramsNV([In] IntPtr extensionPointer, int n, IntPtr ids)

        #region void glRequestResidentProgramsNV([In] IntPtr extensionPointer, int n, int* ids)
        // GLvoid glRequestResidentProgramsNV(GLsizei n, GLuint* ids)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg ids\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[out]int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg ids\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[out]int32*)\r\nret")]
        #endif
        public static unsafe void glRequestResidentProgramsNV([In] IntPtr extensionPointer, int n, int* ids) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glRequestResidentProgramsNV([In] IntPtr extensionPointer, int n, int* ids)
        #endregion Overloads for GLvoid glRequestResidentProgramsNV(GLsizei n, GLuint* ids)

        #region Overloads for GLvoid glGetProgramParameterfvNV(GLenum target, GLuint index, GLenum pname, GLfloat* parameters)
        #region void glGetProgramParameterfvNV([In] IntPtr extensionPointer, int target, int index, int pname, out float parameters)
        // GLvoid glGetProgramParameterfvNV(GLenum target, GLuint index, GLenum pname, GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg index\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg index\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[out]float32)\r\nret")]
        #endif
        public static void glGetProgramParameterfvNV([In] IntPtr extensionPointer, int target, int index, int pname, out float parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetProgramParameterfvNV([In] IntPtr extensionPointer, int target, int index, int pname, out float parameters)

        #region void glGetProgramParameterfvNV([In] IntPtr extensionPointer, int target, int index, int pname, float[] parameters)
        // GLvoid glGetProgramParameterfvNV(GLenum target, GLuint index, GLenum pname, GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg index\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[out]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg index\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[out]float32[])\r\nret")]
        #endif
        public static void glGetProgramParameterfvNV([In] IntPtr extensionPointer, int target, int index, int pname, float[] parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetProgramParameterfvNV([In] IntPtr extensionPointer, int target, int index, int pname, float[] parameters)

        #region void glGetProgramParameterfvNV([In] IntPtr extensionPointer, int target, int index, int pname, IntPtr parameters)
        // GLvoid glGetProgramParameterfvNV(GLenum target, GLuint index, GLenum pname, GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg index\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg index\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGetProgramParameterfvNV([In] IntPtr extensionPointer, int target, int index, int pname, IntPtr parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetProgramParameterfvNV([In] IntPtr extensionPointer, int target, int index, int pname, IntPtr parameters)

        #region void glGetProgramParameterfvNV([In] IntPtr extensionPointer, int target, int index, int pname, float* parameters)
        // GLvoid glGetProgramParameterfvNV(GLenum target, GLuint index, GLenum pname, GLfloat* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg index\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[out]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg index\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[out]float32*)\r\nret")]
        #endif
        public static unsafe void glGetProgramParameterfvNV([In] IntPtr extensionPointer, int target, int index, int pname, float* parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetProgramParameterfvNV([In] IntPtr extensionPointer, int target, int index, int pname, float* parameters)
        #endregion Overloads for GLvoid glGetProgramParameterfvNV(GLenum target, GLuint index, GLenum pname, GLfloat* parameters)

        #region Overloads for GLvoid glGetProgramParameterdvNV(GLenum target, GLuint index, GLenum pname, GLdouble* parameters)
        #region void glGetProgramParameterdvNV([In] IntPtr extensionPointer, int target, int index, int pname, out double parameters)
        // GLvoid glGetProgramParameterdvNV(GLenum target, GLuint index, GLenum pname, GLdouble* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg index\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[out]float64)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg index\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[out]float64)\r\nret")]
        #endif
        public static void glGetProgramParameterdvNV([In] IntPtr extensionPointer, int target, int index, int pname, out double parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetProgramParameterdvNV([In] IntPtr extensionPointer, int target, int index, int pname, out double parameters)

        #region void glGetProgramParameterdvNV([In] IntPtr extensionPointer, int target, int index, int pname, double[] parameters)
        // GLvoid glGetProgramParameterdvNV(GLenum target, GLuint index, GLenum pname, GLdouble* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg index\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[out]float64[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg index\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[out]float64[])\r\nret")]
        #endif
        public static void glGetProgramParameterdvNV([In] IntPtr extensionPointer, int target, int index, int pname, double[] parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetProgramParameterdvNV([In] IntPtr extensionPointer, int target, int index, int pname, double[] parameters)

        #region void glGetProgramParameterdvNV([In] IntPtr extensionPointer, int target, int index, int pname, IntPtr parameters)
        // GLvoid glGetProgramParameterdvNV(GLenum target, GLuint index, GLenum pname, GLdouble* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg index\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg index\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGetProgramParameterdvNV([In] IntPtr extensionPointer, int target, int index, int pname, IntPtr parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetProgramParameterdvNV([In] IntPtr extensionPointer, int target, int index, int pname, IntPtr parameters)

        #region void glGetProgramParameterdvNV([In] IntPtr extensionPointer, int target, int index, int pname, double* parameters)
        // GLvoid glGetProgramParameterdvNV(GLenum target, GLuint index, GLenum pname, GLdouble* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg index\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[out]float64*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg index\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[out]float64*)\r\nret")]
        #endif
        public static unsafe void glGetProgramParameterdvNV([In] IntPtr extensionPointer, int target, int index, int pname, double* parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetProgramParameterdvNV([In] IntPtr extensionPointer, int target, int index, int pname, double* parameters)
        #endregion Overloads for GLvoid glGetProgramParameterdvNV(GLenum target, GLuint index, GLenum pname, GLdouble* parameters)

        #region Overloads for GLvoid glGetProgramivNV(GLuint id, GLenum pname, GLint* parameters)
        #region void glGetProgramivNV([In] IntPtr extensionPointer, int id, int pname, out int parameters)
        // GLvoid glGetProgramivNV(GLuint id, GLenum pname, GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]int32)\r\nret")]
        #endif
        public static void glGetProgramivNV([In] IntPtr extensionPointer, int id, int pname, out int parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetProgramivNV([In] IntPtr extensionPointer, int id, int pname, out int parameters)

        #region void glGetProgramivNV([In] IntPtr extensionPointer, int id, int pname, int[] parameters)
        // GLvoid glGetProgramivNV(GLuint id, GLenum pname, GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]int32[])\r\nret")]
        #endif
        public static void glGetProgramivNV([In] IntPtr extensionPointer, int id, int pname, int[] parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetProgramivNV([In] IntPtr extensionPointer, int id, int pname, int[] parameters)

        #region void glGetProgramivNV([In] IntPtr extensionPointer, int id, int pname, IntPtr parameters)
        // GLvoid glGetProgramivNV(GLuint id, GLenum pname, GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGetProgramivNV([In] IntPtr extensionPointer, int id, int pname, IntPtr parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetProgramivNV([In] IntPtr extensionPointer, int id, int pname, IntPtr parameters)

        #region void glGetProgramivNV([In] IntPtr extensionPointer, int id, int pname, int* parameters)
        // GLvoid glGetProgramivNV(GLuint id, GLenum pname, GLint* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]int32*)\r\nret")]
        #endif
        public static unsafe void glGetProgramivNV([In] IntPtr extensionPointer, int id, int pname, int* parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetProgramivNV([In] IntPtr extensionPointer, int id, int pname, int* parameters)
        #endregion Overloads for GLvoid glGetProgramivNV(GLuint id, GLenum pname, GLint* parameters)

        #region void glGetProgramStringNV([In] IntPtr extensionPointer, int id, int pname, System.Text.StringBuilder program)
        // GLvoid glGetProgramStringNV(GLuint id, GLenum pname, GLubyte* program)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg pname\r\nldarg program\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in][out]class [mscorlib]System.Text.StringBuilder)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg pname\r\nldarg program\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in][out]class [mscorlib]System.Text.StringBuilder)\r\nret")]
        #endif
        public static void glGetProgramStringNV([In] IntPtr extensionPointer, int id, int pname, System.Text.StringBuilder program) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetProgramStringNV([In] IntPtr extensionPointer, int id, int pname, System.Text.StringBuilder program)

        #region Overloads for GLvoid glGetTrackMatrixivNV(GLenum target, GLuint address, GLenum pname, GLint* parameters)
        #region void glGetTrackMatrixivNV([In] IntPtr extensionPointer, int target, int address, int pname, out int parameters)
        // GLvoid glGetTrackMatrixivNV(GLenum target, GLuint address, GLenum pname, GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg address\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[out]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg address\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[out]int32)\r\nret")]
        #endif
        public static void glGetTrackMatrixivNV([In] IntPtr extensionPointer, int target, int address, int pname, out int parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetTrackMatrixivNV([In] IntPtr extensionPointer, int target, int address, int pname, out int parameters)

        #region void glGetTrackMatrixivNV([In] IntPtr extensionPointer, int target, int address, int pname, int[] parameters)
        // GLvoid glGetTrackMatrixivNV(GLenum target, GLuint address, GLenum pname, GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg address\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[out]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg address\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[out]int32[])\r\nret")]
        #endif
        public static void glGetTrackMatrixivNV([In] IntPtr extensionPointer, int target, int address, int pname, int[] parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetTrackMatrixivNV([In] IntPtr extensionPointer, int target, int address, int pname, int[] parameters)

        #region void glGetTrackMatrixivNV([In] IntPtr extensionPointer, int target, int address, int pname, IntPtr parameters)
        // GLvoid glGetTrackMatrixivNV(GLenum target, GLuint address, GLenum pname, GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg address\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg address\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGetTrackMatrixivNV([In] IntPtr extensionPointer, int target, int address, int pname, IntPtr parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetTrackMatrixivNV([In] IntPtr extensionPointer, int target, int address, int pname, IntPtr parameters)

        #region void glGetTrackMatrixivNV([In] IntPtr extensionPointer, int target, int address, int pname, int* parameters)
        // GLvoid glGetTrackMatrixivNV(GLenum target, GLuint address, GLenum pname, GLint* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg address\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[out]int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg address\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[out]int32*)\r\nret")]
        #endif
        public static unsafe void glGetTrackMatrixivNV([In] IntPtr extensionPointer, int target, int address, int pname, int* parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetTrackMatrixivNV([In] IntPtr extensionPointer, int target, int address, int pname, int* parameters)
        #endregion Overloads for GLvoid glGetTrackMatrixivNV(GLenum target, GLuint address, GLenum pname, GLint* parameters)

        #region Overloads for GLvoid glGetVertexAttribdvNV(GLuint index, GLenum pname, GLdouble* parameters)
        #region void glGetVertexAttribdvNV([In] IntPtr extensionPointer, int index, int pname, out double parameters)
        // GLvoid glGetVertexAttribdvNV(GLuint index, GLenum pname, GLdouble* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]float64)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]float64)\r\nret")]
        #endif
        public static void glGetVertexAttribdvNV([In] IntPtr extensionPointer, int index, int pname, out double parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetVertexAttribdvNV([In] IntPtr extensionPointer, int index, int pname, out double parameters)

        #region void glGetVertexAttribdvNV([In] IntPtr extensionPointer, int index, int pname, double[] parameters)
        // GLvoid glGetVertexAttribdvNV(GLuint index, GLenum pname, GLdouble* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]float64[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]float64[])\r\nret")]
        #endif
        public static void glGetVertexAttribdvNV([In] IntPtr extensionPointer, int index, int pname, double[] parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetVertexAttribdvNV([In] IntPtr extensionPointer, int index, int pname, double[] parameters)

        #region void glGetVertexAttribdvNV([In] IntPtr extensionPointer, int index, int pname, IntPtr parameters)
        // GLvoid glGetVertexAttribdvNV(GLuint index, GLenum pname, GLdouble* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGetVertexAttribdvNV([In] IntPtr extensionPointer, int index, int pname, IntPtr parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetVertexAttribdvNV([In] IntPtr extensionPointer, int index, int pname, IntPtr parameters)

        #region void glGetVertexAttribdvNV([In] IntPtr extensionPointer, int index, int pname, double* parameters)
        // GLvoid glGetVertexAttribdvNV(GLuint index, GLenum pname, GLdouble* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]float64*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]float64*)\r\nret")]
        #endif
        public static unsafe void glGetVertexAttribdvNV([In] IntPtr extensionPointer, int index, int pname, double* parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetVertexAttribdvNV([In] IntPtr extensionPointer, int index, int pname, double* parameters)
        #endregion Overloads for GLvoid glGetVertexAttribdvNV(GLuint index, GLenum pname, GLdouble* parameters)

        #region Overloads for GLvoid glGetVertexAttribfvNV(GLuint index, GLenum pname, GLfloat* parameters)
        #region void glGetVertexAttribfvNV([In] IntPtr extensionPointer, int index, int pname, out float parameters)
        // GLvoid glGetVertexAttribfvNV(GLuint index, GLenum pname, GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]float32)\r\nret")]
        #endif
        public static void glGetVertexAttribfvNV([In] IntPtr extensionPointer, int index, int pname, out float parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetVertexAttribfvNV([In] IntPtr extensionPointer, int index, int pname, out float parameters)

        #region void glGetVertexAttribfvNV([In] IntPtr extensionPointer, int index, int pname, float[] parameters)
        // GLvoid glGetVertexAttribfvNV(GLuint index, GLenum pname, GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]float32[])\r\nret")]
        #endif
        public static void glGetVertexAttribfvNV([In] IntPtr extensionPointer, int index, int pname, float[] parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetVertexAttribfvNV([In] IntPtr extensionPointer, int index, int pname, float[] parameters)

        #region void glGetVertexAttribfvNV([In] IntPtr extensionPointer, int index, int pname, IntPtr parameters)
        // GLvoid glGetVertexAttribfvNV(GLuint index, GLenum pname, GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGetVertexAttribfvNV([In] IntPtr extensionPointer, int index, int pname, IntPtr parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetVertexAttribfvNV([In] IntPtr extensionPointer, int index, int pname, IntPtr parameters)

        #region void glGetVertexAttribfvNV([In] IntPtr extensionPointer, int index, int pname, float* parameters)
        // GLvoid glGetVertexAttribfvNV(GLuint index, GLenum pname, GLfloat* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]float32*)\r\nret")]
        #endif
        public static unsafe void glGetVertexAttribfvNV([In] IntPtr extensionPointer, int index, int pname, float* parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetVertexAttribfvNV([In] IntPtr extensionPointer, int index, int pname, float* parameters)
        #endregion Overloads for GLvoid glGetVertexAttribfvNV(GLuint index, GLenum pname, GLfloat* parameters)

        #region Overloads for GLvoid glGetVertexAttribivNV(GLuint index, GLenum pname, GLint* parameters)
        #region void glGetVertexAttribivNV([In] IntPtr extensionPointer, int index, int pname, out int parameters)
        // GLvoid glGetVertexAttribivNV(GLuint index, GLenum pname, GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]int32)\r\nret")]
        #endif
        public static void glGetVertexAttribivNV([In] IntPtr extensionPointer, int index, int pname, out int parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetVertexAttribivNV([In] IntPtr extensionPointer, int index, int pname, out int parameters)

        #region void glGetVertexAttribivNV([In] IntPtr extensionPointer, int index, int pname, int[] parameters)
        // GLvoid glGetVertexAttribivNV(GLuint index, GLenum pname, GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]int32[])\r\nret")]
        #endif
        public static void glGetVertexAttribivNV([In] IntPtr extensionPointer, int index, int pname, int[] parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetVertexAttribivNV([In] IntPtr extensionPointer, int index, int pname, int[] parameters)

        #region void glGetVertexAttribivNV([In] IntPtr extensionPointer, int index, int pname, IntPtr parameters)
        // GLvoid glGetVertexAttribivNV(GLuint index, GLenum pname, GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGetVertexAttribivNV([In] IntPtr extensionPointer, int index, int pname, IntPtr parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetVertexAttribivNV([In] IntPtr extensionPointer, int index, int pname, IntPtr parameters)

        #region void glGetVertexAttribivNV([In] IntPtr extensionPointer, int index, int pname, int* parameters)
        // GLvoid glGetVertexAttribivNV(GLuint index, GLenum pname, GLint* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]int32*)\r\nret")]
        #endif
        public static unsafe void glGetVertexAttribivNV([In] IntPtr extensionPointer, int index, int pname, int* parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetVertexAttribivNV([In] IntPtr extensionPointer, int index, int pname, int* parameters)
        #endregion Overloads for GLvoid glGetVertexAttribivNV(GLuint index, GLenum pname, GLint* parameters)

        #region Overloads for GLvoid glGetVertexAttribPointervNV(GLuint index, GLenum pname, GLvoid* pointer)
        #region void glGetVertexAttribPointervNV([In] IntPtr extensionPointer, int index, int pname, IntPtr[] pointer)
        // GLvoid glGetVertexAttribPointervNV(GLuint index, GLenum pname, GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg pname\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]native int[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg pname\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]native int[])\r\nret")]
        #endif
        public static void glGetVertexAttribPointervNV([In] IntPtr extensionPointer, int index, int pname, IntPtr[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetVertexAttribPointervNV([In] IntPtr extensionPointer, int index, int pname, IntPtr[] pointer)

        #region void glGetVertexAttribPointervNV([In] IntPtr extensionPointer, int index, int pname, IntPtr pointer)
        // GLvoid glGetVertexAttribPointervNV(GLuint index, GLenum pname, GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg pname\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg pname\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGetVertexAttribPointervNV([In] IntPtr extensionPointer, int index, int pname, IntPtr pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetVertexAttribPointervNV([In] IntPtr extensionPointer, int index, int pname, IntPtr pointer)

        #region void glGetVertexAttribPointervNV([In] IntPtr extensionPointer, int index, int pname, void** pointer)
        // GLvoid glGetVertexAttribPointervNV(GLuint index, GLenum pname, GLvoid* pointer)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg pname\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]void**)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg pname\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]void**)\r\nret")]
        #endif
        public static unsafe void glGetVertexAttribPointervNV([In] IntPtr extensionPointer, int index, int pname, void** pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetVertexAttribPointervNV([In] IntPtr extensionPointer, int index, int pname, void** pointer)
        #endregion Overloads for GLvoid glGetVertexAttribPointervNV(GLuint index, GLenum pname, GLvoid* pointer)

        #region int glIsProgramNV([In] IntPtr extensionPointer, int id)
        // GLboolean glIsProgramNV(GLuint id)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg id\r\nldarg extensionPointer\r\ncalli unmanaged stdcall int32([in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg id\r\nldarg extensionPointer\r\ncalli unmanaged cdecl int32([in]int32)\r\nret")]
        #endif
        public static int glIsProgramNV([In] IntPtr extensionPointer, int id) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion int glIsProgramNV([In] IntPtr extensionPointer, int id)

        #region void glLoadProgramNV([In] IntPtr extensionPointer, int target, int id, int len, string program)
        // GLvoid glLoadProgramNV(GLenum target, GLuint id, GLsizei len, const GLubyte* program)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg id\r\nldarg len\r\nldarg program\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]string)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg id\r\nldarg len\r\nldarg program\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]string)\r\nret")]
        #endif
        public static void glLoadProgramNV([In] IntPtr extensionPointer, int target, int id, int len, string program) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glLoadProgramNV([In] IntPtr extensionPointer, int target, int id, int len, string program)

        #region void glProgramParameter4fNV([In] IntPtr extensionPointer, int target, int index, float x, float y, float z, float w)
        // GLvoid glProgramParameter4fNV(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
        #if WIN32
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg index\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg w\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]float32,[in]float32,[in]float32,[in]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg index\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg w\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]float32,[in]float32,[in]float32,[in]float32)\r\nret")]
        #endif
        public static void glProgramParameter4fNV([In] IntPtr extensionPointer, int target, int index, float x, float y, float z, float w) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glProgramParameter4fNV([In] IntPtr extensionPointer, int target, int index, float x, float y, float z, float w)

        #region Overloads for GLvoid glProgramParameter4fvNV(GLenum target, GLuint index, const GLfloat* parameters)
        #region void glProgramParameter4fvNV([In] IntPtr extensionPointer, int target, int index, ref float parameters)
        // GLvoid glProgramParameter4fvNV(GLenum target, GLuint index, const GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg index\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in][out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg index\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in][out]float32)\r\nret")]
        #endif
        public static void glProgramParameter4fvNV([In] IntPtr extensionPointer, int target, int index, ref float parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glProgramParameter4fvNV([In] IntPtr extensionPointer, int target, int index, ref float parameters)

        #region void glProgramParameter4fvNV([In] IntPtr extensionPointer, int target, int index, float[] parameters)
        // GLvoid glProgramParameter4fvNV(GLenum target, GLuint index, const GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg index\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg index\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]float32[])\r\nret")]
        #endif
        public static void glProgramParameter4fvNV([In] IntPtr extensionPointer, int target, int index, float[] parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glProgramParameter4fvNV([In] IntPtr extensionPointer, int target, int index, float[] parameters)

        #region void glProgramParameter4fvNV([In] IntPtr extensionPointer, int target, int index, IntPtr parameters)
        // GLvoid glProgramParameter4fvNV(GLenum target, GLuint index, const GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg index\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg index\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]native int)\r\nret")]
        #endif
        public static void glProgramParameter4fvNV([In] IntPtr extensionPointer, int target, int index, IntPtr parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glProgramParameter4fvNV([In] IntPtr extensionPointer, int target, int index, IntPtr parameters)

        #region void glProgramParameter4fvNV([In] IntPtr extensionPointer, int target, int index, float* parameters)
        // GLvoid glProgramParameter4fvNV(GLenum target, GLuint index, const GLfloat* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg index\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg index\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]float32*)\r\nret")]
        #endif
        public static unsafe void glProgramParameter4fvNV([In] IntPtr extensionPointer, int target, int index, float* parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glProgramParameter4fvNV([In] IntPtr extensionPointer, int target, int index, float* parameters)
        #endregion Overloads for GLvoid glProgramParameter4fvNV(GLenum target, GLuint index, const GLfloat* parameters)

        #region Overloads for GLvoid glProgramParameters4dvNV(GLenum target, GLuint index, GLuint num, const GLdouble* parameters)
        #region void glProgramParameters4dvNV([In] IntPtr extensionPointer, int target, int index, int num, ref double parameters)
        // GLvoid glProgramParameters4dvNV(GLenum target, GLuint index, GLuint num, const GLdouble* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg index\r\nldarg num\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in][out]float64)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg index\r\nldarg num\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in][out]float64)\r\nret")]
        #endif
        public static void glProgramParameters4dvNV([In] IntPtr extensionPointer, int target, int index, int num, ref double parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glProgramParameters4dvNV([In] IntPtr extensionPointer, int target, int index, int num, ref double parameters)

        #region void glProgramParameters4dvNV([In] IntPtr extensionPointer, int target, int index, int num, double[] parameters)
        // GLvoid glProgramParameters4dvNV(GLenum target, GLuint index, GLuint num, const GLdouble* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg index\r\nldarg num\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]float64[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg index\r\nldarg num\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]float64[])\r\nret")]
        #endif
        public static void glProgramParameters4dvNV([In] IntPtr extensionPointer, int target, int index, int num, double[] parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glProgramParameters4dvNV([In] IntPtr extensionPointer, int target, int index, int num, double[] parameters)

        #region void glProgramParameters4dvNV([In] IntPtr extensionPointer, int target, int index, int num, IntPtr parameters)
        // GLvoid glProgramParameters4dvNV(GLenum target, GLuint index, GLuint num, const GLdouble* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg index\r\nldarg num\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg index\r\nldarg num\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]native int)\r\nret")]
        #endif
        public static void glProgramParameters4dvNV([In] IntPtr extensionPointer, int target, int index, int num, IntPtr parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glProgramParameters4dvNV([In] IntPtr extensionPointer, int target, int index, int num, IntPtr parameters)

        #region void glProgramParameters4dvNV([In] IntPtr extensionPointer, int target, int index, int num, double* parameters)
        // GLvoid glProgramParameters4dvNV(GLenum target, GLuint index, GLuint num, const GLdouble* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg index\r\nldarg num\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]float64*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg index\r\nldarg num\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]float64*)\r\nret")]
        #endif
        public static unsafe void glProgramParameters4dvNV([In] IntPtr extensionPointer, int target, int index, int num, double* parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glProgramParameters4dvNV([In] IntPtr extensionPointer, int target, int index, int num, double* parameters)
        #endregion Overloads for GLvoid glProgramParameters4dvNV(GLenum target, GLuint index, GLuint num, const GLdouble* parameters)

        #region Overloads for GLvoid glProgramParameters4fvNV(GLenum target, GLuint index, GLuint num, const GLfloat* parameters)
        #region void glProgramParameters4fvNV([In] IntPtr extensionPointer, int target, int index, int num, ref float parameters)
        // GLvoid glProgramParameters4fvNV(GLenum target, GLuint index, GLuint num, const GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg index\r\nldarg num\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in][out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg index\r\nldarg num\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in][out]float32)\r\nret")]
        #endif
        public static void glProgramParameters4fvNV([In] IntPtr extensionPointer, int target, int index, int num, ref float parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glProgramParameters4fvNV([In] IntPtr extensionPointer, int target, int index, int num, ref float parameters)

        #region void glProgramParameters4fvNV([In] IntPtr extensionPointer, int target, int index, int num, float[] parameters)
        // GLvoid glProgramParameters4fvNV(GLenum target, GLuint index, GLuint num, const GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg index\r\nldarg num\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg index\r\nldarg num\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]float32[])\r\nret")]
        #endif
        public static void glProgramParameters4fvNV([In] IntPtr extensionPointer, int target, int index, int num, float[] parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glProgramParameters4fvNV([In] IntPtr extensionPointer, int target, int index, int num, float[] parameters)

        #region void glProgramParameters4fvNV([In] IntPtr extensionPointer, int target, int index, int num, IntPtr parameters)
        // GLvoid glProgramParameters4fvNV(GLenum target, GLuint index, GLuint num, const GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg index\r\nldarg num\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg index\r\nldarg num\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]native int)\r\nret")]
        #endif
        public static void glProgramParameters4fvNV([In] IntPtr extensionPointer, int target, int index, int num, IntPtr parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glProgramParameters4fvNV([In] IntPtr extensionPointer, int target, int index, int num, IntPtr parameters)

        #region void glProgramParameters4fvNV([In] IntPtr extensionPointer, int target, int index, int num, float* parameters)
        // GLvoid glProgramParameters4fvNV(GLenum target, GLuint index, GLuint num, const GLfloat* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg index\r\nldarg num\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg index\r\nldarg num\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]float32*)\r\nret")]
        #endif
        public static unsafe void glProgramParameters4fvNV([In] IntPtr extensionPointer, int target, int index, int num, float* parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glProgramParameters4fvNV([In] IntPtr extensionPointer, int target, int index, int num, float* parameters)
        #endregion Overloads for GLvoid glProgramParameters4fvNV(GLenum target, GLuint index, GLuint num, const GLfloat* parameters)

        #region void glTrackMatrixNV([In] IntPtr extensionPointer, int target, int address, int matrix, int transform)
        // GLvoid glTrackMatrixNV(GLenum target, GLuint address, GLenum matrix, GLenum transform)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg address\r\nldarg matrix\r\nldarg transform\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg address\r\nldarg matrix\r\nldarg transform\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32)\r\nret")]
        #endif
        public static void glTrackMatrixNV([In] IntPtr extensionPointer, int target, int address, int matrix, int transform) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTrackMatrixNV([In] IntPtr extensionPointer, int target, int address, int matrix, int transform)

        #region Overloads for GLvoid glVertexAttribPointerNV(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid* pointer)
        #region void glVertexAttribPointerNV([In] IntPtr extensionPointer, int index, int size, int type, int stride, short[] pointer)
        // GLvoid glVertexAttribPointerNV(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg index\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg index\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int16[])\r\nret")]
        #endif
        public static void glVertexAttribPointerNV([In] IntPtr extensionPointer, int index, int size, int type, int stride, short[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttribPointerNV([In] IntPtr extensionPointer, int index, int size, int type, int stride, short[] pointer)

        #region void glVertexAttribPointerNV([In] IntPtr extensionPointer, int index, int size, int type, int stride, float[] pointer)
        // GLvoid glVertexAttribPointerNV(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg index\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg index\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]float32[])\r\nret")]
        #endif
        public static void glVertexAttribPointerNV([In] IntPtr extensionPointer, int index, int size, int type, int stride, float[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttribPointerNV([In] IntPtr extensionPointer, int index, int size, int type, int stride, float[] pointer)

        #region void glVertexAttribPointerNV([In] IntPtr extensionPointer, int index, int size, int type, int stride, int[] pointer)
        // GLvoid glVertexAttribPointerNV(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg index\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg index\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32[])\r\nret")]
        #endif
        public static void glVertexAttribPointerNV([In] IntPtr extensionPointer, int index, int size, int type, int stride, int[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttribPointerNV([In] IntPtr extensionPointer, int index, int size, int type, int stride, int[] pointer)

        #region void glVertexAttribPointerNV([In] IntPtr extensionPointer, int index, int size, int type, int stride, IntPtr pointer)
        // GLvoid glVertexAttribPointerNV(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg index\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg index\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]native int)\r\nret")]
        #endif
        public static void glVertexAttribPointerNV([In] IntPtr extensionPointer, int index, int size, int type, int stride, IntPtr pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttribPointerNV([In] IntPtr extensionPointer, int index, int size, int type, int stride, IntPtr pointer)

        #region void glVertexAttribPointerNV([In] IntPtr extensionPointer, int index, int size, int type, int stride, byte[] pointer)
        // GLvoid glVertexAttribPointerNV(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg index\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int8[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg index\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int8[])\r\nret")]
        #endif
        public static void glVertexAttribPointerNV([In] IntPtr extensionPointer, int index, int size, int type, int stride, byte[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttribPointerNV([In] IntPtr extensionPointer, int index, int size, int type, int stride, byte[] pointer)

        #region void glVertexAttribPointerNV([In] IntPtr extensionPointer, int index, int size, int type, int stride, double[] pointer)
        // GLvoid glVertexAttribPointerNV(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg index\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]float64[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg index\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]float64[])\r\nret")]
        #endif
        public static void glVertexAttribPointerNV([In] IntPtr extensionPointer, int index, int size, int type, int stride, double[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttribPointerNV([In] IntPtr extensionPointer, int index, int size, int type, int stride, double[] pointer)

        #region void glVertexAttribPointerNV([In] IntPtr extensionPointer, int index, int size, int type, int stride, uint[] pointer)
        // GLvoid glVertexAttribPointerNV(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid* pointer)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg index\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int32[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg index\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int32[])\r\nret")]
        #endif
        public static void glVertexAttribPointerNV([In] IntPtr extensionPointer, int index, int size, int type, int stride, uint[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttribPointerNV([In] IntPtr extensionPointer, int index, int size, int type, int stride, uint[] pointer)

        #region void glVertexAttribPointerNV([In] IntPtr extensionPointer, int index, int size, int type, int stride, sbyte[] pointer)
        // GLvoid glVertexAttribPointerNV(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid* pointer)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg index\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int8[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg index\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int8[])\r\nret")]
        #endif
        public static void glVertexAttribPointerNV([In] IntPtr extensionPointer, int index, int size, int type, int stride, sbyte[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttribPointerNV([In] IntPtr extensionPointer, int index, int size, int type, int stride, sbyte[] pointer)

        #region void glVertexAttribPointerNV([In] IntPtr extensionPointer, int index, int size, int type, int stride, ushort[] pointer)
        // GLvoid glVertexAttribPointerNV(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid* pointer)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg index\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int16[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg index\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int16[])\r\nret")]
        #endif
        public static void glVertexAttribPointerNV([In] IntPtr extensionPointer, int index, int size, int type, int stride, ushort[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttribPointerNV([In] IntPtr extensionPointer, int index, int size, int type, int stride, ushort[] pointer)

        #region void glVertexAttribPointerNV([In] IntPtr extensionPointer, int index, int size, int type, int stride, void* pointer)
        // GLvoid glVertexAttribPointerNV(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid* pointer)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg index\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]void*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg index\r\nldarg size\r\nldarg type\r\nldarg stride\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]void*)\r\nret")]
        #endif
        public static unsafe void glVertexAttribPointerNV([In] IntPtr extensionPointer, int index, int size, int type, int stride, void* pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttribPointerNV([In] IntPtr extensionPointer, int index, int size, int type, int stride, void* pointer)
        #endregion Overloads for GLvoid glVertexAttribPointerNV(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid* pointer)

        #region void glVertexAttrib1sNV([In] IntPtr extensionPointer, int index, short x)
        // GLvoid glVertexAttrib1sNV(GLuint index, GLshort x)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg x\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg x\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int16)\r\nret")]
        #endif
        public static void glVertexAttrib1sNV([In] IntPtr extensionPointer, int index, short x) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib1sNV([In] IntPtr extensionPointer, int index, short x)

        #region void glVertexAttrib1fNV([In] IntPtr extensionPointer, int index, float x)
        // GLvoid glVertexAttrib1fNV(GLuint index, GLfloat x)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg x\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg x\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float32)\r\nret")]
        #endif
        public static void glVertexAttrib1fNV([In] IntPtr extensionPointer, int index, float x) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib1fNV([In] IntPtr extensionPointer, int index, float x)

        #region void glVertexAttrib1dNV([In] IntPtr extensionPointer, int index, double x)
        // GLvoid glVertexAttrib1dNV(GLuint index, GLdouble x)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg x\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float64)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg x\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float64)\r\nret")]
        #endif
        public static void glVertexAttrib1dNV([In] IntPtr extensionPointer, int index, double x) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib1dNV([In] IntPtr extensionPointer, int index, double x)

        #region void glVertexAttrib2sNV([In] IntPtr extensionPointer, int index, short x, short y)
        // GLvoid glVertexAttrib2sNV(GLuint index, GLshort x, GLshort y)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg x\r\nldarg y\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int16,[in]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg x\r\nldarg y\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int16,[in]int16)\r\nret")]
        #endif
        public static void glVertexAttrib2sNV([In] IntPtr extensionPointer, int index, short x, short y) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib2sNV([In] IntPtr extensionPointer, int index, short x, short y)

        #region void glVertexAttrib2fNV([In] IntPtr extensionPointer, int index, float x, float y)
        // GLvoid glVertexAttrib2fNV(GLuint index, GLfloat x, GLfloat y)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg x\r\nldarg y\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float32,[in]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg x\r\nldarg y\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float32,[in]float32)\r\nret")]
        #endif
        public static void glVertexAttrib2fNV([In] IntPtr extensionPointer, int index, float x, float y) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib2fNV([In] IntPtr extensionPointer, int index, float x, float y)

        #region void glVertexAttrib2dNV([In] IntPtr extensionPointer, int index, double x, double y)
        // GLvoid glVertexAttrib2dNV(GLuint index, GLdouble x, GLdouble y)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg x\r\nldarg y\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float64,[in]float64)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg x\r\nldarg y\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float64,[in]float64)\r\nret")]
        #endif
        public static void glVertexAttrib2dNV([In] IntPtr extensionPointer, int index, double x, double y) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib2dNV([In] IntPtr extensionPointer, int index, double x, double y)

        #region void glVertexAttrib3sNV([In] IntPtr extensionPointer, int index, short x, short y, short z)
        // GLvoid glVertexAttrib3sNV(GLuint index, GLshort x, GLshort y, GLshort z)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg index\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int16,[in]int16,[in]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg index\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int16,[in]int16,[in]int16)\r\nret")]
        #endif
        public static void glVertexAttrib3sNV([In] IntPtr extensionPointer, int index, short x, short y, short z) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib3sNV([In] IntPtr extensionPointer, int index, short x, short y, short z)

        #region void glVertexAttrib3fNV([In] IntPtr extensionPointer, int index, float x, float y, float z)
        // GLvoid glVertexAttrib3fNV(GLuint index, GLfloat x, GLfloat y, GLfloat z)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg index\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float32,[in]float32,[in]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg index\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float32,[in]float32,[in]float32)\r\nret")]
        #endif
        public static void glVertexAttrib3fNV([In] IntPtr extensionPointer, int index, float x, float y, float z) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib3fNV([In] IntPtr extensionPointer, int index, float x, float y, float z)

        #region void glVertexAttrib3dNV([In] IntPtr extensionPointer, int index, double x, double y, double z)
        // GLvoid glVertexAttrib3dNV(GLuint index, GLdouble x, GLdouble y, GLdouble z)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg index\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float64,[in]float64,[in]float64)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg index\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float64,[in]float64,[in]float64)\r\nret")]
        #endif
        public static void glVertexAttrib3dNV([In] IntPtr extensionPointer, int index, double x, double y, double z) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib3dNV([In] IntPtr extensionPointer, int index, double x, double y, double z)

        #region void glVertexAttrib4sNV([In] IntPtr extensionPointer, int index, short x, short y, short z, short w)
        // GLvoid glVertexAttrib4sNV(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg index\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg w\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int16,[in]int16,[in]int16,[in]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg index\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg w\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int16,[in]int16,[in]int16,[in]int16)\r\nret")]
        #endif
        public static void glVertexAttrib4sNV([In] IntPtr extensionPointer, int index, short x, short y, short z, short w) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib4sNV([In] IntPtr extensionPointer, int index, short x, short y, short z, short w)

        #region void glVertexAttrib4fNV([In] IntPtr extensionPointer, int index, float x, float y, float z, float w)
        // GLvoid glVertexAttrib4fNV(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg index\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg w\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float32,[in]float32,[in]float32,[in]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg index\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg w\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float32,[in]float32,[in]float32,[in]float32)\r\nret")]
        #endif
        public static void glVertexAttrib4fNV([In] IntPtr extensionPointer, int index, float x, float y, float z, float w) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib4fNV([In] IntPtr extensionPointer, int index, float x, float y, float z, float w)

        #region void glVertexAttrib4dNV([In] IntPtr extensionPointer, int index, double x, double y, double z, double w)
        // GLvoid glVertexAttrib4dNV(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg index\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg w\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float64,[in]float64,[in]float64,[in]float64)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg index\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg w\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float64,[in]float64,[in]float64,[in]float64)\r\nret")]
        #endif
        public static void glVertexAttrib4dNV([In] IntPtr extensionPointer, int index, double x, double y, double z, double w) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib4dNV([In] IntPtr extensionPointer, int index, double x, double y, double z, double w)

        #region void glVertexAttrib4ubNV([In] IntPtr extensionPointer, int index, byte x, byte y, byte z, byte w)
        // GLvoid glVertexAttrib4ubNV(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg index\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg w\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]unsigned int8,[in]unsigned int8,[in]unsigned int8,[in]unsigned int8)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg index\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg w\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]unsigned int8,[in]unsigned int8,[in]unsigned int8,[in]unsigned int8)\r\nret")]
        #endif
        public static void glVertexAttrib4ubNV([In] IntPtr extensionPointer, int index, byte x, byte y, byte z, byte w) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib4ubNV([In] IntPtr extensionPointer, int index, byte x, byte y, byte z, byte w)

        #region Overloads for GLvoid glVertexAttrib1svNV(GLuint index, const GLshort* v)
        #region void glVertexAttrib1svNV([In] IntPtr extensionPointer, int index, ref short v)
        // GLvoid glVertexAttrib1svNV(GLuint index, const GLshort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]int16)\r\nret")]
        #endif
        public static void glVertexAttrib1svNV([In] IntPtr extensionPointer, int index, ref short v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib1svNV([In] IntPtr extensionPointer, int index, ref short v)

        #region void glVertexAttrib1svNV([In] IntPtr extensionPointer, int index, short[] v)
        // GLvoid glVertexAttrib1svNV(GLuint index, const GLshort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int16[])\r\nret")]
        #endif
        public static void glVertexAttrib1svNV([In] IntPtr extensionPointer, int index, short[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib1svNV([In] IntPtr extensionPointer, int index, short[] v)

        #region void glVertexAttrib1svNV([In] IntPtr extensionPointer, int index, IntPtr v)
        // GLvoid glVertexAttrib1svNV(GLuint index, const GLshort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glVertexAttrib1svNV([In] IntPtr extensionPointer, int index, IntPtr v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib1svNV([In] IntPtr extensionPointer, int index, IntPtr v)

        #region void glVertexAttrib1svNV([In] IntPtr extensionPointer, int index, short* v)
        // GLvoid glVertexAttrib1svNV(GLuint index, const GLshort* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int16*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int16*)\r\nret")]
        #endif
        public static unsafe void glVertexAttrib1svNV([In] IntPtr extensionPointer, int index, short* v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib1svNV([In] IntPtr extensionPointer, int index, short* v)
        #endregion Overloads for GLvoid glVertexAttrib1svNV(GLuint index, const GLshort* v)

        #region Overloads for GLvoid glVertexAttrib1fvNV(GLuint index, const GLfloat* v)
        #region void glVertexAttrib1fvNV([In] IntPtr extensionPointer, int index, ref float v)
        // GLvoid glVertexAttrib1fvNV(GLuint index, const GLfloat* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]float32)\r\nret")]
        #endif
        public static void glVertexAttrib1fvNV([In] IntPtr extensionPointer, int index, ref float v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib1fvNV([In] IntPtr extensionPointer, int index, ref float v)

        #region void glVertexAttrib1fvNV([In] IntPtr extensionPointer, int index, float[] v)
        // GLvoid glVertexAttrib1fvNV(GLuint index, const GLfloat* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float32[])\r\nret")]
        #endif
        public static void glVertexAttrib1fvNV([In] IntPtr extensionPointer, int index, float[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib1fvNV([In] IntPtr extensionPointer, int index, float[] v)

        #region void glVertexAttrib1fvNV([In] IntPtr extensionPointer, int index, IntPtr v)
        // GLvoid glVertexAttrib1fvNV(GLuint index, const GLfloat* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glVertexAttrib1fvNV([In] IntPtr extensionPointer, int index, IntPtr v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib1fvNV([In] IntPtr extensionPointer, int index, IntPtr v)

        #region void glVertexAttrib1fvNV([In] IntPtr extensionPointer, int index, float* v)
        // GLvoid glVertexAttrib1fvNV(GLuint index, const GLfloat* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float32*)\r\nret")]
        #endif
        public static unsafe void glVertexAttrib1fvNV([In] IntPtr extensionPointer, int index, float* v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib1fvNV([In] IntPtr extensionPointer, int index, float* v)
        #endregion Overloads for GLvoid glVertexAttrib1fvNV(GLuint index, const GLfloat* v)

        #region Overloads for GLvoid glVertexAttrib1dvNV(GLuint index, const GLdouble* v)
        #region void glVertexAttrib1dvNV([In] IntPtr extensionPointer, int index, ref double v)
        // GLvoid glVertexAttrib1dvNV(GLuint index, const GLdouble* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]float64)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]float64)\r\nret")]
        #endif
        public static void glVertexAttrib1dvNV([In] IntPtr extensionPointer, int index, ref double v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib1dvNV([In] IntPtr extensionPointer, int index, ref double v)

        #region void glVertexAttrib1dvNV([In] IntPtr extensionPointer, int index, double[] v)
        // GLvoid glVertexAttrib1dvNV(GLuint index, const GLdouble* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float64[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float64[])\r\nret")]
        #endif
        public static void glVertexAttrib1dvNV([In] IntPtr extensionPointer, int index, double[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib1dvNV([In] IntPtr extensionPointer, int index, double[] v)

        #region void glVertexAttrib1dvNV([In] IntPtr extensionPointer, int index, IntPtr v)
        // GLvoid glVertexAttrib1dvNV(GLuint index, const GLdouble* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glVertexAttrib1dvNV([In] IntPtr extensionPointer, int index, IntPtr v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib1dvNV([In] IntPtr extensionPointer, int index, IntPtr v)

        #region void glVertexAttrib1dvNV([In] IntPtr extensionPointer, int index, double* v)
        // GLvoid glVertexAttrib1dvNV(GLuint index, const GLdouble* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float64*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float64*)\r\nret")]
        #endif
        public static unsafe void glVertexAttrib1dvNV([In] IntPtr extensionPointer, int index, double* v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib1dvNV([In] IntPtr extensionPointer, int index, double* v)
        #endregion Overloads for GLvoid glVertexAttrib1dvNV(GLuint index, const GLdouble* v)

        #region Overloads for GLvoid glVertexAttrib2svNV(GLuint index, const GLshort* v)
        #region void glVertexAttrib2svNV([In] IntPtr extensionPointer, int index, ref short v)
        // GLvoid glVertexAttrib2svNV(GLuint index, const GLshort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]int16)\r\nret")]
        #endif
        public static void glVertexAttrib2svNV([In] IntPtr extensionPointer, int index, ref short v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib2svNV([In] IntPtr extensionPointer, int index, ref short v)

        #region void glVertexAttrib2svNV([In] IntPtr extensionPointer, int index, short[] v)
        // GLvoid glVertexAttrib2svNV(GLuint index, const GLshort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int16[])\r\nret")]
        #endif
        public static void glVertexAttrib2svNV([In] IntPtr extensionPointer, int index, short[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib2svNV([In] IntPtr extensionPointer, int index, short[] v)

        #region void glVertexAttrib2svNV([In] IntPtr extensionPointer, int index, IntPtr v)
        // GLvoid glVertexAttrib2svNV(GLuint index, const GLshort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glVertexAttrib2svNV([In] IntPtr extensionPointer, int index, IntPtr v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib2svNV([In] IntPtr extensionPointer, int index, IntPtr v)

        #region void glVertexAttrib2svNV([In] IntPtr extensionPointer, int index, short* v)
        // GLvoid glVertexAttrib2svNV(GLuint index, const GLshort* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int16*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int16*)\r\nret")]
        #endif
        public static unsafe void glVertexAttrib2svNV([In] IntPtr extensionPointer, int index, short* v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib2svNV([In] IntPtr extensionPointer, int index, short* v)
        #endregion Overloads for GLvoid glVertexAttrib2svNV(GLuint index, const GLshort* v)

        #region Overloads for GLvoid glVertexAttrib2fvNV(GLuint index, const GLfloat* v)
        #region void glVertexAttrib2fvNV([In] IntPtr extensionPointer, int index, ref float v)
        // GLvoid glVertexAttrib2fvNV(GLuint index, const GLfloat* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]float32)\r\nret")]
        #endif
        public static void glVertexAttrib2fvNV([In] IntPtr extensionPointer, int index, ref float v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib2fvNV([In] IntPtr extensionPointer, int index, ref float v)

        #region void glVertexAttrib2fvNV([In] IntPtr extensionPointer, int index, float[] v)
        // GLvoid glVertexAttrib2fvNV(GLuint index, const GLfloat* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float32[])\r\nret")]
        #endif
        public static void glVertexAttrib2fvNV([In] IntPtr extensionPointer, int index, float[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib2fvNV([In] IntPtr extensionPointer, int index, float[] v)

        #region void glVertexAttrib2fvNV([In] IntPtr extensionPointer, int index, IntPtr v)
        // GLvoid glVertexAttrib2fvNV(GLuint index, const GLfloat* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glVertexAttrib2fvNV([In] IntPtr extensionPointer, int index, IntPtr v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib2fvNV([In] IntPtr extensionPointer, int index, IntPtr v)

        #region void glVertexAttrib2fvNV([In] IntPtr extensionPointer, int index, float* v)
        // GLvoid glVertexAttrib2fvNV(GLuint index, const GLfloat* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float32*)\r\nret")]
        #endif
        public static unsafe void glVertexAttrib2fvNV([In] IntPtr extensionPointer, int index, float* v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib2fvNV([In] IntPtr extensionPointer, int index, float* v)
        #endregion Overloads for GLvoid glVertexAttrib2fvNV(GLuint index, const GLfloat* v)

        #region Overloads for GLvoid glVertexAttrib2dvNV(GLuint index, const GLdouble* v)
        #region void glVertexAttrib2dvNV([In] IntPtr extensionPointer, int index, ref double v)
        // GLvoid glVertexAttrib2dvNV(GLuint index, const GLdouble* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]float64)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]float64)\r\nret")]
        #endif
        public static void glVertexAttrib2dvNV([In] IntPtr extensionPointer, int index, ref double v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib2dvNV([In] IntPtr extensionPointer, int index, ref double v)

        #region void glVertexAttrib2dvNV([In] IntPtr extensionPointer, int index, double[] v)
        // GLvoid glVertexAttrib2dvNV(GLuint index, const GLdouble* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float64[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float64[])\r\nret")]
        #endif
        public static void glVertexAttrib2dvNV([In] IntPtr extensionPointer, int index, double[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib2dvNV([In] IntPtr extensionPointer, int index, double[] v)

        #region void glVertexAttrib2dvNV([In] IntPtr extensionPointer, int index, IntPtr v)
        // GLvoid glVertexAttrib2dvNV(GLuint index, const GLdouble* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glVertexAttrib2dvNV([In] IntPtr extensionPointer, int index, IntPtr v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib2dvNV([In] IntPtr extensionPointer, int index, IntPtr v)

        #region void glVertexAttrib2dvNV([In] IntPtr extensionPointer, int index, double* v)
        // GLvoid glVertexAttrib2dvNV(GLuint index, const GLdouble* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float64*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float64*)\r\nret")]
        #endif
        public static unsafe void glVertexAttrib2dvNV([In] IntPtr extensionPointer, int index, double* v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib2dvNV([In] IntPtr extensionPointer, int index, double* v)
        #endregion Overloads for GLvoid glVertexAttrib2dvNV(GLuint index, const GLdouble* v)

        #region Overloads for GLvoid glVertexAttrib3svNV(GLuint index, const GLshort* v)
        #region void glVertexAttrib3svNV([In] IntPtr extensionPointer, int index, ref short v)
        // GLvoid glVertexAttrib3svNV(GLuint index, const GLshort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]int16)\r\nret")]
        #endif
        public static void glVertexAttrib3svNV([In] IntPtr extensionPointer, int index, ref short v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib3svNV([In] IntPtr extensionPointer, int index, ref short v)

        #region void glVertexAttrib3svNV([In] IntPtr extensionPointer, int index, short[] v)
        // GLvoid glVertexAttrib3svNV(GLuint index, const GLshort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int16[])\r\nret")]
        #endif
        public static void glVertexAttrib3svNV([In] IntPtr extensionPointer, int index, short[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib3svNV([In] IntPtr extensionPointer, int index, short[] v)

        #region void glVertexAttrib3svNV([In] IntPtr extensionPointer, int index, IntPtr v)
        // GLvoid glVertexAttrib3svNV(GLuint index, const GLshort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glVertexAttrib3svNV([In] IntPtr extensionPointer, int index, IntPtr v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib3svNV([In] IntPtr extensionPointer, int index, IntPtr v)

        #region void glVertexAttrib3svNV([In] IntPtr extensionPointer, int index, short* v)
        // GLvoid glVertexAttrib3svNV(GLuint index, const GLshort* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int16*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int16*)\r\nret")]
        #endif
        public static unsafe void glVertexAttrib3svNV([In] IntPtr extensionPointer, int index, short* v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib3svNV([In] IntPtr extensionPointer, int index, short* v)
        #endregion Overloads for GLvoid glVertexAttrib3svNV(GLuint index, const GLshort* v)

        #region Overloads for GLvoid glVertexAttrib3fvNV(GLuint index, const GLfloat* v)
        #region void glVertexAttrib3fvNV([In] IntPtr extensionPointer, int index, ref float v)
        // GLvoid glVertexAttrib3fvNV(GLuint index, const GLfloat* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]float32)\r\nret")]
        #endif
        public static void glVertexAttrib3fvNV([In] IntPtr extensionPointer, int index, ref float v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib3fvNV([In] IntPtr extensionPointer, int index, ref float v)

        #region void glVertexAttrib3fvNV([In] IntPtr extensionPointer, int index, float[] v)
        // GLvoid glVertexAttrib3fvNV(GLuint index, const GLfloat* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float32[])\r\nret")]
        #endif
        public static void glVertexAttrib3fvNV([In] IntPtr extensionPointer, int index, float[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib3fvNV([In] IntPtr extensionPointer, int index, float[] v)

        #region void glVertexAttrib3fvNV([In] IntPtr extensionPointer, int index, IntPtr v)
        // GLvoid glVertexAttrib3fvNV(GLuint index, const GLfloat* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glVertexAttrib3fvNV([In] IntPtr extensionPointer, int index, IntPtr v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib3fvNV([In] IntPtr extensionPointer, int index, IntPtr v)

        #region void glVertexAttrib3fvNV([In] IntPtr extensionPointer, int index, float* v)
        // GLvoid glVertexAttrib3fvNV(GLuint index, const GLfloat* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float32*)\r\nret")]
        #endif
        public static unsafe void glVertexAttrib3fvNV([In] IntPtr extensionPointer, int index, float* v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib3fvNV([In] IntPtr extensionPointer, int index, float* v)
        #endregion Overloads for GLvoid glVertexAttrib3fvNV(GLuint index, const GLfloat* v)

        #region Overloads for GLvoid glVertexAttrib3dvNV(GLuint index, const GLdouble* v)
        #region void glVertexAttrib3dvNV([In] IntPtr extensionPointer, int index, ref double v)
        // GLvoid glVertexAttrib3dvNV(GLuint index, const GLdouble* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]float64)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]float64)\r\nret")]
        #endif
        public static void glVertexAttrib3dvNV([In] IntPtr extensionPointer, int index, ref double v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib3dvNV([In] IntPtr extensionPointer, int index, ref double v)

        #region void glVertexAttrib3dvNV([In] IntPtr extensionPointer, int index, double[] v)
        // GLvoid glVertexAttrib3dvNV(GLuint index, const GLdouble* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float64[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float64[])\r\nret")]
        #endif
        public static void glVertexAttrib3dvNV([In] IntPtr extensionPointer, int index, double[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib3dvNV([In] IntPtr extensionPointer, int index, double[] v)

        #region void glVertexAttrib3dvNV([In] IntPtr extensionPointer, int index, IntPtr v)
        // GLvoid glVertexAttrib3dvNV(GLuint index, const GLdouble* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glVertexAttrib3dvNV([In] IntPtr extensionPointer, int index, IntPtr v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib3dvNV([In] IntPtr extensionPointer, int index, IntPtr v)

        #region void glVertexAttrib3dvNV([In] IntPtr extensionPointer, int index, double* v)
        // GLvoid glVertexAttrib3dvNV(GLuint index, const GLdouble* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float64*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float64*)\r\nret")]
        #endif
        public static unsafe void glVertexAttrib3dvNV([In] IntPtr extensionPointer, int index, double* v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib3dvNV([In] IntPtr extensionPointer, int index, double* v)
        #endregion Overloads for GLvoid glVertexAttrib3dvNV(GLuint index, const GLdouble* v)

        #region Overloads for GLvoid glVertexAttrib4svNV(GLuint index, const GLshort* v)
        #region void glVertexAttrib4svNV([In] IntPtr extensionPointer, int index, ref short v)
        // GLvoid glVertexAttrib4svNV(GLuint index, const GLshort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]int16)\r\nret")]
        #endif
        public static void glVertexAttrib4svNV([In] IntPtr extensionPointer, int index, ref short v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib4svNV([In] IntPtr extensionPointer, int index, ref short v)

        #region void glVertexAttrib4svNV([In] IntPtr extensionPointer, int index, short[] v)
        // GLvoid glVertexAttrib4svNV(GLuint index, const GLshort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int16[])\r\nret")]
        #endif
        public static void glVertexAttrib4svNV([In] IntPtr extensionPointer, int index, short[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib4svNV([In] IntPtr extensionPointer, int index, short[] v)

        #region void glVertexAttrib4svNV([In] IntPtr extensionPointer, int index, IntPtr v)
        // GLvoid glVertexAttrib4svNV(GLuint index, const GLshort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glVertexAttrib4svNV([In] IntPtr extensionPointer, int index, IntPtr v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib4svNV([In] IntPtr extensionPointer, int index, IntPtr v)

        #region void glVertexAttrib4svNV([In] IntPtr extensionPointer, int index, short* v)
        // GLvoid glVertexAttrib4svNV(GLuint index, const GLshort* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int16*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int16*)\r\nret")]
        #endif
        public static unsafe void glVertexAttrib4svNV([In] IntPtr extensionPointer, int index, short* v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib4svNV([In] IntPtr extensionPointer, int index, short* v)
        #endregion Overloads for GLvoid glVertexAttrib4svNV(GLuint index, const GLshort* v)

        #region Overloads for GLvoid glVertexAttrib4fvNV(GLuint index, const GLfloat* v)
        #region void glVertexAttrib4fvNV([In] IntPtr extensionPointer, int index, ref float v)
        // GLvoid glVertexAttrib4fvNV(GLuint index, const GLfloat* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]float32)\r\nret")]
        #endif
        public static void glVertexAttrib4fvNV([In] IntPtr extensionPointer, int index, ref float v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib4fvNV([In] IntPtr extensionPointer, int index, ref float v)

        #region void glVertexAttrib4fvNV([In] IntPtr extensionPointer, int index, float[] v)
        // GLvoid glVertexAttrib4fvNV(GLuint index, const GLfloat* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float32[])\r\nret")]
        #endif
        public static void glVertexAttrib4fvNV([In] IntPtr extensionPointer, int index, float[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib4fvNV([In] IntPtr extensionPointer, int index, float[] v)

        #region void glVertexAttrib4fvNV([In] IntPtr extensionPointer, int index, IntPtr v)
        // GLvoid glVertexAttrib4fvNV(GLuint index, const GLfloat* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glVertexAttrib4fvNV([In] IntPtr extensionPointer, int index, IntPtr v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib4fvNV([In] IntPtr extensionPointer, int index, IntPtr v)

        #region void glVertexAttrib4fvNV([In] IntPtr extensionPointer, int index, float* v)
        // GLvoid glVertexAttrib4fvNV(GLuint index, const GLfloat* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float32*)\r\nret")]
        #endif
        public static unsafe void glVertexAttrib4fvNV([In] IntPtr extensionPointer, int index, float* v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib4fvNV([In] IntPtr extensionPointer, int index, float* v)
        #endregion Overloads for GLvoid glVertexAttrib4fvNV(GLuint index, const GLfloat* v)

        #region Overloads for GLvoid glVertexAttrib4dvNV(GLuint index, const GLdouble* v)
        #region void glVertexAttrib4dvNV([In] IntPtr extensionPointer, int index, ref double v)
        // GLvoid glVertexAttrib4dvNV(GLuint index, const GLdouble* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]float64)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]float64)\r\nret")]
        #endif
        public static void glVertexAttrib4dvNV([In] IntPtr extensionPointer, int index, ref double v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib4dvNV([In] IntPtr extensionPointer, int index, ref double v)

        #region void glVertexAttrib4dvNV([In] IntPtr extensionPointer, int index, double[] v)
        // GLvoid glVertexAttrib4dvNV(GLuint index, const GLdouble* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float64[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float64[])\r\nret")]
        #endif
        public static void glVertexAttrib4dvNV([In] IntPtr extensionPointer, int index, double[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib4dvNV([In] IntPtr extensionPointer, int index, double[] v)

        #region void glVertexAttrib4dvNV([In] IntPtr extensionPointer, int index, IntPtr v)
        // GLvoid glVertexAttrib4dvNV(GLuint index, const GLdouble* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glVertexAttrib4dvNV([In] IntPtr extensionPointer, int index, IntPtr v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib4dvNV([In] IntPtr extensionPointer, int index, IntPtr v)

        #region void glVertexAttrib4dvNV([In] IntPtr extensionPointer, int index, double* v)
        // GLvoid glVertexAttrib4dvNV(GLuint index, const GLdouble* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float64*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float64*)\r\nret")]
        #endif
        public static unsafe void glVertexAttrib4dvNV([In] IntPtr extensionPointer, int index, double* v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib4dvNV([In] IntPtr extensionPointer, int index, double* v)
        #endregion Overloads for GLvoid glVertexAttrib4dvNV(GLuint index, const GLdouble* v)

        #region Overloads for GLvoid glVertexAttrib4ubvNV(GLuint index, const GLubyte* v)
        #region void glVertexAttrib4ubvNV([In] IntPtr extensionPointer, int index, ref byte v)
        // GLvoid glVertexAttrib4ubvNV(GLuint index, const GLubyte* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]unsigned int8)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]unsigned int8)\r\nret")]
        #endif
        public static void glVertexAttrib4ubvNV([In] IntPtr extensionPointer, int index, ref byte v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib4ubvNV([In] IntPtr extensionPointer, int index, ref byte v)

        #region void glVertexAttrib4ubvNV([In] IntPtr extensionPointer, int index, byte[] v)
        // GLvoid glVertexAttrib4ubvNV(GLuint index, const GLubyte* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]unsigned int8[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]unsigned int8[])\r\nret")]
        #endif
        public static void glVertexAttrib4ubvNV([In] IntPtr extensionPointer, int index, byte[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib4ubvNV([In] IntPtr extensionPointer, int index, byte[] v)

        #region void glVertexAttrib4ubvNV([In] IntPtr extensionPointer, int index, IntPtr v)
        // GLvoid glVertexAttrib4ubvNV(GLuint index, const GLubyte* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glVertexAttrib4ubvNV([In] IntPtr extensionPointer, int index, IntPtr v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib4ubvNV([In] IntPtr extensionPointer, int index, IntPtr v)

        #region void glVertexAttrib4ubvNV([In] IntPtr extensionPointer, int index, byte* v)
        // GLvoid glVertexAttrib4ubvNV(GLuint index, const GLubyte* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]unsigned int8*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]unsigned int8*)\r\nret")]
        #endif
        public static unsafe void glVertexAttrib4ubvNV([In] IntPtr extensionPointer, int index, byte* v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib4ubvNV([In] IntPtr extensionPointer, int index, byte* v)
        #endregion Overloads for GLvoid glVertexAttrib4ubvNV(GLuint index, const GLubyte* v)

        #region Overloads for GLvoid glVertexAttribs1svNV(GLuint index, GLsizei n, const GLshort* v)
        #region void glVertexAttribs1svNV([In] IntPtr extensionPointer, int index, int n, ref short v)
        // GLvoid glVertexAttribs1svNV(GLuint index, GLsizei n, const GLshort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in][out]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in][out]int16)\r\nret")]
        #endif
        public static void glVertexAttribs1svNV([In] IntPtr extensionPointer, int index, int n, ref short v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttribs1svNV([In] IntPtr extensionPointer, int index, int n, ref short v)

        #region void glVertexAttribs1svNV([In] IntPtr extensionPointer, int index, int n, short[] v)
        // GLvoid glVertexAttribs1svNV(GLuint index, GLsizei n, const GLshort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int16[])\r\nret")]
        #endif
        public static void glVertexAttribs1svNV([In] IntPtr extensionPointer, int index, int n, short[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttribs1svNV([In] IntPtr extensionPointer, int index, int n, short[] v)

        #region void glVertexAttribs1svNV([In] IntPtr extensionPointer, int index, int n, IntPtr v)
        // GLvoid glVertexAttribs1svNV(GLuint index, GLsizei n, const GLshort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]native int)\r\nret")]
        #endif
        public static void glVertexAttribs1svNV([In] IntPtr extensionPointer, int index, int n, IntPtr v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttribs1svNV([In] IntPtr extensionPointer, int index, int n, IntPtr v)

        #region void glVertexAttribs1svNV([In] IntPtr extensionPointer, int index, int n, short* v)
        // GLvoid glVertexAttribs1svNV(GLuint index, GLsizei n, const GLshort* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int16*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int16*)\r\nret")]
        #endif
        public static unsafe void glVertexAttribs1svNV([In] IntPtr extensionPointer, int index, int n, short* v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttribs1svNV([In] IntPtr extensionPointer, int index, int n, short* v)
        #endregion Overloads for GLvoid glVertexAttribs1svNV(GLuint index, GLsizei n, const GLshort* v)

        #region Overloads for GLvoid glVertexAttribs1fvNV(GLuint index, GLsizei n, const GLfloat* v)
        #region void glVertexAttribs1fvNV([In] IntPtr extensionPointer, int index, int n, ref float v)
        // GLvoid glVertexAttribs1fvNV(GLuint index, GLsizei n, const GLfloat* v)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in][out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in][out]float32)\r\nret")]
        #endif
        public static void glVertexAttribs1fvNV([In] IntPtr extensionPointer, int index, int n, ref float v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttribs1fvNV([In] IntPtr extensionPointer, int index, int n, ref float v)

        #region void glVertexAttribs1fvNV([In] IntPtr extensionPointer, int index, int n, float[] v)
        // GLvoid glVertexAttribs1fvNV(GLuint index, GLsizei n, const GLfloat* v)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]float32[])\r\nret")]
        #endif
        public static void glVertexAttribs1fvNV([In] IntPtr extensionPointer, int index, int n, float[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttribs1fvNV([In] IntPtr extensionPointer, int index, int n, float[] v)

        #region void glVertexAttribs1fvNV([In] IntPtr extensionPointer, int index, int n, IntPtr v)
        // GLvoid glVertexAttribs1fvNV(GLuint index, GLsizei n, const GLfloat* v)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]native int)\r\nret")]
        #endif
        public static void glVertexAttribs1fvNV([In] IntPtr extensionPointer, int index, int n, IntPtr v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttribs1fvNV([In] IntPtr extensionPointer, int index, int n, IntPtr v)

        #region void glVertexAttribs1fvNV([In] IntPtr extensionPointer, int index, int n, float* v)
        // GLvoid glVertexAttribs1fvNV(GLuint index, GLsizei n, const GLfloat* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]float32*)\r\nret")]
        #endif
        public static unsafe void glVertexAttribs1fvNV([In] IntPtr extensionPointer, int index, int n, float* v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttribs1fvNV([In] IntPtr extensionPointer, int index, int n, float* v)
        #endregion Overloads for GLvoid glVertexAttribs1fvNV(GLuint index, GLsizei n, const GLfloat* v)

        #region Overloads for GLvoid glVertexAttribs1dvNV(GLuint index, GLsizei n, const GLdouble* v)
        #region void glVertexAttribs1dvNV([In] IntPtr extensionPointer, int index, int n, ref double v)
        // GLvoid glVertexAttribs1dvNV(GLuint index, GLsizei n, const GLdouble* v)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in][out]float64)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in][out]float64)\r\nret")]
        #endif
        public static void glVertexAttribs1dvNV([In] IntPtr extensionPointer, int index, int n, ref double v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttribs1dvNV([In] IntPtr extensionPointer, int index, int n, ref double v)

        #region void glVertexAttribs1dvNV([In] IntPtr extensionPointer, int index, int n, double[] v)
        // GLvoid glVertexAttribs1dvNV(GLuint index, GLsizei n, const GLdouble* v)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]float64[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]float64[])\r\nret")]
        #endif
        public static void glVertexAttribs1dvNV([In] IntPtr extensionPointer, int index, int n, double[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttribs1dvNV([In] IntPtr extensionPointer, int index, int n, double[] v)

        #region void glVertexAttribs1dvNV([In] IntPtr extensionPointer, int index, int n, IntPtr v)
        // GLvoid glVertexAttribs1dvNV(GLuint index, GLsizei n, const GLdouble* v)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]native int)\r\nret")]
        #endif
        public static void glVertexAttribs1dvNV([In] IntPtr extensionPointer, int index, int n, IntPtr v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttribs1dvNV([In] IntPtr extensionPointer, int index, int n, IntPtr v)

        #region void glVertexAttribs1dvNV([In] IntPtr extensionPointer, int index, int n, double* v)
        // GLvoid glVertexAttribs1dvNV(GLuint index, GLsizei n, const GLdouble* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]float64*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]float64*)\r\nret")]
        #endif
        public static unsafe void glVertexAttribs1dvNV([In] IntPtr extensionPointer, int index, int n, double* v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttribs1dvNV([In] IntPtr extensionPointer, int index, int n, double* v)
        #endregion Overloads for GLvoid glVertexAttribs1dvNV(GLuint index, GLsizei n, const GLdouble* v)

        #region Overloads for GLvoid glVertexAttribs2svNV(GLuint index, GLsizei n, const GLshort* v)
        #region void glVertexAttribs2svNV([In] IntPtr extensionPointer, int index, int n, ref short v)
        // GLvoid glVertexAttribs2svNV(GLuint index, GLsizei n, const GLshort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in][out]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in][out]int16)\r\nret")]
        #endif
        public static void glVertexAttribs2svNV([In] IntPtr extensionPointer, int index, int n, ref short v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttribs2svNV([In] IntPtr extensionPointer, int index, int n, ref short v)

        #region void glVertexAttribs2svNV([In] IntPtr extensionPointer, int index, int n, short[] v)
        // GLvoid glVertexAttribs2svNV(GLuint index, GLsizei n, const GLshort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int16[])\r\nret")]
        #endif
        public static void glVertexAttribs2svNV([In] IntPtr extensionPointer, int index, int n, short[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttribs2svNV([In] IntPtr extensionPointer, int index, int n, short[] v)

        #region void glVertexAttribs2svNV([In] IntPtr extensionPointer, int index, int n, IntPtr v)
        // GLvoid glVertexAttribs2svNV(GLuint index, GLsizei n, const GLshort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]native int)\r\nret")]
        #endif
        public static void glVertexAttribs2svNV([In] IntPtr extensionPointer, int index, int n, IntPtr v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttribs2svNV([In] IntPtr extensionPointer, int index, int n, IntPtr v)

        #region void glVertexAttribs2svNV([In] IntPtr extensionPointer, int index, int n, short* v)
        // GLvoid glVertexAttribs2svNV(GLuint index, GLsizei n, const GLshort* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int16*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int16*)\r\nret")]
        #endif
        public static unsafe void glVertexAttribs2svNV([In] IntPtr extensionPointer, int index, int n, short* v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttribs2svNV([In] IntPtr extensionPointer, int index, int n, short* v)
        #endregion Overloads for GLvoid glVertexAttribs2svNV(GLuint index, GLsizei n, const GLshort* v)

        #region Overloads for GLvoid glVertexAttribs2fvNV(GLuint index, GLsizei n, const GLfloat* v)
        #region void glVertexAttribs2fvNV([In] IntPtr extensionPointer, int index, int n, ref float v)
        // GLvoid glVertexAttribs2fvNV(GLuint index, GLsizei n, const GLfloat* v)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in][out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in][out]float32)\r\nret")]
        #endif
        public static void glVertexAttribs2fvNV([In] IntPtr extensionPointer, int index, int n, ref float v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttribs2fvNV([In] IntPtr extensionPointer, int index, int n, ref float v)

        #region void glVertexAttribs2fvNV([In] IntPtr extensionPointer, int index, int n, float[] v)
        // GLvoid glVertexAttribs2fvNV(GLuint index, GLsizei n, const GLfloat* v)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]float32[])\r\nret")]
        #endif
        public static void glVertexAttribs2fvNV([In] IntPtr extensionPointer, int index, int n, float[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttribs2fvNV([In] IntPtr extensionPointer, int index, int n, float[] v)

        #region void glVertexAttribs2fvNV([In] IntPtr extensionPointer, int index, int n, IntPtr v)
        // GLvoid glVertexAttribs2fvNV(GLuint index, GLsizei n, const GLfloat* v)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]native int)\r\nret")]
        #endif
        public static void glVertexAttribs2fvNV([In] IntPtr extensionPointer, int index, int n, IntPtr v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttribs2fvNV([In] IntPtr extensionPointer, int index, int n, IntPtr v)

        #region void glVertexAttribs2fvNV([In] IntPtr extensionPointer, int index, int n, float* v)
        // GLvoid glVertexAttribs2fvNV(GLuint index, GLsizei n, const GLfloat* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]float32*)\r\nret")]
        #endif
        public static unsafe void glVertexAttribs2fvNV([In] IntPtr extensionPointer, int index, int n, float* v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttribs2fvNV([In] IntPtr extensionPointer, int index, int n, float* v)
        #endregion Overloads for GLvoid glVertexAttribs2fvNV(GLuint index, GLsizei n, const GLfloat* v)

        #region Overloads for GLvoid glVertexAttribs2dvNV(GLuint index, GLsizei n, const GLdouble* v)
        #region void glVertexAttribs2dvNV([In] IntPtr extensionPointer, int index, int n, ref double v)
        // GLvoid glVertexAttribs2dvNV(GLuint index, GLsizei n, const GLdouble* v)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in][out]float64)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in][out]float64)\r\nret")]
        #endif
        public static void glVertexAttribs2dvNV([In] IntPtr extensionPointer, int index, int n, ref double v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttribs2dvNV([In] IntPtr extensionPointer, int index, int n, ref double v)

        #region void glVertexAttribs2dvNV([In] IntPtr extensionPointer, int index, int n, double[] v)
        // GLvoid glVertexAttribs2dvNV(GLuint index, GLsizei n, const GLdouble* v)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]float64[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]float64[])\r\nret")]
        #endif
        public static void glVertexAttribs2dvNV([In] IntPtr extensionPointer, int index, int n, double[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttribs2dvNV([In] IntPtr extensionPointer, int index, int n, double[] v)

        #region void glVertexAttribs2dvNV([In] IntPtr extensionPointer, int index, int n, IntPtr v)
        // GLvoid glVertexAttribs2dvNV(GLuint index, GLsizei n, const GLdouble* v)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]native int)\r\nret")]
        #endif
        public static void glVertexAttribs2dvNV([In] IntPtr extensionPointer, int index, int n, IntPtr v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttribs2dvNV([In] IntPtr extensionPointer, int index, int n, IntPtr v)

        #region void glVertexAttribs2dvNV([In] IntPtr extensionPointer, int index, int n, double* v)
        // GLvoid glVertexAttribs2dvNV(GLuint index, GLsizei n, const GLdouble* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]float64*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]float64*)\r\nret")]
        #endif
        public static unsafe void glVertexAttribs2dvNV([In] IntPtr extensionPointer, int index, int n, double* v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttribs2dvNV([In] IntPtr extensionPointer, int index, int n, double* v)
        #endregion Overloads for GLvoid glVertexAttribs2dvNV(GLuint index, GLsizei n, const GLdouble* v)

        #region Overloads for GLvoid glVertexAttribs3svNV(GLuint index, GLsizei n, const GLshort* v)
        #region void glVertexAttribs3svNV([In] IntPtr extensionPointer, int index, int n, ref short v)
        // GLvoid glVertexAttribs3svNV(GLuint index, GLsizei n, const GLshort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in][out]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in][out]int16)\r\nret")]
        #endif
        public static void glVertexAttribs3svNV([In] IntPtr extensionPointer, int index, int n, ref short v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttribs3svNV([In] IntPtr extensionPointer, int index, int n, ref short v)

        #region void glVertexAttribs3svNV([In] IntPtr extensionPointer, int index, int n, short[] v)
        // GLvoid glVertexAttribs3svNV(GLuint index, GLsizei n, const GLshort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int16[])\r\nret")]
        #endif
        public static void glVertexAttribs3svNV([In] IntPtr extensionPointer, int index, int n, short[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttribs3svNV([In] IntPtr extensionPointer, int index, int n, short[] v)

        #region void glVertexAttribs3svNV([In] IntPtr extensionPointer, int index, int n, IntPtr v)
        // GLvoid glVertexAttribs3svNV(GLuint index, GLsizei n, const GLshort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]native int)\r\nret")]
        #endif
        public static void glVertexAttribs3svNV([In] IntPtr extensionPointer, int index, int n, IntPtr v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttribs3svNV([In] IntPtr extensionPointer, int index, int n, IntPtr v)

        #region void glVertexAttribs3svNV([In] IntPtr extensionPointer, int index, int n, short* v)
        // GLvoid glVertexAttribs3svNV(GLuint index, GLsizei n, const GLshort* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int16*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int16*)\r\nret")]
        #endif
        public static unsafe void glVertexAttribs3svNV([In] IntPtr extensionPointer, int index, int n, short* v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttribs3svNV([In] IntPtr extensionPointer, int index, int n, short* v)
        #endregion Overloads for GLvoid glVertexAttribs3svNV(GLuint index, GLsizei n, const GLshort* v)

        #region Overloads for GLvoid glVertexAttribs3fvNV(GLuint index, GLsizei n, const GLfloat* v)
        #region void glVertexAttribs3fvNV([In] IntPtr extensionPointer, int index, int n, ref float v)
        // GLvoid glVertexAttribs3fvNV(GLuint index, GLsizei n, const GLfloat* v)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in][out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in][out]float32)\r\nret")]
        #endif
        public static void glVertexAttribs3fvNV([In] IntPtr extensionPointer, int index, int n, ref float v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttribs3fvNV([In] IntPtr extensionPointer, int index, int n, ref float v)

        #region void glVertexAttribs3fvNV([In] IntPtr extensionPointer, int index, int n, float[] v)
        // GLvoid glVertexAttribs3fvNV(GLuint index, GLsizei n, const GLfloat* v)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]float32[])\r\nret")]
        #endif
        public static void glVertexAttribs3fvNV([In] IntPtr extensionPointer, int index, int n, float[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttribs3fvNV([In] IntPtr extensionPointer, int index, int n, float[] v)

        #region void glVertexAttribs3fvNV([In] IntPtr extensionPointer, int index, int n, IntPtr v)
        // GLvoid glVertexAttribs3fvNV(GLuint index, GLsizei n, const GLfloat* v)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]native int)\r\nret")]
        #endif
        public static void glVertexAttribs3fvNV([In] IntPtr extensionPointer, int index, int n, IntPtr v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttribs3fvNV([In] IntPtr extensionPointer, int index, int n, IntPtr v)

        #region void glVertexAttribs3fvNV([In] IntPtr extensionPointer, int index, int n, float* v)
        // GLvoid glVertexAttribs3fvNV(GLuint index, GLsizei n, const GLfloat* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]float32*)\r\nret")]
        #endif
        public static unsafe void glVertexAttribs3fvNV([In] IntPtr extensionPointer, int index, int n, float* v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttribs3fvNV([In] IntPtr extensionPointer, int index, int n, float* v)
        #endregion Overloads for GLvoid glVertexAttribs3fvNV(GLuint index, GLsizei n, const GLfloat* v)

        #region Overloads for GLvoid glVertexAttribs3dvNV(GLuint index, GLsizei n, const GLdouble* v)
        #region void glVertexAttribs3dvNV([In] IntPtr extensionPointer, int index, int n, ref double v)
        // GLvoid glVertexAttribs3dvNV(GLuint index, GLsizei n, const GLdouble* v)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in][out]float64)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in][out]float64)\r\nret")]
        #endif
        public static void glVertexAttribs3dvNV([In] IntPtr extensionPointer, int index, int n, ref double v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttribs3dvNV([In] IntPtr extensionPointer, int index, int n, ref double v)

        #region void glVertexAttribs3dvNV([In] IntPtr extensionPointer, int index, int n, double[] v)
        // GLvoid glVertexAttribs3dvNV(GLuint index, GLsizei n, const GLdouble* v)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]float64[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]float64[])\r\nret")]
        #endif
        public static void glVertexAttribs3dvNV([In] IntPtr extensionPointer, int index, int n, double[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttribs3dvNV([In] IntPtr extensionPointer, int index, int n, double[] v)

        #region void glVertexAttribs3dvNV([In] IntPtr extensionPointer, int index, int n, IntPtr v)
        // GLvoid glVertexAttribs3dvNV(GLuint index, GLsizei n, const GLdouble* v)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]native int)\r\nret")]
        #endif
        public static void glVertexAttribs3dvNV([In] IntPtr extensionPointer, int index, int n, IntPtr v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttribs3dvNV([In] IntPtr extensionPointer, int index, int n, IntPtr v)

        #region void glVertexAttribs3dvNV([In] IntPtr extensionPointer, int index, int n, double* v)
        // GLvoid glVertexAttribs3dvNV(GLuint index, GLsizei n, const GLdouble* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]float64*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]float64*)\r\nret")]
        #endif
        public static unsafe void glVertexAttribs3dvNV([In] IntPtr extensionPointer, int index, int n, double* v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttribs3dvNV([In] IntPtr extensionPointer, int index, int n, double* v)
        #endregion Overloads for GLvoid glVertexAttribs3dvNV(GLuint index, GLsizei n, const GLdouble* v)

        #region Overloads for GLvoid glVertexAttribs4svNV(GLuint index, GLsizei n, const GLshort* v)
        #region void glVertexAttribs4svNV([In] IntPtr extensionPointer, int index, int n, ref short v)
        // GLvoid glVertexAttribs4svNV(GLuint index, GLsizei n, const GLshort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in][out]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in][out]int16)\r\nret")]
        #endif
        public static void glVertexAttribs4svNV([In] IntPtr extensionPointer, int index, int n, ref short v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttribs4svNV([In] IntPtr extensionPointer, int index, int n, ref short v)

        #region void glVertexAttribs4svNV([In] IntPtr extensionPointer, int index, int n, short[] v)
        // GLvoid glVertexAttribs4svNV(GLuint index, GLsizei n, const GLshort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int16[])\r\nret")]
        #endif
        public static void glVertexAttribs4svNV([In] IntPtr extensionPointer, int index, int n, short[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttribs4svNV([In] IntPtr extensionPointer, int index, int n, short[] v)

        #region void glVertexAttribs4svNV([In] IntPtr extensionPointer, int index, int n, IntPtr v)
        // GLvoid glVertexAttribs4svNV(GLuint index, GLsizei n, const GLshort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]native int)\r\nret")]
        #endif
        public static void glVertexAttribs4svNV([In] IntPtr extensionPointer, int index, int n, IntPtr v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttribs4svNV([In] IntPtr extensionPointer, int index, int n, IntPtr v)

        #region void glVertexAttribs4svNV([In] IntPtr extensionPointer, int index, int n, short* v)
        // GLvoid glVertexAttribs4svNV(GLuint index, GLsizei n, const GLshort* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int16*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int16*)\r\nret")]
        #endif
        public static unsafe void glVertexAttribs4svNV([In] IntPtr extensionPointer, int index, int n, short* v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttribs4svNV([In] IntPtr extensionPointer, int index, int n, short* v)
        #endregion Overloads for GLvoid glVertexAttribs4svNV(GLuint index, GLsizei n, const GLshort* v)

        #region Overloads for GLvoid glVertexAttribs4fvNV(GLuint index, GLsizei n, const GLfloat* v)
        #region void glVertexAttribs4fvNV([In] IntPtr extensionPointer, int index, int n, ref float v)
        // GLvoid glVertexAttribs4fvNV(GLuint index, GLsizei n, const GLfloat* v)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in][out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in][out]float32)\r\nret")]
        #endif
        public static void glVertexAttribs4fvNV([In] IntPtr extensionPointer, int index, int n, ref float v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttribs4fvNV([In] IntPtr extensionPointer, int index, int n, ref float v)

        #region void glVertexAttribs4fvNV([In] IntPtr extensionPointer, int index, int n, float[] v)
        // GLvoid glVertexAttribs4fvNV(GLuint index, GLsizei n, const GLfloat* v)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]float32[])\r\nret")]
        #endif
        public static void glVertexAttribs4fvNV([In] IntPtr extensionPointer, int index, int n, float[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttribs4fvNV([In] IntPtr extensionPointer, int index, int n, float[] v)

        #region void glVertexAttribs4fvNV([In] IntPtr extensionPointer, int index, int n, IntPtr v)
        // GLvoid glVertexAttribs4fvNV(GLuint index, GLsizei n, const GLfloat* v)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]native int)\r\nret")]
        #endif
        public static void glVertexAttribs4fvNV([In] IntPtr extensionPointer, int index, int n, IntPtr v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttribs4fvNV([In] IntPtr extensionPointer, int index, int n, IntPtr v)

        #region void glVertexAttribs4fvNV([In] IntPtr extensionPointer, int index, int n, float* v)
        // GLvoid glVertexAttribs4fvNV(GLuint index, GLsizei n, const GLfloat* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]float32*)\r\nret")]
        #endif
        public static unsafe void glVertexAttribs4fvNV([In] IntPtr extensionPointer, int index, int n, float* v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttribs4fvNV([In] IntPtr extensionPointer, int index, int n, float* v)
        #endregion Overloads for GLvoid glVertexAttribs4fvNV(GLuint index, GLsizei n, const GLfloat* v)

        #region Overloads for GLvoid glVertexAttribs4dvNV(GLuint index, GLsizei n, const GLdouble* v)
        #region void glVertexAttribs4dvNV([In] IntPtr extensionPointer, int index, int n, ref double v)
        // GLvoid glVertexAttribs4dvNV(GLuint index, GLsizei n, const GLdouble* v)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in][out]float64)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in][out]float64)\r\nret")]
        #endif
        public static void glVertexAttribs4dvNV([In] IntPtr extensionPointer, int index, int n, ref double v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttribs4dvNV([In] IntPtr extensionPointer, int index, int n, ref double v)

        #region void glVertexAttribs4dvNV([In] IntPtr extensionPointer, int index, int n, double[] v)
        // GLvoid glVertexAttribs4dvNV(GLuint index, GLsizei n, const GLdouble* v)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]float64[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]float64[])\r\nret")]
        #endif
        public static void glVertexAttribs4dvNV([In] IntPtr extensionPointer, int index, int n, double[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttribs4dvNV([In] IntPtr extensionPointer, int index, int n, double[] v)

        #region void glVertexAttribs4dvNV([In] IntPtr extensionPointer, int index, int n, IntPtr v)
        // GLvoid glVertexAttribs4dvNV(GLuint index, GLsizei n, const GLdouble* v)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]native int)\r\nret")]
        #endif
        public static void glVertexAttribs4dvNV([In] IntPtr extensionPointer, int index, int n, IntPtr v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttribs4dvNV([In] IntPtr extensionPointer, int index, int n, IntPtr v)

        #region void glVertexAttribs4dvNV([In] IntPtr extensionPointer, int index, int n, double* v)
        // GLvoid glVertexAttribs4dvNV(GLuint index, GLsizei n, const GLdouble* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]float64*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]float64*)\r\nret")]
        #endif
        public static unsafe void glVertexAttribs4dvNV([In] IntPtr extensionPointer, int index, int n, double* v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttribs4dvNV([In] IntPtr extensionPointer, int index, int n, double* v)
        #endregion Overloads for GLvoid glVertexAttribs4dvNV(GLuint index, GLsizei n, const GLdouble* v)

        #region Overloads for GLvoid glVertexAttribs4ubvNV(GLuint index, GLsizei n, const GLubyte* v)
        #region void glVertexAttribs4ubvNV([In] IntPtr extensionPointer, int index, int n, ref byte v)
        // GLvoid glVertexAttribs4ubvNV(GLuint index, GLsizei n, const GLubyte* v)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in][out]unsigned int8)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in][out]unsigned int8)\r\nret")]
        #endif
        public static void glVertexAttribs4ubvNV([In] IntPtr extensionPointer, int index, int n, ref byte v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttribs4ubvNV([In] IntPtr extensionPointer, int index, int n, ref byte v)

        #region void glVertexAttribs4ubvNV([In] IntPtr extensionPointer, int index, int n, byte[] v)
        // GLvoid glVertexAttribs4ubvNV(GLuint index, GLsizei n, const GLubyte* v)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]unsigned int8[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]unsigned int8[])\r\nret")]
        #endif
        public static void glVertexAttribs4ubvNV([In] IntPtr extensionPointer, int index, int n, byte[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttribs4ubvNV([In] IntPtr extensionPointer, int index, int n, byte[] v)

        #region void glVertexAttribs4ubvNV([In] IntPtr extensionPointer, int index, int n, IntPtr v)
        // GLvoid glVertexAttribs4ubvNV(GLuint index, GLsizei n, const GLubyte* v)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]native int)\r\nret")]
        #endif
        public static void glVertexAttribs4ubvNV([In] IntPtr extensionPointer, int index, int n, IntPtr v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttribs4ubvNV([In] IntPtr extensionPointer, int index, int n, IntPtr v)

        #region void glVertexAttribs4ubvNV([In] IntPtr extensionPointer, int index, int n, byte* v)
        // GLvoid glVertexAttribs4ubvNV(GLuint index, GLsizei n, const GLubyte* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]unsigned int8*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]unsigned int8*)\r\nret")]
        #endif
        public static unsafe void glVertexAttribs4ubvNV([In] IntPtr extensionPointer, int index, int n, byte* v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttribs4ubvNV([In] IntPtr extensionPointer, int index, int n, byte* v)
        #endregion Overloads for GLvoid glVertexAttribs4ubvNV(GLuint index, GLsizei n, const GLubyte* v)
        #endregion GL_NV_vertex_program Methods
        #endregion GL_NV_vertex_program (233)

        #region GL_NV_copy_depth_to_color (243)
        #region GL_NV_copy_depth_to_color Constants
        #region GL_DEPTH_STENCIL_TO_RGBA_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DEPTH_STENCIL_TO_RGBA_NV 0x886E
        public const int GL_DEPTH_STENCIL_TO_RGBA_NV = 0x886E;
        #endregion GL_DEPTH_STENCIL_TO_RGBA_NV

        #region GL_DEPTH_STENCIL_TO_BGRA_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DEPTH_STENCIL_TO_BGRA_NV 0x886F
        public const int GL_DEPTH_STENCIL_TO_BGRA_NV = 0x886F;
        #endregion GL_DEPTH_STENCIL_TO_BGRA_NV
        #endregion GL_NV_copy_depth_to_color Constants
        #endregion GL_NV_copy_depth_to_color (243)

        #region GL_NV_multisample_filter_hint (259)
        #region GL_NV_multisample_filter_hint Constants
        #region GL_MULTISAMPLE_FILTER_HINT_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MULTISAMPLE_FILTER_HINT_NV 0x8534
        public const int GL_MULTISAMPLE_FILTER_HINT_NV = 0x8534;
        #endregion GL_MULTISAMPLE_FILTER_HINT_NV
        #endregion GL_NV_multisample_filter_hint Constants
        #endregion GL_NV_multisample_filter_hint (259)

        #region GL_NV_depth_clamp (260)
        #region GL_NV_depth_clamp Constants
        #region GL_DEPTH_CLAMP_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DEPTH_CLAMP_NV 0x864F
        public const int GL_DEPTH_CLAMP_NV = 0x864F;
        #endregion GL_DEPTH_CLAMP_NV
        #endregion GL_NV_depth_clamp Constants
        #endregion GL_NV_depth_clamp (260)

        #region GL_NV_occlusion_query (261)
        #region GL_NV_occlusion_query Constants
        #region GL_OCCLUSION_TEST_HP
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OCCLUSION_TEST_HP 0x8165
        public const int GL_OCCLUSION_TEST_HP = 0x8165;
        #endregion GL_OCCLUSION_TEST_HP

        #region GL_OCCLUSION_TEST_RESULT_HP
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OCCLUSION_TEST_RESULT_HP 0x8166
        public const int GL_OCCLUSION_TEST_RESULT_HP = 0x8166;
        #endregion GL_OCCLUSION_TEST_RESULT_HP

        #region GL_PIXEL_COUNTER_BITS_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PIXEL_COUNTER_BITS_NV 0x8864
        public const int GL_PIXEL_COUNTER_BITS_NV = 0x8864;
        #endregion GL_PIXEL_COUNTER_BITS_NV

        #region GL_CURRENT_OCCLUSION_QUERY_ID_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_CURRENT_OCCLUSION_QUERY_ID_NV 0x8865
        public const int GL_CURRENT_OCCLUSION_QUERY_ID_NV = 0x8865;
        #endregion GL_CURRENT_OCCLUSION_QUERY_ID_NV

        #region GL_PIXEL_COUNT_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PIXEL_COUNT_NV 0x8866
        public const int GL_PIXEL_COUNT_NV = 0x8866;
        #endregion GL_PIXEL_COUNT_NV

        #region GL_PIXEL_COUNT_AVAILABLE_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PIXEL_COUNT_AVAILABLE_NV 0x8867
        public const int GL_PIXEL_COUNT_AVAILABLE_NV = 0x8867;
        #endregion GL_PIXEL_COUNT_AVAILABLE_NV
        #endregion GL_NV_occlusion_query Constants

        #region GL_NV_occlusion_query Methods
        #region Overloads for GLvoid glGenOcclusionQueriesNV(GLsizei n, GLuint* ids)
        #region void glGenOcclusionQueriesNV([In] IntPtr extensionPointer, int n, out int ids)
        // GLvoid glGenOcclusionQueriesNV(GLsizei n, GLuint* ids)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg ids\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[out]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg ids\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[out]int32)\r\nret")]
        #endif
        public static void glGenOcclusionQueriesNV([In] IntPtr extensionPointer, int n, out int ids) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGenOcclusionQueriesNV([In] IntPtr extensionPointer, int n, out int ids)

        #region void glGenOcclusionQueriesNV([In] IntPtr extensionPointer, int n, int[] ids)
        // GLvoid glGenOcclusionQueriesNV(GLsizei n, GLuint* ids)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg ids\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[out]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg ids\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[out]int32[])\r\nret")]
        #endif
        public static void glGenOcclusionQueriesNV([In] IntPtr extensionPointer, int n, int[] ids) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGenOcclusionQueriesNV([In] IntPtr extensionPointer, int n, int[] ids)

        #region void glGenOcclusionQueriesNV([In] IntPtr extensionPointer, int n, IntPtr ids)
        // GLvoid glGenOcclusionQueriesNV(GLsizei n, GLuint* ids)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg ids\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg ids\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGenOcclusionQueriesNV([In] IntPtr extensionPointer, int n, IntPtr ids) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGenOcclusionQueriesNV([In] IntPtr extensionPointer, int n, IntPtr ids)

        #region void glGenOcclusionQueriesNV([In] IntPtr extensionPointer, int n, int* ids)
        // GLvoid glGenOcclusionQueriesNV(GLsizei n, GLuint* ids)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg ids\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[out]int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg ids\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[out]int32*)\r\nret")]
        #endif
        public static unsafe void glGenOcclusionQueriesNV([In] IntPtr extensionPointer, int n, int* ids) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGenOcclusionQueriesNV([In] IntPtr extensionPointer, int n, int* ids)
        #endregion Overloads for GLvoid glGenOcclusionQueriesNV(GLsizei n, GLuint* ids)

        #region Overloads for GLvoid glDeleteOcclusionQueriesNV(GLsizei n, const GLuint* ids)
        #region void glDeleteOcclusionQueriesNV([In] IntPtr extensionPointer, int n, ref int ids)
        // GLvoid glDeleteOcclusionQueriesNV(GLsizei n, const GLuint* ids)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg ids\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg ids\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]int32)\r\nret")]
        #endif
        public static void glDeleteOcclusionQueriesNV([In] IntPtr extensionPointer, int n, ref int ids) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glDeleteOcclusionQueriesNV([In] IntPtr extensionPointer, int n, ref int ids)

        #region void glDeleteOcclusionQueriesNV([In] IntPtr extensionPointer, int n, int[] ids)
        // GLvoid glDeleteOcclusionQueriesNV(GLsizei n, const GLuint* ids)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg ids\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg ids\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32[])\r\nret")]
        #endif
        public static void glDeleteOcclusionQueriesNV([In] IntPtr extensionPointer, int n, int[] ids) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glDeleteOcclusionQueriesNV([In] IntPtr extensionPointer, int n, int[] ids)

        #region void glDeleteOcclusionQueriesNV([In] IntPtr extensionPointer, int n, IntPtr ids)
        // GLvoid glDeleteOcclusionQueriesNV(GLsizei n, const GLuint* ids)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg ids\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg ids\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glDeleteOcclusionQueriesNV([In] IntPtr extensionPointer, int n, IntPtr ids) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glDeleteOcclusionQueriesNV([In] IntPtr extensionPointer, int n, IntPtr ids)

        #region void glDeleteOcclusionQueriesNV([In] IntPtr extensionPointer, int n, int* ids)
        // GLvoid glDeleteOcclusionQueriesNV(GLsizei n, const GLuint* ids)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg ids\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg ids\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32*)\r\nret")]
        #endif
        public static unsafe void glDeleteOcclusionQueriesNV([In] IntPtr extensionPointer, int n, int* ids) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glDeleteOcclusionQueriesNV([In] IntPtr extensionPointer, int n, int* ids)
        #endregion Overloads for GLvoid glDeleteOcclusionQueriesNV(GLsizei n, const GLuint* ids)

        #region int glIsOcclusionQueryNV([In] IntPtr extensionPointer, int id)
        // GLboolean glIsOcclusionQueryNV(GLuint id)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg id\r\nldarg extensionPointer\r\ncalli unmanaged stdcall int32([in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg id\r\nldarg extensionPointer\r\ncalli unmanaged cdecl int32([in]int32)\r\nret")]
        #endif
        public static int glIsOcclusionQueryNV([In] IntPtr extensionPointer, int id) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion int glIsOcclusionQueryNV([In] IntPtr extensionPointer, int id)

        #region void glBeginOcclusionQueryNV([In] IntPtr extensionPointer, int id)
        // GLvoid glBeginOcclusionQueryNV(GLuint id)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg id\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg id\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32)\r\nret")]
        #endif
        public static void glBeginOcclusionQueryNV([In] IntPtr extensionPointer, int id) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glBeginOcclusionQueryNV([In] IntPtr extensionPointer, int id)

        #region void glEndOcclusionQueryNV([In] IntPtr extensionPointer)
        // GLvoid glEndOcclusionQueryNV()
        #if WIN32
        [IlasmAttribute(".maxstack 1\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void()\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 1\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void()\r\nret")]
        #endif
        public static void glEndOcclusionQueryNV([In] IntPtr extensionPointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glEndOcclusionQueryNV([In] IntPtr extensionPointer)

        #region Overloads for GLvoid glGetOcclusionQueryivNV(GLuint id, GLenum pname, GLint* parameters)
        #region void glGetOcclusionQueryivNV([In] IntPtr extensionPointer, int id, int pname, out int parameters)
        // GLvoid glGetOcclusionQueryivNV(GLuint id, GLenum pname, GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]int32)\r\nret")]
        #endif
        public static void glGetOcclusionQueryivNV([In] IntPtr extensionPointer, int id, int pname, out int parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetOcclusionQueryivNV([In] IntPtr extensionPointer, int id, int pname, out int parameters)

        #region void glGetOcclusionQueryivNV([In] IntPtr extensionPointer, int id, int pname, int[] parameters)
        // GLvoid glGetOcclusionQueryivNV(GLuint id, GLenum pname, GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]int32[])\r\nret")]
        #endif
        public static void glGetOcclusionQueryivNV([In] IntPtr extensionPointer, int id, int pname, int[] parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetOcclusionQueryivNV([In] IntPtr extensionPointer, int id, int pname, int[] parameters)

        #region void glGetOcclusionQueryivNV([In] IntPtr extensionPointer, int id, int pname, IntPtr parameters)
        // GLvoid glGetOcclusionQueryivNV(GLuint id, GLenum pname, GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGetOcclusionQueryivNV([In] IntPtr extensionPointer, int id, int pname, IntPtr parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetOcclusionQueryivNV([In] IntPtr extensionPointer, int id, int pname, IntPtr parameters)

        #region void glGetOcclusionQueryivNV([In] IntPtr extensionPointer, int id, int pname, int* parameters)
        // GLvoid glGetOcclusionQueryivNV(GLuint id, GLenum pname, GLint* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]int32*)\r\nret")]
        #endif
        public static unsafe void glGetOcclusionQueryivNV([In] IntPtr extensionPointer, int id, int pname, int* parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetOcclusionQueryivNV([In] IntPtr extensionPointer, int id, int pname, int* parameters)
        #endregion Overloads for GLvoid glGetOcclusionQueryivNV(GLuint id, GLenum pname, GLint* parameters)

        #region Overloads for GLvoid glGetOcclusionQueryuivNV(GLuint id, GLenum pname, GLuint* parameters)
        #region void glGetOcclusionQueryuivNV([In] IntPtr extensionPointer, int id, int pname, int[] parameters)
        // GLvoid glGetOcclusionQueryuivNV(GLuint id, GLenum pname, GLuint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]int32[])\r\nret")]
        #endif
        public static void glGetOcclusionQueryuivNV([In] IntPtr extensionPointer, int id, int pname, int[] parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetOcclusionQueryuivNV([In] IntPtr extensionPointer, int id, int pname, int[] parameters)

        #region void glGetOcclusionQueryuivNV([In] IntPtr extensionPointer, int id, int pname, out int parameters)
        // GLvoid glGetOcclusionQueryuivNV(GLuint id, GLenum pname, GLuint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]int32)\r\nret")]
        #endif
        public static void glGetOcclusionQueryuivNV([In] IntPtr extensionPointer, int id, int pname, out int parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetOcclusionQueryuivNV([In] IntPtr extensionPointer, int id, int pname, out int parameters)

        #region void glGetOcclusionQueryuivNV([In] IntPtr extensionPointer, int id, int pname, IntPtr parameters)
        // GLvoid glGetOcclusionQueryuivNV(GLuint id, GLenum pname, GLuint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGetOcclusionQueryuivNV([In] IntPtr extensionPointer, int id, int pname, IntPtr parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetOcclusionQueryuivNV([In] IntPtr extensionPointer, int id, int pname, IntPtr parameters)

        #region void glGetOcclusionQueryuivNV([In] IntPtr extensionPointer, int id, int pname, out uint parameters)
        // GLvoid glGetOcclusionQueryuivNV(GLuint id, GLenum pname, GLuint* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]unsigned int32)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]unsigned int32)\r\nret")]
        #endif
        public static void glGetOcclusionQueryuivNV([In] IntPtr extensionPointer, int id, int pname, out uint parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetOcclusionQueryuivNV([In] IntPtr extensionPointer, int id, int pname, out uint parameters)

        #region void glGetOcclusionQueryuivNV([In] IntPtr extensionPointer, int id, int pname, uint[] parameters)
        // GLvoid glGetOcclusionQueryuivNV(GLuint id, GLenum pname, GLuint* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]unsigned int32[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]unsigned int32[])\r\nret")]
        #endif
        public static void glGetOcclusionQueryuivNV([In] IntPtr extensionPointer, int id, int pname, uint[] parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetOcclusionQueryuivNV([In] IntPtr extensionPointer, int id, int pname, uint[] parameters)

        #region void glGetOcclusionQueryuivNV([In] IntPtr extensionPointer, int id, int pname, uint* parameters)
        // GLvoid glGetOcclusionQueryuivNV(GLuint id, GLenum pname, GLuint* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]unsigned int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg id\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]unsigned int32*)\r\nret")]
        #endif
        public static unsafe void glGetOcclusionQueryuivNV([In] IntPtr extensionPointer, int id, int pname, uint* parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetOcclusionQueryuivNV([In] IntPtr extensionPointer, int id, int pname, uint* parameters)
        #endregion Overloads for GLvoid glGetOcclusionQueryuivNV(GLuint id, GLenum pname, GLuint* parameters)
        #endregion GL_NV_occlusion_query Methods
        #endregion GL_NV_occlusion_query (261)

        #region GL_NV_point_sprite (262)
        #region GL_NV_point_sprite Constants
        #region GL_POINT_SPRITE_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_POINT_SPRITE_NV 0x8861
        public const int GL_POINT_SPRITE_NV = 0x8861;
        #endregion GL_POINT_SPRITE_NV

        #region GL_COORD_REPLACE_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COORD_REPLACE_NV 0x8862
        public const int GL_COORD_REPLACE_NV = 0x8862;
        #endregion GL_COORD_REPLACE_NV

        #region GL_POINT_SPRITE_R_MODE_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_POINT_SPRITE_R_MODE_NV 0x8863
        public const int GL_POINT_SPRITE_R_MODE_NV = 0x8863;
        #endregion GL_POINT_SPRITE_R_MODE_NV
        #endregion GL_NV_point_sprite Constants

        #region GL_NV_point_sprite Methods
        #region void glPointParameteriNV([In] IntPtr extensionPointer, int pname, int param)
        // GLvoid glPointParameteriNV(GLenum pname, GLint param)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg param\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg param\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32)\r\nret")]
        #endif
        public static void glPointParameteriNV([In] IntPtr extensionPointer, int pname, int param) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glPointParameteriNV([In] IntPtr extensionPointer, int pname, int param)

        #region Overloads for GLvoid glPointParameterivNV(GLenum pname, const GLint* parameters)
        #region void glPointParameterivNV([In] IntPtr extensionPointer, int pname, ref int parameters)
        // GLvoid glPointParameterivNV(GLenum pname, const GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]int32)\r\nret")]
        #endif
        public static void glPointParameterivNV([In] IntPtr extensionPointer, int pname, ref int parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glPointParameterivNV([In] IntPtr extensionPointer, int pname, ref int parameters)

        #region void glPointParameterivNV([In] IntPtr extensionPointer, int pname, int[] parameters)
        // GLvoid glPointParameterivNV(GLenum pname, const GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32[])\r\nret")]
        #endif
        public static void glPointParameterivNV([In] IntPtr extensionPointer, int pname, int[] parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glPointParameterivNV([In] IntPtr extensionPointer, int pname, int[] parameters)

        #region void glPointParameterivNV([In] IntPtr extensionPointer, int pname, IntPtr parameters)
        // GLvoid glPointParameterivNV(GLenum pname, const GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glPointParameterivNV([In] IntPtr extensionPointer, int pname, IntPtr parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glPointParameterivNV([In] IntPtr extensionPointer, int pname, IntPtr parameters)

        #region void glPointParameterivNV([In] IntPtr extensionPointer, int pname, int* parameters)
        // GLvoid glPointParameterivNV(GLenum pname, const GLint* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32*)\r\nret")]
        #endif
        public static unsafe void glPointParameterivNV([In] IntPtr extensionPointer, int pname, int* parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glPointParameterivNV([In] IntPtr extensionPointer, int pname, int* parameters)
        #endregion Overloads for GLvoid glPointParameterivNV(GLenum pname, const GLint* parameters)
        #endregion GL_NV_point_sprite Methods
        #endregion GL_NV_point_sprite (262)

        #region GL_NV_texture_shader3 (265)
        #region GL_NV_texture_shader3 Constants
        #region GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV 0x8850
        public const int GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV = 0x8850;
        #endregion GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV

        #region GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV 0x8851
        public const int GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV = 0x8851;
        #endregion GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV

        #region GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV 0x8852
        public const int GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV = 0x8852;
        #endregion GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV

        #region GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV 0x8853
        public const int GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV = 0x8853;
        #endregion GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV

        #region GL_OFFSET_HILO_TEXTURE_2D_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OFFSET_HILO_TEXTURE_2D_NV 0x8854
        public const int GL_OFFSET_HILO_TEXTURE_2D_NV = 0x8854;
        #endregion GL_OFFSET_HILO_TEXTURE_2D_NV

        #region GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV 0x8855
        public const int GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV = 0x8855;
        #endregion GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV

        #region GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV 0x8856
        public const int GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV = 0x8856;
        #endregion GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV

        #region GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV 0x8857
        public const int GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV = 0x8857;
        #endregion GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV

        #region GL_DEPENDENT_HILO_TEXTURE_2D_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DEPENDENT_HILO_TEXTURE_2D_NV 0x8858
        public const int GL_DEPENDENT_HILO_TEXTURE_2D_NV = 0x8858;
        #endregion GL_DEPENDENT_HILO_TEXTURE_2D_NV

        #region GL_DEPENDENT_RGB_TEXTURE_3D_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DEPENDENT_RGB_TEXTURE_3D_NV 0x8859
        public const int GL_DEPENDENT_RGB_TEXTURE_3D_NV = 0x8859;
        #endregion GL_DEPENDENT_RGB_TEXTURE_3D_NV

        #region GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV 0x885A
        public const int GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV = 0x885A;
        #endregion GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV

        #region GL_DOT_PRODUCT_PASS_THROUGH_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DOT_PRODUCT_PASS_THROUGH_NV 0x885B
        public const int GL_DOT_PRODUCT_PASS_THROUGH_NV = 0x885B;
        #endregion GL_DOT_PRODUCT_PASS_THROUGH_NV

        #region GL_DOT_PRODUCT_TEXTURE_1D_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DOT_PRODUCT_TEXTURE_1D_NV 0x885C
        public const int GL_DOT_PRODUCT_TEXTURE_1D_NV = 0x885C;
        #endregion GL_DOT_PRODUCT_TEXTURE_1D_NV

        #region GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV 0x885D
        public const int GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV = 0x885D;
        #endregion GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV

        #region GL_HILO8_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_HILO8_NV 0x885E
        public const int GL_HILO8_NV = 0x885E;
        #endregion GL_HILO8_NV

        #region GL_SIGNED_HILO8_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SIGNED_HILO8_NV 0x885F
        public const int GL_SIGNED_HILO8_NV = 0x885F;
        #endregion GL_SIGNED_HILO8_NV

        #region GL_FORCE_BLUE_TO_ONE_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_FORCE_BLUE_TO_ONE_NV 0x8860
        public const int GL_FORCE_BLUE_TO_ONE_NV = 0x8860;
        #endregion GL_FORCE_BLUE_TO_ONE_NV
        #endregion GL_NV_texture_shader3 Constants
        #endregion GL_NV_texture_shader3 (265)

        #region GL_NV_vertex_program1_1 (266)
        #endregion GL_NV_vertex_program1_1 (266)

        #region GL_NV_float_buffer (281)
        #region GL_NV_float_buffer Constants
        #region GL_FLOAT_R_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_FLOAT_R_NV 0x8880
        public const int GL_FLOAT_R_NV = 0x8880;
        #endregion GL_FLOAT_R_NV

        #region GL_FLOAT_RG_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_FLOAT_RG_NV 0x8881
        public const int GL_FLOAT_RG_NV = 0x8881;
        #endregion GL_FLOAT_RG_NV

        #region GL_FLOAT_RGB_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_FLOAT_RGB_NV 0x8882
        public const int GL_FLOAT_RGB_NV = 0x8882;
        #endregion GL_FLOAT_RGB_NV

        #region GL_FLOAT_RGBA_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_FLOAT_RGBA_NV 0x8883
        public const int GL_FLOAT_RGBA_NV = 0x8883;
        #endregion GL_FLOAT_RGBA_NV

        #region GL_FLOAT_R16_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_FLOAT_R16_NV 0x8884
        public const int GL_FLOAT_R16_NV = 0x8884;
        #endregion GL_FLOAT_R16_NV

        #region GL_FLOAT_R32_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_FLOAT_R32_NV 0x8885
        public const int GL_FLOAT_R32_NV = 0x8885;
        #endregion GL_FLOAT_R32_NV

        #region GL_FLOAT_RG16_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_FLOAT_RG16_NV 0x8886
        public const int GL_FLOAT_RG16_NV = 0x8886;
        #endregion GL_FLOAT_RG16_NV

        #region GL_FLOAT_RG32_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_FLOAT_RG32_NV 0x8887
        public const int GL_FLOAT_RG32_NV = 0x8887;
        #endregion GL_FLOAT_RG32_NV

        #region GL_FLOAT_RGB16_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_FLOAT_RGB16_NV 0x8888
        public const int GL_FLOAT_RGB16_NV = 0x8888;
        #endregion GL_FLOAT_RGB16_NV

        #region GL_FLOAT_RGB32_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_FLOAT_RGB32_NV 0x8889
        public const int GL_FLOAT_RGB32_NV = 0x8889;
        #endregion GL_FLOAT_RGB32_NV

        #region GL_FLOAT_RGBA16_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_FLOAT_RGBA16_NV 0x888A
        public const int GL_FLOAT_RGBA16_NV = 0x888A;
        #endregion GL_FLOAT_RGBA16_NV

        #region GL_FLOAT_RGBA32_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_FLOAT_RGBA32_NV 0x888B
        public const int GL_FLOAT_RGBA32_NV = 0x888B;
        #endregion GL_FLOAT_RGBA32_NV

        #region GL_TEXTURE_FLOAT_COMPONENTS_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_FLOAT_COMPONENTS_NV 0x888C
        public const int GL_TEXTURE_FLOAT_COMPONENTS_NV = 0x888C;
        #endregion GL_TEXTURE_FLOAT_COMPONENTS_NV

        #region GL_FLOAT_CLEAR_COLOR_VALUE_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_FLOAT_CLEAR_COLOR_VALUE_NV 0x888D
        public const int GL_FLOAT_CLEAR_COLOR_VALUE_NV = 0x888D;
        #endregion GL_FLOAT_CLEAR_COLOR_VALUE_NV

        #region GL_FLOAT_RGBA_MODE_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_FLOAT_RGBA_MODE_NV 0x888E
        public const int GL_FLOAT_RGBA_MODE_NV = 0x888E;
        #endregion GL_FLOAT_RGBA_MODE_NV
        #endregion GL_NV_float_buffer Constants
        #endregion GL_NV_float_buffer (281)

        #region GL_NV_fragment_program (282)
        #region GL_NV_fragment_program Constants
        #region GL_FRAGMENT_PROGRAM_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_FRAGMENT_PROGRAM_NV 0x8870
        public const int GL_FRAGMENT_PROGRAM_NV = 0x8870;
        #endregion GL_FRAGMENT_PROGRAM_NV

        #region GL_MAX_TEXTURE_COORDS_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAX_TEXTURE_COORDS_NV 0x8871
        public const int GL_MAX_TEXTURE_COORDS_NV = 0x8871;
        #endregion GL_MAX_TEXTURE_COORDS_NV

        #region GL_MAX_TEXTURE_IMAGE_UNITS_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAX_TEXTURE_IMAGE_UNITS_NV 0x8872
        public const int GL_MAX_TEXTURE_IMAGE_UNITS_NV = 0x8872;
        #endregion GL_MAX_TEXTURE_IMAGE_UNITS_NV

        #region GL_FRAGMENT_PROGRAM_BINDING_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_FRAGMENT_PROGRAM_BINDING_NV 0x8873
        public const int GL_FRAGMENT_PROGRAM_BINDING_NV = 0x8873;
        #endregion GL_FRAGMENT_PROGRAM_BINDING_NV

        #region GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV 0x8868
        public const int GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV = 0x8868;
        #endregion GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV

        #region GL_PROGRAM_ERROR_STRING_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PROGRAM_ERROR_STRING_NV 0x8874
        public const int GL_PROGRAM_ERROR_STRING_NV = 0x8874;
        #endregion GL_PROGRAM_ERROR_STRING_NV
        #endregion GL_NV_fragment_program Constants

        #region GL_NV_fragment_program Methods
        #region void glProgramNamedParameter4fNV([In] IntPtr extensionPointer, int id, int len, string name, float x, float y, float z, float w)
        // GLvoid glProgramNamedParameter4fNV(GLuint id, GLsizei len, const GLubyte* name, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
        #if WIN32
        [IlasmAttribute(".maxstack 8\r\nldarg id\r\nldarg len\r\nldarg name\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg w\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]string,[in]float32,[in]float32,[in]float32,[in]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 8\r\nldarg id\r\nldarg len\r\nldarg name\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg w\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]string,[in]float32,[in]float32,[in]float32,[in]float32)\r\nret")]
        #endif
        public static void glProgramNamedParameter4fNV([In] IntPtr extensionPointer, int id, int len, string name, float x, float y, float z, float w) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glProgramNamedParameter4fNV([In] IntPtr extensionPointer, int id, int len, string name, float x, float y, float z, float w)

        #region void glProgramNamedParameter4dNV([In] IntPtr extensionPointer, int id, int len, string name, double x, double y, double z, double w)
        // GLvoid glProgramNamedParameter4dNV(GLuint id, GLsizei len, const GLubyte* name, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
        #if WIN32
        [IlasmAttribute(".maxstack 8\r\nldarg id\r\nldarg len\r\nldarg name\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg w\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]string,[in]float64,[in]float64,[in]float64,[in]float64)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 8\r\nldarg id\r\nldarg len\r\nldarg name\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg w\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]string,[in]float64,[in]float64,[in]float64,[in]float64)\r\nret")]
        #endif
        public static void glProgramNamedParameter4dNV([In] IntPtr extensionPointer, int id, int len, string name, double x, double y, double z, double w) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glProgramNamedParameter4dNV([In] IntPtr extensionPointer, int id, int len, string name, double x, double y, double z, double w)

        #region Overloads for GLvoid glGetProgramNamedParameterfvNV(GLuint id, GLsizei len, const GLubyte* name, GLfloat* parameters)
        #region void glGetProgramNamedParameterfvNV([In] IntPtr extensionPointer, int id, int len, string name, out float parameters)
        // GLvoid glGetProgramNamedParameterfvNV(GLuint id, GLsizei len, const GLubyte* name, GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg id\r\nldarg len\r\nldarg name\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]string,[out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg id\r\nldarg len\r\nldarg name\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]string,[out]float32)\r\nret")]
        #endif
        public static void glGetProgramNamedParameterfvNV([In] IntPtr extensionPointer, int id, int len, string name, out float parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetProgramNamedParameterfvNV([In] IntPtr extensionPointer, int id, int len, string name, out float parameters)

        #region void glGetProgramNamedParameterfvNV([In] IntPtr extensionPointer, int id, int len, string name, float[] parameters)
        // GLvoid glGetProgramNamedParameterfvNV(GLuint id, GLsizei len, const GLubyte* name, GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg id\r\nldarg len\r\nldarg name\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]string,[out]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg id\r\nldarg len\r\nldarg name\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]string,[out]float32[])\r\nret")]
        #endif
        public static void glGetProgramNamedParameterfvNV([In] IntPtr extensionPointer, int id, int len, string name, float[] parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetProgramNamedParameterfvNV([In] IntPtr extensionPointer, int id, int len, string name, float[] parameters)

        #region void glGetProgramNamedParameterfvNV([In] IntPtr extensionPointer, int id, int len, string name, IntPtr parameters)
        // GLvoid glGetProgramNamedParameterfvNV(GLuint id, GLsizei len, const GLubyte* name, GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg id\r\nldarg len\r\nldarg name\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]string,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg id\r\nldarg len\r\nldarg name\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]string,[out]native int)\r\nret")]
        #endif
        public static void glGetProgramNamedParameterfvNV([In] IntPtr extensionPointer, int id, int len, string name, IntPtr parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetProgramNamedParameterfvNV([In] IntPtr extensionPointer, int id, int len, string name, IntPtr parameters)

        #region void glGetProgramNamedParameterfvNV([In] IntPtr extensionPointer, int id, int len, string name, float* parameters)
        // GLvoid glGetProgramNamedParameterfvNV(GLuint id, GLsizei len, const GLubyte* name, GLfloat* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg id\r\nldarg len\r\nldarg name\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]string,[out]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg id\r\nldarg len\r\nldarg name\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]string,[out]float32*)\r\nret")]
        #endif
        public static unsafe void glGetProgramNamedParameterfvNV([In] IntPtr extensionPointer, int id, int len, string name, float* parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetProgramNamedParameterfvNV([In] IntPtr extensionPointer, int id, int len, string name, float* parameters)
        #endregion Overloads for GLvoid glGetProgramNamedParameterfvNV(GLuint id, GLsizei len, const GLubyte* name, GLfloat* parameters)

        #region Overloads for GLvoid glGetProgramNamedParameterdvNV(GLuint id, GLsizei len, const GLubyte* name, GLdouble* parameters)
        #region void glGetProgramNamedParameterdvNV([In] IntPtr extensionPointer, int id, int len, string name, out double parameters)
        // GLvoid glGetProgramNamedParameterdvNV(GLuint id, GLsizei len, const GLubyte* name, GLdouble* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg id\r\nldarg len\r\nldarg name\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]string,[out]float64)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg id\r\nldarg len\r\nldarg name\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]string,[out]float64)\r\nret")]
        #endif
        public static void glGetProgramNamedParameterdvNV([In] IntPtr extensionPointer, int id, int len, string name, out double parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetProgramNamedParameterdvNV([In] IntPtr extensionPointer, int id, int len, string name, out double parameters)

        #region void glGetProgramNamedParameterdvNV([In] IntPtr extensionPointer, int id, int len, string name, double[] parameters)
        // GLvoid glGetProgramNamedParameterdvNV(GLuint id, GLsizei len, const GLubyte* name, GLdouble* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg id\r\nldarg len\r\nldarg name\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]string,[out]float64[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg id\r\nldarg len\r\nldarg name\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]string,[out]float64[])\r\nret")]
        #endif
        public static void glGetProgramNamedParameterdvNV([In] IntPtr extensionPointer, int id, int len, string name, double[] parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetProgramNamedParameterdvNV([In] IntPtr extensionPointer, int id, int len, string name, double[] parameters)

        #region void glGetProgramNamedParameterdvNV([In] IntPtr extensionPointer, int id, int len, string name, IntPtr parameters)
        // GLvoid glGetProgramNamedParameterdvNV(GLuint id, GLsizei len, const GLubyte* name, GLdouble* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg id\r\nldarg len\r\nldarg name\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]string,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg id\r\nldarg len\r\nldarg name\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]string,[out]native int)\r\nret")]
        #endif
        public static void glGetProgramNamedParameterdvNV([In] IntPtr extensionPointer, int id, int len, string name, IntPtr parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetProgramNamedParameterdvNV([In] IntPtr extensionPointer, int id, int len, string name, IntPtr parameters)

        #region void glGetProgramNamedParameterdvNV([In] IntPtr extensionPointer, int id, int len, string name, double* parameters)
        // GLvoid glGetProgramNamedParameterdvNV(GLuint id, GLsizei len, const GLubyte* name, GLdouble* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg id\r\nldarg len\r\nldarg name\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]string,[out]float64*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg id\r\nldarg len\r\nldarg name\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]string,[out]float64*)\r\nret")]
        #endif
        public static unsafe void glGetProgramNamedParameterdvNV([In] IntPtr extensionPointer, int id, int len, string name, double* parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetProgramNamedParameterdvNV([In] IntPtr extensionPointer, int id, int len, string name, double* parameters)
        #endregion Overloads for GLvoid glGetProgramNamedParameterdvNV(GLuint id, GLsizei len, const GLubyte* name, GLdouble* parameters)
        #endregion GL_NV_fragment_program Methods
        #endregion GL_NV_fragment_program (282)

        #region GL_NV_half_float (283)
        #region GL_NV_half_float Constants
        #region GL_HALF_FLOAT_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_HALF_FLOAT_NV 0x140B
        public const int GL_HALF_FLOAT_NV = 0x140B;
        #endregion GL_HALF_FLOAT_NV
        #endregion GL_NV_half_float Constants

        #region GL_NV_half_float Methods
        #region Overloads for GLvoid glVertex2hNV(GLushort x, GLushort y)
        #region void glVertex2hNV([In] IntPtr extensionPointer, short x, short y)
        // GLvoid glVertex2hNV(GLushort x, GLushort y)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg x\r\nldarg y\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int16,[in]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg x\r\nldarg y\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int16,[in]int16)\r\nret")]
        #endif
        public static void glVertex2hNV([In] IntPtr extensionPointer, short x, short y) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertex2hNV([In] IntPtr extensionPointer, short x, short y)

        #region void glVertex2hNV([In] IntPtr extensionPointer, ushort x, ushort y)
        // GLvoid glVertex2hNV(GLushort x, GLushort y)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg x\r\nldarg y\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int16,[in]unsigned int16)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg x\r\nldarg y\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int16,[in]unsigned int16)\r\nret")]
        #endif
        public static void glVertex2hNV([In] IntPtr extensionPointer, ushort x, ushort y) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertex2hNV([In] IntPtr extensionPointer, ushort x, ushort y)
        #endregion Overloads for GLvoid glVertex2hNV(GLushort x, GLushort y)

        #region Overloads for GLvoid glVertex2hvNV(const GLushort* v)
        #region void glVertex2hvNV([In] IntPtr extensionPointer, short[] v)
        // GLvoid glVertex2hvNV(const GLushort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int16[])\r\nret")]
        #endif
        public static void glVertex2hvNV([In] IntPtr extensionPointer, short[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertex2hvNV([In] IntPtr extensionPointer, short[] v)

        #region void glVertex2hvNV([In] IntPtr extensionPointer, ref short v)
        // GLvoid glVertex2hvNV(const GLushort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]int16)\r\nret")]
        #endif
        public static void glVertex2hvNV([In] IntPtr extensionPointer, ref short v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertex2hvNV([In] IntPtr extensionPointer, ref short v)

        #region void glVertex2hvNV([In] IntPtr extensionPointer, IntPtr v)
        // GLvoid glVertex2hvNV(const GLushort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int)\r\nret")]
        #endif
        public static void glVertex2hvNV([In] IntPtr extensionPointer, IntPtr v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertex2hvNV([In] IntPtr extensionPointer, IntPtr v)

        #region void glVertex2hvNV([In] IntPtr extensionPointer, ref ushort v)
        // GLvoid glVertex2hvNV(const GLushort* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]unsigned int16)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]unsigned int16)\r\nret")]
        #endif
        public static void glVertex2hvNV([In] IntPtr extensionPointer, ref ushort v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertex2hvNV([In] IntPtr extensionPointer, ref ushort v)

        #region void glVertex2hvNV([In] IntPtr extensionPointer, ushort[] v)
        // GLvoid glVertex2hvNV(const GLushort* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int16[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int16[])\r\nret")]
        #endif
        public static void glVertex2hvNV([In] IntPtr extensionPointer, ushort[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertex2hvNV([In] IntPtr extensionPointer, ushort[] v)

        #region void glVertex2hvNV([In] IntPtr extensionPointer, ushort* v)
        // GLvoid glVertex2hvNV(const GLushort* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int16*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int16*)\r\nret")]
        #endif
        public static unsafe void glVertex2hvNV([In] IntPtr extensionPointer, ushort* v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertex2hvNV([In] IntPtr extensionPointer, ushort* v)
        #endregion Overloads for GLvoid glVertex2hvNV(const GLushort* v)

        #region Overloads for GLvoid glVertex3hNV(GLushort x, GLushort y, GLushort z)
        #region void glVertex3hNV([In] IntPtr extensionPointer, short x, short y, short z)
        // GLvoid glVertex3hNV(GLushort x, GLushort y, GLushort z)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int16,[in]int16,[in]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int16,[in]int16,[in]int16)\r\nret")]
        #endif
        public static void glVertex3hNV([In] IntPtr extensionPointer, short x, short y, short z) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertex3hNV([In] IntPtr extensionPointer, short x, short y, short z)

        #region void glVertex3hNV([In] IntPtr extensionPointer, ushort x, ushort y, ushort z)
        // GLvoid glVertex3hNV(GLushort x, GLushort y, GLushort z)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int16,[in]unsigned int16,[in]unsigned int16)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int16,[in]unsigned int16,[in]unsigned int16)\r\nret")]
        #endif
        public static void glVertex3hNV([In] IntPtr extensionPointer, ushort x, ushort y, ushort z) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertex3hNV([In] IntPtr extensionPointer, ushort x, ushort y, ushort z)
        #endregion Overloads for GLvoid glVertex3hNV(GLushort x, GLushort y, GLushort z)

        #region Overloads for GLvoid glVertex3hvNV(const GLushort* v)
        #region void glVertex3hvNV([In] IntPtr extensionPointer, short[] v)
        // GLvoid glVertex3hvNV(const GLushort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int16[])\r\nret")]
        #endif
        public static void glVertex3hvNV([In] IntPtr extensionPointer, short[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertex3hvNV([In] IntPtr extensionPointer, short[] v)

        #region void glVertex3hvNV([In] IntPtr extensionPointer, ref short v)
        // GLvoid glVertex3hvNV(const GLushort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]int16)\r\nret")]
        #endif
        public static void glVertex3hvNV([In] IntPtr extensionPointer, ref short v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertex3hvNV([In] IntPtr extensionPointer, ref short v)

        #region void glVertex3hvNV([In] IntPtr extensionPointer, IntPtr v)
        // GLvoid glVertex3hvNV(const GLushort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int)\r\nret")]
        #endif
        public static void glVertex3hvNV([In] IntPtr extensionPointer, IntPtr v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertex3hvNV([In] IntPtr extensionPointer, IntPtr v)

        #region void glVertex3hvNV([In] IntPtr extensionPointer, ref ushort v)
        // GLvoid glVertex3hvNV(const GLushort* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]unsigned int16)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]unsigned int16)\r\nret")]
        #endif
        public static void glVertex3hvNV([In] IntPtr extensionPointer, ref ushort v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertex3hvNV([In] IntPtr extensionPointer, ref ushort v)

        #region void glVertex3hvNV([In] IntPtr extensionPointer, ushort[] v)
        // GLvoid glVertex3hvNV(const GLushort* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int16[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int16[])\r\nret")]
        #endif
        public static void glVertex3hvNV([In] IntPtr extensionPointer, ushort[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertex3hvNV([In] IntPtr extensionPointer, ushort[] v)

        #region void glVertex3hvNV([In] IntPtr extensionPointer, ushort* v)
        // GLvoid glVertex3hvNV(const GLushort* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int16*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int16*)\r\nret")]
        #endif
        public static unsafe void glVertex3hvNV([In] IntPtr extensionPointer, ushort* v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertex3hvNV([In] IntPtr extensionPointer, ushort* v)
        #endregion Overloads for GLvoid glVertex3hvNV(const GLushort* v)

        #region Overloads for GLvoid glVertex4hNV(GLushort x, GLushort y, GLushort z, GLushort w)
        #region void glVertex4hNV([In] IntPtr extensionPointer, short x, short y, short z, short w)
        // GLvoid glVertex4hNV(GLushort x, GLushort y, GLushort z, GLushort w)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg w\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int16,[in]int16,[in]int16,[in]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg w\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int16,[in]int16,[in]int16,[in]int16)\r\nret")]
        #endif
        public static void glVertex4hNV([In] IntPtr extensionPointer, short x, short y, short z, short w) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertex4hNV([In] IntPtr extensionPointer, short x, short y, short z, short w)

        #region void glVertex4hNV([In] IntPtr extensionPointer, ushort x, ushort y, ushort z, ushort w)
        // GLvoid glVertex4hNV(GLushort x, GLushort y, GLushort z, GLushort w)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg w\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int16,[in]unsigned int16,[in]unsigned int16,[in]unsigned int16)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg w\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int16,[in]unsigned int16,[in]unsigned int16,[in]unsigned int16)\r\nret")]
        #endif
        public static void glVertex4hNV([In] IntPtr extensionPointer, ushort x, ushort y, ushort z, ushort w) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertex4hNV([In] IntPtr extensionPointer, ushort x, ushort y, ushort z, ushort w)
        #endregion Overloads for GLvoid glVertex4hNV(GLushort x, GLushort y, GLushort z, GLushort w)

        #region Overloads for GLvoid glVertex4hvNV(const GLushort* v)
        #region void glVertex4hvNV([In] IntPtr extensionPointer, short[] v)
        // GLvoid glVertex4hvNV(const GLushort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int16[])\r\nret")]
        #endif
        public static void glVertex4hvNV([In] IntPtr extensionPointer, short[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertex4hvNV([In] IntPtr extensionPointer, short[] v)

        #region void glVertex4hvNV([In] IntPtr extensionPointer, ref short v)
        // GLvoid glVertex4hvNV(const GLushort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]int16)\r\nret")]
        #endif
        public static void glVertex4hvNV([In] IntPtr extensionPointer, ref short v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertex4hvNV([In] IntPtr extensionPointer, ref short v)

        #region void glVertex4hvNV([In] IntPtr extensionPointer, IntPtr v)
        // GLvoid glVertex4hvNV(const GLushort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int)\r\nret")]
        #endif
        public static void glVertex4hvNV([In] IntPtr extensionPointer, IntPtr v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertex4hvNV([In] IntPtr extensionPointer, IntPtr v)

        #region void glVertex4hvNV([In] IntPtr extensionPointer, ref ushort v)
        // GLvoid glVertex4hvNV(const GLushort* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]unsigned int16)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]unsigned int16)\r\nret")]
        #endif
        public static void glVertex4hvNV([In] IntPtr extensionPointer, ref ushort v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertex4hvNV([In] IntPtr extensionPointer, ref ushort v)

        #region void glVertex4hvNV([In] IntPtr extensionPointer, ushort[] v)
        // GLvoid glVertex4hvNV(const GLushort* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int16[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int16[])\r\nret")]
        #endif
        public static void glVertex4hvNV([In] IntPtr extensionPointer, ushort[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertex4hvNV([In] IntPtr extensionPointer, ushort[] v)

        #region void glVertex4hvNV([In] IntPtr extensionPointer, ushort* v)
        // GLvoid glVertex4hvNV(const GLushort* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int16*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int16*)\r\nret")]
        #endif
        public static unsafe void glVertex4hvNV([In] IntPtr extensionPointer, ushort* v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertex4hvNV([In] IntPtr extensionPointer, ushort* v)
        #endregion Overloads for GLvoid glVertex4hvNV(const GLushort* v)

        #region Overloads for GLvoid glNormal3hNV(GLushort nx, GLushort ny, GLushort nz)
        #region void glNormal3hNV([In] IntPtr extensionPointer, short nx, short ny, short nz)
        // GLvoid glNormal3hNV(GLushort nx, GLushort ny, GLushort nz)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg nx\r\nldarg ny\r\nldarg nz\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int16,[in]int16,[in]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg nx\r\nldarg ny\r\nldarg nz\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int16,[in]int16,[in]int16)\r\nret")]
        #endif
        public static void glNormal3hNV([In] IntPtr extensionPointer, short nx, short ny, short nz) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glNormal3hNV([In] IntPtr extensionPointer, short nx, short ny, short nz)

        #region void glNormal3hNV([In] IntPtr extensionPointer, ushort nx, ushort ny, ushort nz)
        // GLvoid glNormal3hNV(GLushort nx, GLushort ny, GLushort nz)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg nx\r\nldarg ny\r\nldarg nz\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int16,[in]unsigned int16,[in]unsigned int16)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg nx\r\nldarg ny\r\nldarg nz\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int16,[in]unsigned int16,[in]unsigned int16)\r\nret")]
        #endif
        public static void glNormal3hNV([In] IntPtr extensionPointer, ushort nx, ushort ny, ushort nz) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glNormal3hNV([In] IntPtr extensionPointer, ushort nx, ushort ny, ushort nz)
        #endregion Overloads for GLvoid glNormal3hNV(GLushort nx, GLushort ny, GLushort nz)

        #region Overloads for GLvoid glNormal3hvNV(const GLushort* v)
        #region void glNormal3hvNV([In] IntPtr extensionPointer, short[] v)
        // GLvoid glNormal3hvNV(const GLushort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int16[])\r\nret")]
        #endif
        public static void glNormal3hvNV([In] IntPtr extensionPointer, short[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glNormal3hvNV([In] IntPtr extensionPointer, short[] v)

        #region void glNormal3hvNV([In] IntPtr extensionPointer, ref short v)
        // GLvoid glNormal3hvNV(const GLushort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]int16)\r\nret")]
        #endif
        public static void glNormal3hvNV([In] IntPtr extensionPointer, ref short v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glNormal3hvNV([In] IntPtr extensionPointer, ref short v)

        #region void glNormal3hvNV([In] IntPtr extensionPointer, IntPtr v)
        // GLvoid glNormal3hvNV(const GLushort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int)\r\nret")]
        #endif
        public static void glNormal3hvNV([In] IntPtr extensionPointer, IntPtr v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glNormal3hvNV([In] IntPtr extensionPointer, IntPtr v)

        #region void glNormal3hvNV([In] IntPtr extensionPointer, ref ushort v)
        // GLvoid glNormal3hvNV(const GLushort* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]unsigned int16)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]unsigned int16)\r\nret")]
        #endif
        public static void glNormal3hvNV([In] IntPtr extensionPointer, ref ushort v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glNormal3hvNV([In] IntPtr extensionPointer, ref ushort v)

        #region void glNormal3hvNV([In] IntPtr extensionPointer, ushort[] v)
        // GLvoid glNormal3hvNV(const GLushort* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int16[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int16[])\r\nret")]
        #endif
        public static void glNormal3hvNV([In] IntPtr extensionPointer, ushort[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glNormal3hvNV([In] IntPtr extensionPointer, ushort[] v)

        #region void glNormal3hvNV([In] IntPtr extensionPointer, ushort* v)
        // GLvoid glNormal3hvNV(const GLushort* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int16*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int16*)\r\nret")]
        #endif
        public static unsafe void glNormal3hvNV([In] IntPtr extensionPointer, ushort* v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glNormal3hvNV([In] IntPtr extensionPointer, ushort* v)
        #endregion Overloads for GLvoid glNormal3hvNV(const GLushort* v)

        #region Overloads for GLvoid glColor3hNV(GLushort red, GLushort green, GLushort blue)
        #region void glColor3hNV([In] IntPtr extensionPointer, short red, short green, short blue)
        // GLvoid glColor3hNV(GLushort red, GLushort green, GLushort blue)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg red\r\nldarg green\r\nldarg blue\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int16,[in]int16,[in]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg red\r\nldarg green\r\nldarg blue\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int16,[in]int16,[in]int16)\r\nret")]
        #endif
        public static void glColor3hNV([In] IntPtr extensionPointer, short red, short green, short blue) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColor3hNV([In] IntPtr extensionPointer, short red, short green, short blue)

        #region void glColor3hNV([In] IntPtr extensionPointer, ushort red, ushort green, ushort blue)
        // GLvoid glColor3hNV(GLushort red, GLushort green, GLushort blue)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg red\r\nldarg green\r\nldarg blue\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int16,[in]unsigned int16,[in]unsigned int16)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg red\r\nldarg green\r\nldarg blue\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int16,[in]unsigned int16,[in]unsigned int16)\r\nret")]
        #endif
        public static void glColor3hNV([In] IntPtr extensionPointer, ushort red, ushort green, ushort blue) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColor3hNV([In] IntPtr extensionPointer, ushort red, ushort green, ushort blue)
        #endregion Overloads for GLvoid glColor3hNV(GLushort red, GLushort green, GLushort blue)

        #region Overloads for GLvoid glColor3hvNV(const GLushort* v)
        #region void glColor3hvNV([In] IntPtr extensionPointer, short[] v)
        // GLvoid glColor3hvNV(const GLushort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int16[])\r\nret")]
        #endif
        public static void glColor3hvNV([In] IntPtr extensionPointer, short[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColor3hvNV([In] IntPtr extensionPointer, short[] v)

        #region void glColor3hvNV([In] IntPtr extensionPointer, ref short v)
        // GLvoid glColor3hvNV(const GLushort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]int16)\r\nret")]
        #endif
        public static void glColor3hvNV([In] IntPtr extensionPointer, ref short v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColor3hvNV([In] IntPtr extensionPointer, ref short v)

        #region void glColor3hvNV([In] IntPtr extensionPointer, IntPtr v)
        // GLvoid glColor3hvNV(const GLushort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int)\r\nret")]
        #endif
        public static void glColor3hvNV([In] IntPtr extensionPointer, IntPtr v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColor3hvNV([In] IntPtr extensionPointer, IntPtr v)

        #region void glColor3hvNV([In] IntPtr extensionPointer, ref ushort v)
        // GLvoid glColor3hvNV(const GLushort* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]unsigned int16)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]unsigned int16)\r\nret")]
        #endif
        public static void glColor3hvNV([In] IntPtr extensionPointer, ref ushort v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColor3hvNV([In] IntPtr extensionPointer, ref ushort v)

        #region void glColor3hvNV([In] IntPtr extensionPointer, ushort[] v)
        // GLvoid glColor3hvNV(const GLushort* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int16[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int16[])\r\nret")]
        #endif
        public static void glColor3hvNV([In] IntPtr extensionPointer, ushort[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColor3hvNV([In] IntPtr extensionPointer, ushort[] v)

        #region void glColor3hvNV([In] IntPtr extensionPointer, ushort* v)
        // GLvoid glColor3hvNV(const GLushort* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int16*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int16*)\r\nret")]
        #endif
        public static unsafe void glColor3hvNV([In] IntPtr extensionPointer, ushort* v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColor3hvNV([In] IntPtr extensionPointer, ushort* v)
        #endregion Overloads for GLvoid glColor3hvNV(const GLushort* v)

        #region Overloads for GLvoid glColor4hNV(GLushort red, GLushort green, GLushort blue, GLushort alpha)
        #region void glColor4hNV([In] IntPtr extensionPointer, short red, short green, short blue, short alpha)
        // GLvoid glColor4hNV(GLushort red, GLushort green, GLushort blue, GLushort alpha)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg red\r\nldarg green\r\nldarg blue\r\nldarg alpha\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int16,[in]int16,[in]int16,[in]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg red\r\nldarg green\r\nldarg blue\r\nldarg alpha\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int16,[in]int16,[in]int16,[in]int16)\r\nret")]
        #endif
        public static void glColor4hNV([In] IntPtr extensionPointer, short red, short green, short blue, short alpha) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColor4hNV([In] IntPtr extensionPointer, short red, short green, short blue, short alpha)

        #region void glColor4hNV([In] IntPtr extensionPointer, ushort red, ushort green, ushort blue, ushort alpha)
        // GLvoid glColor4hNV(GLushort red, GLushort green, GLushort blue, GLushort alpha)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg red\r\nldarg green\r\nldarg blue\r\nldarg alpha\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int16,[in]unsigned int16,[in]unsigned int16,[in]unsigned int16)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg red\r\nldarg green\r\nldarg blue\r\nldarg alpha\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int16,[in]unsigned int16,[in]unsigned int16,[in]unsigned int16)\r\nret")]
        #endif
        public static void glColor4hNV([In] IntPtr extensionPointer, ushort red, ushort green, ushort blue, ushort alpha) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColor4hNV([In] IntPtr extensionPointer, ushort red, ushort green, ushort blue, ushort alpha)
        #endregion Overloads for GLvoid glColor4hNV(GLushort red, GLushort green, GLushort blue, GLushort alpha)

        #region Overloads for GLvoid glColor4hvNV(const GLushort* v)
        #region void glColor4hvNV([In] IntPtr extensionPointer, short[] v)
        // GLvoid glColor4hvNV(const GLushort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int16[])\r\nret")]
        #endif
        public static void glColor4hvNV([In] IntPtr extensionPointer, short[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColor4hvNV([In] IntPtr extensionPointer, short[] v)

        #region void glColor4hvNV([In] IntPtr extensionPointer, ref short v)
        // GLvoid glColor4hvNV(const GLushort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]int16)\r\nret")]
        #endif
        public static void glColor4hvNV([In] IntPtr extensionPointer, ref short v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColor4hvNV([In] IntPtr extensionPointer, ref short v)

        #region void glColor4hvNV([In] IntPtr extensionPointer, IntPtr v)
        // GLvoid glColor4hvNV(const GLushort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int)\r\nret")]
        #endif
        public static void glColor4hvNV([In] IntPtr extensionPointer, IntPtr v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColor4hvNV([In] IntPtr extensionPointer, IntPtr v)

        #region void glColor4hvNV([In] IntPtr extensionPointer, ref ushort v)
        // GLvoid glColor4hvNV(const GLushort* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]unsigned int16)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]unsigned int16)\r\nret")]
        #endif
        public static void glColor4hvNV([In] IntPtr extensionPointer, ref ushort v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColor4hvNV([In] IntPtr extensionPointer, ref ushort v)

        #region void glColor4hvNV([In] IntPtr extensionPointer, ushort[] v)
        // GLvoid glColor4hvNV(const GLushort* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int16[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int16[])\r\nret")]
        #endif
        public static void glColor4hvNV([In] IntPtr extensionPointer, ushort[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColor4hvNV([In] IntPtr extensionPointer, ushort[] v)

        #region void glColor4hvNV([In] IntPtr extensionPointer, ushort* v)
        // GLvoid glColor4hvNV(const GLushort* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int16*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int16*)\r\nret")]
        #endif
        public static unsafe void glColor4hvNV([In] IntPtr extensionPointer, ushort* v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColor4hvNV([In] IntPtr extensionPointer, ushort* v)
        #endregion Overloads for GLvoid glColor4hvNV(const GLushort* v)

        #region Overloads for GLvoid glTexCoord1hNV(GLushort s)
        #region void glTexCoord1hNV([In] IntPtr extensionPointer, short s)
        // GLvoid glTexCoord1hNV(GLushort s)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg s\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg s\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int16)\r\nret")]
        #endif
        public static void glTexCoord1hNV([In] IntPtr extensionPointer, short s) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoord1hNV([In] IntPtr extensionPointer, short s)

        #region void glTexCoord1hNV([In] IntPtr extensionPointer, ushort s)
        // GLvoid glTexCoord1hNV(GLushort s)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg s\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int16)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg s\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int16)\r\nret")]
        #endif
        public static void glTexCoord1hNV([In] IntPtr extensionPointer, ushort s) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoord1hNV([In] IntPtr extensionPointer, ushort s)
        #endregion Overloads for GLvoid glTexCoord1hNV(GLushort s)

        #region Overloads for GLvoid glTexCoord1hvNV(const GLushort* v)
        #region void glTexCoord1hvNV([In] IntPtr extensionPointer, short[] v)
        // GLvoid glTexCoord1hvNV(const GLushort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int16[])\r\nret")]
        #endif
        public static void glTexCoord1hvNV([In] IntPtr extensionPointer, short[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoord1hvNV([In] IntPtr extensionPointer, short[] v)

        #region void glTexCoord1hvNV([In] IntPtr extensionPointer, ref short v)
        // GLvoid glTexCoord1hvNV(const GLushort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]int16)\r\nret")]
        #endif
        public static void glTexCoord1hvNV([In] IntPtr extensionPointer, ref short v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoord1hvNV([In] IntPtr extensionPointer, ref short v)

        #region void glTexCoord1hvNV([In] IntPtr extensionPointer, IntPtr v)
        // GLvoid glTexCoord1hvNV(const GLushort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int)\r\nret")]
        #endif
        public static void glTexCoord1hvNV([In] IntPtr extensionPointer, IntPtr v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoord1hvNV([In] IntPtr extensionPointer, IntPtr v)

        #region void glTexCoord1hvNV([In] IntPtr extensionPointer, ref ushort v)
        // GLvoid glTexCoord1hvNV(const GLushort* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]unsigned int16)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]unsigned int16)\r\nret")]
        #endif
        public static void glTexCoord1hvNV([In] IntPtr extensionPointer, ref ushort v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoord1hvNV([In] IntPtr extensionPointer, ref ushort v)

        #region void glTexCoord1hvNV([In] IntPtr extensionPointer, ushort[] v)
        // GLvoid glTexCoord1hvNV(const GLushort* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int16[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int16[])\r\nret")]
        #endif
        public static void glTexCoord1hvNV([In] IntPtr extensionPointer, ushort[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoord1hvNV([In] IntPtr extensionPointer, ushort[] v)

        #region void glTexCoord1hvNV([In] IntPtr extensionPointer, ushort* v)
        // GLvoid glTexCoord1hvNV(const GLushort* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int16*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int16*)\r\nret")]
        #endif
        public static unsafe void glTexCoord1hvNV([In] IntPtr extensionPointer, ushort* v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoord1hvNV([In] IntPtr extensionPointer, ushort* v)
        #endregion Overloads for GLvoid glTexCoord1hvNV(const GLushort* v)

        #region Overloads for GLvoid glTexCoord2hNV(GLushort s, GLushort t)
        #region void glTexCoord2hNV([In] IntPtr extensionPointer, short s, short t)
        // GLvoid glTexCoord2hNV(GLushort s, GLushort t)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg s\r\nldarg t\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int16,[in]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg s\r\nldarg t\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int16,[in]int16)\r\nret")]
        #endif
        public static void glTexCoord2hNV([In] IntPtr extensionPointer, short s, short t) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoord2hNV([In] IntPtr extensionPointer, short s, short t)

        #region void glTexCoord2hNV([In] IntPtr extensionPointer, ushort s, ushort t)
        // GLvoid glTexCoord2hNV(GLushort s, GLushort t)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg s\r\nldarg t\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int16,[in]unsigned int16)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg s\r\nldarg t\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int16,[in]unsigned int16)\r\nret")]
        #endif
        public static void glTexCoord2hNV([In] IntPtr extensionPointer, ushort s, ushort t) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoord2hNV([In] IntPtr extensionPointer, ushort s, ushort t)
        #endregion Overloads for GLvoid glTexCoord2hNV(GLushort s, GLushort t)

        #region Overloads for GLvoid glTexCoord2hvNV(const GLushort* v)
        #region void glTexCoord2hvNV([In] IntPtr extensionPointer, short[] v)
        // GLvoid glTexCoord2hvNV(const GLushort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int16[])\r\nret")]
        #endif
        public static void glTexCoord2hvNV([In] IntPtr extensionPointer, short[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoord2hvNV([In] IntPtr extensionPointer, short[] v)

        #region void glTexCoord2hvNV([In] IntPtr extensionPointer, ref short v)
        // GLvoid glTexCoord2hvNV(const GLushort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]int16)\r\nret")]
        #endif
        public static void glTexCoord2hvNV([In] IntPtr extensionPointer, ref short v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoord2hvNV([In] IntPtr extensionPointer, ref short v)

        #region void glTexCoord2hvNV([In] IntPtr extensionPointer, IntPtr v)
        // GLvoid glTexCoord2hvNV(const GLushort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int)\r\nret")]
        #endif
        public static void glTexCoord2hvNV([In] IntPtr extensionPointer, IntPtr v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoord2hvNV([In] IntPtr extensionPointer, IntPtr v)

        #region void glTexCoord2hvNV([In] IntPtr extensionPointer, ref ushort v)
        // GLvoid glTexCoord2hvNV(const GLushort* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]unsigned int16)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]unsigned int16)\r\nret")]
        #endif
        public static void glTexCoord2hvNV([In] IntPtr extensionPointer, ref ushort v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoord2hvNV([In] IntPtr extensionPointer, ref ushort v)

        #region void glTexCoord2hvNV([In] IntPtr extensionPointer, ushort[] v)
        // GLvoid glTexCoord2hvNV(const GLushort* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int16[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int16[])\r\nret")]
        #endif
        public static void glTexCoord2hvNV([In] IntPtr extensionPointer, ushort[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoord2hvNV([In] IntPtr extensionPointer, ushort[] v)

        #region void glTexCoord2hvNV([In] IntPtr extensionPointer, ushort* v)
        // GLvoid glTexCoord2hvNV(const GLushort* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int16*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int16*)\r\nret")]
        #endif
        public static unsafe void glTexCoord2hvNV([In] IntPtr extensionPointer, ushort* v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoord2hvNV([In] IntPtr extensionPointer, ushort* v)
        #endregion Overloads for GLvoid glTexCoord2hvNV(const GLushort* v)

        #region Overloads for GLvoid glTexCoord3hNV(GLushort s, GLushort t, GLushort r)
        #region void glTexCoord3hNV([In] IntPtr extensionPointer, short s, short t, short r)
        // GLvoid glTexCoord3hNV(GLushort s, GLushort t, GLushort r)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg s\r\nldarg t\r\nldarg r\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int16,[in]int16,[in]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg s\r\nldarg t\r\nldarg r\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int16,[in]int16,[in]int16)\r\nret")]
        #endif
        public static void glTexCoord3hNV([In] IntPtr extensionPointer, short s, short t, short r) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoord3hNV([In] IntPtr extensionPointer, short s, short t, short r)

        #region void glTexCoord3hNV([In] IntPtr extensionPointer, ushort s, ushort t, ushort r)
        // GLvoid glTexCoord3hNV(GLushort s, GLushort t, GLushort r)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg s\r\nldarg t\r\nldarg r\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int16,[in]unsigned int16,[in]unsigned int16)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg s\r\nldarg t\r\nldarg r\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int16,[in]unsigned int16,[in]unsigned int16)\r\nret")]
        #endif
        public static void glTexCoord3hNV([In] IntPtr extensionPointer, ushort s, ushort t, ushort r) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoord3hNV([In] IntPtr extensionPointer, ushort s, ushort t, ushort r)
        #endregion Overloads for GLvoid glTexCoord3hNV(GLushort s, GLushort t, GLushort r)

        #region Overloads for GLvoid glTexCoord3hvNV(const GLushort* v)
        #region void glTexCoord3hvNV([In] IntPtr extensionPointer, short[] v)
        // GLvoid glTexCoord3hvNV(const GLushort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int16[])\r\nret")]
        #endif
        public static void glTexCoord3hvNV([In] IntPtr extensionPointer, short[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoord3hvNV([In] IntPtr extensionPointer, short[] v)

        #region void glTexCoord3hvNV([In] IntPtr extensionPointer, ref short v)
        // GLvoid glTexCoord3hvNV(const GLushort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]int16)\r\nret")]
        #endif
        public static void glTexCoord3hvNV([In] IntPtr extensionPointer, ref short v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoord3hvNV([In] IntPtr extensionPointer, ref short v)

        #region void glTexCoord3hvNV([In] IntPtr extensionPointer, IntPtr v)
        // GLvoid glTexCoord3hvNV(const GLushort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int)\r\nret")]
        #endif
        public static void glTexCoord3hvNV([In] IntPtr extensionPointer, IntPtr v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoord3hvNV([In] IntPtr extensionPointer, IntPtr v)

        #region void glTexCoord3hvNV([In] IntPtr extensionPointer, ref ushort v)
        // GLvoid glTexCoord3hvNV(const GLushort* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]unsigned int16)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]unsigned int16)\r\nret")]
        #endif
        public static void glTexCoord3hvNV([In] IntPtr extensionPointer, ref ushort v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoord3hvNV([In] IntPtr extensionPointer, ref ushort v)

        #region void glTexCoord3hvNV([In] IntPtr extensionPointer, ushort[] v)
        // GLvoid glTexCoord3hvNV(const GLushort* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int16[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int16[])\r\nret")]
        #endif
        public static void glTexCoord3hvNV([In] IntPtr extensionPointer, ushort[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoord3hvNV([In] IntPtr extensionPointer, ushort[] v)

        #region void glTexCoord3hvNV([In] IntPtr extensionPointer, ushort* v)
        // GLvoid glTexCoord3hvNV(const GLushort* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int16*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int16*)\r\nret")]
        #endif
        public static unsafe void glTexCoord3hvNV([In] IntPtr extensionPointer, ushort* v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoord3hvNV([In] IntPtr extensionPointer, ushort* v)
        #endregion Overloads for GLvoid glTexCoord3hvNV(const GLushort* v)

        #region Overloads for GLvoid glTexCoord4hNV(GLushort s, GLushort t, GLushort r, GLushort q)
        #region void glTexCoord4hNV([In] IntPtr extensionPointer, short s, short t, short r, short q)
        // GLvoid glTexCoord4hNV(GLushort s, GLushort t, GLushort r, GLushort q)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg s\r\nldarg t\r\nldarg r\r\nldarg q\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int16,[in]int16,[in]int16,[in]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg s\r\nldarg t\r\nldarg r\r\nldarg q\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int16,[in]int16,[in]int16,[in]int16)\r\nret")]
        #endif
        public static void glTexCoord4hNV([In] IntPtr extensionPointer, short s, short t, short r, short q) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoord4hNV([In] IntPtr extensionPointer, short s, short t, short r, short q)

        #region void glTexCoord4hNV([In] IntPtr extensionPointer, ushort s, ushort t, ushort r, ushort q)
        // GLvoid glTexCoord4hNV(GLushort s, GLushort t, GLushort r, GLushort q)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg s\r\nldarg t\r\nldarg r\r\nldarg q\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int16,[in]unsigned int16,[in]unsigned int16,[in]unsigned int16)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg s\r\nldarg t\r\nldarg r\r\nldarg q\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int16,[in]unsigned int16,[in]unsigned int16,[in]unsigned int16)\r\nret")]
        #endif
        public static void glTexCoord4hNV([In] IntPtr extensionPointer, ushort s, ushort t, ushort r, ushort q) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoord4hNV([In] IntPtr extensionPointer, ushort s, ushort t, ushort r, ushort q)
        #endregion Overloads for GLvoid glTexCoord4hNV(GLushort s, GLushort t, GLushort r, GLushort q)

        #region Overloads for GLvoid glTexCoord4hvNV(const GLushort* v)
        #region void glTexCoord4hvNV([In] IntPtr extensionPointer, short[] v)
        // GLvoid glTexCoord4hvNV(const GLushort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int16[])\r\nret")]
        #endif
        public static void glTexCoord4hvNV([In] IntPtr extensionPointer, short[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoord4hvNV([In] IntPtr extensionPointer, short[] v)

        #region void glTexCoord4hvNV([In] IntPtr extensionPointer, ref short v)
        // GLvoid glTexCoord4hvNV(const GLushort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]int16)\r\nret")]
        #endif
        public static void glTexCoord4hvNV([In] IntPtr extensionPointer, ref short v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoord4hvNV([In] IntPtr extensionPointer, ref short v)

        #region void glTexCoord4hvNV([In] IntPtr extensionPointer, IntPtr v)
        // GLvoid glTexCoord4hvNV(const GLushort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int)\r\nret")]
        #endif
        public static void glTexCoord4hvNV([In] IntPtr extensionPointer, IntPtr v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoord4hvNV([In] IntPtr extensionPointer, IntPtr v)

        #region void glTexCoord4hvNV([In] IntPtr extensionPointer, ref ushort v)
        // GLvoid glTexCoord4hvNV(const GLushort* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]unsigned int16)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]unsigned int16)\r\nret")]
        #endif
        public static void glTexCoord4hvNV([In] IntPtr extensionPointer, ref ushort v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoord4hvNV([In] IntPtr extensionPointer, ref ushort v)

        #region void glTexCoord4hvNV([In] IntPtr extensionPointer, ushort[] v)
        // GLvoid glTexCoord4hvNV(const GLushort* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int16[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int16[])\r\nret")]
        #endif
        public static void glTexCoord4hvNV([In] IntPtr extensionPointer, ushort[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoord4hvNV([In] IntPtr extensionPointer, ushort[] v)

        #region void glTexCoord4hvNV([In] IntPtr extensionPointer, ushort* v)
        // GLvoid glTexCoord4hvNV(const GLushort* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int16*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int16*)\r\nret")]
        #endif
        public static unsafe void glTexCoord4hvNV([In] IntPtr extensionPointer, ushort* v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoord4hvNV([In] IntPtr extensionPointer, ushort* v)
        #endregion Overloads for GLvoid glTexCoord4hvNV(const GLushort* v)

        #region Overloads for GLvoid glMultiTexCoord1hNV(GLenum target, GLushort s)
        #region void glMultiTexCoord1hNV([In] IntPtr extensionPointer, int target, short s)
        // GLvoid glMultiTexCoord1hNV(GLenum target, GLushort s)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg s\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg s\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int16)\r\nret")]
        #endif
        public static void glMultiTexCoord1hNV([In] IntPtr extensionPointer, int target, short s) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord1hNV([In] IntPtr extensionPointer, int target, short s)

        #region void glMultiTexCoord1hNV([In] IntPtr extensionPointer, int target, ushort s)
        // GLvoid glMultiTexCoord1hNV(GLenum target, GLushort s)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg s\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]unsigned int16)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg s\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]unsigned int16)\r\nret")]
        #endif
        public static void glMultiTexCoord1hNV([In] IntPtr extensionPointer, int target, ushort s) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord1hNV([In] IntPtr extensionPointer, int target, ushort s)
        #endregion Overloads for GLvoid glMultiTexCoord1hNV(GLenum target, GLushort s)

        #region Overloads for GLvoid glMultiTexCoord1hvNV(GLenum target, const GLushort* v)
        #region void glMultiTexCoord1hvNV([In] IntPtr extensionPointer, int target, short[] v)
        // GLvoid glMultiTexCoord1hvNV(GLenum target, const GLushort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int16[])\r\nret")]
        #endif
        public static void glMultiTexCoord1hvNV([In] IntPtr extensionPointer, int target, short[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord1hvNV([In] IntPtr extensionPointer, int target, short[] v)

        #region void glMultiTexCoord1hvNV([In] IntPtr extensionPointer, int target, ref short v)
        // GLvoid glMultiTexCoord1hvNV(GLenum target, const GLushort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]int16)\r\nret")]
        #endif
        public static void glMultiTexCoord1hvNV([In] IntPtr extensionPointer, int target, ref short v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord1hvNV([In] IntPtr extensionPointer, int target, ref short v)

        #region void glMultiTexCoord1hvNV([In] IntPtr extensionPointer, int target, IntPtr v)
        // GLvoid glMultiTexCoord1hvNV(GLenum target, const GLushort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glMultiTexCoord1hvNV([In] IntPtr extensionPointer, int target, IntPtr v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord1hvNV([In] IntPtr extensionPointer, int target, IntPtr v)

        #region void glMultiTexCoord1hvNV([In] IntPtr extensionPointer, int target, ref ushort v)
        // GLvoid glMultiTexCoord1hvNV(GLenum target, const GLushort* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]unsigned int16)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]unsigned int16)\r\nret")]
        #endif
        public static void glMultiTexCoord1hvNV([In] IntPtr extensionPointer, int target, ref ushort v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord1hvNV([In] IntPtr extensionPointer, int target, ref ushort v)

        #region void glMultiTexCoord1hvNV([In] IntPtr extensionPointer, int target, ushort[] v)
        // GLvoid glMultiTexCoord1hvNV(GLenum target, const GLushort* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]unsigned int16[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]unsigned int16[])\r\nret")]
        #endif
        public static void glMultiTexCoord1hvNV([In] IntPtr extensionPointer, int target, ushort[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord1hvNV([In] IntPtr extensionPointer, int target, ushort[] v)

        #region void glMultiTexCoord1hvNV([In] IntPtr extensionPointer, int target, ushort* v)
        // GLvoid glMultiTexCoord1hvNV(GLenum target, const GLushort* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]unsigned int16*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]unsigned int16*)\r\nret")]
        #endif
        public static unsafe void glMultiTexCoord1hvNV([In] IntPtr extensionPointer, int target, ushort* v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord1hvNV([In] IntPtr extensionPointer, int target, ushort* v)
        #endregion Overloads for GLvoid glMultiTexCoord1hvNV(GLenum target, const GLushort* v)

        #region Overloads for GLvoid glMultiTexCoord2hNV(GLenum target, GLushort s, GLushort t)
        #region void glMultiTexCoord2hNV([In] IntPtr extensionPointer, int target, short s, short t)
        // GLvoid glMultiTexCoord2hNV(GLenum target, GLushort s, GLushort t)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg s\r\nldarg t\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int16,[in]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg s\r\nldarg t\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int16,[in]int16)\r\nret")]
        #endif
        public static void glMultiTexCoord2hNV([In] IntPtr extensionPointer, int target, short s, short t) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord2hNV([In] IntPtr extensionPointer, int target, short s, short t)

        #region void glMultiTexCoord2hNV([In] IntPtr extensionPointer, int target, ushort s, ushort t)
        // GLvoid glMultiTexCoord2hNV(GLenum target, GLushort s, GLushort t)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg s\r\nldarg t\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]unsigned int16,[in]unsigned int16)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg s\r\nldarg t\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]unsigned int16,[in]unsigned int16)\r\nret")]
        #endif
        public static void glMultiTexCoord2hNV([In] IntPtr extensionPointer, int target, ushort s, ushort t) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord2hNV([In] IntPtr extensionPointer, int target, ushort s, ushort t)
        #endregion Overloads for GLvoid glMultiTexCoord2hNV(GLenum target, GLushort s, GLushort t)

        #region Overloads for GLvoid glMultiTexCoord2hvNV(GLenum target, const GLushort* v)
        #region void glMultiTexCoord2hvNV([In] IntPtr extensionPointer, int target, short[] v)
        // GLvoid glMultiTexCoord2hvNV(GLenum target, const GLushort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int16[])\r\nret")]
        #endif
        public static void glMultiTexCoord2hvNV([In] IntPtr extensionPointer, int target, short[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord2hvNV([In] IntPtr extensionPointer, int target, short[] v)

        #region void glMultiTexCoord2hvNV([In] IntPtr extensionPointer, int target, ref short v)
        // GLvoid glMultiTexCoord2hvNV(GLenum target, const GLushort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]int16)\r\nret")]
        #endif
        public static void glMultiTexCoord2hvNV([In] IntPtr extensionPointer, int target, ref short v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord2hvNV([In] IntPtr extensionPointer, int target, ref short v)

        #region void glMultiTexCoord2hvNV([In] IntPtr extensionPointer, int target, IntPtr v)
        // GLvoid glMultiTexCoord2hvNV(GLenum target, const GLushort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glMultiTexCoord2hvNV([In] IntPtr extensionPointer, int target, IntPtr v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord2hvNV([In] IntPtr extensionPointer, int target, IntPtr v)

        #region void glMultiTexCoord2hvNV([In] IntPtr extensionPointer, int target, ref ushort v)
        // GLvoid glMultiTexCoord2hvNV(GLenum target, const GLushort* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]unsigned int16)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]unsigned int16)\r\nret")]
        #endif
        public static void glMultiTexCoord2hvNV([In] IntPtr extensionPointer, int target, ref ushort v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord2hvNV([In] IntPtr extensionPointer, int target, ref ushort v)

        #region void glMultiTexCoord2hvNV([In] IntPtr extensionPointer, int target, ushort[] v)
        // GLvoid glMultiTexCoord2hvNV(GLenum target, const GLushort* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]unsigned int16[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]unsigned int16[])\r\nret")]
        #endif
        public static void glMultiTexCoord2hvNV([In] IntPtr extensionPointer, int target, ushort[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord2hvNV([In] IntPtr extensionPointer, int target, ushort[] v)

        #region void glMultiTexCoord2hvNV([In] IntPtr extensionPointer, int target, ushort* v)
        // GLvoid glMultiTexCoord2hvNV(GLenum target, const GLushort* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]unsigned int16*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]unsigned int16*)\r\nret")]
        #endif
        public static unsafe void glMultiTexCoord2hvNV([In] IntPtr extensionPointer, int target, ushort* v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord2hvNV([In] IntPtr extensionPointer, int target, ushort* v)
        #endregion Overloads for GLvoid glMultiTexCoord2hvNV(GLenum target, const GLushort* v)

        #region Overloads for GLvoid glMultiTexCoord3hNV(GLenum target, GLushort s, GLushort t, GLushort r)
        #region void glMultiTexCoord3hNV([In] IntPtr extensionPointer, int target, short s, short t, short r)
        // GLvoid glMultiTexCoord3hNV(GLenum target, GLushort s, GLushort t, GLushort r)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg s\r\nldarg t\r\nldarg r\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int16,[in]int16,[in]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg s\r\nldarg t\r\nldarg r\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int16,[in]int16,[in]int16)\r\nret")]
        #endif
        public static void glMultiTexCoord3hNV([In] IntPtr extensionPointer, int target, short s, short t, short r) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord3hNV([In] IntPtr extensionPointer, int target, short s, short t, short r)

        #region void glMultiTexCoord3hNV([In] IntPtr extensionPointer, int target, ushort s, ushort t, ushort r)
        // GLvoid glMultiTexCoord3hNV(GLenum target, GLushort s, GLushort t, GLushort r)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg s\r\nldarg t\r\nldarg r\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]unsigned int16,[in]unsigned int16,[in]unsigned int16)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg s\r\nldarg t\r\nldarg r\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]unsigned int16,[in]unsigned int16,[in]unsigned int16)\r\nret")]
        #endif
        public static void glMultiTexCoord3hNV([In] IntPtr extensionPointer, int target, ushort s, ushort t, ushort r) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord3hNV([In] IntPtr extensionPointer, int target, ushort s, ushort t, ushort r)
        #endregion Overloads for GLvoid glMultiTexCoord3hNV(GLenum target, GLushort s, GLushort t, GLushort r)

        #region Overloads for GLvoid glMultiTexCoord3hvNV(GLenum target, const GLushort* v)
        #region void glMultiTexCoord3hvNV([In] IntPtr extensionPointer, int target, short[] v)
        // GLvoid glMultiTexCoord3hvNV(GLenum target, const GLushort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int16[])\r\nret")]
        #endif
        public static void glMultiTexCoord3hvNV([In] IntPtr extensionPointer, int target, short[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord3hvNV([In] IntPtr extensionPointer, int target, short[] v)

        #region void glMultiTexCoord3hvNV([In] IntPtr extensionPointer, int target, ref short v)
        // GLvoid glMultiTexCoord3hvNV(GLenum target, const GLushort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]int16)\r\nret")]
        #endif
        public static void glMultiTexCoord3hvNV([In] IntPtr extensionPointer, int target, ref short v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord3hvNV([In] IntPtr extensionPointer, int target, ref short v)

        #region void glMultiTexCoord3hvNV([In] IntPtr extensionPointer, int target, IntPtr v)
        // GLvoid glMultiTexCoord3hvNV(GLenum target, const GLushort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glMultiTexCoord3hvNV([In] IntPtr extensionPointer, int target, IntPtr v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord3hvNV([In] IntPtr extensionPointer, int target, IntPtr v)

        #region void glMultiTexCoord3hvNV([In] IntPtr extensionPointer, int target, ref ushort v)
        // GLvoid glMultiTexCoord3hvNV(GLenum target, const GLushort* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]unsigned int16)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]unsigned int16)\r\nret")]
        #endif
        public static void glMultiTexCoord3hvNV([In] IntPtr extensionPointer, int target, ref ushort v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord3hvNV([In] IntPtr extensionPointer, int target, ref ushort v)

        #region void glMultiTexCoord3hvNV([In] IntPtr extensionPointer, int target, ushort[] v)
        // GLvoid glMultiTexCoord3hvNV(GLenum target, const GLushort* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]unsigned int16[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]unsigned int16[])\r\nret")]
        #endif
        public static void glMultiTexCoord3hvNV([In] IntPtr extensionPointer, int target, ushort[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord3hvNV([In] IntPtr extensionPointer, int target, ushort[] v)

        #region void glMultiTexCoord3hvNV([In] IntPtr extensionPointer, int target, ushort* v)
        // GLvoid glMultiTexCoord3hvNV(GLenum target, const GLushort* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]unsigned int16*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]unsigned int16*)\r\nret")]
        #endif
        public static unsafe void glMultiTexCoord3hvNV([In] IntPtr extensionPointer, int target, ushort* v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord3hvNV([In] IntPtr extensionPointer, int target, ushort* v)
        #endregion Overloads for GLvoid glMultiTexCoord3hvNV(GLenum target, const GLushort* v)

        #region Overloads for GLvoid glMultiTexCoord4hNV(GLenum target, GLushort s, GLushort t, GLushort r, GLushort q)
        #region void glMultiTexCoord4hNV([In] IntPtr extensionPointer, int target, short s, short t, short r, short q)
        // GLvoid glMultiTexCoord4hNV(GLenum target, GLushort s, GLushort t, GLushort r, GLushort q)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg target\r\nldarg s\r\nldarg t\r\nldarg r\r\nldarg q\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int16,[in]int16,[in]int16,[in]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg target\r\nldarg s\r\nldarg t\r\nldarg r\r\nldarg q\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int16,[in]int16,[in]int16,[in]int16)\r\nret")]
        #endif
        public static void glMultiTexCoord4hNV([In] IntPtr extensionPointer, int target, short s, short t, short r, short q) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord4hNV([In] IntPtr extensionPointer, int target, short s, short t, short r, short q)

        #region void glMultiTexCoord4hNV([In] IntPtr extensionPointer, int target, ushort s, ushort t, ushort r, ushort q)
        // GLvoid glMultiTexCoord4hNV(GLenum target, GLushort s, GLushort t, GLushort r, GLushort q)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg target\r\nldarg s\r\nldarg t\r\nldarg r\r\nldarg q\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]unsigned int16,[in]unsigned int16,[in]unsigned int16,[in]unsigned int16)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg target\r\nldarg s\r\nldarg t\r\nldarg r\r\nldarg q\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]unsigned int16,[in]unsigned int16,[in]unsigned int16,[in]unsigned int16)\r\nret")]
        #endif
        public static void glMultiTexCoord4hNV([In] IntPtr extensionPointer, int target, ushort s, ushort t, ushort r, ushort q) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord4hNV([In] IntPtr extensionPointer, int target, ushort s, ushort t, ushort r, ushort q)
        #endregion Overloads for GLvoid glMultiTexCoord4hNV(GLenum target, GLushort s, GLushort t, GLushort r, GLushort q)

        #region Overloads for GLvoid glMultiTexCoord4hvNV(GLenum target, const GLushort* v)
        #region void glMultiTexCoord4hvNV([In] IntPtr extensionPointer, int target, short[] v)
        // GLvoid glMultiTexCoord4hvNV(GLenum target, const GLushort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int16[])\r\nret")]
        #endif
        public static void glMultiTexCoord4hvNV([In] IntPtr extensionPointer, int target, short[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord4hvNV([In] IntPtr extensionPointer, int target, short[] v)

        #region void glMultiTexCoord4hvNV([In] IntPtr extensionPointer, int target, ref short v)
        // GLvoid glMultiTexCoord4hvNV(GLenum target, const GLushort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]int16)\r\nret")]
        #endif
        public static void glMultiTexCoord4hvNV([In] IntPtr extensionPointer, int target, ref short v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord4hvNV([In] IntPtr extensionPointer, int target, ref short v)

        #region void glMultiTexCoord4hvNV([In] IntPtr extensionPointer, int target, IntPtr v)
        // GLvoid glMultiTexCoord4hvNV(GLenum target, const GLushort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glMultiTexCoord4hvNV([In] IntPtr extensionPointer, int target, IntPtr v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord4hvNV([In] IntPtr extensionPointer, int target, IntPtr v)

        #region void glMultiTexCoord4hvNV([In] IntPtr extensionPointer, int target, ref ushort v)
        // GLvoid glMultiTexCoord4hvNV(GLenum target, const GLushort* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]unsigned int16)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]unsigned int16)\r\nret")]
        #endif
        public static void glMultiTexCoord4hvNV([In] IntPtr extensionPointer, int target, ref ushort v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord4hvNV([In] IntPtr extensionPointer, int target, ref ushort v)

        #region void glMultiTexCoord4hvNV([In] IntPtr extensionPointer, int target, ushort[] v)
        // GLvoid glMultiTexCoord4hvNV(GLenum target, const GLushort* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]unsigned int16[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]unsigned int16[])\r\nret")]
        #endif
        public static void glMultiTexCoord4hvNV([In] IntPtr extensionPointer, int target, ushort[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord4hvNV([In] IntPtr extensionPointer, int target, ushort[] v)

        #region void glMultiTexCoord4hvNV([In] IntPtr extensionPointer, int target, ushort* v)
        // GLvoid glMultiTexCoord4hvNV(GLenum target, const GLushort* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]unsigned int16*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]unsigned int16*)\r\nret")]
        #endif
        public static unsafe void glMultiTexCoord4hvNV([In] IntPtr extensionPointer, int target, ushort* v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord4hvNV([In] IntPtr extensionPointer, int target, ushort* v)
        #endregion Overloads for GLvoid glMultiTexCoord4hvNV(GLenum target, const GLushort* v)

        #region Overloads for GLvoid glFogCoordhNV(GLushort fog)
        #region void glFogCoordhNV([In] IntPtr extensionPointer, short fog)
        // GLvoid glFogCoordhNV(GLushort fog)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg fog\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg fog\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int16)\r\nret")]
        #endif
        public static void glFogCoordhNV([In] IntPtr extensionPointer, short fog) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glFogCoordhNV([In] IntPtr extensionPointer, short fog)

        #region void glFogCoordhNV([In] IntPtr extensionPointer, ushort fog)
        // GLvoid glFogCoordhNV(GLushort fog)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg fog\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int16)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg fog\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int16)\r\nret")]
        #endif
        public static void glFogCoordhNV([In] IntPtr extensionPointer, ushort fog) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glFogCoordhNV([In] IntPtr extensionPointer, ushort fog)
        #endregion Overloads for GLvoid glFogCoordhNV(GLushort fog)

        #region Overloads for GLvoid glFogCoordhvNV(const GLushort* fog)
        #region void glFogCoordhvNV([In] IntPtr extensionPointer, short[] fog)
        // GLvoid glFogCoordhvNV(const GLushort* fog)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg fog\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg fog\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int16[])\r\nret")]
        #endif
        public static void glFogCoordhvNV([In] IntPtr extensionPointer, short[] fog) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glFogCoordhvNV([In] IntPtr extensionPointer, short[] fog)

        #region void glFogCoordhvNV([In] IntPtr extensionPointer, ref short fog)
        // GLvoid glFogCoordhvNV(const GLushort* fog)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg fog\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg fog\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]int16)\r\nret")]
        #endif
        public static void glFogCoordhvNV([In] IntPtr extensionPointer, ref short fog) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glFogCoordhvNV([In] IntPtr extensionPointer, ref short fog)

        #region void glFogCoordhvNV([In] IntPtr extensionPointer, IntPtr fog)
        // GLvoid glFogCoordhvNV(const GLushort* fog)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg fog\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg fog\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int)\r\nret")]
        #endif
        public static void glFogCoordhvNV([In] IntPtr extensionPointer, IntPtr fog) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glFogCoordhvNV([In] IntPtr extensionPointer, IntPtr fog)

        #region void glFogCoordhvNV([In] IntPtr extensionPointer, ref ushort fog)
        // GLvoid glFogCoordhvNV(const GLushort* fog)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg fog\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]unsigned int16)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg fog\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]unsigned int16)\r\nret")]
        #endif
        public static void glFogCoordhvNV([In] IntPtr extensionPointer, ref ushort fog) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glFogCoordhvNV([In] IntPtr extensionPointer, ref ushort fog)

        #region void glFogCoordhvNV([In] IntPtr extensionPointer, ushort[] fog)
        // GLvoid glFogCoordhvNV(const GLushort* fog)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg fog\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int16[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg fog\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int16[])\r\nret")]
        #endif
        public static void glFogCoordhvNV([In] IntPtr extensionPointer, ushort[] fog) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glFogCoordhvNV([In] IntPtr extensionPointer, ushort[] fog)

        #region void glFogCoordhvNV([In] IntPtr extensionPointer, ushort* fog)
        // GLvoid glFogCoordhvNV(const GLushort* fog)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg fog\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int16*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg fog\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int16*)\r\nret")]
        #endif
        public static unsafe void glFogCoordhvNV([In] IntPtr extensionPointer, ushort* fog) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glFogCoordhvNV([In] IntPtr extensionPointer, ushort* fog)
        #endregion Overloads for GLvoid glFogCoordhvNV(const GLushort* fog)

        #region Overloads for GLvoid glSecondaryColor3hNV(GLushort red, GLushort green, GLushort blue)
        #region void glSecondaryColor3hNV([In] IntPtr extensionPointer, short red, short green, short blue)
        // GLvoid glSecondaryColor3hNV(GLushort red, GLushort green, GLushort blue)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg red\r\nldarg green\r\nldarg blue\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int16,[in]int16,[in]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg red\r\nldarg green\r\nldarg blue\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int16,[in]int16,[in]int16)\r\nret")]
        #endif
        public static void glSecondaryColor3hNV([In] IntPtr extensionPointer, short red, short green, short blue) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSecondaryColor3hNV([In] IntPtr extensionPointer, short red, short green, short blue)

        #region void glSecondaryColor3hNV([In] IntPtr extensionPointer, ushort red, ushort green, ushort blue)
        // GLvoid glSecondaryColor3hNV(GLushort red, GLushort green, GLushort blue)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg red\r\nldarg green\r\nldarg blue\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int16,[in]unsigned int16,[in]unsigned int16)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg red\r\nldarg green\r\nldarg blue\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int16,[in]unsigned int16,[in]unsigned int16)\r\nret")]
        #endif
        public static void glSecondaryColor3hNV([In] IntPtr extensionPointer, ushort red, ushort green, ushort blue) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSecondaryColor3hNV([In] IntPtr extensionPointer, ushort red, ushort green, ushort blue)
        #endregion Overloads for GLvoid glSecondaryColor3hNV(GLushort red, GLushort green, GLushort blue)

        #region Overloads for GLvoid glSecondaryColor3hvNV(const GLushort* v)
        #region void glSecondaryColor3hvNV([In] IntPtr extensionPointer, short[] v)
        // GLvoid glSecondaryColor3hvNV(const GLushort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int16[])\r\nret")]
        #endif
        public static void glSecondaryColor3hvNV([In] IntPtr extensionPointer, short[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSecondaryColor3hvNV([In] IntPtr extensionPointer, short[] v)

        #region void glSecondaryColor3hvNV([In] IntPtr extensionPointer, ref short v)
        // GLvoid glSecondaryColor3hvNV(const GLushort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]int16)\r\nret")]
        #endif
        public static void glSecondaryColor3hvNV([In] IntPtr extensionPointer, ref short v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSecondaryColor3hvNV([In] IntPtr extensionPointer, ref short v)

        #region void glSecondaryColor3hvNV([In] IntPtr extensionPointer, IntPtr v)
        // GLvoid glSecondaryColor3hvNV(const GLushort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int)\r\nret")]
        #endif
        public static void glSecondaryColor3hvNV([In] IntPtr extensionPointer, IntPtr v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSecondaryColor3hvNV([In] IntPtr extensionPointer, IntPtr v)

        #region void glSecondaryColor3hvNV([In] IntPtr extensionPointer, ref ushort v)
        // GLvoid glSecondaryColor3hvNV(const GLushort* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]unsigned int16)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]unsigned int16)\r\nret")]
        #endif
        public static void glSecondaryColor3hvNV([In] IntPtr extensionPointer, ref ushort v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSecondaryColor3hvNV([In] IntPtr extensionPointer, ref ushort v)

        #region void glSecondaryColor3hvNV([In] IntPtr extensionPointer, ushort[] v)
        // GLvoid glSecondaryColor3hvNV(const GLushort* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int16[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int16[])\r\nret")]
        #endif
        public static void glSecondaryColor3hvNV([In] IntPtr extensionPointer, ushort[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSecondaryColor3hvNV([In] IntPtr extensionPointer, ushort[] v)

        #region void glSecondaryColor3hvNV([In] IntPtr extensionPointer, ushort* v)
        // GLvoid glSecondaryColor3hvNV(const GLushort* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int16*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int16*)\r\nret")]
        #endif
        public static unsafe void glSecondaryColor3hvNV([In] IntPtr extensionPointer, ushort* v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSecondaryColor3hvNV([In] IntPtr extensionPointer, ushort* v)
        #endregion Overloads for GLvoid glSecondaryColor3hvNV(const GLushort* v)

        #region Overloads for GLvoid glVertexWeighthNV(GLushort weight)
        #region void glVertexWeighthNV([In] IntPtr extensionPointer, short weight)
        // GLvoid glVertexWeighthNV(GLushort weight)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg weight\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg weight\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int16)\r\nret")]
        #endif
        public static void glVertexWeighthNV([In] IntPtr extensionPointer, short weight) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexWeighthNV([In] IntPtr extensionPointer, short weight)

        #region void glVertexWeighthNV([In] IntPtr extensionPointer, ushort weight)
        // GLvoid glVertexWeighthNV(GLushort weight)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg weight\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int16)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg weight\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int16)\r\nret")]
        #endif
        public static void glVertexWeighthNV([In] IntPtr extensionPointer, ushort weight) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexWeighthNV([In] IntPtr extensionPointer, ushort weight)
        #endregion Overloads for GLvoid glVertexWeighthNV(GLushort weight)

        #region Overloads for GLvoid glVertexWeighthvNV(const GLushort* weight)
        #region void glVertexWeighthvNV([In] IntPtr extensionPointer, short[] weight)
        // GLvoid glVertexWeighthvNV(const GLushort* weight)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg weight\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg weight\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int16[])\r\nret")]
        #endif
        public static void glVertexWeighthvNV([In] IntPtr extensionPointer, short[] weight) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexWeighthvNV([In] IntPtr extensionPointer, short[] weight)

        #region void glVertexWeighthvNV([In] IntPtr extensionPointer, ref short weight)
        // GLvoid glVertexWeighthvNV(const GLushort* weight)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg weight\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg weight\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]int16)\r\nret")]
        #endif
        public static void glVertexWeighthvNV([In] IntPtr extensionPointer, ref short weight) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexWeighthvNV([In] IntPtr extensionPointer, ref short weight)

        #region void glVertexWeighthvNV([In] IntPtr extensionPointer, IntPtr weight)
        // GLvoid glVertexWeighthvNV(const GLushort* weight)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg weight\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg weight\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int)\r\nret")]
        #endif
        public static void glVertexWeighthvNV([In] IntPtr extensionPointer, IntPtr weight) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexWeighthvNV([In] IntPtr extensionPointer, IntPtr weight)

        #region void glVertexWeighthvNV([In] IntPtr extensionPointer, ref ushort weight)
        // GLvoid glVertexWeighthvNV(const GLushort* weight)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg weight\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]unsigned int16)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg weight\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]unsigned int16)\r\nret")]
        #endif
        public static void glVertexWeighthvNV([In] IntPtr extensionPointer, ref ushort weight) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexWeighthvNV([In] IntPtr extensionPointer, ref ushort weight)

        #region void glVertexWeighthvNV([In] IntPtr extensionPointer, ushort[] weight)
        // GLvoid glVertexWeighthvNV(const GLushort* weight)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg weight\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int16[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg weight\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int16[])\r\nret")]
        #endif
        public static void glVertexWeighthvNV([In] IntPtr extensionPointer, ushort[] weight) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexWeighthvNV([In] IntPtr extensionPointer, ushort[] weight)

        #region void glVertexWeighthvNV([In] IntPtr extensionPointer, ushort* weight)
        // GLvoid glVertexWeighthvNV(const GLushort* weight)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg weight\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int16*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg weight\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int16*)\r\nret")]
        #endif
        public static unsafe void glVertexWeighthvNV([In] IntPtr extensionPointer, ushort* weight) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexWeighthvNV([In] IntPtr extensionPointer, ushort* weight)
        #endregion Overloads for GLvoid glVertexWeighthvNV(const GLushort* weight)

        #region Overloads for GLvoid glVertexAttrib1hNV(GLuint index, GLushort x)
        #region void glVertexAttrib1hNV([In] IntPtr extensionPointer, int index, short x)
        // GLvoid glVertexAttrib1hNV(GLuint index, GLushort x)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg x\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg x\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int16)\r\nret")]
        #endif
        public static void glVertexAttrib1hNV([In] IntPtr extensionPointer, int index, short x) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib1hNV([In] IntPtr extensionPointer, int index, short x)

        #region void glVertexAttrib1hNV([In] IntPtr extensionPointer, uint index, ushort x)
        // GLvoid glVertexAttrib1hNV(GLuint index, GLushort x)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg x\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int32,[in]unsigned int16)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg x\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int32,[in]unsigned int16)\r\nret")]
        #endif
        public static void glVertexAttrib1hNV([In] IntPtr extensionPointer, uint index, ushort x) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib1hNV([In] IntPtr extensionPointer, uint index, ushort x)
        #endregion Overloads for GLvoid glVertexAttrib1hNV(GLuint index, GLushort x)

        #region Overloads for GLvoid glVertexAttrib1hvNV(GLuint index, const GLushort* v)
        #region void glVertexAttrib1hvNV([In] IntPtr extensionPointer, int index, short[] v)
        // GLvoid glVertexAttrib1hvNV(GLuint index, const GLushort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int16[])\r\nret")]
        #endif
        public static void glVertexAttrib1hvNV([In] IntPtr extensionPointer, int index, short[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib1hvNV([In] IntPtr extensionPointer, int index, short[] v)

        #region void glVertexAttrib1hvNV([In] IntPtr extensionPointer, int index, ref short v)
        // GLvoid glVertexAttrib1hvNV(GLuint index, const GLushort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]int16)\r\nret")]
        #endif
        public static void glVertexAttrib1hvNV([In] IntPtr extensionPointer, int index, ref short v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib1hvNV([In] IntPtr extensionPointer, int index, ref short v)

        #region void glVertexAttrib1hvNV([In] IntPtr extensionPointer, int index, IntPtr v)
        // GLvoid glVertexAttrib1hvNV(GLuint index, const GLushort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glVertexAttrib1hvNV([In] IntPtr extensionPointer, int index, IntPtr v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib1hvNV([In] IntPtr extensionPointer, int index, IntPtr v)

        #region void glVertexAttrib1hvNV([In] IntPtr extensionPointer, uint index, IntPtr v)
        // GLvoid glVertexAttrib1hvNV(GLuint index, const GLushort* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int32,[in]native int)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int32,[in]native int)\r\nret")]
        #endif
        public static void glVertexAttrib1hvNV([In] IntPtr extensionPointer, uint index, IntPtr v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib1hvNV([In] IntPtr extensionPointer, uint index, IntPtr v)

        #region void glVertexAttrib1hvNV([In] IntPtr extensionPointer, uint index, ref ushort v)
        // GLvoid glVertexAttrib1hvNV(GLuint index, const GLushort* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int32,[in][out]unsigned int16)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int32,[in][out]unsigned int16)\r\nret")]
        #endif
        public static void glVertexAttrib1hvNV([In] IntPtr extensionPointer, uint index, ref ushort v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib1hvNV([In] IntPtr extensionPointer, uint index, ref ushort v)

        #region void glVertexAttrib1hvNV([In] IntPtr extensionPointer, uint index, ushort[] v)
        // GLvoid glVertexAttrib1hvNV(GLuint index, const GLushort* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int32,[in]unsigned int16[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int32,[in]unsigned int16[])\r\nret")]
        #endif
        public static void glVertexAttrib1hvNV([In] IntPtr extensionPointer, uint index, ushort[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib1hvNV([In] IntPtr extensionPointer, uint index, ushort[] v)

        #region void glVertexAttrib1hvNV([In] IntPtr extensionPointer, uint index, ushort* v)
        // GLvoid glVertexAttrib1hvNV(GLuint index, const GLushort* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int32,[in]unsigned int16*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int32,[in]unsigned int16*)\r\nret")]
        #endif
        public static unsafe void glVertexAttrib1hvNV([In] IntPtr extensionPointer, uint index, ushort* v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib1hvNV([In] IntPtr extensionPointer, uint index, ushort* v)
        #endregion Overloads for GLvoid glVertexAttrib1hvNV(GLuint index, const GLushort* v)

        #region Overloads for GLvoid glVertexAttrib2hNV(GLuint index, GLushort x, GLushort y)
        #region void glVertexAttrib2hNV([In] IntPtr extensionPointer, int index, short x, short y)
        // GLvoid glVertexAttrib2hNV(GLuint index, GLushort x, GLushort y)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg x\r\nldarg y\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int16,[in]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg x\r\nldarg y\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int16,[in]int16)\r\nret")]
        #endif
        public static void glVertexAttrib2hNV([In] IntPtr extensionPointer, int index, short x, short y) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib2hNV([In] IntPtr extensionPointer, int index, short x, short y)

        #region void glVertexAttrib2hNV([In] IntPtr extensionPointer, uint index, ushort x, ushort y)
        // GLvoid glVertexAttrib2hNV(GLuint index, GLushort x, GLushort y)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg x\r\nldarg y\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int32,[in]unsigned int16,[in]unsigned int16)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg x\r\nldarg y\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int32,[in]unsigned int16,[in]unsigned int16)\r\nret")]
        #endif
        public static void glVertexAttrib2hNV([In] IntPtr extensionPointer, uint index, ushort x, ushort y) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib2hNV([In] IntPtr extensionPointer, uint index, ushort x, ushort y)
        #endregion Overloads for GLvoid glVertexAttrib2hNV(GLuint index, GLushort x, GLushort y)

        #region Overloads for GLvoid glVertexAttrib2hvNV(GLuint index, const GLushort* v)
        #region void glVertexAttrib2hvNV([In] IntPtr extensionPointer, int index, short[] v)
        // GLvoid glVertexAttrib2hvNV(GLuint index, const GLushort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int16[])\r\nret")]
        #endif
        public static void glVertexAttrib2hvNV([In] IntPtr extensionPointer, int index, short[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib2hvNV([In] IntPtr extensionPointer, int index, short[] v)

        #region void glVertexAttrib2hvNV([In] IntPtr extensionPointer, int index, ref short v)
        // GLvoid glVertexAttrib2hvNV(GLuint index, const GLushort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]int16)\r\nret")]
        #endif
        public static void glVertexAttrib2hvNV([In] IntPtr extensionPointer, int index, ref short v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib2hvNV([In] IntPtr extensionPointer, int index, ref short v)

        #region void glVertexAttrib2hvNV([In] IntPtr extensionPointer, int index, IntPtr v)
        // GLvoid glVertexAttrib2hvNV(GLuint index, const GLushort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glVertexAttrib2hvNV([In] IntPtr extensionPointer, int index, IntPtr v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib2hvNV([In] IntPtr extensionPointer, int index, IntPtr v)

        #region void glVertexAttrib2hvNV([In] IntPtr extensionPointer, uint index, IntPtr v)
        // GLvoid glVertexAttrib2hvNV(GLuint index, const GLushort* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int32,[in]native int)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int32,[in]native int)\r\nret")]
        #endif
        public static void glVertexAttrib2hvNV([In] IntPtr extensionPointer, uint index, IntPtr v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib2hvNV([In] IntPtr extensionPointer, uint index, IntPtr v)

        #region void glVertexAttrib2hvNV([In] IntPtr extensionPointer, uint index, ref ushort v)
        // GLvoid glVertexAttrib2hvNV(GLuint index, const GLushort* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int32,[in][out]unsigned int16)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int32,[in][out]unsigned int16)\r\nret")]
        #endif
        public static void glVertexAttrib2hvNV([In] IntPtr extensionPointer, uint index, ref ushort v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib2hvNV([In] IntPtr extensionPointer, uint index, ref ushort v)

        #region void glVertexAttrib2hvNV([In] IntPtr extensionPointer, uint index, ushort[] v)
        // GLvoid glVertexAttrib2hvNV(GLuint index, const GLushort* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int32,[in]unsigned int16[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int32,[in]unsigned int16[])\r\nret")]
        #endif
        public static void glVertexAttrib2hvNV([In] IntPtr extensionPointer, uint index, ushort[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib2hvNV([In] IntPtr extensionPointer, uint index, ushort[] v)

        #region void glVertexAttrib2hvNV([In] IntPtr extensionPointer, uint index, ushort* v)
        // GLvoid glVertexAttrib2hvNV(GLuint index, const GLushort* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int32,[in]unsigned int16*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int32,[in]unsigned int16*)\r\nret")]
        #endif
        public static unsafe void glVertexAttrib2hvNV([In] IntPtr extensionPointer, uint index, ushort* v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib2hvNV([In] IntPtr extensionPointer, uint index, ushort* v)
        #endregion Overloads for GLvoid glVertexAttrib2hvNV(GLuint index, const GLushort* v)

        #region Overloads for GLvoid glVertexAttrib3hNV(GLuint index, GLushort x, GLushort y, GLushort z)
        #region void glVertexAttrib3hNV([In] IntPtr extensionPointer, int index, short x, short y, short z)
        // GLvoid glVertexAttrib3hNV(GLuint index, GLushort x, GLushort y, GLushort z)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg index\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int16,[in]int16,[in]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg index\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int16,[in]int16,[in]int16)\r\nret")]
        #endif
        public static void glVertexAttrib3hNV([In] IntPtr extensionPointer, int index, short x, short y, short z) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib3hNV([In] IntPtr extensionPointer, int index, short x, short y, short z)

        #region void glVertexAttrib3hNV([In] IntPtr extensionPointer, uint index, ushort x, ushort y, ushort z)
        // GLvoid glVertexAttrib3hNV(GLuint index, GLushort x, GLushort y, GLushort z)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg index\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int32,[in]unsigned int16,[in]unsigned int16,[in]unsigned int16)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg index\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int32,[in]unsigned int16,[in]unsigned int16,[in]unsigned int16)\r\nret")]
        #endif
        public static void glVertexAttrib3hNV([In] IntPtr extensionPointer, uint index, ushort x, ushort y, ushort z) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib3hNV([In] IntPtr extensionPointer, uint index, ushort x, ushort y, ushort z)
        #endregion Overloads for GLvoid glVertexAttrib3hNV(GLuint index, GLushort x, GLushort y, GLushort z)

        #region Overloads for GLvoid glVertexAttrib3hvNV(GLuint index, const GLushort* v)
        #region void glVertexAttrib3hvNV([In] IntPtr extensionPointer, int index, short[] v)
        // GLvoid glVertexAttrib3hvNV(GLuint index, const GLushort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int16[])\r\nret")]
        #endif
        public static void glVertexAttrib3hvNV([In] IntPtr extensionPointer, int index, short[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib3hvNV([In] IntPtr extensionPointer, int index, short[] v)

        #region void glVertexAttrib3hvNV([In] IntPtr extensionPointer, int index, ref short v)
        // GLvoid glVertexAttrib3hvNV(GLuint index, const GLushort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]int16)\r\nret")]
        #endif
        public static void glVertexAttrib3hvNV([In] IntPtr extensionPointer, int index, ref short v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib3hvNV([In] IntPtr extensionPointer, int index, ref short v)

        #region void glVertexAttrib3hvNV([In] IntPtr extensionPointer, int index, IntPtr v)
        // GLvoid glVertexAttrib3hvNV(GLuint index, const GLushort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glVertexAttrib3hvNV([In] IntPtr extensionPointer, int index, IntPtr v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib3hvNV([In] IntPtr extensionPointer, int index, IntPtr v)

        #region void glVertexAttrib3hvNV([In] IntPtr extensionPointer, uint index, IntPtr v)
        // GLvoid glVertexAttrib3hvNV(GLuint index, const GLushort* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int32,[in]native int)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int32,[in]native int)\r\nret")]
        #endif
        public static void glVertexAttrib3hvNV([In] IntPtr extensionPointer, uint index, IntPtr v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib3hvNV([In] IntPtr extensionPointer, uint index, IntPtr v)

        #region void glVertexAttrib3hvNV([In] IntPtr extensionPointer, uint index, ref ushort v)
        // GLvoid glVertexAttrib3hvNV(GLuint index, const GLushort* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int32,[in][out]unsigned int16)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int32,[in][out]unsigned int16)\r\nret")]
        #endif
        public static void glVertexAttrib3hvNV([In] IntPtr extensionPointer, uint index, ref ushort v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib3hvNV([In] IntPtr extensionPointer, uint index, ref ushort v)

        #region void glVertexAttrib3hvNV([In] IntPtr extensionPointer, uint index, ushort[] v)
        // GLvoid glVertexAttrib3hvNV(GLuint index, const GLushort* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int32,[in]unsigned int16[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int32,[in]unsigned int16[])\r\nret")]
        #endif
        public static void glVertexAttrib3hvNV([In] IntPtr extensionPointer, uint index, ushort[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib3hvNV([In] IntPtr extensionPointer, uint index, ushort[] v)

        #region void glVertexAttrib3hvNV([In] IntPtr extensionPointer, uint index, ushort* v)
        // GLvoid glVertexAttrib3hvNV(GLuint index, const GLushort* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int32,[in]unsigned int16*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int32,[in]unsigned int16*)\r\nret")]
        #endif
        public static unsafe void glVertexAttrib3hvNV([In] IntPtr extensionPointer, uint index, ushort* v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib3hvNV([In] IntPtr extensionPointer, uint index, ushort* v)
        #endregion Overloads for GLvoid glVertexAttrib3hvNV(GLuint index, const GLushort* v)

        #region Overloads for GLvoid glVertexAttrib4hNV(GLuint index, GLushort x, GLushort y, GLushort z, GLushort w)
        #region void glVertexAttrib4hNV([In] IntPtr extensionPointer, int index, short x, short y, short z, short w)
        // GLvoid glVertexAttrib4hNV(GLuint index, GLushort x, GLushort y, GLushort z, GLushort w)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg index\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg w\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int16,[in]int16,[in]int16,[in]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg index\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg w\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int16,[in]int16,[in]int16,[in]int16)\r\nret")]
        #endif
        public static void glVertexAttrib4hNV([In] IntPtr extensionPointer, int index, short x, short y, short z, short w) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib4hNV([In] IntPtr extensionPointer, int index, short x, short y, short z, short w)

        #region void glVertexAttrib4hNV([In] IntPtr extensionPointer, uint index, ushort x, ushort y, ushort z, ushort w)
        // GLvoid glVertexAttrib4hNV(GLuint index, GLushort x, GLushort y, GLushort z, GLushort w)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg index\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg w\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int32,[in]unsigned int16,[in]unsigned int16,[in]unsigned int16,[in]unsigned int16)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg index\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg w\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int32,[in]unsigned int16,[in]unsigned int16,[in]unsigned int16,[in]unsigned int16)\r\nret")]
        #endif
        public static void glVertexAttrib4hNV([In] IntPtr extensionPointer, uint index, ushort x, ushort y, ushort z, ushort w) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib4hNV([In] IntPtr extensionPointer, uint index, ushort x, ushort y, ushort z, ushort w)
        #endregion Overloads for GLvoid glVertexAttrib4hNV(GLuint index, GLushort x, GLushort y, GLushort z, GLushort w)

        #region Overloads for GLvoid glVertexAttrib4hvNV(GLuint index, const GLushort* v)
        #region void glVertexAttrib4hvNV([In] IntPtr extensionPointer, int index, short[] v)
        // GLvoid glVertexAttrib4hvNV(GLuint index, const GLushort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int16[])\r\nret")]
        #endif
        public static void glVertexAttrib4hvNV([In] IntPtr extensionPointer, int index, short[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib4hvNV([In] IntPtr extensionPointer, int index, short[] v)

        #region void glVertexAttrib4hvNV([In] IntPtr extensionPointer, int index, ref short v)
        // GLvoid glVertexAttrib4hvNV(GLuint index, const GLushort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]int16)\r\nret")]
        #endif
        public static void glVertexAttrib4hvNV([In] IntPtr extensionPointer, int index, ref short v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib4hvNV([In] IntPtr extensionPointer, int index, ref short v)

        #region void glVertexAttrib4hvNV([In] IntPtr extensionPointer, int index, IntPtr v)
        // GLvoid glVertexAttrib4hvNV(GLuint index, const GLushort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glVertexAttrib4hvNV([In] IntPtr extensionPointer, int index, IntPtr v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib4hvNV([In] IntPtr extensionPointer, int index, IntPtr v)

        #region void glVertexAttrib4hvNV([In] IntPtr extensionPointer, uint index, IntPtr v)
        // GLvoid glVertexAttrib4hvNV(GLuint index, const GLushort* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int32,[in]native int)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int32,[in]native int)\r\nret")]
        #endif
        public static void glVertexAttrib4hvNV([In] IntPtr extensionPointer, uint index, IntPtr v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib4hvNV([In] IntPtr extensionPointer, uint index, IntPtr v)

        #region void glVertexAttrib4hvNV([In] IntPtr extensionPointer, uint index, ref ushort v)
        // GLvoid glVertexAttrib4hvNV(GLuint index, const GLushort* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int32,[in][out]unsigned int16)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int32,[in][out]unsigned int16)\r\nret")]
        #endif
        public static void glVertexAttrib4hvNV([In] IntPtr extensionPointer, uint index, ref ushort v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib4hvNV([In] IntPtr extensionPointer, uint index, ref ushort v)

        #region void glVertexAttrib4hvNV([In] IntPtr extensionPointer, uint index, ushort[] v)
        // GLvoid glVertexAttrib4hvNV(GLuint index, const GLushort* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int32,[in]unsigned int16[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int32,[in]unsigned int16[])\r\nret")]
        #endif
        public static void glVertexAttrib4hvNV([In] IntPtr extensionPointer, uint index, ushort[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib4hvNV([In] IntPtr extensionPointer, uint index, ushort[] v)

        #region void glVertexAttrib4hvNV([In] IntPtr extensionPointer, uint index, ushort* v)
        // GLvoid glVertexAttrib4hvNV(GLuint index, const GLushort* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int32,[in]unsigned int16*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg index\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int32,[in]unsigned int16*)\r\nret")]
        #endif
        public static unsafe void glVertexAttrib4hvNV([In] IntPtr extensionPointer, uint index, ushort* v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttrib4hvNV([In] IntPtr extensionPointer, uint index, ushort* v)
        #endregion Overloads for GLvoid glVertexAttrib4hvNV(GLuint index, const GLushort* v)

        #region Overloads for GLvoid glVertexAttribs1hvNV(GLuint index, GLsizei n, const GLushort* v)
        #region void glVertexAttribs1hvNV([In] IntPtr extensionPointer, int index, int n, short[] v)
        // GLvoid glVertexAttribs1hvNV(GLuint index, GLsizei n, const GLushort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int16[])\r\nret")]
        #endif
        public static void glVertexAttribs1hvNV([In] IntPtr extensionPointer, int index, int n, short[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttribs1hvNV([In] IntPtr extensionPointer, int index, int n, short[] v)

        #region void glVertexAttribs1hvNV([In] IntPtr extensionPointer, int index, int n, ref short v)
        // GLvoid glVertexAttribs1hvNV(GLuint index, GLsizei n, const GLushort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in][out]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in][out]int16)\r\nret")]
        #endif
        public static void glVertexAttribs1hvNV([In] IntPtr extensionPointer, int index, int n, ref short v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttribs1hvNV([In] IntPtr extensionPointer, int index, int n, ref short v)

        #region void glVertexAttribs1hvNV([In] IntPtr extensionPointer, int index, int n, IntPtr v)
        // GLvoid glVertexAttribs1hvNV(GLuint index, GLsizei n, const GLushort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]native int)\r\nret")]
        #endif
        public static void glVertexAttribs1hvNV([In] IntPtr extensionPointer, int index, int n, IntPtr v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttribs1hvNV([In] IntPtr extensionPointer, int index, int n, IntPtr v)

        #region void glVertexAttribs1hvNV([In] IntPtr extensionPointer, uint index, int n, IntPtr v)
        // GLvoid glVertexAttribs1hvNV(GLuint index, GLsizei n, const GLushort* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int32,[in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int32,[in]int32,[in]native int)\r\nret")]
        #endif
        public static void glVertexAttribs1hvNV([In] IntPtr extensionPointer, uint index, int n, IntPtr v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttribs1hvNV([In] IntPtr extensionPointer, uint index, int n, IntPtr v)

        #region void glVertexAttribs1hvNV([In] IntPtr extensionPointer, uint index, int n, ref ushort v)
        // GLvoid glVertexAttribs1hvNV(GLuint index, GLsizei n, const GLushort* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int32,[in]int32,[in][out]unsigned int16)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int32,[in]int32,[in][out]unsigned int16)\r\nret")]
        #endif
        public static void glVertexAttribs1hvNV([In] IntPtr extensionPointer, uint index, int n, ref ushort v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttribs1hvNV([In] IntPtr extensionPointer, uint index, int n, ref ushort v)

        #region void glVertexAttribs1hvNV([In] IntPtr extensionPointer, uint index, int n, ushort[] v)
        // GLvoid glVertexAttribs1hvNV(GLuint index, GLsizei n, const GLushort* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int32,[in]int32,[in]unsigned int16[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int32,[in]int32,[in]unsigned int16[])\r\nret")]
        #endif
        public static void glVertexAttribs1hvNV([In] IntPtr extensionPointer, uint index, int n, ushort[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttribs1hvNV([In] IntPtr extensionPointer, uint index, int n, ushort[] v)

        #region void glVertexAttribs1hvNV([In] IntPtr extensionPointer, uint index, int n, ushort* v)
        // GLvoid glVertexAttribs1hvNV(GLuint index, GLsizei n, const GLushort* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int32,[in]int32,[in]unsigned int16*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int32,[in]int32,[in]unsigned int16*)\r\nret")]
        #endif
        public static unsafe void glVertexAttribs1hvNV([In] IntPtr extensionPointer, uint index, int n, ushort* v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttribs1hvNV([In] IntPtr extensionPointer, uint index, int n, ushort* v)
        #endregion Overloads for GLvoid glVertexAttribs1hvNV(GLuint index, GLsizei n, const GLushort* v)

        #region Overloads for GLvoid glVertexAttribs2hvNV(GLuint index, GLsizei n, const GLushort* v)
        #region void glVertexAttribs2hvNV([In] IntPtr extensionPointer, int index, int n, short[] v)
        // GLvoid glVertexAttribs2hvNV(GLuint index, GLsizei n, const GLushort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int16[])\r\nret")]
        #endif
        public static void glVertexAttribs2hvNV([In] IntPtr extensionPointer, int index, int n, short[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttribs2hvNV([In] IntPtr extensionPointer, int index, int n, short[] v)

        #region void glVertexAttribs2hvNV([In] IntPtr extensionPointer, int index, int n, ref short v)
        // GLvoid glVertexAttribs2hvNV(GLuint index, GLsizei n, const GLushort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in][out]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in][out]int16)\r\nret")]
        #endif
        public static void glVertexAttribs2hvNV([In] IntPtr extensionPointer, int index, int n, ref short v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttribs2hvNV([In] IntPtr extensionPointer, int index, int n, ref short v)

        #region void glVertexAttribs2hvNV([In] IntPtr extensionPointer, int index, int n, IntPtr v)
        // GLvoid glVertexAttribs2hvNV(GLuint index, GLsizei n, const GLushort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]native int)\r\nret")]
        #endif
        public static void glVertexAttribs2hvNV([In] IntPtr extensionPointer, int index, int n, IntPtr v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttribs2hvNV([In] IntPtr extensionPointer, int index, int n, IntPtr v)

        #region void glVertexAttribs2hvNV([In] IntPtr extensionPointer, uint index, int n, IntPtr v)
        // GLvoid glVertexAttribs2hvNV(GLuint index, GLsizei n, const GLushort* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int32,[in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int32,[in]int32,[in]native int)\r\nret")]
        #endif
        public static void glVertexAttribs2hvNV([In] IntPtr extensionPointer, uint index, int n, IntPtr v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttribs2hvNV([In] IntPtr extensionPointer, uint index, int n, IntPtr v)

        #region void glVertexAttribs2hvNV([In] IntPtr extensionPointer, uint index, int n, ref ushort v)
        // GLvoid glVertexAttribs2hvNV(GLuint index, GLsizei n, const GLushort* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int32,[in]int32,[in][out]unsigned int16)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int32,[in]int32,[in][out]unsigned int16)\r\nret")]
        #endif
        public static void glVertexAttribs2hvNV([In] IntPtr extensionPointer, uint index, int n, ref ushort v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttribs2hvNV([In] IntPtr extensionPointer, uint index, int n, ref ushort v)

        #region void glVertexAttribs2hvNV([In] IntPtr extensionPointer, uint index, int n, ushort[] v)
        // GLvoid glVertexAttribs2hvNV(GLuint index, GLsizei n, const GLushort* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int32,[in]int32,[in]unsigned int16[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int32,[in]int32,[in]unsigned int16[])\r\nret")]
        #endif
        public static void glVertexAttribs2hvNV([In] IntPtr extensionPointer, uint index, int n, ushort[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttribs2hvNV([In] IntPtr extensionPointer, uint index, int n, ushort[] v)

        #region void glVertexAttribs2hvNV([In] IntPtr extensionPointer, uint index, int n, ushort* v)
        // GLvoid glVertexAttribs2hvNV(GLuint index, GLsizei n, const GLushort* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int32,[in]int32,[in]unsigned int16*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int32,[in]int32,[in]unsigned int16*)\r\nret")]
        #endif
        public static unsafe void glVertexAttribs2hvNV([In] IntPtr extensionPointer, uint index, int n, ushort* v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttribs2hvNV([In] IntPtr extensionPointer, uint index, int n, ushort* v)
        #endregion Overloads for GLvoid glVertexAttribs2hvNV(GLuint index, GLsizei n, const GLushort* v)

        #region Overloads for GLvoid glVertexAttribs3hvNV(GLuint index, GLsizei n, const GLushort* v)
        #region void glVertexAttribs3hvNV([In] IntPtr extensionPointer, int index, int n, short[] v)
        // GLvoid glVertexAttribs3hvNV(GLuint index, GLsizei n, const GLushort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int16[])\r\nret")]
        #endif
        public static void glVertexAttribs3hvNV([In] IntPtr extensionPointer, int index, int n, short[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttribs3hvNV([In] IntPtr extensionPointer, int index, int n, short[] v)

        #region void glVertexAttribs3hvNV([In] IntPtr extensionPointer, int index, int n, ref short v)
        // GLvoid glVertexAttribs3hvNV(GLuint index, GLsizei n, const GLushort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in][out]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in][out]int16)\r\nret")]
        #endif
        public static void glVertexAttribs3hvNV([In] IntPtr extensionPointer, int index, int n, ref short v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttribs3hvNV([In] IntPtr extensionPointer, int index, int n, ref short v)

        #region void glVertexAttribs3hvNV([In] IntPtr extensionPointer, int index, int n, IntPtr v)
        // GLvoid glVertexAttribs3hvNV(GLuint index, GLsizei n, const GLushort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]native int)\r\nret")]
        #endif
        public static void glVertexAttribs3hvNV([In] IntPtr extensionPointer, int index, int n, IntPtr v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttribs3hvNV([In] IntPtr extensionPointer, int index, int n, IntPtr v)

        #region void glVertexAttribs3hvNV([In] IntPtr extensionPointer, uint index, int n, IntPtr v)
        // GLvoid glVertexAttribs3hvNV(GLuint index, GLsizei n, const GLushort* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int32,[in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int32,[in]int32,[in]native int)\r\nret")]
        #endif
        public static void glVertexAttribs3hvNV([In] IntPtr extensionPointer, uint index, int n, IntPtr v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttribs3hvNV([In] IntPtr extensionPointer, uint index, int n, IntPtr v)

        #region void glVertexAttribs3hvNV([In] IntPtr extensionPointer, uint index, int n, ref ushort v)
        // GLvoid glVertexAttribs3hvNV(GLuint index, GLsizei n, const GLushort* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int32,[in]int32,[in][out]unsigned int16)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int32,[in]int32,[in][out]unsigned int16)\r\nret")]
        #endif
        public static void glVertexAttribs3hvNV([In] IntPtr extensionPointer, uint index, int n, ref ushort v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttribs3hvNV([In] IntPtr extensionPointer, uint index, int n, ref ushort v)

        #region void glVertexAttribs3hvNV([In] IntPtr extensionPointer, uint index, int n, ushort[] v)
        // GLvoid glVertexAttribs3hvNV(GLuint index, GLsizei n, const GLushort* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int32,[in]int32,[in]unsigned int16[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int32,[in]int32,[in]unsigned int16[])\r\nret")]
        #endif
        public static void glVertexAttribs3hvNV([In] IntPtr extensionPointer, uint index, int n, ushort[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttribs3hvNV([In] IntPtr extensionPointer, uint index, int n, ushort[] v)

        #region void glVertexAttribs3hvNV([In] IntPtr extensionPointer, uint index, int n, ushort* v)
        // GLvoid glVertexAttribs3hvNV(GLuint index, GLsizei n, const GLushort* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int32,[in]int32,[in]unsigned int16*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int32,[in]int32,[in]unsigned int16*)\r\nret")]
        #endif
        public static unsafe void glVertexAttribs3hvNV([In] IntPtr extensionPointer, uint index, int n, ushort* v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttribs3hvNV([In] IntPtr extensionPointer, uint index, int n, ushort* v)
        #endregion Overloads for GLvoid glVertexAttribs3hvNV(GLuint index, GLsizei n, const GLushort* v)

        #region Overloads for GLvoid glVertexAttribs4hvNV(GLuint index, GLsizei n, const GLushort* v)
        #region void glVertexAttribs4hvNV([In] IntPtr extensionPointer, int index, int n, short[] v)
        // GLvoid glVertexAttribs4hvNV(GLuint index, GLsizei n, const GLushort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int16[])\r\nret")]
        #endif
        public static void glVertexAttribs4hvNV([In] IntPtr extensionPointer, int index, int n, short[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttribs4hvNV([In] IntPtr extensionPointer, int index, int n, short[] v)

        #region void glVertexAttribs4hvNV([In] IntPtr extensionPointer, int index, int n, ref short v)
        // GLvoid glVertexAttribs4hvNV(GLuint index, GLsizei n, const GLushort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in][out]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in][out]int16)\r\nret")]
        #endif
        public static void glVertexAttribs4hvNV([In] IntPtr extensionPointer, int index, int n, ref short v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttribs4hvNV([In] IntPtr extensionPointer, int index, int n, ref short v)

        #region void glVertexAttribs4hvNV([In] IntPtr extensionPointer, int index, int n, IntPtr v)
        // GLvoid glVertexAttribs4hvNV(GLuint index, GLsizei n, const GLushort* v)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]native int)\r\nret")]
        #endif
        public static void glVertexAttribs4hvNV([In] IntPtr extensionPointer, int index, int n, IntPtr v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttribs4hvNV([In] IntPtr extensionPointer, int index, int n, IntPtr v)

        #region void glVertexAttribs4hvNV([In] IntPtr extensionPointer, uint index, int n, IntPtr v)
        // GLvoid glVertexAttribs4hvNV(GLuint index, GLsizei n, const GLushort* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int32,[in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int32,[in]int32,[in]native int)\r\nret")]
        #endif
        public static void glVertexAttribs4hvNV([In] IntPtr extensionPointer, uint index, int n, IntPtr v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttribs4hvNV([In] IntPtr extensionPointer, uint index, int n, IntPtr v)

        #region void glVertexAttribs4hvNV([In] IntPtr extensionPointer, uint index, int n, ref ushort v)
        // GLvoid glVertexAttribs4hvNV(GLuint index, GLsizei n, const GLushort* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int32,[in]int32,[in][out]unsigned int16)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int32,[in]int32,[in][out]unsigned int16)\r\nret")]
        #endif
        public static void glVertexAttribs4hvNV([In] IntPtr extensionPointer, uint index, int n, ref ushort v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttribs4hvNV([In] IntPtr extensionPointer, uint index, int n, ref ushort v)

        #region void glVertexAttribs4hvNV([In] IntPtr extensionPointer, uint index, int n, ushort[] v)
        // GLvoid glVertexAttribs4hvNV(GLuint index, GLsizei n, const GLushort* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int32,[in]int32,[in]unsigned int16[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int32,[in]int32,[in]unsigned int16[])\r\nret")]
        #endif
        public static void glVertexAttribs4hvNV([In] IntPtr extensionPointer, uint index, int n, ushort[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttribs4hvNV([In] IntPtr extensionPointer, uint index, int n, ushort[] v)

        #region void glVertexAttribs4hvNV([In] IntPtr extensionPointer, uint index, int n, ushort* v)
        // GLvoid glVertexAttribs4hvNV(GLuint index, GLsizei n, const GLushort* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int32,[in]int32,[in]unsigned int16*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg index\r\nldarg n\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int32,[in]int32,[in]unsigned int16*)\r\nret")]
        #endif
        public static unsafe void glVertexAttribs4hvNV([In] IntPtr extensionPointer, uint index, int n, ushort* v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertexAttribs4hvNV([In] IntPtr extensionPointer, uint index, int n, ushort* v)
        #endregion Overloads for GLvoid glVertexAttribs4hvNV(GLuint index, GLsizei n, const GLushort* v)
        #endregion GL_NV_half_float Methods
        #endregion GL_NV_half_float (283)

        #region GL_NV_pixel_data_range (284)
        #region GL_NV_pixel_data_range Constants
        #region GL_WRITE_PIXEL_DATA_RANGE_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_WRITE_PIXEL_DATA_RANGE_NV 0x8878
        public const int GL_WRITE_PIXEL_DATA_RANGE_NV = 0x8878;
        #endregion GL_WRITE_PIXEL_DATA_RANGE_NV

        #region GL_READ_PIXEL_DATA_RANGE_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_READ_PIXEL_DATA_RANGE_NV 0x8879
        public const int GL_READ_PIXEL_DATA_RANGE_NV = 0x8879;
        #endregion GL_READ_PIXEL_DATA_RANGE_NV

        #region GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV 0x887A
        public const int GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV = 0x887A;
        #endregion GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV

        #region GL_READ_PIXEL_DATA_RANGE_LENGTH_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_READ_PIXEL_DATA_RANGE_LENGTH_NV 0x887B
        public const int GL_READ_PIXEL_DATA_RANGE_LENGTH_NV = 0x887B;
        #endregion GL_READ_PIXEL_DATA_RANGE_LENGTH_NV

        #region GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV 0x887C
        public const int GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV = 0x887C;
        #endregion GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV

        #region GL_READ_PIXEL_DATA_RANGE_POINTER_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_READ_PIXEL_DATA_RANGE_POINTER_NV 0x887D
        public const int GL_READ_PIXEL_DATA_RANGE_POINTER_NV = 0x887D;
        #endregion GL_READ_PIXEL_DATA_RANGE_POINTER_NV
        #endregion GL_NV_pixel_data_range Constants

        #region GL_NV_pixel_data_range Methods
        #region Overloads for GLvoid glPixelDataRangeNV(GLenum target, GLsizei length, GLvoid* pointer)
        #region void glPixelDataRangeNV([In] IntPtr extensionPointer, int target, int length, short[] pointer)
        // GLvoid glPixelDataRangeNV(GLenum target, GLsizei length, GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg length\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg length\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int16[])\r\nret")]
        #endif
        public static void glPixelDataRangeNV([In] IntPtr extensionPointer, int target, int length, short[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glPixelDataRangeNV([In] IntPtr extensionPointer, int target, int length, short[] pointer)

        #region void glPixelDataRangeNV([In] IntPtr extensionPointer, int target, int length, float[] pointer)
        // GLvoid glPixelDataRangeNV(GLenum target, GLsizei length, GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg length\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg length\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]float32[])\r\nret")]
        #endif
        public static void glPixelDataRangeNV([In] IntPtr extensionPointer, int target, int length, float[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glPixelDataRangeNV([In] IntPtr extensionPointer, int target, int length, float[] pointer)

        #region void glPixelDataRangeNV([In] IntPtr extensionPointer, int target, int length, int[] pointer)
        // GLvoid glPixelDataRangeNV(GLenum target, GLsizei length, GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg length\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg length\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32[])\r\nret")]
        #endif
        public static void glPixelDataRangeNV([In] IntPtr extensionPointer, int target, int length, int[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glPixelDataRangeNV([In] IntPtr extensionPointer, int target, int length, int[] pointer)

        #region void glPixelDataRangeNV([In] IntPtr extensionPointer, int target, int length, IntPtr pointer)
        // GLvoid glPixelDataRangeNV(GLenum target, GLsizei length, GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg length\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg length\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]native int)\r\nret")]
        #endif
        public static void glPixelDataRangeNV([In] IntPtr extensionPointer, int target, int length, IntPtr pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glPixelDataRangeNV([In] IntPtr extensionPointer, int target, int length, IntPtr pointer)

        #region void glPixelDataRangeNV([In] IntPtr extensionPointer, int target, int length, byte[] pointer)
        // GLvoid glPixelDataRangeNV(GLenum target, GLsizei length, GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg length\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]unsigned int8[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg length\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]unsigned int8[])\r\nret")]
        #endif
        public static void glPixelDataRangeNV([In] IntPtr extensionPointer, int target, int length, byte[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glPixelDataRangeNV([In] IntPtr extensionPointer, int target, int length, byte[] pointer)

        #region void glPixelDataRangeNV([In] IntPtr extensionPointer, int target, int length, double[] pointer)
        // GLvoid glPixelDataRangeNV(GLenum target, GLsizei length, GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg length\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]float64[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg length\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]float64[])\r\nret")]
        #endif
        public static void glPixelDataRangeNV([In] IntPtr extensionPointer, int target, int length, double[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glPixelDataRangeNV([In] IntPtr extensionPointer, int target, int length, double[] pointer)

        #region void glPixelDataRangeNV([In] IntPtr extensionPointer, int target, int length, uint[] pointer)
        // GLvoid glPixelDataRangeNV(GLenum target, GLsizei length, GLvoid* pointer)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg length\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]unsigned int32[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg length\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]unsigned int32[])\r\nret")]
        #endif
        public static void glPixelDataRangeNV([In] IntPtr extensionPointer, int target, int length, uint[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glPixelDataRangeNV([In] IntPtr extensionPointer, int target, int length, uint[] pointer)

        #region void glPixelDataRangeNV([In] IntPtr extensionPointer, int target, int length, sbyte[] pointer)
        // GLvoid glPixelDataRangeNV(GLenum target, GLsizei length, GLvoid* pointer)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg length\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int8[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg length\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int8[])\r\nret")]
        #endif
        public static void glPixelDataRangeNV([In] IntPtr extensionPointer, int target, int length, sbyte[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glPixelDataRangeNV([In] IntPtr extensionPointer, int target, int length, sbyte[] pointer)

        #region void glPixelDataRangeNV([In] IntPtr extensionPointer, int target, int length, ushort[] pointer)
        // GLvoid glPixelDataRangeNV(GLenum target, GLsizei length, GLvoid* pointer)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg length\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]unsigned int16[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg length\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]unsigned int16[])\r\nret")]
        #endif
        public static void glPixelDataRangeNV([In] IntPtr extensionPointer, int target, int length, ushort[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glPixelDataRangeNV([In] IntPtr extensionPointer, int target, int length, ushort[] pointer)

        #region void glPixelDataRangeNV([In] IntPtr extensionPointer, int target, int length, void* pointer)
        // GLvoid glPixelDataRangeNV(GLenum target, GLsizei length, GLvoid* pointer)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg length\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]void*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg length\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]void*)\r\nret")]
        #endif
        public static unsafe void glPixelDataRangeNV([In] IntPtr extensionPointer, int target, int length, void* pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glPixelDataRangeNV([In] IntPtr extensionPointer, int target, int length, void* pointer)
        #endregion Overloads for GLvoid glPixelDataRangeNV(GLenum target, GLsizei length, GLvoid* pointer)

        #region void glFlushPixelDataRangeNV([In] IntPtr extensionPointer, int target)
        // GLvoid glFlushPixelDataRangeNV(GLenum target)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg target\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg target\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32)\r\nret")]
        #endif
        public static void glFlushPixelDataRangeNV([In] IntPtr extensionPointer, int target) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glFlushPixelDataRangeNV([In] IntPtr extensionPointer, int target)
        #endregion GL_NV_pixel_data_range Methods
        #endregion GL_NV_pixel_data_range (284)

        #region GL_NV_primitive_restart (285)
        #region GL_NV_primitive_restart Constants
        #region GL_PRIMITIVE_RESTART_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PRIMITIVE_RESTART_NV 0x8558
        public const int GL_PRIMITIVE_RESTART_NV = 0x8558;
        #endregion GL_PRIMITIVE_RESTART_NV

        #region GL_PRIMITIVE_RESTART_INDEX_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PRIMITIVE_RESTART_INDEX_NV 0x8559
        public const int GL_PRIMITIVE_RESTART_INDEX_NV = 0x8559;
        #endregion GL_PRIMITIVE_RESTART_INDEX_NV
        #endregion GL_NV_primitive_restart Constants

        #region GL_NV_primitive_restart Methods
        #region void glPrimitiveRestartNV([In] IntPtr extensionPointer)
        // GLvoid glPrimitiveRestartNV()
        #if WIN32
        [IlasmAttribute(".maxstack 1\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void()\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 1\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void()\r\nret")]
        #endif
        public static void glPrimitiveRestartNV([In] IntPtr extensionPointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glPrimitiveRestartNV([In] IntPtr extensionPointer)

        #region Overloads for GLvoid glPrimitiveRestartIndexNV(GLuint index)
        #region void glPrimitiveRestartIndexNV([In] IntPtr extensionPointer, int index)
        // GLvoid glPrimitiveRestartIndexNV(GLuint index)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg index\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg index\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32)\r\nret")]
        #endif
        public static void glPrimitiveRestartIndexNV([In] IntPtr extensionPointer, int index) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glPrimitiveRestartIndexNV([In] IntPtr extensionPointer, int index)

        #region void glPrimitiveRestartIndexNV([In] IntPtr extensionPointer, uint index)
        // GLvoid glPrimitiveRestartIndexNV(GLuint index)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg index\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int32)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg index\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int32)\r\nret")]
        #endif
        public static void glPrimitiveRestartIndexNV([In] IntPtr extensionPointer, uint index) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glPrimitiveRestartIndexNV([In] IntPtr extensionPointer, uint index)
        #endregion Overloads for GLvoid glPrimitiveRestartIndexNV(GLuint index)
        #endregion GL_NV_primitive_restart Methods
        #endregion GL_NV_primitive_restart (285)

        #region GL_NV_texture_expand_normal (286)
        #region GL_NV_texture_expand_normal Constants
        #region GL_TEXTURE_UNSIGNED_REMAP_MODE_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_UNSIGNED_REMAP_MODE_NV 0x888F
        public const int GL_TEXTURE_UNSIGNED_REMAP_MODE_NV = 0x888F;
        #endregion GL_TEXTURE_UNSIGNED_REMAP_MODE_NV
        #endregion GL_NV_texture_expand_normal Constants
        #endregion GL_NV_texture_expand_normal (286)

        #region GL_NV_vertex_program2 (287)
        #endregion GL_NV_vertex_program2 (287)

        #region GL_NV_element_array (N/A)
        #region GL_NV_element_array Constants
        #region GL_ELEMENT_ARRAY_TYPE_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_ELEMENT_ARRAY_TYPE_NV 0x8769
        public const int GL_ELEMENT_ARRAY_TYPE_NV = 0x8769;
        #endregion GL_ELEMENT_ARRAY_TYPE_NV

        #region GL_ELEMENT_ARRAY_POINTER_NV
        /// <summary>
        /// 
        /// </summary>
        // #define GL_ELEMENT_ARRAY_POINTER_NV 0x876A
        public const int GL_ELEMENT_ARRAY_POINTER_NV = 0x876A;
        #endregion GL_ELEMENT_ARRAY_POINTER_NV
        #endregion GL_NV_element_array Constants

        #region GL_NV_element_array Methods
        #region Overloads for GLvoid glElementPointerNV(GLenum type, const GLvoid* pointer)
        #region void glElementPointerNV([In] IntPtr extensionPointer, int type, short[] pointer)
        // GLvoid glElementPointerNV(GLenum type, const GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg type\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg type\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int16[])\r\nret")]
        #endif
        public static void glElementPointerNV([In] IntPtr extensionPointer, int type, short[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glElementPointerNV([In] IntPtr extensionPointer, int type, short[] pointer)

        #region void glElementPointerNV([In] IntPtr extensionPointer, int type, float[] pointer)
        // GLvoid glElementPointerNV(GLenum type, const GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg type\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg type\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float32[])\r\nret")]
        #endif
        public static void glElementPointerNV([In] IntPtr extensionPointer, int type, float[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glElementPointerNV([In] IntPtr extensionPointer, int type, float[] pointer)

        #region void glElementPointerNV([In] IntPtr extensionPointer, int type, int[] pointer)
        // GLvoid glElementPointerNV(GLenum type, const GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg type\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg type\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32[])\r\nret")]
        #endif
        public static void glElementPointerNV([In] IntPtr extensionPointer, int type, int[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glElementPointerNV([In] IntPtr extensionPointer, int type, int[] pointer)

        #region void glElementPointerNV([In] IntPtr extensionPointer, int type, IntPtr pointer)
        // GLvoid glElementPointerNV(GLenum type, const GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg type\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg type\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glElementPointerNV([In] IntPtr extensionPointer, int type, IntPtr pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glElementPointerNV([In] IntPtr extensionPointer, int type, IntPtr pointer)

        #region void glElementPointerNV([In] IntPtr extensionPointer, int type, byte[] pointer)
        // GLvoid glElementPointerNV(GLenum type, const GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg type\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]unsigned int8[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg type\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]unsigned int8[])\r\nret")]
        #endif
        public static void glElementPointerNV([In] IntPtr extensionPointer, int type, byte[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glElementPointerNV([In] IntPtr extensionPointer, int type, byte[] pointer)

        #region void glElementPointerNV([In] IntPtr extensionPointer, int type, double[] pointer)
        // GLvoid glElementPointerNV(GLenum type, const GLvoid* pointer)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg type\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float64[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg type\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float64[])\r\nret")]
        #endif
        public static void glElementPointerNV([In] IntPtr extensionPointer, int type, double[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glElementPointerNV([In] IntPtr extensionPointer, int type, double[] pointer)

        #region void glElementPointerNV([In] IntPtr extensionPointer, int type, uint[] pointer)
        // GLvoid glElementPointerNV(GLenum type, const GLvoid* pointer)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg type\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]unsigned int32[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg type\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]unsigned int32[])\r\nret")]
        #endif
        public static void glElementPointerNV([In] IntPtr extensionPointer, int type, uint[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glElementPointerNV([In] IntPtr extensionPointer, int type, uint[] pointer)

        #region void glElementPointerNV([In] IntPtr extensionPointer, int type, sbyte[] pointer)
        // GLvoid glElementPointerNV(GLenum type, const GLvoid* pointer)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg type\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int8[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg type\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int8[])\r\nret")]
        #endif
        public static void glElementPointerNV([In] IntPtr extensionPointer, int type, sbyte[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glElementPointerNV([In] IntPtr extensionPointer, int type, sbyte[] pointer)

        #region void glElementPointerNV([In] IntPtr extensionPointer, int type, ushort[] pointer)
        // GLvoid glElementPointerNV(GLenum type, const GLvoid* pointer)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg type\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]unsigned int16[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg type\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]unsigned int16[])\r\nret")]
        #endif
        public static void glElementPointerNV([In] IntPtr extensionPointer, int type, ushort[] pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glElementPointerNV([In] IntPtr extensionPointer, int type, ushort[] pointer)

        #region void glElementPointerNV([In] IntPtr extensionPointer, int type, void* pointer)
        // GLvoid glElementPointerNV(GLenum type, const GLvoid* pointer)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg type\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]void*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg type\r\nldarg pointer\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]void*)\r\nret")]
        #endif
        public static unsafe void glElementPointerNV([In] IntPtr extensionPointer, int type, void* pointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glElementPointerNV([In] IntPtr extensionPointer, int type, void* pointer)
        #endregion Overloads for GLvoid glElementPointerNV(GLenum type, const GLvoid* pointer)

        #region void glDrawElementArrayNV([In] IntPtr extensionPointer, int mode, int first, int count)
        // GLvoid glDrawElementArrayNV(GLenum mode, GLint first, GLsizei count)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg mode\r\nldarg first\r\nldarg count\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg mode\r\nldarg first\r\nldarg count\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32)\r\nret")]
        #endif
        public static void glDrawElementArrayNV([In] IntPtr extensionPointer, int mode, int first, int count) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glDrawElementArrayNV([In] IntPtr extensionPointer, int mode, int first, int count)

        #region void glDrawRangeElementArrayNV([In] IntPtr extensionPointer, int mode, int start, int end, int first, int count)
        // GLvoid glDrawRangeElementArrayNV(GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg mode\r\nldarg start\r\nldarg end\r\nldarg first\r\nldarg count\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg mode\r\nldarg start\r\nldarg end\r\nldarg first\r\nldarg count\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32)\r\nret")]
        #endif
        public static void glDrawRangeElementArrayNV([In] IntPtr extensionPointer, int mode, int start, int end, int first, int count) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glDrawRangeElementArrayNV([In] IntPtr extensionPointer, int mode, int start, int end, int first, int count)

        #region Overloads for GLvoid glMultiDrawElementArrayNV(GLenum mode, const GLint* first, const GLsizei* count, GLsizei primcount)
        #region void glMultiDrawElementArrayNV([In] IntPtr extensionPointer, int mode, ref int first, ref int count, int primcount)
        // GLvoid glMultiDrawElementArrayNV(GLenum mode, const GLint* first, const GLsizei* count, GLsizei primcount)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg mode\r\nldarg first\r\nldarg count\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]int32,[in][out]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg mode\r\nldarg first\r\nldarg count\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]int32,[in][out]int32,[in]int32)\r\nret")]
        #endif
        public static void glMultiDrawElementArrayNV([In] IntPtr extensionPointer, int mode, ref int first, ref int count, int primcount) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiDrawElementArrayNV([In] IntPtr extensionPointer, int mode, ref int first, ref int count, int primcount)

        #region void glMultiDrawElementArrayNV([In] IntPtr extensionPointer, int mode, int[] first, int[] count, int primcount)
        // GLvoid glMultiDrawElementArrayNV(GLenum mode, const GLint* first, const GLsizei* count, GLsizei primcount)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg mode\r\nldarg first\r\nldarg count\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32[],[in]int32[],[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg mode\r\nldarg first\r\nldarg count\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32[],[in]int32[],[in]int32)\r\nret")]
        #endif
        public static void glMultiDrawElementArrayNV([In] IntPtr extensionPointer, int mode, int[] first, int[] count, int primcount) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiDrawElementArrayNV([In] IntPtr extensionPointer, int mode, int[] first, int[] count, int primcount)

        #region void glMultiDrawElementArrayNV([In] IntPtr extensionPointer, int mode, IntPtr first, IntPtr count, int primcount)
        // GLvoid glMultiDrawElementArrayNV(GLenum mode, const GLint* first, const GLsizei* count, GLsizei primcount)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg mode\r\nldarg first\r\nldarg count\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int,[in]native int,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg mode\r\nldarg first\r\nldarg count\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int,[in]native int,[in]int32)\r\nret")]
        #endif
        public static void glMultiDrawElementArrayNV([In] IntPtr extensionPointer, int mode, IntPtr first, IntPtr count, int primcount) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiDrawElementArrayNV([In] IntPtr extensionPointer, int mode, IntPtr first, IntPtr count, int primcount)

        #region void glMultiDrawElementArrayNV([In] IntPtr extensionPointer, int mode, int* first, int* count, int primcount)
        // GLvoid glMultiDrawElementArrayNV(GLenum mode, const GLint* first, const GLsizei* count, GLsizei primcount)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg mode\r\nldarg first\r\nldarg count\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32*,[in]int32*,[in]int32)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg mode\r\nldarg first\r\nldarg count\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32*,[in]int32*,[in]int32)\r\nret")]
        #endif
        public static unsafe void glMultiDrawElementArrayNV([In] IntPtr extensionPointer, int mode, int* first, int* count, int primcount) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiDrawElementArrayNV([In] IntPtr extensionPointer, int mode, int* first, int* count, int primcount)
        #endregion Overloads for GLvoid glMultiDrawElementArrayNV(GLenum mode, const GLint* first, const GLsizei* count, GLsizei primcount)

        #region Overloads for GLvoid glMultiDrawRangeElementArrayNV(GLenum mode, GLuint start, GLuint end, const GLint* first, const GLsizei* count, GLsizei primcount)
        #region void glMultiDrawRangeElementArrayNV([In] IntPtr extensionPointer, int mode, int start, int end, ref int first, ref int count, int primcount)
        // GLvoid glMultiDrawRangeElementArrayNV(GLenum mode, GLuint start, GLuint end, const GLint* first, const GLsizei* count, GLsizei primcount)
        #if WIN32
        [IlasmAttribute(".maxstack 7\r\nldarg mode\r\nldarg start\r\nldarg end\r\nldarg first\r\nldarg count\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in][out]int32,[in][out]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 7\r\nldarg mode\r\nldarg start\r\nldarg end\r\nldarg first\r\nldarg count\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in][out]int32,[in][out]int32,[in]int32)\r\nret")]
        #endif
        public static void glMultiDrawRangeElementArrayNV([In] IntPtr extensionPointer, int mode, int start, int end, ref int first, ref int count, int primcount) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiDrawRangeElementArrayNV([In] IntPtr extensionPointer, int mode, int start, int end, ref int first, ref int count, int primcount)

        #region void glMultiDrawRangeElementArrayNV([In] IntPtr extensionPointer, int mode, int start, int end, int[] first, int[] count, int primcount)
        // GLvoid glMultiDrawRangeElementArrayNV(GLenum mode, GLuint start, GLuint end, const GLint* first, const GLsizei* count, GLsizei primcount)
        #if WIN32
        [IlasmAttribute(".maxstack 7\r\nldarg mode\r\nldarg start\r\nldarg end\r\nldarg first\r\nldarg count\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32[],[in]int32[],[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 7\r\nldarg mode\r\nldarg start\r\nldarg end\r\nldarg first\r\nldarg count\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32[],[in]int32[],[in]int32)\r\nret")]
        #endif
        public static void glMultiDrawRangeElementArrayNV([In] IntPtr extensionPointer, int mode, int start, int end, int[] first, int[] count, int primcount) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiDrawRangeElementArrayNV([In] IntPtr extensionPointer, int mode, int start, int end, int[] first, int[] count, int primcount)

        #region void glMultiDrawRangeElementArrayNV([In] IntPtr extensionPointer, int mode, int start, int end, IntPtr first, IntPtr count, int primcount)
        // GLvoid glMultiDrawRangeElementArrayNV(GLenum mode, GLuint start, GLuint end, const GLint* first, const GLsizei* count, GLsizei primcount)
        #if WIN32
        [IlasmAttribute(".maxstack 7\r\nldarg mode\r\nldarg start\r\nldarg end\r\nldarg first\r\nldarg count\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]native int,[in]native int,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 7\r\nldarg mode\r\nldarg start\r\nldarg end\r\nldarg first\r\nldarg count\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]native int,[in]native int,[in]int32)\r\nret")]
        #endif
        public static void glMultiDrawRangeElementArrayNV([In] IntPtr extensionPointer, int mode, int start, int end, IntPtr first, IntPtr count, int primcount) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiDrawRangeElementArrayNV([In] IntPtr extensionPointer, int mode, int start, int end, IntPtr first, IntPtr count, int primcount)

        #region void glMultiDrawRangeElementArrayNV([In] IntPtr extensionPointer, int mode, int start, int end, int* first, int* count, int primcount)
        // GLvoid glMultiDrawRangeElementArrayNV(GLenum mode, GLuint start, GLuint end, const GLint* first, const GLsizei* count, GLsizei primcount)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 7\r\nldarg mode\r\nldarg start\r\nldarg end\r\nldarg first\r\nldarg count\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32*,[in]int32*,[in]int32)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 7\r\nldarg mode\r\nldarg start\r\nldarg end\r\nldarg first\r\nldarg count\r\nldarg primcount\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32*,[in]int32*,[in]int32)\r\nret")]
        #endif
        public static unsafe void glMultiDrawRangeElementArrayNV([In] IntPtr extensionPointer, int mode, int start, int end, int* first, int* count, int primcount) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiDrawRangeElementArrayNV([In] IntPtr extensionPointer, int mode, int start, int end, int* first, int* count, int primcount)
        #endregion Overloads for GLvoid glMultiDrawRangeElementArrayNV(GLenum mode, GLuint start, GLuint end, const GLint* first, const GLsizei* count, GLsizei primcount)
        #endregion GL_NV_element_array Methods
        #endregion GL_NV_element_array (N/A)
        #endregion NV Extensions

        #region OES Extensions
        #region GL_OES_byte_coordinates (291)
        #region GL_OES_byte_coordinates Methods
        #region Overloads for GLvoid glVertex2bOES(GLbyte x, GLbyte y)
        #region void glVertex2bOES([In] IntPtr extensionPointer, byte x, byte y)
        // GLvoid glVertex2bOES(GLbyte x, GLbyte y)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg x\r\nldarg y\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int8,[in]unsigned int8)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg x\r\nldarg y\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int8,[in]unsigned int8)\r\nret")]
        #endif
        public static void glVertex2bOES([In] IntPtr extensionPointer, byte x, byte y) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertex2bOES([In] IntPtr extensionPointer, byte x, byte y)

        #region void glVertex2bOES([In] IntPtr extensionPointer, sbyte x, sbyte y)
        // GLvoid glVertex2bOES(GLbyte x, GLbyte y)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg x\r\nldarg y\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int8,[in]int8)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg x\r\nldarg y\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int8,[in]int8)\r\nret")]
        #endif
        public static void glVertex2bOES([In] IntPtr extensionPointer, sbyte x, sbyte y) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertex2bOES([In] IntPtr extensionPointer, sbyte x, sbyte y)
        #endregion Overloads for GLvoid glVertex2bOES(GLbyte x, GLbyte y)

        #region Overloads for GLvoid glVertex3bOES(GLbyte x, GLbyte y, GLbyte z)
        #region void glVertex3bOES([In] IntPtr extensionPointer, byte x, byte y, byte z)
        // GLvoid glVertex3bOES(GLbyte x, GLbyte y, GLbyte z)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int8,[in]unsigned int8,[in]unsigned int8)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int8,[in]unsigned int8,[in]unsigned int8)\r\nret")]
        #endif
        public static void glVertex3bOES([In] IntPtr extensionPointer, byte x, byte y, byte z) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertex3bOES([In] IntPtr extensionPointer, byte x, byte y, byte z)

        #region void glVertex3bOES([In] IntPtr extensionPointer, sbyte x, sbyte y, sbyte z)
        // GLvoid glVertex3bOES(GLbyte x, GLbyte y, GLbyte z)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int8,[in]int8,[in]int8)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int8,[in]int8,[in]int8)\r\nret")]
        #endif
        public static void glVertex3bOES([In] IntPtr extensionPointer, sbyte x, sbyte y, sbyte z) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertex3bOES([In] IntPtr extensionPointer, sbyte x, sbyte y, sbyte z)
        #endregion Overloads for GLvoid glVertex3bOES(GLbyte x, GLbyte y, GLbyte z)

        #region Overloads for GLvoid glVertex4bOES(GLbyte x, GLbyte y, GLbyte z, GLbyte w)
        #region void glVertex4bOES([In] IntPtr extensionPointer, byte x, byte y, byte z, byte w)
        // GLvoid glVertex4bOES(GLbyte x, GLbyte y, GLbyte z, GLbyte w)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg w\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int8,[in]unsigned int8,[in]unsigned int8,[in]unsigned int8)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg w\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int8,[in]unsigned int8,[in]unsigned int8,[in]unsigned int8)\r\nret")]
        #endif
        public static void glVertex4bOES([In] IntPtr extensionPointer, byte x, byte y, byte z, byte w) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertex4bOES([In] IntPtr extensionPointer, byte x, byte y, byte z, byte w)

        #region void glVertex4bOES([In] IntPtr extensionPointer, sbyte x, sbyte y, sbyte z, sbyte w)
        // GLvoid glVertex4bOES(GLbyte x, GLbyte y, GLbyte z, GLbyte w)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg w\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int8,[in]int8,[in]int8,[in]int8)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg w\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int8,[in]int8,[in]int8,[in]int8)\r\nret")]
        #endif
        public static void glVertex4bOES([In] IntPtr extensionPointer, sbyte x, sbyte y, sbyte z, sbyte w) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertex4bOES([In] IntPtr extensionPointer, sbyte x, sbyte y, sbyte z, sbyte w)
        #endregion Overloads for GLvoid glVertex4bOES(GLbyte x, GLbyte y, GLbyte z, GLbyte w)

        #region Overloads for GLvoid glVertex2bvOES(GLbyte coords)
        #region void glVertex2bvOES([In] IntPtr extensionPointer, byte[] coords)
        // GLvoid glVertex2bvOES(GLbyte coords)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int8[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int8[])\r\nret")]
        #endif
        public static void glVertex2bvOES([In] IntPtr extensionPointer, byte[] coords) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertex2bvOES([In] IntPtr extensionPointer, byte[] coords)

        #region void glVertex2bvOES([In] IntPtr extensionPointer, ref byte coords)
        // GLvoid glVertex2bvOES(GLbyte coords)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]unsigned int8)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]unsigned int8)\r\nret")]
        #endif
        public static void glVertex2bvOES([In] IntPtr extensionPointer, ref byte coords) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertex2bvOES([In] IntPtr extensionPointer, ref byte coords)

        #region void glVertex2bvOES([In] IntPtr extensionPointer, IntPtr coords)
        // GLvoid glVertex2bvOES(GLbyte coords)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int)\r\nret")]
        #endif
        public static void glVertex2bvOES([In] IntPtr extensionPointer, IntPtr coords) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertex2bvOES([In] IntPtr extensionPointer, IntPtr coords)

        #region void glVertex2bvOES([In] IntPtr extensionPointer, ref sbyte coords)
        // GLvoid glVertex2bvOES(GLbyte coords)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]int8)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]int8)\r\nret")]
        #endif
        public static void glVertex2bvOES([In] IntPtr extensionPointer, ref sbyte coords) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertex2bvOES([In] IntPtr extensionPointer, ref sbyte coords)

        #region void glVertex2bvOES([In] IntPtr extensionPointer, sbyte[] coords)
        // GLvoid glVertex2bvOES(GLbyte coords)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int8[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int8[])\r\nret")]
        #endif
        public static void glVertex2bvOES([In] IntPtr extensionPointer, sbyte[] coords) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertex2bvOES([In] IntPtr extensionPointer, sbyte[] coords)

        #region void glVertex2bvOES([In] IntPtr extensionPointer, sbyte* coords)
        // GLvoid glVertex2bvOES(GLbyte coords)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int8*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int8*)\r\nret")]
        #endif
        public static unsafe void glVertex2bvOES([In] IntPtr extensionPointer, sbyte* coords) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertex2bvOES([In] IntPtr extensionPointer, sbyte* coords)
        #endregion Overloads for GLvoid glVertex2bvOES(GLbyte coords)

        #region Overloads for GLvoid glVertex3bvOES(GLbyte coords)
        #region void glVertex3bvOES([In] IntPtr extensionPointer, byte[] coords)
        // GLvoid glVertex3bvOES(GLbyte coords)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int8[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int8[])\r\nret")]
        #endif
        public static void glVertex3bvOES([In] IntPtr extensionPointer, byte[] coords) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertex3bvOES([In] IntPtr extensionPointer, byte[] coords)

        #region void glVertex3bvOES([In] IntPtr extensionPointer, ref byte coords)
        // GLvoid glVertex3bvOES(GLbyte coords)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]unsigned int8)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]unsigned int8)\r\nret")]
        #endif
        public static void glVertex3bvOES([In] IntPtr extensionPointer, ref byte coords) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertex3bvOES([In] IntPtr extensionPointer, ref byte coords)

        #region void glVertex3bvOES([In] IntPtr extensionPointer, IntPtr coords)
        // GLvoid glVertex3bvOES(GLbyte coords)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int)\r\nret")]
        #endif
        public static void glVertex3bvOES([In] IntPtr extensionPointer, IntPtr coords) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertex3bvOES([In] IntPtr extensionPointer, IntPtr coords)

        #region void glVertex3bvOES([In] IntPtr extensionPointer, ref sbyte coords)
        // GLvoid glVertex3bvOES(GLbyte coords)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]int8)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]int8)\r\nret")]
        #endif
        public static void glVertex3bvOES([In] IntPtr extensionPointer, ref sbyte coords) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertex3bvOES([In] IntPtr extensionPointer, ref sbyte coords)

        #region void glVertex3bvOES([In] IntPtr extensionPointer, sbyte[] coords)
        // GLvoid glVertex3bvOES(GLbyte coords)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int8[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int8[])\r\nret")]
        #endif
        public static void glVertex3bvOES([In] IntPtr extensionPointer, sbyte[] coords) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertex3bvOES([In] IntPtr extensionPointer, sbyte[] coords)

        #region void glVertex3bvOES([In] IntPtr extensionPointer, sbyte* coords)
        // GLvoid glVertex3bvOES(GLbyte coords)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int8*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int8*)\r\nret")]
        #endif
        public static unsafe void glVertex3bvOES([In] IntPtr extensionPointer, sbyte* coords) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertex3bvOES([In] IntPtr extensionPointer, sbyte* coords)
        #endregion Overloads for GLvoid glVertex3bvOES(GLbyte coords)

        #region Overloads for GLvoid glVertex4bvOES(GLbyte coords)
        #region void glVertex4bvOES([In] IntPtr extensionPointer, byte[] coords)
        // GLvoid glVertex4bvOES(GLbyte coords)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int8[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int8[])\r\nret")]
        #endif
        public static void glVertex4bvOES([In] IntPtr extensionPointer, byte[] coords) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertex4bvOES([In] IntPtr extensionPointer, byte[] coords)

        #region void glVertex4bvOES([In] IntPtr extensionPointer, ref byte coords)
        // GLvoid glVertex4bvOES(GLbyte coords)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]unsigned int8)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]unsigned int8)\r\nret")]
        #endif
        public static void glVertex4bvOES([In] IntPtr extensionPointer, ref byte coords) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertex4bvOES([In] IntPtr extensionPointer, ref byte coords)

        #region void glVertex4bvOES([In] IntPtr extensionPointer, IntPtr coords)
        // GLvoid glVertex4bvOES(GLbyte coords)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int)\r\nret")]
        #endif
        public static void glVertex4bvOES([In] IntPtr extensionPointer, IntPtr coords) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertex4bvOES([In] IntPtr extensionPointer, IntPtr coords)

        #region void glVertex4bvOES([In] IntPtr extensionPointer, ref sbyte coords)
        // GLvoid glVertex4bvOES(GLbyte coords)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]int8)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]int8)\r\nret")]
        #endif
        public static void glVertex4bvOES([In] IntPtr extensionPointer, ref sbyte coords) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertex4bvOES([In] IntPtr extensionPointer, ref sbyte coords)

        #region void glVertex4bvOES([In] IntPtr extensionPointer, sbyte[] coords)
        // GLvoid glVertex4bvOES(GLbyte coords)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int8[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int8[])\r\nret")]
        #endif
        public static void glVertex4bvOES([In] IntPtr extensionPointer, sbyte[] coords) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertex4bvOES([In] IntPtr extensionPointer, sbyte[] coords)

        #region void glVertex4bvOES([In] IntPtr extensionPointer, sbyte* coords)
        // GLvoid glVertex4bvOES(GLbyte coords)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int8*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int8*)\r\nret")]
        #endif
        public static unsafe void glVertex4bvOES([In] IntPtr extensionPointer, sbyte* coords) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glVertex4bvOES([In] IntPtr extensionPointer, sbyte* coords)
        #endregion Overloads for GLvoid glVertex4bvOES(GLbyte coords)

        #region Overloads for GLvoid glTexCoord1bOES(GLbyte s)
        #region void glTexCoord1bOES([In] IntPtr extensionPointer, byte s)
        // GLvoid glTexCoord1bOES(GLbyte s)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg s\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int8)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg s\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int8)\r\nret")]
        #endif
        public static void glTexCoord1bOES([In] IntPtr extensionPointer, byte s) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoord1bOES([In] IntPtr extensionPointer, byte s)

        #region void glTexCoord1bOES([In] IntPtr extensionPointer, sbyte s)
        // GLvoid glTexCoord1bOES(GLbyte s)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg s\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int8)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg s\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int8)\r\nret")]
        #endif
        public static void glTexCoord1bOES([In] IntPtr extensionPointer, sbyte s) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoord1bOES([In] IntPtr extensionPointer, sbyte s)
        #endregion Overloads for GLvoid glTexCoord1bOES(GLbyte s)

        #region Overloads for GLvoid glTexCoord2bOES(GLbyte s, GLbyte t)
        #region void glTexCoord2bOES([In] IntPtr extensionPointer, byte s, byte t)
        // GLvoid glTexCoord2bOES(GLbyte s, GLbyte t)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg s\r\nldarg t\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int8,[in]unsigned int8)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg s\r\nldarg t\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int8,[in]unsigned int8)\r\nret")]
        #endif
        public static void glTexCoord2bOES([In] IntPtr extensionPointer, byte s, byte t) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoord2bOES([In] IntPtr extensionPointer, byte s, byte t)

        #region void glTexCoord2bOES([In] IntPtr extensionPointer, sbyte s, sbyte t)
        // GLvoid glTexCoord2bOES(GLbyte s, GLbyte t)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg s\r\nldarg t\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int8,[in]int8)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg s\r\nldarg t\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int8,[in]int8)\r\nret")]
        #endif
        public static void glTexCoord2bOES([In] IntPtr extensionPointer, sbyte s, sbyte t) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoord2bOES([In] IntPtr extensionPointer, sbyte s, sbyte t)
        #endregion Overloads for GLvoid glTexCoord2bOES(GLbyte s, GLbyte t)

        #region Overloads for GLvoid glTexCoord3bOES(GLbyte s, GLbyte t, GLbyte u)
        #region void glTexCoord3bOES([In] IntPtr extensionPointer, byte s, byte t, byte u)
        // GLvoid glTexCoord3bOES(GLbyte s, GLbyte t, GLbyte u)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg s\r\nldarg t\r\nldarg u\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int8,[in]unsigned int8,[in]unsigned int8)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg s\r\nldarg t\r\nldarg u\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int8,[in]unsigned int8,[in]unsigned int8)\r\nret")]
        #endif
        public static void glTexCoord3bOES([In] IntPtr extensionPointer, byte s, byte t, byte u) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoord3bOES([In] IntPtr extensionPointer, byte s, byte t, byte u)

        #region void glTexCoord3bOES([In] IntPtr extensionPointer, sbyte s, sbyte t, sbyte u)
        // GLvoid glTexCoord3bOES(GLbyte s, GLbyte t, GLbyte u)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg s\r\nldarg t\r\nldarg u\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int8,[in]int8,[in]int8)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg s\r\nldarg t\r\nldarg u\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int8,[in]int8,[in]int8)\r\nret")]
        #endif
        public static void glTexCoord3bOES([In] IntPtr extensionPointer, sbyte s, sbyte t, sbyte u) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoord3bOES([In] IntPtr extensionPointer, sbyte s, sbyte t, sbyte u)
        #endregion Overloads for GLvoid glTexCoord3bOES(GLbyte s, GLbyte t, GLbyte u)

        #region Overloads for GLvoid glTexCoord4bOES(GLbyte s, GLbyte t, GLbyte u, GLbyte v)
        #region void glTexCoord4bOES([In] IntPtr extensionPointer, byte s, byte t, byte u, byte v)
        // GLvoid glTexCoord4bOES(GLbyte s, GLbyte t, GLbyte u, GLbyte v)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg s\r\nldarg t\r\nldarg u\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int8,[in]unsigned int8,[in]unsigned int8,[in]unsigned int8)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg s\r\nldarg t\r\nldarg u\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int8,[in]unsigned int8,[in]unsigned int8,[in]unsigned int8)\r\nret")]
        #endif
        public static void glTexCoord4bOES([In] IntPtr extensionPointer, byte s, byte t, byte u, byte v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoord4bOES([In] IntPtr extensionPointer, byte s, byte t, byte u, byte v)

        #region void glTexCoord4bOES([In] IntPtr extensionPointer, sbyte s, sbyte t, sbyte u, sbyte v)
        // GLvoid glTexCoord4bOES(GLbyte s, GLbyte t, GLbyte u, GLbyte v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg s\r\nldarg t\r\nldarg u\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int8,[in]int8,[in]int8,[in]int8)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg s\r\nldarg t\r\nldarg u\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int8,[in]int8,[in]int8,[in]int8)\r\nret")]
        #endif
        public static void glTexCoord4bOES([In] IntPtr extensionPointer, sbyte s, sbyte t, sbyte u, sbyte v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoord4bOES([In] IntPtr extensionPointer, sbyte s, sbyte t, sbyte u, sbyte v)
        #endregion Overloads for GLvoid glTexCoord4bOES(GLbyte s, GLbyte t, GLbyte u, GLbyte v)

        #region Overloads for GLvoid glTexCoord1bvOES(GLbyte coords)
        #region void glTexCoord1bvOES([In] IntPtr extensionPointer, byte[] coords)
        // GLvoid glTexCoord1bvOES(GLbyte coords)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int8[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int8[])\r\nret")]
        #endif
        public static void glTexCoord1bvOES([In] IntPtr extensionPointer, byte[] coords) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoord1bvOES([In] IntPtr extensionPointer, byte[] coords)

        #region void glTexCoord1bvOES([In] IntPtr extensionPointer, ref byte coords)
        // GLvoid glTexCoord1bvOES(GLbyte coords)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]unsigned int8)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]unsigned int8)\r\nret")]
        #endif
        public static void glTexCoord1bvOES([In] IntPtr extensionPointer, ref byte coords) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoord1bvOES([In] IntPtr extensionPointer, ref byte coords)

        #region void glTexCoord1bvOES([In] IntPtr extensionPointer, IntPtr coords)
        // GLvoid glTexCoord1bvOES(GLbyte coords)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int)\r\nret")]
        #endif
        public static void glTexCoord1bvOES([In] IntPtr extensionPointer, IntPtr coords) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoord1bvOES([In] IntPtr extensionPointer, IntPtr coords)

        #region void glTexCoord1bvOES([In] IntPtr extensionPointer, ref sbyte coords)
        // GLvoid glTexCoord1bvOES(GLbyte coords)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]int8)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]int8)\r\nret")]
        #endif
        public static void glTexCoord1bvOES([In] IntPtr extensionPointer, ref sbyte coords) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoord1bvOES([In] IntPtr extensionPointer, ref sbyte coords)

        #region void glTexCoord1bvOES([In] IntPtr extensionPointer, sbyte[] coords)
        // GLvoid glTexCoord1bvOES(GLbyte coords)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int8[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int8[])\r\nret")]
        #endif
        public static void glTexCoord1bvOES([In] IntPtr extensionPointer, sbyte[] coords) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoord1bvOES([In] IntPtr extensionPointer, sbyte[] coords)

        #region void glTexCoord1bvOES([In] IntPtr extensionPointer, sbyte* coords)
        // GLvoid glTexCoord1bvOES(GLbyte coords)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int8*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int8*)\r\nret")]
        #endif
        public static unsafe void glTexCoord1bvOES([In] IntPtr extensionPointer, sbyte* coords) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoord1bvOES([In] IntPtr extensionPointer, sbyte* coords)
        #endregion Overloads for GLvoid glTexCoord1bvOES(GLbyte coords)

        #region Overloads for GLvoid glTexCoord2bvOES(GLbyte coords)
        #region void glTexCoord2bvOES([In] IntPtr extensionPointer, byte[] coords)
        // GLvoid glTexCoord2bvOES(GLbyte coords)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int8[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int8[])\r\nret")]
        #endif
        public static void glTexCoord2bvOES([In] IntPtr extensionPointer, byte[] coords) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoord2bvOES([In] IntPtr extensionPointer, byte[] coords)

        #region void glTexCoord2bvOES([In] IntPtr extensionPointer, ref byte coords)
        // GLvoid glTexCoord2bvOES(GLbyte coords)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]unsigned int8)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]unsigned int8)\r\nret")]
        #endif
        public static void glTexCoord2bvOES([In] IntPtr extensionPointer, ref byte coords) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoord2bvOES([In] IntPtr extensionPointer, ref byte coords)

        #region void glTexCoord2bvOES([In] IntPtr extensionPointer, IntPtr coords)
        // GLvoid glTexCoord2bvOES(GLbyte coords)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int)\r\nret")]
        #endif
        public static void glTexCoord2bvOES([In] IntPtr extensionPointer, IntPtr coords) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoord2bvOES([In] IntPtr extensionPointer, IntPtr coords)

        #region void glTexCoord2bvOES([In] IntPtr extensionPointer, ref sbyte coords)
        // GLvoid glTexCoord2bvOES(GLbyte coords)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]int8)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]int8)\r\nret")]
        #endif
        public static void glTexCoord2bvOES([In] IntPtr extensionPointer, ref sbyte coords) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoord2bvOES([In] IntPtr extensionPointer, ref sbyte coords)

        #region void glTexCoord2bvOES([In] IntPtr extensionPointer, sbyte[] coords)
        // GLvoid glTexCoord2bvOES(GLbyte coords)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int8[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int8[])\r\nret")]
        #endif
        public static void glTexCoord2bvOES([In] IntPtr extensionPointer, sbyte[] coords) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoord2bvOES([In] IntPtr extensionPointer, sbyte[] coords)

        #region void glTexCoord2bvOES([In] IntPtr extensionPointer, sbyte* coords)
        // GLvoid glTexCoord2bvOES(GLbyte coords)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int8*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int8*)\r\nret")]
        #endif
        public static unsafe void glTexCoord2bvOES([In] IntPtr extensionPointer, sbyte* coords) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoord2bvOES([In] IntPtr extensionPointer, sbyte* coords)
        #endregion Overloads for GLvoid glTexCoord2bvOES(GLbyte coords)

        #region Overloads for GLvoid glTexCoord3bvOES(GLbyte coords)
        #region void glTexCoord3bvOES([In] IntPtr extensionPointer, byte[] coords)
        // GLvoid glTexCoord3bvOES(GLbyte coords)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int8[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int8[])\r\nret")]
        #endif
        public static void glTexCoord3bvOES([In] IntPtr extensionPointer, byte[] coords) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoord3bvOES([In] IntPtr extensionPointer, byte[] coords)

        #region void glTexCoord3bvOES([In] IntPtr extensionPointer, ref byte coords)
        // GLvoid glTexCoord3bvOES(GLbyte coords)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]unsigned int8)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]unsigned int8)\r\nret")]
        #endif
        public static void glTexCoord3bvOES([In] IntPtr extensionPointer, ref byte coords) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoord3bvOES([In] IntPtr extensionPointer, ref byte coords)

        #region void glTexCoord3bvOES([In] IntPtr extensionPointer, IntPtr coords)
        // GLvoid glTexCoord3bvOES(GLbyte coords)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int)\r\nret")]
        #endif
        public static void glTexCoord3bvOES([In] IntPtr extensionPointer, IntPtr coords) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoord3bvOES([In] IntPtr extensionPointer, IntPtr coords)

        #region void glTexCoord3bvOES([In] IntPtr extensionPointer, ref sbyte coords)
        // GLvoid glTexCoord3bvOES(GLbyte coords)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]int8)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]int8)\r\nret")]
        #endif
        public static void glTexCoord3bvOES([In] IntPtr extensionPointer, ref sbyte coords) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoord3bvOES([In] IntPtr extensionPointer, ref sbyte coords)

        #region void glTexCoord3bvOES([In] IntPtr extensionPointer, sbyte[] coords)
        // GLvoid glTexCoord3bvOES(GLbyte coords)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int8[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int8[])\r\nret")]
        #endif
        public static void glTexCoord3bvOES([In] IntPtr extensionPointer, sbyte[] coords) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoord3bvOES([In] IntPtr extensionPointer, sbyte[] coords)

        #region void glTexCoord3bvOES([In] IntPtr extensionPointer, sbyte* coords)
        // GLvoid glTexCoord3bvOES(GLbyte coords)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int8*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int8*)\r\nret")]
        #endif
        public static unsafe void glTexCoord3bvOES([In] IntPtr extensionPointer, sbyte* coords) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoord3bvOES([In] IntPtr extensionPointer, sbyte* coords)
        #endregion Overloads for GLvoid glTexCoord3bvOES(GLbyte coords)

        #region Overloads for GLvoid glTexCoord4bvOES(GLbyte coords)
        #region void glTexCoord4bvOES([In] IntPtr extensionPointer, byte[] coords)
        // GLvoid glTexCoord4bvOES(GLbyte coords)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int8[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int8[])\r\nret")]
        #endif
        public static void glTexCoord4bvOES([In] IntPtr extensionPointer, byte[] coords) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoord4bvOES([In] IntPtr extensionPointer, byte[] coords)

        #region void glTexCoord4bvOES([In] IntPtr extensionPointer, ref byte coords)
        // GLvoid glTexCoord4bvOES(GLbyte coords)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]unsigned int8)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]unsigned int8)\r\nret")]
        #endif
        public static void glTexCoord4bvOES([In] IntPtr extensionPointer, ref byte coords) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoord4bvOES([In] IntPtr extensionPointer, ref byte coords)

        #region void glTexCoord4bvOES([In] IntPtr extensionPointer, IntPtr coords)
        // GLvoid glTexCoord4bvOES(GLbyte coords)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int)\r\nret")]
        #endif
        public static void glTexCoord4bvOES([In] IntPtr extensionPointer, IntPtr coords) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoord4bvOES([In] IntPtr extensionPointer, IntPtr coords)

        #region void glTexCoord4bvOES([In] IntPtr extensionPointer, ref sbyte coords)
        // GLvoid glTexCoord4bvOES(GLbyte coords)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]int8)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]int8)\r\nret")]
        #endif
        public static void glTexCoord4bvOES([In] IntPtr extensionPointer, ref sbyte coords) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoord4bvOES([In] IntPtr extensionPointer, ref sbyte coords)

        #region void glTexCoord4bvOES([In] IntPtr extensionPointer, sbyte[] coords)
        // GLvoid glTexCoord4bvOES(GLbyte coords)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int8[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int8[])\r\nret")]
        #endif
        public static void glTexCoord4bvOES([In] IntPtr extensionPointer, sbyte[] coords) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoord4bvOES([In] IntPtr extensionPointer, sbyte[] coords)

        #region void glTexCoord4bvOES([In] IntPtr extensionPointer, sbyte* coords)
        // GLvoid glTexCoord4bvOES(GLbyte coords)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int8*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int8*)\r\nret")]
        #endif
        public static unsafe void glTexCoord4bvOES([In] IntPtr extensionPointer, sbyte* coords) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoord4bvOES([In] IntPtr extensionPointer, sbyte* coords)
        #endregion Overloads for GLvoid glTexCoord4bvOES(GLbyte coords)

        #region Overloads for GLvoid glMultiTexCoord1bOES(GLenum texture, GLbyte s)
        #region void glMultiTexCoord1bOES([In] IntPtr extensionPointer, int texture, byte s)
        // GLvoid glMultiTexCoord1bOES(GLenum texture, GLbyte s)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg texture\r\nldarg s\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]unsigned int8)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg texture\r\nldarg s\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]unsigned int8)\r\nret")]
        #endif
        public static void glMultiTexCoord1bOES([In] IntPtr extensionPointer, int texture, byte s) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord1bOES([In] IntPtr extensionPointer, int texture, byte s)

        #region void glMultiTexCoord1bOES([In] IntPtr extensionPointer, int texture, sbyte s)
        // GLvoid glMultiTexCoord1bOES(GLenum texture, GLbyte s)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg texture\r\nldarg s\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int8)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg texture\r\nldarg s\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int8)\r\nret")]
        #endif
        public static void glMultiTexCoord1bOES([In] IntPtr extensionPointer, int texture, sbyte s) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord1bOES([In] IntPtr extensionPointer, int texture, sbyte s)
        #endregion Overloads for GLvoid glMultiTexCoord1bOES(GLenum texture, GLbyte s)

        #region Overloads for GLvoid glMultiTexCoord2bOES(GLenum texture, GLbyte s, GLbyte t)
        #region void glMultiTexCoord2bOES([In] IntPtr extensionPointer, int texture, byte s, byte t)
        // GLvoid glMultiTexCoord2bOES(GLenum texture, GLbyte s, GLbyte t)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg texture\r\nldarg s\r\nldarg t\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]unsigned int8,[in]unsigned int8)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg texture\r\nldarg s\r\nldarg t\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]unsigned int8,[in]unsigned int8)\r\nret")]
        #endif
        public static void glMultiTexCoord2bOES([In] IntPtr extensionPointer, int texture, byte s, byte t) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord2bOES([In] IntPtr extensionPointer, int texture, byte s, byte t)

        #region void glMultiTexCoord2bOES([In] IntPtr extensionPointer, int texture, sbyte s, sbyte t)
        // GLvoid glMultiTexCoord2bOES(GLenum texture, GLbyte s, GLbyte t)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg texture\r\nldarg s\r\nldarg t\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int8,[in]int8)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg texture\r\nldarg s\r\nldarg t\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int8,[in]int8)\r\nret")]
        #endif
        public static void glMultiTexCoord2bOES([In] IntPtr extensionPointer, int texture, sbyte s, sbyte t) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord2bOES([In] IntPtr extensionPointer, int texture, sbyte s, sbyte t)
        #endregion Overloads for GLvoid glMultiTexCoord2bOES(GLenum texture, GLbyte s, GLbyte t)

        #region Overloads for GLvoid glMultiTexCoord3bOES(GLenum texture, GLbyte s, GLbyte t, GLbyte u)
        #region void glMultiTexCoord3bOES([In] IntPtr extensionPointer, int texture, byte s, byte t, byte u)
        // GLvoid glMultiTexCoord3bOES(GLenum texture, GLbyte s, GLbyte t, GLbyte u)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg texture\r\nldarg s\r\nldarg t\r\nldarg u\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]unsigned int8,[in]unsigned int8,[in]unsigned int8)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg texture\r\nldarg s\r\nldarg t\r\nldarg u\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]unsigned int8,[in]unsigned int8,[in]unsigned int8)\r\nret")]
        #endif
        public static void glMultiTexCoord3bOES([In] IntPtr extensionPointer, int texture, byte s, byte t, byte u) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord3bOES([In] IntPtr extensionPointer, int texture, byte s, byte t, byte u)

        #region void glMultiTexCoord3bOES([In] IntPtr extensionPointer, int texture, sbyte s, sbyte t, sbyte u)
        // GLvoid glMultiTexCoord3bOES(GLenum texture, GLbyte s, GLbyte t, GLbyte u)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg texture\r\nldarg s\r\nldarg t\r\nldarg u\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int8,[in]int8,[in]int8)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg texture\r\nldarg s\r\nldarg t\r\nldarg u\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int8,[in]int8,[in]int8)\r\nret")]
        #endif
        public static void glMultiTexCoord3bOES([In] IntPtr extensionPointer, int texture, sbyte s, sbyte t, sbyte u) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord3bOES([In] IntPtr extensionPointer, int texture, sbyte s, sbyte t, sbyte u)
        #endregion Overloads for GLvoid glMultiTexCoord3bOES(GLenum texture, GLbyte s, GLbyte t, GLbyte u)

        #region Overloads for GLvoid glMultiTexCoord4bOES(GLenum texture, GLbyte s, GLbyte t, GLbyte u, GLbyte v)
        #region void glMultiTexCoord4bOES([In] IntPtr extensionPointer, int texture, byte s, byte t, byte u, byte v)
        // GLvoid glMultiTexCoord4bOES(GLenum texture, GLbyte s, GLbyte t, GLbyte u, GLbyte v)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg texture\r\nldarg s\r\nldarg t\r\nldarg u\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]unsigned int8,[in]unsigned int8,[in]unsigned int8,[in]unsigned int8)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg texture\r\nldarg s\r\nldarg t\r\nldarg u\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]unsigned int8,[in]unsigned int8,[in]unsigned int8,[in]unsigned int8)\r\nret")]
        #endif
        public static void glMultiTexCoord4bOES([In] IntPtr extensionPointer, int texture, byte s, byte t, byte u, byte v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord4bOES([In] IntPtr extensionPointer, int texture, byte s, byte t, byte u, byte v)

        #region void glMultiTexCoord4bOES([In] IntPtr extensionPointer, int texture, sbyte s, sbyte t, sbyte u, sbyte v)
        // GLvoid glMultiTexCoord4bOES(GLenum texture, GLbyte s, GLbyte t, GLbyte u, GLbyte v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg texture\r\nldarg s\r\nldarg t\r\nldarg u\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int8,[in]int8,[in]int8,[in]int8)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg texture\r\nldarg s\r\nldarg t\r\nldarg u\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int8,[in]int8,[in]int8,[in]int8)\r\nret")]
        #endif
        public static void glMultiTexCoord4bOES([In] IntPtr extensionPointer, int texture, sbyte s, sbyte t, sbyte u, sbyte v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord4bOES([In] IntPtr extensionPointer, int texture, sbyte s, sbyte t, sbyte u, sbyte v)
        #endregion Overloads for GLvoid glMultiTexCoord4bOES(GLenum texture, GLbyte s, GLbyte t, GLbyte u, GLbyte v)

        #region Overloads for GLvoid glMultiTexCoord1bvOES(GLenum texture, GLbyte coords)
        #region void glMultiTexCoord1bvOES([In] IntPtr extensionPointer, int texture, byte[] coords)
        // GLvoid glMultiTexCoord1bvOES(GLenum texture, GLbyte coords)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg texture\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]unsigned int8[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg texture\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]unsigned int8[])\r\nret")]
        #endif
        public static void glMultiTexCoord1bvOES([In] IntPtr extensionPointer, int texture, byte[] coords) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord1bvOES([In] IntPtr extensionPointer, int texture, byte[] coords)

        #region void glMultiTexCoord1bvOES([In] IntPtr extensionPointer, int texture, ref byte coords)
        // GLvoid glMultiTexCoord1bvOES(GLenum texture, GLbyte coords)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg texture\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]unsigned int8)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg texture\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]unsigned int8)\r\nret")]
        #endif
        public static void glMultiTexCoord1bvOES([In] IntPtr extensionPointer, int texture, ref byte coords) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord1bvOES([In] IntPtr extensionPointer, int texture, ref byte coords)

        #region void glMultiTexCoord1bvOES([In] IntPtr extensionPointer, int texture, IntPtr coords)
        // GLvoid glMultiTexCoord1bvOES(GLenum texture, GLbyte coords)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg texture\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg texture\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glMultiTexCoord1bvOES([In] IntPtr extensionPointer, int texture, IntPtr coords) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord1bvOES([In] IntPtr extensionPointer, int texture, IntPtr coords)

        #region void glMultiTexCoord1bvOES([In] IntPtr extensionPointer, int texture, ref sbyte coords)
        // GLvoid glMultiTexCoord1bvOES(GLenum texture, GLbyte coords)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg texture\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]int8)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg texture\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]int8)\r\nret")]
        #endif
        public static void glMultiTexCoord1bvOES([In] IntPtr extensionPointer, int texture, ref sbyte coords) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord1bvOES([In] IntPtr extensionPointer, int texture, ref sbyte coords)

        #region void glMultiTexCoord1bvOES([In] IntPtr extensionPointer, int texture, sbyte[] coords)
        // GLvoid glMultiTexCoord1bvOES(GLenum texture, GLbyte coords)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg texture\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int8[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg texture\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int8[])\r\nret")]
        #endif
        public static void glMultiTexCoord1bvOES([In] IntPtr extensionPointer, int texture, sbyte[] coords) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord1bvOES([In] IntPtr extensionPointer, int texture, sbyte[] coords)

        #region void glMultiTexCoord1bvOES([In] IntPtr extensionPointer, int texture, sbyte* coords)
        // GLvoid glMultiTexCoord1bvOES(GLenum texture, GLbyte coords)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg texture\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int8*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg texture\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int8*)\r\nret")]
        #endif
        public static unsafe void glMultiTexCoord1bvOES([In] IntPtr extensionPointer, int texture, sbyte* coords) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord1bvOES([In] IntPtr extensionPointer, int texture, sbyte* coords)
        #endregion Overloads for GLvoid glMultiTexCoord1bvOES(GLenum texture, GLbyte coords)

        #region Overloads for GLvoid glMultiTexCoord2bvOES(GLenum texture, GLbyte coords)
        #region void glMultiTexCoord2bvOES([In] IntPtr extensionPointer, int texture, byte[] coords)
        // GLvoid glMultiTexCoord2bvOES(GLenum texture, GLbyte coords)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg texture\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]unsigned int8[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg texture\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]unsigned int8[])\r\nret")]
        #endif
        public static void glMultiTexCoord2bvOES([In] IntPtr extensionPointer, int texture, byte[] coords) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord2bvOES([In] IntPtr extensionPointer, int texture, byte[] coords)

        #region void glMultiTexCoord2bvOES([In] IntPtr extensionPointer, int texture, ref byte coords)
        // GLvoid glMultiTexCoord2bvOES(GLenum texture, GLbyte coords)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg texture\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]unsigned int8)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg texture\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]unsigned int8)\r\nret")]
        #endif
        public static void glMultiTexCoord2bvOES([In] IntPtr extensionPointer, int texture, ref byte coords) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord2bvOES([In] IntPtr extensionPointer, int texture, ref byte coords)

        #region void glMultiTexCoord2bvOES([In] IntPtr extensionPointer, int texture, IntPtr coords)
        // GLvoid glMultiTexCoord2bvOES(GLenum texture, GLbyte coords)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg texture\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg texture\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glMultiTexCoord2bvOES([In] IntPtr extensionPointer, int texture, IntPtr coords) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord2bvOES([In] IntPtr extensionPointer, int texture, IntPtr coords)

        #region void glMultiTexCoord2bvOES([In] IntPtr extensionPointer, int texture, ref sbyte coords)
        // GLvoid glMultiTexCoord2bvOES(GLenum texture, GLbyte coords)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg texture\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]int8)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg texture\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]int8)\r\nret")]
        #endif
        public static void glMultiTexCoord2bvOES([In] IntPtr extensionPointer, int texture, ref sbyte coords) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord2bvOES([In] IntPtr extensionPointer, int texture, ref sbyte coords)

        #region void glMultiTexCoord2bvOES([In] IntPtr extensionPointer, int texture, sbyte[] coords)
        // GLvoid glMultiTexCoord2bvOES(GLenum texture, GLbyte coords)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg texture\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int8[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg texture\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int8[])\r\nret")]
        #endif
        public static void glMultiTexCoord2bvOES([In] IntPtr extensionPointer, int texture, sbyte[] coords) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord2bvOES([In] IntPtr extensionPointer, int texture, sbyte[] coords)

        #region void glMultiTexCoord2bvOES([In] IntPtr extensionPointer, int texture, sbyte* coords)
        // GLvoid glMultiTexCoord2bvOES(GLenum texture, GLbyte coords)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg texture\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int8*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg texture\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int8*)\r\nret")]
        #endif
        public static unsafe void glMultiTexCoord2bvOES([In] IntPtr extensionPointer, int texture, sbyte* coords) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord2bvOES([In] IntPtr extensionPointer, int texture, sbyte* coords)
        #endregion Overloads for GLvoid glMultiTexCoord2bvOES(GLenum texture, GLbyte coords)

        #region Overloads for GLvoid glMultiTexCoord3bvOES(GLenum texture, GLbyte coords)
        #region void glMultiTexCoord3bvOES([In] IntPtr extensionPointer, int texture, byte[] coords)
        // GLvoid glMultiTexCoord3bvOES(GLenum texture, GLbyte coords)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg texture\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]unsigned int8[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg texture\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]unsigned int8[])\r\nret")]
        #endif
        public static void glMultiTexCoord3bvOES([In] IntPtr extensionPointer, int texture, byte[] coords) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord3bvOES([In] IntPtr extensionPointer, int texture, byte[] coords)

        #region void glMultiTexCoord3bvOES([In] IntPtr extensionPointer, int texture, ref byte coords)
        // GLvoid glMultiTexCoord3bvOES(GLenum texture, GLbyte coords)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg texture\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]unsigned int8)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg texture\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]unsigned int8)\r\nret")]
        #endif
        public static void glMultiTexCoord3bvOES([In] IntPtr extensionPointer, int texture, ref byte coords) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord3bvOES([In] IntPtr extensionPointer, int texture, ref byte coords)

        #region void glMultiTexCoord3bvOES([In] IntPtr extensionPointer, int texture, IntPtr coords)
        // GLvoid glMultiTexCoord3bvOES(GLenum texture, GLbyte coords)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg texture\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg texture\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glMultiTexCoord3bvOES([In] IntPtr extensionPointer, int texture, IntPtr coords) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord3bvOES([In] IntPtr extensionPointer, int texture, IntPtr coords)

        #region void glMultiTexCoord3bvOES([In] IntPtr extensionPointer, int texture, ref sbyte coords)
        // GLvoid glMultiTexCoord3bvOES(GLenum texture, GLbyte coords)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg texture\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]int8)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg texture\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]int8)\r\nret")]
        #endif
        public static void glMultiTexCoord3bvOES([In] IntPtr extensionPointer, int texture, ref sbyte coords) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord3bvOES([In] IntPtr extensionPointer, int texture, ref sbyte coords)

        #region void glMultiTexCoord3bvOES([In] IntPtr extensionPointer, int texture, sbyte[] coords)
        // GLvoid glMultiTexCoord3bvOES(GLenum texture, GLbyte coords)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg texture\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int8[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg texture\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int8[])\r\nret")]
        #endif
        public static void glMultiTexCoord3bvOES([In] IntPtr extensionPointer, int texture, sbyte[] coords) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord3bvOES([In] IntPtr extensionPointer, int texture, sbyte[] coords)

        #region void glMultiTexCoord3bvOES([In] IntPtr extensionPointer, int texture, sbyte* coords)
        // GLvoid glMultiTexCoord3bvOES(GLenum texture, GLbyte coords)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg texture\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int8*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg texture\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int8*)\r\nret")]
        #endif
        public static unsafe void glMultiTexCoord3bvOES([In] IntPtr extensionPointer, int texture, sbyte* coords) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord3bvOES([In] IntPtr extensionPointer, int texture, sbyte* coords)
        #endregion Overloads for GLvoid glMultiTexCoord3bvOES(GLenum texture, GLbyte coords)

        #region Overloads for GLvoid glMultiTexCoord4bvOES(GLenum texture, GLbyte coords)
        #region void glMultiTexCoord4bvOES([In] IntPtr extensionPointer, int texture, byte[] coords)
        // GLvoid glMultiTexCoord4bvOES(GLenum texture, GLbyte coords)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg texture\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]unsigned int8[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg texture\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]unsigned int8[])\r\nret")]
        #endif
        public static void glMultiTexCoord4bvOES([In] IntPtr extensionPointer, int texture, byte[] coords) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord4bvOES([In] IntPtr extensionPointer, int texture, byte[] coords)

        #region void glMultiTexCoord4bvOES([In] IntPtr extensionPointer, int texture, ref byte coords)
        // GLvoid glMultiTexCoord4bvOES(GLenum texture, GLbyte coords)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg texture\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]unsigned int8)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg texture\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]unsigned int8)\r\nret")]
        #endif
        public static void glMultiTexCoord4bvOES([In] IntPtr extensionPointer, int texture, ref byte coords) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord4bvOES([In] IntPtr extensionPointer, int texture, ref byte coords)

        #region void glMultiTexCoord4bvOES([In] IntPtr extensionPointer, int texture, IntPtr coords)
        // GLvoid glMultiTexCoord4bvOES(GLenum texture, GLbyte coords)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg texture\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg texture\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glMultiTexCoord4bvOES([In] IntPtr extensionPointer, int texture, IntPtr coords) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord4bvOES([In] IntPtr extensionPointer, int texture, IntPtr coords)

        #region void glMultiTexCoord4bvOES([In] IntPtr extensionPointer, int texture, ref sbyte coords)
        // GLvoid glMultiTexCoord4bvOES(GLenum texture, GLbyte coords)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg texture\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]int8)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg texture\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]int8)\r\nret")]
        #endif
        public static void glMultiTexCoord4bvOES([In] IntPtr extensionPointer, int texture, ref sbyte coords) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord4bvOES([In] IntPtr extensionPointer, int texture, ref sbyte coords)

        #region void glMultiTexCoord4bvOES([In] IntPtr extensionPointer, int texture, sbyte[] coords)
        // GLvoid glMultiTexCoord4bvOES(GLenum texture, GLbyte coords)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg texture\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int8[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg texture\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int8[])\r\nret")]
        #endif
        public static void glMultiTexCoord4bvOES([In] IntPtr extensionPointer, int texture, sbyte[] coords) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord4bvOES([In] IntPtr extensionPointer, int texture, sbyte[] coords)

        #region void glMultiTexCoord4bvOES([In] IntPtr extensionPointer, int texture, sbyte* coords)
        // GLvoid glMultiTexCoord4bvOES(GLenum texture, GLbyte coords)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg texture\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int8*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg texture\r\nldarg coords\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int8*)\r\nret")]
        #endif
        public static unsafe void glMultiTexCoord4bvOES([In] IntPtr extensionPointer, int texture, sbyte* coords) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glMultiTexCoord4bvOES([In] IntPtr extensionPointer, int texture, sbyte* coords)
        #endregion Overloads for GLvoid glMultiTexCoord4bvOES(GLenum texture, GLbyte coords)
        #endregion GL_OES_byte_coordinates Methods
        #endregion GL_OES_byte_coordinates (291)

        #region GL_OES_fixed_point (292)
        #endregion GL_OES_fixed_point (292)

        #region GL_OES_single_precision (293)
        #region GL_OES_single_precision Methods
        #region void glDepthRangefOES([In] IntPtr extensionPointer, float near, float far)
        // GLvoid glDepthRangefOES(GLclampf near, GLclampf far)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg near\r\nldarg far\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]float32,[in]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg near\r\nldarg far\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]float32,[in]float32)\r\nret")]
        #endif
        public static void glDepthRangefOES([In] IntPtr extensionPointer, float near, float far) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glDepthRangefOES([In] IntPtr extensionPointer, float near, float far)

        #region void glFrustumfOES([In] IntPtr extensionPointer, float left, float right, float bttom, float top, float near, float far)
        // GLvoid glFrustumfOES(GLfloat left, GLfloat right, GLfloat bttom, GLfloat top, GLfloat near, GLfloat far)
        #if WIN32
        [IlasmAttribute(".maxstack 7\r\nldarg left\r\nldarg right\r\nldarg bttom\r\nldarg top\r\nldarg near\r\nldarg far\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 7\r\nldarg left\r\nldarg right\r\nldarg bttom\r\nldarg top\r\nldarg near\r\nldarg far\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32)\r\nret")]
        #endif
        public static void glFrustumfOES([In] IntPtr extensionPointer, float left, float right, float bttom, float top, float near, float far) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glFrustumfOES([In] IntPtr extensionPointer, float left, float right, float bttom, float top, float near, float far)

        #region void glOrthofOES([In] IntPtr extensionPointer, float left, float right, float bttom, float top, float near, float far)
        // GLvoid glOrthofOES(GLfloat left, GLfloat right, GLfloat bttom, GLfloat top, GLfloat near, GLfloat far)
        #if WIN32
        [IlasmAttribute(".maxstack 7\r\nldarg left\r\nldarg right\r\nldarg bttom\r\nldarg top\r\nldarg near\r\nldarg far\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 7\r\nldarg left\r\nldarg right\r\nldarg bttom\r\nldarg top\r\nldarg near\r\nldarg far\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32)\r\nret")]
        #endif
        public static void glOrthofOES([In] IntPtr extensionPointer, float left, float right, float bttom, float top, float near, float far) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glOrthofOES([In] IntPtr extensionPointer, float left, float right, float bttom, float top, float near, float far)

        #region Overloads for GLvoid glClipPlanefOES(GLenum plane, const GLfloat* equation)
        #region void glClipPlanefOES([In] IntPtr extensionPointer, int plane, ref float equation)
        // GLvoid glClipPlanefOES(GLenum plane, const GLfloat* equation)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg plane\r\nldarg equation\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg plane\r\nldarg equation\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]float32)\r\nret")]
        #endif
        public static void glClipPlanefOES([In] IntPtr extensionPointer, int plane, ref float equation) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glClipPlanefOES([In] IntPtr extensionPointer, int plane, ref float equation)

        #region void glClipPlanefOES([In] IntPtr extensionPointer, int plane, float[] equation)
        // GLvoid glClipPlanefOES(GLenum plane, const GLfloat* equation)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg plane\r\nldarg equation\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg plane\r\nldarg equation\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float32[])\r\nret")]
        #endif
        public static void glClipPlanefOES([In] IntPtr extensionPointer, int plane, float[] equation) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glClipPlanefOES([In] IntPtr extensionPointer, int plane, float[] equation)

        #region void glClipPlanefOES([In] IntPtr extensionPointer, int plane, IntPtr equation)
        // GLvoid glClipPlanefOES(GLenum plane, const GLfloat* equation)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg plane\r\nldarg equation\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg plane\r\nldarg equation\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glClipPlanefOES([In] IntPtr extensionPointer, int plane, IntPtr equation) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glClipPlanefOES([In] IntPtr extensionPointer, int plane, IntPtr equation)

        #region void glClipPlanefOES([In] IntPtr extensionPointer, int plane, float* equation)
        // GLvoid glClipPlanefOES(GLenum plane, const GLfloat* equation)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg plane\r\nldarg equation\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg plane\r\nldarg equation\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float32*)\r\nret")]
        #endif
        public static unsafe void glClipPlanefOES([In] IntPtr extensionPointer, int plane, float* equation) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glClipPlanefOES([In] IntPtr extensionPointer, int plane, float* equation)
        #endregion Overloads for GLvoid glClipPlanefOES(GLenum plane, const GLfloat* equation)

        #region Overloads for GLvoid glGetClipPlanefOES(GLenum plane, GLfloat* equation)
        #region void glGetClipPlanefOES([In] IntPtr extensionPointer, int plane, out float equation)
        // GLvoid glGetClipPlanefOES(GLenum plane, GLfloat* equation)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg plane\r\nldarg equation\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg plane\r\nldarg equation\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[out]float32)\r\nret")]
        #endif
        public static void glGetClipPlanefOES([In] IntPtr extensionPointer, int plane, out float equation) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetClipPlanefOES([In] IntPtr extensionPointer, int plane, out float equation)

        #region void glGetClipPlanefOES([In] IntPtr extensionPointer, int plane, float[] equation)
        // GLvoid glGetClipPlanefOES(GLenum plane, GLfloat* equation)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg plane\r\nldarg equation\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[out]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg plane\r\nldarg equation\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[out]float32[])\r\nret")]
        #endif
        public static void glGetClipPlanefOES([In] IntPtr extensionPointer, int plane, float[] equation) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetClipPlanefOES([In] IntPtr extensionPointer, int plane, float[] equation)

        #region void glGetClipPlanefOES([In] IntPtr extensionPointer, int plane, IntPtr equation)
        // GLvoid glGetClipPlanefOES(GLenum plane, GLfloat* equation)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg plane\r\nldarg equation\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg plane\r\nldarg equation\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGetClipPlanefOES([In] IntPtr extensionPointer, int plane, IntPtr equation) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetClipPlanefOES([In] IntPtr extensionPointer, int plane, IntPtr equation)

        #region void glGetClipPlanefOES([In] IntPtr extensionPointer, int plane, float* equation)
        // GLvoid glGetClipPlanefOES(GLenum plane, GLfloat* equation)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg plane\r\nldarg equation\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[out]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg plane\r\nldarg equation\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[out]float32*)\r\nret")]
        #endif
        public static unsafe void glGetClipPlanefOES([In] IntPtr extensionPointer, int plane, float* equation) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetClipPlanefOES([In] IntPtr extensionPointer, int plane, float* equation)
        #endregion Overloads for GLvoid glGetClipPlanefOES(GLenum plane, GLfloat* equation)

        #region void glClearDepthfOES([In] IntPtr extensionPointer, float depth)
        // GLvoid glClearDepthfOES(GLclampd depth)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg depth\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg depth\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]float32)\r\nret")]
        #endif
        public static void glClearDepthfOES([In] IntPtr extensionPointer, float depth) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glClearDepthfOES([In] IntPtr extensionPointer, float depth)
        #endregion GL_OES_single_precision Methods
        #endregion GL_OES_single_precision (293)

        #region GL_OES_compressed_paletted_texture (294)
        #region GL_OES_compressed_paletted_texture Constants
        #region GL_PALETTE4_RGB8_OES
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PALETTE4_RGB8_OES 0x8B90
        public const int GL_PALETTE4_RGB8_OES = 0x8B90;
        #endregion GL_PALETTE4_RGB8_OES

        #region GL_PALETTE4_RGBA8_OES
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PALETTE4_RGBA8_OES 0x8B91
        public const int GL_PALETTE4_RGBA8_OES = 0x8B91;
        #endregion GL_PALETTE4_RGBA8_OES

        #region GL_PALETTE4_R5_G6_B5_OES
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PALETTE4_R5_G6_B5_OES 0x8B92
        public const int GL_PALETTE4_R5_G6_B5_OES = 0x8B92;
        #endregion GL_PALETTE4_R5_G6_B5_OES

        #region GL_PALETTE4_RGBA4_OES
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PALETTE4_RGBA4_OES 0x8B93
        public const int GL_PALETTE4_RGBA4_OES = 0x8B93;
        #endregion GL_PALETTE4_RGBA4_OES

        #region GL_PALETTE4_RGB5_A1_OES
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PALETTE4_RGB5_A1_OES 0x8B94
        public const int GL_PALETTE4_RGB5_A1_OES = 0x8B94;
        #endregion GL_PALETTE4_RGB5_A1_OES

        #region GL_PALETTE8_RGB8_OES
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PALETTE8_RGB8_OES 0x8B95
        public const int GL_PALETTE8_RGB8_OES = 0x8B95;
        #endregion GL_PALETTE8_RGB8_OES

        #region GL_PALETTE8_RGBA8_OES
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PALETTE8_RGBA8_OES 0x8B96
        public const int GL_PALETTE8_RGBA8_OES = 0x8B96;
        #endregion GL_PALETTE8_RGBA8_OES

        #region GL_PALETTE8_R5_G6_B5_OES
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PALETTE8_R5_G6_B5_OES 0x8B97
        public const int GL_PALETTE8_R5_G6_B5_OES = 0x8B97;
        #endregion GL_PALETTE8_R5_G6_B5_OES

        #region GL_PALETTE8_RGBA4_OES
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PALETTE8_RGBA4_OES 0x8B98
        public const int GL_PALETTE8_RGBA4_OES = 0x8B98;
        #endregion GL_PALETTE8_RGBA4_OES

        #region GL_PALETTE8_RGB5_A1_OES
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PALETTE8_RGB5_A1_OES 0x8B99
        public const int GL_PALETTE8_RGB5_A1_OES = 0x8B99;
        #endregion GL_PALETTE8_RGB5_A1_OES
        #endregion GL_OES_compressed_paletted_texture Constants
        #endregion GL_OES_compressed_paletted_texture (294)

        #region GL_OES_read_format (295)
        #region GL_OES_read_format Constants
        #region GL_IMPLEMENTATION_COLOR_READ_TYPE_OES
        /// <summary>
        /// 
        /// </summary>
        // #define GL_IMPLEMENTATION_COLOR_READ_TYPE_OES 0x8B9A
        public const int GL_IMPLEMENTATION_COLOR_READ_TYPE_OES = 0x8B9A;
        #endregion GL_IMPLEMENTATION_COLOR_READ_TYPE_OES

        #region GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES
        /// <summary>
        /// 
        /// </summary>
        // #define GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES 0x8B9B
        public const int GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES = 0x8B9B;
        #endregion GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES
        #endregion GL_OES_read_format Constants
        #endregion GL_OES_read_format (295)

        #region GL_OES_query_matrix (296)
        #region GL_OES_query_matrix Methods
        #region int glQueryMatrixxOES([In] IntPtr extensionPointer, float mantissa, float exponent)
        // GLbitfield glQueryMatrixxOES(GLfixed mantissa, GLint exponent)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg mantissa\r\nldarg exponent\r\nldarg extensionPointer\r\ncalli unmanaged stdcall int32([in]float32,[in]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg mantissa\r\nldarg exponent\r\nldarg extensionPointer\r\ncalli unmanaged cdecl int32([in]float32,[in]float32)\r\nret")]
        #endif
        public static int glQueryMatrixxOES([In] IntPtr extensionPointer, float mantissa, float exponent) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion int glQueryMatrixxOES([In] IntPtr extensionPointer, float mantissa, float exponent)
        #endregion GL_OES_query_matrix Methods
        #endregion GL_OES_query_matrix (296)
        #endregion OES Extensions

        #region OML Extensions
        #region GL_OML_interlace (239)
        #region GL_OML_interlace Constants
        #region GL_INTERLACE_OML
        /// <summary>
        /// 
        /// </summary>
        // #define GL_INTERLACE_OML 0x8980
        public const int GL_INTERLACE_OML = 0x8980;
        #endregion GL_INTERLACE_OML

        #region GL_INTERLACE_READ_OML
        /// <summary>
        /// 
        /// </summary>
        // #define GL_INTERLACE_READ_OML 0x8981
        public const int GL_INTERLACE_READ_OML = 0x8981;
        #endregion GL_INTERLACE_READ_OML
        #endregion GL_OML_interlace Constants
        #endregion GL_OML_interlace (239)

        #region GL_OML_subsample (240)
        #region GL_OML_subsample Constants
        #region GL_FORMAT_SUBSAMPLE_24_24_OML
        /// <summary>
        /// 
        /// </summary>
        // #define GL_FORMAT_SUBSAMPLE_24_24_OML 0x8982
        public const int GL_FORMAT_SUBSAMPLE_24_24_OML = 0x8982;
        #endregion GL_FORMAT_SUBSAMPLE_24_24_OML

        #region GL_FORMAT_SUBSAMPLE_244_244_OML
        /// <summary>
        /// 
        /// </summary>
        // #define GL_FORMAT_SUBSAMPLE_244_244_OML 0x8983
        public const int GL_FORMAT_SUBSAMPLE_244_244_OML = 0x8983;
        #endregion GL_FORMAT_SUBSAMPLE_244_244_OML
        #endregion GL_OML_subsample Constants
        #endregion GL_OML_subsample (240)

        #region GL_OML_resample (241)
        #region GL_OML_resample Constants
        #region GL_PACK_RESAMPLE_OML
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PACK_RESAMPLE_OML 0x8984
        public const int GL_PACK_RESAMPLE_OML = 0x8984;
        #endregion GL_PACK_RESAMPLE_OML

        #region GL_UNPACK_RESAMPLE_OML
        /// <summary>
        /// 
        /// </summary>
        // #define GL_UNPACK_RESAMPLE_OML 0x8985
        public const int GL_UNPACK_RESAMPLE_OML = 0x8985;
        #endregion GL_UNPACK_RESAMPLE_OML

        #region GL_RESAMPLE_REPLICATE_OML
        /// <summary>
        /// 
        /// </summary>
        // #define GL_RESAMPLE_REPLICATE_OML 0x8986
        public const int GL_RESAMPLE_REPLICATE_OML = 0x8986;
        #endregion GL_RESAMPLE_REPLICATE_OML

        #region GL_RESAMPLE_ZERO_FILL_OML
        /// <summary>
        /// 
        /// </summary>
        // #define GL_RESAMPLE_ZERO_FILL_OML 0x8987
        public const int GL_RESAMPLE_ZERO_FILL_OML = 0x8987;
        #endregion GL_RESAMPLE_ZERO_FILL_OML

        #region GL_RESAMPLE_AVERAGE_OML
        /// <summary>
        /// 
        /// </summary>
        // #define GL_RESAMPLE_AVERAGE_OML 0x8988
        public const int GL_RESAMPLE_AVERAGE_OML = 0x8988;
        #endregion GL_RESAMPLE_AVERAGE_OML

        #region GL_RESAMPLE_DECIMATE_OML
        /// <summary>
        /// 
        /// </summary>
        // #define GL_RESAMPLE_DECIMATE_OML 0x8989
        public const int GL_RESAMPLE_DECIMATE_OML = 0x8989;
        #endregion GL_RESAMPLE_DECIMATE_OML
        #endregion GL_OML_resample Constants
        #endregion GL_OML_resample (241)
        #endregion OML Extensions

        #region PGI Extensions
        #region GL_PGI_vertex_hints (76)
        #region GL_PGI_vertex_hints Constants
        #region GL_VERTEX_DATA_HINT_PGI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VERTEX_DATA_HINT_PGI 107050
        public const int GL_VERTEX_DATA_HINT_PGI = 107050;
        #endregion GL_VERTEX_DATA_HINT_PGI

        #region GL_VERTEX_CONSISTENT_HINT_PGI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VERTEX_CONSISTENT_HINT_PGI 107051
        public const int GL_VERTEX_CONSISTENT_HINT_PGI = 107051;
        #endregion GL_VERTEX_CONSISTENT_HINT_PGI

        #region GL_MATERIAL_SIDE_HINT_PGI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MATERIAL_SIDE_HINT_PGI  107052
        public const int GL_MATERIAL_SIDE_HINT_PGI =  107052;
        #endregion GL_MATERIAL_SIDE_HINT_PGI

        #region GL_MAX_VERTEX_HINT_PGI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAX_VERTEX_HINT_PGI 107053
        public const int GL_MAX_VERTEX_HINT_PGI = 107053;
        #endregion GL_MAX_VERTEX_HINT_PGI

        #region GL_COLOR3_BIT_PGI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COLOR3_BIT_PGI 0x00010000
        public const int GL_COLOR3_BIT_PGI = 0x00010000;
        #endregion GL_COLOR3_BIT_PGI

        #region GL_COLOR4_BIT_PGI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COLOR4_BIT_PGI 0x00020000
        public const int GL_COLOR4_BIT_PGI = 0x00020000;
        #endregion GL_COLOR4_BIT_PGI

        #region GL_EDGEFLAG_BIT_PGI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_EDGEFLAG_BIT_PGI 0x00040000
        public const int GL_EDGEFLAG_BIT_PGI = 0x00040000;
        #endregion GL_EDGEFLAG_BIT_PGI

        #region GL_INDEX_BIT_PGI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_INDEX_BIT_PGI 0x00080000
        public const int GL_INDEX_BIT_PGI = 0x00080000;
        #endregion GL_INDEX_BIT_PGI

        #region GL_MAT_AMBIENT_BIT_PGI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAT_AMBIENT_BIT_PGI 0x00100000
        public const int GL_MAT_AMBIENT_BIT_PGI = 0x00100000;
        #endregion GL_MAT_AMBIENT_BIT_PGI

        #region GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI 0x00200000
        public const int GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI = 0x00200000;
        #endregion GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI

        #region GL_MAT_DIFFUSE_BIT_PGI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAT_DIFFUSE_BIT_PGI 0x00400000
        public const int GL_MAT_DIFFUSE_BIT_PGI = 0x00400000;
        #endregion GL_MAT_DIFFUSE_BIT_PGI

        #region GL_MAT_EMISSION_BIT_PGI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAT_EMISSION_BIT_PGI 0x00800000
        public const int GL_MAT_EMISSION_BIT_PGI = 0x00800000;
        #endregion GL_MAT_EMISSION_BIT_PGI

        #region GL_MAT_COLOR_INDEXES_BIT_PGI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAT_COLOR_INDEXES_BIT_PGI 0x01000000
        public const int GL_MAT_COLOR_INDEXES_BIT_PGI = 0x01000000;
        #endregion GL_MAT_COLOR_INDEXES_BIT_PGI

        #region GL_MAT_SHININESS_BIT_PGI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAT_SHININESS_BIT_PGI 0x02000000
        public const int GL_MAT_SHININESS_BIT_PGI = 0x02000000;
        #endregion GL_MAT_SHININESS_BIT_PGI

        #region GL_MAT_SPECULAR_BIT_PGI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAT_SPECULAR_BIT_PGI 0x04000000
        public const int GL_MAT_SPECULAR_BIT_PGI = 0x04000000;
        #endregion GL_MAT_SPECULAR_BIT_PGI

        #region GL_NORMAL_BIT_PGI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_NORMAL_BIT_PGI 0x08000000
        public const int GL_NORMAL_BIT_PGI = 0x08000000;
        #endregion GL_NORMAL_BIT_PGI

        #region GL_TEXCOORD1_BIT_PGI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXCOORD1_BIT_PGI 0x10000000
        public const int GL_TEXCOORD1_BIT_PGI = 0x10000000;
        #endregion GL_TEXCOORD1_BIT_PGI

        #region GL_TEXCOORD2_BIT_PGI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXCOORD2_BIT_PGI 0x20000000
        public const int GL_TEXCOORD2_BIT_PGI = 0x20000000;
        #endregion GL_TEXCOORD2_BIT_PGI

        #region GL_TEXCOORD3_BIT_PGI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXCOORD3_BIT_PGI 0x40000000
        public const int GL_TEXCOORD3_BIT_PGI = 0x40000000;
        #endregion GL_TEXCOORD3_BIT_PGI

        #region GL_TEXCOORD4_BIT_PGI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXCOORD4_BIT_PGI unchecked((int)0x80000000)
        public const int GL_TEXCOORD4_BIT_PGI = unchecked((int)0x80000000);
        #endregion GL_TEXCOORD4_BIT_PGI

        #region GL_VERTEX23_BIT_PGI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VERTEX23_BIT_PGI 0x00000004
        public const int GL_VERTEX23_BIT_PGI = 0x00000004;
        #endregion GL_VERTEX23_BIT_PGI

        #region GL_VERTEX4_BIT_PGI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_VERTEX4_BIT_PGI 0x00000008
        public const int GL_VERTEX4_BIT_PGI = 0x00000008;
        #endregion GL_VERTEX4_BIT_PGI
        #endregion GL_PGI_vertex_hints Constants
        #endregion GL_PGI_vertex_hints (76)

        #region GL_PGI_misc_hints (77)
        #region GL_PGI_misc_hints Constants
        #region GL_PREFER_DOUBLEBUFFER_HINT_PGI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PREFER_DOUBLEBUFFER_HINT_PGI 107000
        public const int GL_PREFER_DOUBLEBUFFER_HINT_PGI = 107000;
        #endregion GL_PREFER_DOUBLEBUFFER_HINT_PGI

        #region GL_STRICT_DEPTHFUNC_HINT_PGI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_STRICT_DEPTHFUNC_HINT_PGI 107030
        public const int GL_STRICT_DEPTHFUNC_HINT_PGI = 107030;
        #endregion GL_STRICT_DEPTHFUNC_HINT_PGI

        #region GL_STRICT_LIGHTING_HINT_PGI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_STRICT_LIGHTING_HINT_PGI  107031
        public const int GL_STRICT_LIGHTING_HINT_PGI =  107031;
        #endregion GL_STRICT_LIGHTING_HINT_PGI

        #region GL_STRICT_SCISSOR_HINT_PGI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_STRICT_SCISSOR_HINT_PGI 107032
        public const int GL_STRICT_SCISSOR_HINT_PGI = 107032;
        #endregion GL_STRICT_SCISSOR_HINT_PGI

        #region GL_FULL_STIPPLE_HINT_PGI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_FULL_STIPPLE_HINT_PGI 107033
        public const int GL_FULL_STIPPLE_HINT_PGI = 107033;
        #endregion GL_FULL_STIPPLE_HINT_PGI

        #region GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI 107011
        public const int GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI = 107011;
        #endregion GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI

        #region GL_NATIVE_GRAPHICS_END_HINT_PGI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_NATIVE_GRAPHICS_END_HINT_PGI 107012
        public const int GL_NATIVE_GRAPHICS_END_HINT_PGI = 107012;
        #endregion GL_NATIVE_GRAPHICS_END_HINT_PGI

        #region GL_CONSERVE_MEMORY_HINT_PGI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_CONSERVE_MEMORY_HINT_PGI 107005
        public const int GL_CONSERVE_MEMORY_HINT_PGI = 107005;
        #endregion GL_CONSERVE_MEMORY_HINT_PGI

        #region GL_RECLAIM_MEMORY_HINT_PGI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_RECLAIM_MEMORY_HINT_PGI 107006
        public const int GL_RECLAIM_MEMORY_HINT_PGI = 107006;
        #endregion GL_RECLAIM_MEMORY_HINT_PGI

        #region GL_ALWAYS_FAST_HINT_PGI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_ALWAYS_FAST_HINT_PGI 107020
        public const int GL_ALWAYS_FAST_HINT_PGI = 107020;
        #endregion GL_ALWAYS_FAST_HINT_PGI

        #region GL_ALWAYS_SOFT_HINT_PGI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_ALWAYS_SOFT_HINT_PGI 107021
        public const int GL_ALWAYS_SOFT_HINT_PGI = 107021;
        #endregion GL_ALWAYS_SOFT_HINT_PGI

        #region GL_ALLOW_DRAW_OBJ_HINT_PGI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_ALLOW_DRAW_OBJ_HINT_PGI 107022
        public const int GL_ALLOW_DRAW_OBJ_HINT_PGI = 107022;
        #endregion GL_ALLOW_DRAW_OBJ_HINT_PGI

        #region GL_ALLOW_DRAW_WIN_HINT_PGI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_ALLOW_DRAW_WIN_HINT_PGI 107023
        public const int GL_ALLOW_DRAW_WIN_HINT_PGI = 107023;
        #endregion GL_ALLOW_DRAW_WIN_HINT_PGI

        #region GL_ALLOW_DRAW_FRG_HINT_PGI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_ALLOW_DRAW_FRG_HINT_PGI 107024
        public const int GL_ALLOW_DRAW_FRG_HINT_PGI = 107024;
        #endregion GL_ALLOW_DRAW_FRG_HINT_PGI

        #region GL_ALLOW_DRAW_MEM_HINT_PGI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_ALLOW_DRAW_MEM_HINT_PGI 107025
        public const int GL_ALLOW_DRAW_MEM_HINT_PGI = 107025;
        #endregion GL_ALLOW_DRAW_MEM_HINT_PGI

        #region GL_CLIP_NEAR_HINT_PGI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_CLIP_NEAR_HINT_PGI 107040
        public const int GL_CLIP_NEAR_HINT_PGI = 107040;
        #endregion GL_CLIP_NEAR_HINT_PGI

        #region GL_CLIP_FAR_HINT_PGI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_CLIP_FAR_HINT_PGI 107041
        public const int GL_CLIP_FAR_HINT_PGI = 107041;
        #endregion GL_CLIP_FAR_HINT_PGI

        #region GL_WIDE_LINE_HINT_PGI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_WIDE_LINE_HINT_PGI 107042
        public const int GL_WIDE_LINE_HINT_PGI = 107042;
        #endregion GL_WIDE_LINE_HINT_PGI

        #region GL_BACK_NORMALS_HINT_PGI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_BACK_NORMALS_HINT_PGI 107043
        public const int GL_BACK_NORMALS_HINT_PGI = 107043;
        #endregion GL_BACK_NORMALS_HINT_PGI
        #endregion GL_PGI_misc_hints Constants

        #region GL_PGI_misc_hints Methods
        #region void glHintPGI([In] IntPtr extensionPointer, int target, int mode)
        // GLvoid glHintPGI(GLenum target, GLint mode)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg mode\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg target\r\nldarg mode\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32)\r\nret")]
        #endif
        public static void glHintPGI([In] IntPtr extensionPointer, int target, int mode) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glHintPGI([In] IntPtr extensionPointer, int target, int mode)
        #endregion GL_PGI_misc_hints Methods
        #endregion GL_PGI_misc_hints (77)
        #endregion PGI Extensions

        #region SGI Extensions
        #region GL_SGI_color_matrix (13)
        #region GL_SGI_color_matrix Constants
        #region GL_COLOR_MATRIX_SGI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COLOR_MATRIX_SGI 0x80B1
        public const int GL_COLOR_MATRIX_SGI = 0x80B1;
        #endregion GL_COLOR_MATRIX_SGI

        #region GL_COLOR_MATRIX_STACK_DEPTH_SGI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COLOR_MATRIX_STACK_DEPTH_SGI 0x80B2
        public const int GL_COLOR_MATRIX_STACK_DEPTH_SGI = 0x80B2;
        #endregion GL_COLOR_MATRIX_STACK_DEPTH_SGI

        #region GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI 0x80B3
        public const int GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI = 0x80B3;
        #endregion GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI

        #region GL_POST_COLOR_MATRIX_RED_SCALE_SGI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_POST_COLOR_MATRIX_RED_SCALE_SGI 0x80B4
        public const int GL_POST_COLOR_MATRIX_RED_SCALE_SGI = 0x80B4;
        #endregion GL_POST_COLOR_MATRIX_RED_SCALE_SGI

        #region GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI 0x80B5
        public const int GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI = 0x80B5;
        #endregion GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI

        #region GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI 0x80B6
        public const int GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI = 0x80B6;
        #endregion GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI

        #region GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI 0x80B7
        public const int GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI = 0x80B7;
        #endregion GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI

        #region GL_POST_COLOR_MATRIX_RED_BIAS_SGI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_POST_COLOR_MATRIX_RED_BIAS_SGI 0x80B8
        public const int GL_POST_COLOR_MATRIX_RED_BIAS_SGI = 0x80B8;
        #endregion GL_POST_COLOR_MATRIX_RED_BIAS_SGI

        #region GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI 0x80B9
        public const int GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI = 0x80B9;
        #endregion GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI

        #region GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI 0x80BA
        public const int GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI = 0x80BA;
        #endregion GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI

        #region GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI 0x80BB
        public const int GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI = 0x80BB;
        #endregion GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI
        #endregion GL_SGI_color_matrix Constants
        #endregion GL_SGI_color_matrix (13)

        #region GL_SGI_color_table (14)
        #region GL_SGI_color_table Constants
        #region GL_COLOR_TABLE_SGI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COLOR_TABLE_SGI 0x80D0
        public const int GL_COLOR_TABLE_SGI = 0x80D0;
        #endregion GL_COLOR_TABLE_SGI

        #region GL_POST_CONVOLUTION_COLOR_TABLE_SGI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_POST_CONVOLUTION_COLOR_TABLE_SGI 0x80D1
        public const int GL_POST_CONVOLUTION_COLOR_TABLE_SGI = 0x80D1;
        #endregion GL_POST_CONVOLUTION_COLOR_TABLE_SGI

        #region GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI 0x80D2
        public const int GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI = 0x80D2;
        #endregion GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI

        #region GL_PROXY_COLOR_TABLE_SGI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PROXY_COLOR_TABLE_SGI 0x80D3
        public const int GL_PROXY_COLOR_TABLE_SGI = 0x80D3;
        #endregion GL_PROXY_COLOR_TABLE_SGI

        #region GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI 0x80D4
        public const int GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI = 0x80D4;
        #endregion GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI

        #region GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI 0x80D5
        public const int GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI = 0x80D5;
        #endregion GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI

        #region GL_COLOR_TABLE_SCALE_SGI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COLOR_TABLE_SCALE_SGI 0x80D6
        public const int GL_COLOR_TABLE_SCALE_SGI = 0x80D6;
        #endregion GL_COLOR_TABLE_SCALE_SGI

        #region GL_COLOR_TABLE_BIAS_SGI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COLOR_TABLE_BIAS_SGI 0x80D7
        public const int GL_COLOR_TABLE_BIAS_SGI = 0x80D7;
        #endregion GL_COLOR_TABLE_BIAS_SGI

        #region GL_COLOR_TABLE_FORMAT_SGI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COLOR_TABLE_FORMAT_SGI 0x80D8
        public const int GL_COLOR_TABLE_FORMAT_SGI = 0x80D8;
        #endregion GL_COLOR_TABLE_FORMAT_SGI

        #region GL_COLOR_TABLE_WIDTH_SGI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COLOR_TABLE_WIDTH_SGI 0x80D9
        public const int GL_COLOR_TABLE_WIDTH_SGI = 0x80D9;
        #endregion GL_COLOR_TABLE_WIDTH_SGI

        #region GL_COLOR_TABLE_RED_SIZE_SGI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COLOR_TABLE_RED_SIZE_SGI 0x80DA
        public const int GL_COLOR_TABLE_RED_SIZE_SGI = 0x80DA;
        #endregion GL_COLOR_TABLE_RED_SIZE_SGI

        #region GL_COLOR_TABLE_GREEN_SIZE_SGI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COLOR_TABLE_GREEN_SIZE_SGI 0x80DB
        public const int GL_COLOR_TABLE_GREEN_SIZE_SGI = 0x80DB;
        #endregion GL_COLOR_TABLE_GREEN_SIZE_SGI

        #region GL_COLOR_TABLE_BLUE_SIZE_SGI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COLOR_TABLE_BLUE_SIZE_SGI 0x80DC
        public const int GL_COLOR_TABLE_BLUE_SIZE_SGI = 0x80DC;
        #endregion GL_COLOR_TABLE_BLUE_SIZE_SGI

        #region GL_COLOR_TABLE_ALPHA_SIZE_SGI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COLOR_TABLE_ALPHA_SIZE_SGI 0x80DD
        public const int GL_COLOR_TABLE_ALPHA_SIZE_SGI = 0x80DD;
        #endregion GL_COLOR_TABLE_ALPHA_SIZE_SGI

        #region GL_COLOR_TABLE_LUMINANCE_SIZE_SGI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COLOR_TABLE_LUMINANCE_SIZE_SGI 0x80DE
        public const int GL_COLOR_TABLE_LUMINANCE_SIZE_SGI = 0x80DE;
        #endregion GL_COLOR_TABLE_LUMINANCE_SIZE_SGI

        #region GL_COLOR_TABLE_INTENSITY_SIZE_SGI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_COLOR_TABLE_INTENSITY_SIZE_SGI 0x80DF
        public const int GL_COLOR_TABLE_INTENSITY_SIZE_SGI = 0x80DF;
        #endregion GL_COLOR_TABLE_INTENSITY_SIZE_SGI
        #endregion GL_SGI_color_table Constants

        #region GL_SGI_color_table Methods
        #region Overloads for GLvoid glColorTableSGI(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid* table)
        #region void glColorTableSGI([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, short[] table)
        // GLvoid glColorTableSGI(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid* table)
        #if WIN32
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg table\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg table\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int16[])\r\nret")]
        #endif
        public static void glColorTableSGI([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, short[] table) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColorTableSGI([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, short[] table)

        #region void glColorTableSGI([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, float[] table)
        // GLvoid glColorTableSGI(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid* table)
        #if WIN32
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg table\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg table\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]float32[])\r\nret")]
        #endif
        public static void glColorTableSGI([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, float[] table) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColorTableSGI([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, float[] table)

        #region void glColorTableSGI([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, int[] table)
        // GLvoid glColorTableSGI(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid* table)
        #if WIN32
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg table\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg table\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int32[])\r\nret")]
        #endif
        public static void glColorTableSGI([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, int[] table) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColorTableSGI([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, int[] table)

        #region void glColorTableSGI([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, IntPtr table)
        // GLvoid glColorTableSGI(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid* table)
        #if WIN32
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg table\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg table\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]native int)\r\nret")]
        #endif
        public static void glColorTableSGI([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, IntPtr table) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColorTableSGI([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, IntPtr table)

        #region void glColorTableSGI([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, byte[] table)
        // GLvoid glColorTableSGI(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid* table)
        #if WIN32
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg table\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int8[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg table\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int8[])\r\nret")]
        #endif
        public static void glColorTableSGI([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, byte[] table) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColorTableSGI([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, byte[] table)

        #region void glColorTableSGI([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, double[] table)
        // GLvoid glColorTableSGI(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid* table)
        #if WIN32
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg table\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]float64[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg table\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]float64[])\r\nret")]
        #endif
        public static void glColorTableSGI([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, double[] table) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColorTableSGI([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, double[] table)

        #region void glColorTableSGI([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, uint[] table)
        // GLvoid glColorTableSGI(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid* table)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg table\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int32[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg table\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int32[])\r\nret")]
        #endif
        public static void glColorTableSGI([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, uint[] table) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColorTableSGI([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, uint[] table)

        #region void glColorTableSGI([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, sbyte[] table)
        // GLvoid glColorTableSGI(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid* table)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg table\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int8[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg table\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]int8[])\r\nret")]
        #endif
        public static void glColorTableSGI([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, sbyte[] table) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColorTableSGI([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, sbyte[] table)

        #region void glColorTableSGI([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, ushort[] table)
        // GLvoid glColorTableSGI(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid* table)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg table\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int16[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg table\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]unsigned int16[])\r\nret")]
        #endif
        public static void glColorTableSGI([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, ushort[] table) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColorTableSGI([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, ushort[] table)

        #region void glColorTableSGI([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, void* table)
        // GLvoid glColorTableSGI(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid* table)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg table\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]void*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 7\r\nldarg target\r\nldarg internalformat\r\nldarg width\r\nldarg format\r\nldarg type\r\nldarg table\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32,[in]void*)\r\nret")]
        #endif
        public static unsafe void glColorTableSGI([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, void* table) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColorTableSGI([In] IntPtr extensionPointer, int target, int internalformat, int width, int format, int type, void* table)
        #endregion Overloads for GLvoid glColorTableSGI(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid* table)

        #region void glCopyColorTableSGI([In] IntPtr extensionPointer, int target, int internalformat, int x, int y, int width)
        // GLvoid glCopyColorTableSGI(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg target\r\nldarg internalformat\r\nldarg x\r\nldarg y\r\nldarg width\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg target\r\nldarg internalformat\r\nldarg x\r\nldarg y\r\nldarg width\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32,[in]int32)\r\nret")]
        #endif
        public static void glCopyColorTableSGI([In] IntPtr extensionPointer, int target, int internalformat, int x, int y, int width) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glCopyColorTableSGI([In] IntPtr extensionPointer, int target, int internalformat, int x, int y, int width)

        #region Overloads for GLvoid glColorTableParameterivSGI(GLenum target, GLenum pname, const GLint* parameters)
        #region void glColorTableParameterivSGI([In] IntPtr extensionPointer, int target, int pname, ref int parameters)
        // GLvoid glColorTableParameterivSGI(GLenum target, GLenum pname, const GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in][out]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in][out]int32)\r\nret")]
        #endif
        public static void glColorTableParameterivSGI([In] IntPtr extensionPointer, int target, int pname, ref int parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColorTableParameterivSGI([In] IntPtr extensionPointer, int target, int pname, ref int parameters)

        #region void glColorTableParameterivSGI([In] IntPtr extensionPointer, int target, int pname, int[] parameters)
        // GLvoid glColorTableParameterivSGI(GLenum target, GLenum pname, const GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32[])\r\nret")]
        #endif
        public static void glColorTableParameterivSGI([In] IntPtr extensionPointer, int target, int pname, int[] parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColorTableParameterivSGI([In] IntPtr extensionPointer, int target, int pname, int[] parameters)

        #region void glColorTableParameterivSGI([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters)
        // GLvoid glColorTableParameterivSGI(GLenum target, GLenum pname, const GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]native int)\r\nret")]
        #endif
        public static void glColorTableParameterivSGI([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColorTableParameterivSGI([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters)

        #region void glColorTableParameterivSGI([In] IntPtr extensionPointer, int target, int pname, int* parameters)
        // GLvoid glColorTableParameterivSGI(GLenum target, GLenum pname, const GLint* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32*)\r\nret")]
        #endif
        public static unsafe void glColorTableParameterivSGI([In] IntPtr extensionPointer, int target, int pname, int* parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColorTableParameterivSGI([In] IntPtr extensionPointer, int target, int pname, int* parameters)
        #endregion Overloads for GLvoid glColorTableParameterivSGI(GLenum target, GLenum pname, const GLint* parameters)

        #region Overloads for GLvoid glColorTableParameterfvSGI(GLenum target, GLenum pname, const GLfloat* parameters)
        #region void glColorTableParameterfvSGI([In] IntPtr extensionPointer, int target, int pname, ref float parameters)
        // GLvoid glColorTableParameterfvSGI(GLenum target, GLenum pname, const GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in][out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in][out]float32)\r\nret")]
        #endif
        public static void glColorTableParameterfvSGI([In] IntPtr extensionPointer, int target, int pname, ref float parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColorTableParameterfvSGI([In] IntPtr extensionPointer, int target, int pname, ref float parameters)

        #region void glColorTableParameterfvSGI([In] IntPtr extensionPointer, int target, int pname, float[] parameters)
        // GLvoid glColorTableParameterfvSGI(GLenum target, GLenum pname, const GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]float32[])\r\nret")]
        #endif
        public static void glColorTableParameterfvSGI([In] IntPtr extensionPointer, int target, int pname, float[] parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColorTableParameterfvSGI([In] IntPtr extensionPointer, int target, int pname, float[] parameters)

        #region void glColorTableParameterfvSGI([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters)
        // GLvoid glColorTableParameterfvSGI(GLenum target, GLenum pname, const GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]native int)\r\nret")]
        #endif
        public static void glColorTableParameterfvSGI([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColorTableParameterfvSGI([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters)

        #region void glColorTableParameterfvSGI([In] IntPtr extensionPointer, int target, int pname, float* parameters)
        // GLvoid glColorTableParameterfvSGI(GLenum target, GLenum pname, const GLfloat* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]float32*)\r\nret")]
        #endif
        public static unsafe void glColorTableParameterfvSGI([In] IntPtr extensionPointer, int target, int pname, float* parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColorTableParameterfvSGI([In] IntPtr extensionPointer, int target, int pname, float* parameters)
        #endregion Overloads for GLvoid glColorTableParameterfvSGI(GLenum target, GLenum pname, const GLfloat* parameters)

        #region Overloads for GLvoid glGetColorTableSGI(GLenum target, GLenum format, GLenum type, GLvoid* table)
        #region void glGetColorTableSGI([In] IntPtr extensionPointer, int target, int format, int type, short[] table)
        // GLvoid glGetColorTableSGI(GLenum target, GLenum format, GLenum type, GLvoid* table)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg table\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[out]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg table\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[out]int16[])\r\nret")]
        #endif
        public static void glGetColorTableSGI([In] IntPtr extensionPointer, int target, int format, int type, short[] table) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetColorTableSGI([In] IntPtr extensionPointer, int target, int format, int type, short[] table)

        #region void glGetColorTableSGI([In] IntPtr extensionPointer, int target, int format, int type, float[] table)
        // GLvoid glGetColorTableSGI(GLenum target, GLenum format, GLenum type, GLvoid* table)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg table\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[out]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg table\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[out]float32[])\r\nret")]
        #endif
        public static void glGetColorTableSGI([In] IntPtr extensionPointer, int target, int format, int type, float[] table) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetColorTableSGI([In] IntPtr extensionPointer, int target, int format, int type, float[] table)

        #region void glGetColorTableSGI([In] IntPtr extensionPointer, int target, int format, int type, int[] table)
        // GLvoid glGetColorTableSGI(GLenum target, GLenum format, GLenum type, GLvoid* table)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg table\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[out]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg table\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[out]int32[])\r\nret")]
        #endif
        public static void glGetColorTableSGI([In] IntPtr extensionPointer, int target, int format, int type, int[] table) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetColorTableSGI([In] IntPtr extensionPointer, int target, int format, int type, int[] table)

        #region void glGetColorTableSGI([In] IntPtr extensionPointer, int target, int format, int type, IntPtr table)
        // GLvoid glGetColorTableSGI(GLenum target, GLenum format, GLenum type, GLvoid* table)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg table\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg table\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGetColorTableSGI([In] IntPtr extensionPointer, int target, int format, int type, IntPtr table) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetColorTableSGI([In] IntPtr extensionPointer, int target, int format, int type, IntPtr table)

        #region void glGetColorTableSGI([In] IntPtr extensionPointer, int target, int format, int type, byte[] table)
        // GLvoid glGetColorTableSGI(GLenum target, GLenum format, GLenum type, GLvoid* table)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg table\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[out]unsigned int8[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg table\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[out]unsigned int8[])\r\nret")]
        #endif
        public static void glGetColorTableSGI([In] IntPtr extensionPointer, int target, int format, int type, byte[] table) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetColorTableSGI([In] IntPtr extensionPointer, int target, int format, int type, byte[] table)

        #region void glGetColorTableSGI([In] IntPtr extensionPointer, int target, int format, int type, double[] table)
        // GLvoid glGetColorTableSGI(GLenum target, GLenum format, GLenum type, GLvoid* table)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg table\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[out]float64[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg table\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[out]float64[])\r\nret")]
        #endif
        public static void glGetColorTableSGI([In] IntPtr extensionPointer, int target, int format, int type, double[] table) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetColorTableSGI([In] IntPtr extensionPointer, int target, int format, int type, double[] table)

        #region void glGetColorTableSGI([In] IntPtr extensionPointer, int target, int format, int type, uint[] table)
        // GLvoid glGetColorTableSGI(GLenum target, GLenum format, GLenum type, GLvoid* table)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg table\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[out]unsigned int32[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg table\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[out]unsigned int32[])\r\nret")]
        #endif
        public static void glGetColorTableSGI([In] IntPtr extensionPointer, int target, int format, int type, uint[] table) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetColorTableSGI([In] IntPtr extensionPointer, int target, int format, int type, uint[] table)

        #region void glGetColorTableSGI([In] IntPtr extensionPointer, int target, int format, int type, sbyte[] table)
        // GLvoid glGetColorTableSGI(GLenum target, GLenum format, GLenum type, GLvoid* table)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg table\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[out]int8[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg table\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[out]int8[])\r\nret")]
        #endif
        public static void glGetColorTableSGI([In] IntPtr extensionPointer, int target, int format, int type, sbyte[] table) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetColorTableSGI([In] IntPtr extensionPointer, int target, int format, int type, sbyte[] table)

        #region void glGetColorTableSGI([In] IntPtr extensionPointer, int target, int format, int type, ushort[] table)
        // GLvoid glGetColorTableSGI(GLenum target, GLenum format, GLenum type, GLvoid* table)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg table\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[out]unsigned int16[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg table\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[out]unsigned int16[])\r\nret")]
        #endif
        public static void glGetColorTableSGI([In] IntPtr extensionPointer, int target, int format, int type, ushort[] table) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetColorTableSGI([In] IntPtr extensionPointer, int target, int format, int type, ushort[] table)

        #region void glGetColorTableSGI([In] IntPtr extensionPointer, int target, int format, int type, void* table)
        // GLvoid glGetColorTableSGI(GLenum target, GLenum format, GLenum type, GLvoid* table)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg table\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[out]void*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg target\r\nldarg format\r\nldarg type\r\nldarg table\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[out]void*)\r\nret")]
        #endif
        public static unsafe void glGetColorTableSGI([In] IntPtr extensionPointer, int target, int format, int type, void* table) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetColorTableSGI([In] IntPtr extensionPointer, int target, int format, int type, void* table)
        #endregion Overloads for GLvoid glGetColorTableSGI(GLenum target, GLenum format, GLenum type, GLvoid* table)

        #region Overloads for GLvoid glGetColorTableParameterivSGI(GLenum target, GLenum pname, GLint* parameters)
        #region void glGetColorTableParameterivSGI([In] IntPtr extensionPointer, int target, int pname, out int parameters)
        // GLvoid glGetColorTableParameterivSGI(GLenum target, GLenum pname, GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]int32)\r\nret")]
        #endif
        public static void glGetColorTableParameterivSGI([In] IntPtr extensionPointer, int target, int pname, out int parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetColorTableParameterivSGI([In] IntPtr extensionPointer, int target, int pname, out int parameters)

        #region void glGetColorTableParameterivSGI([In] IntPtr extensionPointer, int target, int pname, int[] parameters)
        // GLvoid glGetColorTableParameterivSGI(GLenum target, GLenum pname, GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]int32[])\r\nret")]
        #endif
        public static void glGetColorTableParameterivSGI([In] IntPtr extensionPointer, int target, int pname, int[] parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetColorTableParameterivSGI([In] IntPtr extensionPointer, int target, int pname, int[] parameters)

        #region void glGetColorTableParameterivSGI([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters)
        // GLvoid glGetColorTableParameterivSGI(GLenum target, GLenum pname, GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGetColorTableParameterivSGI([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetColorTableParameterivSGI([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters)

        #region void glGetColorTableParameterivSGI([In] IntPtr extensionPointer, int target, int pname, int* parameters)
        // GLvoid glGetColorTableParameterivSGI(GLenum target, GLenum pname, GLint* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]int32*)\r\nret")]
        #endif
        public static unsafe void glGetColorTableParameterivSGI([In] IntPtr extensionPointer, int target, int pname, int* parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetColorTableParameterivSGI([In] IntPtr extensionPointer, int target, int pname, int* parameters)
        #endregion Overloads for GLvoid glGetColorTableParameterivSGI(GLenum target, GLenum pname, GLint* parameters)

        #region Overloads for GLvoid glGetColorTableParameterfvSGI(GLenum target, GLenum pname, GLfloat* parameters)
        #region void glGetColorTableParameterfvSGI([In] IntPtr extensionPointer, int target, int pname, out float parameters)
        // GLvoid glGetColorTableParameterfvSGI(GLenum target, GLenum pname, GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]float32)\r\nret")]
        #endif
        public static void glGetColorTableParameterfvSGI([In] IntPtr extensionPointer, int target, int pname, out float parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetColorTableParameterfvSGI([In] IntPtr extensionPointer, int target, int pname, out float parameters)

        #region void glGetColorTableParameterfvSGI([In] IntPtr extensionPointer, int target, int pname, float[] parameters)
        // GLvoid glGetColorTableParameterfvSGI(GLenum target, GLenum pname, GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]float32[])\r\nret")]
        #endif
        public static void glGetColorTableParameterfvSGI([In] IntPtr extensionPointer, int target, int pname, float[] parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetColorTableParameterfvSGI([In] IntPtr extensionPointer, int target, int pname, float[] parameters)

        #region void glGetColorTableParameterfvSGI([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters)
        // GLvoid glGetColorTableParameterfvSGI(GLenum target, GLenum pname, GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGetColorTableParameterfvSGI([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetColorTableParameterfvSGI([In] IntPtr extensionPointer, int target, int pname, IntPtr parameters)

        #region void glGetColorTableParameterfvSGI([In] IntPtr extensionPointer, int target, int pname, float* parameters)
        // GLvoid glGetColorTableParameterfvSGI(GLenum target, GLenum pname, GLfloat* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[out]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg target\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[out]float32*)\r\nret")]
        #endif
        public static unsafe void glGetColorTableParameterfvSGI([In] IntPtr extensionPointer, int target, int pname, float* parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetColorTableParameterfvSGI([In] IntPtr extensionPointer, int target, int pname, float* parameters)
        #endregion Overloads for GLvoid glGetColorTableParameterfvSGI(GLenum target, GLenum pname, GLfloat* parameters)
        #endregion GL_SGI_color_table Methods
        #endregion GL_SGI_color_table (14)

        #region GL_SGI_texture_color_table (17)
        #region GL_SGI_texture_color_table Constants
        #region GL_TEXTURE_COLOR_TABLE_SGI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_COLOR_TABLE_SGI 0x80BC
        public const int GL_TEXTURE_COLOR_TABLE_SGI = 0x80BC;
        #endregion GL_TEXTURE_COLOR_TABLE_SGI

        #region GL_PROXY_TEXTURE_COLOR_TABLE_SGI
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PROXY_TEXTURE_COLOR_TABLE_SGI 0x80BD
        public const int GL_PROXY_TEXTURE_COLOR_TABLE_SGI = 0x80BD;
        #endregion GL_PROXY_TEXTURE_COLOR_TABLE_SGI
        #endregion GL_SGI_texture_color_table Constants
        #endregion GL_SGI_texture_color_table (17)
        #endregion SGI Extensions

        #region SGIS Extensions
        #region GL_SGIS_pixel_texture (15)
        #region GL_SGIS_pixel_texture Constants
        #region GL_PIXEL_TEXTURE_SGIS
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PIXEL_TEXTURE_SGIS 0x8353
        public const int GL_PIXEL_TEXTURE_SGIS = 0x8353;
        #endregion GL_PIXEL_TEXTURE_SGIS

        #region GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS 0x8354
        public const int GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS = 0x8354;
        #endregion GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS

        #region GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS 0x8355
        public const int GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS = 0x8355;
        #endregion GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS

        #region GL_PIXEL_GROUP_COLOR_SGIS
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PIXEL_GROUP_COLOR_SGIS 0x8356
        public const int GL_PIXEL_GROUP_COLOR_SGIS = 0x8356;
        #endregion GL_PIXEL_GROUP_COLOR_SGIS
        #endregion GL_SGIS_pixel_texture Constants

        #region GL_SGIS_pixel_texture Methods
        #region void glPixelTexGenParameteriSGIS([In] IntPtr extensionPointer, int pname, int param)
        // GLvoid glPixelTexGenParameteriSGIS(GLenum pname, GLint param)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg param\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg param\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32)\r\nret")]
        #endif
        public static void glPixelTexGenParameteriSGIS([In] IntPtr extensionPointer, int pname, int param) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glPixelTexGenParameteriSGIS([In] IntPtr extensionPointer, int pname, int param)

        #region void glPixelTexGenParameterfSGIS([In] IntPtr extensionPointer, int pname, float param)
        // GLvoid glPixelTexGenParameterfSGIS(GLenum pname, GLfloat param)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg param\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg param\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float32)\r\nret")]
        #endif
        public static void glPixelTexGenParameterfSGIS([In] IntPtr extensionPointer, int pname, float param) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glPixelTexGenParameterfSGIS([In] IntPtr extensionPointer, int pname, float param)

        #region Overloads for GLvoid glGetPixelTexGenParameterivSGIS(GLenum pname, GLint* parameters)
        #region void glGetPixelTexGenParameterivSGIS([In] IntPtr extensionPointer, int pname, out int parameters)
        // GLvoid glGetPixelTexGenParameterivSGIS(GLenum pname, GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[out]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[out]int32)\r\nret")]
        #endif
        public static void glGetPixelTexGenParameterivSGIS([In] IntPtr extensionPointer, int pname, out int parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetPixelTexGenParameterivSGIS([In] IntPtr extensionPointer, int pname, out int parameters)

        #region void glGetPixelTexGenParameterivSGIS([In] IntPtr extensionPointer, int pname, int[] parameters)
        // GLvoid glGetPixelTexGenParameterivSGIS(GLenum pname, GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[out]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[out]int32[])\r\nret")]
        #endif
        public static void glGetPixelTexGenParameterivSGIS([In] IntPtr extensionPointer, int pname, int[] parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetPixelTexGenParameterivSGIS([In] IntPtr extensionPointer, int pname, int[] parameters)

        #region void glGetPixelTexGenParameterivSGIS([In] IntPtr extensionPointer, int pname, IntPtr parameters)
        // GLvoid glGetPixelTexGenParameterivSGIS(GLenum pname, GLint* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGetPixelTexGenParameterivSGIS([In] IntPtr extensionPointer, int pname, IntPtr parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetPixelTexGenParameterivSGIS([In] IntPtr extensionPointer, int pname, IntPtr parameters)

        #region void glGetPixelTexGenParameterivSGIS([In] IntPtr extensionPointer, int pname, int* parameters)
        // GLvoid glGetPixelTexGenParameterivSGIS(GLenum pname, GLint* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[out]int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[out]int32*)\r\nret")]
        #endif
        public static unsafe void glGetPixelTexGenParameterivSGIS([In] IntPtr extensionPointer, int pname, int* parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetPixelTexGenParameterivSGIS([In] IntPtr extensionPointer, int pname, int* parameters)
        #endregion Overloads for GLvoid glGetPixelTexGenParameterivSGIS(GLenum pname, GLint* parameters)

        #region Overloads for GLvoid glGetPixelTexGenParameterfvSGIS(GLenum pname, GLfloat* parameters)
        #region void glGetPixelTexGenParameterfvSGIS([In] IntPtr extensionPointer, int pname, out float parameters)
        // GLvoid glGetPixelTexGenParameterfvSGIS(GLenum pname, GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[out]float32)\r\nret")]
        #endif
        public static void glGetPixelTexGenParameterfvSGIS([In] IntPtr extensionPointer, int pname, out float parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetPixelTexGenParameterfvSGIS([In] IntPtr extensionPointer, int pname, out float parameters)

        #region void glGetPixelTexGenParameterfvSGIS([In] IntPtr extensionPointer, int pname, float[] parameters)
        // GLvoid glGetPixelTexGenParameterfvSGIS(GLenum pname, GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[out]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[out]float32[])\r\nret")]
        #endif
        public static void glGetPixelTexGenParameterfvSGIS([In] IntPtr extensionPointer, int pname, float[] parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetPixelTexGenParameterfvSGIS([In] IntPtr extensionPointer, int pname, float[] parameters)

        #region void glGetPixelTexGenParameterfvSGIS([In] IntPtr extensionPointer, int pname, IntPtr parameters)
        // GLvoid glGetPixelTexGenParameterfvSGIS(GLenum pname, GLfloat* parameters)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[out]native int)\r\nret")]
        #endif
        public static void glGetPixelTexGenParameterfvSGIS([In] IntPtr extensionPointer, int pname, IntPtr parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetPixelTexGenParameterfvSGIS([In] IntPtr extensionPointer, int pname, IntPtr parameters)

        #region void glGetPixelTexGenParameterfvSGIS([In] IntPtr extensionPointer, int pname, float* parameters)
        // GLvoid glGetPixelTexGenParameterfvSGIS(GLenum pname, GLfloat* parameters)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[out]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg pname\r\nldarg parameters\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[out]float32*)\r\nret")]
        #endif
        public static unsafe void glGetPixelTexGenParameterfvSGIS([In] IntPtr extensionPointer, int pname, float* parameters) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetPixelTexGenParameterfvSGIS([In] IntPtr extensionPointer, int pname, float* parameters)
        #endregion Overloads for GLvoid glGetPixelTexGenParameterfvSGIS(GLenum pname, GLfloat* parameters)
        #endregion GL_SGIS_pixel_texture Methods
        #endregion GL_SGIS_pixel_texture (15)

        #region GL_SGIS_texture_lod (24)
        #region GL_SGIS_texture_lod Constants
        #region GL_TEXTURE_MIN_LOD_SGIS
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_MIN_LOD_SGIS 0x813A
        public const int GL_TEXTURE_MIN_LOD_SGIS = 0x813A;
        #endregion GL_TEXTURE_MIN_LOD_SGIS

        #region GL_TEXTURE_MAX_LOD_SGIS
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_MAX_LOD_SGIS 0x813B
        public const int GL_TEXTURE_MAX_LOD_SGIS = 0x813B;
        #endregion GL_TEXTURE_MAX_LOD_SGIS

        #region GL_TEXTURE_BASE_LEVEL_SGIS
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_BASE_LEVEL_SGIS 0x813C
        public const int GL_TEXTURE_BASE_LEVEL_SGIS = 0x813C;
        #endregion GL_TEXTURE_BASE_LEVEL_SGIS

        #region GL_TEXTURE_MAX_LEVEL_SGIS
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_MAX_LEVEL_SGIS 0x813D
        public const int GL_TEXTURE_MAX_LEVEL_SGIS = 0x813D;
        #endregion GL_TEXTURE_MAX_LEVEL_SGIS
        #endregion GL_SGIS_texture_lod Constants
        #endregion GL_SGIS_texture_lod (24)

        #region GL_SGIS_multisample (25)
        #region GL_SGIS_multisample Constants
        #region GL_MULTISAMPLE_SGIS
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MULTISAMPLE_SGIS 0x809D
        public const int GL_MULTISAMPLE_SGIS = 0x809D;
        #endregion GL_MULTISAMPLE_SGIS

        #region GL_SAMPLE_ALPHA_TO_MASK_SGIS
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SAMPLE_ALPHA_TO_MASK_SGIS 0x809E
        public const int GL_SAMPLE_ALPHA_TO_MASK_SGIS = 0x809E;
        #endregion GL_SAMPLE_ALPHA_TO_MASK_SGIS

        #region GL_SAMPLE_ALPHA_TO_ONE_SGIS
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SAMPLE_ALPHA_TO_ONE_SGIS 0x809F
        public const int GL_SAMPLE_ALPHA_TO_ONE_SGIS = 0x809F;
        #endregion GL_SAMPLE_ALPHA_TO_ONE_SGIS

        #region GL_SAMPLE_MASK_SGIS
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SAMPLE_MASK_SGIS 0x80A0
        public const int GL_SAMPLE_MASK_SGIS = 0x80A0;
        #endregion GL_SAMPLE_MASK_SGIS

        #region GL_MULTISAMPLE_BIT_EXT
        /// <summary>
        /// 
        /// </summary>
        // GL_MULTISAMPLE_BIT_EXT is already defined in GL_EXT_multisample (209)
        #endregion GL_MULTISAMPLE_BIT_EXT

        #region GL_1PASS_SGIS
        /// <summary>
        /// 
        /// </summary>
        // #define GL_1PASS_SGIS 0x80A1
        public const int GL_1PASS_SGIS = 0x80A1;
        #endregion GL_1PASS_SGIS

        #region GL_2PASS_0_SGIS
        /// <summary>
        /// 
        /// </summary>
        // #define GL_2PASS_0_SGIS 0x80A2
        public const int GL_2PASS_0_SGIS = 0x80A2;
        #endregion GL_2PASS_0_SGIS

        #region GL_2PASS_1_SGIS
        /// <summary>
        /// 
        /// </summary>
        // #define GL_2PASS_1_SGIS 0x80A3
        public const int GL_2PASS_1_SGIS = 0x80A3;
        #endregion GL_2PASS_1_SGIS

        #region GL_4PASS_0_SGIS
        /// <summary>
        /// 
        /// </summary>
        // #define GL_4PASS_0_SGIS 0x80A4
        public const int GL_4PASS_0_SGIS = 0x80A4;
        #endregion GL_4PASS_0_SGIS

        #region GL_4PASS_1_SGIS
        /// <summary>
        /// 
        /// </summary>
        // #define GL_4PASS_1_SGIS 0x80A5
        public const int GL_4PASS_1_SGIS = 0x80A5;
        #endregion GL_4PASS_1_SGIS

        #region GL_4PASS_2_SGIS
        /// <summary>
        /// 
        /// </summary>
        // #define GL_4PASS_2_SGIS 0x80A6
        public const int GL_4PASS_2_SGIS = 0x80A6;
        #endregion GL_4PASS_2_SGIS

        #region GL_4PASS_3_SGIS
        /// <summary>
        /// 
        /// </summary>
        // #define GL_4PASS_3_SGIS 0x80A7
        public const int GL_4PASS_3_SGIS = 0x80A7;
        #endregion GL_4PASS_3_SGIS

        #region GL_SAMPLE_BUFFERS_SGIS
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SAMPLE_BUFFERS_SGIS 0x80A8
        public const int GL_SAMPLE_BUFFERS_SGIS = 0x80A8;
        #endregion GL_SAMPLE_BUFFERS_SGIS

        #region GL_SAMPLES_SGIS
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SAMPLES_SGIS 0x80A9
        public const int GL_SAMPLES_SGIS = 0x80A9;
        #endregion GL_SAMPLES_SGIS

        #region GL_SAMPLE_MASK_VALUE_SGIS
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SAMPLE_MASK_VALUE_SGIS 0x80AA
        public const int GL_SAMPLE_MASK_VALUE_SGIS = 0x80AA;
        #endregion GL_SAMPLE_MASK_VALUE_SGIS

        #region GL_SAMPLE_MASK_INVERT_SGIS
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SAMPLE_MASK_INVERT_SGIS 0x80AB
        public const int GL_SAMPLE_MASK_INVERT_SGIS = 0x80AB;
        #endregion GL_SAMPLE_MASK_INVERT_SGIS

        #region GL_SAMPLE_PATTERN_SGIS
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SAMPLE_PATTERN_SGIS 0x80AC
        public const int GL_SAMPLE_PATTERN_SGIS = 0x80AC;
        #endregion GL_SAMPLE_PATTERN_SGIS
        #endregion GL_SGIS_multisample Constants

        #region GL_SGIS_multisample Methods
        #region void glSampleMaskSGIS([In] IntPtr extensionPointer, float parameterValue, int invert)
        // GLvoid glSampleMaskSGIS(GLclampf parameterValue, GLboolean invert)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg parameterValue\r\nldarg invert\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]float32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg parameterValue\r\nldarg invert\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]float32,[in]int32)\r\nret")]
        #endif
        public static void glSampleMaskSGIS([In] IntPtr extensionPointer, float parameterValue, int invert) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSampleMaskSGIS([In] IntPtr extensionPointer, float parameterValue, int invert)

        #region void glSamplePatternSGIS([In] IntPtr extensionPointer, int pattern)
        // GLvoid glSamplePatternSGIS(GLenum pattern)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg pattern\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg pattern\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32)\r\nret")]
        #endif
        public static void glSamplePatternSGIS([In] IntPtr extensionPointer, int pattern) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glSamplePatternSGIS([In] IntPtr extensionPointer, int pattern)
        #endregion GL_SGIS_multisample Methods
        #endregion GL_SGIS_multisample (25)

        #region GL_SGIS_generate_mipmap (32)
        #region GL_SGIS_generate_mipmap Constants
        #region GL_GENERATE_MIPMAP_SGIS
        /// <summary>
        /// 
        /// </summary>
        // #define GL_GENERATE_MIPMAP_SGIS 0x8191
        public const int GL_GENERATE_MIPMAP_SGIS = 0x8191;
        #endregion GL_GENERATE_MIPMAP_SGIS

        #region GL_GENERATE_MIPMAP_HINT_SGIS
        /// <summary>
        /// 
        /// </summary>
        // #define GL_GENERATE_MIPMAP_HINT_SGIS 0x8192
        public const int GL_GENERATE_MIPMAP_HINT_SGIS = 0x8192;
        #endregion GL_GENERATE_MIPMAP_HINT_SGIS
        #endregion GL_SGIS_generate_mipmap Constants
        #endregion GL_SGIS_generate_mipmap (32)

        #region GL_SGIS_texture_edge_clamp (35)
        #region GL_SGIS_texture_edge_clamp Constants
        #region GL_CLAMP_TO_EDGE_SGIS
        /// <summary>
        /// 
        /// </summary>
        // #define GL_CLAMP_TO_EDGE_SGIS 0x812F
        public const int GL_CLAMP_TO_EDGE_SGIS = 0x812F;
        #endregion GL_CLAMP_TO_EDGE_SGIS
        #endregion GL_SGIS_texture_edge_clamp Constants
        #endregion GL_SGIS_texture_edge_clamp (35)

        #region GL_SGIS_texture_border_clamp (36)
        #region GL_SGIS_texture_border_clamp Constants
        #region GL_CLAMP_TO_BORDER_SGIS
        /// <summary>
        /// 
        /// </summary>
        // #define GL_CLAMP_TO_BORDER_SGIS 0x812D
        public const int GL_CLAMP_TO_BORDER_SGIS = 0x812D;
        #endregion GL_CLAMP_TO_BORDER_SGIS
        #endregion GL_SGIS_texture_border_clamp Constants
        #endregion GL_SGIS_texture_border_clamp (36)

        #region GL_SGIS_fog_function (64)
        #region GL_SGIS_fog_function Constants
        #region GL_FOG_FUNC_SGIS
        /// <summary>
        /// 
        /// </summary>
        // #define GL_FOG_FUNC_SGIS 0x812A
        public const int GL_FOG_FUNC_SGIS = 0x812A;
        #endregion GL_FOG_FUNC_SGIS

        #region GL_FOG_FUNC_POINTS_SGIS
        /// <summary>
        /// 
        /// </summary>
        // #define GL_FOG_FUNC_POINTS_SGIS 0x812B
        public const int GL_FOG_FUNC_POINTS_SGIS = 0x812B;
        #endregion GL_FOG_FUNC_POINTS_SGIS

        #region GL_MAX_FOG_FUNC_POINTS_SGIS
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAX_FOG_FUNC_POINTS_SGIS 0x812C
        public const int GL_MAX_FOG_FUNC_POINTS_SGIS = 0x812C;
        #endregion GL_MAX_FOG_FUNC_POINTS_SGIS
        #endregion GL_SGIS_fog_function Constants

        #region GL_SGIS_fog_function Methods
        #region Overloads for GLvoid glFogFuncSGIS(GLsizei n, const GLfloat* points)
        #region void glFogFuncSGIS([In] IntPtr extensionPointer, int n, ref float points)
        // GLvoid glFogFuncSGIS(GLsizei n, const GLfloat* points)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg points\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in][out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg points\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in][out]float32)\r\nret")]
        #endif
        public static void glFogFuncSGIS([In] IntPtr extensionPointer, int n, ref float points) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glFogFuncSGIS([In] IntPtr extensionPointer, int n, ref float points)

        #region void glFogFuncSGIS([In] IntPtr extensionPointer, int n, float[] points)
        // GLvoid glFogFuncSGIS(GLsizei n, const GLfloat* points)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg points\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg points\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float32[])\r\nret")]
        #endif
        public static void glFogFuncSGIS([In] IntPtr extensionPointer, int n, float[] points) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glFogFuncSGIS([In] IntPtr extensionPointer, int n, float[] points)

        #region void glFogFuncSGIS([In] IntPtr extensionPointer, int n, IntPtr points)
        // GLvoid glFogFuncSGIS(GLsizei n, const GLfloat* points)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg points\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg points\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]native int)\r\nret")]
        #endif
        public static void glFogFuncSGIS([In] IntPtr extensionPointer, int n, IntPtr points) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glFogFuncSGIS([In] IntPtr extensionPointer, int n, IntPtr points)

        #region void glFogFuncSGIS([In] IntPtr extensionPointer, int n, float* points)
        // GLvoid glFogFuncSGIS(GLsizei n, const GLfloat* points)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg points\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg n\r\nldarg points\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float32*)\r\nret")]
        #endif
        public static unsafe void glFogFuncSGIS([In] IntPtr extensionPointer, int n, float* points) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glFogFuncSGIS([In] IntPtr extensionPointer, int n, float* points)
        #endregion Overloads for GLvoid glFogFuncSGIS(GLsizei n, const GLfloat* points)

        #region Overloads for GLvoid glGetFogFuncSGIS(GLfloat* points)
        #region void glGetFogFuncSGIS([In] IntPtr extensionPointer, out float points)
        // GLvoid glGetFogFuncSGIS(GLfloat* points)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg points\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg points\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([out]float32)\r\nret")]
        #endif
        public static void glGetFogFuncSGIS([In] IntPtr extensionPointer, out float points) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetFogFuncSGIS([In] IntPtr extensionPointer, out float points)

        #region void glGetFogFuncSGIS([In] IntPtr extensionPointer, float[] points)
        // GLvoid glGetFogFuncSGIS(GLfloat* points)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg points\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([out]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg points\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([out]float32[])\r\nret")]
        #endif
        public static void glGetFogFuncSGIS([In] IntPtr extensionPointer, float[] points) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetFogFuncSGIS([In] IntPtr extensionPointer, float[] points)

        #region void glGetFogFuncSGIS([In] IntPtr extensionPointer, IntPtr points)
        // GLvoid glGetFogFuncSGIS(GLfloat* points)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg points\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([out]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg points\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([out]native int)\r\nret")]
        #endif
        public static void glGetFogFuncSGIS([In] IntPtr extensionPointer, IntPtr points) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetFogFuncSGIS([In] IntPtr extensionPointer, IntPtr points)

        #region void glGetFogFuncSGIS([In] IntPtr extensionPointer, float* points)
        // GLvoid glGetFogFuncSGIS(GLfloat* points)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg points\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([out]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg points\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([out]float32*)\r\nret")]
        #endif
        public static unsafe void glGetFogFuncSGIS([In] IntPtr extensionPointer, float* points) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGetFogFuncSGIS([In] IntPtr extensionPointer, float* points)
        #endregion Overloads for GLvoid glGetFogFuncSGIS(GLfloat* points)
        #endregion GL_SGIS_fog_function Methods
        #endregion GL_SGIS_fog_function (64)

        #region GL_SGIS_texture_color_mask (214)
        #region GL_SGIS_texture_color_mask Constants
        #region GL_TEXTURE_COLOR_WRITEMASK_SGIS
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_COLOR_WRITEMASK_SGIS 0x81EF
        public const int GL_TEXTURE_COLOR_WRITEMASK_SGIS = 0x81EF;
        #endregion GL_TEXTURE_COLOR_WRITEMASK_SGIS
        #endregion GL_SGIS_texture_color_mask Constants

        #region GL_SGIS_texture_color_mask Methods
        #region void glTextureColorMaskSGIS([In] IntPtr extensionPointer, int r, int g, int b, int a)
        // GLvoid glTextureColorMaskSGIS(GLboolean r, GLboolean g, GLboolean b, GLboolean a)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg r\r\nldarg g\r\nldarg b\r\nldarg a\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg r\r\nldarg g\r\nldarg b\r\nldarg a\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32)\r\nret")]
        #endif
        public static void glTextureColorMaskSGIS([In] IntPtr extensionPointer, int r, int g, int b, int a) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTextureColorMaskSGIS([In] IntPtr extensionPointer, int r, int g, int b, int a)
        #endregion GL_SGIS_texture_color_mask Methods
        #endregion GL_SGIS_texture_color_mask (214)
        #endregion SGIS Extensions

        #region SGIX Extensions
        #region GL_SGIX_pixel_texture (15)
        #region GL_SGIX_pixel_texture Constants
        #region GL_PIXEL_TEX_GEN_SGIX
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PIXEL_TEX_GEN_SGIX 0x8139
        public const int GL_PIXEL_TEX_GEN_SGIX = 0x8139;
        #endregion GL_PIXEL_TEX_GEN_SGIX

        #region GL_PIXEL_TEX_GEN_MODE_SGIX
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PIXEL_TEX_GEN_MODE_SGIX 0x832B
        public const int GL_PIXEL_TEX_GEN_MODE_SGIX = 0x832B;
        #endregion GL_PIXEL_TEX_GEN_MODE_SGIX
        #endregion GL_SGIX_pixel_texture Constants

        #region GL_SGIX_pixel_texture Methods
        #region void glPixelTexGenSGIX([In] IntPtr extensionPointer, int mode)
        // GLvoid glPixelTexGenSGIX(GLenum mode)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg mode\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg mode\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32)\r\nret")]
        #endif
        public static void glPixelTexGenSGIX([In] IntPtr extensionPointer, int mode) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glPixelTexGenSGIX([In] IntPtr extensionPointer, int mode)
        #endregion GL_SGIX_pixel_texture Methods
        #endregion GL_SGIX_pixel_texture (15)

        #region GL_SGIX_interlace (45)
        #region GL_SGIX_interlace Constants
        #region GL_INTERLACE_SGIX
        /// <summary>
        /// 
        /// </summary>
        // #define GL_INTERLACE_SGIX 0x8094
        public const int GL_INTERLACE_SGIX = 0x8094;
        #endregion GL_INTERLACE_SGIX
        #endregion GL_SGIX_interlace Constants
        #endregion GL_SGIX_interlace (45)

        #region GL_SGIX_texture_multi_buffer (53)
        #region GL_SGIX_texture_multi_buffer Constants
        #region GL_TEXTURE_MULTI_BUFFER_HINT_SGIX
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_MULTI_BUFFER_HINT_SGIX 0x812E
        public const int GL_TEXTURE_MULTI_BUFFER_HINT_SGIX = 0x812E;
        #endregion GL_TEXTURE_MULTI_BUFFER_HINT_SGIX
        #endregion GL_SGIX_texture_multi_buffer Constants
        #endregion GL_SGIX_texture_multi_buffer (53)

        #region GL_SGIX_texture_scale_bias (56)
        #region GL_SGIX_texture_scale_bias Constants
        #region GL_POST_TEXTURE_FILTER_BIAS_SGIX
        /// <summary>
        /// 
        /// </summary>
        // #define GL_POST_TEXTURE_FILTER_BIAS_SGIX 0x8179
        public const int GL_POST_TEXTURE_FILTER_BIAS_SGIX = 0x8179;
        #endregion GL_POST_TEXTURE_FILTER_BIAS_SGIX

        #region GL_POST_TEXTURE_FILTER_SCALE_SGIX
        /// <summary>
        /// 
        /// </summary>
        // #define GL_POST_TEXTURE_FILTER_SCALE_SGIX 0x817A
        public const int GL_POST_TEXTURE_FILTER_SCALE_SGIX = 0x817A;
        #endregion GL_POST_TEXTURE_FILTER_SCALE_SGIX

        #region GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX
        /// <summary>
        /// 
        /// </summary>
        // #define GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX 0x817B
        public const int GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX = 0x817B;
        #endregion GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX

        #region GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX
        /// <summary>
        /// 
        /// </summary>
        // #define GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX 0x817C
        public const int GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX = 0x817C;
        #endregion GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX
        #endregion GL_SGIX_texture_scale_bias Constants
        #endregion GL_SGIX_texture_scale_bias (56)

        #region GL_SGIX_tag_sample_buffer (58)
        #region GL_SGIX_tag_sample_buffer Methods
        #region void glTagSampleBufferSGIX([In] IntPtr extensionPointer)
        // GLvoid glTagSampleBufferSGIX()
        #if WIN32
        [IlasmAttribute(".maxstack 1\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void()\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 1\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void()\r\nret")]
        #endif
        public static void glTagSampleBufferSGIX([In] IntPtr extensionPointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTagSampleBufferSGIX([In] IntPtr extensionPointer)
        #endregion GL_SGIX_tag_sample_buffer Methods
        #endregion GL_SGIX_tag_sample_buffer (58)

        #region GL_SGIX_depth_texture (63)
        #region GL_SGIX_depth_texture Constants
        #region GL_DEPTH_COMPONENT16_SGIX
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DEPTH_COMPONENT16_SGIX 0x81A5
        public const int GL_DEPTH_COMPONENT16_SGIX = 0x81A5;
        #endregion GL_DEPTH_COMPONENT16_SGIX

        #region GL_DEPTH_COMPONENT24_SGIX
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DEPTH_COMPONENT24_SGIX 0x81A6
        public const int GL_DEPTH_COMPONENT24_SGIX = 0x81A6;
        #endregion GL_DEPTH_COMPONENT24_SGIX

        #region GL_DEPTH_COMPONENT32_SGIX
        /// <summary>
        /// 
        /// </summary>
        // #define GL_DEPTH_COMPONENT32_SGIX 0x81A7
        public const int GL_DEPTH_COMPONENT32_SGIX = 0x81A7;
        #endregion GL_DEPTH_COMPONENT32_SGIX
        #endregion GL_SGIX_depth_texture Constants
        #endregion GL_SGIX_depth_texture (63)

        #region GL_SGIX_fog_offset (65)
        #region GL_SGIX_fog_offset Constants
        #region GL_FOG_OFFSET_SGIX
        /// <summary>
        /// 
        /// </summary>
        // #define GL_FOG_OFFSET_SGIX 0x8198
        public const int GL_FOG_OFFSET_SGIX = 0x8198;
        #endregion GL_FOG_OFFSET_SGIX

        #region GL_FOG_OFFSET_VALUE_SGIX
        /// <summary>
        /// 
        /// </summary>
        // #define GL_FOG_OFFSET_VALUE_SGIX 0x8199
        public const int GL_FOG_OFFSET_VALUE_SGIX = 0x8199;
        #endregion GL_FOG_OFFSET_VALUE_SGIX
        #endregion GL_SGIX_fog_offset Constants
        #endregion GL_SGIX_fog_offset (65)

        #region GL_SGIX_shadow_ambient (90)
        #region GL_SGIX_shadow_ambient Constants
        #region GL_SHADOW_AMBIENT_SGIX
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SHADOW_AMBIENT_SGIX 0x80BF
        public const int GL_SHADOW_AMBIENT_SGIX = 0x80BF;
        #endregion GL_SHADOW_AMBIENT_SGIX
        #endregion GL_SGIX_shadow_ambient Constants
        #endregion GL_SGIX_shadow_ambient (90)

        #region GL_SGIX_texture_range (181)
        #region GL_SGIX_texture_range Constants
        #region GL_RGB_SIGNED_SGIX
        /// <summary>
        /// 
        /// </summary>
        // #define GL_RGB_SIGNED_SGIX 0x85E0
        public const int GL_RGB_SIGNED_SGIX = 0x85E0;
        #endregion GL_RGB_SIGNED_SGIX

        #region GL_RGBA_SIGNED_SGIX
        /// <summary>
        /// 
        /// </summary>
        // #define GL_RGBA_SIGNED_SGIX 0x85E1
        public const int GL_RGBA_SIGNED_SGIX = 0x85E1;
        #endregion GL_RGBA_SIGNED_SGIX

        #region GL_ALPHA_SIGNED_SGIX
        /// <summary>
        /// 
        /// </summary>
        // #define GL_ALPHA_SIGNED_SGIX 0x85E2
        public const int GL_ALPHA_SIGNED_SGIX = 0x85E2;
        #endregion GL_ALPHA_SIGNED_SGIX

        #region GL_LUMINANCE_SIGNED_SGIX
        /// <summary>
        /// 
        /// </summary>
        // #define GL_LUMINANCE_SIGNED_SGIX 0x85E3
        public const int GL_LUMINANCE_SIGNED_SGIX = 0x85E3;
        #endregion GL_LUMINANCE_SIGNED_SGIX

        #region GL_INTENSITY_SIGNED_SGIX
        /// <summary>
        /// 
        /// </summary>
        // #define GL_INTENSITY_SIGNED_SGIX 0x85E4
        public const int GL_INTENSITY_SIGNED_SGIX = 0x85E4;
        #endregion GL_INTENSITY_SIGNED_SGIX

        #region GL_LUMINANCE_ALPHA_SIGNED_SGIX
        /// <summary>
        /// 
        /// </summary>
        // #define GL_LUMINANCE_ALPHA_SIGNED_SGIX 0x85E5
        public const int GL_LUMINANCE_ALPHA_SIGNED_SGIX = 0x85E5;
        #endregion GL_LUMINANCE_ALPHA_SIGNED_SGIX

        #region GL_RGB16_SIGNED_SGIX
        /// <summary>
        /// 
        /// </summary>
        // #define GL_RGB16_SIGNED_SGIX 0x85E6
        public const int GL_RGB16_SIGNED_SGIX = 0x85E6;
        #endregion GL_RGB16_SIGNED_SGIX

        #region GL_RGBA16_SIGNED_SGIX
        /// <summary>
        /// 
        /// </summary>
        // #define GL_RGBA16_SIGNED_SGIX 0x85E7
        public const int GL_RGBA16_SIGNED_SGIX = 0x85E7;
        #endregion GL_RGBA16_SIGNED_SGIX

        #region GL_ALPHA16_SIGNED_SGIX
        /// <summary>
        /// 
        /// </summary>
        // #define GL_ALPHA16_SIGNED_SGIX 0x85E8
        public const int GL_ALPHA16_SIGNED_SGIX = 0x85E8;
        #endregion GL_ALPHA16_SIGNED_SGIX

        #region GL_LUMINANCE16_SIGNED_SGIX
        /// <summary>
        /// 
        /// </summary>
        // #define GL_LUMINANCE16_SIGNED_SGIX 0x85E9
        public const int GL_LUMINANCE16_SIGNED_SGIX = 0x85E9;
        #endregion GL_LUMINANCE16_SIGNED_SGIX

        #region GL_INTENSITY16_SIGNED_SGIX
        /// <summary>
        /// 
        /// </summary>
        // #define GL_INTENSITY16_SIGNED_SGIX 0x85EA
        public const int GL_INTENSITY16_SIGNED_SGIX = 0x85EA;
        #endregion GL_INTENSITY16_SIGNED_SGIX

        #region GL_LUMINANCE16_ALPHA16_SIGNED_SGIX
        /// <summary>
        /// 
        /// </summary>
        // #define GL_LUMINANCE16_ALPHA16_SIGNED_SGIX 0x85EB
        public const int GL_LUMINANCE16_ALPHA16_SIGNED_SGIX = 0x85EB;
        #endregion GL_LUMINANCE16_ALPHA16_SIGNED_SGIX

        #region GL_RGB_EXTENDED_RANGE_SGIX
        /// <summary>
        /// 
        /// </summary>
        // #define GL_RGB_EXTENDED_RANGE_SGIX 0x85EC
        public const int GL_RGB_EXTENDED_RANGE_SGIX = 0x85EC;
        #endregion GL_RGB_EXTENDED_RANGE_SGIX

        #region GL_RGBA_EXTENDED_RANGE_SGIX
        /// <summary>
        /// 
        /// </summary>
        // #define GL_RGBA_EXTENDED_RANGE_SGIX 0x85ED
        public const int GL_RGBA_EXTENDED_RANGE_SGIX = 0x85ED;
        #endregion GL_RGBA_EXTENDED_RANGE_SGIX

        #region GL_ALPHA_EXTENDED_RANGE_SGIX
        /// <summary>
        /// 
        /// </summary>
        // #define GL_ALPHA_EXTENDED_RANGE_SGIX 0x85EE
        public const int GL_ALPHA_EXTENDED_RANGE_SGIX = 0x85EE;
        #endregion GL_ALPHA_EXTENDED_RANGE_SGIX

        #region GL_LUMINANCE_EXTENDED_RANGE_SGIX
        /// <summary>
        /// 
        /// </summary>
        // #define GL_LUMINANCE_EXTENDED_RANGE_SGIX 0x85EF
        public const int GL_LUMINANCE_EXTENDED_RANGE_SGIX = 0x85EF;
        #endregion GL_LUMINANCE_EXTENDED_RANGE_SGIX

        #region GL_INTENSITY_EXTENDED_RANGE_SGIX
        /// <summary>
        /// 
        /// </summary>
        // #define GL_INTENSITY_EXTENDED_RANGE_SGIX 0x85F0
        public const int GL_INTENSITY_EXTENDED_RANGE_SGIX = 0x85F0;
        #endregion GL_INTENSITY_EXTENDED_RANGE_SGIX

        #region GL_LUMINANCE_ALPHA_EXTENDED_RANGE_SGIX
        /// <summary>
        /// 
        /// </summary>
        // #define GL_LUMINANCE_ALPHA_EXTENDED_RANGE_SGIX 0x85F1
        public const int GL_LUMINANCE_ALPHA_EXTENDED_RANGE_SGIX = 0x85F1;
        #endregion GL_LUMINANCE_ALPHA_EXTENDED_RANGE_SGIX

        #region GL_RGB16_EXTENDED_RANGE_SGIX
        /// <summary>
        /// 
        /// </summary>
        // #define GL_RGB16_EXTENDED_RANGE_SGIX 0x85F2
        public const int GL_RGB16_EXTENDED_RANGE_SGIX = 0x85F2;
        #endregion GL_RGB16_EXTENDED_RANGE_SGIX

        #region GL_RGBA16_EXTENDED_RANGE_SGIX
        /// <summary>
        /// 
        /// </summary>
        // #define GL_RGBA16_EXTENDED_RANGE_SGIX 0x85F3
        public const int GL_RGBA16_EXTENDED_RANGE_SGIX = 0x85F3;
        #endregion GL_RGBA16_EXTENDED_RANGE_SGIX

        #region GL_ALPHA16_EXTENDED_RANGE_SGIX
        /// <summary>
        /// 
        /// </summary>
        // #define GL_ALPHA16_EXTENDED_RANGE_SGIX 0x85F4
        public const int GL_ALPHA16_EXTENDED_RANGE_SGIX = 0x85F4;
        #endregion GL_ALPHA16_EXTENDED_RANGE_SGIX

        #region GL_LUMINANCE16_EXTENDED_RANGE_SGIX
        /// <summary>
        /// 
        /// </summary>
        // #define GL_LUMINANCE16_EXTENDED_RANGE_SGIX 0x85F5
        public const int GL_LUMINANCE16_EXTENDED_RANGE_SGIX = 0x85F5;
        #endregion GL_LUMINANCE16_EXTENDED_RANGE_SGIX

        #region GL_INTENSITY16_EXTENDED_RANGE_SGIX
        /// <summary>
        /// 
        /// </summary>
        // #define GL_INTENSITY16_EXTENDED_RANGE_SGIX 0x85F6
        public const int GL_INTENSITY16_EXTENDED_RANGE_SGIX = 0x85F6;
        #endregion GL_INTENSITY16_EXTENDED_RANGE_SGIX

        #region GL_LUMINANCE16_ALPHA16_EXTENDED_RANGE_SGIX
        /// <summary>
        /// 
        /// </summary>
        // #define GL_LUMINANCE16_ALPHA16_EXTENDED_RANGE_SGIX 0x85F7
        public const int GL_LUMINANCE16_ALPHA16_EXTENDED_RANGE_SGIX = 0x85F7;
        #endregion GL_LUMINANCE16_ALPHA16_EXTENDED_RANGE_SGIX

        #region GL_MIN_LUMINANCE_SGIS
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MIN_LUMINANCE_SGIS 0x85F8
        public const int GL_MIN_LUMINANCE_SGIS = 0x85F8;
        #endregion GL_MIN_LUMINANCE_SGIS

        #region GL_MAX_LUMINANCE_SGIS
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAX_LUMINANCE_SGIS 0x85F9
        public const int GL_MAX_LUMINANCE_SGIS = 0x85F9;
        #endregion GL_MAX_LUMINANCE_SGIS

        #region GL_MIN_INTENSITY_SGIS
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MIN_INTENSITY_SGIS 0x85FA
        public const int GL_MIN_INTENSITY_SGIS = 0x85FA;
        #endregion GL_MIN_INTENSITY_SGIS

        #region GL_MAX_INTENSITY_SGIS
        /// <summary>
        /// 
        /// </summary>
        // #define GL_MAX_INTENSITY_SGIS 0x85FB
        public const int GL_MAX_INTENSITY_SGIS = 0x85FB;
        #endregion GL_MAX_INTENSITY_SGIS
        #endregion GL_SGIX_texture_range Constants
        #endregion GL_SGIX_texture_range (181)

        #region GL_SGIX_texture_coordinate_clamp (235)
        #region GL_SGIX_texture_coordinate_clamp Constants
        #region GL_TEXTURE_MAX_CLAMP_S_SGIX
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_MAX_CLAMP_S_SGIX 0x8369
        public const int GL_TEXTURE_MAX_CLAMP_S_SGIX = 0x8369;
        #endregion GL_TEXTURE_MAX_CLAMP_S_SGIX

        #region GL_TEXTURE_MAX_CLAMP_T_SGIX
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_MAX_CLAMP_T_SGIX 0x836A
        public const int GL_TEXTURE_MAX_CLAMP_T_SGIX = 0x836A;
        #endregion GL_TEXTURE_MAX_CLAMP_T_SGIX

        #region GL_TEXTURE_MAX_CLAMP_R_SGIX
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_MAX_CLAMP_R_SGIX 0x836B
        public const int GL_TEXTURE_MAX_CLAMP_R_SGIX = 0x836B;
        #endregion GL_TEXTURE_MAX_CLAMP_R_SGIX
        #endregion GL_SGIX_texture_coordinate_clamp Constants
        #endregion GL_SGIX_texture_coordinate_clamp (235)
        #endregion SGIX Extensions

        #region SUN Extensions
        #region GL_SUN_global_alpha (164)
        #region GL_SUN_global_alpha Constants
        #region GL_GLOBAL_ALPHA_SUN
        /// <summary>
        /// 
        /// </summary>
        // #define GL_GLOBAL_ALPHA_SUN 0x81D9
        public const int GL_GLOBAL_ALPHA_SUN = 0x81D9;
        #endregion GL_GLOBAL_ALPHA_SUN

        #region GL_GLOBAL_ALPHA_FACTOR_SUN
        /// <summary>
        /// 
        /// </summary>
        // #define GL_GLOBAL_ALPHA_FACTOR_SUN 0x81DA
        public const int GL_GLOBAL_ALPHA_FACTOR_SUN = 0x81DA;
        #endregion GL_GLOBAL_ALPHA_FACTOR_SUN
        #endregion GL_SUN_global_alpha Constants

        #region GL_SUN_global_alpha Methods
        #region Overloads for GLvoid glGlobalAlphaFactorbSUN(GLbyte factor)
        #region void glGlobalAlphaFactorbSUN([In] IntPtr extensionPointer, byte factor)
        // GLvoid glGlobalAlphaFactorbSUN(GLbyte factor)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg factor\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int8)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg factor\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int8)\r\nret")]
        #endif
        public static void glGlobalAlphaFactorbSUN([In] IntPtr extensionPointer, byte factor) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGlobalAlphaFactorbSUN([In] IntPtr extensionPointer, byte factor)

        #region void glGlobalAlphaFactorbSUN([In] IntPtr extensionPointer, sbyte factor)
        // GLvoid glGlobalAlphaFactorbSUN(GLbyte factor)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg factor\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int8)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg factor\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int8)\r\nret")]
        #endif
        public static void glGlobalAlphaFactorbSUN([In] IntPtr extensionPointer, sbyte factor) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGlobalAlphaFactorbSUN([In] IntPtr extensionPointer, sbyte factor)
        #endregion Overloads for GLvoid glGlobalAlphaFactorbSUN(GLbyte factor)

        #region void glGlobalAlphaFactorsSUN([In] IntPtr extensionPointer, short factor)
        // GLvoid glGlobalAlphaFactorsSUN(GLshort factor)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg factor\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg factor\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int16)\r\nret")]
        #endif
        public static void glGlobalAlphaFactorsSUN([In] IntPtr extensionPointer, short factor) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGlobalAlphaFactorsSUN([In] IntPtr extensionPointer, short factor)

        #region void glGlobalAlphaFactoriSUN([In] IntPtr extensionPointer, int factor)
        // GLvoid glGlobalAlphaFactoriSUN(GLint factor)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg factor\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg factor\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32)\r\nret")]
        #endif
        public static void glGlobalAlphaFactoriSUN([In] IntPtr extensionPointer, int factor) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGlobalAlphaFactoriSUN([In] IntPtr extensionPointer, int factor)

        #region void glGlobalAlphaFactorfSUN([In] IntPtr extensionPointer, float factor)
        // GLvoid glGlobalAlphaFactorfSUN(GLfloat factor)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg factor\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg factor\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]float32)\r\nret")]
        #endif
        public static void glGlobalAlphaFactorfSUN([In] IntPtr extensionPointer, float factor) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGlobalAlphaFactorfSUN([In] IntPtr extensionPointer, float factor)

        #region void glGlobalAlphaFactordSUN([In] IntPtr extensionPointer, double factor)
        // GLvoid glGlobalAlphaFactordSUN(GLdouble factor)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg factor\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]float64)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg factor\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]float64)\r\nret")]
        #endif
        public static void glGlobalAlphaFactordSUN([In] IntPtr extensionPointer, double factor) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGlobalAlphaFactordSUN([In] IntPtr extensionPointer, double factor)

        #region void glGlobalAlphaFactorubSUN([In] IntPtr extensionPointer, byte factor)
        // GLvoid glGlobalAlphaFactorubSUN(GLubyte factor)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg factor\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int8)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg factor\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int8)\r\nret")]
        #endif
        public static void glGlobalAlphaFactorubSUN([In] IntPtr extensionPointer, byte factor) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGlobalAlphaFactorubSUN([In] IntPtr extensionPointer, byte factor)

        #region Overloads for GLvoid glGlobalAlphaFactorusSUN(GLushort factor)
        #region void glGlobalAlphaFactorusSUN([In] IntPtr extensionPointer, short factor)
        // GLvoid glGlobalAlphaFactorusSUN(GLushort factor)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg factor\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg factor\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int16)\r\nret")]
        #endif
        public static void glGlobalAlphaFactorusSUN([In] IntPtr extensionPointer, short factor) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGlobalAlphaFactorusSUN([In] IntPtr extensionPointer, short factor)

        #region void glGlobalAlphaFactorusSUN([In] IntPtr extensionPointer, ushort factor)
        // GLvoid glGlobalAlphaFactorusSUN(GLushort factor)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg factor\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int16)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg factor\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int16)\r\nret")]
        #endif
        public static void glGlobalAlphaFactorusSUN([In] IntPtr extensionPointer, ushort factor) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGlobalAlphaFactorusSUN([In] IntPtr extensionPointer, ushort factor)
        #endregion Overloads for GLvoid glGlobalAlphaFactorusSUN(GLushort factor)

        #region Overloads for GLvoid glGlobalAlphaFactoruiSUN(GLuint factor)
        #region void glGlobalAlphaFactoruiSUN([In] IntPtr extensionPointer, int factor)
        // GLvoid glGlobalAlphaFactoruiSUN(GLuint factor)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg factor\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg factor\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32)\r\nret")]
        #endif
        public static void glGlobalAlphaFactoruiSUN([In] IntPtr extensionPointer, int factor) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGlobalAlphaFactoruiSUN([In] IntPtr extensionPointer, int factor)

        #region void glGlobalAlphaFactoruiSUN([In] IntPtr extensionPointer, uint factor)
        // GLvoid glGlobalAlphaFactoruiSUN(GLuint factor)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg factor\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int32)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg factor\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int32)\r\nret")]
        #endif
        public static void glGlobalAlphaFactoruiSUN([In] IntPtr extensionPointer, uint factor) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glGlobalAlphaFactoruiSUN([In] IntPtr extensionPointer, uint factor)
        #endregion Overloads for GLvoid glGlobalAlphaFactoruiSUN(GLuint factor)
        #endregion GL_SUN_global_alpha Methods
        #endregion GL_SUN_global_alpha (164)

        #region GL_SUN_triangle_list (165)
        #region GL_SUN_triangle_list Constants
        #region GL_TRIANGLE_LIST_SUN
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TRIANGLE_LIST_SUN 0x81D7
        public const int GL_TRIANGLE_LIST_SUN = 0x81D7;
        #endregion GL_TRIANGLE_LIST_SUN

        #region GL_REPLACEMENT_CODE_SUN
        /// <summary>
        /// 
        /// </summary>
        // #define GL_REPLACEMENT_CODE_SUN 0x81D8
        public const int GL_REPLACEMENT_CODE_SUN = 0x81D8;
        #endregion GL_REPLACEMENT_CODE_SUN

        #region GL_RESTART_SUN
        /// <summary>
        /// 
        /// </summary>
        // #define GL_RESTART_SUN 0x01
        public const int GL_RESTART_SUN = 0x01;
        #endregion GL_RESTART_SUN

        #region GL_REPLACE_MIDDLE_SUN
        /// <summary>
        /// 
        /// </summary>
        // #define GL_REPLACE_MIDDLE_SUN 0x02
        public const int GL_REPLACE_MIDDLE_SUN = 0x02;
        #endregion GL_REPLACE_MIDDLE_SUN

        #region GL_REPLACE_OLDEST_SUN
        /// <summary>
        /// 
        /// </summary>
        // #define GL_REPLACE_OLDEST_SUN 0x03
        public const int GL_REPLACE_OLDEST_SUN = 0x03;
        #endregion GL_REPLACE_OLDEST_SUN

        #region GL_REPLACEMENT_CODE_ARRAY_SUN
        /// <summary>
        /// 
        /// </summary>
        // #define GL_REPLACEMENT_CODE_ARRAY_SUN 0x85C0
        public const int GL_REPLACEMENT_CODE_ARRAY_SUN = 0x85C0;
        #endregion GL_REPLACEMENT_CODE_ARRAY_SUN

        #region GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN
        /// <summary>
        /// 
        /// </summary>
        // #define GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN 0x85C1
        public const int GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN = 0x85C1;
        #endregion GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN

        #region GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN
        /// <summary>
        /// 
        /// </summary>
        // #define GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN 0x85C2
        public const int GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN = 0x85C2;
        #endregion GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN

        #region GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN
        /// <summary>
        /// 
        /// </summary>
        // #define GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN 0x85C3
        public const int GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN = 0x85C3;
        #endregion GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN

        #region GL_R1UI_V3F_SUN
        /// <summary>
        /// 
        /// </summary>
        // #define GL_R1UI_V3F_SUN 0x85C4
        public const int GL_R1UI_V3F_SUN = 0x85C4;
        #endregion GL_R1UI_V3F_SUN

        #region GL_R1UI_C4UB_V3F_SUN
        /// <summary>
        /// 
        /// </summary>
        // #define GL_R1UI_C4UB_V3F_SUN 0x85C5
        public const int GL_R1UI_C4UB_V3F_SUN = 0x85C5;
        #endregion GL_R1UI_C4UB_V3F_SUN

        #region GL_R1UI_C3F_V3F_SUN
        /// <summary>
        /// 
        /// </summary>
        // #define GL_R1UI_C3F_V3F_SUN 0x85C6
        public const int GL_R1UI_C3F_V3F_SUN = 0x85C6;
        #endregion GL_R1UI_C3F_V3F_SUN

        #region GL_R1UI_N3F_V3F_SUN
        /// <summary>
        /// 
        /// </summary>
        // #define GL_R1UI_N3F_V3F_SUN 0x85C7
        public const int GL_R1UI_N3F_V3F_SUN = 0x85C7;
        #endregion GL_R1UI_N3F_V3F_SUN

        #region GL_R1UI_C4F_N3F_V3F_SUN
        /// <summary>
        /// 
        /// </summary>
        // #define GL_R1UI_C4F_N3F_V3F_SUN 0x85C8
        public const int GL_R1UI_C4F_N3F_V3F_SUN = 0x85C8;
        #endregion GL_R1UI_C4F_N3F_V3F_SUN

        #region GL_R1UI_T2F_V3F_SUN
        /// <summary>
        /// 
        /// </summary>
        // #define GL_R1UI_T2F_V3F_SUN 0x85C9
        public const int GL_R1UI_T2F_V3F_SUN = 0x85C9;
        #endregion GL_R1UI_T2F_V3F_SUN

        #region GL_R1UI_T2F_N3F_V3F_SUN
        /// <summary>
        /// 
        /// </summary>
        // #define GL_R1UI_T2F_N3F_V3F_SUN 0x85CA
        public const int GL_R1UI_T2F_N3F_V3F_SUN = 0x85CA;
        #endregion GL_R1UI_T2F_N3F_V3F_SUN

        #region GL_R1UI_T2F_C4F_N3F_V3F_SUN
        /// <summary>
        /// 
        /// </summary>
        // #define GL_R1UI_T2F_C4F_N3F_V3F_SUN 0x85CB
        public const int GL_R1UI_T2F_C4F_N3F_V3F_SUN = 0x85CB;
        #endregion GL_R1UI_T2F_C4F_N3F_V3F_SUN
        #endregion GL_SUN_triangle_list Constants

        #region GL_SUN_triangle_list Methods
        #region Overloads for GLvoid glReplacementCodeuiSUN(GLuint code)
        #region void glReplacementCodeuiSUN([In] IntPtr extensionPointer, int code)
        // GLvoid glReplacementCodeuiSUN(GLuint code)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg code\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg code\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32)\r\nret")]
        #endif
        public static void glReplacementCodeuiSUN([In] IntPtr extensionPointer, int code) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glReplacementCodeuiSUN([In] IntPtr extensionPointer, int code)

        #region void glReplacementCodeuiSUN([In] IntPtr extensionPointer, uint code)
        // GLvoid glReplacementCodeuiSUN(GLuint code)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg code\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int32)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg code\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int32)\r\nret")]
        #endif
        public static void glReplacementCodeuiSUN([In] IntPtr extensionPointer, uint code) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glReplacementCodeuiSUN([In] IntPtr extensionPointer, uint code)
        #endregion Overloads for GLvoid glReplacementCodeuiSUN(GLuint code)

        #region Overloads for GLvoid glReplacementCodeusSUN(GLushort code)
        #region void glReplacementCodeusSUN([In] IntPtr extensionPointer, short code)
        // GLvoid glReplacementCodeusSUN(GLushort code)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg code\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg code\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int16)\r\nret")]
        #endif
        public static void glReplacementCodeusSUN([In] IntPtr extensionPointer, short code) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glReplacementCodeusSUN([In] IntPtr extensionPointer, short code)

        #region void glReplacementCodeusSUN([In] IntPtr extensionPointer, ushort code)
        // GLvoid glReplacementCodeusSUN(GLushort code)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg code\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int16)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg code\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int16)\r\nret")]
        #endif
        public static void glReplacementCodeusSUN([In] IntPtr extensionPointer, ushort code) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glReplacementCodeusSUN([In] IntPtr extensionPointer, ushort code)
        #endregion Overloads for GLvoid glReplacementCodeusSUN(GLushort code)

        #region void glReplacementCodeubSUN([In] IntPtr extensionPointer, byte code)
        // GLvoid glReplacementCodeubSUN(GLubyte code)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg code\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int8)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg code\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int8)\r\nret")]
        #endif
        public static void glReplacementCodeubSUN([In] IntPtr extensionPointer, byte code) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glReplacementCodeubSUN([In] IntPtr extensionPointer, byte code)

        #region Overloads for GLvoid glReplacementCodeuivSUN(const GLuint* code)
        #region void glReplacementCodeuivSUN([In] IntPtr extensionPointer, int[] code)
        // GLvoid glReplacementCodeuivSUN(const GLuint* code)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg code\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg code\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32[])\r\nret")]
        #endif
        public static void glReplacementCodeuivSUN([In] IntPtr extensionPointer, int[] code) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glReplacementCodeuivSUN([In] IntPtr extensionPointer, int[] code)

        #region void glReplacementCodeuivSUN([In] IntPtr extensionPointer, ref int code)
        // GLvoid glReplacementCodeuivSUN(const GLuint* code)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg code\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg code\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]int32)\r\nret")]
        #endif
        public static void glReplacementCodeuivSUN([In] IntPtr extensionPointer, ref int code) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glReplacementCodeuivSUN([In] IntPtr extensionPointer, ref int code)

        #region void glReplacementCodeuivSUN([In] IntPtr extensionPointer, IntPtr code)
        // GLvoid glReplacementCodeuivSUN(const GLuint* code)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg code\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg code\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int)\r\nret")]
        #endif
        public static void glReplacementCodeuivSUN([In] IntPtr extensionPointer, IntPtr code) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glReplacementCodeuivSUN([In] IntPtr extensionPointer, IntPtr code)

        #region void glReplacementCodeuivSUN([In] IntPtr extensionPointer, ref uint code)
        // GLvoid glReplacementCodeuivSUN(const GLuint* code)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg code\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]unsigned int32)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg code\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]unsigned int32)\r\nret")]
        #endif
        public static void glReplacementCodeuivSUN([In] IntPtr extensionPointer, ref uint code) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glReplacementCodeuivSUN([In] IntPtr extensionPointer, ref uint code)

        #region void glReplacementCodeuivSUN([In] IntPtr extensionPointer, uint[] code)
        // GLvoid glReplacementCodeuivSUN(const GLuint* code)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg code\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int32[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg code\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int32[])\r\nret")]
        #endif
        public static void glReplacementCodeuivSUN([In] IntPtr extensionPointer, uint[] code) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glReplacementCodeuivSUN([In] IntPtr extensionPointer, uint[] code)

        #region void glReplacementCodeuivSUN([In] IntPtr extensionPointer, uint* code)
        // GLvoid glReplacementCodeuivSUN(const GLuint* code)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg code\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg code\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int32*)\r\nret")]
        #endif
        public static unsafe void glReplacementCodeuivSUN([In] IntPtr extensionPointer, uint* code) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glReplacementCodeuivSUN([In] IntPtr extensionPointer, uint* code)
        #endregion Overloads for GLvoid glReplacementCodeuivSUN(const GLuint* code)

        #region Overloads for GLvoid glReplacementCodeusvSUN(const GLushort* code)
        #region void glReplacementCodeusvSUN([In] IntPtr extensionPointer, short[] code)
        // GLvoid glReplacementCodeusvSUN(const GLushort* code)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg code\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg code\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int16[])\r\nret")]
        #endif
        public static void glReplacementCodeusvSUN([In] IntPtr extensionPointer, short[] code) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glReplacementCodeusvSUN([In] IntPtr extensionPointer, short[] code)

        #region void glReplacementCodeusvSUN([In] IntPtr extensionPointer, ref short code)
        // GLvoid glReplacementCodeusvSUN(const GLushort* code)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg code\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]int16)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg code\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]int16)\r\nret")]
        #endif
        public static void glReplacementCodeusvSUN([In] IntPtr extensionPointer, ref short code) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glReplacementCodeusvSUN([In] IntPtr extensionPointer, ref short code)

        #region void glReplacementCodeusvSUN([In] IntPtr extensionPointer, IntPtr code)
        // GLvoid glReplacementCodeusvSUN(const GLushort* code)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg code\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg code\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int)\r\nret")]
        #endif
        public static void glReplacementCodeusvSUN([In] IntPtr extensionPointer, IntPtr code) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glReplacementCodeusvSUN([In] IntPtr extensionPointer, IntPtr code)

        #region void glReplacementCodeusvSUN([In] IntPtr extensionPointer, ref ushort code)
        // GLvoid glReplacementCodeusvSUN(const GLushort* code)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg code\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]unsigned int16)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg code\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]unsigned int16)\r\nret")]
        #endif
        public static void glReplacementCodeusvSUN([In] IntPtr extensionPointer, ref ushort code) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glReplacementCodeusvSUN([In] IntPtr extensionPointer, ref ushort code)

        #region void glReplacementCodeusvSUN([In] IntPtr extensionPointer, ushort[] code)
        // GLvoid glReplacementCodeusvSUN(const GLushort* code)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg code\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int16[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg code\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int16[])\r\nret")]
        #endif
        public static void glReplacementCodeusvSUN([In] IntPtr extensionPointer, ushort[] code) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glReplacementCodeusvSUN([In] IntPtr extensionPointer, ushort[] code)

        #region void glReplacementCodeusvSUN([In] IntPtr extensionPointer, ushort* code)
        // GLvoid glReplacementCodeusvSUN(const GLushort* code)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg code\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int16*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg code\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int16*)\r\nret")]
        #endif
        public static unsafe void glReplacementCodeusvSUN([In] IntPtr extensionPointer, ushort* code) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glReplacementCodeusvSUN([In] IntPtr extensionPointer, ushort* code)
        #endregion Overloads for GLvoid glReplacementCodeusvSUN(const GLushort* code)

        #region Overloads for GLvoid glReplacementCodeubvSUN(const GLubyte* code)
        #region void glReplacementCodeubvSUN([In] IntPtr extensionPointer, ref byte code)
        // GLvoid glReplacementCodeubvSUN(const GLubyte* code)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg code\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]unsigned int8)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg code\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]unsigned int8)\r\nret")]
        #endif
        public static void glReplacementCodeubvSUN([In] IntPtr extensionPointer, ref byte code) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glReplacementCodeubvSUN([In] IntPtr extensionPointer, ref byte code)

        #region void glReplacementCodeubvSUN([In] IntPtr extensionPointer, byte[] code)
        // GLvoid glReplacementCodeubvSUN(const GLubyte* code)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg code\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int8[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg code\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int8[])\r\nret")]
        #endif
        public static void glReplacementCodeubvSUN([In] IntPtr extensionPointer, byte[] code) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glReplacementCodeubvSUN([In] IntPtr extensionPointer, byte[] code)

        #region void glReplacementCodeubvSUN([In] IntPtr extensionPointer, IntPtr code)
        // GLvoid glReplacementCodeubvSUN(const GLubyte* code)
        #if WIN32
        [IlasmAttribute(".maxstack 2\r\nldarg code\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 2\r\nldarg code\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int)\r\nret")]
        #endif
        public static void glReplacementCodeubvSUN([In] IntPtr extensionPointer, IntPtr code) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glReplacementCodeubvSUN([In] IntPtr extensionPointer, IntPtr code)

        #region void glReplacementCodeubvSUN([In] IntPtr extensionPointer, byte* code)
        // GLvoid glReplacementCodeubvSUN(const GLubyte* code)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg code\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int8*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 2\r\nldarg code\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int8*)\r\nret")]
        #endif
        public static unsafe void glReplacementCodeubvSUN([In] IntPtr extensionPointer, byte* code) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glReplacementCodeubvSUN([In] IntPtr extensionPointer, byte* code)
        #endregion Overloads for GLvoid glReplacementCodeubvSUN(const GLubyte* code)

        #region Overloads for GLvoid glReplacementCodePointerSUN(GLenum type, GLsizei stride, const GLvoid* code)
        #region void glReplacementCodePointerSUN([In] IntPtr extensionPointer, int type, int stride, short[] code)
        // GLvoid glReplacementCodePointerSUN(GLenum type, GLsizei stride, const GLvoid* code)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg type\r\nldarg stride\r\nldarg code\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int16[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg type\r\nldarg stride\r\nldarg code\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int16[])\r\nret")]
        #endif
        public static void glReplacementCodePointerSUN([In] IntPtr extensionPointer, int type, int stride, short[] code) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glReplacementCodePointerSUN([In] IntPtr extensionPointer, int type, int stride, short[] code)

        #region void glReplacementCodePointerSUN([In] IntPtr extensionPointer, int type, int stride, float[] code)
        // GLvoid glReplacementCodePointerSUN(GLenum type, GLsizei stride, const GLvoid* code)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg type\r\nldarg stride\r\nldarg code\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg type\r\nldarg stride\r\nldarg code\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]float32[])\r\nret")]
        #endif
        public static void glReplacementCodePointerSUN([In] IntPtr extensionPointer, int type, int stride, float[] code) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glReplacementCodePointerSUN([In] IntPtr extensionPointer, int type, int stride, float[] code)

        #region void glReplacementCodePointerSUN([In] IntPtr extensionPointer, int type, int stride, int[] code)
        // GLvoid glReplacementCodePointerSUN(GLenum type, GLsizei stride, const GLvoid* code)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg type\r\nldarg stride\r\nldarg code\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg type\r\nldarg stride\r\nldarg code\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32[])\r\nret")]
        #endif
        public static void glReplacementCodePointerSUN([In] IntPtr extensionPointer, int type, int stride, int[] code) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glReplacementCodePointerSUN([In] IntPtr extensionPointer, int type, int stride, int[] code)

        #region void glReplacementCodePointerSUN([In] IntPtr extensionPointer, int type, int stride, IntPtr code)
        // GLvoid glReplacementCodePointerSUN(GLenum type, GLsizei stride, const GLvoid* code)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg type\r\nldarg stride\r\nldarg code\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg type\r\nldarg stride\r\nldarg code\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]native int)\r\nret")]
        #endif
        public static void glReplacementCodePointerSUN([In] IntPtr extensionPointer, int type, int stride, IntPtr code) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glReplacementCodePointerSUN([In] IntPtr extensionPointer, int type, int stride, IntPtr code)

        #region void glReplacementCodePointerSUN([In] IntPtr extensionPointer, int type, int stride, byte[] code)
        // GLvoid glReplacementCodePointerSUN(GLenum type, GLsizei stride, const GLvoid* code)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg type\r\nldarg stride\r\nldarg code\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]unsigned int8[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg type\r\nldarg stride\r\nldarg code\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]unsigned int8[])\r\nret")]
        #endif
        public static void glReplacementCodePointerSUN([In] IntPtr extensionPointer, int type, int stride, byte[] code) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glReplacementCodePointerSUN([In] IntPtr extensionPointer, int type, int stride, byte[] code)

        #region void glReplacementCodePointerSUN([In] IntPtr extensionPointer, int type, int stride, double[] code)
        // GLvoid glReplacementCodePointerSUN(GLenum type, GLsizei stride, const GLvoid* code)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg type\r\nldarg stride\r\nldarg code\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]float64[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg type\r\nldarg stride\r\nldarg code\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]float64[])\r\nret")]
        #endif
        public static void glReplacementCodePointerSUN([In] IntPtr extensionPointer, int type, int stride, double[] code) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glReplacementCodePointerSUN([In] IntPtr extensionPointer, int type, int stride, double[] code)

        #region void glReplacementCodePointerSUN([In] IntPtr extensionPointer, int type, int stride, uint[] code)
        // GLvoid glReplacementCodePointerSUN(GLenum type, GLsizei stride, const GLvoid* code)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg type\r\nldarg stride\r\nldarg code\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]unsigned int32[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg type\r\nldarg stride\r\nldarg code\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]unsigned int32[])\r\nret")]
        #endif
        public static void glReplacementCodePointerSUN([In] IntPtr extensionPointer, int type, int stride, uint[] code) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glReplacementCodePointerSUN([In] IntPtr extensionPointer, int type, int stride, uint[] code)

        #region void glReplacementCodePointerSUN([In] IntPtr extensionPointer, int type, int stride, sbyte[] code)
        // GLvoid glReplacementCodePointerSUN(GLenum type, GLsizei stride, const GLvoid* code)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg type\r\nldarg stride\r\nldarg code\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int8[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg type\r\nldarg stride\r\nldarg code\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int8[])\r\nret")]
        #endif
        public static void glReplacementCodePointerSUN([In] IntPtr extensionPointer, int type, int stride, sbyte[] code) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glReplacementCodePointerSUN([In] IntPtr extensionPointer, int type, int stride, sbyte[] code)

        #region void glReplacementCodePointerSUN([In] IntPtr extensionPointer, int type, int stride, ushort[] code)
        // GLvoid glReplacementCodePointerSUN(GLenum type, GLsizei stride, const GLvoid* code)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg type\r\nldarg stride\r\nldarg code\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]unsigned int16[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg type\r\nldarg stride\r\nldarg code\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]unsigned int16[])\r\nret")]
        #endif
        public static void glReplacementCodePointerSUN([In] IntPtr extensionPointer, int type, int stride, ushort[] code) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glReplacementCodePointerSUN([In] IntPtr extensionPointer, int type, int stride, ushort[] code)

        #region void glReplacementCodePointerSUN([In] IntPtr extensionPointer, int type, int stride, void* code)
        // GLvoid glReplacementCodePointerSUN(GLenum type, GLsizei stride, const GLvoid* code)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg type\r\nldarg stride\r\nldarg code\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]void*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg type\r\nldarg stride\r\nldarg code\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]void*)\r\nret")]
        #endif
        public static unsafe void glReplacementCodePointerSUN([In] IntPtr extensionPointer, int type, int stride, void* code) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glReplacementCodePointerSUN([In] IntPtr extensionPointer, int type, int stride, void* code)
        #endregion Overloads for GLvoid glReplacementCodePointerSUN(GLenum type, GLsizei stride, const GLvoid* code)
        #endregion GL_SUN_triangle_list Methods
        #endregion GL_SUN_triangle_list (165)

        #region GL_SUN_vertex (166)
        #region GL_SUN_vertex Methods
        #region void glColor4ubVertex2fSUN([In] IntPtr extensionPointer, byte r, byte g, byte b, byte a, float x, float y)
        // GLvoid glColor4ubVertex2fSUN(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y)
        #if WIN32
        [IlasmAttribute(".maxstack 7\r\nldarg r\r\nldarg g\r\nldarg b\r\nldarg a\r\nldarg x\r\nldarg y\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int8,[in]unsigned int8,[in]unsigned int8,[in]unsigned int8,[in]float32,[in]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 7\r\nldarg r\r\nldarg g\r\nldarg b\r\nldarg a\r\nldarg x\r\nldarg y\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int8,[in]unsigned int8,[in]unsigned int8,[in]unsigned int8,[in]float32,[in]float32)\r\nret")]
        #endif
        public static void glColor4ubVertex2fSUN([In] IntPtr extensionPointer, byte r, byte g, byte b, byte a, float x, float y) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColor4ubVertex2fSUN([In] IntPtr extensionPointer, byte r, byte g, byte b, byte a, float x, float y)

        #region Overloads for GLvoid glColor4ubVertex2fvSUN(const GLubyte* color, const GLfloat* position)
        #region void glColor4ubVertex2fvSUN([In] IntPtr extensionPointer, ref byte color, ref float position)
        // GLvoid glColor4ubVertex2fvSUN(const GLubyte* color, const GLfloat* position)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg color\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]unsigned int8,[in][out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg color\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]unsigned int8,[in][out]float32)\r\nret")]
        #endif
        public static void glColor4ubVertex2fvSUN([In] IntPtr extensionPointer, ref byte color, ref float position) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColor4ubVertex2fvSUN([In] IntPtr extensionPointer, ref byte color, ref float position)

        #region void glColor4ubVertex2fvSUN([In] IntPtr extensionPointer, byte[] color, float[] position)
        // GLvoid glColor4ubVertex2fvSUN(const GLubyte* color, const GLfloat* position)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg color\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int8[],[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg color\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int8[],[in]float32[])\r\nret")]
        #endif
        public static void glColor4ubVertex2fvSUN([In] IntPtr extensionPointer, byte[] color, float[] position) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColor4ubVertex2fvSUN([In] IntPtr extensionPointer, byte[] color, float[] position)

        #region void glColor4ubVertex2fvSUN([In] IntPtr extensionPointer, IntPtr color, IntPtr position)
        // GLvoid glColor4ubVertex2fvSUN(const GLubyte* color, const GLfloat* position)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg color\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg color\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]native int)\r\nret")]
        #endif
        public static void glColor4ubVertex2fvSUN([In] IntPtr extensionPointer, IntPtr color, IntPtr position) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColor4ubVertex2fvSUN([In] IntPtr extensionPointer, IntPtr color, IntPtr position)

        #region void glColor4ubVertex2fvSUN([In] IntPtr extensionPointer, byte* color, float* position)
        // GLvoid glColor4ubVertex2fvSUN(const GLubyte* color, const GLfloat* position)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg color\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int8*,[in]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg color\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int8*,[in]float32*)\r\nret")]
        #endif
        public static unsafe void glColor4ubVertex2fvSUN([In] IntPtr extensionPointer, byte* color, float* position) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColor4ubVertex2fvSUN([In] IntPtr extensionPointer, byte* color, float* position)
        #endregion Overloads for GLvoid glColor4ubVertex2fvSUN(const GLubyte* color, const GLfloat* position)

        #region void glColor4ubVertex3fSUN([In] IntPtr extensionPointer, byte r, byte g, byte b, byte a, float x, float y, float z)
        // GLvoid glColor4ubVertex3fSUN(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z)
        #if WIN32
        [IlasmAttribute(".maxstack 8\r\nldarg r\r\nldarg g\r\nldarg b\r\nldarg a\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int8,[in]unsigned int8,[in]unsigned int8,[in]unsigned int8,[in]float32,[in]float32,[in]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 8\r\nldarg r\r\nldarg g\r\nldarg b\r\nldarg a\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int8,[in]unsigned int8,[in]unsigned int8,[in]unsigned int8,[in]float32,[in]float32,[in]float32)\r\nret")]
        #endif
        public static void glColor4ubVertex3fSUN([In] IntPtr extensionPointer, byte r, byte g, byte b, byte a, float x, float y, float z) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColor4ubVertex3fSUN([In] IntPtr extensionPointer, byte r, byte g, byte b, byte a, float x, float y, float z)

        #region Overloads for GLvoid glColor4ubVertex3fvSUN(const GLubyte* color, const GLfloat* position)
        #region void glColor4ubVertex3fvSUN([In] IntPtr extensionPointer, ref byte color, ref float position)
        // GLvoid glColor4ubVertex3fvSUN(const GLubyte* color, const GLfloat* position)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg color\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]unsigned int8,[in][out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg color\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]unsigned int8,[in][out]float32)\r\nret")]
        #endif
        public static void glColor4ubVertex3fvSUN([In] IntPtr extensionPointer, ref byte color, ref float position) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColor4ubVertex3fvSUN([In] IntPtr extensionPointer, ref byte color, ref float position)

        #region void glColor4ubVertex3fvSUN([In] IntPtr extensionPointer, byte[] color, float[] position)
        // GLvoid glColor4ubVertex3fvSUN(const GLubyte* color, const GLfloat* position)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg color\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int8[],[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg color\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int8[],[in]float32[])\r\nret")]
        #endif
        public static void glColor4ubVertex3fvSUN([In] IntPtr extensionPointer, byte[] color, float[] position) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColor4ubVertex3fvSUN([In] IntPtr extensionPointer, byte[] color, float[] position)

        #region void glColor4ubVertex3fvSUN([In] IntPtr extensionPointer, IntPtr color, IntPtr position)
        // GLvoid glColor4ubVertex3fvSUN(const GLubyte* color, const GLfloat* position)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg color\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg color\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]native int)\r\nret")]
        #endif
        public static void glColor4ubVertex3fvSUN([In] IntPtr extensionPointer, IntPtr color, IntPtr position) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColor4ubVertex3fvSUN([In] IntPtr extensionPointer, IntPtr color, IntPtr position)

        #region void glColor4ubVertex3fvSUN([In] IntPtr extensionPointer, byte* color, float* position)
        // GLvoid glColor4ubVertex3fvSUN(const GLubyte* color, const GLfloat* position)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg color\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int8*,[in]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg color\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int8*,[in]float32*)\r\nret")]
        #endif
        public static unsafe void glColor4ubVertex3fvSUN([In] IntPtr extensionPointer, byte* color, float* position) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColor4ubVertex3fvSUN([In] IntPtr extensionPointer, byte* color, float* position)
        #endregion Overloads for GLvoid glColor4ubVertex3fvSUN(const GLubyte* color, const GLfloat* position)

        #region void glColor3fVertex3fSUN([In] IntPtr extensionPointer, float r, float g, float b, float x, float y, float z)
        // GLvoid glColor3fVertex3fSUN(GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z)
        #if WIN32
        [IlasmAttribute(".maxstack 7\r\nldarg r\r\nldarg g\r\nldarg b\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 7\r\nldarg r\r\nldarg g\r\nldarg b\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32)\r\nret")]
        #endif
        public static void glColor3fVertex3fSUN([In] IntPtr extensionPointer, float r, float g, float b, float x, float y, float z) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColor3fVertex3fSUN([In] IntPtr extensionPointer, float r, float g, float b, float x, float y, float z)

        #region Overloads for GLvoid glColor3fVertex3fvSUN(const GLfloat* color, const GLfloat* position)
        #region void glColor3fVertex3fvSUN([In] IntPtr extensionPointer, ref float color, ref float position)
        // GLvoid glColor3fVertex3fvSUN(const GLfloat* color, const GLfloat* position)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg color\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]float32,[in][out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg color\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]float32,[in][out]float32)\r\nret")]
        #endif
        public static void glColor3fVertex3fvSUN([In] IntPtr extensionPointer, ref float color, ref float position) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColor3fVertex3fvSUN([In] IntPtr extensionPointer, ref float color, ref float position)

        #region void glColor3fVertex3fvSUN([In] IntPtr extensionPointer, float[] color, float[] position)
        // GLvoid glColor3fVertex3fvSUN(const GLfloat* color, const GLfloat* position)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg color\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]float32[],[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg color\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]float32[],[in]float32[])\r\nret")]
        #endif
        public static void glColor3fVertex3fvSUN([In] IntPtr extensionPointer, float[] color, float[] position) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColor3fVertex3fvSUN([In] IntPtr extensionPointer, float[] color, float[] position)

        #region void glColor3fVertex3fvSUN([In] IntPtr extensionPointer, IntPtr color, IntPtr position)
        // GLvoid glColor3fVertex3fvSUN(const GLfloat* color, const GLfloat* position)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg color\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg color\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]native int)\r\nret")]
        #endif
        public static void glColor3fVertex3fvSUN([In] IntPtr extensionPointer, IntPtr color, IntPtr position) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColor3fVertex3fvSUN([In] IntPtr extensionPointer, IntPtr color, IntPtr position)

        #region void glColor3fVertex3fvSUN([In] IntPtr extensionPointer, float* color, float* position)
        // GLvoid glColor3fVertex3fvSUN(const GLfloat* color, const GLfloat* position)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg color\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]float32*,[in]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg color\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]float32*,[in]float32*)\r\nret")]
        #endif
        public static unsafe void glColor3fVertex3fvSUN([In] IntPtr extensionPointer, float* color, float* position) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColor3fVertex3fvSUN([In] IntPtr extensionPointer, float* color, float* position)
        #endregion Overloads for GLvoid glColor3fVertex3fvSUN(const GLfloat* color, const GLfloat* position)

        #region void glNormal3fVertex3fSUN([In] IntPtr extensionPointer, float nx, float ny, float nz, float x, float y, float z)
        // GLvoid glNormal3fVertex3fSUN(GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
        #if WIN32
        [IlasmAttribute(".maxstack 7\r\nldarg nx\r\nldarg ny\r\nldarg nz\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 7\r\nldarg nx\r\nldarg ny\r\nldarg nz\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32)\r\nret")]
        #endif
        public static void glNormal3fVertex3fSUN([In] IntPtr extensionPointer, float nx, float ny, float nz, float x, float y, float z) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glNormal3fVertex3fSUN([In] IntPtr extensionPointer, float nx, float ny, float nz, float x, float y, float z)

        #region Overloads for GLvoid glNormal3fVertex3fvSUN(const GLfloat* normal, const GLfloat* position)
        #region void glNormal3fVertex3fvSUN([In] IntPtr extensionPointer, ref float normal, ref float position)
        // GLvoid glNormal3fVertex3fvSUN(const GLfloat* normal, const GLfloat* position)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg normal\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]float32,[in][out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg normal\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]float32,[in][out]float32)\r\nret")]
        #endif
        public static void glNormal3fVertex3fvSUN([In] IntPtr extensionPointer, ref float normal, ref float position) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glNormal3fVertex3fvSUN([In] IntPtr extensionPointer, ref float normal, ref float position)

        #region void glNormal3fVertex3fvSUN([In] IntPtr extensionPointer, float[] normal, float[] position)
        // GLvoid glNormal3fVertex3fvSUN(const GLfloat* normal, const GLfloat* position)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg normal\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]float32[],[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg normal\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]float32[],[in]float32[])\r\nret")]
        #endif
        public static void glNormal3fVertex3fvSUN([In] IntPtr extensionPointer, float[] normal, float[] position) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glNormal3fVertex3fvSUN([In] IntPtr extensionPointer, float[] normal, float[] position)

        #region void glNormal3fVertex3fvSUN([In] IntPtr extensionPointer, IntPtr normal, IntPtr position)
        // GLvoid glNormal3fVertex3fvSUN(const GLfloat* normal, const GLfloat* position)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg normal\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg normal\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]native int)\r\nret")]
        #endif
        public static void glNormal3fVertex3fvSUN([In] IntPtr extensionPointer, IntPtr normal, IntPtr position) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glNormal3fVertex3fvSUN([In] IntPtr extensionPointer, IntPtr normal, IntPtr position)

        #region void glNormal3fVertex3fvSUN([In] IntPtr extensionPointer, float* normal, float* position)
        // GLvoid glNormal3fVertex3fvSUN(const GLfloat* normal, const GLfloat* position)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg normal\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]float32*,[in]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg normal\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]float32*,[in]float32*)\r\nret")]
        #endif
        public static unsafe void glNormal3fVertex3fvSUN([In] IntPtr extensionPointer, float* normal, float* position) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glNormal3fVertex3fvSUN([In] IntPtr extensionPointer, float* normal, float* position)
        #endregion Overloads for GLvoid glNormal3fVertex3fvSUN(const GLfloat* normal, const GLfloat* position)

        #region void glColor4fNormal3fVertex3fSUN([In] IntPtr extensionPointer, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z)
        // GLvoid glColor4fNormal3fVertex3fSUN(GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
        #if WIN32
        [IlasmAttribute(".maxstack 11\r\nldarg r\r\nldarg g\r\nldarg b\r\nldarg a\r\nldarg nx\r\nldarg ny\r\nldarg nz\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 11\r\nldarg r\r\nldarg g\r\nldarg b\r\nldarg a\r\nldarg nx\r\nldarg ny\r\nldarg nz\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32)\r\nret")]
        #endif
        public static void glColor4fNormal3fVertex3fSUN([In] IntPtr extensionPointer, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColor4fNormal3fVertex3fSUN([In] IntPtr extensionPointer, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z)

        #region Overloads for GLvoid glColor4fNormal3fVertex3fvSUN(const GLfloat* color, const GLfloat* normal, const GLfloat* position)
        #region void glColor4fNormal3fVertex3fvSUN([In] IntPtr extensionPointer, ref float color, ref float normal, ref float position)
        // GLvoid glColor4fNormal3fVertex3fvSUN(const GLfloat* color, const GLfloat* normal, const GLfloat* position)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg color\r\nldarg normal\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]float32,[in][out]float32,[in][out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg color\r\nldarg normal\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]float32,[in][out]float32,[in][out]float32)\r\nret")]
        #endif
        public static void glColor4fNormal3fVertex3fvSUN([In] IntPtr extensionPointer, ref float color, ref float normal, ref float position) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColor4fNormal3fVertex3fvSUN([In] IntPtr extensionPointer, ref float color, ref float normal, ref float position)

        #region void glColor4fNormal3fVertex3fvSUN([In] IntPtr extensionPointer, float[] color, float[] normal, float[] position)
        // GLvoid glColor4fNormal3fVertex3fvSUN(const GLfloat* color, const GLfloat* normal, const GLfloat* position)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg color\r\nldarg normal\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]float32[],[in]float32[],[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg color\r\nldarg normal\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]float32[],[in]float32[],[in]float32[])\r\nret")]
        #endif
        public static void glColor4fNormal3fVertex3fvSUN([In] IntPtr extensionPointer, float[] color, float[] normal, float[] position) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColor4fNormal3fVertex3fvSUN([In] IntPtr extensionPointer, float[] color, float[] normal, float[] position)

        #region void glColor4fNormal3fVertex3fvSUN([In] IntPtr extensionPointer, IntPtr color, IntPtr normal, IntPtr position)
        // GLvoid glColor4fNormal3fVertex3fvSUN(const GLfloat* color, const GLfloat* normal, const GLfloat* position)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg color\r\nldarg normal\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]native int,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg color\r\nldarg normal\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]native int,[in]native int)\r\nret")]
        #endif
        public static void glColor4fNormal3fVertex3fvSUN([In] IntPtr extensionPointer, IntPtr color, IntPtr normal, IntPtr position) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColor4fNormal3fVertex3fvSUN([In] IntPtr extensionPointer, IntPtr color, IntPtr normal, IntPtr position)

        #region void glColor4fNormal3fVertex3fvSUN([In] IntPtr extensionPointer, float* color, float* normal, float* position)
        // GLvoid glColor4fNormal3fVertex3fvSUN(const GLfloat* color, const GLfloat* normal, const GLfloat* position)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg color\r\nldarg normal\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]float32*,[in]float32*,[in]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg color\r\nldarg normal\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]float32*,[in]float32*,[in]float32*)\r\nret")]
        #endif
        public static unsafe void glColor4fNormal3fVertex3fvSUN([In] IntPtr extensionPointer, float* color, float* normal, float* position) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glColor4fNormal3fVertex3fvSUN([In] IntPtr extensionPointer, float* color, float* normal, float* position)
        #endregion Overloads for GLvoid glColor4fNormal3fVertex3fvSUN(const GLfloat* color, const GLfloat* normal, const GLfloat* position)

        #region void glTexCoord2fVertex3fSUN([In] IntPtr extensionPointer, float s, float t, float x, float y, float z)
        // GLvoid glTexCoord2fVertex3fSUN(GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg s\r\nldarg t\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]float32,[in]float32,[in]float32,[in]float32,[in]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg s\r\nldarg t\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]float32,[in]float32,[in]float32,[in]float32,[in]float32)\r\nret")]
        #endif
        public static void glTexCoord2fVertex3fSUN([In] IntPtr extensionPointer, float s, float t, float x, float y, float z) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoord2fVertex3fSUN([In] IntPtr extensionPointer, float s, float t, float x, float y, float z)

        #region Overloads for GLvoid glTexCoord2fVertex3fvSUN(const GLfloat* texCoords, const GLfloat* position)
        #region void glTexCoord2fVertex3fvSUN([In] IntPtr extensionPointer, ref float texCoords, ref float position)
        // GLvoid glTexCoord2fVertex3fvSUN(const GLfloat* texCoords, const GLfloat* position)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg texCoords\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]float32,[in][out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg texCoords\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]float32,[in][out]float32)\r\nret")]
        #endif
        public static void glTexCoord2fVertex3fvSUN([In] IntPtr extensionPointer, ref float texCoords, ref float position) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoord2fVertex3fvSUN([In] IntPtr extensionPointer, ref float texCoords, ref float position)

        #region void glTexCoord2fVertex3fvSUN([In] IntPtr extensionPointer, float[] texCoords, float[] position)
        // GLvoid glTexCoord2fVertex3fvSUN(const GLfloat* texCoords, const GLfloat* position)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg texCoords\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]float32[],[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg texCoords\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]float32[],[in]float32[])\r\nret")]
        #endif
        public static void glTexCoord2fVertex3fvSUN([In] IntPtr extensionPointer, float[] texCoords, float[] position) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoord2fVertex3fvSUN([In] IntPtr extensionPointer, float[] texCoords, float[] position)

        #region void glTexCoord2fVertex3fvSUN([In] IntPtr extensionPointer, IntPtr texCoords, IntPtr position)
        // GLvoid glTexCoord2fVertex3fvSUN(const GLfloat* texCoords, const GLfloat* position)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg texCoords\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg texCoords\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]native int)\r\nret")]
        #endif
        public static void glTexCoord2fVertex3fvSUN([In] IntPtr extensionPointer, IntPtr texCoords, IntPtr position) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoord2fVertex3fvSUN([In] IntPtr extensionPointer, IntPtr texCoords, IntPtr position)

        #region void glTexCoord2fVertex3fvSUN([In] IntPtr extensionPointer, float* texCoords, float* position)
        // GLvoid glTexCoord2fVertex3fvSUN(const GLfloat* texCoords, const GLfloat* position)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg texCoords\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]float32*,[in]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg texCoords\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]float32*,[in]float32*)\r\nret")]
        #endif
        public static unsafe void glTexCoord2fVertex3fvSUN([In] IntPtr extensionPointer, float* texCoords, float* position) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoord2fVertex3fvSUN([In] IntPtr extensionPointer, float* texCoords, float* position)
        #endregion Overloads for GLvoid glTexCoord2fVertex3fvSUN(const GLfloat* texCoords, const GLfloat* position)

        #region void glTexCoord4fVertex4fSUN([In] IntPtr extensionPointer, float s, float t, float p, float q, float x, float y, float z, float w)
        // GLvoid glTexCoord4fVertex4fSUN(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
        #if WIN32
        [IlasmAttribute(".maxstack 9\r\nldarg s\r\nldarg t\r\nldarg p\r\nldarg q\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg w\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 9\r\nldarg s\r\nldarg t\r\nldarg p\r\nldarg q\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg w\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32)\r\nret")]
        #endif
        public static void glTexCoord4fVertex4fSUN([In] IntPtr extensionPointer, float s, float t, float p, float q, float x, float y, float z, float w) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoord4fVertex4fSUN([In] IntPtr extensionPointer, float s, float t, float p, float q, float x, float y, float z, float w)

        #region Overloads for GLvoid glTexCoord4fVertex4fvSUN(const GLfloat* texCoords, const GLfloat* position)
        #region void glTexCoord4fVertex4fvSUN([In] IntPtr extensionPointer, ref float texCoords, ref float position)
        // GLvoid glTexCoord4fVertex4fvSUN(const GLfloat* texCoords, const GLfloat* position)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg texCoords\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]float32,[in][out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg texCoords\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]float32,[in][out]float32)\r\nret")]
        #endif
        public static void glTexCoord4fVertex4fvSUN([In] IntPtr extensionPointer, ref float texCoords, ref float position) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoord4fVertex4fvSUN([In] IntPtr extensionPointer, ref float texCoords, ref float position)

        #region void glTexCoord4fVertex4fvSUN([In] IntPtr extensionPointer, float[] texCoords, float[] position)
        // GLvoid glTexCoord4fVertex4fvSUN(const GLfloat* texCoords, const GLfloat* position)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg texCoords\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]float32[],[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg texCoords\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]float32[],[in]float32[])\r\nret")]
        #endif
        public static void glTexCoord4fVertex4fvSUN([In] IntPtr extensionPointer, float[] texCoords, float[] position) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoord4fVertex4fvSUN([In] IntPtr extensionPointer, float[] texCoords, float[] position)

        #region void glTexCoord4fVertex4fvSUN([In] IntPtr extensionPointer, IntPtr texCoords, IntPtr position)
        // GLvoid glTexCoord4fVertex4fvSUN(const GLfloat* texCoords, const GLfloat* position)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg texCoords\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg texCoords\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]native int)\r\nret")]
        #endif
        public static void glTexCoord4fVertex4fvSUN([In] IntPtr extensionPointer, IntPtr texCoords, IntPtr position) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoord4fVertex4fvSUN([In] IntPtr extensionPointer, IntPtr texCoords, IntPtr position)

        #region void glTexCoord4fVertex4fvSUN([In] IntPtr extensionPointer, float* texCoords, float* position)
        // GLvoid glTexCoord4fVertex4fvSUN(const GLfloat* texCoords, const GLfloat* position)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg texCoords\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]float32*,[in]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg texCoords\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]float32*,[in]float32*)\r\nret")]
        #endif
        public static unsafe void glTexCoord4fVertex4fvSUN([In] IntPtr extensionPointer, float* texCoords, float* position) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoord4fVertex4fvSUN([In] IntPtr extensionPointer, float* texCoords, float* position)
        #endregion Overloads for GLvoid glTexCoord4fVertex4fvSUN(const GLfloat* texCoords, const GLfloat* position)

        #region void glTexCoord2fColor4ubVertex3fSUN([In] IntPtr extensionPointer, float s, float t, byte r, byte g, byte b, byte a, float x, float y, float z)
        // GLvoid glTexCoord2fColor4ubVertex3fSUN(GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z)
        #if WIN32
        [IlasmAttribute(".maxstack 10\r\nldarg s\r\nldarg t\r\nldarg r\r\nldarg g\r\nldarg b\r\nldarg a\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]float32,[in]float32,[in]unsigned int8,[in]unsigned int8,[in]unsigned int8,[in]unsigned int8,[in]float32,[in]float32,[in]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 10\r\nldarg s\r\nldarg t\r\nldarg r\r\nldarg g\r\nldarg b\r\nldarg a\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]float32,[in]float32,[in]unsigned int8,[in]unsigned int8,[in]unsigned int8,[in]unsigned int8,[in]float32,[in]float32,[in]float32)\r\nret")]
        #endif
        public static void glTexCoord2fColor4ubVertex3fSUN([In] IntPtr extensionPointer, float s, float t, byte r, byte g, byte b, byte a, float x, float y, float z) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoord2fColor4ubVertex3fSUN([In] IntPtr extensionPointer, float s, float t, byte r, byte g, byte b, byte a, float x, float y, float z)

        #region Overloads for GLvoid glTexCoord2fColor4ubVertex3fvSUN(const GLfloat* texCoords, const GLubyte* color, const GLfloat* position)
        #region void glTexCoord2fColor4ubVertex3fvSUN([In] IntPtr extensionPointer, ref float texCoords, ref byte color, ref float position)
        // GLvoid glTexCoord2fColor4ubVertex3fvSUN(const GLfloat* texCoords, const GLubyte* color, const GLfloat* position)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg texCoords\r\nldarg color\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]float32,[in][out]unsigned int8,[in][out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg texCoords\r\nldarg color\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]float32,[in][out]unsigned int8,[in][out]float32)\r\nret")]
        #endif
        public static void glTexCoord2fColor4ubVertex3fvSUN([In] IntPtr extensionPointer, ref float texCoords, ref byte color, ref float position) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoord2fColor4ubVertex3fvSUN([In] IntPtr extensionPointer, ref float texCoords, ref byte color, ref float position)

        #region void glTexCoord2fColor4ubVertex3fvSUN([In] IntPtr extensionPointer, float[] texCoords, byte[] color, float[] position)
        // GLvoid glTexCoord2fColor4ubVertex3fvSUN(const GLfloat* texCoords, const GLubyte* color, const GLfloat* position)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg texCoords\r\nldarg color\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]float32[],[in]unsigned int8[],[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg texCoords\r\nldarg color\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]float32[],[in]unsigned int8[],[in]float32[])\r\nret")]
        #endif
        public static void glTexCoord2fColor4ubVertex3fvSUN([In] IntPtr extensionPointer, float[] texCoords, byte[] color, float[] position) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoord2fColor4ubVertex3fvSUN([In] IntPtr extensionPointer, float[] texCoords, byte[] color, float[] position)

        #region void glTexCoord2fColor4ubVertex3fvSUN([In] IntPtr extensionPointer, IntPtr texCoords, IntPtr color, IntPtr position)
        // GLvoid glTexCoord2fColor4ubVertex3fvSUN(const GLfloat* texCoords, const GLubyte* color, const GLfloat* position)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg texCoords\r\nldarg color\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]native int,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg texCoords\r\nldarg color\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]native int,[in]native int)\r\nret")]
        #endif
        public static void glTexCoord2fColor4ubVertex3fvSUN([In] IntPtr extensionPointer, IntPtr texCoords, IntPtr color, IntPtr position) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoord2fColor4ubVertex3fvSUN([In] IntPtr extensionPointer, IntPtr texCoords, IntPtr color, IntPtr position)

        #region void glTexCoord2fColor4ubVertex3fvSUN([In] IntPtr extensionPointer, float* texCoords, byte* color, float* position)
        // GLvoid glTexCoord2fColor4ubVertex3fvSUN(const GLfloat* texCoords, const GLubyte* color, const GLfloat* position)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg texCoords\r\nldarg color\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]float32*,[in]unsigned int8*,[in]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg texCoords\r\nldarg color\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]float32*,[in]unsigned int8*,[in]float32*)\r\nret")]
        #endif
        public static unsafe void glTexCoord2fColor4ubVertex3fvSUN([In] IntPtr extensionPointer, float* texCoords, byte* color, float* position) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoord2fColor4ubVertex3fvSUN([In] IntPtr extensionPointer, float* texCoords, byte* color, float* position)
        #endregion Overloads for GLvoid glTexCoord2fColor4ubVertex3fvSUN(const GLfloat* texCoords, const GLubyte* color, const GLfloat* position)

        #region void glTexCoord2fColor3fVertex3fSUN([In] IntPtr extensionPointer, float s, float t, float r, float g, float b, float x, float y, float z)
        // GLvoid glTexCoord2fColor3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z)
        #if WIN32
        [IlasmAttribute(".maxstack 9\r\nldarg s\r\nldarg t\r\nldarg r\r\nldarg g\r\nldarg b\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 9\r\nldarg s\r\nldarg t\r\nldarg r\r\nldarg g\r\nldarg b\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32)\r\nret")]
        #endif
        public static void glTexCoord2fColor3fVertex3fSUN([In] IntPtr extensionPointer, float s, float t, float r, float g, float b, float x, float y, float z) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoord2fColor3fVertex3fSUN([In] IntPtr extensionPointer, float s, float t, float r, float g, float b, float x, float y, float z)

        #region Overloads for GLvoid glTexCoord2fColor3fVertex3fvSUN(const GLfloat* texCoords, const GLfloat* color, const GLfloat* position)
        #region void glTexCoord2fColor3fVertex3fvSUN([In] IntPtr extensionPointer, ref float texCoords, ref float color, ref float position)
        // GLvoid glTexCoord2fColor3fVertex3fvSUN(const GLfloat* texCoords, const GLfloat* color, const GLfloat* position)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg texCoords\r\nldarg color\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]float32,[in][out]float32,[in][out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg texCoords\r\nldarg color\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]float32,[in][out]float32,[in][out]float32)\r\nret")]
        #endif
        public static void glTexCoord2fColor3fVertex3fvSUN([In] IntPtr extensionPointer, ref float texCoords, ref float color, ref float position) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoord2fColor3fVertex3fvSUN([In] IntPtr extensionPointer, ref float texCoords, ref float color, ref float position)

        #region void glTexCoord2fColor3fVertex3fvSUN([In] IntPtr extensionPointer, float[] texCoords, float[] color, float[] position)
        // GLvoid glTexCoord2fColor3fVertex3fvSUN(const GLfloat* texCoords, const GLfloat* color, const GLfloat* position)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg texCoords\r\nldarg color\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]float32[],[in]float32[],[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg texCoords\r\nldarg color\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]float32[],[in]float32[],[in]float32[])\r\nret")]
        #endif
        public static void glTexCoord2fColor3fVertex3fvSUN([In] IntPtr extensionPointer, float[] texCoords, float[] color, float[] position) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoord2fColor3fVertex3fvSUN([In] IntPtr extensionPointer, float[] texCoords, float[] color, float[] position)

        #region void glTexCoord2fColor3fVertex3fvSUN([In] IntPtr extensionPointer, IntPtr texCoords, IntPtr color, IntPtr position)
        // GLvoid glTexCoord2fColor3fVertex3fvSUN(const GLfloat* texCoords, const GLfloat* color, const GLfloat* position)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg texCoords\r\nldarg color\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]native int,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg texCoords\r\nldarg color\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]native int,[in]native int)\r\nret")]
        #endif
        public static void glTexCoord2fColor3fVertex3fvSUN([In] IntPtr extensionPointer, IntPtr texCoords, IntPtr color, IntPtr position) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoord2fColor3fVertex3fvSUN([In] IntPtr extensionPointer, IntPtr texCoords, IntPtr color, IntPtr position)

        #region void glTexCoord2fColor3fVertex3fvSUN([In] IntPtr extensionPointer, float* texCoords, float* color, float* position)
        // GLvoid glTexCoord2fColor3fVertex3fvSUN(const GLfloat* texCoords, const GLfloat* color, const GLfloat* position)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg texCoords\r\nldarg color\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]float32*,[in]float32*,[in]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg texCoords\r\nldarg color\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]float32*,[in]float32*,[in]float32*)\r\nret")]
        #endif
        public static unsafe void glTexCoord2fColor3fVertex3fvSUN([In] IntPtr extensionPointer, float* texCoords, float* color, float* position) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoord2fColor3fVertex3fvSUN([In] IntPtr extensionPointer, float* texCoords, float* color, float* position)
        #endregion Overloads for GLvoid glTexCoord2fColor3fVertex3fvSUN(const GLfloat* texCoords, const GLfloat* color, const GLfloat* position)

        #region void glTexCoord2fNormal3fVertex3fSUN([In] IntPtr extensionPointer, float s, float t, float nx, float ny, float nz, float x, float y, float z)
        // GLvoid glTexCoord2fNormal3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
        #if WIN32
        [IlasmAttribute(".maxstack 9\r\nldarg s\r\nldarg t\r\nldarg nx\r\nldarg ny\r\nldarg nz\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 9\r\nldarg s\r\nldarg t\r\nldarg nx\r\nldarg ny\r\nldarg nz\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32)\r\nret")]
        #endif
        public static void glTexCoord2fNormal3fVertex3fSUN([In] IntPtr extensionPointer, float s, float t, float nx, float ny, float nz, float x, float y, float z) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoord2fNormal3fVertex3fSUN([In] IntPtr extensionPointer, float s, float t, float nx, float ny, float nz, float x, float y, float z)

        #region Overloads for GLvoid glTexCoord2fNormal3fVertex3fvSUN(const GLfloat* texCoords, const GLfloat* normal, const GLfloat* position)
        #region void glTexCoord2fNormal3fVertex3fvSUN([In] IntPtr extensionPointer, ref float texCoords, ref float normal, ref float position)
        // GLvoid glTexCoord2fNormal3fVertex3fvSUN(const GLfloat* texCoords, const GLfloat* normal, const GLfloat* position)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg texCoords\r\nldarg normal\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]float32,[in][out]float32,[in][out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg texCoords\r\nldarg normal\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]float32,[in][out]float32,[in][out]float32)\r\nret")]
        #endif
        public static void glTexCoord2fNormal3fVertex3fvSUN([In] IntPtr extensionPointer, ref float texCoords, ref float normal, ref float position) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoord2fNormal3fVertex3fvSUN([In] IntPtr extensionPointer, ref float texCoords, ref float normal, ref float position)

        #region void glTexCoord2fNormal3fVertex3fvSUN([In] IntPtr extensionPointer, float[] texCoords, float[] normal, float[] position)
        // GLvoid glTexCoord2fNormal3fVertex3fvSUN(const GLfloat* texCoords, const GLfloat* normal, const GLfloat* position)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg texCoords\r\nldarg normal\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]float32[],[in]float32[],[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg texCoords\r\nldarg normal\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]float32[],[in]float32[],[in]float32[])\r\nret")]
        #endif
        public static void glTexCoord2fNormal3fVertex3fvSUN([In] IntPtr extensionPointer, float[] texCoords, float[] normal, float[] position) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoord2fNormal3fVertex3fvSUN([In] IntPtr extensionPointer, float[] texCoords, float[] normal, float[] position)

        #region void glTexCoord2fNormal3fVertex3fvSUN([In] IntPtr extensionPointer, IntPtr texCoords, IntPtr normal, IntPtr position)
        // GLvoid glTexCoord2fNormal3fVertex3fvSUN(const GLfloat* texCoords, const GLfloat* normal, const GLfloat* position)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg texCoords\r\nldarg normal\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]native int,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg texCoords\r\nldarg normal\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]native int,[in]native int)\r\nret")]
        #endif
        public static void glTexCoord2fNormal3fVertex3fvSUN([In] IntPtr extensionPointer, IntPtr texCoords, IntPtr normal, IntPtr position) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoord2fNormal3fVertex3fvSUN([In] IntPtr extensionPointer, IntPtr texCoords, IntPtr normal, IntPtr position)

        #region void glTexCoord2fNormal3fVertex3fvSUN([In] IntPtr extensionPointer, float* texCoords, float* normal, float* position)
        // GLvoid glTexCoord2fNormal3fVertex3fvSUN(const GLfloat* texCoords, const GLfloat* normal, const GLfloat* position)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg texCoords\r\nldarg normal\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]float32*,[in]float32*,[in]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg texCoords\r\nldarg normal\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]float32*,[in]float32*,[in]float32*)\r\nret")]
        #endif
        public static unsafe void glTexCoord2fNormal3fVertex3fvSUN([In] IntPtr extensionPointer, float* texCoords, float* normal, float* position) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoord2fNormal3fVertex3fvSUN([In] IntPtr extensionPointer, float* texCoords, float* normal, float* position)
        #endregion Overloads for GLvoid glTexCoord2fNormal3fVertex3fvSUN(const GLfloat* texCoords, const GLfloat* normal, const GLfloat* position)

        #region void glTexCoord2fColor4fNormal3fVertex3fSUN([In] IntPtr extensionPointer, float s, float t, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z)
        // GLvoid glTexCoord2fColor4fNormal3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
        #if WIN32
        [IlasmAttribute(".maxstack 13\r\nldarg s\r\nldarg t\r\nldarg r\r\nldarg g\r\nldarg b\r\nldarg a\r\nldarg nx\r\nldarg ny\r\nldarg nz\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 13\r\nldarg s\r\nldarg t\r\nldarg r\r\nldarg g\r\nldarg b\r\nldarg a\r\nldarg nx\r\nldarg ny\r\nldarg nz\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32)\r\nret")]
        #endif
        public static void glTexCoord2fColor4fNormal3fVertex3fSUN([In] IntPtr extensionPointer, float s, float t, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoord2fColor4fNormal3fVertex3fSUN([In] IntPtr extensionPointer, float s, float t, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z)

        #region Overloads for GLvoid glTexCoord2fColor4fNormal3fVertex3fvSUN(const GLfloat* texCooords, const GLfloat* color, const GLfloat* normal, const GLfloat* position)
        #region void glTexCoord2fColor4fNormal3fVertex3fvSUN([In] IntPtr extensionPointer, ref float texCooords, ref float color, ref float normal, ref float position)
        // GLvoid glTexCoord2fColor4fNormal3fVertex3fvSUN(const GLfloat* texCooords, const GLfloat* color, const GLfloat* normal, const GLfloat* position)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg texCooords\r\nldarg color\r\nldarg normal\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]float32,[in][out]float32,[in][out]float32,[in][out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg texCooords\r\nldarg color\r\nldarg normal\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]float32,[in][out]float32,[in][out]float32,[in][out]float32)\r\nret")]
        #endif
        public static void glTexCoord2fColor4fNormal3fVertex3fvSUN([In] IntPtr extensionPointer, ref float texCooords, ref float color, ref float normal, ref float position) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoord2fColor4fNormal3fVertex3fvSUN([In] IntPtr extensionPointer, ref float texCooords, ref float color, ref float normal, ref float position)

        #region void glTexCoord2fColor4fNormal3fVertex3fvSUN([In] IntPtr extensionPointer, float[] texCooords, float[] color, float[] normal, float[] position)
        // GLvoid glTexCoord2fColor4fNormal3fVertex3fvSUN(const GLfloat* texCooords, const GLfloat* color, const GLfloat* normal, const GLfloat* position)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg texCooords\r\nldarg color\r\nldarg normal\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]float32[],[in]float32[],[in]float32[],[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg texCooords\r\nldarg color\r\nldarg normal\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]float32[],[in]float32[],[in]float32[],[in]float32[])\r\nret")]
        #endif
        public static void glTexCoord2fColor4fNormal3fVertex3fvSUN([In] IntPtr extensionPointer, float[] texCooords, float[] color, float[] normal, float[] position) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoord2fColor4fNormal3fVertex3fvSUN([In] IntPtr extensionPointer, float[] texCooords, float[] color, float[] normal, float[] position)

        #region void glTexCoord2fColor4fNormal3fVertex3fvSUN([In] IntPtr extensionPointer, IntPtr texCooords, IntPtr color, IntPtr normal, IntPtr position)
        // GLvoid glTexCoord2fColor4fNormal3fVertex3fvSUN(const GLfloat* texCooords, const GLfloat* color, const GLfloat* normal, const GLfloat* position)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg texCooords\r\nldarg color\r\nldarg normal\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]native int,[in]native int,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg texCooords\r\nldarg color\r\nldarg normal\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]native int,[in]native int,[in]native int)\r\nret")]
        #endif
        public static void glTexCoord2fColor4fNormal3fVertex3fvSUN([In] IntPtr extensionPointer, IntPtr texCooords, IntPtr color, IntPtr normal, IntPtr position) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoord2fColor4fNormal3fVertex3fvSUN([In] IntPtr extensionPointer, IntPtr texCooords, IntPtr color, IntPtr normal, IntPtr position)

        #region void glTexCoord2fColor4fNormal3fVertex3fvSUN([In] IntPtr extensionPointer, float* texCooords, float* color, float* normal, float* position)
        // GLvoid glTexCoord2fColor4fNormal3fVertex3fvSUN(const GLfloat* texCooords, const GLfloat* color, const GLfloat* normal, const GLfloat* position)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg texCooords\r\nldarg color\r\nldarg normal\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]float32*,[in]float32*,[in]float32*,[in]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg texCooords\r\nldarg color\r\nldarg normal\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]float32*,[in]float32*,[in]float32*,[in]float32*)\r\nret")]
        #endif
        public static unsafe void glTexCoord2fColor4fNormal3fVertex3fvSUN([In] IntPtr extensionPointer, float* texCooords, float* color, float* normal, float* position) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoord2fColor4fNormal3fVertex3fvSUN([In] IntPtr extensionPointer, float* texCooords, float* color, float* normal, float* position)
        #endregion Overloads for GLvoid glTexCoord2fColor4fNormal3fVertex3fvSUN(const GLfloat* texCooords, const GLfloat* color, const GLfloat* normal, const GLfloat* position)

        #region void glTexCoord4fColor4fNormal3fVertex4fSUN([In] IntPtr extensionPointer, float s, float t, float p, float q, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z, float w)
        // GLvoid glTexCoord4fColor4fNormal3fVertex4fSUN(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
        #if WIN32
        [IlasmAttribute(".maxstack 16\r\nldarg s\r\nldarg t\r\nldarg p\r\nldarg q\r\nldarg r\r\nldarg g\r\nldarg b\r\nldarg a\r\nldarg nx\r\nldarg ny\r\nldarg nz\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg w\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 16\r\nldarg s\r\nldarg t\r\nldarg p\r\nldarg q\r\nldarg r\r\nldarg g\r\nldarg b\r\nldarg a\r\nldarg nx\r\nldarg ny\r\nldarg nz\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg w\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32)\r\nret")]
        #endif
        public static void glTexCoord4fColor4fNormal3fVertex4fSUN([In] IntPtr extensionPointer, float s, float t, float p, float q, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z, float w) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoord4fColor4fNormal3fVertex4fSUN([In] IntPtr extensionPointer, float s, float t, float p, float q, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z, float w)

        #region Overloads for GLvoid glTexCoord4fColor4fNormal3fVertex4fvSUN(const GLfloat* texCoords, const GLfloat* color, const GLfloat* normal, const GLfloat* position)
        #region void glTexCoord4fColor4fNormal3fVertex4fvSUN([In] IntPtr extensionPointer, ref float texCoords, ref float color, ref float normal, ref float position)
        // GLvoid glTexCoord4fColor4fNormal3fVertex4fvSUN(const GLfloat* texCoords, const GLfloat* color, const GLfloat* normal, const GLfloat* position)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg texCoords\r\nldarg color\r\nldarg normal\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]float32,[in][out]float32,[in][out]float32,[in][out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg texCoords\r\nldarg color\r\nldarg normal\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]float32,[in][out]float32,[in][out]float32,[in][out]float32)\r\nret")]
        #endif
        public static void glTexCoord4fColor4fNormal3fVertex4fvSUN([In] IntPtr extensionPointer, ref float texCoords, ref float color, ref float normal, ref float position) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoord4fColor4fNormal3fVertex4fvSUN([In] IntPtr extensionPointer, ref float texCoords, ref float color, ref float normal, ref float position)

        #region void glTexCoord4fColor4fNormal3fVertex4fvSUN([In] IntPtr extensionPointer, float[] texCoords, float[] color, float[] normal, float[] position)
        // GLvoid glTexCoord4fColor4fNormal3fVertex4fvSUN(const GLfloat* texCoords, const GLfloat* color, const GLfloat* normal, const GLfloat* position)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg texCoords\r\nldarg color\r\nldarg normal\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]float32[],[in]float32[],[in]float32[],[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg texCoords\r\nldarg color\r\nldarg normal\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]float32[],[in]float32[],[in]float32[],[in]float32[])\r\nret")]
        #endif
        public static void glTexCoord4fColor4fNormal3fVertex4fvSUN([In] IntPtr extensionPointer, float[] texCoords, float[] color, float[] normal, float[] position) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoord4fColor4fNormal3fVertex4fvSUN([In] IntPtr extensionPointer, float[] texCoords, float[] color, float[] normal, float[] position)

        #region void glTexCoord4fColor4fNormal3fVertex4fvSUN([In] IntPtr extensionPointer, IntPtr texCoords, IntPtr color, IntPtr normal, IntPtr position)
        // GLvoid glTexCoord4fColor4fNormal3fVertex4fvSUN(const GLfloat* texCoords, const GLfloat* color, const GLfloat* normal, const GLfloat* position)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg texCoords\r\nldarg color\r\nldarg normal\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]native int,[in]native int,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg texCoords\r\nldarg color\r\nldarg normal\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]native int,[in]native int,[in]native int)\r\nret")]
        #endif
        public static void glTexCoord4fColor4fNormal3fVertex4fvSUN([In] IntPtr extensionPointer, IntPtr texCoords, IntPtr color, IntPtr normal, IntPtr position) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoord4fColor4fNormal3fVertex4fvSUN([In] IntPtr extensionPointer, IntPtr texCoords, IntPtr color, IntPtr normal, IntPtr position)

        #region void glTexCoord4fColor4fNormal3fVertex4fvSUN([In] IntPtr extensionPointer, float* texCoords, float* color, float* normal, float* position)
        // GLvoid glTexCoord4fColor4fNormal3fVertex4fvSUN(const GLfloat* texCoords, const GLfloat* color, const GLfloat* normal, const GLfloat* position)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg texCoords\r\nldarg color\r\nldarg normal\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]float32*,[in]float32*,[in]float32*,[in]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg texCoords\r\nldarg color\r\nldarg normal\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]float32*,[in]float32*,[in]float32*,[in]float32*)\r\nret")]
        #endif
        public static unsafe void glTexCoord4fColor4fNormal3fVertex4fvSUN([In] IntPtr extensionPointer, float* texCoords, float* color, float* normal, float* position) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glTexCoord4fColor4fNormal3fVertex4fvSUN([In] IntPtr extensionPointer, float* texCoords, float* color, float* normal, float* position)
        #endregion Overloads for GLvoid glTexCoord4fColor4fNormal3fVertex4fvSUN(const GLfloat* texCoords, const GLfloat* color, const GLfloat* normal, const GLfloat* position)

        #region Overloads for GLvoid glReplacementCodeuiVertex3fSUN(GLuint rc, GLfloat x, GLfloat y, GLfloat z)
        #region void glReplacementCodeuiVertex3fSUN([In] IntPtr extensionPointer, int rc, float x, float y, float z)
        // GLvoid glReplacementCodeuiVertex3fSUN(GLuint rc, GLfloat x, GLfloat y, GLfloat z)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg rc\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float32,[in]float32,[in]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg rc\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float32,[in]float32,[in]float32)\r\nret")]
        #endif
        public static void glReplacementCodeuiVertex3fSUN([In] IntPtr extensionPointer, int rc, float x, float y, float z) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glReplacementCodeuiVertex3fSUN([In] IntPtr extensionPointer, int rc, float x, float y, float z)

        #region void glReplacementCodeuiVertex3fSUN([In] IntPtr extensionPointer, uint rc, float x, float y, float z)
        // GLvoid glReplacementCodeuiVertex3fSUN(GLuint rc, GLfloat x, GLfloat y, GLfloat z)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg rc\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int32,[in]float32,[in]float32,[in]float32)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg rc\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int32,[in]float32,[in]float32,[in]float32)\r\nret")]
        #endif
        public static void glReplacementCodeuiVertex3fSUN([In] IntPtr extensionPointer, uint rc, float x, float y, float z) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glReplacementCodeuiVertex3fSUN([In] IntPtr extensionPointer, uint rc, float x, float y, float z)
        #endregion Overloads for GLvoid glReplacementCodeuiVertex3fSUN(GLuint rc, GLfloat x, GLfloat y, GLfloat z)

        #region Overloads for GLvoid glReplacementCodeuiVertex3fvSUN(const GLuint* rc, const GLfloat* v)
        #region void glReplacementCodeuiVertex3fvSUN([In] IntPtr extensionPointer, int[] rc, float[] v)
        // GLvoid glReplacementCodeuiVertex3fvSUN(const GLuint* rc, const GLfloat* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg rc\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32[],[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg rc\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32[],[in]float32[])\r\nret")]
        #endif
        public static void glReplacementCodeuiVertex3fvSUN([In] IntPtr extensionPointer, int[] rc, float[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glReplacementCodeuiVertex3fvSUN([In] IntPtr extensionPointer, int[] rc, float[] v)

        #region void glReplacementCodeuiVertex3fvSUN([In] IntPtr extensionPointer, ref int rc, ref float v)
        // GLvoid glReplacementCodeuiVertex3fvSUN(const GLuint* rc, const GLfloat* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg rc\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]int32,[in][out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg rc\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]int32,[in][out]float32)\r\nret")]
        #endif
        public static void glReplacementCodeuiVertex3fvSUN([In] IntPtr extensionPointer, ref int rc, ref float v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glReplacementCodeuiVertex3fvSUN([In] IntPtr extensionPointer, ref int rc, ref float v)

        #region void glReplacementCodeuiVertex3fvSUN([In] IntPtr extensionPointer, IntPtr rc, IntPtr v)
        // GLvoid glReplacementCodeuiVertex3fvSUN(const GLuint* rc, const GLfloat* v)
        #if WIN32
        [IlasmAttribute(".maxstack 3\r\nldarg rc\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 3\r\nldarg rc\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]native int)\r\nret")]
        #endif
        public static void glReplacementCodeuiVertex3fvSUN([In] IntPtr extensionPointer, IntPtr rc, IntPtr v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glReplacementCodeuiVertex3fvSUN([In] IntPtr extensionPointer, IntPtr rc, IntPtr v)

        #region void glReplacementCodeuiVertex3fvSUN([In] IntPtr extensionPointer, ref uint rc, ref float v)
        // GLvoid glReplacementCodeuiVertex3fvSUN(const GLuint* rc, const GLfloat* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg rc\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]unsigned int32,[in][out]float32)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg rc\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]unsigned int32,[in][out]float32)\r\nret")]
        #endif
        public static void glReplacementCodeuiVertex3fvSUN([In] IntPtr extensionPointer, ref uint rc, ref float v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glReplacementCodeuiVertex3fvSUN([In] IntPtr extensionPointer, ref uint rc, ref float v)

        #region void glReplacementCodeuiVertex3fvSUN([In] IntPtr extensionPointer, uint[] rc, float[] v)
        // GLvoid glReplacementCodeuiVertex3fvSUN(const GLuint* rc, const GLfloat* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg rc\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int32[],[in]float32[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg rc\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int32[],[in]float32[])\r\nret")]
        #endif
        public static void glReplacementCodeuiVertex3fvSUN([In] IntPtr extensionPointer, uint[] rc, float[] v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glReplacementCodeuiVertex3fvSUN([In] IntPtr extensionPointer, uint[] rc, float[] v)

        #region void glReplacementCodeuiVertex3fvSUN([In] IntPtr extensionPointer, uint* rc, float* v)
        // GLvoid glReplacementCodeuiVertex3fvSUN(const GLuint* rc, const GLfloat* v)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg rc\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int32*,[in]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 3\r\nldarg rc\r\nldarg v\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int32*,[in]float32*)\r\nret")]
        #endif
        public static unsafe void glReplacementCodeuiVertex3fvSUN([In] IntPtr extensionPointer, uint* rc, float* v) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glReplacementCodeuiVertex3fvSUN([In] IntPtr extensionPointer, uint* rc, float* v)
        #endregion Overloads for GLvoid glReplacementCodeuiVertex3fvSUN(const GLuint* rc, const GLfloat* v)

        #region Overloads for GLvoid glReplacementCodeuiColor4ubVertex3fSUN(GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z)
        #region void glReplacementCodeuiColor4ubVertex3fSUN([In] IntPtr extensionPointer, int rc, byte r, byte g, byte b, byte a, float x, float y, float z)
        // GLvoid glReplacementCodeuiColor4ubVertex3fSUN(GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z)
        #if WIN32
        [IlasmAttribute(".maxstack 9\r\nldarg rc\r\nldarg r\r\nldarg g\r\nldarg b\r\nldarg a\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]unsigned int8,[in]unsigned int8,[in]unsigned int8,[in]unsigned int8,[in]float32,[in]float32,[in]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 9\r\nldarg rc\r\nldarg r\r\nldarg g\r\nldarg b\r\nldarg a\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]unsigned int8,[in]unsigned int8,[in]unsigned int8,[in]unsigned int8,[in]float32,[in]float32,[in]float32)\r\nret")]
        #endif
        public static void glReplacementCodeuiColor4ubVertex3fSUN([In] IntPtr extensionPointer, int rc, byte r, byte g, byte b, byte a, float x, float y, float z) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glReplacementCodeuiColor4ubVertex3fSUN([In] IntPtr extensionPointer, int rc, byte r, byte g, byte b, byte a, float x, float y, float z)

        #region void glReplacementCodeuiColor4ubVertex3fSUN([In] IntPtr extensionPointer, uint rc, byte r, byte g, byte b, byte a, float x, float y, float z)
        // GLvoid glReplacementCodeuiColor4ubVertex3fSUN(GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 9\r\nldarg rc\r\nldarg r\r\nldarg g\r\nldarg b\r\nldarg a\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int32,[in]unsigned int8,[in]unsigned int8,[in]unsigned int8,[in]unsigned int8,[in]float32,[in]float32,[in]float32)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 9\r\nldarg rc\r\nldarg r\r\nldarg g\r\nldarg b\r\nldarg a\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int32,[in]unsigned int8,[in]unsigned int8,[in]unsigned int8,[in]unsigned int8,[in]float32,[in]float32,[in]float32)\r\nret")]
        #endif
        public static void glReplacementCodeuiColor4ubVertex3fSUN([In] IntPtr extensionPointer, uint rc, byte r, byte g, byte b, byte a, float x, float y, float z) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glReplacementCodeuiColor4ubVertex3fSUN([In] IntPtr extensionPointer, uint rc, byte r, byte g, byte b, byte a, float x, float y, float z)
        #endregion Overloads for GLvoid glReplacementCodeuiColor4ubVertex3fSUN(GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z)

        #region Overloads for GLvoid glReplacementCodeuiColor4ubVertex3fvSUN(const GLuint* rc, const GLubyte* color, const GLfloat* position)
        #region void glReplacementCodeuiColor4ubVertex3fvSUN([In] IntPtr extensionPointer, int[] rc, byte[] color, float[] position)
        // GLvoid glReplacementCodeuiColor4ubVertex3fvSUN(const GLuint* rc, const GLubyte* color, const GLfloat* position)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg rc\r\nldarg color\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32[],[in]unsigned int8[],[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg rc\r\nldarg color\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32[],[in]unsigned int8[],[in]float32[])\r\nret")]
        #endif
        public static void glReplacementCodeuiColor4ubVertex3fvSUN([In] IntPtr extensionPointer, int[] rc, byte[] color, float[] position) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glReplacementCodeuiColor4ubVertex3fvSUN([In] IntPtr extensionPointer, int[] rc, byte[] color, float[] position)

        #region void glReplacementCodeuiColor4ubVertex3fvSUN([In] IntPtr extensionPointer, ref int rc, ref byte color, ref float position)
        // GLvoid glReplacementCodeuiColor4ubVertex3fvSUN(const GLuint* rc, const GLubyte* color, const GLfloat* position)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg rc\r\nldarg color\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]int32,[in][out]unsigned int8,[in][out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg rc\r\nldarg color\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]int32,[in][out]unsigned int8,[in][out]float32)\r\nret")]
        #endif
        public static void glReplacementCodeuiColor4ubVertex3fvSUN([In] IntPtr extensionPointer, ref int rc, ref byte color, ref float position) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glReplacementCodeuiColor4ubVertex3fvSUN([In] IntPtr extensionPointer, ref int rc, ref byte color, ref float position)

        #region void glReplacementCodeuiColor4ubVertex3fvSUN([In] IntPtr extensionPointer, IntPtr rc, IntPtr color, IntPtr position)
        // GLvoid glReplacementCodeuiColor4ubVertex3fvSUN(const GLuint* rc, const GLubyte* color, const GLfloat* position)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg rc\r\nldarg color\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]native int,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg rc\r\nldarg color\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]native int,[in]native int)\r\nret")]
        #endif
        public static void glReplacementCodeuiColor4ubVertex3fvSUN([In] IntPtr extensionPointer, IntPtr rc, IntPtr color, IntPtr position) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glReplacementCodeuiColor4ubVertex3fvSUN([In] IntPtr extensionPointer, IntPtr rc, IntPtr color, IntPtr position)

        #region void glReplacementCodeuiColor4ubVertex3fvSUN([In] IntPtr extensionPointer, ref uint rc, ref byte color, ref float position)
        // GLvoid glReplacementCodeuiColor4ubVertex3fvSUN(const GLuint* rc, const GLubyte* color, const GLfloat* position)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg rc\r\nldarg color\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]unsigned int32,[in][out]unsigned int8,[in][out]float32)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg rc\r\nldarg color\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]unsigned int32,[in][out]unsigned int8,[in][out]float32)\r\nret")]
        #endif
        public static void glReplacementCodeuiColor4ubVertex3fvSUN([In] IntPtr extensionPointer, ref uint rc, ref byte color, ref float position) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glReplacementCodeuiColor4ubVertex3fvSUN([In] IntPtr extensionPointer, ref uint rc, ref byte color, ref float position)

        #region void glReplacementCodeuiColor4ubVertex3fvSUN([In] IntPtr extensionPointer, uint[] rc, byte[] color, float[] position)
        // GLvoid glReplacementCodeuiColor4ubVertex3fvSUN(const GLuint* rc, const GLubyte* color, const GLfloat* position)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg rc\r\nldarg color\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int32[],[in]unsigned int8[],[in]float32[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg rc\r\nldarg color\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int32[],[in]unsigned int8[],[in]float32[])\r\nret")]
        #endif
        public static void glReplacementCodeuiColor4ubVertex3fvSUN([In] IntPtr extensionPointer, uint[] rc, byte[] color, float[] position) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glReplacementCodeuiColor4ubVertex3fvSUN([In] IntPtr extensionPointer, uint[] rc, byte[] color, float[] position)

        #region void glReplacementCodeuiColor4ubVertex3fvSUN([In] IntPtr extensionPointer, uint* rc, byte* color, float* position)
        // GLvoid glReplacementCodeuiColor4ubVertex3fvSUN(const GLuint* rc, const GLubyte* color, const GLfloat* position)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg rc\r\nldarg color\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int32*,[in]unsigned int8*,[in]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg rc\r\nldarg color\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int32*,[in]unsigned int8*,[in]float32*)\r\nret")]
        #endif
        public static unsafe void glReplacementCodeuiColor4ubVertex3fvSUN([In] IntPtr extensionPointer, uint* rc, byte* color, float* position) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glReplacementCodeuiColor4ubVertex3fvSUN([In] IntPtr extensionPointer, uint* rc, byte* color, float* position)
        #endregion Overloads for GLvoid glReplacementCodeuiColor4ubVertex3fvSUN(const GLuint* rc, const GLubyte* color, const GLfloat* position)

        #region Overloads for GLvoid glReplacementCodeuiColor3fVertex3fSUN(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z)
        #region void glReplacementCodeuiColor3fVertex3fSUN([In] IntPtr extensionPointer, int rc, float r, float g, float b, float x, float y, float z)
        // GLvoid glReplacementCodeuiColor3fVertex3fSUN(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z)
        #if WIN32
        [IlasmAttribute(".maxstack 8\r\nldarg rc\r\nldarg r\r\nldarg g\r\nldarg b\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 8\r\nldarg rc\r\nldarg r\r\nldarg g\r\nldarg b\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32)\r\nret")]
        #endif
        public static void glReplacementCodeuiColor3fVertex3fSUN([In] IntPtr extensionPointer, int rc, float r, float g, float b, float x, float y, float z) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glReplacementCodeuiColor3fVertex3fSUN([In] IntPtr extensionPointer, int rc, float r, float g, float b, float x, float y, float z)

        #region void glReplacementCodeuiColor3fVertex3fSUN([In] IntPtr extensionPointer, uint rc, float r, float g, float b, float x, float y, float z)
        // GLvoid glReplacementCodeuiColor3fVertex3fSUN(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 8\r\nldarg rc\r\nldarg r\r\nldarg g\r\nldarg b\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 8\r\nldarg rc\r\nldarg r\r\nldarg g\r\nldarg b\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32)\r\nret")]
        #endif
        public static void glReplacementCodeuiColor3fVertex3fSUN([In] IntPtr extensionPointer, uint rc, float r, float g, float b, float x, float y, float z) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glReplacementCodeuiColor3fVertex3fSUN([In] IntPtr extensionPointer, uint rc, float r, float g, float b, float x, float y, float z)
        #endregion Overloads for GLvoid glReplacementCodeuiColor3fVertex3fSUN(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z)

        #region Overloads for GLvoid glReplacementCodeuiColor3fVertex3fvSUN(const GLuint* rc, const GLfloat* color, const GLfloat* position)
        #region void glReplacementCodeuiColor3fVertex3fvSUN([In] IntPtr extensionPointer, int[] rc, float[] color, float[] position)
        // GLvoid glReplacementCodeuiColor3fVertex3fvSUN(const GLuint* rc, const GLfloat* color, const GLfloat* position)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg rc\r\nldarg color\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32[],[in]float32[],[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg rc\r\nldarg color\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32[],[in]float32[],[in]float32[])\r\nret")]
        #endif
        public static void glReplacementCodeuiColor3fVertex3fvSUN([In] IntPtr extensionPointer, int[] rc, float[] color, float[] position) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glReplacementCodeuiColor3fVertex3fvSUN([In] IntPtr extensionPointer, int[] rc, float[] color, float[] position)

        #region void glReplacementCodeuiColor3fVertex3fvSUN([In] IntPtr extensionPointer, ref int rc, ref float color, ref float position)
        // GLvoid glReplacementCodeuiColor3fVertex3fvSUN(const GLuint* rc, const GLfloat* color, const GLfloat* position)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg rc\r\nldarg color\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]int32,[in][out]float32,[in][out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg rc\r\nldarg color\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]int32,[in][out]float32,[in][out]float32)\r\nret")]
        #endif
        public static void glReplacementCodeuiColor3fVertex3fvSUN([In] IntPtr extensionPointer, ref int rc, ref float color, ref float position) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glReplacementCodeuiColor3fVertex3fvSUN([In] IntPtr extensionPointer, ref int rc, ref float color, ref float position)

        #region void glReplacementCodeuiColor3fVertex3fvSUN([In] IntPtr extensionPointer, IntPtr rc, IntPtr color, IntPtr position)
        // GLvoid glReplacementCodeuiColor3fVertex3fvSUN(const GLuint* rc, const GLfloat* color, const GLfloat* position)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg rc\r\nldarg color\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]native int,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg rc\r\nldarg color\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]native int,[in]native int)\r\nret")]
        #endif
        public static void glReplacementCodeuiColor3fVertex3fvSUN([In] IntPtr extensionPointer, IntPtr rc, IntPtr color, IntPtr position) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glReplacementCodeuiColor3fVertex3fvSUN([In] IntPtr extensionPointer, IntPtr rc, IntPtr color, IntPtr position)

        #region void glReplacementCodeuiColor3fVertex3fvSUN([In] IntPtr extensionPointer, ref uint rc, ref float color, ref float position)
        // GLvoid glReplacementCodeuiColor3fVertex3fvSUN(const GLuint* rc, const GLfloat* color, const GLfloat* position)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg rc\r\nldarg color\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]unsigned int32,[in][out]float32,[in][out]float32)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg rc\r\nldarg color\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]unsigned int32,[in][out]float32,[in][out]float32)\r\nret")]
        #endif
        public static void glReplacementCodeuiColor3fVertex3fvSUN([In] IntPtr extensionPointer, ref uint rc, ref float color, ref float position) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glReplacementCodeuiColor3fVertex3fvSUN([In] IntPtr extensionPointer, ref uint rc, ref float color, ref float position)

        #region void glReplacementCodeuiColor3fVertex3fvSUN([In] IntPtr extensionPointer, uint[] rc, float[] color, float[] position)
        // GLvoid glReplacementCodeuiColor3fVertex3fvSUN(const GLuint* rc, const GLfloat* color, const GLfloat* position)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg rc\r\nldarg color\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int32[],[in]float32[],[in]float32[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg rc\r\nldarg color\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int32[],[in]float32[],[in]float32[])\r\nret")]
        #endif
        public static void glReplacementCodeuiColor3fVertex3fvSUN([In] IntPtr extensionPointer, uint[] rc, float[] color, float[] position) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glReplacementCodeuiColor3fVertex3fvSUN([In] IntPtr extensionPointer, uint[] rc, float[] color, float[] position)

        #region void glReplacementCodeuiColor3fVertex3fvSUN([In] IntPtr extensionPointer, uint* rc, float* color, float* position)
        // GLvoid glReplacementCodeuiColor3fVertex3fvSUN(const GLuint* rc, const GLfloat* color, const GLfloat* position)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg rc\r\nldarg color\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int32*,[in]float32*,[in]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg rc\r\nldarg color\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int32*,[in]float32*,[in]float32*)\r\nret")]
        #endif
        public static unsafe void glReplacementCodeuiColor3fVertex3fvSUN([In] IntPtr extensionPointer, uint* rc, float* color, float* position) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glReplacementCodeuiColor3fVertex3fvSUN([In] IntPtr extensionPointer, uint* rc, float* color, float* position)
        #endregion Overloads for GLvoid glReplacementCodeuiColor3fVertex3fvSUN(const GLuint* rc, const GLfloat* color, const GLfloat* position)

        #region Overloads for GLvoid glReplacementCodeuiNormal3fVertex3fSUN(GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
        #region void glReplacementCodeuiNormal3fVertex3fSUN([In] IntPtr extensionPointer, int rc, float nx, float ny, float nz, float x, float y, float z)
        // GLvoid glReplacementCodeuiNormal3fVertex3fSUN(GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
        #if WIN32
        [IlasmAttribute(".maxstack 8\r\nldarg rc\r\nldarg nx\r\nldarg ny\r\nldarg nz\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 8\r\nldarg rc\r\nldarg nx\r\nldarg ny\r\nldarg nz\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32)\r\nret")]
        #endif
        public static void glReplacementCodeuiNormal3fVertex3fSUN([In] IntPtr extensionPointer, int rc, float nx, float ny, float nz, float x, float y, float z) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glReplacementCodeuiNormal3fVertex3fSUN([In] IntPtr extensionPointer, int rc, float nx, float ny, float nz, float x, float y, float z)

        #region void glReplacementCodeuiNormal3fVertex3fSUN([In] IntPtr extensionPointer, uint rc, float nx, float ny, float nz, float x, float y, float z)
        // GLvoid glReplacementCodeuiNormal3fVertex3fSUN(GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 8\r\nldarg rc\r\nldarg nx\r\nldarg ny\r\nldarg nz\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 8\r\nldarg rc\r\nldarg nx\r\nldarg ny\r\nldarg nz\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32)\r\nret")]
        #endif
        public static void glReplacementCodeuiNormal3fVertex3fSUN([In] IntPtr extensionPointer, uint rc, float nx, float ny, float nz, float x, float y, float z) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glReplacementCodeuiNormal3fVertex3fSUN([In] IntPtr extensionPointer, uint rc, float nx, float ny, float nz, float x, float y, float z)
        #endregion Overloads for GLvoid glReplacementCodeuiNormal3fVertex3fSUN(GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)

        #region Overloads for GLvoid glReplacementCodeuiNormal3fVertex3fvSUN(const GLuint* rc, const GLfloat* normal, const GLfloat* position)
        #region void glReplacementCodeuiNormal3fVertex3fvSUN([In] IntPtr extensionPointer, int[] rc, float[] normal, float[] position)
        // GLvoid glReplacementCodeuiNormal3fVertex3fvSUN(const GLuint* rc, const GLfloat* normal, const GLfloat* position)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg rc\r\nldarg normal\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32[],[in]float32[],[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg rc\r\nldarg normal\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32[],[in]float32[],[in]float32[])\r\nret")]
        #endif
        public static void glReplacementCodeuiNormal3fVertex3fvSUN([In] IntPtr extensionPointer, int[] rc, float[] normal, float[] position) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glReplacementCodeuiNormal3fVertex3fvSUN([In] IntPtr extensionPointer, int[] rc, float[] normal, float[] position)

        #region void glReplacementCodeuiNormal3fVertex3fvSUN([In] IntPtr extensionPointer, ref int rc, ref float normal, ref float position)
        // GLvoid glReplacementCodeuiNormal3fVertex3fvSUN(const GLuint* rc, const GLfloat* normal, const GLfloat* position)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg rc\r\nldarg normal\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]int32,[in][out]float32,[in][out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg rc\r\nldarg normal\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]int32,[in][out]float32,[in][out]float32)\r\nret")]
        #endif
        public static void glReplacementCodeuiNormal3fVertex3fvSUN([In] IntPtr extensionPointer, ref int rc, ref float normal, ref float position) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glReplacementCodeuiNormal3fVertex3fvSUN([In] IntPtr extensionPointer, ref int rc, ref float normal, ref float position)

        #region void glReplacementCodeuiNormal3fVertex3fvSUN([In] IntPtr extensionPointer, IntPtr rc, IntPtr normal, IntPtr position)
        // GLvoid glReplacementCodeuiNormal3fVertex3fvSUN(const GLuint* rc, const GLfloat* normal, const GLfloat* position)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg rc\r\nldarg normal\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]native int,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg rc\r\nldarg normal\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]native int,[in]native int)\r\nret")]
        #endif
        public static void glReplacementCodeuiNormal3fVertex3fvSUN([In] IntPtr extensionPointer, IntPtr rc, IntPtr normal, IntPtr position) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glReplacementCodeuiNormal3fVertex3fvSUN([In] IntPtr extensionPointer, IntPtr rc, IntPtr normal, IntPtr position)

        #region void glReplacementCodeuiNormal3fVertex3fvSUN([In] IntPtr extensionPointer, ref uint rc, ref float normal, ref float position)
        // GLvoid glReplacementCodeuiNormal3fVertex3fvSUN(const GLuint* rc, const GLfloat* normal, const GLfloat* position)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg rc\r\nldarg normal\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]unsigned int32,[in][out]float32,[in][out]float32)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg rc\r\nldarg normal\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]unsigned int32,[in][out]float32,[in][out]float32)\r\nret")]
        #endif
        public static void glReplacementCodeuiNormal3fVertex3fvSUN([In] IntPtr extensionPointer, ref uint rc, ref float normal, ref float position) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glReplacementCodeuiNormal3fVertex3fvSUN([In] IntPtr extensionPointer, ref uint rc, ref float normal, ref float position)

        #region void glReplacementCodeuiNormal3fVertex3fvSUN([In] IntPtr extensionPointer, uint[] rc, float[] normal, float[] position)
        // GLvoid glReplacementCodeuiNormal3fVertex3fvSUN(const GLuint* rc, const GLfloat* normal, const GLfloat* position)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg rc\r\nldarg normal\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int32[],[in]float32[],[in]float32[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg rc\r\nldarg normal\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int32[],[in]float32[],[in]float32[])\r\nret")]
        #endif
        public static void glReplacementCodeuiNormal3fVertex3fvSUN([In] IntPtr extensionPointer, uint[] rc, float[] normal, float[] position) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glReplacementCodeuiNormal3fVertex3fvSUN([In] IntPtr extensionPointer, uint[] rc, float[] normal, float[] position)

        #region void glReplacementCodeuiNormal3fVertex3fvSUN([In] IntPtr extensionPointer, uint* rc, float* normal, float* position)
        // GLvoid glReplacementCodeuiNormal3fVertex3fvSUN(const GLuint* rc, const GLfloat* normal, const GLfloat* position)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg rc\r\nldarg normal\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int32*,[in]float32*,[in]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg rc\r\nldarg normal\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int32*,[in]float32*,[in]float32*)\r\nret")]
        #endif
        public static unsafe void glReplacementCodeuiNormal3fVertex3fvSUN([In] IntPtr extensionPointer, uint* rc, float* normal, float* position) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glReplacementCodeuiNormal3fVertex3fvSUN([In] IntPtr extensionPointer, uint* rc, float* normal, float* position)
        #endregion Overloads for GLvoid glReplacementCodeuiNormal3fVertex3fvSUN(const GLuint* rc, const GLfloat* normal, const GLfloat* position)

        #region Overloads for GLvoid glReplacementCodeuiColor4fNormal3fVertex3fSUN(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
        #region void glReplacementCodeuiColor4fNormal3fVertex3fSUN([In] IntPtr extensionPointer, int rc, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z)
        // GLvoid glReplacementCodeuiColor4fNormal3fVertex3fSUN(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
        #if WIN32
        [IlasmAttribute(".maxstack 12\r\nldarg rc\r\nldarg r\r\nldarg g\r\nldarg b\r\nldarg a\r\nldarg nx\r\nldarg ny\r\nldarg nz\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 12\r\nldarg rc\r\nldarg r\r\nldarg g\r\nldarg b\r\nldarg a\r\nldarg nx\r\nldarg ny\r\nldarg nz\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32)\r\nret")]
        #endif
        public static void glReplacementCodeuiColor4fNormal3fVertex3fSUN([In] IntPtr extensionPointer, int rc, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glReplacementCodeuiColor4fNormal3fVertex3fSUN([In] IntPtr extensionPointer, int rc, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z)

        #region void glReplacementCodeuiColor4fNormal3fVertex3fSUN([In] IntPtr extensionPointer, uint rc, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z)
        // GLvoid glReplacementCodeuiColor4fNormal3fVertex3fSUN(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 12\r\nldarg rc\r\nldarg r\r\nldarg g\r\nldarg b\r\nldarg a\r\nldarg nx\r\nldarg ny\r\nldarg nz\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 12\r\nldarg rc\r\nldarg r\r\nldarg g\r\nldarg b\r\nldarg a\r\nldarg nx\r\nldarg ny\r\nldarg nz\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32)\r\nret")]
        #endif
        public static void glReplacementCodeuiColor4fNormal3fVertex3fSUN([In] IntPtr extensionPointer, uint rc, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glReplacementCodeuiColor4fNormal3fVertex3fSUN([In] IntPtr extensionPointer, uint rc, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z)
        #endregion Overloads for GLvoid glReplacementCodeuiColor4fNormal3fVertex3fSUN(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)

        #region Overloads for GLvoid glReplacementCodeuiColor4fNormal3fVertex3fvSUN(const GLuint* rc, const GLfloat* color, const GLfloat* normal, const GLfloat* position)
        #region void glReplacementCodeuiColor4fNormal3fVertex3fvSUN([In] IntPtr extensionPointer, int[] rc, float[] color, float[] normal, float[] position)
        // GLvoid glReplacementCodeuiColor4fNormal3fVertex3fvSUN(const GLuint* rc, const GLfloat* color, const GLfloat* normal, const GLfloat* position)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg rc\r\nldarg color\r\nldarg normal\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32[],[in]float32[],[in]float32[],[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg rc\r\nldarg color\r\nldarg normal\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32[],[in]float32[],[in]float32[],[in]float32[])\r\nret")]
        #endif
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN([In] IntPtr extensionPointer, int[] rc, float[] color, float[] normal, float[] position) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glReplacementCodeuiColor4fNormal3fVertex3fvSUN([In] IntPtr extensionPointer, int[] rc, float[] color, float[] normal, float[] position)

        #region void glReplacementCodeuiColor4fNormal3fVertex3fvSUN([In] IntPtr extensionPointer, ref int rc, ref float color, ref float normal, ref float position)
        // GLvoid glReplacementCodeuiColor4fNormal3fVertex3fvSUN(const GLuint* rc, const GLfloat* color, const GLfloat* normal, const GLfloat* position)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg rc\r\nldarg color\r\nldarg normal\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]int32,[in][out]float32,[in][out]float32,[in][out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg rc\r\nldarg color\r\nldarg normal\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]int32,[in][out]float32,[in][out]float32,[in][out]float32)\r\nret")]
        #endif
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN([In] IntPtr extensionPointer, ref int rc, ref float color, ref float normal, ref float position) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glReplacementCodeuiColor4fNormal3fVertex3fvSUN([In] IntPtr extensionPointer, ref int rc, ref float color, ref float normal, ref float position)

        #region void glReplacementCodeuiColor4fNormal3fVertex3fvSUN([In] IntPtr extensionPointer, IntPtr rc, IntPtr color, IntPtr normal, IntPtr position)
        // GLvoid glReplacementCodeuiColor4fNormal3fVertex3fvSUN(const GLuint* rc, const GLfloat* color, const GLfloat* normal, const GLfloat* position)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg rc\r\nldarg color\r\nldarg normal\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]native int,[in]native int,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg rc\r\nldarg color\r\nldarg normal\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]native int,[in]native int,[in]native int)\r\nret")]
        #endif
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN([In] IntPtr extensionPointer, IntPtr rc, IntPtr color, IntPtr normal, IntPtr position) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glReplacementCodeuiColor4fNormal3fVertex3fvSUN([In] IntPtr extensionPointer, IntPtr rc, IntPtr color, IntPtr normal, IntPtr position)

        #region void glReplacementCodeuiColor4fNormal3fVertex3fvSUN([In] IntPtr extensionPointer, ref uint rc, ref float color, ref float normal, ref float position)
        // GLvoid glReplacementCodeuiColor4fNormal3fVertex3fvSUN(const GLuint* rc, const GLfloat* color, const GLfloat* normal, const GLfloat* position)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg rc\r\nldarg color\r\nldarg normal\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]unsigned int32,[in][out]float32,[in][out]float32,[in][out]float32)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg rc\r\nldarg color\r\nldarg normal\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]unsigned int32,[in][out]float32,[in][out]float32,[in][out]float32)\r\nret")]
        #endif
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN([In] IntPtr extensionPointer, ref uint rc, ref float color, ref float normal, ref float position) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glReplacementCodeuiColor4fNormal3fVertex3fvSUN([In] IntPtr extensionPointer, ref uint rc, ref float color, ref float normal, ref float position)

        #region void glReplacementCodeuiColor4fNormal3fVertex3fvSUN([In] IntPtr extensionPointer, uint[] rc, float[] color, float[] normal, float[] position)
        // GLvoid glReplacementCodeuiColor4fNormal3fVertex3fvSUN(const GLuint* rc, const GLfloat* color, const GLfloat* normal, const GLfloat* position)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg rc\r\nldarg color\r\nldarg normal\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int32[],[in]float32[],[in]float32[],[in]float32[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg rc\r\nldarg color\r\nldarg normal\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int32[],[in]float32[],[in]float32[],[in]float32[])\r\nret")]
        #endif
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN([In] IntPtr extensionPointer, uint[] rc, float[] color, float[] normal, float[] position) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glReplacementCodeuiColor4fNormal3fVertex3fvSUN([In] IntPtr extensionPointer, uint[] rc, float[] color, float[] normal, float[] position)

        #region void glReplacementCodeuiColor4fNormal3fVertex3fvSUN([In] IntPtr extensionPointer, uint* rc, float* color, float* normal, float* position)
        // GLvoid glReplacementCodeuiColor4fNormal3fVertex3fvSUN(const GLuint* rc, const GLfloat* color, const GLfloat* normal, const GLfloat* position)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg rc\r\nldarg color\r\nldarg normal\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int32*,[in]float32*,[in]float32*,[in]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg rc\r\nldarg color\r\nldarg normal\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int32*,[in]float32*,[in]float32*,[in]float32*)\r\nret")]
        #endif
        public static unsafe void glReplacementCodeuiColor4fNormal3fVertex3fvSUN([In] IntPtr extensionPointer, uint* rc, float* color, float* normal, float* position) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glReplacementCodeuiColor4fNormal3fVertex3fvSUN([In] IntPtr extensionPointer, uint* rc, float* color, float* normal, float* position)
        #endregion Overloads for GLvoid glReplacementCodeuiColor4fNormal3fVertex3fvSUN(const GLuint* rc, const GLfloat* color, const GLfloat* normal, const GLfloat* position)

        #region Overloads for GLvoid glReplacementCodeuiTexCoord2fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z)
        #region void glReplacementCodeuiTexCoord2fVertex3fSUN([In] IntPtr extensionPointer, int rc, float s, float t, float x, float y, float z)
        // GLvoid glReplacementCodeuiTexCoord2fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z)
        #if WIN32
        [IlasmAttribute(".maxstack 7\r\nldarg rc\r\nldarg s\r\nldarg t\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 7\r\nldarg rc\r\nldarg s\r\nldarg t\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32)\r\nret")]
        #endif
        public static void glReplacementCodeuiTexCoord2fVertex3fSUN([In] IntPtr extensionPointer, int rc, float s, float t, float x, float y, float z) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glReplacementCodeuiTexCoord2fVertex3fSUN([In] IntPtr extensionPointer, int rc, float s, float t, float x, float y, float z)

        #region void glReplacementCodeuiTexCoord2fVertex3fSUN([In] IntPtr extensionPointer, uint rc, float s, float t, float x, float y, float z)
        // GLvoid glReplacementCodeuiTexCoord2fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 7\r\nldarg rc\r\nldarg s\r\nldarg t\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 7\r\nldarg rc\r\nldarg s\r\nldarg t\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32)\r\nret")]
        #endif
        public static void glReplacementCodeuiTexCoord2fVertex3fSUN([In] IntPtr extensionPointer, uint rc, float s, float t, float x, float y, float z) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glReplacementCodeuiTexCoord2fVertex3fSUN([In] IntPtr extensionPointer, uint rc, float s, float t, float x, float y, float z)
        #endregion Overloads for GLvoid glReplacementCodeuiTexCoord2fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z)

        #region Overloads for GLvoid glReplacementCodeuiTexCoord2fVertex3fvSUN(const GLuint* rc, const GLfloat* texCoords, const GLfloat* position)
        #region void glReplacementCodeuiTexCoord2fVertex3fvSUN([In] IntPtr extensionPointer, int[] rc, float[] texCoords, float[] position)
        // GLvoid glReplacementCodeuiTexCoord2fVertex3fvSUN(const GLuint* rc, const GLfloat* texCoords, const GLfloat* position)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg rc\r\nldarg texCoords\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32[],[in]float32[],[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg rc\r\nldarg texCoords\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32[],[in]float32[],[in]float32[])\r\nret")]
        #endif
        public static void glReplacementCodeuiTexCoord2fVertex3fvSUN([In] IntPtr extensionPointer, int[] rc, float[] texCoords, float[] position) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glReplacementCodeuiTexCoord2fVertex3fvSUN([In] IntPtr extensionPointer, int[] rc, float[] texCoords, float[] position)

        #region void glReplacementCodeuiTexCoord2fVertex3fvSUN([In] IntPtr extensionPointer, ref int rc, ref float texCoords, ref float position)
        // GLvoid glReplacementCodeuiTexCoord2fVertex3fvSUN(const GLuint* rc, const GLfloat* texCoords, const GLfloat* position)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg rc\r\nldarg texCoords\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]int32,[in][out]float32,[in][out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg rc\r\nldarg texCoords\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]int32,[in][out]float32,[in][out]float32)\r\nret")]
        #endif
        public static void glReplacementCodeuiTexCoord2fVertex3fvSUN([In] IntPtr extensionPointer, ref int rc, ref float texCoords, ref float position) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glReplacementCodeuiTexCoord2fVertex3fvSUN([In] IntPtr extensionPointer, ref int rc, ref float texCoords, ref float position)

        #region void glReplacementCodeuiTexCoord2fVertex3fvSUN([In] IntPtr extensionPointer, IntPtr rc, IntPtr texCoords, IntPtr position)
        // GLvoid glReplacementCodeuiTexCoord2fVertex3fvSUN(const GLuint* rc, const GLfloat* texCoords, const GLfloat* position)
        #if WIN32
        [IlasmAttribute(".maxstack 4\r\nldarg rc\r\nldarg texCoords\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]native int,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 4\r\nldarg rc\r\nldarg texCoords\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]native int,[in]native int)\r\nret")]
        #endif
        public static void glReplacementCodeuiTexCoord2fVertex3fvSUN([In] IntPtr extensionPointer, IntPtr rc, IntPtr texCoords, IntPtr position) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glReplacementCodeuiTexCoord2fVertex3fvSUN([In] IntPtr extensionPointer, IntPtr rc, IntPtr texCoords, IntPtr position)

        #region void glReplacementCodeuiTexCoord2fVertex3fvSUN([In] IntPtr extensionPointer, ref uint rc, ref float texCoords, ref float position)
        // GLvoid glReplacementCodeuiTexCoord2fVertex3fvSUN(const GLuint* rc, const GLfloat* texCoords, const GLfloat* position)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg rc\r\nldarg texCoords\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]unsigned int32,[in][out]float32,[in][out]float32)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg rc\r\nldarg texCoords\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]unsigned int32,[in][out]float32,[in][out]float32)\r\nret")]
        #endif
        public static void glReplacementCodeuiTexCoord2fVertex3fvSUN([In] IntPtr extensionPointer, ref uint rc, ref float texCoords, ref float position) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glReplacementCodeuiTexCoord2fVertex3fvSUN([In] IntPtr extensionPointer, ref uint rc, ref float texCoords, ref float position)

        #region void glReplacementCodeuiTexCoord2fVertex3fvSUN([In] IntPtr extensionPointer, uint[] rc, float[] texCoords, float[] position)
        // GLvoid glReplacementCodeuiTexCoord2fVertex3fvSUN(const GLuint* rc, const GLfloat* texCoords, const GLfloat* position)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg rc\r\nldarg texCoords\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int32[],[in]float32[],[in]float32[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg rc\r\nldarg texCoords\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int32[],[in]float32[],[in]float32[])\r\nret")]
        #endif
        public static void glReplacementCodeuiTexCoord2fVertex3fvSUN([In] IntPtr extensionPointer, uint[] rc, float[] texCoords, float[] position) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glReplacementCodeuiTexCoord2fVertex3fvSUN([In] IntPtr extensionPointer, uint[] rc, float[] texCoords, float[] position)

        #region void glReplacementCodeuiTexCoord2fVertex3fvSUN([In] IntPtr extensionPointer, uint* rc, float* texCoords, float* position)
        // GLvoid glReplacementCodeuiTexCoord2fVertex3fvSUN(const GLuint* rc, const GLfloat* texCoords, const GLfloat* position)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg rc\r\nldarg texCoords\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int32*,[in]float32*,[in]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 4\r\nldarg rc\r\nldarg texCoords\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int32*,[in]float32*,[in]float32*)\r\nret")]
        #endif
        public static unsafe void glReplacementCodeuiTexCoord2fVertex3fvSUN([In] IntPtr extensionPointer, uint* rc, float* texCoords, float* position) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glReplacementCodeuiTexCoord2fVertex3fvSUN([In] IntPtr extensionPointer, uint* rc, float* texCoords, float* position)
        #endregion Overloads for GLvoid glReplacementCodeuiTexCoord2fVertex3fvSUN(const GLuint* rc, const GLfloat* texCoords, const GLfloat* position)

        #region Overloads for GLvoid glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
        #region void glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN([In] IntPtr extensionPointer, int rc, float s, float t, float nx, float ny, float nz, float x, float y, float z)
        // GLvoid glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
        #if WIN32
        [IlasmAttribute(".maxstack 10\r\nldarg rc\r\nldarg s\r\nldarg t\r\nldarg nx\r\nldarg ny\r\nldarg nz\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 10\r\nldarg rc\r\nldarg s\r\nldarg t\r\nldarg nx\r\nldarg ny\r\nldarg nz\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32)\r\nret")]
        #endif
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN([In] IntPtr extensionPointer, int rc, float s, float t, float nx, float ny, float nz, float x, float y, float z) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN([In] IntPtr extensionPointer, int rc, float s, float t, float nx, float ny, float nz, float x, float y, float z)

        #region void glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN([In] IntPtr extensionPointer, uint rc, float s, float t, float nx, float ny, float nz, float x, float y, float z)
        // GLvoid glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 10\r\nldarg rc\r\nldarg s\r\nldarg t\r\nldarg nx\r\nldarg ny\r\nldarg nz\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 10\r\nldarg rc\r\nldarg s\r\nldarg t\r\nldarg nx\r\nldarg ny\r\nldarg nz\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32)\r\nret")]
        #endif
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN([In] IntPtr extensionPointer, uint rc, float s, float t, float nx, float ny, float nz, float x, float y, float z) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN([In] IntPtr extensionPointer, uint rc, float s, float t, float nx, float ny, float nz, float x, float y, float z)
        #endregion Overloads for GLvoid glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)

        #region Overloads for GLvoid glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(const GLuint* rc, const GLfloat* texCoords, const GLfloat* normal, const GLfloat* position)
        #region void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN([In] IntPtr extensionPointer, int[] rc, float[] texCoords, float[] normal, float[] position)
        // GLvoid glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(const GLuint* rc, const GLfloat* texCoords, const GLfloat* normal, const GLfloat* position)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg rc\r\nldarg texCoords\r\nldarg normal\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32[],[in]float32[],[in]float32[],[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg rc\r\nldarg texCoords\r\nldarg normal\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32[],[in]float32[],[in]float32[],[in]float32[])\r\nret")]
        #endif
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN([In] IntPtr extensionPointer, int[] rc, float[] texCoords, float[] normal, float[] position) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN([In] IntPtr extensionPointer, int[] rc, float[] texCoords, float[] normal, float[] position)

        #region void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN([In] IntPtr extensionPointer, ref int rc, ref float texCoords, ref float normal, ref float position)
        // GLvoid glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(const GLuint* rc, const GLfloat* texCoords, const GLfloat* normal, const GLfloat* position)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg rc\r\nldarg texCoords\r\nldarg normal\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]int32,[in][out]float32,[in][out]float32,[in][out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg rc\r\nldarg texCoords\r\nldarg normal\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]int32,[in][out]float32,[in][out]float32,[in][out]float32)\r\nret")]
        #endif
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN([In] IntPtr extensionPointer, ref int rc, ref float texCoords, ref float normal, ref float position) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN([In] IntPtr extensionPointer, ref int rc, ref float texCoords, ref float normal, ref float position)

        #region void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN([In] IntPtr extensionPointer, IntPtr rc, IntPtr texCoords, IntPtr normal, IntPtr position)
        // GLvoid glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(const GLuint* rc, const GLfloat* texCoords, const GLfloat* normal, const GLfloat* position)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg rc\r\nldarg texCoords\r\nldarg normal\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]native int,[in]native int,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg rc\r\nldarg texCoords\r\nldarg normal\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]native int,[in]native int,[in]native int)\r\nret")]
        #endif
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN([In] IntPtr extensionPointer, IntPtr rc, IntPtr texCoords, IntPtr normal, IntPtr position) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN([In] IntPtr extensionPointer, IntPtr rc, IntPtr texCoords, IntPtr normal, IntPtr position)

        #region void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN([In] IntPtr extensionPointer, ref uint rc, ref float texCoords, ref float normal, ref float position)
        // GLvoid glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(const GLuint* rc, const GLfloat* texCoords, const GLfloat* normal, const GLfloat* position)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg rc\r\nldarg texCoords\r\nldarg normal\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]unsigned int32,[in][out]float32,[in][out]float32,[in][out]float32)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg rc\r\nldarg texCoords\r\nldarg normal\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]unsigned int32,[in][out]float32,[in][out]float32,[in][out]float32)\r\nret")]
        #endif
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN([In] IntPtr extensionPointer, ref uint rc, ref float texCoords, ref float normal, ref float position) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN([In] IntPtr extensionPointer, ref uint rc, ref float texCoords, ref float normal, ref float position)

        #region void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN([In] IntPtr extensionPointer, uint[] rc, float[] texCoords, float[] normal, float[] position)
        // GLvoid glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(const GLuint* rc, const GLfloat* texCoords, const GLfloat* normal, const GLfloat* position)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg rc\r\nldarg texCoords\r\nldarg normal\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int32[],[in]float32[],[in]float32[],[in]float32[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg rc\r\nldarg texCoords\r\nldarg normal\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int32[],[in]float32[],[in]float32[],[in]float32[])\r\nret")]
        #endif
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN([In] IntPtr extensionPointer, uint[] rc, float[] texCoords, float[] normal, float[] position) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN([In] IntPtr extensionPointer, uint[] rc, float[] texCoords, float[] normal, float[] position)

        #region void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN([In] IntPtr extensionPointer, uint* rc, float* texCoords, float* normal, float* position)
        // GLvoid glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(const GLuint* rc, const GLfloat* texCoords, const GLfloat* normal, const GLfloat* position)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg rc\r\nldarg texCoords\r\nldarg normal\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int32*,[in]float32*,[in]float32*,[in]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 5\r\nldarg rc\r\nldarg texCoords\r\nldarg normal\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int32*,[in]float32*,[in]float32*,[in]float32*)\r\nret")]
        #endif
        public static unsafe void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN([In] IntPtr extensionPointer, uint* rc, float* texCoords, float* normal, float* position) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN([In] IntPtr extensionPointer, uint* rc, float* texCoords, float* normal, float* position)
        #endregion Overloads for GLvoid glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(const GLuint* rc, const GLfloat* texCoords, const GLfloat* normal, const GLfloat* position)

        #region Overloads for GLvoid glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
        #region void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN([In] IntPtr extensionPointer, int rc, float s, float t, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z)
        // GLvoid glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
        #if WIN32
        [IlasmAttribute(".maxstack 14\r\nldarg rc\r\nldarg s\r\nldarg t\r\nldarg r\r\nldarg g\r\nldarg b\r\nldarg a\r\nldarg nx\r\nldarg ny\r\nldarg nz\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 14\r\nldarg rc\r\nldarg s\r\nldarg t\r\nldarg r\r\nldarg g\r\nldarg b\r\nldarg a\r\nldarg nx\r\nldarg ny\r\nldarg nz\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32)\r\nret")]
        #endif
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN([In] IntPtr extensionPointer, int rc, float s, float t, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN([In] IntPtr extensionPointer, int rc, float s, float t, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z)

        #region void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN([In] IntPtr extensionPointer, uint rc, float s, float t, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z)
        // GLvoid glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 14\r\nldarg rc\r\nldarg s\r\nldarg t\r\nldarg r\r\nldarg g\r\nldarg b\r\nldarg a\r\nldarg nx\r\nldarg ny\r\nldarg nz\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 14\r\nldarg rc\r\nldarg s\r\nldarg t\r\nldarg r\r\nldarg g\r\nldarg b\r\nldarg a\r\nldarg nx\r\nldarg ny\r\nldarg nz\r\nldarg x\r\nldarg y\r\nldarg z\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32,[in]float32)\r\nret")]
        #endif
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN([In] IntPtr extensionPointer, uint rc, float s, float t, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN([In] IntPtr extensionPointer, uint rc, float s, float t, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z)
        #endregion Overloads for GLvoid glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)

        #region Overloads for GLvoid glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(const GLuint* rc, const GLfloat* texCoords, const GLfloat* color, const GLfloat* normal, const GLfloat* position)
        #region void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN([In] IntPtr extensionPointer, int[] rc, float[] texCoords, float[] color, float[] normal, float[] position)
        // GLvoid glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(const GLuint* rc, const GLfloat* texCoords, const GLfloat* color, const GLfloat* normal, const GLfloat* position)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg rc\r\nldarg texCoords\r\nldarg color\r\nldarg normal\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32[],[in]float32[],[in]float32[],[in]float32[],[in]float32[])\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg rc\r\nldarg texCoords\r\nldarg color\r\nldarg normal\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32[],[in]float32[],[in]float32[],[in]float32[],[in]float32[])\r\nret")]
        #endif
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN([In] IntPtr extensionPointer, int[] rc, float[] texCoords, float[] color, float[] normal, float[] position) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN([In] IntPtr extensionPointer, int[] rc, float[] texCoords, float[] color, float[] normal, float[] position)

        #region void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN([In] IntPtr extensionPointer, ref int rc, ref float texCoords, ref float color, ref float normal, ref float position)
        // GLvoid glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(const GLuint* rc, const GLfloat* texCoords, const GLfloat* color, const GLfloat* normal, const GLfloat* position)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg rc\r\nldarg texCoords\r\nldarg color\r\nldarg normal\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]int32,[in][out]float32,[in][out]float32,[in][out]float32,[in][out]float32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg rc\r\nldarg texCoords\r\nldarg color\r\nldarg normal\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]int32,[in][out]float32,[in][out]float32,[in][out]float32,[in][out]float32)\r\nret")]
        #endif
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN([In] IntPtr extensionPointer, ref int rc, ref float texCoords, ref float color, ref float normal, ref float position) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN([In] IntPtr extensionPointer, ref int rc, ref float texCoords, ref float color, ref float normal, ref float position)

        #region void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN([In] IntPtr extensionPointer, IntPtr rc, IntPtr texCoords, IntPtr color, IntPtr normal, IntPtr position)
        // GLvoid glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(const GLuint* rc, const GLfloat* texCoords, const GLfloat* color, const GLfloat* normal, const GLfloat* position)
        #if WIN32
        [IlasmAttribute(".maxstack 6\r\nldarg rc\r\nldarg texCoords\r\nldarg color\r\nldarg normal\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]native int,[in]native int,[in]native int,[in]native int,[in]native int)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 6\r\nldarg rc\r\nldarg texCoords\r\nldarg color\r\nldarg normal\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]native int,[in]native int,[in]native int,[in]native int,[in]native int)\r\nret")]
        #endif
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN([In] IntPtr extensionPointer, IntPtr rc, IntPtr texCoords, IntPtr color, IntPtr normal, IntPtr position) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN([In] IntPtr extensionPointer, IntPtr rc, IntPtr texCoords, IntPtr color, IntPtr normal, IntPtr position)

        #region void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN([In] IntPtr extensionPointer, ref uint rc, ref float texCoords, ref float color, ref float normal, ref float position)
        // GLvoid glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(const GLuint* rc, const GLfloat* texCoords, const GLfloat* color, const GLfloat* normal, const GLfloat* position)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg rc\r\nldarg texCoords\r\nldarg color\r\nldarg normal\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in][out]unsigned int32,[in][out]float32,[in][out]float32,[in][out]float32,[in][out]float32)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg rc\r\nldarg texCoords\r\nldarg color\r\nldarg normal\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in][out]unsigned int32,[in][out]float32,[in][out]float32,[in][out]float32,[in][out]float32)\r\nret")]
        #endif
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN([In] IntPtr extensionPointer, ref uint rc, ref float texCoords, ref float color, ref float normal, ref float position) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN([In] IntPtr extensionPointer, ref uint rc, ref float texCoords, ref float color, ref float normal, ref float position)

        #region void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN([In] IntPtr extensionPointer, uint[] rc, float[] texCoords, float[] color, float[] normal, float[] position)
        // GLvoid glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(const GLuint* rc, const GLfloat* texCoords, const GLfloat* color, const GLfloat* normal, const GLfloat* position)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg rc\r\nldarg texCoords\r\nldarg color\r\nldarg normal\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int32[],[in]float32[],[in]float32[],[in]float32[],[in]float32[])\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg rc\r\nldarg texCoords\r\nldarg color\r\nldarg normal\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int32[],[in]float32[],[in]float32[],[in]float32[],[in]float32[])\r\nret")]
        #endif
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN([In] IntPtr extensionPointer, uint[] rc, float[] texCoords, float[] color, float[] normal, float[] position) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN([In] IntPtr extensionPointer, uint[] rc, float[] texCoords, float[] color, float[] normal, float[] position)

        #region void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN([In] IntPtr extensionPointer, uint* rc, float* texCoords, float* color, float* normal, float* position)
        // GLvoid glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(const GLuint* rc, const GLfloat* texCoords, const GLfloat* color, const GLfloat* normal, const GLfloat* position)
        #if WIN32
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg rc\r\nldarg texCoords\r\nldarg color\r\nldarg normal\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]unsigned int32*,[in]float32*,[in]float32*,[in]float32*,[in]float32*)\r\nret")]
        #elif LINUX
        [CLSCompliant(false), IlasmAttribute(".maxstack 6\r\nldarg rc\r\nldarg texCoords\r\nldarg color\r\nldarg normal\r\nldarg position\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]unsigned int32*,[in]float32*,[in]float32*,[in]float32*,[in]float32*)\r\nret")]
        #endif
        public static unsafe void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN([In] IntPtr extensionPointer, uint* rc, float* texCoords, float* color, float* normal, float* position) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN([In] IntPtr extensionPointer, uint* rc, float* texCoords, float* color, float* normal, float* position)
        #endregion Overloads for GLvoid glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(const GLuint* rc, const GLfloat* texCoords, const GLfloat* color, const GLfloat* normal, const GLfloat* position)
        #endregion GL_SUN_vertex Methods
        #endregion GL_SUN_vertex (166)

        #region GL_SUN_convolution_border_modes (182)
        #region GL_SUN_convolution_border_modes Constants
        #region GL_WRAP_BORDER_SUN
        /// <summary>
        /// 
        /// </summary>
        // #define GL_WRAP_BORDER_SUN 0x81D4
        public const int GL_WRAP_BORDER_SUN = 0x81D4;
        #endregion GL_WRAP_BORDER_SUN
        #endregion GL_SUN_convolution_border_modes Constants
        #endregion GL_SUN_convolution_border_modes (182)

        #region GL_SUN_mesh_array (257)
        #region GL_SUN_mesh_array Constants
        #region GL_QUAD_MESH_SUN
        /// <summary>
        /// 
        /// </summary>
        // #define GL_QUAD_MESH_SUN 0x8614
        public const int GL_QUAD_MESH_SUN = 0x8614;
        #endregion GL_QUAD_MESH_SUN

        #region GL_TRIANGLE_MESH_SUN
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TRIANGLE_MESH_SUN 0x8615
        public const int GL_TRIANGLE_MESH_SUN = 0x8615;
        #endregion GL_TRIANGLE_MESH_SUN
        #endregion GL_SUN_mesh_array Constants

        #region GL_SUN_mesh_array Methods
        #region void glDrawMeshArraysSUN([In] IntPtr extensionPointer, int mode, int first, int count, int width)
        // GLvoid glDrawMeshArraysSUN(GLenum mode, GLint first, GLsizei count, GLsizei width)
        #if WIN32
        [IlasmAttribute(".maxstack 5\r\nldarg mode\r\nldarg first\r\nldarg count\r\nldarg width\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32)\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 5\r\nldarg mode\r\nldarg first\r\nldarg count\r\nldarg width\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32)\r\nret")]
        #endif
        public static void glDrawMeshArraysSUN([In] IntPtr extensionPointer, int mode, int first, int count, int width) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glDrawMeshArraysSUN([In] IntPtr extensionPointer, int mode, int first, int count, int width)
        #endregion GL_SUN_mesh_array Methods
        #endregion GL_SUN_mesh_array (257)

        #region GL_SUN_slice_accum (258)
        #region GL_SUN_slice_accum Constants
        #region GL_SLICE_ACCUM_SUN
        /// <summary>
        /// 
        /// </summary>
        // #define GL_SLICE_ACCUM_SUN 0x85CC
        public const int GL_SLICE_ACCUM_SUN = 0x85CC;
        #endregion GL_SLICE_ACCUM_SUN
        #endregion GL_SUN_slice_accum Constants
        #endregion GL_SUN_slice_accum (258)
        #endregion SUN Extensions

        #region SUNX Extensions
        #region GL_SUNX_constant_data (163)
        #region GL_SUNX_constant_data Constants
        #region GL_UNPACK_CONSTANT_DATA_SUNX
        /// <summary>
        /// 
        /// </summary>
        // #define GL_UNPACK_CONSTANT_DATA_SUNX 0x81D5
        public const int GL_UNPACK_CONSTANT_DATA_SUNX = 0x81D5;
        #endregion GL_UNPACK_CONSTANT_DATA_SUNX

        #region GL_TEXTURE_CONSTANT_DATA_SUNX
        /// <summary>
        /// 
        /// </summary>
        // #define GL_TEXTURE_CONSTANT_DATA_SUNX 0x81D6
        public const int GL_TEXTURE_CONSTANT_DATA_SUNX = 0x81D6;
        #endregion GL_TEXTURE_CONSTANT_DATA_SUNX
        #endregion GL_SUNX_constant_data Constants

        #region GL_SUNX_constant_data Methods
        #region void glFinishTextureSUNX([In] IntPtr extensionPointer)
        // GLvoid glFinishTextureSUNX()
        #if WIN32
        [IlasmAttribute(".maxstack 1\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void()\r\nret")]
        #elif LINUX
        [IlasmAttribute(".maxstack 1\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void()\r\nret")]
        #endif
        public static void glFinishTextureSUNX([In] IntPtr extensionPointer) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glFinishTextureSUNX([In] IntPtr extensionPointer)
        #endregion GL_SUNX_constant_data Methods
        #endregion GL_SUNX_constant_data (163)
        #endregion SUNX Extensions

        #region WIN Extensions
        #region GL_WIN_phong_shading (113)
        #region GL_WIN_phong_shading Constants
        #region GL_PHONG_WIN
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PHONG_WIN 0x80EA
        public const int GL_PHONG_WIN = 0x80EA;
        #endregion GL_PHONG_WIN

        #region GL_PHONG_HINT_WIN
        /// <summary>
        /// 
        /// </summary>
        // #define GL_PHONG_HINT_WIN 0x80EB
        public const int GL_PHONG_HINT_WIN = 0x80EB;
        #endregion GL_PHONG_HINT_WIN
        #endregion GL_WIN_phong_shading Constants
        #endregion GL_WIN_phong_shading (113)

        #region GL_WIN_specular_fog (114)
        #region GL_WIN_specular_fog Constants
        #region GL_FOG_SPECULAR_TEXTURE_WIN
        /// <summary>
        /// 
        /// </summary>
        // #define GL_FOG_SPECULAR_TEXTURE_WIN 0x80EC
        public const int GL_FOG_SPECULAR_TEXTURE_WIN = 0x80EC;
        #endregion GL_FOG_SPECULAR_TEXTURE_WIN
        #endregion GL_WIN_specular_fog Constants
        #endregion GL_WIN_specular_fog (114)
        #endregion WIN Extensions


        // TODO: Figure out where this goes
        #region void glDrawRangeElements([In] IntPtr extensionPointer, int mode, int start, int end, int count, int type, IntPtr indices)
        #if WIN32
        [IlasmAttribute(".maxstack 7\r\nldarg mode\r\nldarg start\r\nldarg end\r\nldarg count\r\nldarg type\r\nldarg indices\r\nldarg extensionPointer\r\ncalli unmanaged stdcall void([in]int32,[in]int32,[in]int32,[in]int32, [in]int32, [in]native int)\r\nret")]
        #elif UNIX
        [IlasmAttribute(".maxstack 7\r\nldarg mode\r\nldarg start\r\nldarg end\r\nldarg count\r\nldarg type\r\nldarg indices\r\nldarg extensionPointer\r\ncalli unmanaged cdecl void([in]int32,[in]int32,[in]int32,[in]int32, [in]int32, [in]native int)\r\nret")]
        #endif
        public static void glDrawRangeElements([In] IntPtr extensionPointer, int mode, int start, int end, int count, int type, IntPtr indices) { throw new NotImplementedException( "IL replacement failure." ); }
        #endregion void glDrawRangeElements([In] IntPtr extensionPointer, int mode, int start, int end, int count, int type, IntPtr indices)
    }
}
